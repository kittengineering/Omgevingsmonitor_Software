
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012450  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  08012510  08012510  00013510  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080133c0  080133c0  0001531c  2**0
                  CONTENTS
  4 .ARM          00000008  080133c0  080133c0  000143c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080133c8  080133c8  0001531c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080133c8  080133c8  000143c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080133cc  080133cc  000143cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000031c  20000000  080133d0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c00  2000031c  080136ec  0001531c  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20001f1c  080136ec  00015f1c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0001531c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00020d0e  00000000  00000000  00015344  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005894  00000000  00000000  00036052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a98  00000000  00000000  0003b8e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001450  00000000  00000000  0003d380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bf21  00000000  00000000  0003e7d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028fc4  00000000  00000000  0005a6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092f63  00000000  00000000  000836b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00116618  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007304  00000000  00000000  0011665c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0011d960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000031c 	.word	0x2000031c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080124f8 	.word	0x080124f8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000320 	.word	0x20000320
 8000104:	080124f8 	.word	0x080124f8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	08012e94 	.word	0x08012e94
 8000d08:	08012ed4 	.word	0x08012ed4
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	08012f10 	.word	0x08012f10
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 8003554:	4b03      	ldr	r3, [pc, #12]	@ (8003564 <batteryInit+0x18>)
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	601a      	str	r2, [r3, #0]
}
 800355a:	46c0      	nop			@ (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b002      	add	sp, #8
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	20000338 	.word	0x20000338

08003568 <checkCharges>:

void checkCharges(){
 8003568:	b5b0      	push	{r4, r5, r7, lr}
 800356a:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 800356c:	4b41      	ldr	r3, [pc, #260]	@ (8003674 <checkCharges+0x10c>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	0018      	movs	r0, r3
 8003572:	f005 fa0b 	bl	800898c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 8003576:	4b3f      	ldr	r3, [pc, #252]	@ (8003674 <checkCharges+0x10c>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2101      	movs	r1, #1
 800357c:	0018      	movs	r0, r3
 800357e:	f005 fa59 	bl	8008a34 <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 8003582:	4b3c      	ldr	r3, [pc, #240]	@ (8003674 <checkCharges+0x10c>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	0018      	movs	r0, r3
 8003588:	f005 faf0 	bl	8008b6c <HAL_ADC_GetValue>
 800358c:	0003      	movs	r3, r0
 800358e:	0018      	movs	r0, r3
 8003590:	f7fd ffe8 	bl	8001564 <__aeabi_ui2f>
 8003594:	1c03      	adds	r3, r0, #0
 8003596:	1c18      	adds	r0, r3, #0
 8003598:	f7ff fee2 	bl	8003360 <__aeabi_f2d>
 800359c:	2200      	movs	r2, #0
 800359e:	4b36      	ldr	r3, [pc, #216]	@ (8003678 <checkCharges+0x110>)
 80035a0:	f7fe fb86 	bl	8001cb0 <__aeabi_ddiv>
 80035a4:	0002      	movs	r2, r0
 80035a6:	000b      	movs	r3, r1
 80035a8:	0014      	movs	r4, r2
 80035aa:	001d      	movs	r5, r3
 80035ac:	4b33      	ldr	r3, [pc, #204]	@ (800367c <checkCharges+0x114>)
 80035ae:	881b      	ldrh	r3, [r3, #0]
 80035b0:	0018      	movs	r0, r3
 80035b2:	f7ff fe83 	bl	80032bc <__aeabi_i2d>
 80035b6:	0002      	movs	r2, r0
 80035b8:	000b      	movs	r3, r1
 80035ba:	0020      	movs	r0, r4
 80035bc:	0029      	movs	r1, r5
 80035be:	f7fe ffbb 	bl	8002538 <__aeabi_dmul>
 80035c2:	0002      	movs	r2, r0
 80035c4:	000b      	movs	r3, r1
 80035c6:	0010      	movs	r0, r2
 80035c8:	0019      	movs	r1, r3
 80035ca:	0002      	movs	r2, r0
 80035cc:	000b      	movs	r3, r1
 80035ce:	f7fe f80b 	bl	80015e8 <__aeabi_dadd>
 80035d2:	0002      	movs	r2, r0
 80035d4:	000b      	movs	r3, r1
 80035d6:	0010      	movs	r0, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	f7ff ff09 	bl	80033f0 <__aeabi_d2f>
 80035de:	1c02      	adds	r2, r0, #0
 80035e0:	4b27      	ldr	r3, [pc, #156]	@ (8003680 <checkCharges+0x118>)
 80035e2:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 80035e4:	4b23      	ldr	r3, [pc, #140]	@ (8003674 <checkCharges+0x10c>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	0018      	movs	r0, r3
 80035ea:	f005 f9cf 	bl	800898c <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035ee:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <checkCharges+0x10c>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	2101      	movs	r1, #1
 80035f4:	0018      	movs	r0, r3
 80035f6:	f005 fa1d 	bl	8008a34 <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035fa:	4b1e      	ldr	r3, [pc, #120]	@ (8003674 <checkCharges+0x10c>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	0018      	movs	r0, r3
 8003600:	f005 fab4 	bl	8008b6c <HAL_ADC_GetValue>
 8003604:	0003      	movs	r3, r0
 8003606:	0018      	movs	r0, r3
 8003608:	f7fd ffac 	bl	8001564 <__aeabi_ui2f>
 800360c:	1c03      	adds	r3, r0, #0
 800360e:	1c18      	adds	r0, r3, #0
 8003610:	f7ff fea6 	bl	8003360 <__aeabi_f2d>
 8003614:	2200      	movs	r2, #0
 8003616:	4b18      	ldr	r3, [pc, #96]	@ (8003678 <checkCharges+0x110>)
 8003618:	f7fe fb4a 	bl	8001cb0 <__aeabi_ddiv>
 800361c:	0002      	movs	r2, r0
 800361e:	000b      	movs	r3, r1
 8003620:	0014      	movs	r4, r2
 8003622:	001d      	movs	r5, r3
 8003624:	4b15      	ldr	r3, [pc, #84]	@ (800367c <checkCharges+0x114>)
 8003626:	881b      	ldrh	r3, [r3, #0]
 8003628:	0018      	movs	r0, r3
 800362a:	f7ff fe47 	bl	80032bc <__aeabi_i2d>
 800362e:	0002      	movs	r2, r0
 8003630:	000b      	movs	r3, r1
 8003632:	0020      	movs	r0, r4
 8003634:	0029      	movs	r1, r5
 8003636:	f7fe ff7f 	bl	8002538 <__aeabi_dmul>
 800363a:	0002      	movs	r2, r0
 800363c:	000b      	movs	r3, r1
 800363e:	0010      	movs	r0, r2
 8003640:	0019      	movs	r1, r3
 8003642:	0002      	movs	r2, r0
 8003644:	000b      	movs	r3, r1
 8003646:	f7fd ffcf 	bl	80015e8 <__aeabi_dadd>
 800364a:	0002      	movs	r2, r0
 800364c:	000b      	movs	r3, r1
 800364e:	0010      	movs	r0, r2
 8003650:	0019      	movs	r1, r3
 8003652:	f7ff fecd 	bl	80033f0 <__aeabi_d2f>
 8003656:	1c02      	adds	r2, r0, #0
 8003658:	4b0a      	ldr	r3, [pc, #40]	@ (8003684 <checkCharges+0x11c>)
 800365a:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <checkCharges+0x118>)
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	4b08      	ldr	r3, [pc, #32]	@ (8003684 <checkCharges+0x11c>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	1c19      	adds	r1, r3, #0
 8003666:	1c10      	adds	r0, r2, #0
 8003668:	f000 f80e 	bl	8003688 <setCharges>
}
 800366c:	46c0      	nop			@ (mov r8, r8)
 800366e:	46bd      	mov	sp, r7
 8003670:	bdb0      	pop	{r4, r5, r7, pc}
 8003672:	46c0      	nop			@ (mov r8, r8)
 8003674:	20000338 	.word	0x20000338
 8003678:	40affe00 	.word	0x40affe00
 800367c:	20000000 	.word	0x20000000
 8003680:	2000033c 	.word	0x2000033c
 8003684:	20000340 	.word	0x20000340

08003688 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 8003688:	b580      	push	{r7, lr}
 800368a:	b082      	sub	sp, #8
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 8003692:	4b05      	ldr	r3, [pc, #20]	@ (80036a8 <setCharges+0x20>)
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 8003698:	4b04      	ldr	r3, [pc, #16]	@ (80036ac <setCharges+0x24>)
 800369a:	683a      	ldr	r2, [r7, #0]
 800369c:	601a      	str	r2, [r3, #0]
}
 800369e:	46c0      	nop			@ (mov r8, r8)
 80036a0:	46bd      	mov	sp, r7
 80036a2:	b002      	add	sp, #8
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	46c0      	nop			@ (mov r8, r8)
 80036a8:	20000454 	.word	0x20000454
 80036ac:	20000458 	.word	0x20000458

080036b0 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	1dbb      	adds	r3, r7, #6
 80036bc:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80036be:	4b07      	ldr	r3, [pc, #28]	@ (80036dc <setMeasurement+0x2c>)
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80036c4:	4b06      	ldr	r3, [pc, #24]	@ (80036e0 <setMeasurement+0x30>)
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80036ca:	4b06      	ldr	r3, [pc, #24]	@ (80036e4 <setMeasurement+0x34>)
 80036cc:	1dba      	adds	r2, r7, #6
 80036ce:	8812      	ldrh	r2, [r2, #0]
 80036d0:	801a      	strh	r2, [r3, #0]
}
 80036d2:	46c0      	nop			@ (mov r8, r8)
 80036d4:	46bd      	mov	sp, r7
 80036d6:	b004      	add	sp, #16
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	46c0      	nop			@ (mov r8, r8)
 80036dc:	2000044c 	.word	0x2000044c
 80036e0:	20000450 	.word	0x20000450
 80036e4:	2000045c 	.word	0x2000045c

080036e8 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b082      	sub	sp, #8
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 80036f0:	4b04      	ldr	r3, [pc, #16]	@ (8003704 <ESP_Init+0x1c>)
 80036f2:	687a      	ldr	r2, [r7, #4]
 80036f4:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 80036f6:	4b04      	ldr	r3, [pc, #16]	@ (8003708 <ESP_Init+0x20>)
 80036f8:	2202      	movs	r2, #2
 80036fa:	701a      	strb	r2, [r3, #0]
}
 80036fc:	46c0      	nop			@ (mov r8, r8)
 80036fe:	46bd      	mov	sp, r7
 8003700:	b002      	add	sp, #8
 8003702:	bd80      	pop	{r7, pc}
 8003704:	20000344 	.word	0x20000344
 8003708:	200000fb 	.word	0x200000fb

0800370c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800370c:	b5b0      	push	{r4, r5, r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	000a      	movs	r2, r1
 8003716:	1cbb      	adds	r3, r7, #2
 8003718:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800371a:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <ESP_Send+0x48>)
 800371c:	6818      	ldr	r0, [r3, #0]
 800371e:	250f      	movs	r5, #15
 8003720:	197c      	adds	r4, r7, r5
 8003722:	1cbb      	adds	r3, r7, #2
 8003724:	881a      	ldrh	r2, [r3, #0]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	0019      	movs	r1, r3
 800372a:	f00a f9bd 	bl	800daa8 <HAL_UART_Transmit_DMA>
 800372e:	0003      	movs	r3, r0
 8003730:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003732:	197b      	adds	r3, r7, r5
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d007      	beq.n	800374a <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 800373a:	4a07      	ldr	r2, [pc, #28]	@ (8003758 <ESP_Send+0x4c>)
 800373c:	4b07      	ldr	r3, [pc, #28]	@ (800375c <ESP_Send+0x50>)
 800373e:	0019      	movs	r1, r3
 8003740:	2003      	movs	r0, #3
 8003742:	f004 fb89 	bl	8007e58 <CreateLine>
    return false;
 8003746:	2300      	movs	r3, #0
 8003748:	e000      	b.n	800374c <ESP_Send+0x40>
  }
  return true;
 800374a:	2301      	movs	r3, #1
}
 800374c:	0018      	movs	r0, r3
 800374e:	46bd      	mov	sp, r7
 8003750:	b004      	add	sp, #16
 8003752:	bdb0      	pop	{r4, r5, r7, pc}
 8003754:	20000344 	.word	0x20000344
 8003758:	08012510 	.word	0x08012510
 800375c:	08012530 	.word	0x08012530

08003760 <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 8003760:	b5b0      	push	{r4, r5, r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	000a      	movs	r2, r1
 800376a:	1cfb      	adds	r3, r7, #3
 800376c:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 800376e:	4b12      	ldr	r3, [pc, #72]	@ (80037b8 <ESP_Receive+0x58>)
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003774:	4b11      	ldr	r3, [pc, #68]	@ (80037bc <ESP_Receive+0x5c>)
 8003776:	6818      	ldr	r0, [r3, #0]
 8003778:	1cfb      	adds	r3, r7, #3
 800377a:	781b      	ldrb	r3, [r3, #0]
 800377c:	b29a      	uxth	r2, r3
 800377e:	250f      	movs	r5, #15
 8003780:	197c      	adds	r4, r7, r5
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	0019      	movs	r1, r3
 8003786:	f00a fa1f 	bl	800dbc8 <HAL_UART_Receive_DMA>
 800378a:	0003      	movs	r3, r0
 800378c:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800378e:	197b      	adds	r3, r7, r5
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003796:	4a0a      	ldr	r2, [pc, #40]	@ (80037c0 <ESP_Receive+0x60>)
 8003798:	4b0a      	ldr	r3, [pc, #40]	@ (80037c4 <ESP_Receive+0x64>)
 800379a:	0019      	movs	r1, r3
 800379c:	2003      	movs	r0, #3
 800379e:	f004 fb5b 	bl	8007e58 <CreateLine>
    RxComplete = true;
 80037a2:	4b05      	ldr	r3, [pc, #20]	@ (80037b8 <ESP_Receive+0x58>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	701a      	strb	r2, [r3, #0]
    return false;
 80037a8:	2300      	movs	r3, #0
 80037aa:	e000      	b.n	80037ae <ESP_Receive+0x4e>
  }
  return true;
 80037ac:	2301      	movs	r3, #1
}
 80037ae:	0018      	movs	r0, r3
 80037b0:	46bd      	mov	sp, r7
 80037b2:	b004      	add	sp, #16
 80037b4:	bdb0      	pop	{r4, r5, r7, pc}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	20000348 	.word	0x20000348
 80037bc:	20000344 	.word	0x20000344
 80037c0:	08012534 	.word	0x08012534
 80037c4:	08012530 	.word	0x08012530

080037c8 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b082      	sub	sp, #8
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 80037d0:	4b08      	ldr	r3, [pc, #32]	@ (80037f4 <HAL_UART_RxCpltCallback+0x2c>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	687a      	ldr	r2, [r7, #4]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d108      	bne.n	80037ec <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 80037da:	4b07      	ldr	r3, [pc, #28]	@ (80037f8 <HAL_UART_RxCpltCallback+0x30>)
 80037dc:	2201      	movs	r2, #1
 80037de:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 80037e0:	4a06      	ldr	r2, [pc, #24]	@ (80037fc <HAL_UART_RxCpltCallback+0x34>)
 80037e2:	4b07      	ldr	r3, [pc, #28]	@ (8003800 <HAL_UART_RxCpltCallback+0x38>)
 80037e4:	0019      	movs	r1, r3
 80037e6:	2003      	movs	r0, #3
 80037e8:	f004 fb36 	bl	8007e58 <CreateLine>
  }
}
 80037ec:	46c0      	nop			@ (mov r8, r8)
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b002      	add	sp, #8
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	20000344 	.word	0x20000344
 80037f8:	20000348 	.word	0x20000348
 80037fc:	08012554 	.word	0x08012554
 8003800:	08012530 	.word	0x08012530

08003804 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003804:	b580      	push	{r7, lr}
 8003806:	b082      	sub	sp, #8
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800380c:	4b05      	ldr	r3, [pc, #20]	@ (8003824 <HAL_UART_ErrorCallback+0x20>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	687a      	ldr	r2, [r7, #4]
 8003812:	429a      	cmp	r2, r3
 8003814:	d102      	bne.n	800381c <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003816:	4b04      	ldr	r3, [pc, #16]	@ (8003828 <HAL_UART_ErrorCallback+0x24>)
 8003818:	2207      	movs	r2, #7
 800381a:	701a      	strb	r2, [r3, #0]
  }
}
 800381c:	46c0      	nop			@ (mov r8, r8)
 800381e:	46bd      	mov	sp, r7
 8003820:	b002      	add	sp, #8
 8003822:	bd80      	pop	{r7, pc}
 8003824:	20000344 	.word	0x20000344
 8003828:	200000fb 	.word	0x200000fb

0800382c <CreateMessage>:
uint16_t CreateMessage(){
 800382c:	b590      	push	{r4, r7, lr}
 800382e:	b085      	sub	sp, #20
 8003830:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 8003832:	1dbb      	adds	r3, r7, #6
 8003834:	2200      	movs	r2, #0
 8003836:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID1, Temperature);
 8003838:	4b3d      	ldr	r3, [pc, #244]	@ (8003930 <CreateMessage+0x104>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	1c18      	adds	r0, r3, #0
 800383e:	f7ff fd8f 	bl	8003360 <__aeabi_f2d>
 8003842:	0002      	movs	r2, r0
 8003844:	000b      	movs	r3, r1
 8003846:	4c3b      	ldr	r4, [pc, #236]	@ (8003934 <CreateMessage+0x108>)
 8003848:	493b      	ldr	r1, [pc, #236]	@ (8003938 <CreateMessage+0x10c>)
 800384a:	483c      	ldr	r0, [pc, #240]	@ (800393c <CreateMessage+0x110>)
 800384c:	9200      	str	r2, [sp, #0]
 800384e:	9301      	str	r3, [sp, #4]
 8003850:	0022      	movs	r2, r4
 8003852:	f00c fa37 	bl	800fcc4 <siprintf>
  messageLength += strlen(messagePart1);
 8003856:	4b39      	ldr	r3, [pc, #228]	@ (800393c <CreateMessage+0x110>)
 8003858:	0018      	movs	r0, r3
 800385a:	f7fc fc55 	bl	8000108 <strlen>
 800385e:	0003      	movs	r3, r0
 8003860:	b299      	uxth	r1, r3
 8003862:	1dbb      	adds	r3, r7, #6
 8003864:	1dba      	adds	r2, r7, #6
 8003866:	8812      	ldrh	r2, [r2, #0]
 8003868:	188a      	adds	r2, r1, r2
 800386a:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID2, Humidity);
 800386c:	4b34      	ldr	r3, [pc, #208]	@ (8003940 <CreateMessage+0x114>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	1c18      	adds	r0, r3, #0
 8003872:	f7ff fd75 	bl	8003360 <__aeabi_f2d>
 8003876:	0002      	movs	r2, r0
 8003878:	000b      	movs	r3, r1
 800387a:	4c32      	ldr	r4, [pc, #200]	@ (8003944 <CreateMessage+0x118>)
 800387c:	4932      	ldr	r1, [pc, #200]	@ (8003948 <CreateMessage+0x11c>)
 800387e:	4833      	ldr	r0, [pc, #204]	@ (800394c <CreateMessage+0x120>)
 8003880:	9200      	str	r2, [sp, #0]
 8003882:	9301      	str	r3, [sp, #4]
 8003884:	0022      	movs	r2, r4
 8003886:	f00c fa1d 	bl	800fcc4 <siprintf>
  messageLength += strlen(messagePart2);
 800388a:	4b30      	ldr	r3, [pc, #192]	@ (800394c <CreateMessage+0x120>)
 800388c:	0018      	movs	r0, r3
 800388e:	f7fc fc3b 	bl	8000108 <strlen>
 8003892:	0003      	movs	r3, r0
 8003894:	b299      	uxth	r1, r3
 8003896:	1dbb      	adds	r3, r7, #6
 8003898:	1dba      	adds	r2, r7, #6
 800389a:	8812      	ldrh	r2, [r2, #0]
 800389c:	188a      	adds	r2, r1, r2
 800389e:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":77", sensorID3);
 80038a0:	4a2b      	ldr	r2, [pc, #172]	@ (8003950 <CreateMessage+0x124>)
 80038a2:	492c      	ldr	r1, [pc, #176]	@ (8003954 <CreateMessage+0x128>)
 80038a4:	4b2c      	ldr	r3, [pc, #176]	@ (8003958 <CreateMessage+0x12c>)
 80038a6:	0018      	movs	r0, r3
 80038a8:	f00c fa0c 	bl	800fcc4 <siprintf>
  messageLength += strlen(messagePart3);
 80038ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <CreateMessage+0x12c>)
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7fc fc2a 	bl	8000108 <strlen>
 80038b4:	0003      	movs	r3, r0
 80038b6:	b299      	uxth	r1, r3
 80038b8:	1dbb      	adds	r3, r7, #6
 80038ba:	1dba      	adds	r2, r7, #6
 80038bc:	8812      	ldrh	r2, [r2, #0]
 80038be:	188a      	adds	r2, r1, r2
 80038c0:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d", sensorID4, VOCIndex);
 80038c2:	4b26      	ldr	r3, [pc, #152]	@ (800395c <CreateMessage+0x130>)
 80038c4:	881b      	ldrh	r3, [r3, #0]
 80038c6:	4a26      	ldr	r2, [pc, #152]	@ (8003960 <CreateMessage+0x134>)
 80038c8:	4926      	ldr	r1, [pc, #152]	@ (8003964 <CreateMessage+0x138>)
 80038ca:	4827      	ldr	r0, [pc, #156]	@ (8003968 <CreateMessage+0x13c>)
 80038cc:	f00c f9fa 	bl	800fcc4 <siprintf>
  messageLength += strlen(messagePart4);
 80038d0:	4b25      	ldr	r3, [pc, #148]	@ (8003968 <CreateMessage+0x13c>)
 80038d2:	0018      	movs	r0, r3
 80038d4:	f7fc fc18 	bl	8000108 <strlen>
 80038d8:	0003      	movs	r3, r0
 80038da:	b299      	uxth	r1, r3
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	1dba      	adds	r2, r7, #6
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	188a      	adds	r2, r1, r2
 80038e4:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID5, batteryCharge);
 80038e6:	4b21      	ldr	r3, [pc, #132]	@ (800396c <CreateMessage+0x140>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1c18      	adds	r0, r3, #0
 80038ec:	f7ff fd38 	bl	8003360 <__aeabi_f2d>
 80038f0:	0002      	movs	r2, r0
 80038f2:	000b      	movs	r3, r1
 80038f4:	4c1e      	ldr	r4, [pc, #120]	@ (8003970 <CreateMessage+0x144>)
 80038f6:	491f      	ldr	r1, [pc, #124]	@ (8003974 <CreateMessage+0x148>)
 80038f8:	481f      	ldr	r0, [pc, #124]	@ (8003978 <CreateMessage+0x14c>)
 80038fa:	9200      	str	r2, [sp, #0]
 80038fc:	9301      	str	r3, [sp, #4]
 80038fe:	0022      	movs	r2, r4
 8003900:	f00c f9e0 	bl	800fcc4 <siprintf>
  messageLength += strlen(messagePart5);
 8003904:	4b1c      	ldr	r3, [pc, #112]	@ (8003978 <CreateMessage+0x14c>)
 8003906:	0018      	movs	r0, r3
 8003908:	f7fc fbfe 	bl	8000108 <strlen>
 800390c:	0003      	movs	r3, r0
 800390e:	b299      	uxth	r1, r3
 8003910:	1dbb      	adds	r3, r7, #6
 8003912:	1dba      	adds	r2, r7, #6
 8003914:	8812      	ldrh	r2, [r2, #0]
 8003916:	188a      	adds	r2, r1, r2
 8003918:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 800391a:	1dbb      	adds	r3, r7, #6
 800391c:	1dba      	adds	r2, r7, #6
 800391e:	8812      	ldrh	r2, [r2, #0]
 8003920:	3214      	adds	r2, #20
 8003922:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003924:	1dbb      	adds	r3, r7, #6
 8003926:	881b      	ldrh	r3, [r3, #0]
}
 8003928:	0018      	movs	r0, r3
 800392a:	46bd      	mov	sp, r7
 800392c:	b003      	add	sp, #12
 800392e:	bd90      	pop	{r4, r7, pc}
 8003930:	2000044c 	.word	0x2000044c
 8003934:	20000070 	.word	0x20000070
 8003938:	08012560 	.word	0x08012560
 800393c:	20000460 	.word	0x20000460
 8003940:	20000450 	.word	0x20000450
 8003944:	2000008c 	.word	0x2000008c
 8003948:	080125a4 	.word	0x080125a4
 800394c:	200004e0 	.word	0x200004e0
 8003950:	200000a8 	.word	0x200000a8
 8003954:	080125e8 	.word	0x080125e8
 8003958:	20000560 	.word	0x20000560
 800395c:	2000045c 	.word	0x2000045c
 8003960:	200000c4 	.word	0x200000c4
 8003964:	0801262c 	.word	0x0801262c
 8003968:	200005e0 	.word	0x200005e0
 800396c:	20000454 	.word	0x20000454
 8003970:	200000e0 	.word	0x200000e0
 8003974:	08012670 	.word	0x08012670
 8003978:	20000660 	.word	0x20000660

0800397c <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 8003984:	2380      	movs	r3, #128	@ 0x80
 8003986:	009a      	lsls	r2, r3, #2
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <SetCommandBuffer+0x24>)
 800398c:	0018      	movs	r0, r3
 800398e:	f00c fa45 	bl	800fe1c <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003992:	4b04      	ldr	r3, [pc, #16]	@ (80039a4 <SetCommandBuffer+0x28>)
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
}
 8003998:	46c0      	nop			@ (mov r8, r8)
 800399a:	46bd      	mov	sp, r7
 800399c:	b002      	add	sp, #8
 800399e:	bd80      	pop	{r7, pc}
 80039a0:	200006ec 	.word	0x200006ec
 80039a4:	200008ec 	.word	0x200008ec

080039a8 <ParseBuffer>:

 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 80039a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039aa:	46c6      	mov	lr, r8
 80039ac:	b500      	push	{lr}
 80039ae:	b094      	sub	sp, #80	@ 0x50
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	61f8      	str	r0, [r7, #28]
 80039b4:	0008      	movs	r0, r1
 80039b6:	0011      	movs	r1, r2
 80039b8:	261a      	movs	r6, #26
 80039ba:	19bb      	adds	r3, r7, r6
 80039bc:	1c02      	adds	r2, r0, #0
 80039be:	801a      	strh	r2, [r3, #0]
 80039c0:	2319      	movs	r3, #25
 80039c2:	18fb      	adds	r3, r7, r3
 80039c4:	1c0a      	adds	r2, r1, #0
 80039c6:	701a      	strb	r2, [r3, #0]
 80039c8:	466b      	mov	r3, sp
 80039ca:	4698      	mov	r8, r3
  char tempBuf[len+1];
 80039cc:	19bb      	adds	r3, r7, r6
 80039ce:	881b      	ldrh	r3, [r3, #0]
 80039d0:	3301      	adds	r3, #1
 80039d2:	1e5a      	subs	r2, r3, #1
 80039d4:	647a      	str	r2, [r7, #68]	@ 0x44
 80039d6:	001a      	movs	r2, r3
 80039d8:	60ba      	str	r2, [r7, #8]
 80039da:	2200      	movs	r2, #0
 80039dc:	60fa      	str	r2, [r7, #12]
 80039de:	68b8      	ldr	r0, [r7, #8]
 80039e0:	68f9      	ldr	r1, [r7, #12]
 80039e2:	0002      	movs	r2, r0
 80039e4:	0f52      	lsrs	r2, r2, #29
 80039e6:	000e      	movs	r6, r1
 80039e8:	00f6      	lsls	r6, r6, #3
 80039ea:	617e      	str	r6, [r7, #20]
 80039ec:	697e      	ldr	r6, [r7, #20]
 80039ee:	4316      	orrs	r6, r2
 80039f0:	617e      	str	r6, [r7, #20]
 80039f2:	0002      	movs	r2, r0
 80039f4:	00d2      	lsls	r2, r2, #3
 80039f6:	613a      	str	r2, [r7, #16]
 80039f8:	001a      	movs	r2, r3
 80039fa:	603a      	str	r2, [r7, #0]
 80039fc:	2200      	movs	r2, #0
 80039fe:	607a      	str	r2, [r7, #4]
 8003a00:	6838      	ldr	r0, [r7, #0]
 8003a02:	6879      	ldr	r1, [r7, #4]
 8003a04:	0002      	movs	r2, r0
 8003a06:	0f52      	lsrs	r2, r2, #29
 8003a08:	000e      	movs	r6, r1
 8003a0a:	00f5      	lsls	r5, r6, #3
 8003a0c:	4315      	orrs	r5, r2
 8003a0e:	0002      	movs	r2, r0
 8003a10:	00d4      	lsls	r4, r2, #3
 8003a12:	3307      	adds	r3, #7
 8003a14:	08db      	lsrs	r3, r3, #3
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	466a      	mov	r2, sp
 8003a1a:	1ad3      	subs	r3, r2, r3
 8003a1c:	469d      	mov	sp, r3
 8003a1e:	466b      	mov	r3, sp
 8003a20:	3300      	adds	r3, #0
 8003a22:	643b      	str	r3, [r7, #64]	@ 0x40
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003a24:	2337      	movs	r3, #55	@ 0x37
 8003a26:	2118      	movs	r1, #24
 8003a28:	185b      	adds	r3, r3, r1
 8003a2a:	19db      	adds	r3, r3, r7
 8003a2c:	2203      	movs	r2, #3
 8003a2e:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003a30:	2334      	movs	r3, #52	@ 0x34
 8003a32:	185b      	adds	r3, r3, r1
 8003a34:	19db      	adds	r3, r3, r7
 8003a36:	2200      	movs	r2, #0
 8003a38:	801a      	strh	r2, [r3, #0]
 8003a3a:	e013      	b.n	8003a64 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003a3c:	2034      	movs	r0, #52	@ 0x34
 8003a3e:	2418      	movs	r4, #24
 8003a40:	1903      	adds	r3, r0, r4
 8003a42:	19db      	adds	r3, r3, r7
 8003a44:	881b      	ldrh	r3, [r3, #0]
 8003a46:	69fa      	ldr	r2, [r7, #28]
 8003a48:	18d2      	adds	r2, r2, r3
 8003a4a:	1903      	adds	r3, r0, r4
 8003a4c:	19db      	adds	r3, r3, r7
 8003a4e:	881b      	ldrh	r3, [r3, #0]
 8003a50:	7811      	ldrb	r1, [r2, #0]
 8003a52:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a54:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003a56:	1903      	adds	r3, r0, r4
 8003a58:	19db      	adds	r3, r3, r7
 8003a5a:	881a      	ldrh	r2, [r3, #0]
 8003a5c:	1903      	adds	r3, r0, r4
 8003a5e:	19db      	adds	r3, r3, r7
 8003a60:	3201      	adds	r2, #1
 8003a62:	801a      	strh	r2, [r3, #0]
 8003a64:	2334      	movs	r3, #52	@ 0x34
 8003a66:	2018      	movs	r0, #24
 8003a68:	181b      	adds	r3, r3, r0
 8003a6a:	19da      	adds	r2, r3, r7
 8003a6c:	211a      	movs	r1, #26
 8003a6e:	187b      	adds	r3, r7, r1
 8003a70:	8812      	ldrh	r2, [r2, #0]
 8003a72:	881b      	ldrh	r3, [r3, #0]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d3e1      	bcc.n	8003a3c <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003a78:	187b      	adds	r3, r7, r1
 8003a7a:	881b      	ldrh	r3, [r3, #0]
 8003a7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003a7e:	2100      	movs	r1, #0
 8003a80:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003a82:	2327      	movs	r3, #39	@ 0x27
 8003a84:	0004      	movs	r4, r0
 8003a86:	191b      	adds	r3, r3, r4
 8003a88:	19db      	adds	r3, r3, r7
 8003a8a:	224e      	movs	r2, #78	@ 0x4e
 8003a8c:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  const char OK[] = AT_RESPONSE_OK;
 8003a8e:	201c      	movs	r0, #28
 8003a90:	1903      	adds	r3, r0, r4
 8003a92:	19db      	adds	r3, r3, r7
 8003a94:	4a4f      	ldr	r2, [pc, #316]	@ (8003bd4 <ParseBuffer+0x22c>)
 8003a96:	8811      	ldrh	r1, [r2, #0]
 8003a98:	8019      	strh	r1, [r3, #0]
 8003a9a:	7892      	ldrb	r2, [r2, #2]
 8003a9c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003a9e:	2314      	movs	r3, #20
 8003aa0:	191b      	adds	r3, r3, r4
 8003aa2:	19db      	adds	r3, r3, r7
 8003aa4:	4a4c      	ldr	r2, [pc, #304]	@ (8003bd8 <ParseBuffer+0x230>)
 8003aa6:	6811      	ldr	r1, [r2, #0]
 8003aa8:	6019      	str	r1, [r3, #0]
 8003aaa:	8892      	ldrh	r2, [r2, #4]
 8003aac:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003aae:	230c      	movs	r3, #12
 8003ab0:	191b      	adds	r3, r3, r4
 8003ab2:	19db      	adds	r3, r3, r7
 8003ab4:	4a49      	ldr	r2, [pc, #292]	@ (8003bdc <ParseBuffer+0x234>)
 8003ab6:	6811      	ldr	r1, [r2, #0]
 8003ab8:	6019      	str	r1, [r3, #0]
 8003aba:	8892      	ldrh	r2, [r2, #4]
 8003abc:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003abe:	2308      	movs	r3, #8
 8003ac0:	0021      	movs	r1, r4
 8003ac2:	185b      	adds	r3, r3, r1
 8003ac4:	19db      	adds	r3, r3, r7
 8003ac6:	223e      	movs	r2, #62	@ 0x3e
 8003ac8:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003aca:	2319      	movs	r3, #25
 8003acc:	18fb      	adds	r3, r7, r3
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d108      	bne.n	8003ae6 <ParseBuffer+0x13e>
    ParsePoint = strstr(tempBuf, OK);
 8003ad4:	1843      	adds	r3, r0, r1
 8003ad6:	19da      	adds	r2, r3, r7
 8003ad8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ada:	0011      	movs	r1, r2
 8003adc:	0018      	movs	r0, r3
 8003ade:	f00c f9b1 	bl	800fe44 <strstr>
 8003ae2:	0003      	movs	r3, r0
 8003ae4:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003ae6:	2319      	movs	r3, #25
 8003ae8:	18fb      	adds	r3, r7, r3
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d10a      	bne.n	8003b06 <ParseBuffer+0x15e>
    ParsePoint = strstr(tempBuf, ready);
 8003af0:	230c      	movs	r3, #12
 8003af2:	2218      	movs	r2, #24
 8003af4:	189b      	adds	r3, r3, r2
 8003af6:	19da      	adds	r2, r3, r7
 8003af8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003afa:	0011      	movs	r1, r2
 8003afc:	0018      	movs	r0, r3
 8003afe:	f00c f9a1 	bl	800fe44 <strstr>
 8003b02:	0003      	movs	r3, r0
 8003b04:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003b06:	2319      	movs	r3, #25
 8003b08:	18fb      	adds	r3, r7, r3
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b02      	cmp	r3, #2
 8003b0e:	d10a      	bne.n	8003b26 <ParseBuffer+0x17e>
    ParsePoint = strstr(tempBuf, start);
 8003b10:	2308      	movs	r3, #8
 8003b12:	2218      	movs	r2, #24
 8003b14:	189b      	adds	r3, r3, r2
 8003b16:	19da      	adds	r2, r3, r7
 8003b18:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b1a:	0011      	movs	r1, r2
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f00c f991 	bl	800fe44 <strstr>
 8003b22:	0003      	movs	r3, r0
 8003b24:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003b26:	2314      	movs	r3, #20
 8003b28:	2418      	movs	r4, #24
 8003b2a:	191b      	adds	r3, r3, r4
 8003b2c:	19da      	adds	r2, r3, r7
 8003b2e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f00c f986 	bl	800fe44 <strstr>
 8003b38:	0003      	movs	r3, r0
 8003b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
  if(len > 1 ){
 8003b3c:	231a      	movs	r3, #26
 8003b3e:	18fb      	adds	r3, r7, r3
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	d939      	bls.n	8003bba <ParseBuffer+0x212>
    TestChar = *ParsePoint;
 8003b46:	2127      	movs	r1, #39	@ 0x27
 8003b48:	190b      	adds	r3, r1, r4
 8003b4a:	19db      	adds	r3, r3, r7
 8003b4c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b4e:	7812      	ldrb	r2, [r2, #0]
 8003b50:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003b52:	190b      	adds	r3, r1, r4
 8003b54:	19db      	adds	r3, r3, r7
 8003b56:	781b      	ldrb	r3, [r3, #0]
 8003b58:	2b4f      	cmp	r3, #79	@ 0x4f
 8003b5a:	d104      	bne.n	8003b66 <ParseBuffer+0x1be>
      status = RECEIVE_STATUS_OK;
 8003b5c:	2337      	movs	r3, #55	@ 0x37
 8003b5e:	191b      	adds	r3, r3, r4
 8003b60:	19db      	adds	r3, r3, r7
 8003b62:	2200      	movs	r2, #0
 8003b64:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003b66:	2327      	movs	r3, #39	@ 0x27
 8003b68:	2218      	movs	r2, #24
 8003b6a:	189b      	adds	r3, r3, r2
 8003b6c:	19db      	adds	r3, r3, r7
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b72      	cmp	r3, #114	@ 0x72
 8003b72:	d104      	bne.n	8003b7e <ParseBuffer+0x1d6>
      status = RECEIVE_STATUS_READY;
 8003b74:	2337      	movs	r3, #55	@ 0x37
 8003b76:	189b      	adds	r3, r3, r2
 8003b78:	19db      	adds	r3, r3, r7
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003b7e:	2327      	movs	r3, #39	@ 0x27
 8003b80:	2218      	movs	r2, #24
 8003b82:	189b      	adds	r3, r3, r2
 8003b84:	19db      	adds	r3, r3, r7
 8003b86:	781b      	ldrb	r3, [r3, #0]
 8003b88:	2b3e      	cmp	r3, #62	@ 0x3e
 8003b8a:	d104      	bne.n	8003b96 <ParseBuffer+0x1ee>
      status = RECEIVE_STATUS_START;
 8003b8c:	2337      	movs	r3, #55	@ 0x37
 8003b8e:	189b      	adds	r3, r3, r2
 8003b90:	19db      	adds	r3, r3, r7
 8003b92:	2205      	movs	r2, #5
 8003b94:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003b96:	2127      	movs	r1, #39	@ 0x27
 8003b98:	2018      	movs	r0, #24
 8003b9a:	180b      	adds	r3, r1, r0
 8003b9c:	19db      	adds	r3, r3, r7
 8003b9e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003ba0:	7812      	ldrb	r2, [r2, #0]
 8003ba2:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003ba4:	0002      	movs	r2, r0
 8003ba6:	188b      	adds	r3, r1, r2
 8003ba8:	19db      	adds	r3, r3, r7
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b45      	cmp	r3, #69	@ 0x45
 8003bae:	d104      	bne.n	8003bba <ParseBuffer+0x212>
      status = RECEIVE_STATUS_ERROR;
 8003bb0:	2337      	movs	r3, #55	@ 0x37
 8003bb2:	189b      	adds	r3, r3, r2
 8003bb4:	19db      	adds	r3, r3, r7
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003bba:	2337      	movs	r3, #55	@ 0x37
 8003bbc:	2218      	movs	r2, #24
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	19db      	adds	r3, r3, r7
 8003bc2:	781b      	ldrb	r3, [r3, #0]
 8003bc4:	46c5      	mov	sp, r8
//          if (TempIndex >= ESP_MAX_BUFFER_SIZE) {
//              TempIndex = 0;
//          }
//       }
//    }
}
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	b014      	add	sp, #80	@ 0x50
 8003bcc:	bc80      	pop	{r7}
 8003bce:	46b8      	mov	r8, r7
 8003bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003bd2:	46c0      	nop			@ (mov r8, r8)
 8003bd4:	080126b8 	.word	0x080126b8
 8003bd8:	080126bc 	.word	0x080126bc
 8003bdc:	080126c4 	.word	0x080126c4

08003be0 <PollAwake>:
/* line 228 to 383 contain the AT commands. This could be optimized by loading the commands into
 * an array and having the function handling the sending. This was the simple but verbose
 * implementation.
 */
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b082      	sub	sp, #8
 8003be4:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003be6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c1c <PollAwake+0x3c>)
 8003be8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	0018      	movs	r0, r3
 8003bee:	f7ff fec5 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7fc fa87 	bl	8000108 <strlen>
 8003bfa:	0003      	movs	r3, r0
 8003bfc:	b29a      	uxth	r2, r3
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	0011      	movs	r1, r2
 8003c02:	0018      	movs	r0, r3
 8003c04:	f7ff fd82 	bl	800370c <ESP_Send>
 8003c08:	1e03      	subs	r3, r0, #0
 8003c0a:	d001      	beq.n	8003c10 <PollAwake+0x30>
    return true;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	e000      	b.n	8003c12 <PollAwake+0x32>
  }
  else{
    return false;
 8003c10:	2300      	movs	r3, #0
  }
}
 8003c12:	0018      	movs	r0, r3
 8003c14:	46bd      	mov	sp, r7
 8003c16:	b002      	add	sp, #8
 8003c18:	bd80      	pop	{r7, pc}
 8003c1a:	46c0      	nop			@ (mov r8, r8)
 8003c1c:	080126cc 	.word	0x080126cc

08003c20 <RFPower>:
bool RFPower(){
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b082      	sub	sp, #8
 8003c24:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003c26:	4b0d      	ldr	r3, [pc, #52]	@ (8003c5c <RFPower+0x3c>)
 8003c28:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7ff fea5 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	0018      	movs	r0, r3
 8003c36:	f7fc fa67 	bl	8000108 <strlen>
 8003c3a:	0003      	movs	r3, r0
 8003c3c:	b29a      	uxth	r2, r3
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	0011      	movs	r1, r2
 8003c42:	0018      	movs	r0, r3
 8003c44:	f7ff fd62 	bl	800370c <ESP_Send>
 8003c48:	1e03      	subs	r3, r0, #0
 8003c4a:	d001      	beq.n	8003c50 <RFPower+0x30>
    return true;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e000      	b.n	8003c52 <RFPower+0x32>
  }
  else{
    return false;
 8003c50:	2300      	movs	r3, #0
  }
}
 8003c52:	0018      	movs	r0, r3
 8003c54:	46bd      	mov	sp, r7
 8003c56:	b002      	add	sp, #8
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	46c0      	nop			@ (mov r8, r8)
 8003c5c:	080126d4 	.word	0x080126d4

08003c60 <CheckRFPower>:
bool CheckRFPower(){
 8003c60:	b580      	push	{r7, lr}
 8003c62:	b082      	sub	sp, #8
 8003c64:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003c66:	4b0d      	ldr	r3, [pc, #52]	@ (8003c9c <CheckRFPower+0x3c>)
 8003c68:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	0018      	movs	r0, r3
 8003c6e:	f7ff fe85 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	0018      	movs	r0, r3
 8003c76:	f7fc fa47 	bl	8000108 <strlen>
 8003c7a:	0003      	movs	r3, r0
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	0011      	movs	r1, r2
 8003c82:	0018      	movs	r0, r3
 8003c84:	f7ff fd42 	bl	800370c <ESP_Send>
 8003c88:	1e03      	subs	r3, r0, #0
 8003c8a:	d001      	beq.n	8003c90 <CheckRFPower+0x30>
    return true;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e000      	b.n	8003c92 <CheckRFPower+0x32>
  }
  else{
    return false;
 8003c90:	2300      	movs	r3, #0
  }
}
 8003c92:	0018      	movs	r0, r3
 8003c94:	46bd      	mov	sp, r7
 8003c96:	b002      	add	sp, #8
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	46c0      	nop			@ (mov r8, r8)
 8003c9c:	080126e4 	.word	0x080126e4

08003ca0 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003ca0:	b580      	push	{r7, lr}
 8003ca2:	b082      	sub	sp, #8
 8003ca4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003ca6:	4b0d      	ldr	r3, [pc, #52]	@ (8003cdc <ATRestore+0x3c>)
 8003ca8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	0018      	movs	r0, r3
 8003cae:	f7ff fe65 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	0018      	movs	r0, r3
 8003cb6:	f7fc fa27 	bl	8000108 <strlen>
 8003cba:	0003      	movs	r3, r0
 8003cbc:	b29a      	uxth	r2, r3
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	0011      	movs	r1, r2
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	f7ff fd22 	bl	800370c <ESP_Send>
 8003cc8:	1e03      	subs	r3, r0, #0
 8003cca:	d001      	beq.n	8003cd0 <ATRestore+0x30>
    return true;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	e000      	b.n	8003cd2 <ATRestore+0x32>
  }
  else{
    return false;
 8003cd0:	2300      	movs	r3, #0
  }
}
 8003cd2:	0018      	movs	r0, r3
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b002      	add	sp, #8
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			@ (mov r8, r8)
 8003cdc:	080126f4 	.word	0x080126f4

08003ce0 <CWINIT>:
bool CWINIT(){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b082      	sub	sp, #8
 8003ce4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003ce6:	4b0d      	ldr	r3, [pc, #52]	@ (8003d1c <CWINIT+0x3c>)
 8003ce8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	0018      	movs	r0, r3
 8003cee:	f7ff fe45 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	0018      	movs	r0, r3
 8003cf6:	f7fc fa07 	bl	8000108 <strlen>
 8003cfa:	0003      	movs	r3, r0
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	0011      	movs	r1, r2
 8003d02:	0018      	movs	r0, r3
 8003d04:	f7ff fd02 	bl	800370c <ESP_Send>
 8003d08:	1e03      	subs	r3, r0, #0
 8003d0a:	d001      	beq.n	8003d10 <CWINIT+0x30>
    return true;
 8003d0c:	2301      	movs	r3, #1
 8003d0e:	e000      	b.n	8003d12 <CWINIT+0x32>
  }
  else{
    return false;
 8003d10:	2300      	movs	r3, #0
  }
}
 8003d12:	0018      	movs	r0, r3
 8003d14:	46bd      	mov	sp, r7
 8003d16:	b002      	add	sp, #8
 8003d18:	bd80      	pop	{r7, pc}
 8003d1a:	46c0      	nop			@ (mov r8, r8)
 8003d1c:	08012704 	.word	0x08012704

08003d20 <CWMODE1>:
bool CWMODE1(){
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003d26:	4b0d      	ldr	r3, [pc, #52]	@ (8003d5c <CWMODE1+0x3c>)
 8003d28:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0018      	movs	r0, r3
 8003d2e:	f7ff fe25 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	0018      	movs	r0, r3
 8003d36:	f7fc f9e7 	bl	8000108 <strlen>
 8003d3a:	0003      	movs	r3, r0
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	0011      	movs	r1, r2
 8003d42:	0018      	movs	r0, r3
 8003d44:	f7ff fce2 	bl	800370c <ESP_Send>
 8003d48:	1e03      	subs	r3, r0, #0
 8003d4a:	d001      	beq.n	8003d50 <CWMODE1+0x30>
    return true;
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	e000      	b.n	8003d52 <CWMODE1+0x32>
  }
  else{
    return false;
 8003d50:	2300      	movs	r3, #0
  }
}
 8003d52:	0018      	movs	r0, r3
 8003d54:	46bd      	mov	sp, r7
 8003d56:	b002      	add	sp, #8
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	46c0      	nop			@ (mov r8, r8)
 8003d5c:	08012714 	.word	0x08012714

08003d60 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003d60:	b580      	push	{r7, lr}
 8003d62:	b082      	sub	sp, #8
 8003d64:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003d66:	4b0d      	ldr	r3, [pc, #52]	@ (8003d9c <CWAUTOCONN+0x3c>)
 8003d68:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0018      	movs	r0, r3
 8003d6e:	f7ff fe05 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	0018      	movs	r0, r3
 8003d76:	f7fc f9c7 	bl	8000108 <strlen>
 8003d7a:	0003      	movs	r3, r0
 8003d7c:	b29a      	uxth	r2, r3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	0011      	movs	r1, r2
 8003d82:	0018      	movs	r0, r3
 8003d84:	f7ff fcc2 	bl	800370c <ESP_Send>
 8003d88:	1e03      	subs	r3, r0, #0
 8003d8a:	d001      	beq.n	8003d90 <CWAUTOCONN+0x30>
    return true;
 8003d8c:	2301      	movs	r3, #1
 8003d8e:	e000      	b.n	8003d92 <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003d90:	2300      	movs	r3, #0
  }
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b002      	add	sp, #8
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			@ (mov r8, r8)
 8003d9c:	08012724 	.word	0x08012724

08003da0 <CWJAP>:
bool CWJAP(){
 8003da0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003da2:	46c6      	mov	lr, r8
 8003da4:	b500      	push	{lr}
 8003da6:	b0a2      	sub	sp, #136	@ 0x88
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	466b      	mov	r3, sp
 8003dac:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003dae:	2618      	movs	r6, #24
 8003db0:	19bb      	adds	r3, r7, r6
 8003db2:	2264      	movs	r2, #100	@ 0x64
 8003db4:	2100      	movs	r1, #0
 8003db6:	0018      	movs	r0, r3
 8003db8:	f00c f828 	bl	800fe0c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, Password);
 8003dbc:	4b34      	ldr	r3, [pc, #208]	@ (8003e90 <CWJAP+0xf0>)
 8003dbe:	4a35      	ldr	r2, [pc, #212]	@ (8003e94 <CWJAP+0xf4>)
 8003dc0:	4935      	ldr	r1, [pc, #212]	@ (8003e98 <CWJAP+0xf8>)
 8003dc2:	19b8      	adds	r0, r7, r6
 8003dc4:	f00b ff7e 	bl	800fcc4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003dc8:	19bb      	adds	r3, r7, r6
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f7fc f99c 	bl	8000108 <strlen>
 8003dd0:	0002      	movs	r2, r0
 8003dd2:	216f      	movs	r1, #111	@ 0x6f
 8003dd4:	0030      	movs	r0, r6
 8003dd6:	180b      	adds	r3, r1, r0
 8003dd8:	19db      	adds	r3, r3, r7
 8003dda:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003ddc:	180b      	adds	r3, r1, r0
 8003dde:	19db      	adds	r3, r3, r7
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	3301      	adds	r3, #1
 8003de4:	1e5a      	subs	r2, r3, #1
 8003de6:	2180      	movs	r1, #128	@ 0x80
 8003de8:	1879      	adds	r1, r7, r1
 8003dea:	600a      	str	r2, [r1, #0]
 8003dec:	001a      	movs	r2, r3
 8003dee:	60ba      	str	r2, [r7, #8]
 8003df0:	2200      	movs	r2, #0
 8003df2:	60fa      	str	r2, [r7, #12]
 8003df4:	68b8      	ldr	r0, [r7, #8]
 8003df6:	68f9      	ldr	r1, [r7, #12]
 8003df8:	0002      	movs	r2, r0
 8003dfa:	0f52      	lsrs	r2, r2, #29
 8003dfc:	000e      	movs	r6, r1
 8003dfe:	00f6      	lsls	r6, r6, #3
 8003e00:	617e      	str	r6, [r7, #20]
 8003e02:	697e      	ldr	r6, [r7, #20]
 8003e04:	4316      	orrs	r6, r2
 8003e06:	617e      	str	r6, [r7, #20]
 8003e08:	0002      	movs	r2, r0
 8003e0a:	00d2      	lsls	r2, r2, #3
 8003e0c:	613a      	str	r2, [r7, #16]
 8003e0e:	001a      	movs	r2, r3
 8003e10:	603a      	str	r2, [r7, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	607a      	str	r2, [r7, #4]
 8003e16:	6838      	ldr	r0, [r7, #0]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	0002      	movs	r2, r0
 8003e1c:	0f52      	lsrs	r2, r2, #29
 8003e1e:	000e      	movs	r6, r1
 8003e20:	00f5      	lsls	r5, r6, #3
 8003e22:	4315      	orrs	r5, r2
 8003e24:	0002      	movs	r2, r0
 8003e26:	00d4      	lsls	r4, r2, #3
 8003e28:	3307      	adds	r3, #7
 8003e2a:	08db      	lsrs	r3, r3, #3
 8003e2c:	00db      	lsls	r3, r3, #3
 8003e2e:	466a      	mov	r2, sp
 8003e30:	1ad3      	subs	r3, r2, r3
 8003e32:	469d      	mov	sp, r3
 8003e34:	466b      	mov	r3, sp
 8003e36:	3300      	adds	r3, #0
 8003e38:	67fb      	str	r3, [r7, #124]	@ 0x7c
  atCommand[len] = '\0';
 8003e3a:	246f      	movs	r4, #111	@ 0x6f
 8003e3c:	2018      	movs	r0, #24
 8003e3e:	1823      	adds	r3, r4, r0
 8003e40:	19db      	adds	r3, r3, r7
 8003e42:	781b      	ldrb	r3, [r3, #0]
 8003e44:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003e46:	2100      	movs	r1, #0
 8003e48:	54d1      	strb	r1, [r2, r3]
  strncpy(atCommand, atCommandBuff, len);
 8003e4a:	1823      	adds	r3, r4, r0
 8003e4c:	19db      	adds	r3, r3, r7
 8003e4e:	781a      	ldrb	r2, [r3, #0]
 8003e50:	0005      	movs	r5, r0
 8003e52:	1839      	adds	r1, r7, r0
 8003e54:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e56:	0018      	movs	r0, r3
 8003e58:	f00b ffe0 	bl	800fe1c <strncpy>
  SetCommandBuffer(atCommand);
 8003e5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e5e:	0018      	movs	r0, r3
 8003e60:	f7ff fd8c 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003e64:	1963      	adds	r3, r4, r5
 8003e66:	19db      	adds	r3, r3, r7
 8003e68:	781b      	ldrb	r3, [r3, #0]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003e6e:	0011      	movs	r1, r2
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7ff fc4b 	bl	800370c <ESP_Send>
 8003e76:	1e03      	subs	r3, r0, #0
 8003e78:	d001      	beq.n	8003e7e <CWJAP+0xde>
    return true;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e000      	b.n	8003e80 <CWJAP+0xe0>
  }
  else{
    return false;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	46c5      	mov	sp, r8
  }
}
 8003e82:	0018      	movs	r0, r3
 8003e84:	46bd      	mov	sp, r7
 8003e86:	b022      	add	sp, #136	@ 0x88
 8003e88:	bc80      	pop	{r7}
 8003e8a:	46b8      	mov	r8, r7
 8003e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e8e:	46c0      	nop			@ (mov r8, r8)
 8003e90:	20000010 	.word	0x20000010
 8003e94:	20000004 	.word	0x20000004
 8003e98:	08012738 	.word	0x08012738

08003e9c <CWMODE3>:
bool CWMODE3(){
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8003ed8 <CWMODE3+0x3c>)
 8003ea4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	0018      	movs	r0, r3
 8003eaa:	f7ff fd67 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	f7fc f929 	bl	8000108 <strlen>
 8003eb6:	0003      	movs	r3, r0
 8003eb8:	b29a      	uxth	r2, r3
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	0011      	movs	r1, r2
 8003ebe:	0018      	movs	r0, r3
 8003ec0:	f7ff fc24 	bl	800370c <ESP_Send>
 8003ec4:	1e03      	subs	r3, r0, #0
 8003ec6:	d001      	beq.n	8003ecc <CWMODE3+0x30>
    return true;
 8003ec8:	2301      	movs	r3, #1
 8003eca:	e000      	b.n	8003ece <CWMODE3+0x32>
  }
  else{
    return false;
 8003ecc:	2300      	movs	r3, #0
  }
}
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	46c0      	nop			@ (mov r8, r8)
 8003ed8:	08012750 	.word	0x08012750

08003edc <CWSAP>:
bool CWSAP(){
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8003f18 <CWSAP+0x3c>)
 8003ee4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	0018      	movs	r0, r3
 8003eea:	f7ff fd47 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	0018      	movs	r0, r3
 8003ef2:	f7fc f909 	bl	8000108 <strlen>
 8003ef6:	0003      	movs	r3, r0
 8003ef8:	b29a      	uxth	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0011      	movs	r1, r2
 8003efe:	0018      	movs	r0, r3
 8003f00:	f7ff fc04 	bl	800370c <ESP_Send>
 8003f04:	1e03      	subs	r3, r0, #0
 8003f06:	d001      	beq.n	8003f0c <CWSAP+0x30>
    return true;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e000      	b.n	8003f0e <CWSAP+0x32>
  }
  else{
    return false;
 8003f0c:	2300      	movs	r3, #0
  }
}
 8003f0e:	0018      	movs	r0, r3
 8003f10:	46bd      	mov	sp, r7
 8003f12:	b002      	add	sp, #8
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	46c0      	nop			@ (mov r8, r8)
 8003f18:	08012760 	.word	0x08012760

08003f1c <CIPMUX>:
bool CIPMUX(){
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b082      	sub	sp, #8
 8003f20:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8003f22:	4b0d      	ldr	r3, [pc, #52]	@ (8003f58 <CIPMUX+0x3c>)
 8003f24:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	0018      	movs	r0, r3
 8003f2a:	f7ff fd27 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	0018      	movs	r0, r3
 8003f32:	f7fc f8e9 	bl	8000108 <strlen>
 8003f36:	0003      	movs	r3, r0
 8003f38:	b29a      	uxth	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	0011      	movs	r1, r2
 8003f3e:	0018      	movs	r0, r3
 8003f40:	f7ff fbe4 	bl	800370c <ESP_Send>
 8003f44:	1e03      	subs	r3, r0, #0
 8003f46:	d001      	beq.n	8003f4c <CIPMUX+0x30>
    return true;
 8003f48:	2301      	movs	r3, #1
 8003f4a:	e000      	b.n	8003f4e <CIPMUX+0x32>
  }
  else{
    return false;
 8003f4c:	2300      	movs	r3, #0
  }
}
 8003f4e:	0018      	movs	r0, r3
 8003f50:	46bd      	mov	sp, r7
 8003f52:	b002      	add	sp, #8
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	46c0      	nop			@ (mov r8, r8)
 8003f58:	08012784 	.word	0x08012784

08003f5c <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8003f62:	4b0d      	ldr	r3, [pc, #52]	@ (8003f98 <WEBSERVER+0x3c>)
 8003f64:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff fd07 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f7fc f8c9 	bl	8000108 <strlen>
 8003f76:	0003      	movs	r3, r0
 8003f78:	b29a      	uxth	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	0011      	movs	r1, r2
 8003f7e:	0018      	movs	r0, r3
 8003f80:	f7ff fbc4 	bl	800370c <ESP_Send>
 8003f84:	1e03      	subs	r3, r0, #0
 8003f86:	d001      	beq.n	8003f8c <WEBSERVER+0x30>
    return true;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e000      	b.n	8003f8e <WEBSERVER+0x32>
  }
  else{
    return false;
 8003f8c:	2300      	movs	r3, #0
  }
}
 8003f8e:	0018      	movs	r0, r3
 8003f90:	46bd      	mov	sp, r7
 8003f92:	b002      	add	sp, #8
 8003f94:	bd80      	pop	{r7, pc}
 8003f96:	46c0      	nop			@ (mov r8, r8)
 8003f98:	08012794 	.word	0x08012794

08003f9c <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8003f9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f9e:	46c6      	mov	lr, r8
 8003fa0:	b500      	push	{lr}
 8003fa2:	4c47      	ldr	r4, [pc, #284]	@ (80040c0 <HTTPCPOST+0x124>)
 8003fa4:	44a5      	add	sp, r4
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	466b      	mov	r3, sp
 8003faa:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8003fac:	4b45      	ldr	r3, [pc, #276]	@ (80040c4 <HTTPCPOST+0x128>)
 8003fae:	2218      	movs	r2, #24
 8003fb0:	189b      	adds	r3, r3, r2
 8003fb2:	19dc      	adds	r4, r3, r7
 8003fb4:	f7ff fc3a 	bl	800382c <CreateMessage>
 8003fb8:	0003      	movs	r3, r0
 8003fba:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", API, length);
 8003fbc:	4b41      	ldr	r3, [pc, #260]	@ (80040c4 <HTTPCPOST+0x128>)
 8003fbe:	2218      	movs	r2, #24
 8003fc0:	189b      	adds	r3, r3, r2
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	881b      	ldrh	r3, [r3, #0]
 8003fc6:	4a40      	ldr	r2, [pc, #256]	@ (80040c8 <HTTPCPOST+0x12c>)
 8003fc8:	4940      	ldr	r1, [pc, #256]	@ (80040cc <HTTPCPOST+0x130>)
 8003fca:	201c      	movs	r0, #28
 8003fcc:	1838      	adds	r0, r7, r0
 8003fce:	f00b fe79 	bl	800fcc4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003fd2:	231c      	movs	r3, #28
 8003fd4:	18fb      	adds	r3, r7, r3
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	f7fc f896 	bl	8000108 <strlen>
 8003fdc:	0002      	movs	r2, r0
 8003fde:	4c3c      	ldr	r4, [pc, #240]	@ (80040d0 <HTTPCPOST+0x134>)
 8003fe0:	2318      	movs	r3, #24
 8003fe2:	18e3      	adds	r3, r4, r3
 8003fe4:	19db      	adds	r3, r3, r7
 8003fe6:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003fe8:	2318      	movs	r3, #24
 8003fea:	18e3      	adds	r3, r4, r3
 8003fec:	19db      	adds	r3, r3, r7
 8003fee:	781b      	ldrb	r3, [r3, #0]
 8003ff0:	3301      	adds	r3, #1
 8003ff2:	1e5a      	subs	r2, r3, #1
 8003ff4:	2198      	movs	r1, #152	@ 0x98
 8003ff6:	0089      	lsls	r1, r1, #2
 8003ff8:	2018      	movs	r0, #24
 8003ffa:	1809      	adds	r1, r1, r0
 8003ffc:	19c9      	adds	r1, r1, r7
 8003ffe:	600a      	str	r2, [r1, #0]
 8004000:	001a      	movs	r2, r3
 8004002:	0015      	movs	r5, r2
 8004004:	2200      	movs	r2, #0
 8004006:	0016      	movs	r6, r2
 8004008:	0028      	movs	r0, r5
 800400a:	0031      	movs	r1, r6
 800400c:	0002      	movs	r2, r0
 800400e:	0f52      	lsrs	r2, r2, #29
 8004010:	000d      	movs	r5, r1
 8004012:	00ed      	lsls	r5, r5, #3
 8004014:	617d      	str	r5, [r7, #20]
 8004016:	697d      	ldr	r5, [r7, #20]
 8004018:	4315      	orrs	r5, r2
 800401a:	617d      	str	r5, [r7, #20]
 800401c:	0002      	movs	r2, r0
 800401e:	00d2      	lsls	r2, r2, #3
 8004020:	613a      	str	r2, [r7, #16]
 8004022:	001a      	movs	r2, r3
 8004024:	603a      	str	r2, [r7, #0]
 8004026:	2200      	movs	r2, #0
 8004028:	607a      	str	r2, [r7, #4]
 800402a:	6838      	ldr	r0, [r7, #0]
 800402c:	6879      	ldr	r1, [r7, #4]
 800402e:	0002      	movs	r2, r0
 8004030:	0f52      	lsrs	r2, r2, #29
 8004032:	000d      	movs	r5, r1
 8004034:	00ed      	lsls	r5, r5, #3
 8004036:	60fd      	str	r5, [r7, #12]
 8004038:	68fd      	ldr	r5, [r7, #12]
 800403a:	4315      	orrs	r5, r2
 800403c:	60fd      	str	r5, [r7, #12]
 800403e:	0002      	movs	r2, r0
 8004040:	00d2      	lsls	r2, r2, #3
 8004042:	60ba      	str	r2, [r7, #8]
 8004044:	3307      	adds	r3, #7
 8004046:	08db      	lsrs	r3, r3, #3
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	466a      	mov	r2, sp
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	469d      	mov	sp, r3
 8004050:	466b      	mov	r3, sp
 8004052:	3300      	adds	r3, #0
 8004054:	2597      	movs	r5, #151	@ 0x97
 8004056:	00ad      	lsls	r5, r5, #2
 8004058:	2218      	movs	r2, #24
 800405a:	18aa      	adds	r2, r5, r2
 800405c:	19d2      	adds	r2, r2, r7
 800405e:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 8004060:	2318      	movs	r3, #24
 8004062:	18e3      	adds	r3, r4, r3
 8004064:	19db      	adds	r3, r3, r7
 8004066:	781a      	ldrb	r2, [r3, #0]
 8004068:	231c      	movs	r3, #28
 800406a:	18f9      	adds	r1, r7, r3
 800406c:	2318      	movs	r3, #24
 800406e:	18eb      	adds	r3, r5, r3
 8004070:	19db      	adds	r3, r3, r7
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	0018      	movs	r0, r3
 8004076:	f00b fed1 	bl	800fe1c <strncpy>
  SetCommandBuffer(atCommand);
 800407a:	2318      	movs	r3, #24
 800407c:	18eb      	adds	r3, r5, r3
 800407e:	19db      	adds	r3, r3, r7
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	0018      	movs	r0, r3
 8004084:	f7ff fc7a 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8004088:	2318      	movs	r3, #24
 800408a:	18e3      	adds	r3, r4, r3
 800408c:	19db      	adds	r3, r3, r7
 800408e:	781b      	ldrb	r3, [r3, #0]
 8004090:	b29a      	uxth	r2, r3
 8004092:	2318      	movs	r3, #24
 8004094:	18eb      	adds	r3, r5, r3
 8004096:	19db      	adds	r3, r3, r7
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	0011      	movs	r1, r2
 800409c:	0018      	movs	r0, r3
 800409e:	f7ff fb35 	bl	800370c <ESP_Send>
 80040a2:	1e03      	subs	r3, r0, #0
 80040a4:	d001      	beq.n	80040aa <HTTPCPOST+0x10e>
    return true;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e000      	b.n	80040ac <HTTPCPOST+0x110>
  }
  else{
    return false;
 80040aa:	2300      	movs	r3, #0
 80040ac:	46c5      	mov	sp, r8
  }
}
 80040ae:	0018      	movs	r0, r3
 80040b0:	46bd      	mov	sp, r7
 80040b2:	23a0      	movs	r3, #160	@ 0xa0
 80040b4:	009b      	lsls	r3, r3, #2
 80040b6:	449d      	add	sp, r3
 80040b8:	bc80      	pop	{r7}
 80040ba:	46b8      	mov	r8, r7
 80040bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040be:	46c0      	nop			@ (mov r8, r8)
 80040c0:	fffffd80 	.word	0xfffffd80
 80040c4:	00000266 	.word	0x00000266
 80040c8:	2000002c 	.word	0x2000002c
 80040cc:	080127ac 	.word	0x080127ac
 80040d0:	00000265 	.word	0x00000265

080040d4 <SENDDATA>:
bool SENDDATA(){
 80040d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040d6:	46c6      	mov	lr, r8
 80040d8:	b500      	push	{lr}
 80040da:	4c4c      	ldr	r4, [pc, #304]	@ (800420c <SENDDATA+0x138>)
 80040dc:	44a5      	add	sp, r4
 80040de:	af04      	add	r7, sp, #16
 80040e0:	466b      	mov	r3, sp
 80040e2:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80040e4:	23a4      	movs	r3, #164	@ 0xa4
 80040e6:	009a      	lsls	r2, r3, #2
 80040e8:	261c      	movs	r6, #28
 80040ea:	19bb      	adds	r3, r7, r6
 80040ec:	2100      	movs	r1, #0
 80040ee:	0018      	movs	r0, r3
 80040f0:	f00b fe8c 	bl	800fe0c <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 80040f4:	4a46      	ldr	r2, [pc, #280]	@ (8004210 <SENDDATA+0x13c>)
 80040f6:	4947      	ldr	r1, [pc, #284]	@ (8004214 <SENDDATA+0x140>)
 80040f8:	4847      	ldr	r0, [pc, #284]	@ (8004218 <SENDDATA+0x144>)
 80040fa:	19be      	adds	r6, r7, r6
 80040fc:	4b47      	ldr	r3, [pc, #284]	@ (800421c <SENDDATA+0x148>)
 80040fe:	9302      	str	r3, [sp, #8]
 8004100:	4b47      	ldr	r3, [pc, #284]	@ (8004220 <SENDDATA+0x14c>)
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	4b47      	ldr	r3, [pc, #284]	@ (8004224 <SENDDATA+0x150>)
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	0013      	movs	r3, r2
 800410a:	000a      	movs	r2, r1
 800410c:	0001      	movs	r1, r0
 800410e:	0030      	movs	r0, r6
 8004110:	f00b fdd8 	bl	800fcc4 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8004114:	231c      	movs	r3, #28
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	0018      	movs	r0, r3
 800411a:	f7fb fff5 	bl	8000108 <strlen>
 800411e:	0002      	movs	r2, r0
 8004120:	4e41      	ldr	r6, [pc, #260]	@ (8004228 <SENDDATA+0x154>)
 8004122:	2018      	movs	r0, #24
 8004124:	1831      	adds	r1, r6, r0
 8004126:	19cb      	adds	r3, r1, r7
 8004128:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 800412a:	1832      	adds	r2, r6, r0
 800412c:	19d3      	adds	r3, r2, r7
 800412e:	881b      	ldrh	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	1e5a      	subs	r2, r3, #1
 8004134:	21a6      	movs	r1, #166	@ 0xa6
 8004136:	0089      	lsls	r1, r1, #2
 8004138:	1809      	adds	r1, r1, r0
 800413a:	19c9      	adds	r1, r1, r7
 800413c:	600a      	str	r2, [r1, #0]
 800413e:	001a      	movs	r2, r3
 8004140:	60ba      	str	r2, [r7, #8]
 8004142:	2200      	movs	r2, #0
 8004144:	60fa      	str	r2, [r7, #12]
 8004146:	68b8      	ldr	r0, [r7, #8]
 8004148:	68f9      	ldr	r1, [r7, #12]
 800414a:	0002      	movs	r2, r0
 800414c:	0f52      	lsrs	r2, r2, #29
 800414e:	000e      	movs	r6, r1
 8004150:	00f6      	lsls	r6, r6, #3
 8004152:	617e      	str	r6, [r7, #20]
 8004154:	697e      	ldr	r6, [r7, #20]
 8004156:	4316      	orrs	r6, r2
 8004158:	617e      	str	r6, [r7, #20]
 800415a:	0002      	movs	r2, r0
 800415c:	00d2      	lsls	r2, r2, #3
 800415e:	613a      	str	r2, [r7, #16]
 8004160:	001a      	movs	r2, r3
 8004162:	603a      	str	r2, [r7, #0]
 8004164:	2200      	movs	r2, #0
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	6838      	ldr	r0, [r7, #0]
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	0002      	movs	r2, r0
 800416e:	0f52      	lsrs	r2, r2, #29
 8004170:	000e      	movs	r6, r1
 8004172:	00f5      	lsls	r5, r6, #3
 8004174:	4315      	orrs	r5, r2
 8004176:	0002      	movs	r2, r0
 8004178:	00d4      	lsls	r4, r2, #3
 800417a:	3307      	adds	r3, #7
 800417c:	08db      	lsrs	r3, r3, #3
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	466a      	mov	r2, sp
 8004182:	1ad3      	subs	r3, r2, r3
 8004184:	469d      	mov	sp, r3
 8004186:	ab04      	add	r3, sp, #16
 8004188:	3300      	adds	r3, #0
 800418a:	21a5      	movs	r1, #165	@ 0xa5
 800418c:	0089      	lsls	r1, r1, #2
 800418e:	2018      	movs	r0, #24
 8004190:	180a      	adds	r2, r1, r0
 8004192:	19d2      	adds	r2, r2, r7
 8004194:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 8004196:	4e24      	ldr	r6, [pc, #144]	@ (8004228 <SENDDATA+0x154>)
 8004198:	1832      	adds	r2, r6, r0
 800419a:	19d3      	adds	r3, r2, r7
 800419c:	881b      	ldrh	r3, [r3, #0]
 800419e:	3301      	adds	r3, #1
 80041a0:	001a      	movs	r2, r3
 80041a2:	000c      	movs	r4, r1
 80041a4:	0005      	movs	r5, r0
 80041a6:	1821      	adds	r1, r4, r0
 80041a8:	19cb      	adds	r3, r1, r7
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2100      	movs	r1, #0
 80041ae:	0018      	movs	r0, r3
 80041b0:	f00b fe2c 	bl	800fe0c <memset>
  strncpy(atCommand, atCommandBuff, len);
 80041b4:	0028      	movs	r0, r5
 80041b6:	1832      	adds	r2, r6, r0
 80041b8:	19d3      	adds	r3, r2, r7
 80041ba:	881a      	ldrh	r2, [r3, #0]
 80041bc:	231c      	movs	r3, #28
 80041be:	18f9      	adds	r1, r7, r3
 80041c0:	0005      	movs	r5, r0
 80041c2:	1963      	adds	r3, r4, r5
 80041c4:	19db      	adds	r3, r3, r7
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	0018      	movs	r0, r3
 80041ca:	f00b fe27 	bl	800fe1c <strncpy>
  SetCommandBuffer(atCommand);
 80041ce:	1963      	adds	r3, r4, r5
 80041d0:	19db      	adds	r3, r3, r7
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	0018      	movs	r0, r3
 80041d6:	f7ff fbd1 	bl	800397c <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80041da:	0028      	movs	r0, r5
 80041dc:	1833      	adds	r3, r6, r0
 80041de:	19db      	adds	r3, r3, r7
 80041e0:	881a      	ldrh	r2, [r3, #0]
 80041e2:	1823      	adds	r3, r4, r0
 80041e4:	19db      	adds	r3, r3, r7
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0011      	movs	r1, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7ff fa8e 	bl	800370c <ESP_Send>
 80041f0:	1e03      	subs	r3, r0, #0
 80041f2:	d001      	beq.n	80041f8 <SENDDATA+0x124>
    return true;
 80041f4:	2301      	movs	r3, #1
 80041f6:	e000      	b.n	80041fa <SENDDATA+0x126>
  }
  else{
    return false;
 80041f8:	2300      	movs	r3, #0
 80041fa:	46c5      	mov	sp, r8
  }
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	23ae      	movs	r3, #174	@ 0xae
 8004202:	009b      	lsls	r3, r3, #2
 8004204:	449d      	add	sp, r3
 8004206:	bc80      	pop	{r7}
 8004208:	46b8      	mov	r8, r7
 800420a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800420c:	fffffd38 	.word	0xfffffd38
 8004210:	200004e0 	.word	0x200004e0
 8004214:	20000460 	.word	0x20000460
 8004218:	080127e4 	.word	0x080127e4
 800421c:	20000660 	.word	0x20000660
 8004220:	200005e0 	.word	0x200005e0
 8004224:	20000560 	.word	0x20000560
 8004228:	0000029e 	.word	0x0000029e

0800422c <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 800422c:	b5b0      	push	{r4, r5, r7, lr}
 800422e:	b084      	sub	sp, #16
 8004230:	af00      	add	r7, sp, #0
 8004232:	0002      	movs	r2, r0
 8004234:	1dfb      	adds	r3, r7, #7
 8004236:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004238:	4b46      	ldr	r3, [pc, #280]	@ (8004354 <DMA_ProcessBuffer+0x128>)
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	685b      	ldr	r3, [r3, #4]
 800423e:	b2da      	uxtb	r2, r3
 8004240:	210e      	movs	r1, #14
 8004242:	187b      	adds	r3, r7, r1
 8004244:	43d2      	mvns	r2, r2
 8004246:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004248:	200f      	movs	r0, #15
 800424a:	183b      	adds	r3, r7, r0
 800424c:	2203      	movs	r2, #3
 800424e:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004250:	4b41      	ldr	r3, [pc, #260]	@ (8004358 <DMA_ProcessBuffer+0x12c>)
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	b2db      	uxtb	r3, r3
 8004256:	187a      	adds	r2, r7, r1
 8004258:	7812      	ldrb	r2, [r2, #0]
 800425a:	429a      	cmp	r2, r3
 800425c:	d11c      	bne.n	8004298 <DMA_ProcessBuffer+0x6c>
      if(retry >4){
 800425e:	4b3f      	ldr	r3, [pc, #252]	@ (800435c <DMA_ProcessBuffer+0x130>)
 8004260:	781b      	ldrb	r3, [r3, #0]
 8004262:	2b04      	cmp	r3, #4
 8004264:	d906      	bls.n	8004274 <DMA_ProcessBuffer+0x48>
        //EspState = ESP_STATE_SEND;
        retry = 0;
 8004266:	4b3d      	ldr	r3, [pc, #244]	@ (800435c <DMA_ProcessBuffer+0x130>)
 8004268:	2200      	movs	r2, #0
 800426a:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_TIMEOUT;
 800426c:	183b      	adds	r3, r7, r0
 800426e:	2206      	movs	r2, #6
 8004270:	701a      	strb	r2, [r3, #0]
 8004272:	e011      	b.n	8004298 <DMA_ProcessBuffer+0x6c>
      }
     else{
       retry ++;
 8004274:	4b39      	ldr	r3, [pc, #228]	@ (800435c <DMA_ProcessBuffer+0x130>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	3301      	adds	r3, #1
 800427a:	b2da      	uxtb	r2, r3
 800427c:	4b37      	ldr	r3, [pc, #220]	@ (800435c <DMA_ProcessBuffer+0x130>)
 800427e:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004280:	f004 f9e2 	bl	8008648 <HAL_GetTick>
 8004284:	0003      	movs	r3, r0
 8004286:	33f5      	adds	r3, #245	@ 0xf5
 8004288:	33ff      	adds	r3, #255	@ 0xff
 800428a:	001a      	movs	r2, r3
 800428c:	4b34      	ldr	r3, [pc, #208]	@ (8004360 <DMA_ProcessBuffer+0x134>)
 800428e:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004290:	230f      	movs	r3, #15
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	2204      	movs	r2, #4
 8004296:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004298:	4b2f      	ldr	r3, [pc, #188]	@ (8004358 <DMA_ProcessBuffer+0x12c>)
 800429a:	781b      	ldrb	r3, [r3, #0]
 800429c:	b2db      	uxtb	r3, r3
 800429e:	210e      	movs	r1, #14
 80042a0:	187a      	adds	r2, r7, r1
 80042a2:	7812      	ldrb	r2, [r2, #0]
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d048      	beq.n	800433a <DMA_ProcessBuffer+0x10e>
      retry = 0;
 80042a8:	4b2c      	ldr	r3, [pc, #176]	@ (800435c <DMA_ProcessBuffer+0x130>)
 80042aa:	2200      	movs	r2, #0
 80042ac:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 80042ae:	4b2a      	ldr	r3, [pc, #168]	@ (8004358 <DMA_ProcessBuffer+0x12c>)
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	b2db      	uxtb	r3, r3
 80042b4:	187a      	adds	r2, r7, r1
 80042b6:	7812      	ldrb	r2, [r2, #0]
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d917      	bls.n	80042ec <DMA_ProcessBuffer+0xc0>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 80042bc:	4b26      	ldr	r3, [pc, #152]	@ (8004358 <DMA_ProcessBuffer+0x12c>)
 80042be:	781b      	ldrb	r3, [r3, #0]
 80042c0:	b2db      	uxtb	r3, r3
 80042c2:	001a      	movs	r2, r3
 80042c4:	4b27      	ldr	r3, [pc, #156]	@ (8004364 <DMA_ProcessBuffer+0x138>)
 80042c6:	18d0      	adds	r0, r2, r3
 80042c8:	187b      	adds	r3, r7, r1
 80042ca:	781b      	ldrb	r3, [r3, #0]
 80042cc:	b29b      	uxth	r3, r3
 80042ce:	4a22      	ldr	r2, [pc, #136]	@ (8004358 <DMA_ProcessBuffer+0x12c>)
 80042d0:	7812      	ldrb	r2, [r2, #0]
 80042d2:	b2d2      	uxtb	r2, r2
 80042d4:	1a9b      	subs	r3, r3, r2
 80042d6:	b299      	uxth	r1, r3
 80042d8:	230f      	movs	r3, #15
 80042da:	18fc      	adds	r4, r7, r3
 80042dc:	1dfb      	adds	r3, r7, #7
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	001a      	movs	r2, r3
 80042e2:	f7ff fb61 	bl	80039a8 <ParseBuffer>
 80042e6:	0003      	movs	r3, r0
 80042e8:	7023      	strb	r3, [r4, #0]
 80042ea:	e026      	b.n	800433a <DMA_ProcessBuffer+0x10e>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80042ec:	4b1a      	ldr	r3, [pc, #104]	@ (8004358 <DMA_ProcessBuffer+0x12c>)
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	b2db      	uxtb	r3, r3
 80042f2:	001a      	movs	r2, r3
 80042f4:	4b1b      	ldr	r3, [pc, #108]	@ (8004364 <DMA_ProcessBuffer+0x138>)
 80042f6:	18d0      	adds	r0, r2, r3
 80042f8:	4b17      	ldr	r3, [pc, #92]	@ (8004358 <DMA_ProcessBuffer+0x12c>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	001a      	movs	r2, r3
 8004300:	23ff      	movs	r3, #255	@ 0xff
 8004302:	1a9b      	subs	r3, r3, r2
 8004304:	b299      	uxth	r1, r3
 8004306:	250f      	movs	r5, #15
 8004308:	197c      	adds	r4, r7, r5
 800430a:	1dfb      	adds	r3, r7, #7
 800430c:	781b      	ldrb	r3, [r3, #0]
 800430e:	001a      	movs	r2, r3
 8004310:	f7ff fb4a 	bl	80039a8 <ParseBuffer>
 8004314:	0003      	movs	r3, r0
 8004316:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 8004318:	220e      	movs	r2, #14
 800431a:	18bb      	adds	r3, r7, r2
 800431c:	781b      	ldrb	r3, [r3, #0]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d00b      	beq.n	800433a <DMA_ProcessBuffer+0x10e>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004322:	18bb      	adds	r3, r7, r2
 8004324:	781b      	ldrb	r3, [r3, #0]
 8004326:	b299      	uxth	r1, r3
 8004328:	197c      	adds	r4, r7, r5
 800432a:	1dfb      	adds	r3, r7, #7
 800432c:	781a      	ldrb	r2, [r3, #0]
 800432e:	4b0d      	ldr	r3, [pc, #52]	@ (8004364 <DMA_ProcessBuffer+0x138>)
 8004330:	0018      	movs	r0, r3
 8004332:	f7ff fb39 	bl	80039a8 <ParseBuffer>
 8004336:	0003      	movs	r3, r0
 8004338:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 800433a:	4b07      	ldr	r3, [pc, #28]	@ (8004358 <DMA_ProcessBuffer+0x12c>)
 800433c:	220e      	movs	r2, #14
 800433e:	18ba      	adds	r2, r7, r2
 8004340:	7812      	ldrb	r2, [r2, #0]
 8004342:	701a      	strb	r2, [r3, #0]
    return status;
 8004344:	230f      	movs	r3, #15
 8004346:	18fb      	adds	r3, r7, r3
 8004348:	781b      	ldrb	r3, [r3, #0]
}
 800434a:	0018      	movs	r0, r3
 800434c:	46bd      	mov	sp, r7
 800434e:	b004      	add	sp, #16
 8004350:	bdb0      	pop	{r4, r5, r7, pc}
 8004352:	46c0      	nop			@ (mov r8, r8)
 8004354:	2000122c 	.word	0x2000122c
 8004358:	200006e0 	.word	0x200006e0
 800435c:	200006e8 	.word	0x200006e8
 8004360:	200006e4 	.word	0x200006e4
 8004364:	2000034c 	.word	0x2000034c

08004368 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	0002      	movs	r2, r0
 8004370:	1dfb      	adds	r3, r7, #7
 8004372:	701a      	strb	r2, [r3, #0]
 8004374:	1dbb      	adds	r3, r7, #6
 8004376:	1c0a      	adds	r2, r1, #0
 8004378:	701a      	strb	r2, [r3, #0]
  bool value = false;
 800437a:	210f      	movs	r1, #15
 800437c:	187b      	adds	r3, r7, r1
 800437e:	2200      	movs	r2, #0
 8004380:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004382:	1dbb      	adds	r3, r7, #6
 8004384:	781b      	ldrb	r3, [r3, #0]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d105      	bne.n	8004396 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 800438a:	187b      	adds	r3, r7, r1
 800438c:	1dfa      	adds	r2, r7, #7
 800438e:	7812      	ldrb	r2, [r2, #0]
 8004390:	4251      	negs	r1, r2
 8004392:	414a      	adcs	r2, r1
 8004394:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004396:	1dbb      	adds	r3, r7, #6
 8004398:	781b      	ldrb	r3, [r3, #0]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800439e:	230f      	movs	r3, #15
 80043a0:	18fb      	adds	r3, r7, r3
 80043a2:	1dfa      	adds	r2, r7, #7
 80043a4:	7812      	ldrb	r2, [r2, #0]
 80043a6:	3a02      	subs	r2, #2
 80043a8:	4251      	negs	r1, r2
 80043aa:	414a      	adcs	r2, r1
 80043ac:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 80043ae:	1dbb      	adds	r3, r7, #6
 80043b0:	781b      	ldrb	r3, [r3, #0]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d107      	bne.n	80043c6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 80043b6:	230f      	movs	r3, #15
 80043b8:	18fb      	adds	r3, r7, r3
 80043ba:	1dfa      	adds	r2, r7, #7
 80043bc:	7812      	ldrb	r2, [r2, #0]
 80043be:	3a05      	subs	r2, #5
 80043c0:	4251      	negs	r1, r2
 80043c2:	414a      	adcs	r2, r1
 80043c4:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 80043c6:	230f      	movs	r3, #15
 80043c8:	18fb      	adds	r3, r7, r3
 80043ca:	781b      	ldrb	r3, [r3, #0]
}
 80043cc:	0018      	movs	r0, r3
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b004      	add	sp, #16
 80043d2:	bd80      	pop	{r7, pc}

080043d4 <AT_Send>:

bool AT_Send(AT_Commands state){
 80043d4:	b590      	push	{r4, r7, lr}
 80043d6:	b085      	sub	sp, #20
 80043d8:	af00      	add	r7, sp, #0
 80043da:	0002      	movs	r2, r0
 80043dc:	1dfb      	adds	r3, r7, #7
 80043de:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 80043e0:	230f      	movs	r3, #15
 80043e2:	18fb      	adds	r3, r7, r3
 80043e4:	2200      	movs	r2, #0
 80043e6:	701a      	strb	r2, [r3, #0]
  switch (state){
 80043e8:	1dfb      	adds	r3, r7, #7
 80043ea:	781b      	ldrb	r3, [r3, #0]
 80043ec:	2b0d      	cmp	r3, #13
 80043ee:	d900      	bls.n	80043f2 <AT_Send+0x1e>
 80043f0:	e122      	b.n	8004638 <AT_Send+0x264>
 80043f2:	009a      	lsls	r2, r3, #2
 80043f4:	4b94      	ldr	r3, [pc, #592]	@ (8004648 <AT_Send+0x274>)
 80043f6:	18d3      	adds	r3, r2, r3
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 80043fc:	4b93      	ldr	r3, [pc, #588]	@ (800464c <AT_Send+0x278>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	0018      	movs	r0, r3
 8004402:	f003 fcd3 	bl	8007dac <TimestampIsReached>
 8004406:	1e03      	subs	r3, r0, #0
 8004408:	d100      	bne.n	800440c <AT_Send+0x38>
 800440a:	e114      	b.n	8004636 <AT_Send+0x262>
    ATCommandSend = PollAwake();
 800440c:	230f      	movs	r3, #15
 800440e:	18fc      	adds	r4, r7, r3
 8004410:	f7ff fbe6 	bl	8003be0 <PollAwake>
 8004414:	0003      	movs	r3, r0
 8004416:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004418:	f004 f916 	bl	8008648 <HAL_GetTick>
 800441c:	0003      	movs	r3, r0
 800441e:	330a      	adds	r3, #10
 8004420:	001a      	movs	r2, r3
 8004422:	4b8a      	ldr	r3, [pc, #552]	@ (800464c <AT_Send+0x278>)
 8004424:	601a      	str	r2, [r3, #0]
  }
  break;
 8004426:	e106      	b.n	8004636 <AT_Send+0x262>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004428:	4a89      	ldr	r2, [pc, #548]	@ (8004650 <AT_Send+0x27c>)
 800442a:	4b8a      	ldr	r3, [pc, #552]	@ (8004654 <AT_Send+0x280>)
 800442c:	0019      	movs	r1, r3
 800442e:	2003      	movs	r0, #3
 8004430:	f003 fd12 	bl	8007e58 <CreateLine>
    ATCommandSend = RFPower();
 8004434:	230f      	movs	r3, #15
 8004436:	18fc      	adds	r4, r7, r3
 8004438:	f7ff fbf2 	bl	8003c20 <RFPower>
 800443c:	0003      	movs	r3, r0
 800443e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004440:	f004 f902 	bl	8008648 <HAL_GetTick>
 8004444:	0003      	movs	r3, r0
 8004446:	330a      	adds	r3, #10
 8004448:	001a      	movs	r2, r3
 800444a:	4b80      	ldr	r3, [pc, #512]	@ (800464c <AT_Send+0x278>)
 800444c:	601a      	str	r2, [r3, #0]
    break;
 800444e:	e0f3      	b.n	8004638 <AT_Send+0x264>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004450:	4a81      	ldr	r2, [pc, #516]	@ (8004658 <AT_Send+0x284>)
 8004452:	4b80      	ldr	r3, [pc, #512]	@ (8004654 <AT_Send+0x280>)
 8004454:	0019      	movs	r1, r3
 8004456:	2003      	movs	r0, #3
 8004458:	f003 fcfe 	bl	8007e58 <CreateLine>
    ATCommandSend = CheckRFPower();
 800445c:	230f      	movs	r3, #15
 800445e:	18fc      	adds	r4, r7, r3
 8004460:	f7ff fbfe 	bl	8003c60 <CheckRFPower>
 8004464:	0003      	movs	r3, r0
 8004466:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004468:	f004 f8ee 	bl	8008648 <HAL_GetTick>
 800446c:	0003      	movs	r3, r0
 800446e:	330a      	adds	r3, #10
 8004470:	001a      	movs	r2, r3
 8004472:	4b76      	ldr	r3, [pc, #472]	@ (800464c <AT_Send+0x278>)
 8004474:	601a      	str	r2, [r3, #0]
    break;
 8004476:	e0df      	b.n	8004638 <AT_Send+0x264>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004478:	4a78      	ldr	r2, [pc, #480]	@ (800465c <AT_Send+0x288>)
 800447a:	4b76      	ldr	r3, [pc, #472]	@ (8004654 <AT_Send+0x280>)
 800447c:	0019      	movs	r1, r3
 800447e:	2003      	movs	r0, #3
 8004480:	f003 fcea 	bl	8007e58 <CreateLine>
    ATCommandSend = ATRestore();
 8004484:	230f      	movs	r3, #15
 8004486:	18fc      	adds	r4, r7, r3
 8004488:	f7ff fc0a 	bl	8003ca0 <ATRestore>
 800448c:	0003      	movs	r3, r0
 800448e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004490:	f004 f8da 	bl	8008648 <HAL_GetTick>
 8004494:	0003      	movs	r3, r0
 8004496:	3332      	adds	r3, #50	@ 0x32
 8004498:	001a      	movs	r2, r3
 800449a:	4b6c      	ldr	r3, [pc, #432]	@ (800464c <AT_Send+0x278>)
 800449c:	601a      	str	r2, [r3, #0]
    break;
 800449e:	e0cb      	b.n	8004638 <AT_Send+0x264>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 80044a0:	4a6f      	ldr	r2, [pc, #444]	@ (8004660 <AT_Send+0x28c>)
 80044a2:	4b6c      	ldr	r3, [pc, #432]	@ (8004654 <AT_Send+0x280>)
 80044a4:	0019      	movs	r1, r3
 80044a6:	2003      	movs	r0, #3
 80044a8:	f003 fcd6 	bl	8007e58 <CreateLine>
    ATCommandSend = CWINIT();
 80044ac:	230f      	movs	r3, #15
 80044ae:	18fc      	adds	r4, r7, r3
 80044b0:	f7ff fc16 	bl	8003ce0 <CWINIT>
 80044b4:	0003      	movs	r3, r0
 80044b6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80044b8:	f004 f8c6 	bl	8008648 <HAL_GetTick>
 80044bc:	0003      	movs	r3, r0
 80044be:	33f5      	adds	r3, #245	@ 0xf5
 80044c0:	33ff      	adds	r3, #255	@ 0xff
 80044c2:	001a      	movs	r2, r3
 80044c4:	4b61      	ldr	r3, [pc, #388]	@ (800464c <AT_Send+0x278>)
 80044c6:	601a      	str	r2, [r3, #0]
    break;
 80044c8:	e0b6      	b.n	8004638 <AT_Send+0x264>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 80044ca:	4a66      	ldr	r2, [pc, #408]	@ (8004664 <AT_Send+0x290>)
 80044cc:	4b61      	ldr	r3, [pc, #388]	@ (8004654 <AT_Send+0x280>)
 80044ce:	0019      	movs	r1, r3
 80044d0:	2003      	movs	r0, #3
 80044d2:	f003 fcc1 	bl	8007e58 <CreateLine>
    ATCommandSend = CWMODE1();
 80044d6:	230f      	movs	r3, #15
 80044d8:	18fc      	adds	r4, r7, r3
 80044da:	f7ff fc21 	bl	8003d20 <CWMODE1>
 80044de:	0003      	movs	r3, r0
 80044e0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80044e2:	f004 f8b1 	bl	8008648 <HAL_GetTick>
 80044e6:	0003      	movs	r3, r0
 80044e8:	330a      	adds	r3, #10
 80044ea:	001a      	movs	r2, r3
 80044ec:	4b57      	ldr	r3, [pc, #348]	@ (800464c <AT_Send+0x278>)
 80044ee:	601a      	str	r2, [r3, #0]
    break;
 80044f0:	e0a2      	b.n	8004638 <AT_Send+0x264>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 80044f2:	4a5d      	ldr	r2, [pc, #372]	@ (8004668 <AT_Send+0x294>)
 80044f4:	4b57      	ldr	r3, [pc, #348]	@ (8004654 <AT_Send+0x280>)
 80044f6:	0019      	movs	r1, r3
 80044f8:	2003      	movs	r0, #3
 80044fa:	f003 fcad 	bl	8007e58 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 80044fe:	230f      	movs	r3, #15
 8004500:	18fc      	adds	r4, r7, r3
 8004502:	f7ff fc2d 	bl	8003d60 <CWAUTOCONN>
 8004506:	0003      	movs	r3, r0
 8004508:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800450a:	f004 f89d 	bl	8008648 <HAL_GetTick>
 800450e:	0003      	movs	r3, r0
 8004510:	330a      	adds	r3, #10
 8004512:	001a      	movs	r2, r3
 8004514:	4b4d      	ldr	r3, [pc, #308]	@ (800464c <AT_Send+0x278>)
 8004516:	601a      	str	r2, [r3, #0]
    break;
 8004518:	e08e      	b.n	8004638 <AT_Send+0x264>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800451a:	4a54      	ldr	r2, [pc, #336]	@ (800466c <AT_Send+0x298>)
 800451c:	4b4d      	ldr	r3, [pc, #308]	@ (8004654 <AT_Send+0x280>)
 800451e:	0019      	movs	r1, r3
 8004520:	2003      	movs	r0, #3
 8004522:	f003 fc99 	bl	8007e58 <CreateLine>
    ATCommandSend = CWJAP();
 8004526:	230f      	movs	r3, #15
 8004528:	18fc      	adds	r4, r7, r3
 800452a:	f7ff fc39 	bl	8003da0 <CWJAP>
 800452e:	0003      	movs	r3, r0
 8004530:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004532:	f004 f889 	bl	8008648 <HAL_GetTick>
 8004536:	0003      	movs	r3, r0
 8004538:	3332      	adds	r3, #50	@ 0x32
 800453a:	001a      	movs	r2, r3
 800453c:	4b43      	ldr	r3, [pc, #268]	@ (800464c <AT_Send+0x278>)
 800453e:	601a      	str	r2, [r3, #0]
    break;
 8004540:	e07a      	b.n	8004638 <AT_Send+0x264>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004542:	4a4b      	ldr	r2, [pc, #300]	@ (8004670 <AT_Send+0x29c>)
 8004544:	4b43      	ldr	r3, [pc, #268]	@ (8004654 <AT_Send+0x280>)
 8004546:	0019      	movs	r1, r3
 8004548:	2003      	movs	r0, #3
 800454a:	f003 fc85 	bl	8007e58 <CreateLine>
    ATCommandSend = CWMODE3();
 800454e:	230f      	movs	r3, #15
 8004550:	18fc      	adds	r4, r7, r3
 8004552:	f7ff fca3 	bl	8003e9c <CWMODE3>
 8004556:	0003      	movs	r3, r0
 8004558:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800455a:	f004 f875 	bl	8008648 <HAL_GetTick>
 800455e:	0003      	movs	r3, r0
 8004560:	330a      	adds	r3, #10
 8004562:	001a      	movs	r2, r3
 8004564:	4b39      	ldr	r3, [pc, #228]	@ (800464c <AT_Send+0x278>)
 8004566:	601a      	str	r2, [r3, #0]
    break;
 8004568:	e066      	b.n	8004638 <AT_Send+0x264>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 800456a:	4a42      	ldr	r2, [pc, #264]	@ (8004674 <AT_Send+0x2a0>)
 800456c:	4b39      	ldr	r3, [pc, #228]	@ (8004654 <AT_Send+0x280>)
 800456e:	0019      	movs	r1, r3
 8004570:	2003      	movs	r0, #3
 8004572:	f003 fc71 	bl	8007e58 <CreateLine>
    ATCommandSend = CWSAP();
 8004576:	230f      	movs	r3, #15
 8004578:	18fc      	adds	r4, r7, r3
 800457a:	f7ff fcaf 	bl	8003edc <CWSAP>
 800457e:	0003      	movs	r3, r0
 8004580:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004582:	f004 f861 	bl	8008648 <HAL_GetTick>
 8004586:	0003      	movs	r3, r0
 8004588:	330a      	adds	r3, #10
 800458a:	001a      	movs	r2, r3
 800458c:	4b2f      	ldr	r3, [pc, #188]	@ (800464c <AT_Send+0x278>)
 800458e:	601a      	str	r2, [r3, #0]
    break;
 8004590:	e052      	b.n	8004638 <AT_Send+0x264>

  case AT_CIPMUX:
    Debug("SET in station/soft-ap mode");
 8004592:	4a37      	ldr	r2, [pc, #220]	@ (8004670 <AT_Send+0x29c>)
 8004594:	4b2f      	ldr	r3, [pc, #188]	@ (8004654 <AT_Send+0x280>)
 8004596:	0019      	movs	r1, r3
 8004598:	2003      	movs	r0, #3
 800459a:	f003 fc5d 	bl	8007e58 <CreateLine>
    ATCommandSend = CIPMUX();
 800459e:	230f      	movs	r3, #15
 80045a0:	18fc      	adds	r4, r7, r3
 80045a2:	f7ff fcbb 	bl	8003f1c <CIPMUX>
 80045a6:	0003      	movs	r3, r0
 80045a8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045aa:	f004 f84d 	bl	8008648 <HAL_GetTick>
 80045ae:	0003      	movs	r3, r0
 80045b0:	330a      	adds	r3, #10
 80045b2:	001a      	movs	r2, r3
 80045b4:	4b25      	ldr	r3, [pc, #148]	@ (800464c <AT_Send+0x278>)
 80045b6:	601a      	str	r2, [r3, #0]
    break;
 80045b8:	e03e      	b.n	8004638 <AT_Send+0x264>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 80045ba:	4a2d      	ldr	r2, [pc, #180]	@ (8004670 <AT_Send+0x29c>)
 80045bc:	4b25      	ldr	r3, [pc, #148]	@ (8004654 <AT_Send+0x280>)
 80045be:	0019      	movs	r1, r3
 80045c0:	2003      	movs	r0, #3
 80045c2:	f003 fc49 	bl	8007e58 <CreateLine>
    ATCommandSend = WEBSERVER();
 80045c6:	230f      	movs	r3, #15
 80045c8:	18fc      	adds	r4, r7, r3
 80045ca:	f7ff fcc7 	bl	8003f5c <WEBSERVER>
 80045ce:	0003      	movs	r3, r0
 80045d0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045d2:	f004 f839 	bl	8008648 <HAL_GetTick>
 80045d6:	0003      	movs	r3, r0
 80045d8:	330a      	adds	r3, #10
 80045da:	001a      	movs	r2, r3
 80045dc:	4b1b      	ldr	r3, [pc, #108]	@ (800464c <AT_Send+0x278>)
 80045de:	601a      	str	r2, [r3, #0]
    break;
 80045e0:	e02a      	b.n	8004638 <AT_Send+0x264>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 80045e2:	4a23      	ldr	r2, [pc, #140]	@ (8004670 <AT_Send+0x29c>)
 80045e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004654 <AT_Send+0x280>)
 80045e6:	0019      	movs	r1, r3
 80045e8:	2003      	movs	r0, #3
 80045ea:	f003 fc35 	bl	8007e58 <CreateLine>
    ATCommandSend = HTTPCPOST();
 80045ee:	230f      	movs	r3, #15
 80045f0:	18fc      	adds	r4, r7, r3
 80045f2:	f7ff fcd3 	bl	8003f9c <HTTPCPOST>
 80045f6:	0003      	movs	r3, r0
 80045f8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80045fa:	f004 f825 	bl	8008648 <HAL_GetTick>
 80045fe:	0003      	movs	r3, r0
 8004600:	33f5      	adds	r3, #245	@ 0xf5
 8004602:	33ff      	adds	r3, #255	@ 0xff
 8004604:	001a      	movs	r2, r3
 8004606:	4b11      	ldr	r3, [pc, #68]	@ (800464c <AT_Send+0x278>)
 8004608:	601a      	str	r2, [r3, #0]
    break;
 800460a:	e015      	b.n	8004638 <AT_Send+0x264>

  case AT_SENDDATA:
    Debug("Send the data");
 800460c:	4a1a      	ldr	r2, [pc, #104]	@ (8004678 <AT_Send+0x2a4>)
 800460e:	4b11      	ldr	r3, [pc, #68]	@ (8004654 <AT_Send+0x280>)
 8004610:	0019      	movs	r1, r3
 8004612:	2003      	movs	r0, #3
 8004614:	f003 fc20 	bl	8007e58 <CreateLine>
    ATCommandSend = SENDDATA();
 8004618:	230f      	movs	r3, #15
 800461a:	18fc      	adds	r4, r7, r3
 800461c:	f7ff fd5a 	bl	80040d4 <SENDDATA>
 8004620:	0003      	movs	r3, r0
 8004622:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004624:	f004 f810 	bl	8008648 <HAL_GetTick>
 8004628:	0003      	movs	r3, r0
 800462a:	33f5      	adds	r3, #245	@ 0xf5
 800462c:	33ff      	adds	r3, #255	@ 0xff
 800462e:	001a      	movs	r2, r3
 8004630:	4b06      	ldr	r3, [pc, #24]	@ (800464c <AT_Send+0x278>)
 8004632:	601a      	str	r2, [r3, #0]
    break;
 8004634:	e000      	b.n	8004638 <AT_Send+0x264>
  break;
 8004636:	46c0      	nop			@ (mov r8, r8)

  }

  return(ATCommandSend);
 8004638:	230f      	movs	r3, #15
 800463a:	18fb      	adds	r3, r7, r3
 800463c:	781b      	ldrb	r3, [r3, #0]
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b005      	add	sp, #20
 8004644:	bd90      	pop	{r4, r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	08012f50 	.word	0x08012f50
 800464c:	200006e4 	.word	0x200006e4
 8004650:	08012804 	.word	0x08012804
 8004654:	08012530 	.word	0x08012530
 8004658:	08012818 	.word	0x08012818
 800465c:	0801282c 	.word	0x0801282c
 8004660:	0801283c 	.word	0x0801283c
 8004664:	08012850 	.word	0x08012850
 8004668:	08012868 	.word	0x08012868
 800466c:	08012880 	.word	0x08012880
 8004670:	08012894 	.word	0x08012894
 8004674:	080128b0 	.word	0x080128b0
 8004678:	080128cc 	.word	0x080128cc

0800467c <ESP_Upkeep>:

void ESP_Upkeep(void) {
 800467c:	b590      	push	{r4, r7, lr}
 800467e:	b083      	sub	sp, #12
 8004680:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004682:	1dfb      	adds	r3, r7, #7
 8004684:	2200      	movs	r2, #0
 8004686:	701a      	strb	r2, [r3, #0]
  uint8_t ATReceived = RECEIVE_STATUS_INCOMPLETE;
 8004688:	1dbb      	adds	r3, r7, #6
 800468a:	2203      	movs	r2, #3
 800468c:	701a      	strb	r2, [r3, #0]
  switch (EspState) {
 800468e:	4b83      	ldr	r3, [pc, #524]	@ (800489c <ESP_Upkeep+0x220>)
 8004690:	781b      	ldrb	r3, [r3, #0]
 8004692:	2b09      	cmp	r3, #9
 8004694:	d900      	bls.n	8004698 <ESP_Upkeep+0x1c>
 8004696:	e0f0      	b.n	800487a <ESP_Upkeep+0x1fe>
 8004698:	009a      	lsls	r2, r3, #2
 800469a:	4b81      	ldr	r3, [pc, #516]	@ (80048a0 <ESP_Upkeep+0x224>)
 800469c:	18d3      	adds	r3, r2, r3
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 80046a2:	4b7e      	ldr	r3, [pc, #504]	@ (800489c <ESP_Upkeep+0x220>)
 80046a4:	2201      	movs	r2, #1
 80046a6:	701a      	strb	r2, [r3, #0]
      break;
 80046a8:	e0f4      	b.n	8004894 <ESP_Upkeep+0x218>
//      ATCommands[offset++] = (ATCommands) {};
      // TODO: Add turning on the ESP32 and wait for ready after, so we know for sure that the ESP is on.
      // Initialization state
//      StartUpTime = GetCurrentHalTicks() + ESP_START_UP_TIME;
//      StartUpDone = false;
      if(!EspTurnedOn) {
 80046aa:	4b7e      	ldr	r3, [pc, #504]	@ (80048a4 <ESP_Upkeep+0x228>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2201      	movs	r2, #1
 80046b0:	4053      	eors	r3, r2
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d01e      	beq.n	80046f6 <ESP_Upkeep+0x7a>

        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80046b8:	2380      	movs	r3, #128	@ 0x80
 80046ba:	011b      	lsls	r3, r3, #4
 80046bc:	487a      	ldr	r0, [pc, #488]	@ (80048a8 <ESP_Upkeep+0x22c>)
 80046be:	2200      	movs	r2, #0
 80046c0:	0019      	movs	r1, r3
 80046c2:	f005 f957 	bl	8009974 <HAL_GPIO_WritePin>
//        // Turn ESP on.
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80046c6:	2380      	movs	r3, #128	@ 0x80
 80046c8:	011b      	lsls	r3, r3, #4
 80046ca:	4877      	ldr	r0, [pc, #476]	@ (80048a8 <ESP_Upkeep+0x22c>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	0019      	movs	r1, r3
 80046d0:	f005 f950 	bl	8009974 <HAL_GPIO_WritePin>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80046d4:	4b75      	ldr	r3, [pc, #468]	@ (80048ac <ESP_Upkeep+0x230>)
 80046d6:	2201      	movs	r2, #1
 80046d8:	2101      	movs	r1, #1
 80046da:	0018      	movs	r0, r3
 80046dc:	f005 f94a 	bl	8009974 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80046e0:	f003 ffb2 	bl	8008648 <HAL_GetTick>
 80046e4:	0003      	movs	r3, r0
 80046e6:	22af      	movs	r2, #175	@ 0xaf
 80046e8:	0092      	lsls	r2, r2, #2
 80046ea:	189a      	adds	r2, r3, r2
 80046ec:	4b70      	ldr	r3, [pc, #448]	@ (80048b0 <ESP_Upkeep+0x234>)
 80046ee:	601a      	str	r2, [r3, #0]

        EspTurnedOn = true;
 80046f0:	4b6c      	ldr	r3, [pc, #432]	@ (80048a4 <ESP_Upkeep+0x228>)
 80046f2:	2201      	movs	r2, #1
 80046f4:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80046f6:	4b6f      	ldr	r3, [pc, #444]	@ (80048b4 <ESP_Upkeep+0x238>)
 80046f8:	21ff      	movs	r1, #255	@ 0xff
 80046fa:	0018      	movs	r0, r3
 80046fc:	f7ff f830 	bl	8003760 <ESP_Receive>
 8004700:	1e03      	subs	r3, r0, #0
 8004702:	d100      	bne.n	8004706 <ESP_Upkeep+0x8a>
 8004704:	e0bf      	b.n	8004886 <ESP_Upkeep+0x20a>
        EspState = ESP_STATE_SEND;
 8004706:	4b65      	ldr	r3, [pc, #404]	@ (800489c <ESP_Upkeep+0x220>)
 8004708:	2204      	movs	r2, #4
 800470a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800470c:	e0bb      	b.n	8004886 <ESP_Upkeep+0x20a>

    case ESP_STATE_SEND:
        ATSend = AT_Send(nextATCommand);
 800470e:	4b6a      	ldr	r3, [pc, #424]	@ (80048b8 <ESP_Upkeep+0x23c>)
 8004710:	781b      	ldrb	r3, [r3, #0]
 8004712:	1dfc      	adds	r4, r7, #7
 8004714:	0018      	movs	r0, r3
 8004716:	f7ff fe5d 	bl	80043d4 <AT_Send>
 800471a:	0003      	movs	r3, r0
 800471c:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800471e:	1dfb      	adds	r3, r7, #7
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d100      	bne.n	8004728 <ESP_Upkeep+0xac>
 8004726:	e0b0      	b.n	800488a <ESP_Upkeep+0x20e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004728:	4b5c      	ldr	r3, [pc, #368]	@ (800489c <ESP_Upkeep+0x220>)
 800472a:	2203      	movs	r2, #3
 800472c:	701a      	strb	r2, [r3, #0]
        }
         break;
 800472e:	e0ac      	b.n	800488a <ESP_Upkeep+0x20e>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004730:	4b5f      	ldr	r3, [pc, #380]	@ (80048b0 <ESP_Upkeep+0x234>)
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	0018      	movs	r0, r3
 8004736:	f003 fb39 	bl	8007dac <TimestampIsReached>
 800473a:	1e03      	subs	r3, r0, #0
 800473c:	d100      	bne.n	8004740 <ESP_Upkeep+0xc4>
 800473e:	e0a6      	b.n	800488e <ESP_Upkeep+0x212>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004740:	4b5e      	ldr	r3, [pc, #376]	@ (80048bc <ESP_Upkeep+0x240>)
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	1dbc      	adds	r4, r7, #6
 8004746:	0018      	movs	r0, r3
 8004748:	f7ff fd70 	bl	800422c <DMA_ProcessBuffer>
 800474c:	0003      	movs	r3, r0
 800474e:	7023      	strb	r3, [r4, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004750:	4b5a      	ldr	r3, [pc, #360]	@ (80048bc <ESP_Upkeep+0x240>)
 8004752:	781a      	ldrb	r2, [r3, #0]
 8004754:	1d7c      	adds	r4, r7, #5
 8004756:	1dbb      	adds	r3, r7, #6
 8004758:	781b      	ldrb	r3, [r3, #0]
 800475a:	0011      	movs	r1, r2
 800475c:	0018      	movs	r0, r3
 800475e:	f7ff fe03 	bl	8004368 <ATCompare>
 8004762:	0003      	movs	r3, r0
 8004764:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004766:	1dbb      	adds	r3, r7, #6
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d102      	bne.n	8004774 <ESP_Upkeep+0xf8>
          EspState = ESP_STATE_SEND;
 800476e:	4b4b      	ldr	r3, [pc, #300]	@ (800489c <ESP_Upkeep+0x220>)
 8004770:	2204      	movs	r2, #4
 8004772:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004774:	1dbb      	adds	r3, r7, #6
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	2b03      	cmp	r3, #3
 800477a:	d106      	bne.n	800478a <ESP_Upkeep+0x10e>
          ESPTimeStamp = HAL_GetTick() + 10;
 800477c:	f003 ff64 	bl	8008648 <HAL_GetTick>
 8004780:	0003      	movs	r3, r0
 8004782:	330a      	adds	r3, #10
 8004784:	001a      	movs	r2, r3
 8004786:	4b4a      	ldr	r3, [pc, #296]	@ (80048b0 <ESP_Upkeep+0x234>)
 8004788:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 800478a:	1dbb      	adds	r3, r7, #6
 800478c:	781b      	ldrb	r3, [r3, #0]
 800478e:	2b06      	cmp	r3, #6
 8004790:	d113      	bne.n	80047ba <ESP_Upkeep+0x13e>
          if(nextATCommand != AT_SENDDATA){
 8004792:	4b49      	ldr	r3, [pc, #292]	@ (80048b8 <ESP_Upkeep+0x23c>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b0d      	cmp	r3, #13
 8004798:	d003      	beq.n	80047a2 <ESP_Upkeep+0x126>
            EspState = ESP_STATE_SEND;
 800479a:	4b40      	ldr	r3, [pc, #256]	@ (800489c <ESP_Upkeep+0x220>)
 800479c:	2204      	movs	r2, #4
 800479e:	701a      	strb	r2, [r3, #0]
 80047a0:	e00b      	b.n	80047ba <ESP_Upkeep+0x13e>
          }
          else{
            nextATCommand = AT_HTTPCPOST;
 80047a2:	4b45      	ldr	r3, [pc, #276]	@ (80048b8 <ESP_Upkeep+0x23c>)
 80047a4:	220c      	movs	r2, #12
 80047a6:	701a      	strb	r2, [r3, #0]
            ATCommands = AT_HTTPCPOST;
 80047a8:	4b45      	ldr	r3, [pc, #276]	@ (80048c0 <ESP_Upkeep+0x244>)
 80047aa:	220c      	movs	r2, #12
 80047ac:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 80047ae:	4b43      	ldr	r3, [pc, #268]	@ (80048bc <ESP_Upkeep+0x240>)
 80047b0:	2202      	movs	r2, #2
 80047b2:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 80047b4:	4b39      	ldr	r3, [pc, #228]	@ (800489c <ESP_Upkeep+0x220>)
 80047b6:	2204      	movs	r2, #4
 80047b8:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 80047ba:	1d7b      	adds	r3, r7, #5
 80047bc:	781b      	ldrb	r3, [r3, #0]
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d065      	beq.n	800488e <ESP_Upkeep+0x212>
          EspState = ESP_STATE_NEXT_AT;
 80047c2:	4b36      	ldr	r3, [pc, #216]	@ (800489c <ESP_Upkeep+0x220>)
 80047c4:	2205      	movs	r2, #5
 80047c6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80047c8:	e061      	b.n	800488e <ESP_Upkeep+0x212>

    case ESP_STATE_NEXT_AT:
      if(ATCommands < AT_SENDDATA){
 80047ca:	4b3d      	ldr	r3, [pc, #244]	@ (80048c0 <ESP_Upkeep+0x244>)
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	2b0c      	cmp	r3, #12
 80047d0:	d82a      	bhi.n	8004828 <ESP_Upkeep+0x1ac>
        ATCommands = ATCommands+1;
 80047d2:	4b3b      	ldr	r3, [pc, #236]	@ (80048c0 <ESP_Upkeep+0x244>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	3301      	adds	r3, #1
 80047d8:	b2da      	uxtb	r2, r3
 80047da:	4b39      	ldr	r3, [pc, #228]	@ (80048c0 <ESP_Upkeep+0x244>)
 80047dc:	701a      	strb	r2, [r3, #0]
        if(ATCommands == AT_RESTORE){
 80047de:	4b38      	ldr	r3, [pc, #224]	@ (80048c0 <ESP_Upkeep+0x244>)
 80047e0:	781b      	ldrb	r3, [r3, #0]
 80047e2:	2b03      	cmp	r3, #3
 80047e4:	d102      	bne.n	80047ec <ESP_Upkeep+0x170>
            ATExpectation = RECEIVE_EXPECTATION_READY;
 80047e6:	4b35      	ldr	r3, [pc, #212]	@ (80048bc <ESP_Upkeep+0x240>)
 80047e8:	2201      	movs	r2, #1
 80047ea:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands == AT_HTTPCPOST){
 80047ec:	4b34      	ldr	r3, [pc, #208]	@ (80048c0 <ESP_Upkeep+0x244>)
 80047ee:	781b      	ldrb	r3, [r3, #0]
 80047f0:	2b0c      	cmp	r3, #12
 80047f2:	d102      	bne.n	80047fa <ESP_Upkeep+0x17e>
          ATExpectation = RECEIVE_EXPECTATION_START;
 80047f4:	4b31      	ldr	r3, [pc, #196]	@ (80048bc <ESP_Upkeep+0x240>)
 80047f6:	2202      	movs	r2, #2
 80047f8:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands != AT_HTTPCPOST && ATCommands != AT_RESTORE){
 80047fa:	4b31      	ldr	r3, [pc, #196]	@ (80048c0 <ESP_Upkeep+0x244>)
 80047fc:	781b      	ldrb	r3, [r3, #0]
 80047fe:	2b0c      	cmp	r3, #12
 8004800:	d006      	beq.n	8004810 <ESP_Upkeep+0x194>
 8004802:	4b2f      	ldr	r3, [pc, #188]	@ (80048c0 <ESP_Upkeep+0x244>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b03      	cmp	r3, #3
 8004808:	d002      	beq.n	8004810 <ESP_Upkeep+0x194>
          ATExpectation = RECEIVE_EXPECTATION_OK;
 800480a:	4b2c      	ldr	r3, [pc, #176]	@ (80048bc <ESP_Upkeep+0x240>)
 800480c:	2200      	movs	r2, #0
 800480e:	701a      	strb	r2, [r3, #0]
        }
        EspState = EspState = ESP_STATE_SEND;
 8004810:	4b22      	ldr	r3, [pc, #136]	@ (800489c <ESP_Upkeep+0x220>)
 8004812:	2204      	movs	r2, #4
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	4b21      	ldr	r3, [pc, #132]	@ (800489c <ESP_Upkeep+0x220>)
 8004818:	781a      	ldrb	r2, [r3, #0]
 800481a:	4b20      	ldr	r3, [pc, #128]	@ (800489c <ESP_Upkeep+0x220>)
 800481c:	701a      	strb	r2, [r3, #0]
        nextATCommand = ATCommands;
 800481e:	4b28      	ldr	r3, [pc, #160]	@ (80048c0 <ESP_Upkeep+0x244>)
 8004820:	781a      	ldrb	r2, [r3, #0]
 8004822:	4b25      	ldr	r3, [pc, #148]	@ (80048b8 <ESP_Upkeep+0x23c>)
 8004824:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
        break;
      }


    break;
 8004826:	e035      	b.n	8004894 <ESP_Upkeep+0x218>
        ESPTimeStamp = HAL_GetTick() + 300000;
 8004828:	f003 ff0e 	bl	8008648 <HAL_GetTick>
 800482c:	0003      	movs	r3, r0
 800482e:	4a25      	ldr	r2, [pc, #148]	@ (80048c4 <ESP_Upkeep+0x248>)
 8004830:	189a      	adds	r2, r3, r2
 8004832:	4b1f      	ldr	r3, [pc, #124]	@ (80048b0 <ESP_Upkeep+0x234>)
 8004834:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
 8004836:	4b19      	ldr	r3, [pc, #100]	@ (800489c <ESP_Upkeep+0x220>)
 8004838:	2209      	movs	r2, #9
 800483a:	701a      	strb	r2, [r3, #0]
        break;
 800483c:	e02a      	b.n	8004894 <ESP_Upkeep+0x218>
    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 800483e:	4b1c      	ldr	r3, [pc, #112]	@ (80048b0 <ESP_Upkeep+0x234>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	0018      	movs	r0, r3
 8004844:	f003 fab2 	bl	8007dac <TimestampIsReached>
 8004848:	1e03      	subs	r3, r0, #0
 800484a:	d022      	beq.n	8004892 <ESP_Upkeep+0x216>
        nextATCommand = AT_HTTPCPOST;
 800484c:	4b1a      	ldr	r3, [pc, #104]	@ (80048b8 <ESP_Upkeep+0x23c>)
 800484e:	220c      	movs	r2, #12
 8004850:	701a      	strb	r2, [r3, #0]
        ATCommands = AT_HTTPCPOST;
 8004852:	4b1b      	ldr	r3, [pc, #108]	@ (80048c0 <ESP_Upkeep+0x244>)
 8004854:	220c      	movs	r2, #12
 8004856:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 8004858:	4b10      	ldr	r3, [pc, #64]	@ (800489c <ESP_Upkeep+0x220>)
 800485a:	2204      	movs	r2, #4
 800485c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_START;
 800485e:	4b17      	ldr	r3, [pc, #92]	@ (80048bc <ESP_Upkeep+0x240>)
 8004860:	2202      	movs	r2, #2
 8004862:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004864:	e015      	b.n	8004892 <ESP_Upkeep+0x216>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004866:	4a18      	ldr	r2, [pc, #96]	@ (80048c8 <ESP_Upkeep+0x24c>)
 8004868:	4b18      	ldr	r3, [pc, #96]	@ (80048cc <ESP_Upkeep+0x250>)
 800486a:	0019      	movs	r1, r3
 800486c:	2003      	movs	r0, #3
 800486e:	f003 faf3 	bl	8007e58 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004872:	4b0a      	ldr	r3, [pc, #40]	@ (800489c <ESP_Upkeep+0x220>)
 8004874:	2202      	movs	r2, #2
 8004876:	701a      	strb	r2, [r3, #0]
      break;
 8004878:	e00c      	b.n	8004894 <ESP_Upkeep+0x218>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 800487a:	4b08      	ldr	r3, [pc, #32]	@ (800489c <ESP_Upkeep+0x220>)
 800487c:	2207      	movs	r2, #7
 800487e:	701a      	strb	r2, [r3, #0]
      break;
 8004880:	e008      	b.n	8004894 <ESP_Upkeep+0x218>
      break;
 8004882:	46c0      	nop			@ (mov r8, r8)
 8004884:	e006      	b.n	8004894 <ESP_Upkeep+0x218>
      break;
 8004886:	46c0      	nop			@ (mov r8, r8)
 8004888:	e004      	b.n	8004894 <ESP_Upkeep+0x218>
         break;
 800488a:	46c0      	nop			@ (mov r8, r8)
 800488c:	e002      	b.n	8004894 <ESP_Upkeep+0x218>
      break;
 800488e:	46c0      	nop			@ (mov r8, r8)
 8004890:	e000      	b.n	8004894 <ESP_Upkeep+0x218>
      break;
 8004892:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004894:	46c0      	nop			@ (mov r8, r8)
 8004896:	46bd      	mov	sp, r7
 8004898:	b003      	add	sp, #12
 800489a:	bd90      	pop	{r4, r7, pc}
 800489c:	200000fb 	.word	0x200000fb
 80048a0:	08012f88 	.word	0x08012f88
 80048a4:	2000044b 	.word	0x2000044b
 80048a8:	50000800 	.word	0x50000800
 80048ac:	50001c00 	.word	0x50001c00
 80048b0:	200006e4 	.word	0x200006e4
 80048b4:	2000034c 	.word	0x2000034c
 80048b8:	200006ea 	.word	0x200006ea
 80048bc:	200006e9 	.word	0x200006e9
 80048c0:	200008ed 	.word	0x200008ed
 80048c4:	000493e0 	.word	0x000493e0
 80048c8:	080128dc 	.word	0x080128dc
 80048cc:	08012530 	.word	0x08012530

080048d0 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 80048d8:	4b09      	ldr	r3, [pc, #36]	@ (8004900 <I2CSensors_Init+0x30>)
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80048de:	4a09      	ldr	r2, [pc, #36]	@ (8004904 <I2CSensors_Init+0x34>)
 80048e0:	4b09      	ldr	r3, [pc, #36]	@ (8004908 <I2CSensors_Init+0x38>)
 80048e2:	0011      	movs	r1, r2
 80048e4:	0018      	movs	r0, r3
 80048e6:	f000 fae1 	bl	8004eac <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80048ea:	4a06      	ldr	r2, [pc, #24]	@ (8004904 <I2CSensors_Init+0x34>)
 80048ec:	4b06      	ldr	r3, [pc, #24]	@ (8004908 <I2CSensors_Init+0x38>)
 80048ee:	0011      	movs	r1, r2
 80048f0:	0018      	movs	r0, r3
 80048f2:	f000 f964 	bl	8004bbe <Gas_Init>
}
 80048f6:	46c0      	nop			@ (mov r8, r8)
 80048f8:	46bd      	mov	sp, r7
 80048fa:	b002      	add	sp, #8
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	46c0      	nop			@ (mov r8, r8)
 8004900:	200008f0 	.word	0x200008f0
 8004904:	08004961 	.word	0x08004961
 8004908:	0800490d 	.word	0x0800490d

0800490c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800490c:	b5b0      	push	{r4, r5, r7, lr}
 800490e:	b084      	sub	sp, #16
 8004910:	af00      	add	r7, sp, #0
 8004912:	6039      	str	r1, [r7, #0]
 8004914:	0011      	movs	r1, r2
 8004916:	1dfb      	adds	r3, r7, #7
 8004918:	1c02      	adds	r2, r0, #0
 800491a:	701a      	strb	r2, [r3, #0]
 800491c:	1dbb      	adds	r3, r7, #6
 800491e:	1c0a      	adds	r2, r1, #0
 8004920:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004922:	4b0e      	ldr	r3, [pc, #56]	@ (800495c <ReadI2C+0x50>)
 8004924:	6818      	ldr	r0, [r3, #0]
 8004926:	1dfb      	adds	r3, r7, #7
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	b29b      	uxth	r3, r3
 800492c:	18db      	adds	r3, r3, r3
 800492e:	b299      	uxth	r1, r3
 8004930:	1dbb      	adds	r3, r7, #6
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b29b      	uxth	r3, r3
 8004936:	250f      	movs	r5, #15
 8004938:	197c      	adds	r4, r7, r5
 800493a:	683a      	ldr	r2, [r7, #0]
 800493c:	f005 f9d4 	bl	8009ce8 <HAL_I2C_Master_Receive_DMA>
 8004940:	0003      	movs	r3, r0
 8004942:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004944:	197b      	adds	r3, r7, r5
 8004946:	781b      	ldrb	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d001      	beq.n	8004950 <ReadI2C+0x44>
        return false;
 800494c:	2300      	movs	r3, #0
 800494e:	e000      	b.n	8004952 <ReadI2C+0x46>
    }
    return true;
 8004950:	2301      	movs	r3, #1
}
 8004952:	0018      	movs	r0, r3
 8004954:	46bd      	mov	sp, r7
 8004956:	b004      	add	sp, #16
 8004958:	bdb0      	pop	{r4, r5, r7, pc}
 800495a:	46c0      	nop			@ (mov r8, r8)
 800495c:	200008f0 	.word	0x200008f0

08004960 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004960:	b5b0      	push	{r4, r5, r7, lr}
 8004962:	b084      	sub	sp, #16
 8004964:	af00      	add	r7, sp, #0
 8004966:	6039      	str	r1, [r7, #0]
 8004968:	0011      	movs	r1, r2
 800496a:	1dfb      	adds	r3, r7, #7
 800496c:	1c02      	adds	r2, r0, #0
 800496e:	701a      	strb	r2, [r3, #0]
 8004970:	1dbb      	adds	r3, r7, #6
 8004972:	1c0a      	adds	r2, r1, #0
 8004974:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004976:	4b0e      	ldr	r3, [pc, #56]	@ (80049b0 <WriteI2C+0x50>)
 8004978:	6818      	ldr	r0, [r3, #0]
 800497a:	1dfb      	adds	r3, r7, #7
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b29b      	uxth	r3, r3
 8004980:	18db      	adds	r3, r3, r3
 8004982:	b299      	uxth	r1, r3
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	b29b      	uxth	r3, r3
 800498a:	250f      	movs	r5, #15
 800498c:	197c      	adds	r4, r7, r5
 800498e:	683a      	ldr	r2, [r7, #0]
 8004990:	f005 f8a4 	bl	8009adc <HAL_I2C_Master_Transmit_DMA>
 8004994:	0003      	movs	r3, r0
 8004996:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004998:	197b      	adds	r3, r7, r5
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d001      	beq.n	80049a4 <WriteI2C+0x44>
        return false;
 80049a0:	2300      	movs	r3, #0
 80049a2:	e000      	b.n	80049a6 <WriteI2C+0x46>
    }
    return true;
 80049a4:	2301      	movs	r3, #1
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b004      	add	sp, #16
 80049ac:	bdb0      	pop	{r4, r5, r7, pc}
 80049ae:	46c0      	nop			@ (mov r8, r8)
 80049b0:	200008f0 	.word	0x200008f0

080049b4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80049ba:	003b      	movs	r3, r7
 80049bc:	0018      	movs	r0, r3
 80049be:	2308      	movs	r3, #8
 80049c0:	001a      	movs	r2, r3
 80049c2:	2100      	movs	r1, #0
 80049c4:	f00b fa22 	bl	800fe0c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80049c8:	4b30      	ldr	r3, [pc, #192]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049ca:	4a31      	ldr	r2, [pc, #196]	@ (8004a90 <MX_ADC_Init+0xdc>)
 80049cc:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 80049ce:	4b2f      	ldr	r3, [pc, #188]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049d0:	2200      	movs	r2, #0
 80049d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80049d4:	4b2d      	ldr	r3, [pc, #180]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049d6:	22c0      	movs	r2, #192	@ 0xc0
 80049d8:	0612      	lsls	r2, r2, #24
 80049da:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80049dc:	4b2b      	ldr	r3, [pc, #172]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049de:	2200      	movs	r2, #0
 80049e0:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80049e2:	4b2a      	ldr	r3, [pc, #168]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049e4:	2200      	movs	r2, #0
 80049e6:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80049e8:	4b28      	ldr	r3, [pc, #160]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049ea:	2201      	movs	r2, #1
 80049ec:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80049ee:	4b27      	ldr	r3, [pc, #156]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049f0:	2200      	movs	r2, #0
 80049f2:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 80049f4:	4b25      	ldr	r3, [pc, #148]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049f6:	2220      	movs	r2, #32
 80049f8:	2100      	movs	r1, #0
 80049fa:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 80049fc:	4b23      	ldr	r3, [pc, #140]	@ (8004a8c <MX_ADC_Init+0xd8>)
 80049fe:	2221      	movs	r2, #33	@ 0x21
 8004a00:	2101      	movs	r1, #1
 8004a02:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004a04:	4b21      	ldr	r3, [pc, #132]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a06:	2200      	movs	r2, #0
 8004a08:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004a0a:	4b20      	ldr	r3, [pc, #128]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a0c:	22c2      	movs	r2, #194	@ 0xc2
 8004a0e:	32ff      	adds	r2, #255	@ 0xff
 8004a10:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004a12:	4b1e      	ldr	r3, [pc, #120]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a14:	222c      	movs	r2, #44	@ 0x2c
 8004a16:	2100      	movs	r1, #0
 8004a18:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004a1a:	4b1c      	ldr	r3, [pc, #112]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004a20:	4b1a      	ldr	r3, [pc, #104]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004a26:	4b19      	ldr	r3, [pc, #100]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004a2c:	4b17      	ldr	r3, [pc, #92]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a2e:	2200      	movs	r2, #0
 8004a30:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004a32:	4b16      	ldr	r3, [pc, #88]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a34:	2200      	movs	r2, #0
 8004a36:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004a38:	4b14      	ldr	r3, [pc, #80]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a3a:	0018      	movs	r0, r3
 8004a3c:	f003 fe32 	bl	80086a4 <HAL_ADC_Init>
 8004a40:	1e03      	subs	r3, r0, #0
 8004a42:	d001      	beq.n	8004a48 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004a44:	f000 fd38 	bl	80054b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004a48:	003b      	movs	r3, r7
 8004a4a:	4a12      	ldr	r2, [pc, #72]	@ (8004a94 <MX_ADC_Init+0xe0>)
 8004a4c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004a4e:	003b      	movs	r3, r7
 8004a50:	2280      	movs	r2, #128	@ 0x80
 8004a52:	0152      	lsls	r2, r2, #5
 8004a54:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004a56:	003a      	movs	r2, r7
 8004a58:	4b0c      	ldr	r3, [pc, #48]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a5a:	0011      	movs	r1, r2
 8004a5c:	0018      	movs	r0, r3
 8004a5e:	f004 f891 	bl	8008b84 <HAL_ADC_ConfigChannel>
 8004a62:	1e03      	subs	r3, r0, #0
 8004a64:	d001      	beq.n	8004a6a <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004a66:	f000 fd27 	bl	80054b8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004a6a:	003b      	movs	r3, r7
 8004a6c:	4a0a      	ldr	r2, [pc, #40]	@ (8004a98 <MX_ADC_Init+0xe4>)
 8004a6e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004a70:	003a      	movs	r2, r7
 8004a72:	4b06      	ldr	r3, [pc, #24]	@ (8004a8c <MX_ADC_Init+0xd8>)
 8004a74:	0011      	movs	r1, r2
 8004a76:	0018      	movs	r0, r3
 8004a78:	f004 f884 	bl	8008b84 <HAL_ADC_ConfigChannel>
 8004a7c:	1e03      	subs	r3, r0, #0
 8004a7e:	d001      	beq.n	8004a84 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004a80:	f000 fd1a 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004a84:	46c0      	nop			@ (mov r8, r8)
 8004a86:	46bd      	mov	sp, r7
 8004a88:	b002      	add	sp, #8
 8004a8a:	bd80      	pop	{r7, pc}
 8004a8c:	200008f4 	.word	0x200008f4
 8004a90:	40012400 	.word	0x40012400
 8004a94:	38004000 	.word	0x38004000
 8004a98:	3c008000 	.word	0x3c008000

08004a9c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8004a9c:	b590      	push	{r4, r7, lr}
 8004a9e:	b089      	sub	sp, #36	@ 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004aa4:	240c      	movs	r4, #12
 8004aa6:	193b      	adds	r3, r7, r4
 8004aa8:	0018      	movs	r0, r3
 8004aaa:	2314      	movs	r3, #20
 8004aac:	001a      	movs	r2, r3
 8004aae:	2100      	movs	r1, #0
 8004ab0:	f00b f9ac 	bl	800fe0c <memset>
  if(adcHandle->Instance==ADC1)
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	4a14      	ldr	r2, [pc, #80]	@ (8004b0c <HAL_ADC_MspInit+0x70>)
 8004aba:	4293      	cmp	r3, r2
 8004abc:	d121      	bne.n	8004b02 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004abe:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <HAL_ADC_MspInit+0x74>)
 8004ac0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ac2:	4b13      	ldr	r3, [pc, #76]	@ (8004b10 <HAL_ADC_MspInit+0x74>)
 8004ac4:	2180      	movs	r1, #128	@ 0x80
 8004ac6:	0089      	lsls	r1, r1, #2
 8004ac8:	430a      	orrs	r2, r1
 8004aca:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004acc:	4b10      	ldr	r3, [pc, #64]	@ (8004b10 <HAL_ADC_MspInit+0x74>)
 8004ace:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8004b10 <HAL_ADC_MspInit+0x74>)
 8004ad2:	2104      	movs	r1, #4
 8004ad4:	430a      	orrs	r2, r1
 8004ad6:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004ad8:	4b0d      	ldr	r3, [pc, #52]	@ (8004b10 <HAL_ADC_MspInit+0x74>)
 8004ada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004adc:	2204      	movs	r2, #4
 8004ade:	4013      	ands	r3, r2
 8004ae0:	60bb      	str	r3, [r7, #8]
 8004ae2:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8004ae4:	193b      	adds	r3, r7, r4
 8004ae6:	2230      	movs	r2, #48	@ 0x30
 8004ae8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004aea:	193b      	adds	r3, r7, r4
 8004aec:	2203      	movs	r2, #3
 8004aee:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004af0:	193b      	adds	r3, r7, r4
 8004af2:	2200      	movs	r2, #0
 8004af4:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004af6:	193b      	adds	r3, r7, r4
 8004af8:	4a06      	ldr	r2, [pc, #24]	@ (8004b14 <HAL_ADC_MspInit+0x78>)
 8004afa:	0019      	movs	r1, r3
 8004afc:	0010      	movs	r0, r2
 8004afe:	f004 fcd9 	bl	80094b4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8004b02:	46c0      	nop			@ (mov r8, r8)
 8004b04:	46bd      	mov	sp, r7
 8004b06:	b009      	add	sp, #36	@ 0x24
 8004b08:	bd90      	pop	{r4, r7, pc}
 8004b0a:	46c0      	nop			@ (mov r8, r8)
 8004b0c:	40012400 	.word	0x40012400
 8004b10:	40021000 	.word	0x40021000
 8004b14:	50000800 	.word	0x50000800

08004b18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8004b1e:	4b10      	ldr	r3, [pc, #64]	@ (8004b60 <MX_DMA_Init+0x48>)
 8004b20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004b22:	4b0f      	ldr	r3, [pc, #60]	@ (8004b60 <MX_DMA_Init+0x48>)
 8004b24:	2101      	movs	r1, #1
 8004b26:	430a      	orrs	r2, r1
 8004b28:	631a      	str	r2, [r3, #48]	@ 0x30
 8004b2a:	4b0d      	ldr	r3, [pc, #52]	@ (8004b60 <MX_DMA_Init+0x48>)
 8004b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b2e:	2201      	movs	r2, #1
 8004b30:	4013      	ands	r3, r2
 8004b32:	607b      	str	r3, [r7, #4]
 8004b34:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004b36:	2200      	movs	r2, #0
 8004b38:	2100      	movs	r1, #0
 8004b3a:	200a      	movs	r0, #10
 8004b3c:	f004 f9dc 	bl	8008ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8004b40:	200a      	movs	r0, #10
 8004b42:	f004 f9ee 	bl	8008f22 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8004b46:	2200      	movs	r2, #0
 8004b48:	2103      	movs	r1, #3
 8004b4a:	200b      	movs	r0, #11
 8004b4c:	f004 f9d4 	bl	8008ef8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8004b50:	200b      	movs	r0, #11
 8004b52:	f004 f9e6 	bl	8008f22 <HAL_NVIC_EnableIRQ>

}
 8004b56:	46c0      	nop			@ (mov r8, r8)
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	b002      	add	sp, #8
 8004b5c:	bd80      	pop	{r7, pc}
 8004b5e:	46c0      	nop			@ (mov r8, r8)
 8004b60:	40021000 	.word	0x40021000

08004b64 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b084      	sub	sp, #16
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	60f8      	str	r0, [r7, #12]
 8004b6c:	60b9      	str	r1, [r7, #8]
 8004b6e:	607a      	str	r2, [r7, #4]
 8004b70:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8004b72:	4b0c      	ldr	r3, [pc, #48]	@ (8004ba4 <Gadget_Init+0x40>)
 8004b74:	6818      	ldr	r0, [r3, #0]
 8004b76:	f000 ff1f 	bl	80059b8 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	68b9      	ldr	r1, [r7, #8]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f000 fce9 	bl	8005558 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	0018      	movs	r0, r3
 8004b8a:	f7fe fdad 	bl	80036e8 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8004b8e:	4a06      	ldr	r2, [pc, #24]	@ (8004ba8 <Gadget_Init+0x44>)
 8004b90:	4b06      	ldr	r3, [pc, #24]	@ (8004bac <Gadget_Init+0x48>)
 8004b92:	0019      	movs	r1, r3
 8004b94:	2003      	movs	r0, #3
 8004b96:	f003 f95f 	bl	8007e58 <CreateLine>
}
 8004b9a:	46c0      	nop			@ (mov r8, r8)
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	b004      	add	sp, #16
 8004ba0:	bd80      	pop	{r7, pc}
 8004ba2:	46c0      	nop			@ (mov r8, r8)
 8004ba4:	200000fc 	.word	0x200000fc
 8004ba8:	080128f0 	.word	0x080128f0
 8004bac:	08012904 	.word	0x08012904

08004bb0 <UpkeepGadget>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void UpkeepGadget() {
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 8004bb4:	f000 fe8c 	bl	80058d0 <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8004bb8:	46c0      	nop			@ (mov r8, r8)
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004bbe:	b580      	push	{r7, lr}
 8004bc0:	b082      	sub	sp, #8
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 8004bc8:	683a      	ldr	r2, [r7, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	0011      	movs	r1, r2
 8004bce:	0018      	movs	r0, r3
 8004bd0:	f002 f81a 	bl	8006c08 <SGP_Init>
}
 8004bd4:	46c0      	nop			@ (mov r8, r8)
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	b002      	add	sp, #8
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8004be0:	f002 f82c 	bl	8006c3c <SGP_StartMeasurement>
}
 8004be4:	46c0      	nop			@ (mov r8, r8)
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}

08004bea <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8004bea:	b580      	push	{r7, lr}
 8004bec:	b082      	sub	sp, #8
 8004bee:	af00      	add	r7, sp, #0
 8004bf0:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f002 f891 	bl	8006d1c <SGP_GetMeasurementValues>
 8004bfa:	0003      	movs	r3, r0
}
 8004bfc:	0018      	movs	r0, r3
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	b002      	add	sp, #8
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 8004c04:	b580      	push	{r7, lr}
 8004c06:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8004c08:	f002 faaa 	bl	8007160 <SGP_DeviceConnected>
 8004c0c:	0003      	movs	r3, r0
}
 8004c0e:	0018      	movs	r0, r3
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd80      	pop	{r7, pc}

08004c14 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 8004c14:	b590      	push	{r4, r7, lr}
 8004c16:	b08b      	sub	sp, #44	@ 0x2c
 8004c18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c1a:	2414      	movs	r4, #20
 8004c1c:	193b      	adds	r3, r7, r4
 8004c1e:	0018      	movs	r0, r3
 8004c20:	2314      	movs	r3, #20
 8004c22:	001a      	movs	r2, r3
 8004c24:	2100      	movs	r1, #0
 8004c26:	f00b f8f1 	bl	800fe0c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c2a:	4b70      	ldr	r3, [pc, #448]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c2e:	4b6f      	ldr	r3, [pc, #444]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c30:	2104      	movs	r1, #4
 8004c32:	430a      	orrs	r2, r1
 8004c34:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c36:	4b6d      	ldr	r3, [pc, #436]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c3a:	2204      	movs	r2, #4
 8004c3c:	4013      	ands	r3, r2
 8004c3e:	613b      	str	r3, [r7, #16]
 8004c40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004c42:	4b6a      	ldr	r3, [pc, #424]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c46:	4b69      	ldr	r3, [pc, #420]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c48:	2180      	movs	r1, #128	@ 0x80
 8004c4a:	430a      	orrs	r2, r1
 8004c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c4e:	4b67      	ldr	r3, [pc, #412]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c52:	2280      	movs	r2, #128	@ 0x80
 8004c54:	4013      	ands	r3, r2
 8004c56:	60fb      	str	r3, [r7, #12]
 8004c58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004c5a:	4b64      	ldr	r3, [pc, #400]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c5c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c5e:	4b63      	ldr	r3, [pc, #396]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c60:	2101      	movs	r1, #1
 8004c62:	430a      	orrs	r2, r1
 8004c64:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c66:	4b61      	ldr	r3, [pc, #388]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c6a:	2201      	movs	r2, #1
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	60bb      	str	r3, [r7, #8]
 8004c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004c72:	4b5e      	ldr	r3, [pc, #376]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c74:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c76:	4b5d      	ldr	r3, [pc, #372]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c78:	2102      	movs	r1, #2
 8004c7a:	430a      	orrs	r2, r1
 8004c7c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c82:	2202      	movs	r2, #2
 8004c84:	4013      	ands	r3, r2
 8004c86:	607b      	str	r3, [r7, #4]
 8004c88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c8a:	4b58      	ldr	r3, [pc, #352]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c8e:	4b57      	ldr	r3, [pc, #348]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c90:	2108      	movs	r1, #8
 8004c92:	430a      	orrs	r2, r1
 8004c94:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004c96:	4b55      	ldr	r3, [pc, #340]	@ (8004dec <MX_GPIO_Init+0x1d8>)
 8004c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c9a:	2208      	movs	r2, #8
 8004c9c:	4013      	ands	r3, r2
 8004c9e:	603b      	str	r3, [r7, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004ca2:	4b53      	ldr	r3, [pc, #332]	@ (8004df0 <MX_GPIO_Init+0x1dc>)
 8004ca4:	2201      	movs	r2, #1
 8004ca6:	2101      	movs	r1, #1
 8004ca8:	0018      	movs	r0, r3
 8004caa:	f004 fe63 	bl	8009974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8004cae:	4b50      	ldr	r3, [pc, #320]	@ (8004df0 <MX_GPIO_Init+0x1dc>)
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	2102      	movs	r1, #2
 8004cb4:	0018      	movs	r0, r3
 8004cb6:	f004 fe5d 	bl	8009974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8004cba:	494e      	ldr	r1, [pc, #312]	@ (8004df4 <MX_GPIO_Init+0x1e0>)
 8004cbc:	4b4e      	ldr	r3, [pc, #312]	@ (8004df8 <MX_GPIO_Init+0x1e4>)
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	0018      	movs	r0, r3
 8004cc2:	f004 fe57 	bl	8009974 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004cc6:	2380      	movs	r3, #128	@ 0x80
 8004cc8:	011b      	lsls	r3, r3, #4
 8004cca:	484c      	ldr	r0, [pc, #304]	@ (8004dfc <MX_GPIO_Init+0x1e8>)
 8004ccc:	2201      	movs	r2, #1
 8004cce:	0019      	movs	r1, r3
 8004cd0:	f004 fe50 	bl	8009974 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8004cd4:	193b      	adds	r3, r7, r4
 8004cd6:	4a4a      	ldr	r2, [pc, #296]	@ (8004e00 <MX_GPIO_Init+0x1ec>)
 8004cd8:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cda:	193b      	adds	r3, r7, r4
 8004cdc:	2203      	movs	r2, #3
 8004cde:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ce0:	193b      	adds	r3, r7, r4
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004ce6:	193b      	adds	r3, r7, r4
 8004ce8:	4a44      	ldr	r2, [pc, #272]	@ (8004dfc <MX_GPIO_Init+0x1e8>)
 8004cea:	0019      	movs	r1, r3
 8004cec:	0010      	movs	r0, r2
 8004cee:	f004 fbe1 	bl	80094b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 8004cf2:	193b      	adds	r3, r7, r4
 8004cf4:	2203      	movs	r2, #3
 8004cf6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004cf8:	193b      	adds	r3, r7, r4
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cfe:	193b      	adds	r3, r7, r4
 8004d00:	2200      	movs	r2, #0
 8004d02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d04:	193b      	adds	r3, r7, r4
 8004d06:	2200      	movs	r2, #0
 8004d08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004d0a:	193b      	adds	r3, r7, r4
 8004d0c:	4a38      	ldr	r2, [pc, #224]	@ (8004df0 <MX_GPIO_Init+0x1dc>)
 8004d0e:	0019      	movs	r1, r3
 8004d10:	0010      	movs	r0, r2
 8004d12:	f004 fbcf 	bl	80094b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8004d16:	193b      	adds	r3, r7, r4
 8004d18:	4a3a      	ldr	r2, [pc, #232]	@ (8004e04 <MX_GPIO_Init+0x1f0>)
 8004d1a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d1c:	193b      	adds	r3, r7, r4
 8004d1e:	2203      	movs	r2, #3
 8004d20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d22:	193b      	adds	r3, r7, r4
 8004d24:	2200      	movs	r2, #0
 8004d26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d28:	193a      	adds	r2, r7, r4
 8004d2a:	23a0      	movs	r3, #160	@ 0xa0
 8004d2c:	05db      	lsls	r3, r3, #23
 8004d2e:	0011      	movs	r1, r2
 8004d30:	0018      	movs	r0, r3
 8004d32:	f004 fbbf 	bl	80094b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8004d36:	193b      	adds	r3, r7, r4
 8004d38:	22c0      	movs	r2, #192	@ 0xc0
 8004d3a:	0052      	lsls	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004d3e:	193b      	adds	r3, r7, r4
 8004d40:	2200      	movs	r2, #0
 8004d42:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d44:	193b      	adds	r3, r7, r4
 8004d46:	2200      	movs	r2, #0
 8004d48:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004d4a:	193a      	adds	r2, r7, r4
 8004d4c:	23a0      	movs	r3, #160	@ 0xa0
 8004d4e:	05db      	lsls	r3, r3, #23
 8004d50:	0011      	movs	r1, r2
 8004d52:	0018      	movs	r0, r3
 8004d54:	f004 fbae 	bl	80094b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8004d58:	193b      	adds	r3, r7, r4
 8004d5a:	4a26      	ldr	r2, [pc, #152]	@ (8004df4 <MX_GPIO_Init+0x1e0>)
 8004d5c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004d5e:	193b      	adds	r3, r7, r4
 8004d60:	2201      	movs	r2, #1
 8004d62:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d64:	193b      	adds	r3, r7, r4
 8004d66:	2200      	movs	r2, #0
 8004d68:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004d6a:	193b      	adds	r3, r7, r4
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d70:	193b      	adds	r3, r7, r4
 8004d72:	4a21      	ldr	r2, [pc, #132]	@ (8004df8 <MX_GPIO_Init+0x1e4>)
 8004d74:	0019      	movs	r1, r3
 8004d76:	0010      	movs	r0, r2
 8004d78:	f004 fb9c 	bl	80094b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8004d7c:	193b      	adds	r3, r7, r4
 8004d7e:	4a22      	ldr	r2, [pc, #136]	@ (8004e08 <MX_GPIO_Init+0x1f4>)
 8004d80:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004d82:	193b      	adds	r3, r7, r4
 8004d84:	2203      	movs	r2, #3
 8004d86:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d88:	193b      	adds	r3, r7, r4
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d8e:	193b      	adds	r3, r7, r4
 8004d90:	4a19      	ldr	r2, [pc, #100]	@ (8004df8 <MX_GPIO_Init+0x1e4>)
 8004d92:	0019      	movs	r1, r3
 8004d94:	0010      	movs	r0, r2
 8004d96:	f004 fb8d 	bl	80094b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8004d9a:	0021      	movs	r1, r4
 8004d9c:	187b      	adds	r3, r7, r1
 8004d9e:	2280      	movs	r2, #128	@ 0x80
 8004da0:	0112      	lsls	r2, r2, #4
 8004da2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004da4:	000c      	movs	r4, r1
 8004da6:	193b      	adds	r3, r7, r4
 8004da8:	2201      	movs	r2, #1
 8004daa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dac:	193b      	adds	r3, r7, r4
 8004dae:	2200      	movs	r2, #0
 8004db0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004db2:	193b      	adds	r3, r7, r4
 8004db4:	2200      	movs	r2, #0
 8004db6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8004db8:	193b      	adds	r3, r7, r4
 8004dba:	4a10      	ldr	r2, [pc, #64]	@ (8004dfc <MX_GPIO_Init+0x1e8>)
 8004dbc:	0019      	movs	r1, r3
 8004dbe:	0010      	movs	r0, r2
 8004dc0:	f004 fb78 	bl	80094b4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8004dc4:	0021      	movs	r1, r4
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	2204      	movs	r2, #4
 8004dca:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004dcc:	187b      	adds	r3, r7, r1
 8004dce:	2200      	movs	r2, #0
 8004dd0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd2:	187b      	adds	r3, r7, r1
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8004dd8:	187b      	adds	r3, r7, r1
 8004dda:	4a0c      	ldr	r2, [pc, #48]	@ (8004e0c <MX_GPIO_Init+0x1f8>)
 8004ddc:	0019      	movs	r1, r3
 8004dde:	0010      	movs	r0, r2
 8004de0:	f004 fb68 	bl	80094b4 <HAL_GPIO_Init>

}
 8004de4:	46c0      	nop			@ (mov r8, r8)
 8004de6:	46bd      	mov	sp, r7
 8004de8:	b00b      	add	sp, #44	@ 0x2c
 8004dea:	bd90      	pop	{r4, r7, pc}
 8004dec:	40021000 	.word	0x40021000
 8004df0:	50001c00 	.word	0x50001c00
 8004df4:	00000301 	.word	0x00000301
 8004df8:	50000400 	.word	0x50000400
 8004dfc:	50000800 	.word	0x50000800
 8004e00:	0000320f 	.word	0x0000320f
 8004e04:	00008070 	.word	0x00008070
 8004e08:	0000403e 	.word	0x0000403e
 8004e0c:	50000c00 	.word	0x50000c00

08004e10 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b082      	sub	sp, #8
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2100      	movs	r1, #0
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f008 f9e2 	bl	800d1e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2108      	movs	r1, #8
 8004e28:	0018      	movs	r0, r3
 8004e2a:	f008 f9dd 	bl	800d1e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	210c      	movs	r1, #12
 8004e32:	0018      	movs	r0, r3
 8004e34:	f008 f9d8 	bl	800d1e8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8004e38:	2380      	movs	r3, #128	@ 0x80
 8004e3a:	05db      	lsls	r3, r3, #23
 8004e3c:	22fa      	movs	r2, #250	@ 0xfa
 8004e3e:	0112      	lsls	r2, r2, #4
 8004e40:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8004e42:	2380      	movs	r3, #128	@ 0x80
 8004e44:	05db      	lsls	r3, r3, #23
 8004e46:	22fa      	movs	r2, #250	@ 0xfa
 8004e48:	0112      	lsls	r2, r2, #4
 8004e4a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8004e4c:	2380      	movs	r3, #128	@ 0x80
 8004e4e:	05db      	lsls	r3, r3, #23
 8004e50:	22fa      	movs	r2, #250	@ 0xfa
 8004e52:	0112      	lsls	r2, r2, #4
 8004e54:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8004e56:	2380      	movs	r3, #128	@ 0x80
 8004e58:	05db      	lsls	r3, r3, #23
 8004e5a:	22fa      	movs	r2, #250	@ 0xfa
 8004e5c:	0112      	lsls	r2, r2, #4
 8004e5e:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2100      	movs	r1, #0
 8004e64:	0018      	movs	r0, r3
 8004e66:	f008 f9bf 	bl	800d1e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2104      	movs	r1, #4
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f008 f9ba 	bl	800d1e8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2108      	movs	r1, #8
 8004e78:	0018      	movs	r0, r3
 8004e7a:	f008 f9b5 	bl	800d1e8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8004e7e:	4b0a      	ldr	r3, [pc, #40]	@ (8004ea8 <GPIO_InitPWMLEDs+0x98>)
 8004e80:	22fa      	movs	r2, #250	@ 0xfa
 8004e82:	0112      	lsls	r2, r2, #4
 8004e84:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8004e86:	4b08      	ldr	r3, [pc, #32]	@ (8004ea8 <GPIO_InitPWMLEDs+0x98>)
 8004e88:	22fa      	movs	r2, #250	@ 0xfa
 8004e8a:	0112      	lsls	r2, r2, #4
 8004e8c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8004e8e:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <GPIO_InitPWMLEDs+0x98>)
 8004e90:	22fa      	movs	r2, #250	@ 0xfa
 8004e92:	0112      	lsls	r2, r2, #4
 8004e94:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8004e96:	4b04      	ldr	r3, [pc, #16]	@ (8004ea8 <GPIO_InitPWMLEDs+0x98>)
 8004e98:	22fa      	movs	r2, #250	@ 0xfa
 8004e9a:	0112      	lsls	r2, r2, #4
 8004e9c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004e9e:	46c0      	nop			@ (mov r8, r8)
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	b002      	add	sp, #8
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	46c0      	nop			@ (mov r8, r8)
 8004ea8:	40000400 	.word	0x40000400

08004eac <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
 8004eb2:	6078      	str	r0, [r7, #4]
 8004eb4:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	0011      	movs	r1, r2
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f003 f923 	bl	8008108 <HIDS_Init>
}
 8004ec2:	46c0      	nop			@ (mov r8, r8)
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	b002      	add	sp, #8
 8004ec8:	bd80      	pop	{r7, pc}

08004eca <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8004eca:	b580      	push	{r7, lr}
 8004ecc:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8004ece:	f003 f93d 	bl	800814c <HIDS_StartMeasurement>
}
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
 8004ee0:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	0011      	movs	r1, r2
 8004ee8:	0018      	movs	r0, r3
 8004eea:	f003 fa0b 	bl	8008304 <HIDS_GetMeasurementValues>
 8004eee:	0003      	movs	r3, r0
}
 8004ef0:	0018      	movs	r0, r3
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8004efc:	f003 f9a6 	bl	800824c <HIDS_DeviceConnected>
 8004f00:	0003      	movs	r3, r0
}
 8004f02:	0018      	movs	r0, r3
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004f0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f0e:	4a1c      	ldr	r2, [pc, #112]	@ (8004f80 <MX_I2C1_Init+0x78>)
 8004f10:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8004f12:	4b1a      	ldr	r3, [pc, #104]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f14:	4a1b      	ldr	r2, [pc, #108]	@ (8004f84 <MX_I2C1_Init+0x7c>)
 8004f16:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004f18:	4b18      	ldr	r3, [pc, #96]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f1e:	4b17      	ldr	r3, [pc, #92]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f20:	2201      	movs	r2, #1
 8004f22:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004f24:	4b15      	ldr	r3, [pc, #84]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004f2a:	4b14      	ldr	r3, [pc, #80]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004f30:	4b12      	ldr	r3, [pc, #72]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004f36:	4b11      	ldr	r3, [pc, #68]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f38:	2200      	movs	r2, #0
 8004f3a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004f3c:	4b0f      	ldr	r3, [pc, #60]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f3e:	2200      	movs	r2, #0
 8004f40:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004f42:	4b0e      	ldr	r3, [pc, #56]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f44:	0018      	movs	r0, r3
 8004f46:	f004 fd33 	bl	80099b0 <HAL_I2C_Init>
 8004f4a:	1e03      	subs	r3, r0, #0
 8004f4c:	d001      	beq.n	8004f52 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004f4e:	f000 fab3 	bl	80054b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004f52:	4b0a      	ldr	r3, [pc, #40]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f54:	2100      	movs	r1, #0
 8004f56:	0018      	movs	r0, r3
 8004f58:	f006 fca2 	bl	800b8a0 <HAL_I2CEx_ConfigAnalogFilter>
 8004f5c:	1e03      	subs	r3, r0, #0
 8004f5e:	d001      	beq.n	8004f64 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004f60:	f000 faaa 	bl	80054b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004f64:	4b05      	ldr	r3, [pc, #20]	@ (8004f7c <MX_I2C1_Init+0x74>)
 8004f66:	2100      	movs	r1, #0
 8004f68:	0018      	movs	r0, r3
 8004f6a:	f006 fce5 	bl	800b938 <HAL_I2CEx_ConfigDigitalFilter>
 8004f6e:	1e03      	subs	r3, r0, #0
 8004f70:	d001      	beq.n	8004f76 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004f72:	f000 faa1 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004f76:	46c0      	nop			@ (mov r8, r8)
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	bd80      	pop	{r7, pc}
 8004f7c:	20000950 	.word	0x20000950
 8004f80:	40005400 	.word	0x40005400
 8004f84:	00503d58 	.word	0x00503d58

08004f88 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004f8c:	4b1b      	ldr	r3, [pc, #108]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004f8e:	4a1c      	ldr	r2, [pc, #112]	@ (8005000 <MX_I2C2_Init+0x78>)
 8004f90:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8004f92:	4b1a      	ldr	r3, [pc, #104]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004f94:	4a1b      	ldr	r2, [pc, #108]	@ (8005004 <MX_I2C2_Init+0x7c>)
 8004f96:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004f98:	4b18      	ldr	r3, [pc, #96]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004f9e:	4b17      	ldr	r3, [pc, #92]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004fa4:	4b15      	ldr	r3, [pc, #84]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004faa:	4b14      	ldr	r3, [pc, #80]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004fb0:	4b12      	ldr	r3, [pc, #72]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004fb6:	4b11      	ldr	r3, [pc, #68]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fb8:	2200      	movs	r2, #0
 8004fba:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004fbc:	4b0f      	ldr	r3, [pc, #60]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004fc2:	4b0e      	ldr	r3, [pc, #56]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fc4:	0018      	movs	r0, r3
 8004fc6:	f004 fcf3 	bl	80099b0 <HAL_I2C_Init>
 8004fca:	1e03      	subs	r3, r0, #0
 8004fcc:	d001      	beq.n	8004fd2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004fce:	f000 fa73 	bl	80054b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fd4:	2100      	movs	r1, #0
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f006 fc62 	bl	800b8a0 <HAL_I2CEx_ConfigAnalogFilter>
 8004fdc:	1e03      	subs	r3, r0, #0
 8004fde:	d001      	beq.n	8004fe4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004fe0:	f000 fa6a 	bl	80054b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004fe4:	4b05      	ldr	r3, [pc, #20]	@ (8004ffc <MX_I2C2_Init+0x74>)
 8004fe6:	2100      	movs	r1, #0
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f006 fca5 	bl	800b938 <HAL_I2CEx_ConfigDigitalFilter>
 8004fee:	1e03      	subs	r3, r0, #0
 8004ff0:	d001      	beq.n	8004ff6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004ff2:	f000 fa61 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004ff6:	46c0      	nop			@ (mov r8, r8)
 8004ff8:	46bd      	mov	sp, r7
 8004ffa:	bd80      	pop	{r7, pc}
 8004ffc:	200009a4 	.word	0x200009a4
 8005000:	40005800 	.word	0x40005800
 8005004:	00503d58 	.word	0x00503d58

08005008 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8005008:	b590      	push	{r4, r7, lr}
 800500a:	b08b      	sub	sp, #44	@ 0x2c
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005010:	2414      	movs	r4, #20
 8005012:	193b      	adds	r3, r7, r4
 8005014:	0018      	movs	r0, r3
 8005016:	2314      	movs	r3, #20
 8005018:	001a      	movs	r2, r3
 800501a:	2100      	movs	r1, #0
 800501c:	f00a fef6 	bl	800fe0c <memset>
  if(i2cHandle->Instance==I2C1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a5d      	ldr	r2, [pc, #372]	@ (800519c <HAL_I2C_MspInit+0x194>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d000      	beq.n	800502c <HAL_I2C_MspInit+0x24>
 800502a:	e083      	b.n	8005134 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800502c:	4b5c      	ldr	r3, [pc, #368]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 800502e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005030:	4b5b      	ldr	r3, [pc, #364]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 8005032:	2102      	movs	r1, #2
 8005034:	430a      	orrs	r2, r1
 8005036:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005038:	4b59      	ldr	r3, [pc, #356]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 800503a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800503c:	2202      	movs	r2, #2
 800503e:	4013      	ands	r3, r2
 8005040:	613b      	str	r3, [r7, #16]
 8005042:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005044:	0021      	movs	r1, r4
 8005046:	187b      	adds	r3, r7, r1
 8005048:	22c0      	movs	r2, #192	@ 0xc0
 800504a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800504c:	187b      	adds	r3, r7, r1
 800504e:	2212      	movs	r2, #18
 8005050:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005052:	187b      	adds	r3, r7, r1
 8005054:	2200      	movs	r2, #0
 8005056:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005058:	187b      	adds	r3, r7, r1
 800505a:	2203      	movs	r2, #3
 800505c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 800505e:	187b      	adds	r3, r7, r1
 8005060:	2201      	movs	r2, #1
 8005062:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005064:	187b      	adds	r3, r7, r1
 8005066:	4a4f      	ldr	r2, [pc, #316]	@ (80051a4 <HAL_I2C_MspInit+0x19c>)
 8005068:	0019      	movs	r1, r3
 800506a:	0010      	movs	r0, r2
 800506c:	f004 fa22 	bl	80094b4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005070:	4b4b      	ldr	r3, [pc, #300]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 8005072:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005074:	4b4a      	ldr	r3, [pc, #296]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 8005076:	2180      	movs	r1, #128	@ 0x80
 8005078:	0389      	lsls	r1, r1, #14
 800507a:	430a      	orrs	r2, r1
 800507c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 800507e:	4b4a      	ldr	r3, [pc, #296]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 8005080:	4a4a      	ldr	r2, [pc, #296]	@ (80051ac <HAL_I2C_MspInit+0x1a4>)
 8005082:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005084:	4b48      	ldr	r3, [pc, #288]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 8005086:	2206      	movs	r2, #6
 8005088:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800508a:	4b47      	ldr	r3, [pc, #284]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 800508c:	2200      	movs	r2, #0
 800508e:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005090:	4b45      	ldr	r3, [pc, #276]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 8005092:	2200      	movs	r2, #0
 8005094:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005096:	4b44      	ldr	r3, [pc, #272]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 8005098:	2280      	movs	r2, #128	@ 0x80
 800509a:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800509c:	4b42      	ldr	r3, [pc, #264]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 800509e:	2200      	movs	r2, #0
 80050a0:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050a2:	4b41      	ldr	r3, [pc, #260]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 80050a4:	2200      	movs	r2, #0
 80050a6:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80050a8:	4b3f      	ldr	r3, [pc, #252]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 80050aa:	2200      	movs	r2, #0
 80050ac:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80050ae:	4b3e      	ldr	r3, [pc, #248]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 80050b0:	2200      	movs	r2, #0
 80050b2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80050b4:	4b3c      	ldr	r3, [pc, #240]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 80050b6:	0018      	movs	r0, r3
 80050b8:	f003 ff50 	bl	8008f5c <HAL_DMA_Init>
 80050bc:	1e03      	subs	r3, r0, #0
 80050be:	d001      	beq.n	80050c4 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 80050c0:	f000 f9fa 	bl	80054b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	4a38      	ldr	r2, [pc, #224]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 80050c8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80050ca:	4b37      	ldr	r3, [pc, #220]	@ (80051a8 <HAL_I2C_MspInit+0x1a0>)
 80050cc:	687a      	ldr	r2, [r7, #4]
 80050ce:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 80050d0:	4b37      	ldr	r3, [pc, #220]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 80050d2:	4a38      	ldr	r2, [pc, #224]	@ (80051b4 <HAL_I2C_MspInit+0x1ac>)
 80050d4:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 80050d6:	4b36      	ldr	r3, [pc, #216]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 80050d8:	2206      	movs	r2, #6
 80050da:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80050dc:	4b34      	ldr	r3, [pc, #208]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 80050de:	2210      	movs	r2, #16
 80050e0:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80050e2:	4b33      	ldr	r3, [pc, #204]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 80050e4:	2200      	movs	r2, #0
 80050e6:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80050e8:	4b31      	ldr	r3, [pc, #196]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 80050ea:	2280      	movs	r2, #128	@ 0x80
 80050ec:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050ee:	4b30      	ldr	r3, [pc, #192]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 80050f0:	2200      	movs	r2, #0
 80050f2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050f4:	4b2e      	ldr	r3, [pc, #184]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 80050f6:	2200      	movs	r2, #0
 80050f8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80050fa:	4b2d      	ldr	r3, [pc, #180]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 80050fc:	2200      	movs	r2, #0
 80050fe:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005100:	4b2b      	ldr	r3, [pc, #172]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 8005102:	2200      	movs	r2, #0
 8005104:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8005106:	4b2a      	ldr	r3, [pc, #168]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 8005108:	0018      	movs	r0, r3
 800510a:	f003 ff27 	bl	8008f5c <HAL_DMA_Init>
 800510e:	1e03      	subs	r3, r0, #0
 8005110:	d001      	beq.n	8005116 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005112:	f000 f9d1 	bl	80054b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a25      	ldr	r2, [pc, #148]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 800511a:	639a      	str	r2, [r3, #56]	@ 0x38
 800511c:	4b24      	ldr	r3, [pc, #144]	@ (80051b0 <HAL_I2C_MspInit+0x1a8>)
 800511e:	687a      	ldr	r2, [r7, #4]
 8005120:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8005122:	2200      	movs	r2, #0
 8005124:	2100      	movs	r1, #0
 8005126:	2017      	movs	r0, #23
 8005128:	f003 fee6 	bl	8008ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 800512c:	2017      	movs	r0, #23
 800512e:	f003 fef8 	bl	8008f22 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8005132:	e02e      	b.n	8005192 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a1f      	ldr	r2, [pc, #124]	@ (80051b8 <HAL_I2C_MspInit+0x1b0>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d129      	bne.n	8005192 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800513e:	4b18      	ldr	r3, [pc, #96]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 8005140:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005142:	4b17      	ldr	r3, [pc, #92]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 8005144:	2102      	movs	r1, #2
 8005146:	430a      	orrs	r2, r1
 8005148:	62da      	str	r2, [r3, #44]	@ 0x2c
 800514a:	4b15      	ldr	r3, [pc, #84]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 800514c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800514e:	2202      	movs	r2, #2
 8005150:	4013      	ands	r3, r2
 8005152:	60fb      	str	r3, [r7, #12]
 8005154:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8005156:	2114      	movs	r1, #20
 8005158:	187b      	adds	r3, r7, r1
 800515a:	22c0      	movs	r2, #192	@ 0xc0
 800515c:	0112      	lsls	r2, r2, #4
 800515e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005160:	187b      	adds	r3, r7, r1
 8005162:	2212      	movs	r2, #18
 8005164:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005166:	187b      	adds	r3, r7, r1
 8005168:	2200      	movs	r2, #0
 800516a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516c:	187b      	adds	r3, r7, r1
 800516e:	2203      	movs	r2, #3
 8005170:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8005172:	187b      	adds	r3, r7, r1
 8005174:	2206      	movs	r2, #6
 8005176:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005178:	187b      	adds	r3, r7, r1
 800517a:	4a0a      	ldr	r2, [pc, #40]	@ (80051a4 <HAL_I2C_MspInit+0x19c>)
 800517c:	0019      	movs	r1, r3
 800517e:	0010      	movs	r0, r2
 8005180:	f004 f998 	bl	80094b4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005184:	4b06      	ldr	r3, [pc, #24]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 8005186:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005188:	4b05      	ldr	r3, [pc, #20]	@ (80051a0 <HAL_I2C_MspInit+0x198>)
 800518a:	2180      	movs	r1, #128	@ 0x80
 800518c:	03c9      	lsls	r1, r1, #15
 800518e:	430a      	orrs	r2, r1
 8005190:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005192:	46c0      	nop			@ (mov r8, r8)
 8005194:	46bd      	mov	sp, r7
 8005196:	b00b      	add	sp, #44	@ 0x2c
 8005198:	bd90      	pop	{r4, r7, pc}
 800519a:	46c0      	nop			@ (mov r8, r8)
 800519c:	40005400 	.word	0x40005400
 80051a0:	40021000 	.word	0x40021000
 80051a4:	50000400 	.word	0x50000400
 80051a8:	200009f8 	.word	0x200009f8
 80051ac:	40020030 	.word	0x40020030
 80051b0:	20000a40 	.word	0x20000a40
 80051b4:	4002001c 	.word	0x4002001c
 80051b8:	40005800 	.word	0x40005800

080051bc <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80051c0:	4b10      	ldr	r3, [pc, #64]	@ (8005204 <MX_I2S2_Init+0x48>)
 80051c2:	4a11      	ldr	r2, [pc, #68]	@ (8005208 <MX_I2S2_Init+0x4c>)
 80051c4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 80051c6:	4b0f      	ldr	r3, [pc, #60]	@ (8005204 <MX_I2S2_Init+0x48>)
 80051c8:	22c0      	movs	r2, #192	@ 0xc0
 80051ca:	0092      	lsls	r2, r2, #2
 80051cc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 80051ce:	4b0d      	ldr	r3, [pc, #52]	@ (8005204 <MX_I2S2_Init+0x48>)
 80051d0:	2210      	movs	r2, #16
 80051d2:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 80051d4:	4b0b      	ldr	r3, [pc, #44]	@ (8005204 <MX_I2S2_Init+0x48>)
 80051d6:	2205      	movs	r2, #5
 80051d8:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 80051da:	4b0a      	ldr	r3, [pc, #40]	@ (8005204 <MX_I2S2_Init+0x48>)
 80051dc:	2200      	movs	r2, #0
 80051de:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 80051e0:	4b08      	ldr	r3, [pc, #32]	@ (8005204 <MX_I2S2_Init+0x48>)
 80051e2:	22fa      	movs	r2, #250	@ 0xfa
 80051e4:	0152      	lsls	r2, r2, #5
 80051e6:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 80051e8:	4b06      	ldr	r3, [pc, #24]	@ (8005204 <MX_I2S2_Init+0x48>)
 80051ea:	2208      	movs	r2, #8
 80051ec:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80051ee:	4b05      	ldr	r3, [pc, #20]	@ (8005204 <MX_I2S2_Init+0x48>)
 80051f0:	0018      	movs	r0, r3
 80051f2:	f006 fbed 	bl	800b9d0 <HAL_I2S_Init>
 80051f6:	1e03      	subs	r3, r0, #0
 80051f8:	d001      	beq.n	80051fe <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 80051fa:	f000 f95d 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80051fe:	46c0      	nop			@ (mov r8, r8)
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	20000a88 	.word	0x20000a88
 8005208:	40003800 	.word	0x40003800

0800520c <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 800520c:	b590      	push	{r4, r7, lr}
 800520e:	b089      	sub	sp, #36	@ 0x24
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005214:	240c      	movs	r4, #12
 8005216:	193b      	adds	r3, r7, r4
 8005218:	0018      	movs	r0, r3
 800521a:	2314      	movs	r3, #20
 800521c:	001a      	movs	r2, r3
 800521e:	2100      	movs	r1, #0
 8005220:	f00a fdf4 	bl	800fe0c <memset>
  if(i2sHandle->Instance==SPI2)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4a2d      	ldr	r2, [pc, #180]	@ (80052e0 <HAL_I2S_MspInit+0xd4>)
 800522a:	4293      	cmp	r3, r2
 800522c:	d154      	bne.n	80052d8 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800522e:	4b2d      	ldr	r3, [pc, #180]	@ (80052e4 <HAL_I2S_MspInit+0xd8>)
 8005230:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005232:	4b2c      	ldr	r3, [pc, #176]	@ (80052e4 <HAL_I2S_MspInit+0xd8>)
 8005234:	2180      	movs	r1, #128	@ 0x80
 8005236:	01c9      	lsls	r1, r1, #7
 8005238:	430a      	orrs	r2, r1
 800523a:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800523c:	4b29      	ldr	r3, [pc, #164]	@ (80052e4 <HAL_I2S_MspInit+0xd8>)
 800523e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005240:	4b28      	ldr	r3, [pc, #160]	@ (80052e4 <HAL_I2S_MspInit+0xd8>)
 8005242:	2102      	movs	r1, #2
 8005244:	430a      	orrs	r2, r1
 8005246:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005248:	4b26      	ldr	r3, [pc, #152]	@ (80052e4 <HAL_I2S_MspInit+0xd8>)
 800524a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800524c:	2202      	movs	r2, #2
 800524e:	4013      	ands	r3, r2
 8005250:	60bb      	str	r3, [r7, #8]
 8005252:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8005254:	193b      	adds	r3, r7, r4
 8005256:	22b0      	movs	r2, #176	@ 0xb0
 8005258:	0212      	lsls	r2, r2, #8
 800525a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800525c:	0021      	movs	r1, r4
 800525e:	187b      	adds	r3, r7, r1
 8005260:	2202      	movs	r2, #2
 8005262:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005264:	187b      	adds	r3, r7, r1
 8005266:	2200      	movs	r2, #0
 8005268:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800526a:	187b      	adds	r3, r7, r1
 800526c:	2200      	movs	r2, #0
 800526e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8005270:	187b      	adds	r3, r7, r1
 8005272:	2200      	movs	r2, #0
 8005274:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005276:	187b      	adds	r3, r7, r1
 8005278:	4a1b      	ldr	r2, [pc, #108]	@ (80052e8 <HAL_I2S_MspInit+0xdc>)
 800527a:	0019      	movs	r1, r3
 800527c:	0010      	movs	r0, r2
 800527e:	f004 f919 	bl	80094b4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005282:	4b1a      	ldr	r3, [pc, #104]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 8005284:	4a1a      	ldr	r2, [pc, #104]	@ (80052f0 <HAL_I2S_MspInit+0xe4>)
 8005286:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8005288:	4b18      	ldr	r3, [pc, #96]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 800528a:	2202      	movs	r2, #2
 800528c:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800528e:	4b17      	ldr	r3, [pc, #92]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 8005290:	2200      	movs	r2, #0
 8005292:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005294:	4b15      	ldr	r3, [pc, #84]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 8005296:	2200      	movs	r2, #0
 8005298:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800529a:	4b14      	ldr	r3, [pc, #80]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 800529c:	2280      	movs	r2, #128	@ 0x80
 800529e:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80052a0:	4b12      	ldr	r3, [pc, #72]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 80052a2:	2280      	movs	r2, #128	@ 0x80
 80052a4:	0052      	lsls	r2, r2, #1
 80052a6:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80052a8:	4b10      	ldr	r3, [pc, #64]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 80052aa:	2280      	movs	r2, #128	@ 0x80
 80052ac:	00d2      	lsls	r2, r2, #3
 80052ae:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 80052b0:	4b0e      	ldr	r3, [pc, #56]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 80052b2:	2220      	movs	r2, #32
 80052b4:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80052b6:	4b0d      	ldr	r3, [pc, #52]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 80052b8:	2200      	movs	r2, #0
 80052ba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 80052bc:	4b0b      	ldr	r3, [pc, #44]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 80052be:	0018      	movs	r0, r3
 80052c0:	f003 fe4c 	bl	8008f5c <HAL_DMA_Init>
 80052c4:	1e03      	subs	r3, r0, #0
 80052c6:	d001      	beq.n	80052cc <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 80052c8:	f000 f8f6 	bl	80054b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a07      	ldr	r2, [pc, #28]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 80052d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80052d2:	4b06      	ldr	r3, [pc, #24]	@ (80052ec <HAL_I2S_MspInit+0xe0>)
 80052d4:	687a      	ldr	r2, [r7, #4]
 80052d6:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 80052d8:	46c0      	nop			@ (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b009      	add	sp, #36	@ 0x24
 80052de:	bd90      	pop	{r4, r7, pc}
 80052e0:	40003800 	.word	0x40003800
 80052e4:	40021000 	.word	0x40021000
 80052e8:	50000400 	.word	0x50000400
 80052ec:	20000ac4 	.word	0x20000ac4
 80052f0:	40020044 	.word	0x40020044

080052f4 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b082      	sub	sp, #8
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	4a0c      	ldr	r2, [pc, #48]	@ (8005334 <HAL_I2S_MspDeInit+0x40>)
 8005302:	4293      	cmp	r3, r2
 8005304:	d111      	bne.n	800532a <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 8005306:	4b0c      	ldr	r3, [pc, #48]	@ (8005338 <HAL_I2S_MspDeInit+0x44>)
 8005308:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800530a:	4b0b      	ldr	r3, [pc, #44]	@ (8005338 <HAL_I2S_MspDeInit+0x44>)
 800530c:	490b      	ldr	r1, [pc, #44]	@ (800533c <HAL_I2S_MspDeInit+0x48>)
 800530e:	400a      	ands	r2, r1
 8005310:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8005312:	23b0      	movs	r3, #176	@ 0xb0
 8005314:	021b      	lsls	r3, r3, #8
 8005316:	4a0a      	ldr	r2, [pc, #40]	@ (8005340 <HAL_I2S_MspDeInit+0x4c>)
 8005318:	0019      	movs	r1, r3
 800531a:	0010      	movs	r0, r2
 800531c:	f004 fa48 	bl	80097b0 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005324:	0018      	movs	r0, r3
 8005326:	f003 fe91 	bl	800904c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 800532a:	46c0      	nop			@ (mov r8, r8)
 800532c:	46bd      	mov	sp, r7
 800532e:	b002      	add	sp, #8
 8005330:	bd80      	pop	{r7, pc}
 8005332:	46c0      	nop			@ (mov r8, r8)
 8005334:	40003800 	.word	0x40003800
 8005338:	40021000 	.word	0x40021000
 800533c:	ffffbfff 	.word	0xffffbfff
 8005340:	50000400 	.word	0x50000400

08005344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b082      	sub	sp, #8
 8005348:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800534a:	f003 f917 	bl	800857c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800534e:	f000 f841 	bl	80053d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005352:	f7ff fc5f 	bl	8004c14 <MX_GPIO_Init>
  MX_DMA_Init();
 8005356:	f7ff fbdf 	bl	8004b18 <MX_DMA_Init>
  MX_I2C1_Init();
 800535a:	f7ff fdd5 	bl	8004f08 <MX_I2C1_Init>
  MX_I2S2_Init();
 800535e:	f7ff ff2d 	bl	80051bc <MX_I2S2_Init>
  MX_USART1_UART_Init();
 8005362:	f002 fb83 	bl	8007a6c <MX_USART1_UART_Init>
  MX_I2C2_Init();
 8005366:	f7ff fe0f 	bl	8004f88 <MX_I2C2_Init>
  MX_USB_PCD_Init();
 800536a:	f002 fce1 	bl	8007d30 <MX_USB_PCD_Init>
  MX_TIM2_Init();
 800536e:	f002 f9ff 	bl	8007770 <MX_TIM2_Init>
  MX_TIM3_Init();
 8005372:	f002 fa71 	bl	8007858 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 8005376:	f002 fbad 	bl	8007ad4 <MX_USART4_UART_Init>
  MX_ADC_Init();
 800537a:	f7ff fb1b 	bl	80049b4 <MX_ADC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 800537e:	4a0f      	ldr	r2, [pc, #60]	@ (80053bc <main+0x78>)
 8005380:	4b0f      	ldr	r3, [pc, #60]	@ (80053c0 <main+0x7c>)
 8005382:	0011      	movs	r1, r2
 8005384:	0018      	movs	r0, r3
 8005386:	f7ff fd43 	bl	8004e10 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 800538a:	f003 f95d 	bl	8008648 <HAL_GetTick>
 800538e:	0003      	movs	r3, r0
 8005390:	22fa      	movs	r2, #250	@ 0xfa
 8005392:	0092      	lsls	r2, r2, #2
 8005394:	4694      	mov	ip, r2
 8005396:	4463      	add	r3, ip
 8005398:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 800539a:	2003      	movs	r0, #3
 800539c:	f002 fdd8 	bl	8007f50 <SetVerboseLevel>
  BinaryReleaseInfo();
 80053a0:	f002 fdee 	bl	8007f80 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 80053a4:	4b07      	ldr	r3, [pc, #28]	@ (80053c4 <main+0x80>)
 80053a6:	4a08      	ldr	r2, [pc, #32]	@ (80053c8 <main+0x84>)
 80053a8:	4908      	ldr	r1, [pc, #32]	@ (80053cc <main+0x88>)
 80053aa:	4809      	ldr	r0, [pc, #36]	@ (80053d0 <main+0x8c>)
 80053ac:	f7ff fbda 	bl	8004b64 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    UpkeepGadget();
 80053b0:	f7ff fbfe 	bl	8004bb0 <UpkeepGadget>
    ESP_Upkeep();
 80053b4:	f7ff f962 	bl	800467c <ESP_Upkeep>
    UpkeepGadget();
 80053b8:	46c0      	nop			@ (mov r8, r8)
 80053ba:	e7f9      	b.n	80053b0 <main+0x6c>
 80053bc:	2000107c 	.word	0x2000107c
 80053c0:	2000103c 	.word	0x2000103c
 80053c4:	200008f4 	.word	0x200008f4
 80053c8:	20001174 	.word	0x20001174
 80053cc:	20000a88 	.word	0x20000a88
 80053d0:	20000950 	.word	0x20000950

080053d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80053d4:	b590      	push	{r4, r7, lr}
 80053d6:	b09d      	sub	sp, #116	@ 0x74
 80053d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80053da:	2438      	movs	r4, #56	@ 0x38
 80053dc:	193b      	adds	r3, r7, r4
 80053de:	0018      	movs	r0, r3
 80053e0:	2338      	movs	r3, #56	@ 0x38
 80053e2:	001a      	movs	r2, r3
 80053e4:	2100      	movs	r1, #0
 80053e6:	f00a fd11 	bl	800fe0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80053ea:	2324      	movs	r3, #36	@ 0x24
 80053ec:	18fb      	adds	r3, r7, r3
 80053ee:	0018      	movs	r0, r3
 80053f0:	2314      	movs	r3, #20
 80053f2:	001a      	movs	r2, r3
 80053f4:	2100      	movs	r1, #0
 80053f6:	f00a fd09 	bl	800fe0c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80053fa:	003b      	movs	r3, r7
 80053fc:	0018      	movs	r0, r3
 80053fe:	2324      	movs	r3, #36	@ 0x24
 8005400:	001a      	movs	r2, r3
 8005402:	2100      	movs	r1, #0
 8005404:	f00a fd02 	bl	800fe0c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005408:	4b29      	ldr	r3, [pc, #164]	@ (80054b0 <SystemClock_Config+0xdc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	4a29      	ldr	r2, [pc, #164]	@ (80054b4 <SystemClock_Config+0xe0>)
 800540e:	401a      	ands	r2, r3
 8005410:	4b27      	ldr	r3, [pc, #156]	@ (80054b0 <SystemClock_Config+0xdc>)
 8005412:	2180      	movs	r1, #128	@ 0x80
 8005414:	0109      	lsls	r1, r1, #4
 8005416:	430a      	orrs	r2, r1
 8005418:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800541a:	0021      	movs	r1, r4
 800541c:	187b      	adds	r3, r7, r1
 800541e:	2222      	movs	r2, #34	@ 0x22
 8005420:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005422:	187b      	adds	r3, r7, r1
 8005424:	2201      	movs	r2, #1
 8005426:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005428:	187b      	adds	r3, r7, r1
 800542a:	2210      	movs	r2, #16
 800542c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800542e:	187b      	adds	r3, r7, r1
 8005430:	2201      	movs	r2, #1
 8005432:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005434:	187b      	adds	r3, r7, r1
 8005436:	2200      	movs	r2, #0
 8005438:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800543a:	187b      	adds	r3, r7, r1
 800543c:	0018      	movs	r0, r3
 800543e:	f006 ff3f 	bl	800c2c0 <HAL_RCC_OscConfig>
 8005442:	1e03      	subs	r3, r0, #0
 8005444:	d001      	beq.n	800544a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005446:	f000 f837 	bl	80054b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800544a:	2124      	movs	r1, #36	@ 0x24
 800544c:	187b      	adds	r3, r7, r1
 800544e:	220f      	movs	r2, #15
 8005450:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005452:	187b      	adds	r3, r7, r1
 8005454:	2201      	movs	r2, #1
 8005456:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005458:	187b      	adds	r3, r7, r1
 800545a:	2200      	movs	r2, #0
 800545c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800545e:	187b      	adds	r3, r7, r1
 8005460:	2200      	movs	r2, #0
 8005462:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005464:	187b      	adds	r3, r7, r1
 8005466:	2200      	movs	r2, #0
 8005468:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800546a:	187b      	adds	r3, r7, r1
 800546c:	2100      	movs	r1, #0
 800546e:	0018      	movs	r0, r3
 8005470:	f007 fafa 	bl	800ca68 <HAL_RCC_ClockConfig>
 8005474:	1e03      	subs	r3, r0, #0
 8005476:	d001      	beq.n	800547c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005478:	f000 f81e 	bl	80054b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800547c:	003b      	movs	r3, r7
 800547e:	2249      	movs	r2, #73	@ 0x49
 8005480:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005482:	003b      	movs	r3, r7
 8005484:	2200      	movs	r2, #0
 8005486:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005488:	003b      	movs	r3, r7
 800548a:	2200      	movs	r2, #0
 800548c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800548e:	003b      	movs	r3, r7
 8005490:	2280      	movs	r2, #128	@ 0x80
 8005492:	04d2      	lsls	r2, r2, #19
 8005494:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005496:	003b      	movs	r3, r7
 8005498:	0018      	movs	r0, r3
 800549a:	f007 fd09 	bl	800ceb0 <HAL_RCCEx_PeriphCLKConfig>
 800549e:	1e03      	subs	r3, r0, #0
 80054a0:	d001      	beq.n	80054a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80054a2:	f000 f809 	bl	80054b8 <Error_Handler>
  }
}
 80054a6:	46c0      	nop			@ (mov r8, r8)
 80054a8:	46bd      	mov	sp, r7
 80054aa:	b01d      	add	sp, #116	@ 0x74
 80054ac:	bd90      	pop	{r4, r7, pc}
 80054ae:	46c0      	nop			@ (mov r8, r8)
 80054b0:	40007000 	.word	0x40007000
 80054b4:	ffffe7ff 	.word	0xffffe7ff

080054b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80054bc:	b672      	cpsid	i
}
 80054be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80054c0:	46c0      	nop			@ (mov r8, r8)
 80054c2:	e7fd      	b.n	80054c0 <Error_Handler+0x8>

080054c4 <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80054c8:	f7ff fcff 	bl	8004eca <HT_StartMeasurement>
}
 80054cc:	46c0      	nop			@ (mov r8, r8)
 80054ce:	46bd      	mov	sp, r7
 80054d0:	bd80      	pop	{r7, pc}
	...

080054d4 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80054d4:	b580      	push	{r7, lr}
 80054d6:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 80054d8:	4a04      	ldr	r2, [pc, #16]	@ (80054ec <HT_IsMeasurementDoneWrapper+0x18>)
 80054da:	4b05      	ldr	r3, [pc, #20]	@ (80054f0 <HT_IsMeasurementDoneWrapper+0x1c>)
 80054dc:	0011      	movs	r1, r2
 80054de:	0018      	movs	r0, r3
 80054e0:	f7ff fcfa 	bl	8004ed8 <HT_GetMeasurementValues>
 80054e4:	0003      	movs	r3, r0
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	20000b10 	.word	0x20000b10
 80054f0:	20000b0c 	.word	0x20000b0c

080054f4 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 80054f4:	b580      	push	{r7, lr}
 80054f6:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 80054f8:	f7ff fb70 	bl	8004bdc <Gas_StartMeasurement>
}
 80054fc:	46c0      	nop			@ (mov r8, r8)
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005508:	4b03      	ldr	r3, [pc, #12]	@ (8005518 <VOC_IsMeasurementDoneWrapper+0x14>)
 800550a:	0018      	movs	r0, r3
 800550c:	f7ff fb6d 	bl	8004bea <Gas_GetMeasurementValues>
 8005510:	0003      	movs	r3, r0
}
 8005512:	0018      	movs	r0, r3
 8005514:	46bd      	mov	sp, r7
 8005516:	bd80      	pop	{r7, pc}
 8005518:	20000b14 	.word	0x20000b14

0800551c <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
}
 8005520:	46c0      	nop			@ (mov r8, r8)
 8005522:	46bd      	mov	sp, r7
 8005524:	bd80      	pop	{r7, pc}

08005526 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005526:	b580      	push	{r7, lr}
 8005528:	af00      	add	r7, sp, #0
  return true;
 800552a:	2301      	movs	r3, #1
}
 800552c:	0018      	movs	r0, r3
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}

08005532 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005532:	b580      	push	{r7, lr}
 8005534:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8005536:	23fa      	movs	r3, #250	@ 0xfa
 8005538:	015b      	lsls	r3, r3, #5
 800553a:	2180      	movs	r1, #128	@ 0x80
 800553c:	0018      	movs	r0, r3
 800553e:	f000 fb63 	bl	8005c08 <MIC_Start>
}
 8005542:	46c0      	nop			@ (mov r8, r8)
 8005544:	46bd      	mov	sp, r7
 8005546:	bd80      	pop	{r7, pc}

08005548 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005548:	b580      	push	{r7, lr}
 800554a:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 800554c:	f000 fbe8 	bl	8005d20 <MIC_MeasurementDone>
 8005550:	0003      	movs	r3, r0
}
 8005552:	0018      	movs	r0, r3
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005558:	b5b0      	push	{r4, r5, r7, lr}
 800555a:	b096      	sub	sp, #88	@ 0x58
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005564:	4b86      	ldr	r3, [pc, #536]	@ (8005780 <Meas_Init+0x228>)
 8005566:	2200      	movs	r2, #0
 8005568:	701a      	strb	r2, [r3, #0]
  batteryInit(ADC_HANDLER);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	0018      	movs	r0, r3
 800556e:	f7fd ffed 	bl	800354c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005572:	4b84      	ldr	r3, [pc, #528]	@ (8005784 <Meas_Init+0x22c>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d103      	bne.n	8005582 <Meas_Init+0x2a>
 800557a:	4b82      	ldr	r3, [pc, #520]	@ (8005784 <Meas_Init+0x22c>)
 800557c:	785b      	ldrb	r3, [r3, #1]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d079      	beq.n	8005676 <Meas_Init+0x11e>
    I2CSensors_Init(sensorI2C);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	0018      	movs	r0, r3
 8005586:	f7ff f9a3 	bl	80048d0 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 800558a:	f7ff fcb5 	bl	8004ef8 <HT_DeviceConnected>
 800558e:	0003      	movs	r3, r0
 8005590:	001a      	movs	r2, r3
 8005592:	2301      	movs	r3, #1
 8005594:	4053      	eors	r3, r2
 8005596:	b2db      	uxtb	r3, r3
 8005598:	2b00      	cmp	r3, #0
 800559a:	d017      	beq.n	80055cc <Meas_Init+0x74>
       Error("Humidity / Temperature sensor NOT connected!");
 800559c:	4a7a      	ldr	r2, [pc, #488]	@ (8005788 <Meas_Init+0x230>)
 800559e:	4b7b      	ldr	r3, [pc, #492]	@ (800578c <Meas_Init+0x234>)
 80055a0:	0019      	movs	r1, r3
 80055a2:	2001      	movs	r0, #1
 80055a4:	f002 fc58 	bl	8007e58 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 80055a8:	4b76      	ldr	r3, [pc, #472]	@ (8005784 <Meas_Init+0x22c>)
 80055aa:	2200      	movs	r2, #0
 80055ac:	701a      	strb	r2, [r3, #0]
       // HT Device NOT connected, turning LED on RED.
       // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
       TIM2 -> CCR1 = 0;
 80055ae:	2380      	movs	r3, #128	@ 0x80
 80055b0:	05db      	lsls	r3, r3, #23
 80055b2:	2200      	movs	r2, #0
 80055b4:	635a      	str	r2, [r3, #52]	@ 0x34
       TIM2 -> CCR3 = 4000;
 80055b6:	2380      	movs	r3, #128	@ 0x80
 80055b8:	05db      	lsls	r3, r3, #23
 80055ba:	22fa      	movs	r2, #250	@ 0xfa
 80055bc:	0112      	lsls	r2, r2, #4
 80055be:	63da      	str	r2, [r3, #60]	@ 0x3c
       TIM2 -> CCR4 = 4000;
 80055c0:	2380      	movs	r3, #128	@ 0x80
 80055c2:	05db      	lsls	r3, r3, #23
 80055c4:	22fa      	movs	r2, #250	@ 0xfa
 80055c6:	0112      	lsls	r2, r2, #4
 80055c8:	641a      	str	r2, [r3, #64]	@ 0x40
 80055ca:	e013      	b.n	80055f4 <Meas_Init+0x9c>
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      Debug("Humidity / Temperature sensor initialised.");
 80055cc:	4a70      	ldr	r2, [pc, #448]	@ (8005790 <Meas_Init+0x238>)
 80055ce:	4b71      	ldr	r3, [pc, #452]	@ (8005794 <Meas_Init+0x23c>)
 80055d0:	0019      	movs	r1, r3
 80055d2:	2003      	movs	r0, #3
 80055d4:	f002 fc40 	bl	8007e58 <CreateLine>
      TIM2 -> CCR1 = 4000;
 80055d8:	2380      	movs	r3, #128	@ 0x80
 80055da:	05db      	lsls	r3, r3, #23
 80055dc:	22fa      	movs	r2, #250	@ 0xfa
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 80055e2:	2380      	movs	r3, #128	@ 0x80
 80055e4:	05db      	lsls	r3, r3, #23
 80055e6:	2200      	movs	r2, #0
 80055e8:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 80055ea:	2380      	movs	r3, #128	@ 0x80
 80055ec:	05db      	lsls	r3, r3, #23
 80055ee:	22fa      	movs	r2, #250	@ 0xfa
 80055f0:	0112      	lsls	r2, r2, #4
 80055f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    if(!Gas_DeviceConnected()) {
 80055f4:	f7ff fb06 	bl	8004c04 <Gas_DeviceConnected>
 80055f8:	0003      	movs	r3, r0
 80055fa:	001a      	movs	r2, r3
 80055fc:	2301      	movs	r3, #1
 80055fe:	4053      	eors	r3, r2
 8005600:	b2db      	uxtb	r3, r3
 8005602:	2b00      	cmp	r3, #0
 8005604:	d01d      	beq.n	8005642 <Meas_Init+0xea>
       Error("SGP device not connected!");
 8005606:	4a64      	ldr	r2, [pc, #400]	@ (8005798 <Meas_Init+0x240>)
 8005608:	4b60      	ldr	r3, [pc, #384]	@ (800578c <Meas_Init+0x234>)
 800560a:	0019      	movs	r1, r3
 800560c:	2001      	movs	r0, #1
 800560e:	f002 fc23 	bl	8007e58 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005612:	4b62      	ldr	r3, [pc, #392]	@ (800579c <Meas_Init+0x244>)
 8005614:	2200      	movs	r2, #0
 8005616:	2101      	movs	r1, #1
 8005618:	0018      	movs	r0, r3
 800561a:	f004 f9ab 	bl	8009974 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 800561e:	2380      	movs	r3, #128	@ 0x80
 8005620:	005b      	lsls	r3, r3, #1
 8005622:	485e      	ldr	r0, [pc, #376]	@ (800579c <Meas_Init+0x244>)
 8005624:	2201      	movs	r2, #1
 8005626:	0019      	movs	r1, r3
 8005628:	f004 f9a4 	bl	8009974 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800562c:	2380      	movs	r3, #128	@ 0x80
 800562e:	009b      	lsls	r3, r3, #2
 8005630:	485a      	ldr	r0, [pc, #360]	@ (800579c <Meas_Init+0x244>)
 8005632:	2201      	movs	r2, #1
 8005634:	0019      	movs	r1, r3
 8005636:	f004 f99d 	bl	8009974 <HAL_GPIO_WritePin>
       MeasEnabled.VOC_measurementEnabled = false;
 800563a:	4b52      	ldr	r3, [pc, #328]	@ (8005784 <Meas_Init+0x22c>)
 800563c:	2200      	movs	r2, #0
 800563e:	705a      	strb	r2, [r3, #1]
 8005640:	e019      	b.n	8005676 <Meas_Init+0x11e>
    }else{
      Debug("SGP sensor initialised.");
 8005642:	4a57      	ldr	r2, [pc, #348]	@ (80057a0 <Meas_Init+0x248>)
 8005644:	4b53      	ldr	r3, [pc, #332]	@ (8005794 <Meas_Init+0x23c>)
 8005646:	0019      	movs	r1, r3
 8005648:	2003      	movs	r0, #3
 800564a:	f002 fc05 	bl	8007e58 <CreateLine>
      // HT Device is connected, turning led on GREEN.
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800564e:	4b53      	ldr	r3, [pc, #332]	@ (800579c <Meas_Init+0x244>)
 8005650:	2201      	movs	r2, #1
 8005652:	2101      	movs	r1, #1
 8005654:	0018      	movs	r0, r3
 8005656:	f004 f98d 	bl	8009974 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 800565a:	2380      	movs	r3, #128	@ 0x80
 800565c:	005b      	lsls	r3, r3, #1
 800565e:	484f      	ldr	r0, [pc, #316]	@ (800579c <Meas_Init+0x244>)
 8005660:	2200      	movs	r2, #0
 8005662:	0019      	movs	r1, r3
 8005664:	f004 f986 	bl	8009974 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005668:	2380      	movs	r3, #128	@ 0x80
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	484b      	ldr	r0, [pc, #300]	@ (800579c <Meas_Init+0x244>)
 800566e:	2201      	movs	r2, #1
 8005670:	0019      	movs	r1, r3
 8005672:	f004 f97f 	bl	8009974 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005676:	4b43      	ldr	r3, [pc, #268]	@ (8005784 <Meas_Init+0x22c>)
 8005678:	78db      	ldrb	r3, [r3, #3]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d003      	beq.n	8005686 <Meas_Init+0x12e>
    MIC_Init(micI2s);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	0018      	movs	r0, r3
 8005682:	f000 f9e7 	bl	8005a54 <MIC_Init>
  }
  uint8_t offset = 0;
 8005686:	2557      	movs	r5, #87	@ 0x57
 8005688:	197b      	adds	r3, r7, r5
 800568a:	2200      	movs	r2, #0
 800568c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 800568e:	197b      	adds	r3, r7, r5
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	197a      	adds	r2, r7, r5
 8005694:	1c59      	adds	r1, r3, #1
 8005696:	7011      	strb	r1, [r2, #0]
 8005698:	4a3a      	ldr	r2, [pc, #232]	@ (8005784 <Meas_Init+0x22c>)
 800569a:	7814      	ldrb	r4, [r2, #0]
 800569c:	4a41      	ldr	r2, [pc, #260]	@ (80057a4 <Meas_Init+0x24c>)
 800569e:	0119      	lsls	r1, r3, #4
 80056a0:	4841      	ldr	r0, [pc, #260]	@ (80057a8 <Meas_Init+0x250>)
 80056a2:	5088      	str	r0, [r1, r2]
 80056a4:	493f      	ldr	r1, [pc, #252]	@ (80057a4 <Meas_Init+0x24c>)
 80056a6:	011a      	lsls	r2, r3, #4
 80056a8:	188a      	adds	r2, r1, r2
 80056aa:	3204      	adds	r2, #4
 80056ac:	493f      	ldr	r1, [pc, #252]	@ (80057ac <Meas_Init+0x254>)
 80056ae:	6011      	str	r1, [r2, #0]
 80056b0:	493c      	ldr	r1, [pc, #240]	@ (80057a4 <Meas_Init+0x24c>)
 80056b2:	011a      	lsls	r2, r3, #4
 80056b4:	188a      	adds	r2, r1, r2
 80056b6:	3208      	adds	r2, #8
 80056b8:	493d      	ldr	r1, [pc, #244]	@ (80057b0 <Meas_Init+0x258>)
 80056ba:	6011      	str	r1, [r2, #0]
 80056bc:	4a39      	ldr	r2, [pc, #228]	@ (80057a4 <Meas_Init+0x24c>)
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	18d3      	adds	r3, r2, r3
 80056c2:	330c      	adds	r3, #12
 80056c4:	1c22      	adds	r2, r4, #0
 80056c6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80056c8:	197b      	adds	r3, r7, r5
 80056ca:	781b      	ldrb	r3, [r3, #0]
 80056cc:	197a      	adds	r2, r7, r5
 80056ce:	1c59      	adds	r1, r3, #1
 80056d0:	7011      	strb	r1, [r2, #0]
 80056d2:	4a2c      	ldr	r2, [pc, #176]	@ (8005784 <Meas_Init+0x22c>)
 80056d4:	7854      	ldrb	r4, [r2, #1]
 80056d6:	4a33      	ldr	r2, [pc, #204]	@ (80057a4 <Meas_Init+0x24c>)
 80056d8:	0119      	lsls	r1, r3, #4
 80056da:	4836      	ldr	r0, [pc, #216]	@ (80057b4 <Meas_Init+0x25c>)
 80056dc:	5088      	str	r0, [r1, r2]
 80056de:	4931      	ldr	r1, [pc, #196]	@ (80057a4 <Meas_Init+0x24c>)
 80056e0:	011a      	lsls	r2, r3, #4
 80056e2:	188a      	adds	r2, r1, r2
 80056e4:	3204      	adds	r2, #4
 80056e6:	4934      	ldr	r1, [pc, #208]	@ (80057b8 <Meas_Init+0x260>)
 80056e8:	6011      	str	r1, [r2, #0]
 80056ea:	492e      	ldr	r1, [pc, #184]	@ (80057a4 <Meas_Init+0x24c>)
 80056ec:	011a      	lsls	r2, r3, #4
 80056ee:	188a      	adds	r2, r1, r2
 80056f0:	3208      	adds	r2, #8
 80056f2:	4932      	ldr	r1, [pc, #200]	@ (80057bc <Meas_Init+0x264>)
 80056f4:	6011      	str	r1, [r2, #0]
 80056f6:	4a2b      	ldr	r2, [pc, #172]	@ (80057a4 <Meas_Init+0x24c>)
 80056f8:	011b      	lsls	r3, r3, #4
 80056fa:	18d3      	adds	r3, r2, r3
 80056fc:	330c      	adds	r3, #12
 80056fe:	1c22      	adds	r2, r4, #0
 8005700:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005702:	197b      	adds	r3, r7, r5
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	197a      	adds	r2, r7, r5
 8005708:	1c59      	adds	r1, r3, #1
 800570a:	7011      	strb	r1, [r2, #0]
 800570c:	4a1d      	ldr	r2, [pc, #116]	@ (8005784 <Meas_Init+0x22c>)
 800570e:	7894      	ldrb	r4, [r2, #2]
 8005710:	4a24      	ldr	r2, [pc, #144]	@ (80057a4 <Meas_Init+0x24c>)
 8005712:	0119      	lsls	r1, r3, #4
 8005714:	482a      	ldr	r0, [pc, #168]	@ (80057c0 <Meas_Init+0x268>)
 8005716:	5088      	str	r0, [r1, r2]
 8005718:	4922      	ldr	r1, [pc, #136]	@ (80057a4 <Meas_Init+0x24c>)
 800571a:	011a      	lsls	r2, r3, #4
 800571c:	188a      	adds	r2, r1, r2
 800571e:	3204      	adds	r2, #4
 8005720:	4928      	ldr	r1, [pc, #160]	@ (80057c4 <Meas_Init+0x26c>)
 8005722:	6011      	str	r1, [r2, #0]
 8005724:	491f      	ldr	r1, [pc, #124]	@ (80057a4 <Meas_Init+0x24c>)
 8005726:	011a      	lsls	r2, r3, #4
 8005728:	188a      	adds	r2, r1, r2
 800572a:	3208      	adds	r2, #8
 800572c:	4926      	ldr	r1, [pc, #152]	@ (80057c8 <Meas_Init+0x270>)
 800572e:	6011      	str	r1, [r2, #0]
 8005730:	4a1c      	ldr	r2, [pc, #112]	@ (80057a4 <Meas_Init+0x24c>)
 8005732:	011b      	lsls	r3, r3, #4
 8005734:	18d3      	adds	r3, r2, r3
 8005736:	330c      	adds	r3, #12
 8005738:	1c22      	adds	r2, r4, #0
 800573a:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 800573c:	197b      	adds	r3, r7, r5
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	197a      	adds	r2, r7, r5
 8005742:	1c59      	adds	r1, r3, #1
 8005744:	7011      	strb	r1, [r2, #0]
 8005746:	4a0f      	ldr	r2, [pc, #60]	@ (8005784 <Meas_Init+0x22c>)
 8005748:	78d4      	ldrb	r4, [r2, #3]
 800574a:	4a16      	ldr	r2, [pc, #88]	@ (80057a4 <Meas_Init+0x24c>)
 800574c:	0119      	lsls	r1, r3, #4
 800574e:	481f      	ldr	r0, [pc, #124]	@ (80057cc <Meas_Init+0x274>)
 8005750:	5088      	str	r0, [r1, r2]
 8005752:	4914      	ldr	r1, [pc, #80]	@ (80057a4 <Meas_Init+0x24c>)
 8005754:	011a      	lsls	r2, r3, #4
 8005756:	188a      	adds	r2, r1, r2
 8005758:	3204      	adds	r2, #4
 800575a:	491d      	ldr	r1, [pc, #116]	@ (80057d0 <Meas_Init+0x278>)
 800575c:	6011      	str	r1, [r2, #0]
 800575e:	4911      	ldr	r1, [pc, #68]	@ (80057a4 <Meas_Init+0x24c>)
 8005760:	011a      	lsls	r2, r3, #4
 8005762:	188a      	adds	r2, r1, r2
 8005764:	3208      	adds	r2, #8
 8005766:	491b      	ldr	r1, [pc, #108]	@ (80057d4 <Meas_Init+0x27c>)
 8005768:	6011      	str	r1, [r2, #0]
 800576a:	4a0e      	ldr	r2, [pc, #56]	@ (80057a4 <Meas_Init+0x24c>)
 800576c:	011b      	lsls	r3, r3, #4
 800576e:	18d3      	adds	r3, r2, r3
 8005770:	330c      	adds	r3, #12
 8005772:	1c22      	adds	r2, r4, #0
 8005774:	701a      	strb	r2, [r3, #0]
}
 8005776:	46c0      	nop			@ (mov r8, r8)
 8005778:	46bd      	mov	sp, r7
 800577a:	b016      	add	sp, #88	@ 0x58
 800577c:	bdb0      	pop	{r4, r5, r7, pc}
 800577e:	46c0      	nop			@ (mov r8, r8)
 8005780:	20000b60 	.word	0x20000b60
 8005784:	20000b5c 	.word	0x20000b5c
 8005788:	08012908 	.word	0x08012908
 800578c:	08012938 	.word	0x08012938
 8005790:	0801293c 	.word	0x0801293c
 8005794:	08012968 	.word	0x08012968
 8005798:	0801296c 	.word	0x0801296c
 800579c:	50000400 	.word	0x50000400
 80057a0:	08012988 	.word	0x08012988
 80057a4:	20000b1c 	.word	0x20000b1c
 80057a8:	080054c5 	.word	0x080054c5
 80057ac:	080054d5 	.word	0x080054d5
 80057b0:	20000b18 	.word	0x20000b18
 80057b4:	080054f5 	.word	0x080054f5
 80057b8:	08005505 	.word	0x08005505
 80057bc:	20000b19 	.word	0x20000b19
 80057c0:	0800551d 	.word	0x0800551d
 80057c4:	08005527 	.word	0x08005527
 80057c8:	20000b1a 	.word	0x20000b1a
 80057cc:	08005533 	.word	0x08005533
 80057d0:	08005549 	.word	0x08005549
 80057d4:	20000b1b 	.word	0x20000b1b

080057d8 <StartMeasurements>:

void StartMeasurements(void) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80057dc:	4b10      	ldr	r3, [pc, #64]	@ (8005820 <StartMeasurements+0x48>)
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e015      	b.n	8005810 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80057e4:	4b0e      	ldr	r3, [pc, #56]	@ (8005820 <StartMeasurements+0x48>)
 80057e6:	781b      	ldrb	r3, [r3, #0]
 80057e8:	4a0e      	ldr	r2, [pc, #56]	@ (8005824 <StartMeasurements+0x4c>)
 80057ea:	011b      	lsls	r3, r3, #4
 80057ec:	18d3      	adds	r3, r2, r3
 80057ee:	330c      	adds	r3, #12
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d006      	beq.n	8005804 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80057f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005820 <StartMeasurements+0x48>)
 80057f8:	781b      	ldrb	r3, [r3, #0]
 80057fa:	001a      	movs	r2, r3
 80057fc:	4b09      	ldr	r3, [pc, #36]	@ (8005824 <StartMeasurements+0x4c>)
 80057fe:	0112      	lsls	r2, r2, #4
 8005800:	58d3      	ldr	r3, [r2, r3]
 8005802:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005804:	4b06      	ldr	r3, [pc, #24]	@ (8005820 <StartMeasurements+0x48>)
 8005806:	781b      	ldrb	r3, [r3, #0]
 8005808:	3301      	adds	r3, #1
 800580a:	b2da      	uxtb	r2, r3
 800580c:	4b04      	ldr	r3, [pc, #16]	@ (8005820 <StartMeasurements+0x48>)
 800580e:	701a      	strb	r2, [r3, #0]
 8005810:	4b03      	ldr	r3, [pc, #12]	@ (8005820 <StartMeasurements+0x48>)
 8005812:	781b      	ldrb	r3, [r3, #0]
 8005814:	2b03      	cmp	r3, #3
 8005816:	d9e5      	bls.n	80057e4 <StartMeasurements+0xc>
    }
  }
}
 8005818:	46c0      	nop			@ (mov r8, r8)
 800581a:	46c0      	nop			@ (mov r8, r8)
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}
 8005820:	20000b61 	.word	0x20000b61
 8005824:	20000b1c 	.word	0x20000b1c

08005828 <ResetMeasurements>:

void ResetMeasurements(void) {
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 800582c:	4b0b      	ldr	r3, [pc, #44]	@ (800585c <ResetMeasurements+0x34>)
 800582e:	2200      	movs	r2, #0
 8005830:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005832:	4b0a      	ldr	r3, [pc, #40]	@ (800585c <ResetMeasurements+0x34>)
 8005834:	2200      	movs	r2, #0
 8005836:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8005838:	4b08      	ldr	r3, [pc, #32]	@ (800585c <ResetMeasurements+0x34>)
 800583a:	2200      	movs	r2, #0
 800583c:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 800583e:	4b07      	ldr	r3, [pc, #28]	@ (800585c <ResetMeasurements+0x34>)
 8005840:	2200      	movs	r2, #0
 8005842:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005844:	4b05      	ldr	r3, [pc, #20]	@ (800585c <ResetMeasurements+0x34>)
 8005846:	2200      	movs	r2, #0
 8005848:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 800584a:	4b04      	ldr	r3, [pc, #16]	@ (800585c <ResetMeasurements+0x34>)
 800584c:	2200      	movs	r2, #0
 800584e:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005850:	4b02      	ldr	r3, [pc, #8]	@ (800585c <ResetMeasurements+0x34>)
 8005852:	2200      	movs	r2, #0
 8005854:	73da      	strb	r2, [r3, #15]
}
 8005856:	46c0      	nop			@ (mov r8, r8)
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	20000b0c 	.word	0x20000b0c

08005860 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005860:	b580      	push	{r7, lr}
 8005862:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005864:	4b18      	ldr	r3, [pc, #96]	@ (80058c8 <MeasurementsCompleted+0x68>)
 8005866:	2200      	movs	r2, #0
 8005868:	701a      	strb	r2, [r3, #0]
 800586a:	e024      	b.n	80058b6 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 800586c:	4b16      	ldr	r3, [pc, #88]	@ (80058c8 <MeasurementsCompleted+0x68>)
 800586e:	781b      	ldrb	r3, [r3, #0]
 8005870:	4a16      	ldr	r2, [pc, #88]	@ (80058cc <MeasurementsCompleted+0x6c>)
 8005872:	011b      	lsls	r3, r3, #4
 8005874:	18d3      	adds	r3, r2, r3
 8005876:	330c      	adds	r3, #12
 8005878:	781b      	ldrb	r3, [r3, #0]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d015      	beq.n	80058aa <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 800587e:	4b12      	ldr	r3, [pc, #72]	@ (80058c8 <MeasurementsCompleted+0x68>)
 8005880:	781b      	ldrb	r3, [r3, #0]
 8005882:	4a12      	ldr	r2, [pc, #72]	@ (80058cc <MeasurementsCompleted+0x6c>)
 8005884:	011b      	lsls	r3, r3, #4
 8005886:	18d3      	adds	r3, r2, r3
 8005888:	3304      	adds	r3, #4
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4798      	blx	r3
 800588e:	1e03      	subs	r3, r0, #0
 8005890:	d009      	beq.n	80058a6 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005892:	4b0d      	ldr	r3, [pc, #52]	@ (80058c8 <MeasurementsCompleted+0x68>)
 8005894:	781b      	ldrb	r3, [r3, #0]
 8005896:	4a0d      	ldr	r2, [pc, #52]	@ (80058cc <MeasurementsCompleted+0x6c>)
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	18d3      	adds	r3, r2, r3
 800589c:	3308      	adds	r3, #8
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2201      	movs	r2, #1
 80058a2:	701a      	strb	r2, [r3, #0]
 80058a4:	e001      	b.n	80058aa <MeasurementsCompleted+0x4a>
      }else {
        return false;
 80058a6:	2300      	movs	r3, #0
 80058a8:	e00a      	b.n	80058c0 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80058aa:	4b07      	ldr	r3, [pc, #28]	@ (80058c8 <MeasurementsCompleted+0x68>)
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	3301      	adds	r3, #1
 80058b0:	b2da      	uxtb	r2, r3
 80058b2:	4b05      	ldr	r3, [pc, #20]	@ (80058c8 <MeasurementsCompleted+0x68>)
 80058b4:	701a      	strb	r2, [r3, #0]
 80058b6:	4b04      	ldr	r3, [pc, #16]	@ (80058c8 <MeasurementsCompleted+0x68>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	2b03      	cmp	r3, #3
 80058bc:	d9d6      	bls.n	800586c <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 80058be:	2301      	movs	r3, #1
}
 80058c0:	0018      	movs	r0, r3
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			@ (mov r8, r8)
 80058c8:	20000b61 	.word	0x20000b61
 80058cc:	20000b1c 	.word	0x20000b1c

080058d0 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 80058d0:	b5b0      	push	{r4, r5, r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af04      	add	r7, sp, #16
  switch(MeasState) {
 80058d6:	4b30      	ldr	r3, [pc, #192]	@ (8005998 <Meas_Upkeep+0xc8>)
 80058d8:	781b      	ldrb	r3, [r3, #0]
 80058da:	2b05      	cmp	r3, #5
 80058dc:	d854      	bhi.n	8005988 <Meas_Upkeep+0xb8>
 80058de:	009a      	lsls	r2, r3, #2
 80058e0:	4b2e      	ldr	r3, [pc, #184]	@ (800599c <Meas_Upkeep+0xcc>)
 80058e2:	18d3      	adds	r3, r2, r3
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 80058e8:	4a2d      	ldr	r2, [pc, #180]	@ (80059a0 <Meas_Upkeep+0xd0>)
 80058ea:	4b2e      	ldr	r3, [pc, #184]	@ (80059a4 <Meas_Upkeep+0xd4>)
 80058ec:	0019      	movs	r1, r3
 80058ee:	2003      	movs	r0, #3
 80058f0:	f002 fab2 	bl	8007e58 <CreateLine>
    break;
 80058f4:	e04d      	b.n	8005992 <Meas_Upkeep+0xc2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80058f6:	f7ff ff97 	bl	8005828 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80058fa:	4b27      	ldr	r3, [pc, #156]	@ (8005998 <Meas_Upkeep+0xc8>)
 80058fc:	2201      	movs	r2, #1
 80058fe:	701a      	strb	r2, [r3, #0]
    break;
 8005900:	e047      	b.n	8005992 <Meas_Upkeep+0xc2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8005902:	f7ff ff69 	bl	80057d8 <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8005906:	4b24      	ldr	r3, [pc, #144]	@ (8005998 <Meas_Upkeep+0xc8>)
 8005908:	2202      	movs	r2, #2
 800590a:	701a      	strb	r2, [r3, #0]
   break;
 800590c:	e041      	b.n	8005992 <Meas_Upkeep+0xc2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 800590e:	f7ff ffa7 	bl	8005860 <MeasurementsCompleted>
 8005912:	1e03      	subs	r3, r0, #0
 8005914:	d03c      	beq.n	8005990 <Meas_Upkeep+0xc0>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8005916:	4b20      	ldr	r3, [pc, #128]	@ (8005998 <Meas_Upkeep+0xc8>)
 8005918:	2203      	movs	r2, #3
 800591a:	701a      	strb	r2, [r3, #0]
    }
    break;
 800591c:	e038      	b.n	8005990 <Meas_Upkeep+0xc0>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 800591e:	4a22      	ldr	r2, [pc, #136]	@ (80059a8 <Meas_Upkeep+0xd8>)
 8005920:	4b20      	ldr	r3, [pc, #128]	@ (80059a4 <Meas_Upkeep+0xd4>)
 8005922:	0019      	movs	r1, r3
 8005924:	2003      	movs	r0, #3
 8005926:	f002 fa97 	bl	8007e58 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 800592a:	4b20      	ldr	r3, [pc, #128]	@ (80059ac <Meas_Upkeep+0xdc>)
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	4a20      	ldr	r2, [pc, #128]	@ (80059b0 <Meas_Upkeep+0xe0>)
 8005930:	491c      	ldr	r1, [pc, #112]	@ (80059a4 <Meas_Upkeep+0xd4>)
 8005932:	2003      	movs	r0, #3
 8005934:	f002 fa90 	bl	8007e58 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8005938:	4b1c      	ldr	r3, [pc, #112]	@ (80059ac <Meas_Upkeep+0xdc>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	1c18      	adds	r0, r3, #0
 800593e:	f7fd fd0f 	bl	8003360 <__aeabi_f2d>
 8005942:	0004      	movs	r4, r0
 8005944:	000d      	movs	r5, r1
 8005946:	4b19      	ldr	r3, [pc, #100]	@ (80059ac <Meas_Upkeep+0xdc>)
 8005948:	685b      	ldr	r3, [r3, #4]
 800594a:	1c18      	adds	r0, r3, #0
 800594c:	f7fd fd08 	bl	8003360 <__aeabi_f2d>
 8005950:	0002      	movs	r2, r0
 8005952:	000b      	movs	r3, r1
 8005954:	4817      	ldr	r0, [pc, #92]	@ (80059b4 <Meas_Upkeep+0xe4>)
 8005956:	4913      	ldr	r1, [pc, #76]	@ (80059a4 <Meas_Upkeep+0xd4>)
 8005958:	9202      	str	r2, [sp, #8]
 800595a:	9303      	str	r3, [sp, #12]
 800595c:	9400      	str	r4, [sp, #0]
 800595e:	9501      	str	r5, [sp, #4]
 8005960:	0002      	movs	r2, r0
 8005962:	2003      	movs	r0, #3
 8005964:	f002 fa78 	bl	8007e58 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8005968:	4b10      	ldr	r3, [pc, #64]	@ (80059ac <Meas_Upkeep+0xdc>)
 800596a:	6858      	ldr	r0, [r3, #4]
 800596c:	4b0f      	ldr	r3, [pc, #60]	@ (80059ac <Meas_Upkeep+0xdc>)
 800596e:	6819      	ldr	r1, [r3, #0]
 8005970:	4b0e      	ldr	r3, [pc, #56]	@ (80059ac <Meas_Upkeep+0xdc>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	b29b      	uxth	r3, r3
 8005976:	001a      	movs	r2, r3
 8005978:	f7fd fe9a 	bl	80036b0 <setMeasurement>
    checkCharges();
 800597c:	f7fd fdf4 	bl	8003568 <checkCharges>
    MeasState = MEAS_STATE_INIT;
 8005980:	4b05      	ldr	r3, [pc, #20]	@ (8005998 <Meas_Upkeep+0xc8>)
 8005982:	2200      	movs	r2, #0
 8005984:	701a      	strb	r2, [r3, #0]
    break;
 8005986:	e004      	b.n	8005992 <Meas_Upkeep+0xc2>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8005988:	4b03      	ldr	r3, [pc, #12]	@ (8005998 <Meas_Upkeep+0xc8>)
 800598a:	2200      	movs	r2, #0
 800598c:	701a      	strb	r2, [r3, #0]
    break;
 800598e:	e000      	b.n	8005992 <Meas_Upkeep+0xc2>
    break;
 8005990:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005992:	46c0      	nop			@ (mov r8, r8)
 8005994:	46bd      	mov	sp, r7
 8005996:	bdb0      	pop	{r4, r5, r7, pc}
 8005998:	20000b60 	.word	0x20000b60
 800599c:	08012fb0 	.word	0x08012fb0
 80059a0:	080129a0 	.word	0x080129a0
 80059a4:	08012968 	.word	0x08012968
 80059a8:	080129c0 	.word	0x080129c0
 80059ac:	20000b0c 	.word	0x20000b0c
 80059b0:	080129d4 	.word	0x080129d4
 80059b4:	080129ec 	.word	0x080129ec

080059b8 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80059b8:	b590      	push	{r4, r7, lr}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	1d3b      	adds	r3, r7, #4
 80059c0:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80059c2:	240f      	movs	r4, #15
 80059c4:	193b      	adds	r3, r7, r4
 80059c6:	2200      	movs	r2, #0
 80059c8:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80059ca:	4b20      	ldr	r3, [pc, #128]	@ (8005a4c <Meas_SetEnabledSensors+0x94>)
 80059cc:	1d3a      	adds	r2, r7, #4
 80059ce:	6812      	ldr	r2, [r2, #0]
 80059d0:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80059d2:	193b      	adds	r3, r7, r4
 80059d4:	781b      	ldrb	r3, [r3, #0]
 80059d6:	193a      	adds	r2, r7, r4
 80059d8:	1c59      	adds	r1, r3, #1
 80059da:	7011      	strb	r1, [r2, #0]
 80059dc:	0018      	movs	r0, r3
 80059de:	1d3b      	adds	r3, r7, #4
 80059e0:	7819      	ldrb	r1, [r3, #0]
 80059e2:	4a1b      	ldr	r2, [pc, #108]	@ (8005a50 <Meas_SetEnabledSensors+0x98>)
 80059e4:	0103      	lsls	r3, r0, #4
 80059e6:	18d3      	adds	r3, r2, r3
 80059e8:	330c      	adds	r3, #12
 80059ea:	1c0a      	adds	r2, r1, #0
 80059ec:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80059ee:	193b      	adds	r3, r7, r4
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	193a      	adds	r2, r7, r4
 80059f4:	1c59      	adds	r1, r3, #1
 80059f6:	7011      	strb	r1, [r2, #0]
 80059f8:	0018      	movs	r0, r3
 80059fa:	1d3b      	adds	r3, r7, #4
 80059fc:	7859      	ldrb	r1, [r3, #1]
 80059fe:	4a14      	ldr	r2, [pc, #80]	@ (8005a50 <Meas_SetEnabledSensors+0x98>)
 8005a00:	0103      	lsls	r3, r0, #4
 8005a02:	18d3      	adds	r3, r2, r3
 8005a04:	330c      	adds	r3, #12
 8005a06:	1c0a      	adds	r2, r1, #0
 8005a08:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8005a0a:	193b      	adds	r3, r7, r4
 8005a0c:	781b      	ldrb	r3, [r3, #0]
 8005a0e:	193a      	adds	r2, r7, r4
 8005a10:	1c59      	adds	r1, r3, #1
 8005a12:	7011      	strb	r1, [r2, #0]
 8005a14:	0018      	movs	r0, r3
 8005a16:	1d3b      	adds	r3, r7, #4
 8005a18:	7899      	ldrb	r1, [r3, #2]
 8005a1a:	4a0d      	ldr	r2, [pc, #52]	@ (8005a50 <Meas_SetEnabledSensors+0x98>)
 8005a1c:	0103      	lsls	r3, r0, #4
 8005a1e:	18d3      	adds	r3, r2, r3
 8005a20:	330c      	adds	r3, #12
 8005a22:	1c0a      	adds	r2, r1, #0
 8005a24:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8005a26:	193b      	adds	r3, r7, r4
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	193a      	adds	r2, r7, r4
 8005a2c:	1c59      	adds	r1, r3, #1
 8005a2e:	7011      	strb	r1, [r2, #0]
 8005a30:	0018      	movs	r0, r3
 8005a32:	1d3b      	adds	r3, r7, #4
 8005a34:	78d9      	ldrb	r1, [r3, #3]
 8005a36:	4a06      	ldr	r2, [pc, #24]	@ (8005a50 <Meas_SetEnabledSensors+0x98>)
 8005a38:	0103      	lsls	r3, r0, #4
 8005a3a:	18d3      	adds	r3, r2, r3
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	1c0a      	adds	r2, r1, #0
 8005a40:	701a      	strb	r2, [r3, #0]
}
 8005a42:	46c0      	nop			@ (mov r8, r8)
 8005a44:	46bd      	mov	sp, r7
 8005a46:	b005      	add	sp, #20
 8005a48:	bd90      	pop	{r4, r7, pc}
 8005a4a:	46c0      	nop			@ (mov r8, r8)
 8005a4c:	20000b5c 	.word	0x20000b5c
 8005a50:	20000b1c 	.word	0x20000b1c

08005a54 <MIC_Init>:
static volatile bool StartUpDone = false;
static volatile bool DataReady = false;
static uint8_t MIC_InitRetries = 0;
static uint8_t MIC_MaxRetries = 3;

void MIC_Init(I2S_HandleTypeDef* i2SHandle) {
 8005a54:	b5b0      	push	{r4, r5, r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  I2SHandle = i2SHandle;
 8005a5c:	4b42      	ldr	r3, [pc, #264]	@ (8005b68 <MIC_Init+0x114>)
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	601a      	str	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8005a62:	4b41      	ldr	r3, [pc, #260]	@ (8005b68 <MIC_Init+0x114>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <MIC_Init+0x24>
     Error("Microphone is not initialised.");
 8005a6a:	4a40      	ldr	r2, [pc, #256]	@ (8005b6c <MIC_Init+0x118>)
 8005a6c:	4b40      	ldr	r3, [pc, #256]	@ (8005b70 <MIC_Init+0x11c>)
 8005a6e:	0019      	movs	r1, r3
 8005a70:	2001      	movs	r0, #1
 8005a72:	f002 f9f1 	bl	8007e58 <CreateLine>
     return;
 8005a76:	e073      	b.n	8005b60 <MIC_Init+0x10c>
  }
  // Start data receiving to check if MIC is connected.
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples);
 8005a78:	4b3b      	ldr	r3, [pc, #236]	@ (8005b68 <MIC_Init+0x114>)
 8005a7a:	6818      	ldr	r0, [r3, #0]
 8005a7c:	4b3d      	ldr	r3, [pc, #244]	@ (8005b74 <MIC_Init+0x120>)
 8005a7e:	881a      	ldrh	r2, [r3, #0]
 8005a80:	250f      	movs	r5, #15
 8005a82:	197c      	adds	r4, r7, r5
 8005a84:	4b3c      	ldr	r3, [pc, #240]	@ (8005b78 <MIC_Init+0x124>)
 8005a86:	0019      	movs	r1, r3
 8005a88:	f006 f8c0 	bl	800bc0c <HAL_I2S_Receive_DMA>
 8005a8c:	0003      	movs	r3, r0
 8005a8e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_ERROR) {
 8005a90:	197b      	adds	r3, r7, r5
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	2b01      	cmp	r3, #1
 8005a96:	d111      	bne.n	8005abc <MIC_Init+0x68>
    Error("Microphone NOT initialised.");
 8005a98:	4a38      	ldr	r2, [pc, #224]	@ (8005b7c <MIC_Init+0x128>)
 8005a9a:	4b35      	ldr	r3, [pc, #212]	@ (8005b70 <MIC_Init+0x11c>)
 8005a9c:	0019      	movs	r1, r3
 8005a9e:	2001      	movs	r0, #1
 8005aa0:	f002 f9da 	bl	8007e58 <CreateLine>
    // Setting LED to RED to show mic is not working.
    TIM3 -> CCR1 = 2000;
 8005aa4:	4b36      	ldr	r3, [pc, #216]	@ (8005b80 <MIC_Init+0x12c>)
 8005aa6:	22fa      	movs	r2, #250	@ 0xfa
 8005aa8:	00d2      	lsls	r2, r2, #3
 8005aaa:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 4000;
 8005aac:	4b34      	ldr	r3, [pc, #208]	@ (8005b80 <MIC_Init+0x12c>)
 8005aae:	22fa      	movs	r2, #250	@ 0xfa
 8005ab0:	0112      	lsls	r2, r2, #4
 8005ab2:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8005ab4:	4b32      	ldr	r3, [pc, #200]	@ (8005b80 <MIC_Init+0x12c>)
 8005ab6:	22fa      	movs	r2, #250	@ 0xfa
 8005ab8:	0112      	lsls	r2, r2, #4
 8005aba:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if(status == HAL_BUSY) {
 8005abc:	230f      	movs	r3, #15
 8005abe:	18fb      	adds	r3, r7, r3
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	2b02      	cmp	r3, #2
 8005ac4:	d135      	bne.n	8005b32 <MIC_Init+0xde>
    Debug("Microphone is BUSY, retrying.");
 8005ac6:	4a2f      	ldr	r2, [pc, #188]	@ (8005b84 <MIC_Init+0x130>)
 8005ac8:	4b2f      	ldr	r3, [pc, #188]	@ (8005b88 <MIC_Init+0x134>)
 8005aca:	0019      	movs	r1, r3
 8005acc:	2003      	movs	r0, #3
 8005ace:	f002 f9c3 	bl	8007e58 <CreateLine>
    // Setting LED to YELLOW to show mic is busy.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 2000;
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	@ (8005b80 <MIC_Init+0x12c>)
 8005ad4:	22fa      	movs	r2, #250	@ 0xfa
 8005ad6:	00d2      	lsls	r2, r2, #3
 8005ad8:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 8005ada:	4b29      	ldr	r3, [pc, #164]	@ (8005b80 <MIC_Init+0x12c>)
 8005adc:	22fa      	movs	r2, #250	@ 0xfa
 8005ade:	00d2      	lsls	r2, r2, #3
 8005ae0:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8005ae2:	4b27      	ldr	r3, [pc, #156]	@ (8005b80 <MIC_Init+0x12c>)
 8005ae4:	22fa      	movs	r2, #250	@ 0xfa
 8005ae6:	0112      	lsls	r2, r2, #4
 8005ae8:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(MIC_InitRetries <= MIC_MaxRetries) {
 8005aea:	4b28      	ldr	r3, [pc, #160]	@ (8005b8c <MIC_Init+0x138>)
 8005aec:	781a      	ldrb	r2, [r3, #0]
 8005aee:	4b28      	ldr	r3, [pc, #160]	@ (8005b90 <MIC_Init+0x13c>)
 8005af0:	781b      	ldrb	r3, [r3, #0]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d80a      	bhi.n	8005b0c <MIC_Init+0xb8>
      MIC_InitRetries += 1;
 8005af6:	4b25      	ldr	r3, [pc, #148]	@ (8005b8c <MIC_Init+0x138>)
 8005af8:	781b      	ldrb	r3, [r3, #0]
 8005afa:	3301      	adds	r3, #1
 8005afc:	b2da      	uxtb	r2, r3
 8005afe:	4b23      	ldr	r3, [pc, #140]	@ (8005b8c <MIC_Init+0x138>)
 8005b00:	701a      	strb	r2, [r3, #0]
      // Calling function again.
      MIC_Init(i2SHandle);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	0018      	movs	r0, r3
 8005b06:	f7ff ffa5 	bl	8005a54 <MIC_Init>
 8005b0a:	e024      	b.n	8005b56 <MIC_Init+0x102>
    }else {
      Debug("Microphone is BUSY and is NOT working after retrying.");
 8005b0c:	4a21      	ldr	r2, [pc, #132]	@ (8005b94 <MIC_Init+0x140>)
 8005b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8005b88 <MIC_Init+0x134>)
 8005b10:	0019      	movs	r1, r3
 8005b12:	2003      	movs	r0, #3
 8005b14:	f002 f9a0 	bl	8007e58 <CreateLine>
      // Setting LED to RED to show mic is not working.
      // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
      TIM3 -> CCR1 = 2000;
 8005b18:	4b19      	ldr	r3, [pc, #100]	@ (8005b80 <MIC_Init+0x12c>)
 8005b1a:	22fa      	movs	r2, #250	@ 0xfa
 8005b1c:	00d2      	lsls	r2, r2, #3
 8005b1e:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 8005b20:	4b17      	ldr	r3, [pc, #92]	@ (8005b80 <MIC_Init+0x12c>)
 8005b22:	22fa      	movs	r2, #250	@ 0xfa
 8005b24:	0112      	lsls	r2, r2, #4
 8005b26:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8005b28:	4b15      	ldr	r3, [pc, #84]	@ (8005b80 <MIC_Init+0x12c>)
 8005b2a:	22fa      	movs	r2, #250	@ 0xfa
 8005b2c:	0112      	lsls	r2, r2, #4
 8005b2e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005b30:	e011      	b.n	8005b56 <MIC_Init+0x102>
    }
  }else {
    Debug("Microphone initialised.");
 8005b32:	4a19      	ldr	r2, [pc, #100]	@ (8005b98 <MIC_Init+0x144>)
 8005b34:	4b14      	ldr	r3, [pc, #80]	@ (8005b88 <MIC_Init+0x134>)
 8005b36:	0019      	movs	r1, r3
 8005b38:	2003      	movs	r0, #3
 8005b3a:	f002 f98d 	bl	8007e58 <CreateLine>
    // Setting LED to GREEN to show mic is working.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 4000;
 8005b3e:	4b10      	ldr	r3, [pc, #64]	@ (8005b80 <MIC_Init+0x12c>)
 8005b40:	22fa      	movs	r2, #250	@ 0xfa
 8005b42:	0112      	lsls	r2, r2, #4
 8005b44:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 8005b46:	4b0e      	ldr	r3, [pc, #56]	@ (8005b80 <MIC_Init+0x12c>)
 8005b48:	22fa      	movs	r2, #250	@ 0xfa
 8005b4a:	00d2      	lsls	r2, r2, #3
 8005b4c:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <MIC_Init+0x12c>)
 8005b50:	22fa      	movs	r2, #250	@ 0xfa
 8005b52:	0112      	lsls	r2, r2, #4
 8005b54:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  // Stop DMA
  HAL_I2S_DMAStop(I2SHandle);
 8005b56:	4b04      	ldr	r3, [pc, #16]	@ (8005b68 <MIC_Init+0x114>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	0018      	movs	r0, r3
 8005b5c:	f006 f918 	bl	800bd90 <HAL_I2S_DMAStop>
}
 8005b60:	46bd      	mov	sp, r7
 8005b62:	b004      	add	sp, #16
 8005b64:	bdb0      	pop	{r4, r5, r7, pc}
 8005b66:	46c0      	nop			@ (mov r8, r8)
 8005b68:	20000b64 	.word	0x20000b64
 8005b6c:	08012a20 	.word	0x08012a20
 8005b70:	08012a40 	.word	0x08012a40
 8005b74:	20000100 	.word	0x20000100
 8005b78:	20000b68 	.word	0x20000b68
 8005b7c:	08012a44 	.word	0x08012a44
 8005b80:	40000400 	.word	0x40000400
 8005b84:	08012a60 	.word	0x08012a60
 8005b88:	08012a80 	.word	0x08012a80
 8005b8c:	20000f72 	.word	0x20000f72
 8005b90:	20000102 	.word	0x20000102
 8005b94:	08012a84 	.word	0x08012a84
 8005b98:	08012abc 	.word	0x08012abc

08005b9c <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8005ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8005bd8 <UpdateSampleRate+0x3c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	687a      	ldr	r2, [r7, #4]
 8005bac:	429a      	cmp	r2, r3
 8005bae:	d00e      	beq.n	8005bce <UpdateSampleRate+0x32>
    return;
  }
  HAL_I2S_DeInit(I2SHandle);
 8005bb0:	4b09      	ldr	r3, [pc, #36]	@ (8005bd8 <UpdateSampleRate+0x3c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f005 fffd 	bl	800bbb4 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 8005bba:	4b07      	ldr	r3, [pc, #28]	@ (8005bd8 <UpdateSampleRate+0x3c>)
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 8005bc2:	4b05      	ldr	r3, [pc, #20]	@ (8005bd8 <UpdateSampleRate+0x3c>)
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	0018      	movs	r0, r3
 8005bc8:	f005 ff02 	bl	800b9d0 <HAL_I2S_Init>
 8005bcc:	e000      	b.n	8005bd0 <UpdateSampleRate+0x34>
    return;
 8005bce:	46c0      	nop			@ (mov r8, r8)
}
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	b002      	add	sp, #8
 8005bd4:	bd80      	pop	{r7, pc}
 8005bd6:	46c0      	nop			@ (mov r8, r8)
 8005bd8:	20000b64 	.word	0x20000b64

08005bdc <ConvertAudio>:

static uint32_t ConvertAudio(uint16_t* data) {
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b084      	sub	sp, #16
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
  uint32_t audioValue = data[1] | (data[0] << 16);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	3302      	adds	r3, #2
 8005be8:	881b      	ldrh	r3, [r3, #0]
 8005bea:	001a      	movs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	881b      	ldrh	r3, [r3, #0]
 8005bf0:	041b      	lsls	r3, r3, #16
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	60fb      	str	r3, [r7, #12]
  audioValue = audioValue >> 7;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	09db      	lsrs	r3, r3, #7
 8005bfa:	60fb      	str	r3, [r7, #12]
  return audioValue;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
}
 8005bfe:	0018      	movs	r0, r3
 8005c00:	46bd      	mov	sp, r7
 8005c02:	b004      	add	sp, #16
 8005c04:	bd80      	pop	{r7, pc}
	...

08005c08 <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8005c08:	b590      	push	{r4, r7, lr}
 8005c0a:	b085      	sub	sp, #20
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
 8005c10:	000a      	movs	r2, r1
 8005c12:	1cbb      	adds	r3, r7, #2
 8005c14:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8005c16:	4b1d      	ldr	r3, [pc, #116]	@ (8005c8c <MIC_Start+0x84>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d106      	bne.n	8005c2c <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8005c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8005c90 <MIC_Start+0x88>)
 8005c20:	4b1c      	ldr	r3, [pc, #112]	@ (8005c94 <MIC_Start+0x8c>)
 8005c22:	0019      	movs	r1, r3
 8005c24:	2001      	movs	r0, #1
 8005c26:	f002 f917 	bl	8007e58 <CreateLine>
    return;
 8005c2a:	e02c      	b.n	8005c86 <MIC_Start+0x7e>
  }
  Debug("In mic start");
 8005c2c:	4a1a      	ldr	r2, [pc, #104]	@ (8005c98 <MIC_Start+0x90>)
 8005c2e:	4b1b      	ldr	r3, [pc, #108]	@ (8005c9c <MIC_Start+0x94>)
 8005c30:	0019      	movs	r1, r3
 8005c32:	2003      	movs	r0, #3
 8005c34:	f002 f910 	bl	8007e58 <CreateLine>
  UpdateSampleRate(sampleRate);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	0018      	movs	r0, r3
 8005c3c:	f7ff ffae 	bl	8005b9c <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8005c40:	4b17      	ldr	r3, [pc, #92]	@ (8005ca0 <MIC_Start+0x98>)
 8005c42:	1cba      	adds	r2, r7, #2
 8005c44:	8812      	ldrh	r2, [r2, #0]
 8005c46:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 8005c48:	f002 f992 	bl	8007f70 <GetCurrentHalTicks>
 8005c4c:	0002      	movs	r2, r0
 8005c4e:	4b15      	ldr	r3, [pc, #84]	@ (8005ca4 <MIC_Start+0x9c>)
 8005c50:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 8005c52:	4b14      	ldr	r3, [pc, #80]	@ (8005ca4 <MIC_Start+0x9c>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	3314      	adds	r3, #20
 8005c58:	001a      	movs	r2, r3
 8005c5a:	4b13      	ldr	r3, [pc, #76]	@ (8005ca8 <MIC_Start+0xa0>)
 8005c5c:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 8005c5e:	4b13      	ldr	r3, [pc, #76]	@ (8005cac <MIC_Start+0xa4>)
 8005c60:	2200      	movs	r2, #0
 8005c62:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8005c64:	4b12      	ldr	r3, [pc, #72]	@ (8005cb0 <MIC_Start+0xa8>)
 8005c66:	2200      	movs	r2, #0
 8005c68:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples >> 1);
 8005c6a:	4b08      	ldr	r3, [pc, #32]	@ (8005c8c <MIC_Start+0x84>)
 8005c6c:	6818      	ldr	r0, [r3, #0]
 8005c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ca0 <MIC_Start+0x98>)
 8005c70:	881b      	ldrh	r3, [r3, #0]
 8005c72:	085b      	lsrs	r3, r3, #1
 8005c74:	b29a      	uxth	r2, r3
 8005c76:	230f      	movs	r3, #15
 8005c78:	18fc      	adds	r4, r7, r3
 8005c7a:	4b0e      	ldr	r3, [pc, #56]	@ (8005cb4 <MIC_Start+0xac>)
 8005c7c:	0019      	movs	r1, r3
 8005c7e:	f005 ffc5 	bl	800bc0c <HAL_I2S_Receive_DMA>
 8005c82:	0003      	movs	r3, r0
 8005c84:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

//  Info("Status %d", status);

}
 8005c86:	46bd      	mov	sp, r7
 8005c88:	b005      	add	sp, #20
 8005c8a:	bd90      	pop	{r4, r7, pc}
 8005c8c:	20000b64 	.word	0x20000b64
 8005c90:	08012a20 	.word	0x08012a20
 8005c94:	08012a40 	.word	0x08012a40
 8005c98:	08012ad4 	.word	0x08012ad4
 8005c9c:	08012a80 	.word	0x08012a80
 8005ca0:	20000100 	.word	0x20000100
 8005ca4:	20000f68 	.word	0x20000f68
 8005ca8:	20000f6c 	.word	0x20000f6c
 8005cac:	20000f70 	.word	0x20000f70
 8005cb0:	20000f71 	.word	0x20000f71
 8005cb4:	20000b68 	.word	0x20000b68

08005cb8 <MIC_Print>:
//static void MIC_ProcessFFT() {
//  CalculateFFT();
//}


void MIC_Print(void) {
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b082      	sub	sp, #8
 8005cbc:	af00      	add	r7, sp, #0
  Info("New samples");
 8005cbe:	4a13      	ldr	r2, [pc, #76]	@ (8005d0c <MIC_Print+0x54>)
 8005cc0:	4b13      	ldr	r3, [pc, #76]	@ (8005d10 <MIC_Print+0x58>)
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	2002      	movs	r0, #2
 8005cc6:	f002 f8c7 	bl	8007e58 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	e011      	b.n	8005cf4 <MIC_Print+0x3c>
    uint32_t sample = ConvertAudio(&AudioRxBuffer[i]);
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	005a      	lsls	r2, r3, #1
 8005cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8005d14 <MIC_Print+0x5c>)
 8005cd6:	18d3      	adds	r3, r2, r3
 8005cd8:	0018      	movs	r0, r3
 8005cda:	f7ff ff7f 	bl	8005bdc <ConvertAudio>
 8005cde:	0003      	movs	r3, r0
 8005ce0:	603b      	str	r3, [r7, #0]
    Info("0x%08x", sample);
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8005d18 <MIC_Print+0x60>)
 8005ce6:	490a      	ldr	r1, [pc, #40]	@ (8005d10 <MIC_Print+0x58>)
 8005ce8:	2002      	movs	r0, #2
 8005cea:	f002 f8b5 	bl	8007e58 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	3302      	adds	r3, #2
 8005cf2:	607b      	str	r3, [r7, #4]
 8005cf4:	4b09      	ldr	r3, [pc, #36]	@ (8005d1c <MIC_Print+0x64>)
 8005cf6:	881b      	ldrh	r3, [r3, #0]
 8005cf8:	001a      	movs	r2, r3
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d3e7      	bcc.n	8005cd0 <MIC_Print+0x18>
  }
}
 8005d00:	46c0      	nop			@ (mov r8, r8)
 8005d02:	46c0      	nop			@ (mov r8, r8)
 8005d04:	46bd      	mov	sp, r7
 8005d06:	b002      	add	sp, #8
 8005d08:	bd80      	pop	{r7, pc}
 8005d0a:	46c0      	nop			@ (mov r8, r8)
 8005d0c:	08012ae4 	.word	0x08012ae4
 8005d10:	08012af0 	.word	0x08012af0
 8005d14:	20000b68 	.word	0x20000b68
 8005d18:	08012af4 	.word	0x08012af4
 8005d1c:	20000100 	.word	0x20000100

08005d20 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  if(DataReady) {
 8005d24:	4b0a      	ldr	r3, [pc, #40]	@ (8005d50 <MIC_MeasurementDone+0x30>)
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	b2db      	uxtb	r3, r3
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d00c      	beq.n	8005d48 <MIC_MeasurementDone+0x28>
    MIC_Print();
 8005d2e:	f7ff ffc3 	bl	8005cb8 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples >> 1);
 8005d32:	4b08      	ldr	r3, [pc, #32]	@ (8005d54 <MIC_MeasurementDone+0x34>)
 8005d34:	881b      	ldrh	r3, [r3, #0]
 8005d36:	085b      	lsrs	r3, r3, #1
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	4a07      	ldr	r2, [pc, #28]	@ (8005d58 <MIC_MeasurementDone+0x38>)
 8005d3c:	4907      	ldr	r1, [pc, #28]	@ (8005d5c <MIC_MeasurementDone+0x3c>)
 8005d3e:	2003      	movs	r0, #3
 8005d40:	f002 f88a 	bl	8007e58 <CreateLine>
    return true;
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <MIC_MeasurementDone+0x2a>
  }
  return false;
 8005d48:	2300      	movs	r3, #0
}
 8005d4a:	0018      	movs	r0, r3
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	20000f71 	.word	0x20000f71
 8005d54:	20000100 	.word	0x20000100
 8005d58:	08012afc 	.word	0x08012afc
 8005d5c:	08012a80 	.word	0x08012a80

08005d60 <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8005d68:	4b10      	ldr	r3, [pc, #64]	@ (8005dac <HAL_I2S_RxCpltCallback+0x4c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	687a      	ldr	r2, [r7, #4]
 8005d6e:	429a      	cmp	r2, r3
 8005d70:	d118      	bne.n	8005da4 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8005d72:	4b0f      	ldr	r3, [pc, #60]	@ (8005db0 <HAL_I2S_RxCpltCallback+0x50>)
 8005d74:	781b      	ldrb	r3, [r3, #0]
 8005d76:	b2db      	uxtb	r3, r3
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d008      	beq.n	8005d8e <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8005d7c:	4b0b      	ldr	r3, [pc, #44]	@ (8005dac <HAL_I2S_RxCpltCallback+0x4c>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	0018      	movs	r0, r3
 8005d82:	f006 f805 	bl	800bd90 <HAL_I2S_DMAStop>
    DataReady = true;
 8005d86:	4b0b      	ldr	r3, [pc, #44]	@ (8005db4 <HAL_I2S_RxCpltCallback+0x54>)
 8005d88:	2201      	movs	r2, #1
 8005d8a:	701a      	strb	r2, [r3, #0]
 8005d8c:	e00b      	b.n	8005da6 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <HAL_I2S_RxCpltCallback+0x58>)
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	0018      	movs	r0, r3
 8005d94:	f002 f80a 	bl	8007dac <TimestampIsReached>
 8005d98:	1e03      	subs	r3, r0, #0
 8005d9a:	d004      	beq.n	8005da6 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8005d9c:	4b04      	ldr	r3, [pc, #16]	@ (8005db0 <HAL_I2S_RxCpltCallback+0x50>)
 8005d9e:	2201      	movs	r2, #1
 8005da0:	701a      	strb	r2, [r3, #0]
 8005da2:	e000      	b.n	8005da6 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8005da4:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8005da6:	46bd      	mov	sp, r7
 8005da8:	b002      	add	sp, #8
 8005daa:	bd80      	pop	{r7, pc}
 8005dac:	20000b64 	.word	0x20000b64
 8005db0:	20000f70 	.word	0x20000f70
 8005db4:	20000f71 	.word	0x20000f71
 8005db8:	20000f6c 	.word	0x20000f6c

08005dbc <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b084      	sub	sp, #16
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	687a      	ldr	r2, [r7, #4]
 8005dd2:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d113      	bne.n	8005e02 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	22fe      	movs	r2, #254	@ 0xfe
 8005dde:	0592      	lsls	r2, r2, #22
 8005de0:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a1a      	ldr	r2, [pc, #104]	@ (8005e50 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8005de6:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4a1a      	ldr	r2, [pc, #104]	@ (8005e54 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8005dec:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	4a19      	ldr	r2, [pc, #100]	@ (8005e58 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8005df2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	4a19      	ldr	r2, [pc, #100]	@ (8005e5c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8005df8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	4a18      	ldr	r2, [pc, #96]	@ (8005e60 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8005dfe:	61da      	str	r2, [r3, #28]
 8005e00:	e011      	b.n	8005e26 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4a17      	ldr	r2, [pc, #92]	@ (8005e64 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8005e06:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	4a17      	ldr	r2, [pc, #92]	@ (8005e68 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8005e0c:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	4a16      	ldr	r2, [pc, #88]	@ (8005e6c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8005e12:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4a16      	ldr	r2, [pc, #88]	@ (8005e70 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8005e18:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	4a15      	ldr	r2, [pc, #84]	@ (8005e74 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8005e1e:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	4a15      	ldr	r2, [pc, #84]	@ (8005e78 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8005e24:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	4a14      	ldr	r2, [pc, #80]	@ (8005e7c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8005e2a:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4a14      	ldr	r2, [pc, #80]	@ (8005e80 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8005e30:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4a12      	ldr	r2, [pc, #72]	@ (8005e80 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8005e36:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	4a12      	ldr	r2, [pc, #72]	@ (8005e84 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8005e3c:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	0018      	movs	r0, r3
 8005e42:	f000 f831 	bl	8005ea8 <GasIndexAlgorithm_reset>
}
 8005e46:	46c0      	nop			@ (mov r8, r8)
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	b004      	add	sp, #16
 8005e4c:	bd80      	pop	{r7, pc}
 8005e4e:	46c0      	nop			@ (mov r8, r8)
 8005e50:	00002710 	.word	0x00002710
 8005e54:	44340000 	.word	0x44340000
 8005e58:	46859800 	.word	0x46859800
 8005e5c:	46a05000 	.word	0x46a05000
 8005e60:	41f00000 	.word	0x41f00000
 8005e64:	42c80000 	.word	0x42c80000
 8005e68:	00004e20 	.word	0x00004e20
 8005e6c:	43340000 	.word	0x43340000
 8005e70:	4528c000 	.word	0x4528c000
 8005e74:	45a32000 	.word	0x45a32000
 8005e78:	43aa0000 	.word	0x43aa0000
 8005e7c:	43660000 	.word	0x43660000
 8005e80:	41400000 	.word	0x41400000
 8005e84:	42480000 	.word	0x42480000

08005e88 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8005e88:	b580      	push	{r7, lr}
 8005e8a:	b082      	sub	sp, #8
 8005e8c:	af00      	add	r7, sp, #0
 8005e8e:	6078      	str	r0, [r7, #4]
 8005e90:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8005e92:	22fe      	movs	r2, #254	@ 0xfe
 8005e94:	0592      	lsls	r2, r2, #22
 8005e96:	6839      	ldr	r1, [r7, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f7ff ff8e 	bl	8005dbc <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8005ea0:	46c0      	nop			@ (mov r8, r8)
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	b002      	add	sp, #8
 8005ea6:	bd80      	pop	{r7, pc}

08005ea8 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b082      	sub	sp, #8
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	2200      	movs	r2, #0
 8005eba:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	0018      	movs	r0, r3
 8005ec6:	f000 f805 	bl	8005ed4 <GasIndexAlgorithm__init_instances>
}
 8005eca:	46c0      	nop			@ (mov r8, r8)
 8005ecc:	46bd      	mov	sp, r7
 8005ece:	b002      	add	sp, #8
 8005ed0:	bd80      	pop	{r7, pc}
	...

08005ed4 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8005ed4:	b590      	push	{r4, r7, lr}
 8005ed6:	b083      	sub	sp, #12
 8005ed8:	af00      	add	r7, sp, #0
 8005eda:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	0018      	movs	r0, r3
 8005ee0:	f000 f8e8 	bl	80060b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	f000 f9a6 	bl	8006238 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8005eec:	1c04      	adds	r4, r0, #0
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	0018      	movs	r0, r3
 8005ef2:	f000 f9ab 	bl	800624c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8005ef6:	1c02      	adds	r2, r0, #0
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	1c21      	adds	r1, r4, #0
 8005efc:	0018      	movs	r0, r3
 8005efe:	f000 fc3b 	bl	8006778 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	2b01      	cmp	r3, #1
 8005f08:	d107      	bne.n	8005f1a <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8005f0a:	23fe      	movs	r3, #254	@ 0xfe
 8005f0c:	059b      	lsls	r3, r3, #22
 8005f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8005f38 <GasIndexAlgorithm__init_instances+0x64>)
 8005f10:	490a      	ldr	r1, [pc, #40]	@ (8005f3c <GasIndexAlgorithm__init_instances+0x68>)
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fc86 	bl	8006824 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8005f18:	e005      	b.n	8005f26 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8005f1a:	4b09      	ldr	r3, [pc, #36]	@ (8005f40 <GasIndexAlgorithm__init_instances+0x6c>)
 8005f1c:	4a09      	ldr	r2, [pc, #36]	@ (8005f44 <GasIndexAlgorithm__init_instances+0x70>)
 8005f1e:	490a      	ldr	r1, [pc, #40]	@ (8005f48 <GasIndexAlgorithm__init_instances+0x74>)
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 fc7f 	bl	8006824 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	0018      	movs	r0, r3
 8005f2a:	f000 fd35 	bl	8006998 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8005f2e:	46c0      	nop			@ (mov r8, r8)
 8005f30:	46bd      	mov	sp, r7
 8005f32:	b003      	add	sp, #12
 8005f34:	bd90      	pop	{r4, r7, pc}
 8005f36:	46c0      	nop			@ (mov r8, r8)
 8005f38:	bc257a78 	.word	0xbc257a78
 8005f3c:	44198000 	.word	0x44198000
 8005f40:	42c80000 	.word	0x42c80000
 8005f44:	bbd4fdf4 	.word	0xbbd4fdf4
 8005f48:	43550000 	.word	0x43550000

08005f4c <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8005f4c:	b590      	push	{r4, r7, lr}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	60f8      	str	r0, [r7, #12]
 8005f54:	60b9      	str	r1, [r7, #8]
 8005f56:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f5c:	4952      	ldr	r1, [pc, #328]	@ (80060a8 <GasIndexAlgorithm_process+0x15c>)
 8005f5e:	1c18      	adds	r0, r3, #0
 8005f60:	f7fa fabe 	bl	80004e0 <__aeabi_fcmple>
 8005f64:	1e03      	subs	r3, r0, #0
 8005f66:	d00c      	beq.n	8005f82 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	1c19      	adds	r1, r3, #0
 8005f72:	1c10      	adds	r0, r2, #0
 8005f74:	f7fa fc22 	bl	80007bc <__aeabi_fadd>
 8005f78:	1c03      	adds	r3, r0, #0
 8005f7a:	1c1a      	adds	r2, r3, #0
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f80:	e080      	b.n	8006084 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	dd25      	ble.n	8005fd4 <GasIndexAlgorithm_process+0x88>
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	4a48      	ldr	r2, [pc, #288]	@ (80060ac <GasIndexAlgorithm_process+0x160>)
 8005f8c:	4293      	cmp	r3, r2
 8005f8e:	dc21      	bgt.n	8005fd4 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	68ba      	ldr	r2, [r7, #8]
 8005f96:	429a      	cmp	r2, r3
 8005f98:	dc04      	bgt.n	8005fa4 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	68db      	ldr	r3, [r3, #12]
 8005f9e:	3301      	adds	r3, #1
 8005fa0:	60bb      	str	r3, [r7, #8]
 8005fa2:	e00d      	b.n	8005fc0 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	4a41      	ldr	r2, [pc, #260]	@ (80060b0 <GasIndexAlgorithm_process+0x164>)
 8005faa:	4694      	mov	ip, r2
 8005fac:	4463      	add	r3, ip
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	429a      	cmp	r2, r3
 8005fb2:	dd05      	ble.n	8005fc0 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	4a3d      	ldr	r2, [pc, #244]	@ (80060b0 <GasIndexAlgorithm_process+0x164>)
 8005fba:	4694      	mov	ip, r2
 8005fbc:	4463      	add	r3, ip
 8005fbe:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	68db      	ldr	r3, [r3, #12]
 8005fc4:	68ba      	ldr	r2, [r7, #8]
 8005fc6:	1ad3      	subs	r3, r2, r3
 8005fc8:	0018      	movs	r0, r3
 8005fca:	f7fb fa7f 	bl	80014cc <__aeabi_i2f>
 8005fce:	1c02      	adds	r2, r0, #0
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d005      	beq.n	8005fe8 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	0018      	movs	r0, r3
 8005fe0:	f000 f945 	bl	800626e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8005fe4:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8005fe6:	d014      	beq.n	8006012 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	1c11      	adds	r1, r2, #0
 8005ff0:	0018      	movs	r0, r3
 8005ff2:	f000 fbd1 	bl	8006798 <GasIndexAlgorithm__mox_model__process>
 8005ff6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	1c11      	adds	r1, r2, #0
 8006004:	0018      	movs	r0, r3
 8006006:	f000 fc25 	bl	8006854 <GasIndexAlgorithm__sigmoid_scaled__process>
 800600a:	1c02      	adds	r2, r0, #0
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006010:	e003      	b.n	800601a <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	689a      	ldr	r2, [r3, #8]
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	1c11      	adds	r1, r2, #0
 8006022:	0018      	movs	r0, r3
 8006024:	f000 fcec 	bl	8006a00 <GasIndexAlgorithm__adaptive_lowpass__process>
 8006028:	1c02      	adds	r2, r0, #0
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006032:	21fc      	movs	r1, #252	@ 0xfc
 8006034:	0589      	lsls	r1, r1, #22
 8006036:	1c18      	adds	r0, r3, #0
 8006038:	f7fa fa48 	bl	80004cc <__aeabi_fcmplt>
 800603c:	1e03      	subs	r3, r0, #0
 800603e:	d003      	beq.n	8006048 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	22fc      	movs	r2, #252	@ 0xfc
 8006044:	0592      	lsls	r2, r2, #22
 8006046:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800604c:	2100      	movs	r1, #0
 800604e:	1c18      	adds	r0, r3, #0
 8006050:	f7fa fa50 	bl	80004f4 <__aeabi_fcmpgt>
 8006054:	1e03      	subs	r3, r0, #0
 8006056:	d015      	beq.n	8006084 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	1c11      	adds	r1, r2, #0
 8006060:	0018      	movs	r0, r3
 8006062:	f000 fa4f 	bl	8006504 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	0018      	movs	r0, r3
 800606a:	f000 f8e5 	bl	8006238 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800606e:	1c04      	adds	r4, r0, #0
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	0018      	movs	r0, r3
 8006074:	f000 f8ea 	bl	800624c <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006078:	1c02      	adds	r2, r0, #0
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	1c21      	adds	r1, r4, #0
 800607e:	0018      	movs	r0, r3
 8006080:	f000 fb7a 	bl	8006778 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006088:	21fc      	movs	r1, #252	@ 0xfc
 800608a:	0589      	lsls	r1, r1, #22
 800608c:	1c18      	adds	r0, r3, #0
 800608e:	f7fa fb95 	bl	80007bc <__aeabi_fadd>
 8006092:	1c03      	adds	r3, r0, #0
 8006094:	1c18      	adds	r0, r3, #0
 8006096:	f7fb f9f9 	bl	800148c <__aeabi_f2iz>
 800609a:	0002      	movs	r2, r0
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	601a      	str	r2, [r3, #0]
    return;
 80060a0:	46c0      	nop			@ (mov r8, r8)
}
 80060a2:	46bd      	mov	sp, r7
 80060a4:	b005      	add	sp, #20
 80060a6:	bd90      	pop	{r4, r7, pc}
 80060a8:	42340000 	.word	0x42340000
 80060ac:	0000fde7 	.word	0x0000fde7
 80060b0:	00007fff 	.word	0x00007fff

080060b4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 80060b4:	b5b0      	push	{r4, r5, r7, lr}
 80060b6:	b082      	sub	sp, #8
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	223c      	movs	r2, #60	@ 0x3c
 80060c0:	2100      	movs	r1, #0
 80060c2:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	2200      	movs	r2, #0
 80060c8:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	4952      	ldr	r1, [pc, #328]	@ (8006228 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80060de:	1c18      	adds	r0, r3, #0
 80060e0:	f7fa fcf6 	bl	8000ad0 <__aeabi_fdiv>
 80060e4:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80060e6:	2188      	movs	r1, #136	@ 0x88
 80060e8:	05c9      	lsls	r1, r1, #23
 80060ea:	1c18      	adds	r0, r3, #0
 80060ec:	f7fa fed6 	bl	8000e9c <__aeabi_fmul>
 80060f0:	1c03      	adds	r3, r0, #0
 80060f2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	685b      	ldr	r3, [r3, #4]
 80060fc:	494a      	ldr	r1, [pc, #296]	@ (8006228 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80060fe:	1c18      	adds	r0, r3, #0
 8006100:	f7fa fce6 	bl	8000ad0 <__aeabi_fdiv>
 8006104:	1c03      	adds	r3, r0, #0
 8006106:	1c19      	adds	r1, r3, #0
 8006108:	1c20      	adds	r0, r4, #0
 800610a:	f7fa fb57 	bl	80007bc <__aeabi_fadd>
 800610e:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006110:	1c19      	adds	r1, r3, #0
 8006112:	1c28      	adds	r0, r5, #0
 8006114:	f7fa fcdc 	bl	8000ad0 <__aeabi_fdiv>
 8006118:	1c03      	adds	r3, r0, #0
 800611a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	685b      	ldr	r3, [r3, #4]
 8006124:	4940      	ldr	r1, [pc, #256]	@ (8006228 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006126:	1c18      	adds	r0, r3, #0
 8006128:	f7fa fcd2 	bl	8000ad0 <__aeabi_fdiv>
 800612c:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800612e:	2185      	movs	r1, #133	@ 0x85
 8006130:	05c9      	lsls	r1, r1, #23
 8006132:	1c18      	adds	r0, r3, #0
 8006134:	f7fa feb2 	bl	8000e9c <__aeabi_fmul>
 8006138:	1c03      	adds	r3, r0, #0
 800613a:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	4938      	ldr	r1, [pc, #224]	@ (8006228 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006146:	1c18      	adds	r0, r3, #0
 8006148:	f7fa fcc2 	bl	8000ad0 <__aeabi_fdiv>
 800614c:	1c03      	adds	r3, r0, #0
 800614e:	1c19      	adds	r1, r3, #0
 8006150:	1c20      	adds	r0, r4, #0
 8006152:	f7fa fb33 	bl	80007bc <__aeabi_fadd>
 8006156:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006158:	1c19      	adds	r1, r3, #0
 800615a:	1c28      	adds	r0, r5, #0
 800615c:	f7fa fcb8 	bl	8000ad0 <__aeabi_fdiv>
 8006160:	1c03      	adds	r3, r0, #0
 8006162:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d118      	bne.n	80061a2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006174:	2188      	movs	r1, #136	@ 0x88
 8006176:	05c9      	lsls	r1, r1, #23
 8006178:	1c18      	adds	r0, r3, #0
 800617a:	f7fa fe8f 	bl	8000e9c <__aeabi_fmul>
 800617e:	1c03      	adds	r3, r0, #0
 8006180:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006186:	4929      	ldr	r1, [pc, #164]	@ (800622c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006188:	1c18      	adds	r0, r3, #0
 800618a:	f7fa fb17 	bl	80007bc <__aeabi_fadd>
 800618e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006190:	1c19      	adds	r1, r3, #0
 8006192:	1c20      	adds	r0, r4, #0
 8006194:	f7fa fc9c 	bl	8000ad0 <__aeabi_fdiv>
 8006198:	1c03      	adds	r3, r0, #0
 800619a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	655a      	str	r2, [r3, #84]	@ 0x54
 80061a0:	e017      	b.n	80061d2 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80061a6:	2188      	movs	r1, #136	@ 0x88
 80061a8:	05c9      	lsls	r1, r1, #23
 80061aa:	1c18      	adds	r0, r3, #0
 80061ac:	f7fa fe76 	bl	8000e9c <__aeabi_fmul>
 80061b0:	1c03      	adds	r3, r0, #0
 80061b2:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 80061b8:	491d      	ldr	r1, [pc, #116]	@ (8006230 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 80061ba:	1c18      	adds	r0, r3, #0
 80061bc:	f7fa fafe 	bl	80007bc <__aeabi_fadd>
 80061c0:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80061c2:	1c19      	adds	r1, r3, #0
 80061c4:	1c20      	adds	r0, r4, #0
 80061c6:	f7fa fc83 	bl	8000ad0 <__aeabi_fdiv>
 80061ca:	1c03      	adds	r3, r0, #0
 80061cc:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80061d6:	2185      	movs	r1, #133	@ 0x85
 80061d8:	05c9      	lsls	r1, r1, #23
 80061da:	1c18      	adds	r0, r3, #0
 80061dc:	f7fa fe5e 	bl	8000e9c <__aeabi_fmul>
 80061e0:	1c03      	adds	r3, r0, #0
 80061e2:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	4912      	ldr	r1, [pc, #72]	@ (8006234 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80061ea:	1c18      	adds	r0, r3, #0
 80061ec:	f7fa fae6 	bl	80007bc <__aeabi_fadd>
 80061f0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80061f2:	1c19      	adds	r1, r3, #0
 80061f4:	1c20      	adds	r0, r4, #0
 80061f6:	f7fa fc6b 	bl	8000ad0 <__aeabi_fdiv>
 80061fa:	1c03      	adds	r3, r0, #0
 80061fc:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2200      	movs	r2, #0
 8006206:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006220:	46c0      	nop			@ (mov r8, r8)
 8006222:	46bd      	mov	sp, r7
 8006224:	b002      	add	sp, #8
 8006226:	bdb0      	pop	{r4, r5, r7, pc}
 8006228:	45610000 	.word	0x45610000
 800622c:	44960000 	.word	0x44960000
 8006230:	41a00000 	.word	0x41a00000
 8006234:	451c4000 	.word	0x451c4000

08006238 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8006238:	b580      	push	{r7, lr}
 800623a:	b082      	sub	sp, #8
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006244:	1c18      	adds	r0, r3, #0
 8006246:	46bd      	mov	sp, r7
 8006248:	b002      	add	sp, #8
 800624a:	bd80      	pop	{r7, pc}

0800624c <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800625c:	1c19      	adds	r1, r3, #0
 800625e:	1c10      	adds	r0, r2, #0
 8006260:	f7fa faac 	bl	80007bc <__aeabi_fadd>
 8006264:	1c03      	adds	r3, r0, #0
}
 8006266:	1c18      	adds	r0, r3, #0
 8006268:	46bd      	mov	sp, r7
 800626a:	b002      	add	sp, #8
 800626c:	bd80      	pop	{r7, pc}

0800626e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	223c      	movs	r2, #60	@ 0x3c
 800627a:	5c9b      	ldrb	r3, [r3, r2]
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b002      	add	sp, #8
 8006282:	bd80      	pop	{r7, pc}

08006284 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006284:	b5b0      	push	{r4, r5, r7, lr}
 8006286:	b08c      	sub	sp, #48	@ 0x30
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8006290:	1c19      	adds	r1, r3, #0
 8006292:	4895      	ldr	r0, [pc, #596]	@ (80064e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006294:	f7fa ff40 	bl	8001118 <__aeabi_fsub>
 8006298:	1c03      	adds	r3, r0, #0
 800629a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80062a0:	1c19      	adds	r1, r3, #0
 80062a2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062a4:	f7fa f926 	bl	80004f4 <__aeabi_fcmpgt>
 80062a8:	1e03      	subs	r3, r0, #0
 80062aa:	d00b      	beq.n	80062c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 80062b4:	1c19      	adds	r1, r3, #0
 80062b6:	1c10      	adds	r0, r2, #0
 80062b8:	f7fa fa80 	bl	80007bc <__aeabi_fadd>
 80062bc:	1c03      	adds	r3, r0, #0
 80062be:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80062c8:	1c19      	adds	r1, r3, #0
 80062ca:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80062cc:	f7fa f912 	bl	80004f4 <__aeabi_fcmpgt>
 80062d0:	1e03      	subs	r3, r0, #0
 80062d2:	d00b      	beq.n	80062ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80062dc:	1c19      	adds	r1, r3, #0
 80062de:	1c10      	adds	r0, r2, #0
 80062e0:	f7fa fa6c 	bl	80007bc <__aeabi_fadd>
 80062e4:	1c03      	adds	r3, r0, #0
 80062e6:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6959      	ldr	r1, [r3, #20]
 80062f0:	4a7e      	ldr	r2, [pc, #504]	@ (80064ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	0018      	movs	r0, r3
 80062f6:	f000 f9f1 	bl	80066dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	1c11      	adds	r1, r2, #0
 8006302:	0018      	movs	r0, r3
 8006304:	f000 f9fa 	bl	80066fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006308:	1c03      	adds	r3, r0, #0
 800630a:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006318:	1c19      	adds	r1, r3, #0
 800631a:	1c10      	adds	r0, r2, #0
 800631c:	f7fa fefc 	bl	8001118 <__aeabi_fsub>
 8006320:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006322:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006324:	1c18      	adds	r0, r3, #0
 8006326:	f7fa fdb9 	bl	8000e9c <__aeabi_fmul>
 800632a:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 800632c:	1c19      	adds	r1, r3, #0
 800632e:	1c20      	adds	r0, r4, #0
 8006330:	f7fa fa44 	bl	80007bc <__aeabi_fadd>
 8006334:	1c03      	adds	r3, r0, #0
 8006336:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006340:	1c19      	adds	r1, r3, #0
 8006342:	486b      	ldr	r0, [pc, #428]	@ (80064f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006344:	f7fa fee8 	bl	8001118 <__aeabi_fsub>
 8006348:	1c03      	adds	r3, r0, #0
 800634a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	1c11      	adds	r1, r2, #0
 8006354:	0018      	movs	r0, r3
 8006356:	f000 f9d1 	bl	80066fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800635a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800635c:	1c19      	adds	r1, r3, #0
 800635e:	1c28      	adds	r0, r5, #0
 8006360:	f7fa fd9c 	bl	8000e9c <__aeabi_fmul>
 8006364:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8006366:	1c19      	adds	r1, r3, #0
 8006368:	1c20      	adds	r0, r4, #0
 800636a:	f7fa fa27 	bl	80007bc <__aeabi_fadd>
 800636e:	1c03      	adds	r3, r0, #0
 8006370:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006372:	4a60      	ldr	r2, [pc, #384]	@ (80064f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006374:	6a39      	ldr	r1, [r7, #32]
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	0018      	movs	r0, r3
 800637a:	f000 f9af 	bl	80066dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	1c11      	adds	r1, r2, #0
 8006386:	0018      	movs	r0, r3
 8006388:	f000 f9b8 	bl	80066fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800638c:	1c03      	adds	r3, r0, #0
 800638e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8006390:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006392:	69f8      	ldr	r0, [r7, #28]
 8006394:	f7fa fd82 	bl	8000e9c <__aeabi_fmul>
 8006398:	1c03      	adds	r3, r0, #0
 800639a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6999      	ldr	r1, [r3, #24]
 80063a4:	4a51      	ldr	r2, [pc, #324]	@ (80064ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	0018      	movs	r0, r3
 80063aa:	f000 f997 	bl	80066dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	1c11      	adds	r1, r2, #0
 80063b6:	0018      	movs	r0, r3
 80063b8:	f000 f9a0 	bl	80066fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80063bc:	1c03      	adds	r3, r0, #0
 80063be:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80063cc:	1c19      	adds	r1, r3, #0
 80063ce:	1c10      	adds	r0, r2, #0
 80063d0:	f7fa fea2 	bl	8001118 <__aeabi_fsub>
 80063d4:	1c03      	adds	r3, r0, #0
 80063d6:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80063d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80063da:	69b8      	ldr	r0, [r7, #24]
 80063dc:	f7fa fe9c 	bl	8001118 <__aeabi_fsub>
 80063e0:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80063e2:	1c19      	adds	r1, r3, #0
 80063e4:	1c28      	adds	r0, r5, #0
 80063e6:	f7fa fd59 	bl	8000e9c <__aeabi_fmul>
 80063ea:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80063ec:	1c19      	adds	r1, r3, #0
 80063ee:	1c20      	adds	r0, r4, #0
 80063f0:	f7fa f9e4 	bl	80007bc <__aeabi_fadd>
 80063f4:	1c03      	adds	r3, r0, #0
 80063f6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006400:	1c19      	adds	r1, r3, #0
 8006402:	483b      	ldr	r0, [pc, #236]	@ (80064f0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006404:	f7fa fe88 	bl	8001118 <__aeabi_fsub>
 8006408:	1c03      	adds	r3, r0, #0
 800640a:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	1c11      	adds	r1, r2, #0
 8006414:	0018      	movs	r0, r3
 8006416:	f000 f971 	bl	80066fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800641a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 800641c:	1c19      	adds	r1, r3, #0
 800641e:	1c28      	adds	r0, r5, #0
 8006420:	f7fa fd3c 	bl	8000e9c <__aeabi_fmul>
 8006424:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8006426:	1c19      	adds	r1, r3, #0
 8006428:	1c20      	adds	r0, r4, #0
 800642a:	f7fa f9c7 	bl	80007bc <__aeabi_fadd>
 800642e:	1c03      	adds	r3, r0, #0
 8006430:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006432:	4a30      	ldr	r2, [pc, #192]	@ (80064f4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006434:	6939      	ldr	r1, [r7, #16]
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	0018      	movs	r0, r3
 800643a:	f000 f94f 	bl	80066dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	1c11      	adds	r1, r2, #0
 8006446:	0018      	movs	r0, r3
 8006448:	f000 f958 	bl	80066fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800644c:	1c03      	adds	r3, r0, #0
 800644e:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8006450:	6979      	ldr	r1, [r7, #20]
 8006452:	68f8      	ldr	r0, [r7, #12]
 8006454:	f7fa fd22 	bl	8000e9c <__aeabi_fmul>
 8006458:	1c03      	adds	r3, r0, #0
 800645a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	685b      	ldr	r3, [r3, #4]
 8006468:	4923      	ldr	r1, [pc, #140]	@ (80064f8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800646a:	1c18      	adds	r0, r3, #0
 800646c:	f7fa fb30 	bl	8000ad0 <__aeabi_fdiv>
 8006470:	1c03      	adds	r3, r0, #0
 8006472:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8006474:	69f9      	ldr	r1, [r7, #28]
 8006476:	20fe      	movs	r0, #254	@ 0xfe
 8006478:	0580      	lsls	r0, r0, #22
 800647a:	f7fa fe4d 	bl	8001118 <__aeabi_fsub>
 800647e:	1c03      	adds	r3, r0, #0
 8006480:	491e      	ldr	r1, [pc, #120]	@ (80064fc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8006482:	1c18      	adds	r0, r3, #0
 8006484:	f7fa fd0a 	bl	8000e9c <__aeabi_fmul>
 8006488:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800648a:	491d      	ldr	r1, [pc, #116]	@ (8006500 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 800648c:	1c18      	adds	r0, r3, #0
 800648e:	f7fa fe43 	bl	8001118 <__aeabi_fsub>
 8006492:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8006494:	1c19      	adds	r1, r3, #0
 8006496:	1c28      	adds	r0, r5, #0
 8006498:	f7fa fd00 	bl	8000e9c <__aeabi_fmul>
 800649c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800649e:	1c19      	adds	r1, r3, #0
 80064a0:	1c20      	adds	r0, r4, #0
 80064a2:	f7fa f98b 	bl	80007bc <__aeabi_fadd>
 80064a6:	1c03      	adds	r3, r0, #0
 80064a8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80064b2:	2100      	movs	r1, #0
 80064b4:	1c18      	adds	r0, r3, #0
 80064b6:	f7fa f809 	bl	80004cc <__aeabi_fcmplt>
 80064ba:	1e03      	subs	r3, r0, #0
 80064bc:	d002      	beq.n	80064c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2200      	movs	r2, #0
 80064c2:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80064cc:	1c19      	adds	r1, r3, #0
 80064ce:	1c10      	adds	r0, r2, #0
 80064d0:	f7fa f810 	bl	80004f4 <__aeabi_fcmpgt>
 80064d4:	1e03      	subs	r3, r0, #0
 80064d6:	d100      	bne.n	80064da <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80064d8:	e002      	b.n	80064e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80064e0:	46c0      	nop			@ (mov r8, r8)
 80064e2:	46bd      	mov	sp, r7
 80064e4:	b00c      	add	sp, #48	@ 0x30
 80064e6:	bdb0      	pop	{r4, r5, r7, pc}
 80064e8:	46fffe00 	.word	0x46fffe00
 80064ec:	3c23d70a 	.word	0x3c23d70a
 80064f0:	43ff0000 	.word	0x43ff0000
 80064f4:	3db851ec 	.word	0x3db851ec
 80064f8:	42700000 	.word	0x42700000
 80064fc:	3fa66666 	.word	0x3fa66666
 8006500:	3e99999a 	.word	0x3e99999a

08006504 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8006504:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006506:	b087      	sub	sp, #28
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	223c      	movs	r2, #60	@ 0x3c
 8006512:	5c9b      	ldrb	r3, [r3, r2]
 8006514:	2201      	movs	r2, #1
 8006516:	4053      	eors	r3, r2
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d00a      	beq.n	8006534 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	223c      	movs	r2, #60	@ 0x3c
 8006522:	2101      	movs	r1, #1
 8006524:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2200      	movs	r2, #0
 8006530:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8006532:	e0c8      	b.n	80066c6 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006538:	4965      	ldr	r1, [pc, #404]	@ (80066d0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800653a:	1c18      	adds	r0, r3, #0
 800653c:	f7f9 ffe4 	bl	8000508 <__aeabi_fcmpge>
 8006540:	1e03      	subs	r3, r0, #0
 8006542:	d107      	bne.n	8006554 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006548:	4962      	ldr	r1, [pc, #392]	@ (80066d4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800654a:	1c18      	adds	r0, r3, #0
 800654c:	f7f9 ffc8 	bl	80004e0 <__aeabi_fcmple>
 8006550:	1e03      	subs	r3, r0, #0
 8006552:	d00e      	beq.n	8006572 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 800655c:	1c19      	adds	r1, r3, #0
 800655e:	1c10      	adds	r0, r2, #0
 8006560:	f7fa f92c 	bl	80007bc <__aeabi_fadd>
 8006564:	1c03      	adds	r3, r0, #0
 8006566:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2200      	movs	r2, #0
 8006570:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006576:	1c19      	adds	r1, r3, #0
 8006578:	6838      	ldr	r0, [r7, #0]
 800657a:	f7fa fdcd 	bl	8001118 <__aeabi_fsub>
 800657e:	1c03      	adds	r3, r0, #0
 8006580:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	0018      	movs	r0, r3
 8006586:	f7ff fe7d 	bl	8006284 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800658e:	1c19      	adds	r1, r3, #0
 8006590:	6838      	ldr	r0, [r7, #0]
 8006592:	f7fa fdc1 	bl	8001118 <__aeabi_fsub>
 8006596:	1c03      	adds	r3, r0, #0
 8006598:	2185      	movs	r1, #133	@ 0x85
 800659a:	05c9      	lsls	r1, r1, #23
 800659c:	1c18      	adds	r0, r3, #0
 800659e:	f7fa fa97 	bl	8000ad0 <__aeabi_fdiv>
 80065a2:	1c03      	adds	r3, r0, #0
 80065a4:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 80065a6:	2100      	movs	r1, #0
 80065a8:	68f8      	ldr	r0, [r7, #12]
 80065aa:	f7f9 ff8f 	bl	80004cc <__aeabi_fcmplt>
 80065ae:	1e03      	subs	r3, r0, #0
 80065b0:	d008      	beq.n	80065c4 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065b6:	68f9      	ldr	r1, [r7, #12]
 80065b8:	1c18      	adds	r0, r3, #0
 80065ba:	f7fa fdad 	bl	8001118 <__aeabi_fsub>
 80065be:	1c03      	adds	r3, r0, #0
 80065c0:	617b      	str	r3, [r7, #20]
 80065c2:	e007      	b.n	80065d4 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80065c8:	1c19      	adds	r1, r3, #0
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f7fa f8f6 	bl	80007bc <__aeabi_fadd>
 80065d0:	1c03      	adds	r3, r0, #0
 80065d2:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80065d4:	23fe      	movs	r3, #254	@ 0xfe
 80065d6:	059b      	lsls	r3, r3, #22
 80065d8:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80065da:	493f      	ldr	r1, [pc, #252]	@ (80066d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80065dc:	6978      	ldr	r0, [r7, #20]
 80065de:	f7f9 ff89 	bl	80004f4 <__aeabi_fcmpgt>
 80065e2:	1e03      	subs	r3, r0, #0
 80065e4:	d010      	beq.n	8006608 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80065e6:	493c      	ldr	r1, [pc, #240]	@ (80066d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80065e8:	6978      	ldr	r0, [r7, #20]
 80065ea:	f7fa fa71 	bl	8000ad0 <__aeabi_fdiv>
 80065ee:	1c03      	adds	r3, r0, #0
 80065f0:	1c1c      	adds	r4, r3, #0
 80065f2:	4939      	ldr	r1, [pc, #228]	@ (80066d8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80065f4:	6978      	ldr	r0, [r7, #20]
 80065f6:	f7fa fa6b 	bl	8000ad0 <__aeabi_fdiv>
 80065fa:	1c03      	adds	r3, r0, #0
 80065fc:	1c19      	adds	r1, r3, #0
 80065fe:	1c20      	adds	r0, r4, #0
 8006600:	f7fa fc4c 	bl	8000e9c <__aeabi_fmul>
 8006604:	1c03      	adds	r3, r0, #0
 8006606:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 800660c:	1c19      	adds	r1, r3, #0
 800660e:	2085      	movs	r0, #133	@ 0x85
 8006610:	05c0      	lsls	r0, r0, #23
 8006612:	f7fa fd81 	bl	8001118 <__aeabi_fsub>
 8006616:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8006618:	6939      	ldr	r1, [r7, #16]
 800661a:	1c18      	adds	r0, r3, #0
 800661c:	f7fa fc3e 	bl	8000e9c <__aeabi_fmul>
 8006620:	1c03      	adds	r3, r0, #0
 8006622:	1c18      	adds	r0, r3, #0
 8006624:	f00b fdb8 	bl	8012198 <sqrtf>
 8006628:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006632:	2185      	movs	r1, #133	@ 0x85
 8006634:	05c9      	lsls	r1, r1, #23
 8006636:	6938      	ldr	r0, [r7, #16]
 8006638:	f7fa fc30 	bl	8000e9c <__aeabi_fmul>
 800663c:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800663e:	1c19      	adds	r1, r3, #0
 8006640:	1c28      	adds	r0, r5, #0
 8006642:	f7fa fa45 	bl	8000ad0 <__aeabi_fdiv>
 8006646:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8006648:	1c19      	adds	r1, r3, #0
 800664a:	1c20      	adds	r0, r4, #0
 800664c:	f7fa fc26 	bl	8000e9c <__aeabi_fmul>
 8006650:	1c03      	adds	r3, r0, #0
 8006652:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006658:	68f9      	ldr	r1, [r7, #12]
 800665a:	1c18      	adds	r0, r3, #0
 800665c:	f7fa fc1e 	bl	8000e9c <__aeabi_fmul>
 8006660:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8006662:	6939      	ldr	r1, [r7, #16]
 8006664:	1c18      	adds	r0, r3, #0
 8006666:	f7fa fa33 	bl	8000ad0 <__aeabi_fdiv>
 800666a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 800666c:	68f9      	ldr	r1, [r7, #12]
 800666e:	1c18      	adds	r0, r3, #0
 8006670:	f7fa fc14 	bl	8000e9c <__aeabi_fmul>
 8006674:	1c03      	adds	r3, r0, #0
             sqrtf(
 8006676:	1c19      	adds	r1, r3, #0
 8006678:	1c20      	adds	r0, r4, #0
 800667a:	f7fa f89f 	bl	80007bc <__aeabi_fadd>
 800667e:	1c03      	adds	r3, r0, #0
 8006680:	1c18      	adds	r0, r3, #0
 8006682:	f00b fd89 	bl	8012198 <sqrtf>
 8006686:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8006688:	1c19      	adds	r1, r3, #0
 800668a:	1c30      	adds	r0, r6, #0
 800668c:	f7fa fc06 	bl	8000e9c <__aeabi_fmul>
 8006690:	1c03      	adds	r3, r0, #0
 8006692:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80066a0:	68f9      	ldr	r1, [r7, #12]
 80066a2:	1c18      	adds	r0, r3, #0
 80066a4:	f7fa fbfa 	bl	8000e9c <__aeabi_fmul>
 80066a8:	1c03      	adds	r3, r0, #0
 80066aa:	2182      	movs	r1, #130	@ 0x82
 80066ac:	05c9      	lsls	r1, r1, #23
 80066ae:	1c18      	adds	r0, r3, #0
 80066b0:	f7fa fa0e 	bl	8000ad0 <__aeabi_fdiv>
 80066b4:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80066b6:	1c19      	adds	r1, r3, #0
 80066b8:	1c20      	adds	r0, r4, #0
 80066ba:	f7fa f87f 	bl	80007bc <__aeabi_fadd>
 80066be:	1c03      	adds	r3, r0, #0
 80066c0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80066c6:	46c0      	nop			@ (mov r8, r8)
 80066c8:	46bd      	mov	sp, r7
 80066ca:	b007      	add	sp, #28
 80066cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066ce:	46c0      	nop			@ (mov r8, r8)
 80066d0:	42c80000 	.word	0x42c80000
 80066d4:	c2c80000 	.word	0xc2c80000
 80066d8:	44b40000 	.word	0x44b40000

080066dc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	687a      	ldr	r2, [r7, #4]
 80066ec:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	68ba      	ldr	r2, [r7, #8]
 80066f2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80066f4:	46c0      	nop			@ (mov r8, r8)
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b004      	add	sp, #16
 80066fa:	bd80      	pop	{r7, pc}

080066fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80066fc:	b590      	push	{r4, r7, lr}
 80066fe:	b085      	sub	sp, #20
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800670e:	1c19      	adds	r1, r3, #0
 8006710:	6838      	ldr	r0, [r7, #0]
 8006712:	f7fa fd01 	bl	8001118 <__aeabi_fsub>
 8006716:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8006718:	1c19      	adds	r1, r3, #0
 800671a:	1c20      	adds	r0, r4, #0
 800671c:	f7fa fbbe 	bl	8000e9c <__aeabi_fmul>
 8006720:	1c03      	adds	r3, r0, #0
 8006722:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8006724:	4912      	ldr	r1, [pc, #72]	@ (8006770 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7f9 fed0 	bl	80004cc <__aeabi_fcmplt>
 800672c:	1e03      	subs	r3, r0, #0
 800672e:	d002      	beq.n	8006736 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8006730:	23fe      	movs	r3, #254	@ 0xfe
 8006732:	059b      	lsls	r3, r3, #22
 8006734:	e018      	b.n	8006768 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8006736:	490f      	ldr	r1, [pc, #60]	@ (8006774 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8006738:	68f8      	ldr	r0, [r7, #12]
 800673a:	f7f9 fedb 	bl	80004f4 <__aeabi_fcmpgt>
 800673e:	1e03      	subs	r3, r0, #0
 8006740:	d001      	beq.n	8006746 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8006742:	2300      	movs	r3, #0
 8006744:	e010      	b.n	8006768 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1c18      	adds	r0, r3, #0
 800674a:	f00b fcfd 	bl	8012148 <expf>
 800674e:	1c03      	adds	r3, r0, #0
 8006750:	21fe      	movs	r1, #254	@ 0xfe
 8006752:	0589      	lsls	r1, r1, #22
 8006754:	1c18      	adds	r0, r3, #0
 8006756:	f7fa f831 	bl	80007bc <__aeabi_fadd>
 800675a:	1c03      	adds	r3, r0, #0
 800675c:	1c19      	adds	r1, r3, #0
 800675e:	20fe      	movs	r0, #254	@ 0xfe
 8006760:	0580      	lsls	r0, r0, #22
 8006762:	f7fa f9b5 	bl	8000ad0 <__aeabi_fdiv>
 8006766:	1c03      	adds	r3, r0, #0
    }
}
 8006768:	1c18      	adds	r0, r3, #0
 800676a:	46bd      	mov	sp, r7
 800676c:	b005      	add	sp, #20
 800676e:	bd90      	pop	{r4, r7, pc}
 8006770:	c2480000 	.word	0xc2480000
 8006774:	42480000 	.word	0x42480000

08006778 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	60f8      	str	r0, [r7, #12]
 8006780:	60b9      	str	r1, [r7, #8]
 8006782:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	68ba      	ldr	r2, [r7, #8]
 8006788:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	687a      	ldr	r2, [r7, #4]
 800678e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006790:	46c0      	nop			@ (mov r8, r8)
 8006792:	46bd      	mov	sp, r7
 8006794:	b004      	add	sp, #16
 8006796:	bd80      	pop	{r7, pc}

08006798 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8006798:	b590      	push	{r4, r7, lr}
 800679a:	b083      	sub	sp, #12
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	2b01      	cmp	r3, #1
 80067a8:	d114      	bne.n	80067d4 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067ae:	1c19      	adds	r1, r3, #0
 80067b0:	6838      	ldr	r0, [r7, #0]
 80067b2:	f7fa fcb1 	bl	8001118 <__aeabi_fsub>
 80067b6:	1c03      	adds	r3, r0, #0
 80067b8:	4918      	ldr	r1, [pc, #96]	@ (800681c <GasIndexAlgorithm__mox_model__process+0x84>)
 80067ba:	1c18      	adds	r0, r3, #0
 80067bc:	f7fa f988 	bl	8000ad0 <__aeabi_fdiv>
 80067c0:	1c03      	adds	r3, r0, #0
 80067c2:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80067c8:	1c19      	adds	r1, r3, #0
 80067ca:	1c10      	adds	r0, r2, #0
 80067cc:	f7fa fb66 	bl	8000e9c <__aeabi_fmul>
 80067d0:	1c03      	adds	r3, r0, #0
 80067d2:	e01f      	b.n	8006814 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80067d8:	1c19      	adds	r1, r3, #0
 80067da:	6838      	ldr	r0, [r7, #0]
 80067dc:	f7fa fc9c 	bl	8001118 <__aeabi_fsub>
 80067e0:	1c03      	adds	r3, r0, #0
 80067e2:	1c1a      	adds	r2, r3, #0
 80067e4:	2380      	movs	r3, #128	@ 0x80
 80067e6:	061b      	lsls	r3, r3, #24
 80067e8:	4053      	eors	r3, r2
 80067ea:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80067f0:	490b      	ldr	r1, [pc, #44]	@ (8006820 <GasIndexAlgorithm__mox_model__process+0x88>)
 80067f2:	1c18      	adds	r0, r3, #0
 80067f4:	f7f9 ffe2 	bl	80007bc <__aeabi_fadd>
 80067f8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80067fa:	1c19      	adds	r1, r3, #0
 80067fc:	1c20      	adds	r0, r4, #0
 80067fe:	f7fa f967 	bl	8000ad0 <__aeabi_fdiv>
 8006802:	1c03      	adds	r3, r0, #0
 8006804:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 800680a:	1c19      	adds	r1, r3, #0
 800680c:	1c10      	adds	r0, r2, #0
 800680e:	f7fa fb45 	bl	8000e9c <__aeabi_fmul>
 8006812:	1c03      	adds	r3, r0, #0
    }
}
 8006814:	1c18      	adds	r0, r3, #0
 8006816:	46bd      	mov	sp, r7
 8006818:	b003      	add	sp, #12
 800681a:	bd90      	pop	{r4, r7, pc}
 800681c:	44fa0000 	.word	0x44fa0000
 8006820:	435c0000 	.word	0x435c0000

08006824 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	60f8      	str	r0, [r7, #12]
 800682c:	60b9      	str	r1, [r7, #8]
 800682e:	607a      	str	r2, [r7, #4]
 8006830:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2180      	movs	r1, #128	@ 0x80
 8006836:	687a      	ldr	r2, [r7, #4]
 8006838:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2184      	movs	r1, #132	@ 0x84
 800683e:	68ba      	ldr	r2, [r7, #8]
 8006840:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	2188      	movs	r1, #136	@ 0x88
 8006846:	683a      	ldr	r2, [r7, #0]
 8006848:	505a      	str	r2, [r3, r1]
}
 800684a:	46c0      	nop			@ (mov r8, r8)
 800684c:	46bd      	mov	sp, r7
 800684e:	b004      	add	sp, #16
 8006850:	bd80      	pop	{r7, pc}
	...

08006854 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8006854:	b590      	push	{r4, r7, lr}
 8006856:	b085      	sub	sp, #20
 8006858:	af00      	add	r7, sp, #0
 800685a:	6078      	str	r0, [r7, #4]
 800685c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2280      	movs	r2, #128	@ 0x80
 8006862:	589c      	ldr	r4, [r3, r2]
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2284      	movs	r2, #132	@ 0x84
 8006868:	589b      	ldr	r3, [r3, r2]
 800686a:	1c19      	adds	r1, r3, #0
 800686c:	6838      	ldr	r0, [r7, #0]
 800686e:	f7fa fc53 	bl	8001118 <__aeabi_fsub>
 8006872:	1c03      	adds	r3, r0, #0
 8006874:	1c19      	adds	r1, r3, #0
 8006876:	1c20      	adds	r0, r4, #0
 8006878:	f7fa fb10 	bl	8000e9c <__aeabi_fmul>
 800687c:	1c03      	adds	r3, r0, #0
 800687e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8006880:	4940      	ldr	r1, [pc, #256]	@ (8006984 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8006882:	68b8      	ldr	r0, [r7, #8]
 8006884:	f7f9 fe22 	bl	80004cc <__aeabi_fcmplt>
 8006888:	1e03      	subs	r3, r0, #0
 800688a:	d001      	beq.n	8006890 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 800688c:	4b3e      	ldr	r3, [pc, #248]	@ (8006988 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800688e:	e075      	b.n	800697c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8006890:	493e      	ldr	r1, [pc, #248]	@ (800698c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8006892:	68b8      	ldr	r0, [r7, #8]
 8006894:	f7f9 fe2e 	bl	80004f4 <__aeabi_fcmpgt>
 8006898:	1e03      	subs	r3, r0, #0
 800689a:	d001      	beq.n	80068a0 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 800689c:	2300      	movs	r3, #0
 800689e:	e06d      	b.n	800697c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 80068a0:	2100      	movs	r1, #0
 80068a2:	6838      	ldr	r0, [r7, #0]
 80068a4:	f7f9 fe30 	bl	8000508 <__aeabi_fcmpge>
 80068a8:	1e03      	subs	r3, r0, #0
 80068aa:	d047      	beq.n	800693c <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2288      	movs	r2, #136	@ 0x88
 80068b0:	589b      	ldr	r3, [r3, r2]
 80068b2:	21fe      	movs	r1, #254	@ 0xfe
 80068b4:	0589      	lsls	r1, r1, #22
 80068b6:	1c18      	adds	r0, r3, #0
 80068b8:	f7f9 fe02 	bl	80004c0 <__aeabi_fcmpeq>
 80068bc:	1e03      	subs	r3, r0, #0
 80068be:	d00e      	beq.n	80068de <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	1c19      	adds	r1, r3, #0
 80068c6:	20fe      	movs	r0, #254	@ 0xfe
 80068c8:	0580      	lsls	r0, r0, #22
 80068ca:	f7fa fc25 	bl	8001118 <__aeabi_fsub>
 80068ce:	1c03      	adds	r3, r0, #0
 80068d0:	492f      	ldr	r1, [pc, #188]	@ (8006990 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80068d2:	1c18      	adds	r0, r3, #0
 80068d4:	f7fa fae2 	bl	8000e9c <__aeabi_fmul>
 80068d8:	1c03      	adds	r3, r0, #0
 80068da:	60fb      	str	r3, [r7, #12]
 80068dc:	e012      	b.n	8006904 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	492c      	ldr	r1, [pc, #176]	@ (8006994 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80068e4:	1c18      	adds	r0, r3, #0
 80068e6:	f7fa fad9 	bl	8000e9c <__aeabi_fmul>
 80068ea:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80068ec:	1c19      	adds	r1, r3, #0
 80068ee:	4826      	ldr	r0, [pc, #152]	@ (8006988 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80068f0:	f7fa fc12 	bl	8001118 <__aeabi_fsub>
 80068f4:	1c03      	adds	r3, r0, #0
 80068f6:	2181      	movs	r1, #129	@ 0x81
 80068f8:	05c9      	lsls	r1, r1, #23
 80068fa:	1c18      	adds	r0, r3, #0
 80068fc:	f7fa f8e8 	bl	8000ad0 <__aeabi_fdiv>
 8006900:	1c03      	adds	r3, r0, #0
 8006902:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8006904:	4920      	ldr	r1, [pc, #128]	@ (8006988 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f7f9 ff58 	bl	80007bc <__aeabi_fadd>
 800690c:	1c03      	adds	r3, r0, #0
 800690e:	1c1c      	adds	r4, r3, #0
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	1c18      	adds	r0, r3, #0
 8006914:	f00b fc18 	bl	8012148 <expf>
 8006918:	1c03      	adds	r3, r0, #0
 800691a:	21fe      	movs	r1, #254	@ 0xfe
 800691c:	0589      	lsls	r1, r1, #22
 800691e:	1c18      	adds	r0, r3, #0
 8006920:	f7f9 ff4c 	bl	80007bc <__aeabi_fadd>
 8006924:	1c03      	adds	r3, r0, #0
 8006926:	1c19      	adds	r1, r3, #0
 8006928:	1c20      	adds	r0, r4, #0
 800692a:	f7fa f8d1 	bl	8000ad0 <__aeabi_fdiv>
 800692e:	1c03      	adds	r3, r0, #0
 8006930:	68f9      	ldr	r1, [r7, #12]
 8006932:	1c18      	adds	r0, r3, #0
 8006934:	f7fa fbf0 	bl	8001118 <__aeabi_fsub>
 8006938:	1c03      	adds	r3, r0, #0
 800693a:	e01f      	b.n	800697c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2188      	movs	r1, #136	@ 0x88
 8006944:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8006946:	1c19      	adds	r1, r3, #0
 8006948:	1c10      	adds	r0, r2, #0
 800694a:	f7fa f8c1 	bl	8000ad0 <__aeabi_fdiv>
 800694e:	1c03      	adds	r3, r0, #0
 8006950:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	1c18      	adds	r0, r3, #0
 8006956:	f00b fbf7 	bl	8012148 <expf>
 800695a:	1c03      	adds	r3, r0, #0
 800695c:	21fe      	movs	r1, #254	@ 0xfe
 800695e:	0589      	lsls	r1, r1, #22
 8006960:	1c18      	adds	r0, r3, #0
 8006962:	f7f9 ff2b 	bl	80007bc <__aeabi_fadd>
 8006966:	1c03      	adds	r3, r0, #0
 8006968:	1c19      	adds	r1, r3, #0
 800696a:	4807      	ldr	r0, [pc, #28]	@ (8006988 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800696c:	f7fa f8b0 	bl	8000ad0 <__aeabi_fdiv>
 8006970:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8006972:	1c19      	adds	r1, r3, #0
 8006974:	1c20      	adds	r0, r4, #0
 8006976:	f7fa fa91 	bl	8000e9c <__aeabi_fmul>
 800697a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800697c:	1c18      	adds	r0, r3, #0
 800697e:	46bd      	mov	sp, r7
 8006980:	b005      	add	sp, #20
 8006982:	bd90      	pop	{r4, r7, pc}
 8006984:	c2480000 	.word	0xc2480000
 8006988:	43fa0000 	.word	0x43fa0000
 800698c:	42480000 	.word	0x42480000
 8006990:	3f8041ab 	.word	0x3f8041ab
 8006994:	40a00000 	.word	0x40a00000

08006998 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006998:	b590      	push	{r4, r7, lr}
 800699a:	b083      	sub	sp, #12
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	685b      	ldr	r3, [r3, #4]
 80069a8:	4913      	ldr	r1, [pc, #76]	@ (80069f8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 80069aa:	1c18      	adds	r0, r3, #0
 80069ac:	f7f9 ff06 	bl	80007bc <__aeabi_fadd>
 80069b0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80069b2:	1c19      	adds	r1, r3, #0
 80069b4:	1c20      	adds	r0, r4, #0
 80069b6:	f7fa f88b 	bl	8000ad0 <__aeabi_fdiv>
 80069ba:	1c03      	adds	r3, r0, #0
 80069bc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	228c      	movs	r2, #140	@ 0x8c
 80069c2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	490b      	ldr	r1, [pc, #44]	@ (80069fc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80069ce:	1c18      	adds	r0, r3, #0
 80069d0:	f7f9 fef4 	bl	80007bc <__aeabi_fadd>
 80069d4:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80069d6:	1c19      	adds	r1, r3, #0
 80069d8:	1c20      	adds	r0, r4, #0
 80069da:	f7fa f879 	bl	8000ad0 <__aeabi_fdiv>
 80069de:	1c03      	adds	r3, r0, #0
 80069e0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	2290      	movs	r2, #144	@ 0x90
 80069e6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2294      	movs	r2, #148	@ 0x94
 80069ec:	2100      	movs	r1, #0
 80069ee:	5499      	strb	r1, [r3, r2]
}
 80069f0:	46c0      	nop			@ (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b003      	add	sp, #12
 80069f6:	bd90      	pop	{r4, r7, pc}
 80069f8:	41a00000 	.word	0x41a00000
 80069fc:	43fa0000 	.word	0x43fa0000

08006a00 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8006a00:	b590      	push	{r4, r7, lr}
 8006a02:	b087      	sub	sp, #28
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
 8006a08:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2294      	movs	r2, #148	@ 0x94
 8006a0e:	5c9b      	ldrb	r3, [r3, r2]
 8006a10:	2201      	movs	r2, #1
 8006a12:	4053      	eors	r3, r2
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00f      	beq.n	8006a3a <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2198      	movs	r1, #152	@ 0x98
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	219c      	movs	r1, #156	@ 0x9c
 8006a26:	683a      	ldr	r2, [r7, #0]
 8006a28:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	21a0      	movs	r1, #160	@ 0xa0
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2294      	movs	r2, #148	@ 0x94
 8006a36:	2101      	movs	r1, #1
 8006a38:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	228c      	movs	r2, #140	@ 0x8c
 8006a3e:	589b      	ldr	r3, [r3, r2]
 8006a40:	1c19      	adds	r1, r3, #0
 8006a42:	20fe      	movs	r0, #254	@ 0xfe
 8006a44:	0580      	lsls	r0, r0, #22
 8006a46:	f7fa fb67 	bl	8001118 <__aeabi_fsub>
 8006a4a:	1c03      	adds	r3, r0, #0
 8006a4c:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	2298      	movs	r2, #152	@ 0x98
 8006a52:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8006a54:	1c19      	adds	r1, r3, #0
 8006a56:	f7fa fa21 	bl	8000e9c <__aeabi_fmul>
 8006a5a:	1c03      	adds	r3, r0, #0
 8006a5c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	228c      	movs	r2, #140	@ 0x8c
 8006a62:	589b      	ldr	r3, [r3, r2]
 8006a64:	6839      	ldr	r1, [r7, #0]
 8006a66:	1c18      	adds	r0, r3, #0
 8006a68:	f7fa fa18 	bl	8000e9c <__aeabi_fmul>
 8006a6c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8006a6e:	1c19      	adds	r1, r3, #0
 8006a70:	1c20      	adds	r0, r4, #0
 8006a72:	f7f9 fea3 	bl	80007bc <__aeabi_fadd>
 8006a76:	1c03      	adds	r3, r0, #0
 8006a78:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2298      	movs	r2, #152	@ 0x98
 8006a7e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2290      	movs	r2, #144	@ 0x90
 8006a84:	589b      	ldr	r3, [r3, r2]
 8006a86:	1c19      	adds	r1, r3, #0
 8006a88:	20fe      	movs	r0, #254	@ 0xfe
 8006a8a:	0580      	lsls	r0, r0, #22
 8006a8c:	f7fa fb44 	bl	8001118 <__aeabi_fsub>
 8006a90:	1c03      	adds	r3, r0, #0
 8006a92:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	229c      	movs	r2, #156	@ 0x9c
 8006a98:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8006a9a:	1c19      	adds	r1, r3, #0
 8006a9c:	f7fa f9fe 	bl	8000e9c <__aeabi_fmul>
 8006aa0:	1c03      	adds	r3, r0, #0
 8006aa2:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2290      	movs	r2, #144	@ 0x90
 8006aa8:	589b      	ldr	r3, [r3, r2]
 8006aaa:	6839      	ldr	r1, [r7, #0]
 8006aac:	1c18      	adds	r0, r3, #0
 8006aae:	f7fa f9f5 	bl	8000e9c <__aeabi_fmul>
 8006ab2:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8006ab4:	1c19      	adds	r1, r3, #0
 8006ab6:	1c20      	adds	r0, r4, #0
 8006ab8:	f7f9 fe80 	bl	80007bc <__aeabi_fadd>
 8006abc:	1c03      	adds	r3, r0, #0
 8006abe:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	229c      	movs	r2, #156	@ 0x9c
 8006ac4:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2298      	movs	r2, #152	@ 0x98
 8006aca:	589a      	ldr	r2, [r3, r2]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	219c      	movs	r1, #156	@ 0x9c
 8006ad0:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8006ad2:	1c19      	adds	r1, r3, #0
 8006ad4:	1c10      	adds	r0, r2, #0
 8006ad6:	f7fa fb1f 	bl	8001118 <__aeabi_fsub>
 8006ada:	1c03      	adds	r3, r0, #0
 8006adc:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8006ade:	2100      	movs	r1, #0
 8006ae0:	6978      	ldr	r0, [r7, #20]
 8006ae2:	f7f9 fcf3 	bl	80004cc <__aeabi_fcmplt>
 8006ae6:	1e03      	subs	r3, r0, #0
 8006ae8:	d004      	beq.n	8006af4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8006aea:	697b      	ldr	r3, [r7, #20]
 8006aec:	2280      	movs	r2, #128	@ 0x80
 8006aee:	0612      	lsls	r2, r2, #24
 8006af0:	4053      	eors	r3, r2
 8006af2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8006af4:	4923      	ldr	r1, [pc, #140]	@ (8006b84 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8006af6:	6978      	ldr	r0, [r7, #20]
 8006af8:	f7fa f9d0 	bl	8000e9c <__aeabi_fmul>
 8006afc:	1c03      	adds	r3, r0, #0
 8006afe:	1c18      	adds	r0, r3, #0
 8006b00:	f00b fb22 	bl	8012148 <expf>
 8006b04:	1c03      	adds	r3, r0, #0
 8006b06:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8006b08:	491f      	ldr	r1, [pc, #124]	@ (8006b88 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8006b0a:	6938      	ldr	r0, [r7, #16]
 8006b0c:	f7fa f9c6 	bl	8000e9c <__aeabi_fmul>
 8006b10:	1c03      	adds	r3, r0, #0
 8006b12:	491e      	ldr	r1, [pc, #120]	@ (8006b8c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8006b14:	1c18      	adds	r0, r3, #0
 8006b16:	f7f9 fe51 	bl	80007bc <__aeabi_fadd>
 8006b1a:	1c03      	adds	r3, r0, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	685c      	ldr	r4, [r3, #4]
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	68f9      	ldr	r1, [r7, #12]
 8006b28:	1c18      	adds	r0, r3, #0
 8006b2a:	f7f9 fe47 	bl	80007bc <__aeabi_fadd>
 8006b2e:	1c03      	adds	r3, r0, #0
 8006b30:	1c19      	adds	r1, r3, #0
 8006b32:	1c20      	adds	r0, r4, #0
 8006b34:	f7f9 ffcc 	bl	8000ad0 <__aeabi_fdiv>
 8006b38:	1c03      	adds	r3, r0, #0
 8006b3a:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8006b3c:	68b9      	ldr	r1, [r7, #8]
 8006b3e:	20fe      	movs	r0, #254	@ 0xfe
 8006b40:	0580      	lsls	r0, r0, #22
 8006b42:	f7fa fae9 	bl	8001118 <__aeabi_fsub>
 8006b46:	1c03      	adds	r3, r0, #0
 8006b48:	1c18      	adds	r0, r3, #0
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	22a0      	movs	r2, #160	@ 0xa0
 8006b4e:	589b      	ldr	r3, [r3, r2]
 8006b50:	1c19      	adds	r1, r3, #0
 8006b52:	f7fa f9a3 	bl	8000e9c <__aeabi_fmul>
 8006b56:	1c03      	adds	r3, r0, #0
 8006b58:	1c1c      	adds	r4, r3, #0
 8006b5a:	6839      	ldr	r1, [r7, #0]
 8006b5c:	68b8      	ldr	r0, [r7, #8]
 8006b5e:	f7fa f99d 	bl	8000e9c <__aeabi_fmul>
 8006b62:	1c03      	adds	r3, r0, #0
 8006b64:	1c19      	adds	r1, r3, #0
 8006b66:	1c20      	adds	r0, r4, #0
 8006b68:	f7f9 fe28 	bl	80007bc <__aeabi_fadd>
 8006b6c:	1c03      	adds	r3, r0, #0
 8006b6e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	22a0      	movs	r2, #160	@ 0xa0
 8006b74:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	22a0      	movs	r2, #160	@ 0xa0
 8006b7a:	589b      	ldr	r3, [r3, r2]
}
 8006b7c:	1c18      	adds	r0, r3, #0
 8006b7e:	46bd      	mov	sp, r7
 8006b80:	b007      	add	sp, #28
 8006b82:	bd90      	pop	{r4, r7, pc}
 8006b84:	be4ccccd 	.word	0xbe4ccccd
 8006b88:	43f00000 	.word	0x43f00000
 8006b8c:	41a00000 	.word	0x41a00000

08006b90 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8006b90:	b590      	push	{r4, r7, lr}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6039      	str	r1, [r7, #0]
 8006b98:	0011      	movs	r1, r2
 8006b9a:	1dfb      	adds	r3, r7, #7
 8006b9c:	1c02      	adds	r2, r0, #0
 8006b9e:	701a      	strb	r2, [r3, #0]
 8006ba0:	1dbb      	adds	r3, r7, #6
 8006ba2:	1c0a      	adds	r2, r1, #0
 8006ba4:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8006ba6:	4b08      	ldr	r3, [pc, #32]	@ (8006bc8 <ReadRegister+0x38>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d008      	beq.n	8006bc0 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8006bae:	4b06      	ldr	r3, [pc, #24]	@ (8006bc8 <ReadRegister+0x38>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	1dba      	adds	r2, r7, #6
 8006bb4:	7814      	ldrb	r4, [r2, #0]
 8006bb6:	6839      	ldr	r1, [r7, #0]
 8006bb8:	1dfa      	adds	r2, r7, #7
 8006bba:	7810      	ldrb	r0, [r2, #0]
 8006bbc:	0022      	movs	r2, r4
 8006bbe:	4798      	blx	r3
  }
}
 8006bc0:	46c0      	nop			@ (mov r8, r8)
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	b003      	add	sp, #12
 8006bc6:	bd90      	pop	{r4, r7, pc}
 8006bc8:	20000f74 	.word	0x20000f74

08006bcc <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8006bcc:	b590      	push	{r4, r7, lr}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6039      	str	r1, [r7, #0]
 8006bd4:	0011      	movs	r1, r2
 8006bd6:	1dfb      	adds	r3, r7, #7
 8006bd8:	1c02      	adds	r2, r0, #0
 8006bda:	701a      	strb	r2, [r3, #0]
 8006bdc:	1dbb      	adds	r3, r7, #6
 8006bde:	1c0a      	adds	r2, r1, #0
 8006be0:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8006be2:	4b08      	ldr	r3, [pc, #32]	@ (8006c04 <WriteRegister+0x38>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d008      	beq.n	8006bfc <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8006bea:	4b06      	ldr	r3, [pc, #24]	@ (8006c04 <WriteRegister+0x38>)
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	1dba      	adds	r2, r7, #6
 8006bf0:	7814      	ldrb	r4, [r2, #0]
 8006bf2:	6839      	ldr	r1, [r7, #0]
 8006bf4:	1dfa      	adds	r2, r7, #7
 8006bf6:	7810      	ldrb	r0, [r2, #0]
 8006bf8:	0022      	movs	r2, r4
 8006bfa:	4798      	blx	r3
  }
}
 8006bfc:	46c0      	nop			@ (mov r8, r8)
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b003      	add	sp, #12
 8006c02:	bd90      	pop	{r4, r7, pc}
 8006c04:	20000f78 	.word	0x20000f78

08006c08 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006c08:	b580      	push	{r7, lr}
 8006c0a:	b082      	sub	sp, #8
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
 8006c10:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8006c12:	4b07      	ldr	r3, [pc, #28]	@ (8006c30 <SGP_Init+0x28>)
 8006c14:	687a      	ldr	r2, [r7, #4]
 8006c16:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8006c18:	4b06      	ldr	r3, [pc, #24]	@ (8006c34 <SGP_Init+0x2c>)
 8006c1a:	683a      	ldr	r2, [r7, #0]
 8006c1c:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8006c1e:	4b06      	ldr	r3, [pc, #24]	@ (8006c38 <SGP_Init+0x30>)
 8006c20:	2100      	movs	r1, #0
 8006c22:	0018      	movs	r0, r3
 8006c24:	f7ff f930 	bl	8005e88 <GasIndexAlgorithm_init>
}
 8006c28:	46c0      	nop			@ (mov r8, r8)
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	b002      	add	sp, #8
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000f74 	.word	0x20000f74
 8006c34:	20000f78 	.word	0x20000f78
 8006c38:	20000f88 	.word	0x20000f88

08006c3c <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8006c40:	4b13      	ldr	r3, [pc, #76]	@ (8006c90 <SGP_StartMeasurement+0x54>)
 8006c42:	781b      	ldrb	r3, [r3, #0]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00d      	beq.n	8006c64 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006c48:	4b12      	ldr	r3, [pc, #72]	@ (8006c94 <SGP_StartMeasurement+0x58>)
 8006c4a:	2208      	movs	r2, #8
 8006c4c:	0019      	movs	r1, r3
 8006c4e:	2059      	movs	r0, #89	@ 0x59
 8006c50:	f7ff ffbc 	bl	8006bcc <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006c54:	f001 f98c 	bl	8007f70 <GetCurrentHalTicks>
 8006c58:	0003      	movs	r3, r0
 8006c5a:	331e      	adds	r3, #30
 8006c5c:	001a      	movs	r2, r3
 8006c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c98 <SGP_StartMeasurement+0x5c>)
 8006c60:	601a      	str	r2, [r3, #0]
 8006c62:	e00c      	b.n	8006c7e <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006c64:	4b0d      	ldr	r3, [pc, #52]	@ (8006c9c <SGP_StartMeasurement+0x60>)
 8006c66:	2208      	movs	r2, #8
 8006c68:	0019      	movs	r1, r3
 8006c6a:	2059      	movs	r0, #89	@ 0x59
 8006c6c:	f7ff ffae 	bl	8006bcc <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8006c70:	f001 f97e 	bl	8007f70 <GetCurrentHalTicks>
 8006c74:	0003      	movs	r3, r0
 8006c76:	33aa      	adds	r3, #170	@ 0xaa
 8006c78:	001a      	movs	r2, r3
 8006c7a:	4b09      	ldr	r3, [pc, #36]	@ (8006ca0 <SGP_StartMeasurement+0x64>)
 8006c7c:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8006c7e:	4b09      	ldr	r3, [pc, #36]	@ (8006ca4 <SGP_StartMeasurement+0x68>)
 8006c80:	2200      	movs	r2, #0
 8006c82:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8006c84:	4b08      	ldr	r3, [pc, #32]	@ (8006ca8 <SGP_StartMeasurement+0x6c>)
 8006c86:	2200      	movs	r2, #0
 8006c88:	701a      	strb	r2, [r3, #0]
}
 8006c8a:	46c0      	nop			@ (mov r8, r8)
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}
 8006c90:	20001030 	.word	0x20001030
 8006c94:	20000114 	.word	0x20000114
 8006c98:	20000128 	.word	0x20000128
 8006c9c:	2000010c 	.word	0x2000010c
 8006ca0:	20000120 	.word	0x20000120
 8006ca4:	20000f86 	.word	0x20000f86
 8006ca8:	20000f87 	.word	0x20000f87

08006cac <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8006cac:	b580      	push	{r7, lr}
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	4b04      	ldr	r3, [pc, #16]	@ (8006cc4 <SGP_HeatedUp+0x18>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	0018      	movs	r0, r3
 8006cb6:	f001 f879 	bl	8007dac <TimestampIsReached>
 8006cba:	0003      	movs	r3, r0
 8006cbc:	0018      	movs	r0, r3
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	46c0      	nop			@ (mov r8, r8)
 8006cc4:	20000120 	.word	0x20000120

08006cc8 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8006ccc:	4b04      	ldr	r3, [pc, #16]	@ (8006ce0 <SGP_MeasurementReady+0x18>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f001 f86b 	bl	8007dac <TimestampIsReached>
 8006cd6:	0003      	movs	r3, r0
}
 8006cd8:	0018      	movs	r0, r3
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	bd80      	pop	{r7, pc}
 8006cde:	46c0      	nop			@ (mov r8, r8)
 8006ce0:	20000128 	.word	0x20000128

08006ce4 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8006ce8:	4b04      	ldr	r3, [pc, #16]	@ (8006cfc <SGP_MeasurementDone+0x18>)
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	0018      	movs	r0, r3
 8006cee:	f001 f85d 	bl	8007dac <TimestampIsReached>
 8006cf2:	0003      	movs	r3, r0
}
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	46c0      	nop			@ (mov r8, r8)
 8006cfc:	20000124 	.word	0x20000124

08006d00 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8006d00:	b580      	push	{r7, lr}
 8006d02:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8006d04:	4b04      	ldr	r3, [pc, #16]	@ (8006d18 <SGP_TurnHeaterOff+0x18>)
 8006d06:	2202      	movs	r2, #2
 8006d08:	0019      	movs	r1, r3
 8006d0a:	2059      	movs	r0, #89	@ 0x59
 8006d0c:	f7ff ff5e 	bl	8006bcc <WriteRegister>
}
 8006d10:	46c0      	nop			@ (mov r8, r8)
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}
 8006d16:	46c0      	nop			@ (mov r8, r8)
 8006d18:	20000104 	.word	0x20000104

08006d1c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8006d1c:	b5b0      	push	{r4, r5, r7, lr}
 8006d1e:	b086      	sub	sp, #24
 8006d20:	af02      	add	r7, sp, #8
 8006d22:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8006d24:	f7ff ffc2 	bl	8006cac <SGP_HeatedUp>
 8006d28:	1e03      	subs	r3, r0, #0
 8006d2a:	d038      	beq.n	8006d9e <SGP_GetMeasurementValues+0x82>
 8006d2c:	4bdb      	ldr	r3, [pc, #876]	@ (800709c <SGP_GetMeasurementValues+0x380>)
 8006d2e:	781b      	ldrb	r3, [r3, #0]
 8006d30:	2201      	movs	r2, #1
 8006d32:	4053      	eors	r3, r2
 8006d34:	b2db      	uxtb	r3, r3
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d031      	beq.n	8006d9e <SGP_GetMeasurementValues+0x82>
 8006d3a:	4bd9      	ldr	r3, [pc, #868]	@ (80070a0 <SGP_GetMeasurementValues+0x384>)
 8006d3c:	781b      	ldrb	r3, [r3, #0]
 8006d3e:	2201      	movs	r2, #1
 8006d40:	4053      	eors	r3, r2
 8006d42:	b2db      	uxtb	r3, r3
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d02a      	beq.n	8006d9e <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8006d48:	4ad6      	ldr	r2, [pc, #856]	@ (80070a4 <SGP_GetMeasurementValues+0x388>)
 8006d4a:	4bd7      	ldr	r3, [pc, #860]	@ (80070a8 <SGP_GetMeasurementValues+0x38c>)
 8006d4c:	0019      	movs	r1, r3
 8006d4e:	2003      	movs	r0, #3
 8006d50:	f001 f882 	bl	8007e58 <CreateLine>
    HeatUpIsDone = true;
 8006d54:	4bd1      	ldr	r3, [pc, #836]	@ (800709c <SGP_GetMeasurementValues+0x380>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8006d5a:	4bd4      	ldr	r3, [pc, #848]	@ (80070ac <SGP_GetMeasurementValues+0x390>)
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00d      	beq.n	8006d7e <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006d62:	4bd3      	ldr	r3, [pc, #844]	@ (80070b0 <SGP_GetMeasurementValues+0x394>)
 8006d64:	2208      	movs	r2, #8
 8006d66:	0019      	movs	r1, r3
 8006d68:	2059      	movs	r0, #89	@ 0x59
 8006d6a:	f7ff ff2f 	bl	8006bcc <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006d6e:	f001 f8ff 	bl	8007f70 <GetCurrentHalTicks>
 8006d72:	0003      	movs	r3, r0
 8006d74:	331e      	adds	r3, #30
 8006d76:	001a      	movs	r2, r3
 8006d78:	4bce      	ldr	r3, [pc, #824]	@ (80070b4 <SGP_GetMeasurementValues+0x398>)
 8006d7a:	601a      	str	r2, [r3, #0]
 8006d7c:	e00c      	b.n	8006d98 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006d7e:	4bce      	ldr	r3, [pc, #824]	@ (80070b8 <SGP_GetMeasurementValues+0x39c>)
 8006d80:	2208      	movs	r2, #8
 8006d82:	0019      	movs	r1, r3
 8006d84:	2059      	movs	r0, #89	@ 0x59
 8006d86:	f7ff ff21 	bl	8006bcc <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006d8a:	f001 f8f1 	bl	8007f70 <GetCurrentHalTicks>
 8006d8e:	0003      	movs	r3, r0
 8006d90:	331e      	adds	r3, #30
 8006d92:	001a      	movs	r2, r3
 8006d94:	4bc7      	ldr	r3, [pc, #796]	@ (80070b4 <SGP_GetMeasurementValues+0x398>)
 8006d96:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8006d98:	4bc1      	ldr	r3, [pc, #772]	@ (80070a0 <SGP_GetMeasurementValues+0x384>)
 8006d9a:	2201      	movs	r2, #1
 8006d9c:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8006d9e:	4bbf      	ldr	r3, [pc, #764]	@ (800709c <SGP_GetMeasurementValues+0x380>)
 8006da0:	781b      	ldrb	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d100      	bne.n	8006da8 <SGP_GetMeasurementValues+0x8c>
 8006da6:	e1b5      	b.n	8007114 <SGP_GetMeasurementValues+0x3f8>
 8006da8:	f7ff ff8e 	bl	8006cc8 <SGP_MeasurementReady>
 8006dac:	1e03      	subs	r3, r0, #0
 8006dae:	d100      	bne.n	8006db2 <SGP_GetMeasurementValues+0x96>
 8006db0:	e1b0      	b.n	8007114 <SGP_GetMeasurementValues+0x3f8>
 8006db2:	4bc2      	ldr	r3, [pc, #776]	@ (80070bc <SGP_GetMeasurementValues+0x3a0>)
 8006db4:	781b      	ldrb	r3, [r3, #0]
 8006db6:	2201      	movs	r2, #1
 8006db8:	4053      	eors	r3, r2
 8006dba:	b2db      	uxtb	r3, r3
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d100      	bne.n	8006dc2 <SGP_GetMeasurementValues+0xa6>
 8006dc0:	e1a8      	b.n	8007114 <SGP_GetMeasurementValues+0x3f8>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8006dc2:	4bbf      	ldr	r3, [pc, #764]	@ (80070c0 <SGP_GetMeasurementValues+0x3a4>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	4abe      	ldr	r2, [pc, #760]	@ (80070c4 <SGP_GetMeasurementValues+0x3a8>)
 8006dca:	49b7      	ldr	r1, [pc, #732]	@ (80070a8 <SGP_GetMeasurementValues+0x38c>)
 8006dcc:	2003      	movs	r0, #3
 8006dce:	f001 f843 	bl	8007e58 <CreateLine>
    MeasurementIsReady = true;
 8006dd2:	4bba      	ldr	r3, [pc, #744]	@ (80070bc <SGP_GetMeasurementValues+0x3a0>)
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8006dd8:	4bbb      	ldr	r3, [pc, #748]	@ (80070c8 <SGP_GetMeasurementValues+0x3ac>)
 8006dda:	2203      	movs	r2, #3
 8006ddc:	0019      	movs	r1, r3
 8006dde:	2059      	movs	r0, #89	@ 0x59
 8006de0:	f7ff fed6 	bl	8006b90 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8006de4:	4bb8      	ldr	r3, [pc, #736]	@ (80070c8 <SGP_GetMeasurementValues+0x3ac>)
 8006de6:	2203      	movs	r2, #3
 8006de8:	2103      	movs	r1, #3
 8006dea:	0018      	movs	r0, r3
 8006dec:	f000 f9f8 	bl	80071e0 <CheckCRC>
 8006df0:	0003      	movs	r3, r0
 8006df2:	001a      	movs	r2, r3
 8006df4:	2301      	movs	r3, #1
 8006df6:	4053      	eors	r3, r2
 8006df8:	b2db      	uxtb	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d02a      	beq.n	8006e54 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8006dfe:	4ab3      	ldr	r2, [pc, #716]	@ (80070cc <SGP_GetMeasurementValues+0x3b0>)
 8006e00:	4bb3      	ldr	r3, [pc, #716]	@ (80070d0 <SGP_GetMeasurementValues+0x3b4>)
 8006e02:	0019      	movs	r1, r3
 8006e04:	2001      	movs	r0, #1
 8006e06:	f001 f827 	bl	8007e58 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8006e0a:	4ab2      	ldr	r2, [pc, #712]	@ (80070d4 <SGP_GetMeasurementValues+0x3b8>)
 8006e0c:	4bb2      	ldr	r3, [pc, #712]	@ (80070d8 <SGP_GetMeasurementValues+0x3bc>)
 8006e0e:	0019      	movs	r1, r3
 8006e10:	2002      	movs	r0, #2
 8006e12:	f001 f821 	bl	8007e58 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8006e16:	230f      	movs	r3, #15
 8006e18:	18fb      	adds	r3, r7, r3
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	701a      	strb	r2, [r3, #0]
 8006e1e:	e012      	b.n	8006e46 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8006e20:	240f      	movs	r4, #15
 8006e22:	193b      	adds	r3, r7, r4
 8006e24:	7818      	ldrb	r0, [r3, #0]
 8006e26:	193b      	adds	r3, r7, r4
 8006e28:	781b      	ldrb	r3, [r3, #0]
 8006e2a:	4aa7      	ldr	r2, [pc, #668]	@ (80070c8 <SGP_GetMeasurementValues+0x3ac>)
 8006e2c:	5cd3      	ldrb	r3, [r2, r3]
 8006e2e:	4aab      	ldr	r2, [pc, #684]	@ (80070dc <SGP_GetMeasurementValues+0x3c0>)
 8006e30:	499d      	ldr	r1, [pc, #628]	@ (80070a8 <SGP_GetMeasurementValues+0x38c>)
 8006e32:	9300      	str	r3, [sp, #0]
 8006e34:	0003      	movs	r3, r0
 8006e36:	2003      	movs	r0, #3
 8006e38:	f001 f80e 	bl	8007e58 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8006e3c:	193b      	adds	r3, r7, r4
 8006e3e:	781a      	ldrb	r2, [r3, #0]
 8006e40:	193b      	adds	r3, r7, r4
 8006e42:	3201      	adds	r2, #1
 8006e44:	701a      	strb	r2, [r3, #0]
 8006e46:	230f      	movs	r3, #15
 8006e48:	18fb      	adds	r3, r7, r3
 8006e4a:	781b      	ldrb	r3, [r3, #0]
 8006e4c:	2b02      	cmp	r3, #2
 8006e4e:	d9e7      	bls.n	8006e20 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8006e50:	2300      	movs	r3, #0
 8006e52:	e177      	b.n	8007144 <SGP_GetMeasurementValues+0x428>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8006e54:	f001 f88c 	bl	8007f70 <GetCurrentHalTicks>
 8006e58:	0003      	movs	r3, r0
 8006e5a:	22fa      	movs	r2, #250	@ 0xfa
 8006e5c:	0092      	lsls	r2, r2, #2
 8006e5e:	189a      	adds	r2, r3, r2
 8006e60:	4b9f      	ldr	r3, [pc, #636]	@ (80070e0 <SGP_GetMeasurementValues+0x3c4>)
 8006e62:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8006e64:	f7ff ff4c 	bl	8006d00 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8006e68:	4b95      	ldr	r3, [pc, #596]	@ (80070c0 <SGP_GetMeasurementValues+0x3a4>)
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	3301      	adds	r3, #1
 8006e6e:	b2da      	uxtb	r2, r3
 8006e70:	4b93      	ldr	r3, [pc, #588]	@ (80070c0 <SGP_GetMeasurementValues+0x3a4>)
 8006e72:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8006e74:	4b92      	ldr	r3, [pc, #584]	@ (80070c0 <SGP_GetMeasurementValues+0x3a4>)
 8006e76:	781a      	ldrb	r2, [r3, #0]
 8006e78:	4b9a      	ldr	r3, [pc, #616]	@ (80070e4 <SGP_GetMeasurementValues+0x3c8>)
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	429a      	cmp	r2, r3
 8006e7e:	d200      	bcs.n	8006e82 <SGP_GetMeasurementValues+0x166>
 8006e80:	e148      	b.n	8007114 <SGP_GetMeasurementValues+0x3f8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8006e82:	4b91      	ldr	r3, [pc, #580]	@ (80070c8 <SGP_GetMeasurementValues+0x3ac>)
 8006e84:	785b      	ldrb	r3, [r3, #1]
 8006e86:	021b      	lsls	r3, r3, #8
 8006e88:	b21a      	sxth	r2, r3
 8006e8a:	4b8f      	ldr	r3, [pc, #572]	@ (80070c8 <SGP_GetMeasurementValues+0x3ac>)
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	b21b      	sxth	r3, r3
 8006e90:	4313      	orrs	r3, r2
 8006e92:	b21a      	sxth	r2, r3
 8006e94:	240c      	movs	r4, #12
 8006e96:	193b      	adds	r3, r7, r4
 8006e98:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8006e9a:	193b      	adds	r3, r7, r4
 8006e9c:	881b      	ldrh	r3, [r3, #0]
 8006e9e:	4a92      	ldr	r2, [pc, #584]	@ (80070e8 <SGP_GetMeasurementValues+0x3cc>)
 8006ea0:	4981      	ldr	r1, [pc, #516]	@ (80070a8 <SGP_GetMeasurementValues+0x38c>)
 8006ea2:	2003      	movs	r0, #3
 8006ea4:	f000 ffd8 	bl	8007e58 <CreateLine>
      int32_t tempVocIndex = 0;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8006eac:	193b      	adds	r3, r7, r4
 8006eae:	8819      	ldrh	r1, [r3, #0]
 8006eb0:	2308      	movs	r3, #8
 8006eb2:	18fa      	adds	r2, r7, r3
 8006eb4:	4b8d      	ldr	r3, [pc, #564]	@ (80070ec <SGP_GetMeasurementValues+0x3d0>)
 8006eb6:	0018      	movs	r0, r3
 8006eb8:	f7ff f848 	bl	8005f4c <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4a8c      	ldr	r2, [pc, #560]	@ (80070f0 <SGP_GetMeasurementValues+0x3d4>)
 8006ec0:	4979      	ldr	r1, [pc, #484]	@ (80070a8 <SGP_GetMeasurementValues+0x38c>)
 8006ec2:	2003      	movs	r0, #3
 8006ec4:	f000 ffc8 	bl	8007e58 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	dd60      	ble.n	8006f98 <SGP_GetMeasurementValues+0x27c>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2b64      	cmp	r3, #100	@ 0x64
 8006edc:	dc5c      	bgt.n	8006f98 <SGP_GetMeasurementValues+0x27c>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	0018      	movs	r0, r3
 8006ee4:	f7fc f9ea 	bl	80032bc <__aeabi_i2d>
 8006ee8:	2200      	movs	r2, #0
 8006eea:	4b82      	ldr	r3, [pc, #520]	@ (80070f4 <SGP_GetMeasurementValues+0x3d8>)
 8006eec:	f7fa fee0 	bl	8001cb0 <__aeabi_ddiv>
 8006ef0:	0002      	movs	r2, r0
 8006ef2:	000b      	movs	r3, r1
 8006ef4:	2000      	movs	r0, #0
 8006ef6:	4980      	ldr	r1, [pc, #512]	@ (80070f8 <SGP_GetMeasurementValues+0x3dc>)
 8006ef8:	f7fb fde6 	bl	8002ac8 <__aeabi_dsub>
 8006efc:	0002      	movs	r2, r0
 8006efe:	000b      	movs	r3, r1
 8006f00:	0014      	movs	r4, r2
 8006f02:	001d      	movs	r5, r3
 8006f04:	4b7d      	ldr	r3, [pc, #500]	@ (80070fc <SGP_GetMeasurementValues+0x3e0>)
 8006f06:	881b      	ldrh	r3, [r3, #0]
 8006f08:	0018      	movs	r0, r3
 8006f0a:	f7fc f9d7 	bl	80032bc <__aeabi_i2d>
 8006f0e:	0002      	movs	r2, r0
 8006f10:	000b      	movs	r3, r1
 8006f12:	0020      	movs	r0, r4
 8006f14:	0029      	movs	r1, r5
 8006f16:	f7fb fb0f 	bl	8002538 <__aeabi_dmul>
 8006f1a:	0002      	movs	r2, r0
 8006f1c:	000b      	movs	r3, r1
 8006f1e:	0010      	movs	r0, r2
 8006f20:	0019      	movs	r1, r3
 8006f22:	f7f9 fb61 	bl	80005e8 <__aeabi_d2uiz>
 8006f26:	0003      	movs	r3, r0
 8006f28:	b29a      	uxth	r2, r3
 8006f2a:	4b75      	ldr	r3, [pc, #468]	@ (8007100 <SGP_GetMeasurementValues+0x3e4>)
 8006f2c:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	0018      	movs	r0, r3
 8006f34:	f7fc f9c2 	bl	80032bc <__aeabi_i2d>
 8006f38:	2200      	movs	r2, #0
 8006f3a:	4b6e      	ldr	r3, [pc, #440]	@ (80070f4 <SGP_GetMeasurementValues+0x3d8>)
 8006f3c:	f7fa feb8 	bl	8001cb0 <__aeabi_ddiv>
 8006f40:	0002      	movs	r2, r0
 8006f42:	000b      	movs	r3, r1
 8006f44:	0014      	movs	r4, r2
 8006f46:	001d      	movs	r5, r3
 8006f48:	4b6c      	ldr	r3, [pc, #432]	@ (80070fc <SGP_GetMeasurementValues+0x3e0>)
 8006f4a:	881b      	ldrh	r3, [r3, #0]
 8006f4c:	0018      	movs	r0, r3
 8006f4e:	f7fc f9b5 	bl	80032bc <__aeabi_i2d>
 8006f52:	0002      	movs	r2, r0
 8006f54:	000b      	movs	r3, r1
 8006f56:	0020      	movs	r0, r4
 8006f58:	0029      	movs	r1, r5
 8006f5a:	f7fb faed 	bl	8002538 <__aeabi_dmul>
 8006f5e:	0002      	movs	r2, r0
 8006f60:	000b      	movs	r3, r1
 8006f62:	0010      	movs	r0, r2
 8006f64:	0019      	movs	r1, r3
 8006f66:	f7f9 fb3f 	bl	80005e8 <__aeabi_d2uiz>
 8006f6a:	0003      	movs	r3, r0
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	4b65      	ldr	r3, [pc, #404]	@ (8007104 <SGP_GetMeasurementValues+0x3e8>)
 8006f70:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8006f72:	4b62      	ldr	r3, [pc, #392]	@ (80070fc <SGP_GetMeasurementValues+0x3e0>)
 8006f74:	881a      	ldrh	r2, [r3, #0]
 8006f76:	4b64      	ldr	r3, [pc, #400]	@ (8007108 <SGP_GetMeasurementValues+0x3ec>)
 8006f78:	801a      	strh	r2, [r3, #0]
      TIM2->CCR1 = Red;
 8006f7a:	4b63      	ldr	r3, [pc, #396]	@ (8007108 <SGP_GetMeasurementValues+0x3ec>)
 8006f7c:	881a      	ldrh	r2, [r3, #0]
 8006f7e:	2380      	movs	r3, #128	@ 0x80
 8006f80:	05db      	lsls	r3, r3, #23
 8006f82:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2->CCR3 = Green;
 8006f84:	4b5e      	ldr	r3, [pc, #376]	@ (8007100 <SGP_GetMeasurementValues+0x3e4>)
 8006f86:	881a      	ldrh	r2, [r3, #0]
 8006f88:	2380      	movs	r3, #128	@ 0x80
 8006f8a:	05db      	lsls	r3, r3, #23
 8006f8c:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = Blue;
 8006f8e:	4b5d      	ldr	r3, [pc, #372]	@ (8007104 <SGP_GetMeasurementValues+0x3e8>)
 8006f90:	881a      	ldrh	r2, [r3, #0]
 8006f92:	2380      	movs	r3, #128	@ 0x80
 8006f94:	05db      	lsls	r3, r3, #23
 8006f96:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      if(*vocIndex > 100){
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	2b64      	cmp	r3, #100	@ 0x64
 8006f9e:	dd6c      	ble.n	800707a <SGP_GetMeasurementValues+0x35e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	0018      	movs	r0, r3
 8006fa6:	f7fc f989 	bl	80032bc <__aeabi_i2d>
 8006faa:	2200      	movs	r2, #0
 8006fac:	4b51      	ldr	r3, [pc, #324]	@ (80070f4 <SGP_GetMeasurementValues+0x3d8>)
 8006fae:	f7fb fd8b 	bl	8002ac8 <__aeabi_dsub>
 8006fb2:	0002      	movs	r2, r0
 8006fb4:	000b      	movs	r3, r1
 8006fb6:	0010      	movs	r0, r2
 8006fb8:	0019      	movs	r1, r3
 8006fba:	2200      	movs	r2, #0
 8006fbc:	4b53      	ldr	r3, [pc, #332]	@ (800710c <SGP_GetMeasurementValues+0x3f0>)
 8006fbe:	f7fa fe77 	bl	8001cb0 <__aeabi_ddiv>
 8006fc2:	0002      	movs	r2, r0
 8006fc4:	000b      	movs	r3, r1
 8006fc6:	0014      	movs	r4, r2
 8006fc8:	001d      	movs	r5, r3
 8006fca:	4b4c      	ldr	r3, [pc, #304]	@ (80070fc <SGP_GetMeasurementValues+0x3e0>)
 8006fcc:	881b      	ldrh	r3, [r3, #0]
 8006fce:	0018      	movs	r0, r3
 8006fd0:	f7fc f974 	bl	80032bc <__aeabi_i2d>
 8006fd4:	0002      	movs	r2, r0
 8006fd6:	000b      	movs	r3, r1
 8006fd8:	0020      	movs	r0, r4
 8006fda:	0029      	movs	r1, r5
 8006fdc:	f7fb faac 	bl	8002538 <__aeabi_dmul>
 8006fe0:	0002      	movs	r2, r0
 8006fe2:	000b      	movs	r3, r1
 8006fe4:	0010      	movs	r0, r2
 8006fe6:	0019      	movs	r1, r3
 8006fe8:	f7f9 fafe 	bl	80005e8 <__aeabi_d2uiz>
 8006fec:	0003      	movs	r3, r0
 8006fee:	b29a      	uxth	r2, r3
 8006ff0:	4b43      	ldr	r3, [pc, #268]	@ (8007100 <SGP_GetMeasurementValues+0x3e4>)
 8006ff2:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	0018      	movs	r0, r3
 8006ffa:	f7fc f95f 	bl	80032bc <__aeabi_i2d>
 8006ffe:	2200      	movs	r2, #0
 8007000:	4b3c      	ldr	r3, [pc, #240]	@ (80070f4 <SGP_GetMeasurementValues+0x3d8>)
 8007002:	f7fb fd61 	bl	8002ac8 <__aeabi_dsub>
 8007006:	0002      	movs	r2, r0
 8007008:	000b      	movs	r3, r1
 800700a:	0010      	movs	r0, r2
 800700c:	0019      	movs	r1, r3
 800700e:	2200      	movs	r2, #0
 8007010:	4b3e      	ldr	r3, [pc, #248]	@ (800710c <SGP_GetMeasurementValues+0x3f0>)
 8007012:	f7fa fe4d 	bl	8001cb0 <__aeabi_ddiv>
 8007016:	0002      	movs	r2, r0
 8007018:	000b      	movs	r3, r1
 800701a:	2000      	movs	r0, #0
 800701c:	4936      	ldr	r1, [pc, #216]	@ (80070f8 <SGP_GetMeasurementValues+0x3dc>)
 800701e:	f7fb fd53 	bl	8002ac8 <__aeabi_dsub>
 8007022:	0002      	movs	r2, r0
 8007024:	000b      	movs	r3, r1
 8007026:	0014      	movs	r4, r2
 8007028:	001d      	movs	r5, r3
 800702a:	4b34      	ldr	r3, [pc, #208]	@ (80070fc <SGP_GetMeasurementValues+0x3e0>)
 800702c:	881b      	ldrh	r3, [r3, #0]
 800702e:	0018      	movs	r0, r3
 8007030:	f7fc f944 	bl	80032bc <__aeabi_i2d>
 8007034:	0002      	movs	r2, r0
 8007036:	000b      	movs	r3, r1
 8007038:	0020      	movs	r0, r4
 800703a:	0029      	movs	r1, r5
 800703c:	f7fb fa7c 	bl	8002538 <__aeabi_dmul>
 8007040:	0002      	movs	r2, r0
 8007042:	000b      	movs	r3, r1
 8007044:	0010      	movs	r0, r2
 8007046:	0019      	movs	r1, r3
 8007048:	f7f9 face 	bl	80005e8 <__aeabi_d2uiz>
 800704c:	0003      	movs	r3, r0
 800704e:	b29a      	uxth	r2, r3
 8007050:	4b2d      	ldr	r3, [pc, #180]	@ (8007108 <SGP_GetMeasurementValues+0x3ec>)
 8007052:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8007054:	4b29      	ldr	r3, [pc, #164]	@ (80070fc <SGP_GetMeasurementValues+0x3e0>)
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	4b2a      	ldr	r3, [pc, #168]	@ (8007104 <SGP_GetMeasurementValues+0x3e8>)
 800705a:	801a      	strh	r2, [r3, #0]
        TIM2->CCR1 = Red;
 800705c:	4b2a      	ldr	r3, [pc, #168]	@ (8007108 <SGP_GetMeasurementValues+0x3ec>)
 800705e:	881a      	ldrh	r2, [r3, #0]
 8007060:	2380      	movs	r3, #128	@ 0x80
 8007062:	05db      	lsls	r3, r3, #23
 8007064:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR3 = Green;
 8007066:	4b26      	ldr	r3, [pc, #152]	@ (8007100 <SGP_GetMeasurementValues+0x3e4>)
 8007068:	881a      	ldrh	r2, [r3, #0]
 800706a:	2380      	movs	r3, #128	@ 0x80
 800706c:	05db      	lsls	r3, r3, #23
 800706e:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2->CCR4 = Blue;
 8007070:	4b24      	ldr	r3, [pc, #144]	@ (8007104 <SGP_GetMeasurementValues+0x3e8>)
 8007072:	881a      	ldrh	r2, [r3, #0]
 8007074:	2380      	movs	r3, #128	@ 0x80
 8007076:	05db      	lsls	r3, r3, #23
 8007078:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      SGP_AmountOfSamplesDone = 0;
 800707a:	4b11      	ldr	r3, [pc, #68]	@ (80070c0 <SGP_GetMeasurementValues+0x3a4>)
 800707c:	2200      	movs	r2, #0
 800707e:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007080:	4a23      	ldr	r2, [pc, #140]	@ (8007110 <SGP_GetMeasurementValues+0x3f4>)
 8007082:	4b09      	ldr	r3, [pc, #36]	@ (80070a8 <SGP_GetMeasurementValues+0x38c>)
 8007084:	0019      	movs	r1, r3
 8007086:	2003      	movs	r0, #3
 8007088:	f000 fee6 	bl	8007e58 <CreateLine>
      HT_MeasurementReceived = false;
 800708c:	4b07      	ldr	r3, [pc, #28]	@ (80070ac <SGP_GetMeasurementValues+0x390>)
 800708e:	2200      	movs	r2, #0
 8007090:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8007092:	4b03      	ldr	r3, [pc, #12]	@ (80070a0 <SGP_GetMeasurementValues+0x384>)
 8007094:	2200      	movs	r2, #0
 8007096:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007098:	2301      	movs	r3, #1
 800709a:	e053      	b.n	8007144 <SGP_GetMeasurementValues+0x428>
 800709c:	20000f86 	.word	0x20000f86
 80070a0:	20001031 	.word	0x20001031
 80070a4:	08012b28 	.word	0x08012b28
 80070a8:	08012b54 	.word	0x08012b54
 80070ac:	20001030 	.word	0x20001030
 80070b0:	20000114 	.word	0x20000114
 80070b4:	20000128 	.word	0x20000128
 80070b8:	2000010c 	.word	0x2000010c
 80070bc:	20000f87 	.word	0x20000f87
 80070c0:	20000f85 	.word	0x20000f85
 80070c4:	08012b58 	.word	0x08012b58
 80070c8:	20000f7c 	.word	0x20000f7c
 80070cc:	08012b88 	.word	0x08012b88
 80070d0:	08012bac 	.word	0x08012bac
 80070d4:	08012bb0 	.word	0x08012bb0
 80070d8:	08012bd0 	.word	0x08012bd0
 80070dc:	08012bd4 	.word	0x08012bd4
 80070e0:	20000124 	.word	0x20000124
 80070e4:	2000011c 	.word	0x2000011c
 80070e8:	08012bf4 	.word	0x08012bf4
 80070ec:	20000f88 	.word	0x20000f88
 80070f0:	08012c08 	.word	0x08012c08
 80070f4:	40590000 	.word	0x40590000
 80070f8:	3ff00000 	.word	0x3ff00000
 80070fc:	2000012c 	.word	0x2000012c
 8007100:	20001036 	.word	0x20001036
 8007104:	20001034 	.word	0x20001034
 8007108:	20001032 	.word	0x20001032
 800710c:	40790000 	.word	0x40790000
 8007110:	08012c1c 	.word	0x08012c1c
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007114:	f7ff fde6 	bl	8006ce4 <SGP_MeasurementDone>
 8007118:	1e03      	subs	r3, r0, #0
 800711a:	d012      	beq.n	8007142 <SGP_GetMeasurementValues+0x426>
 800711c:	4b0b      	ldr	r3, [pc, #44]	@ (800714c <SGP_GetMeasurementValues+0x430>)
 800711e:	781b      	ldrb	r3, [r3, #0]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d00e      	beq.n	8007142 <SGP_GetMeasurementValues+0x426>
 8007124:	4b0a      	ldr	r3, [pc, #40]	@ (8007150 <SGP_GetMeasurementValues+0x434>)
 8007126:	781b      	ldrb	r3, [r3, #0]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d00a      	beq.n	8007142 <SGP_GetMeasurementValues+0x426>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 800712c:	4a09      	ldr	r2, [pc, #36]	@ (8007154 <SGP_GetMeasurementValues+0x438>)
 800712e:	4b0a      	ldr	r3, [pc, #40]	@ (8007158 <SGP_GetMeasurementValues+0x43c>)
 8007130:	0019      	movs	r1, r3
 8007132:	2003      	movs	r0, #3
 8007134:	f000 fe90 	bl	8007e58 <CreateLine>
    SGP_StartMeasurement();
 8007138:	f7ff fd80 	bl	8006c3c <SGP_StartMeasurement>
    SGP_MsgSent = false;
 800713c:	4b07      	ldr	r3, [pc, #28]	@ (800715c <SGP_GetMeasurementValues+0x440>)
 800713e:	2200      	movs	r2, #0
 8007140:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007142:	2300      	movs	r3, #0
}
 8007144:	0018      	movs	r0, r3
 8007146:	46bd      	mov	sp, r7
 8007148:	b004      	add	sp, #16
 800714a:	bdb0      	pop	{r4, r5, r7, pc}
 800714c:	20000f86 	.word	0x20000f86
 8007150:	20000f87 	.word	0x20000f87
 8007154:	08012c40 	.word	0x08012c40
 8007158:	08012b54 	.word	0x08012b54
 800715c:	20001031 	.word	0x20001031

08007160 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007160:	b580      	push	{r7, lr}
 8007162:	b084      	sub	sp, #16
 8007164:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007166:	4b1a      	ldr	r3, [pc, #104]	@ (80071d0 <SGP_DeviceConnected+0x70>)
 8007168:	2202      	movs	r2, #2
 800716a:	0019      	movs	r1, r3
 800716c:	2059      	movs	r0, #89	@ 0x59
 800716e:	f7ff fd2d 	bl	8006bcc <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007172:	2001      	movs	r0, #1
 8007174:	f001 fa72 	bl	800865c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8007178:	4b16      	ldr	r3, [pc, #88]	@ (80071d4 <SGP_DeviceConnected+0x74>)
 800717a:	2209      	movs	r2, #9
 800717c:	0019      	movs	r1, r3
 800717e:	2059      	movs	r0, #89	@ 0x59
 8007180:	f7ff fd06 	bl	8006b90 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007184:	1dfb      	adds	r3, r7, #7
 8007186:	2200      	movs	r2, #0
 8007188:	701a      	strb	r2, [r3, #0]
 800718a:	e011      	b.n	80071b0 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 800718c:	1dfb      	adds	r3, r7, #7
 800718e:	7818      	ldrb	r0, [r3, #0]
 8007190:	1dfb      	adds	r3, r7, #7
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	4a0f      	ldr	r2, [pc, #60]	@ (80071d4 <SGP_DeviceConnected+0x74>)
 8007196:	5cd3      	ldrb	r3, [r2, r3]
 8007198:	4a0f      	ldr	r2, [pc, #60]	@ (80071d8 <SGP_DeviceConnected+0x78>)
 800719a:	4910      	ldr	r1, [pc, #64]	@ (80071dc <SGP_DeviceConnected+0x7c>)
 800719c:	9300      	str	r3, [sp, #0]
 800719e:	0003      	movs	r3, r0
 80071a0:	2002      	movs	r0, #2
 80071a2:	f000 fe59 	bl	8007e58 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80071a6:	1dfb      	adds	r3, r7, #7
 80071a8:	781a      	ldrb	r2, [r3, #0]
 80071aa:	1dfb      	adds	r3, r7, #7
 80071ac:	3201      	adds	r2, #1
 80071ae:	701a      	strb	r2, [r3, #0]
 80071b0:	1dfb      	adds	r3, r7, #7
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	2b08      	cmp	r3, #8
 80071b6:	d9e9      	bls.n	800718c <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 80071b8:	4b06      	ldr	r3, [pc, #24]	@ (80071d4 <SGP_DeviceConnected+0x74>)
 80071ba:	2203      	movs	r2, #3
 80071bc:	2109      	movs	r1, #9
 80071be:	0018      	movs	r0, r3
 80071c0:	f000 f80e 	bl	80071e0 <CheckCRC>
 80071c4:	0003      	movs	r3, r0
}
 80071c6:	0018      	movs	r0, r3
 80071c8:	46bd      	mov	sp, r7
 80071ca:	b002      	add	sp, #8
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	46c0      	nop			@ (mov r8, r8)
 80071d0:	20000108 	.word	0x20000108
 80071d4:	20000f7c 	.word	0x20000f7c
 80071d8:	08012c60 	.word	0x08012c60
 80071dc:	08012bd0 	.word	0x08012bd0

080071e0 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80071e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80071e2:	b08f      	sub	sp, #60	@ 0x3c
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6278      	str	r0, [r7, #36]	@ 0x24
 80071e8:	0008      	movs	r0, r1
 80071ea:	0011      	movs	r1, r2
 80071ec:	2323      	movs	r3, #35	@ 0x23
 80071ee:	18fb      	adds	r3, r7, r3
 80071f0:	1c02      	adds	r2, r0, #0
 80071f2:	701a      	strb	r2, [r3, #0]
 80071f4:	2322      	movs	r3, #34	@ 0x22
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	1c0a      	adds	r2, r1, #0
 80071fa:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80071fc:	2317      	movs	r3, #23
 80071fe:	2220      	movs	r2, #32
 8007200:	189b      	adds	r3, r3, r2
 8007202:	19db      	adds	r3, r3, r7
 8007204:	2200      	movs	r2, #0
 8007206:	701a      	strb	r2, [r3, #0]
 8007208:	e09f      	b.n	800734a <CheckCRC+0x16a>
 800720a:	466b      	mov	r3, sp
 800720c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800720e:	2322      	movs	r3, #34	@ 0x22
 8007210:	18fb      	adds	r3, r7, r3
 8007212:	781b      	ldrb	r3, [r3, #0]
 8007214:	001a      	movs	r2, r3
 8007216:	3a01      	subs	r2, #1
 8007218:	633a      	str	r2, [r7, #48]	@ 0x30
 800721a:	60bb      	str	r3, [r7, #8]
 800721c:	2200      	movs	r2, #0
 800721e:	60fa      	str	r2, [r7, #12]
 8007220:	68b8      	ldr	r0, [r7, #8]
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	0002      	movs	r2, r0
 8007226:	0f52      	lsrs	r2, r2, #29
 8007228:	000c      	movs	r4, r1
 800722a:	00e4      	lsls	r4, r4, #3
 800722c:	61fc      	str	r4, [r7, #28]
 800722e:	69fc      	ldr	r4, [r7, #28]
 8007230:	4314      	orrs	r4, r2
 8007232:	61fc      	str	r4, [r7, #28]
 8007234:	0002      	movs	r2, r0
 8007236:	00d2      	lsls	r2, r2, #3
 8007238:	61ba      	str	r2, [r7, #24]
 800723a:	603b      	str	r3, [r7, #0]
 800723c:	2200      	movs	r2, #0
 800723e:	607a      	str	r2, [r7, #4]
 8007240:	6838      	ldr	r0, [r7, #0]
 8007242:	6879      	ldr	r1, [r7, #4]
 8007244:	0002      	movs	r2, r0
 8007246:	0f52      	lsrs	r2, r2, #29
 8007248:	000c      	movs	r4, r1
 800724a:	00e4      	lsls	r4, r4, #3
 800724c:	617c      	str	r4, [r7, #20]
 800724e:	697c      	ldr	r4, [r7, #20]
 8007250:	4314      	orrs	r4, r2
 8007252:	617c      	str	r4, [r7, #20]
 8007254:	0002      	movs	r2, r0
 8007256:	00d2      	lsls	r2, r2, #3
 8007258:	613a      	str	r2, [r7, #16]
 800725a:	3307      	adds	r3, #7
 800725c:	08db      	lsrs	r3, r3, #3
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	466a      	mov	r2, sp
 8007262:	1ad3      	subs	r3, r2, r3
 8007264:	469d      	mov	sp, r3
 8007266:	466b      	mov	r3, sp
 8007268:	3300      	adds	r3, #0
 800726a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 800726c:	2316      	movs	r3, #22
 800726e:	2220      	movs	r2, #32
 8007270:	189b      	adds	r3, r3, r2
 8007272:	19db      	adds	r3, r3, r7
 8007274:	2200      	movs	r2, #0
 8007276:	701a      	strb	r2, [r3, #0]
 8007278:	e01e      	b.n	80072b8 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 800727a:	2317      	movs	r3, #23
 800727c:	2220      	movs	r2, #32
 800727e:	189b      	adds	r3, r3, r2
 8007280:	19db      	adds	r3, r3, r7
 8007282:	781a      	ldrb	r2, [r3, #0]
 8007284:	2116      	movs	r1, #22
 8007286:	2320      	movs	r3, #32
 8007288:	18cb      	adds	r3, r1, r3
 800728a:	19db      	adds	r3, r3, r7
 800728c:	781b      	ldrb	r3, [r3, #0]
 800728e:	18d3      	adds	r3, r2, r3
 8007290:	001a      	movs	r2, r3
 8007292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007294:	189a      	adds	r2, r3, r2
 8007296:	0008      	movs	r0, r1
 8007298:	2320      	movs	r3, #32
 800729a:	18cb      	adds	r3, r1, r3
 800729c:	19db      	adds	r3, r3, r7
 800729e:	781b      	ldrb	r3, [r3, #0]
 80072a0:	7811      	ldrb	r1, [r2, #0]
 80072a2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80072a4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80072a6:	2320      	movs	r3, #32
 80072a8:	18c3      	adds	r3, r0, r3
 80072aa:	19db      	adds	r3, r3, r7
 80072ac:	781a      	ldrb	r2, [r3, #0]
 80072ae:	2320      	movs	r3, #32
 80072b0:	18c3      	adds	r3, r0, r3
 80072b2:	19db      	adds	r3, r3, r7
 80072b4:	3201      	adds	r2, #1
 80072b6:	701a      	strb	r2, [r3, #0]
 80072b8:	2316      	movs	r3, #22
 80072ba:	2220      	movs	r2, #32
 80072bc:	189b      	adds	r3, r3, r2
 80072be:	19da      	adds	r2, r3, r7
 80072c0:	2322      	movs	r3, #34	@ 0x22
 80072c2:	18fb      	adds	r3, r7, r3
 80072c4:	7812      	ldrb	r2, [r2, #0]
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	429a      	cmp	r2, r3
 80072ca:	d3d6      	bcc.n	800727a <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 80072cc:	2417      	movs	r4, #23
 80072ce:	2320      	movs	r3, #32
 80072d0:	18e3      	adds	r3, r4, r3
 80072d2:	19db      	adds	r3, r3, r7
 80072d4:	781a      	ldrb	r2, [r3, #0]
 80072d6:	2322      	movs	r3, #34	@ 0x22
 80072d8:	18fb      	adds	r3, r7, r3
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	18d3      	adds	r3, r2, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80072e2:	18d2      	adds	r2, r2, r3
 80072e4:	250b      	movs	r5, #11
 80072e6:	2320      	movs	r3, #32
 80072e8:	18eb      	adds	r3, r5, r3
 80072ea:	19db      	adds	r3, r3, r7
 80072ec:	7812      	ldrb	r2, [r2, #0]
 80072ee:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80072f0:	2322      	movs	r3, #34	@ 0x22
 80072f2:	18fb      	adds	r3, r7, r3
 80072f4:	781b      	ldrb	r3, [r3, #0]
 80072f6:	3b01      	subs	r3, #1
 80072f8:	b2da      	uxtb	r2, r3
 80072fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fc:	0011      	movs	r1, r2
 80072fe:	0018      	movs	r0, r3
 8007300:	f000 f838 	bl	8007374 <CalculateCRC>
 8007304:	0003      	movs	r3, r0
 8007306:	001a      	movs	r2, r3
 8007308:	2320      	movs	r3, #32
 800730a:	18eb      	adds	r3, r5, r3
 800730c:	19db      	adds	r3, r3, r7
 800730e:	781b      	ldrb	r3, [r3, #0]
 8007310:	4293      	cmp	r3, r2
 8007312:	d00c      	beq.n	800732e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007314:	2320      	movs	r3, #32
 8007316:	18e3      	adds	r3, r4, r3
 8007318:	19db      	adds	r3, r3, r7
 800731a:	781b      	ldrb	r3, [r3, #0]
 800731c:	3301      	adds	r3, #1
 800731e:	4a13      	ldr	r2, [pc, #76]	@ (800736c <CheckCRC+0x18c>)
 8007320:	4913      	ldr	r1, [pc, #76]	@ (8007370 <CheckCRC+0x190>)
 8007322:	2001      	movs	r0, #1
 8007324:	f000 fd98 	bl	8007e58 <CreateLine>
      return false;
 8007328:	2300      	movs	r3, #0
 800732a:	46b5      	mov	sp, r6
 800732c:	e019      	b.n	8007362 <CheckCRC+0x182>
 800732e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007330:	2217      	movs	r2, #23
 8007332:	2320      	movs	r3, #32
 8007334:	18d3      	adds	r3, r2, r3
 8007336:	19db      	adds	r3, r3, r7
 8007338:	2120      	movs	r1, #32
 800733a:	1852      	adds	r2, r2, r1
 800733c:	19d1      	adds	r1, r2, r7
 800733e:	2222      	movs	r2, #34	@ 0x22
 8007340:	18ba      	adds	r2, r7, r2
 8007342:	7809      	ldrb	r1, [r1, #0]
 8007344:	7812      	ldrb	r2, [r2, #0]
 8007346:	188a      	adds	r2, r1, r2
 8007348:	701a      	strb	r2, [r3, #0]
 800734a:	2317      	movs	r3, #23
 800734c:	2220      	movs	r2, #32
 800734e:	189b      	adds	r3, r3, r2
 8007350:	19da      	adds	r2, r3, r7
 8007352:	2323      	movs	r3, #35	@ 0x23
 8007354:	18fb      	adds	r3, r7, r3
 8007356:	7812      	ldrb	r2, [r2, #0]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	429a      	cmp	r2, r3
 800735c:	d200      	bcs.n	8007360 <CheckCRC+0x180>
 800735e:	e754      	b.n	800720a <CheckCRC+0x2a>
    }
  }
  return true;
 8007360:	2301      	movs	r3, #1
}
 8007362:	0018      	movs	r0, r3
 8007364:	46bd      	mov	sp, r7
 8007366:	b00f      	add	sp, #60	@ 0x3c
 8007368:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800736a:	46c0      	nop			@ (mov r8, r8)
 800736c:	08012c80 	.word	0x08012c80
 8007370:	08012bac 	.word	0x08012bac

08007374 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8007374:	b580      	push	{r7, lr}
 8007376:	b084      	sub	sp, #16
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
 800737c:	000a      	movs	r2, r1
 800737e:	1cfb      	adds	r3, r7, #3
 8007380:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8007382:	230f      	movs	r3, #15
 8007384:	18fb      	adds	r3, r7, r3
 8007386:	22ff      	movs	r2, #255	@ 0xff
 8007388:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800738a:	230e      	movs	r3, #14
 800738c:	18fb      	adds	r3, r7, r3
 800738e:	2200      	movs	r2, #0
 8007390:	701a      	strb	r2, [r3, #0]
 8007392:	e037      	b.n	8007404 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007394:	230e      	movs	r3, #14
 8007396:	18fb      	adds	r3, r7, r3
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	18d3      	adds	r3, r2, r3
 800739e:	7819      	ldrb	r1, [r3, #0]
 80073a0:	220f      	movs	r2, #15
 80073a2:	18bb      	adds	r3, r7, r2
 80073a4:	18ba      	adds	r2, r7, r2
 80073a6:	7812      	ldrb	r2, [r2, #0]
 80073a8:	404a      	eors	r2, r1
 80073aa:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80073ac:	230d      	movs	r3, #13
 80073ae:	18fb      	adds	r3, r7, r3
 80073b0:	2200      	movs	r2, #0
 80073b2:	701a      	strb	r2, [r3, #0]
 80073b4:	e01b      	b.n	80073ee <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80073b6:	210f      	movs	r1, #15
 80073b8:	187b      	adds	r3, r7, r1
 80073ba:	781b      	ldrb	r3, [r3, #0]
 80073bc:	b25b      	sxtb	r3, r3
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da09      	bge.n	80073d6 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80073c2:	187b      	adds	r3, r7, r1
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	005b      	lsls	r3, r3, #1
 80073c8:	b25b      	sxtb	r3, r3
 80073ca:	2231      	movs	r2, #49	@ 0x31
 80073cc:	4053      	eors	r3, r2
 80073ce:	b25a      	sxtb	r2, r3
 80073d0:	187b      	adds	r3, r7, r1
 80073d2:	701a      	strb	r2, [r3, #0]
 80073d4:	e005      	b.n	80073e2 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80073d6:	230f      	movs	r3, #15
 80073d8:	18fa      	adds	r2, r7, r3
 80073da:	18fb      	adds	r3, r7, r3
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	18db      	adds	r3, r3, r3
 80073e0:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80073e2:	210d      	movs	r1, #13
 80073e4:	187b      	adds	r3, r7, r1
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	187b      	adds	r3, r7, r1
 80073ea:	3201      	adds	r2, #1
 80073ec:	701a      	strb	r2, [r3, #0]
 80073ee:	230d      	movs	r3, #13
 80073f0:	18fb      	adds	r3, r7, r3
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	2b07      	cmp	r3, #7
 80073f6:	d9de      	bls.n	80073b6 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80073f8:	210e      	movs	r1, #14
 80073fa:	187b      	adds	r3, r7, r1
 80073fc:	781a      	ldrb	r2, [r3, #0]
 80073fe:	187b      	adds	r3, r7, r1
 8007400:	3201      	adds	r2, #1
 8007402:	701a      	strb	r2, [r3, #0]
 8007404:	230e      	movs	r3, #14
 8007406:	18fa      	adds	r2, r7, r3
 8007408:	1cfb      	adds	r3, r7, #3
 800740a:	7812      	ldrb	r2, [r2, #0]
 800740c:	781b      	ldrb	r3, [r3, #0]
 800740e:	429a      	cmp	r2, r3
 8007410:	d3c0      	bcc.n	8007394 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8007412:	230f      	movs	r3, #15
 8007414:	18fb      	adds	r3, r7, r3
 8007416:	781b      	ldrb	r3, [r3, #0]
}
 8007418:	0018      	movs	r0, r3
 800741a:	46bd      	mov	sp, r7
 800741c:	b004      	add	sp, #16
 800741e:	bd80      	pop	{r7, pc}

08007420 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
 8007428:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4936      	ldr	r1, [pc, #216]	@ (8007508 <SGP_GetHT+0xe8>)
 8007430:	1c18      	adds	r0, r3, #0
 8007432:	f7f9 f9c3 	bl	80007bc <__aeabi_fadd>
 8007436:	1c03      	adds	r3, r0, #0
 8007438:	4934      	ldr	r1, [pc, #208]	@ (800750c <SGP_GetHT+0xec>)
 800743a:	1c18      	adds	r0, r3, #0
 800743c:	f7f9 fb48 	bl	8000ad0 <__aeabi_fdiv>
 8007440:	1c03      	adds	r3, r0, #0
 8007442:	4933      	ldr	r1, [pc, #204]	@ (8007510 <SGP_GetHT+0xf0>)
 8007444:	1c18      	adds	r0, r3, #0
 8007446:	f7f9 fd29 	bl	8000e9c <__aeabi_fmul>
 800744a:	1c03      	adds	r3, r0, #0
 800744c:	1c18      	adds	r0, r3, #0
 800744e:	f7f9 f8b3 	bl	80005b8 <__aeabi_f2uiz>
 8007452:	0003      	movs	r3, r0
 8007454:	b29a      	uxth	r2, r3
 8007456:	4b2f      	ldr	r3, [pc, #188]	@ (8007514 <SGP_GetHT+0xf4>)
 8007458:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 800745a:	683b      	ldr	r3, [r7, #0]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	492e      	ldr	r1, [pc, #184]	@ (8007518 <SGP_GetHT+0xf8>)
 8007460:	1c18      	adds	r0, r3, #0
 8007462:	f7f9 fb35 	bl	8000ad0 <__aeabi_fdiv>
 8007466:	1c03      	adds	r3, r0, #0
 8007468:	4929      	ldr	r1, [pc, #164]	@ (8007510 <SGP_GetHT+0xf0>)
 800746a:	1c18      	adds	r0, r3, #0
 800746c:	f7f9 fd16 	bl	8000e9c <__aeabi_fmul>
 8007470:	1c03      	adds	r3, r0, #0
 8007472:	1c18      	adds	r0, r3, #0
 8007474:	f7f9 f8a0 	bl	80005b8 <__aeabi_f2uiz>
 8007478:	0003      	movs	r3, r0
 800747a:	b29a      	uxth	r2, r3
 800747c:	4b27      	ldr	r3, [pc, #156]	@ (800751c <SGP_GetHT+0xfc>)
 800747e:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8007480:	4b26      	ldr	r3, [pc, #152]	@ (800751c <SGP_GetHT+0xfc>)
 8007482:	881b      	ldrh	r3, [r3, #0]
 8007484:	0a1b      	lsrs	r3, r3, #8
 8007486:	b29b      	uxth	r3, r3
 8007488:	b2da      	uxtb	r2, r3
 800748a:	4b25      	ldr	r3, [pc, #148]	@ (8007520 <SGP_GetHT+0x100>)
 800748c:	709a      	strb	r2, [r3, #2]
 800748e:	4b24      	ldr	r3, [pc, #144]	@ (8007520 <SGP_GetHT+0x100>)
 8007490:	789a      	ldrb	r2, [r3, #2]
 8007492:	210c      	movs	r1, #12
 8007494:	187b      	adds	r3, r7, r1
 8007496:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8007498:	4b20      	ldr	r3, [pc, #128]	@ (800751c <SGP_GetHT+0xfc>)
 800749a:	881b      	ldrh	r3, [r3, #0]
 800749c:	b2da      	uxtb	r2, r3
 800749e:	4b20      	ldr	r3, [pc, #128]	@ (8007520 <SGP_GetHT+0x100>)
 80074a0:	70da      	strb	r2, [r3, #3]
 80074a2:	4b1f      	ldr	r3, [pc, #124]	@ (8007520 <SGP_GetHT+0x100>)
 80074a4:	78da      	ldrb	r2, [r3, #3]
 80074a6:	187b      	adds	r3, r7, r1
 80074a8:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 80074aa:	187b      	adds	r3, r7, r1
 80074ac:	2102      	movs	r1, #2
 80074ae:	0018      	movs	r0, r3
 80074b0:	f7ff ff60 	bl	8007374 <CalculateCRC>
 80074b4:	0003      	movs	r3, r0
 80074b6:	001a      	movs	r2, r3
 80074b8:	4b19      	ldr	r3, [pc, #100]	@ (8007520 <SGP_GetHT+0x100>)
 80074ba:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80074bc:	4b15      	ldr	r3, [pc, #84]	@ (8007514 <SGP_GetHT+0xf4>)
 80074be:	881b      	ldrh	r3, [r3, #0]
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	b29b      	uxth	r3, r3
 80074c4:	b2da      	uxtb	r2, r3
 80074c6:	4b16      	ldr	r3, [pc, #88]	@ (8007520 <SGP_GetHT+0x100>)
 80074c8:	715a      	strb	r2, [r3, #5]
 80074ca:	4b15      	ldr	r3, [pc, #84]	@ (8007520 <SGP_GetHT+0x100>)
 80074cc:	795a      	ldrb	r2, [r3, #5]
 80074ce:	2108      	movs	r1, #8
 80074d0:	187b      	adds	r3, r7, r1
 80074d2:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80074d4:	4b0f      	ldr	r3, [pc, #60]	@ (8007514 <SGP_GetHT+0xf4>)
 80074d6:	881b      	ldrh	r3, [r3, #0]
 80074d8:	b2da      	uxtb	r2, r3
 80074da:	4b11      	ldr	r3, [pc, #68]	@ (8007520 <SGP_GetHT+0x100>)
 80074dc:	719a      	strb	r2, [r3, #6]
 80074de:	4b10      	ldr	r3, [pc, #64]	@ (8007520 <SGP_GetHT+0x100>)
 80074e0:	799a      	ldrb	r2, [r3, #6]
 80074e2:	187b      	adds	r3, r7, r1
 80074e4:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80074e6:	187b      	adds	r3, r7, r1
 80074e8:	2102      	movs	r1, #2
 80074ea:	0018      	movs	r0, r3
 80074ec:	f7ff ff42 	bl	8007374 <CalculateCRC>
 80074f0:	0003      	movs	r3, r0
 80074f2:	001a      	movs	r2, r3
 80074f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007520 <SGP_GetHT+0x100>)
 80074f6:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80074f8:	4b0a      	ldr	r3, [pc, #40]	@ (8007524 <SGP_GetHT+0x104>)
 80074fa:	2201      	movs	r2, #1
 80074fc:	701a      	strb	r2, [r3, #0]
}
 80074fe:	46c0      	nop			@ (mov r8, r8)
 8007500:	46bd      	mov	sp, r7
 8007502:	b004      	add	sp, #16
 8007504:	bd80      	pop	{r7, pc}
 8007506:	46c0      	nop			@ (mov r8, r8)
 8007508:	42340000 	.word	0x42340000
 800750c:	432f0000 	.word	0x432f0000
 8007510:	477fff00 	.word	0x477fff00
 8007514:	2000102e 	.word	0x2000102e
 8007518:	42c80000 	.word	0x42c80000
 800751c:	2000102c 	.word	0x2000102c
 8007520:	20000114 	.word	0x20000114
 8007524:	20001030 	.word	0x20001030

08007528 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800752c:	4b07      	ldr	r3, [pc, #28]	@ (800754c <HAL_MspInit+0x24>)
 800752e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007530:	4b06      	ldr	r3, [pc, #24]	@ (800754c <HAL_MspInit+0x24>)
 8007532:	2101      	movs	r1, #1
 8007534:	430a      	orrs	r2, r1
 8007536:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8007538:	4b04      	ldr	r3, [pc, #16]	@ (800754c <HAL_MspInit+0x24>)
 800753a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800753c:	4b03      	ldr	r3, [pc, #12]	@ (800754c <HAL_MspInit+0x24>)
 800753e:	2180      	movs	r1, #128	@ 0x80
 8007540:	0549      	lsls	r1, r1, #21
 8007542:	430a      	orrs	r2, r1
 8007544:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007546:	46c0      	nop			@ (mov r8, r8)
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}
 800754c:	40021000 	.word	0x40021000

08007550 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007554:	46c0      	nop			@ (mov r8, r8)
 8007556:	e7fd      	b.n	8007554 <NMI_Handler+0x4>

08007558 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007558:	b580      	push	{r7, lr}
 800755a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800755c:	46c0      	nop			@ (mov r8, r8)
 800755e:	e7fd      	b.n	800755c <HardFault_Handler+0x4>

08007560 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007560:	b580      	push	{r7, lr}
 8007562:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007564:	46c0      	nop			@ (mov r8, r8)
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}

0800756a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800756a:	b580      	push	{r7, lr}
 800756c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800756e:	46c0      	nop			@ (mov r8, r8)
 8007570:	46bd      	mov	sp, r7
 8007572:	bd80      	pop	{r7, pc}

08007574 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007574:	b580      	push	{r7, lr}
 8007576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007578:	f001 f854 	bl	8008624 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800757c:	46c0      	nop			@ (mov r8, r8)
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
	...

08007584 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007588:	4b05      	ldr	r3, [pc, #20]	@ (80075a0 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800758a:	0018      	movs	r0, r3
 800758c:	f001 fea9 	bl	80092e2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8007590:	4b04      	ldr	r3, [pc, #16]	@ (80075a4 <DMA1_Channel2_3_IRQHandler+0x20>)
 8007592:	0018      	movs	r0, r3
 8007594:	f001 fea5 	bl	80092e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007598:	46c0      	nop			@ (mov r8, r8)
 800759a:	46bd      	mov	sp, r7
 800759c:	bd80      	pop	{r7, pc}
 800759e:	46c0      	nop			@ (mov r8, r8)
 80075a0:	20000a40 	.word	0x20000a40
 80075a4:	200009f8 	.word	0x200009f8

080075a8 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80075ac:	4b07      	ldr	r3, [pc, #28]	@ (80075cc <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80075ae:	0018      	movs	r0, r3
 80075b0:	f001 fe97 	bl	80092e2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80075b4:	4b06      	ldr	r3, [pc, #24]	@ (80075d0 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80075b6:	0018      	movs	r0, r3
 80075b8:	f001 fe93 	bl	80092e2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80075bc:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80075be:	0018      	movs	r0, r3
 80075c0:	f001 fe8f 	bl	80092e2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80075c4:	46c0      	nop			@ (mov r8, r8)
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	46c0      	nop			@ (mov r8, r8)
 80075cc:	20000ac4 	.word	0x20000ac4
 80075d0:	2000122c 	.word	0x2000122c
 80075d4:	20001274 	.word	0x20001274

080075d8 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80075dc:	4b03      	ldr	r3, [pc, #12]	@ (80075ec <USART4_5_IRQHandler+0x14>)
 80075de:	0018      	movs	r0, r3
 80075e0:	f006 fb50 	bl	800dc84 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80075e4:	46c0      	nop			@ (mov r8, r8)
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
 80075ea:	46c0      	nop			@ (mov r8, r8)
 80075ec:	20001174 	.word	0x20001174

080075f0 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80075f0:	b580      	push	{r7, lr}
 80075f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80075f4:	4b09      	ldr	r3, [pc, #36]	@ (800761c <I2C1_IRQHandler+0x2c>)
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	699a      	ldr	r2, [r3, #24]
 80075fa:	23e0      	movs	r3, #224	@ 0xe0
 80075fc:	00db      	lsls	r3, r3, #3
 80075fe:	4013      	ands	r3, r2
 8007600:	d004      	beq.n	800760c <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8007602:	4b06      	ldr	r3, [pc, #24]	@ (800761c <I2C1_IRQHandler+0x2c>)
 8007604:	0018      	movs	r0, r3
 8007606:	f002 fc8f 	bl	8009f28 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800760a:	e003      	b.n	8007614 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800760c:	4b03      	ldr	r3, [pc, #12]	@ (800761c <I2C1_IRQHandler+0x2c>)
 800760e:	0018      	movs	r0, r3
 8007610:	f002 fc70 	bl	8009ef4 <HAL_I2C_EV_IRQHandler>
}
 8007614:	46c0      	nop			@ (mov r8, r8)
 8007616:	46bd      	mov	sp, r7
 8007618:	bd80      	pop	{r7, pc}
 800761a:	46c0      	nop			@ (mov r8, r8)
 800761c:	20000950 	.word	0x20000950

08007620 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007620:	b580      	push	{r7, lr}
 8007622:	af00      	add	r7, sp, #0
  return 1;
 8007624:	2301      	movs	r3, #1
}
 8007626:	0018      	movs	r0, r3
 8007628:	46bd      	mov	sp, r7
 800762a:	bd80      	pop	{r7, pc}

0800762c <_kill>:

int _kill(int pid, int sig)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b082      	sub	sp, #8
 8007630:	af00      	add	r7, sp, #0
 8007632:	6078      	str	r0, [r7, #4]
 8007634:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007636:	f008 fc6d 	bl	800ff14 <__errno>
 800763a:	0003      	movs	r3, r0
 800763c:	2216      	movs	r2, #22
 800763e:	601a      	str	r2, [r3, #0]
  return -1;
 8007640:	2301      	movs	r3, #1
 8007642:	425b      	negs	r3, r3
}
 8007644:	0018      	movs	r0, r3
 8007646:	46bd      	mov	sp, r7
 8007648:	b002      	add	sp, #8
 800764a:	bd80      	pop	{r7, pc}

0800764c <_exit>:

void _exit (int status)
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007654:	2301      	movs	r3, #1
 8007656:	425a      	negs	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	0011      	movs	r1, r2
 800765c:	0018      	movs	r0, r3
 800765e:	f7ff ffe5 	bl	800762c <_kill>
  while (1) {}    /* Make sure we hang here */
 8007662:	46c0      	nop			@ (mov r8, r8)
 8007664:	e7fd      	b.n	8007662 <_exit+0x16>

08007666 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007666:	b580      	push	{r7, lr}
 8007668:	b086      	sub	sp, #24
 800766a:	af00      	add	r7, sp, #0
 800766c:	60f8      	str	r0, [r7, #12]
 800766e:	60b9      	str	r1, [r7, #8]
 8007670:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007672:	2300      	movs	r3, #0
 8007674:	617b      	str	r3, [r7, #20]
 8007676:	e00a      	b.n	800768e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007678:	e000      	b.n	800767c <_read+0x16>
 800767a:	bf00      	nop
 800767c:	0001      	movs	r1, r0
 800767e:	68bb      	ldr	r3, [r7, #8]
 8007680:	1c5a      	adds	r2, r3, #1
 8007682:	60ba      	str	r2, [r7, #8]
 8007684:	b2ca      	uxtb	r2, r1
 8007686:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007688:	697b      	ldr	r3, [r7, #20]
 800768a:	3301      	adds	r3, #1
 800768c:	617b      	str	r3, [r7, #20]
 800768e:	697a      	ldr	r2, [r7, #20]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	dbf0      	blt.n	8007678 <_read+0x12>
  }

  return len;
 8007696:	687b      	ldr	r3, [r7, #4]
}
 8007698:	0018      	movs	r0, r3
 800769a:	46bd      	mov	sp, r7
 800769c:	b006      	add	sp, #24
 800769e:	bd80      	pop	{r7, pc}

080076a0 <_close>:
  }
  return len;
}

int _close(int file)
{
 80076a0:	b580      	push	{r7, lr}
 80076a2:	b082      	sub	sp, #8
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80076a8:	2301      	movs	r3, #1
 80076aa:	425b      	negs	r3, r3
}
 80076ac:	0018      	movs	r0, r3
 80076ae:	46bd      	mov	sp, r7
 80076b0:	b002      	add	sp, #8
 80076b2:	bd80      	pop	{r7, pc}

080076b4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80076b4:	b580      	push	{r7, lr}
 80076b6:	b082      	sub	sp, #8
 80076b8:	af00      	add	r7, sp, #0
 80076ba:	6078      	str	r0, [r7, #4]
 80076bc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80076be:	683b      	ldr	r3, [r7, #0]
 80076c0:	2280      	movs	r2, #128	@ 0x80
 80076c2:	0192      	lsls	r2, r2, #6
 80076c4:	605a      	str	r2, [r3, #4]
  return 0;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	0018      	movs	r0, r3
 80076ca:	46bd      	mov	sp, r7
 80076cc:	b002      	add	sp, #8
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <_isatty>:

int _isatty(int file)
{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b082      	sub	sp, #8
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80076d8:	2301      	movs	r3, #1
}
 80076da:	0018      	movs	r0, r3
 80076dc:	46bd      	mov	sp, r7
 80076de:	b002      	add	sp, #8
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b084      	sub	sp, #16
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80076ee:	2300      	movs	r3, #0
}
 80076f0:	0018      	movs	r0, r3
 80076f2:	46bd      	mov	sp, r7
 80076f4:	b004      	add	sp, #16
 80076f6:	bd80      	pop	{r7, pc}

080076f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b086      	sub	sp, #24
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8007700:	4a14      	ldr	r2, [pc, #80]	@ (8007754 <_sbrk+0x5c>)
 8007702:	4b15      	ldr	r3, [pc, #84]	@ (8007758 <_sbrk+0x60>)
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007708:	697b      	ldr	r3, [r7, #20]
 800770a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800770c:	4b13      	ldr	r3, [pc, #76]	@ (800775c <_sbrk+0x64>)
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d102      	bne.n	800771a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007714:	4b11      	ldr	r3, [pc, #68]	@ (800775c <_sbrk+0x64>)
 8007716:	4a12      	ldr	r2, [pc, #72]	@ (8007760 <_sbrk+0x68>)
 8007718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800771a:	4b10      	ldr	r3, [pc, #64]	@ (800775c <_sbrk+0x64>)
 800771c:	681a      	ldr	r2, [r3, #0]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	18d3      	adds	r3, r2, r3
 8007722:	693a      	ldr	r2, [r7, #16]
 8007724:	429a      	cmp	r2, r3
 8007726:	d207      	bcs.n	8007738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007728:	f008 fbf4 	bl	800ff14 <__errno>
 800772c:	0003      	movs	r3, r0
 800772e:	220c      	movs	r2, #12
 8007730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007732:	2301      	movs	r3, #1
 8007734:	425b      	negs	r3, r3
 8007736:	e009      	b.n	800774c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007738:	4b08      	ldr	r3, [pc, #32]	@ (800775c <_sbrk+0x64>)
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800773e:	4b07      	ldr	r3, [pc, #28]	@ (800775c <_sbrk+0x64>)
 8007740:	681a      	ldr	r2, [r3, #0]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	18d2      	adds	r2, r2, r3
 8007746:	4b05      	ldr	r3, [pc, #20]	@ (800775c <_sbrk+0x64>)
 8007748:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800774a:	68fb      	ldr	r3, [r7, #12]
}
 800774c:	0018      	movs	r0, r3
 800774e:	46bd      	mov	sp, r7
 8007750:	b006      	add	sp, #24
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20005000 	.word	0x20005000
 8007758:	00000400 	.word	0x00000400
 800775c:	20001038 	.word	0x20001038
 8007760:	20001f20 	.word	0x20001f20

08007764 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007768:	46c0      	nop			@ (mov r8, r8)
 800776a:	46bd      	mov	sp, r7
 800776c:	bd80      	pop	{r7, pc}
	...

08007770 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8007770:	b580      	push	{r7, lr}
 8007772:	b086      	sub	sp, #24
 8007774:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007776:	2310      	movs	r3, #16
 8007778:	18fb      	adds	r3, r7, r3
 800777a:	0018      	movs	r0, r3
 800777c:	2308      	movs	r3, #8
 800777e:	001a      	movs	r2, r3
 8007780:	2100      	movs	r1, #0
 8007782:	f008 fb43 	bl	800fe0c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007786:	003b      	movs	r3, r7
 8007788:	0018      	movs	r0, r3
 800778a:	2310      	movs	r3, #16
 800778c:	001a      	movs	r2, r3
 800778e:	2100      	movs	r1, #0
 8007790:	f008 fb3c 	bl	800fe0c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007794:	4b2e      	ldr	r3, [pc, #184]	@ (8007850 <MX_TIM2_Init+0xe0>)
 8007796:	2280      	movs	r2, #128	@ 0x80
 8007798:	05d2      	lsls	r2, r2, #23
 800779a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800779c:	4b2c      	ldr	r3, [pc, #176]	@ (8007850 <MX_TIM2_Init+0xe0>)
 800779e:	2200      	movs	r2, #0
 80077a0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077a2:	4b2b      	ldr	r3, [pc, #172]	@ (8007850 <MX_TIM2_Init+0xe0>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80077a8:	4b29      	ldr	r3, [pc, #164]	@ (8007850 <MX_TIM2_Init+0xe0>)
 80077aa:	4a2a      	ldr	r2, [pc, #168]	@ (8007854 <MX_TIM2_Init+0xe4>)
 80077ac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80077ae:	4b28      	ldr	r3, [pc, #160]	@ (8007850 <MX_TIM2_Init+0xe0>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80077b4:	4b26      	ldr	r3, [pc, #152]	@ (8007850 <MX_TIM2_Init+0xe0>)
 80077b6:	2200      	movs	r2, #0
 80077b8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80077ba:	4b25      	ldr	r3, [pc, #148]	@ (8007850 <MX_TIM2_Init+0xe0>)
 80077bc:	0018      	movs	r0, r3
 80077be:	f005 fcd3 	bl	800d168 <HAL_TIM_PWM_Init>
 80077c2:	1e03      	subs	r3, r0, #0
 80077c4:	d001      	beq.n	80077ca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80077c6:	f7fd fe77 	bl	80054b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80077ca:	2110      	movs	r1, #16
 80077cc:	187b      	adds	r3, r7, r1
 80077ce:	2200      	movs	r2, #0
 80077d0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80077d2:	187b      	adds	r3, r7, r1
 80077d4:	2200      	movs	r2, #0
 80077d6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80077d8:	187a      	adds	r2, r7, r1
 80077da:	4b1d      	ldr	r3, [pc, #116]	@ (8007850 <MX_TIM2_Init+0xe0>)
 80077dc:	0011      	movs	r1, r2
 80077de:	0018      	movs	r0, r3
 80077e0:	f005 ffe0 	bl	800d7a4 <HAL_TIMEx_MasterConfigSynchronization>
 80077e4:	1e03      	subs	r3, r0, #0
 80077e6:	d001      	beq.n	80077ec <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80077e8:	f7fd fe66 	bl	80054b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80077ec:	003b      	movs	r3, r7
 80077ee:	2260      	movs	r2, #96	@ 0x60
 80077f0:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80077f2:	003b      	movs	r3, r7
 80077f4:	2200      	movs	r2, #0
 80077f6:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80077f8:	003b      	movs	r3, r7
 80077fa:	2200      	movs	r2, #0
 80077fc:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80077fe:	003b      	movs	r3, r7
 8007800:	2200      	movs	r2, #0
 8007802:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8007804:	0039      	movs	r1, r7
 8007806:	4b12      	ldr	r3, [pc, #72]	@ (8007850 <MX_TIM2_Init+0xe0>)
 8007808:	2200      	movs	r2, #0
 800780a:	0018      	movs	r0, r3
 800780c:	f005 fd7e 	bl	800d30c <HAL_TIM_PWM_ConfigChannel>
 8007810:	1e03      	subs	r3, r0, #0
 8007812:	d001      	beq.n	8007818 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8007814:	f7fd fe50 	bl	80054b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007818:	0039      	movs	r1, r7
 800781a:	4b0d      	ldr	r3, [pc, #52]	@ (8007850 <MX_TIM2_Init+0xe0>)
 800781c:	2208      	movs	r2, #8
 800781e:	0018      	movs	r0, r3
 8007820:	f005 fd74 	bl	800d30c <HAL_TIM_PWM_ConfigChannel>
 8007824:	1e03      	subs	r3, r0, #0
 8007826:	d001      	beq.n	800782c <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8007828:	f7fd fe46 	bl	80054b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800782c:	0039      	movs	r1, r7
 800782e:	4b08      	ldr	r3, [pc, #32]	@ (8007850 <MX_TIM2_Init+0xe0>)
 8007830:	220c      	movs	r2, #12
 8007832:	0018      	movs	r0, r3
 8007834:	f005 fd6a 	bl	800d30c <HAL_TIM_PWM_ConfigChannel>
 8007838:	1e03      	subs	r3, r0, #0
 800783a:	d001      	beq.n	8007840 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800783c:	f7fd fe3c 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8007840:	4b03      	ldr	r3, [pc, #12]	@ (8007850 <MX_TIM2_Init+0xe0>)
 8007842:	0018      	movs	r0, r3
 8007844:	f000 f8aa 	bl	800799c <HAL_TIM_MspPostInit>

}
 8007848:	46c0      	nop			@ (mov r8, r8)
 800784a:	46bd      	mov	sp, r7
 800784c:	b006      	add	sp, #24
 800784e:	bd80      	pop	{r7, pc}
 8007850:	2000103c 	.word	0x2000103c
 8007854:	0000ffff 	.word	0x0000ffff

08007858 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007858:	b580      	push	{r7, lr}
 800785a:	b086      	sub	sp, #24
 800785c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800785e:	2310      	movs	r3, #16
 8007860:	18fb      	adds	r3, r7, r3
 8007862:	0018      	movs	r0, r3
 8007864:	2308      	movs	r3, #8
 8007866:	001a      	movs	r2, r3
 8007868:	2100      	movs	r1, #0
 800786a:	f008 facf 	bl	800fe0c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800786e:	003b      	movs	r3, r7
 8007870:	0018      	movs	r0, r3
 8007872:	2310      	movs	r3, #16
 8007874:	001a      	movs	r2, r3
 8007876:	2100      	movs	r1, #0
 8007878:	f008 fac8 	bl	800fe0c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800787c:	4b32      	ldr	r3, [pc, #200]	@ (8007948 <MX_TIM3_Init+0xf0>)
 800787e:	4a33      	ldr	r2, [pc, #204]	@ (800794c <MX_TIM3_Init+0xf4>)
 8007880:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8007882:	4b31      	ldr	r3, [pc, #196]	@ (8007948 <MX_TIM3_Init+0xf0>)
 8007884:	2200      	movs	r2, #0
 8007886:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007888:	4b2f      	ldr	r3, [pc, #188]	@ (8007948 <MX_TIM3_Init+0xf0>)
 800788a:	2200      	movs	r2, #0
 800788c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800788e:	4b2e      	ldr	r3, [pc, #184]	@ (8007948 <MX_TIM3_Init+0xf0>)
 8007890:	4a2f      	ldr	r2, [pc, #188]	@ (8007950 <MX_TIM3_Init+0xf8>)
 8007892:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007894:	4b2c      	ldr	r3, [pc, #176]	@ (8007948 <MX_TIM3_Init+0xf0>)
 8007896:	2200      	movs	r2, #0
 8007898:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800789a:	4b2b      	ldr	r3, [pc, #172]	@ (8007948 <MX_TIM3_Init+0xf0>)
 800789c:	2200      	movs	r2, #0
 800789e:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80078a0:	4b29      	ldr	r3, [pc, #164]	@ (8007948 <MX_TIM3_Init+0xf0>)
 80078a2:	0018      	movs	r0, r3
 80078a4:	f005 fc60 	bl	800d168 <HAL_TIM_PWM_Init>
 80078a8:	1e03      	subs	r3, r0, #0
 80078aa:	d001      	beq.n	80078b0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80078ac:	f7fd fe04 	bl	80054b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078b0:	2110      	movs	r1, #16
 80078b2:	187b      	adds	r3, r7, r1
 80078b4:	2200      	movs	r2, #0
 80078b6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078b8:	187b      	adds	r3, r7, r1
 80078ba:	2200      	movs	r2, #0
 80078bc:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80078be:	187a      	adds	r2, r7, r1
 80078c0:	4b21      	ldr	r3, [pc, #132]	@ (8007948 <MX_TIM3_Init+0xf0>)
 80078c2:	0011      	movs	r1, r2
 80078c4:	0018      	movs	r0, r3
 80078c6:	f005 ff6d 	bl	800d7a4 <HAL_TIMEx_MasterConfigSynchronization>
 80078ca:	1e03      	subs	r3, r0, #0
 80078cc:	d001      	beq.n	80078d2 <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80078ce:	f7fd fdf3 	bl	80054b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80078d2:	003b      	movs	r3, r7
 80078d4:	2260      	movs	r2, #96	@ 0x60
 80078d6:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80078d8:	003b      	movs	r3, r7
 80078da:	2200      	movs	r2, #0
 80078dc:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80078de:	003b      	movs	r3, r7
 80078e0:	2200      	movs	r2, #0
 80078e2:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80078e4:	003b      	movs	r3, r7
 80078e6:	2200      	movs	r2, #0
 80078e8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80078ea:	0039      	movs	r1, r7
 80078ec:	4b16      	ldr	r3, [pc, #88]	@ (8007948 <MX_TIM3_Init+0xf0>)
 80078ee:	2200      	movs	r2, #0
 80078f0:	0018      	movs	r0, r3
 80078f2:	f005 fd0b 	bl	800d30c <HAL_TIM_PWM_ConfigChannel>
 80078f6:	1e03      	subs	r3, r0, #0
 80078f8:	d001      	beq.n	80078fe <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80078fa:	f7fd fddd 	bl	80054b8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80078fe:	4b12      	ldr	r3, [pc, #72]	@ (8007948 <MX_TIM3_Init+0xf0>)
 8007900:	2104      	movs	r1, #4
 8007902:	0018      	movs	r0, r3
 8007904:	f005 ffac 	bl	800d860 <HAL_TIMEx_RemapConfig>
 8007908:	1e03      	subs	r3, r0, #0
 800790a:	d001      	beq.n	8007910 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800790c:	f7fd fdd4 	bl	80054b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8007910:	0039      	movs	r1, r7
 8007912:	4b0d      	ldr	r3, [pc, #52]	@ (8007948 <MX_TIM3_Init+0xf0>)
 8007914:	2204      	movs	r2, #4
 8007916:	0018      	movs	r0, r3
 8007918:	f005 fcf8 	bl	800d30c <HAL_TIM_PWM_ConfigChannel>
 800791c:	1e03      	subs	r3, r0, #0
 800791e:	d001      	beq.n	8007924 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 8007920:	f7fd fdca 	bl	80054b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007924:	0039      	movs	r1, r7
 8007926:	4b08      	ldr	r3, [pc, #32]	@ (8007948 <MX_TIM3_Init+0xf0>)
 8007928:	2208      	movs	r2, #8
 800792a:	0018      	movs	r0, r3
 800792c:	f005 fcee 	bl	800d30c <HAL_TIM_PWM_ConfigChannel>
 8007930:	1e03      	subs	r3, r0, #0
 8007932:	d001      	beq.n	8007938 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8007934:	f7fd fdc0 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007938:	4b03      	ldr	r3, [pc, #12]	@ (8007948 <MX_TIM3_Init+0xf0>)
 800793a:	0018      	movs	r0, r3
 800793c:	f000 f82e 	bl	800799c <HAL_TIM_MspPostInit>

}
 8007940:	46c0      	nop			@ (mov r8, r8)
 8007942:	46bd      	mov	sp, r7
 8007944:	b006      	add	sp, #24
 8007946:	bd80      	pop	{r7, pc}
 8007948:	2000107c 	.word	0x2000107c
 800794c:	40000400 	.word	0x40000400
 8007950:	0000ffff 	.word	0x0000ffff

08007954 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681a      	ldr	r2, [r3, #0]
 8007960:	2380      	movs	r3, #128	@ 0x80
 8007962:	05db      	lsls	r3, r3, #23
 8007964:	429a      	cmp	r2, r3
 8007966:	d106      	bne.n	8007976 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007968:	4b0a      	ldr	r3, [pc, #40]	@ (8007994 <HAL_TIM_PWM_MspInit+0x40>)
 800796a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800796c:	4b09      	ldr	r3, [pc, #36]	@ (8007994 <HAL_TIM_PWM_MspInit+0x40>)
 800796e:	2101      	movs	r1, #1
 8007970:	430a      	orrs	r2, r1
 8007972:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007974:	e00a      	b.n	800798c <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	4a07      	ldr	r2, [pc, #28]	@ (8007998 <HAL_TIM_PWM_MspInit+0x44>)
 800797c:	4293      	cmp	r3, r2
 800797e:	d105      	bne.n	800798c <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8007980:	4b04      	ldr	r3, [pc, #16]	@ (8007994 <HAL_TIM_PWM_MspInit+0x40>)
 8007982:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007984:	4b03      	ldr	r3, [pc, #12]	@ (8007994 <HAL_TIM_PWM_MspInit+0x40>)
 8007986:	2102      	movs	r1, #2
 8007988:	430a      	orrs	r2, r1
 800798a:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800798c:	46c0      	nop			@ (mov r8, r8)
 800798e:	46bd      	mov	sp, r7
 8007990:	b002      	add	sp, #8
 8007992:	bd80      	pop	{r7, pc}
 8007994:	40021000 	.word	0x40021000
 8007998:	40000400 	.word	0x40000400

0800799c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800799c:	b590      	push	{r4, r7, lr}
 800799e:	b08b      	sub	sp, #44	@ 0x2c
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079a4:	2414      	movs	r4, #20
 80079a6:	193b      	adds	r3, r7, r4
 80079a8:	0018      	movs	r0, r3
 80079aa:	2314      	movs	r3, #20
 80079ac:	001a      	movs	r2, r3
 80079ae:	2100      	movs	r1, #0
 80079b0:	f008 fa2c 	bl	800fe0c <memset>
  if(timHandle->Instance==TIM2)
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681a      	ldr	r2, [r3, #0]
 80079b8:	2380      	movs	r3, #128	@ 0x80
 80079ba:	05db      	lsls	r3, r3, #23
 80079bc:	429a      	cmp	r2, r3
 80079be:	d123      	bne.n	8007a08 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80079c0:	4b27      	ldr	r3, [pc, #156]	@ (8007a60 <HAL_TIM_MspPostInit+0xc4>)
 80079c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079c4:	4b26      	ldr	r3, [pc, #152]	@ (8007a60 <HAL_TIM_MspPostInit+0xc4>)
 80079c6:	2101      	movs	r1, #1
 80079c8:	430a      	orrs	r2, r1
 80079ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80079cc:	4b24      	ldr	r3, [pc, #144]	@ (8007a60 <HAL_TIM_MspPostInit+0xc4>)
 80079ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079d0:	2201      	movs	r2, #1
 80079d2:	4013      	ands	r3, r2
 80079d4:	613b      	str	r3, [r7, #16]
 80079d6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80079d8:	0021      	movs	r1, r4
 80079da:	187b      	adds	r3, r7, r1
 80079dc:	220d      	movs	r2, #13
 80079de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80079e0:	187b      	adds	r3, r7, r1
 80079e2:	2202      	movs	r2, #2
 80079e4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80079e6:	187b      	adds	r3, r7, r1
 80079e8:	2200      	movs	r2, #0
 80079ea:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80079ec:	187b      	adds	r3, r7, r1
 80079ee:	2200      	movs	r2, #0
 80079f0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80079f2:	187b      	adds	r3, r7, r1
 80079f4:	2202      	movs	r2, #2
 80079f6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80079f8:	187a      	adds	r2, r7, r1
 80079fa:	23a0      	movs	r3, #160	@ 0xa0
 80079fc:	05db      	lsls	r3, r3, #23
 80079fe:	0011      	movs	r1, r2
 8007a00:	0018      	movs	r0, r3
 8007a02:	f001 fd57 	bl	80094b4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8007a06:	e027      	b.n	8007a58 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	4a15      	ldr	r2, [pc, #84]	@ (8007a64 <HAL_TIM_MspPostInit+0xc8>)
 8007a0e:	4293      	cmp	r3, r2
 8007a10:	d122      	bne.n	8007a58 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a12:	4b13      	ldr	r3, [pc, #76]	@ (8007a60 <HAL_TIM_MspPostInit+0xc4>)
 8007a14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a16:	4b12      	ldr	r3, [pc, #72]	@ (8007a60 <HAL_TIM_MspPostInit+0xc4>)
 8007a18:	2104      	movs	r1, #4
 8007a1a:	430a      	orrs	r2, r1
 8007a1c:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007a1e:	4b10      	ldr	r3, [pc, #64]	@ (8007a60 <HAL_TIM_MspPostInit+0xc4>)
 8007a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a22:	2204      	movs	r2, #4
 8007a24:	4013      	ands	r3, r2
 8007a26:	60fb      	str	r3, [r7, #12]
 8007a28:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8007a2a:	2114      	movs	r1, #20
 8007a2c:	187b      	adds	r3, r7, r1
 8007a2e:	22e0      	movs	r2, #224	@ 0xe0
 8007a30:	0052      	lsls	r2, r2, #1
 8007a32:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007a34:	187b      	adds	r3, r7, r1
 8007a36:	2202      	movs	r2, #2
 8007a38:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a3a:	187b      	adds	r3, r7, r1
 8007a3c:	2200      	movs	r2, #0
 8007a3e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a40:	187b      	adds	r3, r7, r1
 8007a42:	2200      	movs	r2, #0
 8007a44:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007a46:	187b      	adds	r3, r7, r1
 8007a48:	2202      	movs	r2, #2
 8007a4a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a4c:	187b      	adds	r3, r7, r1
 8007a4e:	4a06      	ldr	r2, [pc, #24]	@ (8007a68 <HAL_TIM_MspPostInit+0xcc>)
 8007a50:	0019      	movs	r1, r3
 8007a52:	0010      	movs	r0, r2
 8007a54:	f001 fd2e 	bl	80094b4 <HAL_GPIO_Init>
}
 8007a58:	46c0      	nop			@ (mov r8, r8)
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	b00b      	add	sp, #44	@ 0x2c
 8007a5e:	bd90      	pop	{r4, r7, pc}
 8007a60:	40021000 	.word	0x40021000
 8007a64:	40000400 	.word	0x40000400
 8007a68:	50000800 	.word	0x50000800

08007a6c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007a6c:	b580      	push	{r7, lr}
 8007a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8007a70:	4b16      	ldr	r3, [pc, #88]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007a72:	4a17      	ldr	r2, [pc, #92]	@ (8007ad0 <MX_USART1_UART_Init+0x64>)
 8007a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007a76:	4b15      	ldr	r3, [pc, #84]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007a78:	22e1      	movs	r2, #225	@ 0xe1
 8007a7a:	0252      	lsls	r2, r2, #9
 8007a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8007a7e:	4b13      	ldr	r3, [pc, #76]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007a80:	2200      	movs	r2, #0
 8007a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007a84:	4b11      	ldr	r3, [pc, #68]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007a8a:	4b10      	ldr	r3, [pc, #64]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8007a90:	4b0e      	ldr	r3, [pc, #56]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007a92:	220c      	movs	r2, #12
 8007a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007a96:	4b0d      	ldr	r3, [pc, #52]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007a9c:	4b0b      	ldr	r3, [pc, #44]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007aa2:	4b0a      	ldr	r3, [pc, #40]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007aa4:	2200      	movs	r2, #0
 8007aa6:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8007aa8:	4b08      	ldr	r3, [pc, #32]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007aaa:	2208      	movs	r2, #8
 8007aac:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 8007aae:	4b07      	ldr	r3, [pc, #28]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007ab0:	2280      	movs	r2, #128	@ 0x80
 8007ab2:	0212      	lsls	r2, r2, #8
 8007ab4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8007ab6:	4b05      	ldr	r3, [pc, #20]	@ (8007acc <MX_USART1_UART_Init+0x60>)
 8007ab8:	0018      	movs	r0, r3
 8007aba:	f005 feef 	bl	800d89c <HAL_UART_Init>
 8007abe:	1e03      	subs	r3, r0, #0
 8007ac0:	d001      	beq.n	8007ac6 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 8007ac2:	f7fd fcf9 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007ac6:	46c0      	nop			@ (mov r8, r8)
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	200010bc 	.word	0x200010bc
 8007ad0:	40013800 	.word	0x40013800

08007ad4 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8007ad4:	b580      	push	{r7, lr}
 8007ad6:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8007ad8:	4b14      	ldr	r3, [pc, #80]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007ada:	4a15      	ldr	r2, [pc, #84]	@ (8007b30 <MX_USART4_UART_Init+0x5c>)
 8007adc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8007ade:	4b13      	ldr	r3, [pc, #76]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007ae0:	22e1      	movs	r2, #225	@ 0xe1
 8007ae2:	0252      	lsls	r2, r2, #9
 8007ae4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8007ae6:	4b11      	ldr	r3, [pc, #68]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007ae8:	2200      	movs	r2, #0
 8007aea:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8007aec:	4b0f      	ldr	r3, [pc, #60]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8007af2:	4b0e      	ldr	r3, [pc, #56]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007af4:	2200      	movs	r2, #0
 8007af6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8007af8:	4b0c      	ldr	r3, [pc, #48]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007afa:	220c      	movs	r2, #12
 8007afc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007afe:	4b0b      	ldr	r3, [pc, #44]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007b00:	2200      	movs	r2, #0
 8007b02:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8007b04:	4b09      	ldr	r3, [pc, #36]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007b06:	2200      	movs	r2, #0
 8007b08:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8007b0a:	4b08      	ldr	r3, [pc, #32]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8007b10:	4b06      	ldr	r3, [pc, #24]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007b12:	2200      	movs	r2, #0
 8007b14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007b16:	4b05      	ldr	r3, [pc, #20]	@ (8007b2c <MX_USART4_UART_Init+0x58>)
 8007b18:	0018      	movs	r0, r3
 8007b1a:	f005 febf 	bl	800d89c <HAL_UART_Init>
 8007b1e:	1e03      	subs	r3, r0, #0
 8007b20:	d001      	beq.n	8007b26 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8007b22:	f7fd fcc9 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007b26:	46c0      	nop			@ (mov r8, r8)
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	20001174 	.word	0x20001174
 8007b30:	40004c00 	.word	0x40004c00

08007b34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007b34:	b590      	push	{r4, r7, lr}
 8007b36:	b08b      	sub	sp, #44	@ 0x2c
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007b3c:	2414      	movs	r4, #20
 8007b3e:	193b      	adds	r3, r7, r4
 8007b40:	0018      	movs	r0, r3
 8007b42:	2314      	movs	r3, #20
 8007b44:	001a      	movs	r2, r3
 8007b46:	2100      	movs	r1, #0
 8007b48:	f008 f960 	bl	800fe0c <memset>
  if(uartHandle->Instance==USART1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	4a6f      	ldr	r2, [pc, #444]	@ (8007d10 <HAL_UART_MspInit+0x1dc>)
 8007b52:	4293      	cmp	r3, r2
 8007b54:	d12b      	bne.n	8007bae <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007b56:	4b6f      	ldr	r3, [pc, #444]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007b58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007b5a:	4b6e      	ldr	r3, [pc, #440]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007b5c:	2180      	movs	r1, #128	@ 0x80
 8007b5e:	01c9      	lsls	r1, r1, #7
 8007b60:	430a      	orrs	r2, r1
 8007b62:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b64:	4b6b      	ldr	r3, [pc, #428]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007b66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007b68:	4b6a      	ldr	r3, [pc, #424]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007b6a:	2101      	movs	r1, #1
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007b70:	4b68      	ldr	r3, [pc, #416]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007b72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b74:	2201      	movs	r2, #1
 8007b76:	4013      	ands	r3, r2
 8007b78:	613b      	str	r3, [r7, #16]
 8007b7a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007b7c:	193b      	adds	r3, r7, r4
 8007b7e:	22c0      	movs	r2, #192	@ 0xc0
 8007b80:	00d2      	lsls	r2, r2, #3
 8007b82:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b84:	0021      	movs	r1, r4
 8007b86:	187b      	adds	r3, r7, r1
 8007b88:	2202      	movs	r2, #2
 8007b8a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b8c:	187b      	adds	r3, r7, r1
 8007b8e:	2200      	movs	r2, #0
 8007b90:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b92:	187b      	adds	r3, r7, r1
 8007b94:	2203      	movs	r2, #3
 8007b96:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007b98:	187b      	adds	r3, r7, r1
 8007b9a:	2204      	movs	r2, #4
 8007b9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b9e:	187a      	adds	r2, r7, r1
 8007ba0:	23a0      	movs	r3, #160	@ 0xa0
 8007ba2:	05db      	lsls	r3, r3, #23
 8007ba4:	0011      	movs	r1, r2
 8007ba6:	0018      	movs	r0, r3
 8007ba8:	f001 fc84 	bl	80094b4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8007bac:	e0ac      	b.n	8007d08 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	4a59      	ldr	r2, [pc, #356]	@ (8007d18 <HAL_UART_MspInit+0x1e4>)
 8007bb4:	4293      	cmp	r3, r2
 8007bb6:	d000      	beq.n	8007bba <HAL_UART_MspInit+0x86>
 8007bb8:	e0a6      	b.n	8007d08 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8007bba:	4b56      	ldr	r3, [pc, #344]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007bbc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007bbe:	4b55      	ldr	r3, [pc, #340]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007bc0:	2180      	movs	r1, #128	@ 0x80
 8007bc2:	0309      	lsls	r1, r1, #12
 8007bc4:	430a      	orrs	r2, r1
 8007bc6:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007bc8:	4b52      	ldr	r3, [pc, #328]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007bca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bcc:	4b51      	ldr	r3, [pc, #324]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007bce:	2101      	movs	r1, #1
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007bd4:	4b4f      	ldr	r3, [pc, #316]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bd8:	2201      	movs	r2, #1
 8007bda:	4013      	ands	r3, r2
 8007bdc:	60fb      	str	r3, [r7, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007be0:	4b4c      	ldr	r3, [pc, #304]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007be2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007be4:	4b4b      	ldr	r3, [pc, #300]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007be6:	2104      	movs	r1, #4
 8007be8:	430a      	orrs	r2, r1
 8007bea:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007bec:	4b49      	ldr	r3, [pc, #292]	@ (8007d14 <HAL_UART_MspInit+0x1e0>)
 8007bee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bf0:	2204      	movs	r2, #4
 8007bf2:	4013      	ands	r3, r2
 8007bf4:	60bb      	str	r3, [r7, #8]
 8007bf6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007bf8:	2414      	movs	r4, #20
 8007bfa:	193b      	adds	r3, r7, r4
 8007bfc:	2202      	movs	r2, #2
 8007bfe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c00:	193b      	adds	r3, r7, r4
 8007c02:	2202      	movs	r2, #2
 8007c04:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c06:	193b      	adds	r3, r7, r4
 8007c08:	2200      	movs	r2, #0
 8007c0a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c0c:	193b      	adds	r3, r7, r4
 8007c0e:	2203      	movs	r2, #3
 8007c10:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8007c12:	193b      	adds	r3, r7, r4
 8007c14:	2206      	movs	r2, #6
 8007c16:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007c18:	193a      	adds	r2, r7, r4
 8007c1a:	23a0      	movs	r3, #160	@ 0xa0
 8007c1c:	05db      	lsls	r3, r3, #23
 8007c1e:	0011      	movs	r1, r2
 8007c20:	0018      	movs	r0, r3
 8007c22:	f001 fc47 	bl	80094b4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007c26:	0021      	movs	r1, r4
 8007c28:	187b      	adds	r3, r7, r1
 8007c2a:	2280      	movs	r2, #128	@ 0x80
 8007c2c:	00d2      	lsls	r2, r2, #3
 8007c2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007c30:	187b      	adds	r3, r7, r1
 8007c32:	2202      	movs	r2, #2
 8007c34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007c36:	187b      	adds	r3, r7, r1
 8007c38:	2200      	movs	r2, #0
 8007c3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007c3c:	187b      	adds	r3, r7, r1
 8007c3e:	2203      	movs	r2, #3
 8007c40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8007c42:	187b      	adds	r3, r7, r1
 8007c44:	2206      	movs	r2, #6
 8007c46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007c48:	187b      	adds	r3, r7, r1
 8007c4a:	4a34      	ldr	r2, [pc, #208]	@ (8007d1c <HAL_UART_MspInit+0x1e8>)
 8007c4c:	0019      	movs	r1, r3
 8007c4e:	0010      	movs	r0, r2
 8007c50:	f001 fc30 	bl	80094b4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8007c54:	4b32      	ldr	r3, [pc, #200]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c56:	4a33      	ldr	r2, [pc, #204]	@ (8007d24 <HAL_UART_MspInit+0x1f0>)
 8007c58:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8007c5a:	4b31      	ldr	r3, [pc, #196]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c5c:	220c      	movs	r2, #12
 8007c5e:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8007c60:	4b2f      	ldr	r3, [pc, #188]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c62:	2200      	movs	r2, #0
 8007c64:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007c66:	4b2e      	ldr	r3, [pc, #184]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c68:	2200      	movs	r2, #0
 8007c6a:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c6e:	2280      	movs	r2, #128	@ 0x80
 8007c70:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007c72:	4b2b      	ldr	r3, [pc, #172]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007c78:	4b29      	ldr	r3, [pc, #164]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 8007c7e:	4b28      	ldr	r3, [pc, #160]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c80:	2220      	movs	r2, #32
 8007c82:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007c84:	4b26      	ldr	r3, [pc, #152]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c86:	2200      	movs	r2, #0
 8007c88:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8007c8a:	4b25      	ldr	r3, [pc, #148]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c8c:	0018      	movs	r0, r3
 8007c8e:	f001 f965 	bl	8008f5c <HAL_DMA_Init>
 8007c92:	1e03      	subs	r3, r0, #0
 8007c94:	d001      	beq.n	8007c9a <HAL_UART_MspInit+0x166>
      Error_Handler();
 8007c96:	f7fd fc0f 	bl	80054b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	4a20      	ldr	r2, [pc, #128]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007c9e:	675a      	str	r2, [r3, #116]	@ 0x74
 8007ca0:	4b1f      	ldr	r3, [pc, #124]	@ (8007d20 <HAL_UART_MspInit+0x1ec>)
 8007ca2:	687a      	ldr	r2, [r7, #4]
 8007ca4:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8007ca6:	4b20      	ldr	r3, [pc, #128]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007ca8:	4a20      	ldr	r2, [pc, #128]	@ (8007d2c <HAL_UART_MspInit+0x1f8>)
 8007caa:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8007cac:	4b1e      	ldr	r3, [pc, #120]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cae:	220c      	movs	r2, #12
 8007cb0:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8007cb2:	4b1d      	ldr	r3, [pc, #116]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cb4:	2210      	movs	r2, #16
 8007cb6:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007cb8:	4b1b      	ldr	r3, [pc, #108]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8007cbe:	4b1a      	ldr	r3, [pc, #104]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cc0:	2280      	movs	r2, #128	@ 0x80
 8007cc2:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8007cc4:	4b18      	ldr	r3, [pc, #96]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cc6:	2200      	movs	r2, #0
 8007cc8:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007cca:	4b17      	ldr	r3, [pc, #92]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007ccc:	2200      	movs	r2, #0
 8007cce:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8007cd0:	4b15      	ldr	r3, [pc, #84]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8007cd6:	4b14      	ldr	r3, [pc, #80]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cd8:	2200      	movs	r2, #0
 8007cda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8007cdc:	4b12      	ldr	r3, [pc, #72]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cde:	0018      	movs	r0, r3
 8007ce0:	f001 f93c 	bl	8008f5c <HAL_DMA_Init>
 8007ce4:	1e03      	subs	r3, r0, #0
 8007ce6:	d001      	beq.n	8007cec <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8007ce8:	f7fd fbe6 	bl	80054b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a0e      	ldr	r2, [pc, #56]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cf0:	671a      	str	r2, [r3, #112]	@ 0x70
 8007cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007d28 <HAL_UART_MspInit+0x1f4>)
 8007cf4:	687a      	ldr	r2, [r7, #4]
 8007cf6:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	2100      	movs	r1, #0
 8007cfc:	200e      	movs	r0, #14
 8007cfe:	f001 f8fb 	bl	8008ef8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8007d02:	200e      	movs	r0, #14
 8007d04:	f001 f90d 	bl	8008f22 <HAL_NVIC_EnableIRQ>
}
 8007d08:	46c0      	nop			@ (mov r8, r8)
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	b00b      	add	sp, #44	@ 0x2c
 8007d0e:	bd90      	pop	{r4, r7, pc}
 8007d10:	40013800 	.word	0x40013800
 8007d14:	40021000 	.word	0x40021000
 8007d18:	40004c00 	.word	0x40004c00
 8007d1c:	50000800 	.word	0x50000800
 8007d20:	2000122c 	.word	0x2000122c
 8007d24:	4002006c 	.word	0x4002006c
 8007d28:	20001274 	.word	0x20001274
 8007d2c:	40020080 	.word	0x40020080

08007d30 <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8007d30:	b580      	push	{r7, lr}
 8007d32:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007d34:	4b0f      	ldr	r3, [pc, #60]	@ (8007d74 <MX_USB_PCD_Init+0x44>)
 8007d36:	4a10      	ldr	r2, [pc, #64]	@ (8007d78 <MX_USB_PCD_Init+0x48>)
 8007d38:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d74 <MX_USB_PCD_Init+0x44>)
 8007d3c:	2208      	movs	r2, #8
 8007d3e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007d40:	4b0c      	ldr	r3, [pc, #48]	@ (8007d74 <MX_USB_PCD_Init+0x44>)
 8007d42:	2202      	movs	r2, #2
 8007d44:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d46:	4b0b      	ldr	r3, [pc, #44]	@ (8007d74 <MX_USB_PCD_Init+0x44>)
 8007d48:	2202      	movs	r2, #2
 8007d4a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007d4c:	4b09      	ldr	r3, [pc, #36]	@ (8007d74 <MX_USB_PCD_Init+0x44>)
 8007d4e:	2200      	movs	r2, #0
 8007d50:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007d52:	4b08      	ldr	r3, [pc, #32]	@ (8007d74 <MX_USB_PCD_Init+0x44>)
 8007d54:	2200      	movs	r2, #0
 8007d56:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007d58:	4b06      	ldr	r3, [pc, #24]	@ (8007d74 <MX_USB_PCD_Init+0x44>)
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007d5e:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <MX_USB_PCD_Init+0x44>)
 8007d60:	0018      	movs	r0, r3
 8007d62:	f004 f983 	bl	800c06c <HAL_PCD_Init>
 8007d66:	1e03      	subs	r3, r0, #0
 8007d68:	d001      	beq.n	8007d6e <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8007d6a:	f7fd fba5 	bl	80054b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8007d6e:	46c0      	nop			@ (mov r8, r8)
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	200012bc 	.word	0x200012bc
 8007d78:	40005c00 	.word	0x40005c00

08007d7c <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	4a06      	ldr	r2, [pc, #24]	@ (8007da4 <HAL_PCD_MspInit+0x28>)
 8007d8a:	4293      	cmp	r3, r2
 8007d8c:	d106      	bne.n	8007d9c <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007d8e:	4b06      	ldr	r3, [pc, #24]	@ (8007da8 <HAL_PCD_MspInit+0x2c>)
 8007d90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007d92:	4b05      	ldr	r3, [pc, #20]	@ (8007da8 <HAL_PCD_MspInit+0x2c>)
 8007d94:	2180      	movs	r1, #128	@ 0x80
 8007d96:	0409      	lsls	r1, r1, #16
 8007d98:	430a      	orrs	r2, r1
 8007d9a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007d9c:	46c0      	nop			@ (mov r8, r8)
 8007d9e:	46bd      	mov	sp, r7
 8007da0:	b002      	add	sp, #8
 8007da2:	bd80      	pop	{r7, pc}
 8007da4:	40005c00 	.word	0x40005c00
 8007da8:	40021000 	.word	0x40021000

08007dac <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b086      	sub	sp, #24
 8007db0:	af00      	add	r7, sp, #0
 8007db2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8007db4:	f000 fc48 	bl	8008648 <HAL_GetTick>
 8007db8:	0003      	movs	r3, r0
 8007dba:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8007dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8007e30 <TimestampIsReached+0x84>)
 8007dbe:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	429a      	cmp	r2, r3
 8007dc6:	d307      	bcc.n	8007dd8 <TimestampIsReached+0x2c>
 8007dc8:	697a      	ldr	r2, [r7, #20]
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	1ad3      	subs	r3, r2, r3
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	429a      	cmp	r2, r3
 8007dd2:	d901      	bls.n	8007dd8 <TimestampIsReached+0x2c>
 8007dd4:	2201      	movs	r2, #1
 8007dd6:	e000      	b.n	8007dda <TimestampIsReached+0x2e>
 8007dd8:	2200      	movs	r2, #0
 8007dda:	230f      	movs	r3, #15
 8007ddc:	18fb      	adds	r3, r7, r3
 8007dde:	701a      	strb	r2, [r3, #0]
 8007de0:	781a      	ldrb	r2, [r3, #0]
 8007de2:	2101      	movs	r1, #1
 8007de4:	400a      	ands	r2, r1
 8007de6:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8007de8:	697a      	ldr	r2, [r7, #20]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	429a      	cmp	r2, r3
 8007dee:	d207      	bcs.n	8007e00 <TimestampIsReached+0x54>
 8007df0:	687a      	ldr	r2, [r7, #4]
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	1ad3      	subs	r3, r2, r3
 8007df6:	693a      	ldr	r2, [r7, #16]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d201      	bcs.n	8007e00 <TimestampIsReached+0x54>
 8007dfc:	2201      	movs	r2, #1
 8007dfe:	e000      	b.n	8007e02 <TimestampIsReached+0x56>
 8007e00:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8007e02:	200e      	movs	r0, #14
 8007e04:	183b      	adds	r3, r7, r0
 8007e06:	701a      	strb	r2, [r3, #0]
 8007e08:	781a      	ldrb	r2, [r3, #0]
 8007e0a:	2101      	movs	r1, #1
 8007e0c:	400a      	ands	r2, r1
 8007e0e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8007e10:	230f      	movs	r3, #15
 8007e12:	18fb      	adds	r3, r7, r3
 8007e14:	781b      	ldrb	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d103      	bne.n	8007e22 <TimestampIsReached+0x76>
 8007e1a:	183b      	adds	r3, r7, r0
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d001      	beq.n	8007e26 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8007e22:	2301      	movs	r3, #1
 8007e24:	e000      	b.n	8007e28 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8007e26:	2300      	movs	r3, #0
}
 8007e28:	0018      	movs	r0, r3
 8007e2a:	46bd      	mov	sp, r7
 8007e2c:	b006      	add	sp, #24
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	7fffffff 	.word	0x7fffffff

08007e34 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8007e34:	b580      	push	{r7, lr}
 8007e36:	b082      	sub	sp, #8
 8007e38:	af00      	add	r7, sp, #0
 8007e3a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8007e3c:	f000 fc04 	bl	8008648 <HAL_GetTick>
 8007e40:	0002      	movs	r2, r0
 8007e42:	4904      	ldr	r1, [pc, #16]	@ (8007e54 <AddTimestamp+0x20>)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	0018      	movs	r0, r3
 8007e48:	f007 ff3c 	bl	800fcc4 <siprintf>
}
 8007e4c:	46c0      	nop			@ (mov r8, r8)
 8007e4e:	46bd      	mov	sp, r7
 8007e50:	b002      	add	sp, #8
 8007e52:	bd80      	pop	{r7, pc}
 8007e54:	08012d28 	.word	0x08012d28

08007e58 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8007e58:	b40c      	push	{r2, r3}
 8007e5a:	b5b0      	push	{r4, r5, r7, lr}
 8007e5c:	4c2b      	ldr	r4, [pc, #172]	@ (8007f0c <CreateLine+0xb4>)
 8007e5e:	44a5      	add	sp, r4
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	0002      	movs	r2, r0
 8007e64:	6039      	str	r1, [r7, #0]
 8007e66:	4b2a      	ldr	r3, [pc, #168]	@ (8007f10 <CreateLine+0xb8>)
 8007e68:	2182      	movs	r1, #130	@ 0x82
 8007e6a:	00c9      	lsls	r1, r1, #3
 8007e6c:	185b      	adds	r3, r3, r1
 8007e6e:	19db      	adds	r3, r3, r7
 8007e70:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8007e72:	4b28      	ldr	r3, [pc, #160]	@ (8007f14 <CreateLine+0xbc>)
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	4a26      	ldr	r2, [pc, #152]	@ (8007f10 <CreateLine+0xb8>)
 8007e78:	1852      	adds	r2, r2, r1
 8007e7a:	19d2      	adds	r2, r2, r7
 8007e7c:	7812      	ldrb	r2, [r2, #0]
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d83b      	bhi.n	8007efa <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8007e82:	683a      	ldr	r2, [r7, #0]
 8007e84:	4924      	ldr	r1, [pc, #144]	@ (8007f18 <CreateLine+0xc0>)
 8007e86:	240c      	movs	r4, #12
 8007e88:	193b      	adds	r3, r7, r4
 8007e8a:	0018      	movs	r0, r3
 8007e8c:	f007 ff1a 	bl	800fcc4 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8007e90:	4b20      	ldr	r3, [pc, #128]	@ (8007f14 <CreateLine+0xbc>)
 8007e92:	781b      	ldrb	r3, [r3, #0]
 8007e94:	2b01      	cmp	r3, #1
 8007e96:	d909      	bls.n	8007eac <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8007e98:	193b      	adds	r3, r7, r4
 8007e9a:	0018      	movs	r0, r3
 8007e9c:	f7f8 f934 	bl	8000108 <strlen>
 8007ea0:	0002      	movs	r2, r0
 8007ea2:	193b      	adds	r3, r7, r4
 8007ea4:	189b      	adds	r3, r3, r2
 8007ea6:	0018      	movs	r0, r3
 8007ea8:	f7ff ffc4 	bl	8007e34 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8007eac:	240c      	movs	r4, #12
 8007eae:	193b      	adds	r3, r7, r4
 8007eb0:	0018      	movs	r0, r3
 8007eb2:	f7f8 f929 	bl	8000108 <strlen>
 8007eb6:	0003      	movs	r3, r0
 8007eb8:	4918      	ldr	r1, [pc, #96]	@ (8007f1c <CreateLine+0xc4>)
 8007eba:	187a      	adds	r2, r7, r1
 8007ebc:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8007ebe:	4b18      	ldr	r3, [pc, #96]	@ (8007f20 <CreateLine+0xc8>)
 8007ec0:	2508      	movs	r5, #8
 8007ec2:	195b      	adds	r3, r3, r5
 8007ec4:	19db      	adds	r3, r3, r7
 8007ec6:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8007ec8:	193a      	adds	r2, r7, r4
 8007eca:	187b      	adds	r3, r7, r1
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	18d0      	adds	r0, r2, r3
 8007ed0:	187b      	adds	r3, r7, r1
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	2280      	movs	r2, #128	@ 0x80
 8007ed6:	00d2      	lsls	r2, r2, #3
 8007ed8:	1ad3      	subs	r3, r2, r3
 8007eda:	0019      	movs	r1, r3
 8007edc:	68bb      	ldr	r3, [r7, #8]
 8007ede:	2283      	movs	r2, #131	@ 0x83
 8007ee0:	00d2      	lsls	r2, r2, #3
 8007ee2:	1952      	adds	r2, r2, r5
 8007ee4:	19d2      	adds	r2, r2, r7
 8007ee6:	6812      	ldr	r2, [r2, #0]
 8007ee8:	f007 ff84 	bl	800fdf4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8007eec:	193a      	adds	r2, r7, r4
 8007eee:	4b0d      	ldr	r3, [pc, #52]	@ (8007f24 <CreateLine+0xcc>)
 8007ef0:	0011      	movs	r1, r2
 8007ef2:	0018      	movs	r0, r3
 8007ef4:	f007 fed6 	bl	800fca4 <iprintf>
 8007ef8:	e000      	b.n	8007efc <CreateLine+0xa4>
    return;
 8007efa:	46c0      	nop			@ (mov r8, r8)
}
 8007efc:	46bd      	mov	sp, r7
 8007efe:	2382      	movs	r3, #130	@ 0x82
 8007f00:	00db      	lsls	r3, r3, #3
 8007f02:	449d      	add	sp, r3
 8007f04:	bcb0      	pop	{r4, r5, r7}
 8007f06:	bc08      	pop	{r3}
 8007f08:	b002      	add	sp, #8
 8007f0a:	4718      	bx	r3
 8007f0c:	fffffbf0 	.word	0xfffffbf0
 8007f10:	fffffbf7 	.word	0xfffffbf7
 8007f14:	20000134 	.word	0x20000134
 8007f18:	08012d34 	.word	0x08012d34
 8007f1c:	0000040c 	.word	0x0000040c
 8007f20:	0000041c 	.word	0x0000041c
 8007f24:	08012d38 	.word	0x08012d38

08007f28 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b084      	sub	sp, #16
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	60f8      	str	r0, [r7, #12]
 8007f30:	60b9      	str	r1, [r7, #8]
 8007f32:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	b29a      	uxth	r2, r3
 8007f38:	68b9      	ldr	r1, [r7, #8]
 8007f3a:	4804      	ldr	r0, [pc, #16]	@ (8007f4c <_write+0x24>)
 8007f3c:	2364      	movs	r3, #100	@ 0x64
 8007f3e:	f005 fd13 	bl	800d968 <HAL_UART_Transmit>
  return count;
 8007f42:	687b      	ldr	r3, [r7, #4]
}
 8007f44:	0018      	movs	r0, r3
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b004      	add	sp, #16
 8007f4a:	bd80      	pop	{r7, pc}
 8007f4c:	200010bc 	.word	0x200010bc

08007f50 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b082      	sub	sp, #8
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	0002      	movs	r2, r0
 8007f58:	1dfb      	adds	r3, r7, #7
 8007f5a:	701a      	strb	r2, [r3, #0]
 8007f5c:	4b03      	ldr	r3, [pc, #12]	@ (8007f6c <SetVerboseLevel+0x1c>)
 8007f5e:	1dfa      	adds	r2, r7, #7
 8007f60:	7812      	ldrb	r2, [r2, #0]
 8007f62:	701a      	strb	r2, [r3, #0]
 8007f64:	46c0      	nop			@ (mov r8, r8)
 8007f66:	46bd      	mov	sp, r7
 8007f68:	b002      	add	sp, #8
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	20000134 	.word	0x20000134

08007f70 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8007f70:	b580      	push	{r7, lr}
 8007f72:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007f74:	f000 fb68 	bl	8008648 <HAL_GetTick>
 8007f78:	0003      	movs	r3, r0
}
 8007f7a:	0018      	movs	r0, r3
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b082      	sub	sp, #8
 8007f84:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8007f86:	4a0f      	ldr	r2, [pc, #60]	@ (8007fc4 <BinaryReleaseInfo+0x44>)
 8007f88:	4b0f      	ldr	r3, [pc, #60]	@ (8007fc8 <BinaryReleaseInfo+0x48>)
 8007f8a:	0019      	movs	r1, r3
 8007f8c:	2002      	movs	r0, #2
 8007f8e:	f7ff ff63 	bl	8007e58 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8007f92:	480e      	ldr	r0, [pc, #56]	@ (8007fcc <BinaryReleaseInfo+0x4c>)
 8007f94:	4a0e      	ldr	r2, [pc, #56]	@ (8007fd0 <BinaryReleaseInfo+0x50>)
 8007f96:	490c      	ldr	r1, [pc, #48]	@ (8007fc8 <BinaryReleaseInfo+0x48>)
 8007f98:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd4 <BinaryReleaseInfo+0x54>)
 8007f9a:	9300      	str	r3, [sp, #0]
 8007f9c:	0003      	movs	r3, r0
 8007f9e:	2002      	movs	r0, #2
 8007fa0:	f7ff ff5a 	bl	8007e58 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8007fa4:	4a0c      	ldr	r2, [pc, #48]	@ (8007fd8 <BinaryReleaseInfo+0x58>)
 8007fa6:	4b08      	ldr	r3, [pc, #32]	@ (8007fc8 <BinaryReleaseInfo+0x48>)
 8007fa8:	0019      	movs	r1, r3
 8007faa:	2002      	movs	r0, #2
 8007fac:	f7ff ff54 	bl	8007e58 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8007fb0:	4b0a      	ldr	r3, [pc, #40]	@ (8007fdc <BinaryReleaseInfo+0x5c>)
 8007fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8007fe0 <BinaryReleaseInfo+0x60>)
 8007fb4:	4904      	ldr	r1, [pc, #16]	@ (8007fc8 <BinaryReleaseInfo+0x48>)
 8007fb6:	2002      	movs	r0, #2
 8007fb8:	f7ff ff4e 	bl	8007e58 <CreateLine>
}
 8007fbc:	46c0      	nop			@ (mov r8, r8)
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	bd80      	pop	{r7, pc}
 8007fc2:	46c0      	nop			@ (mov r8, r8)
 8007fc4:	08012d40 	.word	0x08012d40
 8007fc8:	08012d6c 	.word	0x08012d6c
 8007fcc:	08012d70 	.word	0x08012d70
 8007fd0:	08012d7c 	.word	0x08012d7c
 8007fd4:	08012d90 	.word	0x08012d90
 8007fd8:	08012d9c 	.word	0x08012d9c
 8007fdc:	08012da8 	.word	0x08012da8
 8007fe0:	08012db0 	.word	0x08012db0

08007fe4 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007fe4:	b590      	push	{r4, r7, lr}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6039      	str	r1, [r7, #0]
 8007fec:	0011      	movs	r1, r2
 8007fee:	1dfb      	adds	r3, r7, #7
 8007ff0:	1c02      	adds	r2, r0, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
 8007ff4:	1dbb      	adds	r3, r7, #6
 8007ff6:	1c0a      	adds	r2, r1, #0
 8007ff8:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8007ffa:	4b08      	ldr	r3, [pc, #32]	@ (800801c <ReadRegister+0x38>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d008      	beq.n	8008014 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008002:	4b06      	ldr	r3, [pc, #24]	@ (800801c <ReadRegister+0x38>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	1dba      	adds	r2, r7, #6
 8008008:	7814      	ldrb	r4, [r2, #0]
 800800a:	6839      	ldr	r1, [r7, #0]
 800800c:	1dfa      	adds	r2, r7, #7
 800800e:	7810      	ldrb	r0, [r2, #0]
 8008010:	0022      	movs	r2, r4
 8008012:	4798      	blx	r3
	}
}
 8008014:	46c0      	nop			@ (mov r8, r8)
 8008016:	46bd      	mov	sp, r7
 8008018:	b003      	add	sp, #12
 800801a:	bd90      	pop	{r4, r7, pc}
 800801c:	200015b0 	.word	0x200015b0

08008020 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008020:	b590      	push	{r4, r7, lr}
 8008022:	b083      	sub	sp, #12
 8008024:	af00      	add	r7, sp, #0
 8008026:	6039      	str	r1, [r7, #0]
 8008028:	0011      	movs	r1, r2
 800802a:	1dfb      	adds	r3, r7, #7
 800802c:	1c02      	adds	r2, r0, #0
 800802e:	701a      	strb	r2, [r3, #0]
 8008030:	1dbb      	adds	r3, r7, #6
 8008032:	1c0a      	adds	r2, r1, #0
 8008034:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008036:	4b08      	ldr	r3, [pc, #32]	@ (8008058 <WriteRegister+0x38>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d008      	beq.n	8008050 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800803e:	4b06      	ldr	r3, [pc, #24]	@ (8008058 <WriteRegister+0x38>)
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	1dba      	adds	r2, r7, #6
 8008044:	7814      	ldrb	r4, [r2, #0]
 8008046:	6839      	ldr	r1, [r7, #0]
 8008048:	1dfa      	adds	r2, r7, #7
 800804a:	7810      	ldrb	r0, [r2, #0]
 800804c:	0022      	movs	r2, r4
 800804e:	4798      	blx	r3
  }
}
 8008050:	46c0      	nop			@ (mov r8, r8)
 8008052:	46bd      	mov	sp, r7
 8008054:	b003      	add	sp, #12
 8008056:	bd90      	pop	{r4, r7, pc}
 8008058:	200015b4 	.word	0x200015b4

0800805c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800805c:	b580      	push	{r7, lr}
 800805e:	b084      	sub	sp, #16
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
 8008064:	000a      	movs	r2, r1
 8008066:	1cfb      	adds	r3, r7, #3
 8008068:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800806a:	230f      	movs	r3, #15
 800806c:	18fb      	adds	r3, r7, r3
 800806e:	22ff      	movs	r2, #255	@ 0xff
 8008070:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008072:	230e      	movs	r3, #14
 8008074:	18fb      	adds	r3, r7, r3
 8008076:	2200      	movs	r2, #0
 8008078:	701a      	strb	r2, [r3, #0]
 800807a:	e037      	b.n	80080ec <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800807c:	230e      	movs	r3, #14
 800807e:	18fb      	adds	r3, r7, r3
 8008080:	781b      	ldrb	r3, [r3, #0]
 8008082:	687a      	ldr	r2, [r7, #4]
 8008084:	18d3      	adds	r3, r2, r3
 8008086:	7819      	ldrb	r1, [r3, #0]
 8008088:	220f      	movs	r2, #15
 800808a:	18bb      	adds	r3, r7, r2
 800808c:	18ba      	adds	r2, r7, r2
 800808e:	7812      	ldrb	r2, [r2, #0]
 8008090:	404a      	eors	r2, r1
 8008092:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008094:	230d      	movs	r3, #13
 8008096:	18fb      	adds	r3, r7, r3
 8008098:	2200      	movs	r2, #0
 800809a:	701a      	strb	r2, [r3, #0]
 800809c:	e01b      	b.n	80080d6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800809e:	210f      	movs	r1, #15
 80080a0:	187b      	adds	r3, r7, r1
 80080a2:	781b      	ldrb	r3, [r3, #0]
 80080a4:	b25b      	sxtb	r3, r3
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	da09      	bge.n	80080be <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 80080aa:	187b      	adds	r3, r7, r1
 80080ac:	781b      	ldrb	r3, [r3, #0]
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	b25b      	sxtb	r3, r3
 80080b2:	2231      	movs	r2, #49	@ 0x31
 80080b4:	4053      	eors	r3, r2
 80080b6:	b25a      	sxtb	r2, r3
 80080b8:	187b      	adds	r3, r7, r1
 80080ba:	701a      	strb	r2, [r3, #0]
 80080bc:	e005      	b.n	80080ca <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 80080be:	230f      	movs	r3, #15
 80080c0:	18fa      	adds	r2, r7, r3
 80080c2:	18fb      	adds	r3, r7, r3
 80080c4:	781b      	ldrb	r3, [r3, #0]
 80080c6:	18db      	adds	r3, r3, r3
 80080c8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80080ca:	210d      	movs	r1, #13
 80080cc:	187b      	adds	r3, r7, r1
 80080ce:	781a      	ldrb	r2, [r3, #0]
 80080d0:	187b      	adds	r3, r7, r1
 80080d2:	3201      	adds	r2, #1
 80080d4:	701a      	strb	r2, [r3, #0]
 80080d6:	230d      	movs	r3, #13
 80080d8:	18fb      	adds	r3, r7, r3
 80080da:	781b      	ldrb	r3, [r3, #0]
 80080dc:	2b07      	cmp	r3, #7
 80080de:	d9de      	bls.n	800809e <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80080e0:	210e      	movs	r1, #14
 80080e2:	187b      	adds	r3, r7, r1
 80080e4:	781a      	ldrb	r2, [r3, #0]
 80080e6:	187b      	adds	r3, r7, r1
 80080e8:	3201      	adds	r2, #1
 80080ea:	701a      	strb	r2, [r3, #0]
 80080ec:	230e      	movs	r3, #14
 80080ee:	18fa      	adds	r2, r7, r3
 80080f0:	1cfb      	adds	r3, r7, #3
 80080f2:	7812      	ldrb	r2, [r2, #0]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	429a      	cmp	r2, r3
 80080f8:	d3c0      	bcc.n	800807c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 80080fa:	230f      	movs	r3, #15
 80080fc:	18fb      	adds	r3, r7, r3
 80080fe:	781b      	ldrb	r3, [r3, #0]
}
 8008100:	0018      	movs	r0, r3
 8008102:	46bd      	mov	sp, r7
 8008104:	b004      	add	sp, #16
 8008106:	bd80      	pop	{r7, pc}

08008108 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008108:	b580      	push	{r7, lr}
 800810a:	b082      	sub	sp, #8
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
 8008110:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008112:	4b0a      	ldr	r3, [pc, #40]	@ (800813c <HIDS_Init+0x34>)
 8008114:	687a      	ldr	r2, [r7, #4]
 8008116:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008118:	4b09      	ldr	r3, [pc, #36]	@ (8008140 <HIDS_Init+0x38>)
 800811a:	683a      	ldr	r2, [r7, #0]
 800811c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800811e:	4b09      	ldr	r3, [pc, #36]	@ (8008144 <HIDS_Init+0x3c>)
 8008120:	781b      	ldrb	r3, [r3, #0]
 8008122:	0018      	movs	r0, r3
 8008124:	f000 f8d0 	bl	80082c8 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8008128:	4b07      	ldr	r3, [pc, #28]	@ (8008148 <HIDS_Init+0x40>)
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	0018      	movs	r0, r3
 800812e:	f000 f82b 	bl	8008188 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	46bd      	mov	sp, r7
 8008136:	b002      	add	sp, #8
 8008138:	bd80      	pop	{r7, pc}
 800813a:	46c0      	nop			@ (mov r8, r8)
 800813c:	200015b0 	.word	0x200015b0
 8008140:	200015b4 	.word	0x200015b4
 8008144:	20000136 	.word	0x20000136
 8008148:	20000135 	.word	0x20000135

0800814c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800814c:	b580      	push	{r7, lr}
 800814e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008150:	f7ff ff0e 	bl	8007f70 <GetCurrentHalTicks>
 8008154:	0002      	movs	r2, r0
 8008156:	4b08      	ldr	r3, [pc, #32]	@ (8008178 <HIDS_StartMeasurement+0x2c>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	18d2      	adds	r2, r2, r3
 800815c:	4b07      	ldr	r3, [pc, #28]	@ (800817c <HIDS_StartMeasurement+0x30>)
 800815e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008160:	4b07      	ldr	r3, [pc, #28]	@ (8008180 <HIDS_StartMeasurement+0x34>)
 8008162:	2201      	movs	r2, #1
 8008164:	0019      	movs	r1, r3
 8008166:	2044      	movs	r0, #68	@ 0x44
 8008168:	f7ff ff5a 	bl	8008020 <WriteRegister>
  MeasurementDone = false;
 800816c:	4b05      	ldr	r3, [pc, #20]	@ (8008184 <HIDS_StartMeasurement+0x38>)
 800816e:	2200      	movs	r2, #0
 8008170:	701a      	strb	r2, [r3, #0]
}
 8008172:	46c0      	nop			@ (mov r8, r8)
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}
 8008178:	2000013c 	.word	0x2000013c
 800817c:	20000138 	.word	0x20000138
 8008180:	20000136 	.word	0x20000136
 8008184:	200015c6 	.word	0x200015c6

08008188 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008188:	b580      	push	{r7, lr}
 800818a:	b082      	sub	sp, #8
 800818c:	af00      	add	r7, sp, #0
 800818e:	0002      	movs	r2, r0
 8008190:	1dfb      	adds	r3, r7, #7
 8008192:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008194:	4b03      	ldr	r3, [pc, #12]	@ (80081a4 <HIDS_SetHeaterMode+0x1c>)
 8008196:	1dfa      	adds	r2, r7, #7
 8008198:	7812      	ldrb	r2, [r2, #0]
 800819a:	701a      	strb	r2, [r3, #0]
}
 800819c:	46c0      	nop			@ (mov r8, r8)
 800819e:	46bd      	mov	sp, r7
 80081a0:	b002      	add	sp, #8
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	20000135 	.word	0x20000135

080081a8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 80081a8:	b590      	push	{r4, r7, lr}
 80081aa:	b085      	sub	sp, #20
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	781a      	ldrb	r2, [r3, #0]
 80081b4:	210c      	movs	r1, #12
 80081b6:	187b      	adds	r3, r7, r1
 80081b8:	701a      	strb	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	785a      	ldrb	r2, [r3, #1]
 80081be:	187b      	adds	r3, r7, r1
 80081c0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 80081c2:	240f      	movs	r4, #15
 80081c4:	193b      	adds	r3, r7, r4
 80081c6:	687a      	ldr	r2, [r7, #4]
 80081c8:	7892      	ldrb	r2, [r2, #2]
 80081ca:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 80081cc:	187b      	adds	r3, r7, r1
 80081ce:	2102      	movs	r1, #2
 80081d0:	0018      	movs	r0, r3
 80081d2:	f7ff ff43 	bl	800805c <CalculateCRC>
 80081d6:	0003      	movs	r3, r0
 80081d8:	001a      	movs	r2, r3
 80081da:	193b      	adds	r3, r7, r4
 80081dc:	781b      	ldrb	r3, [r3, #0]
 80081de:	4293      	cmp	r3, r2
 80081e0:	d007      	beq.n	80081f2 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80081e2:	4a17      	ldr	r2, [pc, #92]	@ (8008240 <CheckCRC+0x98>)
 80081e4:	4b17      	ldr	r3, [pc, #92]	@ (8008244 <CheckCRC+0x9c>)
 80081e6:	0019      	movs	r1, r3
 80081e8:	2001      	movs	r0, #1
 80081ea:	f7ff fe35 	bl	8007e58 <CreateLine>
		return false;
 80081ee:	2300      	movs	r3, #0
 80081f0:	e021      	b.n	8008236 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	78da      	ldrb	r2, [r3, #3]
 80081f6:	2108      	movs	r1, #8
 80081f8:	187b      	adds	r3, r7, r1
 80081fa:	701a      	strb	r2, [r3, #0]
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	791a      	ldrb	r2, [r3, #4]
 8008200:	187b      	adds	r3, r7, r1
 8008202:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008204:	240e      	movs	r4, #14
 8008206:	193b      	adds	r3, r7, r4
 8008208:	687a      	ldr	r2, [r7, #4]
 800820a:	7952      	ldrb	r2, [r2, #5]
 800820c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800820e:	187b      	adds	r3, r7, r1
 8008210:	2102      	movs	r1, #2
 8008212:	0018      	movs	r0, r3
 8008214:	f7ff ff22 	bl	800805c <CalculateCRC>
 8008218:	0003      	movs	r3, r0
 800821a:	001a      	movs	r2, r3
 800821c:	193b      	adds	r3, r7, r4
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	4293      	cmp	r3, r2
 8008222:	d007      	beq.n	8008234 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008224:	4a08      	ldr	r2, [pc, #32]	@ (8008248 <CheckCRC+0xa0>)
 8008226:	4b07      	ldr	r3, [pc, #28]	@ (8008244 <CheckCRC+0x9c>)
 8008228:	0019      	movs	r1, r3
 800822a:	2001      	movs	r0, #1
 800822c:	f7ff fe14 	bl	8007e58 <CreateLine>
		return false;
 8008230:	2300      	movs	r3, #0
 8008232:	e000      	b.n	8008236 <CheckCRC+0x8e>
	}
	return true;
 8008234:	2301      	movs	r3, #1
}
 8008236:	0018      	movs	r0, r3
 8008238:	46bd      	mov	sp, r7
 800823a:	b005      	add	sp, #20
 800823c:	bd90      	pop	{r4, r7, pc}
 800823e:	46c0      	nop			@ (mov r8, r8)
 8008240:	08012dec 	.word	0x08012dec
 8008244:	08012e14 	.word	0x08012e14
 8008248:	08012e18 	.word	0x08012e18

0800824c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800824c:	b580      	push	{r7, lr}
 800824e:	b084      	sub	sp, #16
 8008250:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008252:	1dbb      	adds	r3, r7, #6
 8008254:	2289      	movs	r2, #137	@ 0x89
 8008256:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8008258:	1dbb      	adds	r3, r7, #6
 800825a:	2201      	movs	r2, #1
 800825c:	0019      	movs	r1, r3
 800825e:	2044      	movs	r0, #68	@ 0x44
 8008260:	f7ff fede 	bl	8008020 <WriteRegister>
	HAL_Delay(30);
 8008264:	201e      	movs	r0, #30
 8008266:	f000 f9f9 	bl	800865c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800826a:	4b14      	ldr	r3, [pc, #80]	@ (80082bc <HIDS_DeviceConnected+0x70>)
 800826c:	2206      	movs	r2, #6
 800826e:	0019      	movs	r1, r3
 8008270:	2044      	movs	r0, #68	@ 0x44
 8008272:	f7ff feb7 	bl	8007fe4 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008276:	1dfb      	adds	r3, r7, #7
 8008278:	2200      	movs	r2, #0
 800827a:	701a      	strb	r2, [r3, #0]
 800827c:	e011      	b.n	80082a2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800827e:	1dfb      	adds	r3, r7, #7
 8008280:	7818      	ldrb	r0, [r3, #0]
 8008282:	1dfb      	adds	r3, r7, #7
 8008284:	781b      	ldrb	r3, [r3, #0]
 8008286:	4a0d      	ldr	r2, [pc, #52]	@ (80082bc <HIDS_DeviceConnected+0x70>)
 8008288:	5cd3      	ldrb	r3, [r2, r3]
 800828a:	4a0d      	ldr	r2, [pc, #52]	@ (80082c0 <HIDS_DeviceConnected+0x74>)
 800828c:	490d      	ldr	r1, [pc, #52]	@ (80082c4 <HIDS_DeviceConnected+0x78>)
 800828e:	9300      	str	r3, [sp, #0]
 8008290:	0003      	movs	r3, r0
 8008292:	2002      	movs	r0, #2
 8008294:	f7ff fde0 	bl	8007e58 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008298:	1dfb      	adds	r3, r7, #7
 800829a:	781a      	ldrb	r2, [r3, #0]
 800829c:	1dfb      	adds	r3, r7, #7
 800829e:	3201      	adds	r2, #1
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	1dfb      	adds	r3, r7, #7
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	2b05      	cmp	r3, #5
 80082a8:	d9e9      	bls.n	800827e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 80082aa:	4b04      	ldr	r3, [pc, #16]	@ (80082bc <HIDS_DeviceConnected+0x70>)
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7ff ff7b 	bl	80081a8 <CheckCRC>
 80082b2:	0003      	movs	r3, r0
}
 80082b4:	0018      	movs	r0, r3
 80082b6:	46bd      	mov	sp, r7
 80082b8:	b002      	add	sp, #8
 80082ba:	bd80      	pop	{r7, pc}
 80082bc:	200015b8 	.word	0x200015b8
 80082c0:	08012e44 	.word	0x08012e44
 80082c4:	08012de8 	.word	0x08012de8

080082c8 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b082      	sub	sp, #8
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	0002      	movs	r2, r0
 80082d0:	1dfb      	adds	r3, r7, #7
 80082d2:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 80082d4:	4b03      	ldr	r3, [pc, #12]	@ (80082e4 <HIDS_SetMeasurementMode+0x1c>)
 80082d6:	1dfa      	adds	r2, r7, #7
 80082d8:	7812      	ldrb	r2, [r2, #0]
 80082da:	701a      	strb	r2, [r3, #0]
}
 80082dc:	46c0      	nop			@ (mov r8, r8)
 80082de:	46bd      	mov	sp, r7
 80082e0:	b002      	add	sp, #8
 80082e2:	bd80      	pop	{r7, pc}
 80082e4:	20000136 	.word	0x20000136

080082e8 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80082e8:	b580      	push	{r7, lr}
 80082ea:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80082ec:	4b04      	ldr	r3, [pc, #16]	@ (8008300 <HIDS_MeasurementReady+0x18>)
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	0018      	movs	r0, r3
 80082f2:	f7ff fd5b 	bl	8007dac <TimestampIsReached>
 80082f6:	0003      	movs	r3, r0
}
 80082f8:	0018      	movs	r0, r3
 80082fa:	46bd      	mov	sp, r7
 80082fc:	bd80      	pop	{r7, pc}
 80082fe:	46c0      	nop			@ (mov r8, r8)
 8008300:	20000138 	.word	0x20000138

08008304 <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008304:	b580      	push	{r7, lr}
 8008306:	b08c      	sub	sp, #48	@ 0x30
 8008308:	af02      	add	r7, sp, #8
 800830a:	6078      	str	r0, [r7, #4]
 800830c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800830e:	4b7a      	ldr	r3, [pc, #488]	@ (80084f8 <HIDS_GetMeasurementValues+0x1f4>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d001      	beq.n	800831a <HIDS_GetMeasurementValues+0x16>
 8008316:	2301      	movs	r3, #1
 8008318:	e0ea      	b.n	80084f0 <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 800831a:	f7ff ffe5 	bl	80082e8 <HIDS_MeasurementReady>
 800831e:	0003      	movs	r3, r0
 8008320:	001a      	movs	r2, r3
 8008322:	2301      	movs	r3, #1
 8008324:	4053      	eors	r3, r2
 8008326:	b2db      	uxtb	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d001      	beq.n	8008330 <HIDS_GetMeasurementValues+0x2c>
 800832c:	2300      	movs	r3, #0
 800832e:	e0df      	b.n	80084f0 <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008330:	4b72      	ldr	r3, [pc, #456]	@ (80084fc <HIDS_GetMeasurementValues+0x1f8>)
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	4b72      	ldr	r3, [pc, #456]	@ (8008500 <HIDS_GetMeasurementValues+0x1fc>)
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	0019      	movs	r1, r3
 800833a:	0010      	movs	r0, r2
 800833c:	f7f7 ff00 	bl	8000140 <__udivsi3>
 8008340:	0003      	movs	r3, r0
 8008342:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008344:	4b6f      	ldr	r3, [pc, #444]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	1c58      	adds	r0, r3, #1
 800834a:	4a6f      	ldr	r2, [pc, #444]	@ (8008508 <HIDS_GetMeasurementValues+0x204>)
 800834c:	496f      	ldr	r1, [pc, #444]	@ (800850c <HIDS_GetMeasurementValues+0x208>)
 800834e:	697b      	ldr	r3, [r7, #20]
 8008350:	9300      	str	r3, [sp, #0]
 8008352:	0003      	movs	r3, r0
 8008354:	2003      	movs	r0, #3
 8008356:	f7ff fd7f 	bl	8007e58 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800835a:	4b6d      	ldr	r3, [pc, #436]	@ (8008510 <HIDS_GetMeasurementValues+0x20c>)
 800835c:	2206      	movs	r2, #6
 800835e:	0019      	movs	r1, r3
 8008360:	2044      	movs	r0, #68	@ 0x44
 8008362:	f7ff fe3f 	bl	8007fe4 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008366:	4b6a      	ldr	r3, [pc, #424]	@ (8008510 <HIDS_GetMeasurementValues+0x20c>)
 8008368:	0018      	movs	r0, r3
 800836a:	f7ff ff1d 	bl	80081a8 <CheckCRC>
 800836e:	0003      	movs	r3, r0
 8008370:	001a      	movs	r2, r3
 8008372:	2301      	movs	r3, #1
 8008374:	4053      	eors	r3, r2
 8008376:	b2db      	uxtb	r3, r3
 8008378:	2b00      	cmp	r3, #0
 800837a:	d011      	beq.n	80083a0 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800837c:	2327      	movs	r3, #39	@ 0x27
 800837e:	18fb      	adds	r3, r7, r3
 8008380:	2200      	movs	r2, #0
 8008382:	701a      	strb	r2, [r3, #0]
 8008384:	e005      	b.n	8008392 <HIDS_GetMeasurementValues+0x8e>
 8008386:	2127      	movs	r1, #39	@ 0x27
 8008388:	187b      	adds	r3, r7, r1
 800838a:	781a      	ldrb	r2, [r3, #0]
 800838c:	187b      	adds	r3, r7, r1
 800838e:	3201      	adds	r2, #1
 8008390:	701a      	strb	r2, [r3, #0]
 8008392:	2327      	movs	r3, #39	@ 0x27
 8008394:	18fb      	adds	r3, r7, r3
 8008396:	781b      	ldrb	r3, [r3, #0]
 8008398:	2b05      	cmp	r3, #5
 800839a:	d9f4      	bls.n	8008386 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800839c:	2300      	movs	r3, #0
 800839e:	e0a7      	b.n	80084f0 <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 80083a0:	4b5b      	ldr	r3, [pc, #364]	@ (8008510 <HIDS_GetMeasurementValues+0x20c>)
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	021b      	lsls	r3, r3, #8
 80083a6:	22af      	movs	r2, #175	@ 0xaf
 80083a8:	4353      	muls	r3, r2
 80083aa:	4a59      	ldr	r2, [pc, #356]	@ (8008510 <HIDS_GetMeasurementValues+0x20c>)
 80083ac:	7852      	ldrb	r2, [r2, #1]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	0018      	movs	r0, r3
 80083b2:	f7fa ff83 	bl	80032bc <__aeabi_i2d>
 80083b6:	2200      	movs	r2, #0
 80083b8:	4b56      	ldr	r3, [pc, #344]	@ (8008514 <HIDS_GetMeasurementValues+0x210>)
 80083ba:	f7f9 fc79 	bl	8001cb0 <__aeabi_ddiv>
 80083be:	0002      	movs	r2, r0
 80083c0:	000b      	movs	r3, r1
 80083c2:	0010      	movs	r0, r2
 80083c4:	0019      	movs	r1, r3
 80083c6:	f7fb f813 	bl	80033f0 <__aeabi_d2f>
 80083ca:	1c03      	adds	r3, r0, #0
 80083cc:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 80083ce:	4952      	ldr	r1, [pc, #328]	@ (8008518 <HIDS_GetMeasurementValues+0x214>)
 80083d0:	6938      	ldr	r0, [r7, #16]
 80083d2:	f7f8 fea1 	bl	8001118 <__aeabi_fsub>
 80083d6:	1c03      	adds	r3, r0, #0
 80083d8:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80083da:	4b4d      	ldr	r3, [pc, #308]	@ (8008510 <HIDS_GetMeasurementValues+0x20c>)
 80083dc:	78db      	ldrb	r3, [r3, #3]
 80083de:	021b      	lsls	r3, r3, #8
 80083e0:	4a4b      	ldr	r2, [pc, #300]	@ (8008510 <HIDS_GetMeasurementValues+0x20c>)
 80083e2:	7912      	ldrb	r2, [r2, #4]
 80083e4:	431a      	orrs	r2, r3
 80083e6:	0013      	movs	r3, r2
 80083e8:	015b      	lsls	r3, r3, #5
 80083ea:	1a9b      	subs	r3, r3, r2
 80083ec:	009b      	lsls	r3, r3, #2
 80083ee:	189b      	adds	r3, r3, r2
 80083f0:	0018      	movs	r0, r3
 80083f2:	f7fa ff63 	bl	80032bc <__aeabi_i2d>
 80083f6:	2200      	movs	r2, #0
 80083f8:	4b46      	ldr	r3, [pc, #280]	@ (8008514 <HIDS_GetMeasurementValues+0x210>)
 80083fa:	f7f9 fc59 	bl	8001cb0 <__aeabi_ddiv>
 80083fe:	0002      	movs	r2, r0
 8008400:	000b      	movs	r3, r1
 8008402:	0010      	movs	r0, r2
 8008404:	0019      	movs	r1, r3
 8008406:	f7fa fff3 	bl	80033f0 <__aeabi_d2f>
 800840a:	1c03      	adds	r3, r0, #0
 800840c:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800840e:	4943      	ldr	r1, [pc, #268]	@ (800851c <HIDS_GetMeasurementValues+0x218>)
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f7f8 fe81 	bl	8001118 <__aeabi_fsub>
 8008416:	1c03      	adds	r3, r0, #0
 8008418:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 800841a:	4b3a      	ldr	r3, [pc, #232]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	697a      	ldr	r2, [r7, #20]
 8008420:	429a      	cmp	r2, r3
 8008422:	d910      	bls.n	8008446 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 8008424:	4b37      	ldr	r3, [pc, #220]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 8008426:	681a      	ldr	r2, [r3, #0]
 8008428:	4b3d      	ldr	r3, [pc, #244]	@ (8008520 <HIDS_GetMeasurementValues+0x21c>)
 800842a:	0092      	lsls	r2, r2, #2
 800842c:	6939      	ldr	r1, [r7, #16]
 800842e:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8008430:	4b34      	ldr	r3, [pc, #208]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 8008432:	681a      	ldr	r2, [r3, #0]
 8008434:	4b3b      	ldr	r3, [pc, #236]	@ (8008524 <HIDS_GetMeasurementValues+0x220>)
 8008436:	0092      	lsls	r2, r2, #2
 8008438:	68f9      	ldr	r1, [r7, #12]
 800843a:	50d1      	str	r1, [r2, r3]
	  measurements++;
 800843c:	4b31      	ldr	r3, [pc, #196]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	1c5a      	adds	r2, r3, #1
 8008442:	4b30      	ldr	r3, [pc, #192]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 8008444:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8008446:	4b2f      	ldr	r3, [pc, #188]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	429a      	cmp	r2, r3
 800844e:	d84c      	bhi.n	80084ea <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8008450:	2300      	movs	r3, #0
 8008452:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8008454:	2300      	movs	r3, #0
 8008456:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008458:	2300      	movs	r3, #0
 800845a:	61bb      	str	r3, [r7, #24]
 800845c:	e016      	b.n	800848c <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 800845e:	4b30      	ldr	r3, [pc, #192]	@ (8008520 <HIDS_GetMeasurementValues+0x21c>)
 8008460:	69ba      	ldr	r2, [r7, #24]
 8008462:	0092      	lsls	r2, r2, #2
 8008464:	58d3      	ldr	r3, [r2, r3]
 8008466:	1c19      	adds	r1, r3, #0
 8008468:	6a38      	ldr	r0, [r7, #32]
 800846a:	f7f8 f9a7 	bl	80007bc <__aeabi_fadd>
 800846e:	1c03      	adds	r3, r0, #0
 8008470:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8008472:	4b2c      	ldr	r3, [pc, #176]	@ (8008524 <HIDS_GetMeasurementValues+0x220>)
 8008474:	69ba      	ldr	r2, [r7, #24]
 8008476:	0092      	lsls	r2, r2, #2
 8008478:	58d3      	ldr	r3, [r2, r3]
 800847a:	1c19      	adds	r1, r3, #0
 800847c:	69f8      	ldr	r0, [r7, #28]
 800847e:	f7f8 f99d 	bl	80007bc <__aeabi_fadd>
 8008482:	1c03      	adds	r3, r0, #0
 8008484:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008486:	69bb      	ldr	r3, [r7, #24]
 8008488:	3301      	adds	r3, #1
 800848a:	61bb      	str	r3, [r7, #24]
 800848c:	4b1d      	ldr	r3, [pc, #116]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	69ba      	ldr	r2, [r7, #24]
 8008492:	429a      	cmp	r2, r3
 8008494:	d3e3      	bcc.n	800845e <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8008496:	4b1b      	ldr	r3, [pc, #108]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	0018      	movs	r0, r3
 800849c:	f7f9 f862 	bl	8001564 <__aeabi_ui2f>
 80084a0:	1c03      	adds	r3, r0, #0
 80084a2:	1c19      	adds	r1, r3, #0
 80084a4:	6a38      	ldr	r0, [r7, #32]
 80084a6:	f7f8 fb13 	bl	8000ad0 <__aeabi_fdiv>
 80084aa:	1c03      	adds	r3, r0, #0
 80084ac:	1c1a      	adds	r2, r3, #0
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 80084b2:	4b14      	ldr	r3, [pc, #80]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	0018      	movs	r0, r3
 80084b8:	f7f9 f854 	bl	8001564 <__aeabi_ui2f>
 80084bc:	1c03      	adds	r3, r0, #0
 80084be:	1c19      	adds	r1, r3, #0
 80084c0:	69f8      	ldr	r0, [r7, #28]
 80084c2:	f7f8 fb05 	bl	8000ad0 <__aeabi_fdiv>
 80084c6:	1c03      	adds	r3, r0, #0
 80084c8:	1c1a      	adds	r2, r3, #0
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 80084ce:	687a      	ldr	r2, [r7, #4]
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	0011      	movs	r1, r2
 80084d4:	0018      	movs	r0, r3
 80084d6:	f7fe ffa3 	bl	8007420 <SGP_GetHT>

    measurements = 0;
 80084da:	4b0a      	ldr	r3, [pc, #40]	@ (8008504 <HIDS_GetMeasurementValues+0x200>)
 80084dc:	2200      	movs	r2, #0
 80084de:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 80084e0:	4b05      	ldr	r3, [pc, #20]	@ (80084f8 <HIDS_GetMeasurementValues+0x1f4>)
 80084e2:	2201      	movs	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 80084e6:	2301      	movs	r3, #1
 80084e8:	e002      	b.n	80084f0 <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 80084ea:	f7ff fe2f 	bl	800814c <HIDS_StartMeasurement>
	return false;
 80084ee:	2300      	movs	r3, #0
}
 80084f0:	0018      	movs	r0, r3
 80084f2:	46bd      	mov	sp, r7
 80084f4:	b00a      	add	sp, #40	@ 0x28
 80084f6:	bd80      	pop	{r7, pc}
 80084f8:	200015c6 	.word	0x200015c6
 80084fc:	20000140 	.word	0x20000140
 8008500:	2000013c 	.word	0x2000013c
 8008504:	200015c8 	.word	0x200015c8
 8008508:	08012e64 	.word	0x08012e64
 800850c:	08012e90 	.word	0x08012e90
 8008510:	200015c0 	.word	0x200015c0
 8008514:	40efffe0 	.word	0x40efffe0
 8008518:	42340000 	.word	0x42340000
 800851c:	40c00000 	.word	0x40c00000
 8008520:	200015cc 	.word	0x200015cc
 8008524:	200019cc 	.word	0x200019cc

08008528 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008528:	480d      	ldr	r0, [pc, #52]	@ (8008560 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800852a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800852c:	f7ff f91a 	bl	8007764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008530:	480c      	ldr	r0, [pc, #48]	@ (8008564 <LoopForever+0x6>)
  ldr r1, =_edata
 8008532:	490d      	ldr	r1, [pc, #52]	@ (8008568 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008534:	4a0d      	ldr	r2, [pc, #52]	@ (800856c <LoopForever+0xe>)
  movs r3, #0
 8008536:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008538:	e002      	b.n	8008540 <LoopCopyDataInit>

0800853a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800853a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800853c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800853e:	3304      	adds	r3, #4

08008540 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008540:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008542:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008544:	d3f9      	bcc.n	800853a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008546:	4a0a      	ldr	r2, [pc, #40]	@ (8008570 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008548:	4c0a      	ldr	r4, [pc, #40]	@ (8008574 <LoopForever+0x16>)
  movs r3, #0
 800854a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800854c:	e001      	b.n	8008552 <LoopFillZerobss>

0800854e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800854e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008550:	3204      	adds	r2, #4

08008552 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008552:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008554:	d3fb      	bcc.n	800854e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008556:	f007 fce3 	bl	800ff20 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800855a:	f7fc fef3 	bl	8005344 <main>

0800855e <LoopForever>:

LoopForever:
    b LoopForever
 800855e:	e7fe      	b.n	800855e <LoopForever>
   ldr   r0, =_estack
 8008560:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8008564:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008568:	2000031c 	.word	0x2000031c
  ldr r2, =_sidata
 800856c:	080133d0 	.word	0x080133d0
  ldr r2, =_sbss
 8008570:	2000031c 	.word	0x2000031c
  ldr r4, =_ebss
 8008574:	20001f1c 	.word	0x20001f1c

08008578 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008578:	e7fe      	b.n	8008578 <ADC1_COMP_IRQHandler>
	...

0800857c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800857c:	b580      	push	{r7, lr}
 800857e:	b082      	sub	sp, #8
 8008580:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008582:	1dfb      	adds	r3, r7, #7
 8008584:	2200      	movs	r2, #0
 8008586:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8008588:	4b0b      	ldr	r3, [pc, #44]	@ (80085b8 <HAL_Init+0x3c>)
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	4b0a      	ldr	r3, [pc, #40]	@ (80085b8 <HAL_Init+0x3c>)
 800858e:	2140      	movs	r1, #64	@ 0x40
 8008590:	430a      	orrs	r2, r1
 8008592:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008594:	2003      	movs	r0, #3
 8008596:	f000 f811 	bl	80085bc <HAL_InitTick>
 800859a:	1e03      	subs	r3, r0, #0
 800859c:	d003      	beq.n	80085a6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800859e:	1dfb      	adds	r3, r7, #7
 80085a0:	2201      	movs	r2, #1
 80085a2:	701a      	strb	r2, [r3, #0]
 80085a4:	e001      	b.n	80085aa <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80085a6:	f7fe ffbf 	bl	8007528 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80085aa:	1dfb      	adds	r3, r7, #7
 80085ac:	781b      	ldrb	r3, [r3, #0]
}
 80085ae:	0018      	movs	r0, r3
 80085b0:	46bd      	mov	sp, r7
 80085b2:	b002      	add	sp, #8
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	46c0      	nop			@ (mov r8, r8)
 80085b8:	40022000 	.word	0x40022000

080085bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80085bc:	b590      	push	{r4, r7, lr}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80085c4:	4b14      	ldr	r3, [pc, #80]	@ (8008618 <HAL_InitTick+0x5c>)
 80085c6:	681c      	ldr	r4, [r3, #0]
 80085c8:	4b14      	ldr	r3, [pc, #80]	@ (800861c <HAL_InitTick+0x60>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	0019      	movs	r1, r3
 80085ce:	23fa      	movs	r3, #250	@ 0xfa
 80085d0:	0098      	lsls	r0, r3, #2
 80085d2:	f7f7 fdb5 	bl	8000140 <__udivsi3>
 80085d6:	0003      	movs	r3, r0
 80085d8:	0019      	movs	r1, r3
 80085da:	0020      	movs	r0, r4
 80085dc:	f7f7 fdb0 	bl	8000140 <__udivsi3>
 80085e0:	0003      	movs	r3, r0
 80085e2:	0018      	movs	r0, r3
 80085e4:	f000 fcad 	bl	8008f42 <HAL_SYSTICK_Config>
 80085e8:	1e03      	subs	r3, r0, #0
 80085ea:	d001      	beq.n	80085f0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80085ec:	2301      	movs	r3, #1
 80085ee:	e00f      	b.n	8008610 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2b03      	cmp	r3, #3
 80085f4:	d80b      	bhi.n	800860e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80085f6:	6879      	ldr	r1, [r7, #4]
 80085f8:	2301      	movs	r3, #1
 80085fa:	425b      	negs	r3, r3
 80085fc:	2200      	movs	r2, #0
 80085fe:	0018      	movs	r0, r3
 8008600:	f000 fc7a 	bl	8008ef8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008604:	4b06      	ldr	r3, [pc, #24]	@ (8008620 <HAL_InitTick+0x64>)
 8008606:	687a      	ldr	r2, [r7, #4]
 8008608:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	e000      	b.n	8008610 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800860e:	2301      	movs	r3, #1
}
 8008610:	0018      	movs	r0, r3
 8008612:	46bd      	mov	sp, r7
 8008614:	b003      	add	sp, #12
 8008616:	bd90      	pop	{r4, r7, pc}
 8008618:	20000130 	.word	0x20000130
 800861c:	20000148 	.word	0x20000148
 8008620:	20000144 	.word	0x20000144

08008624 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008628:	4b05      	ldr	r3, [pc, #20]	@ (8008640 <HAL_IncTick+0x1c>)
 800862a:	781b      	ldrb	r3, [r3, #0]
 800862c:	001a      	movs	r2, r3
 800862e:	4b05      	ldr	r3, [pc, #20]	@ (8008644 <HAL_IncTick+0x20>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	18d2      	adds	r2, r2, r3
 8008634:	4b03      	ldr	r3, [pc, #12]	@ (8008644 <HAL_IncTick+0x20>)
 8008636:	601a      	str	r2, [r3, #0]
}
 8008638:	46c0      	nop			@ (mov r8, r8)
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}
 800863e:	46c0      	nop			@ (mov r8, r8)
 8008640:	20000148 	.word	0x20000148
 8008644:	20001dcc 	.word	0x20001dcc

08008648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008648:	b580      	push	{r7, lr}
 800864a:	af00      	add	r7, sp, #0
  return uwTick;
 800864c:	4b02      	ldr	r3, [pc, #8]	@ (8008658 <HAL_GetTick+0x10>)
 800864e:	681b      	ldr	r3, [r3, #0]
}
 8008650:	0018      	movs	r0, r3
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	46c0      	nop			@ (mov r8, r8)
 8008658:	20001dcc 	.word	0x20001dcc

0800865c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008664:	f7ff fff0 	bl	8008648 <HAL_GetTick>
 8008668:	0003      	movs	r3, r0
 800866a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	3301      	adds	r3, #1
 8008674:	d005      	beq.n	8008682 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008676:	4b0a      	ldr	r3, [pc, #40]	@ (80086a0 <HAL_Delay+0x44>)
 8008678:	781b      	ldrb	r3, [r3, #0]
 800867a:	001a      	movs	r2, r3
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	189b      	adds	r3, r3, r2
 8008680:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008682:	46c0      	nop			@ (mov r8, r8)
 8008684:	f7ff ffe0 	bl	8008648 <HAL_GetTick>
 8008688:	0002      	movs	r2, r0
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	1ad3      	subs	r3, r2, r3
 800868e:	68fa      	ldr	r2, [r7, #12]
 8008690:	429a      	cmp	r2, r3
 8008692:	d8f7      	bhi.n	8008684 <HAL_Delay+0x28>
  {
  }
}
 8008694:	46c0      	nop			@ (mov r8, r8)
 8008696:	46c0      	nop			@ (mov r8, r8)
 8008698:	46bd      	mov	sp, r7
 800869a:	b004      	add	sp, #16
 800869c:	bd80      	pop	{r7, pc}
 800869e:	46c0      	nop			@ (mov r8, r8)
 80086a0:	20000148 	.word	0x20000148

080086a4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e159      	b.n	800896a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10a      	bne.n	80086d4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	2200      	movs	r2, #0
 80086c2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2250      	movs	r2, #80	@ 0x50
 80086c8:	2100      	movs	r1, #0
 80086ca:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	0018      	movs	r0, r3
 80086d0:	f7fc f9e4 	bl	8004a9c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086d8:	2210      	movs	r2, #16
 80086da:	4013      	ands	r3, r2
 80086dc:	2b10      	cmp	r3, #16
 80086de:	d005      	beq.n	80086ec <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	689b      	ldr	r3, [r3, #8]
 80086e6:	2204      	movs	r2, #4
 80086e8:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80086ea:	d00b      	beq.n	8008704 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80086f0:	2210      	movs	r2, #16
 80086f2:	431a      	orrs	r2, r3
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2250      	movs	r2, #80	@ 0x50
 80086fc:	2100      	movs	r1, #0
 80086fe:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008700:	2301      	movs	r3, #1
 8008702:	e132      	b.n	800896a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008708:	4a9a      	ldr	r2, [pc, #616]	@ (8008974 <HAL_ADC_Init+0x2d0>)
 800870a:	4013      	ands	r3, r2
 800870c:	2202      	movs	r2, #2
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	689b      	ldr	r3, [r3, #8]
 800871a:	2203      	movs	r2, #3
 800871c:	4013      	ands	r3, r2
 800871e:	2b01      	cmp	r3, #1
 8008720:	d108      	bne.n	8008734 <HAL_ADC_Init+0x90>
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	2201      	movs	r2, #1
 800872a:	4013      	ands	r3, r2
 800872c:	2b01      	cmp	r3, #1
 800872e:	d101      	bne.n	8008734 <HAL_ADC_Init+0x90>
 8008730:	2301      	movs	r3, #1
 8008732:	e000      	b.n	8008736 <HAL_ADC_Init+0x92>
 8008734:	2300      	movs	r3, #0
 8008736:	2b00      	cmp	r3, #0
 8008738:	d149      	bne.n	80087ce <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685a      	ldr	r2, [r3, #4]
 800873e:	23c0      	movs	r3, #192	@ 0xc0
 8008740:	061b      	lsls	r3, r3, #24
 8008742:	429a      	cmp	r2, r3
 8008744:	d00b      	beq.n	800875e <HAL_ADC_Init+0xba>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	2380      	movs	r3, #128	@ 0x80
 800874c:	05db      	lsls	r3, r3, #23
 800874e:	429a      	cmp	r2, r3
 8008750:	d005      	beq.n	800875e <HAL_ADC_Init+0xba>
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	685a      	ldr	r2, [r3, #4]
 8008756:	2380      	movs	r3, #128	@ 0x80
 8008758:	061b      	lsls	r3, r3, #24
 800875a:	429a      	cmp	r2, r3
 800875c:	d111      	bne.n	8008782 <HAL_ADC_Init+0xde>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	691a      	ldr	r2, [r3, #16]
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	0092      	lsls	r2, r2, #2
 800876a:	0892      	lsrs	r2, r2, #2
 800876c:	611a      	str	r2, [r3, #16]
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	6919      	ldr	r1, [r3, #16]
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	685a      	ldr	r2, [r3, #4]
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	681b      	ldr	r3, [r3, #0]
 800877c:	430a      	orrs	r2, r1
 800877e:	611a      	str	r2, [r3, #16]
 8008780:	e014      	b.n	80087ac <HAL_ADC_Init+0x108>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	691a      	ldr	r2, [r3, #16]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	0092      	lsls	r2, r2, #2
 800878e:	0892      	lsrs	r2, r2, #2
 8008790:	611a      	str	r2, [r3, #16]
 8008792:	4b79      	ldr	r3, [pc, #484]	@ (8008978 <HAL_ADC_Init+0x2d4>)
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	4b78      	ldr	r3, [pc, #480]	@ (8008978 <HAL_ADC_Init+0x2d4>)
 8008798:	4978      	ldr	r1, [pc, #480]	@ (800897c <HAL_ADC_Init+0x2d8>)
 800879a:	400a      	ands	r2, r1
 800879c:	601a      	str	r2, [r3, #0]
 800879e:	4b76      	ldr	r3, [pc, #472]	@ (8008978 <HAL_ADC_Init+0x2d4>)
 80087a0:	6819      	ldr	r1, [r3, #0]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	685a      	ldr	r2, [r3, #4]
 80087a6:	4b74      	ldr	r3, [pc, #464]	@ (8008978 <HAL_ADC_Init+0x2d4>)
 80087a8:	430a      	orrs	r2, r1
 80087aa:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	68da      	ldr	r2, [r3, #12]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	2118      	movs	r1, #24
 80087b8:	438a      	bics	r2, r1
 80087ba:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	68d9      	ldr	r1, [r3, #12]
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	689a      	ldr	r2, [r3, #8]
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	430a      	orrs	r2, r1
 80087cc:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80087ce:	4b6a      	ldr	r3, [pc, #424]	@ (8008978 <HAL_ADC_Init+0x2d4>)
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	4b69      	ldr	r3, [pc, #420]	@ (8008978 <HAL_ADC_Init+0x2d4>)
 80087d4:	496a      	ldr	r1, [pc, #424]	@ (8008980 <HAL_ADC_Init+0x2dc>)
 80087d6:	400a      	ands	r2, r1
 80087d8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80087da:	4b67      	ldr	r3, [pc, #412]	@ (8008978 <HAL_ADC_Init+0x2d4>)
 80087dc:	6819      	ldr	r1, [r3, #0]
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087e2:	065a      	lsls	r2, r3, #25
 80087e4:	4b64      	ldr	r3, [pc, #400]	@ (8008978 <HAL_ADC_Init+0x2d4>)
 80087e6:	430a      	orrs	r2, r1
 80087e8:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	689a      	ldr	r2, [r3, #8]
 80087f0:	2380      	movs	r3, #128	@ 0x80
 80087f2:	055b      	lsls	r3, r3, #21
 80087f4:	4013      	ands	r3, r2
 80087f6:	d108      	bne.n	800880a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689a      	ldr	r2, [r3, #8]
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	2180      	movs	r1, #128	@ 0x80
 8008804:	0549      	lsls	r1, r1, #21
 8008806:	430a      	orrs	r2, r1
 8008808:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	681b      	ldr	r3, [r3, #0]
 800880e:	68da      	ldr	r2, [r3, #12]
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	495b      	ldr	r1, [pc, #364]	@ (8008984 <HAL_ADC_Init+0x2e0>)
 8008816:	400a      	ands	r2, r1
 8008818:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68d9      	ldr	r1, [r3, #12]
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	691b      	ldr	r3, [r3, #16]
 8008828:	2b02      	cmp	r3, #2
 800882a:	d101      	bne.n	8008830 <HAL_ADC_Init+0x18c>
 800882c:	2304      	movs	r3, #4
 800882e:	e000      	b.n	8008832 <HAL_ADC_Init+0x18e>
 8008830:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8008832:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2020      	movs	r0, #32
 8008838:	5c1b      	ldrb	r3, [r3, r0]
 800883a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800883c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	202c      	movs	r0, #44	@ 0x2c
 8008842:	5c1b      	ldrb	r3, [r3, r0]
 8008844:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8008846:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800884c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	699b      	ldr	r3, [r3, #24]
 8008852:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8008854:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	69db      	ldr	r3, [r3, #28]
 800885a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800885c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	430a      	orrs	r2, r1
 8008864:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800886a:	23c2      	movs	r3, #194	@ 0xc2
 800886c:	33ff      	adds	r3, #255	@ 0xff
 800886e:	429a      	cmp	r2, r3
 8008870:	d00b      	beq.n	800888a <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	68d9      	ldr	r1, [r3, #12]
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8008880:	431a      	orrs	r2, r3
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	430a      	orrs	r2, r1
 8008888:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2221      	movs	r2, #33	@ 0x21
 800888e:	5c9b      	ldrb	r3, [r3, r2]
 8008890:	2b01      	cmp	r3, #1
 8008892:	d11a      	bne.n	80088ca <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2220      	movs	r2, #32
 8008898:	5c9b      	ldrb	r3, [r3, r2]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d109      	bne.n	80088b2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	68da      	ldr	r2, [r3, #12]
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	2180      	movs	r1, #128	@ 0x80
 80088aa:	0249      	lsls	r1, r1, #9
 80088ac:	430a      	orrs	r2, r1
 80088ae:	60da      	str	r2, [r3, #12]
 80088b0:	e00b      	b.n	80088ca <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80088b6:	2220      	movs	r2, #32
 80088b8:	431a      	orrs	r2, r3
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80088c2:	2201      	movs	r2, #1
 80088c4:	431a      	orrs	r2, r3
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d11f      	bne.n	8008912 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	691a      	ldr	r2, [r3, #16]
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	492a      	ldr	r1, [pc, #168]	@ (8008988 <HAL_ADC_Init+0x2e4>)
 80088de:	400a      	ands	r2, r1
 80088e0:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	6919      	ldr	r1, [r3, #16]
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80088f0:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 80088f6:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	430a      	orrs	r2, r1
 80088fe:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	691a      	ldr	r2, [r3, #16]
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2101      	movs	r1, #1
 800890c:	430a      	orrs	r2, r1
 800890e:	611a      	str	r2, [r3, #16]
 8008910:	e00e      	b.n	8008930 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	691b      	ldr	r3, [r3, #16]
 8008918:	2201      	movs	r2, #1
 800891a:	4013      	ands	r3, r2
 800891c:	2b01      	cmp	r3, #1
 800891e:	d107      	bne.n	8008930 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	691a      	ldr	r2, [r3, #16]
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2101      	movs	r1, #1
 800892c:	438a      	bics	r2, r1
 800892e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	695a      	ldr	r2, [r3, #20]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	2107      	movs	r1, #7
 800893c:	438a      	bics	r2, r1
 800893e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6959      	ldr	r1, [r3, #20]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	430a      	orrs	r2, r1
 8008950:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2200      	movs	r2, #0
 8008956:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800895c:	2203      	movs	r2, #3
 800895e:	4393      	bics	r3, r2
 8008960:	2201      	movs	r2, #1
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	0018      	movs	r0, r3
 800896c:	46bd      	mov	sp, r7
 800896e:	b002      	add	sp, #8
 8008970:	bd80      	pop	{r7, pc}
 8008972:	46c0      	nop			@ (mov r8, r8)
 8008974:	fffffefd 	.word	0xfffffefd
 8008978:	40012708 	.word	0x40012708
 800897c:	ffc3ffff 	.word	0xffc3ffff
 8008980:	fdffffff 	.word	0xfdffffff
 8008984:	fffe0219 	.word	0xfffe0219
 8008988:	fffffc03 	.word	0xfffffc03

0800898c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800898c:	b590      	push	{r4, r7, lr}
 800898e:	b085      	sub	sp, #20
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008994:	230f      	movs	r3, #15
 8008996:	18fb      	adds	r3, r7, r3
 8008998:	2200      	movs	r2, #0
 800899a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	2204      	movs	r2, #4
 80089a4:	4013      	ands	r3, r2
 80089a6:	d138      	bne.n	8008a1a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2250      	movs	r2, #80	@ 0x50
 80089ac:	5c9b      	ldrb	r3, [r3, r2]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d101      	bne.n	80089b6 <HAL_ADC_Start+0x2a>
 80089b2:	2302      	movs	r3, #2
 80089b4:	e038      	b.n	8008a28 <HAL_ADC_Start+0x9c>
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2250      	movs	r2, #80	@ 0x50
 80089ba:	2101      	movs	r1, #1
 80089bc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	2b01      	cmp	r3, #1
 80089c4:	d007      	beq.n	80089d6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80089c6:	230f      	movs	r3, #15
 80089c8:	18fc      	adds	r4, r7, r3
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	0018      	movs	r0, r3
 80089ce:	f000 f95f 	bl	8008c90 <ADC_Enable>
 80089d2:	0003      	movs	r3, r0
 80089d4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80089d6:	230f      	movs	r3, #15
 80089d8:	18fb      	adds	r3, r7, r3
 80089da:	781b      	ldrb	r3, [r3, #0]
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d120      	bne.n	8008a22 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80089e4:	4a12      	ldr	r2, [pc, #72]	@ (8008a30 <HAL_ADC_Start+0xa4>)
 80089e6:	4013      	ands	r3, r2
 80089e8:	2280      	movs	r2, #128	@ 0x80
 80089ea:	0052      	lsls	r2, r2, #1
 80089ec:	431a      	orrs	r2, r3
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2200      	movs	r2, #0
 80089f6:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2250      	movs	r2, #80	@ 0x50
 80089fc:	2100      	movs	r1, #0
 80089fe:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	221c      	movs	r2, #28
 8008a06:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	689a      	ldr	r2, [r3, #8]
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	681b      	ldr	r3, [r3, #0]
 8008a12:	2104      	movs	r1, #4
 8008a14:	430a      	orrs	r2, r1
 8008a16:	609a      	str	r2, [r3, #8]
 8008a18:	e003      	b.n	8008a22 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8008a1a:	230f      	movs	r3, #15
 8008a1c:	18fb      	adds	r3, r7, r3
 8008a1e:	2202      	movs	r2, #2
 8008a20:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8008a22:	230f      	movs	r3, #15
 8008a24:	18fb      	adds	r3, r7, r3
 8008a26:	781b      	ldrb	r3, [r3, #0]
}
 8008a28:	0018      	movs	r0, r3
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	b005      	add	sp, #20
 8008a2e:	bd90      	pop	{r4, r7, pc}
 8008a30:	fffff0fe 	.word	0xfffff0fe

08008a34 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
 8008a3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008a3e:	2300      	movs	r3, #0
 8008a40:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8008a42:	2300      	movs	r3, #0
 8008a44:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	695b      	ldr	r3, [r3, #20]
 8008a4a:	2b08      	cmp	r3, #8
 8008a4c:	d102      	bne.n	8008a54 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8008a4e:	2308      	movs	r3, #8
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	e014      	b.n	8008a7e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	68db      	ldr	r3, [r3, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	4013      	ands	r3, r2
 8008a5e:	2b01      	cmp	r3, #1
 8008a60:	d10b      	bne.n	8008a7a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008a66:	2220      	movs	r2, #32
 8008a68:	431a      	orrs	r2, r3
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	2250      	movs	r2, #80	@ 0x50
 8008a72:	2100      	movs	r1, #0
 8008a74:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8008a76:	2301      	movs	r3, #1
 8008a78:	e072      	b.n	8008b60 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 8008a7a:	230c      	movs	r3, #12
 8008a7c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8008a7e:	f7ff fde3 	bl	8008648 <HAL_GetTick>
 8008a82:	0003      	movs	r3, r0
 8008a84:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008a86:	e01f      	b.n	8008ac8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	3301      	adds	r3, #1
 8008a8c:	d01c      	beq.n	8008ac8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d007      	beq.n	8008aa4 <HAL_ADC_PollForConversion+0x70>
 8008a94:	f7ff fdd8 	bl	8008648 <HAL_GetTick>
 8008a98:	0002      	movs	r2, r0
 8008a9a:	68bb      	ldr	r3, [r7, #8]
 8008a9c:	1ad3      	subs	r3, r2, r3
 8008a9e:	683a      	ldr	r2, [r7, #0]
 8008aa0:	429a      	cmp	r2, r3
 8008aa2:	d211      	bcs.n	8008ac8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	681b      	ldr	r3, [r3, #0]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	68fa      	ldr	r2, [r7, #12]
 8008aac:	4013      	ands	r3, r2
 8008aae:	d10b      	bne.n	8008ac8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ab4:	2204      	movs	r2, #4
 8008ab6:	431a      	orrs	r2, r3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2250      	movs	r2, #80	@ 0x50
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e04b      	b.n	8008b60 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	68fa      	ldr	r2, [r7, #12]
 8008ad0:	4013      	ands	r3, r2
 8008ad2:	d0d9      	beq.n	8008a88 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008ad8:	2280      	movs	r2, #128	@ 0x80
 8008ada:	0092      	lsls	r2, r2, #2
 8008adc:	431a      	orrs	r2, r3
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	68da      	ldr	r2, [r3, #12]
 8008ae8:	23c0      	movs	r3, #192	@ 0xc0
 8008aea:	011b      	lsls	r3, r3, #4
 8008aec:	4013      	ands	r3, r2
 8008aee:	d12e      	bne.n	8008b4e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	2220      	movs	r2, #32
 8008af4:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d129      	bne.n	8008b4e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2208      	movs	r2, #8
 8008b02:	4013      	ands	r3, r2
 8008b04:	2b08      	cmp	r3, #8
 8008b06:	d122      	bne.n	8008b4e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	689b      	ldr	r3, [r3, #8]
 8008b0e:	2204      	movs	r2, #4
 8008b10:	4013      	ands	r3, r2
 8008b12:	d110      	bne.n	8008b36 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	685a      	ldr	r2, [r3, #4]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	210c      	movs	r1, #12
 8008b20:	438a      	bics	r2, r1
 8008b22:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b28:	4a0f      	ldr	r2, [pc, #60]	@ (8008b68 <HAL_ADC_PollForConversion+0x134>)
 8008b2a:	4013      	ands	r3, r2
 8008b2c:	2201      	movs	r2, #1
 8008b2e:	431a      	orrs	r2, r3
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	655a      	str	r2, [r3, #84]	@ 0x54
 8008b34:	e00b      	b.n	8008b4e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008b3a:	2220      	movs	r2, #32
 8008b3c:	431a      	orrs	r2, r3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008b46:	2201      	movs	r2, #1
 8008b48:	431a      	orrs	r2, r3
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	699b      	ldr	r3, [r3, #24]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d103      	bne.n	8008b5e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	220c      	movs	r2, #12
 8008b5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	0018      	movs	r0, r3
 8008b62:	46bd      	mov	sp, r7
 8008b64:	b004      	add	sp, #16
 8008b66:	bd80      	pop	{r7, pc}
 8008b68:	fffffefe 	.word	0xfffffefe

08008b6c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8008b7a:	0018      	movs	r0, r3
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	b002      	add	sp, #8
 8008b80:	bd80      	pop	{r7, pc}
	...

08008b84 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	6078      	str	r0, [r7, #4]
 8008b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2250      	movs	r2, #80	@ 0x50
 8008b92:	5c9b      	ldrb	r3, [r3, r2]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d101      	bne.n	8008b9c <HAL_ADC_ConfigChannel+0x18>
 8008b98:	2302      	movs	r3, #2
 8008b9a:	e06c      	b.n	8008c76 <HAL_ADC_ConfigChannel+0xf2>
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2250      	movs	r2, #80	@ 0x50
 8008ba0:	2101      	movs	r1, #1
 8008ba2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	689b      	ldr	r3, [r3, #8]
 8008baa:	2204      	movs	r2, #4
 8008bac:	4013      	ands	r3, r2
 8008bae:	d00b      	beq.n	8008bc8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008bb4:	2220      	movs	r2, #32
 8008bb6:	431a      	orrs	r2, r3
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2250      	movs	r2, #80	@ 0x50
 8008bc0:	2100      	movs	r1, #0
 8008bc2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	e056      	b.n	8008c76 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	685b      	ldr	r3, [r3, #4]
 8008bcc:	4a2c      	ldr	r2, [pc, #176]	@ (8008c80 <HAL_ADC_ConfigChannel+0xfc>)
 8008bce:	4293      	cmp	r3, r2
 8008bd0:	d028      	beq.n	8008c24 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	035b      	lsls	r3, r3, #13
 8008bde:	0b5a      	lsrs	r2, r3, #13
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	430a      	orrs	r2, r1
 8008be6:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	2380      	movs	r3, #128	@ 0x80
 8008bee:	02db      	lsls	r3, r3, #11
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	d009      	beq.n	8008c08 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8008bf4:	4b23      	ldr	r3, [pc, #140]	@ (8008c84 <HAL_ADC_ConfigChannel+0x100>)
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	4b22      	ldr	r3, [pc, #136]	@ (8008c84 <HAL_ADC_ConfigChannel+0x100>)
 8008bfa:	2180      	movs	r1, #128	@ 0x80
 8008bfc:	0409      	lsls	r1, r1, #16
 8008bfe:	430a      	orrs	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8008c02:	200a      	movs	r0, #10
 8008c04:	f000 f8ac 	bl	8008d60 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	681a      	ldr	r2, [r3, #0]
 8008c0c:	2380      	movs	r3, #128	@ 0x80
 8008c0e:	029b      	lsls	r3, r3, #10
 8008c10:	4013      	ands	r3, r2
 8008c12:	d02b      	beq.n	8008c6c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8008c14:	4b1b      	ldr	r3, [pc, #108]	@ (8008c84 <HAL_ADC_ConfigChannel+0x100>)
 8008c16:	681a      	ldr	r2, [r3, #0]
 8008c18:	4b1a      	ldr	r3, [pc, #104]	@ (8008c84 <HAL_ADC_ConfigChannel+0x100>)
 8008c1a:	2180      	movs	r1, #128	@ 0x80
 8008c1c:	03c9      	lsls	r1, r1, #15
 8008c1e:	430a      	orrs	r2, r1
 8008c20:	601a      	str	r2, [r3, #0]
 8008c22:	e023      	b.n	8008c6c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	035b      	lsls	r3, r3, #13
 8008c30:	0b5b      	lsrs	r3, r3, #13
 8008c32:	43d9      	mvns	r1, r3
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	400a      	ands	r2, r1
 8008c3a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8008c3c:	683b      	ldr	r3, [r7, #0]
 8008c3e:	681a      	ldr	r2, [r3, #0]
 8008c40:	2380      	movs	r3, #128	@ 0x80
 8008c42:	02db      	lsls	r3, r3, #11
 8008c44:	4013      	ands	r3, r2
 8008c46:	d005      	beq.n	8008c54 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8008c48:	4b0e      	ldr	r3, [pc, #56]	@ (8008c84 <HAL_ADC_ConfigChannel+0x100>)
 8008c4a:	681a      	ldr	r2, [r3, #0]
 8008c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8008c84 <HAL_ADC_ConfigChannel+0x100>)
 8008c4e:	490e      	ldr	r1, [pc, #56]	@ (8008c88 <HAL_ADC_ConfigChannel+0x104>)
 8008c50:	400a      	ands	r2, r1
 8008c52:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	681a      	ldr	r2, [r3, #0]
 8008c58:	2380      	movs	r3, #128	@ 0x80
 8008c5a:	029b      	lsls	r3, r3, #10
 8008c5c:	4013      	ands	r3, r2
 8008c5e:	d005      	beq.n	8008c6c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8008c60:	4b08      	ldr	r3, [pc, #32]	@ (8008c84 <HAL_ADC_ConfigChannel+0x100>)
 8008c62:	681a      	ldr	r2, [r3, #0]
 8008c64:	4b07      	ldr	r3, [pc, #28]	@ (8008c84 <HAL_ADC_ConfigChannel+0x100>)
 8008c66:	4909      	ldr	r1, [pc, #36]	@ (8008c8c <HAL_ADC_ConfigChannel+0x108>)
 8008c68:	400a      	ands	r2, r1
 8008c6a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2250      	movs	r2, #80	@ 0x50
 8008c70:	2100      	movs	r1, #0
 8008c72:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8008c74:	2300      	movs	r3, #0
}
 8008c76:	0018      	movs	r0, r3
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b002      	add	sp, #8
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	46c0      	nop			@ (mov r8, r8)
 8008c80:	00001001 	.word	0x00001001
 8008c84:	40012708 	.word	0x40012708
 8008c88:	ff7fffff 	.word	0xff7fffff
 8008c8c:	ffbfffff 	.word	0xffbfffff

08008c90 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b084      	sub	sp, #16
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008c98:	2300      	movs	r3, #0
 8008c9a:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	689b      	ldr	r3, [r3, #8]
 8008ca2:	2203      	movs	r2, #3
 8008ca4:	4013      	ands	r3, r2
 8008ca6:	2b01      	cmp	r3, #1
 8008ca8:	d108      	bne.n	8008cbc <ADC_Enable+0x2c>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	681b      	ldr	r3, [r3, #0]
 8008cb0:	2201      	movs	r2, #1
 8008cb2:	4013      	ands	r3, r2
 8008cb4:	2b01      	cmp	r3, #1
 8008cb6:	d101      	bne.n	8008cbc <ADC_Enable+0x2c>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	e000      	b.n	8008cbe <ADC_Enable+0x2e>
 8008cbc:	2300      	movs	r3, #0
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d146      	bne.n	8008d50 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	689b      	ldr	r3, [r3, #8]
 8008cc8:	4a24      	ldr	r2, [pc, #144]	@ (8008d5c <ADC_Enable+0xcc>)
 8008cca:	4013      	ands	r3, r2
 8008ccc:	d00d      	beq.n	8008cea <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008cd2:	2210      	movs	r2, #16
 8008cd4:	431a      	orrs	r2, r3
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cde:	2201      	movs	r2, #1
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8008ce6:	2301      	movs	r3, #1
 8008ce8:	e033      	b.n	8008d52 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	689a      	ldr	r2, [r3, #8]
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	2101      	movs	r1, #1
 8008cf6:	430a      	orrs	r2, r1
 8008cf8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 8008cfa:	2001      	movs	r0, #1
 8008cfc:	f000 f830 	bl	8008d60 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8008d00:	f7ff fca2 	bl	8008648 <HAL_GetTick>
 8008d04:	0003      	movs	r3, r0
 8008d06:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008d08:	e01b      	b.n	8008d42 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8008d0a:	f7ff fc9d 	bl	8008648 <HAL_GetTick>
 8008d0e:	0002      	movs	r2, r0
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	1ad3      	subs	r3, r2, r3
 8008d14:	2b0a      	cmp	r3, #10
 8008d16:	d914      	bls.n	8008d42 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	4013      	ands	r3, r2
 8008d22:	2b01      	cmp	r3, #1
 8008d24:	d00d      	beq.n	8008d42 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8008d2a:	2210      	movs	r2, #16
 8008d2c:	431a      	orrs	r2, r3
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008d36:	2201      	movs	r2, #1
 8008d38:	431a      	orrs	r2, r3
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 8008d3e:	2301      	movs	r3, #1
 8008d40:	e007      	b.n	8008d52 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	2201      	movs	r2, #1
 8008d4a:	4013      	ands	r3, r2
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d1dc      	bne.n	8008d0a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8008d50:	2300      	movs	r3, #0
}
 8008d52:	0018      	movs	r0, r3
 8008d54:	46bd      	mov	sp, r7
 8008d56:	b004      	add	sp, #16
 8008d58:	bd80      	pop	{r7, pc}
 8008d5a:	46c0      	nop			@ (mov r8, r8)
 8008d5c:	80000017 	.word	0x80000017

08008d60 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8008d68:	4b0b      	ldr	r3, [pc, #44]	@ (8008d98 <ADC_DelayMicroSecond+0x38>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	490b      	ldr	r1, [pc, #44]	@ (8008d9c <ADC_DelayMicroSecond+0x3c>)
 8008d6e:	0018      	movs	r0, r3
 8008d70:	f7f7 f9e6 	bl	8000140 <__udivsi3>
 8008d74:	0003      	movs	r3, r0
 8008d76:	001a      	movs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	4353      	muls	r3, r2
 8008d7c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 8008d7e:	e002      	b.n	8008d86 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	3b01      	subs	r3, #1
 8008d84:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d1f9      	bne.n	8008d80 <ADC_DelayMicroSecond+0x20>
  }
}
 8008d8c:	46c0      	nop			@ (mov r8, r8)
 8008d8e:	46c0      	nop			@ (mov r8, r8)
 8008d90:	46bd      	mov	sp, r7
 8008d92:	b004      	add	sp, #16
 8008d94:	bd80      	pop	{r7, pc}
 8008d96:	46c0      	nop			@ (mov r8, r8)
 8008d98:	20000130 	.word	0x20000130
 8008d9c:	000f4240 	.word	0x000f4240

08008da0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b082      	sub	sp, #8
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	0002      	movs	r2, r0
 8008da8:	1dfb      	adds	r3, r7, #7
 8008daa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008dac:	1dfb      	adds	r3, r7, #7
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	2b7f      	cmp	r3, #127	@ 0x7f
 8008db2:	d809      	bhi.n	8008dc8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008db4:	1dfb      	adds	r3, r7, #7
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	001a      	movs	r2, r3
 8008dba:	231f      	movs	r3, #31
 8008dbc:	401a      	ands	r2, r3
 8008dbe:	4b04      	ldr	r3, [pc, #16]	@ (8008dd0 <__NVIC_EnableIRQ+0x30>)
 8008dc0:	2101      	movs	r1, #1
 8008dc2:	4091      	lsls	r1, r2
 8008dc4:	000a      	movs	r2, r1
 8008dc6:	601a      	str	r2, [r3, #0]
  }
}
 8008dc8:	46c0      	nop			@ (mov r8, r8)
 8008dca:	46bd      	mov	sp, r7
 8008dcc:	b002      	add	sp, #8
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	e000e100 	.word	0xe000e100

08008dd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8008dd4:	b590      	push	{r4, r7, lr}
 8008dd6:	b083      	sub	sp, #12
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	0002      	movs	r2, r0
 8008ddc:	6039      	str	r1, [r7, #0]
 8008dde:	1dfb      	adds	r3, r7, #7
 8008de0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8008de2:	1dfb      	adds	r3, r7, #7
 8008de4:	781b      	ldrb	r3, [r3, #0]
 8008de6:	2b7f      	cmp	r3, #127	@ 0x7f
 8008de8:	d828      	bhi.n	8008e3c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008dea:	4a2f      	ldr	r2, [pc, #188]	@ (8008ea8 <__NVIC_SetPriority+0xd4>)
 8008dec:	1dfb      	adds	r3, r7, #7
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	b25b      	sxtb	r3, r3
 8008df2:	089b      	lsrs	r3, r3, #2
 8008df4:	33c0      	adds	r3, #192	@ 0xc0
 8008df6:	009b      	lsls	r3, r3, #2
 8008df8:	589b      	ldr	r3, [r3, r2]
 8008dfa:	1dfa      	adds	r2, r7, #7
 8008dfc:	7812      	ldrb	r2, [r2, #0]
 8008dfe:	0011      	movs	r1, r2
 8008e00:	2203      	movs	r2, #3
 8008e02:	400a      	ands	r2, r1
 8008e04:	00d2      	lsls	r2, r2, #3
 8008e06:	21ff      	movs	r1, #255	@ 0xff
 8008e08:	4091      	lsls	r1, r2
 8008e0a:	000a      	movs	r2, r1
 8008e0c:	43d2      	mvns	r2, r2
 8008e0e:	401a      	ands	r2, r3
 8008e10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008e12:	683b      	ldr	r3, [r7, #0]
 8008e14:	019b      	lsls	r3, r3, #6
 8008e16:	22ff      	movs	r2, #255	@ 0xff
 8008e18:	401a      	ands	r2, r3
 8008e1a:	1dfb      	adds	r3, r7, #7
 8008e1c:	781b      	ldrb	r3, [r3, #0]
 8008e1e:	0018      	movs	r0, r3
 8008e20:	2303      	movs	r3, #3
 8008e22:	4003      	ands	r3, r0
 8008e24:	00db      	lsls	r3, r3, #3
 8008e26:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008e28:	481f      	ldr	r0, [pc, #124]	@ (8008ea8 <__NVIC_SetPriority+0xd4>)
 8008e2a:	1dfb      	adds	r3, r7, #7
 8008e2c:	781b      	ldrb	r3, [r3, #0]
 8008e2e:	b25b      	sxtb	r3, r3
 8008e30:	089b      	lsrs	r3, r3, #2
 8008e32:	430a      	orrs	r2, r1
 8008e34:	33c0      	adds	r3, #192	@ 0xc0
 8008e36:	009b      	lsls	r3, r3, #2
 8008e38:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8008e3a:	e031      	b.n	8008ea0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008e3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008eac <__NVIC_SetPriority+0xd8>)
 8008e3e:	1dfb      	adds	r3, r7, #7
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	0019      	movs	r1, r3
 8008e44:	230f      	movs	r3, #15
 8008e46:	400b      	ands	r3, r1
 8008e48:	3b08      	subs	r3, #8
 8008e4a:	089b      	lsrs	r3, r3, #2
 8008e4c:	3306      	adds	r3, #6
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	18d3      	adds	r3, r2, r3
 8008e52:	3304      	adds	r3, #4
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	1dfa      	adds	r2, r7, #7
 8008e58:	7812      	ldrb	r2, [r2, #0]
 8008e5a:	0011      	movs	r1, r2
 8008e5c:	2203      	movs	r2, #3
 8008e5e:	400a      	ands	r2, r1
 8008e60:	00d2      	lsls	r2, r2, #3
 8008e62:	21ff      	movs	r1, #255	@ 0xff
 8008e64:	4091      	lsls	r1, r2
 8008e66:	000a      	movs	r2, r1
 8008e68:	43d2      	mvns	r2, r2
 8008e6a:	401a      	ands	r2, r3
 8008e6c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008e6e:	683b      	ldr	r3, [r7, #0]
 8008e70:	019b      	lsls	r3, r3, #6
 8008e72:	22ff      	movs	r2, #255	@ 0xff
 8008e74:	401a      	ands	r2, r3
 8008e76:	1dfb      	adds	r3, r7, #7
 8008e78:	781b      	ldrb	r3, [r3, #0]
 8008e7a:	0018      	movs	r0, r3
 8008e7c:	2303      	movs	r3, #3
 8008e7e:	4003      	ands	r3, r0
 8008e80:	00db      	lsls	r3, r3, #3
 8008e82:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008e84:	4809      	ldr	r0, [pc, #36]	@ (8008eac <__NVIC_SetPriority+0xd8>)
 8008e86:	1dfb      	adds	r3, r7, #7
 8008e88:	781b      	ldrb	r3, [r3, #0]
 8008e8a:	001c      	movs	r4, r3
 8008e8c:	230f      	movs	r3, #15
 8008e8e:	4023      	ands	r3, r4
 8008e90:	3b08      	subs	r3, #8
 8008e92:	089b      	lsrs	r3, r3, #2
 8008e94:	430a      	orrs	r2, r1
 8008e96:	3306      	adds	r3, #6
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	18c3      	adds	r3, r0, r3
 8008e9c:	3304      	adds	r3, #4
 8008e9e:	601a      	str	r2, [r3, #0]
}
 8008ea0:	46c0      	nop			@ (mov r8, r8)
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	b003      	add	sp, #12
 8008ea6:	bd90      	pop	{r4, r7, pc}
 8008ea8:	e000e100 	.word	0xe000e100
 8008eac:	e000ed00 	.word	0xe000ed00

08008eb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b082      	sub	sp, #8
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	1e5a      	subs	r2, r3, #1
 8008ebc:	2380      	movs	r3, #128	@ 0x80
 8008ebe:	045b      	lsls	r3, r3, #17
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	d301      	bcc.n	8008ec8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8008ec4:	2301      	movs	r3, #1
 8008ec6:	e010      	b.n	8008eea <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008ec8:	4b0a      	ldr	r3, [pc, #40]	@ (8008ef4 <SysTick_Config+0x44>)
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	3a01      	subs	r2, #1
 8008ece:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8008ed0:	2301      	movs	r3, #1
 8008ed2:	425b      	negs	r3, r3
 8008ed4:	2103      	movs	r1, #3
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7ff ff7c 	bl	8008dd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008edc:	4b05      	ldr	r3, [pc, #20]	@ (8008ef4 <SysTick_Config+0x44>)
 8008ede:	2200      	movs	r2, #0
 8008ee0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8008ee2:	4b04      	ldr	r3, [pc, #16]	@ (8008ef4 <SysTick_Config+0x44>)
 8008ee4:	2207      	movs	r2, #7
 8008ee6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	0018      	movs	r0, r3
 8008eec:	46bd      	mov	sp, r7
 8008eee:	b002      	add	sp, #8
 8008ef0:	bd80      	pop	{r7, pc}
 8008ef2:	46c0      	nop			@ (mov r8, r8)
 8008ef4:	e000e010 	.word	0xe000e010

08008ef8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b084      	sub	sp, #16
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	60b9      	str	r1, [r7, #8]
 8008f00:	607a      	str	r2, [r7, #4]
 8008f02:	210f      	movs	r1, #15
 8008f04:	187b      	adds	r3, r7, r1
 8008f06:	1c02      	adds	r2, r0, #0
 8008f08:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	187b      	adds	r3, r7, r1
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	b25b      	sxtb	r3, r3
 8008f12:	0011      	movs	r1, r2
 8008f14:	0018      	movs	r0, r3
 8008f16:	f7ff ff5d 	bl	8008dd4 <__NVIC_SetPriority>
}
 8008f1a:	46c0      	nop			@ (mov r8, r8)
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	b004      	add	sp, #16
 8008f20:	bd80      	pop	{r7, pc}

08008f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008f22:	b580      	push	{r7, lr}
 8008f24:	b082      	sub	sp, #8
 8008f26:	af00      	add	r7, sp, #0
 8008f28:	0002      	movs	r2, r0
 8008f2a:	1dfb      	adds	r3, r7, #7
 8008f2c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8008f2e:	1dfb      	adds	r3, r7, #7
 8008f30:	781b      	ldrb	r3, [r3, #0]
 8008f32:	b25b      	sxtb	r3, r3
 8008f34:	0018      	movs	r0, r3
 8008f36:	f7ff ff33 	bl	8008da0 <__NVIC_EnableIRQ>
}
 8008f3a:	46c0      	nop			@ (mov r8, r8)
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	b002      	add	sp, #8
 8008f40:	bd80      	pop	{r7, pc}

08008f42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008f42:	b580      	push	{r7, lr}
 8008f44:	b082      	sub	sp, #8
 8008f46:	af00      	add	r7, sp, #0
 8008f48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	0018      	movs	r0, r3
 8008f4e:	f7ff ffaf 	bl	8008eb0 <SysTick_Config>
 8008f52:	0003      	movs	r3, r0
}
 8008f54:	0018      	movs	r0, r3
 8008f56:	46bd      	mov	sp, r7
 8008f58:	b002      	add	sp, #8
 8008f5a:	bd80      	pop	{r7, pc}

08008f5c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008f5c:	b580      	push	{r7, lr}
 8008f5e:	b084      	sub	sp, #16
 8008f60:	af00      	add	r7, sp, #0
 8008f62:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d101      	bne.n	8008f6e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8008f6a:	2301      	movs	r3, #1
 8008f6c:	e061      	b.n	8009032 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	4a32      	ldr	r2, [pc, #200]	@ (800903c <HAL_DMA_Init+0xe0>)
 8008f74:	4694      	mov	ip, r2
 8008f76:	4463      	add	r3, ip
 8008f78:	2114      	movs	r1, #20
 8008f7a:	0018      	movs	r0, r3
 8008f7c:	f7f7 f8e0 	bl	8000140 <__udivsi3>
 8008f80:	0003      	movs	r3, r0
 8008f82:	009a      	lsls	r2, r3, #2
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4a2d      	ldr	r2, [pc, #180]	@ (8009040 <HAL_DMA_Init+0xe4>)
 8008f8c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2225      	movs	r2, #37	@ 0x25
 8008f92:	2102      	movs	r1, #2
 8008f94:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	4a28      	ldr	r2, [pc, #160]	@ (8009044 <HAL_DMA_Init+0xe8>)
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008fae:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	691b      	ldr	r3, [r3, #16]
 8008fb4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008fba:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	699b      	ldr	r3, [r3, #24]
 8008fc0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008fc6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	6a1b      	ldr	r3, [r3, #32]
 8008fcc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68fa      	ldr	r2, [r7, #12]
 8008fda:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	689a      	ldr	r2, [r3, #8]
 8008fe0:	2380      	movs	r3, #128	@ 0x80
 8008fe2:	01db      	lsls	r3, r3, #7
 8008fe4:	429a      	cmp	r2, r3
 8008fe6:	d018      	beq.n	800901a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008fe8:	4b17      	ldr	r3, [pc, #92]	@ (8009048 <HAL_DMA_Init+0xec>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008ff0:	211c      	movs	r1, #28
 8008ff2:	400b      	ands	r3, r1
 8008ff4:	210f      	movs	r1, #15
 8008ff6:	4099      	lsls	r1, r3
 8008ff8:	000b      	movs	r3, r1
 8008ffa:	43d9      	mvns	r1, r3
 8008ffc:	4b12      	ldr	r3, [pc, #72]	@ (8009048 <HAL_DMA_Init+0xec>)
 8008ffe:	400a      	ands	r2, r1
 8009000:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009002:	4b11      	ldr	r3, [pc, #68]	@ (8009048 <HAL_DMA_Init+0xec>)
 8009004:	6819      	ldr	r1, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	685a      	ldr	r2, [r3, #4]
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800900e:	201c      	movs	r0, #28
 8009010:	4003      	ands	r3, r0
 8009012:	409a      	lsls	r2, r3
 8009014:	4b0c      	ldr	r3, [pc, #48]	@ (8009048 <HAL_DMA_Init+0xec>)
 8009016:	430a      	orrs	r2, r1
 8009018:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2200      	movs	r2, #0
 800901e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	2225      	movs	r2, #37	@ 0x25
 8009024:	2101      	movs	r1, #1
 8009026:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2224      	movs	r2, #36	@ 0x24
 800902c:	2100      	movs	r1, #0
 800902e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009030:	2300      	movs	r3, #0
}
 8009032:	0018      	movs	r0, r3
 8009034:	46bd      	mov	sp, r7
 8009036:	b004      	add	sp, #16
 8009038:	bd80      	pop	{r7, pc}
 800903a:	46c0      	nop			@ (mov r8, r8)
 800903c:	bffdfff8 	.word	0xbffdfff8
 8009040:	40020000 	.word	0x40020000
 8009044:	ffff800f 	.word	0xffff800f
 8009048:	400200a8 	.word	0x400200a8

0800904c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b082      	sub	sp, #8
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d101      	bne.n	800905e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800905a:	2301      	movs	r3, #1
 800905c:	e04a      	b.n	80090f4 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	681a      	ldr	r2, [r3, #0]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	2101      	movs	r1, #1
 800906a:	438a      	bics	r2, r1
 800906c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	4a22      	ldr	r2, [pc, #136]	@ (80090fc <HAL_DMA_DeInit+0xb0>)
 8009074:	4694      	mov	ip, r2
 8009076:	4463      	add	r3, ip
 8009078:	2114      	movs	r1, #20
 800907a:	0018      	movs	r0, r3
 800907c:	f7f7 f860 	bl	8000140 <__udivsi3>
 8009080:	0003      	movs	r3, r0
 8009082:	009a      	lsls	r2, r3, #2
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	4a1d      	ldr	r2, [pc, #116]	@ (8009100 <HAL_DMA_DeInit+0xb4>)
 800908c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2200      	movs	r2, #0
 8009094:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800909a:	221c      	movs	r2, #28
 800909c:	401a      	ands	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80090a2:	2101      	movs	r1, #1
 80090a4:	4091      	lsls	r1, r2
 80090a6:	000a      	movs	r2, r1
 80090a8:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80090aa:	4b16      	ldr	r3, [pc, #88]	@ (8009104 <HAL_DMA_DeInit+0xb8>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80090b2:	211c      	movs	r1, #28
 80090b4:	400b      	ands	r3, r1
 80090b6:	210f      	movs	r1, #15
 80090b8:	4099      	lsls	r1, r3
 80090ba:	000b      	movs	r3, r1
 80090bc:	43d9      	mvns	r1, r3
 80090be:	4b11      	ldr	r3, [pc, #68]	@ (8009104 <HAL_DMA_DeInit+0xb8>)
 80090c0:	400a      	ands	r2, r1
 80090c2:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	2200      	movs	r2, #0
 80090c8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	2200      	movs	r2, #0
 80090ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	2200      	movs	r2, #0
 80090d4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	2200      	movs	r2, #0
 80090e0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	2225      	movs	r2, #37	@ 0x25
 80090e6:	2100      	movs	r1, #0
 80090e8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2224      	movs	r2, #36	@ 0x24
 80090ee:	2100      	movs	r1, #0
 80090f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090f2:	2300      	movs	r3, #0
}
 80090f4:	0018      	movs	r0, r3
 80090f6:	46bd      	mov	sp, r7
 80090f8:	b002      	add	sp, #8
 80090fa:	bd80      	pop	{r7, pc}
 80090fc:	bffdfff8 	.word	0xbffdfff8
 8009100:	40020000 	.word	0x40020000
 8009104:	400200a8 	.word	0x400200a8

08009108 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009108:	b580      	push	{r7, lr}
 800910a:	b086      	sub	sp, #24
 800910c:	af00      	add	r7, sp, #0
 800910e:	60f8      	str	r0, [r7, #12]
 8009110:	60b9      	str	r1, [r7, #8]
 8009112:	607a      	str	r2, [r7, #4]
 8009114:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009116:	2317      	movs	r3, #23
 8009118:	18fb      	adds	r3, r7, r3
 800911a:	2200      	movs	r2, #0
 800911c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2224      	movs	r2, #36	@ 0x24
 8009122:	5c9b      	ldrb	r3, [r3, r2]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d101      	bne.n	800912c <HAL_DMA_Start_IT+0x24>
 8009128:	2302      	movs	r3, #2
 800912a:	e04f      	b.n	80091cc <HAL_DMA_Start_IT+0xc4>
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	2224      	movs	r2, #36	@ 0x24
 8009130:	2101      	movs	r1, #1
 8009132:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009134:	68fb      	ldr	r3, [r7, #12]
 8009136:	2225      	movs	r2, #37	@ 0x25
 8009138:	5c9b      	ldrb	r3, [r3, r2]
 800913a:	b2db      	uxtb	r3, r3
 800913c:	2b01      	cmp	r3, #1
 800913e:	d13a      	bne.n	80091b6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2225      	movs	r2, #37	@ 0x25
 8009144:	2102      	movs	r1, #2
 8009146:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009148:	68fb      	ldr	r3, [r7, #12]
 800914a:	2200      	movs	r2, #0
 800914c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	681a      	ldr	r2, [r3, #0]
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	2101      	movs	r1, #1
 800915a:	438a      	bics	r2, r1
 800915c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	687a      	ldr	r2, [r7, #4]
 8009162:	68b9      	ldr	r1, [r7, #8]
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f000 f976 	bl	8009456 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800916e:	2b00      	cmp	r3, #0
 8009170:	d008      	beq.n	8009184 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	681a      	ldr	r2, [r3, #0]
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	210e      	movs	r1, #14
 800917e:	430a      	orrs	r2, r1
 8009180:	601a      	str	r2, [r3, #0]
 8009182:	e00f      	b.n	80091a4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	681a      	ldr	r2, [r3, #0]
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	2104      	movs	r1, #4
 8009190:	438a      	bics	r2, r1
 8009192:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	681a      	ldr	r2, [r3, #0]
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	210a      	movs	r1, #10
 80091a0:	430a      	orrs	r2, r1
 80091a2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	681b      	ldr	r3, [r3, #0]
 80091a8:	681a      	ldr	r2, [r3, #0]
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	2101      	movs	r1, #1
 80091b0:	430a      	orrs	r2, r1
 80091b2:	601a      	str	r2, [r3, #0]
 80091b4:	e007      	b.n	80091c6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2224      	movs	r2, #36	@ 0x24
 80091ba:	2100      	movs	r1, #0
 80091bc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80091be:	2317      	movs	r3, #23
 80091c0:	18fb      	adds	r3, r7, r3
 80091c2:	2202      	movs	r2, #2
 80091c4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80091c6:	2317      	movs	r3, #23
 80091c8:	18fb      	adds	r3, r7, r3
 80091ca:	781b      	ldrb	r3, [r3, #0]
}
 80091cc:	0018      	movs	r0, r3
 80091ce:	46bd      	mov	sp, r7
 80091d0:	b006      	add	sp, #24
 80091d2:	bd80      	pop	{r7, pc}

080091d4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b084      	sub	sp, #16
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091dc:	230f      	movs	r3, #15
 80091de:	18fb      	adds	r3, r7, r3
 80091e0:	2200      	movs	r2, #0
 80091e2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	2225      	movs	r2, #37	@ 0x25
 80091e8:	5c9b      	ldrb	r3, [r3, r2]
 80091ea:	b2db      	uxtb	r3, r3
 80091ec:	2b02      	cmp	r3, #2
 80091ee:	d008      	beq.n	8009202 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	2204      	movs	r2, #4
 80091f4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	2224      	movs	r2, #36	@ 0x24
 80091fa:	2100      	movs	r1, #0
 80091fc:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e024      	b.n	800924c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	681a      	ldr	r2, [r3, #0]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	210e      	movs	r1, #14
 800920e:	438a      	bics	r2, r1
 8009210:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2101      	movs	r1, #1
 800921e:	438a      	bics	r2, r1
 8009220:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009226:	221c      	movs	r2, #28
 8009228:	401a      	ands	r2, r3
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800922e:	2101      	movs	r1, #1
 8009230:	4091      	lsls	r1, r2
 8009232:	000a      	movs	r2, r1
 8009234:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	2225      	movs	r2, #37	@ 0x25
 800923a:	2101      	movs	r1, #1
 800923c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	2224      	movs	r2, #36	@ 0x24
 8009242:	2100      	movs	r1, #0
 8009244:	5499      	strb	r1, [r3, r2]

    return status;
 8009246:	230f      	movs	r3, #15
 8009248:	18fb      	adds	r3, r7, r3
 800924a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800924c:	0018      	movs	r0, r3
 800924e:	46bd      	mov	sp, r7
 8009250:	b004      	add	sp, #16
 8009252:	bd80      	pop	{r7, pc}

08009254 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800925c:	210f      	movs	r1, #15
 800925e:	187b      	adds	r3, r7, r1
 8009260:	2200      	movs	r2, #0
 8009262:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2225      	movs	r2, #37	@ 0x25
 8009268:	5c9b      	ldrb	r3, [r3, r2]
 800926a:	b2db      	uxtb	r3, r3
 800926c:	2b02      	cmp	r3, #2
 800926e:	d006      	beq.n	800927e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2204      	movs	r2, #4
 8009274:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009276:	187b      	adds	r3, r7, r1
 8009278:	2201      	movs	r2, #1
 800927a:	701a      	strb	r2, [r3, #0]
 800927c:	e02a      	b.n	80092d4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	681a      	ldr	r2, [r3, #0]
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	210e      	movs	r1, #14
 800928a:	438a      	bics	r2, r1
 800928c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	681a      	ldr	r2, [r3, #0]
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	2101      	movs	r1, #1
 800929a:	438a      	bics	r2, r1
 800929c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092a2:	221c      	movs	r2, #28
 80092a4:	401a      	ands	r2, r3
 80092a6:	687b      	ldr	r3, [r7, #4]
 80092a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092aa:	2101      	movs	r1, #1
 80092ac:	4091      	lsls	r1, r2
 80092ae:	000a      	movs	r2, r1
 80092b0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2225      	movs	r2, #37	@ 0x25
 80092b6:	2101      	movs	r1, #1
 80092b8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	2224      	movs	r2, #36	@ 0x24
 80092be:	2100      	movs	r1, #0
 80092c0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092c6:	2b00      	cmp	r3, #0
 80092c8:	d004      	beq.n	80092d4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	0010      	movs	r0, r2
 80092d2:	4798      	blx	r3
    }
  }
  return status;
 80092d4:	230f      	movs	r3, #15
 80092d6:	18fb      	adds	r3, r7, r3
 80092d8:	781b      	ldrb	r3, [r3, #0]
}
 80092da:	0018      	movs	r0, r3
 80092dc:	46bd      	mov	sp, r7
 80092de:	b004      	add	sp, #16
 80092e0:	bd80      	pop	{r7, pc}

080092e2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b084      	sub	sp, #16
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	681b      	ldr	r3, [r3, #0]
 80092f8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80092fe:	221c      	movs	r2, #28
 8009300:	4013      	ands	r3, r2
 8009302:	2204      	movs	r2, #4
 8009304:	409a      	lsls	r2, r3
 8009306:	0013      	movs	r3, r2
 8009308:	68fa      	ldr	r2, [r7, #12]
 800930a:	4013      	ands	r3, r2
 800930c:	d026      	beq.n	800935c <HAL_DMA_IRQHandler+0x7a>
 800930e:	68bb      	ldr	r3, [r7, #8]
 8009310:	2204      	movs	r2, #4
 8009312:	4013      	ands	r3, r2
 8009314:	d022      	beq.n	800935c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	2220      	movs	r2, #32
 800931e:	4013      	ands	r3, r2
 8009320:	d107      	bne.n	8009332 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	681a      	ldr	r2, [r3, #0]
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	2104      	movs	r1, #4
 800932e:	438a      	bics	r2, r1
 8009330:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009336:	221c      	movs	r2, #28
 8009338:	401a      	ands	r2, r3
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800933e:	2104      	movs	r1, #4
 8009340:	4091      	lsls	r1, r2
 8009342:	000a      	movs	r2, r1
 8009344:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800934a:	2b00      	cmp	r3, #0
 800934c:	d100      	bne.n	8009350 <HAL_DMA_IRQHandler+0x6e>
 800934e:	e071      	b.n	8009434 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009354:	687a      	ldr	r2, [r7, #4]
 8009356:	0010      	movs	r0, r2
 8009358:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800935a:	e06b      	b.n	8009434 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009360:	221c      	movs	r2, #28
 8009362:	4013      	ands	r3, r2
 8009364:	2202      	movs	r2, #2
 8009366:	409a      	lsls	r2, r3
 8009368:	0013      	movs	r3, r2
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	4013      	ands	r3, r2
 800936e:	d02d      	beq.n	80093cc <HAL_DMA_IRQHandler+0xea>
 8009370:	68bb      	ldr	r3, [r7, #8]
 8009372:	2202      	movs	r2, #2
 8009374:	4013      	ands	r3, r2
 8009376:	d029      	beq.n	80093cc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	2220      	movs	r2, #32
 8009380:	4013      	ands	r3, r2
 8009382:	d10b      	bne.n	800939c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	210a      	movs	r1, #10
 8009390:	438a      	bics	r2, r1
 8009392:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2225      	movs	r2, #37	@ 0x25
 8009398:	2101      	movs	r1, #1
 800939a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093a0:	221c      	movs	r2, #28
 80093a2:	401a      	ands	r2, r3
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80093a8:	2102      	movs	r1, #2
 80093aa:	4091      	lsls	r1, r2
 80093ac:	000a      	movs	r2, r1
 80093ae:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2224      	movs	r2, #36	@ 0x24
 80093b4:	2100      	movs	r1, #0
 80093b6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d039      	beq.n	8009434 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093c4:	687a      	ldr	r2, [r7, #4]
 80093c6:	0010      	movs	r0, r2
 80093c8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80093ca:	e033      	b.n	8009434 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093d0:	221c      	movs	r2, #28
 80093d2:	4013      	ands	r3, r2
 80093d4:	2208      	movs	r2, #8
 80093d6:	409a      	lsls	r2, r3
 80093d8:	0013      	movs	r3, r2
 80093da:	68fa      	ldr	r2, [r7, #12]
 80093dc:	4013      	ands	r3, r2
 80093de:	d02a      	beq.n	8009436 <HAL_DMA_IRQHandler+0x154>
 80093e0:	68bb      	ldr	r3, [r7, #8]
 80093e2:	2208      	movs	r2, #8
 80093e4:	4013      	ands	r3, r2
 80093e6:	d026      	beq.n	8009436 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	681a      	ldr	r2, [r3, #0]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	681b      	ldr	r3, [r3, #0]
 80093f2:	210e      	movs	r1, #14
 80093f4:	438a      	bics	r2, r1
 80093f6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fc:	221c      	movs	r2, #28
 80093fe:	401a      	ands	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009404:	2101      	movs	r1, #1
 8009406:	4091      	lsls	r1, r2
 8009408:	000a      	movs	r2, r1
 800940a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	2201      	movs	r2, #1
 8009410:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2225      	movs	r2, #37	@ 0x25
 8009416:	2101      	movs	r1, #1
 8009418:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2224      	movs	r2, #36	@ 0x24
 800941e:	2100      	movs	r1, #0
 8009420:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	0010      	movs	r0, r2
 8009432:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009434:	46c0      	nop			@ (mov r8, r8)
 8009436:	46c0      	nop			@ (mov r8, r8)
}
 8009438:	46bd      	mov	sp, r7
 800943a:	b004      	add	sp, #16
 800943c:	bd80      	pop	{r7, pc}

0800943e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800943e:	b580      	push	{r7, lr}
 8009440:	b082      	sub	sp, #8
 8009442:	af00      	add	r7, sp, #0
 8009444:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	2225      	movs	r2, #37	@ 0x25
 800944a:	5c9b      	ldrb	r3, [r3, r2]
 800944c:	b2db      	uxtb	r3, r3
}
 800944e:	0018      	movs	r0, r3
 8009450:	46bd      	mov	sp, r7
 8009452:	b002      	add	sp, #8
 8009454:	bd80      	pop	{r7, pc}

08009456 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009456:	b580      	push	{r7, lr}
 8009458:	b084      	sub	sp, #16
 800945a:	af00      	add	r7, sp, #0
 800945c:	60f8      	str	r0, [r7, #12]
 800945e:	60b9      	str	r1, [r7, #8]
 8009460:	607a      	str	r2, [r7, #4]
 8009462:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009468:	221c      	movs	r2, #28
 800946a:	401a      	ands	r2, r3
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009470:	2101      	movs	r1, #1
 8009472:	4091      	lsls	r1, r2
 8009474:	000a      	movs	r2, r1
 8009476:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	683a      	ldr	r2, [r7, #0]
 800947e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	689b      	ldr	r3, [r3, #8]
 8009484:	2b10      	cmp	r3, #16
 8009486:	d108      	bne.n	800949a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	687a      	ldr	r2, [r7, #4]
 800948e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	68ba      	ldr	r2, [r7, #8]
 8009496:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009498:	e007      	b.n	80094aa <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	681b      	ldr	r3, [r3, #0]
 800949e:	68ba      	ldr	r2, [r7, #8]
 80094a0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80094a2:	68fb      	ldr	r3, [r7, #12]
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	687a      	ldr	r2, [r7, #4]
 80094a8:	60da      	str	r2, [r3, #12]
}
 80094aa:	46c0      	nop			@ (mov r8, r8)
 80094ac:	46bd      	mov	sp, r7
 80094ae:	b004      	add	sp, #16
 80094b0:	bd80      	pop	{r7, pc}
	...

080094b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80094b4:	b580      	push	{r7, lr}
 80094b6:	b086      	sub	sp, #24
 80094b8:	af00      	add	r7, sp, #0
 80094ba:	6078      	str	r0, [r7, #4]
 80094bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80094be:	2300      	movs	r3, #0
 80094c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80094c2:	2300      	movs	r3, #0
 80094c4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80094c6:	2300      	movs	r3, #0
 80094c8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80094ca:	e155      	b.n	8009778 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80094cc:	683b      	ldr	r3, [r7, #0]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2101      	movs	r1, #1
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	4091      	lsls	r1, r2
 80094d6:	000a      	movs	r2, r1
 80094d8:	4013      	ands	r3, r2
 80094da:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80094dc:	68fb      	ldr	r3, [r7, #12]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d100      	bne.n	80094e4 <HAL_GPIO_Init+0x30>
 80094e2:	e146      	b.n	8009772 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	685b      	ldr	r3, [r3, #4]
 80094e8:	2203      	movs	r2, #3
 80094ea:	4013      	ands	r3, r2
 80094ec:	2b01      	cmp	r3, #1
 80094ee:	d005      	beq.n	80094fc <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80094f0:	683b      	ldr	r3, [r7, #0]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	2203      	movs	r2, #3
 80094f6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80094f8:	2b02      	cmp	r3, #2
 80094fa:	d130      	bne.n	800955e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	689b      	ldr	r3, [r3, #8]
 8009500:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009502:	697b      	ldr	r3, [r7, #20]
 8009504:	005b      	lsls	r3, r3, #1
 8009506:	2203      	movs	r2, #3
 8009508:	409a      	lsls	r2, r3
 800950a:	0013      	movs	r3, r2
 800950c:	43da      	mvns	r2, r3
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	4013      	ands	r3, r2
 8009512:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009514:	683b      	ldr	r3, [r7, #0]
 8009516:	68da      	ldr	r2, [r3, #12]
 8009518:	697b      	ldr	r3, [r7, #20]
 800951a:	005b      	lsls	r3, r3, #1
 800951c:	409a      	lsls	r2, r3
 800951e:	0013      	movs	r3, r2
 8009520:	693a      	ldr	r2, [r7, #16]
 8009522:	4313      	orrs	r3, r2
 8009524:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	693a      	ldr	r2, [r7, #16]
 800952a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	685b      	ldr	r3, [r3, #4]
 8009530:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009532:	2201      	movs	r2, #1
 8009534:	697b      	ldr	r3, [r7, #20]
 8009536:	409a      	lsls	r2, r3
 8009538:	0013      	movs	r3, r2
 800953a:	43da      	mvns	r2, r3
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	4013      	ands	r3, r2
 8009540:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	091b      	lsrs	r3, r3, #4
 8009548:	2201      	movs	r2, #1
 800954a:	401a      	ands	r2, r3
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	409a      	lsls	r2, r3
 8009550:	0013      	movs	r3, r2
 8009552:	693a      	ldr	r2, [r7, #16]
 8009554:	4313      	orrs	r3, r2
 8009556:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	693a      	ldr	r2, [r7, #16]
 800955c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800955e:	683b      	ldr	r3, [r7, #0]
 8009560:	685b      	ldr	r3, [r3, #4]
 8009562:	2203      	movs	r2, #3
 8009564:	4013      	ands	r3, r2
 8009566:	2b03      	cmp	r3, #3
 8009568:	d017      	beq.n	800959a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	68db      	ldr	r3, [r3, #12]
 800956e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009570:	697b      	ldr	r3, [r7, #20]
 8009572:	005b      	lsls	r3, r3, #1
 8009574:	2203      	movs	r2, #3
 8009576:	409a      	lsls	r2, r3
 8009578:	0013      	movs	r3, r2
 800957a:	43da      	mvns	r2, r3
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	4013      	ands	r3, r2
 8009580:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009582:	683b      	ldr	r3, [r7, #0]
 8009584:	689a      	ldr	r2, [r3, #8]
 8009586:	697b      	ldr	r3, [r7, #20]
 8009588:	005b      	lsls	r3, r3, #1
 800958a:	409a      	lsls	r2, r3
 800958c:	0013      	movs	r3, r2
 800958e:	693a      	ldr	r2, [r7, #16]
 8009590:	4313      	orrs	r3, r2
 8009592:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	693a      	ldr	r2, [r7, #16]
 8009598:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	2203      	movs	r2, #3
 80095a0:	4013      	ands	r3, r2
 80095a2:	2b02      	cmp	r3, #2
 80095a4:	d123      	bne.n	80095ee <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	08da      	lsrs	r2, r3, #3
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	3208      	adds	r2, #8
 80095ae:	0092      	lsls	r2, r2, #2
 80095b0:	58d3      	ldr	r3, [r2, r3]
 80095b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	2207      	movs	r2, #7
 80095b8:	4013      	ands	r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	220f      	movs	r2, #15
 80095be:	409a      	lsls	r2, r3
 80095c0:	0013      	movs	r3, r2
 80095c2:	43da      	mvns	r2, r3
 80095c4:	693b      	ldr	r3, [r7, #16]
 80095c6:	4013      	ands	r3, r2
 80095c8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80095ca:	683b      	ldr	r3, [r7, #0]
 80095cc:	691a      	ldr	r2, [r3, #16]
 80095ce:	697b      	ldr	r3, [r7, #20]
 80095d0:	2107      	movs	r1, #7
 80095d2:	400b      	ands	r3, r1
 80095d4:	009b      	lsls	r3, r3, #2
 80095d6:	409a      	lsls	r2, r3
 80095d8:	0013      	movs	r3, r2
 80095da:	693a      	ldr	r2, [r7, #16]
 80095dc:	4313      	orrs	r3, r2
 80095de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	08da      	lsrs	r2, r3, #3
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	3208      	adds	r2, #8
 80095e8:	0092      	lsls	r2, r2, #2
 80095ea:	6939      	ldr	r1, [r7, #16]
 80095ec:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80095f4:	697b      	ldr	r3, [r7, #20]
 80095f6:	005b      	lsls	r3, r3, #1
 80095f8:	2203      	movs	r2, #3
 80095fa:	409a      	lsls	r2, r3
 80095fc:	0013      	movs	r3, r2
 80095fe:	43da      	mvns	r2, r3
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	4013      	ands	r3, r2
 8009604:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009606:	683b      	ldr	r3, [r7, #0]
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2203      	movs	r2, #3
 800960c:	401a      	ands	r2, r3
 800960e:	697b      	ldr	r3, [r7, #20]
 8009610:	005b      	lsls	r3, r3, #1
 8009612:	409a      	lsls	r2, r3
 8009614:	0013      	movs	r3, r2
 8009616:	693a      	ldr	r2, [r7, #16]
 8009618:	4313      	orrs	r3, r2
 800961a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	693a      	ldr	r2, [r7, #16]
 8009620:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8009622:	683b      	ldr	r3, [r7, #0]
 8009624:	685a      	ldr	r2, [r3, #4]
 8009626:	23c0      	movs	r3, #192	@ 0xc0
 8009628:	029b      	lsls	r3, r3, #10
 800962a:	4013      	ands	r3, r2
 800962c:	d100      	bne.n	8009630 <HAL_GPIO_Init+0x17c>
 800962e:	e0a0      	b.n	8009772 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009630:	4b57      	ldr	r3, [pc, #348]	@ (8009790 <HAL_GPIO_Init+0x2dc>)
 8009632:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009634:	4b56      	ldr	r3, [pc, #344]	@ (8009790 <HAL_GPIO_Init+0x2dc>)
 8009636:	2101      	movs	r1, #1
 8009638:	430a      	orrs	r2, r1
 800963a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800963c:	4a55      	ldr	r2, [pc, #340]	@ (8009794 <HAL_GPIO_Init+0x2e0>)
 800963e:	697b      	ldr	r3, [r7, #20]
 8009640:	089b      	lsrs	r3, r3, #2
 8009642:	3302      	adds	r3, #2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	589b      	ldr	r3, [r3, r2]
 8009648:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800964a:	697b      	ldr	r3, [r7, #20]
 800964c:	2203      	movs	r2, #3
 800964e:	4013      	ands	r3, r2
 8009650:	009b      	lsls	r3, r3, #2
 8009652:	220f      	movs	r2, #15
 8009654:	409a      	lsls	r2, r3
 8009656:	0013      	movs	r3, r2
 8009658:	43da      	mvns	r2, r3
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	4013      	ands	r3, r2
 800965e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8009660:	687a      	ldr	r2, [r7, #4]
 8009662:	23a0      	movs	r3, #160	@ 0xa0
 8009664:	05db      	lsls	r3, r3, #23
 8009666:	429a      	cmp	r2, r3
 8009668:	d01f      	beq.n	80096aa <HAL_GPIO_Init+0x1f6>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	4a4a      	ldr	r2, [pc, #296]	@ (8009798 <HAL_GPIO_Init+0x2e4>)
 800966e:	4293      	cmp	r3, r2
 8009670:	d019      	beq.n	80096a6 <HAL_GPIO_Init+0x1f2>
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	4a49      	ldr	r2, [pc, #292]	@ (800979c <HAL_GPIO_Init+0x2e8>)
 8009676:	4293      	cmp	r3, r2
 8009678:	d013      	beq.n	80096a2 <HAL_GPIO_Init+0x1ee>
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	4a48      	ldr	r2, [pc, #288]	@ (80097a0 <HAL_GPIO_Init+0x2ec>)
 800967e:	4293      	cmp	r3, r2
 8009680:	d00d      	beq.n	800969e <HAL_GPIO_Init+0x1ea>
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	4a47      	ldr	r2, [pc, #284]	@ (80097a4 <HAL_GPIO_Init+0x2f0>)
 8009686:	4293      	cmp	r3, r2
 8009688:	d007      	beq.n	800969a <HAL_GPIO_Init+0x1e6>
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	4a46      	ldr	r2, [pc, #280]	@ (80097a8 <HAL_GPIO_Init+0x2f4>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d101      	bne.n	8009696 <HAL_GPIO_Init+0x1e2>
 8009692:	2305      	movs	r3, #5
 8009694:	e00a      	b.n	80096ac <HAL_GPIO_Init+0x1f8>
 8009696:	2306      	movs	r3, #6
 8009698:	e008      	b.n	80096ac <HAL_GPIO_Init+0x1f8>
 800969a:	2304      	movs	r3, #4
 800969c:	e006      	b.n	80096ac <HAL_GPIO_Init+0x1f8>
 800969e:	2303      	movs	r3, #3
 80096a0:	e004      	b.n	80096ac <HAL_GPIO_Init+0x1f8>
 80096a2:	2302      	movs	r3, #2
 80096a4:	e002      	b.n	80096ac <HAL_GPIO_Init+0x1f8>
 80096a6:	2301      	movs	r3, #1
 80096a8:	e000      	b.n	80096ac <HAL_GPIO_Init+0x1f8>
 80096aa:	2300      	movs	r3, #0
 80096ac:	697a      	ldr	r2, [r7, #20]
 80096ae:	2103      	movs	r1, #3
 80096b0:	400a      	ands	r2, r1
 80096b2:	0092      	lsls	r2, r2, #2
 80096b4:	4093      	lsls	r3, r2
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	4313      	orrs	r3, r2
 80096ba:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80096bc:	4935      	ldr	r1, [pc, #212]	@ (8009794 <HAL_GPIO_Init+0x2e0>)
 80096be:	697b      	ldr	r3, [r7, #20]
 80096c0:	089b      	lsrs	r3, r3, #2
 80096c2:	3302      	adds	r3, #2
 80096c4:	009b      	lsls	r3, r3, #2
 80096c6:	693a      	ldr	r2, [r7, #16]
 80096c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80096ca:	4b38      	ldr	r3, [pc, #224]	@ (80097ac <HAL_GPIO_Init+0x2f8>)
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	43da      	mvns	r2, r3
 80096d4:	693b      	ldr	r3, [r7, #16]
 80096d6:	4013      	ands	r3, r2
 80096d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	685a      	ldr	r2, [r3, #4]
 80096de:	2380      	movs	r3, #128	@ 0x80
 80096e0:	035b      	lsls	r3, r3, #13
 80096e2:	4013      	ands	r3, r2
 80096e4:	d003      	beq.n	80096ee <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 80096e6:	693a      	ldr	r2, [r7, #16]
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80096ee:	4b2f      	ldr	r3, [pc, #188]	@ (80097ac <HAL_GPIO_Init+0x2f8>)
 80096f0:	693a      	ldr	r2, [r7, #16]
 80096f2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80096f4:	4b2d      	ldr	r3, [pc, #180]	@ (80097ac <HAL_GPIO_Init+0x2f8>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	43da      	mvns	r2, r3
 80096fe:	693b      	ldr	r3, [r7, #16]
 8009700:	4013      	ands	r3, r2
 8009702:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009704:	683b      	ldr	r3, [r7, #0]
 8009706:	685a      	ldr	r2, [r3, #4]
 8009708:	2380      	movs	r3, #128	@ 0x80
 800970a:	039b      	lsls	r3, r3, #14
 800970c:	4013      	ands	r3, r2
 800970e:	d003      	beq.n	8009718 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8009710:	693a      	ldr	r2, [r7, #16]
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	4313      	orrs	r3, r2
 8009716:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8009718:	4b24      	ldr	r3, [pc, #144]	@ (80097ac <HAL_GPIO_Init+0x2f8>)
 800971a:	693a      	ldr	r2, [r7, #16]
 800971c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800971e:	4b23      	ldr	r3, [pc, #140]	@ (80097ac <HAL_GPIO_Init+0x2f8>)
 8009720:	685b      	ldr	r3, [r3, #4]
 8009722:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	43da      	mvns	r2, r3
 8009728:	693b      	ldr	r3, [r7, #16]
 800972a:	4013      	ands	r3, r2
 800972c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800972e:	683b      	ldr	r3, [r7, #0]
 8009730:	685a      	ldr	r2, [r3, #4]
 8009732:	2380      	movs	r3, #128	@ 0x80
 8009734:	029b      	lsls	r3, r3, #10
 8009736:	4013      	ands	r3, r2
 8009738:	d003      	beq.n	8009742 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800973a:	693a      	ldr	r2, [r7, #16]
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	4313      	orrs	r3, r2
 8009740:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8009742:	4b1a      	ldr	r3, [pc, #104]	@ (80097ac <HAL_GPIO_Init+0x2f8>)
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8009748:	4b18      	ldr	r3, [pc, #96]	@ (80097ac <HAL_GPIO_Init+0x2f8>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	43da      	mvns	r2, r3
 8009752:	693b      	ldr	r3, [r7, #16]
 8009754:	4013      	ands	r3, r2
 8009756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	685a      	ldr	r2, [r3, #4]
 800975c:	2380      	movs	r3, #128	@ 0x80
 800975e:	025b      	lsls	r3, r3, #9
 8009760:	4013      	ands	r3, r2
 8009762:	d003      	beq.n	800976c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8009764:	693a      	ldr	r2, [r7, #16]
 8009766:	68fb      	ldr	r3, [r7, #12]
 8009768:	4313      	orrs	r3, r2
 800976a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800976c:	4b0f      	ldr	r3, [pc, #60]	@ (80097ac <HAL_GPIO_Init+0x2f8>)
 800976e:	693a      	ldr	r2, [r7, #16]
 8009770:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	3301      	adds	r3, #1
 8009776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	40da      	lsrs	r2, r3
 8009780:	1e13      	subs	r3, r2, #0
 8009782:	d000      	beq.n	8009786 <HAL_GPIO_Init+0x2d2>
 8009784:	e6a2      	b.n	80094cc <HAL_GPIO_Init+0x18>
  }
}
 8009786:	46c0      	nop			@ (mov r8, r8)
 8009788:	46c0      	nop			@ (mov r8, r8)
 800978a:	46bd      	mov	sp, r7
 800978c:	b006      	add	sp, #24
 800978e:	bd80      	pop	{r7, pc}
 8009790:	40021000 	.word	0x40021000
 8009794:	40010000 	.word	0x40010000
 8009798:	50000400 	.word	0x50000400
 800979c:	50000800 	.word	0x50000800
 80097a0:	50000c00 	.word	0x50000c00
 80097a4:	50001000 	.word	0x50001000
 80097a8:	50001c00 	.word	0x50001c00
 80097ac:	40010400 	.word	0x40010400

080097b0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b086      	sub	sp, #24
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80097ba:	2300      	movs	r3, #0
 80097bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80097be:	2300      	movs	r3, #0
 80097c0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 80097c2:	2300      	movs	r3, #0
 80097c4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 80097c6:	e0bc      	b.n	8009942 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 80097c8:	2201      	movs	r2, #1
 80097ca:	697b      	ldr	r3, [r7, #20]
 80097cc:	409a      	lsls	r2, r3
 80097ce:	683b      	ldr	r3, [r7, #0]
 80097d0:	4013      	ands	r3, r2
 80097d2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d100      	bne.n	80097dc <HAL_GPIO_DeInit+0x2c>
 80097da:	e0af      	b.n	800993c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 80097dc:	4a5e      	ldr	r2, [pc, #376]	@ (8009958 <HAL_GPIO_DeInit+0x1a8>)
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	089b      	lsrs	r3, r3, #2
 80097e2:	3302      	adds	r3, #2
 80097e4:	009b      	lsls	r3, r3, #2
 80097e6:	589b      	ldr	r3, [r3, r2]
 80097e8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2203      	movs	r2, #3
 80097ee:	4013      	ands	r3, r2
 80097f0:	009b      	lsls	r3, r3, #2
 80097f2:	220f      	movs	r2, #15
 80097f4:	409a      	lsls	r2, r3
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	4013      	ands	r3, r2
 80097fa:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 80097fc:	687a      	ldr	r2, [r7, #4]
 80097fe:	23a0      	movs	r3, #160	@ 0xa0
 8009800:	05db      	lsls	r3, r3, #23
 8009802:	429a      	cmp	r2, r3
 8009804:	d01f      	beq.n	8009846 <HAL_GPIO_DeInit+0x96>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	4a54      	ldr	r2, [pc, #336]	@ (800995c <HAL_GPIO_DeInit+0x1ac>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d019      	beq.n	8009842 <HAL_GPIO_DeInit+0x92>
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	4a53      	ldr	r2, [pc, #332]	@ (8009960 <HAL_GPIO_DeInit+0x1b0>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d013      	beq.n	800983e <HAL_GPIO_DeInit+0x8e>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	4a52      	ldr	r2, [pc, #328]	@ (8009964 <HAL_GPIO_DeInit+0x1b4>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d00d      	beq.n	800983a <HAL_GPIO_DeInit+0x8a>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	4a51      	ldr	r2, [pc, #324]	@ (8009968 <HAL_GPIO_DeInit+0x1b8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d007      	beq.n	8009836 <HAL_GPIO_DeInit+0x86>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	4a50      	ldr	r2, [pc, #320]	@ (800996c <HAL_GPIO_DeInit+0x1bc>)
 800982a:	4293      	cmp	r3, r2
 800982c:	d101      	bne.n	8009832 <HAL_GPIO_DeInit+0x82>
 800982e:	2305      	movs	r3, #5
 8009830:	e00a      	b.n	8009848 <HAL_GPIO_DeInit+0x98>
 8009832:	2306      	movs	r3, #6
 8009834:	e008      	b.n	8009848 <HAL_GPIO_DeInit+0x98>
 8009836:	2304      	movs	r3, #4
 8009838:	e006      	b.n	8009848 <HAL_GPIO_DeInit+0x98>
 800983a:	2303      	movs	r3, #3
 800983c:	e004      	b.n	8009848 <HAL_GPIO_DeInit+0x98>
 800983e:	2302      	movs	r3, #2
 8009840:	e002      	b.n	8009848 <HAL_GPIO_DeInit+0x98>
 8009842:	2301      	movs	r3, #1
 8009844:	e000      	b.n	8009848 <HAL_GPIO_DeInit+0x98>
 8009846:	2300      	movs	r3, #0
 8009848:	697a      	ldr	r2, [r7, #20]
 800984a:	2103      	movs	r1, #3
 800984c:	400a      	ands	r2, r1
 800984e:	0092      	lsls	r2, r2, #2
 8009850:	4093      	lsls	r3, r2
 8009852:	68fa      	ldr	r2, [r7, #12]
 8009854:	429a      	cmp	r2, r3
 8009856:	d132      	bne.n	80098be <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8009858:	4b45      	ldr	r3, [pc, #276]	@ (8009970 <HAL_GPIO_DeInit+0x1c0>)
 800985a:	681a      	ldr	r2, [r3, #0]
 800985c:	693b      	ldr	r3, [r7, #16]
 800985e:	43d9      	mvns	r1, r3
 8009860:	4b43      	ldr	r3, [pc, #268]	@ (8009970 <HAL_GPIO_DeInit+0x1c0>)
 8009862:	400a      	ands	r2, r1
 8009864:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8009866:	4b42      	ldr	r3, [pc, #264]	@ (8009970 <HAL_GPIO_DeInit+0x1c0>)
 8009868:	685a      	ldr	r2, [r3, #4]
 800986a:	693b      	ldr	r3, [r7, #16]
 800986c:	43d9      	mvns	r1, r3
 800986e:	4b40      	ldr	r3, [pc, #256]	@ (8009970 <HAL_GPIO_DeInit+0x1c0>)
 8009870:	400a      	ands	r2, r1
 8009872:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8009874:	4b3e      	ldr	r3, [pc, #248]	@ (8009970 <HAL_GPIO_DeInit+0x1c0>)
 8009876:	68da      	ldr	r2, [r3, #12]
 8009878:	693b      	ldr	r3, [r7, #16]
 800987a:	43d9      	mvns	r1, r3
 800987c:	4b3c      	ldr	r3, [pc, #240]	@ (8009970 <HAL_GPIO_DeInit+0x1c0>)
 800987e:	400a      	ands	r2, r1
 8009880:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8009882:	4b3b      	ldr	r3, [pc, #236]	@ (8009970 <HAL_GPIO_DeInit+0x1c0>)
 8009884:	689a      	ldr	r2, [r3, #8]
 8009886:	693b      	ldr	r3, [r7, #16]
 8009888:	43d9      	mvns	r1, r3
 800988a:	4b39      	ldr	r3, [pc, #228]	@ (8009970 <HAL_GPIO_DeInit+0x1c0>)
 800988c:	400a      	ands	r2, r1
 800988e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8009890:	697b      	ldr	r3, [r7, #20]
 8009892:	2203      	movs	r2, #3
 8009894:	4013      	ands	r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	220f      	movs	r2, #15
 800989a:	409a      	lsls	r2, r3
 800989c:	0013      	movs	r3, r2
 800989e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80098a0:	4a2d      	ldr	r2, [pc, #180]	@ (8009958 <HAL_GPIO_DeInit+0x1a8>)
 80098a2:	697b      	ldr	r3, [r7, #20]
 80098a4:	089b      	lsrs	r3, r3, #2
 80098a6:	3302      	adds	r3, #2
 80098a8:	009b      	lsls	r3, r3, #2
 80098aa:	589a      	ldr	r2, [r3, r2]
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	43d9      	mvns	r1, r3
 80098b0:	4829      	ldr	r0, [pc, #164]	@ (8009958 <HAL_GPIO_DeInit+0x1a8>)
 80098b2:	697b      	ldr	r3, [r7, #20]
 80098b4:	089b      	lsrs	r3, r3, #2
 80098b6:	400a      	ands	r2, r1
 80098b8:	3302      	adds	r3, #2
 80098ba:	009b      	lsls	r3, r3, #2
 80098bc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681a      	ldr	r2, [r3, #0]
 80098c2:	697b      	ldr	r3, [r7, #20]
 80098c4:	005b      	lsls	r3, r3, #1
 80098c6:	2103      	movs	r1, #3
 80098c8:	4099      	lsls	r1, r3
 80098ca:	000b      	movs	r3, r1
 80098cc:	431a      	orrs	r2, r3
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80098d2:	697b      	ldr	r3, [r7, #20]
 80098d4:	08da      	lsrs	r2, r3, #3
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	3208      	adds	r2, #8
 80098da:	0092      	lsls	r2, r2, #2
 80098dc:	58d3      	ldr	r3, [r2, r3]
 80098de:	697a      	ldr	r2, [r7, #20]
 80098e0:	2107      	movs	r1, #7
 80098e2:	400a      	ands	r2, r1
 80098e4:	0092      	lsls	r2, r2, #2
 80098e6:	210f      	movs	r1, #15
 80098e8:	4091      	lsls	r1, r2
 80098ea:	000a      	movs	r2, r1
 80098ec:	43d1      	mvns	r1, r2
 80098ee:	697a      	ldr	r2, [r7, #20]
 80098f0:	08d2      	lsrs	r2, r2, #3
 80098f2:	4019      	ands	r1, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	3208      	adds	r2, #8
 80098f8:	0092      	lsls	r2, r2, #2
 80098fa:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	68db      	ldr	r3, [r3, #12]
 8009900:	697a      	ldr	r2, [r7, #20]
 8009902:	0052      	lsls	r2, r2, #1
 8009904:	2103      	movs	r1, #3
 8009906:	4091      	lsls	r1, r2
 8009908:	000a      	movs	r2, r1
 800990a:	43d2      	mvns	r2, r2
 800990c:	401a      	ands	r2, r3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	685b      	ldr	r3, [r3, #4]
 8009916:	2101      	movs	r1, #1
 8009918:	697a      	ldr	r2, [r7, #20]
 800991a:	4091      	lsls	r1, r2
 800991c:	000a      	movs	r2, r1
 800991e:	43d2      	mvns	r2, r2
 8009920:	401a      	ands	r2, r3
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	697a      	ldr	r2, [r7, #20]
 800992c:	0052      	lsls	r2, r2, #1
 800992e:	2103      	movs	r1, #3
 8009930:	4091      	lsls	r1, r2
 8009932:	000a      	movs	r2, r1
 8009934:	43d2      	mvns	r2, r2
 8009936:	401a      	ands	r2, r3
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800993c:	697b      	ldr	r3, [r7, #20]
 800993e:	3301      	adds	r3, #1
 8009940:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8009942:	683a      	ldr	r2, [r7, #0]
 8009944:	697b      	ldr	r3, [r7, #20]
 8009946:	40da      	lsrs	r2, r3
 8009948:	1e13      	subs	r3, r2, #0
 800994a:	d000      	beq.n	800994e <HAL_GPIO_DeInit+0x19e>
 800994c:	e73c      	b.n	80097c8 <HAL_GPIO_DeInit+0x18>
  }
}
 800994e:	46c0      	nop			@ (mov r8, r8)
 8009950:	46c0      	nop			@ (mov r8, r8)
 8009952:	46bd      	mov	sp, r7
 8009954:	b006      	add	sp, #24
 8009956:	bd80      	pop	{r7, pc}
 8009958:	40010000 	.word	0x40010000
 800995c:	50000400 	.word	0x50000400
 8009960:	50000800 	.word	0x50000800
 8009964:	50000c00 	.word	0x50000c00
 8009968:	50001000 	.word	0x50001000
 800996c:	50001c00 	.word	0x50001c00
 8009970:	40010400 	.word	0x40010400

08009974 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8009974:	b580      	push	{r7, lr}
 8009976:	b082      	sub	sp, #8
 8009978:	af00      	add	r7, sp, #0
 800997a:	6078      	str	r0, [r7, #4]
 800997c:	0008      	movs	r0, r1
 800997e:	0011      	movs	r1, r2
 8009980:	1cbb      	adds	r3, r7, #2
 8009982:	1c02      	adds	r2, r0, #0
 8009984:	801a      	strh	r2, [r3, #0]
 8009986:	1c7b      	adds	r3, r7, #1
 8009988:	1c0a      	adds	r2, r1, #0
 800998a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800998c:	1c7b      	adds	r3, r7, #1
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	2b00      	cmp	r3, #0
 8009992:	d004      	beq.n	800999e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009994:	1cbb      	adds	r3, r7, #2
 8009996:	881a      	ldrh	r2, [r3, #0]
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800999c:	e003      	b.n	80099a6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800999e:	1cbb      	adds	r3, r7, #2
 80099a0:	881a      	ldrh	r2, [r3, #0]
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80099a6:	46c0      	nop			@ (mov r8, r8)
 80099a8:	46bd      	mov	sp, r7
 80099aa:	b002      	add	sp, #8
 80099ac:	bd80      	pop	{r7, pc}
	...

080099b0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80099b0:	b580      	push	{r7, lr}
 80099b2:	b082      	sub	sp, #8
 80099b4:	af00      	add	r7, sp, #0
 80099b6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	2b00      	cmp	r3, #0
 80099bc:	d101      	bne.n	80099c2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
 80099c0:	e082      	b.n	8009ac8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2241      	movs	r2, #65	@ 0x41
 80099c6:	5c9b      	ldrb	r3, [r3, r2]
 80099c8:	b2db      	uxtb	r3, r3
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	d107      	bne.n	80099de <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2240      	movs	r2, #64	@ 0x40
 80099d2:	2100      	movs	r1, #0
 80099d4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	0018      	movs	r0, r3
 80099da:	f7fb fb15 	bl	8005008 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	2241      	movs	r2, #65	@ 0x41
 80099e2:	2124      	movs	r1, #36	@ 0x24
 80099e4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	681a      	ldr	r2, [r3, #0]
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	2101      	movs	r1, #1
 80099f2:	438a      	bics	r2, r1
 80099f4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	685a      	ldr	r2, [r3, #4]
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4934      	ldr	r1, [pc, #208]	@ (8009ad0 <HAL_I2C_Init+0x120>)
 8009a00:	400a      	ands	r2, r1
 8009a02:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	689a      	ldr	r2, [r3, #8]
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4931      	ldr	r1, [pc, #196]	@ (8009ad4 <HAL_I2C_Init+0x124>)
 8009a10:	400a      	ands	r2, r1
 8009a12:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	68db      	ldr	r3, [r3, #12]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d108      	bne.n	8009a2e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	2180      	movs	r1, #128	@ 0x80
 8009a26:	0209      	lsls	r1, r1, #8
 8009a28:	430a      	orrs	r2, r1
 8009a2a:	609a      	str	r2, [r3, #8]
 8009a2c:	e007      	b.n	8009a3e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	689a      	ldr	r2, [r3, #8]
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	2184      	movs	r1, #132	@ 0x84
 8009a38:	0209      	lsls	r1, r1, #8
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	68db      	ldr	r3, [r3, #12]
 8009a42:	2b02      	cmp	r3, #2
 8009a44:	d104      	bne.n	8009a50 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	2280      	movs	r2, #128	@ 0x80
 8009a4c:	0112      	lsls	r2, r2, #4
 8009a4e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	685a      	ldr	r2, [r3, #4]
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	491f      	ldr	r1, [pc, #124]	@ (8009ad8 <HAL_I2C_Init+0x128>)
 8009a5c:	430a      	orrs	r2, r1
 8009a5e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	68da      	ldr	r2, [r3, #12]
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	491a      	ldr	r1, [pc, #104]	@ (8009ad4 <HAL_I2C_Init+0x124>)
 8009a6c:	400a      	ands	r2, r1
 8009a6e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	691a      	ldr	r2, [r3, #16]
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	695b      	ldr	r3, [r3, #20]
 8009a78:	431a      	orrs	r2, r3
 8009a7a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	699b      	ldr	r3, [r3, #24]
 8009a80:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	430a      	orrs	r2, r1
 8009a88:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	69d9      	ldr	r1, [r3, #28]
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	6a1a      	ldr	r2, [r3, #32]
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	430a      	orrs	r2, r1
 8009a98:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	681a      	ldr	r2, [r3, #0]
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	2101      	movs	r1, #1
 8009aa6:	430a      	orrs	r2, r1
 8009aa8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	2200      	movs	r2, #0
 8009aae:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2241      	movs	r2, #65	@ 0x41
 8009ab4:	2120      	movs	r1, #32
 8009ab6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	2200      	movs	r2, #0
 8009abc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2242      	movs	r2, #66	@ 0x42
 8009ac2:	2100      	movs	r1, #0
 8009ac4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ac6:	2300      	movs	r3, #0
}
 8009ac8:	0018      	movs	r0, r3
 8009aca:	46bd      	mov	sp, r7
 8009acc:	b002      	add	sp, #8
 8009ace:	bd80      	pop	{r7, pc}
 8009ad0:	f0ffffff 	.word	0xf0ffffff
 8009ad4:	ffff7fff 	.word	0xffff7fff
 8009ad8:	02008000 	.word	0x02008000

08009adc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8009adc:	b5b0      	push	{r4, r5, r7, lr}
 8009ade:	b088      	sub	sp, #32
 8009ae0:	af02      	add	r7, sp, #8
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	0008      	movs	r0, r1
 8009ae6:	607a      	str	r2, [r7, #4]
 8009ae8:	0019      	movs	r1, r3
 8009aea:	230a      	movs	r3, #10
 8009aec:	18fb      	adds	r3, r7, r3
 8009aee:	1c02      	adds	r2, r0, #0
 8009af0:	801a      	strh	r2, [r3, #0]
 8009af2:	2308      	movs	r3, #8
 8009af4:	18fb      	adds	r3, r7, r3
 8009af6:	1c0a      	adds	r2, r1, #0
 8009af8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	2241      	movs	r2, #65	@ 0x41
 8009afe:	5c9b      	ldrb	r3, [r3, r2]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	2b20      	cmp	r3, #32
 8009b04:	d000      	beq.n	8009b08 <HAL_I2C_Master_Transmit_DMA+0x2c>
 8009b06:	e0dd      	b.n	8009cc4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	699a      	ldr	r2, [r3, #24]
 8009b0e:	2380      	movs	r3, #128	@ 0x80
 8009b10:	021b      	lsls	r3, r3, #8
 8009b12:	401a      	ands	r2, r3
 8009b14:	2380      	movs	r3, #128	@ 0x80
 8009b16:	021b      	lsls	r3, r3, #8
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d101      	bne.n	8009b20 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 8009b1c:	2302      	movs	r3, #2
 8009b1e:	e0d2      	b.n	8009cc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	2240      	movs	r2, #64	@ 0x40
 8009b24:	5c9b      	ldrb	r3, [r3, r2]
 8009b26:	2b01      	cmp	r3, #1
 8009b28:	d101      	bne.n	8009b2e <HAL_I2C_Master_Transmit_DMA+0x52>
 8009b2a:	2302      	movs	r3, #2
 8009b2c:	e0cb      	b.n	8009cc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	2240      	movs	r2, #64	@ 0x40
 8009b32:	2101      	movs	r1, #1
 8009b34:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	2241      	movs	r2, #65	@ 0x41
 8009b3a:	2121      	movs	r1, #33	@ 0x21
 8009b3c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2242      	movs	r2, #66	@ 0x42
 8009b42:	2110      	movs	r1, #16
 8009b44:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	2200      	movs	r2, #0
 8009b4a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	2208      	movs	r2, #8
 8009b56:	18ba      	adds	r2, r7, r2
 8009b58:	8812      	ldrh	r2, [r2, #0]
 8009b5a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	4a5c      	ldr	r2, [pc, #368]	@ (8009cd0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8009b60:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	4a5b      	ldr	r2, [pc, #364]	@ (8009cd4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8009b66:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b6c:	b29b      	uxth	r3, r3
 8009b6e:	2bff      	cmp	r3, #255	@ 0xff
 8009b70:	d906      	bls.n	8009b80 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	22ff      	movs	r2, #255	@ 0xff
 8009b76:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009b78:	2380      	movs	r3, #128	@ 0x80
 8009b7a:	045b      	lsls	r3, r3, #17
 8009b7c:	617b      	str	r3, [r7, #20]
 8009b7e:	e007      	b.n	8009b90 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b84:	b29a      	uxth	r2, r3
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009b8a:	2380      	movs	r3, #128	@ 0x80
 8009b8c:	049b      	lsls	r3, r3, #18
 8009b8e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d100      	bne.n	8009b9a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8009b98:	e078      	b.n	8009c8c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d023      	beq.n	8009bea <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009ba2:	68fb      	ldr	r3, [r7, #12]
 8009ba4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ba6:	4a4c      	ldr	r2, [pc, #304]	@ (8009cd8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8009ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bae:	4a4b      	ldr	r2, [pc, #300]	@ (8009cdc <HAL_I2C_Master_Transmit_DMA+0x200>)
 8009bb0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bb6:	2200      	movs	r2, #0
 8009bb8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8009bc6:	6879      	ldr	r1, [r7, #4]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	3328      	adds	r3, #40	@ 0x28
 8009bce:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8009bd4:	2513      	movs	r5, #19
 8009bd6:	197c      	adds	r4, r7, r5
 8009bd8:	f7ff fa96 	bl	8009108 <HAL_DMA_Start_IT>
 8009bdc:	0003      	movs	r3, r0
 8009bde:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009be0:	197b      	adds	r3, r7, r5
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d13d      	bne.n	8009c64 <HAL_I2C_Master_Transmit_DMA+0x188>
 8009be8:	e013      	b.n	8009c12 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	2241      	movs	r2, #65	@ 0x41
 8009bee:	2120      	movs	r1, #32
 8009bf0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2242      	movs	r2, #66	@ 0x42
 8009bf6:	2100      	movs	r1, #0
 8009bf8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009bfe:	2280      	movs	r2, #128	@ 0x80
 8009c00:	431a      	orrs	r2, r3
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	2240      	movs	r2, #64	@ 0x40
 8009c0a:	2100      	movs	r1, #0
 8009c0c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8009c0e:	2301      	movs	r3, #1
 8009c10:	e059      	b.n	8009cc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c16:	b2da      	uxtb	r2, r3
 8009c18:	697c      	ldr	r4, [r7, #20]
 8009c1a:	230a      	movs	r3, #10
 8009c1c:	18fb      	adds	r3, r7, r3
 8009c1e:	8819      	ldrh	r1, [r3, #0]
 8009c20:	68f8      	ldr	r0, [r7, #12]
 8009c22:	4b2f      	ldr	r3, [pc, #188]	@ (8009ce0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	0023      	movs	r3, r4
 8009c28:	f001 fd0e 	bl	800b648 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c30:	b29a      	uxth	r2, r3
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c36:	1ad3      	subs	r3, r2, r3
 8009c38:	b29a      	uxth	r2, r3
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2240      	movs	r2, #64	@ 0x40
 8009c42:	2100      	movs	r1, #0
 8009c44:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	2110      	movs	r1, #16
 8009c4a:	0018      	movs	r0, r3
 8009c4c:	f001 fd36 	bl	800b6bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2180      	movs	r1, #128	@ 0x80
 8009c5c:	01c9      	lsls	r1, r1, #7
 8009c5e:	430a      	orrs	r2, r1
 8009c60:	601a      	str	r2, [r3, #0]
 8009c62:	e02d      	b.n	8009cc0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	2241      	movs	r2, #65	@ 0x41
 8009c68:	2120      	movs	r1, #32
 8009c6a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	2242      	movs	r2, #66	@ 0x42
 8009c70:	2100      	movs	r1, #0
 8009c72:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c78:	2210      	movs	r2, #16
 8009c7a:	431a      	orrs	r2, r3
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2240      	movs	r2, #64	@ 0x40
 8009c84:	2100      	movs	r1, #0
 8009c86:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009c88:	2301      	movs	r3, #1
 8009c8a:	e01c      	b.n	8009cc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	4a15      	ldr	r2, [pc, #84]	@ (8009ce4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8009c90:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009c96:	b2da      	uxtb	r2, r3
 8009c98:	2380      	movs	r3, #128	@ 0x80
 8009c9a:	049c      	lsls	r4, r3, #18
 8009c9c:	230a      	movs	r3, #10
 8009c9e:	18fb      	adds	r3, r7, r3
 8009ca0:	8819      	ldrh	r1, [r3, #0]
 8009ca2:	68f8      	ldr	r0, [r7, #12]
 8009ca4:	4b0e      	ldr	r3, [pc, #56]	@ (8009ce0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	0023      	movs	r3, r4
 8009caa:	f001 fccd 	bl	800b648 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	2240      	movs	r2, #64	@ 0x40
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	2101      	movs	r1, #1
 8009cba:	0018      	movs	r0, r3
 8009cbc:	f001 fcfe 	bl	800b6bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	e000      	b.n	8009cc6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009cc4:	2302      	movs	r3, #2
  }
}
 8009cc6:	0018      	movs	r0, r3
 8009cc8:	46bd      	mov	sp, r7
 8009cca:	b006      	add	sp, #24
 8009ccc:	bdb0      	pop	{r4, r5, r7, pc}
 8009cce:	46c0      	nop			@ (mov r8, r8)
 8009cd0:	ffff0000 	.word	0xffff0000
 8009cd4:	0800a4e1 	.word	0x0800a4e1
 8009cd8:	0800b499 	.word	0x0800b499
 8009cdc:	0800b5d9 	.word	0x0800b5d9
 8009ce0:	80002000 	.word	0x80002000
 8009ce4:	0800a08d 	.word	0x0800a08d

08009ce8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8009ce8:	b5b0      	push	{r4, r5, r7, lr}
 8009cea:	b088      	sub	sp, #32
 8009cec:	af02      	add	r7, sp, #8
 8009cee:	60f8      	str	r0, [r7, #12]
 8009cf0:	0008      	movs	r0, r1
 8009cf2:	607a      	str	r2, [r7, #4]
 8009cf4:	0019      	movs	r1, r3
 8009cf6:	230a      	movs	r3, #10
 8009cf8:	18fb      	adds	r3, r7, r3
 8009cfa:	1c02      	adds	r2, r0, #0
 8009cfc:	801a      	strh	r2, [r3, #0]
 8009cfe:	2308      	movs	r3, #8
 8009d00:	18fb      	adds	r3, r7, r3
 8009d02:	1c0a      	adds	r2, r1, #0
 8009d04:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2241      	movs	r2, #65	@ 0x41
 8009d0a:	5c9b      	ldrb	r3, [r3, r2]
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b20      	cmp	r3, #32
 8009d10:	d000      	beq.n	8009d14 <HAL_I2C_Master_Receive_DMA+0x2c>
 8009d12:	e0dd      	b.n	8009ed0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	699a      	ldr	r2, [r3, #24]
 8009d1a:	2380      	movs	r3, #128	@ 0x80
 8009d1c:	021b      	lsls	r3, r3, #8
 8009d1e:	401a      	ands	r2, r3
 8009d20:	2380      	movs	r3, #128	@ 0x80
 8009d22:	021b      	lsls	r3, r3, #8
 8009d24:	429a      	cmp	r2, r3
 8009d26:	d101      	bne.n	8009d2c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8009d28:	2302      	movs	r3, #2
 8009d2a:	e0d2      	b.n	8009ed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	2240      	movs	r2, #64	@ 0x40
 8009d30:	5c9b      	ldrb	r3, [r3, r2]
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d101      	bne.n	8009d3a <HAL_I2C_Master_Receive_DMA+0x52>
 8009d36:	2302      	movs	r3, #2
 8009d38:	e0cb      	b.n	8009ed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2240      	movs	r2, #64	@ 0x40
 8009d3e:	2101      	movs	r1, #1
 8009d40:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2241      	movs	r2, #65	@ 0x41
 8009d46:	2122      	movs	r1, #34	@ 0x22
 8009d48:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8009d4a:	68fb      	ldr	r3, [r7, #12]
 8009d4c:	2242      	movs	r2, #66	@ 0x42
 8009d4e:	2110      	movs	r1, #16
 8009d50:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009d52:	68fb      	ldr	r3, [r7, #12]
 8009d54:	2200      	movs	r2, #0
 8009d56:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2208      	movs	r2, #8
 8009d62:	18ba      	adds	r2, r7, r2
 8009d64:	8812      	ldrh	r2, [r2, #0]
 8009d66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8009edc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8009d6c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	4a5b      	ldr	r2, [pc, #364]	@ (8009ee0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8009d72:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	2bff      	cmp	r3, #255	@ 0xff
 8009d7c:	d906      	bls.n	8009d8c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	22ff      	movs	r2, #255	@ 0xff
 8009d82:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009d84:	2380      	movs	r3, #128	@ 0x80
 8009d86:	045b      	lsls	r3, r3, #17
 8009d88:	617b      	str	r3, [r7, #20]
 8009d8a:	e007      	b.n	8009d9c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d90:	b29a      	uxth	r2, r3
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009d96:	2380      	movs	r3, #128	@ 0x80
 8009d98:	049b      	lsls	r3, r3, #18
 8009d9a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	d100      	bne.n	8009da6 <HAL_I2C_Master_Receive_DMA+0xbe>
 8009da4:	e078      	b.n	8009e98 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8009da6:	68fb      	ldr	r3, [r7, #12]
 8009da8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d023      	beq.n	8009df6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009db2:	4a4c      	ldr	r2, [pc, #304]	@ (8009ee4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8009db4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dba:	4a4b      	ldr	r2, [pc, #300]	@ (8009ee8 <HAL_I2C_Master_Receive_DMA+0x200>)
 8009dbc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dc2:	2200      	movs	r2, #0
 8009dc4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8009dc6:	68fb      	ldr	r3, [r7, #12]
 8009dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009dca:	2200      	movs	r2, #0
 8009dcc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	3324      	adds	r3, #36	@ 0x24
 8009dd8:	0019      	movs	r1, r3
 8009dda:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8009de0:	2513      	movs	r5, #19
 8009de2:	197c      	adds	r4, r7, r5
 8009de4:	f7ff f990 	bl	8009108 <HAL_DMA_Start_IT>
 8009de8:	0003      	movs	r3, r0
 8009dea:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8009dec:	197b      	adds	r3, r7, r5
 8009dee:	781b      	ldrb	r3, [r3, #0]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d13d      	bne.n	8009e70 <HAL_I2C_Master_Receive_DMA+0x188>
 8009df4:	e013      	b.n	8009e1e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	2241      	movs	r2, #65	@ 0x41
 8009dfa:	2120      	movs	r1, #32
 8009dfc:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	2242      	movs	r2, #66	@ 0x42
 8009e02:	2100      	movs	r1, #0
 8009e04:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e0a:	2280      	movs	r2, #128	@ 0x80
 8009e0c:	431a      	orrs	r2, r3
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2240      	movs	r2, #64	@ 0x40
 8009e16:	2100      	movs	r1, #0
 8009e18:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 8009e1a:	2301      	movs	r3, #1
 8009e1c:	e059      	b.n	8009ed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e22:	b2da      	uxtb	r2, r3
 8009e24:	697c      	ldr	r4, [r7, #20]
 8009e26:	230a      	movs	r3, #10
 8009e28:	18fb      	adds	r3, r7, r3
 8009e2a:	8819      	ldrh	r1, [r3, #0]
 8009e2c:	68f8      	ldr	r0, [r7, #12]
 8009e2e:	4b2f      	ldr	r3, [pc, #188]	@ (8009eec <HAL_I2C_Master_Receive_DMA+0x204>)
 8009e30:	9300      	str	r3, [sp, #0]
 8009e32:	0023      	movs	r3, r4
 8009e34:	f001 fc08 	bl	800b648 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009e38:	68fb      	ldr	r3, [r7, #12]
 8009e3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e3c:	b29a      	uxth	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	b29a      	uxth	r2, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	2240      	movs	r2, #64	@ 0x40
 8009e4e:	2100      	movs	r1, #0
 8009e50:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2110      	movs	r1, #16
 8009e56:	0018      	movs	r0, r3
 8009e58:	f001 fc30 	bl	800b6bc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	681b      	ldr	r3, [r3, #0]
 8009e60:	681a      	ldr	r2, [r3, #0]
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	2180      	movs	r1, #128	@ 0x80
 8009e68:	0209      	lsls	r1, r1, #8
 8009e6a:	430a      	orrs	r2, r1
 8009e6c:	601a      	str	r2, [r3, #0]
 8009e6e:	e02d      	b.n	8009ecc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	2241      	movs	r2, #65	@ 0x41
 8009e74:	2120      	movs	r1, #32
 8009e76:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2242      	movs	r2, #66	@ 0x42
 8009e7c:	2100      	movs	r1, #0
 8009e7e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e84:	2210      	movs	r2, #16
 8009e86:	431a      	orrs	r2, r3
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2240      	movs	r2, #64	@ 0x40
 8009e90:	2100      	movs	r1, #0
 8009e92:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e01c      	b.n	8009ed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	4a15      	ldr	r2, [pc, #84]	@ (8009ef0 <HAL_I2C_Master_Receive_DMA+0x208>)
 8009e9c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ea2:	b2da      	uxtb	r2, r3
 8009ea4:	2380      	movs	r3, #128	@ 0x80
 8009ea6:	049c      	lsls	r4, r3, #18
 8009ea8:	230a      	movs	r3, #10
 8009eaa:	18fb      	adds	r3, r7, r3
 8009eac:	8819      	ldrh	r1, [r3, #0]
 8009eae:	68f8      	ldr	r0, [r7, #12]
 8009eb0:	4b0e      	ldr	r3, [pc, #56]	@ (8009eec <HAL_I2C_Master_Receive_DMA+0x204>)
 8009eb2:	9300      	str	r3, [sp, #0]
 8009eb4:	0023      	movs	r3, r4
 8009eb6:	f001 fbc7 	bl	800b648 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	2240      	movs	r2, #64	@ 0x40
 8009ebe:	2100      	movs	r1, #0
 8009ec0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2101      	movs	r1, #1
 8009ec6:	0018      	movs	r0, r3
 8009ec8:	f001 fbf8 	bl	800b6bc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8009ecc:	2300      	movs	r3, #0
 8009ece:	e000      	b.n	8009ed2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8009ed0:	2302      	movs	r3, #2
  }
}
 8009ed2:	0018      	movs	r0, r3
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	b006      	add	sp, #24
 8009ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8009eda:	46c0      	nop			@ (mov r8, r8)
 8009edc:	ffff0000 	.word	0xffff0000
 8009ee0:	0800a4e1 	.word	0x0800a4e1
 8009ee4:	0800b539 	.word	0x0800b539
 8009ee8:	0800b5d9 	.word	0x0800b5d9
 8009eec:	80002400 	.word	0x80002400
 8009ef0:	0800a08d 	.word	0x0800a08d

08009ef4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 8009ef4:	b580      	push	{r7, lr}
 8009ef6:	b084      	sub	sp, #16
 8009ef8:	af00      	add	r7, sp, #0
 8009efa:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	681b      	ldr	r3, [r3, #0]
 8009f00:	699b      	ldr	r3, [r3, #24]
 8009f02:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	681b      	ldr	r3, [r3, #0]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f10:	2b00      	cmp	r3, #0
 8009f12:	d005      	beq.n	8009f20 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	68f9      	ldr	r1, [r7, #12]
 8009f1c:	6878      	ldr	r0, [r7, #4]
 8009f1e:	4798      	blx	r3
  }
}
 8009f20:	46c0      	nop			@ (mov r8, r8)
 8009f22:	46bd      	mov	sp, r7
 8009f24:	b004      	add	sp, #16
 8009f26:	bd80      	pop	{r7, pc}

08009f28 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b086      	sub	sp, #24
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	699b      	ldr	r3, [r3, #24]
 8009f36:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009f40:	697a      	ldr	r2, [r7, #20]
 8009f42:	2380      	movs	r3, #128	@ 0x80
 8009f44:	005b      	lsls	r3, r3, #1
 8009f46:	4013      	ands	r3, r2
 8009f48:	d00e      	beq.n	8009f68 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f4a:	693b      	ldr	r3, [r7, #16]
 8009f4c:	2280      	movs	r2, #128	@ 0x80
 8009f4e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009f50:	d00a      	beq.n	8009f68 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f56:	2201      	movs	r2, #1
 8009f58:	431a      	orrs	r2, r3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2280      	movs	r2, #128	@ 0x80
 8009f64:	0052      	lsls	r2, r2, #1
 8009f66:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009f68:	697a      	ldr	r2, [r7, #20]
 8009f6a:	2380      	movs	r3, #128	@ 0x80
 8009f6c:	00db      	lsls	r3, r3, #3
 8009f6e:	4013      	ands	r3, r2
 8009f70:	d00e      	beq.n	8009f90 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	2280      	movs	r2, #128	@ 0x80
 8009f76:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009f78:	d00a      	beq.n	8009f90 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009f7e:	2208      	movs	r2, #8
 8009f80:	431a      	orrs	r2, r3
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	2280      	movs	r2, #128	@ 0x80
 8009f8c:	00d2      	lsls	r2, r2, #3
 8009f8e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009f90:	697a      	ldr	r2, [r7, #20]
 8009f92:	2380      	movs	r3, #128	@ 0x80
 8009f94:	009b      	lsls	r3, r3, #2
 8009f96:	4013      	ands	r3, r2
 8009f98:	d00e      	beq.n	8009fb8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	2280      	movs	r2, #128	@ 0x80
 8009f9e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009fa0:	d00a      	beq.n	8009fb8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fa6:	2202      	movs	r2, #2
 8009fa8:	431a      	orrs	r2, r3
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	2280      	movs	r2, #128	@ 0x80
 8009fb4:	0092      	lsls	r2, r2, #2
 8009fb6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009fbc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	220b      	movs	r2, #11
 8009fc2:	4013      	ands	r3, r2
 8009fc4:	d005      	beq.n	8009fd2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8009fc6:	68fa      	ldr	r2, [r7, #12]
 8009fc8:	687b      	ldr	r3, [r7, #4]
 8009fca:	0011      	movs	r1, r2
 8009fcc:	0018      	movs	r0, r3
 8009fce:	f001 f915 	bl	800b1fc <I2C_ITError>
  }
}
 8009fd2:	46c0      	nop			@ (mov r8, r8)
 8009fd4:	46bd      	mov	sp, r7
 8009fd6:	b006      	add	sp, #24
 8009fd8:	bd80      	pop	{r7, pc}

08009fda <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fda:	b580      	push	{r7, lr}
 8009fdc:	b082      	sub	sp, #8
 8009fde:	af00      	add	r7, sp, #0
 8009fe0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8009fe2:	46c0      	nop			@ (mov r8, r8)
 8009fe4:	46bd      	mov	sp, r7
 8009fe6:	b002      	add	sp, #8
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009fea:	b580      	push	{r7, lr}
 8009fec:	b082      	sub	sp, #8
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8009ff2:	46c0      	nop			@ (mov r8, r8)
 8009ff4:	46bd      	mov	sp, r7
 8009ff6:	b002      	add	sp, #8
 8009ff8:	bd80      	pop	{r7, pc}

08009ffa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8009ffa:	b580      	push	{r7, lr}
 8009ffc:	b082      	sub	sp, #8
 8009ffe:	af00      	add	r7, sp, #0
 800a000:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a002:	46c0      	nop			@ (mov r8, r8)
 800a004:	46bd      	mov	sp, r7
 800a006:	b002      	add	sp, #8
 800a008:	bd80      	pop	{r7, pc}

0800a00a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a00a:	b580      	push	{r7, lr}
 800a00c:	b082      	sub	sp, #8
 800a00e:	af00      	add	r7, sp, #0
 800a010:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a012:	46c0      	nop			@ (mov r8, r8)
 800a014:	46bd      	mov	sp, r7
 800a016:	b002      	add	sp, #8
 800a018:	bd80      	pop	{r7, pc}

0800a01a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a01a:	b580      	push	{r7, lr}
 800a01c:	b082      	sub	sp, #8
 800a01e:	af00      	add	r7, sp, #0
 800a020:	6078      	str	r0, [r7, #4]
 800a022:	0008      	movs	r0, r1
 800a024:	0011      	movs	r1, r2
 800a026:	1cfb      	adds	r3, r7, #3
 800a028:	1c02      	adds	r2, r0, #0
 800a02a:	701a      	strb	r2, [r3, #0]
 800a02c:	003b      	movs	r3, r7
 800a02e:	1c0a      	adds	r2, r1, #0
 800a030:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a032:	46c0      	nop			@ (mov r8, r8)
 800a034:	46bd      	mov	sp, r7
 800a036:	b002      	add	sp, #8
 800a038:	bd80      	pop	{r7, pc}

0800a03a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a03a:	b580      	push	{r7, lr}
 800a03c:	b082      	sub	sp, #8
 800a03e:	af00      	add	r7, sp, #0
 800a040:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800a042:	46c0      	nop			@ (mov r8, r8)
 800a044:	46bd      	mov	sp, r7
 800a046:	b002      	add	sp, #8
 800a048:	bd80      	pop	{r7, pc}

0800a04a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b082      	sub	sp, #8
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a052:	46c0      	nop			@ (mov r8, r8)
 800a054:	46bd      	mov	sp, r7
 800a056:	b002      	add	sp, #8
 800a058:	bd80      	pop	{r7, pc}

0800a05a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a05a:	b580      	push	{r7, lr}
 800a05c:	b082      	sub	sp, #8
 800a05e:	af00      	add	r7, sp, #0
 800a060:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a062:	46c0      	nop			@ (mov r8, r8)
 800a064:	46bd      	mov	sp, r7
 800a066:	b002      	add	sp, #8
 800a068:	bd80      	pop	{r7, pc}

0800a06a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a06a:	b580      	push	{r7, lr}
 800a06c:	b082      	sub	sp, #8
 800a06e:	af00      	add	r7, sp, #0
 800a070:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a072:	46c0      	nop			@ (mov r8, r8)
 800a074:	46bd      	mov	sp, r7
 800a076:	b002      	add	sp, #8
 800a078:	bd80      	pop	{r7, pc}

0800a07a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a07a:	b580      	push	{r7, lr}
 800a07c:	b082      	sub	sp, #8
 800a07e:	af00      	add	r7, sp, #0
 800a080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a082:	46c0      	nop			@ (mov r8, r8)
 800a084:	46bd      	mov	sp, r7
 800a086:	b002      	add	sp, #8
 800a088:	bd80      	pop	{r7, pc}
	...

0800a08c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a08c:	b590      	push	{r4, r7, lr}
 800a08e:	b089      	sub	sp, #36	@ 0x24
 800a090:	af02      	add	r7, sp, #8
 800a092:	60f8      	str	r0, [r7, #12]
 800a094:	60b9      	str	r1, [r7, #8]
 800a096:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2240      	movs	r2, #64	@ 0x40
 800a0a0:	5c9b      	ldrb	r3, [r3, r2]
 800a0a2:	2b01      	cmp	r3, #1
 800a0a4:	d101      	bne.n	800a0aa <I2C_Master_ISR_IT+0x1e>
 800a0a6:	2302      	movs	r3, #2
 800a0a8:	e113      	b.n	800a2d2 <I2C_Master_ISR_IT+0x246>
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2240      	movs	r2, #64	@ 0x40
 800a0ae:	2101      	movs	r1, #1
 800a0b0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a0b2:	697b      	ldr	r3, [r7, #20]
 800a0b4:	2210      	movs	r2, #16
 800a0b6:	4013      	ands	r3, r2
 800a0b8:	d012      	beq.n	800a0e0 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a0ba:	687b      	ldr	r3, [r7, #4]
 800a0bc:	2210      	movs	r2, #16
 800a0be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a0c0:	d00e      	beq.n	800a0e0 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	2210      	movs	r2, #16
 800a0c8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a0ce:	2204      	movs	r2, #4
 800a0d0:	431a      	orrs	r2, r3
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	0018      	movs	r0, r3
 800a0da:	f001 f9ba 	bl	800b452 <I2C_Flush_TXDR>
 800a0de:	e0e5      	b.n	800a2ac <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a0e0:	697b      	ldr	r3, [r7, #20]
 800a0e2:	2204      	movs	r2, #4
 800a0e4:	4013      	ands	r3, r2
 800a0e6:	d021      	beq.n	800a12c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2204      	movs	r2, #4
 800a0ec:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a0ee:	d01d      	beq.n	800a12c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	2204      	movs	r2, #4
 800a0f4:	4393      	bics	r3, r2
 800a0f6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a102:	b2d2      	uxtb	r2, r2
 800a104:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a10a:	1c5a      	adds	r2, r3, #1
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a114:	3b01      	subs	r3, #1
 800a116:	b29a      	uxth	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a120:	b29b      	uxth	r3, r3
 800a122:	3b01      	subs	r3, #1
 800a124:	b29a      	uxth	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a12a:	e0bf      	b.n	800a2ac <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2202      	movs	r2, #2
 800a130:	4013      	ands	r3, r2
 800a132:	d01c      	beq.n	800a16e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2202      	movs	r2, #2
 800a138:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a13a:	d018      	beq.n	800a16e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a140:	781a      	ldrb	r2, [r3, #0]
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a14c:	1c5a      	adds	r2, r3, #1
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a156:	3b01      	subs	r3, #1
 800a158:	b29a      	uxth	r2, r3
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a162:	b29b      	uxth	r3, r3
 800a164:	3b01      	subs	r3, #1
 800a166:	b29a      	uxth	r2, r3
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a16c:	e09e      	b.n	800a2ac <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	2280      	movs	r2, #128	@ 0x80
 800a172:	4013      	ands	r3, r2
 800a174:	d100      	bne.n	800a178 <I2C_Master_ISR_IT+0xec>
 800a176:	e069      	b.n	800a24c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2240      	movs	r2, #64	@ 0x40
 800a17c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800a17e:	d065      	beq.n	800a24c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a184:	b29b      	uxth	r3, r3
 800a186:	2b00      	cmp	r3, #0
 800a188:	d04a      	beq.n	800a220 <I2C_Master_ISR_IT+0x194>
 800a18a:	68fb      	ldr	r3, [r7, #12]
 800a18c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d146      	bne.n	800a220 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	b29a      	uxth	r2, r3
 800a19a:	2112      	movs	r1, #18
 800a19c:	187b      	adds	r3, r7, r1
 800a19e:	0592      	lsls	r2, r2, #22
 800a1a0:	0d92      	lsrs	r2, r2, #22
 800a1a2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1a8:	b29b      	uxth	r3, r3
 800a1aa:	2bff      	cmp	r3, #255	@ 0xff
 800a1ac:	d910      	bls.n	800a1d0 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	22ff      	movs	r2, #255	@ 0xff
 800a1b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1b8:	b2da      	uxtb	r2, r3
 800a1ba:	2380      	movs	r3, #128	@ 0x80
 800a1bc:	045c      	lsls	r4, r3, #17
 800a1be:	187b      	adds	r3, r7, r1
 800a1c0:	8819      	ldrh	r1, [r3, #0]
 800a1c2:	68f8      	ldr	r0, [r7, #12]
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	9300      	str	r3, [sp, #0]
 800a1c8:	0023      	movs	r3, r4
 800a1ca:	f001 fa3d 	bl	800b648 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a1ce:	e03c      	b.n	800a24a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a1da:	68fb      	ldr	r3, [r7, #12]
 800a1dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a1de:	4a3f      	ldr	r2, [pc, #252]	@ (800a2dc <I2C_Master_ISR_IT+0x250>)
 800a1e0:	4293      	cmp	r3, r2
 800a1e2:	d00e      	beq.n	800a202 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a1e8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a1ee:	2312      	movs	r3, #18
 800a1f0:	18fb      	adds	r3, r7, r3
 800a1f2:	8819      	ldrh	r1, [r3, #0]
 800a1f4:	68f8      	ldr	r0, [r7, #12]
 800a1f6:	2300      	movs	r3, #0
 800a1f8:	9300      	str	r3, [sp, #0]
 800a1fa:	0023      	movs	r3, r4
 800a1fc:	f001 fa24 	bl	800b648 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a200:	e023      	b.n	800a24a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a206:	b2da      	uxtb	r2, r3
 800a208:	2380      	movs	r3, #128	@ 0x80
 800a20a:	049c      	lsls	r4, r3, #18
 800a20c:	2312      	movs	r3, #18
 800a20e:	18fb      	adds	r3, r7, r3
 800a210:	8819      	ldrh	r1, [r3, #0]
 800a212:	68f8      	ldr	r0, [r7, #12]
 800a214:	2300      	movs	r3, #0
 800a216:	9300      	str	r3, [sp, #0]
 800a218:	0023      	movs	r3, r4
 800a21a:	f001 fa15 	bl	800b648 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a21e:	e014      	b.n	800a24a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	685a      	ldr	r2, [r3, #4]
 800a226:	2380      	movs	r3, #128	@ 0x80
 800a228:	049b      	lsls	r3, r3, #18
 800a22a:	401a      	ands	r2, r3
 800a22c:	2380      	movs	r3, #128	@ 0x80
 800a22e:	049b      	lsls	r3, r3, #18
 800a230:	429a      	cmp	r2, r3
 800a232:	d004      	beq.n	800a23e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	0018      	movs	r0, r3
 800a238:	f000 fcf4 	bl	800ac24 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a23c:	e036      	b.n	800a2ac <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2140      	movs	r1, #64	@ 0x40
 800a242:	0018      	movs	r0, r3
 800a244:	f000 ffda 	bl	800b1fc <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800a248:	e030      	b.n	800a2ac <I2C_Master_ISR_IT+0x220>
 800a24a:	e02f      	b.n	800a2ac <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	2240      	movs	r2, #64	@ 0x40
 800a250:	4013      	ands	r3, r2
 800a252:	d02b      	beq.n	800a2ac <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	2240      	movs	r2, #64	@ 0x40
 800a258:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800a25a:	d027      	beq.n	800a2ac <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800a25c:	68fb      	ldr	r3, [r7, #12]
 800a25e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a260:	b29b      	uxth	r3, r3
 800a262:	2b00      	cmp	r3, #0
 800a264:	d11d      	bne.n	800a2a2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	685a      	ldr	r2, [r3, #4]
 800a26c:	2380      	movs	r3, #128	@ 0x80
 800a26e:	049b      	lsls	r3, r3, #18
 800a270:	401a      	ands	r2, r3
 800a272:	2380      	movs	r3, #128	@ 0x80
 800a274:	049b      	lsls	r3, r3, #18
 800a276:	429a      	cmp	r2, r3
 800a278:	d018      	beq.n	800a2ac <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a27e:	4a17      	ldr	r2, [pc, #92]	@ (800a2dc <I2C_Master_ISR_IT+0x250>)
 800a280:	4293      	cmp	r3, r2
 800a282:	d109      	bne.n	800a298 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	2180      	movs	r1, #128	@ 0x80
 800a290:	01c9      	lsls	r1, r1, #7
 800a292:	430a      	orrs	r2, r1
 800a294:	605a      	str	r2, [r3, #4]
 800a296:	e009      	b.n	800a2ac <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	0018      	movs	r0, r3
 800a29c:	f000 fcc2 	bl	800ac24 <I2C_ITMasterSeqCplt>
 800a2a0:	e004      	b.n	800a2ac <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2140      	movs	r1, #64	@ 0x40
 800a2a6:	0018      	movs	r0, r3
 800a2a8:	f000 ffa8 	bl	800b1fc <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a2ac:	697b      	ldr	r3, [r7, #20]
 800a2ae:	2220      	movs	r2, #32
 800a2b0:	4013      	ands	r3, r2
 800a2b2:	d009      	beq.n	800a2c8 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a2b4:	687b      	ldr	r3, [r7, #4]
 800a2b6:	2220      	movs	r2, #32
 800a2b8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a2ba:	d005      	beq.n	800a2c8 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800a2bc:	697a      	ldr	r2, [r7, #20]
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	0011      	movs	r1, r2
 800a2c2:	0018      	movs	r0, r3
 800a2c4:	f000 fd54 	bl	800ad70 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	2240      	movs	r2, #64	@ 0x40
 800a2cc:	2100      	movs	r1, #0
 800a2ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a2d0:	2300      	movs	r3, #0
}
 800a2d2:	0018      	movs	r0, r3
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	b007      	add	sp, #28
 800a2d8:	bd90      	pop	{r4, r7, pc}
 800a2da:	46c0      	nop			@ (mov r8, r8)
 800a2dc:	ffff0000 	.word	0xffff0000

0800a2e0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a2f0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	2240      	movs	r2, #64	@ 0x40
 800a2fa:	5c9b      	ldrb	r3, [r3, r2]
 800a2fc:	2b01      	cmp	r3, #1
 800a2fe:	d101      	bne.n	800a304 <I2C_Slave_ISR_IT+0x24>
 800a300:	2302      	movs	r3, #2
 800a302:	e0e6      	b.n	800a4d2 <I2C_Slave_ISR_IT+0x1f2>
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	2240      	movs	r2, #64	@ 0x40
 800a308:	2101      	movs	r1, #1
 800a30a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	2220      	movs	r2, #32
 800a310:	4013      	ands	r3, r2
 800a312:	d009      	beq.n	800a328 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2220      	movs	r2, #32
 800a318:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a31a:	d005      	beq.n	800a328 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800a31c:	693a      	ldr	r2, [r7, #16]
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	0011      	movs	r1, r2
 800a322:	0018      	movs	r0, r3
 800a324:	f000 fdf2 	bl	800af0c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	2210      	movs	r2, #16
 800a32c:	4013      	ands	r3, r2
 800a32e:	d052      	beq.n	800a3d6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2210      	movs	r2, #16
 800a334:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800a336:	d04e      	beq.n	800a3d6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800a338:	68fb      	ldr	r3, [r7, #12]
 800a33a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a33c:	b29b      	uxth	r3, r3
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d12d      	bne.n	800a39e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	2241      	movs	r2, #65	@ 0x41
 800a346:	5c9b      	ldrb	r3, [r3, r2]
 800a348:	b2db      	uxtb	r3, r3
 800a34a:	2b28      	cmp	r3, #40	@ 0x28
 800a34c:	d10b      	bne.n	800a366 <I2C_Slave_ISR_IT+0x86>
 800a34e:	697a      	ldr	r2, [r7, #20]
 800a350:	2380      	movs	r3, #128	@ 0x80
 800a352:	049b      	lsls	r3, r3, #18
 800a354:	429a      	cmp	r2, r3
 800a356:	d106      	bne.n	800a366 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800a358:	693a      	ldr	r2, [r7, #16]
 800a35a:	68fb      	ldr	r3, [r7, #12]
 800a35c:	0011      	movs	r1, r2
 800a35e:	0018      	movs	r0, r3
 800a360:	f000 fef4 	bl	800b14c <I2C_ITListenCplt>
 800a364:	e036      	b.n	800a3d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a366:	68fb      	ldr	r3, [r7, #12]
 800a368:	2241      	movs	r2, #65	@ 0x41
 800a36a:	5c9b      	ldrb	r3, [r3, r2]
 800a36c:	b2db      	uxtb	r3, r3
 800a36e:	2b29      	cmp	r3, #41	@ 0x29
 800a370:	d110      	bne.n	800a394 <I2C_Slave_ISR_IT+0xb4>
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	4a59      	ldr	r2, [pc, #356]	@ (800a4dc <I2C_Slave_ISR_IT+0x1fc>)
 800a376:	4293      	cmp	r3, r2
 800a378:	d00c      	beq.n	800a394 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a37a:	68fb      	ldr	r3, [r7, #12]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	2210      	movs	r2, #16
 800a380:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800a382:	68fb      	ldr	r3, [r7, #12]
 800a384:	0018      	movs	r0, r3
 800a386:	f001 f864 	bl	800b452 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	0018      	movs	r0, r3
 800a38e:	f000 fc8b 	bl	800aca8 <I2C_ITSlaveSeqCplt>
 800a392:	e01f      	b.n	800a3d4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	2210      	movs	r2, #16
 800a39a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800a39c:	e091      	b.n	800a4c2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	2210      	movs	r2, #16
 800a3a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3aa:	2204      	movs	r2, #4
 800a3ac:	431a      	orrs	r2, r3
 800a3ae:	68fb      	ldr	r3, [r7, #12]
 800a3b0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a3b2:	697b      	ldr	r3, [r7, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d005      	beq.n	800a3c4 <I2C_Slave_ISR_IT+0xe4>
 800a3b8:	697a      	ldr	r2, [r7, #20]
 800a3ba:	2380      	movs	r3, #128	@ 0x80
 800a3bc:	045b      	lsls	r3, r3, #17
 800a3be:	429a      	cmp	r2, r3
 800a3c0:	d000      	beq.n	800a3c4 <I2C_Slave_ISR_IT+0xe4>
 800a3c2:	e07e      	b.n	800a4c2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a3c8:	68fb      	ldr	r3, [r7, #12]
 800a3ca:	0011      	movs	r1, r2
 800a3cc:	0018      	movs	r0, r3
 800a3ce:	f000 ff15 	bl	800b1fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a3d2:	e076      	b.n	800a4c2 <I2C_Slave_ISR_IT+0x1e2>
 800a3d4:	e075      	b.n	800a4c2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a3d6:	693b      	ldr	r3, [r7, #16]
 800a3d8:	2204      	movs	r2, #4
 800a3da:	4013      	ands	r3, r2
 800a3dc:	d02f      	beq.n	800a43e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	2204      	movs	r2, #4
 800a3e2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800a3e4:	d02b      	beq.n	800a43e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a3ea:	b29b      	uxth	r3, r3
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d018      	beq.n	800a422 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a402:	1c5a      	adds	r2, r3, #1
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a40c:	3b01      	subs	r3, #1
 800a40e:	b29a      	uxth	r2, r3
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a418:	b29b      	uxth	r3, r3
 800a41a:	3b01      	subs	r3, #1
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a426:	b29b      	uxth	r3, r3
 800a428:	2b00      	cmp	r3, #0
 800a42a:	d14c      	bne.n	800a4c6 <I2C_Slave_ISR_IT+0x1e6>
 800a42c:	697b      	ldr	r3, [r7, #20]
 800a42e:	4a2b      	ldr	r2, [pc, #172]	@ (800a4dc <I2C_Slave_ISR_IT+0x1fc>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d048      	beq.n	800a4c6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	0018      	movs	r0, r3
 800a438:	f000 fc36 	bl	800aca8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800a43c:	e043      	b.n	800a4c6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a43e:	693b      	ldr	r3, [r7, #16]
 800a440:	2208      	movs	r2, #8
 800a442:	4013      	ands	r3, r2
 800a444:	d00a      	beq.n	800a45c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	2208      	movs	r2, #8
 800a44a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a44c:	d006      	beq.n	800a45c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800a44e:	693a      	ldr	r2, [r7, #16]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	0011      	movs	r1, r2
 800a454:	0018      	movs	r0, r3
 800a456:	f000 fb41 	bl	800aadc <I2C_ITAddrCplt>
 800a45a:	e035      	b.n	800a4c8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a45c:	693b      	ldr	r3, [r7, #16]
 800a45e:	2202      	movs	r2, #2
 800a460:	4013      	ands	r3, r2
 800a462:	d031      	beq.n	800a4c8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	2202      	movs	r2, #2
 800a468:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a46a:	d02d      	beq.n	800a4c8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a470:	b29b      	uxth	r3, r3
 800a472:	2b00      	cmp	r3, #0
 800a474:	d018      	beq.n	800a4a8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a47a:	781a      	ldrb	r2, [r3, #0]
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a486:	1c5a      	adds	r2, r3, #1
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800a48c:	68fb      	ldr	r3, [r7, #12]
 800a48e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a490:	b29b      	uxth	r3, r3
 800a492:	3b01      	subs	r3, #1
 800a494:	b29a      	uxth	r2, r3
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a49e:	3b01      	subs	r3, #1
 800a4a0:	b29a      	uxth	r2, r3
 800a4a2:	68fb      	ldr	r3, [r7, #12]
 800a4a4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800a4a6:	e00f      	b.n	800a4c8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800a4a8:	697a      	ldr	r2, [r7, #20]
 800a4aa:	2380      	movs	r3, #128	@ 0x80
 800a4ac:	045b      	lsls	r3, r3, #17
 800a4ae:	429a      	cmp	r2, r3
 800a4b0:	d002      	beq.n	800a4b8 <I2C_Slave_ISR_IT+0x1d8>
 800a4b2:	697b      	ldr	r3, [r7, #20]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d107      	bne.n	800a4c8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	0018      	movs	r0, r3
 800a4bc:	f000 fbf4 	bl	800aca8 <I2C_ITSlaveSeqCplt>
 800a4c0:	e002      	b.n	800a4c8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800a4c2:	46c0      	nop			@ (mov r8, r8)
 800a4c4:	e000      	b.n	800a4c8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800a4c6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2240      	movs	r2, #64	@ 0x40
 800a4cc:	2100      	movs	r1, #0
 800a4ce:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4d0:	2300      	movs	r3, #0
}
 800a4d2:	0018      	movs	r0, r3
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	b006      	add	sp, #24
 800a4d8:	bd80      	pop	{r7, pc}
 800a4da:	46c0      	nop			@ (mov r8, r8)
 800a4dc:	ffff0000 	.word	0xffff0000

0800a4e0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800a4e0:	b590      	push	{r4, r7, lr}
 800a4e2:	b089      	sub	sp, #36	@ 0x24
 800a4e4:	af02      	add	r7, sp, #8
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	2240      	movs	r2, #64	@ 0x40
 800a4f0:	5c9b      	ldrb	r3, [r3, r2]
 800a4f2:	2b01      	cmp	r3, #1
 800a4f4:	d101      	bne.n	800a4fa <I2C_Master_ISR_DMA+0x1a>
 800a4f6:	2302      	movs	r3, #2
 800a4f8:	e0e7      	b.n	800a6ca <I2C_Master_ISR_DMA+0x1ea>
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	2240      	movs	r2, #64	@ 0x40
 800a4fe:	2101      	movs	r1, #1
 800a500:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	2210      	movs	r2, #16
 800a506:	4013      	ands	r3, r2
 800a508:	d017      	beq.n	800a53a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	2210      	movs	r2, #16
 800a50e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a510:	d013      	beq.n	800a53a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	2210      	movs	r2, #16
 800a518:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a51e:	2204      	movs	r2, #4
 800a520:	431a      	orrs	r2, r3
 800a522:	68fb      	ldr	r3, [r7, #12]
 800a524:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	2120      	movs	r1, #32
 800a52a:	0018      	movs	r0, r3
 800a52c:	f001 f8c6 	bl	800b6bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	0018      	movs	r0, r3
 800a534:	f000 ff8d 	bl	800b452 <I2C_Flush_TXDR>
 800a538:	e0c2      	b.n	800a6c0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a53a:	68bb      	ldr	r3, [r7, #8]
 800a53c:	2280      	movs	r2, #128	@ 0x80
 800a53e:	4013      	ands	r3, r2
 800a540:	d100      	bne.n	800a544 <I2C_Master_ISR_DMA+0x64>
 800a542:	e07c      	b.n	800a63e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2240      	movs	r2, #64	@ 0x40
 800a548:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a54a:	d100      	bne.n	800a54e <I2C_Master_ISR_DMA+0x6e>
 800a54c:	e077      	b.n	800a63e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	681a      	ldr	r2, [r3, #0]
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	2140      	movs	r1, #64	@ 0x40
 800a55a:	438a      	bics	r2, r1
 800a55c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a562:	b29b      	uxth	r3, r3
 800a564:	2b00      	cmp	r3, #0
 800a566:	d055      	beq.n	800a614 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	b29a      	uxth	r2, r3
 800a570:	2312      	movs	r3, #18
 800a572:	18fb      	adds	r3, r7, r3
 800a574:	0592      	lsls	r2, r2, #22
 800a576:	0d92      	lsrs	r2, r2, #22
 800a578:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a57e:	b29b      	uxth	r3, r3
 800a580:	2bff      	cmp	r3, #255	@ 0xff
 800a582:	d906      	bls.n	800a592 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a584:	68fb      	ldr	r3, [r7, #12]
 800a586:	22ff      	movs	r2, #255	@ 0xff
 800a588:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800a58a:	2380      	movs	r3, #128	@ 0x80
 800a58c:	045b      	lsls	r3, r3, #17
 800a58e:	617b      	str	r3, [r7, #20]
 800a590:	e010      	b.n	800a5b4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a596:	b29a      	uxth	r2, r3
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a59c:	68fb      	ldr	r3, [r7, #12]
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	4a4c      	ldr	r2, [pc, #304]	@ (800a6d4 <I2C_Master_ISR_DMA+0x1f4>)
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	d003      	beq.n	800a5ae <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5aa:	617b      	str	r3, [r7, #20]
 800a5ac:	e002      	b.n	800a5b4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800a5ae:	2380      	movs	r3, #128	@ 0x80
 800a5b0:	049b      	lsls	r3, r3, #18
 800a5b2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800a5b4:	68fb      	ldr	r3, [r7, #12]
 800a5b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5b8:	b2da      	uxtb	r2, r3
 800a5ba:	697c      	ldr	r4, [r7, #20]
 800a5bc:	2312      	movs	r3, #18
 800a5be:	18fb      	adds	r3, r7, r3
 800a5c0:	8819      	ldrh	r1, [r3, #0]
 800a5c2:	68f8      	ldr	r0, [r7, #12]
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	9300      	str	r3, [sp, #0]
 800a5c8:	0023      	movs	r3, r4
 800a5ca:	f001 f83d 	bl	800b648 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5d2:	b29a      	uxth	r2, r3
 800a5d4:	68fb      	ldr	r3, [r7, #12]
 800a5d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5d8:	1ad3      	subs	r3, r2, r3
 800a5da:	b29a      	uxth	r2, r3
 800a5dc:	68fb      	ldr	r3, [r7, #12]
 800a5de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a5e0:	68fb      	ldr	r3, [r7, #12]
 800a5e2:	2241      	movs	r2, #65	@ 0x41
 800a5e4:	5c9b      	ldrb	r3, [r3, r2]
 800a5e6:	b2db      	uxtb	r3, r3
 800a5e8:	2b22      	cmp	r3, #34	@ 0x22
 800a5ea:	d109      	bne.n	800a600 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	681a      	ldr	r2, [r3, #0]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	2180      	movs	r1, #128	@ 0x80
 800a5f8:	0209      	lsls	r1, r1, #8
 800a5fa:	430a      	orrs	r2, r1
 800a5fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a5fe:	e05f      	b.n	800a6c0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	681a      	ldr	r2, [r3, #0]
 800a606:	68fb      	ldr	r3, [r7, #12]
 800a608:	681b      	ldr	r3, [r3, #0]
 800a60a:	2180      	movs	r1, #128	@ 0x80
 800a60c:	01c9      	lsls	r1, r1, #7
 800a60e:	430a      	orrs	r2, r1
 800a610:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a612:	e055      	b.n	800a6c0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685a      	ldr	r2, [r3, #4]
 800a61a:	2380      	movs	r3, #128	@ 0x80
 800a61c:	049b      	lsls	r3, r3, #18
 800a61e:	401a      	ands	r2, r3
 800a620:	2380      	movs	r3, #128	@ 0x80
 800a622:	049b      	lsls	r3, r3, #18
 800a624:	429a      	cmp	r2, r3
 800a626:	d004      	beq.n	800a632 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	0018      	movs	r0, r3
 800a62c:	f000 fafa 	bl	800ac24 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800a630:	e046      	b.n	800a6c0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2140      	movs	r1, #64	@ 0x40
 800a636:	0018      	movs	r0, r3
 800a638:	f000 fde0 	bl	800b1fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a63c:	e040      	b.n	800a6c0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a63e:	68bb      	ldr	r3, [r7, #8]
 800a640:	2240      	movs	r2, #64	@ 0x40
 800a642:	4013      	ands	r3, r2
 800a644:	d02c      	beq.n	800a6a0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	2240      	movs	r2, #64	@ 0x40
 800a64a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a64c:	d028      	beq.n	800a6a0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a652:	b29b      	uxth	r3, r3
 800a654:	2b00      	cmp	r3, #0
 800a656:	d11d      	bne.n	800a694 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	681b      	ldr	r3, [r3, #0]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	2380      	movs	r3, #128	@ 0x80
 800a660:	049b      	lsls	r3, r3, #18
 800a662:	401a      	ands	r2, r3
 800a664:	2380      	movs	r3, #128	@ 0x80
 800a666:	049b      	lsls	r3, r3, #18
 800a668:	429a      	cmp	r2, r3
 800a66a:	d028      	beq.n	800a6be <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800a66c:	68fb      	ldr	r3, [r7, #12]
 800a66e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a670:	4a18      	ldr	r2, [pc, #96]	@ (800a6d4 <I2C_Master_ISR_DMA+0x1f4>)
 800a672:	4293      	cmp	r3, r2
 800a674:	d109      	bne.n	800a68a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	685a      	ldr	r2, [r3, #4]
 800a67c:	68fb      	ldr	r3, [r7, #12]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	2180      	movs	r1, #128	@ 0x80
 800a682:	01c9      	lsls	r1, r1, #7
 800a684:	430a      	orrs	r2, r1
 800a686:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800a688:	e019      	b.n	800a6be <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800a68a:	68fb      	ldr	r3, [r7, #12]
 800a68c:	0018      	movs	r0, r3
 800a68e:	f000 fac9 	bl	800ac24 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800a692:	e014      	b.n	800a6be <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	2140      	movs	r1, #64	@ 0x40
 800a698:	0018      	movs	r0, r3
 800a69a:	f000 fdaf 	bl	800b1fc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800a69e:	e00e      	b.n	800a6be <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a6a0:	68bb      	ldr	r3, [r7, #8]
 800a6a2:	2220      	movs	r2, #32
 800a6a4:	4013      	ands	r3, r2
 800a6a6:	d00b      	beq.n	800a6c0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	2220      	movs	r2, #32
 800a6ac:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a6ae:	d007      	beq.n	800a6c0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a6b0:	68ba      	ldr	r2, [r7, #8]
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	0011      	movs	r1, r2
 800a6b6:	0018      	movs	r0, r3
 800a6b8:	f000 fb5a 	bl	800ad70 <I2C_ITMasterCplt>
 800a6bc:	e000      	b.n	800a6c0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800a6be:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2240      	movs	r2, #64	@ 0x40
 800a6c4:	2100      	movs	r1, #0
 800a6c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a6c8:	2300      	movs	r3, #0
}
 800a6ca:	0018      	movs	r0, r3
 800a6cc:	46bd      	mov	sp, r7
 800a6ce:	b007      	add	sp, #28
 800a6d0:	bd90      	pop	{r4, r7, pc}
 800a6d2:	46c0      	nop			@ (mov r8, r8)
 800a6d4:	ffff0000 	.word	0xffff0000

0800a6d8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800a6d8:	b590      	push	{r4, r7, lr}
 800a6da:	b089      	sub	sp, #36	@ 0x24
 800a6dc:	af02      	add	r7, sp, #8
 800a6de:	60f8      	str	r0, [r7, #12]
 800a6e0:	60b9      	str	r1, [r7, #8]
 800a6e2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800a6e4:	4b88      	ldr	r3, [pc, #544]	@ (800a908 <I2C_Mem_ISR_DMA+0x230>)
 800a6e6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2240      	movs	r2, #64	@ 0x40
 800a6ec:	5c9b      	ldrb	r3, [r3, r2]
 800a6ee:	2b01      	cmp	r3, #1
 800a6f0:	d101      	bne.n	800a6f6 <I2C_Mem_ISR_DMA+0x1e>
 800a6f2:	2302      	movs	r3, #2
 800a6f4:	e104      	b.n	800a900 <I2C_Mem_ISR_DMA+0x228>
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	2240      	movs	r2, #64	@ 0x40
 800a6fa:	2101      	movs	r1, #1
 800a6fc:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a6fe:	68bb      	ldr	r3, [r7, #8]
 800a700:	2210      	movs	r2, #16
 800a702:	4013      	ands	r3, r2
 800a704:	d017      	beq.n	800a736 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	2210      	movs	r2, #16
 800a70a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a70c:	d013      	beq.n	800a736 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	681b      	ldr	r3, [r3, #0]
 800a712:	2210      	movs	r2, #16
 800a714:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a71a:	2204      	movs	r2, #4
 800a71c:	431a      	orrs	r2, r3
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2120      	movs	r1, #32
 800a726:	0018      	movs	r0, r3
 800a728:	f000 ffc8 	bl	800b6bc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	0018      	movs	r0, r3
 800a730:	f000 fe8f 	bl	800b452 <I2C_Flush_TXDR>
 800a734:	e0df      	b.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	2202      	movs	r2, #2
 800a73a:	4013      	ands	r3, r2
 800a73c:	d00d      	beq.n	800a75a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2202      	movs	r2, #2
 800a742:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800a744:	d009      	beq.n	800a75a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800a74e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	2201      	movs	r2, #1
 800a754:	4252      	negs	r2, r2
 800a756:	651a      	str	r2, [r3, #80]	@ 0x50
 800a758:	e0cd      	b.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a75a:	68bb      	ldr	r3, [r7, #8]
 800a75c:	2280      	movs	r2, #128	@ 0x80
 800a75e:	4013      	ands	r3, r2
 800a760:	d05e      	beq.n	800a820 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2240      	movs	r2, #64	@ 0x40
 800a766:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800a768:	d05a      	beq.n	800a820 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2110      	movs	r1, #16
 800a76e:	0018      	movs	r0, r3
 800a770:	f000 ffa4 	bl	800b6bc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800a774:	68fb      	ldr	r3, [r7, #12]
 800a776:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a778:	b29b      	uxth	r3, r3
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d04a      	beq.n	800a814 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a782:	b29b      	uxth	r3, r3
 800a784:	2bff      	cmp	r3, #255	@ 0xff
 800a786:	d910      	bls.n	800a7aa <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	22ff      	movs	r2, #255	@ 0xff
 800a78c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a792:	b299      	uxth	r1, r3
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a798:	b2da      	uxtb	r2, r3
 800a79a:	2380      	movs	r3, #128	@ 0x80
 800a79c:	045b      	lsls	r3, r3, #17
 800a79e:	68f8      	ldr	r0, [r7, #12]
 800a7a0:	2400      	movs	r4, #0
 800a7a2:	9400      	str	r4, [sp, #0]
 800a7a4:	f000 ff50 	bl	800b648 <I2C_TransferConfig>
 800a7a8:	e011      	b.n	800a7ce <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7ae:	b29a      	uxth	r2, r3
 800a7b0:	68fb      	ldr	r3, [r7, #12]
 800a7b2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a7b4:	68fb      	ldr	r3, [r7, #12]
 800a7b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a7b8:	b299      	uxth	r1, r3
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7be:	b2da      	uxtb	r2, r3
 800a7c0:	2380      	movs	r3, #128	@ 0x80
 800a7c2:	049b      	lsls	r3, r3, #18
 800a7c4:	68f8      	ldr	r0, [r7, #12]
 800a7c6:	2400      	movs	r4, #0
 800a7c8:	9400      	str	r4, [sp, #0]
 800a7ca:	f000 ff3d 	bl	800b648 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7d8:	1ad3      	subs	r3, r2, r3
 800a7da:	b29a      	uxth	r2, r3
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	2241      	movs	r2, #65	@ 0x41
 800a7e4:	5c9b      	ldrb	r3, [r3, r2]
 800a7e6:	b2db      	uxtb	r3, r3
 800a7e8:	2b22      	cmp	r3, #34	@ 0x22
 800a7ea:	d109      	bne.n	800a800 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	2180      	movs	r1, #128	@ 0x80
 800a7f8:	0209      	lsls	r1, r1, #8
 800a7fa:	430a      	orrs	r2, r1
 800a7fc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a7fe:	e07a      	b.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	681a      	ldr	r2, [r3, #0]
 800a806:	68fb      	ldr	r3, [r7, #12]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	2180      	movs	r1, #128	@ 0x80
 800a80c:	01c9      	lsls	r1, r1, #7
 800a80e:	430a      	orrs	r2, r1
 800a810:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800a812:	e070      	b.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	2140      	movs	r1, #64	@ 0x40
 800a818:	0018      	movs	r0, r3
 800a81a:	f000 fcef 	bl	800b1fc <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800a81e:	e06a      	b.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a820:	68bb      	ldr	r3, [r7, #8]
 800a822:	2240      	movs	r2, #64	@ 0x40
 800a824:	4013      	ands	r3, r2
 800a826:	d058      	beq.n	800a8da <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	2240      	movs	r2, #64	@ 0x40
 800a82c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800a82e:	d054      	beq.n	800a8da <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	2241      	movs	r2, #65	@ 0x41
 800a834:	5c9b      	ldrb	r3, [r3, r2]
 800a836:	b2db      	uxtb	r3, r3
 800a838:	2b22      	cmp	r3, #34	@ 0x22
 800a83a:	d101      	bne.n	800a840 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800a83c:	4b33      	ldr	r3, [pc, #204]	@ (800a90c <I2C_Mem_ISR_DMA+0x234>)
 800a83e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a844:	b29b      	uxth	r3, r3
 800a846:	2bff      	cmp	r3, #255	@ 0xff
 800a848:	d911      	bls.n	800a86e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	22ff      	movs	r2, #255	@ 0xff
 800a84e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a854:	b299      	uxth	r1, r3
 800a856:	68fb      	ldr	r3, [r7, #12]
 800a858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a85a:	b2da      	uxtb	r2, r3
 800a85c:	2380      	movs	r3, #128	@ 0x80
 800a85e:	045c      	lsls	r4, r3, #17
 800a860:	68f8      	ldr	r0, [r7, #12]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	9300      	str	r3, [sp, #0]
 800a866:	0023      	movs	r3, r4
 800a868:	f000 feee 	bl	800b648 <I2C_TransferConfig>
 800a86c:	e012      	b.n	800a894 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a86e:	68fb      	ldr	r3, [r7, #12]
 800a870:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a872:	b29a      	uxth	r2, r3
 800a874:	68fb      	ldr	r3, [r7, #12]
 800a876:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a87c:	b299      	uxth	r1, r3
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a882:	b2da      	uxtb	r2, r3
 800a884:	2380      	movs	r3, #128	@ 0x80
 800a886:	049c      	lsls	r4, r3, #18
 800a888:	68f8      	ldr	r0, [r7, #12]
 800a88a:	697b      	ldr	r3, [r7, #20]
 800a88c:	9300      	str	r3, [sp, #0]
 800a88e:	0023      	movs	r3, r4
 800a890:	f000 feda 	bl	800b648 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a898:	b29a      	uxth	r2, r3
 800a89a:	68fb      	ldr	r3, [r7, #12]
 800a89c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a89e:	1ad3      	subs	r3, r2, r3
 800a8a0:	b29a      	uxth	r2, r3
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	2241      	movs	r2, #65	@ 0x41
 800a8aa:	5c9b      	ldrb	r3, [r3, r2]
 800a8ac:	b2db      	uxtb	r3, r3
 800a8ae:	2b22      	cmp	r3, #34	@ 0x22
 800a8b0:	d109      	bne.n	800a8c6 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	681b      	ldr	r3, [r3, #0]
 800a8b6:	681a      	ldr	r2, [r3, #0]
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	681b      	ldr	r3, [r3, #0]
 800a8bc:	2180      	movs	r1, #128	@ 0x80
 800a8be:	0209      	lsls	r1, r1, #8
 800a8c0:	430a      	orrs	r2, r1
 800a8c2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a8c4:	e017      	b.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a8c6:	68fb      	ldr	r3, [r7, #12]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681a      	ldr	r2, [r3, #0]
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2180      	movs	r1, #128	@ 0x80
 800a8d2:	01c9      	lsls	r1, r1, #7
 800a8d4:	430a      	orrs	r2, r1
 800a8d6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a8d8:	e00d      	b.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a8da:	68bb      	ldr	r3, [r7, #8]
 800a8dc:	2220      	movs	r2, #32
 800a8de:	4013      	ands	r3, r2
 800a8e0:	d009      	beq.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	2220      	movs	r2, #32
 800a8e6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a8e8:	d005      	beq.n	800a8f6 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800a8ea:	68ba      	ldr	r2, [r7, #8]
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	0011      	movs	r1, r2
 800a8f0:	0018      	movs	r0, r3
 800a8f2:	f000 fa3d 	bl	800ad70 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2240      	movs	r2, #64	@ 0x40
 800a8fa:	2100      	movs	r1, #0
 800a8fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
}
 800a900:	0018      	movs	r0, r3
 800a902:	46bd      	mov	sp, r7
 800a904:	b007      	add	sp, #28
 800a906:	bd90      	pop	{r4, r7, pc}
 800a908:	80002000 	.word	0x80002000
 800a90c:	80002400 	.word	0x80002400

0800a910 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800a910:	b580      	push	{r7, lr}
 800a912:	b088      	sub	sp, #32
 800a914:	af00      	add	r7, sp, #0
 800a916:	60f8      	str	r0, [r7, #12]
 800a918:	60b9      	str	r1, [r7, #8]
 800a91a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a920:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800a922:	2300      	movs	r3, #0
 800a924:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	2240      	movs	r2, #64	@ 0x40
 800a92a:	5c9b      	ldrb	r3, [r3, r2]
 800a92c:	2b01      	cmp	r3, #1
 800a92e:	d101      	bne.n	800a934 <I2C_Slave_ISR_DMA+0x24>
 800a930:	2302      	movs	r3, #2
 800a932:	e0cd      	b.n	800aad0 <I2C_Slave_ISR_DMA+0x1c0>
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2240      	movs	r2, #64	@ 0x40
 800a938:	2101      	movs	r1, #1
 800a93a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a93c:	68bb      	ldr	r3, [r7, #8]
 800a93e:	2220      	movs	r2, #32
 800a940:	4013      	ands	r3, r2
 800a942:	d009      	beq.n	800a958 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2220      	movs	r2, #32
 800a948:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800a94a:	d005      	beq.n	800a958 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800a94c:	68ba      	ldr	r2, [r7, #8]
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	0011      	movs	r1, r2
 800a952:	0018      	movs	r0, r3
 800a954:	f000 fada 	bl	800af0c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a958:	68bb      	ldr	r3, [r7, #8]
 800a95a:	2210      	movs	r2, #16
 800a95c:	4013      	ands	r3, r2
 800a95e:	d100      	bne.n	800a962 <I2C_Slave_ISR_DMA+0x52>
 800a960:	e0a3      	b.n	800aaaa <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	2210      	movs	r2, #16
 800a966:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800a968:	d100      	bne.n	800a96c <I2C_Slave_ISR_DMA+0x5c>
 800a96a:	e09e      	b.n	800aaaa <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a96c:	687a      	ldr	r2, [r7, #4]
 800a96e:	2380      	movs	r3, #128	@ 0x80
 800a970:	01db      	lsls	r3, r3, #7
 800a972:	4013      	ands	r3, r2
 800a974:	d105      	bne.n	800a982 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800a976:	687a      	ldr	r2, [r7, #4]
 800a978:	2380      	movs	r3, #128	@ 0x80
 800a97a:	021b      	lsls	r3, r3, #8
 800a97c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a97e:	d100      	bne.n	800a982 <I2C_Slave_ISR_DMA+0x72>
 800a980:	e08c      	b.n	800aa9c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a986:	2b00      	cmp	r3, #0
 800a988:	d00c      	beq.n	800a9a4 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800a98a:	687a      	ldr	r2, [r7, #4]
 800a98c:	2380      	movs	r3, #128	@ 0x80
 800a98e:	021b      	lsls	r3, r3, #8
 800a990:	4013      	ands	r3, r2
 800a992:	d007      	beq.n	800a9a4 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	685b      	ldr	r3, [r3, #4]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d101      	bne.n	800a9a4 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800a9a0:	2301      	movs	r3, #1
 800a9a2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d00c      	beq.n	800a9c6 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800a9ac:	687a      	ldr	r2, [r7, #4]
 800a9ae:	2380      	movs	r3, #128	@ 0x80
 800a9b0:	01db      	lsls	r3, r3, #7
 800a9b2:	4013      	ands	r3, r2
 800a9b4:	d007      	beq.n	800a9c6 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	685b      	ldr	r3, [r3, #4]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d101      	bne.n	800a9c6 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800a9c2:	2301      	movs	r3, #1
 800a9c4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800a9c6:	69fb      	ldr	r3, [r7, #28]
 800a9c8:	2b01      	cmp	r3, #1
 800a9ca:	d12d      	bne.n	800aa28 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	2241      	movs	r2, #65	@ 0x41
 800a9d0:	5c9b      	ldrb	r3, [r3, r2]
 800a9d2:	b2db      	uxtb	r3, r3
 800a9d4:	2b28      	cmp	r3, #40	@ 0x28
 800a9d6:	d10b      	bne.n	800a9f0 <I2C_Slave_ISR_DMA+0xe0>
 800a9d8:	69ba      	ldr	r2, [r7, #24]
 800a9da:	2380      	movs	r3, #128	@ 0x80
 800a9dc:	049b      	lsls	r3, r3, #18
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d106      	bne.n	800a9f0 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800a9e2:	68ba      	ldr	r2, [r7, #8]
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	0011      	movs	r1, r2
 800a9e8:	0018      	movs	r0, r3
 800a9ea:	f000 fbaf 	bl	800b14c <I2C_ITListenCplt>
 800a9ee:	e054      	b.n	800aa9a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	2241      	movs	r2, #65	@ 0x41
 800a9f4:	5c9b      	ldrb	r3, [r3, r2]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b29      	cmp	r3, #41	@ 0x29
 800a9fa:	d110      	bne.n	800aa1e <I2C_Slave_ISR_DMA+0x10e>
 800a9fc:	69bb      	ldr	r3, [r7, #24]
 800a9fe:	4a36      	ldr	r2, [pc, #216]	@ (800aad8 <I2C_Slave_ISR_DMA+0x1c8>)
 800aa00:	4293      	cmp	r3, r2
 800aa02:	d00c      	beq.n	800aa1e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2210      	movs	r2, #16
 800aa0a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	0018      	movs	r0, r3
 800aa10:	f000 fd1f 	bl	800b452 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	0018      	movs	r0, r3
 800aa18:	f000 f946 	bl	800aca8 <I2C_ITSlaveSeqCplt>
 800aa1c:	e03d      	b.n	800aa9a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	2210      	movs	r2, #16
 800aa24:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800aa26:	e03e      	b.n	800aaa6 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	2210      	movs	r2, #16
 800aa2e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa34:	2204      	movs	r2, #4
 800aa36:	431a      	orrs	r2, r3
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800aa3c:	2317      	movs	r3, #23
 800aa3e:	18fb      	adds	r3, r7, r3
 800aa40:	68fa      	ldr	r2, [r7, #12]
 800aa42:	2141      	movs	r1, #65	@ 0x41
 800aa44:	5c52      	ldrb	r2, [r2, r1]
 800aa46:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800aa48:	69bb      	ldr	r3, [r7, #24]
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d004      	beq.n	800aa58 <I2C_Slave_ISR_DMA+0x148>
 800aa4e:	69ba      	ldr	r2, [r7, #24]
 800aa50:	2380      	movs	r3, #128	@ 0x80
 800aa52:	045b      	lsls	r3, r3, #17
 800aa54:	429a      	cmp	r2, r3
 800aa56:	d126      	bne.n	800aaa6 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800aa58:	2217      	movs	r2, #23
 800aa5a:	18bb      	adds	r3, r7, r2
 800aa5c:	781b      	ldrb	r3, [r3, #0]
 800aa5e:	2b21      	cmp	r3, #33	@ 0x21
 800aa60:	d003      	beq.n	800aa6a <I2C_Slave_ISR_DMA+0x15a>
 800aa62:	18bb      	adds	r3, r7, r2
 800aa64:	781b      	ldrb	r3, [r3, #0]
 800aa66:	2b29      	cmp	r3, #41	@ 0x29
 800aa68:	d103      	bne.n	800aa72 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	2221      	movs	r2, #33	@ 0x21
 800aa6e:	631a      	str	r2, [r3, #48]	@ 0x30
 800aa70:	e00b      	b.n	800aa8a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800aa72:	2217      	movs	r2, #23
 800aa74:	18bb      	adds	r3, r7, r2
 800aa76:	781b      	ldrb	r3, [r3, #0]
 800aa78:	2b22      	cmp	r3, #34	@ 0x22
 800aa7a:	d003      	beq.n	800aa84 <I2C_Slave_ISR_DMA+0x174>
 800aa7c:	18bb      	adds	r3, r7, r2
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	2b2a      	cmp	r3, #42	@ 0x2a
 800aa82:	d102      	bne.n	800aa8a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800aa84:	68fb      	ldr	r3, [r7, #12]
 800aa86:	2222      	movs	r2, #34	@ 0x22
 800aa88:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	0011      	movs	r1, r2
 800aa92:	0018      	movs	r0, r3
 800aa94:	f000 fbb2 	bl	800b1fc <I2C_ITError>
      if (treatdmanack == 1U)
 800aa98:	e005      	b.n	800aaa6 <I2C_Slave_ISR_DMA+0x196>
 800aa9a:	e004      	b.n	800aaa6 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	2210      	movs	r2, #16
 800aaa2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800aaa4:	e00f      	b.n	800aac6 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800aaa6:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800aaa8:	e00d      	b.n	800aac6 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	2208      	movs	r2, #8
 800aaae:	4013      	ands	r3, r2
 800aab0:	d009      	beq.n	800aac6 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	2208      	movs	r2, #8
 800aab6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800aab8:	d005      	beq.n	800aac6 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800aaba:	68ba      	ldr	r2, [r7, #8]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	0011      	movs	r1, r2
 800aac0:	0018      	movs	r0, r3
 800aac2:	f000 f80b 	bl	800aadc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	2240      	movs	r2, #64	@ 0x40
 800aaca:	2100      	movs	r1, #0
 800aacc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aace:	2300      	movs	r3, #0
}
 800aad0:	0018      	movs	r0, r3
 800aad2:	46bd      	mov	sp, r7
 800aad4:	b008      	add	sp, #32
 800aad6:	bd80      	pop	{r7, pc}
 800aad8:	ffff0000 	.word	0xffff0000

0800aadc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800aadc:	b5b0      	push	{r4, r5, r7, lr}
 800aade:	b084      	sub	sp, #16
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
 800aae4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	2241      	movs	r2, #65	@ 0x41
 800aaea:	5c9b      	ldrb	r3, [r3, r2]
 800aaec:	b2db      	uxtb	r3, r3
 800aaee:	001a      	movs	r2, r3
 800aaf0:	2328      	movs	r3, #40	@ 0x28
 800aaf2:	4013      	ands	r3, r2
 800aaf4:	2b28      	cmp	r3, #40	@ 0x28
 800aaf6:	d000      	beq.n	800aafa <I2C_ITAddrCplt+0x1e>
 800aaf8:	e088      	b.n	800ac0c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	681b      	ldr	r3, [r3, #0]
 800aafe:	699b      	ldr	r3, [r3, #24]
 800ab00:	0c1b      	lsrs	r3, r3, #16
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	250f      	movs	r5, #15
 800ab06:	197b      	adds	r3, r7, r5
 800ab08:	2101      	movs	r1, #1
 800ab0a:	400a      	ands	r2, r1
 800ab0c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	699b      	ldr	r3, [r3, #24]
 800ab14:	0c1b      	lsrs	r3, r3, #16
 800ab16:	b29a      	uxth	r2, r3
 800ab18:	200c      	movs	r0, #12
 800ab1a:	183b      	adds	r3, r7, r0
 800ab1c:	21fe      	movs	r1, #254	@ 0xfe
 800ab1e:	400a      	ands	r2, r1
 800ab20:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	b29a      	uxth	r2, r3
 800ab2a:	240a      	movs	r4, #10
 800ab2c:	193b      	adds	r3, r7, r4
 800ab2e:	0592      	lsls	r2, r2, #22
 800ab30:	0d92      	lsrs	r2, r2, #22
 800ab32:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800ab34:	687b      	ldr	r3, [r7, #4]
 800ab36:	681b      	ldr	r3, [r3, #0]
 800ab38:	68db      	ldr	r3, [r3, #12]
 800ab3a:	b29a      	uxth	r2, r3
 800ab3c:	2308      	movs	r3, #8
 800ab3e:	18fb      	adds	r3, r7, r3
 800ab40:	21fe      	movs	r1, #254	@ 0xfe
 800ab42:	400a      	ands	r2, r1
 800ab44:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	68db      	ldr	r3, [r3, #12]
 800ab4a:	2b02      	cmp	r3, #2
 800ab4c:	d148      	bne.n	800abe0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800ab4e:	0021      	movs	r1, r4
 800ab50:	187b      	adds	r3, r7, r1
 800ab52:	881b      	ldrh	r3, [r3, #0]
 800ab54:	09db      	lsrs	r3, r3, #7
 800ab56:	b29a      	uxth	r2, r3
 800ab58:	183b      	adds	r3, r7, r0
 800ab5a:	881b      	ldrh	r3, [r3, #0]
 800ab5c:	4053      	eors	r3, r2
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	001a      	movs	r2, r3
 800ab62:	2306      	movs	r3, #6
 800ab64:	4013      	ands	r3, r2
 800ab66:	d120      	bne.n	800abaa <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800ab68:	183b      	adds	r3, r7, r0
 800ab6a:	187a      	adds	r2, r7, r1
 800ab6c:	8812      	ldrh	r2, [r2, #0]
 800ab6e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab74:	1c5a      	adds	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ab7e:	2b02      	cmp	r3, #2
 800ab80:	d14c      	bne.n	800ac1c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	2208      	movs	r2, #8
 800ab8e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	2240      	movs	r2, #64	@ 0x40
 800ab94:	2100      	movs	r1, #0
 800ab96:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800ab98:	183b      	adds	r3, r7, r0
 800ab9a:	881a      	ldrh	r2, [r3, #0]
 800ab9c:	197b      	adds	r3, r7, r5
 800ab9e:	7819      	ldrb	r1, [r3, #0]
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	0018      	movs	r0, r3
 800aba4:	f7ff fa39 	bl	800a01a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800aba8:	e038      	b.n	800ac1c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800abaa:	240c      	movs	r4, #12
 800abac:	193b      	adds	r3, r7, r4
 800abae:	2208      	movs	r2, #8
 800abb0:	18ba      	adds	r2, r7, r2
 800abb2:	8812      	ldrh	r2, [r2, #0]
 800abb4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800abb6:	2380      	movs	r3, #128	@ 0x80
 800abb8:	021a      	lsls	r2, r3, #8
 800abba:	687b      	ldr	r3, [r7, #4]
 800abbc:	0011      	movs	r1, r2
 800abbe:	0018      	movs	r0, r3
 800abc0:	f000 fe0a 	bl	800b7d8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2240      	movs	r2, #64	@ 0x40
 800abc8:	2100      	movs	r1, #0
 800abca:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800abcc:	193b      	adds	r3, r7, r4
 800abce:	881a      	ldrh	r2, [r3, #0]
 800abd0:	230f      	movs	r3, #15
 800abd2:	18fb      	adds	r3, r7, r3
 800abd4:	7819      	ldrb	r1, [r3, #0]
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	0018      	movs	r0, r3
 800abda:	f7ff fa1e 	bl	800a01a <HAL_I2C_AddrCallback>
}
 800abde:	e01d      	b.n	800ac1c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800abe0:	2380      	movs	r3, #128	@ 0x80
 800abe2:	021a      	lsls	r2, r3, #8
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	0011      	movs	r1, r2
 800abe8:	0018      	movs	r0, r3
 800abea:	f000 fdf5 	bl	800b7d8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	2240      	movs	r2, #64	@ 0x40
 800abf2:	2100      	movs	r1, #0
 800abf4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800abf6:	230c      	movs	r3, #12
 800abf8:	18fb      	adds	r3, r7, r3
 800abfa:	881a      	ldrh	r2, [r3, #0]
 800abfc:	230f      	movs	r3, #15
 800abfe:	18fb      	adds	r3, r7, r3
 800ac00:	7819      	ldrb	r1, [r3, #0]
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	0018      	movs	r0, r3
 800ac06:	f7ff fa08 	bl	800a01a <HAL_I2C_AddrCallback>
}
 800ac0a:	e007      	b.n	800ac1c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	2208      	movs	r2, #8
 800ac12:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800ac14:	687b      	ldr	r3, [r7, #4]
 800ac16:	2240      	movs	r2, #64	@ 0x40
 800ac18:	2100      	movs	r1, #0
 800ac1a:	5499      	strb	r1, [r3, r2]
}
 800ac1c:	46c0      	nop			@ (mov r8, r8)
 800ac1e:	46bd      	mov	sp, r7
 800ac20:	b004      	add	sp, #16
 800ac22:	bdb0      	pop	{r4, r5, r7, pc}

0800ac24 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b082      	sub	sp, #8
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2242      	movs	r2, #66	@ 0x42
 800ac30:	2100      	movs	r1, #0
 800ac32:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	2241      	movs	r2, #65	@ 0x41
 800ac38:	5c9b      	ldrb	r3, [r3, r2]
 800ac3a:	b2db      	uxtb	r3, r3
 800ac3c:	2b21      	cmp	r3, #33	@ 0x21
 800ac3e:	d117      	bne.n	800ac70 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	2241      	movs	r2, #65	@ 0x41
 800ac44:	2120      	movs	r1, #32
 800ac46:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	2211      	movs	r2, #17
 800ac4c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	2200      	movs	r2, #0
 800ac52:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2101      	movs	r1, #1
 800ac58:	0018      	movs	r0, r3
 800ac5a:	f000 fdbd 	bl	800b7d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2240      	movs	r2, #64	@ 0x40
 800ac62:	2100      	movs	r1, #0
 800ac64:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	0018      	movs	r0, r3
 800ac6a:	f7ff f9b6 	bl	8009fda <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ac6e:	e016      	b.n	800ac9e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2241      	movs	r2, #65	@ 0x41
 800ac74:	2120      	movs	r1, #32
 800ac76:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800ac78:	687b      	ldr	r3, [r7, #4]
 800ac7a:	2212      	movs	r2, #18
 800ac7c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	2200      	movs	r2, #0
 800ac82:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	2102      	movs	r1, #2
 800ac88:	0018      	movs	r0, r3
 800ac8a:	f000 fda5 	bl	800b7d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	2240      	movs	r2, #64	@ 0x40
 800ac92:	2100      	movs	r1, #0
 800ac94:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	0018      	movs	r0, r3
 800ac9a:	f7ff f9a6 	bl	8009fea <HAL_I2C_MasterRxCpltCallback>
}
 800ac9e:	46c0      	nop			@ (mov r8, r8)
 800aca0:	46bd      	mov	sp, r7
 800aca2:	b002      	add	sp, #8
 800aca4:	bd80      	pop	{r7, pc}
	...

0800aca8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b084      	sub	sp, #16
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2242      	movs	r2, #66	@ 0x42
 800acbc:	2100      	movs	r1, #0
 800acbe:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800acc0:	68fa      	ldr	r2, [r7, #12]
 800acc2:	2380      	movs	r3, #128	@ 0x80
 800acc4:	01db      	lsls	r3, r3, #7
 800acc6:	4013      	ands	r3, r2
 800acc8:	d008      	beq.n	800acdc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	681b      	ldr	r3, [r3, #0]
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4924      	ldr	r1, [pc, #144]	@ (800ad68 <I2C_ITSlaveSeqCplt+0xc0>)
 800acd6:	400a      	ands	r2, r1
 800acd8:	601a      	str	r2, [r3, #0]
 800acda:	e00c      	b.n	800acf6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800acdc:	68fa      	ldr	r2, [r7, #12]
 800acde:	2380      	movs	r3, #128	@ 0x80
 800ace0:	021b      	lsls	r3, r3, #8
 800ace2:	4013      	ands	r3, r2
 800ace4:	d007      	beq.n	800acf6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	491e      	ldr	r1, [pc, #120]	@ (800ad6c <I2C_ITSlaveSeqCplt+0xc4>)
 800acf2:	400a      	ands	r2, r1
 800acf4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2241      	movs	r2, #65	@ 0x41
 800acfa:	5c9b      	ldrb	r3, [r3, r2]
 800acfc:	b2db      	uxtb	r3, r3
 800acfe:	2b29      	cmp	r3, #41	@ 0x29
 800ad00:	d114      	bne.n	800ad2c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	2241      	movs	r2, #65	@ 0x41
 800ad06:	2128      	movs	r1, #40	@ 0x28
 800ad08:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	2221      	movs	r2, #33	@ 0x21
 800ad0e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	2101      	movs	r1, #1
 800ad14:	0018      	movs	r0, r3
 800ad16:	f000 fd5f 	bl	800b7d8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	2240      	movs	r2, #64	@ 0x40
 800ad1e:	2100      	movs	r1, #0
 800ad20:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	0018      	movs	r0, r3
 800ad26:	f7ff f968 	bl	8009ffa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ad2a:	e019      	b.n	800ad60 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	2241      	movs	r2, #65	@ 0x41
 800ad30:	5c9b      	ldrb	r3, [r3, r2]
 800ad32:	b2db      	uxtb	r3, r3
 800ad34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad36:	d113      	bne.n	800ad60 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	2241      	movs	r2, #65	@ 0x41
 800ad3c:	2128      	movs	r1, #40	@ 0x28
 800ad3e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2222      	movs	r2, #34	@ 0x22
 800ad44:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	2102      	movs	r1, #2
 800ad4a:	0018      	movs	r0, r3
 800ad4c:	f000 fd44 	bl	800b7d8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2240      	movs	r2, #64	@ 0x40
 800ad54:	2100      	movs	r1, #0
 800ad56:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	0018      	movs	r0, r3
 800ad5c:	f7ff f955 	bl	800a00a <HAL_I2C_SlaveRxCpltCallback>
}
 800ad60:	46c0      	nop			@ (mov r8, r8)
 800ad62:	46bd      	mov	sp, r7
 800ad64:	b004      	add	sp, #16
 800ad66:	bd80      	pop	{r7, pc}
 800ad68:	ffffbfff 	.word	0xffffbfff
 800ad6c:	ffff7fff 	.word	0xffff7fff

0800ad70 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800ad70:	b580      	push	{r7, lr}
 800ad72:	b086      	sub	sp, #24
 800ad74:	af00      	add	r7, sp, #0
 800ad76:	6078      	str	r0, [r7, #4]
 800ad78:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800ad7a:	683b      	ldr	r3, [r7, #0]
 800ad7c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681b      	ldr	r3, [r3, #0]
 800ad82:	2220      	movs	r2, #32
 800ad84:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	2241      	movs	r2, #65	@ 0x41
 800ad8a:	5c9b      	ldrb	r3, [r3, r2]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b21      	cmp	r3, #33	@ 0x21
 800ad90:	d108      	bne.n	800ada4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	2101      	movs	r1, #1
 800ad96:	0018      	movs	r0, r3
 800ad98:	f000 fd1e 	bl	800b7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800ad9c:	687b      	ldr	r3, [r7, #4]
 800ad9e:	2211      	movs	r2, #17
 800ada0:	631a      	str	r2, [r3, #48]	@ 0x30
 800ada2:	e00d      	b.n	800adc0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	2241      	movs	r2, #65	@ 0x41
 800ada8:	5c9b      	ldrb	r3, [r3, r2]
 800adaa:	b2db      	uxtb	r3, r3
 800adac:	2b22      	cmp	r3, #34	@ 0x22
 800adae:	d107      	bne.n	800adc0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2102      	movs	r1, #2
 800adb4:	0018      	movs	r0, r3
 800adb6:	f000 fd0f 	bl	800b7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2212      	movs	r2, #18
 800adbe:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	685a      	ldr	r2, [r3, #4]
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	494e      	ldr	r1, [pc, #312]	@ (800af04 <I2C_ITMasterCplt+0x194>)
 800adcc:	400a      	ands	r2, r1
 800adce:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	2200      	movs	r2, #0
 800add4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	4a4b      	ldr	r2, [pc, #300]	@ (800af08 <I2C_ITMasterCplt+0x198>)
 800adda:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800addc:	697b      	ldr	r3, [r7, #20]
 800adde:	2210      	movs	r2, #16
 800ade0:	4013      	ands	r3, r2
 800ade2:	d009      	beq.n	800adf8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	2210      	movs	r2, #16
 800adea:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adf0:	2204      	movs	r2, #4
 800adf2:	431a      	orrs	r2, r3
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	2241      	movs	r2, #65	@ 0x41
 800adfc:	5c9b      	ldrb	r3, [r3, r2]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	2b60      	cmp	r3, #96	@ 0x60
 800ae02:	d109      	bne.n	800ae18 <I2C_ITMasterCplt+0xa8>
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	2204      	movs	r2, #4
 800ae08:	4013      	ands	r3, r2
 800ae0a:	d005      	beq.n	800ae18 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800ae16:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	0018      	movs	r0, r3
 800ae1c:	f000 fb19 	bl	800b452 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ae24:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	2241      	movs	r2, #65	@ 0x41
 800ae2a:	5c9b      	ldrb	r3, [r3, r2]
 800ae2c:	b2db      	uxtb	r3, r3
 800ae2e:	2b60      	cmp	r3, #96	@ 0x60
 800ae30:	d002      	beq.n	800ae38 <I2C_ITMasterCplt+0xc8>
 800ae32:	693b      	ldr	r3, [r7, #16]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d007      	beq.n	800ae48 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	0011      	movs	r1, r2
 800ae40:	0018      	movs	r0, r3
 800ae42:	f000 f9db 	bl	800b1fc <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800ae46:	e058      	b.n	800aefa <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	2241      	movs	r2, #65	@ 0x41
 800ae4c:	5c9b      	ldrb	r3, [r3, r2]
 800ae4e:	b2db      	uxtb	r3, r3
 800ae50:	2b21      	cmp	r3, #33	@ 0x21
 800ae52:	d126      	bne.n	800aea2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	2241      	movs	r2, #65	@ 0x41
 800ae58:	2120      	movs	r1, #32
 800ae5a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	2200      	movs	r2, #0
 800ae60:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	2242      	movs	r2, #66	@ 0x42
 800ae66:	5c9b      	ldrb	r3, [r3, r2]
 800ae68:	b2db      	uxtb	r3, r3
 800ae6a:	2b40      	cmp	r3, #64	@ 0x40
 800ae6c:	d10c      	bne.n	800ae88 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	2242      	movs	r2, #66	@ 0x42
 800ae72:	2100      	movs	r1, #0
 800ae74:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	2240      	movs	r2, #64	@ 0x40
 800ae7a:	2100      	movs	r1, #0
 800ae7c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	0018      	movs	r0, r3
 800ae82:	f7ff f8e2 	bl	800a04a <HAL_I2C_MemTxCpltCallback>
}
 800ae86:	e038      	b.n	800aefa <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2242      	movs	r2, #66	@ 0x42
 800ae8c:	2100      	movs	r1, #0
 800ae8e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2240      	movs	r2, #64	@ 0x40
 800ae94:	2100      	movs	r1, #0
 800ae96:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800ae98:	687b      	ldr	r3, [r7, #4]
 800ae9a:	0018      	movs	r0, r3
 800ae9c:	f7ff f89d 	bl	8009fda <HAL_I2C_MasterTxCpltCallback>
}
 800aea0:	e02b      	b.n	800aefa <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	2241      	movs	r2, #65	@ 0x41
 800aea6:	5c9b      	ldrb	r3, [r3, r2]
 800aea8:	b2db      	uxtb	r3, r3
 800aeaa:	2b22      	cmp	r3, #34	@ 0x22
 800aeac:	d125      	bne.n	800aefa <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800aeae:	687b      	ldr	r3, [r7, #4]
 800aeb0:	2241      	movs	r2, #65	@ 0x41
 800aeb2:	2120      	movs	r1, #32
 800aeb4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	2200      	movs	r2, #0
 800aeba:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2242      	movs	r2, #66	@ 0x42
 800aec0:	5c9b      	ldrb	r3, [r3, r2]
 800aec2:	b2db      	uxtb	r3, r3
 800aec4:	2b40      	cmp	r3, #64	@ 0x40
 800aec6:	d10c      	bne.n	800aee2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	2242      	movs	r2, #66	@ 0x42
 800aecc:	2100      	movs	r1, #0
 800aece:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	2240      	movs	r2, #64	@ 0x40
 800aed4:	2100      	movs	r1, #0
 800aed6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	0018      	movs	r0, r3
 800aedc:	f7ff f8bd 	bl	800a05a <HAL_I2C_MemRxCpltCallback>
}
 800aee0:	e00b      	b.n	800aefa <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	2242      	movs	r2, #66	@ 0x42
 800aee6:	2100      	movs	r1, #0
 800aee8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2240      	movs	r2, #64	@ 0x40
 800aeee:	2100      	movs	r1, #0
 800aef0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	0018      	movs	r0, r3
 800aef6:	f7ff f878 	bl	8009fea <HAL_I2C_MasterRxCpltCallback>
}
 800aefa:	46c0      	nop			@ (mov r8, r8)
 800aefc:	46bd      	mov	sp, r7
 800aefe:	b006      	add	sp, #24
 800af00:	bd80      	pop	{r7, pc}
 800af02:	46c0      	nop			@ (mov r8, r8)
 800af04:	fe00e800 	.word	0xfe00e800
 800af08:	ffff0000 	.word	0xffff0000

0800af0c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b086      	sub	sp, #24
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
 800af14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800af1e:	683b      	ldr	r3, [r7, #0]
 800af20:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800af22:	200f      	movs	r0, #15
 800af24:	183b      	adds	r3, r7, r0
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	2141      	movs	r1, #65	@ 0x41
 800af2a:	5c52      	ldrb	r2, [r2, r1]
 800af2c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	2220      	movs	r2, #32
 800af34:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800af36:	183b      	adds	r3, r7, r0
 800af38:	781b      	ldrb	r3, [r3, #0]
 800af3a:	2b21      	cmp	r3, #33	@ 0x21
 800af3c:	d003      	beq.n	800af46 <I2C_ITSlaveCplt+0x3a>
 800af3e:	183b      	adds	r3, r7, r0
 800af40:	781b      	ldrb	r3, [r3, #0]
 800af42:	2b29      	cmp	r3, #41	@ 0x29
 800af44:	d109      	bne.n	800af5a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800af46:	4a7b      	ldr	r2, [pc, #492]	@ (800b134 <I2C_ITSlaveCplt+0x228>)
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	0011      	movs	r1, r2
 800af4c:	0018      	movs	r0, r3
 800af4e:	f000 fc43 	bl	800b7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2221      	movs	r2, #33	@ 0x21
 800af56:	631a      	str	r2, [r3, #48]	@ 0x30
 800af58:	e011      	b.n	800af7e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800af5a:	220f      	movs	r2, #15
 800af5c:	18bb      	adds	r3, r7, r2
 800af5e:	781b      	ldrb	r3, [r3, #0]
 800af60:	2b22      	cmp	r3, #34	@ 0x22
 800af62:	d003      	beq.n	800af6c <I2C_ITSlaveCplt+0x60>
 800af64:	18bb      	adds	r3, r7, r2
 800af66:	781b      	ldrb	r3, [r3, #0]
 800af68:	2b2a      	cmp	r3, #42	@ 0x2a
 800af6a:	d108      	bne.n	800af7e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800af6c:	4a72      	ldr	r2, [pc, #456]	@ (800b138 <I2C_ITSlaveCplt+0x22c>)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	0011      	movs	r1, r2
 800af72:	0018      	movs	r0, r3
 800af74:	f000 fc30 	bl	800b7d8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	2222      	movs	r2, #34	@ 0x22
 800af7c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	685a      	ldr	r2, [r3, #4]
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	2180      	movs	r1, #128	@ 0x80
 800af8a:	0209      	lsls	r1, r1, #8
 800af8c:	430a      	orrs	r2, r1
 800af8e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	685a      	ldr	r2, [r3, #4]
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	681b      	ldr	r3, [r3, #0]
 800af9a:	4968      	ldr	r1, [pc, #416]	@ (800b13c <I2C_ITSlaveCplt+0x230>)
 800af9c:	400a      	ands	r2, r1
 800af9e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	0018      	movs	r0, r3
 800afa4:	f000 fa55 	bl	800b452 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800afa8:	693a      	ldr	r2, [r7, #16]
 800afaa:	2380      	movs	r3, #128	@ 0x80
 800afac:	01db      	lsls	r3, r3, #7
 800afae:	4013      	ands	r3, r2
 800afb0:	d013      	beq.n	800afda <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	681b      	ldr	r3, [r3, #0]
 800afb6:	681a      	ldr	r2, [r3, #0]
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	4960      	ldr	r1, [pc, #384]	@ (800b140 <I2C_ITSlaveCplt+0x234>)
 800afbe:	400a      	ands	r2, r1
 800afc0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afc6:	2b00      	cmp	r3, #0
 800afc8:	d01f      	beq.n	800b00a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800afce:	681b      	ldr	r3, [r3, #0]
 800afd0:	685b      	ldr	r3, [r3, #4]
 800afd2:	b29a      	uxth	r2, r3
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800afd8:	e017      	b.n	800b00a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800afda:	693a      	ldr	r2, [r7, #16]
 800afdc:	2380      	movs	r3, #128	@ 0x80
 800afde:	021b      	lsls	r3, r3, #8
 800afe0:	4013      	ands	r3, r2
 800afe2:	d012      	beq.n	800b00a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	681a      	ldr	r2, [r3, #0]
 800afea:	687b      	ldr	r3, [r7, #4]
 800afec:	681b      	ldr	r3, [r3, #0]
 800afee:	4955      	ldr	r1, [pc, #340]	@ (800b144 <I2C_ITSlaveCplt+0x238>)
 800aff0:	400a      	ands	r2, r1
 800aff2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d006      	beq.n	800b00a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	685b      	ldr	r3, [r3, #4]
 800b004:	b29a      	uxth	r2, r3
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800b00a:	697b      	ldr	r3, [r7, #20]
 800b00c:	2204      	movs	r2, #4
 800b00e:	4013      	ands	r3, r2
 800b010:	d020      	beq.n	800b054 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800b012:	697b      	ldr	r3, [r7, #20]
 800b014:	2204      	movs	r2, #4
 800b016:	4393      	bics	r3, r2
 800b018:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b024:	b2d2      	uxtb	r2, r2
 800b026:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b02c:	1c5a      	adds	r2, r3, #1
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00c      	beq.n	800b054 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b03e:	3b01      	subs	r3, #1
 800b040:	b29a      	uxth	r2, r3
 800b042:	687b      	ldr	r3, [r7, #4]
 800b044:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b04a:	b29b      	uxth	r3, r3
 800b04c:	3b01      	subs	r3, #1
 800b04e:	b29a      	uxth	r2, r3
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b058:	b29b      	uxth	r3, r3
 800b05a:	2b00      	cmp	r3, #0
 800b05c:	d005      	beq.n	800b06a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b062:	2204      	movs	r2, #4
 800b064:	431a      	orrs	r2, r3
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2242      	movs	r2, #66	@ 0x42
 800b06e:	2100      	movs	r1, #0
 800b070:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2200      	movs	r2, #0
 800b076:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d013      	beq.n	800b0a8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	0011      	movs	r1, r2
 800b088:	0018      	movs	r0, r3
 800b08a:	f000 f8b7 	bl	800b1fc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b08e:	687b      	ldr	r3, [r7, #4]
 800b090:	2241      	movs	r2, #65	@ 0x41
 800b092:	5c9b      	ldrb	r3, [r3, r2]
 800b094:	b2db      	uxtb	r3, r3
 800b096:	2b28      	cmp	r3, #40	@ 0x28
 800b098:	d147      	bne.n	800b12a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800b09a:	697a      	ldr	r2, [r7, #20]
 800b09c:	687b      	ldr	r3, [r7, #4]
 800b09e:	0011      	movs	r1, r2
 800b0a0:	0018      	movs	r0, r3
 800b0a2:	f000 f853 	bl	800b14c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b0a6:	e040      	b.n	800b12a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0ac:	4a26      	ldr	r2, [pc, #152]	@ (800b148 <I2C_ITSlaveCplt+0x23c>)
 800b0ae:	4293      	cmp	r3, r2
 800b0b0:	d016      	beq.n	800b0e0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	0018      	movs	r0, r3
 800b0b6:	f7ff fdf7 	bl	800aca8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	4a22      	ldr	r2, [pc, #136]	@ (800b148 <I2C_ITSlaveCplt+0x23c>)
 800b0be:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800b0c0:	687b      	ldr	r3, [r7, #4]
 800b0c2:	2241      	movs	r2, #65	@ 0x41
 800b0c4:	2120      	movs	r1, #32
 800b0c6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2200      	movs	r2, #0
 800b0cc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	2240      	movs	r2, #64	@ 0x40
 800b0d2:	2100      	movs	r1, #0
 800b0d4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	0018      	movs	r0, r3
 800b0da:	f7fe ffae 	bl	800a03a <HAL_I2C_ListenCpltCallback>
}
 800b0de:	e024      	b.n	800b12a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	2241      	movs	r2, #65	@ 0x41
 800b0e4:	5c9b      	ldrb	r3, [r3, r2]
 800b0e6:	b2db      	uxtb	r3, r3
 800b0e8:	2b22      	cmp	r3, #34	@ 0x22
 800b0ea:	d10f      	bne.n	800b10c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	2241      	movs	r2, #65	@ 0x41
 800b0f0:	2120      	movs	r1, #32
 800b0f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	2200      	movs	r2, #0
 800b0f8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	2240      	movs	r2, #64	@ 0x40
 800b0fe:	2100      	movs	r1, #0
 800b100:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	0018      	movs	r0, r3
 800b106:	f7fe ff80 	bl	800a00a <HAL_I2C_SlaveRxCpltCallback>
}
 800b10a:	e00e      	b.n	800b12a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	2241      	movs	r2, #65	@ 0x41
 800b110:	2120      	movs	r1, #32
 800b112:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	2200      	movs	r2, #0
 800b118:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	2240      	movs	r2, #64	@ 0x40
 800b11e:	2100      	movs	r1, #0
 800b120:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	0018      	movs	r0, r3
 800b126:	f7fe ff68 	bl	8009ffa <HAL_I2C_SlaveTxCpltCallback>
}
 800b12a:	46c0      	nop			@ (mov r8, r8)
 800b12c:	46bd      	mov	sp, r7
 800b12e:	b006      	add	sp, #24
 800b130:	bd80      	pop	{r7, pc}
 800b132:	46c0      	nop			@ (mov r8, r8)
 800b134:	00008001 	.word	0x00008001
 800b138:	00008002 	.word	0x00008002
 800b13c:	fe00e800 	.word	0xfe00e800
 800b140:	ffffbfff 	.word	0xffffbfff
 800b144:	ffff7fff 	.word	0xffff7fff
 800b148:	ffff0000 	.word	0xffff0000

0800b14c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b082      	sub	sp, #8
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
 800b154:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	4a26      	ldr	r2, [pc, #152]	@ (800b1f4 <I2C_ITListenCplt+0xa8>)
 800b15a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2200      	movs	r2, #0
 800b160:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2241      	movs	r2, #65	@ 0x41
 800b166:	2120      	movs	r1, #32
 800b168:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	2242      	movs	r2, #66	@ 0x42
 800b16e:	2100      	movs	r1, #0
 800b170:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	2200      	movs	r2, #0
 800b176:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800b178:	683b      	ldr	r3, [r7, #0]
 800b17a:	2204      	movs	r2, #4
 800b17c:	4013      	ands	r3, r2
 800b17e:	d022      	beq.n	800b1c6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b18a:	b2d2      	uxtb	r2, r2
 800b18c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b192:	1c5a      	adds	r2, r3, #1
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d012      	beq.n	800b1c6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1a4:	3b01      	subs	r3, #1
 800b1a6:	b29a      	uxth	r2, r3
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1b0:	b29b      	uxth	r3, r3
 800b1b2:	3b01      	subs	r3, #1
 800b1b4:	b29a      	uxth	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b1be:	2204      	movs	r2, #4
 800b1c0:	431a      	orrs	r2, r3
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b1c6:	4a0c      	ldr	r2, [pc, #48]	@ (800b1f8 <I2C_ITListenCplt+0xac>)
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	0011      	movs	r1, r2
 800b1cc:	0018      	movs	r0, r3
 800b1ce:	f000 fb03 	bl	800b7d8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	2210      	movs	r2, #16
 800b1d8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	2240      	movs	r2, #64	@ 0x40
 800b1de:	2100      	movs	r1, #0
 800b1e0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	0018      	movs	r0, r3
 800b1e6:	f7fe ff28 	bl	800a03a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	b002      	add	sp, #8
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	46c0      	nop			@ (mov r8, r8)
 800b1f4:	ffff0000 	.word	0xffff0000
 800b1f8:	00008003 	.word	0x00008003

0800b1fc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b084      	sub	sp, #16
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b206:	200f      	movs	r0, #15
 800b208:	183b      	adds	r3, r7, r0
 800b20a:	687a      	ldr	r2, [r7, #4]
 800b20c:	2141      	movs	r1, #65	@ 0x41
 800b20e:	5c52      	ldrb	r2, [r2, r1]
 800b210:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2242      	movs	r2, #66	@ 0x42
 800b216:	2100      	movs	r1, #0
 800b218:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	4a72      	ldr	r2, [pc, #456]	@ (800b3e8 <I2C_ITError+0x1ec>)
 800b21e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b22a:	683b      	ldr	r3, [r7, #0]
 800b22c:	431a      	orrs	r2, r3
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800b232:	183b      	adds	r3, r7, r0
 800b234:	781b      	ldrb	r3, [r3, #0]
 800b236:	2b28      	cmp	r3, #40	@ 0x28
 800b238:	d007      	beq.n	800b24a <I2C_ITError+0x4e>
 800b23a:	183b      	adds	r3, r7, r0
 800b23c:	781b      	ldrb	r3, [r3, #0]
 800b23e:	2b29      	cmp	r3, #41	@ 0x29
 800b240:	d003      	beq.n	800b24a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800b242:	183b      	adds	r3, r7, r0
 800b244:	781b      	ldrb	r3, [r3, #0]
 800b246:	2b2a      	cmp	r3, #42	@ 0x2a
 800b248:	d10c      	bne.n	800b264 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2103      	movs	r1, #3
 800b24e:	0018      	movs	r0, r3
 800b250:	f000 fac2 	bl	800b7d8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2241      	movs	r2, #65	@ 0x41
 800b258:	2128      	movs	r1, #40	@ 0x28
 800b25a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a63      	ldr	r2, [pc, #396]	@ (800b3ec <I2C_ITError+0x1f0>)
 800b260:	635a      	str	r2, [r3, #52]	@ 0x34
 800b262:	e032      	b.n	800b2ca <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800b264:	4a62      	ldr	r2, [pc, #392]	@ (800b3f0 <I2C_ITError+0x1f4>)
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	0011      	movs	r1, r2
 800b26a:	0018      	movs	r0, r3
 800b26c:	f000 fab4 	bl	800b7d8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	0018      	movs	r0, r3
 800b274:	f000 f8ed 	bl	800b452 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2241      	movs	r2, #65	@ 0x41
 800b27c:	5c9b      	ldrb	r3, [r3, r2]
 800b27e:	b2db      	uxtb	r3, r3
 800b280:	2b60      	cmp	r3, #96	@ 0x60
 800b282:	d01f      	beq.n	800b2c4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	2241      	movs	r2, #65	@ 0x41
 800b288:	2120      	movs	r1, #32
 800b28a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	2220      	movs	r2, #32
 800b294:	4013      	ands	r3, r2
 800b296:	2b20      	cmp	r3, #32
 800b298:	d114      	bne.n	800b2c4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	699b      	ldr	r3, [r3, #24]
 800b2a0:	2210      	movs	r2, #16
 800b2a2:	4013      	ands	r3, r2
 800b2a4:	2b10      	cmp	r3, #16
 800b2a6:	d109      	bne.n	800b2bc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	2210      	movs	r2, #16
 800b2ae:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b2b4:	2204      	movs	r2, #4
 800b2b6:	431a      	orrs	r2, r3
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	681b      	ldr	r3, [r3, #0]
 800b2c0:	2220      	movs	r2, #32
 800b2c2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2200      	movs	r2, #0
 800b2c8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ce:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d03b      	beq.n	800b350 <I2C_ITError+0x154>
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	2b11      	cmp	r3, #17
 800b2dc:	d002      	beq.n	800b2e4 <I2C_ITError+0xe8>
 800b2de:	68bb      	ldr	r3, [r7, #8]
 800b2e0:	2b21      	cmp	r3, #33	@ 0x21
 800b2e2:	d135      	bne.n	800b350 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	2380      	movs	r3, #128	@ 0x80
 800b2ec:	01db      	lsls	r3, r3, #7
 800b2ee:	401a      	ands	r2, r3
 800b2f0:	2380      	movs	r3, #128	@ 0x80
 800b2f2:	01db      	lsls	r3, r3, #7
 800b2f4:	429a      	cmp	r2, r3
 800b2f6:	d107      	bne.n	800b308 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	681a      	ldr	r2, [r3, #0]
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	493c      	ldr	r1, [pc, #240]	@ (800b3f4 <I2C_ITError+0x1f8>)
 800b304:	400a      	ands	r2, r1
 800b306:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b30c:	0018      	movs	r0, r3
 800b30e:	f7fe f896 	bl	800943e <HAL_DMA_GetState>
 800b312:	0003      	movs	r3, r0
 800b314:	2b01      	cmp	r3, #1
 800b316:	d016      	beq.n	800b346 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b31c:	4a36      	ldr	r2, [pc, #216]	@ (800b3f8 <I2C_ITError+0x1fc>)
 800b31e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	2240      	movs	r2, #64	@ 0x40
 800b324:	2100      	movs	r1, #0
 800b326:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b32c:	0018      	movs	r0, r3
 800b32e:	f7fd ff91 	bl	8009254 <HAL_DMA_Abort_IT>
 800b332:	1e03      	subs	r3, r0, #0
 800b334:	d051      	beq.n	800b3da <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b33a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b340:	0018      	movs	r0, r3
 800b342:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b344:	e049      	b.n	800b3da <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	0018      	movs	r0, r3
 800b34a:	f000 f859 	bl	800b400 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b34e:	e044      	b.n	800b3da <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b354:	2b00      	cmp	r3, #0
 800b356:	d03b      	beq.n	800b3d0 <I2C_ITError+0x1d4>
 800b358:	68bb      	ldr	r3, [r7, #8]
 800b35a:	2b12      	cmp	r3, #18
 800b35c:	d002      	beq.n	800b364 <I2C_ITError+0x168>
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b22      	cmp	r3, #34	@ 0x22
 800b362:	d135      	bne.n	800b3d0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	681a      	ldr	r2, [r3, #0]
 800b36a:	2380      	movs	r3, #128	@ 0x80
 800b36c:	021b      	lsls	r3, r3, #8
 800b36e:	401a      	ands	r2, r3
 800b370:	2380      	movs	r3, #128	@ 0x80
 800b372:	021b      	lsls	r3, r3, #8
 800b374:	429a      	cmp	r2, r3
 800b376:	d107      	bne.n	800b388 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	491e      	ldr	r1, [pc, #120]	@ (800b3fc <I2C_ITError+0x200>)
 800b384:	400a      	ands	r2, r1
 800b386:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b38c:	0018      	movs	r0, r3
 800b38e:	f7fe f856 	bl	800943e <HAL_DMA_GetState>
 800b392:	0003      	movs	r3, r0
 800b394:	2b01      	cmp	r3, #1
 800b396:	d016      	beq.n	800b3c6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b39c:	4a16      	ldr	r2, [pc, #88]	@ (800b3f8 <I2C_ITError+0x1fc>)
 800b39e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	2240      	movs	r2, #64	@ 0x40
 800b3a4:	2100      	movs	r1, #0
 800b3a6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ac:	0018      	movs	r0, r3
 800b3ae:	f7fd ff51 	bl	8009254 <HAL_DMA_Abort_IT>
 800b3b2:	1e03      	subs	r3, r0, #0
 800b3b4:	d013      	beq.n	800b3de <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3ba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3c0:	0018      	movs	r0, r3
 800b3c2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b3c4:	e00b      	b.n	800b3de <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	0018      	movs	r0, r3
 800b3ca:	f000 f819 	bl	800b400 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b3ce:	e006      	b.n	800b3de <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	0018      	movs	r0, r3
 800b3d4:	f000 f814 	bl	800b400 <I2C_TreatErrorCallback>
  }
}
 800b3d8:	e002      	b.n	800b3e0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b3da:	46c0      	nop			@ (mov r8, r8)
 800b3dc:	e000      	b.n	800b3e0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b3de:	46c0      	nop			@ (mov r8, r8)
}
 800b3e0:	46c0      	nop			@ (mov r8, r8)
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	b004      	add	sp, #16
 800b3e6:	bd80      	pop	{r7, pc}
 800b3e8:	ffff0000 	.word	0xffff0000
 800b3ec:	0800a2e1 	.word	0x0800a2e1
 800b3f0:	00008003 	.word	0x00008003
 800b3f4:	ffffbfff 	.word	0xffffbfff
 800b3f8:	0800b60b 	.word	0x0800b60b
 800b3fc:	ffff7fff 	.word	0xffff7fff

0800b400 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b082      	sub	sp, #8
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2241      	movs	r2, #65	@ 0x41
 800b40c:	5c9b      	ldrb	r3, [r3, r2]
 800b40e:	b2db      	uxtb	r3, r3
 800b410:	2b60      	cmp	r3, #96	@ 0x60
 800b412:	d10f      	bne.n	800b434 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	2241      	movs	r2, #65	@ 0x41
 800b418:	2120      	movs	r1, #32
 800b41a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	2200      	movs	r2, #0
 800b420:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2240      	movs	r2, #64	@ 0x40
 800b426:	2100      	movs	r1, #0
 800b428:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b42a:	687b      	ldr	r3, [r7, #4]
 800b42c:	0018      	movs	r0, r3
 800b42e:	f7fe fe24 	bl	800a07a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b432:	e00a      	b.n	800b44a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	2200      	movs	r2, #0
 800b438:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	2240      	movs	r2, #64	@ 0x40
 800b43e:	2100      	movs	r1, #0
 800b440:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	0018      	movs	r0, r3
 800b446:	f7fe fe10 	bl	800a06a <HAL_I2C_ErrorCallback>
}
 800b44a:	46c0      	nop			@ (mov r8, r8)
 800b44c:	46bd      	mov	sp, r7
 800b44e:	b002      	add	sp, #8
 800b450:	bd80      	pop	{r7, pc}

0800b452 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b452:	b580      	push	{r7, lr}
 800b454:	b082      	sub	sp, #8
 800b456:	af00      	add	r7, sp, #0
 800b458:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	681b      	ldr	r3, [r3, #0]
 800b45e:	699b      	ldr	r3, [r3, #24]
 800b460:	2202      	movs	r2, #2
 800b462:	4013      	ands	r3, r2
 800b464:	2b02      	cmp	r3, #2
 800b466:	d103      	bne.n	800b470 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	681b      	ldr	r3, [r3, #0]
 800b46c:	2200      	movs	r2, #0
 800b46e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	699b      	ldr	r3, [r3, #24]
 800b476:	2201      	movs	r2, #1
 800b478:	4013      	ands	r3, r2
 800b47a:	2b01      	cmp	r3, #1
 800b47c:	d007      	beq.n	800b48e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	699a      	ldr	r2, [r3, #24]
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	2101      	movs	r1, #1
 800b48a:	430a      	orrs	r2, r1
 800b48c:	619a      	str	r2, [r3, #24]
  }
}
 800b48e:	46c0      	nop			@ (mov r8, r8)
 800b490:	46bd      	mov	sp, r7
 800b492:	b002      	add	sp, #8
 800b494:	bd80      	pop	{r7, pc}
	...

0800b498 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b498:	b580      	push	{r7, lr}
 800b49a:	b084      	sub	sp, #16
 800b49c:	af00      	add	r7, sp, #0
 800b49e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4a4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	681a      	ldr	r2, [r3, #0]
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	4920      	ldr	r1, [pc, #128]	@ (800b534 <I2C_DMAMasterTransmitCplt+0x9c>)
 800b4b2:	400a      	ands	r2, r1
 800b4b4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4ba:	b29b      	uxth	r3, r3
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d105      	bne.n	800b4cc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	2120      	movs	r1, #32
 800b4c4:	0018      	movs	r0, r3
 800b4c6:	f000 f8f9 	bl	800b6bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b4ca:	e02e      	b.n	800b52a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b4cc:	68fb      	ldr	r3, [r7, #12]
 800b4ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4d0:	68fa      	ldr	r2, [r7, #12]
 800b4d2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b4d4:	189a      	adds	r2, r3, r2
 800b4d6:	68fb      	ldr	r3, [r7, #12]
 800b4d8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	2bff      	cmp	r3, #255	@ 0xff
 800b4e2:	d903      	bls.n	800b4ec <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	22ff      	movs	r2, #255	@ 0xff
 800b4e8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b4ea:	e004      	b.n	800b4f6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4f0:	b29a      	uxth	r2, r3
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b4f6:	68fb      	ldr	r3, [r7, #12]
 800b4f8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800b4fa:	68fb      	ldr	r3, [r7, #12]
 800b4fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4fe:	0019      	movs	r1, r3
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3328      	adds	r3, #40	@ 0x28
 800b506:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800b50c:	f7fd fdfc 	bl	8009108 <HAL_DMA_Start_IT>
 800b510:	1e03      	subs	r3, r0, #0
 800b512:	d005      	beq.n	800b520 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2110      	movs	r1, #16
 800b518:	0018      	movs	r0, r3
 800b51a:	f7ff fe6f 	bl	800b1fc <I2C_ITError>
}
 800b51e:	e004      	b.n	800b52a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2140      	movs	r1, #64	@ 0x40
 800b524:	0018      	movs	r0, r3
 800b526:	f000 f8c9 	bl	800b6bc <I2C_Enable_IRQ>
}
 800b52a:	46c0      	nop			@ (mov r8, r8)
 800b52c:	46bd      	mov	sp, r7
 800b52e:	b004      	add	sp, #16
 800b530:	bd80      	pop	{r7, pc}
 800b532:	46c0      	nop			@ (mov r8, r8)
 800b534:	ffffbfff 	.word	0xffffbfff

0800b538 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b544:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	681a      	ldr	r2, [r3, #0]
 800b54c:	68fb      	ldr	r3, [r7, #12]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	4920      	ldr	r1, [pc, #128]	@ (800b5d4 <I2C_DMAMasterReceiveCplt+0x9c>)
 800b552:	400a      	ands	r2, r1
 800b554:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b55a:	b29b      	uxth	r3, r3
 800b55c:	2b00      	cmp	r3, #0
 800b55e:	d105      	bne.n	800b56c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b560:	68fb      	ldr	r3, [r7, #12]
 800b562:	2120      	movs	r1, #32
 800b564:	0018      	movs	r0, r3
 800b566:	f000 f8a9 	bl	800b6bc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800b56a:	e02e      	b.n	800b5ca <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800b574:	189a      	adds	r2, r3, r2
 800b576:	68fb      	ldr	r3, [r7, #12]
 800b578:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b57e:	b29b      	uxth	r3, r3
 800b580:	2bff      	cmp	r3, #255	@ 0xff
 800b582:	d903      	bls.n	800b58c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b584:	68fb      	ldr	r3, [r7, #12]
 800b586:	22ff      	movs	r2, #255	@ 0xff
 800b588:	851a      	strh	r2, [r3, #40]	@ 0x28
 800b58a:	e004      	b.n	800b596 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b590:	b29a      	uxth	r2, r3
 800b592:	68fb      	ldr	r3, [r7, #12]
 800b594:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800b596:	68fb      	ldr	r3, [r7, #12]
 800b598:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800b59a:	68fb      	ldr	r3, [r7, #12]
 800b59c:	681b      	ldr	r3, [r3, #0]
 800b59e:	3324      	adds	r3, #36	@ 0x24
 800b5a0:	0019      	movs	r1, r3
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b5a6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800b5ac:	f7fd fdac 	bl	8009108 <HAL_DMA_Start_IT>
 800b5b0:	1e03      	subs	r3, r0, #0
 800b5b2:	d005      	beq.n	800b5c0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	2110      	movs	r1, #16
 800b5b8:	0018      	movs	r0, r3
 800b5ba:	f7ff fe1f 	bl	800b1fc <I2C_ITError>
}
 800b5be:	e004      	b.n	800b5ca <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800b5c0:	68fb      	ldr	r3, [r7, #12]
 800b5c2:	2140      	movs	r1, #64	@ 0x40
 800b5c4:	0018      	movs	r0, r3
 800b5c6:	f000 f879 	bl	800b6bc <I2C_Enable_IRQ>
}
 800b5ca:	46c0      	nop			@ (mov r8, r8)
 800b5cc:	46bd      	mov	sp, r7
 800b5ce:	b004      	add	sp, #16
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	46c0      	nop			@ (mov r8, r8)
 800b5d4:	ffff7fff 	.word	0xffff7fff

0800b5d8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b084      	sub	sp, #16
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5e4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	681b      	ldr	r3, [r3, #0]
 800b5ea:	685a      	ldr	r2, [r3, #4]
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	2180      	movs	r1, #128	@ 0x80
 800b5f2:	0209      	lsls	r1, r1, #8
 800b5f4:	430a      	orrs	r2, r1
 800b5f6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	2110      	movs	r1, #16
 800b5fc:	0018      	movs	r0, r3
 800b5fe:	f7ff fdfd 	bl	800b1fc <I2C_ITError>
}
 800b602:	46c0      	nop			@ (mov r8, r8)
 800b604:	46bd      	mov	sp, r7
 800b606:	b004      	add	sp, #16
 800b608:	bd80      	pop	{r7, pc}

0800b60a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b60a:	b580      	push	{r7, lr}
 800b60c:	b084      	sub	sp, #16
 800b60e:	af00      	add	r7, sp, #0
 800b610:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b616:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800b618:	68fb      	ldr	r3, [r7, #12]
 800b61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d003      	beq.n	800b628 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b620:	68fb      	ldr	r3, [r7, #12]
 800b622:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b624:	2200      	movs	r2, #0
 800b626:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d003      	beq.n	800b638 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b630:	68fb      	ldr	r3, [r7, #12]
 800b632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b634:	2200      	movs	r2, #0
 800b636:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800b638:	68fb      	ldr	r3, [r7, #12]
 800b63a:	0018      	movs	r0, r3
 800b63c:	f7ff fee0 	bl	800b400 <I2C_TreatErrorCallback>
}
 800b640:	46c0      	nop			@ (mov r8, r8)
 800b642:	46bd      	mov	sp, r7
 800b644:	b004      	add	sp, #16
 800b646:	bd80      	pop	{r7, pc}

0800b648 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800b648:	b590      	push	{r4, r7, lr}
 800b64a:	b087      	sub	sp, #28
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	0008      	movs	r0, r1
 800b652:	0011      	movs	r1, r2
 800b654:	607b      	str	r3, [r7, #4]
 800b656:	240a      	movs	r4, #10
 800b658:	193b      	adds	r3, r7, r4
 800b65a:	1c02      	adds	r2, r0, #0
 800b65c:	801a      	strh	r2, [r3, #0]
 800b65e:	2009      	movs	r0, #9
 800b660:	183b      	adds	r3, r7, r0
 800b662:	1c0a      	adds	r2, r1, #0
 800b664:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b666:	193b      	adds	r3, r7, r4
 800b668:	881b      	ldrh	r3, [r3, #0]
 800b66a:	059b      	lsls	r3, r3, #22
 800b66c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b66e:	183b      	adds	r3, r7, r0
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	0419      	lsls	r1, r3, #16
 800b674:	23ff      	movs	r3, #255	@ 0xff
 800b676:	041b      	lsls	r3, r3, #16
 800b678:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b67a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800b680:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b682:	4313      	orrs	r3, r2
 800b684:	005b      	lsls	r3, r3, #1
 800b686:	085b      	lsrs	r3, r3, #1
 800b688:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b692:	0d51      	lsrs	r1, r2, #21
 800b694:	2280      	movs	r2, #128	@ 0x80
 800b696:	00d2      	lsls	r2, r2, #3
 800b698:	400a      	ands	r2, r1
 800b69a:	4907      	ldr	r1, [pc, #28]	@ (800b6b8 <I2C_TransferConfig+0x70>)
 800b69c:	430a      	orrs	r2, r1
 800b69e:	43d2      	mvns	r2, r2
 800b6a0:	401a      	ands	r2, r3
 800b6a2:	0011      	movs	r1, r2
 800b6a4:	68fb      	ldr	r3, [r7, #12]
 800b6a6:	681b      	ldr	r3, [r3, #0]
 800b6a8:	697a      	ldr	r2, [r7, #20]
 800b6aa:	430a      	orrs	r2, r1
 800b6ac:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800b6ae:	46c0      	nop			@ (mov r8, r8)
 800b6b0:	46bd      	mov	sp, r7
 800b6b2:	b007      	add	sp, #28
 800b6b4:	bd90      	pop	{r4, r7, pc}
 800b6b6:	46c0      	nop			@ (mov r8, r8)
 800b6b8:	03ff63ff 	.word	0x03ff63ff

0800b6bc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b084      	sub	sp, #16
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
 800b6c4:	000a      	movs	r2, r1
 800b6c6:	1cbb      	adds	r3, r7, #2
 800b6c8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800b6ca:	2300      	movs	r3, #0
 800b6cc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b6d2:	4b3e      	ldr	r3, [pc, #248]	@ (800b7cc <I2C_Enable_IRQ+0x110>)
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d035      	beq.n	800b744 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800b6dc:	4b3c      	ldr	r3, [pc, #240]	@ (800b7d0 <I2C_Enable_IRQ+0x114>)
 800b6de:	429a      	cmp	r2, r3
 800b6e0:	d030      	beq.n	800b744 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800b6e6:	4b3b      	ldr	r3, [pc, #236]	@ (800b7d4 <I2C_Enable_IRQ+0x118>)
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d02b      	beq.n	800b744 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b6ec:	1cbb      	adds	r3, r7, #2
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	5e9b      	ldrsh	r3, [r3, r2]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	da03      	bge.n	800b6fe <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	22b8      	movs	r2, #184	@ 0xb8
 800b6fa:	4313      	orrs	r3, r2
 800b6fc:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b6fe:	1cbb      	adds	r3, r7, #2
 800b700:	881b      	ldrh	r3, [r3, #0]
 800b702:	2201      	movs	r2, #1
 800b704:	4013      	ands	r3, r2
 800b706:	d003      	beq.n	800b710 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	22f2      	movs	r2, #242	@ 0xf2
 800b70c:	4313      	orrs	r3, r2
 800b70e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b710:	1cbb      	adds	r3, r7, #2
 800b712:	881b      	ldrh	r3, [r3, #0]
 800b714:	2202      	movs	r2, #2
 800b716:	4013      	ands	r3, r2
 800b718:	d003      	beq.n	800b722 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b71a:	68fb      	ldr	r3, [r7, #12]
 800b71c:	22f4      	movs	r2, #244	@ 0xf4
 800b71e:	4313      	orrs	r3, r2
 800b720:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b722:	1cbb      	adds	r3, r7, #2
 800b724:	881b      	ldrh	r3, [r3, #0]
 800b726:	2b10      	cmp	r3, #16
 800b728:	d103      	bne.n	800b732 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	2290      	movs	r2, #144	@ 0x90
 800b72e:	4313      	orrs	r3, r2
 800b730:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b732:	1cbb      	adds	r3, r7, #2
 800b734:	881b      	ldrh	r3, [r3, #0]
 800b736:	2b20      	cmp	r3, #32
 800b738:	d13c      	bne.n	800b7b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800b73a:	68fb      	ldr	r3, [r7, #12]
 800b73c:	2220      	movs	r2, #32
 800b73e:	4313      	orrs	r3, r2
 800b740:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b742:	e037      	b.n	800b7b4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b744:	1cbb      	adds	r3, r7, #2
 800b746:	2200      	movs	r2, #0
 800b748:	5e9b      	ldrsh	r3, [r3, r2]
 800b74a:	2b00      	cmp	r3, #0
 800b74c:	da03      	bge.n	800b756 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b74e:	68fb      	ldr	r3, [r7, #12]
 800b750:	22b8      	movs	r2, #184	@ 0xb8
 800b752:	4313      	orrs	r3, r2
 800b754:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b756:	1cbb      	adds	r3, r7, #2
 800b758:	881b      	ldrh	r3, [r3, #0]
 800b75a:	2201      	movs	r2, #1
 800b75c:	4013      	ands	r3, r2
 800b75e:	d003      	beq.n	800b768 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	22f2      	movs	r2, #242	@ 0xf2
 800b764:	4313      	orrs	r3, r2
 800b766:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b768:	1cbb      	adds	r3, r7, #2
 800b76a:	881b      	ldrh	r3, [r3, #0]
 800b76c:	2202      	movs	r2, #2
 800b76e:	4013      	ands	r3, r2
 800b770:	d003      	beq.n	800b77a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	22f4      	movs	r2, #244	@ 0xf4
 800b776:	4313      	orrs	r3, r2
 800b778:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b77a:	1cbb      	adds	r3, r7, #2
 800b77c:	881b      	ldrh	r3, [r3, #0]
 800b77e:	2b10      	cmp	r3, #16
 800b780:	d103      	bne.n	800b78a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	2290      	movs	r2, #144	@ 0x90
 800b786:	4313      	orrs	r3, r2
 800b788:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b78a:	1cbb      	adds	r3, r7, #2
 800b78c:	881b      	ldrh	r3, [r3, #0]
 800b78e:	2b20      	cmp	r3, #32
 800b790:	d103      	bne.n	800b79a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800b792:	68fb      	ldr	r3, [r7, #12]
 800b794:	2260      	movs	r2, #96	@ 0x60
 800b796:	4313      	orrs	r3, r2
 800b798:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b79e:	4b0d      	ldr	r3, [pc, #52]	@ (800b7d4 <I2C_Enable_IRQ+0x118>)
 800b7a0:	429a      	cmp	r2, r3
 800b7a2:	d007      	beq.n	800b7b4 <I2C_Enable_IRQ+0xf8>
 800b7a4:	1cbb      	adds	r3, r7, #2
 800b7a6:	881b      	ldrh	r3, [r3, #0]
 800b7a8:	2b40      	cmp	r3, #64	@ 0x40
 800b7aa:	d103      	bne.n	800b7b4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	2240      	movs	r2, #64	@ 0x40
 800b7b0:	4313      	orrs	r3, r2
 800b7b2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	6819      	ldr	r1, [r3, #0]
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	68fa      	ldr	r2, [r7, #12]
 800b7c0:	430a      	orrs	r2, r1
 800b7c2:	601a      	str	r2, [r3, #0]
}
 800b7c4:	46c0      	nop			@ (mov r8, r8)
 800b7c6:	46bd      	mov	sp, r7
 800b7c8:	b004      	add	sp, #16
 800b7ca:	bd80      	pop	{r7, pc}
 800b7cc:	0800a4e1 	.word	0x0800a4e1
 800b7d0:	0800a911 	.word	0x0800a911
 800b7d4:	0800a6d9 	.word	0x0800a6d9

0800b7d8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800b7d8:	b580      	push	{r7, lr}
 800b7da:	b084      	sub	sp, #16
 800b7dc:	af00      	add	r7, sp, #0
 800b7de:	6078      	str	r0, [r7, #4]
 800b7e0:	000a      	movs	r2, r1
 800b7e2:	1cbb      	adds	r3, r7, #2
 800b7e4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800b7ea:	1cbb      	adds	r3, r7, #2
 800b7ec:	881b      	ldrh	r3, [r3, #0]
 800b7ee:	2201      	movs	r2, #1
 800b7f0:	4013      	ands	r3, r2
 800b7f2:	d010      	beq.n	800b816 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	2242      	movs	r2, #66	@ 0x42
 800b7f8:	4313      	orrs	r3, r2
 800b7fa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	2241      	movs	r2, #65	@ 0x41
 800b800:	5c9b      	ldrb	r3, [r3, r2]
 800b802:	b2db      	uxtb	r3, r3
 800b804:	001a      	movs	r2, r3
 800b806:	2328      	movs	r3, #40	@ 0x28
 800b808:	4013      	ands	r3, r2
 800b80a:	2b28      	cmp	r3, #40	@ 0x28
 800b80c:	d003      	beq.n	800b816 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	22b0      	movs	r2, #176	@ 0xb0
 800b812:	4313      	orrs	r3, r2
 800b814:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800b816:	1cbb      	adds	r3, r7, #2
 800b818:	881b      	ldrh	r3, [r3, #0]
 800b81a:	2202      	movs	r2, #2
 800b81c:	4013      	ands	r3, r2
 800b81e:	d010      	beq.n	800b842 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	2244      	movs	r2, #68	@ 0x44
 800b824:	4313      	orrs	r3, r2
 800b826:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	2241      	movs	r2, #65	@ 0x41
 800b82c:	5c9b      	ldrb	r3, [r3, r2]
 800b82e:	b2db      	uxtb	r3, r3
 800b830:	001a      	movs	r2, r3
 800b832:	2328      	movs	r3, #40	@ 0x28
 800b834:	4013      	ands	r3, r2
 800b836:	2b28      	cmp	r3, #40	@ 0x28
 800b838:	d003      	beq.n	800b842 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	22b0      	movs	r2, #176	@ 0xb0
 800b83e:	4313      	orrs	r3, r2
 800b840:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800b842:	1cbb      	adds	r3, r7, #2
 800b844:	2200      	movs	r2, #0
 800b846:	5e9b      	ldrsh	r3, [r3, r2]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	da03      	bge.n	800b854 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	22b8      	movs	r2, #184	@ 0xb8
 800b850:	4313      	orrs	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800b854:	1cbb      	adds	r3, r7, #2
 800b856:	881b      	ldrh	r3, [r3, #0]
 800b858:	2b10      	cmp	r3, #16
 800b85a:	d103      	bne.n	800b864 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800b85c:	68fb      	ldr	r3, [r7, #12]
 800b85e:	2290      	movs	r2, #144	@ 0x90
 800b860:	4313      	orrs	r3, r2
 800b862:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800b864:	1cbb      	adds	r3, r7, #2
 800b866:	881b      	ldrh	r3, [r3, #0]
 800b868:	2b20      	cmp	r3, #32
 800b86a:	d103      	bne.n	800b874 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2220      	movs	r2, #32
 800b870:	4313      	orrs	r3, r2
 800b872:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800b874:	1cbb      	adds	r3, r7, #2
 800b876:	881b      	ldrh	r3, [r3, #0]
 800b878:	2b40      	cmp	r3, #64	@ 0x40
 800b87a:	d103      	bne.n	800b884 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2240      	movs	r2, #64	@ 0x40
 800b880:	4313      	orrs	r3, r2
 800b882:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	681b      	ldr	r3, [r3, #0]
 800b888:	681a      	ldr	r2, [r3, #0]
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	43d9      	mvns	r1, r3
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	400a      	ands	r2, r1
 800b894:	601a      	str	r2, [r3, #0]
}
 800b896:	46c0      	nop			@ (mov r8, r8)
 800b898:	46bd      	mov	sp, r7
 800b89a:	b004      	add	sp, #16
 800b89c:	bd80      	pop	{r7, pc}
	...

0800b8a0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800b8a0:	b580      	push	{r7, lr}
 800b8a2:	b082      	sub	sp, #8
 800b8a4:	af00      	add	r7, sp, #0
 800b8a6:	6078      	str	r0, [r7, #4]
 800b8a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2241      	movs	r2, #65	@ 0x41
 800b8ae:	5c9b      	ldrb	r3, [r3, r2]
 800b8b0:	b2db      	uxtb	r3, r3
 800b8b2:	2b20      	cmp	r3, #32
 800b8b4:	d138      	bne.n	800b928 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	2240      	movs	r2, #64	@ 0x40
 800b8ba:	5c9b      	ldrb	r3, [r3, r2]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d101      	bne.n	800b8c4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800b8c0:	2302      	movs	r3, #2
 800b8c2:	e032      	b.n	800b92a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2240      	movs	r2, #64	@ 0x40
 800b8c8:	2101      	movs	r1, #1
 800b8ca:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	2241      	movs	r2, #65	@ 0x41
 800b8d0:	2124      	movs	r1, #36	@ 0x24
 800b8d2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	681a      	ldr	r2, [r3, #0]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2101      	movs	r1, #1
 800b8e0:	438a      	bics	r2, r1
 800b8e2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	681a      	ldr	r2, [r3, #0]
 800b8ea:	687b      	ldr	r3, [r7, #4]
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	4911      	ldr	r1, [pc, #68]	@ (800b934 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800b8f0:	400a      	ands	r2, r1
 800b8f2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	6819      	ldr	r1, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	683a      	ldr	r2, [r7, #0]
 800b900:	430a      	orrs	r2, r1
 800b902:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2101      	movs	r1, #1
 800b910:	430a      	orrs	r2, r1
 800b912:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2241      	movs	r2, #65	@ 0x41
 800b918:	2120      	movs	r1, #32
 800b91a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	2240      	movs	r2, #64	@ 0x40
 800b920:	2100      	movs	r1, #0
 800b922:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b924:	2300      	movs	r3, #0
 800b926:	e000      	b.n	800b92a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800b928:	2302      	movs	r3, #2
  }
}
 800b92a:	0018      	movs	r0, r3
 800b92c:	46bd      	mov	sp, r7
 800b92e:	b002      	add	sp, #8
 800b930:	bd80      	pop	{r7, pc}
 800b932:	46c0      	nop			@ (mov r8, r8)
 800b934:	ffffefff 	.word	0xffffefff

0800b938 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b084      	sub	sp, #16
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	2241      	movs	r2, #65	@ 0x41
 800b946:	5c9b      	ldrb	r3, [r3, r2]
 800b948:	b2db      	uxtb	r3, r3
 800b94a:	2b20      	cmp	r3, #32
 800b94c:	d139      	bne.n	800b9c2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	2240      	movs	r2, #64	@ 0x40
 800b952:	5c9b      	ldrb	r3, [r3, r2]
 800b954:	2b01      	cmp	r3, #1
 800b956:	d101      	bne.n	800b95c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800b958:	2302      	movs	r3, #2
 800b95a:	e033      	b.n	800b9c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	2240      	movs	r2, #64	@ 0x40
 800b960:	2101      	movs	r1, #1
 800b962:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2241      	movs	r2, #65	@ 0x41
 800b968:	2124      	movs	r1, #36	@ 0x24
 800b96a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	2101      	movs	r1, #1
 800b978:	438a      	bics	r2, r1
 800b97a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	681b      	ldr	r3, [r3, #0]
 800b982:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	4a11      	ldr	r2, [pc, #68]	@ (800b9cc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800b988:	4013      	ands	r3, r2
 800b98a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	021b      	lsls	r3, r3, #8
 800b990:	68fa      	ldr	r2, [r7, #12]
 800b992:	4313      	orrs	r3, r2
 800b994:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	68fa      	ldr	r2, [r7, #12]
 800b99c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	681a      	ldr	r2, [r3, #0]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2101      	movs	r1, #1
 800b9aa:	430a      	orrs	r2, r1
 800b9ac:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	2241      	movs	r2, #65	@ 0x41
 800b9b2:	2120      	movs	r1, #32
 800b9b4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	2240      	movs	r2, #64	@ 0x40
 800b9ba:	2100      	movs	r1, #0
 800b9bc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800b9be:	2300      	movs	r3, #0
 800b9c0:	e000      	b.n	800b9c4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800b9c2:	2302      	movs	r3, #2
  }
}
 800b9c4:	0018      	movs	r0, r3
 800b9c6:	46bd      	mov	sp, r7
 800b9c8:	b004      	add	sp, #16
 800b9ca:	bd80      	pop	{r7, pc}
 800b9cc:	fffff0ff 	.word	0xfffff0ff

0800b9d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800b9d0:	b580      	push	{r7, lr}
 800b9d2:	b088      	sub	sp, #32
 800b9d4:	af00      	add	r7, sp, #0
 800b9d6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d101      	bne.n	800b9e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800b9de:	2301      	movs	r3, #1
 800b9e0:	e0e1      	b.n	800bba6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2235      	movs	r2, #53	@ 0x35
 800b9e6:	5c9b      	ldrb	r3, [r3, r2]
 800b9e8:	b2db      	uxtb	r3, r3
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d107      	bne.n	800b9fe <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	2234      	movs	r2, #52	@ 0x34
 800b9f2:	2100      	movs	r1, #0
 800b9f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	0018      	movs	r0, r3
 800b9fa:	f7f9 fc07 	bl	800520c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800b9fe:	687b      	ldr	r3, [r7, #4]
 800ba00:	2235      	movs	r2, #53	@ 0x35
 800ba02:	2102      	movs	r1, #2
 800ba04:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	69da      	ldr	r2, [r3, #28]
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	4967      	ldr	r1, [pc, #412]	@ (800bbb0 <HAL_I2S_Init+0x1e0>)
 800ba12:	400a      	ands	r2, r1
 800ba14:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	2202      	movs	r2, #2
 800ba1c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	2b02      	cmp	r3, #2
 800ba24:	d073      	beq.n	800bb0e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	68db      	ldr	r3, [r3, #12]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d102      	bne.n	800ba34 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800ba2e:	2310      	movs	r3, #16
 800ba30:	617b      	str	r3, [r7, #20]
 800ba32:	e001      	b.n	800ba38 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800ba34:	2320      	movs	r3, #32
 800ba36:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	2b20      	cmp	r3, #32
 800ba3e:	d802      	bhi.n	800ba46 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800ba40:	697b      	ldr	r3, [r7, #20]
 800ba42:	005b      	lsls	r3, r3, #1
 800ba44:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800ba46:	f001 f957 	bl	800ccf8 <HAL_RCC_GetSysClockFreq>
 800ba4a:	0003      	movs	r3, r0
 800ba4c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	691a      	ldr	r2, [r3, #16]
 800ba52:	2380      	movs	r3, #128	@ 0x80
 800ba54:	009b      	lsls	r3, r3, #2
 800ba56:	429a      	cmp	r2, r3
 800ba58:	d131      	bne.n	800babe <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	2b00      	cmp	r3, #0
 800ba60:	d016      	beq.n	800ba90 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	009b      	lsls	r3, r3, #2
 800ba66:	0019      	movs	r1, r3
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7f4 fb69 	bl	8000140 <__udivsi3>
 800ba6e:	0003      	movs	r3, r0
 800ba70:	001a      	movs	r2, r3
 800ba72:	0013      	movs	r3, r2
 800ba74:	009b      	lsls	r3, r3, #2
 800ba76:	189b      	adds	r3, r3, r2
 800ba78:	005b      	lsls	r3, r3, #1
 800ba7a:	001a      	movs	r2, r3
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	695b      	ldr	r3, [r3, #20]
 800ba80:	0019      	movs	r1, r3
 800ba82:	0010      	movs	r0, r2
 800ba84:	f7f4 fb5c 	bl	8000140 <__udivsi3>
 800ba88:	0003      	movs	r3, r0
 800ba8a:	3305      	adds	r3, #5
 800ba8c:	613b      	str	r3, [r7, #16]
 800ba8e:	e02a      	b.n	800bae6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800ba90:	697b      	ldr	r3, [r7, #20]
 800ba92:	00db      	lsls	r3, r3, #3
 800ba94:	0019      	movs	r1, r3
 800ba96:	68f8      	ldr	r0, [r7, #12]
 800ba98:	f7f4 fb52 	bl	8000140 <__udivsi3>
 800ba9c:	0003      	movs	r3, r0
 800ba9e:	001a      	movs	r2, r3
 800baa0:	0013      	movs	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	189b      	adds	r3, r3, r2
 800baa6:	005b      	lsls	r3, r3, #1
 800baa8:	001a      	movs	r2, r3
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	0019      	movs	r1, r3
 800bab0:	0010      	movs	r0, r2
 800bab2:	f7f4 fb45 	bl	8000140 <__udivsi3>
 800bab6:	0003      	movs	r3, r0
 800bab8:	3305      	adds	r3, #5
 800baba:	613b      	str	r3, [r7, #16]
 800babc:	e013      	b.n	800bae6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800babe:	6979      	ldr	r1, [r7, #20]
 800bac0:	68f8      	ldr	r0, [r7, #12]
 800bac2:	f7f4 fb3d 	bl	8000140 <__udivsi3>
 800bac6:	0003      	movs	r3, r0
 800bac8:	001a      	movs	r2, r3
 800baca:	0013      	movs	r3, r2
 800bacc:	009b      	lsls	r3, r3, #2
 800bace:	189b      	adds	r3, r3, r2
 800bad0:	005b      	lsls	r3, r3, #1
 800bad2:	001a      	movs	r2, r3
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	695b      	ldr	r3, [r3, #20]
 800bad8:	0019      	movs	r1, r3
 800bada:	0010      	movs	r0, r2
 800badc:	f7f4 fb30 	bl	8000140 <__udivsi3>
 800bae0:	0003      	movs	r3, r0
 800bae2:	3305      	adds	r3, #5
 800bae4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800bae6:	693b      	ldr	r3, [r7, #16]
 800bae8:	210a      	movs	r1, #10
 800baea:	0018      	movs	r0, r3
 800baec:	f7f4 fb28 	bl	8000140 <__udivsi3>
 800baf0:	0003      	movs	r3, r0
 800baf2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800baf4:	693b      	ldr	r3, [r7, #16]
 800baf6:	2201      	movs	r2, #1
 800baf8:	4013      	ands	r3, r2
 800bafa:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800bafc:	693a      	ldr	r2, [r7, #16]
 800bafe:	69bb      	ldr	r3, [r7, #24]
 800bb00:	1ad3      	subs	r3, r2, r3
 800bb02:	085b      	lsrs	r3, r3, #1
 800bb04:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800bb06:	69bb      	ldr	r3, [r7, #24]
 800bb08:	021b      	lsls	r3, r3, #8
 800bb0a:	61bb      	str	r3, [r7, #24]
 800bb0c:	e003      	b.n	800bb16 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800bb0e:	2302      	movs	r3, #2
 800bb10:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800bb12:	2300      	movs	r3, #0
 800bb14:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	2b01      	cmp	r3, #1
 800bb1a:	d902      	bls.n	800bb22 <HAL_I2S_Init+0x152>
 800bb1c:	69fb      	ldr	r3, [r7, #28]
 800bb1e:	2bff      	cmp	r3, #255	@ 0xff
 800bb20:	d907      	bls.n	800bb32 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bb26:	2210      	movs	r2, #16
 800bb28:	431a      	orrs	r2, r3
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800bb2e:	2301      	movs	r3, #1
 800bb30:	e039      	b.n	800bba6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	691a      	ldr	r2, [r3, #16]
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	431a      	orrs	r2, r3
 800bb3a:	0011      	movs	r1, r2
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	69fa      	ldr	r2, [r7, #28]
 800bb42:	430a      	orrs	r2, r1
 800bb44:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	681b      	ldr	r3, [r3, #0]
 800bb4a:	69db      	ldr	r3, [r3, #28]
 800bb4c:	4a18      	ldr	r2, [pc, #96]	@ (800bbb0 <HAL_I2S_Init+0x1e0>)
 800bb4e:	401a      	ands	r2, r3
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	6859      	ldr	r1, [r3, #4]
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	689b      	ldr	r3, [r3, #8]
 800bb58:	4319      	orrs	r1, r3
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	68db      	ldr	r3, [r3, #12]
 800bb5e:	4319      	orrs	r1, r3
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	699b      	ldr	r3, [r3, #24]
 800bb64:	430b      	orrs	r3, r1
 800bb66:	431a      	orrs	r2, r3
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	2180      	movs	r1, #128	@ 0x80
 800bb6e:	0109      	lsls	r1, r1, #4
 800bb70:	430a      	orrs	r2, r1
 800bb72:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	689b      	ldr	r3, [r3, #8]
 800bb78:	2b30      	cmp	r3, #48	@ 0x30
 800bb7a:	d003      	beq.n	800bb84 <HAL_I2S_Init+0x1b4>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	689b      	ldr	r3, [r3, #8]
 800bb80:	2bb0      	cmp	r3, #176	@ 0xb0
 800bb82:	d108      	bne.n	800bb96 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	69da      	ldr	r2, [r3, #28]
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	681b      	ldr	r3, [r3, #0]
 800bb8e:	2180      	movs	r1, #128	@ 0x80
 800bb90:	0149      	lsls	r1, r1, #5
 800bb92:	430a      	orrs	r2, r1
 800bb94:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2235      	movs	r2, #53	@ 0x35
 800bba0:	2101      	movs	r1, #1
 800bba2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bba4:	2300      	movs	r3, #0
}
 800bba6:	0018      	movs	r0, r3
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	b008      	add	sp, #32
 800bbac:	bd80      	pop	{r7, pc}
 800bbae:	46c0      	nop			@ (mov r8, r8)
 800bbb0:	fffff040 	.word	0xfffff040

0800bbb4 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800bbb4:	b580      	push	{r7, lr}
 800bbb6:	b082      	sub	sp, #8
 800bbb8:	af00      	add	r7, sp, #0
 800bbba:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800bbbc:	687b      	ldr	r3, [r7, #4]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d101      	bne.n	800bbc6 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800bbc2:	2301      	movs	r3, #1
 800bbc4:	e01b      	b.n	800bbfe <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	2235      	movs	r2, #53	@ 0x35
 800bbca:	2102      	movs	r1, #2
 800bbcc:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	681b      	ldr	r3, [r3, #0]
 800bbd2:	69da      	ldr	r2, [r3, #28]
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	490b      	ldr	r1, [pc, #44]	@ (800bc08 <HAL_I2S_DeInit+0x54>)
 800bbda:	400a      	ands	r2, r1
 800bbdc:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	0018      	movs	r0, r3
 800bbe2:	f7f9 fb87 	bl	80052f4 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2200      	movs	r2, #0
 800bbea:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	2235      	movs	r2, #53	@ 0x35
 800bbf0:	2100      	movs	r1, #0
 800bbf2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	2234      	movs	r2, #52	@ 0x34
 800bbf8:	2100      	movs	r1, #0
 800bbfa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bbfc:	2300      	movs	r3, #0
}
 800bbfe:	0018      	movs	r0, r3
 800bc00:	46bd      	mov	sp, r7
 800bc02:	b002      	add	sp, #8
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	46c0      	nop			@ (mov r8, r8)
 800bc08:	fffffbff 	.word	0xfffffbff

0800bc0c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800bc0c:	b580      	push	{r7, lr}
 800bc0e:	b086      	sub	sp, #24
 800bc10:	af00      	add	r7, sp, #0
 800bc12:	60f8      	str	r0, [r7, #12]
 800bc14:	60b9      	str	r1, [r7, #8]
 800bc16:	1dbb      	adds	r3, r7, #6
 800bc18:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800bc1a:	68bb      	ldr	r3, [r7, #8]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d003      	beq.n	800bc28 <HAL_I2S_Receive_DMA+0x1c>
 800bc20:	1dbb      	adds	r3, r7, #6
 800bc22:	881b      	ldrh	r3, [r3, #0]
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	d101      	bne.n	800bc2c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e0a6      	b.n	800bd7a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2234      	movs	r2, #52	@ 0x34
 800bc30:	5c9b      	ldrb	r3, [r3, r2]
 800bc32:	b2db      	uxtb	r3, r3
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d101      	bne.n	800bc3c <HAL_I2S_Receive_DMA+0x30>
 800bc38:	2302      	movs	r3, #2
 800bc3a:	e09e      	b.n	800bd7a <HAL_I2S_Receive_DMA+0x16e>
 800bc3c:	68fb      	ldr	r3, [r7, #12]
 800bc3e:	2234      	movs	r2, #52	@ 0x34
 800bc40:	2101      	movs	r1, #1
 800bc42:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	2235      	movs	r2, #53	@ 0x35
 800bc48:	5c9b      	ldrb	r3, [r3, r2]
 800bc4a:	b2db      	uxtb	r3, r3
 800bc4c:	2b01      	cmp	r3, #1
 800bc4e:	d005      	beq.n	800bc5c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800bc50:	68fb      	ldr	r3, [r7, #12]
 800bc52:	2234      	movs	r2, #52	@ 0x34
 800bc54:	2100      	movs	r1, #0
 800bc56:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800bc58:	2302      	movs	r3, #2
 800bc5a:	e08e      	b.n	800bd7a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800bc5c:	68fb      	ldr	r3, [r7, #12]
 800bc5e:	2235      	movs	r2, #53	@ 0x35
 800bc60:	2104      	movs	r1, #4
 800bc62:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	2200      	movs	r2, #0
 800bc68:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	681b      	ldr	r3, [r3, #0]
 800bc74:	69db      	ldr	r3, [r3, #28]
 800bc76:	2207      	movs	r2, #7
 800bc78:	4013      	ands	r3, r2
 800bc7a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800bc7c:	697b      	ldr	r3, [r7, #20]
 800bc7e:	2b03      	cmp	r3, #3
 800bc80:	d002      	beq.n	800bc88 <HAL_I2S_Receive_DMA+0x7c>
 800bc82:	697b      	ldr	r3, [r7, #20]
 800bc84:	2b05      	cmp	r3, #5
 800bc86:	d10c      	bne.n	800bca2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800bc88:	1dbb      	adds	r3, r7, #6
 800bc8a:	881b      	ldrh	r3, [r3, #0]
 800bc8c:	18db      	adds	r3, r3, r3
 800bc8e:	b29a      	uxth	r2, r3
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800bc94:	1dbb      	adds	r3, r7, #6
 800bc96:	881b      	ldrh	r3, [r3, #0]
 800bc98:	18db      	adds	r3, r3, r3
 800bc9a:	b29a      	uxth	r2, r3
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800bca0:	e007      	b.n	800bcb2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800bca2:	68fb      	ldr	r3, [r7, #12]
 800bca4:	1dba      	adds	r2, r7, #6
 800bca6:	8812      	ldrh	r2, [r2, #0]
 800bca8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	1dba      	adds	r2, r7, #6
 800bcae:	8812      	ldrh	r2, [r2, #0]
 800bcb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcb6:	4a33      	ldr	r2, [pc, #204]	@ (800bd84 <HAL_I2S_Receive_DMA+0x178>)
 800bcb8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800bcba:	68fb      	ldr	r3, [r7, #12]
 800bcbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcbe:	4a32      	ldr	r2, [pc, #200]	@ (800bd88 <HAL_I2S_Receive_DMA+0x17c>)
 800bcc0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcc6:	4a31      	ldr	r2, [pc, #196]	@ (800bd8c <HAL_I2S_Receive_DMA+0x180>)
 800bcc8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800bcca:	68fb      	ldr	r3, [r7, #12]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	69da      	ldr	r2, [r3, #28]
 800bcd0:	23c0      	movs	r3, #192	@ 0xc0
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	401a      	ands	r2, r3
 800bcd6:	23c0      	movs	r3, #192	@ 0xc0
 800bcd8:	009b      	lsls	r3, r3, #2
 800bcda:	429a      	cmp	r2, r3
 800bcdc:	d10a      	bne.n	800bcf4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800bcde:	2300      	movs	r3, #0
 800bce0:	613b      	str	r3, [r7, #16]
 800bce2:	68fb      	ldr	r3, [r7, #12]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	68db      	ldr	r3, [r3, #12]
 800bce8:	613b      	str	r3, [r7, #16]
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	689b      	ldr	r3, [r3, #8]
 800bcf0:	613b      	str	r3, [r7, #16]
 800bcf2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800bcf8:	68fb      	ldr	r3, [r7, #12]
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	330c      	adds	r3, #12
 800bcfe:	0019      	movs	r1, r3
 800bd00:	68fb      	ldr	r3, [r7, #12]
 800bd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bd04:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bd0a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800bd0c:	f7fd f9fc 	bl	8009108 <HAL_DMA_Start_IT>
 800bd10:	1e03      	subs	r3, r0, #0
 800bd12:	d00f      	beq.n	800bd34 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd18:	2208      	movs	r2, #8
 800bd1a:	431a      	orrs	r2, r3
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800bd20:	68fb      	ldr	r3, [r7, #12]
 800bd22:	2235      	movs	r2, #53	@ 0x35
 800bd24:	2101      	movs	r1, #1
 800bd26:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	2234      	movs	r2, #52	@ 0x34
 800bd2c:	2100      	movs	r1, #0
 800bd2e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800bd30:	2301      	movs	r3, #1
 800bd32:	e022      	b.n	800bd7a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	69da      	ldr	r2, [r3, #28]
 800bd3a:	2380      	movs	r3, #128	@ 0x80
 800bd3c:	00db      	lsls	r3, r3, #3
 800bd3e:	4013      	ands	r3, r2
 800bd40:	d108      	bne.n	800bd54 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	681b      	ldr	r3, [r3, #0]
 800bd46:	69da      	ldr	r2, [r3, #28]
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2180      	movs	r1, #128	@ 0x80
 800bd4e:	00c9      	lsls	r1, r1, #3
 800bd50:	430a      	orrs	r2, r1
 800bd52:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	681b      	ldr	r3, [r3, #0]
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	2201      	movs	r2, #1
 800bd5c:	4013      	ands	r3, r2
 800bd5e:	d107      	bne.n	800bd70 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	681b      	ldr	r3, [r3, #0]
 800bd64:	685a      	ldr	r2, [r3, #4]
 800bd66:	68fb      	ldr	r3, [r7, #12]
 800bd68:	681b      	ldr	r3, [r3, #0]
 800bd6a:	2101      	movs	r1, #1
 800bd6c:	430a      	orrs	r2, r1
 800bd6e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	2234      	movs	r2, #52	@ 0x34
 800bd74:	2100      	movs	r1, #0
 800bd76:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800bd78:	2300      	movs	r3, #0
}
 800bd7a:	0018      	movs	r0, r3
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	b006      	add	sp, #24
 800bd80:	bd80      	pop	{r7, pc}
 800bd82:	46c0      	nop			@ (mov r8, r8)
 800bd84:	0800bf8d 	.word	0x0800bf8d
 800bd88:	0800bf49 	.word	0x0800bf49
 800bd8c:	0800bfab 	.word	0x0800bfab

0800bd90 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800bd90:	b580      	push	{r7, lr}
 800bd92:	b086      	sub	sp, #24
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800bd98:	2317      	movs	r3, #23
 800bd9a:	18fb      	adds	r3, r7, r3
 800bd9c:	2200      	movs	r2, #0
 800bd9e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	685a      	ldr	r2, [r3, #4]
 800bda4:	2380      	movs	r3, #128	@ 0x80
 800bda6:	009b      	lsls	r3, r3, #2
 800bda8:	429a      	cmp	r2, r3
 800bdaa:	d003      	beq.n	800bdb4 <HAL_I2S_DMAStop+0x24>
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d158      	bne.n	800be66 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d010      	beq.n	800bdde <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bdc0:	0018      	movs	r0, r3
 800bdc2:	f7fd fa07 	bl	80091d4 <HAL_DMA_Abort>
 800bdc6:	1e03      	subs	r3, r0, #0
 800bdc8:	d009      	beq.n	800bdde <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdce:	2208      	movs	r2, #8
 800bdd0:	431a      	orrs	r2, r3
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800bdd6:	2317      	movs	r3, #23
 800bdd8:	18fb      	adds	r3, r7, r3
 800bdda:	2201      	movs	r2, #1
 800bddc:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800bdde:	6878      	ldr	r0, [r7, #4]
 800bde0:	2364      	movs	r3, #100	@ 0x64
 800bde2:	2201      	movs	r2, #1
 800bde4:	2102      	movs	r1, #2
 800bde6:	f000 f907 	bl	800bff8 <I2S_WaitFlagStateUntilTimeout>
 800bdea:	1e03      	subs	r3, r0, #0
 800bdec:	d00d      	beq.n	800be0a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bdf2:	2201      	movs	r2, #1
 800bdf4:	431a      	orrs	r2, r3
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800bdfa:	687b      	ldr	r3, [r7, #4]
 800bdfc:	2235      	movs	r2, #53	@ 0x35
 800bdfe:	2101      	movs	r1, #1
 800be00:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800be02:	2317      	movs	r3, #23
 800be04:	18fb      	adds	r3, r7, r3
 800be06:	2201      	movs	r2, #1
 800be08:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800be0a:	6878      	ldr	r0, [r7, #4]
 800be0c:	2364      	movs	r3, #100	@ 0x64
 800be0e:	2200      	movs	r2, #0
 800be10:	2180      	movs	r1, #128	@ 0x80
 800be12:	f000 f8f1 	bl	800bff8 <I2S_WaitFlagStateUntilTimeout>
 800be16:	1e03      	subs	r3, r0, #0
 800be18:	d00d      	beq.n	800be36 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800be1a:	687b      	ldr	r3, [r7, #4]
 800be1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be1e:	2201      	movs	r2, #1
 800be20:	431a      	orrs	r2, r3
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800be26:	687b      	ldr	r3, [r7, #4]
 800be28:	2235      	movs	r2, #53	@ 0x35
 800be2a:	2101      	movs	r1, #1
 800be2c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800be2e:	2317      	movs	r3, #23
 800be30:	18fb      	adds	r3, r7, r3
 800be32:	2201      	movs	r2, #1
 800be34:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	69da      	ldr	r2, [r3, #28]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4938      	ldr	r1, [pc, #224]	@ (800bf24 <HAL_I2S_DMAStop+0x194>)
 800be42:	400a      	ands	r2, r1
 800be44:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800be46:	2300      	movs	r3, #0
 800be48:	613b      	str	r3, [r7, #16]
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	689b      	ldr	r3, [r3, #8]
 800be50:	613b      	str	r3, [r7, #16]
 800be52:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	685a      	ldr	r2, [r3, #4]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	2102      	movs	r1, #2
 800be60:	438a      	bics	r2, r1
 800be62:	605a      	str	r2, [r3, #4]
 800be64:	e053      	b.n	800bf0e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800be66:	687b      	ldr	r3, [r7, #4]
 800be68:	685a      	ldr	r2, [r3, #4]
 800be6a:	23c0      	movs	r3, #192	@ 0xc0
 800be6c:	009b      	lsls	r3, r3, #2
 800be6e:	429a      	cmp	r2, r3
 800be70:	d005      	beq.n	800be7e <HAL_I2S_DMAStop+0xee>
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	685a      	ldr	r2, [r3, #4]
 800be76:	2380      	movs	r3, #128	@ 0x80
 800be78:	005b      	lsls	r3, r3, #1
 800be7a:	429a      	cmp	r2, r3
 800be7c:	d147      	bne.n	800bf0e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be82:	2b00      	cmp	r3, #0
 800be84:	d010      	beq.n	800bea8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800be8a:	0018      	movs	r0, r3
 800be8c:	f7fd f9a2 	bl	80091d4 <HAL_DMA_Abort>
 800be90:	1e03      	subs	r3, r0, #0
 800be92:	d009      	beq.n	800bea8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be98:	2208      	movs	r2, #8
 800be9a:	431a      	orrs	r2, r3
 800be9c:	687b      	ldr	r3, [r7, #4]
 800be9e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800bea0:	2317      	movs	r3, #23
 800bea2:	18fb      	adds	r3, r7, r3
 800bea4:	2201      	movs	r2, #1
 800bea6:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	69da      	ldr	r2, [r3, #28]
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	491c      	ldr	r1, [pc, #112]	@ (800bf24 <HAL_I2S_DMAStop+0x194>)
 800beb4:	400a      	ands	r2, r1
 800beb6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800beb8:	2300      	movs	r3, #0
 800beba:	60fb      	str	r3, [r7, #12]
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	681b      	ldr	r3, [r3, #0]
 800bec0:	68db      	ldr	r3, [r3, #12]
 800bec2:	60fb      	str	r3, [r7, #12]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	60fb      	str	r3, [r7, #12]
 800becc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	681b      	ldr	r3, [r3, #0]
 800bed2:	685a      	ldr	r2, [r3, #4]
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	681b      	ldr	r3, [r3, #0]
 800bed8:	2101      	movs	r1, #1
 800beda:	438a      	bics	r2, r1
 800bedc:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	685a      	ldr	r2, [r3, #4]
 800bee2:	2380      	movs	r3, #128	@ 0x80
 800bee4:	005b      	lsls	r3, r3, #1
 800bee6:	429a      	cmp	r2, r3
 800bee8:	d10e      	bne.n	800bf08 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800beee:	2240      	movs	r2, #64	@ 0x40
 800bef0:	431a      	orrs	r2, r3
 800bef2:	687b      	ldr	r3, [r7, #4]
 800bef4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	2235      	movs	r2, #53	@ 0x35
 800befa:	2101      	movs	r1, #1
 800befc:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800befe:	2317      	movs	r3, #23
 800bf00:	18fb      	adds	r3, r7, r3
 800bf02:	2201      	movs	r2, #1
 800bf04:	701a      	strb	r2, [r3, #0]
 800bf06:	e002      	b.n	800bf0e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	2235      	movs	r2, #53	@ 0x35
 800bf12:	2101      	movs	r1, #1
 800bf14:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800bf16:	2317      	movs	r3, #23
 800bf18:	18fb      	adds	r3, r7, r3
 800bf1a:	781b      	ldrb	r3, [r3, #0]
}
 800bf1c:	0018      	movs	r0, r3
 800bf1e:	46bd      	mov	sp, r7
 800bf20:	b006      	add	sp, #24
 800bf22:	bd80      	pop	{r7, pc}
 800bf24:	fffffbff 	.word	0xfffffbff

0800bf28 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b082      	sub	sp, #8
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800bf30:	46c0      	nop			@ (mov r8, r8)
 800bf32:	46bd      	mov	sp, r7
 800bf34:	b002      	add	sp, #8
 800bf36:	bd80      	pop	{r7, pc}

0800bf38 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800bf38:	b580      	push	{r7, lr}
 800bf3a:	b082      	sub	sp, #8
 800bf3c:	af00      	add	r7, sp, #0
 800bf3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800bf40:	46c0      	nop			@ (mov r8, r8)
 800bf42:	46bd      	mov	sp, r7
 800bf44:	b002      	add	sp, #8
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf54:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	69db      	ldr	r3, [r3, #28]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d10e      	bne.n	800bf7c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800bf5e:	68fb      	ldr	r3, [r7, #12]
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	685a      	ldr	r2, [r3, #4]
 800bf64:	68fb      	ldr	r3, [r7, #12]
 800bf66:	681b      	ldr	r3, [r3, #0]
 800bf68:	2101      	movs	r1, #1
 800bf6a:	438a      	bics	r2, r1
 800bf6c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800bf6e:	68fb      	ldr	r3, [r7, #12]
 800bf70:	2200      	movs	r2, #0
 800bf72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	2235      	movs	r2, #53	@ 0x35
 800bf78:	2101      	movs	r1, #1
 800bf7a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800bf7c:	68fb      	ldr	r3, [r7, #12]
 800bf7e:	0018      	movs	r0, r3
 800bf80:	f7f9 feee 	bl	8005d60 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800bf84:	46c0      	nop			@ (mov r8, r8)
 800bf86:	46bd      	mov	sp, r7
 800bf88:	b004      	add	sp, #16
 800bf8a:	bd80      	pop	{r7, pc}

0800bf8c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf8c:	b580      	push	{r7, lr}
 800bf8e:	b084      	sub	sp, #16
 800bf90:	af00      	add	r7, sp, #0
 800bf92:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf98:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	0018      	movs	r0, r3
 800bf9e:	f7ff ffc3 	bl	800bf28 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800bfa2:	46c0      	nop			@ (mov r8, r8)
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	b004      	add	sp, #16
 800bfa8:	bd80      	pop	{r7, pc}

0800bfaa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800bfaa:	b580      	push	{r7, lr}
 800bfac:	b084      	sub	sp, #16
 800bfae:	af00      	add	r7, sp, #0
 800bfb0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfb6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800bfb8:	68fb      	ldr	r3, [r7, #12]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	685a      	ldr	r2, [r3, #4]
 800bfbe:	68fb      	ldr	r3, [r7, #12]
 800bfc0:	681b      	ldr	r3, [r3, #0]
 800bfc2:	2103      	movs	r1, #3
 800bfc4:	438a      	bics	r2, r1
 800bfc6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	2200      	movs	r2, #0
 800bfcc:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	2200      	movs	r2, #0
 800bfd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2235      	movs	r2, #53	@ 0x35
 800bfd8:	2101      	movs	r1, #1
 800bfda:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bfe0:	2208      	movs	r2, #8
 800bfe2:	431a      	orrs	r2, r3
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	0018      	movs	r0, r3
 800bfec:	f7ff ffa4 	bl	800bf38 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800bff0:	46c0      	nop			@ (mov r8, r8)
 800bff2:	46bd      	mov	sp, r7
 800bff4:	b004      	add	sp, #16
 800bff6:	bd80      	pop	{r7, pc}

0800bff8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b086      	sub	sp, #24
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	60f8      	str	r0, [r7, #12]
 800c000:	60b9      	str	r1, [r7, #8]
 800c002:	603b      	str	r3, [r7, #0]
 800c004:	1dfb      	adds	r3, r7, #7
 800c006:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800c008:	f7fc fb1e 	bl	8008648 <HAL_GetTick>
 800c00c:	0003      	movs	r3, r0
 800c00e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c010:	e017      	b.n	800c042 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	3301      	adds	r3, #1
 800c016:	d014      	beq.n	800c042 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800c018:	f7fc fb16 	bl	8008648 <HAL_GetTick>
 800c01c:	0002      	movs	r2, r0
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	1ad3      	subs	r3, r2, r3
 800c022:	683a      	ldr	r2, [r7, #0]
 800c024:	429a      	cmp	r2, r3
 800c026:	d902      	bls.n	800c02e <I2S_WaitFlagStateUntilTimeout+0x36>
 800c028:	683b      	ldr	r3, [r7, #0]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	d109      	bne.n	800c042 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800c02e:	68fb      	ldr	r3, [r7, #12]
 800c030:	2235      	movs	r2, #53	@ 0x35
 800c032:	2101      	movs	r1, #1
 800c034:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800c036:	68fb      	ldr	r3, [r7, #12]
 800c038:	2234      	movs	r2, #52	@ 0x34
 800c03a:	2100      	movs	r1, #0
 800c03c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800c03e:	2303      	movs	r3, #3
 800c040:	e00f      	b.n	800c062 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	68ba      	ldr	r2, [r7, #8]
 800c04a:	4013      	ands	r3, r2
 800c04c:	68ba      	ldr	r2, [r7, #8]
 800c04e:	1ad3      	subs	r3, r2, r3
 800c050:	425a      	negs	r2, r3
 800c052:	4153      	adcs	r3, r2
 800c054:	b2db      	uxtb	r3, r3
 800c056:	001a      	movs	r2, r3
 800c058:	1dfb      	adds	r3, r7, #7
 800c05a:	781b      	ldrb	r3, [r3, #0]
 800c05c:	429a      	cmp	r2, r3
 800c05e:	d1d8      	bne.n	800c012 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800c060:	2300      	movs	r3, #0
}
 800c062:	0018      	movs	r0, r3
 800c064:	46bd      	mov	sp, r7
 800c066:	b006      	add	sp, #24
 800c068:	bd80      	pop	{r7, pc}
	...

0800c06c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800c06c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c06e:	b08b      	sub	sp, #44	@ 0x2c
 800c070:	af06      	add	r7, sp, #24
 800c072:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800c074:	687b      	ldr	r3, [r7, #4]
 800c076:	2b00      	cmp	r3, #0
 800c078:	d101      	bne.n	800c07e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800c07a:	2301      	movs	r3, #1
 800c07c:	e0f0      	b.n	800c260 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	4a79      	ldr	r2, [pc, #484]	@ (800c268 <HAL_PCD_Init+0x1fc>)
 800c082:	5c9b      	ldrb	r3, [r3, r2]
 800c084:	b2db      	uxtb	r3, r3
 800c086:	2b00      	cmp	r3, #0
 800c088:	d108      	bne.n	800c09c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800c08a:	687a      	ldr	r2, [r7, #4]
 800c08c:	23aa      	movs	r3, #170	@ 0xaa
 800c08e:	009b      	lsls	r3, r3, #2
 800c090:	2100      	movs	r1, #0
 800c092:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	0018      	movs	r0, r3
 800c098:	f7fb fe70 	bl	8007d7c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	4a72      	ldr	r2, [pc, #456]	@ (800c268 <HAL_PCD_Init+0x1fc>)
 800c0a0:	2103      	movs	r1, #3
 800c0a2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	681b      	ldr	r3, [r3, #0]
 800c0a8:	0018      	movs	r0, r3
 800c0aa:	f003 f893 	bl	800f1d4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c0ae:	230f      	movs	r3, #15
 800c0b0:	18fb      	adds	r3, r7, r3
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	701a      	strb	r2, [r3, #0]
 800c0b6:	e049      	b.n	800c14c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800c0b8:	200f      	movs	r0, #15
 800c0ba:	183b      	adds	r3, r7, r0
 800c0bc:	781b      	ldrb	r3, [r3, #0]
 800c0be:	6879      	ldr	r1, [r7, #4]
 800c0c0:	1c5a      	adds	r2, r3, #1
 800c0c2:	0013      	movs	r3, r2
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	189b      	adds	r3, r3, r2
 800c0c8:	00db      	lsls	r3, r3, #3
 800c0ca:	18cb      	adds	r3, r1, r3
 800c0cc:	3301      	adds	r3, #1
 800c0ce:	2201      	movs	r2, #1
 800c0d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800c0d2:	183b      	adds	r3, r7, r0
 800c0d4:	781b      	ldrb	r3, [r3, #0]
 800c0d6:	6879      	ldr	r1, [r7, #4]
 800c0d8:	1c5a      	adds	r2, r3, #1
 800c0da:	0013      	movs	r3, r2
 800c0dc:	009b      	lsls	r3, r3, #2
 800c0de:	189b      	adds	r3, r3, r2
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	183a      	adds	r2, r7, r0
 800c0e4:	7812      	ldrb	r2, [r2, #0]
 800c0e6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800c0e8:	183b      	adds	r3, r7, r0
 800c0ea:	781b      	ldrb	r3, [r3, #0]
 800c0ec:	6879      	ldr	r1, [r7, #4]
 800c0ee:	1c5a      	adds	r2, r3, #1
 800c0f0:	0013      	movs	r3, r2
 800c0f2:	009b      	lsls	r3, r3, #2
 800c0f4:	189b      	adds	r3, r3, r2
 800c0f6:	00db      	lsls	r3, r3, #3
 800c0f8:	18cb      	adds	r3, r1, r3
 800c0fa:	3303      	adds	r3, #3
 800c0fc:	2200      	movs	r2, #0
 800c0fe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800c100:	183b      	adds	r3, r7, r0
 800c102:	781a      	ldrb	r2, [r3, #0]
 800c104:	6879      	ldr	r1, [r7, #4]
 800c106:	0013      	movs	r3, r2
 800c108:	009b      	lsls	r3, r3, #2
 800c10a:	189b      	adds	r3, r3, r2
 800c10c:	00db      	lsls	r3, r3, #3
 800c10e:	18cb      	adds	r3, r1, r3
 800c110:	3338      	adds	r3, #56	@ 0x38
 800c112:	2200      	movs	r2, #0
 800c114:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800c116:	183b      	adds	r3, r7, r0
 800c118:	781a      	ldrb	r2, [r3, #0]
 800c11a:	6879      	ldr	r1, [r7, #4]
 800c11c:	0013      	movs	r3, r2
 800c11e:	009b      	lsls	r3, r3, #2
 800c120:	189b      	adds	r3, r3, r2
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	18cb      	adds	r3, r1, r3
 800c126:	333c      	adds	r3, #60	@ 0x3c
 800c128:	2200      	movs	r2, #0
 800c12a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800c12c:	183b      	adds	r3, r7, r0
 800c12e:	781a      	ldrb	r2, [r3, #0]
 800c130:	6879      	ldr	r1, [r7, #4]
 800c132:	0013      	movs	r3, r2
 800c134:	009b      	lsls	r3, r3, #2
 800c136:	189b      	adds	r3, r3, r2
 800c138:	00db      	lsls	r3, r3, #3
 800c13a:	18cb      	adds	r3, r1, r3
 800c13c:	3340      	adds	r3, #64	@ 0x40
 800c13e:	2200      	movs	r2, #0
 800c140:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c142:	183b      	adds	r3, r7, r0
 800c144:	781a      	ldrb	r2, [r3, #0]
 800c146:	183b      	adds	r3, r7, r0
 800c148:	3201      	adds	r2, #1
 800c14a:	701a      	strb	r2, [r3, #0]
 800c14c:	210f      	movs	r1, #15
 800c14e:	187b      	adds	r3, r7, r1
 800c150:	781a      	ldrb	r2, [r3, #0]
 800c152:	687b      	ldr	r3, [r7, #4]
 800c154:	685b      	ldr	r3, [r3, #4]
 800c156:	429a      	cmp	r2, r3
 800c158:	d3ae      	bcc.n	800c0b8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c15a:	187b      	adds	r3, r7, r1
 800c15c:	2200      	movs	r2, #0
 800c15e:	701a      	strb	r2, [r3, #0]
 800c160:	e056      	b.n	800c210 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800c162:	240f      	movs	r4, #15
 800c164:	193b      	adds	r3, r7, r4
 800c166:	781a      	ldrb	r2, [r3, #0]
 800c168:	6878      	ldr	r0, [r7, #4]
 800c16a:	236a      	movs	r3, #106	@ 0x6a
 800c16c:	33ff      	adds	r3, #255	@ 0xff
 800c16e:	0019      	movs	r1, r3
 800c170:	0013      	movs	r3, r2
 800c172:	009b      	lsls	r3, r3, #2
 800c174:	189b      	adds	r3, r3, r2
 800c176:	00db      	lsls	r3, r3, #3
 800c178:	18c3      	adds	r3, r0, r3
 800c17a:	185b      	adds	r3, r3, r1
 800c17c:	2200      	movs	r2, #0
 800c17e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800c180:	193b      	adds	r3, r7, r4
 800c182:	781a      	ldrb	r2, [r3, #0]
 800c184:	6878      	ldr	r0, [r7, #4]
 800c186:	23b4      	movs	r3, #180	@ 0xb4
 800c188:	0059      	lsls	r1, r3, #1
 800c18a:	0013      	movs	r3, r2
 800c18c:	009b      	lsls	r3, r3, #2
 800c18e:	189b      	adds	r3, r3, r2
 800c190:	00db      	lsls	r3, r3, #3
 800c192:	18c3      	adds	r3, r0, r3
 800c194:	185b      	adds	r3, r3, r1
 800c196:	193a      	adds	r2, r7, r4
 800c198:	7812      	ldrb	r2, [r2, #0]
 800c19a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800c19c:	193b      	adds	r3, r7, r4
 800c19e:	781a      	ldrb	r2, [r3, #0]
 800c1a0:	6878      	ldr	r0, [r7, #4]
 800c1a2:	236c      	movs	r3, #108	@ 0x6c
 800c1a4:	33ff      	adds	r3, #255	@ 0xff
 800c1a6:	0019      	movs	r1, r3
 800c1a8:	0013      	movs	r3, r2
 800c1aa:	009b      	lsls	r3, r3, #2
 800c1ac:	189b      	adds	r3, r3, r2
 800c1ae:	00db      	lsls	r3, r3, #3
 800c1b0:	18c3      	adds	r3, r0, r3
 800c1b2:	185b      	adds	r3, r3, r1
 800c1b4:	2200      	movs	r2, #0
 800c1b6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800c1b8:	193b      	adds	r3, r7, r4
 800c1ba:	781a      	ldrb	r2, [r3, #0]
 800c1bc:	6878      	ldr	r0, [r7, #4]
 800c1be:	23bc      	movs	r3, #188	@ 0xbc
 800c1c0:	0059      	lsls	r1, r3, #1
 800c1c2:	0013      	movs	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	189b      	adds	r3, r3, r2
 800c1c8:	00db      	lsls	r3, r3, #3
 800c1ca:	18c3      	adds	r3, r0, r3
 800c1cc:	185b      	adds	r3, r3, r1
 800c1ce:	2200      	movs	r2, #0
 800c1d0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800c1d2:	193b      	adds	r3, r7, r4
 800c1d4:	781a      	ldrb	r2, [r3, #0]
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	23be      	movs	r3, #190	@ 0xbe
 800c1da:	0059      	lsls	r1, r3, #1
 800c1dc:	0013      	movs	r3, r2
 800c1de:	009b      	lsls	r3, r3, #2
 800c1e0:	189b      	adds	r3, r3, r2
 800c1e2:	00db      	lsls	r3, r3, #3
 800c1e4:	18c3      	adds	r3, r0, r3
 800c1e6:	185b      	adds	r3, r3, r1
 800c1e8:	2200      	movs	r2, #0
 800c1ea:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800c1ec:	193b      	adds	r3, r7, r4
 800c1ee:	781a      	ldrb	r2, [r3, #0]
 800c1f0:	6878      	ldr	r0, [r7, #4]
 800c1f2:	23c0      	movs	r3, #192	@ 0xc0
 800c1f4:	0059      	lsls	r1, r3, #1
 800c1f6:	0013      	movs	r3, r2
 800c1f8:	009b      	lsls	r3, r3, #2
 800c1fa:	189b      	adds	r3, r3, r2
 800c1fc:	00db      	lsls	r3, r3, #3
 800c1fe:	18c3      	adds	r3, r0, r3
 800c200:	185b      	adds	r3, r3, r1
 800c202:	2200      	movs	r2, #0
 800c204:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800c206:	193b      	adds	r3, r7, r4
 800c208:	781a      	ldrb	r2, [r3, #0]
 800c20a:	193b      	adds	r3, r7, r4
 800c20c:	3201      	adds	r2, #1
 800c20e:	701a      	strb	r2, [r3, #0]
 800c210:	230f      	movs	r3, #15
 800c212:	18fb      	adds	r3, r7, r3
 800c214:	781a      	ldrb	r2, [r3, #0]
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	685b      	ldr	r3, [r3, #4]
 800c21a:	429a      	cmp	r2, r3
 800c21c:	d3a1      	bcc.n	800c162 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	6818      	ldr	r0, [r3, #0]
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	466a      	mov	r2, sp
 800c226:	0011      	movs	r1, r2
 800c228:	001a      	movs	r2, r3
 800c22a:	3210      	adds	r2, #16
 800c22c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800c22e:	c170      	stmia	r1!, {r4, r5, r6}
 800c230:	ca30      	ldmia	r2!, {r4, r5}
 800c232:	c130      	stmia	r1!, {r4, r5}
 800c234:	6859      	ldr	r1, [r3, #4]
 800c236:	689a      	ldr	r2, [r3, #8]
 800c238:	68db      	ldr	r3, [r3, #12]
 800c23a:	f002 ffe5 	bl	800f208 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	2224      	movs	r2, #36	@ 0x24
 800c242:	2100      	movs	r1, #0
 800c244:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	4a07      	ldr	r2, [pc, #28]	@ (800c268 <HAL_PCD_Init+0x1fc>)
 800c24a:	2101      	movs	r1, #1
 800c24c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	69db      	ldr	r3, [r3, #28]
 800c252:	2b01      	cmp	r3, #1
 800c254:	d103      	bne.n	800c25e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	0018      	movs	r0, r3
 800c25a:	f000 f807 	bl	800c26c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800c25e:	2300      	movs	r3, #0
}
 800c260:	0018      	movs	r0, r3
 800c262:	46bd      	mov	sp, r7
 800c264:	b005      	add	sp, #20
 800c266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c268:	000002a9 	.word	0x000002a9

0800c26c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800c27a:	687a      	ldr	r2, [r7, #4]
 800c27c:	23ba      	movs	r3, #186	@ 0xba
 800c27e:	009b      	lsls	r3, r3, #2
 800c280:	2101      	movs	r1, #1
 800c282:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800c284:	687a      	ldr	r2, [r7, #4]
 800c286:	23b8      	movs	r3, #184	@ 0xb8
 800c288:	009b      	lsls	r3, r3, #2
 800c28a:	2100      	movs	r1, #0
 800c28c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800c28e:	68fb      	ldr	r3, [r7, #12]
 800c290:	2254      	movs	r2, #84	@ 0x54
 800c292:	5a9b      	ldrh	r3, [r3, r2]
 800c294:	b29b      	uxth	r3, r3
 800c296:	2201      	movs	r2, #1
 800c298:	4313      	orrs	r3, r2
 800c29a:	b299      	uxth	r1, r3
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2254      	movs	r2, #84	@ 0x54
 800c2a0:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800c2a2:	68fb      	ldr	r3, [r7, #12]
 800c2a4:	2254      	movs	r2, #84	@ 0x54
 800c2a6:	5a9b      	ldrh	r3, [r3, r2]
 800c2a8:	b29b      	uxth	r3, r3
 800c2aa:	2202      	movs	r2, #2
 800c2ac:	4313      	orrs	r3, r2
 800c2ae:	b299      	uxth	r1, r3
 800c2b0:	68fb      	ldr	r3, [r7, #12]
 800c2b2:	2254      	movs	r2, #84	@ 0x54
 800c2b4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800c2b6:	2300      	movs	r3, #0
}
 800c2b8:	0018      	movs	r0, r3
 800c2ba:	46bd      	mov	sp, r7
 800c2bc:	b004      	add	sp, #16
 800c2be:	bd80      	pop	{r7, pc}

0800c2c0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c2c0:	b5b0      	push	{r4, r5, r7, lr}
 800c2c2:	b08a      	sub	sp, #40	@ 0x28
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	2b00      	cmp	r3, #0
 800c2cc:	d102      	bne.n	800c2d4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c2ce:	2301      	movs	r3, #1
 800c2d0:	f000 fbbf 	bl	800ca52 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c2d4:	4bc9      	ldr	r3, [pc, #804]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c2d6:	68db      	ldr	r3, [r3, #12]
 800c2d8:	220c      	movs	r2, #12
 800c2da:	4013      	ands	r3, r2
 800c2dc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800c2de:	4bc7      	ldr	r3, [pc, #796]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c2e0:	68da      	ldr	r2, [r3, #12]
 800c2e2:	2380      	movs	r3, #128	@ 0x80
 800c2e4:	025b      	lsls	r3, r3, #9
 800c2e6:	4013      	ands	r3, r2
 800c2e8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2201      	movs	r2, #1
 800c2f0:	4013      	ands	r3, r2
 800c2f2:	d100      	bne.n	800c2f6 <HAL_RCC_OscConfig+0x36>
 800c2f4:	e07e      	b.n	800c3f4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800c2f6:	69fb      	ldr	r3, [r7, #28]
 800c2f8:	2b08      	cmp	r3, #8
 800c2fa:	d007      	beq.n	800c30c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800c2fc:	69fb      	ldr	r3, [r7, #28]
 800c2fe:	2b0c      	cmp	r3, #12
 800c300:	d112      	bne.n	800c328 <HAL_RCC_OscConfig+0x68>
 800c302:	69ba      	ldr	r2, [r7, #24]
 800c304:	2380      	movs	r3, #128	@ 0x80
 800c306:	025b      	lsls	r3, r3, #9
 800c308:	429a      	cmp	r2, r3
 800c30a:	d10d      	bne.n	800c328 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c30c:	4bbb      	ldr	r3, [pc, #748]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c30e:	681a      	ldr	r2, [r3, #0]
 800c310:	2380      	movs	r3, #128	@ 0x80
 800c312:	029b      	lsls	r3, r3, #10
 800c314:	4013      	ands	r3, r2
 800c316:	d100      	bne.n	800c31a <HAL_RCC_OscConfig+0x5a>
 800c318:	e06b      	b.n	800c3f2 <HAL_RCC_OscConfig+0x132>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d167      	bne.n	800c3f2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800c322:	2301      	movs	r3, #1
 800c324:	f000 fb95 	bl	800ca52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	685a      	ldr	r2, [r3, #4]
 800c32c:	2380      	movs	r3, #128	@ 0x80
 800c32e:	025b      	lsls	r3, r3, #9
 800c330:	429a      	cmp	r2, r3
 800c332:	d107      	bne.n	800c344 <HAL_RCC_OscConfig+0x84>
 800c334:	4bb1      	ldr	r3, [pc, #708]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c336:	681a      	ldr	r2, [r3, #0]
 800c338:	4bb0      	ldr	r3, [pc, #704]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c33a:	2180      	movs	r1, #128	@ 0x80
 800c33c:	0249      	lsls	r1, r1, #9
 800c33e:	430a      	orrs	r2, r1
 800c340:	601a      	str	r2, [r3, #0]
 800c342:	e027      	b.n	800c394 <HAL_RCC_OscConfig+0xd4>
 800c344:	687b      	ldr	r3, [r7, #4]
 800c346:	685a      	ldr	r2, [r3, #4]
 800c348:	23a0      	movs	r3, #160	@ 0xa0
 800c34a:	02db      	lsls	r3, r3, #11
 800c34c:	429a      	cmp	r2, r3
 800c34e:	d10e      	bne.n	800c36e <HAL_RCC_OscConfig+0xae>
 800c350:	4baa      	ldr	r3, [pc, #680]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	4ba9      	ldr	r3, [pc, #676]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c356:	2180      	movs	r1, #128	@ 0x80
 800c358:	02c9      	lsls	r1, r1, #11
 800c35a:	430a      	orrs	r2, r1
 800c35c:	601a      	str	r2, [r3, #0]
 800c35e:	4ba7      	ldr	r3, [pc, #668]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c360:	681a      	ldr	r2, [r3, #0]
 800c362:	4ba6      	ldr	r3, [pc, #664]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c364:	2180      	movs	r1, #128	@ 0x80
 800c366:	0249      	lsls	r1, r1, #9
 800c368:	430a      	orrs	r2, r1
 800c36a:	601a      	str	r2, [r3, #0]
 800c36c:	e012      	b.n	800c394 <HAL_RCC_OscConfig+0xd4>
 800c36e:	4ba3      	ldr	r3, [pc, #652]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c370:	681a      	ldr	r2, [r3, #0]
 800c372:	4ba2      	ldr	r3, [pc, #648]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c374:	49a2      	ldr	r1, [pc, #648]	@ (800c600 <HAL_RCC_OscConfig+0x340>)
 800c376:	400a      	ands	r2, r1
 800c378:	601a      	str	r2, [r3, #0]
 800c37a:	4ba0      	ldr	r3, [pc, #640]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	2380      	movs	r3, #128	@ 0x80
 800c380:	025b      	lsls	r3, r3, #9
 800c382:	4013      	ands	r3, r2
 800c384:	60fb      	str	r3, [r7, #12]
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	4b9c      	ldr	r3, [pc, #624]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c38a:	681a      	ldr	r2, [r3, #0]
 800c38c:	4b9b      	ldr	r3, [pc, #620]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c38e:	499d      	ldr	r1, [pc, #628]	@ (800c604 <HAL_RCC_OscConfig+0x344>)
 800c390:	400a      	ands	r2, r1
 800c392:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c394:	687b      	ldr	r3, [r7, #4]
 800c396:	685b      	ldr	r3, [r3, #4]
 800c398:	2b00      	cmp	r3, #0
 800c39a:	d015      	beq.n	800c3c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c39c:	f7fc f954 	bl	8008648 <HAL_GetTick>
 800c3a0:	0003      	movs	r3, r0
 800c3a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c3a4:	e009      	b.n	800c3ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3a6:	f7fc f94f 	bl	8008648 <HAL_GetTick>
 800c3aa:	0002      	movs	r2, r0
 800c3ac:	697b      	ldr	r3, [r7, #20]
 800c3ae:	1ad3      	subs	r3, r2, r3
 800c3b0:	2b64      	cmp	r3, #100	@ 0x64
 800c3b2:	d902      	bls.n	800c3ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c3b4:	2303      	movs	r3, #3
 800c3b6:	f000 fb4c 	bl	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c3ba:	4b90      	ldr	r3, [pc, #576]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c3bc:	681a      	ldr	r2, [r3, #0]
 800c3be:	2380      	movs	r3, #128	@ 0x80
 800c3c0:	029b      	lsls	r3, r3, #10
 800c3c2:	4013      	ands	r3, r2
 800c3c4:	d0ef      	beq.n	800c3a6 <HAL_RCC_OscConfig+0xe6>
 800c3c6:	e015      	b.n	800c3f4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c3c8:	f7fc f93e 	bl	8008648 <HAL_GetTick>
 800c3cc:	0003      	movs	r3, r0
 800c3ce:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c3d0:	e008      	b.n	800c3e4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c3d2:	f7fc f939 	bl	8008648 <HAL_GetTick>
 800c3d6:	0002      	movs	r2, r0
 800c3d8:	697b      	ldr	r3, [r7, #20]
 800c3da:	1ad3      	subs	r3, r2, r3
 800c3dc:	2b64      	cmp	r3, #100	@ 0x64
 800c3de:	d901      	bls.n	800c3e4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800c3e0:	2303      	movs	r3, #3
 800c3e2:	e336      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c3e4:	4b85      	ldr	r3, [pc, #532]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c3e6:	681a      	ldr	r2, [r3, #0]
 800c3e8:	2380      	movs	r3, #128	@ 0x80
 800c3ea:	029b      	lsls	r3, r3, #10
 800c3ec:	4013      	ands	r3, r2
 800c3ee:	d1f0      	bne.n	800c3d2 <HAL_RCC_OscConfig+0x112>
 800c3f0:	e000      	b.n	800c3f4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c3f2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c3f4:	687b      	ldr	r3, [r7, #4]
 800c3f6:	681b      	ldr	r3, [r3, #0]
 800c3f8:	2202      	movs	r2, #2
 800c3fa:	4013      	ands	r3, r2
 800c3fc:	d100      	bne.n	800c400 <HAL_RCC_OscConfig+0x140>
 800c3fe:	e099      	b.n	800c534 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	68db      	ldr	r3, [r3, #12]
 800c404:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800c406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c408:	2220      	movs	r2, #32
 800c40a:	4013      	ands	r3, r2
 800c40c:	d009      	beq.n	800c422 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800c40e:	4b7b      	ldr	r3, [pc, #492]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c410:	681a      	ldr	r2, [r3, #0]
 800c412:	4b7a      	ldr	r3, [pc, #488]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c414:	2120      	movs	r1, #32
 800c416:	430a      	orrs	r2, r1
 800c418:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800c41a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c41c:	2220      	movs	r2, #32
 800c41e:	4393      	bics	r3, r2
 800c420:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	2b04      	cmp	r3, #4
 800c426:	d005      	beq.n	800c434 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800c428:	69fb      	ldr	r3, [r7, #28]
 800c42a:	2b0c      	cmp	r3, #12
 800c42c:	d13e      	bne.n	800c4ac <HAL_RCC_OscConfig+0x1ec>
 800c42e:	69bb      	ldr	r3, [r7, #24]
 800c430:	2b00      	cmp	r3, #0
 800c432:	d13b      	bne.n	800c4ac <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800c434:	4b71      	ldr	r3, [pc, #452]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c436:	681b      	ldr	r3, [r3, #0]
 800c438:	2204      	movs	r2, #4
 800c43a:	4013      	ands	r3, r2
 800c43c:	d004      	beq.n	800c448 <HAL_RCC_OscConfig+0x188>
 800c43e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c440:	2b00      	cmp	r3, #0
 800c442:	d101      	bne.n	800c448 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800c444:	2301      	movs	r3, #1
 800c446:	e304      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c448:	4b6c      	ldr	r3, [pc, #432]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c44a:	685b      	ldr	r3, [r3, #4]
 800c44c:	4a6e      	ldr	r2, [pc, #440]	@ (800c608 <HAL_RCC_OscConfig+0x348>)
 800c44e:	4013      	ands	r3, r2
 800c450:	0019      	movs	r1, r3
 800c452:	687b      	ldr	r3, [r7, #4]
 800c454:	691b      	ldr	r3, [r3, #16]
 800c456:	021a      	lsls	r2, r3, #8
 800c458:	4b68      	ldr	r3, [pc, #416]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c45a:	430a      	orrs	r2, r1
 800c45c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800c45e:	4b67      	ldr	r3, [pc, #412]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c460:	681b      	ldr	r3, [r3, #0]
 800c462:	2209      	movs	r2, #9
 800c464:	4393      	bics	r3, r2
 800c466:	0019      	movs	r1, r3
 800c468:	4b64      	ldr	r3, [pc, #400]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c46a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c46c:	430a      	orrs	r2, r1
 800c46e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c470:	f000 fc42 	bl	800ccf8 <HAL_RCC_GetSysClockFreq>
 800c474:	0001      	movs	r1, r0
 800c476:	4b61      	ldr	r3, [pc, #388]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	091b      	lsrs	r3, r3, #4
 800c47c:	220f      	movs	r2, #15
 800c47e:	4013      	ands	r3, r2
 800c480:	4a62      	ldr	r2, [pc, #392]	@ (800c60c <HAL_RCC_OscConfig+0x34c>)
 800c482:	5cd3      	ldrb	r3, [r2, r3]
 800c484:	000a      	movs	r2, r1
 800c486:	40da      	lsrs	r2, r3
 800c488:	4b61      	ldr	r3, [pc, #388]	@ (800c610 <HAL_RCC_OscConfig+0x350>)
 800c48a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800c48c:	4b61      	ldr	r3, [pc, #388]	@ (800c614 <HAL_RCC_OscConfig+0x354>)
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	2513      	movs	r5, #19
 800c492:	197c      	adds	r4, r7, r5
 800c494:	0018      	movs	r0, r3
 800c496:	f7fc f891 	bl	80085bc <HAL_InitTick>
 800c49a:	0003      	movs	r3, r0
 800c49c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800c49e:	197b      	adds	r3, r7, r5
 800c4a0:	781b      	ldrb	r3, [r3, #0]
 800c4a2:	2b00      	cmp	r3, #0
 800c4a4:	d046      	beq.n	800c534 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800c4a6:	197b      	adds	r3, r7, r5
 800c4a8:	781b      	ldrb	r3, [r3, #0]
 800c4aa:	e2d2      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800c4ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4ae:	2b00      	cmp	r3, #0
 800c4b0:	d027      	beq.n	800c502 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800c4b2:	4b52      	ldr	r3, [pc, #328]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c4b4:	681b      	ldr	r3, [r3, #0]
 800c4b6:	2209      	movs	r2, #9
 800c4b8:	4393      	bics	r3, r2
 800c4ba:	0019      	movs	r1, r3
 800c4bc:	4b4f      	ldr	r3, [pc, #316]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c4be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4c0:	430a      	orrs	r2, r1
 800c4c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c4c4:	f7fc f8c0 	bl	8008648 <HAL_GetTick>
 800c4c8:	0003      	movs	r3, r0
 800c4ca:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4cc:	e008      	b.n	800c4e0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c4ce:	f7fc f8bb 	bl	8008648 <HAL_GetTick>
 800c4d2:	0002      	movs	r2, r0
 800c4d4:	697b      	ldr	r3, [r7, #20]
 800c4d6:	1ad3      	subs	r3, r2, r3
 800c4d8:	2b02      	cmp	r3, #2
 800c4da:	d901      	bls.n	800c4e0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800c4dc:	2303      	movs	r3, #3
 800c4de:	e2b8      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c4e0:	4b46      	ldr	r3, [pc, #280]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	2204      	movs	r2, #4
 800c4e6:	4013      	ands	r3, r2
 800c4e8:	d0f1      	beq.n	800c4ce <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c4ea:	4b44      	ldr	r3, [pc, #272]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c4ec:	685b      	ldr	r3, [r3, #4]
 800c4ee:	4a46      	ldr	r2, [pc, #280]	@ (800c608 <HAL_RCC_OscConfig+0x348>)
 800c4f0:	4013      	ands	r3, r2
 800c4f2:	0019      	movs	r1, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	691b      	ldr	r3, [r3, #16]
 800c4f8:	021a      	lsls	r2, r3, #8
 800c4fa:	4b40      	ldr	r3, [pc, #256]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c4fc:	430a      	orrs	r2, r1
 800c4fe:	605a      	str	r2, [r3, #4]
 800c500:	e018      	b.n	800c534 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c502:	4b3e      	ldr	r3, [pc, #248]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c504:	681a      	ldr	r2, [r3, #0]
 800c506:	4b3d      	ldr	r3, [pc, #244]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c508:	2101      	movs	r1, #1
 800c50a:	438a      	bics	r2, r1
 800c50c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c50e:	f7fc f89b 	bl	8008648 <HAL_GetTick>
 800c512:	0003      	movs	r3, r0
 800c514:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c516:	e008      	b.n	800c52a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c518:	f7fc f896 	bl	8008648 <HAL_GetTick>
 800c51c:	0002      	movs	r2, r0
 800c51e:	697b      	ldr	r3, [r7, #20]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	2b02      	cmp	r3, #2
 800c524:	d901      	bls.n	800c52a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800c526:	2303      	movs	r3, #3
 800c528:	e293      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c52a:	4b34      	ldr	r3, [pc, #208]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	2204      	movs	r2, #4
 800c530:	4013      	ands	r3, r2
 800c532:	d1f1      	bne.n	800c518 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800c534:	687b      	ldr	r3, [r7, #4]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	2210      	movs	r2, #16
 800c53a:	4013      	ands	r3, r2
 800c53c:	d100      	bne.n	800c540 <HAL_RCC_OscConfig+0x280>
 800c53e:	e0a2      	b.n	800c686 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800c540:	69fb      	ldr	r3, [r7, #28]
 800c542:	2b00      	cmp	r3, #0
 800c544:	d140      	bne.n	800c5c8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800c546:	4b2d      	ldr	r3, [pc, #180]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	2380      	movs	r3, #128	@ 0x80
 800c54c:	009b      	lsls	r3, r3, #2
 800c54e:	4013      	ands	r3, r2
 800c550:	d005      	beq.n	800c55e <HAL_RCC_OscConfig+0x29e>
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	69db      	ldr	r3, [r3, #28]
 800c556:	2b00      	cmp	r3, #0
 800c558:	d101      	bne.n	800c55e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800c55a:	2301      	movs	r3, #1
 800c55c:	e279      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c55e:	4b27      	ldr	r3, [pc, #156]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c560:	685b      	ldr	r3, [r3, #4]
 800c562:	4a2d      	ldr	r2, [pc, #180]	@ (800c618 <HAL_RCC_OscConfig+0x358>)
 800c564:	4013      	ands	r3, r2
 800c566:	0019      	movs	r1, r3
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c56c:	4b23      	ldr	r3, [pc, #140]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c56e:	430a      	orrs	r2, r1
 800c570:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c572:	4b22      	ldr	r3, [pc, #136]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c574:	685b      	ldr	r3, [r3, #4]
 800c576:	021b      	lsls	r3, r3, #8
 800c578:	0a19      	lsrs	r1, r3, #8
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6a1b      	ldr	r3, [r3, #32]
 800c57e:	061a      	lsls	r2, r3, #24
 800c580:	4b1e      	ldr	r3, [pc, #120]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c582:	430a      	orrs	r2, r1
 800c584:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c58a:	0b5b      	lsrs	r3, r3, #13
 800c58c:	3301      	adds	r3, #1
 800c58e:	2280      	movs	r2, #128	@ 0x80
 800c590:	0212      	lsls	r2, r2, #8
 800c592:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800c594:	4b19      	ldr	r3, [pc, #100]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c596:	68db      	ldr	r3, [r3, #12]
 800c598:	091b      	lsrs	r3, r3, #4
 800c59a:	210f      	movs	r1, #15
 800c59c:	400b      	ands	r3, r1
 800c59e:	491b      	ldr	r1, [pc, #108]	@ (800c60c <HAL_RCC_OscConfig+0x34c>)
 800c5a0:	5ccb      	ldrb	r3, [r1, r3]
 800c5a2:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800c5a4:	4b1a      	ldr	r3, [pc, #104]	@ (800c610 <HAL_RCC_OscConfig+0x350>)
 800c5a6:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800c5a8:	4b1a      	ldr	r3, [pc, #104]	@ (800c614 <HAL_RCC_OscConfig+0x354>)
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	2513      	movs	r5, #19
 800c5ae:	197c      	adds	r4, r7, r5
 800c5b0:	0018      	movs	r0, r3
 800c5b2:	f7fc f803 	bl	80085bc <HAL_InitTick>
 800c5b6:	0003      	movs	r3, r0
 800c5b8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800c5ba:	197b      	adds	r3, r7, r5
 800c5bc:	781b      	ldrb	r3, [r3, #0]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	d061      	beq.n	800c686 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800c5c2:	197b      	adds	r3, r7, r5
 800c5c4:	781b      	ldrb	r3, [r3, #0]
 800c5c6:	e244      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	69db      	ldr	r3, [r3, #28]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d040      	beq.n	800c652 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800c5d0:	4b0a      	ldr	r3, [pc, #40]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c5d2:	681a      	ldr	r2, [r3, #0]
 800c5d4:	4b09      	ldr	r3, [pc, #36]	@ (800c5fc <HAL_RCC_OscConfig+0x33c>)
 800c5d6:	2180      	movs	r1, #128	@ 0x80
 800c5d8:	0049      	lsls	r1, r1, #1
 800c5da:	430a      	orrs	r2, r1
 800c5dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5de:	f7fc f833 	bl	8008648 <HAL_GetTick>
 800c5e2:	0003      	movs	r3, r0
 800c5e4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c5e6:	e019      	b.n	800c61c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c5e8:	f7fc f82e 	bl	8008648 <HAL_GetTick>
 800c5ec:	0002      	movs	r2, r0
 800c5ee:	697b      	ldr	r3, [r7, #20]
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d912      	bls.n	800c61c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e22b      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
 800c5fa:	46c0      	nop			@ (mov r8, r8)
 800c5fc:	40021000 	.word	0x40021000
 800c600:	fffeffff 	.word	0xfffeffff
 800c604:	fffbffff 	.word	0xfffbffff
 800c608:	ffffe0ff 	.word	0xffffe0ff
 800c60c:	08012fc8 	.word	0x08012fc8
 800c610:	20000130 	.word	0x20000130
 800c614:	20000144 	.word	0x20000144
 800c618:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c61c:	4bca      	ldr	r3, [pc, #808]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c61e:	681a      	ldr	r2, [r3, #0]
 800c620:	2380      	movs	r3, #128	@ 0x80
 800c622:	009b      	lsls	r3, r3, #2
 800c624:	4013      	ands	r3, r2
 800c626:	d0df      	beq.n	800c5e8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800c628:	4bc7      	ldr	r3, [pc, #796]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c62a:	685b      	ldr	r3, [r3, #4]
 800c62c:	4ac7      	ldr	r2, [pc, #796]	@ (800c94c <HAL_RCC_OscConfig+0x68c>)
 800c62e:	4013      	ands	r3, r2
 800c630:	0019      	movs	r1, r3
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c636:	4bc4      	ldr	r3, [pc, #784]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c638:	430a      	orrs	r2, r1
 800c63a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800c63c:	4bc2      	ldr	r3, [pc, #776]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c63e:	685b      	ldr	r3, [r3, #4]
 800c640:	021b      	lsls	r3, r3, #8
 800c642:	0a19      	lsrs	r1, r3, #8
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	6a1b      	ldr	r3, [r3, #32]
 800c648:	061a      	lsls	r2, r3, #24
 800c64a:	4bbf      	ldr	r3, [pc, #764]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c64c:	430a      	orrs	r2, r1
 800c64e:	605a      	str	r2, [r3, #4]
 800c650:	e019      	b.n	800c686 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800c652:	4bbd      	ldr	r3, [pc, #756]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c654:	681a      	ldr	r2, [r3, #0]
 800c656:	4bbc      	ldr	r3, [pc, #752]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c658:	49bd      	ldr	r1, [pc, #756]	@ (800c950 <HAL_RCC_OscConfig+0x690>)
 800c65a:	400a      	ands	r2, r1
 800c65c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c65e:	f7fb fff3 	bl	8008648 <HAL_GetTick>
 800c662:	0003      	movs	r3, r0
 800c664:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800c666:	e008      	b.n	800c67a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800c668:	f7fb ffee 	bl	8008648 <HAL_GetTick>
 800c66c:	0002      	movs	r2, r0
 800c66e:	697b      	ldr	r3, [r7, #20]
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b02      	cmp	r3, #2
 800c674:	d901      	bls.n	800c67a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e1eb      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800c67a:	4bb3      	ldr	r3, [pc, #716]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c67c:	681a      	ldr	r2, [r3, #0]
 800c67e:	2380      	movs	r3, #128	@ 0x80
 800c680:	009b      	lsls	r3, r3, #2
 800c682:	4013      	ands	r3, r2
 800c684:	d1f0      	bne.n	800c668 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	2208      	movs	r2, #8
 800c68c:	4013      	ands	r3, r2
 800c68e:	d036      	beq.n	800c6fe <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	695b      	ldr	r3, [r3, #20]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d019      	beq.n	800c6cc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c698:	4bab      	ldr	r3, [pc, #684]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c69a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c69c:	4baa      	ldr	r3, [pc, #680]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c69e:	2101      	movs	r1, #1
 800c6a0:	430a      	orrs	r2, r1
 800c6a2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c6a4:	f7fb ffd0 	bl	8008648 <HAL_GetTick>
 800c6a8:	0003      	movs	r3, r0
 800c6aa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c6ac:	e008      	b.n	800c6c0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6ae:	f7fb ffcb 	bl	8008648 <HAL_GetTick>
 800c6b2:	0002      	movs	r2, r0
 800c6b4:	697b      	ldr	r3, [r7, #20]
 800c6b6:	1ad3      	subs	r3, r2, r3
 800c6b8:	2b02      	cmp	r3, #2
 800c6ba:	d901      	bls.n	800c6c0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800c6bc:	2303      	movs	r3, #3
 800c6be:	e1c8      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c6c0:	4ba1      	ldr	r3, [pc, #644]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c6c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6c4:	2202      	movs	r2, #2
 800c6c6:	4013      	ands	r3, r2
 800c6c8:	d0f1      	beq.n	800c6ae <HAL_RCC_OscConfig+0x3ee>
 800c6ca:	e018      	b.n	800c6fe <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c6cc:	4b9e      	ldr	r3, [pc, #632]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c6ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c6d0:	4b9d      	ldr	r3, [pc, #628]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c6d2:	2101      	movs	r1, #1
 800c6d4:	438a      	bics	r2, r1
 800c6d6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c6d8:	f7fb ffb6 	bl	8008648 <HAL_GetTick>
 800c6dc:	0003      	movs	r3, r0
 800c6de:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c6e0:	e008      	b.n	800c6f4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c6e2:	f7fb ffb1 	bl	8008648 <HAL_GetTick>
 800c6e6:	0002      	movs	r2, r0
 800c6e8:	697b      	ldr	r3, [r7, #20]
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d901      	bls.n	800c6f4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800c6f0:	2303      	movs	r3, #3
 800c6f2:	e1ae      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c6f4:	4b94      	ldr	r3, [pc, #592]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c6f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c6f8:	2202      	movs	r2, #2
 800c6fa:	4013      	ands	r3, r2
 800c6fc:	d1f1      	bne.n	800c6e2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	2204      	movs	r2, #4
 800c704:	4013      	ands	r3, r2
 800c706:	d100      	bne.n	800c70a <HAL_RCC_OscConfig+0x44a>
 800c708:	e0ae      	b.n	800c868 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c70a:	2023      	movs	r0, #35	@ 0x23
 800c70c:	183b      	adds	r3, r7, r0
 800c70e:	2200      	movs	r2, #0
 800c710:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c712:	4b8d      	ldr	r3, [pc, #564]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c714:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c716:	2380      	movs	r3, #128	@ 0x80
 800c718:	055b      	lsls	r3, r3, #21
 800c71a:	4013      	ands	r3, r2
 800c71c:	d109      	bne.n	800c732 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c71e:	4b8a      	ldr	r3, [pc, #552]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c720:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c722:	4b89      	ldr	r3, [pc, #548]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c724:	2180      	movs	r1, #128	@ 0x80
 800c726:	0549      	lsls	r1, r1, #21
 800c728:	430a      	orrs	r2, r1
 800c72a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800c72c:	183b      	adds	r3, r7, r0
 800c72e:	2201      	movs	r2, #1
 800c730:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c732:	4b88      	ldr	r3, [pc, #544]	@ (800c954 <HAL_RCC_OscConfig+0x694>)
 800c734:	681a      	ldr	r2, [r3, #0]
 800c736:	2380      	movs	r3, #128	@ 0x80
 800c738:	005b      	lsls	r3, r3, #1
 800c73a:	4013      	ands	r3, r2
 800c73c:	d11a      	bne.n	800c774 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c73e:	4b85      	ldr	r3, [pc, #532]	@ (800c954 <HAL_RCC_OscConfig+0x694>)
 800c740:	681a      	ldr	r2, [r3, #0]
 800c742:	4b84      	ldr	r3, [pc, #528]	@ (800c954 <HAL_RCC_OscConfig+0x694>)
 800c744:	2180      	movs	r1, #128	@ 0x80
 800c746:	0049      	lsls	r1, r1, #1
 800c748:	430a      	orrs	r2, r1
 800c74a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c74c:	f7fb ff7c 	bl	8008648 <HAL_GetTick>
 800c750:	0003      	movs	r3, r0
 800c752:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c754:	e008      	b.n	800c768 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c756:	f7fb ff77 	bl	8008648 <HAL_GetTick>
 800c75a:	0002      	movs	r2, r0
 800c75c:	697b      	ldr	r3, [r7, #20]
 800c75e:	1ad3      	subs	r3, r2, r3
 800c760:	2b64      	cmp	r3, #100	@ 0x64
 800c762:	d901      	bls.n	800c768 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800c764:	2303      	movs	r3, #3
 800c766:	e174      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c768:	4b7a      	ldr	r3, [pc, #488]	@ (800c954 <HAL_RCC_OscConfig+0x694>)
 800c76a:	681a      	ldr	r2, [r3, #0]
 800c76c:	2380      	movs	r3, #128	@ 0x80
 800c76e:	005b      	lsls	r3, r3, #1
 800c770:	4013      	ands	r3, r2
 800c772:	d0f0      	beq.n	800c756 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	689a      	ldr	r2, [r3, #8]
 800c778:	2380      	movs	r3, #128	@ 0x80
 800c77a:	005b      	lsls	r3, r3, #1
 800c77c:	429a      	cmp	r2, r3
 800c77e:	d107      	bne.n	800c790 <HAL_RCC_OscConfig+0x4d0>
 800c780:	4b71      	ldr	r3, [pc, #452]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c782:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c784:	4b70      	ldr	r3, [pc, #448]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c786:	2180      	movs	r1, #128	@ 0x80
 800c788:	0049      	lsls	r1, r1, #1
 800c78a:	430a      	orrs	r2, r1
 800c78c:	651a      	str	r2, [r3, #80]	@ 0x50
 800c78e:	e031      	b.n	800c7f4 <HAL_RCC_OscConfig+0x534>
 800c790:	687b      	ldr	r3, [r7, #4]
 800c792:	689b      	ldr	r3, [r3, #8]
 800c794:	2b00      	cmp	r3, #0
 800c796:	d10c      	bne.n	800c7b2 <HAL_RCC_OscConfig+0x4f2>
 800c798:	4b6b      	ldr	r3, [pc, #428]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c79a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c79c:	4b6a      	ldr	r3, [pc, #424]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c79e:	496c      	ldr	r1, [pc, #432]	@ (800c950 <HAL_RCC_OscConfig+0x690>)
 800c7a0:	400a      	ands	r2, r1
 800c7a2:	651a      	str	r2, [r3, #80]	@ 0x50
 800c7a4:	4b68      	ldr	r3, [pc, #416]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7a6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7a8:	4b67      	ldr	r3, [pc, #412]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7aa:	496b      	ldr	r1, [pc, #428]	@ (800c958 <HAL_RCC_OscConfig+0x698>)
 800c7ac:	400a      	ands	r2, r1
 800c7ae:	651a      	str	r2, [r3, #80]	@ 0x50
 800c7b0:	e020      	b.n	800c7f4 <HAL_RCC_OscConfig+0x534>
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	689a      	ldr	r2, [r3, #8]
 800c7b6:	23a0      	movs	r3, #160	@ 0xa0
 800c7b8:	00db      	lsls	r3, r3, #3
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d10e      	bne.n	800c7dc <HAL_RCC_OscConfig+0x51c>
 800c7be:	4b62      	ldr	r3, [pc, #392]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7c0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7c2:	4b61      	ldr	r3, [pc, #388]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7c4:	2180      	movs	r1, #128	@ 0x80
 800c7c6:	00c9      	lsls	r1, r1, #3
 800c7c8:	430a      	orrs	r2, r1
 800c7ca:	651a      	str	r2, [r3, #80]	@ 0x50
 800c7cc:	4b5e      	ldr	r3, [pc, #376]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7ce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7d0:	4b5d      	ldr	r3, [pc, #372]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7d2:	2180      	movs	r1, #128	@ 0x80
 800c7d4:	0049      	lsls	r1, r1, #1
 800c7d6:	430a      	orrs	r2, r1
 800c7d8:	651a      	str	r2, [r3, #80]	@ 0x50
 800c7da:	e00b      	b.n	800c7f4 <HAL_RCC_OscConfig+0x534>
 800c7dc:	4b5a      	ldr	r3, [pc, #360]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7de:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7e0:	4b59      	ldr	r3, [pc, #356]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7e2:	495b      	ldr	r1, [pc, #364]	@ (800c950 <HAL_RCC_OscConfig+0x690>)
 800c7e4:	400a      	ands	r2, r1
 800c7e6:	651a      	str	r2, [r3, #80]	@ 0x50
 800c7e8:	4b57      	ldr	r3, [pc, #348]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7ea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c7ec:	4b56      	ldr	r3, [pc, #344]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c7ee:	495a      	ldr	r1, [pc, #360]	@ (800c958 <HAL_RCC_OscConfig+0x698>)
 800c7f0:	400a      	ands	r2, r1
 800c7f2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	689b      	ldr	r3, [r3, #8]
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d015      	beq.n	800c828 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c7fc:	f7fb ff24 	bl	8008648 <HAL_GetTick>
 800c800:	0003      	movs	r3, r0
 800c802:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c804:	e009      	b.n	800c81a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c806:	f7fb ff1f 	bl	8008648 <HAL_GetTick>
 800c80a:	0002      	movs	r2, r0
 800c80c:	697b      	ldr	r3, [r7, #20]
 800c80e:	1ad3      	subs	r3, r2, r3
 800c810:	4a52      	ldr	r2, [pc, #328]	@ (800c95c <HAL_RCC_OscConfig+0x69c>)
 800c812:	4293      	cmp	r3, r2
 800c814:	d901      	bls.n	800c81a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800c816:	2303      	movs	r3, #3
 800c818:	e11b      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c81a:	4b4b      	ldr	r3, [pc, #300]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c81c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c81e:	2380      	movs	r3, #128	@ 0x80
 800c820:	009b      	lsls	r3, r3, #2
 800c822:	4013      	ands	r3, r2
 800c824:	d0ef      	beq.n	800c806 <HAL_RCC_OscConfig+0x546>
 800c826:	e014      	b.n	800c852 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800c828:	f7fb ff0e 	bl	8008648 <HAL_GetTick>
 800c82c:	0003      	movs	r3, r0
 800c82e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c830:	e009      	b.n	800c846 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c832:	f7fb ff09 	bl	8008648 <HAL_GetTick>
 800c836:	0002      	movs	r2, r0
 800c838:	697b      	ldr	r3, [r7, #20]
 800c83a:	1ad3      	subs	r3, r2, r3
 800c83c:	4a47      	ldr	r2, [pc, #284]	@ (800c95c <HAL_RCC_OscConfig+0x69c>)
 800c83e:	4293      	cmp	r3, r2
 800c840:	d901      	bls.n	800c846 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800c842:	2303      	movs	r3, #3
 800c844:	e105      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c846:	4b40      	ldr	r3, [pc, #256]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c848:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c84a:	2380      	movs	r3, #128	@ 0x80
 800c84c:	009b      	lsls	r3, r3, #2
 800c84e:	4013      	ands	r3, r2
 800c850:	d1ef      	bne.n	800c832 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c852:	2323      	movs	r3, #35	@ 0x23
 800c854:	18fb      	adds	r3, r7, r3
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	2b01      	cmp	r3, #1
 800c85a:	d105      	bne.n	800c868 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c85c:	4b3a      	ldr	r3, [pc, #232]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c85e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c860:	4b39      	ldr	r3, [pc, #228]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c862:	493f      	ldr	r1, [pc, #252]	@ (800c960 <HAL_RCC_OscConfig+0x6a0>)
 800c864:	400a      	ands	r2, r1
 800c866:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	2220      	movs	r2, #32
 800c86e:	4013      	ands	r3, r2
 800c870:	d049      	beq.n	800c906 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	699b      	ldr	r3, [r3, #24]
 800c876:	2b00      	cmp	r3, #0
 800c878:	d026      	beq.n	800c8c8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800c87a:	4b33      	ldr	r3, [pc, #204]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c87c:	689a      	ldr	r2, [r3, #8]
 800c87e:	4b32      	ldr	r3, [pc, #200]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c880:	2101      	movs	r1, #1
 800c882:	430a      	orrs	r2, r1
 800c884:	609a      	str	r2, [r3, #8]
 800c886:	4b30      	ldr	r3, [pc, #192]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c888:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c88a:	4b2f      	ldr	r3, [pc, #188]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c88c:	2101      	movs	r1, #1
 800c88e:	430a      	orrs	r2, r1
 800c890:	635a      	str	r2, [r3, #52]	@ 0x34
 800c892:	4b34      	ldr	r3, [pc, #208]	@ (800c964 <HAL_RCC_OscConfig+0x6a4>)
 800c894:	6a1a      	ldr	r2, [r3, #32]
 800c896:	4b33      	ldr	r3, [pc, #204]	@ (800c964 <HAL_RCC_OscConfig+0x6a4>)
 800c898:	2180      	movs	r1, #128	@ 0x80
 800c89a:	0189      	lsls	r1, r1, #6
 800c89c:	430a      	orrs	r2, r1
 800c89e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8a0:	f7fb fed2 	bl	8008648 <HAL_GetTick>
 800c8a4:	0003      	movs	r3, r0
 800c8a6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c8a8:	e008      	b.n	800c8bc <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c8aa:	f7fb fecd 	bl	8008648 <HAL_GetTick>
 800c8ae:	0002      	movs	r2, r0
 800c8b0:	697b      	ldr	r3, [r7, #20]
 800c8b2:	1ad3      	subs	r3, r2, r3
 800c8b4:	2b02      	cmp	r3, #2
 800c8b6:	d901      	bls.n	800c8bc <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800c8b8:	2303      	movs	r3, #3
 800c8ba:	e0ca      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c8bc:	4b22      	ldr	r3, [pc, #136]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	2202      	movs	r2, #2
 800c8c2:	4013      	ands	r3, r2
 800c8c4:	d0f1      	beq.n	800c8aa <HAL_RCC_OscConfig+0x5ea>
 800c8c6:	e01e      	b.n	800c906 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800c8c8:	4b1f      	ldr	r3, [pc, #124]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c8ca:	689a      	ldr	r2, [r3, #8]
 800c8cc:	4b1e      	ldr	r3, [pc, #120]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	438a      	bics	r2, r1
 800c8d2:	609a      	str	r2, [r3, #8]
 800c8d4:	4b23      	ldr	r3, [pc, #140]	@ (800c964 <HAL_RCC_OscConfig+0x6a4>)
 800c8d6:	6a1a      	ldr	r2, [r3, #32]
 800c8d8:	4b22      	ldr	r3, [pc, #136]	@ (800c964 <HAL_RCC_OscConfig+0x6a4>)
 800c8da:	4923      	ldr	r1, [pc, #140]	@ (800c968 <HAL_RCC_OscConfig+0x6a8>)
 800c8dc:	400a      	ands	r2, r1
 800c8de:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c8e0:	f7fb feb2 	bl	8008648 <HAL_GetTick>
 800c8e4:	0003      	movs	r3, r0
 800c8e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c8e8:	e008      	b.n	800c8fc <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c8ea:	f7fb fead 	bl	8008648 <HAL_GetTick>
 800c8ee:	0002      	movs	r2, r0
 800c8f0:	697b      	ldr	r3, [r7, #20]
 800c8f2:	1ad3      	subs	r3, r2, r3
 800c8f4:	2b02      	cmp	r3, #2
 800c8f6:	d901      	bls.n	800c8fc <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800c8f8:	2303      	movs	r3, #3
 800c8fa:	e0aa      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c8fc:	4b12      	ldr	r3, [pc, #72]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c8fe:	689b      	ldr	r3, [r3, #8]
 800c900:	2202      	movs	r2, #2
 800c902:	4013      	ands	r3, r2
 800c904:	d1f1      	bne.n	800c8ea <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d100      	bne.n	800c910 <HAL_RCC_OscConfig+0x650>
 800c90e:	e09f      	b.n	800ca50 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c910:	69fb      	ldr	r3, [r7, #28]
 800c912:	2b0c      	cmp	r3, #12
 800c914:	d100      	bne.n	800c918 <HAL_RCC_OscConfig+0x658>
 800c916:	e078      	b.n	800ca0a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c91c:	2b02      	cmp	r3, #2
 800c91e:	d159      	bne.n	800c9d4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c920:	4b09      	ldr	r3, [pc, #36]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	4b08      	ldr	r3, [pc, #32]	@ (800c948 <HAL_RCC_OscConfig+0x688>)
 800c926:	4911      	ldr	r1, [pc, #68]	@ (800c96c <HAL_RCC_OscConfig+0x6ac>)
 800c928:	400a      	ands	r2, r1
 800c92a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c92c:	f7fb fe8c 	bl	8008648 <HAL_GetTick>
 800c930:	0003      	movs	r3, r0
 800c932:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800c934:	e01c      	b.n	800c970 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c936:	f7fb fe87 	bl	8008648 <HAL_GetTick>
 800c93a:	0002      	movs	r2, r0
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	1ad3      	subs	r3, r2, r3
 800c940:	2b02      	cmp	r3, #2
 800c942:	d915      	bls.n	800c970 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800c944:	2303      	movs	r3, #3
 800c946:	e084      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
 800c948:	40021000 	.word	0x40021000
 800c94c:	ffff1fff 	.word	0xffff1fff
 800c950:	fffffeff 	.word	0xfffffeff
 800c954:	40007000 	.word	0x40007000
 800c958:	fffffbff 	.word	0xfffffbff
 800c95c:	00001388 	.word	0x00001388
 800c960:	efffffff 	.word	0xefffffff
 800c964:	40010000 	.word	0x40010000
 800c968:	ffffdfff 	.word	0xffffdfff
 800c96c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800c970:	4b3a      	ldr	r3, [pc, #232]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c972:	681a      	ldr	r2, [r3, #0]
 800c974:	2380      	movs	r3, #128	@ 0x80
 800c976:	049b      	lsls	r3, r3, #18
 800c978:	4013      	ands	r3, r2
 800c97a:	d1dc      	bne.n	800c936 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c97c:	4b37      	ldr	r3, [pc, #220]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c97e:	68db      	ldr	r3, [r3, #12]
 800c980:	4a37      	ldr	r2, [pc, #220]	@ (800ca60 <HAL_RCC_OscConfig+0x7a0>)
 800c982:	4013      	ands	r3, r2
 800c984:	0019      	movs	r1, r3
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c98e:	431a      	orrs	r2, r3
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c994:	431a      	orrs	r2, r3
 800c996:	4b31      	ldr	r3, [pc, #196]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c998:	430a      	orrs	r2, r1
 800c99a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c99c:	4b2f      	ldr	r3, [pc, #188]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c99e:	681a      	ldr	r2, [r3, #0]
 800c9a0:	4b2e      	ldr	r3, [pc, #184]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c9a2:	2180      	movs	r1, #128	@ 0x80
 800c9a4:	0449      	lsls	r1, r1, #17
 800c9a6:	430a      	orrs	r2, r1
 800c9a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9aa:	f7fb fe4d 	bl	8008648 <HAL_GetTick>
 800c9ae:	0003      	movs	r3, r0
 800c9b0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800c9b2:	e008      	b.n	800c9c6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9b4:	f7fb fe48 	bl	8008648 <HAL_GetTick>
 800c9b8:	0002      	movs	r2, r0
 800c9ba:	697b      	ldr	r3, [r7, #20]
 800c9bc:	1ad3      	subs	r3, r2, r3
 800c9be:	2b02      	cmp	r3, #2
 800c9c0:	d901      	bls.n	800c9c6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800c9c2:	2303      	movs	r3, #3
 800c9c4:	e045      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800c9c6:	4b25      	ldr	r3, [pc, #148]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c9c8:	681a      	ldr	r2, [r3, #0]
 800c9ca:	2380      	movs	r3, #128	@ 0x80
 800c9cc:	049b      	lsls	r3, r3, #18
 800c9ce:	4013      	ands	r3, r2
 800c9d0:	d0f0      	beq.n	800c9b4 <HAL_RCC_OscConfig+0x6f4>
 800c9d2:	e03d      	b.n	800ca50 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c9d4:	4b21      	ldr	r3, [pc, #132]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c9d6:	681a      	ldr	r2, [r3, #0]
 800c9d8:	4b20      	ldr	r3, [pc, #128]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c9da:	4922      	ldr	r1, [pc, #136]	@ (800ca64 <HAL_RCC_OscConfig+0x7a4>)
 800c9dc:	400a      	ands	r2, r1
 800c9de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c9e0:	f7fb fe32 	bl	8008648 <HAL_GetTick>
 800c9e4:	0003      	movs	r3, r0
 800c9e6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800c9e8:	e008      	b.n	800c9fc <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800c9ea:	f7fb fe2d 	bl	8008648 <HAL_GetTick>
 800c9ee:	0002      	movs	r2, r0
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	1ad3      	subs	r3, r2, r3
 800c9f4:	2b02      	cmp	r3, #2
 800c9f6:	d901      	bls.n	800c9fc <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800c9f8:	2303      	movs	r3, #3
 800c9fa:	e02a      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800c9fc:	4b17      	ldr	r3, [pc, #92]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800c9fe:	681a      	ldr	r2, [r3, #0]
 800ca00:	2380      	movs	r3, #128	@ 0x80
 800ca02:	049b      	lsls	r3, r3, #18
 800ca04:	4013      	ands	r3, r2
 800ca06:	d1f0      	bne.n	800c9ea <HAL_RCC_OscConfig+0x72a>
 800ca08:	e022      	b.n	800ca50 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ca0e:	2b01      	cmp	r3, #1
 800ca10:	d101      	bne.n	800ca16 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800ca12:	2301      	movs	r3, #1
 800ca14:	e01d      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ca16:	4b11      	ldr	r3, [pc, #68]	@ (800ca5c <HAL_RCC_OscConfig+0x79c>)
 800ca18:	68db      	ldr	r3, [r3, #12]
 800ca1a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca1c:	69ba      	ldr	r2, [r7, #24]
 800ca1e:	2380      	movs	r3, #128	@ 0x80
 800ca20:	025b      	lsls	r3, r3, #9
 800ca22:	401a      	ands	r2, r3
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d10f      	bne.n	800ca4c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ca2c:	69ba      	ldr	r2, [r7, #24]
 800ca2e:	23f0      	movs	r3, #240	@ 0xf0
 800ca30:	039b      	lsls	r3, r3, #14
 800ca32:	401a      	ands	r2, r3
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ca38:	429a      	cmp	r2, r3
 800ca3a:	d107      	bne.n	800ca4c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800ca3c:	69ba      	ldr	r2, [r7, #24]
 800ca3e:	23c0      	movs	r3, #192	@ 0xc0
 800ca40:	041b      	lsls	r3, r3, #16
 800ca42:	401a      	ands	r2, r3
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d001      	beq.n	800ca50 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e000      	b.n	800ca52 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800ca50:	2300      	movs	r3, #0
}
 800ca52:	0018      	movs	r0, r3
 800ca54:	46bd      	mov	sp, r7
 800ca56:	b00a      	add	sp, #40	@ 0x28
 800ca58:	bdb0      	pop	{r4, r5, r7, pc}
 800ca5a:	46c0      	nop			@ (mov r8, r8)
 800ca5c:	40021000 	.word	0x40021000
 800ca60:	ff02ffff 	.word	0xff02ffff
 800ca64:	feffffff 	.word	0xfeffffff

0800ca68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca68:	b5b0      	push	{r4, r5, r7, lr}
 800ca6a:	b084      	sub	sp, #16
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	6078      	str	r0, [r7, #4]
 800ca70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d101      	bne.n	800ca7c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca78:	2301      	movs	r3, #1
 800ca7a:	e128      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800ca7c:	4b96      	ldr	r3, [pc, #600]	@ (800ccd8 <HAL_RCC_ClockConfig+0x270>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	2201      	movs	r2, #1
 800ca82:	4013      	ands	r3, r2
 800ca84:	683a      	ldr	r2, [r7, #0]
 800ca86:	429a      	cmp	r2, r3
 800ca88:	d91e      	bls.n	800cac8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca8a:	4b93      	ldr	r3, [pc, #588]	@ (800ccd8 <HAL_RCC_ClockConfig+0x270>)
 800ca8c:	681b      	ldr	r3, [r3, #0]
 800ca8e:	2201      	movs	r2, #1
 800ca90:	4393      	bics	r3, r2
 800ca92:	0019      	movs	r1, r3
 800ca94:	4b90      	ldr	r3, [pc, #576]	@ (800ccd8 <HAL_RCC_ClockConfig+0x270>)
 800ca96:	683a      	ldr	r2, [r7, #0]
 800ca98:	430a      	orrs	r2, r1
 800ca9a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ca9c:	f7fb fdd4 	bl	8008648 <HAL_GetTick>
 800caa0:	0003      	movs	r3, r0
 800caa2:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800caa4:	e009      	b.n	800caba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800caa6:	f7fb fdcf 	bl	8008648 <HAL_GetTick>
 800caaa:	0002      	movs	r2, r0
 800caac:	68fb      	ldr	r3, [r7, #12]
 800caae:	1ad3      	subs	r3, r2, r3
 800cab0:	4a8a      	ldr	r2, [pc, #552]	@ (800ccdc <HAL_RCC_ClockConfig+0x274>)
 800cab2:	4293      	cmp	r3, r2
 800cab4:	d901      	bls.n	800caba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800cab6:	2303      	movs	r3, #3
 800cab8:	e109      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800caba:	4b87      	ldr	r3, [pc, #540]	@ (800ccd8 <HAL_RCC_ClockConfig+0x270>)
 800cabc:	681b      	ldr	r3, [r3, #0]
 800cabe:	2201      	movs	r2, #1
 800cac0:	4013      	ands	r3, r2
 800cac2:	683a      	ldr	r2, [r7, #0]
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d1ee      	bne.n	800caa6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	681b      	ldr	r3, [r3, #0]
 800cacc:	2202      	movs	r2, #2
 800cace:	4013      	ands	r3, r2
 800cad0:	d009      	beq.n	800cae6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cad2:	4b83      	ldr	r3, [pc, #524]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cad4:	68db      	ldr	r3, [r3, #12]
 800cad6:	22f0      	movs	r2, #240	@ 0xf0
 800cad8:	4393      	bics	r3, r2
 800cada:	0019      	movs	r1, r3
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	689a      	ldr	r2, [r3, #8]
 800cae0:	4b7f      	ldr	r3, [pc, #508]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cae2:	430a      	orrs	r2, r1
 800cae4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	2201      	movs	r2, #1
 800caec:	4013      	ands	r3, r2
 800caee:	d100      	bne.n	800caf2 <HAL_RCC_ClockConfig+0x8a>
 800caf0:	e089      	b.n	800cc06 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	2b02      	cmp	r3, #2
 800caf8:	d107      	bne.n	800cb0a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cafa:	4b79      	ldr	r3, [pc, #484]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cafc:	681a      	ldr	r2, [r3, #0]
 800cafe:	2380      	movs	r3, #128	@ 0x80
 800cb00:	029b      	lsls	r3, r3, #10
 800cb02:	4013      	ands	r3, r2
 800cb04:	d120      	bne.n	800cb48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cb06:	2301      	movs	r3, #1
 800cb08:	e0e1      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb0a:	687b      	ldr	r3, [r7, #4]
 800cb0c:	685b      	ldr	r3, [r3, #4]
 800cb0e:	2b03      	cmp	r3, #3
 800cb10:	d107      	bne.n	800cb22 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cb12:	4b73      	ldr	r3, [pc, #460]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	2380      	movs	r3, #128	@ 0x80
 800cb18:	049b      	lsls	r3, r3, #18
 800cb1a:	4013      	ands	r3, r2
 800cb1c:	d114      	bne.n	800cb48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cb1e:	2301      	movs	r3, #1
 800cb20:	e0d5      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	685b      	ldr	r3, [r3, #4]
 800cb26:	2b01      	cmp	r3, #1
 800cb28:	d106      	bne.n	800cb38 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb2a:	4b6d      	ldr	r3, [pc, #436]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	2204      	movs	r2, #4
 800cb30:	4013      	ands	r3, r2
 800cb32:	d109      	bne.n	800cb48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cb34:	2301      	movs	r3, #1
 800cb36:	e0ca      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800cb38:	4b69      	ldr	r3, [pc, #420]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cb3a:	681a      	ldr	r2, [r3, #0]
 800cb3c:	2380      	movs	r3, #128	@ 0x80
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	4013      	ands	r3, r2
 800cb42:	d101      	bne.n	800cb48 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800cb44:	2301      	movs	r3, #1
 800cb46:	e0c2      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800cb48:	4b65      	ldr	r3, [pc, #404]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cb4a:	68db      	ldr	r3, [r3, #12]
 800cb4c:	2203      	movs	r2, #3
 800cb4e:	4393      	bics	r3, r2
 800cb50:	0019      	movs	r1, r3
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	685a      	ldr	r2, [r3, #4]
 800cb56:	4b62      	ldr	r3, [pc, #392]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cb58:	430a      	orrs	r2, r1
 800cb5a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800cb5c:	f7fb fd74 	bl	8008648 <HAL_GetTick>
 800cb60:	0003      	movs	r3, r0
 800cb62:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	685b      	ldr	r3, [r3, #4]
 800cb68:	2b02      	cmp	r3, #2
 800cb6a:	d111      	bne.n	800cb90 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cb6c:	e009      	b.n	800cb82 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb6e:	f7fb fd6b 	bl	8008648 <HAL_GetTick>
 800cb72:	0002      	movs	r2, r0
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	1ad3      	subs	r3, r2, r3
 800cb78:	4a58      	ldr	r2, [pc, #352]	@ (800ccdc <HAL_RCC_ClockConfig+0x274>)
 800cb7a:	4293      	cmp	r3, r2
 800cb7c:	d901      	bls.n	800cb82 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800cb7e:	2303      	movs	r3, #3
 800cb80:	e0a5      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800cb82:	4b57      	ldr	r3, [pc, #348]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cb84:	68db      	ldr	r3, [r3, #12]
 800cb86:	220c      	movs	r2, #12
 800cb88:	4013      	ands	r3, r2
 800cb8a:	2b08      	cmp	r3, #8
 800cb8c:	d1ef      	bne.n	800cb6e <HAL_RCC_ClockConfig+0x106>
 800cb8e:	e03a      	b.n	800cc06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	685b      	ldr	r3, [r3, #4]
 800cb94:	2b03      	cmp	r3, #3
 800cb96:	d111      	bne.n	800cbbc <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cb98:	e009      	b.n	800cbae <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cb9a:	f7fb fd55 	bl	8008648 <HAL_GetTick>
 800cb9e:	0002      	movs	r2, r0
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	1ad3      	subs	r3, r2, r3
 800cba4:	4a4d      	ldr	r2, [pc, #308]	@ (800ccdc <HAL_RCC_ClockConfig+0x274>)
 800cba6:	4293      	cmp	r3, r2
 800cba8:	d901      	bls.n	800cbae <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800cbaa:	2303      	movs	r3, #3
 800cbac:	e08f      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800cbae:	4b4c      	ldr	r3, [pc, #304]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cbb0:	68db      	ldr	r3, [r3, #12]
 800cbb2:	220c      	movs	r2, #12
 800cbb4:	4013      	ands	r3, r2
 800cbb6:	2b0c      	cmp	r3, #12
 800cbb8:	d1ef      	bne.n	800cb9a <HAL_RCC_ClockConfig+0x132>
 800cbba:	e024      	b.n	800cc06 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	2b01      	cmp	r3, #1
 800cbc2:	d11b      	bne.n	800cbfc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cbc4:	e009      	b.n	800cbda <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbc6:	f7fb fd3f 	bl	8008648 <HAL_GetTick>
 800cbca:	0002      	movs	r2, r0
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	4a42      	ldr	r2, [pc, #264]	@ (800ccdc <HAL_RCC_ClockConfig+0x274>)
 800cbd2:	4293      	cmp	r3, r2
 800cbd4:	d901      	bls.n	800cbda <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800cbd6:	2303      	movs	r3, #3
 800cbd8:	e079      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800cbda:	4b41      	ldr	r3, [pc, #260]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cbdc:	68db      	ldr	r3, [r3, #12]
 800cbde:	220c      	movs	r2, #12
 800cbe0:	4013      	ands	r3, r2
 800cbe2:	2b04      	cmp	r3, #4
 800cbe4:	d1ef      	bne.n	800cbc6 <HAL_RCC_ClockConfig+0x15e>
 800cbe6:	e00e      	b.n	800cc06 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbe8:	f7fb fd2e 	bl	8008648 <HAL_GetTick>
 800cbec:	0002      	movs	r2, r0
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	1ad3      	subs	r3, r2, r3
 800cbf2:	4a3a      	ldr	r2, [pc, #232]	@ (800ccdc <HAL_RCC_ClockConfig+0x274>)
 800cbf4:	4293      	cmp	r3, r2
 800cbf6:	d901      	bls.n	800cbfc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800cbf8:	2303      	movs	r3, #3
 800cbfa:	e068      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800cbfc:	4b38      	ldr	r3, [pc, #224]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cbfe:	68db      	ldr	r3, [r3, #12]
 800cc00:	220c      	movs	r2, #12
 800cc02:	4013      	ands	r3, r2
 800cc04:	d1f0      	bne.n	800cbe8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800cc06:	4b34      	ldr	r3, [pc, #208]	@ (800ccd8 <HAL_RCC_ClockConfig+0x270>)
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2201      	movs	r2, #1
 800cc0c:	4013      	ands	r3, r2
 800cc0e:	683a      	ldr	r2, [r7, #0]
 800cc10:	429a      	cmp	r2, r3
 800cc12:	d21e      	bcs.n	800cc52 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc14:	4b30      	ldr	r3, [pc, #192]	@ (800ccd8 <HAL_RCC_ClockConfig+0x270>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2201      	movs	r2, #1
 800cc1a:	4393      	bics	r3, r2
 800cc1c:	0019      	movs	r1, r3
 800cc1e:	4b2e      	ldr	r3, [pc, #184]	@ (800ccd8 <HAL_RCC_ClockConfig+0x270>)
 800cc20:	683a      	ldr	r2, [r7, #0]
 800cc22:	430a      	orrs	r2, r1
 800cc24:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800cc26:	f7fb fd0f 	bl	8008648 <HAL_GetTick>
 800cc2a:	0003      	movs	r3, r0
 800cc2c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc2e:	e009      	b.n	800cc44 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cc30:	f7fb fd0a 	bl	8008648 <HAL_GetTick>
 800cc34:	0002      	movs	r2, r0
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	1ad3      	subs	r3, r2, r3
 800cc3a:	4a28      	ldr	r2, [pc, #160]	@ (800ccdc <HAL_RCC_ClockConfig+0x274>)
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d901      	bls.n	800cc44 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800cc40:	2303      	movs	r3, #3
 800cc42:	e044      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc44:	4b24      	ldr	r3, [pc, #144]	@ (800ccd8 <HAL_RCC_ClockConfig+0x270>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	2201      	movs	r2, #1
 800cc4a:	4013      	ands	r3, r2
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d1ee      	bne.n	800cc30 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	2204      	movs	r2, #4
 800cc58:	4013      	ands	r3, r2
 800cc5a:	d009      	beq.n	800cc70 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800cc5c:	4b20      	ldr	r3, [pc, #128]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cc5e:	68db      	ldr	r3, [r3, #12]
 800cc60:	4a20      	ldr	r2, [pc, #128]	@ (800cce4 <HAL_RCC_ClockConfig+0x27c>)
 800cc62:	4013      	ands	r3, r2
 800cc64:	0019      	movs	r1, r3
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	68da      	ldr	r2, [r3, #12]
 800cc6a:	4b1d      	ldr	r3, [pc, #116]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cc6c:	430a      	orrs	r2, r1
 800cc6e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	2208      	movs	r2, #8
 800cc76:	4013      	ands	r3, r2
 800cc78:	d00a      	beq.n	800cc90 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800cc7a:	4b19      	ldr	r3, [pc, #100]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cc7c:	68db      	ldr	r3, [r3, #12]
 800cc7e:	4a1a      	ldr	r2, [pc, #104]	@ (800cce8 <HAL_RCC_ClockConfig+0x280>)
 800cc80:	4013      	ands	r3, r2
 800cc82:	0019      	movs	r1, r3
 800cc84:	687b      	ldr	r3, [r7, #4]
 800cc86:	691b      	ldr	r3, [r3, #16]
 800cc88:	00da      	lsls	r2, r3, #3
 800cc8a:	4b15      	ldr	r3, [pc, #84]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cc8c:	430a      	orrs	r2, r1
 800cc8e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800cc90:	f000 f832 	bl	800ccf8 <HAL_RCC_GetSysClockFreq>
 800cc94:	0001      	movs	r1, r0
 800cc96:	4b12      	ldr	r3, [pc, #72]	@ (800cce0 <HAL_RCC_ClockConfig+0x278>)
 800cc98:	68db      	ldr	r3, [r3, #12]
 800cc9a:	091b      	lsrs	r3, r3, #4
 800cc9c:	220f      	movs	r2, #15
 800cc9e:	4013      	ands	r3, r2
 800cca0:	4a12      	ldr	r2, [pc, #72]	@ (800ccec <HAL_RCC_ClockConfig+0x284>)
 800cca2:	5cd3      	ldrb	r3, [r2, r3]
 800cca4:	000a      	movs	r2, r1
 800cca6:	40da      	lsrs	r2, r3
 800cca8:	4b11      	ldr	r3, [pc, #68]	@ (800ccf0 <HAL_RCC_ClockConfig+0x288>)
 800ccaa:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800ccac:	4b11      	ldr	r3, [pc, #68]	@ (800ccf4 <HAL_RCC_ClockConfig+0x28c>)
 800ccae:	681b      	ldr	r3, [r3, #0]
 800ccb0:	250b      	movs	r5, #11
 800ccb2:	197c      	adds	r4, r7, r5
 800ccb4:	0018      	movs	r0, r3
 800ccb6:	f7fb fc81 	bl	80085bc <HAL_InitTick>
 800ccba:	0003      	movs	r3, r0
 800ccbc:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800ccbe:	197b      	adds	r3, r7, r5
 800ccc0:	781b      	ldrb	r3, [r3, #0]
 800ccc2:	2b00      	cmp	r3, #0
 800ccc4:	d002      	beq.n	800cccc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800ccc6:	197b      	adds	r3, r7, r5
 800ccc8:	781b      	ldrb	r3, [r3, #0]
 800ccca:	e000      	b.n	800ccce <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	0018      	movs	r0, r3
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	b004      	add	sp, #16
 800ccd4:	bdb0      	pop	{r4, r5, r7, pc}
 800ccd6:	46c0      	nop			@ (mov r8, r8)
 800ccd8:	40022000 	.word	0x40022000
 800ccdc:	00001388 	.word	0x00001388
 800cce0:	40021000 	.word	0x40021000
 800cce4:	fffff8ff 	.word	0xfffff8ff
 800cce8:	ffffc7ff 	.word	0xffffc7ff
 800ccec:	08012fc8 	.word	0x08012fc8
 800ccf0:	20000130 	.word	0x20000130
 800ccf4:	20000144 	.word	0x20000144

0800ccf8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ccf8:	b5b0      	push	{r4, r5, r7, lr}
 800ccfa:	b08e      	sub	sp, #56	@ 0x38
 800ccfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800ccfe:	4b4c      	ldr	r3, [pc, #304]	@ (800ce30 <HAL_RCC_GetSysClockFreq+0x138>)
 800cd00:	68db      	ldr	r3, [r3, #12]
 800cd02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800cd04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800cd06:	230c      	movs	r3, #12
 800cd08:	4013      	ands	r3, r2
 800cd0a:	2b0c      	cmp	r3, #12
 800cd0c:	d014      	beq.n	800cd38 <HAL_RCC_GetSysClockFreq+0x40>
 800cd0e:	d900      	bls.n	800cd12 <HAL_RCC_GetSysClockFreq+0x1a>
 800cd10:	e07b      	b.n	800ce0a <HAL_RCC_GetSysClockFreq+0x112>
 800cd12:	2b04      	cmp	r3, #4
 800cd14:	d002      	beq.n	800cd1c <HAL_RCC_GetSysClockFreq+0x24>
 800cd16:	2b08      	cmp	r3, #8
 800cd18:	d00b      	beq.n	800cd32 <HAL_RCC_GetSysClockFreq+0x3a>
 800cd1a:	e076      	b.n	800ce0a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800cd1c:	4b44      	ldr	r3, [pc, #272]	@ (800ce30 <HAL_RCC_GetSysClockFreq+0x138>)
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	2210      	movs	r2, #16
 800cd22:	4013      	ands	r3, r2
 800cd24:	d002      	beq.n	800cd2c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800cd26:	4b43      	ldr	r3, [pc, #268]	@ (800ce34 <HAL_RCC_GetSysClockFreq+0x13c>)
 800cd28:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800cd2a:	e07c      	b.n	800ce26 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800cd2c:	4b42      	ldr	r3, [pc, #264]	@ (800ce38 <HAL_RCC_GetSysClockFreq+0x140>)
 800cd2e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cd30:	e079      	b.n	800ce26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800cd32:	4b42      	ldr	r3, [pc, #264]	@ (800ce3c <HAL_RCC_GetSysClockFreq+0x144>)
 800cd34:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800cd36:	e076      	b.n	800ce26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800cd38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd3a:	0c9a      	lsrs	r2, r3, #18
 800cd3c:	230f      	movs	r3, #15
 800cd3e:	401a      	ands	r2, r3
 800cd40:	4b3f      	ldr	r3, [pc, #252]	@ (800ce40 <HAL_RCC_GetSysClockFreq+0x148>)
 800cd42:	5c9b      	ldrb	r3, [r3, r2]
 800cd44:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800cd46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800cd48:	0d9a      	lsrs	r2, r3, #22
 800cd4a:	2303      	movs	r3, #3
 800cd4c:	4013      	ands	r3, r2
 800cd4e:	3301      	adds	r3, #1
 800cd50:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800cd52:	4b37      	ldr	r3, [pc, #220]	@ (800ce30 <HAL_RCC_GetSysClockFreq+0x138>)
 800cd54:	68da      	ldr	r2, [r3, #12]
 800cd56:	2380      	movs	r3, #128	@ 0x80
 800cd58:	025b      	lsls	r3, r3, #9
 800cd5a:	4013      	ands	r3, r2
 800cd5c:	d01a      	beq.n	800cd94 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800cd5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cd60:	61bb      	str	r3, [r7, #24]
 800cd62:	2300      	movs	r3, #0
 800cd64:	61fb      	str	r3, [r7, #28]
 800cd66:	4a35      	ldr	r2, [pc, #212]	@ (800ce3c <HAL_RCC_GetSysClockFreq+0x144>)
 800cd68:	2300      	movs	r3, #0
 800cd6a:	69b8      	ldr	r0, [r7, #24]
 800cd6c:	69f9      	ldr	r1, [r7, #28]
 800cd6e:	f7f3 fbf5 	bl	800055c <__aeabi_lmul>
 800cd72:	0002      	movs	r2, r0
 800cd74:	000b      	movs	r3, r1
 800cd76:	0010      	movs	r0, r2
 800cd78:	0019      	movs	r1, r3
 800cd7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd7c:	613b      	str	r3, [r7, #16]
 800cd7e:	2300      	movs	r3, #0
 800cd80:	617b      	str	r3, [r7, #20]
 800cd82:	693a      	ldr	r2, [r7, #16]
 800cd84:	697b      	ldr	r3, [r7, #20]
 800cd86:	f7f3 fbc9 	bl	800051c <__aeabi_uldivmod>
 800cd8a:	0002      	movs	r2, r0
 800cd8c:	000b      	movs	r3, r1
 800cd8e:	0013      	movs	r3, r2
 800cd90:	637b      	str	r3, [r7, #52]	@ 0x34
 800cd92:	e037      	b.n	800ce04 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800cd94:	4b26      	ldr	r3, [pc, #152]	@ (800ce30 <HAL_RCC_GetSysClockFreq+0x138>)
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2210      	movs	r2, #16
 800cd9a:	4013      	ands	r3, r2
 800cd9c:	d01a      	beq.n	800cdd4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800cd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cda0:	60bb      	str	r3, [r7, #8]
 800cda2:	2300      	movs	r3, #0
 800cda4:	60fb      	str	r3, [r7, #12]
 800cda6:	4a23      	ldr	r2, [pc, #140]	@ (800ce34 <HAL_RCC_GetSysClockFreq+0x13c>)
 800cda8:	2300      	movs	r3, #0
 800cdaa:	68b8      	ldr	r0, [r7, #8]
 800cdac:	68f9      	ldr	r1, [r7, #12]
 800cdae:	f7f3 fbd5 	bl	800055c <__aeabi_lmul>
 800cdb2:	0002      	movs	r2, r0
 800cdb4:	000b      	movs	r3, r1
 800cdb6:	0010      	movs	r0, r2
 800cdb8:	0019      	movs	r1, r3
 800cdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdbc:	603b      	str	r3, [r7, #0]
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	607b      	str	r3, [r7, #4]
 800cdc2:	683a      	ldr	r2, [r7, #0]
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	f7f3 fba9 	bl	800051c <__aeabi_uldivmod>
 800cdca:	0002      	movs	r2, r0
 800cdcc:	000b      	movs	r3, r1
 800cdce:	0013      	movs	r3, r2
 800cdd0:	637b      	str	r3, [r7, #52]	@ 0x34
 800cdd2:	e017      	b.n	800ce04 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800cdd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800cdd6:	0018      	movs	r0, r3
 800cdd8:	2300      	movs	r3, #0
 800cdda:	0019      	movs	r1, r3
 800cddc:	4a16      	ldr	r2, [pc, #88]	@ (800ce38 <HAL_RCC_GetSysClockFreq+0x140>)
 800cdde:	2300      	movs	r3, #0
 800cde0:	f7f3 fbbc 	bl	800055c <__aeabi_lmul>
 800cde4:	0002      	movs	r2, r0
 800cde6:	000b      	movs	r3, r1
 800cde8:	0010      	movs	r0, r2
 800cdea:	0019      	movs	r1, r3
 800cdec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdee:	001c      	movs	r4, r3
 800cdf0:	2300      	movs	r3, #0
 800cdf2:	001d      	movs	r5, r3
 800cdf4:	0022      	movs	r2, r4
 800cdf6:	002b      	movs	r3, r5
 800cdf8:	f7f3 fb90 	bl	800051c <__aeabi_uldivmod>
 800cdfc:	0002      	movs	r2, r0
 800cdfe:	000b      	movs	r3, r1
 800ce00:	0013      	movs	r3, r2
 800ce02:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800ce04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ce06:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ce08:	e00d      	b.n	800ce26 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800ce0a:	4b09      	ldr	r3, [pc, #36]	@ (800ce30 <HAL_RCC_GetSysClockFreq+0x138>)
 800ce0c:	685b      	ldr	r3, [r3, #4]
 800ce0e:	0b5b      	lsrs	r3, r3, #13
 800ce10:	2207      	movs	r2, #7
 800ce12:	4013      	ands	r3, r2
 800ce14:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800ce16:	6a3b      	ldr	r3, [r7, #32]
 800ce18:	3301      	adds	r3, #1
 800ce1a:	2280      	movs	r2, #128	@ 0x80
 800ce1c:	0212      	lsls	r2, r2, #8
 800ce1e:	409a      	lsls	r2, r3
 800ce20:	0013      	movs	r3, r2
 800ce22:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800ce24:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800ce26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800ce28:	0018      	movs	r0, r3
 800ce2a:	46bd      	mov	sp, r7
 800ce2c:	b00e      	add	sp, #56	@ 0x38
 800ce2e:	bdb0      	pop	{r4, r5, r7, pc}
 800ce30:	40021000 	.word	0x40021000
 800ce34:	003d0900 	.word	0x003d0900
 800ce38:	00f42400 	.word	0x00f42400
 800ce3c:	007a1200 	.word	0x007a1200
 800ce40:	08012fe0 	.word	0x08012fe0

0800ce44 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800ce48:	4b02      	ldr	r3, [pc, #8]	@ (800ce54 <HAL_RCC_GetHCLKFreq+0x10>)
 800ce4a:	681b      	ldr	r3, [r3, #0]
}
 800ce4c:	0018      	movs	r0, r3
 800ce4e:	46bd      	mov	sp, r7
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	46c0      	nop			@ (mov r8, r8)
 800ce54:	20000130 	.word	0x20000130

0800ce58 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800ce5c:	f7ff fff2 	bl	800ce44 <HAL_RCC_GetHCLKFreq>
 800ce60:	0001      	movs	r1, r0
 800ce62:	4b06      	ldr	r3, [pc, #24]	@ (800ce7c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ce64:	68db      	ldr	r3, [r3, #12]
 800ce66:	0a1b      	lsrs	r3, r3, #8
 800ce68:	2207      	movs	r2, #7
 800ce6a:	4013      	ands	r3, r2
 800ce6c:	4a04      	ldr	r2, [pc, #16]	@ (800ce80 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ce6e:	5cd3      	ldrb	r3, [r2, r3]
 800ce70:	40d9      	lsrs	r1, r3
 800ce72:	000b      	movs	r3, r1
}
 800ce74:	0018      	movs	r0, r3
 800ce76:	46bd      	mov	sp, r7
 800ce78:	bd80      	pop	{r7, pc}
 800ce7a:	46c0      	nop			@ (mov r8, r8)
 800ce7c:	40021000 	.word	0x40021000
 800ce80:	08012fd8 	.word	0x08012fd8

0800ce84 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800ce84:	b580      	push	{r7, lr}
 800ce86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800ce88:	f7ff ffdc 	bl	800ce44 <HAL_RCC_GetHCLKFreq>
 800ce8c:	0001      	movs	r1, r0
 800ce8e:	4b06      	ldr	r3, [pc, #24]	@ (800cea8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ce90:	68db      	ldr	r3, [r3, #12]
 800ce92:	0adb      	lsrs	r3, r3, #11
 800ce94:	2207      	movs	r2, #7
 800ce96:	4013      	ands	r3, r2
 800ce98:	4a04      	ldr	r2, [pc, #16]	@ (800ceac <HAL_RCC_GetPCLK2Freq+0x28>)
 800ce9a:	5cd3      	ldrb	r3, [r2, r3]
 800ce9c:	40d9      	lsrs	r1, r3
 800ce9e:	000b      	movs	r3, r1
}
 800cea0:	0018      	movs	r0, r3
 800cea2:	46bd      	mov	sp, r7
 800cea4:	bd80      	pop	{r7, pc}
 800cea6:	46c0      	nop			@ (mov r8, r8)
 800cea8:	40021000 	.word	0x40021000
 800ceac:	08012fd8 	.word	0x08012fd8

0800ceb0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ceb0:	b580      	push	{r7, lr}
 800ceb2:	b086      	sub	sp, #24
 800ceb4:	af00      	add	r7, sp, #0
 800ceb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800ceb8:	2017      	movs	r0, #23
 800ceba:	183b      	adds	r3, r7, r0
 800cebc:	2200      	movs	r2, #0
 800cebe:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	681b      	ldr	r3, [r3, #0]
 800cec4:	2220      	movs	r2, #32
 800cec6:	4013      	ands	r3, r2
 800cec8:	d100      	bne.n	800cecc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800ceca:	e0c7      	b.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800cecc:	4b9b      	ldr	r3, [pc, #620]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cece:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ced0:	2380      	movs	r3, #128	@ 0x80
 800ced2:	055b      	lsls	r3, r3, #21
 800ced4:	4013      	ands	r3, r2
 800ced6:	d109      	bne.n	800ceec <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800ced8:	4b98      	ldr	r3, [pc, #608]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800ceda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800cedc:	4b97      	ldr	r3, [pc, #604]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cede:	2180      	movs	r1, #128	@ 0x80
 800cee0:	0549      	lsls	r1, r1, #21
 800cee2:	430a      	orrs	r2, r1
 800cee4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800cee6:	183b      	adds	r3, r7, r0
 800cee8:	2201      	movs	r2, #1
 800ceea:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ceec:	4b94      	ldr	r3, [pc, #592]	@ (800d140 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800ceee:	681a      	ldr	r2, [r3, #0]
 800cef0:	2380      	movs	r3, #128	@ 0x80
 800cef2:	005b      	lsls	r3, r3, #1
 800cef4:	4013      	ands	r3, r2
 800cef6:	d11a      	bne.n	800cf2e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800cef8:	4b91      	ldr	r3, [pc, #580]	@ (800d140 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800cefa:	681a      	ldr	r2, [r3, #0]
 800cefc:	4b90      	ldr	r3, [pc, #576]	@ (800d140 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800cefe:	2180      	movs	r1, #128	@ 0x80
 800cf00:	0049      	lsls	r1, r1, #1
 800cf02:	430a      	orrs	r2, r1
 800cf04:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800cf06:	f7fb fb9f 	bl	8008648 <HAL_GetTick>
 800cf0a:	0003      	movs	r3, r0
 800cf0c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf0e:	e008      	b.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800cf10:	f7fb fb9a 	bl	8008648 <HAL_GetTick>
 800cf14:	0002      	movs	r2, r0
 800cf16:	693b      	ldr	r3, [r7, #16]
 800cf18:	1ad3      	subs	r3, r2, r3
 800cf1a:	2b64      	cmp	r3, #100	@ 0x64
 800cf1c:	d901      	bls.n	800cf22 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800cf1e:	2303      	movs	r3, #3
 800cf20:	e107      	b.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800cf22:	4b87      	ldr	r3, [pc, #540]	@ (800d140 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800cf24:	681a      	ldr	r2, [r3, #0]
 800cf26:	2380      	movs	r3, #128	@ 0x80
 800cf28:	005b      	lsls	r3, r3, #1
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	d0f0      	beq.n	800cf10 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800cf2e:	4b83      	ldr	r3, [pc, #524]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	23c0      	movs	r3, #192	@ 0xc0
 800cf34:	039b      	lsls	r3, r3, #14
 800cf36:	4013      	ands	r3, r2
 800cf38:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	685a      	ldr	r2, [r3, #4]
 800cf3e:	23c0      	movs	r3, #192	@ 0xc0
 800cf40:	039b      	lsls	r3, r3, #14
 800cf42:	4013      	ands	r3, r2
 800cf44:	68fa      	ldr	r2, [r7, #12]
 800cf46:	429a      	cmp	r2, r3
 800cf48:	d013      	beq.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	685a      	ldr	r2, [r3, #4]
 800cf4e:	23c0      	movs	r3, #192	@ 0xc0
 800cf50:	029b      	lsls	r3, r3, #10
 800cf52:	401a      	ands	r2, r3
 800cf54:	23c0      	movs	r3, #192	@ 0xc0
 800cf56:	029b      	lsls	r3, r3, #10
 800cf58:	429a      	cmp	r2, r3
 800cf5a:	d10a      	bne.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cf5c:	4b77      	ldr	r3, [pc, #476]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cf5e:	681a      	ldr	r2, [r3, #0]
 800cf60:	2380      	movs	r3, #128	@ 0x80
 800cf62:	029b      	lsls	r3, r3, #10
 800cf64:	401a      	ands	r2, r3
 800cf66:	2380      	movs	r3, #128	@ 0x80
 800cf68:	029b      	lsls	r3, r3, #10
 800cf6a:	429a      	cmp	r2, r3
 800cf6c:	d101      	bne.n	800cf72 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800cf6e:	2301      	movs	r3, #1
 800cf70:	e0df      	b.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800cf72:	4b72      	ldr	r3, [pc, #456]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cf74:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cf76:	23c0      	movs	r3, #192	@ 0xc0
 800cf78:	029b      	lsls	r3, r3, #10
 800cf7a:	4013      	ands	r3, r2
 800cf7c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b00      	cmp	r3, #0
 800cf82:	d03b      	beq.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	685a      	ldr	r2, [r3, #4]
 800cf88:	23c0      	movs	r3, #192	@ 0xc0
 800cf8a:	029b      	lsls	r3, r3, #10
 800cf8c:	4013      	ands	r3, r2
 800cf8e:	68fa      	ldr	r2, [r7, #12]
 800cf90:	429a      	cmp	r2, r3
 800cf92:	d033      	beq.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800cf94:	687b      	ldr	r3, [r7, #4]
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	2220      	movs	r2, #32
 800cf9a:	4013      	ands	r3, r2
 800cf9c:	d02e      	beq.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800cf9e:	4b67      	ldr	r3, [pc, #412]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cfa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cfa2:	4a68      	ldr	r2, [pc, #416]	@ (800d144 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800cfa4:	4013      	ands	r3, r2
 800cfa6:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800cfa8:	4b64      	ldr	r3, [pc, #400]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cfaa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfac:	4b63      	ldr	r3, [pc, #396]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cfae:	2180      	movs	r1, #128	@ 0x80
 800cfb0:	0309      	lsls	r1, r1, #12
 800cfb2:	430a      	orrs	r2, r1
 800cfb4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800cfb6:	4b61      	ldr	r3, [pc, #388]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cfb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cfba:	4b60      	ldr	r3, [pc, #384]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cfbc:	4962      	ldr	r1, [pc, #392]	@ (800d148 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800cfbe:	400a      	ands	r2, r1
 800cfc0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800cfc2:	4b5e      	ldr	r3, [pc, #376]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cfc4:	68fa      	ldr	r2, [r7, #12]
 800cfc6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800cfc8:	68fa      	ldr	r2, [r7, #12]
 800cfca:	2380      	movs	r3, #128	@ 0x80
 800cfcc:	005b      	lsls	r3, r3, #1
 800cfce:	4013      	ands	r3, r2
 800cfd0:	d014      	beq.n	800cffc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800cfd2:	f7fb fb39 	bl	8008648 <HAL_GetTick>
 800cfd6:	0003      	movs	r3, r0
 800cfd8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cfda:	e009      	b.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800cfdc:	f7fb fb34 	bl	8008648 <HAL_GetTick>
 800cfe0:	0002      	movs	r2, r0
 800cfe2:	693b      	ldr	r3, [r7, #16]
 800cfe4:	1ad3      	subs	r3, r2, r3
 800cfe6:	4a59      	ldr	r2, [pc, #356]	@ (800d14c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800cfe8:	4293      	cmp	r3, r2
 800cfea:	d901      	bls.n	800cff0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800cfec:	2303      	movs	r3, #3
 800cfee:	e0a0      	b.n	800d132 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800cff0:	4b52      	ldr	r3, [pc, #328]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800cff2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800cff4:	2380      	movs	r3, #128	@ 0x80
 800cff6:	009b      	lsls	r3, r3, #2
 800cff8:	4013      	ands	r3, r2
 800cffa:	d0ef      	beq.n	800cfdc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	2220      	movs	r2, #32
 800d002:	4013      	ands	r3, r2
 800d004:	d01f      	beq.n	800d046 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d006:	687b      	ldr	r3, [r7, #4]
 800d008:	685a      	ldr	r2, [r3, #4]
 800d00a:	23c0      	movs	r3, #192	@ 0xc0
 800d00c:	029b      	lsls	r3, r3, #10
 800d00e:	401a      	ands	r2, r3
 800d010:	23c0      	movs	r3, #192	@ 0xc0
 800d012:	029b      	lsls	r3, r3, #10
 800d014:	429a      	cmp	r2, r3
 800d016:	d10c      	bne.n	800d032 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800d018:	4b48      	ldr	r3, [pc, #288]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	4a4c      	ldr	r2, [pc, #304]	@ (800d150 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800d01e:	4013      	ands	r3, r2
 800d020:	0019      	movs	r1, r3
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	685a      	ldr	r2, [r3, #4]
 800d026:	23c0      	movs	r3, #192	@ 0xc0
 800d028:	039b      	lsls	r3, r3, #14
 800d02a:	401a      	ands	r2, r3
 800d02c:	4b43      	ldr	r3, [pc, #268]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d02e:	430a      	orrs	r2, r1
 800d030:	601a      	str	r2, [r3, #0]
 800d032:	4b42      	ldr	r3, [pc, #264]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d034:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	685a      	ldr	r2, [r3, #4]
 800d03a:	23c0      	movs	r3, #192	@ 0xc0
 800d03c:	029b      	lsls	r3, r3, #10
 800d03e:	401a      	ands	r2, r3
 800d040:	4b3e      	ldr	r3, [pc, #248]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d042:	430a      	orrs	r2, r1
 800d044:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800d046:	2317      	movs	r3, #23
 800d048:	18fb      	adds	r3, r7, r3
 800d04a:	781b      	ldrb	r3, [r3, #0]
 800d04c:	2b01      	cmp	r3, #1
 800d04e:	d105      	bne.n	800d05c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800d050:	4b3a      	ldr	r3, [pc, #232]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d054:	4b39      	ldr	r3, [pc, #228]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d056:	493f      	ldr	r1, [pc, #252]	@ (800d154 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800d058:	400a      	ands	r2, r1
 800d05a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	2201      	movs	r2, #1
 800d062:	4013      	ands	r3, r2
 800d064:	d009      	beq.n	800d07a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800d066:	4b35      	ldr	r3, [pc, #212]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d06a:	2203      	movs	r2, #3
 800d06c:	4393      	bics	r3, r2
 800d06e:	0019      	movs	r1, r3
 800d070:	687b      	ldr	r3, [r7, #4]
 800d072:	689a      	ldr	r2, [r3, #8]
 800d074:	4b31      	ldr	r3, [pc, #196]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d076:	430a      	orrs	r2, r1
 800d078:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800d07a:	687b      	ldr	r3, [r7, #4]
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	2202      	movs	r2, #2
 800d080:	4013      	ands	r3, r2
 800d082:	d009      	beq.n	800d098 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800d084:	4b2d      	ldr	r3, [pc, #180]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d086:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d088:	220c      	movs	r2, #12
 800d08a:	4393      	bics	r3, r2
 800d08c:	0019      	movs	r1, r3
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	68da      	ldr	r2, [r3, #12]
 800d092:	4b2a      	ldr	r3, [pc, #168]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d094:	430a      	orrs	r2, r1
 800d096:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d098:	687b      	ldr	r3, [r7, #4]
 800d09a:	681b      	ldr	r3, [r3, #0]
 800d09c:	2204      	movs	r2, #4
 800d09e:	4013      	ands	r3, r2
 800d0a0:	d009      	beq.n	800d0b6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d0a2:	4b26      	ldr	r3, [pc, #152]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0a6:	4a2c      	ldr	r2, [pc, #176]	@ (800d158 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800d0a8:	4013      	ands	r3, r2
 800d0aa:	0019      	movs	r1, r3
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	691a      	ldr	r2, [r3, #16]
 800d0b0:	4b22      	ldr	r3, [pc, #136]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0b2:	430a      	orrs	r2, r1
 800d0b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	2208      	movs	r2, #8
 800d0bc:	4013      	ands	r3, r2
 800d0be:	d009      	beq.n	800d0d4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800d0c0:	4b1e      	ldr	r3, [pc, #120]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0c4:	4a25      	ldr	r2, [pc, #148]	@ (800d15c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800d0c6:	4013      	ands	r3, r2
 800d0c8:	0019      	movs	r1, r3
 800d0ca:	687b      	ldr	r3, [r7, #4]
 800d0cc:	695a      	ldr	r2, [r3, #20]
 800d0ce:	4b1b      	ldr	r3, [pc, #108]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681a      	ldr	r2, [r3, #0]
 800d0d8:	2380      	movs	r3, #128	@ 0x80
 800d0da:	005b      	lsls	r3, r3, #1
 800d0dc:	4013      	ands	r3, r2
 800d0de:	d009      	beq.n	800d0f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800d0e0:	4b16      	ldr	r3, [pc, #88]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d0e4:	4a17      	ldr	r2, [pc, #92]	@ (800d144 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800d0e6:	4013      	ands	r3, r2
 800d0e8:	0019      	movs	r1, r3
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	699a      	ldr	r2, [r3, #24]
 800d0ee:	4b13      	ldr	r3, [pc, #76]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d0f0:	430a      	orrs	r2, r1
 800d0f2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800d0f4:	687b      	ldr	r3, [r7, #4]
 800d0f6:	681b      	ldr	r3, [r3, #0]
 800d0f8:	2240      	movs	r2, #64	@ 0x40
 800d0fa:	4013      	ands	r3, r2
 800d0fc:	d009      	beq.n	800d112 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800d0fe:	4b0f      	ldr	r3, [pc, #60]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d100:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d102:	4a17      	ldr	r2, [pc, #92]	@ (800d160 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800d104:	4013      	ands	r3, r2
 800d106:	0019      	movs	r1, r3
 800d108:	687b      	ldr	r3, [r7, #4]
 800d10a:	6a1a      	ldr	r2, [r3, #32]
 800d10c:	4b0b      	ldr	r3, [pc, #44]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d10e:	430a      	orrs	r2, r1
 800d110:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	2280      	movs	r2, #128	@ 0x80
 800d118:	4013      	ands	r3, r2
 800d11a:	d009      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800d11c:	4b07      	ldr	r3, [pc, #28]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d11e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d120:	4a10      	ldr	r2, [pc, #64]	@ (800d164 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800d122:	4013      	ands	r3, r2
 800d124:	0019      	movs	r1, r3
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	69da      	ldr	r2, [r3, #28]
 800d12a:	4b04      	ldr	r3, [pc, #16]	@ (800d13c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800d12c:	430a      	orrs	r2, r1
 800d12e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800d130:	2300      	movs	r3, #0
}
 800d132:	0018      	movs	r0, r3
 800d134:	46bd      	mov	sp, r7
 800d136:	b006      	add	sp, #24
 800d138:	bd80      	pop	{r7, pc}
 800d13a:	46c0      	nop			@ (mov r8, r8)
 800d13c:	40021000 	.word	0x40021000
 800d140:	40007000 	.word	0x40007000
 800d144:	fffcffff 	.word	0xfffcffff
 800d148:	fff7ffff 	.word	0xfff7ffff
 800d14c:	00001388 	.word	0x00001388
 800d150:	ffcfffff 	.word	0xffcfffff
 800d154:	efffffff 	.word	0xefffffff
 800d158:	fffff3ff 	.word	0xfffff3ff
 800d15c:	ffffcfff 	.word	0xffffcfff
 800d160:	fbffffff 	.word	0xfbffffff
 800d164:	fff3ffff 	.word	0xfff3ffff

0800d168 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800d168:	b580      	push	{r7, lr}
 800d16a:	b082      	sub	sp, #8
 800d16c:	af00      	add	r7, sp, #0
 800d16e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	2b00      	cmp	r3, #0
 800d174:	d101      	bne.n	800d17a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800d176:	2301      	movs	r3, #1
 800d178:	e032      	b.n	800d1e0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	2239      	movs	r2, #57	@ 0x39
 800d17e:	5c9b      	ldrb	r3, [r3, r2]
 800d180:	b2db      	uxtb	r3, r3
 800d182:	2b00      	cmp	r3, #0
 800d184:	d107      	bne.n	800d196 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d186:	687b      	ldr	r3, [r7, #4]
 800d188:	2238      	movs	r2, #56	@ 0x38
 800d18a:	2100      	movs	r1, #0
 800d18c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800d18e:	687b      	ldr	r3, [r7, #4]
 800d190:	0018      	movs	r0, r3
 800d192:	f7fa fbdf 	bl	8007954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	2239      	movs	r2, #57	@ 0x39
 800d19a:	2102      	movs	r1, #2
 800d19c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681a      	ldr	r2, [r3, #0]
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	3304      	adds	r3, #4
 800d1a6:	0019      	movs	r1, r3
 800d1a8:	0010      	movs	r0, r2
 800d1aa:	f000 f975 	bl	800d498 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d1ae:	687b      	ldr	r3, [r7, #4]
 800d1b0:	223e      	movs	r2, #62	@ 0x3e
 800d1b2:	2101      	movs	r1, #1
 800d1b4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	223a      	movs	r2, #58	@ 0x3a
 800d1ba:	2101      	movs	r1, #1
 800d1bc:	5499      	strb	r1, [r3, r2]
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	223b      	movs	r2, #59	@ 0x3b
 800d1c2:	2101      	movs	r1, #1
 800d1c4:	5499      	strb	r1, [r3, r2]
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	223c      	movs	r2, #60	@ 0x3c
 800d1ca:	2101      	movs	r1, #1
 800d1cc:	5499      	strb	r1, [r3, r2]
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	223d      	movs	r2, #61	@ 0x3d
 800d1d2:	2101      	movs	r1, #1
 800d1d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	2239      	movs	r2, #57	@ 0x39
 800d1da:	2101      	movs	r1, #1
 800d1dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d1de:	2300      	movs	r3, #0
}
 800d1e0:	0018      	movs	r0, r3
 800d1e2:	46bd      	mov	sp, r7
 800d1e4:	b002      	add	sp, #8
 800d1e6:	bd80      	pop	{r7, pc}

0800d1e8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800d1e8:	b580      	push	{r7, lr}
 800d1ea:	b084      	sub	sp, #16
 800d1ec:	af00      	add	r7, sp, #0
 800d1ee:	6078      	str	r0, [r7, #4]
 800d1f0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	d108      	bne.n	800d20a <HAL_TIM_PWM_Start+0x22>
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	223a      	movs	r2, #58	@ 0x3a
 800d1fc:	5c9b      	ldrb	r3, [r3, r2]
 800d1fe:	b2db      	uxtb	r3, r3
 800d200:	3b01      	subs	r3, #1
 800d202:	1e5a      	subs	r2, r3, #1
 800d204:	4193      	sbcs	r3, r2
 800d206:	b2db      	uxtb	r3, r3
 800d208:	e01f      	b.n	800d24a <HAL_TIM_PWM_Start+0x62>
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	2b04      	cmp	r3, #4
 800d20e:	d108      	bne.n	800d222 <HAL_TIM_PWM_Start+0x3a>
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	223b      	movs	r2, #59	@ 0x3b
 800d214:	5c9b      	ldrb	r3, [r3, r2]
 800d216:	b2db      	uxtb	r3, r3
 800d218:	3b01      	subs	r3, #1
 800d21a:	1e5a      	subs	r2, r3, #1
 800d21c:	4193      	sbcs	r3, r2
 800d21e:	b2db      	uxtb	r3, r3
 800d220:	e013      	b.n	800d24a <HAL_TIM_PWM_Start+0x62>
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	2b08      	cmp	r3, #8
 800d226:	d108      	bne.n	800d23a <HAL_TIM_PWM_Start+0x52>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	223c      	movs	r2, #60	@ 0x3c
 800d22c:	5c9b      	ldrb	r3, [r3, r2]
 800d22e:	b2db      	uxtb	r3, r3
 800d230:	3b01      	subs	r3, #1
 800d232:	1e5a      	subs	r2, r3, #1
 800d234:	4193      	sbcs	r3, r2
 800d236:	b2db      	uxtb	r3, r3
 800d238:	e007      	b.n	800d24a <HAL_TIM_PWM_Start+0x62>
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	223d      	movs	r2, #61	@ 0x3d
 800d23e:	5c9b      	ldrb	r3, [r3, r2]
 800d240:	b2db      	uxtb	r3, r3
 800d242:	3b01      	subs	r3, #1
 800d244:	1e5a      	subs	r2, r3, #1
 800d246:	4193      	sbcs	r3, r2
 800d248:	b2db      	uxtb	r3, r3
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d001      	beq.n	800d252 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	e052      	b.n	800d2f8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800d252:	683b      	ldr	r3, [r7, #0]
 800d254:	2b00      	cmp	r3, #0
 800d256:	d104      	bne.n	800d262 <HAL_TIM_PWM_Start+0x7a>
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	223a      	movs	r2, #58	@ 0x3a
 800d25c:	2102      	movs	r1, #2
 800d25e:	5499      	strb	r1, [r3, r2]
 800d260:	e013      	b.n	800d28a <HAL_TIM_PWM_Start+0xa2>
 800d262:	683b      	ldr	r3, [r7, #0]
 800d264:	2b04      	cmp	r3, #4
 800d266:	d104      	bne.n	800d272 <HAL_TIM_PWM_Start+0x8a>
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	223b      	movs	r2, #59	@ 0x3b
 800d26c:	2102      	movs	r1, #2
 800d26e:	5499      	strb	r1, [r3, r2]
 800d270:	e00b      	b.n	800d28a <HAL_TIM_PWM_Start+0xa2>
 800d272:	683b      	ldr	r3, [r7, #0]
 800d274:	2b08      	cmp	r3, #8
 800d276:	d104      	bne.n	800d282 <HAL_TIM_PWM_Start+0x9a>
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	223c      	movs	r2, #60	@ 0x3c
 800d27c:	2102      	movs	r1, #2
 800d27e:	5499      	strb	r1, [r3, r2]
 800d280:	e003      	b.n	800d28a <HAL_TIM_PWM_Start+0xa2>
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	223d      	movs	r2, #61	@ 0x3d
 800d286:	2102      	movs	r1, #2
 800d288:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6839      	ldr	r1, [r7, #0]
 800d290:	2201      	movs	r2, #1
 800d292:	0018      	movs	r0, r3
 800d294:	f000 fa62 	bl	800d75c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	681a      	ldr	r2, [r3, #0]
 800d29c:	2380      	movs	r3, #128	@ 0x80
 800d29e:	05db      	lsls	r3, r3, #23
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d00e      	beq.n	800d2c2 <HAL_TIM_PWM_Start+0xda>
 800d2a4:	687b      	ldr	r3, [r7, #4]
 800d2a6:	681b      	ldr	r3, [r3, #0]
 800d2a8:	4a15      	ldr	r2, [pc, #84]	@ (800d300 <HAL_TIM_PWM_Start+0x118>)
 800d2aa:	4293      	cmp	r3, r2
 800d2ac:	d009      	beq.n	800d2c2 <HAL_TIM_PWM_Start+0xda>
 800d2ae:	687b      	ldr	r3, [r7, #4]
 800d2b0:	681b      	ldr	r3, [r3, #0]
 800d2b2:	4a14      	ldr	r2, [pc, #80]	@ (800d304 <HAL_TIM_PWM_Start+0x11c>)
 800d2b4:	4293      	cmp	r3, r2
 800d2b6:	d004      	beq.n	800d2c2 <HAL_TIM_PWM_Start+0xda>
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	4a12      	ldr	r2, [pc, #72]	@ (800d308 <HAL_TIM_PWM_Start+0x120>)
 800d2be:	4293      	cmp	r3, r2
 800d2c0:	d111      	bne.n	800d2e6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	689b      	ldr	r3, [r3, #8]
 800d2c8:	2207      	movs	r2, #7
 800d2ca:	4013      	ands	r3, r2
 800d2cc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2ce:	68fb      	ldr	r3, [r7, #12]
 800d2d0:	2b06      	cmp	r3, #6
 800d2d2:	d010      	beq.n	800d2f6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	681a      	ldr	r2, [r3, #0]
 800d2da:	687b      	ldr	r3, [r7, #4]
 800d2dc:	681b      	ldr	r3, [r3, #0]
 800d2de:	2101      	movs	r1, #1
 800d2e0:	430a      	orrs	r2, r1
 800d2e2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d2e4:	e007      	b.n	800d2f6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	681a      	ldr	r2, [r3, #0]
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	2101      	movs	r1, #1
 800d2f2:	430a      	orrs	r2, r1
 800d2f4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d2f6:	2300      	movs	r3, #0
}
 800d2f8:	0018      	movs	r0, r3
 800d2fa:	46bd      	mov	sp, r7
 800d2fc:	b004      	add	sp, #16
 800d2fe:	bd80      	pop	{r7, pc}
 800d300:	40000400 	.word	0x40000400
 800d304:	40010800 	.word	0x40010800
 800d308:	40011400 	.word	0x40011400

0800d30c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b086      	sub	sp, #24
 800d310:	af00      	add	r7, sp, #0
 800d312:	60f8      	str	r0, [r7, #12]
 800d314:	60b9      	str	r1, [r7, #8]
 800d316:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d318:	2317      	movs	r3, #23
 800d31a:	18fb      	adds	r3, r7, r3
 800d31c:	2200      	movs	r2, #0
 800d31e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2238      	movs	r2, #56	@ 0x38
 800d324:	5c9b      	ldrb	r3, [r3, r2]
 800d326:	2b01      	cmp	r3, #1
 800d328:	d101      	bne.n	800d32e <HAL_TIM_PWM_ConfigChannel+0x22>
 800d32a:	2302      	movs	r3, #2
 800d32c:	e0ad      	b.n	800d48a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800d32e:	68fb      	ldr	r3, [r7, #12]
 800d330:	2238      	movs	r2, #56	@ 0x38
 800d332:	2101      	movs	r1, #1
 800d334:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	2b0c      	cmp	r3, #12
 800d33a:	d100      	bne.n	800d33e <HAL_TIM_PWM_ConfigChannel+0x32>
 800d33c:	e076      	b.n	800d42c <HAL_TIM_PWM_ConfigChannel+0x120>
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	2b0c      	cmp	r3, #12
 800d342:	d900      	bls.n	800d346 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800d344:	e095      	b.n	800d472 <HAL_TIM_PWM_ConfigChannel+0x166>
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	2b08      	cmp	r3, #8
 800d34a:	d04e      	beq.n	800d3ea <HAL_TIM_PWM_ConfigChannel+0xde>
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	2b08      	cmp	r3, #8
 800d350:	d900      	bls.n	800d354 <HAL_TIM_PWM_ConfigChannel+0x48>
 800d352:	e08e      	b.n	800d472 <HAL_TIM_PWM_ConfigChannel+0x166>
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d003      	beq.n	800d362 <HAL_TIM_PWM_ConfigChannel+0x56>
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2b04      	cmp	r3, #4
 800d35e:	d021      	beq.n	800d3a4 <HAL_TIM_PWM_ConfigChannel+0x98>
 800d360:	e087      	b.n	800d472 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d362:	68fb      	ldr	r3, [r7, #12]
 800d364:	681b      	ldr	r3, [r3, #0]
 800d366:	68ba      	ldr	r2, [r7, #8]
 800d368:	0011      	movs	r1, r2
 800d36a:	0018      	movs	r0, r3
 800d36c:	f000 f8f2 	bl	800d554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d370:	68fb      	ldr	r3, [r7, #12]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	699a      	ldr	r2, [r3, #24]
 800d376:	68fb      	ldr	r3, [r7, #12]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	2108      	movs	r1, #8
 800d37c:	430a      	orrs	r2, r1
 800d37e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d380:	68fb      	ldr	r3, [r7, #12]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	699a      	ldr	r2, [r3, #24]
 800d386:	68fb      	ldr	r3, [r7, #12]
 800d388:	681b      	ldr	r3, [r3, #0]
 800d38a:	2104      	movs	r1, #4
 800d38c:	438a      	bics	r2, r1
 800d38e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d390:	68fb      	ldr	r3, [r7, #12]
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	6999      	ldr	r1, [r3, #24]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	68da      	ldr	r2, [r3, #12]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	430a      	orrs	r2, r1
 800d3a0:	619a      	str	r2, [r3, #24]
      break;
 800d3a2:	e06b      	b.n	800d47c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d3a4:	68fb      	ldr	r3, [r7, #12]
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	0011      	movs	r1, r2
 800d3ac:	0018      	movs	r0, r3
 800d3ae:	f000 f90d 	bl	800d5cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	681b      	ldr	r3, [r3, #0]
 800d3b6:	699a      	ldr	r2, [r3, #24]
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	2180      	movs	r1, #128	@ 0x80
 800d3be:	0109      	lsls	r1, r1, #4
 800d3c0:	430a      	orrs	r2, r1
 800d3c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	699a      	ldr	r2, [r3, #24]
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	4931      	ldr	r1, [pc, #196]	@ (800d494 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800d3d0:	400a      	ands	r2, r1
 800d3d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	681b      	ldr	r3, [r3, #0]
 800d3d8:	6999      	ldr	r1, [r3, #24]
 800d3da:	68bb      	ldr	r3, [r7, #8]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	021a      	lsls	r2, r3, #8
 800d3e0:	68fb      	ldr	r3, [r7, #12]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	430a      	orrs	r2, r1
 800d3e6:	619a      	str	r2, [r3, #24]
      break;
 800d3e8:	e048      	b.n	800d47c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	681b      	ldr	r3, [r3, #0]
 800d3ee:	68ba      	ldr	r2, [r7, #8]
 800d3f0:	0011      	movs	r1, r2
 800d3f2:	0018      	movs	r0, r3
 800d3f4:	f000 f92c 	bl	800d650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3f8:	68fb      	ldr	r3, [r7, #12]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	69da      	ldr	r2, [r3, #28]
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	2108      	movs	r1, #8
 800d404:	430a      	orrs	r2, r1
 800d406:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	69da      	ldr	r2, [r3, #28]
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	2104      	movs	r1, #4
 800d414:	438a      	bics	r2, r1
 800d416:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d418:	68fb      	ldr	r3, [r7, #12]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	69d9      	ldr	r1, [r3, #28]
 800d41e:	68bb      	ldr	r3, [r7, #8]
 800d420:	68da      	ldr	r2, [r3, #12]
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	681b      	ldr	r3, [r3, #0]
 800d426:	430a      	orrs	r2, r1
 800d428:	61da      	str	r2, [r3, #28]
      break;
 800d42a:	e027      	b.n	800d47c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	681b      	ldr	r3, [r3, #0]
 800d430:	68ba      	ldr	r2, [r7, #8]
 800d432:	0011      	movs	r1, r2
 800d434:	0018      	movs	r0, r3
 800d436:	f000 f94b 	bl	800d6d0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	681b      	ldr	r3, [r3, #0]
 800d43e:	69da      	ldr	r2, [r3, #28]
 800d440:	68fb      	ldr	r3, [r7, #12]
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	2180      	movs	r1, #128	@ 0x80
 800d446:	0109      	lsls	r1, r1, #4
 800d448:	430a      	orrs	r2, r1
 800d44a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	69da      	ldr	r2, [r3, #28]
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	681b      	ldr	r3, [r3, #0]
 800d456:	490f      	ldr	r1, [pc, #60]	@ (800d494 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800d458:	400a      	ands	r2, r1
 800d45a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	69d9      	ldr	r1, [r3, #28]
 800d462:	68bb      	ldr	r3, [r7, #8]
 800d464:	68db      	ldr	r3, [r3, #12]
 800d466:	021a      	lsls	r2, r3, #8
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	430a      	orrs	r2, r1
 800d46e:	61da      	str	r2, [r3, #28]
      break;
 800d470:	e004      	b.n	800d47c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800d472:	2317      	movs	r3, #23
 800d474:	18fb      	adds	r3, r7, r3
 800d476:	2201      	movs	r2, #1
 800d478:	701a      	strb	r2, [r3, #0]
      break;
 800d47a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	2238      	movs	r2, #56	@ 0x38
 800d480:	2100      	movs	r1, #0
 800d482:	5499      	strb	r1, [r3, r2]

  return status;
 800d484:	2317      	movs	r3, #23
 800d486:	18fb      	adds	r3, r7, r3
 800d488:	781b      	ldrb	r3, [r3, #0]
}
 800d48a:	0018      	movs	r0, r3
 800d48c:	46bd      	mov	sp, r7
 800d48e:	b006      	add	sp, #24
 800d490:	bd80      	pop	{r7, pc}
 800d492:	46c0      	nop			@ (mov r8, r8)
 800d494:	fffffbff 	.word	0xfffffbff

0800d498 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d498:	b580      	push	{r7, lr}
 800d49a:	b084      	sub	sp, #16
 800d49c:	af00      	add	r7, sp, #0
 800d49e:	6078      	str	r0, [r7, #4]
 800d4a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d4a8:	687a      	ldr	r2, [r7, #4]
 800d4aa:	2380      	movs	r3, #128	@ 0x80
 800d4ac:	05db      	lsls	r3, r3, #23
 800d4ae:	429a      	cmp	r2, r3
 800d4b0:	d00b      	beq.n	800d4ca <TIM_Base_SetConfig+0x32>
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	4a23      	ldr	r2, [pc, #140]	@ (800d544 <TIM_Base_SetConfig+0xac>)
 800d4b6:	4293      	cmp	r3, r2
 800d4b8:	d007      	beq.n	800d4ca <TIM_Base_SetConfig+0x32>
 800d4ba:	687b      	ldr	r3, [r7, #4]
 800d4bc:	4a22      	ldr	r2, [pc, #136]	@ (800d548 <TIM_Base_SetConfig+0xb0>)
 800d4be:	4293      	cmp	r3, r2
 800d4c0:	d003      	beq.n	800d4ca <TIM_Base_SetConfig+0x32>
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	4a21      	ldr	r2, [pc, #132]	@ (800d54c <TIM_Base_SetConfig+0xb4>)
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	d108      	bne.n	800d4dc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2270      	movs	r2, #112	@ 0x70
 800d4ce:	4393      	bics	r3, r2
 800d4d0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	685b      	ldr	r3, [r3, #4]
 800d4d6:	68fa      	ldr	r2, [r7, #12]
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d4dc:	687a      	ldr	r2, [r7, #4]
 800d4de:	2380      	movs	r3, #128	@ 0x80
 800d4e0:	05db      	lsls	r3, r3, #23
 800d4e2:	429a      	cmp	r2, r3
 800d4e4:	d00b      	beq.n	800d4fe <TIM_Base_SetConfig+0x66>
 800d4e6:	687b      	ldr	r3, [r7, #4]
 800d4e8:	4a16      	ldr	r2, [pc, #88]	@ (800d544 <TIM_Base_SetConfig+0xac>)
 800d4ea:	4293      	cmp	r3, r2
 800d4ec:	d007      	beq.n	800d4fe <TIM_Base_SetConfig+0x66>
 800d4ee:	687b      	ldr	r3, [r7, #4]
 800d4f0:	4a15      	ldr	r2, [pc, #84]	@ (800d548 <TIM_Base_SetConfig+0xb0>)
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	d003      	beq.n	800d4fe <TIM_Base_SetConfig+0x66>
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	4a14      	ldr	r2, [pc, #80]	@ (800d54c <TIM_Base_SetConfig+0xb4>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	d108      	bne.n	800d510 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	4a13      	ldr	r2, [pc, #76]	@ (800d550 <TIM_Base_SetConfig+0xb8>)
 800d502:	4013      	ands	r3, r2
 800d504:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d506:	683b      	ldr	r3, [r7, #0]
 800d508:	68db      	ldr	r3, [r3, #12]
 800d50a:	68fa      	ldr	r2, [r7, #12]
 800d50c:	4313      	orrs	r3, r2
 800d50e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d510:	68fb      	ldr	r3, [r7, #12]
 800d512:	2280      	movs	r2, #128	@ 0x80
 800d514:	4393      	bics	r3, r2
 800d516:	001a      	movs	r2, r3
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	691b      	ldr	r3, [r3, #16]
 800d51c:	4313      	orrs	r3, r2
 800d51e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	68fa      	ldr	r2, [r7, #12]
 800d524:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	689a      	ldr	r2, [r3, #8]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d52e:	683b      	ldr	r3, [r7, #0]
 800d530:	681a      	ldr	r2, [r3, #0]
 800d532:	687b      	ldr	r3, [r7, #4]
 800d534:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	2201      	movs	r2, #1
 800d53a:	615a      	str	r2, [r3, #20]
}
 800d53c:	46c0      	nop			@ (mov r8, r8)
 800d53e:	46bd      	mov	sp, r7
 800d540:	b004      	add	sp, #16
 800d542:	bd80      	pop	{r7, pc}
 800d544:	40000400 	.word	0x40000400
 800d548:	40010800 	.word	0x40010800
 800d54c:	40011400 	.word	0x40011400
 800d550:	fffffcff 	.word	0xfffffcff

0800d554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b086      	sub	sp, #24
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a1b      	ldr	r3, [r3, #32]
 800d562:	2201      	movs	r2, #1
 800d564:	4393      	bics	r3, r2
 800d566:	001a      	movs	r2, r3
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	6a1b      	ldr	r3, [r3, #32]
 800d570:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d572:	687b      	ldr	r3, [r7, #4]
 800d574:	685b      	ldr	r3, [r3, #4]
 800d576:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	699b      	ldr	r3, [r3, #24]
 800d57c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d57e:	68fb      	ldr	r3, [r7, #12]
 800d580:	2270      	movs	r2, #112	@ 0x70
 800d582:	4393      	bics	r3, r2
 800d584:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2203      	movs	r2, #3
 800d58a:	4393      	bics	r3, r2
 800d58c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d58e:	683b      	ldr	r3, [r7, #0]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	68fa      	ldr	r2, [r7, #12]
 800d594:	4313      	orrs	r3, r2
 800d596:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d598:	697b      	ldr	r3, [r7, #20]
 800d59a:	2202      	movs	r2, #2
 800d59c:	4393      	bics	r3, r2
 800d59e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d5a0:	683b      	ldr	r3, [r7, #0]
 800d5a2:	689b      	ldr	r3, [r3, #8]
 800d5a4:	697a      	ldr	r2, [r7, #20]
 800d5a6:	4313      	orrs	r3, r2
 800d5a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	693a      	ldr	r2, [r7, #16]
 800d5ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	68fa      	ldr	r2, [r7, #12]
 800d5b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	685a      	ldr	r2, [r3, #4]
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	697a      	ldr	r2, [r7, #20]
 800d5c2:	621a      	str	r2, [r3, #32]
}
 800d5c4:	46c0      	nop			@ (mov r8, r8)
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	b006      	add	sp, #24
 800d5ca:	bd80      	pop	{r7, pc}

0800d5cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b086      	sub	sp, #24
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a1b      	ldr	r3, [r3, #32]
 800d5da:	2210      	movs	r2, #16
 800d5dc:	4393      	bics	r3, r2
 800d5de:	001a      	movs	r2, r3
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d5e4:	687b      	ldr	r3, [r7, #4]
 800d5e6:	6a1b      	ldr	r3, [r3, #32]
 800d5e8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	685b      	ldr	r3, [r3, #4]
 800d5ee:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	699b      	ldr	r3, [r3, #24]
 800d5f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
 800d5f8:	4a13      	ldr	r2, [pc, #76]	@ (800d648 <TIM_OC2_SetConfig+0x7c>)
 800d5fa:	4013      	ands	r3, r2
 800d5fc:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d5fe:	68fb      	ldr	r3, [r7, #12]
 800d600:	4a12      	ldr	r2, [pc, #72]	@ (800d64c <TIM_OC2_SetConfig+0x80>)
 800d602:	4013      	ands	r3, r2
 800d604:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d606:	683b      	ldr	r3, [r7, #0]
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	021b      	lsls	r3, r3, #8
 800d60c:	68fa      	ldr	r2, [r7, #12]
 800d60e:	4313      	orrs	r3, r2
 800d610:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d612:	697b      	ldr	r3, [r7, #20]
 800d614:	2220      	movs	r2, #32
 800d616:	4393      	bics	r3, r2
 800d618:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d61a:	683b      	ldr	r3, [r7, #0]
 800d61c:	689b      	ldr	r3, [r3, #8]
 800d61e:	011b      	lsls	r3, r3, #4
 800d620:	697a      	ldr	r2, [r7, #20]
 800d622:	4313      	orrs	r3, r2
 800d624:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	693a      	ldr	r2, [r7, #16]
 800d62a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	68fa      	ldr	r2, [r7, #12]
 800d630:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d632:	683b      	ldr	r3, [r7, #0]
 800d634:	685a      	ldr	r2, [r3, #4]
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	697a      	ldr	r2, [r7, #20]
 800d63e:	621a      	str	r2, [r3, #32]
}
 800d640:	46c0      	nop			@ (mov r8, r8)
 800d642:	46bd      	mov	sp, r7
 800d644:	b006      	add	sp, #24
 800d646:	bd80      	pop	{r7, pc}
 800d648:	ffff8fff 	.word	0xffff8fff
 800d64c:	fffffcff 	.word	0xfffffcff

0800d650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b086      	sub	sp, #24
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	6a1b      	ldr	r3, [r3, #32]
 800d65e:	4a1a      	ldr	r2, [pc, #104]	@ (800d6c8 <TIM_OC3_SetConfig+0x78>)
 800d660:	401a      	ands	r2, r3
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6a1b      	ldr	r3, [r3, #32]
 800d66a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	685b      	ldr	r3, [r3, #4]
 800d670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	69db      	ldr	r3, [r3, #28]
 800d676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d678:	68fb      	ldr	r3, [r7, #12]
 800d67a:	2270      	movs	r2, #112	@ 0x70
 800d67c:	4393      	bics	r3, r2
 800d67e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d680:	68fb      	ldr	r3, [r7, #12]
 800d682:	2203      	movs	r2, #3
 800d684:	4393      	bics	r3, r2
 800d686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d688:	683b      	ldr	r3, [r7, #0]
 800d68a:	681b      	ldr	r3, [r3, #0]
 800d68c:	68fa      	ldr	r2, [r7, #12]
 800d68e:	4313      	orrs	r3, r2
 800d690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d692:	697b      	ldr	r3, [r7, #20]
 800d694:	4a0d      	ldr	r2, [pc, #52]	@ (800d6cc <TIM_OC3_SetConfig+0x7c>)
 800d696:	4013      	ands	r3, r2
 800d698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d69a:	683b      	ldr	r3, [r7, #0]
 800d69c:	689b      	ldr	r3, [r3, #8]
 800d69e:	021b      	lsls	r3, r3, #8
 800d6a0:	697a      	ldr	r2, [r7, #20]
 800d6a2:	4313      	orrs	r3, r2
 800d6a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	693a      	ldr	r2, [r7, #16]
 800d6aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d6ac:	687b      	ldr	r3, [r7, #4]
 800d6ae:	68fa      	ldr	r2, [r7, #12]
 800d6b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	685a      	ldr	r2, [r3, #4]
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	697a      	ldr	r2, [r7, #20]
 800d6be:	621a      	str	r2, [r3, #32]
}
 800d6c0:	46c0      	nop			@ (mov r8, r8)
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	b006      	add	sp, #24
 800d6c6:	bd80      	pop	{r7, pc}
 800d6c8:	fffffeff 	.word	0xfffffeff
 800d6cc:	fffffdff 	.word	0xfffffdff

0800d6d0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b086      	sub	sp, #24
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
 800d6d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800d6da:	687b      	ldr	r3, [r7, #4]
 800d6dc:	6a1b      	ldr	r3, [r3, #32]
 800d6de:	4a1b      	ldr	r2, [pc, #108]	@ (800d74c <TIM_OC4_SetConfig+0x7c>)
 800d6e0:	401a      	ands	r2, r3
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d6e6:	687b      	ldr	r3, [r7, #4]
 800d6e8:	6a1b      	ldr	r3, [r3, #32]
 800d6ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	685b      	ldr	r3, [r3, #4]
 800d6f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d6f2:	687b      	ldr	r3, [r7, #4]
 800d6f4:	69db      	ldr	r3, [r3, #28]
 800d6f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	4a15      	ldr	r2, [pc, #84]	@ (800d750 <TIM_OC4_SetConfig+0x80>)
 800d6fc:	4013      	ands	r3, r2
 800d6fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800d700:	68fb      	ldr	r3, [r7, #12]
 800d702:	4a14      	ldr	r2, [pc, #80]	@ (800d754 <TIM_OC4_SetConfig+0x84>)
 800d704:	4013      	ands	r3, r2
 800d706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d708:	683b      	ldr	r3, [r7, #0]
 800d70a:	681b      	ldr	r3, [r3, #0]
 800d70c:	021b      	lsls	r3, r3, #8
 800d70e:	68fa      	ldr	r2, [r7, #12]
 800d710:	4313      	orrs	r3, r2
 800d712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800d714:	697b      	ldr	r3, [r7, #20]
 800d716:	4a10      	ldr	r2, [pc, #64]	@ (800d758 <TIM_OC4_SetConfig+0x88>)
 800d718:	4013      	ands	r3, r2
 800d71a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800d71c:	683b      	ldr	r3, [r7, #0]
 800d71e:	689b      	ldr	r3, [r3, #8]
 800d720:	031b      	lsls	r3, r3, #12
 800d722:	697a      	ldr	r2, [r7, #20]
 800d724:	4313      	orrs	r3, r2
 800d726:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	693a      	ldr	r2, [r7, #16]
 800d72c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	68fa      	ldr	r2, [r7, #12]
 800d732:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800d734:	683b      	ldr	r3, [r7, #0]
 800d736:	685a      	ldr	r2, [r3, #4]
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	697a      	ldr	r2, [r7, #20]
 800d740:	621a      	str	r2, [r3, #32]
}
 800d742:	46c0      	nop			@ (mov r8, r8)
 800d744:	46bd      	mov	sp, r7
 800d746:	b006      	add	sp, #24
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	46c0      	nop			@ (mov r8, r8)
 800d74c:	ffffefff 	.word	0xffffefff
 800d750:	ffff8fff 	.word	0xffff8fff
 800d754:	fffffcff 	.word	0xfffffcff
 800d758:	ffffdfff 	.word	0xffffdfff

0800d75c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b086      	sub	sp, #24
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800d768:	68bb      	ldr	r3, [r7, #8]
 800d76a:	221f      	movs	r2, #31
 800d76c:	4013      	ands	r3, r2
 800d76e:	2201      	movs	r2, #1
 800d770:	409a      	lsls	r2, r3
 800d772:	0013      	movs	r3, r2
 800d774:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800d776:	68fb      	ldr	r3, [r7, #12]
 800d778:	6a1b      	ldr	r3, [r3, #32]
 800d77a:	697a      	ldr	r2, [r7, #20]
 800d77c:	43d2      	mvns	r2, r2
 800d77e:	401a      	ands	r2, r3
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800d784:	68fb      	ldr	r3, [r7, #12]
 800d786:	6a1a      	ldr	r2, [r3, #32]
 800d788:	68bb      	ldr	r3, [r7, #8]
 800d78a:	211f      	movs	r1, #31
 800d78c:	400b      	ands	r3, r1
 800d78e:	6879      	ldr	r1, [r7, #4]
 800d790:	4099      	lsls	r1, r3
 800d792:	000b      	movs	r3, r1
 800d794:	431a      	orrs	r2, r3
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	621a      	str	r2, [r3, #32]
}
 800d79a:	46c0      	nop			@ (mov r8, r8)
 800d79c:	46bd      	mov	sp, r7
 800d79e:	b006      	add	sp, #24
 800d7a0:	bd80      	pop	{r7, pc}
	...

0800d7a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	b084      	sub	sp, #16
 800d7a8:	af00      	add	r7, sp, #0
 800d7aa:	6078      	str	r0, [r7, #4]
 800d7ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	2238      	movs	r2, #56	@ 0x38
 800d7b2:	5c9b      	ldrb	r3, [r3, r2]
 800d7b4:	2b01      	cmp	r3, #1
 800d7b6:	d101      	bne.n	800d7bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800d7b8:	2302      	movs	r3, #2
 800d7ba:	e047      	b.n	800d84c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800d7bc:	687b      	ldr	r3, [r7, #4]
 800d7be:	2238      	movs	r2, #56	@ 0x38
 800d7c0:	2101      	movs	r1, #1
 800d7c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	2239      	movs	r2, #57	@ 0x39
 800d7c8:	2102      	movs	r1, #2
 800d7ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	685b      	ldr	r3, [r3, #4]
 800d7d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800d7d4:	687b      	ldr	r3, [r7, #4]
 800d7d6:	681b      	ldr	r3, [r3, #0]
 800d7d8:	689b      	ldr	r3, [r3, #8]
 800d7da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	2270      	movs	r2, #112	@ 0x70
 800d7e0:	4393      	bics	r3, r2
 800d7e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800d7e4:	683b      	ldr	r3, [r7, #0]
 800d7e6:	681b      	ldr	r3, [r3, #0]
 800d7e8:	68fa      	ldr	r2, [r7, #12]
 800d7ea:	4313      	orrs	r3, r2
 800d7ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	681a      	ldr	r2, [r3, #0]
 800d7fa:	2380      	movs	r3, #128	@ 0x80
 800d7fc:	05db      	lsls	r3, r3, #23
 800d7fe:	429a      	cmp	r2, r3
 800d800:	d00e      	beq.n	800d820 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	4a13      	ldr	r2, [pc, #76]	@ (800d854 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800d808:	4293      	cmp	r3, r2
 800d80a:	d009      	beq.n	800d820 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	4a11      	ldr	r2, [pc, #68]	@ (800d858 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800d812:	4293      	cmp	r3, r2
 800d814:	d004      	beq.n	800d820 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	681b      	ldr	r3, [r3, #0]
 800d81a:	4a10      	ldr	r2, [pc, #64]	@ (800d85c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800d81c:	4293      	cmp	r3, r2
 800d81e:	d10c      	bne.n	800d83a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800d820:	68bb      	ldr	r3, [r7, #8]
 800d822:	2280      	movs	r2, #128	@ 0x80
 800d824:	4393      	bics	r3, r2
 800d826:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800d828:	683b      	ldr	r3, [r7, #0]
 800d82a:	685b      	ldr	r3, [r3, #4]
 800d82c:	68ba      	ldr	r2, [r7, #8]
 800d82e:	4313      	orrs	r3, r2
 800d830:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	68ba      	ldr	r2, [r7, #8]
 800d838:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	2239      	movs	r2, #57	@ 0x39
 800d83e:	2101      	movs	r1, #1
 800d840:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2238      	movs	r2, #56	@ 0x38
 800d846:	2100      	movs	r1, #0
 800d848:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d84a:	2300      	movs	r3, #0
}
 800d84c:	0018      	movs	r0, r3
 800d84e:	46bd      	mov	sp, r7
 800d850:	b004      	add	sp, #16
 800d852:	bd80      	pop	{r7, pc}
 800d854:	40000400 	.word	0x40000400
 800d858:	40010800 	.word	0x40010800
 800d85c:	40011400 	.word	0x40011400

0800d860 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b082      	sub	sp, #8
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	2238      	movs	r2, #56	@ 0x38
 800d86e:	5c9b      	ldrb	r3, [r3, r2]
 800d870:	2b01      	cmp	r3, #1
 800d872:	d101      	bne.n	800d878 <HAL_TIMEx_RemapConfig+0x18>
 800d874:	2302      	movs	r3, #2
 800d876:	e00c      	b.n	800d892 <HAL_TIMEx_RemapConfig+0x32>
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2238      	movs	r2, #56	@ 0x38
 800d87c:	2101      	movs	r1, #1
 800d87e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	683a      	ldr	r2, [r7, #0]
 800d886:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800d888:	687b      	ldr	r3, [r7, #4]
 800d88a:	2238      	movs	r2, #56	@ 0x38
 800d88c:	2100      	movs	r1, #0
 800d88e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d890:	2300      	movs	r3, #0
}
 800d892:	0018      	movs	r0, r3
 800d894:	46bd      	mov	sp, r7
 800d896:	b002      	add	sp, #8
 800d898:	bd80      	pop	{r7, pc}
	...

0800d89c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	2b00      	cmp	r3, #0
 800d8a8:	d101      	bne.n	800d8ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800d8aa:	2301      	movs	r3, #1
 800d8ac:	e053      	b.n	800d956 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d8b2:	2b00      	cmp	r3, #0
 800d8b4:	d116      	bne.n	800d8e4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	2278      	movs	r2, #120	@ 0x78
 800d8ba:	2100      	movs	r1, #0
 800d8bc:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800d8be:	687b      	ldr	r3, [r7, #4]
 800d8c0:	0018      	movs	r0, r3
 800d8c2:	f000 fd07 	bl	800e2d4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800d8c6:	687b      	ldr	r3, [r7, #4]
 800d8c8:	22b0      	movs	r2, #176	@ 0xb0
 800d8ca:	589b      	ldr	r3, [r3, r2]
 800d8cc:	2b00      	cmp	r3, #0
 800d8ce:	d103      	bne.n	800d8d8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	21b0      	movs	r1, #176	@ 0xb0
 800d8d4:	4a22      	ldr	r2, [pc, #136]	@ (800d960 <HAL_UART_Init+0xc4>)
 800d8d6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	22b0      	movs	r2, #176	@ 0xb0
 800d8dc:	589b      	ldr	r3, [r3, r2]
 800d8de:	687a      	ldr	r2, [r7, #4]
 800d8e0:	0010      	movs	r0, r2
 800d8e2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2224      	movs	r2, #36	@ 0x24
 800d8e8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800d8ea:	687b      	ldr	r3, [r7, #4]
 800d8ec:	681b      	ldr	r3, [r3, #0]
 800d8ee:	681a      	ldr	r2, [r3, #0]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	681b      	ldr	r3, [r3, #0]
 800d8f4:	2101      	movs	r1, #1
 800d8f6:	438a      	bics	r2, r1
 800d8f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	0018      	movs	r0, r3
 800d8fe:	f000 fd2d 	bl	800e35c <UART_SetConfig>
 800d902:	0003      	movs	r3, r0
 800d904:	2b01      	cmp	r3, #1
 800d906:	d101      	bne.n	800d90c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800d908:	2301      	movs	r3, #1
 800d90a:	e024      	b.n	800d956 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d910:	2b00      	cmp	r3, #0
 800d912:	d003      	beq.n	800d91c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	0018      	movs	r0, r3
 800d918:	f000 ffbe 	bl	800e898 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	685a      	ldr	r2, [r3, #4]
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	490f      	ldr	r1, [pc, #60]	@ (800d964 <HAL_UART_Init+0xc8>)
 800d928:	400a      	ands	r2, r1
 800d92a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d92c:	687b      	ldr	r3, [r7, #4]
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	689a      	ldr	r2, [r3, #8]
 800d932:	687b      	ldr	r3, [r7, #4]
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	212a      	movs	r1, #42	@ 0x2a
 800d938:	438a      	bics	r2, r1
 800d93a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	681a      	ldr	r2, [r3, #0]
 800d942:	687b      	ldr	r3, [r7, #4]
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	2101      	movs	r1, #1
 800d948:	430a      	orrs	r2, r1
 800d94a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	0018      	movs	r0, r3
 800d950:	f001 f856 	bl	800ea00 <UART_CheckIdleState>
 800d954:	0003      	movs	r3, r0
}
 800d956:	0018      	movs	r0, r3
 800d958:	46bd      	mov	sp, r7
 800d95a:	b002      	add	sp, #8
 800d95c:	bd80      	pop	{r7, pc}
 800d95e:	46c0      	nop			@ (mov r8, r8)
 800d960:	08007b35 	.word	0x08007b35
 800d964:	ffffb7ff 	.word	0xffffb7ff

0800d968 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b08a      	sub	sp, #40	@ 0x28
 800d96c:	af02      	add	r7, sp, #8
 800d96e:	60f8      	str	r0, [r7, #12]
 800d970:	60b9      	str	r1, [r7, #8]
 800d972:	603b      	str	r3, [r7, #0]
 800d974:	1dbb      	adds	r3, r7, #6
 800d976:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d97c:	2b20      	cmp	r3, #32
 800d97e:	d000      	beq.n	800d982 <HAL_UART_Transmit+0x1a>
 800d980:	e08c      	b.n	800da9c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800d982:	68bb      	ldr	r3, [r7, #8]
 800d984:	2b00      	cmp	r3, #0
 800d986:	d003      	beq.n	800d990 <HAL_UART_Transmit+0x28>
 800d988:	1dbb      	adds	r3, r7, #6
 800d98a:	881b      	ldrh	r3, [r3, #0]
 800d98c:	2b00      	cmp	r3, #0
 800d98e:	d101      	bne.n	800d994 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800d990:	2301      	movs	r3, #1
 800d992:	e084      	b.n	800da9e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	689a      	ldr	r2, [r3, #8]
 800d998:	2380      	movs	r3, #128	@ 0x80
 800d99a:	015b      	lsls	r3, r3, #5
 800d99c:	429a      	cmp	r2, r3
 800d99e:	d109      	bne.n	800d9b4 <HAL_UART_Transmit+0x4c>
 800d9a0:	68fb      	ldr	r3, [r7, #12]
 800d9a2:	691b      	ldr	r3, [r3, #16]
 800d9a4:	2b00      	cmp	r3, #0
 800d9a6:	d105      	bne.n	800d9b4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d9a8:	68bb      	ldr	r3, [r7, #8]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	d001      	beq.n	800d9b4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800d9b0:	2301      	movs	r3, #1
 800d9b2:	e074      	b.n	800da9e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d9b4:	68fb      	ldr	r3, [r7, #12]
 800d9b6:	2284      	movs	r2, #132	@ 0x84
 800d9b8:	2100      	movs	r1, #0
 800d9ba:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	2221      	movs	r2, #33	@ 0x21
 800d9c0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800d9c2:	f7fa fe41 	bl	8008648 <HAL_GetTick>
 800d9c6:	0003      	movs	r3, r0
 800d9c8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	1dba      	adds	r2, r7, #6
 800d9ce:	2150      	movs	r1, #80	@ 0x50
 800d9d0:	8812      	ldrh	r2, [r2, #0]
 800d9d2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	1dba      	adds	r2, r7, #6
 800d9d8:	2152      	movs	r1, #82	@ 0x52
 800d9da:	8812      	ldrh	r2, [r2, #0]
 800d9dc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	689a      	ldr	r2, [r3, #8]
 800d9e2:	2380      	movs	r3, #128	@ 0x80
 800d9e4:	015b      	lsls	r3, r3, #5
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d108      	bne.n	800d9fc <HAL_UART_Transmit+0x94>
 800d9ea:	68fb      	ldr	r3, [r7, #12]
 800d9ec:	691b      	ldr	r3, [r3, #16]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d104      	bne.n	800d9fc <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800d9f6:	68bb      	ldr	r3, [r7, #8]
 800d9f8:	61bb      	str	r3, [r7, #24]
 800d9fa:	e003      	b.n	800da04 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800d9fc:	68bb      	ldr	r3, [r7, #8]
 800d9fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800da00:	2300      	movs	r3, #0
 800da02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800da04:	e02f      	b.n	800da66 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800da06:	697a      	ldr	r2, [r7, #20]
 800da08:	68f8      	ldr	r0, [r7, #12]
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	9300      	str	r3, [sp, #0]
 800da0e:	0013      	movs	r3, r2
 800da10:	2200      	movs	r2, #0
 800da12:	2180      	movs	r1, #128	@ 0x80
 800da14:	f001 f89c 	bl	800eb50 <UART_WaitOnFlagUntilTimeout>
 800da18:	1e03      	subs	r3, r0, #0
 800da1a:	d004      	beq.n	800da26 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800da1c:	68fb      	ldr	r3, [r7, #12]
 800da1e:	2220      	movs	r2, #32
 800da20:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800da22:	2303      	movs	r3, #3
 800da24:	e03b      	b.n	800da9e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800da26:	69fb      	ldr	r3, [r7, #28]
 800da28:	2b00      	cmp	r3, #0
 800da2a:	d10b      	bne.n	800da44 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800da2c:	69bb      	ldr	r3, [r7, #24]
 800da2e:	881b      	ldrh	r3, [r3, #0]
 800da30:	001a      	movs	r2, r3
 800da32:	68fb      	ldr	r3, [r7, #12]
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	05d2      	lsls	r2, r2, #23
 800da38:	0dd2      	lsrs	r2, r2, #23
 800da3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	3302      	adds	r3, #2
 800da40:	61bb      	str	r3, [r7, #24]
 800da42:	e007      	b.n	800da54 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	781a      	ldrb	r2, [r3, #0]
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800da4e:	69fb      	ldr	r3, [r7, #28]
 800da50:	3301      	adds	r3, #1
 800da52:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800da54:	68fb      	ldr	r3, [r7, #12]
 800da56:	2252      	movs	r2, #82	@ 0x52
 800da58:	5a9b      	ldrh	r3, [r3, r2]
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	3b01      	subs	r3, #1
 800da5e:	b299      	uxth	r1, r3
 800da60:	68fb      	ldr	r3, [r7, #12]
 800da62:	2252      	movs	r2, #82	@ 0x52
 800da64:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	2252      	movs	r2, #82	@ 0x52
 800da6a:	5a9b      	ldrh	r3, [r3, r2]
 800da6c:	b29b      	uxth	r3, r3
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1c9      	bne.n	800da06 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800da72:	697a      	ldr	r2, [r7, #20]
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	683b      	ldr	r3, [r7, #0]
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	0013      	movs	r3, r2
 800da7c:	2200      	movs	r2, #0
 800da7e:	2140      	movs	r1, #64	@ 0x40
 800da80:	f001 f866 	bl	800eb50 <UART_WaitOnFlagUntilTimeout>
 800da84:	1e03      	subs	r3, r0, #0
 800da86:	d004      	beq.n	800da92 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800da88:	68fb      	ldr	r3, [r7, #12]
 800da8a:	2220      	movs	r2, #32
 800da8c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800da8e:	2303      	movs	r3, #3
 800da90:	e005      	b.n	800da9e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800da92:	68fb      	ldr	r3, [r7, #12]
 800da94:	2220      	movs	r2, #32
 800da96:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800da98:	2300      	movs	r3, #0
 800da9a:	e000      	b.n	800da9e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800da9c:	2302      	movs	r3, #2
  }
}
 800da9e:	0018      	movs	r0, r3
 800daa0:	46bd      	mov	sp, r7
 800daa2:	b008      	add	sp, #32
 800daa4:	bd80      	pop	{r7, pc}
	...

0800daa8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800daa8:	b580      	push	{r7, lr}
 800daaa:	b088      	sub	sp, #32
 800daac:	af00      	add	r7, sp, #0
 800daae:	60f8      	str	r0, [r7, #12]
 800dab0:	60b9      	str	r1, [r7, #8]
 800dab2:	1dbb      	adds	r3, r7, #6
 800dab4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800daba:	2b20      	cmp	r3, #32
 800dabc:	d000      	beq.n	800dac0 <HAL_UART_Transmit_DMA+0x18>
 800dabe:	e077      	b.n	800dbb0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800dac0:	68bb      	ldr	r3, [r7, #8]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d003      	beq.n	800dace <HAL_UART_Transmit_DMA+0x26>
 800dac6:	1dbb      	adds	r3, r7, #6
 800dac8:	881b      	ldrh	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d101      	bne.n	800dad2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800dace:	2301      	movs	r3, #1
 800dad0:	e06f      	b.n	800dbb2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dad2:	68fb      	ldr	r3, [r7, #12]
 800dad4:	689a      	ldr	r2, [r3, #8]
 800dad6:	2380      	movs	r3, #128	@ 0x80
 800dad8:	015b      	lsls	r3, r3, #5
 800dada:	429a      	cmp	r2, r3
 800dadc:	d109      	bne.n	800daf2 <HAL_UART_Transmit_DMA+0x4a>
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	691b      	ldr	r3, [r3, #16]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d105      	bne.n	800daf2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800dae6:	68bb      	ldr	r3, [r7, #8]
 800dae8:	2201      	movs	r2, #1
 800daea:	4013      	ands	r3, r2
 800daec:	d001      	beq.n	800daf2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800daee:	2301      	movs	r3, #1
 800daf0:	e05f      	b.n	800dbb2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	68ba      	ldr	r2, [r7, #8]
 800daf6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	1dba      	adds	r2, r7, #6
 800dafc:	2150      	movs	r1, #80	@ 0x50
 800dafe:	8812      	ldrh	r2, [r2, #0]
 800db00:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	1dba      	adds	r2, r7, #6
 800db06:	2152      	movs	r1, #82	@ 0x52
 800db08:	8812      	ldrh	r2, [r2, #0]
 800db0a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	2284      	movs	r2, #132	@ 0x84
 800db10:	2100      	movs	r1, #0
 800db12:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	2221      	movs	r2, #33	@ 0x21
 800db18:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db1e:	2b00      	cmp	r3, #0
 800db20:	d027      	beq.n	800db72 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800db22:	68fb      	ldr	r3, [r7, #12]
 800db24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db26:	4a25      	ldr	r2, [pc, #148]	@ (800dbbc <HAL_UART_Transmit_DMA+0x114>)
 800db28:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db2e:	4a24      	ldr	r2, [pc, #144]	@ (800dbc0 <HAL_UART_Transmit_DMA+0x118>)
 800db30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800db32:	68fb      	ldr	r3, [r7, #12]
 800db34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db36:	4a23      	ldr	r2, [pc, #140]	@ (800dbc4 <HAL_UART_Transmit_DMA+0x11c>)
 800db38:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800db3e:	2200      	movs	r2, #0
 800db40:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800db4a:	0019      	movs	r1, r3
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	681b      	ldr	r3, [r3, #0]
 800db50:	3328      	adds	r3, #40	@ 0x28
 800db52:	001a      	movs	r2, r3
 800db54:	1dbb      	adds	r3, r7, #6
 800db56:	881b      	ldrh	r3, [r3, #0]
 800db58:	f7fb fad6 	bl	8009108 <HAL_DMA_Start_IT>
 800db5c:	1e03      	subs	r3, r0, #0
 800db5e:	d008      	beq.n	800db72 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800db60:	68fb      	ldr	r3, [r7, #12]
 800db62:	2284      	movs	r2, #132	@ 0x84
 800db64:	2110      	movs	r1, #16
 800db66:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	2220      	movs	r2, #32
 800db6c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800db6e:	2301      	movs	r3, #1
 800db70:	e01f      	b.n	800dbb2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	2240      	movs	r2, #64	@ 0x40
 800db78:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800db7a:	f3ef 8310 	mrs	r3, PRIMASK
 800db7e:	613b      	str	r3, [r7, #16]
  return(result);
 800db80:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800db82:	61fb      	str	r3, [r7, #28]
 800db84:	2301      	movs	r3, #1
 800db86:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800db88:	697b      	ldr	r3, [r7, #20]
 800db8a:	f383 8810 	msr	PRIMASK, r3
}
 800db8e:	46c0      	nop			@ (mov r8, r8)
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	689a      	ldr	r2, [r3, #8]
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	2180      	movs	r1, #128	@ 0x80
 800db9c:	430a      	orrs	r2, r1
 800db9e:	609a      	str	r2, [r3, #8]
 800dba0:	69fb      	ldr	r3, [r7, #28]
 800dba2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dba4:	69bb      	ldr	r3, [r7, #24]
 800dba6:	f383 8810 	msr	PRIMASK, r3
}
 800dbaa:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800dbac:	2300      	movs	r3, #0
 800dbae:	e000      	b.n	800dbb2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800dbb0:	2302      	movs	r3, #2
  }
}
 800dbb2:	0018      	movs	r0, r3
 800dbb4:	46bd      	mov	sp, r7
 800dbb6:	b008      	add	sp, #32
 800dbb8:	bd80      	pop	{r7, pc}
 800dbba:	46c0      	nop			@ (mov r8, r8)
 800dbbc:	0800ee75 	.word	0x0800ee75
 800dbc0:	0800ef11 	.word	0x0800ef11
 800dbc4:	0800f0b1 	.word	0x0800f0b1

0800dbc8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800dbc8:	b580      	push	{r7, lr}
 800dbca:	b088      	sub	sp, #32
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	1dbb      	adds	r3, r7, #6
 800dbd4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	2280      	movs	r2, #128	@ 0x80
 800dbda:	589b      	ldr	r3, [r3, r2]
 800dbdc:	2b20      	cmp	r3, #32
 800dbde:	d14a      	bne.n	800dc76 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	2b00      	cmp	r3, #0
 800dbe4:	d003      	beq.n	800dbee <HAL_UART_Receive_DMA+0x26>
 800dbe6:	1dbb      	adds	r3, r7, #6
 800dbe8:	881b      	ldrh	r3, [r3, #0]
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d101      	bne.n	800dbf2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800dbee:	2301      	movs	r3, #1
 800dbf0:	e042      	b.n	800dc78 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800dbf2:	68fb      	ldr	r3, [r7, #12]
 800dbf4:	689a      	ldr	r2, [r3, #8]
 800dbf6:	2380      	movs	r3, #128	@ 0x80
 800dbf8:	015b      	lsls	r3, r3, #5
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d109      	bne.n	800dc12 <HAL_UART_Receive_DMA+0x4a>
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	691b      	ldr	r3, [r3, #16]
 800dc02:	2b00      	cmp	r3, #0
 800dc04:	d105      	bne.n	800dc12 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800dc06:	68bb      	ldr	r3, [r7, #8]
 800dc08:	2201      	movs	r2, #1
 800dc0a:	4013      	ands	r3, r2
 800dc0c:	d001      	beq.n	800dc12 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800dc0e:	2301      	movs	r3, #1
 800dc10:	e032      	b.n	800dc78 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	2200      	movs	r2, #0
 800dc16:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	681b      	ldr	r3, [r3, #0]
 800dc1c:	4a18      	ldr	r2, [pc, #96]	@ (800dc80 <HAL_UART_Receive_DMA+0xb8>)
 800dc1e:	4293      	cmp	r3, r2
 800dc20:	d020      	beq.n	800dc64 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	685a      	ldr	r2, [r3, #4]
 800dc28:	2380      	movs	r3, #128	@ 0x80
 800dc2a:	041b      	lsls	r3, r3, #16
 800dc2c:	4013      	ands	r3, r2
 800dc2e:	d019      	beq.n	800dc64 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dc30:	f3ef 8310 	mrs	r3, PRIMASK
 800dc34:	613b      	str	r3, [r7, #16]
  return(result);
 800dc36:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800dc38:	61fb      	str	r3, [r7, #28]
 800dc3a:	2301      	movs	r3, #1
 800dc3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc3e:	697b      	ldr	r3, [r7, #20]
 800dc40:	f383 8810 	msr	PRIMASK, r3
}
 800dc44:	46c0      	nop			@ (mov r8, r8)
 800dc46:	68fb      	ldr	r3, [r7, #12]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	681a      	ldr	r2, [r3, #0]
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	681b      	ldr	r3, [r3, #0]
 800dc50:	2180      	movs	r1, #128	@ 0x80
 800dc52:	04c9      	lsls	r1, r1, #19
 800dc54:	430a      	orrs	r2, r1
 800dc56:	601a      	str	r2, [r3, #0]
 800dc58:	69fb      	ldr	r3, [r7, #28]
 800dc5a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dc5c:	69bb      	ldr	r3, [r7, #24]
 800dc5e:	f383 8810 	msr	PRIMASK, r3
}
 800dc62:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800dc64:	1dbb      	adds	r3, r7, #6
 800dc66:	881a      	ldrh	r2, [r3, #0]
 800dc68:	68b9      	ldr	r1, [r7, #8]
 800dc6a:	68fb      	ldr	r3, [r7, #12]
 800dc6c:	0018      	movs	r0, r3
 800dc6e:	f000 ffd9 	bl	800ec24 <UART_Start_Receive_DMA>
 800dc72:	0003      	movs	r3, r0
 800dc74:	e000      	b.n	800dc78 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800dc76:	2302      	movs	r3, #2
  }
}
 800dc78:	0018      	movs	r0, r3
 800dc7a:	46bd      	mov	sp, r7
 800dc7c:	b008      	add	sp, #32
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	40004800 	.word	0x40004800

0800dc84 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800dc84:	b590      	push	{r4, r7, lr}
 800dc86:	b0ab      	sub	sp, #172	@ 0xac
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	69db      	ldr	r3, [r3, #28]
 800dc92:	22a4      	movs	r2, #164	@ 0xa4
 800dc94:	18b9      	adds	r1, r7, r2
 800dc96:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	681b      	ldr	r3, [r3, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	20a0      	movs	r0, #160	@ 0xa0
 800dca0:	1839      	adds	r1, r7, r0
 800dca2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	681b      	ldr	r3, [r3, #0]
 800dca8:	689b      	ldr	r3, [r3, #8]
 800dcaa:	219c      	movs	r1, #156	@ 0x9c
 800dcac:	1879      	adds	r1, r7, r1
 800dcae:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800dcb0:	0011      	movs	r1, r2
 800dcb2:	18bb      	adds	r3, r7, r2
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a9c      	ldr	r2, [pc, #624]	@ (800df28 <HAL_UART_IRQHandler+0x2a4>)
 800dcb8:	4013      	ands	r3, r2
 800dcba:	2298      	movs	r2, #152	@ 0x98
 800dcbc:	18bc      	adds	r4, r7, r2
 800dcbe:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800dcc0:	18bb      	adds	r3, r7, r2
 800dcc2:	681b      	ldr	r3, [r3, #0]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d114      	bne.n	800dcf2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800dcc8:	187b      	adds	r3, r7, r1
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	2220      	movs	r2, #32
 800dcce:	4013      	ands	r3, r2
 800dcd0:	d00f      	beq.n	800dcf2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800dcd2:	183b      	adds	r3, r7, r0
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	2220      	movs	r2, #32
 800dcd8:	4013      	ands	r3, r2
 800dcda:	d00a      	beq.n	800dcf2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800dcdc:	687b      	ldr	r3, [r7, #4]
 800dcde:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d100      	bne.n	800dce6 <HAL_UART_IRQHandler+0x62>
 800dce4:	e2aa      	b.n	800e23c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800dcea:	687a      	ldr	r2, [r7, #4]
 800dcec:	0010      	movs	r0, r2
 800dcee:	4798      	blx	r3
      }
      return;
 800dcf0:	e2a4      	b.n	800e23c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800dcf2:	2398      	movs	r3, #152	@ 0x98
 800dcf4:	18fb      	adds	r3, r7, r3
 800dcf6:	681b      	ldr	r3, [r3, #0]
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d100      	bne.n	800dcfe <HAL_UART_IRQHandler+0x7a>
 800dcfc:	e11a      	b.n	800df34 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800dcfe:	239c      	movs	r3, #156	@ 0x9c
 800dd00:	18fb      	adds	r3, r7, r3
 800dd02:	681b      	ldr	r3, [r3, #0]
 800dd04:	2201      	movs	r2, #1
 800dd06:	4013      	ands	r3, r2
 800dd08:	d106      	bne.n	800dd18 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800dd0a:	23a0      	movs	r3, #160	@ 0xa0
 800dd0c:	18fb      	adds	r3, r7, r3
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a86      	ldr	r2, [pc, #536]	@ (800df2c <HAL_UART_IRQHandler+0x2a8>)
 800dd12:	4013      	ands	r3, r2
 800dd14:	d100      	bne.n	800dd18 <HAL_UART_IRQHandler+0x94>
 800dd16:	e10d      	b.n	800df34 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800dd18:	23a4      	movs	r3, #164	@ 0xa4
 800dd1a:	18fb      	adds	r3, r7, r3
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2201      	movs	r2, #1
 800dd20:	4013      	ands	r3, r2
 800dd22:	d012      	beq.n	800dd4a <HAL_UART_IRQHandler+0xc6>
 800dd24:	23a0      	movs	r3, #160	@ 0xa0
 800dd26:	18fb      	adds	r3, r7, r3
 800dd28:	681a      	ldr	r2, [r3, #0]
 800dd2a:	2380      	movs	r3, #128	@ 0x80
 800dd2c:	005b      	lsls	r3, r3, #1
 800dd2e:	4013      	ands	r3, r2
 800dd30:	d00b      	beq.n	800dd4a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800dd32:	687b      	ldr	r3, [r7, #4]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	2201      	movs	r2, #1
 800dd38:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800dd3a:	687b      	ldr	r3, [r7, #4]
 800dd3c:	2284      	movs	r2, #132	@ 0x84
 800dd3e:	589b      	ldr	r3, [r3, r2]
 800dd40:	2201      	movs	r2, #1
 800dd42:	431a      	orrs	r2, r3
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	2184      	movs	r1, #132	@ 0x84
 800dd48:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd4a:	23a4      	movs	r3, #164	@ 0xa4
 800dd4c:	18fb      	adds	r3, r7, r3
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	2202      	movs	r2, #2
 800dd52:	4013      	ands	r3, r2
 800dd54:	d011      	beq.n	800dd7a <HAL_UART_IRQHandler+0xf6>
 800dd56:	239c      	movs	r3, #156	@ 0x9c
 800dd58:	18fb      	adds	r3, r7, r3
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	2201      	movs	r2, #1
 800dd5e:	4013      	ands	r3, r2
 800dd60:	d00b      	beq.n	800dd7a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	681b      	ldr	r3, [r3, #0]
 800dd66:	2202      	movs	r2, #2
 800dd68:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	2284      	movs	r2, #132	@ 0x84
 800dd6e:	589b      	ldr	r3, [r3, r2]
 800dd70:	2204      	movs	r2, #4
 800dd72:	431a      	orrs	r2, r3
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	2184      	movs	r1, #132	@ 0x84
 800dd78:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800dd7a:	23a4      	movs	r3, #164	@ 0xa4
 800dd7c:	18fb      	adds	r3, r7, r3
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2204      	movs	r2, #4
 800dd82:	4013      	ands	r3, r2
 800dd84:	d011      	beq.n	800ddaa <HAL_UART_IRQHandler+0x126>
 800dd86:	239c      	movs	r3, #156	@ 0x9c
 800dd88:	18fb      	adds	r3, r7, r3
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	2201      	movs	r2, #1
 800dd8e:	4013      	ands	r3, r2
 800dd90:	d00b      	beq.n	800ddaa <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	681b      	ldr	r3, [r3, #0]
 800dd96:	2204      	movs	r2, #4
 800dd98:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	2284      	movs	r2, #132	@ 0x84
 800dd9e:	589b      	ldr	r3, [r3, r2]
 800dda0:	2202      	movs	r2, #2
 800dda2:	431a      	orrs	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	2184      	movs	r1, #132	@ 0x84
 800dda8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ddaa:	23a4      	movs	r3, #164	@ 0xa4
 800ddac:	18fb      	adds	r3, r7, r3
 800ddae:	681b      	ldr	r3, [r3, #0]
 800ddb0:	2208      	movs	r2, #8
 800ddb2:	4013      	ands	r3, r2
 800ddb4:	d017      	beq.n	800dde6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ddb6:	23a0      	movs	r3, #160	@ 0xa0
 800ddb8:	18fb      	adds	r3, r7, r3
 800ddba:	681b      	ldr	r3, [r3, #0]
 800ddbc:	2220      	movs	r2, #32
 800ddbe:	4013      	ands	r3, r2
 800ddc0:	d105      	bne.n	800ddce <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ddc2:	239c      	movs	r3, #156	@ 0x9c
 800ddc4:	18fb      	adds	r3, r7, r3
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	2201      	movs	r2, #1
 800ddca:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ddcc:	d00b      	beq.n	800dde6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	681b      	ldr	r3, [r3, #0]
 800ddd2:	2208      	movs	r2, #8
 800ddd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	2284      	movs	r2, #132	@ 0x84
 800ddda:	589b      	ldr	r3, [r3, r2]
 800dddc:	2208      	movs	r2, #8
 800ddde:	431a      	orrs	r2, r3
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	2184      	movs	r1, #132	@ 0x84
 800dde4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800dde6:	23a4      	movs	r3, #164	@ 0xa4
 800dde8:	18fb      	adds	r3, r7, r3
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	2380      	movs	r3, #128	@ 0x80
 800ddee:	011b      	lsls	r3, r3, #4
 800ddf0:	4013      	ands	r3, r2
 800ddf2:	d013      	beq.n	800de1c <HAL_UART_IRQHandler+0x198>
 800ddf4:	23a0      	movs	r3, #160	@ 0xa0
 800ddf6:	18fb      	adds	r3, r7, r3
 800ddf8:	681a      	ldr	r2, [r3, #0]
 800ddfa:	2380      	movs	r3, #128	@ 0x80
 800ddfc:	04db      	lsls	r3, r3, #19
 800ddfe:	4013      	ands	r3, r2
 800de00:	d00c      	beq.n	800de1c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800de02:	687b      	ldr	r3, [r7, #4]
 800de04:	681b      	ldr	r3, [r3, #0]
 800de06:	2280      	movs	r2, #128	@ 0x80
 800de08:	0112      	lsls	r2, r2, #4
 800de0a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	2284      	movs	r2, #132	@ 0x84
 800de10:	589b      	ldr	r3, [r3, r2]
 800de12:	2220      	movs	r2, #32
 800de14:	431a      	orrs	r2, r3
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	2184      	movs	r1, #132	@ 0x84
 800de1a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	2284      	movs	r2, #132	@ 0x84
 800de20:	589b      	ldr	r3, [r3, r2]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d100      	bne.n	800de28 <HAL_UART_IRQHandler+0x1a4>
 800de26:	e20b      	b.n	800e240 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800de28:	23a4      	movs	r3, #164	@ 0xa4
 800de2a:	18fb      	adds	r3, r7, r3
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	2220      	movs	r2, #32
 800de30:	4013      	ands	r3, r2
 800de32:	d00e      	beq.n	800de52 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800de34:	23a0      	movs	r3, #160	@ 0xa0
 800de36:	18fb      	adds	r3, r7, r3
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	2220      	movs	r2, #32
 800de3c:	4013      	ands	r3, r2
 800de3e:	d008      	beq.n	800de52 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800de44:	2b00      	cmp	r3, #0
 800de46:	d004      	beq.n	800de52 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800de4c:	687a      	ldr	r2, [r7, #4]
 800de4e:	0010      	movs	r0, r2
 800de50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	2284      	movs	r2, #132	@ 0x84
 800de56:	589b      	ldr	r3, [r3, r2]
 800de58:	2194      	movs	r1, #148	@ 0x94
 800de5a:	187a      	adds	r2, r7, r1
 800de5c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	689b      	ldr	r3, [r3, #8]
 800de64:	2240      	movs	r2, #64	@ 0x40
 800de66:	4013      	ands	r3, r2
 800de68:	2b40      	cmp	r3, #64	@ 0x40
 800de6a:	d004      	beq.n	800de76 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800de6c:	187b      	adds	r3, r7, r1
 800de6e:	681b      	ldr	r3, [r3, #0]
 800de70:	2228      	movs	r2, #40	@ 0x28
 800de72:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800de74:	d04b      	beq.n	800df0e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	0018      	movs	r0, r3
 800de7a:	f000 ff97 	bl	800edac <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800de7e:	687b      	ldr	r3, [r7, #4]
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	689b      	ldr	r3, [r3, #8]
 800de84:	2240      	movs	r2, #64	@ 0x40
 800de86:	4013      	ands	r3, r2
 800de88:	2b40      	cmp	r3, #64	@ 0x40
 800de8a:	d139      	bne.n	800df00 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800de8c:	f3ef 8310 	mrs	r3, PRIMASK
 800de90:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800de92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800de94:	2090      	movs	r0, #144	@ 0x90
 800de96:	183a      	adds	r2, r7, r0
 800de98:	6013      	str	r3, [r2, #0]
 800de9a:	2301      	movs	r3, #1
 800de9c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800de9e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800dea0:	f383 8810 	msr	PRIMASK, r3
}
 800dea4:	46c0      	nop			@ (mov r8, r8)
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	689a      	ldr	r2, [r3, #8]
 800deac:	687b      	ldr	r3, [r7, #4]
 800deae:	681b      	ldr	r3, [r3, #0]
 800deb0:	2140      	movs	r1, #64	@ 0x40
 800deb2:	438a      	bics	r2, r1
 800deb4:	609a      	str	r2, [r3, #8]
 800deb6:	183b      	adds	r3, r7, r0
 800deb8:	681b      	ldr	r3, [r3, #0]
 800deba:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800debc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800debe:	f383 8810 	msr	PRIMASK, r3
}
 800dec2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800dec4:	687b      	ldr	r3, [r7, #4]
 800dec6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dec8:	2b00      	cmp	r3, #0
 800deca:	d012      	beq.n	800def2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ded0:	4a17      	ldr	r2, [pc, #92]	@ (800df30 <HAL_UART_IRQHandler+0x2ac>)
 800ded2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ded8:	0018      	movs	r0, r3
 800deda:	f7fb f9bb 	bl	8009254 <HAL_DMA_Abort_IT>
 800dede:	1e03      	subs	r3, r0, #0
 800dee0:	d020      	beq.n	800df24 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800dee2:	687b      	ldr	r3, [r7, #4]
 800dee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dee6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800dee8:	687b      	ldr	r3, [r7, #4]
 800deea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800deec:	0018      	movs	r0, r3
 800deee:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800def0:	e018      	b.n	800df24 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2298      	movs	r2, #152	@ 0x98
 800def6:	589b      	ldr	r3, [r3, r2]
 800def8:	687a      	ldr	r2, [r7, #4]
 800defa:	0010      	movs	r0, r2
 800defc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800defe:	e011      	b.n	800df24 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	2298      	movs	r2, #152	@ 0x98
 800df04:	589b      	ldr	r3, [r3, r2]
 800df06:	687a      	ldr	r2, [r7, #4]
 800df08:	0010      	movs	r0, r2
 800df0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df0c:	e00a      	b.n	800df24 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	2298      	movs	r2, #152	@ 0x98
 800df12:	589b      	ldr	r3, [r3, r2]
 800df14:	687a      	ldr	r2, [r7, #4]
 800df16:	0010      	movs	r0, r2
 800df18:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	2284      	movs	r2, #132	@ 0x84
 800df1e:	2100      	movs	r1, #0
 800df20:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800df22:	e18d      	b.n	800e240 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df24:	46c0      	nop			@ (mov r8, r8)
    return;
 800df26:	e18b      	b.n	800e240 <HAL_UART_IRQHandler+0x5bc>
 800df28:	0000080f 	.word	0x0000080f
 800df2c:	04000120 	.word	0x04000120
 800df30:	0800f139 	.word	0x0800f139

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800df34:	687b      	ldr	r3, [r7, #4]
 800df36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800df38:	2b01      	cmp	r3, #1
 800df3a:	d000      	beq.n	800df3e <HAL_UART_IRQHandler+0x2ba>
 800df3c:	e13d      	b.n	800e1ba <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800df3e:	23a4      	movs	r3, #164	@ 0xa4
 800df40:	18fb      	adds	r3, r7, r3
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2210      	movs	r2, #16
 800df46:	4013      	ands	r3, r2
 800df48:	d100      	bne.n	800df4c <HAL_UART_IRQHandler+0x2c8>
 800df4a:	e136      	b.n	800e1ba <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800df4c:	23a0      	movs	r3, #160	@ 0xa0
 800df4e:	18fb      	adds	r3, r7, r3
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	2210      	movs	r2, #16
 800df54:	4013      	ands	r3, r2
 800df56:	d100      	bne.n	800df5a <HAL_UART_IRQHandler+0x2d6>
 800df58:	e12f      	b.n	800e1ba <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	2210      	movs	r2, #16
 800df60:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	689b      	ldr	r3, [r3, #8]
 800df68:	2240      	movs	r2, #64	@ 0x40
 800df6a:	4013      	ands	r3, r2
 800df6c:	2b40      	cmp	r3, #64	@ 0x40
 800df6e:	d000      	beq.n	800df72 <HAL_UART_IRQHandler+0x2ee>
 800df70:	e0a2      	b.n	800e0b8 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	217e      	movs	r1, #126	@ 0x7e
 800df7c:	187b      	adds	r3, r7, r1
 800df7e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800df80:	187b      	adds	r3, r7, r1
 800df82:	881b      	ldrh	r3, [r3, #0]
 800df84:	2b00      	cmp	r3, #0
 800df86:	d100      	bne.n	800df8a <HAL_UART_IRQHandler+0x306>
 800df88:	e15c      	b.n	800e244 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	2258      	movs	r2, #88	@ 0x58
 800df8e:	5a9b      	ldrh	r3, [r3, r2]
 800df90:	187a      	adds	r2, r7, r1
 800df92:	8812      	ldrh	r2, [r2, #0]
 800df94:	429a      	cmp	r2, r3
 800df96:	d300      	bcc.n	800df9a <HAL_UART_IRQHandler+0x316>
 800df98:	e154      	b.n	800e244 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	187a      	adds	r2, r7, r1
 800df9e:	215a      	movs	r1, #90	@ 0x5a
 800dfa0:	8812      	ldrh	r2, [r2, #0]
 800dfa2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800dfa4:	687b      	ldr	r3, [r7, #4]
 800dfa6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	2220      	movs	r2, #32
 800dfae:	4013      	ands	r3, r2
 800dfb0:	d16f      	bne.n	800e092 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfb2:	f3ef 8310 	mrs	r3, PRIMASK
 800dfb6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800dfb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dfba:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dfbc:	2301      	movs	r3, #1
 800dfbe:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfc0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dfc2:	f383 8810 	msr	PRIMASK, r3
}
 800dfc6:	46c0      	nop			@ (mov r8, r8)
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	681a      	ldr	r2, [r3, #0]
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	49a0      	ldr	r1, [pc, #640]	@ (800e254 <HAL_UART_IRQHandler+0x5d0>)
 800dfd4:	400a      	ands	r2, r1
 800dfd6:	601a      	str	r2, [r3, #0]
 800dfd8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800dfda:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dfdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dfde:	f383 8810 	msr	PRIMASK, r3
}
 800dfe2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800dfe4:	f3ef 8310 	mrs	r3, PRIMASK
 800dfe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800dfea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dfec:	677b      	str	r3, [r7, #116]	@ 0x74
 800dfee:	2301      	movs	r3, #1
 800dff0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800dff2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800dff4:	f383 8810 	msr	PRIMASK, r3
}
 800dff8:	46c0      	nop			@ (mov r8, r8)
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	689a      	ldr	r2, [r3, #8]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	2101      	movs	r1, #1
 800e006:	438a      	bics	r2, r1
 800e008:	609a      	str	r2, [r3, #8]
 800e00a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e00c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e00e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e010:	f383 8810 	msr	PRIMASK, r3
}
 800e014:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e016:	f3ef 8310 	mrs	r3, PRIMASK
 800e01a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800e01c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e01e:	673b      	str	r3, [r7, #112]	@ 0x70
 800e020:	2301      	movs	r3, #1
 800e022:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e026:	f383 8810 	msr	PRIMASK, r3
}
 800e02a:	46c0      	nop			@ (mov r8, r8)
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	689a      	ldr	r2, [r3, #8]
 800e032:	687b      	ldr	r3, [r7, #4]
 800e034:	681b      	ldr	r3, [r3, #0]
 800e036:	2140      	movs	r1, #64	@ 0x40
 800e038:	438a      	bics	r2, r1
 800e03a:	609a      	str	r2, [r3, #8]
 800e03c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e03e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e040:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e042:	f383 8810 	msr	PRIMASK, r3
}
 800e046:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	2280      	movs	r2, #128	@ 0x80
 800e04c:	2120      	movs	r1, #32
 800e04e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e050:	687b      	ldr	r3, [r7, #4]
 800e052:	2200      	movs	r2, #0
 800e054:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e056:	f3ef 8310 	mrs	r3, PRIMASK
 800e05a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800e05c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e05e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e060:	2301      	movs	r3, #1
 800e062:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e064:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e066:	f383 8810 	msr	PRIMASK, r3
}
 800e06a:	46c0      	nop			@ (mov r8, r8)
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	681a      	ldr	r2, [r3, #0]
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2110      	movs	r1, #16
 800e078:	438a      	bics	r2, r1
 800e07a:	601a      	str	r2, [r3, #0]
 800e07c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e07e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e080:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e082:	f383 8810 	msr	PRIMASK, r3
}
 800e086:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e08c:	0018      	movs	r0, r3
 800e08e:	f7fb f8a1 	bl	80091d4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2202      	movs	r2, #2
 800e096:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800e098:	687b      	ldr	r3, [r7, #4]
 800e09a:	22ac      	movs	r2, #172	@ 0xac
 800e09c:	589b      	ldr	r3, [r3, r2]
 800e09e:	687a      	ldr	r2, [r7, #4]
 800e0a0:	2158      	movs	r1, #88	@ 0x58
 800e0a2:	5a51      	ldrh	r1, [r2, r1]
 800e0a4:	687a      	ldr	r2, [r7, #4]
 800e0a6:	205a      	movs	r0, #90	@ 0x5a
 800e0a8:	5a12      	ldrh	r2, [r2, r0]
 800e0aa:	b292      	uxth	r2, r2
 800e0ac:	1a8a      	subs	r2, r1, r2
 800e0ae:	b291      	uxth	r1, r2
 800e0b0:	687a      	ldr	r2, [r7, #4]
 800e0b2:	0010      	movs	r0, r2
 800e0b4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e0b6:	e0c5      	b.n	800e244 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800e0b8:	687b      	ldr	r3, [r7, #4]
 800e0ba:	2258      	movs	r2, #88	@ 0x58
 800e0bc:	5a99      	ldrh	r1, [r3, r2]
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	225a      	movs	r2, #90	@ 0x5a
 800e0c2:	5a9b      	ldrh	r3, [r3, r2]
 800e0c4:	b29a      	uxth	r2, r3
 800e0c6:	208e      	movs	r0, #142	@ 0x8e
 800e0c8:	183b      	adds	r3, r7, r0
 800e0ca:	1a8a      	subs	r2, r1, r2
 800e0cc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	225a      	movs	r2, #90	@ 0x5a
 800e0d2:	5a9b      	ldrh	r3, [r3, r2]
 800e0d4:	b29b      	uxth	r3, r3
 800e0d6:	2b00      	cmp	r3, #0
 800e0d8:	d100      	bne.n	800e0dc <HAL_UART_IRQHandler+0x458>
 800e0da:	e0b5      	b.n	800e248 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800e0dc:	183b      	adds	r3, r7, r0
 800e0de:	881b      	ldrh	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d100      	bne.n	800e0e6 <HAL_UART_IRQHandler+0x462>
 800e0e4:	e0b0      	b.n	800e248 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0e6:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ea:	60fb      	str	r3, [r7, #12]
  return(result);
 800e0ec:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e0ee:	2488      	movs	r4, #136	@ 0x88
 800e0f0:	193a      	adds	r2, r7, r4
 800e0f2:	6013      	str	r3, [r2, #0]
 800e0f4:	2301      	movs	r3, #1
 800e0f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	f383 8810 	msr	PRIMASK, r3
}
 800e0fe:	46c0      	nop			@ (mov r8, r8)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	681b      	ldr	r3, [r3, #0]
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	687b      	ldr	r3, [r7, #4]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	4953      	ldr	r1, [pc, #332]	@ (800e258 <HAL_UART_IRQHandler+0x5d4>)
 800e10c:	400a      	ands	r2, r1
 800e10e:	601a      	str	r2, [r3, #0]
 800e110:	193b      	adds	r3, r7, r4
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e116:	697b      	ldr	r3, [r7, #20]
 800e118:	f383 8810 	msr	PRIMASK, r3
}
 800e11c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e11e:	f3ef 8310 	mrs	r3, PRIMASK
 800e122:	61bb      	str	r3, [r7, #24]
  return(result);
 800e124:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e126:	2484      	movs	r4, #132	@ 0x84
 800e128:	193a      	adds	r2, r7, r4
 800e12a:	6013      	str	r3, [r2, #0]
 800e12c:	2301      	movs	r3, #1
 800e12e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e130:	69fb      	ldr	r3, [r7, #28]
 800e132:	f383 8810 	msr	PRIMASK, r3
}
 800e136:	46c0      	nop			@ (mov r8, r8)
 800e138:	687b      	ldr	r3, [r7, #4]
 800e13a:	681b      	ldr	r3, [r3, #0]
 800e13c:	689a      	ldr	r2, [r3, #8]
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	2101      	movs	r1, #1
 800e144:	438a      	bics	r2, r1
 800e146:	609a      	str	r2, [r3, #8]
 800e148:	193b      	adds	r3, r7, r4
 800e14a:	681b      	ldr	r3, [r3, #0]
 800e14c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e14e:	6a3b      	ldr	r3, [r7, #32]
 800e150:	f383 8810 	msr	PRIMASK, r3
}
 800e154:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2280      	movs	r2, #128	@ 0x80
 800e15a:	2120      	movs	r1, #32
 800e15c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	2200      	movs	r2, #0
 800e162:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800e164:	687b      	ldr	r3, [r7, #4]
 800e166:	2200      	movs	r2, #0
 800e168:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e16a:	f3ef 8310 	mrs	r3, PRIMASK
 800e16e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e172:	2480      	movs	r4, #128	@ 0x80
 800e174:	193a      	adds	r2, r7, r4
 800e176:	6013      	str	r3, [r2, #0]
 800e178:	2301      	movs	r3, #1
 800e17a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e17c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e17e:	f383 8810 	msr	PRIMASK, r3
}
 800e182:	46c0      	nop			@ (mov r8, r8)
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	681a      	ldr	r2, [r3, #0]
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	681b      	ldr	r3, [r3, #0]
 800e18e:	2110      	movs	r1, #16
 800e190:	438a      	bics	r2, r1
 800e192:	601a      	str	r2, [r3, #0]
 800e194:	193b      	adds	r3, r7, r4
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e19a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e19c:	f383 8810 	msr	PRIMASK, r3
}
 800e1a0:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2202      	movs	r2, #2
 800e1a6:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	22ac      	movs	r2, #172	@ 0xac
 800e1ac:	589b      	ldr	r3, [r3, r2]
 800e1ae:	183a      	adds	r2, r7, r0
 800e1b0:	8811      	ldrh	r1, [r2, #0]
 800e1b2:	687a      	ldr	r2, [r7, #4]
 800e1b4:	0010      	movs	r0, r2
 800e1b6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800e1b8:	e046      	b.n	800e248 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800e1ba:	23a4      	movs	r3, #164	@ 0xa4
 800e1bc:	18fb      	adds	r3, r7, r3
 800e1be:	681a      	ldr	r2, [r3, #0]
 800e1c0:	2380      	movs	r3, #128	@ 0x80
 800e1c2:	035b      	lsls	r3, r3, #13
 800e1c4:	4013      	ands	r3, r2
 800e1c6:	d012      	beq.n	800e1ee <HAL_UART_IRQHandler+0x56a>
 800e1c8:	239c      	movs	r3, #156	@ 0x9c
 800e1ca:	18fb      	adds	r3, r7, r3
 800e1cc:	681a      	ldr	r2, [r3, #0]
 800e1ce:	2380      	movs	r3, #128	@ 0x80
 800e1d0:	03db      	lsls	r3, r3, #15
 800e1d2:	4013      	ands	r3, r2
 800e1d4:	d00b      	beq.n	800e1ee <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2280      	movs	r2, #128	@ 0x80
 800e1dc:	0352      	lsls	r2, r2, #13
 800e1de:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800e1e0:	687b      	ldr	r3, [r7, #4]
 800e1e2:	22a8      	movs	r2, #168	@ 0xa8
 800e1e4:	589b      	ldr	r3, [r3, r2]
 800e1e6:	687a      	ldr	r2, [r7, #4]
 800e1e8:	0010      	movs	r0, r2
 800e1ea:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800e1ec:	e02f      	b.n	800e24e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800e1ee:	23a4      	movs	r3, #164	@ 0xa4
 800e1f0:	18fb      	adds	r3, r7, r3
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	2280      	movs	r2, #128	@ 0x80
 800e1f6:	4013      	ands	r3, r2
 800e1f8:	d00f      	beq.n	800e21a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800e1fa:	23a0      	movs	r3, #160	@ 0xa0
 800e1fc:	18fb      	adds	r3, r7, r3
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	2280      	movs	r2, #128	@ 0x80
 800e202:	4013      	ands	r3, r2
 800e204:	d009      	beq.n	800e21a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d01e      	beq.n	800e24c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800e212:	687a      	ldr	r2, [r7, #4]
 800e214:	0010      	movs	r0, r2
 800e216:	4798      	blx	r3
    }
    return;
 800e218:	e018      	b.n	800e24c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800e21a:	23a4      	movs	r3, #164	@ 0xa4
 800e21c:	18fb      	adds	r3, r7, r3
 800e21e:	681b      	ldr	r3, [r3, #0]
 800e220:	2240      	movs	r2, #64	@ 0x40
 800e222:	4013      	ands	r3, r2
 800e224:	d013      	beq.n	800e24e <HAL_UART_IRQHandler+0x5ca>
 800e226:	23a0      	movs	r3, #160	@ 0xa0
 800e228:	18fb      	adds	r3, r7, r3
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2240      	movs	r2, #64	@ 0x40
 800e22e:	4013      	ands	r3, r2
 800e230:	d00d      	beq.n	800e24e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	0018      	movs	r0, r3
 800e236:	f000 ff98 	bl	800f16a <UART_EndTransmit_IT>
    return;
 800e23a:	e008      	b.n	800e24e <HAL_UART_IRQHandler+0x5ca>
      return;
 800e23c:	46c0      	nop			@ (mov r8, r8)
 800e23e:	e006      	b.n	800e24e <HAL_UART_IRQHandler+0x5ca>
    return;
 800e240:	46c0      	nop			@ (mov r8, r8)
 800e242:	e004      	b.n	800e24e <HAL_UART_IRQHandler+0x5ca>
      return;
 800e244:	46c0      	nop			@ (mov r8, r8)
 800e246:	e002      	b.n	800e24e <HAL_UART_IRQHandler+0x5ca>
      return;
 800e248:	46c0      	nop			@ (mov r8, r8)
 800e24a:	e000      	b.n	800e24e <HAL_UART_IRQHandler+0x5ca>
    return;
 800e24c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800e24e:	46bd      	mov	sp, r7
 800e250:	b02b      	add	sp, #172	@ 0xac
 800e252:	bd90      	pop	{r4, r7, pc}
 800e254:	fffffeff 	.word	0xfffffeff
 800e258:	fffffedf 	.word	0xfffffedf

0800e25c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800e25c:	b580      	push	{r7, lr}
 800e25e:	b082      	sub	sp, #8
 800e260:	af00      	add	r7, sp, #0
 800e262:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800e264:	46c0      	nop			@ (mov r8, r8)
 800e266:	46bd      	mov	sp, r7
 800e268:	b002      	add	sp, #8
 800e26a:	bd80      	pop	{r7, pc}

0800e26c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e26c:	b580      	push	{r7, lr}
 800e26e:	b082      	sub	sp, #8
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800e274:	46c0      	nop			@ (mov r8, r8)
 800e276:	46bd      	mov	sp, r7
 800e278:	b002      	add	sp, #8
 800e27a:	bd80      	pop	{r7, pc}

0800e27c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800e27c:	b580      	push	{r7, lr}
 800e27e:	b082      	sub	sp, #8
 800e280:	af00      	add	r7, sp, #0
 800e282:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800e284:	46c0      	nop			@ (mov r8, r8)
 800e286:	46bd      	mov	sp, r7
 800e288:	b002      	add	sp, #8
 800e28a:	bd80      	pop	{r7, pc}

0800e28c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800e28c:	b580      	push	{r7, lr}
 800e28e:	b082      	sub	sp, #8
 800e290:	af00      	add	r7, sp, #0
 800e292:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800e294:	46c0      	nop			@ (mov r8, r8)
 800e296:	46bd      	mov	sp, r7
 800e298:	b002      	add	sp, #8
 800e29a:	bd80      	pop	{r7, pc}

0800e29c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800e2a4:	46c0      	nop			@ (mov r8, r8)
 800e2a6:	46bd      	mov	sp, r7
 800e2a8:	b002      	add	sp, #8
 800e2aa:	bd80      	pop	{r7, pc}

0800e2ac <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b082      	sub	sp, #8
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800e2b4:	46c0      	nop			@ (mov r8, r8)
 800e2b6:	46bd      	mov	sp, r7
 800e2b8:	b002      	add	sp, #8
 800e2ba:	bd80      	pop	{r7, pc}

0800e2bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800e2bc:	b580      	push	{r7, lr}
 800e2be:	b082      	sub	sp, #8
 800e2c0:	af00      	add	r7, sp, #0
 800e2c2:	6078      	str	r0, [r7, #4]
 800e2c4:	000a      	movs	r2, r1
 800e2c6:	1cbb      	adds	r3, r7, #2
 800e2c8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800e2ca:	46c0      	nop			@ (mov r8, r8)
 800e2cc:	46bd      	mov	sp, r7
 800e2ce:	b002      	add	sp, #8
 800e2d0:	bd80      	pop	{r7, pc}
	...

0800e2d4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800e2d4:	b580      	push	{r7, lr}
 800e2d6:	b082      	sub	sp, #8
 800e2d8:	af00      	add	r7, sp, #0
 800e2da:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800e2dc:	687b      	ldr	r3, [r7, #4]
 800e2de:	2188      	movs	r1, #136	@ 0x88
 800e2e0:	4a14      	ldr	r2, [pc, #80]	@ (800e334 <UART_InitCallbacksToDefault+0x60>)
 800e2e2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	218c      	movs	r1, #140	@ 0x8c
 800e2e8:	4a13      	ldr	r2, [pc, #76]	@ (800e338 <UART_InitCallbacksToDefault+0x64>)
 800e2ea:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800e2ec:	687b      	ldr	r3, [r7, #4]
 800e2ee:	2190      	movs	r1, #144	@ 0x90
 800e2f0:	4a12      	ldr	r2, [pc, #72]	@ (800e33c <UART_InitCallbacksToDefault+0x68>)
 800e2f2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800e2f4:	687b      	ldr	r3, [r7, #4]
 800e2f6:	2194      	movs	r1, #148	@ 0x94
 800e2f8:	4a11      	ldr	r2, [pc, #68]	@ (800e340 <UART_InitCallbacksToDefault+0x6c>)
 800e2fa:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800e2fc:	687b      	ldr	r3, [r7, #4]
 800e2fe:	2198      	movs	r1, #152	@ 0x98
 800e300:	4a10      	ldr	r2, [pc, #64]	@ (800e344 <UART_InitCallbacksToDefault+0x70>)
 800e302:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800e304:	687b      	ldr	r3, [r7, #4]
 800e306:	219c      	movs	r1, #156	@ 0x9c
 800e308:	4a0f      	ldr	r2, [pc, #60]	@ (800e348 <UART_InitCallbacksToDefault+0x74>)
 800e30a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800e30c:	687b      	ldr	r3, [r7, #4]
 800e30e:	21a0      	movs	r1, #160	@ 0xa0
 800e310:	4a0e      	ldr	r2, [pc, #56]	@ (800e34c <UART_InitCallbacksToDefault+0x78>)
 800e312:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	21a4      	movs	r1, #164	@ 0xa4
 800e318:	4a0d      	ldr	r2, [pc, #52]	@ (800e350 <UART_InitCallbacksToDefault+0x7c>)
 800e31a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800e31c:	687b      	ldr	r3, [r7, #4]
 800e31e:	21a8      	movs	r1, #168	@ 0xa8
 800e320:	4a0c      	ldr	r2, [pc, #48]	@ (800e354 <UART_InitCallbacksToDefault+0x80>)
 800e322:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800e324:	687b      	ldr	r3, [r7, #4]
 800e326:	21ac      	movs	r1, #172	@ 0xac
 800e328:	4a0b      	ldr	r2, [pc, #44]	@ (800e358 <UART_InitCallbacksToDefault+0x84>)
 800e32a:	505a      	str	r2, [r3, r1]

}
 800e32c:	46c0      	nop			@ (mov r8, r8)
 800e32e:	46bd      	mov	sp, r7
 800e330:	b002      	add	sp, #8
 800e332:	bd80      	pop	{r7, pc}
 800e334:	0800e26d 	.word	0x0800e26d
 800e338:	0800e25d 	.word	0x0800e25d
 800e33c:	0800e27d 	.word	0x0800e27d
 800e340:	080037c9 	.word	0x080037c9
 800e344:	08003805 	.word	0x08003805
 800e348:	0800e28d 	.word	0x0800e28d
 800e34c:	0800e29d 	.word	0x0800e29d
 800e350:	0800e2ad 	.word	0x0800e2ad
 800e354:	0800f1c5 	.word	0x0800f1c5
 800e358:	0800e2bd 	.word	0x0800e2bd

0800e35c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e35c:	b5b0      	push	{r4, r5, r7, lr}
 800e35e:	b08e      	sub	sp, #56	@ 0x38
 800e360:	af00      	add	r7, sp, #0
 800e362:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e364:	231a      	movs	r3, #26
 800e366:	2218      	movs	r2, #24
 800e368:	189b      	adds	r3, r3, r2
 800e36a:	19db      	adds	r3, r3, r7
 800e36c:	2200      	movs	r2, #0
 800e36e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e370:	69fb      	ldr	r3, [r7, #28]
 800e372:	689a      	ldr	r2, [r3, #8]
 800e374:	69fb      	ldr	r3, [r7, #28]
 800e376:	691b      	ldr	r3, [r3, #16]
 800e378:	431a      	orrs	r2, r3
 800e37a:	69fb      	ldr	r3, [r7, #28]
 800e37c:	695b      	ldr	r3, [r3, #20]
 800e37e:	431a      	orrs	r2, r3
 800e380:	69fb      	ldr	r3, [r7, #28]
 800e382:	69db      	ldr	r3, [r3, #28]
 800e384:	4313      	orrs	r3, r2
 800e386:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e388:	69fb      	ldr	r3, [r7, #28]
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	4ac3      	ldr	r2, [pc, #780]	@ (800e69c <UART_SetConfig+0x340>)
 800e390:	4013      	ands	r3, r2
 800e392:	0019      	movs	r1, r3
 800e394:	69fb      	ldr	r3, [r7, #28]
 800e396:	681b      	ldr	r3, [r3, #0]
 800e398:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e39a:	430a      	orrs	r2, r1
 800e39c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	681b      	ldr	r3, [r3, #0]
 800e3a2:	685b      	ldr	r3, [r3, #4]
 800e3a4:	4abe      	ldr	r2, [pc, #760]	@ (800e6a0 <UART_SetConfig+0x344>)
 800e3a6:	4013      	ands	r3, r2
 800e3a8:	0019      	movs	r1, r3
 800e3aa:	69fb      	ldr	r3, [r7, #28]
 800e3ac:	68da      	ldr	r2, [r3, #12]
 800e3ae:	69fb      	ldr	r3, [r7, #28]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	430a      	orrs	r2, r1
 800e3b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e3b6:	69fb      	ldr	r3, [r7, #28]
 800e3b8:	699b      	ldr	r3, [r3, #24]
 800e3ba:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e3bc:	69fb      	ldr	r3, [r7, #28]
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	4ab8      	ldr	r2, [pc, #736]	@ (800e6a4 <UART_SetConfig+0x348>)
 800e3c2:	4293      	cmp	r3, r2
 800e3c4:	d004      	beq.n	800e3d0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	6a1b      	ldr	r3, [r3, #32]
 800e3ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3cc:	4313      	orrs	r3, r2
 800e3ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e3d0:	69fb      	ldr	r3, [r7, #28]
 800e3d2:	681b      	ldr	r3, [r3, #0]
 800e3d4:	689b      	ldr	r3, [r3, #8]
 800e3d6:	4ab4      	ldr	r2, [pc, #720]	@ (800e6a8 <UART_SetConfig+0x34c>)
 800e3d8:	4013      	ands	r3, r2
 800e3da:	0019      	movs	r1, r3
 800e3dc:	69fb      	ldr	r3, [r7, #28]
 800e3de:	681b      	ldr	r3, [r3, #0]
 800e3e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800e3e2:	430a      	orrs	r2, r1
 800e3e4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e3e6:	69fb      	ldr	r3, [r7, #28]
 800e3e8:	681b      	ldr	r3, [r3, #0]
 800e3ea:	4ab0      	ldr	r2, [pc, #704]	@ (800e6ac <UART_SetConfig+0x350>)
 800e3ec:	4293      	cmp	r3, r2
 800e3ee:	d131      	bne.n	800e454 <UART_SetConfig+0xf8>
 800e3f0:	4baf      	ldr	r3, [pc, #700]	@ (800e6b0 <UART_SetConfig+0x354>)
 800e3f2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3f4:	2203      	movs	r2, #3
 800e3f6:	4013      	ands	r3, r2
 800e3f8:	2b03      	cmp	r3, #3
 800e3fa:	d01d      	beq.n	800e438 <UART_SetConfig+0xdc>
 800e3fc:	d823      	bhi.n	800e446 <UART_SetConfig+0xea>
 800e3fe:	2b02      	cmp	r3, #2
 800e400:	d00c      	beq.n	800e41c <UART_SetConfig+0xc0>
 800e402:	d820      	bhi.n	800e446 <UART_SetConfig+0xea>
 800e404:	2b00      	cmp	r3, #0
 800e406:	d002      	beq.n	800e40e <UART_SetConfig+0xb2>
 800e408:	2b01      	cmp	r3, #1
 800e40a:	d00e      	beq.n	800e42a <UART_SetConfig+0xce>
 800e40c:	e01b      	b.n	800e446 <UART_SetConfig+0xea>
 800e40e:	231b      	movs	r3, #27
 800e410:	2218      	movs	r2, #24
 800e412:	189b      	adds	r3, r3, r2
 800e414:	19db      	adds	r3, r3, r7
 800e416:	2201      	movs	r2, #1
 800e418:	701a      	strb	r2, [r3, #0]
 800e41a:	e0b4      	b.n	800e586 <UART_SetConfig+0x22a>
 800e41c:	231b      	movs	r3, #27
 800e41e:	2218      	movs	r2, #24
 800e420:	189b      	adds	r3, r3, r2
 800e422:	19db      	adds	r3, r3, r7
 800e424:	2202      	movs	r2, #2
 800e426:	701a      	strb	r2, [r3, #0]
 800e428:	e0ad      	b.n	800e586 <UART_SetConfig+0x22a>
 800e42a:	231b      	movs	r3, #27
 800e42c:	2218      	movs	r2, #24
 800e42e:	189b      	adds	r3, r3, r2
 800e430:	19db      	adds	r3, r3, r7
 800e432:	2204      	movs	r2, #4
 800e434:	701a      	strb	r2, [r3, #0]
 800e436:	e0a6      	b.n	800e586 <UART_SetConfig+0x22a>
 800e438:	231b      	movs	r3, #27
 800e43a:	2218      	movs	r2, #24
 800e43c:	189b      	adds	r3, r3, r2
 800e43e:	19db      	adds	r3, r3, r7
 800e440:	2208      	movs	r2, #8
 800e442:	701a      	strb	r2, [r3, #0]
 800e444:	e09f      	b.n	800e586 <UART_SetConfig+0x22a>
 800e446:	231b      	movs	r3, #27
 800e448:	2218      	movs	r2, #24
 800e44a:	189b      	adds	r3, r3, r2
 800e44c:	19db      	adds	r3, r3, r7
 800e44e:	2210      	movs	r2, #16
 800e450:	701a      	strb	r2, [r3, #0]
 800e452:	e098      	b.n	800e586 <UART_SetConfig+0x22a>
 800e454:	69fb      	ldr	r3, [r7, #28]
 800e456:	681b      	ldr	r3, [r3, #0]
 800e458:	4a96      	ldr	r2, [pc, #600]	@ (800e6b4 <UART_SetConfig+0x358>)
 800e45a:	4293      	cmp	r3, r2
 800e45c:	d131      	bne.n	800e4c2 <UART_SetConfig+0x166>
 800e45e:	4b94      	ldr	r3, [pc, #592]	@ (800e6b0 <UART_SetConfig+0x354>)
 800e460:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e462:	220c      	movs	r2, #12
 800e464:	4013      	ands	r3, r2
 800e466:	2b0c      	cmp	r3, #12
 800e468:	d01d      	beq.n	800e4a6 <UART_SetConfig+0x14a>
 800e46a:	d823      	bhi.n	800e4b4 <UART_SetConfig+0x158>
 800e46c:	2b08      	cmp	r3, #8
 800e46e:	d00c      	beq.n	800e48a <UART_SetConfig+0x12e>
 800e470:	d820      	bhi.n	800e4b4 <UART_SetConfig+0x158>
 800e472:	2b00      	cmp	r3, #0
 800e474:	d002      	beq.n	800e47c <UART_SetConfig+0x120>
 800e476:	2b04      	cmp	r3, #4
 800e478:	d00e      	beq.n	800e498 <UART_SetConfig+0x13c>
 800e47a:	e01b      	b.n	800e4b4 <UART_SetConfig+0x158>
 800e47c:	231b      	movs	r3, #27
 800e47e:	2218      	movs	r2, #24
 800e480:	189b      	adds	r3, r3, r2
 800e482:	19db      	adds	r3, r3, r7
 800e484:	2200      	movs	r2, #0
 800e486:	701a      	strb	r2, [r3, #0]
 800e488:	e07d      	b.n	800e586 <UART_SetConfig+0x22a>
 800e48a:	231b      	movs	r3, #27
 800e48c:	2218      	movs	r2, #24
 800e48e:	189b      	adds	r3, r3, r2
 800e490:	19db      	adds	r3, r3, r7
 800e492:	2202      	movs	r2, #2
 800e494:	701a      	strb	r2, [r3, #0]
 800e496:	e076      	b.n	800e586 <UART_SetConfig+0x22a>
 800e498:	231b      	movs	r3, #27
 800e49a:	2218      	movs	r2, #24
 800e49c:	189b      	adds	r3, r3, r2
 800e49e:	19db      	adds	r3, r3, r7
 800e4a0:	2204      	movs	r2, #4
 800e4a2:	701a      	strb	r2, [r3, #0]
 800e4a4:	e06f      	b.n	800e586 <UART_SetConfig+0x22a>
 800e4a6:	231b      	movs	r3, #27
 800e4a8:	2218      	movs	r2, #24
 800e4aa:	189b      	adds	r3, r3, r2
 800e4ac:	19db      	adds	r3, r3, r7
 800e4ae:	2208      	movs	r2, #8
 800e4b0:	701a      	strb	r2, [r3, #0]
 800e4b2:	e068      	b.n	800e586 <UART_SetConfig+0x22a>
 800e4b4:	231b      	movs	r3, #27
 800e4b6:	2218      	movs	r2, #24
 800e4b8:	189b      	adds	r3, r3, r2
 800e4ba:	19db      	adds	r3, r3, r7
 800e4bc:	2210      	movs	r2, #16
 800e4be:	701a      	strb	r2, [r3, #0]
 800e4c0:	e061      	b.n	800e586 <UART_SetConfig+0x22a>
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	4a7c      	ldr	r2, [pc, #496]	@ (800e6b8 <UART_SetConfig+0x35c>)
 800e4c8:	4293      	cmp	r3, r2
 800e4ca:	d106      	bne.n	800e4da <UART_SetConfig+0x17e>
 800e4cc:	231b      	movs	r3, #27
 800e4ce:	2218      	movs	r2, #24
 800e4d0:	189b      	adds	r3, r3, r2
 800e4d2:	19db      	adds	r3, r3, r7
 800e4d4:	2200      	movs	r2, #0
 800e4d6:	701a      	strb	r2, [r3, #0]
 800e4d8:	e055      	b.n	800e586 <UART_SetConfig+0x22a>
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	681b      	ldr	r3, [r3, #0]
 800e4de:	4a77      	ldr	r2, [pc, #476]	@ (800e6bc <UART_SetConfig+0x360>)
 800e4e0:	4293      	cmp	r3, r2
 800e4e2:	d106      	bne.n	800e4f2 <UART_SetConfig+0x196>
 800e4e4:	231b      	movs	r3, #27
 800e4e6:	2218      	movs	r2, #24
 800e4e8:	189b      	adds	r3, r3, r2
 800e4ea:	19db      	adds	r3, r3, r7
 800e4ec:	2200      	movs	r2, #0
 800e4ee:	701a      	strb	r2, [r3, #0]
 800e4f0:	e049      	b.n	800e586 <UART_SetConfig+0x22a>
 800e4f2:	69fb      	ldr	r3, [r7, #28]
 800e4f4:	681b      	ldr	r3, [r3, #0]
 800e4f6:	4a6b      	ldr	r2, [pc, #428]	@ (800e6a4 <UART_SetConfig+0x348>)
 800e4f8:	4293      	cmp	r3, r2
 800e4fa:	d13e      	bne.n	800e57a <UART_SetConfig+0x21e>
 800e4fc:	4b6c      	ldr	r3, [pc, #432]	@ (800e6b0 <UART_SetConfig+0x354>)
 800e4fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800e500:	23c0      	movs	r3, #192	@ 0xc0
 800e502:	011b      	lsls	r3, r3, #4
 800e504:	4013      	ands	r3, r2
 800e506:	22c0      	movs	r2, #192	@ 0xc0
 800e508:	0112      	lsls	r2, r2, #4
 800e50a:	4293      	cmp	r3, r2
 800e50c:	d027      	beq.n	800e55e <UART_SetConfig+0x202>
 800e50e:	22c0      	movs	r2, #192	@ 0xc0
 800e510:	0112      	lsls	r2, r2, #4
 800e512:	4293      	cmp	r3, r2
 800e514:	d82a      	bhi.n	800e56c <UART_SetConfig+0x210>
 800e516:	2280      	movs	r2, #128	@ 0x80
 800e518:	0112      	lsls	r2, r2, #4
 800e51a:	4293      	cmp	r3, r2
 800e51c:	d011      	beq.n	800e542 <UART_SetConfig+0x1e6>
 800e51e:	2280      	movs	r2, #128	@ 0x80
 800e520:	0112      	lsls	r2, r2, #4
 800e522:	4293      	cmp	r3, r2
 800e524:	d822      	bhi.n	800e56c <UART_SetConfig+0x210>
 800e526:	2b00      	cmp	r3, #0
 800e528:	d004      	beq.n	800e534 <UART_SetConfig+0x1d8>
 800e52a:	2280      	movs	r2, #128	@ 0x80
 800e52c:	00d2      	lsls	r2, r2, #3
 800e52e:	4293      	cmp	r3, r2
 800e530:	d00e      	beq.n	800e550 <UART_SetConfig+0x1f4>
 800e532:	e01b      	b.n	800e56c <UART_SetConfig+0x210>
 800e534:	231b      	movs	r3, #27
 800e536:	2218      	movs	r2, #24
 800e538:	189b      	adds	r3, r3, r2
 800e53a:	19db      	adds	r3, r3, r7
 800e53c:	2200      	movs	r2, #0
 800e53e:	701a      	strb	r2, [r3, #0]
 800e540:	e021      	b.n	800e586 <UART_SetConfig+0x22a>
 800e542:	231b      	movs	r3, #27
 800e544:	2218      	movs	r2, #24
 800e546:	189b      	adds	r3, r3, r2
 800e548:	19db      	adds	r3, r3, r7
 800e54a:	2202      	movs	r2, #2
 800e54c:	701a      	strb	r2, [r3, #0]
 800e54e:	e01a      	b.n	800e586 <UART_SetConfig+0x22a>
 800e550:	231b      	movs	r3, #27
 800e552:	2218      	movs	r2, #24
 800e554:	189b      	adds	r3, r3, r2
 800e556:	19db      	adds	r3, r3, r7
 800e558:	2204      	movs	r2, #4
 800e55a:	701a      	strb	r2, [r3, #0]
 800e55c:	e013      	b.n	800e586 <UART_SetConfig+0x22a>
 800e55e:	231b      	movs	r3, #27
 800e560:	2218      	movs	r2, #24
 800e562:	189b      	adds	r3, r3, r2
 800e564:	19db      	adds	r3, r3, r7
 800e566:	2208      	movs	r2, #8
 800e568:	701a      	strb	r2, [r3, #0]
 800e56a:	e00c      	b.n	800e586 <UART_SetConfig+0x22a>
 800e56c:	231b      	movs	r3, #27
 800e56e:	2218      	movs	r2, #24
 800e570:	189b      	adds	r3, r3, r2
 800e572:	19db      	adds	r3, r3, r7
 800e574:	2210      	movs	r2, #16
 800e576:	701a      	strb	r2, [r3, #0]
 800e578:	e005      	b.n	800e586 <UART_SetConfig+0x22a>
 800e57a:	231b      	movs	r3, #27
 800e57c:	2218      	movs	r2, #24
 800e57e:	189b      	adds	r3, r3, r2
 800e580:	19db      	adds	r3, r3, r7
 800e582:	2210      	movs	r2, #16
 800e584:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e586:	69fb      	ldr	r3, [r7, #28]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a46      	ldr	r2, [pc, #280]	@ (800e6a4 <UART_SetConfig+0x348>)
 800e58c:	4293      	cmp	r3, r2
 800e58e:	d000      	beq.n	800e592 <UART_SetConfig+0x236>
 800e590:	e09a      	b.n	800e6c8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e592:	231b      	movs	r3, #27
 800e594:	2218      	movs	r2, #24
 800e596:	189b      	adds	r3, r3, r2
 800e598:	19db      	adds	r3, r3, r7
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	2b08      	cmp	r3, #8
 800e59e:	d01d      	beq.n	800e5dc <UART_SetConfig+0x280>
 800e5a0:	dc20      	bgt.n	800e5e4 <UART_SetConfig+0x288>
 800e5a2:	2b04      	cmp	r3, #4
 800e5a4:	d015      	beq.n	800e5d2 <UART_SetConfig+0x276>
 800e5a6:	dc1d      	bgt.n	800e5e4 <UART_SetConfig+0x288>
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d002      	beq.n	800e5b2 <UART_SetConfig+0x256>
 800e5ac:	2b02      	cmp	r3, #2
 800e5ae:	d005      	beq.n	800e5bc <UART_SetConfig+0x260>
 800e5b0:	e018      	b.n	800e5e4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e5b2:	f7fe fc51 	bl	800ce58 <HAL_RCC_GetPCLK1Freq>
 800e5b6:	0003      	movs	r3, r0
 800e5b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e5ba:	e01c      	b.n	800e5f6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e5bc:	4b3c      	ldr	r3, [pc, #240]	@ (800e6b0 <UART_SetConfig+0x354>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	2210      	movs	r2, #16
 800e5c2:	4013      	ands	r3, r2
 800e5c4:	d002      	beq.n	800e5cc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800e5c6:	4b3e      	ldr	r3, [pc, #248]	@ (800e6c0 <UART_SetConfig+0x364>)
 800e5c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e5ca:	e014      	b.n	800e5f6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800e5cc:	4b3d      	ldr	r3, [pc, #244]	@ (800e6c4 <UART_SetConfig+0x368>)
 800e5ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e5d0:	e011      	b.n	800e5f6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e5d2:	f7fe fb91 	bl	800ccf8 <HAL_RCC_GetSysClockFreq>
 800e5d6:	0003      	movs	r3, r0
 800e5d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e5da:	e00c      	b.n	800e5f6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e5dc:	2380      	movs	r3, #128	@ 0x80
 800e5de:	021b      	lsls	r3, r3, #8
 800e5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e5e2:	e008      	b.n	800e5f6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800e5e4:	2300      	movs	r3, #0
 800e5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800e5e8:	231a      	movs	r3, #26
 800e5ea:	2218      	movs	r2, #24
 800e5ec:	189b      	adds	r3, r3, r2
 800e5ee:	19db      	adds	r3, r3, r7
 800e5f0:	2201      	movs	r2, #1
 800e5f2:	701a      	strb	r2, [r3, #0]
        break;
 800e5f4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e5f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5f8:	2b00      	cmp	r3, #0
 800e5fa:	d100      	bne.n	800e5fe <UART_SetConfig+0x2a2>
 800e5fc:	e133      	b.n	800e866 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e5fe:	69fb      	ldr	r3, [r7, #28]
 800e600:	685a      	ldr	r2, [r3, #4]
 800e602:	0013      	movs	r3, r2
 800e604:	005b      	lsls	r3, r3, #1
 800e606:	189b      	adds	r3, r3, r2
 800e608:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e60a:	429a      	cmp	r2, r3
 800e60c:	d305      	bcc.n	800e61a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800e60e:	69fb      	ldr	r3, [r7, #28]
 800e610:	685b      	ldr	r3, [r3, #4]
 800e612:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800e614:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e616:	429a      	cmp	r2, r3
 800e618:	d906      	bls.n	800e628 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800e61a:	231a      	movs	r3, #26
 800e61c:	2218      	movs	r2, #24
 800e61e:	189b      	adds	r3, r3, r2
 800e620:	19db      	adds	r3, r3, r7
 800e622:	2201      	movs	r2, #1
 800e624:	701a      	strb	r2, [r3, #0]
 800e626:	e11e      	b.n	800e866 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800e628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e62a:	613b      	str	r3, [r7, #16]
 800e62c:	2300      	movs	r3, #0
 800e62e:	617b      	str	r3, [r7, #20]
 800e630:	6939      	ldr	r1, [r7, #16]
 800e632:	697a      	ldr	r2, [r7, #20]
 800e634:	000b      	movs	r3, r1
 800e636:	0e1b      	lsrs	r3, r3, #24
 800e638:	0010      	movs	r0, r2
 800e63a:	0205      	lsls	r5, r0, #8
 800e63c:	431d      	orrs	r5, r3
 800e63e:	000b      	movs	r3, r1
 800e640:	021c      	lsls	r4, r3, #8
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	685b      	ldr	r3, [r3, #4]
 800e646:	085b      	lsrs	r3, r3, #1
 800e648:	60bb      	str	r3, [r7, #8]
 800e64a:	2300      	movs	r3, #0
 800e64c:	60fb      	str	r3, [r7, #12]
 800e64e:	68b8      	ldr	r0, [r7, #8]
 800e650:	68f9      	ldr	r1, [r7, #12]
 800e652:	1900      	adds	r0, r0, r4
 800e654:	4169      	adcs	r1, r5
 800e656:	69fb      	ldr	r3, [r7, #28]
 800e658:	685b      	ldr	r3, [r3, #4]
 800e65a:	603b      	str	r3, [r7, #0]
 800e65c:	2300      	movs	r3, #0
 800e65e:	607b      	str	r3, [r7, #4]
 800e660:	683a      	ldr	r2, [r7, #0]
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	f7f1 ff5a 	bl	800051c <__aeabi_uldivmod>
 800e668:	0002      	movs	r2, r0
 800e66a:	000b      	movs	r3, r1
 800e66c:	0013      	movs	r3, r2
 800e66e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e670:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e672:	23c0      	movs	r3, #192	@ 0xc0
 800e674:	009b      	lsls	r3, r3, #2
 800e676:	429a      	cmp	r2, r3
 800e678:	d309      	bcc.n	800e68e <UART_SetConfig+0x332>
 800e67a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e67c:	2380      	movs	r3, #128	@ 0x80
 800e67e:	035b      	lsls	r3, r3, #13
 800e680:	429a      	cmp	r2, r3
 800e682:	d204      	bcs.n	800e68e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800e684:	69fb      	ldr	r3, [r7, #28]
 800e686:	681b      	ldr	r3, [r3, #0]
 800e688:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e68a:	60da      	str	r2, [r3, #12]
 800e68c:	e0eb      	b.n	800e866 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800e68e:	231a      	movs	r3, #26
 800e690:	2218      	movs	r2, #24
 800e692:	189b      	adds	r3, r3, r2
 800e694:	19db      	adds	r3, r3, r7
 800e696:	2201      	movs	r2, #1
 800e698:	701a      	strb	r2, [r3, #0]
 800e69a:	e0e4      	b.n	800e866 <UART_SetConfig+0x50a>
 800e69c:	efff69f3 	.word	0xefff69f3
 800e6a0:	ffffcfff 	.word	0xffffcfff
 800e6a4:	40004800 	.word	0x40004800
 800e6a8:	fffff4ff 	.word	0xfffff4ff
 800e6ac:	40013800 	.word	0x40013800
 800e6b0:	40021000 	.word	0x40021000
 800e6b4:	40004400 	.word	0x40004400
 800e6b8:	40004c00 	.word	0x40004c00
 800e6bc:	40005000 	.word	0x40005000
 800e6c0:	003d0900 	.word	0x003d0900
 800e6c4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e6c8:	69fb      	ldr	r3, [r7, #28]
 800e6ca:	69da      	ldr	r2, [r3, #28]
 800e6cc:	2380      	movs	r3, #128	@ 0x80
 800e6ce:	021b      	lsls	r3, r3, #8
 800e6d0:	429a      	cmp	r2, r3
 800e6d2:	d000      	beq.n	800e6d6 <UART_SetConfig+0x37a>
 800e6d4:	e070      	b.n	800e7b8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800e6d6:	231b      	movs	r3, #27
 800e6d8:	2218      	movs	r2, #24
 800e6da:	189b      	adds	r3, r3, r2
 800e6dc:	19db      	adds	r3, r3, r7
 800e6de:	781b      	ldrb	r3, [r3, #0]
 800e6e0:	2b08      	cmp	r3, #8
 800e6e2:	d822      	bhi.n	800e72a <UART_SetConfig+0x3ce>
 800e6e4:	009a      	lsls	r2, r3, #2
 800e6e6:	4b67      	ldr	r3, [pc, #412]	@ (800e884 <UART_SetConfig+0x528>)
 800e6e8:	18d3      	adds	r3, r2, r3
 800e6ea:	681b      	ldr	r3, [r3, #0]
 800e6ec:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e6ee:	f7fe fbb3 	bl	800ce58 <HAL_RCC_GetPCLK1Freq>
 800e6f2:	0003      	movs	r3, r0
 800e6f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e6f6:	e021      	b.n	800e73c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e6f8:	f7fe fbc4 	bl	800ce84 <HAL_RCC_GetPCLK2Freq>
 800e6fc:	0003      	movs	r3, r0
 800e6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e700:	e01c      	b.n	800e73c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e702:	4b61      	ldr	r3, [pc, #388]	@ (800e888 <UART_SetConfig+0x52c>)
 800e704:	681b      	ldr	r3, [r3, #0]
 800e706:	2210      	movs	r2, #16
 800e708:	4013      	ands	r3, r2
 800e70a:	d002      	beq.n	800e712 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800e70c:	4b5f      	ldr	r3, [pc, #380]	@ (800e88c <UART_SetConfig+0x530>)
 800e70e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e710:	e014      	b.n	800e73c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800e712:	4b5f      	ldr	r3, [pc, #380]	@ (800e890 <UART_SetConfig+0x534>)
 800e714:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e716:	e011      	b.n	800e73c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e718:	f7fe faee 	bl	800ccf8 <HAL_RCC_GetSysClockFreq>
 800e71c:	0003      	movs	r3, r0
 800e71e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e720:	e00c      	b.n	800e73c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e722:	2380      	movs	r3, #128	@ 0x80
 800e724:	021b      	lsls	r3, r3, #8
 800e726:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e728:	e008      	b.n	800e73c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800e72a:	2300      	movs	r3, #0
 800e72c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800e72e:	231a      	movs	r3, #26
 800e730:	2218      	movs	r2, #24
 800e732:	189b      	adds	r3, r3, r2
 800e734:	19db      	adds	r3, r3, r7
 800e736:	2201      	movs	r2, #1
 800e738:	701a      	strb	r2, [r3, #0]
        break;
 800e73a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e73c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e73e:	2b00      	cmp	r3, #0
 800e740:	d100      	bne.n	800e744 <UART_SetConfig+0x3e8>
 800e742:	e090      	b.n	800e866 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800e744:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e746:	005a      	lsls	r2, r3, #1
 800e748:	69fb      	ldr	r3, [r7, #28]
 800e74a:	685b      	ldr	r3, [r3, #4]
 800e74c:	085b      	lsrs	r3, r3, #1
 800e74e:	18d2      	adds	r2, r2, r3
 800e750:	69fb      	ldr	r3, [r7, #28]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	0019      	movs	r1, r3
 800e756:	0010      	movs	r0, r2
 800e758:	f7f1 fcf2 	bl	8000140 <__udivsi3>
 800e75c:	0003      	movs	r3, r0
 800e75e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e762:	2b0f      	cmp	r3, #15
 800e764:	d921      	bls.n	800e7aa <UART_SetConfig+0x44e>
 800e766:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e768:	2380      	movs	r3, #128	@ 0x80
 800e76a:	025b      	lsls	r3, r3, #9
 800e76c:	429a      	cmp	r2, r3
 800e76e:	d21c      	bcs.n	800e7aa <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e770:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e772:	b29a      	uxth	r2, r3
 800e774:	200e      	movs	r0, #14
 800e776:	2418      	movs	r4, #24
 800e778:	1903      	adds	r3, r0, r4
 800e77a:	19db      	adds	r3, r3, r7
 800e77c:	210f      	movs	r1, #15
 800e77e:	438a      	bics	r2, r1
 800e780:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e784:	085b      	lsrs	r3, r3, #1
 800e786:	b29b      	uxth	r3, r3
 800e788:	2207      	movs	r2, #7
 800e78a:	4013      	ands	r3, r2
 800e78c:	b299      	uxth	r1, r3
 800e78e:	1903      	adds	r3, r0, r4
 800e790:	19db      	adds	r3, r3, r7
 800e792:	1902      	adds	r2, r0, r4
 800e794:	19d2      	adds	r2, r2, r7
 800e796:	8812      	ldrh	r2, [r2, #0]
 800e798:	430a      	orrs	r2, r1
 800e79a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800e79c:	69fb      	ldr	r3, [r7, #28]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	1902      	adds	r2, r0, r4
 800e7a2:	19d2      	adds	r2, r2, r7
 800e7a4:	8812      	ldrh	r2, [r2, #0]
 800e7a6:	60da      	str	r2, [r3, #12]
 800e7a8:	e05d      	b.n	800e866 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800e7aa:	231a      	movs	r3, #26
 800e7ac:	2218      	movs	r2, #24
 800e7ae:	189b      	adds	r3, r3, r2
 800e7b0:	19db      	adds	r3, r3, r7
 800e7b2:	2201      	movs	r2, #1
 800e7b4:	701a      	strb	r2, [r3, #0]
 800e7b6:	e056      	b.n	800e866 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800e7b8:	231b      	movs	r3, #27
 800e7ba:	2218      	movs	r2, #24
 800e7bc:	189b      	adds	r3, r3, r2
 800e7be:	19db      	adds	r3, r3, r7
 800e7c0:	781b      	ldrb	r3, [r3, #0]
 800e7c2:	2b08      	cmp	r3, #8
 800e7c4:	d822      	bhi.n	800e80c <UART_SetConfig+0x4b0>
 800e7c6:	009a      	lsls	r2, r3, #2
 800e7c8:	4b32      	ldr	r3, [pc, #200]	@ (800e894 <UART_SetConfig+0x538>)
 800e7ca:	18d3      	adds	r3, r2, r3
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7d0:	f7fe fb42 	bl	800ce58 <HAL_RCC_GetPCLK1Freq>
 800e7d4:	0003      	movs	r3, r0
 800e7d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e7d8:	e021      	b.n	800e81e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7da:	f7fe fb53 	bl	800ce84 <HAL_RCC_GetPCLK2Freq>
 800e7de:	0003      	movs	r3, r0
 800e7e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e7e2:	e01c      	b.n	800e81e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e7e4:	4b28      	ldr	r3, [pc, #160]	@ (800e888 <UART_SetConfig+0x52c>)
 800e7e6:	681b      	ldr	r3, [r3, #0]
 800e7e8:	2210      	movs	r2, #16
 800e7ea:	4013      	ands	r3, r2
 800e7ec:	d002      	beq.n	800e7f4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800e7ee:	4b27      	ldr	r3, [pc, #156]	@ (800e88c <UART_SetConfig+0x530>)
 800e7f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e7f2:	e014      	b.n	800e81e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800e7f4:	4b26      	ldr	r3, [pc, #152]	@ (800e890 <UART_SetConfig+0x534>)
 800e7f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e7f8:	e011      	b.n	800e81e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800e7fa:	f7fe fa7d 	bl	800ccf8 <HAL_RCC_GetSysClockFreq>
 800e7fe:	0003      	movs	r3, r0
 800e800:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e802:	e00c      	b.n	800e81e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e804:	2380      	movs	r3, #128	@ 0x80
 800e806:	021b      	lsls	r3, r3, #8
 800e808:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800e80a:	e008      	b.n	800e81e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800e80c:	2300      	movs	r3, #0
 800e80e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800e810:	231a      	movs	r3, #26
 800e812:	2218      	movs	r2, #24
 800e814:	189b      	adds	r3, r3, r2
 800e816:	19db      	adds	r3, r3, r7
 800e818:	2201      	movs	r2, #1
 800e81a:	701a      	strb	r2, [r3, #0]
        break;
 800e81c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800e81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e820:	2b00      	cmp	r3, #0
 800e822:	d020      	beq.n	800e866 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800e824:	69fb      	ldr	r3, [r7, #28]
 800e826:	685b      	ldr	r3, [r3, #4]
 800e828:	085a      	lsrs	r2, r3, #1
 800e82a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e82c:	18d2      	adds	r2, r2, r3
 800e82e:	69fb      	ldr	r3, [r7, #28]
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	0019      	movs	r1, r3
 800e834:	0010      	movs	r0, r2
 800e836:	f7f1 fc83 	bl	8000140 <__udivsi3>
 800e83a:	0003      	movs	r3, r0
 800e83c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e83e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e840:	2b0f      	cmp	r3, #15
 800e842:	d90a      	bls.n	800e85a <UART_SetConfig+0x4fe>
 800e844:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e846:	2380      	movs	r3, #128	@ 0x80
 800e848:	025b      	lsls	r3, r3, #9
 800e84a:	429a      	cmp	r2, r3
 800e84c:	d205      	bcs.n	800e85a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800e84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e850:	b29a      	uxth	r2, r3
 800e852:	69fb      	ldr	r3, [r7, #28]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	60da      	str	r2, [r3, #12]
 800e858:	e005      	b.n	800e866 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800e85a:	231a      	movs	r3, #26
 800e85c:	2218      	movs	r2, #24
 800e85e:	189b      	adds	r3, r3, r2
 800e860:	19db      	adds	r3, r3, r7
 800e862:	2201      	movs	r2, #1
 800e864:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800e866:	69fb      	ldr	r3, [r7, #28]
 800e868:	2200      	movs	r2, #0
 800e86a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800e86c:	69fb      	ldr	r3, [r7, #28]
 800e86e:	2200      	movs	r2, #0
 800e870:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800e872:	231a      	movs	r3, #26
 800e874:	2218      	movs	r2, #24
 800e876:	189b      	adds	r3, r3, r2
 800e878:	19db      	adds	r3, r3, r7
 800e87a:	781b      	ldrb	r3, [r3, #0]
}
 800e87c:	0018      	movs	r0, r3
 800e87e:	46bd      	mov	sp, r7
 800e880:	b00e      	add	sp, #56	@ 0x38
 800e882:	bdb0      	pop	{r4, r5, r7, pc}
 800e884:	08012fec 	.word	0x08012fec
 800e888:	40021000 	.word	0x40021000
 800e88c:	003d0900 	.word	0x003d0900
 800e890:	00f42400 	.word	0x00f42400
 800e894:	08013010 	.word	0x08013010

0800e898 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800e898:	b580      	push	{r7, lr}
 800e89a:	b082      	sub	sp, #8
 800e89c:	af00      	add	r7, sp, #0
 800e89e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8a4:	2201      	movs	r2, #1
 800e8a6:	4013      	ands	r3, r2
 800e8a8:	d00b      	beq.n	800e8c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	681b      	ldr	r3, [r3, #0]
 800e8ae:	685b      	ldr	r3, [r3, #4]
 800e8b0:	4a4a      	ldr	r2, [pc, #296]	@ (800e9dc <UART_AdvFeatureConfig+0x144>)
 800e8b2:	4013      	ands	r3, r2
 800e8b4:	0019      	movs	r1, r3
 800e8b6:	687b      	ldr	r3, [r7, #4]
 800e8b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800e8ba:	687b      	ldr	r3, [r7, #4]
 800e8bc:	681b      	ldr	r3, [r3, #0]
 800e8be:	430a      	orrs	r2, r1
 800e8c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8c6:	2202      	movs	r2, #2
 800e8c8:	4013      	ands	r3, r2
 800e8ca:	d00b      	beq.n	800e8e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800e8cc:	687b      	ldr	r3, [r7, #4]
 800e8ce:	681b      	ldr	r3, [r3, #0]
 800e8d0:	685b      	ldr	r3, [r3, #4]
 800e8d2:	4a43      	ldr	r2, [pc, #268]	@ (800e9e0 <UART_AdvFeatureConfig+0x148>)
 800e8d4:	4013      	ands	r3, r2
 800e8d6:	0019      	movs	r1, r3
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	681b      	ldr	r3, [r3, #0]
 800e8e0:	430a      	orrs	r2, r1
 800e8e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e8e8:	2204      	movs	r2, #4
 800e8ea:	4013      	ands	r3, r2
 800e8ec:	d00b      	beq.n	800e906 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	685b      	ldr	r3, [r3, #4]
 800e8f4:	4a3b      	ldr	r2, [pc, #236]	@ (800e9e4 <UART_AdvFeatureConfig+0x14c>)
 800e8f6:	4013      	ands	r3, r2
 800e8f8:	0019      	movs	r1, r3
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	681b      	ldr	r3, [r3, #0]
 800e902:	430a      	orrs	r2, r1
 800e904:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e90a:	2208      	movs	r2, #8
 800e90c:	4013      	ands	r3, r2
 800e90e:	d00b      	beq.n	800e928 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	681b      	ldr	r3, [r3, #0]
 800e914:	685b      	ldr	r3, [r3, #4]
 800e916:	4a34      	ldr	r2, [pc, #208]	@ (800e9e8 <UART_AdvFeatureConfig+0x150>)
 800e918:	4013      	ands	r3, r2
 800e91a:	0019      	movs	r1, r3
 800e91c:	687b      	ldr	r3, [r7, #4]
 800e91e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	430a      	orrs	r2, r1
 800e926:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e92c:	2210      	movs	r2, #16
 800e92e:	4013      	ands	r3, r2
 800e930:	d00b      	beq.n	800e94a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	689b      	ldr	r3, [r3, #8]
 800e938:	4a2c      	ldr	r2, [pc, #176]	@ (800e9ec <UART_AdvFeatureConfig+0x154>)
 800e93a:	4013      	ands	r3, r2
 800e93c:	0019      	movs	r1, r3
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800e942:	687b      	ldr	r3, [r7, #4]
 800e944:	681b      	ldr	r3, [r3, #0]
 800e946:	430a      	orrs	r2, r1
 800e948:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e94e:	2220      	movs	r2, #32
 800e950:	4013      	ands	r3, r2
 800e952:	d00b      	beq.n	800e96c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	689b      	ldr	r3, [r3, #8]
 800e95a:	4a25      	ldr	r2, [pc, #148]	@ (800e9f0 <UART_AdvFeatureConfig+0x158>)
 800e95c:	4013      	ands	r3, r2
 800e95e:	0019      	movs	r1, r3
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	430a      	orrs	r2, r1
 800e96a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e970:	2240      	movs	r2, #64	@ 0x40
 800e972:	4013      	ands	r3, r2
 800e974:	d01d      	beq.n	800e9b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800e976:	687b      	ldr	r3, [r7, #4]
 800e978:	681b      	ldr	r3, [r3, #0]
 800e97a:	685b      	ldr	r3, [r3, #4]
 800e97c:	4a1d      	ldr	r2, [pc, #116]	@ (800e9f4 <UART_AdvFeatureConfig+0x15c>)
 800e97e:	4013      	ands	r3, r2
 800e980:	0019      	movs	r1, r3
 800e982:	687b      	ldr	r3, [r7, #4]
 800e984:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	430a      	orrs	r2, r1
 800e98c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800e98e:	687b      	ldr	r3, [r7, #4]
 800e990:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800e992:	2380      	movs	r3, #128	@ 0x80
 800e994:	035b      	lsls	r3, r3, #13
 800e996:	429a      	cmp	r2, r3
 800e998:	d10b      	bne.n	800e9b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800e99a:	687b      	ldr	r3, [r7, #4]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	4a15      	ldr	r2, [pc, #84]	@ (800e9f8 <UART_AdvFeatureConfig+0x160>)
 800e9a2:	4013      	ands	r3, r2
 800e9a4:	0019      	movs	r1, r3
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e9aa:	687b      	ldr	r3, [r7, #4]
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	430a      	orrs	r2, r1
 800e9b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9b6:	2280      	movs	r2, #128	@ 0x80
 800e9b8:	4013      	ands	r3, r2
 800e9ba:	d00b      	beq.n	800e9d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	4a0e      	ldr	r2, [pc, #56]	@ (800e9fc <UART_AdvFeatureConfig+0x164>)
 800e9c4:	4013      	ands	r3, r2
 800e9c6:	0019      	movs	r1, r3
 800e9c8:	687b      	ldr	r3, [r7, #4]
 800e9ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e9cc:	687b      	ldr	r3, [r7, #4]
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	430a      	orrs	r2, r1
 800e9d2:	605a      	str	r2, [r3, #4]
  }
}
 800e9d4:	46c0      	nop			@ (mov r8, r8)
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	b002      	add	sp, #8
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	fffdffff 	.word	0xfffdffff
 800e9e0:	fffeffff 	.word	0xfffeffff
 800e9e4:	fffbffff 	.word	0xfffbffff
 800e9e8:	ffff7fff 	.word	0xffff7fff
 800e9ec:	ffffefff 	.word	0xffffefff
 800e9f0:	ffffdfff 	.word	0xffffdfff
 800e9f4:	ffefffff 	.word	0xffefffff
 800e9f8:	ff9fffff 	.word	0xff9fffff
 800e9fc:	fff7ffff 	.word	0xfff7ffff

0800ea00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b092      	sub	sp, #72	@ 0x48
 800ea04:	af02      	add	r7, sp, #8
 800ea06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	2284      	movs	r2, #132	@ 0x84
 800ea0c:	2100      	movs	r1, #0
 800ea0e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ea10:	f7f9 fe1a 	bl	8008648 <HAL_GetTick>
 800ea14:	0003      	movs	r3, r0
 800ea16:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	2208      	movs	r2, #8
 800ea20:	4013      	ands	r3, r2
 800ea22:	2b08      	cmp	r3, #8
 800ea24:	d12c      	bne.n	800ea80 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea28:	2280      	movs	r2, #128	@ 0x80
 800ea2a:	0391      	lsls	r1, r2, #14
 800ea2c:	6878      	ldr	r0, [r7, #4]
 800ea2e:	4a46      	ldr	r2, [pc, #280]	@ (800eb48 <UART_CheckIdleState+0x148>)
 800ea30:	9200      	str	r2, [sp, #0]
 800ea32:	2200      	movs	r2, #0
 800ea34:	f000 f88c 	bl	800eb50 <UART_WaitOnFlagUntilTimeout>
 800ea38:	1e03      	subs	r3, r0, #0
 800ea3a:	d021      	beq.n	800ea80 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ea3c:	f3ef 8310 	mrs	r3, PRIMASK
 800ea40:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ea42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ea44:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ea46:	2301      	movs	r3, #1
 800ea48:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea4c:	f383 8810 	msr	PRIMASK, r3
}
 800ea50:	46c0      	nop			@ (mov r8, r8)
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681a      	ldr	r2, [r3, #0]
 800ea58:	687b      	ldr	r3, [r7, #4]
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	2180      	movs	r1, #128	@ 0x80
 800ea5e:	438a      	bics	r2, r1
 800ea60:	601a      	str	r2, [r3, #0]
 800ea62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ea64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ea66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ea68:	f383 8810 	msr	PRIMASK, r3
}
 800ea6c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800ea6e:	687b      	ldr	r3, [r7, #4]
 800ea70:	2220      	movs	r2, #32
 800ea72:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800ea74:	687b      	ldr	r3, [r7, #4]
 800ea76:	2278      	movs	r2, #120	@ 0x78
 800ea78:	2100      	movs	r1, #0
 800ea7a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ea7c:	2303      	movs	r3, #3
 800ea7e:	e05f      	b.n	800eb40 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	681b      	ldr	r3, [r3, #0]
 800ea86:	2204      	movs	r2, #4
 800ea88:	4013      	ands	r3, r2
 800ea8a:	2b04      	cmp	r3, #4
 800ea8c:	d146      	bne.n	800eb1c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ea8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ea90:	2280      	movs	r2, #128	@ 0x80
 800ea92:	03d1      	lsls	r1, r2, #15
 800ea94:	6878      	ldr	r0, [r7, #4]
 800ea96:	4a2c      	ldr	r2, [pc, #176]	@ (800eb48 <UART_CheckIdleState+0x148>)
 800ea98:	9200      	str	r2, [sp, #0]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f000 f858 	bl	800eb50 <UART_WaitOnFlagUntilTimeout>
 800eaa0:	1e03      	subs	r3, r0, #0
 800eaa2:	d03b      	beq.n	800eb1c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eaa4:	f3ef 8310 	mrs	r3, PRIMASK
 800eaa8:	60fb      	str	r3, [r7, #12]
  return(result);
 800eaaa:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800eaac:	637b      	str	r3, [r7, #52]	@ 0x34
 800eaae:	2301      	movs	r3, #1
 800eab0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eab2:	693b      	ldr	r3, [r7, #16]
 800eab4:	f383 8810 	msr	PRIMASK, r3
}
 800eab8:	46c0      	nop			@ (mov r8, r8)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	681a      	ldr	r2, [r3, #0]
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	4921      	ldr	r1, [pc, #132]	@ (800eb4c <UART_CheckIdleState+0x14c>)
 800eac6:	400a      	ands	r2, r1
 800eac8:	601a      	str	r2, [r3, #0]
 800eaca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eacc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eace:	697b      	ldr	r3, [r7, #20]
 800ead0:	f383 8810 	msr	PRIMASK, r3
}
 800ead4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ead6:	f3ef 8310 	mrs	r3, PRIMASK
 800eada:	61bb      	str	r3, [r7, #24]
  return(result);
 800eadc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800eade:	633b      	str	r3, [r7, #48]	@ 0x30
 800eae0:	2301      	movs	r3, #1
 800eae2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eae4:	69fb      	ldr	r3, [r7, #28]
 800eae6:	f383 8810 	msr	PRIMASK, r3
}
 800eaea:	46c0      	nop			@ (mov r8, r8)
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	689a      	ldr	r2, [r3, #8]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	2101      	movs	r1, #1
 800eaf8:	438a      	bics	r2, r1
 800eafa:	609a      	str	r2, [r3, #8]
 800eafc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eafe:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eb00:	6a3b      	ldr	r3, [r7, #32]
 800eb02:	f383 8810 	msr	PRIMASK, r3
}
 800eb06:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2280      	movs	r2, #128	@ 0x80
 800eb0c:	2120      	movs	r1, #32
 800eb0e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	2278      	movs	r2, #120	@ 0x78
 800eb14:	2100      	movs	r1, #0
 800eb16:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eb18:	2303      	movs	r3, #3
 800eb1a:	e011      	b.n	800eb40 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	2220      	movs	r2, #32
 800eb20:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	2280      	movs	r2, #128	@ 0x80
 800eb26:	2120      	movs	r1, #32
 800eb28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	2278      	movs	r2, #120	@ 0x78
 800eb3a:	2100      	movs	r1, #0
 800eb3c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800eb3e:	2300      	movs	r3, #0
}
 800eb40:	0018      	movs	r0, r3
 800eb42:	46bd      	mov	sp, r7
 800eb44:	b010      	add	sp, #64	@ 0x40
 800eb46:	bd80      	pop	{r7, pc}
 800eb48:	01ffffff 	.word	0x01ffffff
 800eb4c:	fffffedf 	.word	0xfffffedf

0800eb50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800eb50:	b580      	push	{r7, lr}
 800eb52:	b084      	sub	sp, #16
 800eb54:	af00      	add	r7, sp, #0
 800eb56:	60f8      	str	r0, [r7, #12]
 800eb58:	60b9      	str	r1, [r7, #8]
 800eb5a:	603b      	str	r3, [r7, #0]
 800eb5c:	1dfb      	adds	r3, r7, #7
 800eb5e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eb60:	e04b      	b.n	800ebfa <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800eb62:	69bb      	ldr	r3, [r7, #24]
 800eb64:	3301      	adds	r3, #1
 800eb66:	d048      	beq.n	800ebfa <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800eb68:	f7f9 fd6e 	bl	8008648 <HAL_GetTick>
 800eb6c:	0002      	movs	r2, r0
 800eb6e:	683b      	ldr	r3, [r7, #0]
 800eb70:	1ad3      	subs	r3, r2, r3
 800eb72:	69ba      	ldr	r2, [r7, #24]
 800eb74:	429a      	cmp	r2, r3
 800eb76:	d302      	bcc.n	800eb7e <UART_WaitOnFlagUntilTimeout+0x2e>
 800eb78:	69bb      	ldr	r3, [r7, #24]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	d101      	bne.n	800eb82 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800eb7e:	2303      	movs	r3, #3
 800eb80:	e04b      	b.n	800ec1a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800eb82:	68fb      	ldr	r3, [r7, #12]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	2204      	movs	r2, #4
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	d035      	beq.n	800ebfa <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800eb8e:	68fb      	ldr	r3, [r7, #12]
 800eb90:	681b      	ldr	r3, [r3, #0]
 800eb92:	69db      	ldr	r3, [r3, #28]
 800eb94:	2208      	movs	r2, #8
 800eb96:	4013      	ands	r3, r2
 800eb98:	2b08      	cmp	r3, #8
 800eb9a:	d111      	bne.n	800ebc0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	2208      	movs	r2, #8
 800eba2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800eba4:	68fb      	ldr	r3, [r7, #12]
 800eba6:	0018      	movs	r0, r3
 800eba8:	f000 f900 	bl	800edac <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ebac:	68fb      	ldr	r3, [r7, #12]
 800ebae:	2284      	movs	r2, #132	@ 0x84
 800ebb0:	2108      	movs	r1, #8
 800ebb2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2278      	movs	r2, #120	@ 0x78
 800ebb8:	2100      	movs	r1, #0
 800ebba:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	e02c      	b.n	800ec1a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	69da      	ldr	r2, [r3, #28]
 800ebc6:	2380      	movs	r3, #128	@ 0x80
 800ebc8:	011b      	lsls	r3, r3, #4
 800ebca:	401a      	ands	r2, r3
 800ebcc:	2380      	movs	r3, #128	@ 0x80
 800ebce:	011b      	lsls	r3, r3, #4
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d112      	bne.n	800ebfa <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	681b      	ldr	r3, [r3, #0]
 800ebd8:	2280      	movs	r2, #128	@ 0x80
 800ebda:	0112      	lsls	r2, r2, #4
 800ebdc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ebde:	68fb      	ldr	r3, [r7, #12]
 800ebe0:	0018      	movs	r0, r3
 800ebe2:	f000 f8e3 	bl	800edac <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ebe6:	68fb      	ldr	r3, [r7, #12]
 800ebe8:	2284      	movs	r2, #132	@ 0x84
 800ebea:	2120      	movs	r1, #32
 800ebec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ebee:	68fb      	ldr	r3, [r7, #12]
 800ebf0:	2278      	movs	r2, #120	@ 0x78
 800ebf2:	2100      	movs	r1, #0
 800ebf4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ebf6:	2303      	movs	r3, #3
 800ebf8:	e00f      	b.n	800ec1a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ebfa:	68fb      	ldr	r3, [r7, #12]
 800ebfc:	681b      	ldr	r3, [r3, #0]
 800ebfe:	69db      	ldr	r3, [r3, #28]
 800ec00:	68ba      	ldr	r2, [r7, #8]
 800ec02:	4013      	ands	r3, r2
 800ec04:	68ba      	ldr	r2, [r7, #8]
 800ec06:	1ad3      	subs	r3, r2, r3
 800ec08:	425a      	negs	r2, r3
 800ec0a:	4153      	adcs	r3, r2
 800ec0c:	b2db      	uxtb	r3, r3
 800ec0e:	001a      	movs	r2, r3
 800ec10:	1dfb      	adds	r3, r7, #7
 800ec12:	781b      	ldrb	r3, [r3, #0]
 800ec14:	429a      	cmp	r2, r3
 800ec16:	d0a4      	beq.n	800eb62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ec18:	2300      	movs	r3, #0
}
 800ec1a:	0018      	movs	r0, r3
 800ec1c:	46bd      	mov	sp, r7
 800ec1e:	b004      	add	sp, #16
 800ec20:	bd80      	pop	{r7, pc}
	...

0800ec24 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ec24:	b580      	push	{r7, lr}
 800ec26:	b090      	sub	sp, #64	@ 0x40
 800ec28:	af00      	add	r7, sp, #0
 800ec2a:	60f8      	str	r0, [r7, #12]
 800ec2c:	60b9      	str	r1, [r7, #8]
 800ec2e:	1dbb      	adds	r3, r7, #6
 800ec30:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800ec32:	68fb      	ldr	r3, [r7, #12]
 800ec34:	68ba      	ldr	r2, [r7, #8]
 800ec36:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800ec38:	68fb      	ldr	r3, [r7, #12]
 800ec3a:	1dba      	adds	r2, r7, #6
 800ec3c:	2158      	movs	r1, #88	@ 0x58
 800ec3e:	8812      	ldrh	r2, [r2, #0]
 800ec40:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ec42:	68fb      	ldr	r3, [r7, #12]
 800ec44:	2284      	movs	r2, #132	@ 0x84
 800ec46:	2100      	movs	r1, #0
 800ec48:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2280      	movs	r2, #128	@ 0x80
 800ec4e:	2122      	movs	r1, #34	@ 0x22
 800ec50:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800ec52:	68fb      	ldr	r3, [r7, #12]
 800ec54:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d028      	beq.n	800ecac <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ec5a:	68fb      	ldr	r3, [r7, #12]
 800ec5c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec5e:	4a3e      	ldr	r2, [pc, #248]	@ (800ed58 <UART_Start_Receive_DMA+0x134>)
 800ec60:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec66:	4a3d      	ldr	r2, [pc, #244]	@ (800ed5c <UART_Start_Receive_DMA+0x138>)
 800ec68:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ec6a:	68fb      	ldr	r3, [r7, #12]
 800ec6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec6e:	4a3c      	ldr	r2, [pc, #240]	@ (800ed60 <UART_Start_Receive_DMA+0x13c>)
 800ec70:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800ec72:	68fb      	ldr	r3, [r7, #12]
 800ec74:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ec76:	2200      	movs	r2, #0
 800ec78:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800ec7a:	68fb      	ldr	r3, [r7, #12]
 800ec7c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800ec7e:	68fb      	ldr	r3, [r7, #12]
 800ec80:	681b      	ldr	r3, [r3, #0]
 800ec82:	3324      	adds	r3, #36	@ 0x24
 800ec84:	0019      	movs	r1, r3
 800ec86:	68fb      	ldr	r3, [r7, #12]
 800ec88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec8a:	001a      	movs	r2, r3
 800ec8c:	1dbb      	adds	r3, r7, #6
 800ec8e:	881b      	ldrh	r3, [r3, #0]
 800ec90:	f7fa fa3a 	bl	8009108 <HAL_DMA_Start_IT>
 800ec94:	1e03      	subs	r3, r0, #0
 800ec96:	d009      	beq.n	800ecac <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2284      	movs	r2, #132	@ 0x84
 800ec9c:	2110      	movs	r1, #16
 800ec9e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	2280      	movs	r2, #128	@ 0x80
 800eca4:	2120      	movs	r1, #32
 800eca6:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800eca8:	2301      	movs	r3, #1
 800ecaa:	e050      	b.n	800ed4e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800ecac:	68fb      	ldr	r3, [r7, #12]
 800ecae:	691b      	ldr	r3, [r3, #16]
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d019      	beq.n	800ece8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ecb4:	f3ef 8310 	mrs	r3, PRIMASK
 800ecb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800ecba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ecbc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ecbe:	2301      	movs	r3, #1
 800ecc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ecc4:	f383 8810 	msr	PRIMASK, r3
}
 800ecc8:	46c0      	nop			@ (mov r8, r8)
 800ecca:	68fb      	ldr	r3, [r7, #12]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	681a      	ldr	r2, [r3, #0]
 800ecd0:	68fb      	ldr	r3, [r7, #12]
 800ecd2:	681b      	ldr	r3, [r3, #0]
 800ecd4:	2180      	movs	r1, #128	@ 0x80
 800ecd6:	0049      	lsls	r1, r1, #1
 800ecd8:	430a      	orrs	r2, r1
 800ecda:	601a      	str	r2, [r3, #0]
 800ecdc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ecde:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ece0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ece2:	f383 8810 	msr	PRIMASK, r3
}
 800ece6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ece8:	f3ef 8310 	mrs	r3, PRIMASK
 800ecec:	613b      	str	r3, [r7, #16]
  return(result);
 800ecee:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ecf0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ecf6:	697b      	ldr	r3, [r7, #20]
 800ecf8:	f383 8810 	msr	PRIMASK, r3
}
 800ecfc:	46c0      	nop			@ (mov r8, r8)
 800ecfe:	68fb      	ldr	r3, [r7, #12]
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	689a      	ldr	r2, [r3, #8]
 800ed04:	68fb      	ldr	r3, [r7, #12]
 800ed06:	681b      	ldr	r3, [r3, #0]
 800ed08:	2101      	movs	r1, #1
 800ed0a:	430a      	orrs	r2, r1
 800ed0c:	609a      	str	r2, [r3, #8]
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed10:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	f383 8810 	msr	PRIMASK, r3
}
 800ed18:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed1a:	f3ef 8310 	mrs	r3, PRIMASK
 800ed1e:	61fb      	str	r3, [r7, #28]
  return(result);
 800ed20:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ed22:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed24:	2301      	movs	r3, #1
 800ed26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed28:	6a3b      	ldr	r3, [r7, #32]
 800ed2a:	f383 8810 	msr	PRIMASK, r3
}
 800ed2e:	46c0      	nop			@ (mov r8, r8)
 800ed30:	68fb      	ldr	r3, [r7, #12]
 800ed32:	681b      	ldr	r3, [r3, #0]
 800ed34:	689a      	ldr	r2, [r3, #8]
 800ed36:	68fb      	ldr	r3, [r7, #12]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	2140      	movs	r1, #64	@ 0x40
 800ed3c:	430a      	orrs	r2, r1
 800ed3e:	609a      	str	r2, [r3, #8]
 800ed40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed42:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ed46:	f383 8810 	msr	PRIMASK, r3
}
 800ed4a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800ed4c:	2300      	movs	r3, #0
}
 800ed4e:	0018      	movs	r0, r3
 800ed50:	46bd      	mov	sp, r7
 800ed52:	b010      	add	sp, #64	@ 0x40
 800ed54:	bd80      	pop	{r7, pc}
 800ed56:	46c0      	nop			@ (mov r8, r8)
 800ed58:	0800ef35 	.word	0x0800ef35
 800ed5c:	0800f069 	.word	0x0800f069
 800ed60:	0800f0b1 	.word	0x0800f0b1

0800ed64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800ed64:	b580      	push	{r7, lr}
 800ed66:	b086      	sub	sp, #24
 800ed68:	af00      	add	r7, sp, #0
 800ed6a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ed6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ed70:	60bb      	str	r3, [r7, #8]
  return(result);
 800ed72:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800ed74:	617b      	str	r3, [r7, #20]
 800ed76:	2301      	movs	r3, #1
 800ed78:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed7a:	68fb      	ldr	r3, [r7, #12]
 800ed7c:	f383 8810 	msr	PRIMASK, r3
}
 800ed80:	46c0      	nop			@ (mov r8, r8)
 800ed82:	687b      	ldr	r3, [r7, #4]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	681a      	ldr	r2, [r3, #0]
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	681b      	ldr	r3, [r3, #0]
 800ed8c:	21c0      	movs	r1, #192	@ 0xc0
 800ed8e:	438a      	bics	r2, r1
 800ed90:	601a      	str	r2, [r3, #0]
 800ed92:	697b      	ldr	r3, [r7, #20]
 800ed94:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ed96:	693b      	ldr	r3, [r7, #16]
 800ed98:	f383 8810 	msr	PRIMASK, r3
}
 800ed9c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	2220      	movs	r2, #32
 800eda2:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800eda4:	46c0      	nop			@ (mov r8, r8)
 800eda6:	46bd      	mov	sp, r7
 800eda8:	b006      	add	sp, #24
 800edaa:	bd80      	pop	{r7, pc}

0800edac <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edac:	b580      	push	{r7, lr}
 800edae:	b08e      	sub	sp, #56	@ 0x38
 800edb0:	af00      	add	r7, sp, #0
 800edb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800edb4:	f3ef 8310 	mrs	r3, PRIMASK
 800edb8:	617b      	str	r3, [r7, #20]
  return(result);
 800edba:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800edbc:	637b      	str	r3, [r7, #52]	@ 0x34
 800edbe:	2301      	movs	r3, #1
 800edc0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edc2:	69bb      	ldr	r3, [r7, #24]
 800edc4:	f383 8810 	msr	PRIMASK, r3
}
 800edc8:	46c0      	nop			@ (mov r8, r8)
 800edca:	687b      	ldr	r3, [r7, #4]
 800edcc:	681b      	ldr	r3, [r3, #0]
 800edce:	681a      	ldr	r2, [r3, #0]
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	4926      	ldr	r1, [pc, #152]	@ (800ee70 <UART_EndRxTransfer+0xc4>)
 800edd6:	400a      	ands	r2, r1
 800edd8:	601a      	str	r2, [r3, #0]
 800edda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800eddc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	f383 8810 	msr	PRIMASK, r3
}
 800ede4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ede6:	f3ef 8310 	mrs	r3, PRIMASK
 800edea:	623b      	str	r3, [r7, #32]
  return(result);
 800edec:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800edee:	633b      	str	r3, [r7, #48]	@ 0x30
 800edf0:	2301      	movs	r3, #1
 800edf2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800edf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800edf6:	f383 8810 	msr	PRIMASK, r3
}
 800edfa:	46c0      	nop			@ (mov r8, r8)
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	681b      	ldr	r3, [r3, #0]
 800ee00:	689a      	ldr	r2, [r3, #8]
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	2101      	movs	r1, #1
 800ee08:	438a      	bics	r2, r1
 800ee0a:	609a      	str	r2, [r3, #8]
 800ee0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee12:	f383 8810 	msr	PRIMASK, r3
}
 800ee16:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d118      	bne.n	800ee52 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee20:	f3ef 8310 	mrs	r3, PRIMASK
 800ee24:	60bb      	str	r3, [r7, #8]
  return(result);
 800ee26:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee28:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ee2a:	2301      	movs	r3, #1
 800ee2c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee2e:	68fb      	ldr	r3, [r7, #12]
 800ee30:	f383 8810 	msr	PRIMASK, r3
}
 800ee34:	46c0      	nop			@ (mov r8, r8)
 800ee36:	687b      	ldr	r3, [r7, #4]
 800ee38:	681b      	ldr	r3, [r3, #0]
 800ee3a:	681a      	ldr	r2, [r3, #0]
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	681b      	ldr	r3, [r3, #0]
 800ee40:	2110      	movs	r1, #16
 800ee42:	438a      	bics	r2, r1
 800ee44:	601a      	str	r2, [r3, #0]
 800ee46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee48:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	f383 8810 	msr	PRIMASK, r3
}
 800ee50:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee52:	687b      	ldr	r3, [r7, #4]
 800ee54:	2280      	movs	r2, #128	@ 0x80
 800ee56:	2120      	movs	r1, #32
 800ee58:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee5a:	687b      	ldr	r3, [r7, #4]
 800ee5c:	2200      	movs	r2, #0
 800ee5e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2200      	movs	r2, #0
 800ee64:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800ee66:	46c0      	nop			@ (mov r8, r8)
 800ee68:	46bd      	mov	sp, r7
 800ee6a:	b00e      	add	sp, #56	@ 0x38
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	46c0      	nop			@ (mov r8, r8)
 800ee70:	fffffedf 	.word	0xfffffedf

0800ee74 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b08c      	sub	sp, #48	@ 0x30
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ee7c:	687b      	ldr	r3, [r7, #4]
 800ee7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee80:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ee82:	687b      	ldr	r3, [r7, #4]
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	681b      	ldr	r3, [r3, #0]
 800ee88:	2220      	movs	r2, #32
 800ee8a:	4013      	ands	r3, r2
 800ee8c:	d135      	bne.n	800eefa <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800ee8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee90:	2252      	movs	r2, #82	@ 0x52
 800ee92:	2100      	movs	r1, #0
 800ee94:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ee96:	f3ef 8310 	mrs	r3, PRIMASK
 800ee9a:	60fb      	str	r3, [r7, #12]
  return(result);
 800ee9c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ee9e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800eea0:	2301      	movs	r3, #1
 800eea2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eea4:	693b      	ldr	r3, [r7, #16]
 800eea6:	f383 8810 	msr	PRIMASK, r3
}
 800eeaa:	46c0      	nop			@ (mov r8, r8)
 800eeac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeae:	681b      	ldr	r3, [r3, #0]
 800eeb0:	689a      	ldr	r2, [r3, #8]
 800eeb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eeb4:	681b      	ldr	r3, [r3, #0]
 800eeb6:	2180      	movs	r1, #128	@ 0x80
 800eeb8:	438a      	bics	r2, r1
 800eeba:	609a      	str	r2, [r3, #8]
 800eebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eebe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eec0:	697b      	ldr	r3, [r7, #20]
 800eec2:	f383 8810 	msr	PRIMASK, r3
}
 800eec6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800eec8:	f3ef 8310 	mrs	r3, PRIMASK
 800eecc:	61bb      	str	r3, [r7, #24]
  return(result);
 800eece:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800eed0:	627b      	str	r3, [r7, #36]	@ 0x24
 800eed2:	2301      	movs	r3, #1
 800eed4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eed6:	69fb      	ldr	r3, [r7, #28]
 800eed8:	f383 8810 	msr	PRIMASK, r3
}
 800eedc:	46c0      	nop			@ (mov r8, r8)
 800eede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee0:	681b      	ldr	r3, [r3, #0]
 800eee2:	681a      	ldr	r2, [r3, #0]
 800eee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2140      	movs	r1, #64	@ 0x40
 800eeea:	430a      	orrs	r2, r1
 800eeec:	601a      	str	r2, [r3, #0]
 800eeee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800eef0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	f383 8810 	msr	PRIMASK, r3
}
 800eef8:	e006      	b.n	800ef08 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800eefa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eefc:	228c      	movs	r2, #140	@ 0x8c
 800eefe:	589b      	ldr	r3, [r3, r2]
 800ef00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ef02:	0010      	movs	r0, r2
 800ef04:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800ef06:	46c0      	nop			@ (mov r8, r8)
 800ef08:	46c0      	nop			@ (mov r8, r8)
 800ef0a:	46bd      	mov	sp, r7
 800ef0c:	b00c      	add	sp, #48	@ 0x30
 800ef0e:	bd80      	pop	{r7, pc}

0800ef10 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800ef10:	b580      	push	{r7, lr}
 800ef12:	b084      	sub	sp, #16
 800ef14:	af00      	add	r7, sp, #0
 800ef16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef1c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800ef1e:	68fb      	ldr	r3, [r7, #12]
 800ef20:	2288      	movs	r2, #136	@ 0x88
 800ef22:	589b      	ldr	r3, [r3, r2]
 800ef24:	68fa      	ldr	r2, [r7, #12]
 800ef26:	0010      	movs	r0, r2
 800ef28:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ef2a:	46c0      	nop			@ (mov r8, r8)
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	b004      	add	sp, #16
 800ef30:	bd80      	pop	{r7, pc}
	...

0800ef34 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ef34:	b580      	push	{r7, lr}
 800ef36:	b094      	sub	sp, #80	@ 0x50
 800ef38:	af00      	add	r7, sp, #0
 800ef3a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef40:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	2220      	movs	r2, #32
 800ef4a:	4013      	ands	r3, r2
 800ef4c:	d16f      	bne.n	800f02e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800ef4e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef50:	225a      	movs	r2, #90	@ 0x5a
 800ef52:	2100      	movs	r1, #0
 800ef54:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef56:	f3ef 8310 	mrs	r3, PRIMASK
 800ef5a:	61bb      	str	r3, [r7, #24]
  return(result);
 800ef5c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ef5e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800ef60:	2301      	movs	r3, #1
 800ef62:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef64:	69fb      	ldr	r3, [r7, #28]
 800ef66:	f383 8810 	msr	PRIMASK, r3
}
 800ef6a:	46c0      	nop			@ (mov r8, r8)
 800ef6c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef6e:	681b      	ldr	r3, [r3, #0]
 800ef70:	681a      	ldr	r2, [r3, #0]
 800ef72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800ef74:	681b      	ldr	r3, [r3, #0]
 800ef76:	493b      	ldr	r1, [pc, #236]	@ (800f064 <UART_DMAReceiveCplt+0x130>)
 800ef78:	400a      	ands	r2, r1
 800ef7a:	601a      	str	r2, [r3, #0]
 800ef7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800ef7e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef80:	6a3b      	ldr	r3, [r7, #32]
 800ef82:	f383 8810 	msr	PRIMASK, r3
}
 800ef86:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ef88:	f3ef 8310 	mrs	r3, PRIMASK
 800ef8c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800ef8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef90:	647b      	str	r3, [r7, #68]	@ 0x44
 800ef92:	2301      	movs	r3, #1
 800ef94:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ef96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ef98:	f383 8810 	msr	PRIMASK, r3
}
 800ef9c:	46c0      	nop			@ (mov r8, r8)
 800ef9e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efa0:	681b      	ldr	r3, [r3, #0]
 800efa2:	689a      	ldr	r2, [r3, #8]
 800efa4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	2101      	movs	r1, #1
 800efaa:	438a      	bics	r2, r1
 800efac:	609a      	str	r2, [r3, #8]
 800efae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800efb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800efb4:	f383 8810 	msr	PRIMASK, r3
}
 800efb8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800efba:	f3ef 8310 	mrs	r3, PRIMASK
 800efbe:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800efc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800efc2:	643b      	str	r3, [r7, #64]	@ 0x40
 800efc4:	2301      	movs	r3, #1
 800efc6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800efca:	f383 8810 	msr	PRIMASK, r3
}
 800efce:	46c0      	nop			@ (mov r8, r8)
 800efd0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	689a      	ldr	r2, [r3, #8]
 800efd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	2140      	movs	r1, #64	@ 0x40
 800efdc:	438a      	bics	r2, r1
 800efde:	609a      	str	r2, [r3, #8]
 800efe0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800efe2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800efe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800efe6:	f383 8810 	msr	PRIMASK, r3
}
 800efea:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800efec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800efee:	2280      	movs	r2, #128	@ 0x80
 800eff0:	2120      	movs	r1, #32
 800eff2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800eff4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800eff6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800eff8:	2b01      	cmp	r3, #1
 800effa:	d118      	bne.n	800f02e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800effc:	f3ef 8310 	mrs	r3, PRIMASK
 800f000:	60fb      	str	r3, [r7, #12]
  return(result);
 800f002:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f004:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800f006:	2301      	movs	r3, #1
 800f008:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f00a:	693b      	ldr	r3, [r7, #16]
 800f00c:	f383 8810 	msr	PRIMASK, r3
}
 800f010:	46c0      	nop			@ (mov r8, r8)
 800f012:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f014:	681b      	ldr	r3, [r3, #0]
 800f016:	681a      	ldr	r2, [r3, #0]
 800f018:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	2110      	movs	r1, #16
 800f01e:	438a      	bics	r2, r1
 800f020:	601a      	str	r2, [r3, #0]
 800f022:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f024:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f026:	697b      	ldr	r3, [r7, #20]
 800f028:	f383 8810 	msr	PRIMASK, r3
}
 800f02c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800f02e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f030:	2200      	movs	r2, #0
 800f032:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f034:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f036:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f038:	2b01      	cmp	r3, #1
 800f03a:	d109      	bne.n	800f050 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800f03c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f03e:	22ac      	movs	r2, #172	@ 0xac
 800f040:	589b      	ldr	r3, [r3, r2]
 800f042:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f044:	2158      	movs	r1, #88	@ 0x58
 800f046:	5a51      	ldrh	r1, [r2, r1]
 800f048:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f04a:	0010      	movs	r0, r2
 800f04c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f04e:	e005      	b.n	800f05c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800f050:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f052:	2294      	movs	r2, #148	@ 0x94
 800f054:	589b      	ldr	r3, [r3, r2]
 800f056:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800f058:	0010      	movs	r0, r2
 800f05a:	4798      	blx	r3
}
 800f05c:	46c0      	nop			@ (mov r8, r8)
 800f05e:	46bd      	mov	sp, r7
 800f060:	b014      	add	sp, #80	@ 0x50
 800f062:	bd80      	pop	{r7, pc}
 800f064:	fffffeff 	.word	0xfffffeff

0800f068 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f068:	b580      	push	{r7, lr}
 800f06a:	b084      	sub	sp, #16
 800f06c:	af00      	add	r7, sp, #0
 800f06e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f074:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800f076:	68fb      	ldr	r3, [r7, #12]
 800f078:	2201      	movs	r2, #1
 800f07a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f07c:	68fb      	ldr	r3, [r7, #12]
 800f07e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800f080:	2b01      	cmp	r3, #1
 800f082:	d10b      	bne.n	800f09c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	22ac      	movs	r2, #172	@ 0xac
 800f088:	589b      	ldr	r3, [r3, r2]
 800f08a:	68fa      	ldr	r2, [r7, #12]
 800f08c:	2158      	movs	r1, #88	@ 0x58
 800f08e:	5a52      	ldrh	r2, [r2, r1]
 800f090:	0852      	lsrs	r2, r2, #1
 800f092:	b291      	uxth	r1, r2
 800f094:	68fa      	ldr	r2, [r7, #12]
 800f096:	0010      	movs	r0, r2
 800f098:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800f09a:	e005      	b.n	800f0a8 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2290      	movs	r2, #144	@ 0x90
 800f0a0:	589b      	ldr	r3, [r3, r2]
 800f0a2:	68fa      	ldr	r2, [r7, #12]
 800f0a4:	0010      	movs	r0, r2
 800f0a6:	4798      	blx	r3
}
 800f0a8:	46c0      	nop			@ (mov r8, r8)
 800f0aa:	46bd      	mov	sp, r7
 800f0ac:	b004      	add	sp, #16
 800f0ae:	bd80      	pop	{r7, pc}

0800f0b0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800f0b0:	b580      	push	{r7, lr}
 800f0b2:	b086      	sub	sp, #24
 800f0b4:	af00      	add	r7, sp, #0
 800f0b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f0b8:	687b      	ldr	r3, [r7, #4]
 800f0ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f0bc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800f0be:	697b      	ldr	r3, [r7, #20]
 800f0c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f0c2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	2280      	movs	r2, #128	@ 0x80
 800f0c8:	589b      	ldr	r3, [r3, r2]
 800f0ca:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	689b      	ldr	r3, [r3, #8]
 800f0d2:	2280      	movs	r2, #128	@ 0x80
 800f0d4:	4013      	ands	r3, r2
 800f0d6:	2b80      	cmp	r3, #128	@ 0x80
 800f0d8:	d10a      	bne.n	800f0f0 <UART_DMAError+0x40>
 800f0da:	693b      	ldr	r3, [r7, #16]
 800f0dc:	2b21      	cmp	r3, #33	@ 0x21
 800f0de:	d107      	bne.n	800f0f0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	2252      	movs	r2, #82	@ 0x52
 800f0e4:	2100      	movs	r1, #0
 800f0e6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	0018      	movs	r0, r3
 800f0ec:	f7ff fe3a 	bl	800ed64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800f0f0:	697b      	ldr	r3, [r7, #20]
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	689b      	ldr	r3, [r3, #8]
 800f0f6:	2240      	movs	r2, #64	@ 0x40
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	2b40      	cmp	r3, #64	@ 0x40
 800f0fc:	d10a      	bne.n	800f114 <UART_DMAError+0x64>
 800f0fe:	68fb      	ldr	r3, [r7, #12]
 800f100:	2b22      	cmp	r3, #34	@ 0x22
 800f102:	d107      	bne.n	800f114 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800f104:	697b      	ldr	r3, [r7, #20]
 800f106:	225a      	movs	r2, #90	@ 0x5a
 800f108:	2100      	movs	r1, #0
 800f10a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800f10c:	697b      	ldr	r3, [r7, #20]
 800f10e:	0018      	movs	r0, r3
 800f110:	f7ff fe4c 	bl	800edac <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800f114:	697b      	ldr	r3, [r7, #20]
 800f116:	2284      	movs	r2, #132	@ 0x84
 800f118:	589b      	ldr	r3, [r3, r2]
 800f11a:	2210      	movs	r2, #16
 800f11c:	431a      	orrs	r2, r3
 800f11e:	697b      	ldr	r3, [r7, #20]
 800f120:	2184      	movs	r1, #132	@ 0x84
 800f122:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800f124:	697b      	ldr	r3, [r7, #20]
 800f126:	2298      	movs	r2, #152	@ 0x98
 800f128:	589b      	ldr	r3, [r3, r2]
 800f12a:	697a      	ldr	r2, [r7, #20]
 800f12c:	0010      	movs	r0, r2
 800f12e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f130:	46c0      	nop			@ (mov r8, r8)
 800f132:	46bd      	mov	sp, r7
 800f134:	b006      	add	sp, #24
 800f136:	bd80      	pop	{r7, pc}

0800f138 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800f138:	b580      	push	{r7, lr}
 800f13a:	b084      	sub	sp, #16
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800f140:	687b      	ldr	r3, [r7, #4]
 800f142:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f144:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	225a      	movs	r2, #90	@ 0x5a
 800f14a:	2100      	movs	r1, #0
 800f14c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	2252      	movs	r2, #82	@ 0x52
 800f152:	2100      	movs	r1, #0
 800f154:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	2298      	movs	r2, #152	@ 0x98
 800f15a:	589b      	ldr	r3, [r3, r2]
 800f15c:	68fa      	ldr	r2, [r7, #12]
 800f15e:	0010      	movs	r0, r2
 800f160:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f162:	46c0      	nop			@ (mov r8, r8)
 800f164:	46bd      	mov	sp, r7
 800f166:	b004      	add	sp, #16
 800f168:	bd80      	pop	{r7, pc}

0800f16a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800f16a:	b580      	push	{r7, lr}
 800f16c:	b086      	sub	sp, #24
 800f16e:	af00      	add	r7, sp, #0
 800f170:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800f172:	f3ef 8310 	mrs	r3, PRIMASK
 800f176:	60bb      	str	r3, [r7, #8]
  return(result);
 800f178:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800f17a:	617b      	str	r3, [r7, #20]
 800f17c:	2301      	movs	r3, #1
 800f17e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	f383 8810 	msr	PRIMASK, r3
}
 800f186:	46c0      	nop			@ (mov r8, r8)
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	681b      	ldr	r3, [r3, #0]
 800f18c:	681a      	ldr	r2, [r3, #0]
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2140      	movs	r1, #64	@ 0x40
 800f194:	438a      	bics	r2, r1
 800f196:	601a      	str	r2, [r3, #0]
 800f198:	697b      	ldr	r3, [r7, #20]
 800f19a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800f19c:	693b      	ldr	r3, [r7, #16]
 800f19e:	f383 8810 	msr	PRIMASK, r3
}
 800f1a2:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	2220      	movs	r2, #32
 800f1a8:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800f1aa:	687b      	ldr	r3, [r7, #4]
 800f1ac:	2200      	movs	r2, #0
 800f1ae:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	228c      	movs	r2, #140	@ 0x8c
 800f1b4:	589b      	ldr	r3, [r3, r2]
 800f1b6:	687a      	ldr	r2, [r7, #4]
 800f1b8:	0010      	movs	r0, r2
 800f1ba:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800f1bc:	46c0      	nop			@ (mov r8, r8)
 800f1be:	46bd      	mov	sp, r7
 800f1c0:	b006      	add	sp, #24
 800f1c2:	bd80      	pop	{r7, pc}

0800f1c4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800f1c4:	b580      	push	{r7, lr}
 800f1c6:	b082      	sub	sp, #8
 800f1c8:	af00      	add	r7, sp, #0
 800f1ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800f1cc:	46c0      	nop			@ (mov r8, r8)
 800f1ce:	46bd      	mov	sp, r7
 800f1d0:	b002      	add	sp, #8
 800f1d2:	bd80      	pop	{r7, pc}

0800f1d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800f1d4:	b580      	push	{r7, lr}
 800f1d6:	b084      	sub	sp, #16
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800f1dc:	4b09      	ldr	r3, [pc, #36]	@ (800f204 <USB_DisableGlobalInt+0x30>)
 800f1de:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	2240      	movs	r2, #64	@ 0x40
 800f1e4:	5a9b      	ldrh	r3, [r3, r2]
 800f1e6:	b29b      	uxth	r3, r3
 800f1e8:	68fa      	ldr	r2, [r7, #12]
 800f1ea:	b292      	uxth	r2, r2
 800f1ec:	43d2      	mvns	r2, r2
 800f1ee:	b292      	uxth	r2, r2
 800f1f0:	4013      	ands	r3, r2
 800f1f2:	b299      	uxth	r1, r3
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	2240      	movs	r2, #64	@ 0x40
 800f1f8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f1fa:	2300      	movs	r3, #0
}
 800f1fc:	0018      	movs	r0, r3
 800f1fe:	46bd      	mov	sp, r7
 800f200:	b004      	add	sp, #16
 800f202:	bd80      	pop	{r7, pc}
 800f204:	0000bf80 	.word	0x0000bf80

0800f208 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800f208:	b084      	sub	sp, #16
 800f20a:	b590      	push	{r4, r7, lr}
 800f20c:	b083      	sub	sp, #12
 800f20e:	af00      	add	r7, sp, #0
 800f210:	6078      	str	r0, [r7, #4]
 800f212:	2004      	movs	r0, #4
 800f214:	2410      	movs	r4, #16
 800f216:	1900      	adds	r0, r0, r4
 800f218:	2408      	movs	r4, #8
 800f21a:	46a4      	mov	ip, r4
 800f21c:	44bc      	add	ip, r7
 800f21e:	4460      	add	r0, ip
 800f220:	6001      	str	r1, [r0, #0]
 800f222:	6042      	str	r2, [r0, #4]
 800f224:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	2240      	movs	r2, #64	@ 0x40
 800f22a:	2101      	movs	r1, #1
 800f22c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2240      	movs	r2, #64	@ 0x40
 800f232:	2100      	movs	r1, #0
 800f234:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2244      	movs	r2, #68	@ 0x44
 800f23a:	2100      	movs	r1, #0
 800f23c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	2250      	movs	r2, #80	@ 0x50
 800f242:	2100      	movs	r1, #0
 800f244:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800f246:	2300      	movs	r3, #0
}
 800f248:	0018      	movs	r0, r3
 800f24a:	46bd      	mov	sp, r7
 800f24c:	b003      	add	sp, #12
 800f24e:	bc90      	pop	{r4, r7}
 800f250:	bc08      	pop	{r3}
 800f252:	b004      	add	sp, #16
 800f254:	4718      	bx	r3

0800f256 <__cvt>:
 800f256:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f258:	001f      	movs	r7, r3
 800f25a:	2300      	movs	r3, #0
 800f25c:	0016      	movs	r6, r2
 800f25e:	b08b      	sub	sp, #44	@ 0x2c
 800f260:	429f      	cmp	r7, r3
 800f262:	da04      	bge.n	800f26e <__cvt+0x18>
 800f264:	2180      	movs	r1, #128	@ 0x80
 800f266:	0609      	lsls	r1, r1, #24
 800f268:	187b      	adds	r3, r7, r1
 800f26a:	001f      	movs	r7, r3
 800f26c:	232d      	movs	r3, #45	@ 0x2d
 800f26e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f270:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800f272:	7013      	strb	r3, [r2, #0]
 800f274:	2320      	movs	r3, #32
 800f276:	2203      	movs	r2, #3
 800f278:	439d      	bics	r5, r3
 800f27a:	2d46      	cmp	r5, #70	@ 0x46
 800f27c:	d007      	beq.n	800f28e <__cvt+0x38>
 800f27e:	002b      	movs	r3, r5
 800f280:	3b45      	subs	r3, #69	@ 0x45
 800f282:	4259      	negs	r1, r3
 800f284:	414b      	adcs	r3, r1
 800f286:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800f288:	3a01      	subs	r2, #1
 800f28a:	18cb      	adds	r3, r1, r3
 800f28c:	9310      	str	r3, [sp, #64]	@ 0x40
 800f28e:	ab09      	add	r3, sp, #36	@ 0x24
 800f290:	9304      	str	r3, [sp, #16]
 800f292:	ab08      	add	r3, sp, #32
 800f294:	9303      	str	r3, [sp, #12]
 800f296:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f298:	9200      	str	r2, [sp, #0]
 800f29a:	9302      	str	r3, [sp, #8]
 800f29c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f29e:	0032      	movs	r2, r6
 800f2a0:	9301      	str	r3, [sp, #4]
 800f2a2:	003b      	movs	r3, r7
 800f2a4:	f000 fefc 	bl	80100a0 <_dtoa_r>
 800f2a8:	0004      	movs	r4, r0
 800f2aa:	2d47      	cmp	r5, #71	@ 0x47
 800f2ac:	d11b      	bne.n	800f2e6 <__cvt+0x90>
 800f2ae:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800f2b0:	07db      	lsls	r3, r3, #31
 800f2b2:	d511      	bpl.n	800f2d8 <__cvt+0x82>
 800f2b4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f2b6:	18c3      	adds	r3, r0, r3
 800f2b8:	9307      	str	r3, [sp, #28]
 800f2ba:	2200      	movs	r2, #0
 800f2bc:	2300      	movs	r3, #0
 800f2be:	0030      	movs	r0, r6
 800f2c0:	0039      	movs	r1, r7
 800f2c2:	f7f1 f8c3 	bl	800044c <__aeabi_dcmpeq>
 800f2c6:	2800      	cmp	r0, #0
 800f2c8:	d001      	beq.n	800f2ce <__cvt+0x78>
 800f2ca:	9b07      	ldr	r3, [sp, #28]
 800f2cc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2ce:	2230      	movs	r2, #48	@ 0x30
 800f2d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2d2:	9907      	ldr	r1, [sp, #28]
 800f2d4:	428b      	cmp	r3, r1
 800f2d6:	d320      	bcc.n	800f31a <__cvt+0xc4>
 800f2d8:	0020      	movs	r0, r4
 800f2da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2dc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f2de:	1b1b      	subs	r3, r3, r4
 800f2e0:	6013      	str	r3, [r2, #0]
 800f2e2:	b00b      	add	sp, #44	@ 0x2c
 800f2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f2e6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f2e8:	18c3      	adds	r3, r0, r3
 800f2ea:	9307      	str	r3, [sp, #28]
 800f2ec:	2d46      	cmp	r5, #70	@ 0x46
 800f2ee:	d1e4      	bne.n	800f2ba <__cvt+0x64>
 800f2f0:	7803      	ldrb	r3, [r0, #0]
 800f2f2:	2b30      	cmp	r3, #48	@ 0x30
 800f2f4:	d10c      	bne.n	800f310 <__cvt+0xba>
 800f2f6:	2200      	movs	r2, #0
 800f2f8:	2300      	movs	r3, #0
 800f2fa:	0030      	movs	r0, r6
 800f2fc:	0039      	movs	r1, r7
 800f2fe:	f7f1 f8a5 	bl	800044c <__aeabi_dcmpeq>
 800f302:	2800      	cmp	r0, #0
 800f304:	d104      	bne.n	800f310 <__cvt+0xba>
 800f306:	2301      	movs	r3, #1
 800f308:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800f30a:	1a9b      	subs	r3, r3, r2
 800f30c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f30e:	6013      	str	r3, [r2, #0]
 800f310:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f312:	9a07      	ldr	r2, [sp, #28]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	18d3      	adds	r3, r2, r3
 800f318:	e7ce      	b.n	800f2b8 <__cvt+0x62>
 800f31a:	1c59      	adds	r1, r3, #1
 800f31c:	9109      	str	r1, [sp, #36]	@ 0x24
 800f31e:	701a      	strb	r2, [r3, #0]
 800f320:	e7d6      	b.n	800f2d0 <__cvt+0x7a>

0800f322 <__exponent>:
 800f322:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f324:	232b      	movs	r3, #43	@ 0x2b
 800f326:	0005      	movs	r5, r0
 800f328:	000c      	movs	r4, r1
 800f32a:	b085      	sub	sp, #20
 800f32c:	7002      	strb	r2, [r0, #0]
 800f32e:	2900      	cmp	r1, #0
 800f330:	da01      	bge.n	800f336 <__exponent+0x14>
 800f332:	424c      	negs	r4, r1
 800f334:	3302      	adds	r3, #2
 800f336:	706b      	strb	r3, [r5, #1]
 800f338:	2c09      	cmp	r4, #9
 800f33a:	dd2c      	ble.n	800f396 <__exponent+0x74>
 800f33c:	ab02      	add	r3, sp, #8
 800f33e:	1dde      	adds	r6, r3, #7
 800f340:	0020      	movs	r0, r4
 800f342:	210a      	movs	r1, #10
 800f344:	f7f1 f86c 	bl	8000420 <__aeabi_idivmod>
 800f348:	0037      	movs	r7, r6
 800f34a:	3130      	adds	r1, #48	@ 0x30
 800f34c:	3e01      	subs	r6, #1
 800f34e:	0020      	movs	r0, r4
 800f350:	7031      	strb	r1, [r6, #0]
 800f352:	210a      	movs	r1, #10
 800f354:	9401      	str	r4, [sp, #4]
 800f356:	f7f0 ff7d 	bl	8000254 <__divsi3>
 800f35a:	9b01      	ldr	r3, [sp, #4]
 800f35c:	0004      	movs	r4, r0
 800f35e:	2b63      	cmp	r3, #99	@ 0x63
 800f360:	dcee      	bgt.n	800f340 <__exponent+0x1e>
 800f362:	1eba      	subs	r2, r7, #2
 800f364:	1ca8      	adds	r0, r5, #2
 800f366:	0001      	movs	r1, r0
 800f368:	0013      	movs	r3, r2
 800f36a:	3430      	adds	r4, #48	@ 0x30
 800f36c:	7014      	strb	r4, [r2, #0]
 800f36e:	ac02      	add	r4, sp, #8
 800f370:	3407      	adds	r4, #7
 800f372:	429c      	cmp	r4, r3
 800f374:	d80a      	bhi.n	800f38c <__exponent+0x6a>
 800f376:	2300      	movs	r3, #0
 800f378:	42a2      	cmp	r2, r4
 800f37a:	d803      	bhi.n	800f384 <__exponent+0x62>
 800f37c:	3309      	adds	r3, #9
 800f37e:	aa02      	add	r2, sp, #8
 800f380:	189b      	adds	r3, r3, r2
 800f382:	1bdb      	subs	r3, r3, r7
 800f384:	18c0      	adds	r0, r0, r3
 800f386:	1b40      	subs	r0, r0, r5
 800f388:	b005      	add	sp, #20
 800f38a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f38c:	781c      	ldrb	r4, [r3, #0]
 800f38e:	3301      	adds	r3, #1
 800f390:	700c      	strb	r4, [r1, #0]
 800f392:	3101      	adds	r1, #1
 800f394:	e7eb      	b.n	800f36e <__exponent+0x4c>
 800f396:	2330      	movs	r3, #48	@ 0x30
 800f398:	18e4      	adds	r4, r4, r3
 800f39a:	70ab      	strb	r3, [r5, #2]
 800f39c:	1d28      	adds	r0, r5, #4
 800f39e:	70ec      	strb	r4, [r5, #3]
 800f3a0:	e7f1      	b.n	800f386 <__exponent+0x64>
	...

0800f3a4 <_printf_float>:
 800f3a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3a6:	b097      	sub	sp, #92	@ 0x5c
 800f3a8:	000d      	movs	r5, r1
 800f3aa:	920a      	str	r2, [sp, #40]	@ 0x28
 800f3ac:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800f3ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f3b0:	9009      	str	r0, [sp, #36]	@ 0x24
 800f3b2:	f000 fd5d 	bl	800fe70 <_localeconv_r>
 800f3b6:	6803      	ldr	r3, [r0, #0]
 800f3b8:	0018      	movs	r0, r3
 800f3ba:	930d      	str	r3, [sp, #52]	@ 0x34
 800f3bc:	f7f0 fea4 	bl	8000108 <strlen>
 800f3c0:	2300      	movs	r3, #0
 800f3c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800f3c4:	9314      	str	r3, [sp, #80]	@ 0x50
 800f3c6:	7e2b      	ldrb	r3, [r5, #24]
 800f3c8:	2207      	movs	r2, #7
 800f3ca:	930c      	str	r3, [sp, #48]	@ 0x30
 800f3cc:	682b      	ldr	r3, [r5, #0]
 800f3ce:	930e      	str	r3, [sp, #56]	@ 0x38
 800f3d0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800f3d2:	6823      	ldr	r3, [r4, #0]
 800f3d4:	05c9      	lsls	r1, r1, #23
 800f3d6:	d545      	bpl.n	800f464 <_printf_float+0xc0>
 800f3d8:	189b      	adds	r3, r3, r2
 800f3da:	4393      	bics	r3, r2
 800f3dc:	001a      	movs	r2, r3
 800f3de:	3208      	adds	r2, #8
 800f3e0:	6022      	str	r2, [r4, #0]
 800f3e2:	2201      	movs	r2, #1
 800f3e4:	681e      	ldr	r6, [r3, #0]
 800f3e6:	685f      	ldr	r7, [r3, #4]
 800f3e8:	007b      	lsls	r3, r7, #1
 800f3ea:	085b      	lsrs	r3, r3, #1
 800f3ec:	9311      	str	r3, [sp, #68]	@ 0x44
 800f3ee:	9610      	str	r6, [sp, #64]	@ 0x40
 800f3f0:	64ae      	str	r6, [r5, #72]	@ 0x48
 800f3f2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800f3f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f3f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f3f8:	4ba7      	ldr	r3, [pc, #668]	@ (800f698 <_printf_float+0x2f4>)
 800f3fa:	4252      	negs	r2, r2
 800f3fc:	f7f3 ff00 	bl	8003200 <__aeabi_dcmpun>
 800f400:	2800      	cmp	r0, #0
 800f402:	d131      	bne.n	800f468 <_printf_float+0xc4>
 800f404:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800f406:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800f408:	2201      	movs	r2, #1
 800f40a:	4ba3      	ldr	r3, [pc, #652]	@ (800f698 <_printf_float+0x2f4>)
 800f40c:	4252      	negs	r2, r2
 800f40e:	f7f1 f82d 	bl	800046c <__aeabi_dcmple>
 800f412:	2800      	cmp	r0, #0
 800f414:	d128      	bne.n	800f468 <_printf_float+0xc4>
 800f416:	2200      	movs	r2, #0
 800f418:	2300      	movs	r3, #0
 800f41a:	0030      	movs	r0, r6
 800f41c:	0039      	movs	r1, r7
 800f41e:	f7f1 f81b 	bl	8000458 <__aeabi_dcmplt>
 800f422:	2800      	cmp	r0, #0
 800f424:	d003      	beq.n	800f42e <_printf_float+0x8a>
 800f426:	002b      	movs	r3, r5
 800f428:	222d      	movs	r2, #45	@ 0x2d
 800f42a:	3343      	adds	r3, #67	@ 0x43
 800f42c:	701a      	strb	r2, [r3, #0]
 800f42e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f430:	4f9a      	ldr	r7, [pc, #616]	@ (800f69c <_printf_float+0x2f8>)
 800f432:	2b47      	cmp	r3, #71	@ 0x47
 800f434:	d900      	bls.n	800f438 <_printf_float+0x94>
 800f436:	4f9a      	ldr	r7, [pc, #616]	@ (800f6a0 <_printf_float+0x2fc>)
 800f438:	2303      	movs	r3, #3
 800f43a:	2400      	movs	r4, #0
 800f43c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f43e:	612b      	str	r3, [r5, #16]
 800f440:	3301      	adds	r3, #1
 800f442:	439a      	bics	r2, r3
 800f444:	602a      	str	r2, [r5, #0]
 800f446:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f448:	0029      	movs	r1, r5
 800f44a:	9300      	str	r3, [sp, #0]
 800f44c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f44e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f450:	aa15      	add	r2, sp, #84	@ 0x54
 800f452:	f000 f9e5 	bl	800f820 <_printf_common>
 800f456:	3001      	adds	r0, #1
 800f458:	d000      	beq.n	800f45c <_printf_float+0xb8>
 800f45a:	e09f      	b.n	800f59c <_printf_float+0x1f8>
 800f45c:	2001      	movs	r0, #1
 800f45e:	4240      	negs	r0, r0
 800f460:	b017      	add	sp, #92	@ 0x5c
 800f462:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f464:	3307      	adds	r3, #7
 800f466:	e7b8      	b.n	800f3da <_printf_float+0x36>
 800f468:	0032      	movs	r2, r6
 800f46a:	003b      	movs	r3, r7
 800f46c:	0030      	movs	r0, r6
 800f46e:	0039      	movs	r1, r7
 800f470:	f7f3 fec6 	bl	8003200 <__aeabi_dcmpun>
 800f474:	2800      	cmp	r0, #0
 800f476:	d00b      	beq.n	800f490 <_printf_float+0xec>
 800f478:	2f00      	cmp	r7, #0
 800f47a:	da03      	bge.n	800f484 <_printf_float+0xe0>
 800f47c:	002b      	movs	r3, r5
 800f47e:	222d      	movs	r2, #45	@ 0x2d
 800f480:	3343      	adds	r3, #67	@ 0x43
 800f482:	701a      	strb	r2, [r3, #0]
 800f484:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f486:	4f87      	ldr	r7, [pc, #540]	@ (800f6a4 <_printf_float+0x300>)
 800f488:	2b47      	cmp	r3, #71	@ 0x47
 800f48a:	d9d5      	bls.n	800f438 <_printf_float+0x94>
 800f48c:	4f86      	ldr	r7, [pc, #536]	@ (800f6a8 <_printf_float+0x304>)
 800f48e:	e7d3      	b.n	800f438 <_printf_float+0x94>
 800f490:	2220      	movs	r2, #32
 800f492:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800f494:	686b      	ldr	r3, [r5, #4]
 800f496:	4394      	bics	r4, r2
 800f498:	1c5a      	adds	r2, r3, #1
 800f49a:	d146      	bne.n	800f52a <_printf_float+0x186>
 800f49c:	3307      	adds	r3, #7
 800f49e:	606b      	str	r3, [r5, #4]
 800f4a0:	2380      	movs	r3, #128	@ 0x80
 800f4a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f4a4:	00db      	lsls	r3, r3, #3
 800f4a6:	4313      	orrs	r3, r2
 800f4a8:	2200      	movs	r2, #0
 800f4aa:	602b      	str	r3, [r5, #0]
 800f4ac:	9206      	str	r2, [sp, #24]
 800f4ae:	aa14      	add	r2, sp, #80	@ 0x50
 800f4b0:	9205      	str	r2, [sp, #20]
 800f4b2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f4b4:	a90a      	add	r1, sp, #40	@ 0x28
 800f4b6:	9204      	str	r2, [sp, #16]
 800f4b8:	aa13      	add	r2, sp, #76	@ 0x4c
 800f4ba:	9203      	str	r2, [sp, #12]
 800f4bc:	2223      	movs	r2, #35	@ 0x23
 800f4be:	1852      	adds	r2, r2, r1
 800f4c0:	9202      	str	r2, [sp, #8]
 800f4c2:	9301      	str	r3, [sp, #4]
 800f4c4:	686b      	ldr	r3, [r5, #4]
 800f4c6:	0032      	movs	r2, r6
 800f4c8:	9300      	str	r3, [sp, #0]
 800f4ca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f4cc:	003b      	movs	r3, r7
 800f4ce:	f7ff fec2 	bl	800f256 <__cvt>
 800f4d2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800f4d4:	0007      	movs	r7, r0
 800f4d6:	2c47      	cmp	r4, #71	@ 0x47
 800f4d8:	d12d      	bne.n	800f536 <_printf_float+0x192>
 800f4da:	1cd3      	adds	r3, r2, #3
 800f4dc:	db02      	blt.n	800f4e4 <_printf_float+0x140>
 800f4de:	686b      	ldr	r3, [r5, #4]
 800f4e0:	429a      	cmp	r2, r3
 800f4e2:	dd48      	ble.n	800f576 <_printf_float+0x1d2>
 800f4e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f4e6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f4e8:	3b02      	subs	r3, #2
 800f4ea:	b2db      	uxtb	r3, r3
 800f4ec:	930c      	str	r3, [sp, #48]	@ 0x30
 800f4ee:	0028      	movs	r0, r5
 800f4f0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f4f2:	3901      	subs	r1, #1
 800f4f4:	3050      	adds	r0, #80	@ 0x50
 800f4f6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800f4f8:	f7ff ff13 	bl	800f322 <__exponent>
 800f4fc:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800f4fe:	0004      	movs	r4, r0
 800f500:	1813      	adds	r3, r2, r0
 800f502:	612b      	str	r3, [r5, #16]
 800f504:	2a01      	cmp	r2, #1
 800f506:	dc02      	bgt.n	800f50e <_printf_float+0x16a>
 800f508:	682a      	ldr	r2, [r5, #0]
 800f50a:	07d2      	lsls	r2, r2, #31
 800f50c:	d501      	bpl.n	800f512 <_printf_float+0x16e>
 800f50e:	3301      	adds	r3, #1
 800f510:	612b      	str	r3, [r5, #16]
 800f512:	2323      	movs	r3, #35	@ 0x23
 800f514:	aa0a      	add	r2, sp, #40	@ 0x28
 800f516:	189b      	adds	r3, r3, r2
 800f518:	781b      	ldrb	r3, [r3, #0]
 800f51a:	2b00      	cmp	r3, #0
 800f51c:	d100      	bne.n	800f520 <_printf_float+0x17c>
 800f51e:	e792      	b.n	800f446 <_printf_float+0xa2>
 800f520:	002b      	movs	r3, r5
 800f522:	222d      	movs	r2, #45	@ 0x2d
 800f524:	3343      	adds	r3, #67	@ 0x43
 800f526:	701a      	strb	r2, [r3, #0]
 800f528:	e78d      	b.n	800f446 <_printf_float+0xa2>
 800f52a:	2c47      	cmp	r4, #71	@ 0x47
 800f52c:	d1b8      	bne.n	800f4a0 <_printf_float+0xfc>
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d1b6      	bne.n	800f4a0 <_printf_float+0xfc>
 800f532:	3301      	adds	r3, #1
 800f534:	e7b3      	b.n	800f49e <_printf_float+0xfa>
 800f536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f538:	0011      	movs	r1, r2
 800f53a:	2b65      	cmp	r3, #101	@ 0x65
 800f53c:	d9d7      	bls.n	800f4ee <_printf_float+0x14a>
 800f53e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f540:	2b66      	cmp	r3, #102	@ 0x66
 800f542:	d11a      	bne.n	800f57a <_printf_float+0x1d6>
 800f544:	686b      	ldr	r3, [r5, #4]
 800f546:	2a00      	cmp	r2, #0
 800f548:	dd09      	ble.n	800f55e <_printf_float+0x1ba>
 800f54a:	612a      	str	r2, [r5, #16]
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d102      	bne.n	800f556 <_printf_float+0x1b2>
 800f550:	6829      	ldr	r1, [r5, #0]
 800f552:	07c9      	lsls	r1, r1, #31
 800f554:	d50b      	bpl.n	800f56e <_printf_float+0x1ca>
 800f556:	3301      	adds	r3, #1
 800f558:	189b      	adds	r3, r3, r2
 800f55a:	612b      	str	r3, [r5, #16]
 800f55c:	e007      	b.n	800f56e <_printf_float+0x1ca>
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d103      	bne.n	800f56a <_printf_float+0x1c6>
 800f562:	2201      	movs	r2, #1
 800f564:	6829      	ldr	r1, [r5, #0]
 800f566:	4211      	tst	r1, r2
 800f568:	d000      	beq.n	800f56c <_printf_float+0x1c8>
 800f56a:	1c9a      	adds	r2, r3, #2
 800f56c:	612a      	str	r2, [r5, #16]
 800f56e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f570:	2400      	movs	r4, #0
 800f572:	65ab      	str	r3, [r5, #88]	@ 0x58
 800f574:	e7cd      	b.n	800f512 <_printf_float+0x16e>
 800f576:	2367      	movs	r3, #103	@ 0x67
 800f578:	930c      	str	r3, [sp, #48]	@ 0x30
 800f57a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f57c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f57e:	4299      	cmp	r1, r3
 800f580:	db06      	blt.n	800f590 <_printf_float+0x1ec>
 800f582:	682b      	ldr	r3, [r5, #0]
 800f584:	6129      	str	r1, [r5, #16]
 800f586:	07db      	lsls	r3, r3, #31
 800f588:	d5f1      	bpl.n	800f56e <_printf_float+0x1ca>
 800f58a:	3101      	adds	r1, #1
 800f58c:	6129      	str	r1, [r5, #16]
 800f58e:	e7ee      	b.n	800f56e <_printf_float+0x1ca>
 800f590:	2201      	movs	r2, #1
 800f592:	2900      	cmp	r1, #0
 800f594:	dce0      	bgt.n	800f558 <_printf_float+0x1b4>
 800f596:	1892      	adds	r2, r2, r2
 800f598:	1a52      	subs	r2, r2, r1
 800f59a:	e7dd      	b.n	800f558 <_printf_float+0x1b4>
 800f59c:	682a      	ldr	r2, [r5, #0]
 800f59e:	0553      	lsls	r3, r2, #21
 800f5a0:	d408      	bmi.n	800f5b4 <_printf_float+0x210>
 800f5a2:	692b      	ldr	r3, [r5, #16]
 800f5a4:	003a      	movs	r2, r7
 800f5a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f5a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5aa:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f5ac:	47a0      	blx	r4
 800f5ae:	3001      	adds	r0, #1
 800f5b0:	d129      	bne.n	800f606 <_printf_float+0x262>
 800f5b2:	e753      	b.n	800f45c <_printf_float+0xb8>
 800f5b4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f5b6:	2b65      	cmp	r3, #101	@ 0x65
 800f5b8:	d800      	bhi.n	800f5bc <_printf_float+0x218>
 800f5ba:	e0da      	b.n	800f772 <_printf_float+0x3ce>
 800f5bc:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f5be:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f5c0:	2200      	movs	r2, #0
 800f5c2:	2300      	movs	r3, #0
 800f5c4:	f7f0 ff42 	bl	800044c <__aeabi_dcmpeq>
 800f5c8:	2800      	cmp	r0, #0
 800f5ca:	d033      	beq.n	800f634 <_printf_float+0x290>
 800f5cc:	2301      	movs	r3, #1
 800f5ce:	4a37      	ldr	r2, [pc, #220]	@ (800f6ac <_printf_float+0x308>)
 800f5d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f5d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f5d6:	47a0      	blx	r4
 800f5d8:	3001      	adds	r0, #1
 800f5da:	d100      	bne.n	800f5de <_printf_float+0x23a>
 800f5dc:	e73e      	b.n	800f45c <_printf_float+0xb8>
 800f5de:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f5e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f5e2:	42b3      	cmp	r3, r6
 800f5e4:	db02      	blt.n	800f5ec <_printf_float+0x248>
 800f5e6:	682b      	ldr	r3, [r5, #0]
 800f5e8:	07db      	lsls	r3, r3, #31
 800f5ea:	d50c      	bpl.n	800f606 <_printf_float+0x262>
 800f5ec:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f5ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f5f0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f5f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f5f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5f6:	47a0      	blx	r4
 800f5f8:	2400      	movs	r4, #0
 800f5fa:	3001      	adds	r0, #1
 800f5fc:	d100      	bne.n	800f600 <_printf_float+0x25c>
 800f5fe:	e72d      	b.n	800f45c <_printf_float+0xb8>
 800f600:	1e73      	subs	r3, r6, #1
 800f602:	42a3      	cmp	r3, r4
 800f604:	dc0a      	bgt.n	800f61c <_printf_float+0x278>
 800f606:	682b      	ldr	r3, [r5, #0]
 800f608:	079b      	lsls	r3, r3, #30
 800f60a:	d500      	bpl.n	800f60e <_printf_float+0x26a>
 800f60c:	e105      	b.n	800f81a <_printf_float+0x476>
 800f60e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800f610:	68e8      	ldr	r0, [r5, #12]
 800f612:	4298      	cmp	r0, r3
 800f614:	db00      	blt.n	800f618 <_printf_float+0x274>
 800f616:	e723      	b.n	800f460 <_printf_float+0xbc>
 800f618:	0018      	movs	r0, r3
 800f61a:	e721      	b.n	800f460 <_printf_float+0xbc>
 800f61c:	002a      	movs	r2, r5
 800f61e:	2301      	movs	r3, #1
 800f620:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f624:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f626:	321a      	adds	r2, #26
 800f628:	47b8      	blx	r7
 800f62a:	3001      	adds	r0, #1
 800f62c:	d100      	bne.n	800f630 <_printf_float+0x28c>
 800f62e:	e715      	b.n	800f45c <_printf_float+0xb8>
 800f630:	3401      	adds	r4, #1
 800f632:	e7e5      	b.n	800f600 <_printf_float+0x25c>
 800f634:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f636:	2b00      	cmp	r3, #0
 800f638:	dc3a      	bgt.n	800f6b0 <_printf_float+0x30c>
 800f63a:	2301      	movs	r3, #1
 800f63c:	4a1b      	ldr	r2, [pc, #108]	@ (800f6ac <_printf_float+0x308>)
 800f63e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f640:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f642:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f644:	47a0      	blx	r4
 800f646:	3001      	adds	r0, #1
 800f648:	d100      	bne.n	800f64c <_printf_float+0x2a8>
 800f64a:	e707      	b.n	800f45c <_printf_float+0xb8>
 800f64c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800f64e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f650:	4333      	orrs	r3, r6
 800f652:	d102      	bne.n	800f65a <_printf_float+0x2b6>
 800f654:	682b      	ldr	r3, [r5, #0]
 800f656:	07db      	lsls	r3, r3, #31
 800f658:	d5d5      	bpl.n	800f606 <_printf_float+0x262>
 800f65a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f65c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f65e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f660:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f662:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f664:	47a0      	blx	r4
 800f666:	2300      	movs	r3, #0
 800f668:	3001      	adds	r0, #1
 800f66a:	d100      	bne.n	800f66e <_printf_float+0x2ca>
 800f66c:	e6f6      	b.n	800f45c <_printf_float+0xb8>
 800f66e:	930c      	str	r3, [sp, #48]	@ 0x30
 800f670:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f672:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f674:	425b      	negs	r3, r3
 800f676:	4293      	cmp	r3, r2
 800f678:	dc01      	bgt.n	800f67e <_printf_float+0x2da>
 800f67a:	0033      	movs	r3, r6
 800f67c:	e792      	b.n	800f5a4 <_printf_float+0x200>
 800f67e:	002a      	movs	r2, r5
 800f680:	2301      	movs	r3, #1
 800f682:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f684:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f686:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f688:	321a      	adds	r2, #26
 800f68a:	47a0      	blx	r4
 800f68c:	3001      	adds	r0, #1
 800f68e:	d100      	bne.n	800f692 <_printf_float+0x2ee>
 800f690:	e6e4      	b.n	800f45c <_printf_float+0xb8>
 800f692:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f694:	3301      	adds	r3, #1
 800f696:	e7ea      	b.n	800f66e <_printf_float+0x2ca>
 800f698:	7fefffff 	.word	0x7fefffff
 800f69c:	08013034 	.word	0x08013034
 800f6a0:	08013038 	.word	0x08013038
 800f6a4:	0801303c 	.word	0x0801303c
 800f6a8:	08013040 	.word	0x08013040
 800f6ac:	08013044 	.word	0x08013044
 800f6b0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f6b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f6b4:	930c      	str	r3, [sp, #48]	@ 0x30
 800f6b6:	429e      	cmp	r6, r3
 800f6b8:	dd00      	ble.n	800f6bc <_printf_float+0x318>
 800f6ba:	001e      	movs	r6, r3
 800f6bc:	2e00      	cmp	r6, #0
 800f6be:	dc31      	bgt.n	800f724 <_printf_float+0x380>
 800f6c0:	43f3      	mvns	r3, r6
 800f6c2:	2400      	movs	r4, #0
 800f6c4:	17db      	asrs	r3, r3, #31
 800f6c6:	4033      	ands	r3, r6
 800f6c8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f6ca:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800f6cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6ce:	1af3      	subs	r3, r6, r3
 800f6d0:	42a3      	cmp	r3, r4
 800f6d2:	dc30      	bgt.n	800f736 <_printf_float+0x392>
 800f6d4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f6d6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f6d8:	429a      	cmp	r2, r3
 800f6da:	dc38      	bgt.n	800f74e <_printf_float+0x3aa>
 800f6dc:	682b      	ldr	r3, [r5, #0]
 800f6de:	07db      	lsls	r3, r3, #31
 800f6e0:	d435      	bmi.n	800f74e <_printf_float+0x3aa>
 800f6e2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800f6e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f6e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f6e8:	1b9b      	subs	r3, r3, r6
 800f6ea:	1b14      	subs	r4, r2, r4
 800f6ec:	429c      	cmp	r4, r3
 800f6ee:	dd00      	ble.n	800f6f2 <_printf_float+0x34e>
 800f6f0:	001c      	movs	r4, r3
 800f6f2:	2c00      	cmp	r4, #0
 800f6f4:	dc34      	bgt.n	800f760 <_printf_float+0x3bc>
 800f6f6:	43e3      	mvns	r3, r4
 800f6f8:	2600      	movs	r6, #0
 800f6fa:	17db      	asrs	r3, r3, #31
 800f6fc:	401c      	ands	r4, r3
 800f6fe:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f700:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f702:	1ad3      	subs	r3, r2, r3
 800f704:	1b1b      	subs	r3, r3, r4
 800f706:	42b3      	cmp	r3, r6
 800f708:	dc00      	bgt.n	800f70c <_printf_float+0x368>
 800f70a:	e77c      	b.n	800f606 <_printf_float+0x262>
 800f70c:	002a      	movs	r2, r5
 800f70e:	2301      	movs	r3, #1
 800f710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f714:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f716:	321a      	adds	r2, #26
 800f718:	47b8      	blx	r7
 800f71a:	3001      	adds	r0, #1
 800f71c:	d100      	bne.n	800f720 <_printf_float+0x37c>
 800f71e:	e69d      	b.n	800f45c <_printf_float+0xb8>
 800f720:	3601      	adds	r6, #1
 800f722:	e7ec      	b.n	800f6fe <_printf_float+0x35a>
 800f724:	0033      	movs	r3, r6
 800f726:	003a      	movs	r2, r7
 800f728:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f72a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f72c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f72e:	47a0      	blx	r4
 800f730:	3001      	adds	r0, #1
 800f732:	d1c5      	bne.n	800f6c0 <_printf_float+0x31c>
 800f734:	e692      	b.n	800f45c <_printf_float+0xb8>
 800f736:	002a      	movs	r2, r5
 800f738:	2301      	movs	r3, #1
 800f73a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f73c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f73e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f740:	321a      	adds	r2, #26
 800f742:	47b0      	blx	r6
 800f744:	3001      	adds	r0, #1
 800f746:	d100      	bne.n	800f74a <_printf_float+0x3a6>
 800f748:	e688      	b.n	800f45c <_printf_float+0xb8>
 800f74a:	3401      	adds	r4, #1
 800f74c:	e7bd      	b.n	800f6ca <_printf_float+0x326>
 800f74e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f750:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f752:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f754:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f756:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800f758:	47a0      	blx	r4
 800f75a:	3001      	adds	r0, #1
 800f75c:	d1c1      	bne.n	800f6e2 <_printf_float+0x33e>
 800f75e:	e67d      	b.n	800f45c <_printf_float+0xb8>
 800f760:	19ba      	adds	r2, r7, r6
 800f762:	0023      	movs	r3, r4
 800f764:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f766:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f768:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f76a:	47b0      	blx	r6
 800f76c:	3001      	adds	r0, #1
 800f76e:	d1c2      	bne.n	800f6f6 <_printf_float+0x352>
 800f770:	e674      	b.n	800f45c <_printf_float+0xb8>
 800f772:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800f774:	930c      	str	r3, [sp, #48]	@ 0x30
 800f776:	2b01      	cmp	r3, #1
 800f778:	dc02      	bgt.n	800f780 <_printf_float+0x3dc>
 800f77a:	2301      	movs	r3, #1
 800f77c:	421a      	tst	r2, r3
 800f77e:	d039      	beq.n	800f7f4 <_printf_float+0x450>
 800f780:	2301      	movs	r3, #1
 800f782:	003a      	movs	r2, r7
 800f784:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f786:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f788:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f78a:	47b0      	blx	r6
 800f78c:	3001      	adds	r0, #1
 800f78e:	d100      	bne.n	800f792 <_printf_float+0x3ee>
 800f790:	e664      	b.n	800f45c <_printf_float+0xb8>
 800f792:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f794:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f796:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f798:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f79a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f79c:	47b0      	blx	r6
 800f79e:	3001      	adds	r0, #1
 800f7a0:	d100      	bne.n	800f7a4 <_printf_float+0x400>
 800f7a2:	e65b      	b.n	800f45c <_printf_float+0xb8>
 800f7a4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800f7a6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800f7a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7aa:	2200      	movs	r2, #0
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	930c      	str	r3, [sp, #48]	@ 0x30
 800f7b0:	2300      	movs	r3, #0
 800f7b2:	f7f0 fe4b 	bl	800044c <__aeabi_dcmpeq>
 800f7b6:	2800      	cmp	r0, #0
 800f7b8:	d11a      	bne.n	800f7f0 <_printf_float+0x44c>
 800f7ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7bc:	1c7a      	adds	r2, r7, #1
 800f7be:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7c0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7c2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f7c4:	47b0      	blx	r6
 800f7c6:	3001      	adds	r0, #1
 800f7c8:	d10e      	bne.n	800f7e8 <_printf_float+0x444>
 800f7ca:	e647      	b.n	800f45c <_printf_float+0xb8>
 800f7cc:	002a      	movs	r2, r5
 800f7ce:	2301      	movs	r3, #1
 800f7d0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f7d4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f7d6:	321a      	adds	r2, #26
 800f7d8:	47b8      	blx	r7
 800f7da:	3001      	adds	r0, #1
 800f7dc:	d100      	bne.n	800f7e0 <_printf_float+0x43c>
 800f7de:	e63d      	b.n	800f45c <_printf_float+0xb8>
 800f7e0:	3601      	adds	r6, #1
 800f7e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f7e4:	429e      	cmp	r6, r3
 800f7e6:	dbf1      	blt.n	800f7cc <_printf_float+0x428>
 800f7e8:	002a      	movs	r2, r5
 800f7ea:	0023      	movs	r3, r4
 800f7ec:	3250      	adds	r2, #80	@ 0x50
 800f7ee:	e6da      	b.n	800f5a6 <_printf_float+0x202>
 800f7f0:	2600      	movs	r6, #0
 800f7f2:	e7f6      	b.n	800f7e2 <_printf_float+0x43e>
 800f7f4:	003a      	movs	r2, r7
 800f7f6:	e7e2      	b.n	800f7be <_printf_float+0x41a>
 800f7f8:	002a      	movs	r2, r5
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800f7fe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f800:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800f802:	3219      	adds	r2, #25
 800f804:	47b0      	blx	r6
 800f806:	3001      	adds	r0, #1
 800f808:	d100      	bne.n	800f80c <_printf_float+0x468>
 800f80a:	e627      	b.n	800f45c <_printf_float+0xb8>
 800f80c:	3401      	adds	r4, #1
 800f80e:	68eb      	ldr	r3, [r5, #12]
 800f810:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800f812:	1a9b      	subs	r3, r3, r2
 800f814:	42a3      	cmp	r3, r4
 800f816:	dcef      	bgt.n	800f7f8 <_printf_float+0x454>
 800f818:	e6f9      	b.n	800f60e <_printf_float+0x26a>
 800f81a:	2400      	movs	r4, #0
 800f81c:	e7f7      	b.n	800f80e <_printf_float+0x46a>
 800f81e:	46c0      	nop			@ (mov r8, r8)

0800f820 <_printf_common>:
 800f820:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f822:	0016      	movs	r6, r2
 800f824:	9301      	str	r3, [sp, #4]
 800f826:	688a      	ldr	r2, [r1, #8]
 800f828:	690b      	ldr	r3, [r1, #16]
 800f82a:	000c      	movs	r4, r1
 800f82c:	9000      	str	r0, [sp, #0]
 800f82e:	4293      	cmp	r3, r2
 800f830:	da00      	bge.n	800f834 <_printf_common+0x14>
 800f832:	0013      	movs	r3, r2
 800f834:	0022      	movs	r2, r4
 800f836:	6033      	str	r3, [r6, #0]
 800f838:	3243      	adds	r2, #67	@ 0x43
 800f83a:	7812      	ldrb	r2, [r2, #0]
 800f83c:	2a00      	cmp	r2, #0
 800f83e:	d001      	beq.n	800f844 <_printf_common+0x24>
 800f840:	3301      	adds	r3, #1
 800f842:	6033      	str	r3, [r6, #0]
 800f844:	6823      	ldr	r3, [r4, #0]
 800f846:	069b      	lsls	r3, r3, #26
 800f848:	d502      	bpl.n	800f850 <_printf_common+0x30>
 800f84a:	6833      	ldr	r3, [r6, #0]
 800f84c:	3302      	adds	r3, #2
 800f84e:	6033      	str	r3, [r6, #0]
 800f850:	6822      	ldr	r2, [r4, #0]
 800f852:	2306      	movs	r3, #6
 800f854:	0015      	movs	r5, r2
 800f856:	401d      	ands	r5, r3
 800f858:	421a      	tst	r2, r3
 800f85a:	d027      	beq.n	800f8ac <_printf_common+0x8c>
 800f85c:	0023      	movs	r3, r4
 800f85e:	3343      	adds	r3, #67	@ 0x43
 800f860:	781b      	ldrb	r3, [r3, #0]
 800f862:	1e5a      	subs	r2, r3, #1
 800f864:	4193      	sbcs	r3, r2
 800f866:	6822      	ldr	r2, [r4, #0]
 800f868:	0692      	lsls	r2, r2, #26
 800f86a:	d430      	bmi.n	800f8ce <_printf_common+0xae>
 800f86c:	0022      	movs	r2, r4
 800f86e:	9901      	ldr	r1, [sp, #4]
 800f870:	9800      	ldr	r0, [sp, #0]
 800f872:	9d08      	ldr	r5, [sp, #32]
 800f874:	3243      	adds	r2, #67	@ 0x43
 800f876:	47a8      	blx	r5
 800f878:	3001      	adds	r0, #1
 800f87a:	d025      	beq.n	800f8c8 <_printf_common+0xa8>
 800f87c:	2206      	movs	r2, #6
 800f87e:	6823      	ldr	r3, [r4, #0]
 800f880:	2500      	movs	r5, #0
 800f882:	4013      	ands	r3, r2
 800f884:	2b04      	cmp	r3, #4
 800f886:	d105      	bne.n	800f894 <_printf_common+0x74>
 800f888:	6833      	ldr	r3, [r6, #0]
 800f88a:	68e5      	ldr	r5, [r4, #12]
 800f88c:	1aed      	subs	r5, r5, r3
 800f88e:	43eb      	mvns	r3, r5
 800f890:	17db      	asrs	r3, r3, #31
 800f892:	401d      	ands	r5, r3
 800f894:	68a3      	ldr	r3, [r4, #8]
 800f896:	6922      	ldr	r2, [r4, #16]
 800f898:	4293      	cmp	r3, r2
 800f89a:	dd01      	ble.n	800f8a0 <_printf_common+0x80>
 800f89c:	1a9b      	subs	r3, r3, r2
 800f89e:	18ed      	adds	r5, r5, r3
 800f8a0:	2600      	movs	r6, #0
 800f8a2:	42b5      	cmp	r5, r6
 800f8a4:	d120      	bne.n	800f8e8 <_printf_common+0xc8>
 800f8a6:	2000      	movs	r0, #0
 800f8a8:	e010      	b.n	800f8cc <_printf_common+0xac>
 800f8aa:	3501      	adds	r5, #1
 800f8ac:	68e3      	ldr	r3, [r4, #12]
 800f8ae:	6832      	ldr	r2, [r6, #0]
 800f8b0:	1a9b      	subs	r3, r3, r2
 800f8b2:	42ab      	cmp	r3, r5
 800f8b4:	ddd2      	ble.n	800f85c <_printf_common+0x3c>
 800f8b6:	0022      	movs	r2, r4
 800f8b8:	2301      	movs	r3, #1
 800f8ba:	9901      	ldr	r1, [sp, #4]
 800f8bc:	9800      	ldr	r0, [sp, #0]
 800f8be:	9f08      	ldr	r7, [sp, #32]
 800f8c0:	3219      	adds	r2, #25
 800f8c2:	47b8      	blx	r7
 800f8c4:	3001      	adds	r0, #1
 800f8c6:	d1f0      	bne.n	800f8aa <_printf_common+0x8a>
 800f8c8:	2001      	movs	r0, #1
 800f8ca:	4240      	negs	r0, r0
 800f8cc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f8ce:	2030      	movs	r0, #48	@ 0x30
 800f8d0:	18e1      	adds	r1, r4, r3
 800f8d2:	3143      	adds	r1, #67	@ 0x43
 800f8d4:	7008      	strb	r0, [r1, #0]
 800f8d6:	0021      	movs	r1, r4
 800f8d8:	1c5a      	adds	r2, r3, #1
 800f8da:	3145      	adds	r1, #69	@ 0x45
 800f8dc:	7809      	ldrb	r1, [r1, #0]
 800f8de:	18a2      	adds	r2, r4, r2
 800f8e0:	3243      	adds	r2, #67	@ 0x43
 800f8e2:	3302      	adds	r3, #2
 800f8e4:	7011      	strb	r1, [r2, #0]
 800f8e6:	e7c1      	b.n	800f86c <_printf_common+0x4c>
 800f8e8:	0022      	movs	r2, r4
 800f8ea:	2301      	movs	r3, #1
 800f8ec:	9901      	ldr	r1, [sp, #4]
 800f8ee:	9800      	ldr	r0, [sp, #0]
 800f8f0:	9f08      	ldr	r7, [sp, #32]
 800f8f2:	321a      	adds	r2, #26
 800f8f4:	47b8      	blx	r7
 800f8f6:	3001      	adds	r0, #1
 800f8f8:	d0e6      	beq.n	800f8c8 <_printf_common+0xa8>
 800f8fa:	3601      	adds	r6, #1
 800f8fc:	e7d1      	b.n	800f8a2 <_printf_common+0x82>
	...

0800f900 <_printf_i>:
 800f900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f902:	b08b      	sub	sp, #44	@ 0x2c
 800f904:	9206      	str	r2, [sp, #24]
 800f906:	000a      	movs	r2, r1
 800f908:	3243      	adds	r2, #67	@ 0x43
 800f90a:	9307      	str	r3, [sp, #28]
 800f90c:	9005      	str	r0, [sp, #20]
 800f90e:	9203      	str	r2, [sp, #12]
 800f910:	7e0a      	ldrb	r2, [r1, #24]
 800f912:	000c      	movs	r4, r1
 800f914:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800f916:	2a78      	cmp	r2, #120	@ 0x78
 800f918:	d809      	bhi.n	800f92e <_printf_i+0x2e>
 800f91a:	2a62      	cmp	r2, #98	@ 0x62
 800f91c:	d80b      	bhi.n	800f936 <_printf_i+0x36>
 800f91e:	2a00      	cmp	r2, #0
 800f920:	d100      	bne.n	800f924 <_printf_i+0x24>
 800f922:	e0bc      	b.n	800fa9e <_printf_i+0x19e>
 800f924:	497b      	ldr	r1, [pc, #492]	@ (800fb14 <_printf_i+0x214>)
 800f926:	9104      	str	r1, [sp, #16]
 800f928:	2a58      	cmp	r2, #88	@ 0x58
 800f92a:	d100      	bne.n	800f92e <_printf_i+0x2e>
 800f92c:	e090      	b.n	800fa50 <_printf_i+0x150>
 800f92e:	0025      	movs	r5, r4
 800f930:	3542      	adds	r5, #66	@ 0x42
 800f932:	702a      	strb	r2, [r5, #0]
 800f934:	e022      	b.n	800f97c <_printf_i+0x7c>
 800f936:	0010      	movs	r0, r2
 800f938:	3863      	subs	r0, #99	@ 0x63
 800f93a:	2815      	cmp	r0, #21
 800f93c:	d8f7      	bhi.n	800f92e <_printf_i+0x2e>
 800f93e:	f7f0 fbf5 	bl	800012c <__gnu_thumb1_case_shi>
 800f942:	0016      	.short	0x0016
 800f944:	fff6001f 	.word	0xfff6001f
 800f948:	fff6fff6 	.word	0xfff6fff6
 800f94c:	001ffff6 	.word	0x001ffff6
 800f950:	fff6fff6 	.word	0xfff6fff6
 800f954:	fff6fff6 	.word	0xfff6fff6
 800f958:	003600a1 	.word	0x003600a1
 800f95c:	fff60080 	.word	0xfff60080
 800f960:	00b2fff6 	.word	0x00b2fff6
 800f964:	0036fff6 	.word	0x0036fff6
 800f968:	fff6fff6 	.word	0xfff6fff6
 800f96c:	0084      	.short	0x0084
 800f96e:	0025      	movs	r5, r4
 800f970:	681a      	ldr	r2, [r3, #0]
 800f972:	3542      	adds	r5, #66	@ 0x42
 800f974:	1d11      	adds	r1, r2, #4
 800f976:	6019      	str	r1, [r3, #0]
 800f978:	6813      	ldr	r3, [r2, #0]
 800f97a:	702b      	strb	r3, [r5, #0]
 800f97c:	2301      	movs	r3, #1
 800f97e:	e0a0      	b.n	800fac2 <_printf_i+0x1c2>
 800f980:	6818      	ldr	r0, [r3, #0]
 800f982:	6809      	ldr	r1, [r1, #0]
 800f984:	1d02      	adds	r2, r0, #4
 800f986:	060d      	lsls	r5, r1, #24
 800f988:	d50b      	bpl.n	800f9a2 <_printf_i+0xa2>
 800f98a:	6806      	ldr	r6, [r0, #0]
 800f98c:	601a      	str	r2, [r3, #0]
 800f98e:	2e00      	cmp	r6, #0
 800f990:	da03      	bge.n	800f99a <_printf_i+0x9a>
 800f992:	232d      	movs	r3, #45	@ 0x2d
 800f994:	9a03      	ldr	r2, [sp, #12]
 800f996:	4276      	negs	r6, r6
 800f998:	7013      	strb	r3, [r2, #0]
 800f99a:	4b5e      	ldr	r3, [pc, #376]	@ (800fb14 <_printf_i+0x214>)
 800f99c:	270a      	movs	r7, #10
 800f99e:	9304      	str	r3, [sp, #16]
 800f9a0:	e018      	b.n	800f9d4 <_printf_i+0xd4>
 800f9a2:	6806      	ldr	r6, [r0, #0]
 800f9a4:	601a      	str	r2, [r3, #0]
 800f9a6:	0649      	lsls	r1, r1, #25
 800f9a8:	d5f1      	bpl.n	800f98e <_printf_i+0x8e>
 800f9aa:	b236      	sxth	r6, r6
 800f9ac:	e7ef      	b.n	800f98e <_printf_i+0x8e>
 800f9ae:	6808      	ldr	r0, [r1, #0]
 800f9b0:	6819      	ldr	r1, [r3, #0]
 800f9b2:	c940      	ldmia	r1!, {r6}
 800f9b4:	0605      	lsls	r5, r0, #24
 800f9b6:	d402      	bmi.n	800f9be <_printf_i+0xbe>
 800f9b8:	0640      	lsls	r0, r0, #25
 800f9ba:	d500      	bpl.n	800f9be <_printf_i+0xbe>
 800f9bc:	b2b6      	uxth	r6, r6
 800f9be:	6019      	str	r1, [r3, #0]
 800f9c0:	4b54      	ldr	r3, [pc, #336]	@ (800fb14 <_printf_i+0x214>)
 800f9c2:	270a      	movs	r7, #10
 800f9c4:	9304      	str	r3, [sp, #16]
 800f9c6:	2a6f      	cmp	r2, #111	@ 0x6f
 800f9c8:	d100      	bne.n	800f9cc <_printf_i+0xcc>
 800f9ca:	3f02      	subs	r7, #2
 800f9cc:	0023      	movs	r3, r4
 800f9ce:	2200      	movs	r2, #0
 800f9d0:	3343      	adds	r3, #67	@ 0x43
 800f9d2:	701a      	strb	r2, [r3, #0]
 800f9d4:	6863      	ldr	r3, [r4, #4]
 800f9d6:	60a3      	str	r3, [r4, #8]
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	db03      	blt.n	800f9e4 <_printf_i+0xe4>
 800f9dc:	2104      	movs	r1, #4
 800f9de:	6822      	ldr	r2, [r4, #0]
 800f9e0:	438a      	bics	r2, r1
 800f9e2:	6022      	str	r2, [r4, #0]
 800f9e4:	2e00      	cmp	r6, #0
 800f9e6:	d102      	bne.n	800f9ee <_printf_i+0xee>
 800f9e8:	9d03      	ldr	r5, [sp, #12]
 800f9ea:	2b00      	cmp	r3, #0
 800f9ec:	d00c      	beq.n	800fa08 <_printf_i+0x108>
 800f9ee:	9d03      	ldr	r5, [sp, #12]
 800f9f0:	0030      	movs	r0, r6
 800f9f2:	0039      	movs	r1, r7
 800f9f4:	f7f0 fc2a 	bl	800024c <__aeabi_uidivmod>
 800f9f8:	9b04      	ldr	r3, [sp, #16]
 800f9fa:	3d01      	subs	r5, #1
 800f9fc:	5c5b      	ldrb	r3, [r3, r1]
 800f9fe:	702b      	strb	r3, [r5, #0]
 800fa00:	0033      	movs	r3, r6
 800fa02:	0006      	movs	r6, r0
 800fa04:	429f      	cmp	r7, r3
 800fa06:	d9f3      	bls.n	800f9f0 <_printf_i+0xf0>
 800fa08:	2f08      	cmp	r7, #8
 800fa0a:	d109      	bne.n	800fa20 <_printf_i+0x120>
 800fa0c:	6823      	ldr	r3, [r4, #0]
 800fa0e:	07db      	lsls	r3, r3, #31
 800fa10:	d506      	bpl.n	800fa20 <_printf_i+0x120>
 800fa12:	6862      	ldr	r2, [r4, #4]
 800fa14:	6923      	ldr	r3, [r4, #16]
 800fa16:	429a      	cmp	r2, r3
 800fa18:	dc02      	bgt.n	800fa20 <_printf_i+0x120>
 800fa1a:	2330      	movs	r3, #48	@ 0x30
 800fa1c:	3d01      	subs	r5, #1
 800fa1e:	702b      	strb	r3, [r5, #0]
 800fa20:	9b03      	ldr	r3, [sp, #12]
 800fa22:	1b5b      	subs	r3, r3, r5
 800fa24:	6123      	str	r3, [r4, #16]
 800fa26:	9b07      	ldr	r3, [sp, #28]
 800fa28:	0021      	movs	r1, r4
 800fa2a:	9300      	str	r3, [sp, #0]
 800fa2c:	9805      	ldr	r0, [sp, #20]
 800fa2e:	9b06      	ldr	r3, [sp, #24]
 800fa30:	aa09      	add	r2, sp, #36	@ 0x24
 800fa32:	f7ff fef5 	bl	800f820 <_printf_common>
 800fa36:	3001      	adds	r0, #1
 800fa38:	d148      	bne.n	800facc <_printf_i+0x1cc>
 800fa3a:	2001      	movs	r0, #1
 800fa3c:	4240      	negs	r0, r0
 800fa3e:	b00b      	add	sp, #44	@ 0x2c
 800fa40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fa42:	2220      	movs	r2, #32
 800fa44:	6809      	ldr	r1, [r1, #0]
 800fa46:	430a      	orrs	r2, r1
 800fa48:	6022      	str	r2, [r4, #0]
 800fa4a:	2278      	movs	r2, #120	@ 0x78
 800fa4c:	4932      	ldr	r1, [pc, #200]	@ (800fb18 <_printf_i+0x218>)
 800fa4e:	9104      	str	r1, [sp, #16]
 800fa50:	0021      	movs	r1, r4
 800fa52:	3145      	adds	r1, #69	@ 0x45
 800fa54:	700a      	strb	r2, [r1, #0]
 800fa56:	6819      	ldr	r1, [r3, #0]
 800fa58:	6822      	ldr	r2, [r4, #0]
 800fa5a:	c940      	ldmia	r1!, {r6}
 800fa5c:	0610      	lsls	r0, r2, #24
 800fa5e:	d402      	bmi.n	800fa66 <_printf_i+0x166>
 800fa60:	0650      	lsls	r0, r2, #25
 800fa62:	d500      	bpl.n	800fa66 <_printf_i+0x166>
 800fa64:	b2b6      	uxth	r6, r6
 800fa66:	6019      	str	r1, [r3, #0]
 800fa68:	07d3      	lsls	r3, r2, #31
 800fa6a:	d502      	bpl.n	800fa72 <_printf_i+0x172>
 800fa6c:	2320      	movs	r3, #32
 800fa6e:	4313      	orrs	r3, r2
 800fa70:	6023      	str	r3, [r4, #0]
 800fa72:	2e00      	cmp	r6, #0
 800fa74:	d001      	beq.n	800fa7a <_printf_i+0x17a>
 800fa76:	2710      	movs	r7, #16
 800fa78:	e7a8      	b.n	800f9cc <_printf_i+0xcc>
 800fa7a:	2220      	movs	r2, #32
 800fa7c:	6823      	ldr	r3, [r4, #0]
 800fa7e:	4393      	bics	r3, r2
 800fa80:	6023      	str	r3, [r4, #0]
 800fa82:	e7f8      	b.n	800fa76 <_printf_i+0x176>
 800fa84:	681a      	ldr	r2, [r3, #0]
 800fa86:	680d      	ldr	r5, [r1, #0]
 800fa88:	1d10      	adds	r0, r2, #4
 800fa8a:	6949      	ldr	r1, [r1, #20]
 800fa8c:	6018      	str	r0, [r3, #0]
 800fa8e:	6813      	ldr	r3, [r2, #0]
 800fa90:	062e      	lsls	r6, r5, #24
 800fa92:	d501      	bpl.n	800fa98 <_printf_i+0x198>
 800fa94:	6019      	str	r1, [r3, #0]
 800fa96:	e002      	b.n	800fa9e <_printf_i+0x19e>
 800fa98:	066d      	lsls	r5, r5, #25
 800fa9a:	d5fb      	bpl.n	800fa94 <_printf_i+0x194>
 800fa9c:	8019      	strh	r1, [r3, #0]
 800fa9e:	2300      	movs	r3, #0
 800faa0:	9d03      	ldr	r5, [sp, #12]
 800faa2:	6123      	str	r3, [r4, #16]
 800faa4:	e7bf      	b.n	800fa26 <_printf_i+0x126>
 800faa6:	681a      	ldr	r2, [r3, #0]
 800faa8:	1d11      	adds	r1, r2, #4
 800faaa:	6019      	str	r1, [r3, #0]
 800faac:	6815      	ldr	r5, [r2, #0]
 800faae:	2100      	movs	r1, #0
 800fab0:	0028      	movs	r0, r5
 800fab2:	6862      	ldr	r2, [r4, #4]
 800fab4:	f000 fa5b 	bl	800ff6e <memchr>
 800fab8:	2800      	cmp	r0, #0
 800faba:	d001      	beq.n	800fac0 <_printf_i+0x1c0>
 800fabc:	1b40      	subs	r0, r0, r5
 800fabe:	6060      	str	r0, [r4, #4]
 800fac0:	6863      	ldr	r3, [r4, #4]
 800fac2:	6123      	str	r3, [r4, #16]
 800fac4:	2300      	movs	r3, #0
 800fac6:	9a03      	ldr	r2, [sp, #12]
 800fac8:	7013      	strb	r3, [r2, #0]
 800faca:	e7ac      	b.n	800fa26 <_printf_i+0x126>
 800facc:	002a      	movs	r2, r5
 800face:	6923      	ldr	r3, [r4, #16]
 800fad0:	9906      	ldr	r1, [sp, #24]
 800fad2:	9805      	ldr	r0, [sp, #20]
 800fad4:	9d07      	ldr	r5, [sp, #28]
 800fad6:	47a8      	blx	r5
 800fad8:	3001      	adds	r0, #1
 800fada:	d0ae      	beq.n	800fa3a <_printf_i+0x13a>
 800fadc:	6823      	ldr	r3, [r4, #0]
 800fade:	079b      	lsls	r3, r3, #30
 800fae0:	d415      	bmi.n	800fb0e <_printf_i+0x20e>
 800fae2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fae4:	68e0      	ldr	r0, [r4, #12]
 800fae6:	4298      	cmp	r0, r3
 800fae8:	daa9      	bge.n	800fa3e <_printf_i+0x13e>
 800faea:	0018      	movs	r0, r3
 800faec:	e7a7      	b.n	800fa3e <_printf_i+0x13e>
 800faee:	0022      	movs	r2, r4
 800faf0:	2301      	movs	r3, #1
 800faf2:	9906      	ldr	r1, [sp, #24]
 800faf4:	9805      	ldr	r0, [sp, #20]
 800faf6:	9e07      	ldr	r6, [sp, #28]
 800faf8:	3219      	adds	r2, #25
 800fafa:	47b0      	blx	r6
 800fafc:	3001      	adds	r0, #1
 800fafe:	d09c      	beq.n	800fa3a <_printf_i+0x13a>
 800fb00:	3501      	adds	r5, #1
 800fb02:	68e3      	ldr	r3, [r4, #12]
 800fb04:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb06:	1a9b      	subs	r3, r3, r2
 800fb08:	42ab      	cmp	r3, r5
 800fb0a:	dcf0      	bgt.n	800faee <_printf_i+0x1ee>
 800fb0c:	e7e9      	b.n	800fae2 <_printf_i+0x1e2>
 800fb0e:	2500      	movs	r5, #0
 800fb10:	e7f7      	b.n	800fb02 <_printf_i+0x202>
 800fb12:	46c0      	nop			@ (mov r8, r8)
 800fb14:	08013046 	.word	0x08013046
 800fb18:	08013057 	.word	0x08013057

0800fb1c <std>:
 800fb1c:	2300      	movs	r3, #0
 800fb1e:	b510      	push	{r4, lr}
 800fb20:	0004      	movs	r4, r0
 800fb22:	6003      	str	r3, [r0, #0]
 800fb24:	6043      	str	r3, [r0, #4]
 800fb26:	6083      	str	r3, [r0, #8]
 800fb28:	8181      	strh	r1, [r0, #12]
 800fb2a:	6643      	str	r3, [r0, #100]	@ 0x64
 800fb2c:	81c2      	strh	r2, [r0, #14]
 800fb2e:	6103      	str	r3, [r0, #16]
 800fb30:	6143      	str	r3, [r0, #20]
 800fb32:	6183      	str	r3, [r0, #24]
 800fb34:	0019      	movs	r1, r3
 800fb36:	2208      	movs	r2, #8
 800fb38:	305c      	adds	r0, #92	@ 0x5c
 800fb3a:	f000 f967 	bl	800fe0c <memset>
 800fb3e:	4b0b      	ldr	r3, [pc, #44]	@ (800fb6c <std+0x50>)
 800fb40:	6224      	str	r4, [r4, #32]
 800fb42:	6263      	str	r3, [r4, #36]	@ 0x24
 800fb44:	4b0a      	ldr	r3, [pc, #40]	@ (800fb70 <std+0x54>)
 800fb46:	62a3      	str	r3, [r4, #40]	@ 0x28
 800fb48:	4b0a      	ldr	r3, [pc, #40]	@ (800fb74 <std+0x58>)
 800fb4a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800fb4c:	4b0a      	ldr	r3, [pc, #40]	@ (800fb78 <std+0x5c>)
 800fb4e:	6323      	str	r3, [r4, #48]	@ 0x30
 800fb50:	4b0a      	ldr	r3, [pc, #40]	@ (800fb7c <std+0x60>)
 800fb52:	429c      	cmp	r4, r3
 800fb54:	d005      	beq.n	800fb62 <std+0x46>
 800fb56:	4b0a      	ldr	r3, [pc, #40]	@ (800fb80 <std+0x64>)
 800fb58:	429c      	cmp	r4, r3
 800fb5a:	d002      	beq.n	800fb62 <std+0x46>
 800fb5c:	4b09      	ldr	r3, [pc, #36]	@ (800fb84 <std+0x68>)
 800fb5e:	429c      	cmp	r4, r3
 800fb60:	d103      	bne.n	800fb6a <std+0x4e>
 800fb62:	0020      	movs	r0, r4
 800fb64:	3058      	adds	r0, #88	@ 0x58
 800fb66:	f000 f9ff 	bl	800ff68 <__retarget_lock_init_recursive>
 800fb6a:	bd10      	pop	{r4, pc}
 800fb6c:	0800fd05 	.word	0x0800fd05
 800fb70:	0800fd2d 	.word	0x0800fd2d
 800fb74:	0800fd65 	.word	0x0800fd65
 800fb78:	0800fd91 	.word	0x0800fd91
 800fb7c:	20001dd0 	.word	0x20001dd0
 800fb80:	20001e38 	.word	0x20001e38
 800fb84:	20001ea0 	.word	0x20001ea0

0800fb88 <stdio_exit_handler>:
 800fb88:	b510      	push	{r4, lr}
 800fb8a:	4a03      	ldr	r2, [pc, #12]	@ (800fb98 <stdio_exit_handler+0x10>)
 800fb8c:	4903      	ldr	r1, [pc, #12]	@ (800fb9c <stdio_exit_handler+0x14>)
 800fb8e:	4804      	ldr	r0, [pc, #16]	@ (800fba0 <stdio_exit_handler+0x18>)
 800fb90:	f000 f86c 	bl	800fc6c <_fwalk_sglue>
 800fb94:	bd10      	pop	{r4, pc}
 800fb96:	46c0      	nop			@ (mov r8, r8)
 800fb98:	2000014c 	.word	0x2000014c
 800fb9c:	08011c2d 	.word	0x08011c2d
 800fba0:	2000015c 	.word	0x2000015c

0800fba4 <cleanup_stdio>:
 800fba4:	6841      	ldr	r1, [r0, #4]
 800fba6:	4b0b      	ldr	r3, [pc, #44]	@ (800fbd4 <cleanup_stdio+0x30>)
 800fba8:	b510      	push	{r4, lr}
 800fbaa:	0004      	movs	r4, r0
 800fbac:	4299      	cmp	r1, r3
 800fbae:	d001      	beq.n	800fbb4 <cleanup_stdio+0x10>
 800fbb0:	f002 f83c 	bl	8011c2c <_fflush_r>
 800fbb4:	68a1      	ldr	r1, [r4, #8]
 800fbb6:	4b08      	ldr	r3, [pc, #32]	@ (800fbd8 <cleanup_stdio+0x34>)
 800fbb8:	4299      	cmp	r1, r3
 800fbba:	d002      	beq.n	800fbc2 <cleanup_stdio+0x1e>
 800fbbc:	0020      	movs	r0, r4
 800fbbe:	f002 f835 	bl	8011c2c <_fflush_r>
 800fbc2:	68e1      	ldr	r1, [r4, #12]
 800fbc4:	4b05      	ldr	r3, [pc, #20]	@ (800fbdc <cleanup_stdio+0x38>)
 800fbc6:	4299      	cmp	r1, r3
 800fbc8:	d002      	beq.n	800fbd0 <cleanup_stdio+0x2c>
 800fbca:	0020      	movs	r0, r4
 800fbcc:	f002 f82e 	bl	8011c2c <_fflush_r>
 800fbd0:	bd10      	pop	{r4, pc}
 800fbd2:	46c0      	nop			@ (mov r8, r8)
 800fbd4:	20001dd0 	.word	0x20001dd0
 800fbd8:	20001e38 	.word	0x20001e38
 800fbdc:	20001ea0 	.word	0x20001ea0

0800fbe0 <global_stdio_init.part.0>:
 800fbe0:	b510      	push	{r4, lr}
 800fbe2:	4b09      	ldr	r3, [pc, #36]	@ (800fc08 <global_stdio_init.part.0+0x28>)
 800fbe4:	4a09      	ldr	r2, [pc, #36]	@ (800fc0c <global_stdio_init.part.0+0x2c>)
 800fbe6:	2104      	movs	r1, #4
 800fbe8:	601a      	str	r2, [r3, #0]
 800fbea:	4809      	ldr	r0, [pc, #36]	@ (800fc10 <global_stdio_init.part.0+0x30>)
 800fbec:	2200      	movs	r2, #0
 800fbee:	f7ff ff95 	bl	800fb1c <std>
 800fbf2:	2201      	movs	r2, #1
 800fbf4:	2109      	movs	r1, #9
 800fbf6:	4807      	ldr	r0, [pc, #28]	@ (800fc14 <global_stdio_init.part.0+0x34>)
 800fbf8:	f7ff ff90 	bl	800fb1c <std>
 800fbfc:	2202      	movs	r2, #2
 800fbfe:	2112      	movs	r1, #18
 800fc00:	4805      	ldr	r0, [pc, #20]	@ (800fc18 <global_stdio_init.part.0+0x38>)
 800fc02:	f7ff ff8b 	bl	800fb1c <std>
 800fc06:	bd10      	pop	{r4, pc}
 800fc08:	20001f08 	.word	0x20001f08
 800fc0c:	0800fb89 	.word	0x0800fb89
 800fc10:	20001dd0 	.word	0x20001dd0
 800fc14:	20001e38 	.word	0x20001e38
 800fc18:	20001ea0 	.word	0x20001ea0

0800fc1c <__sfp_lock_acquire>:
 800fc1c:	b510      	push	{r4, lr}
 800fc1e:	4802      	ldr	r0, [pc, #8]	@ (800fc28 <__sfp_lock_acquire+0xc>)
 800fc20:	f000 f9a3 	bl	800ff6a <__retarget_lock_acquire_recursive>
 800fc24:	bd10      	pop	{r4, pc}
 800fc26:	46c0      	nop			@ (mov r8, r8)
 800fc28:	20001f11 	.word	0x20001f11

0800fc2c <__sfp_lock_release>:
 800fc2c:	b510      	push	{r4, lr}
 800fc2e:	4802      	ldr	r0, [pc, #8]	@ (800fc38 <__sfp_lock_release+0xc>)
 800fc30:	f000 f99c 	bl	800ff6c <__retarget_lock_release_recursive>
 800fc34:	bd10      	pop	{r4, pc}
 800fc36:	46c0      	nop			@ (mov r8, r8)
 800fc38:	20001f11 	.word	0x20001f11

0800fc3c <__sinit>:
 800fc3c:	b510      	push	{r4, lr}
 800fc3e:	0004      	movs	r4, r0
 800fc40:	f7ff ffec 	bl	800fc1c <__sfp_lock_acquire>
 800fc44:	6a23      	ldr	r3, [r4, #32]
 800fc46:	2b00      	cmp	r3, #0
 800fc48:	d002      	beq.n	800fc50 <__sinit+0x14>
 800fc4a:	f7ff ffef 	bl	800fc2c <__sfp_lock_release>
 800fc4e:	bd10      	pop	{r4, pc}
 800fc50:	4b04      	ldr	r3, [pc, #16]	@ (800fc64 <__sinit+0x28>)
 800fc52:	6223      	str	r3, [r4, #32]
 800fc54:	4b04      	ldr	r3, [pc, #16]	@ (800fc68 <__sinit+0x2c>)
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	2b00      	cmp	r3, #0
 800fc5a:	d1f6      	bne.n	800fc4a <__sinit+0xe>
 800fc5c:	f7ff ffc0 	bl	800fbe0 <global_stdio_init.part.0>
 800fc60:	e7f3      	b.n	800fc4a <__sinit+0xe>
 800fc62:	46c0      	nop			@ (mov r8, r8)
 800fc64:	0800fba5 	.word	0x0800fba5
 800fc68:	20001f08 	.word	0x20001f08

0800fc6c <_fwalk_sglue>:
 800fc6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc6e:	0014      	movs	r4, r2
 800fc70:	2600      	movs	r6, #0
 800fc72:	9000      	str	r0, [sp, #0]
 800fc74:	9101      	str	r1, [sp, #4]
 800fc76:	68a5      	ldr	r5, [r4, #8]
 800fc78:	6867      	ldr	r7, [r4, #4]
 800fc7a:	3f01      	subs	r7, #1
 800fc7c:	d504      	bpl.n	800fc88 <_fwalk_sglue+0x1c>
 800fc7e:	6824      	ldr	r4, [r4, #0]
 800fc80:	2c00      	cmp	r4, #0
 800fc82:	d1f8      	bne.n	800fc76 <_fwalk_sglue+0xa>
 800fc84:	0030      	movs	r0, r6
 800fc86:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fc88:	89ab      	ldrh	r3, [r5, #12]
 800fc8a:	2b01      	cmp	r3, #1
 800fc8c:	d908      	bls.n	800fca0 <_fwalk_sglue+0x34>
 800fc8e:	220e      	movs	r2, #14
 800fc90:	5eab      	ldrsh	r3, [r5, r2]
 800fc92:	3301      	adds	r3, #1
 800fc94:	d004      	beq.n	800fca0 <_fwalk_sglue+0x34>
 800fc96:	0029      	movs	r1, r5
 800fc98:	9800      	ldr	r0, [sp, #0]
 800fc9a:	9b01      	ldr	r3, [sp, #4]
 800fc9c:	4798      	blx	r3
 800fc9e:	4306      	orrs	r6, r0
 800fca0:	3568      	adds	r5, #104	@ 0x68
 800fca2:	e7ea      	b.n	800fc7a <_fwalk_sglue+0xe>

0800fca4 <iprintf>:
 800fca4:	b40f      	push	{r0, r1, r2, r3}
 800fca6:	b507      	push	{r0, r1, r2, lr}
 800fca8:	4905      	ldr	r1, [pc, #20]	@ (800fcc0 <iprintf+0x1c>)
 800fcaa:	ab04      	add	r3, sp, #16
 800fcac:	6808      	ldr	r0, [r1, #0]
 800fcae:	cb04      	ldmia	r3!, {r2}
 800fcb0:	6881      	ldr	r1, [r0, #8]
 800fcb2:	9301      	str	r3, [sp, #4]
 800fcb4:	f001 fe18 	bl	80118e8 <_vfiprintf_r>
 800fcb8:	b003      	add	sp, #12
 800fcba:	bc08      	pop	{r3}
 800fcbc:	b004      	add	sp, #16
 800fcbe:	4718      	bx	r3
 800fcc0:	20000158 	.word	0x20000158

0800fcc4 <siprintf>:
 800fcc4:	b40e      	push	{r1, r2, r3}
 800fcc6:	b500      	push	{lr}
 800fcc8:	490b      	ldr	r1, [pc, #44]	@ (800fcf8 <siprintf+0x34>)
 800fcca:	b09c      	sub	sp, #112	@ 0x70
 800fccc:	ab1d      	add	r3, sp, #116	@ 0x74
 800fcce:	9002      	str	r0, [sp, #8]
 800fcd0:	9006      	str	r0, [sp, #24]
 800fcd2:	9107      	str	r1, [sp, #28]
 800fcd4:	9104      	str	r1, [sp, #16]
 800fcd6:	4809      	ldr	r0, [pc, #36]	@ (800fcfc <siprintf+0x38>)
 800fcd8:	4909      	ldr	r1, [pc, #36]	@ (800fd00 <siprintf+0x3c>)
 800fcda:	cb04      	ldmia	r3!, {r2}
 800fcdc:	9105      	str	r1, [sp, #20]
 800fcde:	6800      	ldr	r0, [r0, #0]
 800fce0:	a902      	add	r1, sp, #8
 800fce2:	9301      	str	r3, [sp, #4]
 800fce4:	f001 fcda 	bl	801169c <_svfiprintf_r>
 800fce8:	2200      	movs	r2, #0
 800fcea:	9b02      	ldr	r3, [sp, #8]
 800fcec:	701a      	strb	r2, [r3, #0]
 800fcee:	b01c      	add	sp, #112	@ 0x70
 800fcf0:	bc08      	pop	{r3}
 800fcf2:	b003      	add	sp, #12
 800fcf4:	4718      	bx	r3
 800fcf6:	46c0      	nop			@ (mov r8, r8)
 800fcf8:	7fffffff 	.word	0x7fffffff
 800fcfc:	20000158 	.word	0x20000158
 800fd00:	ffff0208 	.word	0xffff0208

0800fd04 <__sread>:
 800fd04:	b570      	push	{r4, r5, r6, lr}
 800fd06:	000c      	movs	r4, r1
 800fd08:	250e      	movs	r5, #14
 800fd0a:	5f49      	ldrsh	r1, [r1, r5]
 800fd0c:	f000 f8da 	bl	800fec4 <_read_r>
 800fd10:	2800      	cmp	r0, #0
 800fd12:	db03      	blt.n	800fd1c <__sread+0x18>
 800fd14:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800fd16:	181b      	adds	r3, r3, r0
 800fd18:	6563      	str	r3, [r4, #84]	@ 0x54
 800fd1a:	bd70      	pop	{r4, r5, r6, pc}
 800fd1c:	89a3      	ldrh	r3, [r4, #12]
 800fd1e:	4a02      	ldr	r2, [pc, #8]	@ (800fd28 <__sread+0x24>)
 800fd20:	4013      	ands	r3, r2
 800fd22:	81a3      	strh	r3, [r4, #12]
 800fd24:	e7f9      	b.n	800fd1a <__sread+0x16>
 800fd26:	46c0      	nop			@ (mov r8, r8)
 800fd28:	ffffefff 	.word	0xffffefff

0800fd2c <__swrite>:
 800fd2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd2e:	001f      	movs	r7, r3
 800fd30:	898b      	ldrh	r3, [r1, #12]
 800fd32:	0005      	movs	r5, r0
 800fd34:	000c      	movs	r4, r1
 800fd36:	0016      	movs	r6, r2
 800fd38:	05db      	lsls	r3, r3, #23
 800fd3a:	d505      	bpl.n	800fd48 <__swrite+0x1c>
 800fd3c:	230e      	movs	r3, #14
 800fd3e:	5ec9      	ldrsh	r1, [r1, r3]
 800fd40:	2200      	movs	r2, #0
 800fd42:	2302      	movs	r3, #2
 800fd44:	f000 f8aa 	bl	800fe9c <_lseek_r>
 800fd48:	89a3      	ldrh	r3, [r4, #12]
 800fd4a:	4a05      	ldr	r2, [pc, #20]	@ (800fd60 <__swrite+0x34>)
 800fd4c:	0028      	movs	r0, r5
 800fd4e:	4013      	ands	r3, r2
 800fd50:	81a3      	strh	r3, [r4, #12]
 800fd52:	0032      	movs	r2, r6
 800fd54:	230e      	movs	r3, #14
 800fd56:	5ee1      	ldrsh	r1, [r4, r3]
 800fd58:	003b      	movs	r3, r7
 800fd5a:	f000 f8c7 	bl	800feec <_write_r>
 800fd5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fd60:	ffffefff 	.word	0xffffefff

0800fd64 <__sseek>:
 800fd64:	b570      	push	{r4, r5, r6, lr}
 800fd66:	000c      	movs	r4, r1
 800fd68:	250e      	movs	r5, #14
 800fd6a:	5f49      	ldrsh	r1, [r1, r5]
 800fd6c:	f000 f896 	bl	800fe9c <_lseek_r>
 800fd70:	89a3      	ldrh	r3, [r4, #12]
 800fd72:	1c42      	adds	r2, r0, #1
 800fd74:	d103      	bne.n	800fd7e <__sseek+0x1a>
 800fd76:	4a05      	ldr	r2, [pc, #20]	@ (800fd8c <__sseek+0x28>)
 800fd78:	4013      	ands	r3, r2
 800fd7a:	81a3      	strh	r3, [r4, #12]
 800fd7c:	bd70      	pop	{r4, r5, r6, pc}
 800fd7e:	2280      	movs	r2, #128	@ 0x80
 800fd80:	0152      	lsls	r2, r2, #5
 800fd82:	4313      	orrs	r3, r2
 800fd84:	81a3      	strh	r3, [r4, #12]
 800fd86:	6560      	str	r0, [r4, #84]	@ 0x54
 800fd88:	e7f8      	b.n	800fd7c <__sseek+0x18>
 800fd8a:	46c0      	nop			@ (mov r8, r8)
 800fd8c:	ffffefff 	.word	0xffffefff

0800fd90 <__sclose>:
 800fd90:	b510      	push	{r4, lr}
 800fd92:	230e      	movs	r3, #14
 800fd94:	5ec9      	ldrsh	r1, [r1, r3]
 800fd96:	f000 f86f 	bl	800fe78 <_close_r>
 800fd9a:	bd10      	pop	{r4, pc}

0800fd9c <_vsniprintf_r>:
 800fd9c:	b530      	push	{r4, r5, lr}
 800fd9e:	0014      	movs	r4, r2
 800fda0:	0005      	movs	r5, r0
 800fda2:	001a      	movs	r2, r3
 800fda4:	b09b      	sub	sp, #108	@ 0x6c
 800fda6:	2c00      	cmp	r4, #0
 800fda8:	da05      	bge.n	800fdb6 <_vsniprintf_r+0x1a>
 800fdaa:	238b      	movs	r3, #139	@ 0x8b
 800fdac:	6003      	str	r3, [r0, #0]
 800fdae:	2001      	movs	r0, #1
 800fdb0:	4240      	negs	r0, r0
 800fdb2:	b01b      	add	sp, #108	@ 0x6c
 800fdb4:	bd30      	pop	{r4, r5, pc}
 800fdb6:	2382      	movs	r3, #130	@ 0x82
 800fdb8:	4668      	mov	r0, sp
 800fdba:	009b      	lsls	r3, r3, #2
 800fdbc:	8183      	strh	r3, [r0, #12]
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	9100      	str	r1, [sp, #0]
 800fdc2:	9104      	str	r1, [sp, #16]
 800fdc4:	429c      	cmp	r4, r3
 800fdc6:	d000      	beq.n	800fdca <_vsniprintf_r+0x2e>
 800fdc8:	1e63      	subs	r3, r4, #1
 800fdca:	9302      	str	r3, [sp, #8]
 800fdcc:	9305      	str	r3, [sp, #20]
 800fdce:	2301      	movs	r3, #1
 800fdd0:	4669      	mov	r1, sp
 800fdd2:	425b      	negs	r3, r3
 800fdd4:	81cb      	strh	r3, [r1, #14]
 800fdd6:	0028      	movs	r0, r5
 800fdd8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800fdda:	f001 fc5f 	bl	801169c <_svfiprintf_r>
 800fdde:	1c43      	adds	r3, r0, #1
 800fde0:	da01      	bge.n	800fde6 <_vsniprintf_r+0x4a>
 800fde2:	238b      	movs	r3, #139	@ 0x8b
 800fde4:	602b      	str	r3, [r5, #0]
 800fde6:	2c00      	cmp	r4, #0
 800fde8:	d0e3      	beq.n	800fdb2 <_vsniprintf_r+0x16>
 800fdea:	2200      	movs	r2, #0
 800fdec:	9b00      	ldr	r3, [sp, #0]
 800fdee:	701a      	strb	r2, [r3, #0]
 800fdf0:	e7df      	b.n	800fdb2 <_vsniprintf_r+0x16>
	...

0800fdf4 <vsniprintf>:
 800fdf4:	b513      	push	{r0, r1, r4, lr}
 800fdf6:	4c04      	ldr	r4, [pc, #16]	@ (800fe08 <vsniprintf+0x14>)
 800fdf8:	9300      	str	r3, [sp, #0]
 800fdfa:	0013      	movs	r3, r2
 800fdfc:	000a      	movs	r2, r1
 800fdfe:	0001      	movs	r1, r0
 800fe00:	6820      	ldr	r0, [r4, #0]
 800fe02:	f7ff ffcb 	bl	800fd9c <_vsniprintf_r>
 800fe06:	bd16      	pop	{r1, r2, r4, pc}
 800fe08:	20000158 	.word	0x20000158

0800fe0c <memset>:
 800fe0c:	0003      	movs	r3, r0
 800fe0e:	1882      	adds	r2, r0, r2
 800fe10:	4293      	cmp	r3, r2
 800fe12:	d100      	bne.n	800fe16 <memset+0xa>
 800fe14:	4770      	bx	lr
 800fe16:	7019      	strb	r1, [r3, #0]
 800fe18:	3301      	adds	r3, #1
 800fe1a:	e7f9      	b.n	800fe10 <memset+0x4>

0800fe1c <strncpy>:
 800fe1c:	0003      	movs	r3, r0
 800fe1e:	b530      	push	{r4, r5, lr}
 800fe20:	001d      	movs	r5, r3
 800fe22:	2a00      	cmp	r2, #0
 800fe24:	d006      	beq.n	800fe34 <strncpy+0x18>
 800fe26:	780c      	ldrb	r4, [r1, #0]
 800fe28:	3a01      	subs	r2, #1
 800fe2a:	3301      	adds	r3, #1
 800fe2c:	702c      	strb	r4, [r5, #0]
 800fe2e:	3101      	adds	r1, #1
 800fe30:	2c00      	cmp	r4, #0
 800fe32:	d1f5      	bne.n	800fe20 <strncpy+0x4>
 800fe34:	2100      	movs	r1, #0
 800fe36:	189a      	adds	r2, r3, r2
 800fe38:	4293      	cmp	r3, r2
 800fe3a:	d100      	bne.n	800fe3e <strncpy+0x22>
 800fe3c:	bd30      	pop	{r4, r5, pc}
 800fe3e:	7019      	strb	r1, [r3, #0]
 800fe40:	3301      	adds	r3, #1
 800fe42:	e7f9      	b.n	800fe38 <strncpy+0x1c>

0800fe44 <strstr>:
 800fe44:	780a      	ldrb	r2, [r1, #0]
 800fe46:	b530      	push	{r4, r5, lr}
 800fe48:	2a00      	cmp	r2, #0
 800fe4a:	d10c      	bne.n	800fe66 <strstr+0x22>
 800fe4c:	bd30      	pop	{r4, r5, pc}
 800fe4e:	429a      	cmp	r2, r3
 800fe50:	d108      	bne.n	800fe64 <strstr+0x20>
 800fe52:	2301      	movs	r3, #1
 800fe54:	5ccc      	ldrb	r4, [r1, r3]
 800fe56:	2c00      	cmp	r4, #0
 800fe58:	d0f8      	beq.n	800fe4c <strstr+0x8>
 800fe5a:	5cc5      	ldrb	r5, [r0, r3]
 800fe5c:	42a5      	cmp	r5, r4
 800fe5e:	d101      	bne.n	800fe64 <strstr+0x20>
 800fe60:	3301      	adds	r3, #1
 800fe62:	e7f7      	b.n	800fe54 <strstr+0x10>
 800fe64:	3001      	adds	r0, #1
 800fe66:	7803      	ldrb	r3, [r0, #0]
 800fe68:	2b00      	cmp	r3, #0
 800fe6a:	d1f0      	bne.n	800fe4e <strstr+0xa>
 800fe6c:	0018      	movs	r0, r3
 800fe6e:	e7ed      	b.n	800fe4c <strstr+0x8>

0800fe70 <_localeconv_r>:
 800fe70:	4800      	ldr	r0, [pc, #0]	@ (800fe74 <_localeconv_r+0x4>)
 800fe72:	4770      	bx	lr
 800fe74:	20000298 	.word	0x20000298

0800fe78 <_close_r>:
 800fe78:	2300      	movs	r3, #0
 800fe7a:	b570      	push	{r4, r5, r6, lr}
 800fe7c:	4d06      	ldr	r5, [pc, #24]	@ (800fe98 <_close_r+0x20>)
 800fe7e:	0004      	movs	r4, r0
 800fe80:	0008      	movs	r0, r1
 800fe82:	602b      	str	r3, [r5, #0]
 800fe84:	f7f7 fc0c 	bl	80076a0 <_close>
 800fe88:	1c43      	adds	r3, r0, #1
 800fe8a:	d103      	bne.n	800fe94 <_close_r+0x1c>
 800fe8c:	682b      	ldr	r3, [r5, #0]
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d000      	beq.n	800fe94 <_close_r+0x1c>
 800fe92:	6023      	str	r3, [r4, #0]
 800fe94:	bd70      	pop	{r4, r5, r6, pc}
 800fe96:	46c0      	nop			@ (mov r8, r8)
 800fe98:	20001f0c 	.word	0x20001f0c

0800fe9c <_lseek_r>:
 800fe9c:	b570      	push	{r4, r5, r6, lr}
 800fe9e:	0004      	movs	r4, r0
 800fea0:	0008      	movs	r0, r1
 800fea2:	0011      	movs	r1, r2
 800fea4:	001a      	movs	r2, r3
 800fea6:	2300      	movs	r3, #0
 800fea8:	4d05      	ldr	r5, [pc, #20]	@ (800fec0 <_lseek_r+0x24>)
 800feaa:	602b      	str	r3, [r5, #0]
 800feac:	f7f7 fc19 	bl	80076e2 <_lseek>
 800feb0:	1c43      	adds	r3, r0, #1
 800feb2:	d103      	bne.n	800febc <_lseek_r+0x20>
 800feb4:	682b      	ldr	r3, [r5, #0]
 800feb6:	2b00      	cmp	r3, #0
 800feb8:	d000      	beq.n	800febc <_lseek_r+0x20>
 800feba:	6023      	str	r3, [r4, #0]
 800febc:	bd70      	pop	{r4, r5, r6, pc}
 800febe:	46c0      	nop			@ (mov r8, r8)
 800fec0:	20001f0c 	.word	0x20001f0c

0800fec4 <_read_r>:
 800fec4:	b570      	push	{r4, r5, r6, lr}
 800fec6:	0004      	movs	r4, r0
 800fec8:	0008      	movs	r0, r1
 800feca:	0011      	movs	r1, r2
 800fecc:	001a      	movs	r2, r3
 800fece:	2300      	movs	r3, #0
 800fed0:	4d05      	ldr	r5, [pc, #20]	@ (800fee8 <_read_r+0x24>)
 800fed2:	602b      	str	r3, [r5, #0]
 800fed4:	f7f7 fbc7 	bl	8007666 <_read>
 800fed8:	1c43      	adds	r3, r0, #1
 800feda:	d103      	bne.n	800fee4 <_read_r+0x20>
 800fedc:	682b      	ldr	r3, [r5, #0]
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d000      	beq.n	800fee4 <_read_r+0x20>
 800fee2:	6023      	str	r3, [r4, #0]
 800fee4:	bd70      	pop	{r4, r5, r6, pc}
 800fee6:	46c0      	nop			@ (mov r8, r8)
 800fee8:	20001f0c 	.word	0x20001f0c

0800feec <_write_r>:
 800feec:	b570      	push	{r4, r5, r6, lr}
 800feee:	0004      	movs	r4, r0
 800fef0:	0008      	movs	r0, r1
 800fef2:	0011      	movs	r1, r2
 800fef4:	001a      	movs	r2, r3
 800fef6:	2300      	movs	r3, #0
 800fef8:	4d05      	ldr	r5, [pc, #20]	@ (800ff10 <_write_r+0x24>)
 800fefa:	602b      	str	r3, [r5, #0]
 800fefc:	f7f8 f814 	bl	8007f28 <_write>
 800ff00:	1c43      	adds	r3, r0, #1
 800ff02:	d103      	bne.n	800ff0c <_write_r+0x20>
 800ff04:	682b      	ldr	r3, [r5, #0]
 800ff06:	2b00      	cmp	r3, #0
 800ff08:	d000      	beq.n	800ff0c <_write_r+0x20>
 800ff0a:	6023      	str	r3, [r4, #0]
 800ff0c:	bd70      	pop	{r4, r5, r6, pc}
 800ff0e:	46c0      	nop			@ (mov r8, r8)
 800ff10:	20001f0c 	.word	0x20001f0c

0800ff14 <__errno>:
 800ff14:	4b01      	ldr	r3, [pc, #4]	@ (800ff1c <__errno+0x8>)
 800ff16:	6818      	ldr	r0, [r3, #0]
 800ff18:	4770      	bx	lr
 800ff1a:	46c0      	nop			@ (mov r8, r8)
 800ff1c:	20000158 	.word	0x20000158

0800ff20 <__libc_init_array>:
 800ff20:	b570      	push	{r4, r5, r6, lr}
 800ff22:	2600      	movs	r6, #0
 800ff24:	4c0c      	ldr	r4, [pc, #48]	@ (800ff58 <__libc_init_array+0x38>)
 800ff26:	4d0d      	ldr	r5, [pc, #52]	@ (800ff5c <__libc_init_array+0x3c>)
 800ff28:	1b64      	subs	r4, r4, r5
 800ff2a:	10a4      	asrs	r4, r4, #2
 800ff2c:	42a6      	cmp	r6, r4
 800ff2e:	d109      	bne.n	800ff44 <__libc_init_array+0x24>
 800ff30:	2600      	movs	r6, #0
 800ff32:	f002 fae1 	bl	80124f8 <_init>
 800ff36:	4c0a      	ldr	r4, [pc, #40]	@ (800ff60 <__libc_init_array+0x40>)
 800ff38:	4d0a      	ldr	r5, [pc, #40]	@ (800ff64 <__libc_init_array+0x44>)
 800ff3a:	1b64      	subs	r4, r4, r5
 800ff3c:	10a4      	asrs	r4, r4, #2
 800ff3e:	42a6      	cmp	r6, r4
 800ff40:	d105      	bne.n	800ff4e <__libc_init_array+0x2e>
 800ff42:	bd70      	pop	{r4, r5, r6, pc}
 800ff44:	00b3      	lsls	r3, r6, #2
 800ff46:	58eb      	ldr	r3, [r5, r3]
 800ff48:	4798      	blx	r3
 800ff4a:	3601      	adds	r6, #1
 800ff4c:	e7ee      	b.n	800ff2c <__libc_init_array+0xc>
 800ff4e:	00b3      	lsls	r3, r6, #2
 800ff50:	58eb      	ldr	r3, [r5, r3]
 800ff52:	4798      	blx	r3
 800ff54:	3601      	adds	r6, #1
 800ff56:	e7f2      	b.n	800ff3e <__libc_init_array+0x1e>
 800ff58:	080133c8 	.word	0x080133c8
 800ff5c:	080133c8 	.word	0x080133c8
 800ff60:	080133cc 	.word	0x080133cc
 800ff64:	080133c8 	.word	0x080133c8

0800ff68 <__retarget_lock_init_recursive>:
 800ff68:	4770      	bx	lr

0800ff6a <__retarget_lock_acquire_recursive>:
 800ff6a:	4770      	bx	lr

0800ff6c <__retarget_lock_release_recursive>:
 800ff6c:	4770      	bx	lr

0800ff6e <memchr>:
 800ff6e:	b2c9      	uxtb	r1, r1
 800ff70:	1882      	adds	r2, r0, r2
 800ff72:	4290      	cmp	r0, r2
 800ff74:	d101      	bne.n	800ff7a <memchr+0xc>
 800ff76:	2000      	movs	r0, #0
 800ff78:	4770      	bx	lr
 800ff7a:	7803      	ldrb	r3, [r0, #0]
 800ff7c:	428b      	cmp	r3, r1
 800ff7e:	d0fb      	beq.n	800ff78 <memchr+0xa>
 800ff80:	3001      	adds	r0, #1
 800ff82:	e7f6      	b.n	800ff72 <memchr+0x4>

0800ff84 <quorem>:
 800ff84:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff86:	6902      	ldr	r2, [r0, #16]
 800ff88:	690f      	ldr	r7, [r1, #16]
 800ff8a:	b087      	sub	sp, #28
 800ff8c:	0006      	movs	r6, r0
 800ff8e:	000b      	movs	r3, r1
 800ff90:	2000      	movs	r0, #0
 800ff92:	9102      	str	r1, [sp, #8]
 800ff94:	42ba      	cmp	r2, r7
 800ff96:	db6d      	blt.n	8010074 <quorem+0xf0>
 800ff98:	3f01      	subs	r7, #1
 800ff9a:	00bc      	lsls	r4, r7, #2
 800ff9c:	3314      	adds	r3, #20
 800ff9e:	9305      	str	r3, [sp, #20]
 800ffa0:	191b      	adds	r3, r3, r4
 800ffa2:	9303      	str	r3, [sp, #12]
 800ffa4:	0033      	movs	r3, r6
 800ffa6:	3314      	adds	r3, #20
 800ffa8:	191c      	adds	r4, r3, r4
 800ffaa:	9301      	str	r3, [sp, #4]
 800ffac:	6823      	ldr	r3, [r4, #0]
 800ffae:	9304      	str	r3, [sp, #16]
 800ffb0:	9b03      	ldr	r3, [sp, #12]
 800ffb2:	9804      	ldr	r0, [sp, #16]
 800ffb4:	681d      	ldr	r5, [r3, #0]
 800ffb6:	3501      	adds	r5, #1
 800ffb8:	0029      	movs	r1, r5
 800ffba:	f7f0 f8c1 	bl	8000140 <__udivsi3>
 800ffbe:	9b04      	ldr	r3, [sp, #16]
 800ffc0:	9000      	str	r0, [sp, #0]
 800ffc2:	42ab      	cmp	r3, r5
 800ffc4:	d32b      	bcc.n	801001e <quorem+0x9a>
 800ffc6:	9b05      	ldr	r3, [sp, #20]
 800ffc8:	9d01      	ldr	r5, [sp, #4]
 800ffca:	469c      	mov	ip, r3
 800ffcc:	2300      	movs	r3, #0
 800ffce:	9305      	str	r3, [sp, #20]
 800ffd0:	9304      	str	r3, [sp, #16]
 800ffd2:	4662      	mov	r2, ip
 800ffd4:	ca08      	ldmia	r2!, {r3}
 800ffd6:	6828      	ldr	r0, [r5, #0]
 800ffd8:	4694      	mov	ip, r2
 800ffda:	9a00      	ldr	r2, [sp, #0]
 800ffdc:	b299      	uxth	r1, r3
 800ffde:	4351      	muls	r1, r2
 800ffe0:	9a05      	ldr	r2, [sp, #20]
 800ffe2:	0c1b      	lsrs	r3, r3, #16
 800ffe4:	1889      	adds	r1, r1, r2
 800ffe6:	9a00      	ldr	r2, [sp, #0]
 800ffe8:	4353      	muls	r3, r2
 800ffea:	0c0a      	lsrs	r2, r1, #16
 800ffec:	189b      	adds	r3, r3, r2
 800ffee:	0c1a      	lsrs	r2, r3, #16
 800fff0:	b289      	uxth	r1, r1
 800fff2:	9205      	str	r2, [sp, #20]
 800fff4:	b282      	uxth	r2, r0
 800fff6:	1a52      	subs	r2, r2, r1
 800fff8:	9904      	ldr	r1, [sp, #16]
 800fffa:	0c00      	lsrs	r0, r0, #16
 800fffc:	1852      	adds	r2, r2, r1
 800fffe:	b29b      	uxth	r3, r3
 8010000:	1411      	asrs	r1, r2, #16
 8010002:	1ac3      	subs	r3, r0, r3
 8010004:	185b      	adds	r3, r3, r1
 8010006:	1419      	asrs	r1, r3, #16
 8010008:	b292      	uxth	r2, r2
 801000a:	041b      	lsls	r3, r3, #16
 801000c:	431a      	orrs	r2, r3
 801000e:	9b03      	ldr	r3, [sp, #12]
 8010010:	9104      	str	r1, [sp, #16]
 8010012:	c504      	stmia	r5!, {r2}
 8010014:	4563      	cmp	r3, ip
 8010016:	d2dc      	bcs.n	800ffd2 <quorem+0x4e>
 8010018:	6823      	ldr	r3, [r4, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d030      	beq.n	8010080 <quorem+0xfc>
 801001e:	0030      	movs	r0, r6
 8010020:	9902      	ldr	r1, [sp, #8]
 8010022:	f001 f9c5 	bl	80113b0 <__mcmp>
 8010026:	2800      	cmp	r0, #0
 8010028:	db23      	blt.n	8010072 <quorem+0xee>
 801002a:	0034      	movs	r4, r6
 801002c:	2500      	movs	r5, #0
 801002e:	9902      	ldr	r1, [sp, #8]
 8010030:	3414      	adds	r4, #20
 8010032:	3114      	adds	r1, #20
 8010034:	6823      	ldr	r3, [r4, #0]
 8010036:	c901      	ldmia	r1!, {r0}
 8010038:	9302      	str	r3, [sp, #8]
 801003a:	466b      	mov	r3, sp
 801003c:	891b      	ldrh	r3, [r3, #8]
 801003e:	b282      	uxth	r2, r0
 8010040:	1a9a      	subs	r2, r3, r2
 8010042:	9b02      	ldr	r3, [sp, #8]
 8010044:	1952      	adds	r2, r2, r5
 8010046:	0c00      	lsrs	r0, r0, #16
 8010048:	0c1b      	lsrs	r3, r3, #16
 801004a:	1a1b      	subs	r3, r3, r0
 801004c:	1410      	asrs	r0, r2, #16
 801004e:	181b      	adds	r3, r3, r0
 8010050:	141d      	asrs	r5, r3, #16
 8010052:	b292      	uxth	r2, r2
 8010054:	041b      	lsls	r3, r3, #16
 8010056:	431a      	orrs	r2, r3
 8010058:	9b03      	ldr	r3, [sp, #12]
 801005a:	c404      	stmia	r4!, {r2}
 801005c:	428b      	cmp	r3, r1
 801005e:	d2e9      	bcs.n	8010034 <quorem+0xb0>
 8010060:	9a01      	ldr	r2, [sp, #4]
 8010062:	00bb      	lsls	r3, r7, #2
 8010064:	18d3      	adds	r3, r2, r3
 8010066:	681a      	ldr	r2, [r3, #0]
 8010068:	2a00      	cmp	r2, #0
 801006a:	d013      	beq.n	8010094 <quorem+0x110>
 801006c:	9b00      	ldr	r3, [sp, #0]
 801006e:	3301      	adds	r3, #1
 8010070:	9300      	str	r3, [sp, #0]
 8010072:	9800      	ldr	r0, [sp, #0]
 8010074:	b007      	add	sp, #28
 8010076:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010078:	6823      	ldr	r3, [r4, #0]
 801007a:	2b00      	cmp	r3, #0
 801007c:	d104      	bne.n	8010088 <quorem+0x104>
 801007e:	3f01      	subs	r7, #1
 8010080:	9b01      	ldr	r3, [sp, #4]
 8010082:	3c04      	subs	r4, #4
 8010084:	42a3      	cmp	r3, r4
 8010086:	d3f7      	bcc.n	8010078 <quorem+0xf4>
 8010088:	6137      	str	r7, [r6, #16]
 801008a:	e7c8      	b.n	801001e <quorem+0x9a>
 801008c:	681a      	ldr	r2, [r3, #0]
 801008e:	2a00      	cmp	r2, #0
 8010090:	d104      	bne.n	801009c <quorem+0x118>
 8010092:	3f01      	subs	r7, #1
 8010094:	9a01      	ldr	r2, [sp, #4]
 8010096:	3b04      	subs	r3, #4
 8010098:	429a      	cmp	r2, r3
 801009a:	d3f7      	bcc.n	801008c <quorem+0x108>
 801009c:	6137      	str	r7, [r6, #16]
 801009e:	e7e5      	b.n	801006c <quorem+0xe8>

080100a0 <_dtoa_r>:
 80100a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100a2:	0014      	movs	r4, r2
 80100a4:	001d      	movs	r5, r3
 80100a6:	69c6      	ldr	r6, [r0, #28]
 80100a8:	b09d      	sub	sp, #116	@ 0x74
 80100aa:	940a      	str	r4, [sp, #40]	@ 0x28
 80100ac:	950b      	str	r5, [sp, #44]	@ 0x2c
 80100ae:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 80100b0:	9003      	str	r0, [sp, #12]
 80100b2:	2e00      	cmp	r6, #0
 80100b4:	d10f      	bne.n	80100d6 <_dtoa_r+0x36>
 80100b6:	2010      	movs	r0, #16
 80100b8:	f000 fe30 	bl	8010d1c <malloc>
 80100bc:	9b03      	ldr	r3, [sp, #12]
 80100be:	1e02      	subs	r2, r0, #0
 80100c0:	61d8      	str	r0, [r3, #28]
 80100c2:	d104      	bne.n	80100ce <_dtoa_r+0x2e>
 80100c4:	21ef      	movs	r1, #239	@ 0xef
 80100c6:	4bc7      	ldr	r3, [pc, #796]	@ (80103e4 <_dtoa_r+0x344>)
 80100c8:	48c7      	ldr	r0, [pc, #796]	@ (80103e8 <_dtoa_r+0x348>)
 80100ca:	f001 feab 	bl	8011e24 <__assert_func>
 80100ce:	6046      	str	r6, [r0, #4]
 80100d0:	6086      	str	r6, [r0, #8]
 80100d2:	6006      	str	r6, [r0, #0]
 80100d4:	60c6      	str	r6, [r0, #12]
 80100d6:	9b03      	ldr	r3, [sp, #12]
 80100d8:	69db      	ldr	r3, [r3, #28]
 80100da:	6819      	ldr	r1, [r3, #0]
 80100dc:	2900      	cmp	r1, #0
 80100de:	d00b      	beq.n	80100f8 <_dtoa_r+0x58>
 80100e0:	685a      	ldr	r2, [r3, #4]
 80100e2:	2301      	movs	r3, #1
 80100e4:	4093      	lsls	r3, r2
 80100e6:	604a      	str	r2, [r1, #4]
 80100e8:	608b      	str	r3, [r1, #8]
 80100ea:	9803      	ldr	r0, [sp, #12]
 80100ec:	f000 ff16 	bl	8010f1c <_Bfree>
 80100f0:	2200      	movs	r2, #0
 80100f2:	9b03      	ldr	r3, [sp, #12]
 80100f4:	69db      	ldr	r3, [r3, #28]
 80100f6:	601a      	str	r2, [r3, #0]
 80100f8:	2d00      	cmp	r5, #0
 80100fa:	da1e      	bge.n	801013a <_dtoa_r+0x9a>
 80100fc:	2301      	movs	r3, #1
 80100fe:	603b      	str	r3, [r7, #0]
 8010100:	006b      	lsls	r3, r5, #1
 8010102:	085b      	lsrs	r3, r3, #1
 8010104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010106:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8010108:	4bb8      	ldr	r3, [pc, #736]	@ (80103ec <_dtoa_r+0x34c>)
 801010a:	4ab8      	ldr	r2, [pc, #736]	@ (80103ec <_dtoa_r+0x34c>)
 801010c:	403b      	ands	r3, r7
 801010e:	4293      	cmp	r3, r2
 8010110:	d116      	bne.n	8010140 <_dtoa_r+0xa0>
 8010112:	4bb7      	ldr	r3, [pc, #732]	@ (80103f0 <_dtoa_r+0x350>)
 8010114:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8010116:	6013      	str	r3, [r2, #0]
 8010118:	033b      	lsls	r3, r7, #12
 801011a:	0b1b      	lsrs	r3, r3, #12
 801011c:	4323      	orrs	r3, r4
 801011e:	d101      	bne.n	8010124 <_dtoa_r+0x84>
 8010120:	f000 fd83 	bl	8010c2a <_dtoa_r+0xb8a>
 8010124:	4bb3      	ldr	r3, [pc, #716]	@ (80103f4 <_dtoa_r+0x354>)
 8010126:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010128:	9308      	str	r3, [sp, #32]
 801012a:	2a00      	cmp	r2, #0
 801012c:	d002      	beq.n	8010134 <_dtoa_r+0x94>
 801012e:	4bb2      	ldr	r3, [pc, #712]	@ (80103f8 <_dtoa_r+0x358>)
 8010130:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010132:	6013      	str	r3, [r2, #0]
 8010134:	9808      	ldr	r0, [sp, #32]
 8010136:	b01d      	add	sp, #116	@ 0x74
 8010138:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801013a:	2300      	movs	r3, #0
 801013c:	603b      	str	r3, [r7, #0]
 801013e:	e7e2      	b.n	8010106 <_dtoa_r+0x66>
 8010140:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010142:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010144:	9212      	str	r2, [sp, #72]	@ 0x48
 8010146:	9313      	str	r3, [sp, #76]	@ 0x4c
 8010148:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801014a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801014c:	2200      	movs	r2, #0
 801014e:	2300      	movs	r3, #0
 8010150:	f7f0 f97c 	bl	800044c <__aeabi_dcmpeq>
 8010154:	1e06      	subs	r6, r0, #0
 8010156:	d00b      	beq.n	8010170 <_dtoa_r+0xd0>
 8010158:	2301      	movs	r3, #1
 801015a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801015c:	6013      	str	r3, [r2, #0]
 801015e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8010160:	2b00      	cmp	r3, #0
 8010162:	d002      	beq.n	801016a <_dtoa_r+0xca>
 8010164:	4ba5      	ldr	r3, [pc, #660]	@ (80103fc <_dtoa_r+0x35c>)
 8010166:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010168:	6013      	str	r3, [r2, #0]
 801016a:	4ba5      	ldr	r3, [pc, #660]	@ (8010400 <_dtoa_r+0x360>)
 801016c:	9308      	str	r3, [sp, #32]
 801016e:	e7e1      	b.n	8010134 <_dtoa_r+0x94>
 8010170:	ab1a      	add	r3, sp, #104	@ 0x68
 8010172:	9301      	str	r3, [sp, #4]
 8010174:	ab1b      	add	r3, sp, #108	@ 0x6c
 8010176:	9300      	str	r3, [sp, #0]
 8010178:	9803      	ldr	r0, [sp, #12]
 801017a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801017c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801017e:	f001 f9cd 	bl	801151c <__d2b>
 8010182:	007a      	lsls	r2, r7, #1
 8010184:	9005      	str	r0, [sp, #20]
 8010186:	0d52      	lsrs	r2, r2, #21
 8010188:	d100      	bne.n	801018c <_dtoa_r+0xec>
 801018a:	e07b      	b.n	8010284 <_dtoa_r+0x1e4>
 801018c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801018e:	9618      	str	r6, [sp, #96]	@ 0x60
 8010190:	0319      	lsls	r1, r3, #12
 8010192:	4b9c      	ldr	r3, [pc, #624]	@ (8010404 <_dtoa_r+0x364>)
 8010194:	0b09      	lsrs	r1, r1, #12
 8010196:	430b      	orrs	r3, r1
 8010198:	499b      	ldr	r1, [pc, #620]	@ (8010408 <_dtoa_r+0x368>)
 801019a:	1857      	adds	r7, r2, r1
 801019c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801019e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80101a0:	0019      	movs	r1, r3
 80101a2:	2200      	movs	r2, #0
 80101a4:	4b99      	ldr	r3, [pc, #612]	@ (801040c <_dtoa_r+0x36c>)
 80101a6:	f7f2 fc8f 	bl	8002ac8 <__aeabi_dsub>
 80101aa:	4a99      	ldr	r2, [pc, #612]	@ (8010410 <_dtoa_r+0x370>)
 80101ac:	4b99      	ldr	r3, [pc, #612]	@ (8010414 <_dtoa_r+0x374>)
 80101ae:	f7f2 f9c3 	bl	8002538 <__aeabi_dmul>
 80101b2:	4a99      	ldr	r2, [pc, #612]	@ (8010418 <_dtoa_r+0x378>)
 80101b4:	4b99      	ldr	r3, [pc, #612]	@ (801041c <_dtoa_r+0x37c>)
 80101b6:	f7f1 fa17 	bl	80015e8 <__aeabi_dadd>
 80101ba:	0004      	movs	r4, r0
 80101bc:	0038      	movs	r0, r7
 80101be:	000d      	movs	r5, r1
 80101c0:	f7f3 f87c 	bl	80032bc <__aeabi_i2d>
 80101c4:	4a96      	ldr	r2, [pc, #600]	@ (8010420 <_dtoa_r+0x380>)
 80101c6:	4b97      	ldr	r3, [pc, #604]	@ (8010424 <_dtoa_r+0x384>)
 80101c8:	f7f2 f9b6 	bl	8002538 <__aeabi_dmul>
 80101cc:	0002      	movs	r2, r0
 80101ce:	000b      	movs	r3, r1
 80101d0:	0020      	movs	r0, r4
 80101d2:	0029      	movs	r1, r5
 80101d4:	f7f1 fa08 	bl	80015e8 <__aeabi_dadd>
 80101d8:	0004      	movs	r4, r0
 80101da:	000d      	movs	r5, r1
 80101dc:	f7f3 f832 	bl	8003244 <__aeabi_d2iz>
 80101e0:	2200      	movs	r2, #0
 80101e2:	9004      	str	r0, [sp, #16]
 80101e4:	2300      	movs	r3, #0
 80101e6:	0020      	movs	r0, r4
 80101e8:	0029      	movs	r1, r5
 80101ea:	f7f0 f935 	bl	8000458 <__aeabi_dcmplt>
 80101ee:	2800      	cmp	r0, #0
 80101f0:	d00b      	beq.n	801020a <_dtoa_r+0x16a>
 80101f2:	9804      	ldr	r0, [sp, #16]
 80101f4:	f7f3 f862 	bl	80032bc <__aeabi_i2d>
 80101f8:	002b      	movs	r3, r5
 80101fa:	0022      	movs	r2, r4
 80101fc:	f7f0 f926 	bl	800044c <__aeabi_dcmpeq>
 8010200:	4243      	negs	r3, r0
 8010202:	4158      	adcs	r0, r3
 8010204:	9b04      	ldr	r3, [sp, #16]
 8010206:	1a1b      	subs	r3, r3, r0
 8010208:	9304      	str	r3, [sp, #16]
 801020a:	2301      	movs	r3, #1
 801020c:	9315      	str	r3, [sp, #84]	@ 0x54
 801020e:	9b04      	ldr	r3, [sp, #16]
 8010210:	2b16      	cmp	r3, #22
 8010212:	d810      	bhi.n	8010236 <_dtoa_r+0x196>
 8010214:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8010216:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8010218:	9a04      	ldr	r2, [sp, #16]
 801021a:	4b83      	ldr	r3, [pc, #524]	@ (8010428 <_dtoa_r+0x388>)
 801021c:	00d2      	lsls	r2, r2, #3
 801021e:	189b      	adds	r3, r3, r2
 8010220:	681a      	ldr	r2, [r3, #0]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	f7f0 f918 	bl	8000458 <__aeabi_dcmplt>
 8010228:	2800      	cmp	r0, #0
 801022a:	d047      	beq.n	80102bc <_dtoa_r+0x21c>
 801022c:	9b04      	ldr	r3, [sp, #16]
 801022e:	3b01      	subs	r3, #1
 8010230:	9304      	str	r3, [sp, #16]
 8010232:	2300      	movs	r3, #0
 8010234:	9315      	str	r3, [sp, #84]	@ 0x54
 8010236:	2200      	movs	r2, #0
 8010238:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801023a:	9206      	str	r2, [sp, #24]
 801023c:	1bdb      	subs	r3, r3, r7
 801023e:	1e5a      	subs	r2, r3, #1
 8010240:	d53e      	bpl.n	80102c0 <_dtoa_r+0x220>
 8010242:	2201      	movs	r2, #1
 8010244:	1ad3      	subs	r3, r2, r3
 8010246:	9306      	str	r3, [sp, #24]
 8010248:	2300      	movs	r3, #0
 801024a:	930d      	str	r3, [sp, #52]	@ 0x34
 801024c:	9b04      	ldr	r3, [sp, #16]
 801024e:	2b00      	cmp	r3, #0
 8010250:	db38      	blt.n	80102c4 <_dtoa_r+0x224>
 8010252:	9a04      	ldr	r2, [sp, #16]
 8010254:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010256:	4694      	mov	ip, r2
 8010258:	4463      	add	r3, ip
 801025a:	930d      	str	r3, [sp, #52]	@ 0x34
 801025c:	2300      	movs	r3, #0
 801025e:	9214      	str	r2, [sp, #80]	@ 0x50
 8010260:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010262:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010264:	2401      	movs	r4, #1
 8010266:	2b09      	cmp	r3, #9
 8010268:	d867      	bhi.n	801033a <_dtoa_r+0x29a>
 801026a:	2b05      	cmp	r3, #5
 801026c:	dd02      	ble.n	8010274 <_dtoa_r+0x1d4>
 801026e:	2400      	movs	r4, #0
 8010270:	3b04      	subs	r3, #4
 8010272:	9322      	str	r3, [sp, #136]	@ 0x88
 8010274:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010276:	1e98      	subs	r0, r3, #2
 8010278:	2803      	cmp	r0, #3
 801027a:	d867      	bhi.n	801034c <_dtoa_r+0x2ac>
 801027c:	f7ef ff4c 	bl	8000118 <__gnu_thumb1_case_uqi>
 8010280:	5b383a2b 	.word	0x5b383a2b
 8010284:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010286:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 8010288:	18f6      	adds	r6, r6, r3
 801028a:	4b68      	ldr	r3, [pc, #416]	@ (801042c <_dtoa_r+0x38c>)
 801028c:	18f2      	adds	r2, r6, r3
 801028e:	2a20      	cmp	r2, #32
 8010290:	dd0f      	ble.n	80102b2 <_dtoa_r+0x212>
 8010292:	2340      	movs	r3, #64	@ 0x40
 8010294:	1a9b      	subs	r3, r3, r2
 8010296:	409f      	lsls	r7, r3
 8010298:	4b65      	ldr	r3, [pc, #404]	@ (8010430 <_dtoa_r+0x390>)
 801029a:	0038      	movs	r0, r7
 801029c:	18f3      	adds	r3, r6, r3
 801029e:	40dc      	lsrs	r4, r3
 80102a0:	4320      	orrs	r0, r4
 80102a2:	f7f3 f839 	bl	8003318 <__aeabi_ui2d>
 80102a6:	2201      	movs	r2, #1
 80102a8:	4b62      	ldr	r3, [pc, #392]	@ (8010434 <_dtoa_r+0x394>)
 80102aa:	1e77      	subs	r7, r6, #1
 80102ac:	18cb      	adds	r3, r1, r3
 80102ae:	9218      	str	r2, [sp, #96]	@ 0x60
 80102b0:	e776      	b.n	80101a0 <_dtoa_r+0x100>
 80102b2:	2320      	movs	r3, #32
 80102b4:	0020      	movs	r0, r4
 80102b6:	1a9b      	subs	r3, r3, r2
 80102b8:	4098      	lsls	r0, r3
 80102ba:	e7f2      	b.n	80102a2 <_dtoa_r+0x202>
 80102bc:	9015      	str	r0, [sp, #84]	@ 0x54
 80102be:	e7ba      	b.n	8010236 <_dtoa_r+0x196>
 80102c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80102c2:	e7c3      	b.n	801024c <_dtoa_r+0x1ac>
 80102c4:	9b06      	ldr	r3, [sp, #24]
 80102c6:	9a04      	ldr	r2, [sp, #16]
 80102c8:	1a9b      	subs	r3, r3, r2
 80102ca:	9306      	str	r3, [sp, #24]
 80102cc:	4253      	negs	r3, r2
 80102ce:	930f      	str	r3, [sp, #60]	@ 0x3c
 80102d0:	2300      	movs	r3, #0
 80102d2:	9314      	str	r3, [sp, #80]	@ 0x50
 80102d4:	e7c5      	b.n	8010262 <_dtoa_r+0x1c2>
 80102d6:	2300      	movs	r3, #0
 80102d8:	9310      	str	r3, [sp, #64]	@ 0x40
 80102da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80102dc:	930e      	str	r3, [sp, #56]	@ 0x38
 80102de:	9309      	str	r3, [sp, #36]	@ 0x24
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	dc13      	bgt.n	801030c <_dtoa_r+0x26c>
 80102e4:	2301      	movs	r3, #1
 80102e6:	001a      	movs	r2, r3
 80102e8:	930e      	str	r3, [sp, #56]	@ 0x38
 80102ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80102ec:	9223      	str	r2, [sp, #140]	@ 0x8c
 80102ee:	e00d      	b.n	801030c <_dtoa_r+0x26c>
 80102f0:	2301      	movs	r3, #1
 80102f2:	e7f1      	b.n	80102d8 <_dtoa_r+0x238>
 80102f4:	2300      	movs	r3, #0
 80102f6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80102f8:	9310      	str	r3, [sp, #64]	@ 0x40
 80102fa:	4694      	mov	ip, r2
 80102fc:	9b04      	ldr	r3, [sp, #16]
 80102fe:	4463      	add	r3, ip
 8010300:	930e      	str	r3, [sp, #56]	@ 0x38
 8010302:	3301      	adds	r3, #1
 8010304:	9309      	str	r3, [sp, #36]	@ 0x24
 8010306:	2b00      	cmp	r3, #0
 8010308:	dc00      	bgt.n	801030c <_dtoa_r+0x26c>
 801030a:	2301      	movs	r3, #1
 801030c:	9a03      	ldr	r2, [sp, #12]
 801030e:	2100      	movs	r1, #0
 8010310:	69d0      	ldr	r0, [r2, #28]
 8010312:	2204      	movs	r2, #4
 8010314:	0015      	movs	r5, r2
 8010316:	3514      	adds	r5, #20
 8010318:	429d      	cmp	r5, r3
 801031a:	d91b      	bls.n	8010354 <_dtoa_r+0x2b4>
 801031c:	6041      	str	r1, [r0, #4]
 801031e:	9803      	ldr	r0, [sp, #12]
 8010320:	f000 fdb8 	bl	8010e94 <_Balloc>
 8010324:	9008      	str	r0, [sp, #32]
 8010326:	2800      	cmp	r0, #0
 8010328:	d117      	bne.n	801035a <_dtoa_r+0x2ba>
 801032a:	21b0      	movs	r1, #176	@ 0xb0
 801032c:	4b42      	ldr	r3, [pc, #264]	@ (8010438 <_dtoa_r+0x398>)
 801032e:	482e      	ldr	r0, [pc, #184]	@ (80103e8 <_dtoa_r+0x348>)
 8010330:	9a08      	ldr	r2, [sp, #32]
 8010332:	31ff      	adds	r1, #255	@ 0xff
 8010334:	e6c9      	b.n	80100ca <_dtoa_r+0x2a>
 8010336:	2301      	movs	r3, #1
 8010338:	e7dd      	b.n	80102f6 <_dtoa_r+0x256>
 801033a:	2300      	movs	r3, #0
 801033c:	9410      	str	r4, [sp, #64]	@ 0x40
 801033e:	9322      	str	r3, [sp, #136]	@ 0x88
 8010340:	3b01      	subs	r3, #1
 8010342:	930e      	str	r3, [sp, #56]	@ 0x38
 8010344:	9309      	str	r3, [sp, #36]	@ 0x24
 8010346:	2200      	movs	r2, #0
 8010348:	3313      	adds	r3, #19
 801034a:	e7cf      	b.n	80102ec <_dtoa_r+0x24c>
 801034c:	2301      	movs	r3, #1
 801034e:	9310      	str	r3, [sp, #64]	@ 0x40
 8010350:	3b02      	subs	r3, #2
 8010352:	e7f6      	b.n	8010342 <_dtoa_r+0x2a2>
 8010354:	3101      	adds	r1, #1
 8010356:	0052      	lsls	r2, r2, #1
 8010358:	e7dc      	b.n	8010314 <_dtoa_r+0x274>
 801035a:	9b03      	ldr	r3, [sp, #12]
 801035c:	9a08      	ldr	r2, [sp, #32]
 801035e:	69db      	ldr	r3, [r3, #28]
 8010360:	601a      	str	r2, [r3, #0]
 8010362:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010364:	2b0e      	cmp	r3, #14
 8010366:	d900      	bls.n	801036a <_dtoa_r+0x2ca>
 8010368:	e0d9      	b.n	801051e <_dtoa_r+0x47e>
 801036a:	2c00      	cmp	r4, #0
 801036c:	d100      	bne.n	8010370 <_dtoa_r+0x2d0>
 801036e:	e0d6      	b.n	801051e <_dtoa_r+0x47e>
 8010370:	9b04      	ldr	r3, [sp, #16]
 8010372:	2b00      	cmp	r3, #0
 8010374:	dd64      	ble.n	8010440 <_dtoa_r+0x3a0>
 8010376:	210f      	movs	r1, #15
 8010378:	9a04      	ldr	r2, [sp, #16]
 801037a:	4b2b      	ldr	r3, [pc, #172]	@ (8010428 <_dtoa_r+0x388>)
 801037c:	400a      	ands	r2, r1
 801037e:	00d2      	lsls	r2, r2, #3
 8010380:	189b      	adds	r3, r3, r2
 8010382:	681e      	ldr	r6, [r3, #0]
 8010384:	685f      	ldr	r7, [r3, #4]
 8010386:	9b04      	ldr	r3, [sp, #16]
 8010388:	2402      	movs	r4, #2
 801038a:	111d      	asrs	r5, r3, #4
 801038c:	05db      	lsls	r3, r3, #23
 801038e:	d50a      	bpl.n	80103a6 <_dtoa_r+0x306>
 8010390:	4b2a      	ldr	r3, [pc, #168]	@ (801043c <_dtoa_r+0x39c>)
 8010392:	400d      	ands	r5, r1
 8010394:	6a1a      	ldr	r2, [r3, #32]
 8010396:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010398:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801039a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801039c:	f7f1 fc88 	bl	8001cb0 <__aeabi_ddiv>
 80103a0:	900a      	str	r0, [sp, #40]	@ 0x28
 80103a2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80103a4:	3401      	adds	r4, #1
 80103a6:	4b25      	ldr	r3, [pc, #148]	@ (801043c <_dtoa_r+0x39c>)
 80103a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80103aa:	2d00      	cmp	r5, #0
 80103ac:	d108      	bne.n	80103c0 <_dtoa_r+0x320>
 80103ae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80103b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80103b2:	0032      	movs	r2, r6
 80103b4:	003b      	movs	r3, r7
 80103b6:	f7f1 fc7b 	bl	8001cb0 <__aeabi_ddiv>
 80103ba:	900a      	str	r0, [sp, #40]	@ 0x28
 80103bc:	910b      	str	r1, [sp, #44]	@ 0x2c
 80103be:	e05a      	b.n	8010476 <_dtoa_r+0x3d6>
 80103c0:	2301      	movs	r3, #1
 80103c2:	421d      	tst	r5, r3
 80103c4:	d009      	beq.n	80103da <_dtoa_r+0x33a>
 80103c6:	18e4      	adds	r4, r4, r3
 80103c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103ca:	0030      	movs	r0, r6
 80103cc:	681a      	ldr	r2, [r3, #0]
 80103ce:	685b      	ldr	r3, [r3, #4]
 80103d0:	0039      	movs	r1, r7
 80103d2:	f7f2 f8b1 	bl	8002538 <__aeabi_dmul>
 80103d6:	0006      	movs	r6, r0
 80103d8:	000f      	movs	r7, r1
 80103da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80103dc:	106d      	asrs	r5, r5, #1
 80103de:	3308      	adds	r3, #8
 80103e0:	e7e2      	b.n	80103a8 <_dtoa_r+0x308>
 80103e2:	46c0      	nop			@ (mov r8, r8)
 80103e4:	08013075 	.word	0x08013075
 80103e8:	0801308c 	.word	0x0801308c
 80103ec:	7ff00000 	.word	0x7ff00000
 80103f0:	0000270f 	.word	0x0000270f
 80103f4:	08013071 	.word	0x08013071
 80103f8:	08013074 	.word	0x08013074
 80103fc:	08013045 	.word	0x08013045
 8010400:	08013044 	.word	0x08013044
 8010404:	3ff00000 	.word	0x3ff00000
 8010408:	fffffc01 	.word	0xfffffc01
 801040c:	3ff80000 	.word	0x3ff80000
 8010410:	636f4361 	.word	0x636f4361
 8010414:	3fd287a7 	.word	0x3fd287a7
 8010418:	8b60c8b3 	.word	0x8b60c8b3
 801041c:	3fc68a28 	.word	0x3fc68a28
 8010420:	509f79fb 	.word	0x509f79fb
 8010424:	3fd34413 	.word	0x3fd34413
 8010428:	08013188 	.word	0x08013188
 801042c:	00000432 	.word	0x00000432
 8010430:	00000412 	.word	0x00000412
 8010434:	fe100000 	.word	0xfe100000
 8010438:	080130e4 	.word	0x080130e4
 801043c:	08013160 	.word	0x08013160
 8010440:	9b04      	ldr	r3, [sp, #16]
 8010442:	2402      	movs	r4, #2
 8010444:	2b00      	cmp	r3, #0
 8010446:	d016      	beq.n	8010476 <_dtoa_r+0x3d6>
 8010448:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801044a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801044c:	220f      	movs	r2, #15
 801044e:	425d      	negs	r5, r3
 8010450:	402a      	ands	r2, r5
 8010452:	4bd7      	ldr	r3, [pc, #860]	@ (80107b0 <_dtoa_r+0x710>)
 8010454:	00d2      	lsls	r2, r2, #3
 8010456:	189b      	adds	r3, r3, r2
 8010458:	681a      	ldr	r2, [r3, #0]
 801045a:	685b      	ldr	r3, [r3, #4]
 801045c:	f7f2 f86c 	bl	8002538 <__aeabi_dmul>
 8010460:	2701      	movs	r7, #1
 8010462:	2300      	movs	r3, #0
 8010464:	900a      	str	r0, [sp, #40]	@ 0x28
 8010466:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010468:	4ed2      	ldr	r6, [pc, #840]	@ (80107b4 <_dtoa_r+0x714>)
 801046a:	112d      	asrs	r5, r5, #4
 801046c:	2d00      	cmp	r5, #0
 801046e:	d000      	beq.n	8010472 <_dtoa_r+0x3d2>
 8010470:	e0ba      	b.n	80105e8 <_dtoa_r+0x548>
 8010472:	2b00      	cmp	r3, #0
 8010474:	d1a1      	bne.n	80103ba <_dtoa_r+0x31a>
 8010476:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8010478:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801047a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801047c:	2b00      	cmp	r3, #0
 801047e:	d100      	bne.n	8010482 <_dtoa_r+0x3e2>
 8010480:	e0bd      	b.n	80105fe <_dtoa_r+0x55e>
 8010482:	2200      	movs	r2, #0
 8010484:	0030      	movs	r0, r6
 8010486:	0039      	movs	r1, r7
 8010488:	4bcb      	ldr	r3, [pc, #812]	@ (80107b8 <_dtoa_r+0x718>)
 801048a:	f7ef ffe5 	bl	8000458 <__aeabi_dcmplt>
 801048e:	2800      	cmp	r0, #0
 8010490:	d100      	bne.n	8010494 <_dtoa_r+0x3f4>
 8010492:	e0b4      	b.n	80105fe <_dtoa_r+0x55e>
 8010494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010496:	2b00      	cmp	r3, #0
 8010498:	d100      	bne.n	801049c <_dtoa_r+0x3fc>
 801049a:	e0b0      	b.n	80105fe <_dtoa_r+0x55e>
 801049c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801049e:	2b00      	cmp	r3, #0
 80104a0:	dd39      	ble.n	8010516 <_dtoa_r+0x476>
 80104a2:	9b04      	ldr	r3, [sp, #16]
 80104a4:	2200      	movs	r2, #0
 80104a6:	3b01      	subs	r3, #1
 80104a8:	930c      	str	r3, [sp, #48]	@ 0x30
 80104aa:	0030      	movs	r0, r6
 80104ac:	4bc3      	ldr	r3, [pc, #780]	@ (80107bc <_dtoa_r+0x71c>)
 80104ae:	0039      	movs	r1, r7
 80104b0:	f7f2 f842 	bl	8002538 <__aeabi_dmul>
 80104b4:	900a      	str	r0, [sp, #40]	@ 0x28
 80104b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 80104b8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80104ba:	3401      	adds	r4, #1
 80104bc:	0020      	movs	r0, r4
 80104be:	9311      	str	r3, [sp, #68]	@ 0x44
 80104c0:	f7f2 fefc 	bl	80032bc <__aeabi_i2d>
 80104c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80104c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80104c8:	f7f2 f836 	bl	8002538 <__aeabi_dmul>
 80104cc:	4bbc      	ldr	r3, [pc, #752]	@ (80107c0 <_dtoa_r+0x720>)
 80104ce:	2200      	movs	r2, #0
 80104d0:	f7f1 f88a 	bl	80015e8 <__aeabi_dadd>
 80104d4:	4bbb      	ldr	r3, [pc, #748]	@ (80107c4 <_dtoa_r+0x724>)
 80104d6:	0006      	movs	r6, r0
 80104d8:	18cf      	adds	r7, r1, r3
 80104da:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d000      	beq.n	80104e2 <_dtoa_r+0x442>
 80104e0:	e091      	b.n	8010606 <_dtoa_r+0x566>
 80104e2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80104e4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80104e6:	2200      	movs	r2, #0
 80104e8:	4bb7      	ldr	r3, [pc, #732]	@ (80107c8 <_dtoa_r+0x728>)
 80104ea:	f7f2 faed 	bl	8002ac8 <__aeabi_dsub>
 80104ee:	0032      	movs	r2, r6
 80104f0:	003b      	movs	r3, r7
 80104f2:	0004      	movs	r4, r0
 80104f4:	000d      	movs	r5, r1
 80104f6:	f7ef ffc3 	bl	8000480 <__aeabi_dcmpgt>
 80104fa:	2800      	cmp	r0, #0
 80104fc:	d000      	beq.n	8010500 <_dtoa_r+0x460>
 80104fe:	e29d      	b.n	8010a3c <_dtoa_r+0x99c>
 8010500:	2180      	movs	r1, #128	@ 0x80
 8010502:	0609      	lsls	r1, r1, #24
 8010504:	187b      	adds	r3, r7, r1
 8010506:	0032      	movs	r2, r6
 8010508:	0020      	movs	r0, r4
 801050a:	0029      	movs	r1, r5
 801050c:	f7ef ffa4 	bl	8000458 <__aeabi_dcmplt>
 8010510:	2800      	cmp	r0, #0
 8010512:	d000      	beq.n	8010516 <_dtoa_r+0x476>
 8010514:	e130      	b.n	8010778 <_dtoa_r+0x6d8>
 8010516:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010518:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801051a:	930a      	str	r3, [sp, #40]	@ 0x28
 801051c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801051e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8010520:	2b00      	cmp	r3, #0
 8010522:	da00      	bge.n	8010526 <_dtoa_r+0x486>
 8010524:	e177      	b.n	8010816 <_dtoa_r+0x776>
 8010526:	9a04      	ldr	r2, [sp, #16]
 8010528:	2a0e      	cmp	r2, #14
 801052a:	dd00      	ble.n	801052e <_dtoa_r+0x48e>
 801052c:	e173      	b.n	8010816 <_dtoa_r+0x776>
 801052e:	4ba0      	ldr	r3, [pc, #640]	@ (80107b0 <_dtoa_r+0x710>)
 8010530:	00d2      	lsls	r2, r2, #3
 8010532:	189b      	adds	r3, r3, r2
 8010534:	685c      	ldr	r4, [r3, #4]
 8010536:	681b      	ldr	r3, [r3, #0]
 8010538:	9306      	str	r3, [sp, #24]
 801053a:	9407      	str	r4, [sp, #28]
 801053c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801053e:	2b00      	cmp	r3, #0
 8010540:	da03      	bge.n	801054a <_dtoa_r+0x4aa>
 8010542:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010544:	2b00      	cmp	r3, #0
 8010546:	dc00      	bgt.n	801054a <_dtoa_r+0x4aa>
 8010548:	e106      	b.n	8010758 <_dtoa_r+0x6b8>
 801054a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801054c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801054e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010550:	9d08      	ldr	r5, [sp, #32]
 8010552:	3b01      	subs	r3, #1
 8010554:	195b      	adds	r3, r3, r5
 8010556:	930a      	str	r3, [sp, #40]	@ 0x28
 8010558:	9a06      	ldr	r2, [sp, #24]
 801055a:	9b07      	ldr	r3, [sp, #28]
 801055c:	0030      	movs	r0, r6
 801055e:	0039      	movs	r1, r7
 8010560:	f7f1 fba6 	bl	8001cb0 <__aeabi_ddiv>
 8010564:	f7f2 fe6e 	bl	8003244 <__aeabi_d2iz>
 8010568:	9009      	str	r0, [sp, #36]	@ 0x24
 801056a:	f7f2 fea7 	bl	80032bc <__aeabi_i2d>
 801056e:	9a06      	ldr	r2, [sp, #24]
 8010570:	9b07      	ldr	r3, [sp, #28]
 8010572:	f7f1 ffe1 	bl	8002538 <__aeabi_dmul>
 8010576:	0002      	movs	r2, r0
 8010578:	000b      	movs	r3, r1
 801057a:	0030      	movs	r0, r6
 801057c:	0039      	movs	r1, r7
 801057e:	f7f2 faa3 	bl	8002ac8 <__aeabi_dsub>
 8010582:	002b      	movs	r3, r5
 8010584:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010586:	3501      	adds	r5, #1
 8010588:	3230      	adds	r2, #48	@ 0x30
 801058a:	701a      	strb	r2, [r3, #0]
 801058c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801058e:	002c      	movs	r4, r5
 8010590:	429a      	cmp	r2, r3
 8010592:	d000      	beq.n	8010596 <_dtoa_r+0x4f6>
 8010594:	e131      	b.n	80107fa <_dtoa_r+0x75a>
 8010596:	0002      	movs	r2, r0
 8010598:	000b      	movs	r3, r1
 801059a:	f7f1 f825 	bl	80015e8 <__aeabi_dadd>
 801059e:	9a06      	ldr	r2, [sp, #24]
 80105a0:	9b07      	ldr	r3, [sp, #28]
 80105a2:	0006      	movs	r6, r0
 80105a4:	000f      	movs	r7, r1
 80105a6:	f7ef ff6b 	bl	8000480 <__aeabi_dcmpgt>
 80105aa:	2800      	cmp	r0, #0
 80105ac:	d000      	beq.n	80105b0 <_dtoa_r+0x510>
 80105ae:	e10f      	b.n	80107d0 <_dtoa_r+0x730>
 80105b0:	9a06      	ldr	r2, [sp, #24]
 80105b2:	9b07      	ldr	r3, [sp, #28]
 80105b4:	0030      	movs	r0, r6
 80105b6:	0039      	movs	r1, r7
 80105b8:	f7ef ff48 	bl	800044c <__aeabi_dcmpeq>
 80105bc:	2800      	cmp	r0, #0
 80105be:	d003      	beq.n	80105c8 <_dtoa_r+0x528>
 80105c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80105c2:	07dd      	lsls	r5, r3, #31
 80105c4:	d500      	bpl.n	80105c8 <_dtoa_r+0x528>
 80105c6:	e103      	b.n	80107d0 <_dtoa_r+0x730>
 80105c8:	9905      	ldr	r1, [sp, #20]
 80105ca:	9803      	ldr	r0, [sp, #12]
 80105cc:	f000 fca6 	bl	8010f1c <_Bfree>
 80105d0:	2300      	movs	r3, #0
 80105d2:	7023      	strb	r3, [r4, #0]
 80105d4:	9b04      	ldr	r3, [sp, #16]
 80105d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80105d8:	3301      	adds	r3, #1
 80105da:	6013      	str	r3, [r2, #0]
 80105dc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80105de:	2b00      	cmp	r3, #0
 80105e0:	d100      	bne.n	80105e4 <_dtoa_r+0x544>
 80105e2:	e5a7      	b.n	8010134 <_dtoa_r+0x94>
 80105e4:	601c      	str	r4, [r3, #0]
 80105e6:	e5a5      	b.n	8010134 <_dtoa_r+0x94>
 80105e8:	423d      	tst	r5, r7
 80105ea:	d005      	beq.n	80105f8 <_dtoa_r+0x558>
 80105ec:	6832      	ldr	r2, [r6, #0]
 80105ee:	6873      	ldr	r3, [r6, #4]
 80105f0:	f7f1 ffa2 	bl	8002538 <__aeabi_dmul>
 80105f4:	003b      	movs	r3, r7
 80105f6:	3401      	adds	r4, #1
 80105f8:	106d      	asrs	r5, r5, #1
 80105fa:	3608      	adds	r6, #8
 80105fc:	e736      	b.n	801046c <_dtoa_r+0x3cc>
 80105fe:	9b04      	ldr	r3, [sp, #16]
 8010600:	930c      	str	r3, [sp, #48]	@ 0x30
 8010602:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010604:	e75a      	b.n	80104bc <_dtoa_r+0x41c>
 8010606:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8010608:	4b69      	ldr	r3, [pc, #420]	@ (80107b0 <_dtoa_r+0x710>)
 801060a:	3a01      	subs	r2, #1
 801060c:	00d2      	lsls	r2, r2, #3
 801060e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8010610:	189b      	adds	r3, r3, r2
 8010612:	681a      	ldr	r2, [r3, #0]
 8010614:	685b      	ldr	r3, [r3, #4]
 8010616:	2900      	cmp	r1, #0
 8010618:	d04c      	beq.n	80106b4 <_dtoa_r+0x614>
 801061a:	2000      	movs	r0, #0
 801061c:	496b      	ldr	r1, [pc, #428]	@ (80107cc <_dtoa_r+0x72c>)
 801061e:	f7f1 fb47 	bl	8001cb0 <__aeabi_ddiv>
 8010622:	0032      	movs	r2, r6
 8010624:	003b      	movs	r3, r7
 8010626:	f7f2 fa4f 	bl	8002ac8 <__aeabi_dsub>
 801062a:	9a08      	ldr	r2, [sp, #32]
 801062c:	0006      	movs	r6, r0
 801062e:	4694      	mov	ip, r2
 8010630:	000f      	movs	r7, r1
 8010632:	9b08      	ldr	r3, [sp, #32]
 8010634:	9316      	str	r3, [sp, #88]	@ 0x58
 8010636:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8010638:	4463      	add	r3, ip
 801063a:	9311      	str	r3, [sp, #68]	@ 0x44
 801063c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801063e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010640:	f7f2 fe00 	bl	8003244 <__aeabi_d2iz>
 8010644:	0005      	movs	r5, r0
 8010646:	f7f2 fe39 	bl	80032bc <__aeabi_i2d>
 801064a:	0002      	movs	r2, r0
 801064c:	000b      	movs	r3, r1
 801064e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8010650:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8010652:	f7f2 fa39 	bl	8002ac8 <__aeabi_dsub>
 8010656:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8010658:	3530      	adds	r5, #48	@ 0x30
 801065a:	1c5c      	adds	r4, r3, #1
 801065c:	701d      	strb	r5, [r3, #0]
 801065e:	0032      	movs	r2, r6
 8010660:	003b      	movs	r3, r7
 8010662:	900a      	str	r0, [sp, #40]	@ 0x28
 8010664:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010666:	f7ef fef7 	bl	8000458 <__aeabi_dcmplt>
 801066a:	2800      	cmp	r0, #0
 801066c:	d16a      	bne.n	8010744 <_dtoa_r+0x6a4>
 801066e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8010670:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010672:	2000      	movs	r0, #0
 8010674:	4950      	ldr	r1, [pc, #320]	@ (80107b8 <_dtoa_r+0x718>)
 8010676:	f7f2 fa27 	bl	8002ac8 <__aeabi_dsub>
 801067a:	0032      	movs	r2, r6
 801067c:	003b      	movs	r3, r7
 801067e:	f7ef feeb 	bl	8000458 <__aeabi_dcmplt>
 8010682:	2800      	cmp	r0, #0
 8010684:	d000      	beq.n	8010688 <_dtoa_r+0x5e8>
 8010686:	e0a5      	b.n	80107d4 <_dtoa_r+0x734>
 8010688:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801068a:	42a3      	cmp	r3, r4
 801068c:	d100      	bne.n	8010690 <_dtoa_r+0x5f0>
 801068e:	e742      	b.n	8010516 <_dtoa_r+0x476>
 8010690:	2200      	movs	r2, #0
 8010692:	0030      	movs	r0, r6
 8010694:	0039      	movs	r1, r7
 8010696:	4b49      	ldr	r3, [pc, #292]	@ (80107bc <_dtoa_r+0x71c>)
 8010698:	f7f1 ff4e 	bl	8002538 <__aeabi_dmul>
 801069c:	2200      	movs	r2, #0
 801069e:	0006      	movs	r6, r0
 80106a0:	000f      	movs	r7, r1
 80106a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106a6:	4b45      	ldr	r3, [pc, #276]	@ (80107bc <_dtoa_r+0x71c>)
 80106a8:	f7f1 ff46 	bl	8002538 <__aeabi_dmul>
 80106ac:	9416      	str	r4, [sp, #88]	@ 0x58
 80106ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80106b0:	910b      	str	r1, [sp, #44]	@ 0x2c
 80106b2:	e7c3      	b.n	801063c <_dtoa_r+0x59c>
 80106b4:	0030      	movs	r0, r6
 80106b6:	0039      	movs	r1, r7
 80106b8:	f7f1 ff3e 	bl	8002538 <__aeabi_dmul>
 80106bc:	9d08      	ldr	r5, [sp, #32]
 80106be:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80106c0:	002b      	movs	r3, r5
 80106c2:	4694      	mov	ip, r2
 80106c4:	9016      	str	r0, [sp, #88]	@ 0x58
 80106c6:	9117      	str	r1, [sp, #92]	@ 0x5c
 80106c8:	4463      	add	r3, ip
 80106ca:	9319      	str	r3, [sp, #100]	@ 0x64
 80106cc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106ce:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106d0:	f7f2 fdb8 	bl	8003244 <__aeabi_d2iz>
 80106d4:	0004      	movs	r4, r0
 80106d6:	f7f2 fdf1 	bl	80032bc <__aeabi_i2d>
 80106da:	000b      	movs	r3, r1
 80106dc:	0002      	movs	r2, r0
 80106de:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80106e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80106e2:	f7f2 f9f1 	bl	8002ac8 <__aeabi_dsub>
 80106e6:	3430      	adds	r4, #48	@ 0x30
 80106e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80106ea:	702c      	strb	r4, [r5, #0]
 80106ec:	3501      	adds	r5, #1
 80106ee:	0006      	movs	r6, r0
 80106f0:	000f      	movs	r7, r1
 80106f2:	42ab      	cmp	r3, r5
 80106f4:	d129      	bne.n	801074a <_dtoa_r+0x6aa>
 80106f6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 80106f8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80106fa:	9b08      	ldr	r3, [sp, #32]
 80106fc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80106fe:	469c      	mov	ip, r3
 8010700:	2200      	movs	r2, #0
 8010702:	4b32      	ldr	r3, [pc, #200]	@ (80107cc <_dtoa_r+0x72c>)
 8010704:	4464      	add	r4, ip
 8010706:	f7f0 ff6f 	bl	80015e8 <__aeabi_dadd>
 801070a:	0002      	movs	r2, r0
 801070c:	000b      	movs	r3, r1
 801070e:	0030      	movs	r0, r6
 8010710:	0039      	movs	r1, r7
 8010712:	f7ef feb5 	bl	8000480 <__aeabi_dcmpgt>
 8010716:	2800      	cmp	r0, #0
 8010718:	d15c      	bne.n	80107d4 <_dtoa_r+0x734>
 801071a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801071c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801071e:	2000      	movs	r0, #0
 8010720:	492a      	ldr	r1, [pc, #168]	@ (80107cc <_dtoa_r+0x72c>)
 8010722:	f7f2 f9d1 	bl	8002ac8 <__aeabi_dsub>
 8010726:	0002      	movs	r2, r0
 8010728:	000b      	movs	r3, r1
 801072a:	0030      	movs	r0, r6
 801072c:	0039      	movs	r1, r7
 801072e:	f7ef fe93 	bl	8000458 <__aeabi_dcmplt>
 8010732:	2800      	cmp	r0, #0
 8010734:	d100      	bne.n	8010738 <_dtoa_r+0x698>
 8010736:	e6ee      	b.n	8010516 <_dtoa_r+0x476>
 8010738:	0023      	movs	r3, r4
 801073a:	3c01      	subs	r4, #1
 801073c:	7822      	ldrb	r2, [r4, #0]
 801073e:	2a30      	cmp	r2, #48	@ 0x30
 8010740:	d0fa      	beq.n	8010738 <_dtoa_r+0x698>
 8010742:	001c      	movs	r4, r3
 8010744:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010746:	9304      	str	r3, [sp, #16]
 8010748:	e73e      	b.n	80105c8 <_dtoa_r+0x528>
 801074a:	2200      	movs	r2, #0
 801074c:	4b1b      	ldr	r3, [pc, #108]	@ (80107bc <_dtoa_r+0x71c>)
 801074e:	f7f1 fef3 	bl	8002538 <__aeabi_dmul>
 8010752:	900a      	str	r0, [sp, #40]	@ 0x28
 8010754:	910b      	str	r1, [sp, #44]	@ 0x2c
 8010756:	e7b9      	b.n	80106cc <_dtoa_r+0x62c>
 8010758:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801075a:	2b00      	cmp	r3, #0
 801075c:	d10c      	bne.n	8010778 <_dtoa_r+0x6d8>
 801075e:	9806      	ldr	r0, [sp, #24]
 8010760:	9907      	ldr	r1, [sp, #28]
 8010762:	2200      	movs	r2, #0
 8010764:	4b18      	ldr	r3, [pc, #96]	@ (80107c8 <_dtoa_r+0x728>)
 8010766:	f7f1 fee7 	bl	8002538 <__aeabi_dmul>
 801076a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801076c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801076e:	f7ef fe91 	bl	8000494 <__aeabi_dcmpge>
 8010772:	2800      	cmp	r0, #0
 8010774:	d100      	bne.n	8010778 <_dtoa_r+0x6d8>
 8010776:	e164      	b.n	8010a42 <_dtoa_r+0x9a2>
 8010778:	2600      	movs	r6, #0
 801077a:	0037      	movs	r7, r6
 801077c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801077e:	9c08      	ldr	r4, [sp, #32]
 8010780:	43db      	mvns	r3, r3
 8010782:	930c      	str	r3, [sp, #48]	@ 0x30
 8010784:	2300      	movs	r3, #0
 8010786:	9304      	str	r3, [sp, #16]
 8010788:	0031      	movs	r1, r6
 801078a:	9803      	ldr	r0, [sp, #12]
 801078c:	f000 fbc6 	bl	8010f1c <_Bfree>
 8010790:	2f00      	cmp	r7, #0
 8010792:	d0d7      	beq.n	8010744 <_dtoa_r+0x6a4>
 8010794:	9b04      	ldr	r3, [sp, #16]
 8010796:	2b00      	cmp	r3, #0
 8010798:	d005      	beq.n	80107a6 <_dtoa_r+0x706>
 801079a:	42bb      	cmp	r3, r7
 801079c:	d003      	beq.n	80107a6 <_dtoa_r+0x706>
 801079e:	0019      	movs	r1, r3
 80107a0:	9803      	ldr	r0, [sp, #12]
 80107a2:	f000 fbbb 	bl	8010f1c <_Bfree>
 80107a6:	0039      	movs	r1, r7
 80107a8:	9803      	ldr	r0, [sp, #12]
 80107aa:	f000 fbb7 	bl	8010f1c <_Bfree>
 80107ae:	e7c9      	b.n	8010744 <_dtoa_r+0x6a4>
 80107b0:	08013188 	.word	0x08013188
 80107b4:	08013160 	.word	0x08013160
 80107b8:	3ff00000 	.word	0x3ff00000
 80107bc:	40240000 	.word	0x40240000
 80107c0:	401c0000 	.word	0x401c0000
 80107c4:	fcc00000 	.word	0xfcc00000
 80107c8:	40140000 	.word	0x40140000
 80107cc:	3fe00000 	.word	0x3fe00000
 80107d0:	9b04      	ldr	r3, [sp, #16]
 80107d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80107d4:	0023      	movs	r3, r4
 80107d6:	001c      	movs	r4, r3
 80107d8:	3b01      	subs	r3, #1
 80107da:	781a      	ldrb	r2, [r3, #0]
 80107dc:	2a39      	cmp	r2, #57	@ 0x39
 80107de:	d108      	bne.n	80107f2 <_dtoa_r+0x752>
 80107e0:	9a08      	ldr	r2, [sp, #32]
 80107e2:	429a      	cmp	r2, r3
 80107e4:	d1f7      	bne.n	80107d6 <_dtoa_r+0x736>
 80107e6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80107e8:	9908      	ldr	r1, [sp, #32]
 80107ea:	3201      	adds	r2, #1
 80107ec:	920c      	str	r2, [sp, #48]	@ 0x30
 80107ee:	2230      	movs	r2, #48	@ 0x30
 80107f0:	700a      	strb	r2, [r1, #0]
 80107f2:	781a      	ldrb	r2, [r3, #0]
 80107f4:	3201      	adds	r2, #1
 80107f6:	701a      	strb	r2, [r3, #0]
 80107f8:	e7a4      	b.n	8010744 <_dtoa_r+0x6a4>
 80107fa:	2200      	movs	r2, #0
 80107fc:	4bc6      	ldr	r3, [pc, #792]	@ (8010b18 <_dtoa_r+0xa78>)
 80107fe:	f7f1 fe9b 	bl	8002538 <__aeabi_dmul>
 8010802:	2200      	movs	r2, #0
 8010804:	2300      	movs	r3, #0
 8010806:	0006      	movs	r6, r0
 8010808:	000f      	movs	r7, r1
 801080a:	f7ef fe1f 	bl	800044c <__aeabi_dcmpeq>
 801080e:	2800      	cmp	r0, #0
 8010810:	d100      	bne.n	8010814 <_dtoa_r+0x774>
 8010812:	e6a1      	b.n	8010558 <_dtoa_r+0x4b8>
 8010814:	e6d8      	b.n	80105c8 <_dtoa_r+0x528>
 8010816:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8010818:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801081a:	9c06      	ldr	r4, [sp, #24]
 801081c:	2f00      	cmp	r7, #0
 801081e:	d014      	beq.n	801084a <_dtoa_r+0x7aa>
 8010820:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010822:	2a01      	cmp	r2, #1
 8010824:	dd00      	ble.n	8010828 <_dtoa_r+0x788>
 8010826:	e0c8      	b.n	80109ba <_dtoa_r+0x91a>
 8010828:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801082a:	2a00      	cmp	r2, #0
 801082c:	d100      	bne.n	8010830 <_dtoa_r+0x790>
 801082e:	e0be      	b.n	80109ae <_dtoa_r+0x90e>
 8010830:	4aba      	ldr	r2, [pc, #744]	@ (8010b1c <_dtoa_r+0xa7c>)
 8010832:	189b      	adds	r3, r3, r2
 8010834:	9a06      	ldr	r2, [sp, #24]
 8010836:	2101      	movs	r1, #1
 8010838:	18d2      	adds	r2, r2, r3
 801083a:	9206      	str	r2, [sp, #24]
 801083c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801083e:	9803      	ldr	r0, [sp, #12]
 8010840:	18d3      	adds	r3, r2, r3
 8010842:	930d      	str	r3, [sp, #52]	@ 0x34
 8010844:	f000 fc22 	bl	801108c <__i2b>
 8010848:	0007      	movs	r7, r0
 801084a:	2c00      	cmp	r4, #0
 801084c:	d00e      	beq.n	801086c <_dtoa_r+0x7cc>
 801084e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010850:	2b00      	cmp	r3, #0
 8010852:	dd0b      	ble.n	801086c <_dtoa_r+0x7cc>
 8010854:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010856:	0023      	movs	r3, r4
 8010858:	4294      	cmp	r4, r2
 801085a:	dd00      	ble.n	801085e <_dtoa_r+0x7be>
 801085c:	0013      	movs	r3, r2
 801085e:	9a06      	ldr	r2, [sp, #24]
 8010860:	1ae4      	subs	r4, r4, r3
 8010862:	1ad2      	subs	r2, r2, r3
 8010864:	9206      	str	r2, [sp, #24]
 8010866:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8010868:	1ad3      	subs	r3, r2, r3
 801086a:	930d      	str	r3, [sp, #52]	@ 0x34
 801086c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801086e:	2b00      	cmp	r3, #0
 8010870:	d01f      	beq.n	80108b2 <_dtoa_r+0x812>
 8010872:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010874:	2b00      	cmp	r3, #0
 8010876:	d100      	bne.n	801087a <_dtoa_r+0x7da>
 8010878:	e0b5      	b.n	80109e6 <_dtoa_r+0x946>
 801087a:	2d00      	cmp	r5, #0
 801087c:	d010      	beq.n	80108a0 <_dtoa_r+0x800>
 801087e:	0039      	movs	r1, r7
 8010880:	002a      	movs	r2, r5
 8010882:	9803      	ldr	r0, [sp, #12]
 8010884:	f000 fccc 	bl	8011220 <__pow5mult>
 8010888:	9a05      	ldr	r2, [sp, #20]
 801088a:	0001      	movs	r1, r0
 801088c:	0007      	movs	r7, r0
 801088e:	9803      	ldr	r0, [sp, #12]
 8010890:	f000 fc14 	bl	80110bc <__multiply>
 8010894:	0006      	movs	r6, r0
 8010896:	9905      	ldr	r1, [sp, #20]
 8010898:	9803      	ldr	r0, [sp, #12]
 801089a:	f000 fb3f 	bl	8010f1c <_Bfree>
 801089e:	9605      	str	r6, [sp, #20]
 80108a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80108a2:	1b5a      	subs	r2, r3, r5
 80108a4:	42ab      	cmp	r3, r5
 80108a6:	d004      	beq.n	80108b2 <_dtoa_r+0x812>
 80108a8:	9905      	ldr	r1, [sp, #20]
 80108aa:	9803      	ldr	r0, [sp, #12]
 80108ac:	f000 fcb8 	bl	8011220 <__pow5mult>
 80108b0:	9005      	str	r0, [sp, #20]
 80108b2:	2101      	movs	r1, #1
 80108b4:	9803      	ldr	r0, [sp, #12]
 80108b6:	f000 fbe9 	bl	801108c <__i2b>
 80108ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80108bc:	0006      	movs	r6, r0
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d100      	bne.n	80108c4 <_dtoa_r+0x824>
 80108c2:	e1bc      	b.n	8010c3e <_dtoa_r+0xb9e>
 80108c4:	001a      	movs	r2, r3
 80108c6:	0001      	movs	r1, r0
 80108c8:	9803      	ldr	r0, [sp, #12]
 80108ca:	f000 fca9 	bl	8011220 <__pow5mult>
 80108ce:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80108d0:	0006      	movs	r6, r0
 80108d2:	2500      	movs	r5, #0
 80108d4:	2b01      	cmp	r3, #1
 80108d6:	dc16      	bgt.n	8010906 <_dtoa_r+0x866>
 80108d8:	2500      	movs	r5, #0
 80108da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80108dc:	42ab      	cmp	r3, r5
 80108de:	d10e      	bne.n	80108fe <_dtoa_r+0x85e>
 80108e0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80108e2:	031b      	lsls	r3, r3, #12
 80108e4:	42ab      	cmp	r3, r5
 80108e6:	d10a      	bne.n	80108fe <_dtoa_r+0x85e>
 80108e8:	4b8d      	ldr	r3, [pc, #564]	@ (8010b20 <_dtoa_r+0xa80>)
 80108ea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80108ec:	4213      	tst	r3, r2
 80108ee:	d006      	beq.n	80108fe <_dtoa_r+0x85e>
 80108f0:	9b06      	ldr	r3, [sp, #24]
 80108f2:	3501      	adds	r5, #1
 80108f4:	3301      	adds	r3, #1
 80108f6:	9306      	str	r3, [sp, #24]
 80108f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80108fa:	3301      	adds	r3, #1
 80108fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80108fe:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8010900:	2001      	movs	r0, #1
 8010902:	2b00      	cmp	r3, #0
 8010904:	d008      	beq.n	8010918 <_dtoa_r+0x878>
 8010906:	6933      	ldr	r3, [r6, #16]
 8010908:	3303      	adds	r3, #3
 801090a:	009b      	lsls	r3, r3, #2
 801090c:	18f3      	adds	r3, r6, r3
 801090e:	6858      	ldr	r0, [r3, #4]
 8010910:	f000 fb6c 	bl	8010fec <__hi0bits>
 8010914:	2320      	movs	r3, #32
 8010916:	1a18      	subs	r0, r3, r0
 8010918:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801091a:	1818      	adds	r0, r3, r0
 801091c:	0002      	movs	r2, r0
 801091e:	231f      	movs	r3, #31
 8010920:	401a      	ands	r2, r3
 8010922:	4218      	tst	r0, r3
 8010924:	d065      	beq.n	80109f2 <_dtoa_r+0x952>
 8010926:	3301      	adds	r3, #1
 8010928:	1a9b      	subs	r3, r3, r2
 801092a:	2b04      	cmp	r3, #4
 801092c:	dd5d      	ble.n	80109ea <_dtoa_r+0x94a>
 801092e:	231c      	movs	r3, #28
 8010930:	1a9b      	subs	r3, r3, r2
 8010932:	9a06      	ldr	r2, [sp, #24]
 8010934:	18e4      	adds	r4, r4, r3
 8010936:	18d2      	adds	r2, r2, r3
 8010938:	9206      	str	r2, [sp, #24]
 801093a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801093c:	18d3      	adds	r3, r2, r3
 801093e:	930d      	str	r3, [sp, #52]	@ 0x34
 8010940:	9b06      	ldr	r3, [sp, #24]
 8010942:	2b00      	cmp	r3, #0
 8010944:	dd05      	ble.n	8010952 <_dtoa_r+0x8b2>
 8010946:	001a      	movs	r2, r3
 8010948:	9905      	ldr	r1, [sp, #20]
 801094a:	9803      	ldr	r0, [sp, #12]
 801094c:	f000 fcc4 	bl	80112d8 <__lshift>
 8010950:	9005      	str	r0, [sp, #20]
 8010952:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010954:	2b00      	cmp	r3, #0
 8010956:	dd05      	ble.n	8010964 <_dtoa_r+0x8c4>
 8010958:	0031      	movs	r1, r6
 801095a:	001a      	movs	r2, r3
 801095c:	9803      	ldr	r0, [sp, #12]
 801095e:	f000 fcbb 	bl	80112d8 <__lshift>
 8010962:	0006      	movs	r6, r0
 8010964:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8010966:	2b00      	cmp	r3, #0
 8010968:	d045      	beq.n	80109f6 <_dtoa_r+0x956>
 801096a:	0031      	movs	r1, r6
 801096c:	9805      	ldr	r0, [sp, #20]
 801096e:	f000 fd1f 	bl	80113b0 <__mcmp>
 8010972:	2800      	cmp	r0, #0
 8010974:	da3f      	bge.n	80109f6 <_dtoa_r+0x956>
 8010976:	9b04      	ldr	r3, [sp, #16]
 8010978:	220a      	movs	r2, #10
 801097a:	3b01      	subs	r3, #1
 801097c:	930c      	str	r3, [sp, #48]	@ 0x30
 801097e:	9905      	ldr	r1, [sp, #20]
 8010980:	2300      	movs	r3, #0
 8010982:	9803      	ldr	r0, [sp, #12]
 8010984:	f000 faee 	bl	8010f64 <__multadd>
 8010988:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801098a:	9005      	str	r0, [sp, #20]
 801098c:	2b00      	cmp	r3, #0
 801098e:	d100      	bne.n	8010992 <_dtoa_r+0x8f2>
 8010990:	e15c      	b.n	8010c4c <_dtoa_r+0xbac>
 8010992:	2300      	movs	r3, #0
 8010994:	0039      	movs	r1, r7
 8010996:	220a      	movs	r2, #10
 8010998:	9803      	ldr	r0, [sp, #12]
 801099a:	f000 fae3 	bl	8010f64 <__multadd>
 801099e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80109a0:	0007      	movs	r7, r0
 80109a2:	2b00      	cmp	r3, #0
 80109a4:	dc55      	bgt.n	8010a52 <_dtoa_r+0x9b2>
 80109a6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80109a8:	2b02      	cmp	r3, #2
 80109aa:	dc2d      	bgt.n	8010a08 <_dtoa_r+0x968>
 80109ac:	e051      	b.n	8010a52 <_dtoa_r+0x9b2>
 80109ae:	2336      	movs	r3, #54	@ 0x36
 80109b0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80109b2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 80109b4:	9c06      	ldr	r4, [sp, #24]
 80109b6:	1a9b      	subs	r3, r3, r2
 80109b8:	e73c      	b.n	8010834 <_dtoa_r+0x794>
 80109ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109bc:	1e5d      	subs	r5, r3, #1
 80109be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109c0:	42ab      	cmp	r3, r5
 80109c2:	db08      	blt.n	80109d6 <_dtoa_r+0x936>
 80109c4:	1b5d      	subs	r5, r3, r5
 80109c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109c8:	9c06      	ldr	r4, [sp, #24]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	db00      	blt.n	80109d0 <_dtoa_r+0x930>
 80109ce:	e731      	b.n	8010834 <_dtoa_r+0x794>
 80109d0:	1ae4      	subs	r4, r4, r3
 80109d2:	2300      	movs	r3, #0
 80109d4:	e72e      	b.n	8010834 <_dtoa_r+0x794>
 80109d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80109d8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80109da:	1aeb      	subs	r3, r5, r3
 80109dc:	18d3      	adds	r3, r2, r3
 80109de:	950f      	str	r5, [sp, #60]	@ 0x3c
 80109e0:	9314      	str	r3, [sp, #80]	@ 0x50
 80109e2:	2500      	movs	r5, #0
 80109e4:	e7ef      	b.n	80109c6 <_dtoa_r+0x926>
 80109e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80109e8:	e75e      	b.n	80108a8 <_dtoa_r+0x808>
 80109ea:	2b04      	cmp	r3, #4
 80109ec:	d0a8      	beq.n	8010940 <_dtoa_r+0x8a0>
 80109ee:	331c      	adds	r3, #28
 80109f0:	e79f      	b.n	8010932 <_dtoa_r+0x892>
 80109f2:	0013      	movs	r3, r2
 80109f4:	e7fb      	b.n	80109ee <_dtoa_r+0x94e>
 80109f6:	9b04      	ldr	r3, [sp, #16]
 80109f8:	930c      	str	r3, [sp, #48]	@ 0x30
 80109fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80109fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	dc23      	bgt.n	8010a4a <_dtoa_r+0x9aa>
 8010a02:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010a04:	2b02      	cmp	r3, #2
 8010a06:	dd20      	ble.n	8010a4a <_dtoa_r+0x9aa>
 8010a08:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010a0a:	2b00      	cmp	r3, #0
 8010a0c:	d000      	beq.n	8010a10 <_dtoa_r+0x970>
 8010a0e:	e6b5      	b.n	801077c <_dtoa_r+0x6dc>
 8010a10:	0031      	movs	r1, r6
 8010a12:	2205      	movs	r2, #5
 8010a14:	9803      	ldr	r0, [sp, #12]
 8010a16:	f000 faa5 	bl	8010f64 <__multadd>
 8010a1a:	0006      	movs	r6, r0
 8010a1c:	0001      	movs	r1, r0
 8010a1e:	9805      	ldr	r0, [sp, #20]
 8010a20:	f000 fcc6 	bl	80113b0 <__mcmp>
 8010a24:	2800      	cmp	r0, #0
 8010a26:	dc00      	bgt.n	8010a2a <_dtoa_r+0x98a>
 8010a28:	e6a8      	b.n	801077c <_dtoa_r+0x6dc>
 8010a2a:	9b08      	ldr	r3, [sp, #32]
 8010a2c:	9a08      	ldr	r2, [sp, #32]
 8010a2e:	1c5c      	adds	r4, r3, #1
 8010a30:	2331      	movs	r3, #49	@ 0x31
 8010a32:	7013      	strb	r3, [r2, #0]
 8010a34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010a36:	3301      	adds	r3, #1
 8010a38:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a3a:	e6a3      	b.n	8010784 <_dtoa_r+0x6e4>
 8010a3c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8010a3e:	0037      	movs	r7, r6
 8010a40:	e7f3      	b.n	8010a2a <_dtoa_r+0x98a>
 8010a42:	9b04      	ldr	r3, [sp, #16]
 8010a44:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010a46:	930c      	str	r3, [sp, #48]	@ 0x30
 8010a48:	e7f9      	b.n	8010a3e <_dtoa_r+0x99e>
 8010a4a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d100      	bne.n	8010a52 <_dtoa_r+0x9b2>
 8010a50:	e100      	b.n	8010c54 <_dtoa_r+0xbb4>
 8010a52:	2c00      	cmp	r4, #0
 8010a54:	dd05      	ble.n	8010a62 <_dtoa_r+0x9c2>
 8010a56:	0039      	movs	r1, r7
 8010a58:	0022      	movs	r2, r4
 8010a5a:	9803      	ldr	r0, [sp, #12]
 8010a5c:	f000 fc3c 	bl	80112d8 <__lshift>
 8010a60:	0007      	movs	r7, r0
 8010a62:	0038      	movs	r0, r7
 8010a64:	2d00      	cmp	r5, #0
 8010a66:	d018      	beq.n	8010a9a <_dtoa_r+0x9fa>
 8010a68:	6879      	ldr	r1, [r7, #4]
 8010a6a:	9803      	ldr	r0, [sp, #12]
 8010a6c:	f000 fa12 	bl	8010e94 <_Balloc>
 8010a70:	1e04      	subs	r4, r0, #0
 8010a72:	d105      	bne.n	8010a80 <_dtoa_r+0x9e0>
 8010a74:	0022      	movs	r2, r4
 8010a76:	4b2b      	ldr	r3, [pc, #172]	@ (8010b24 <_dtoa_r+0xa84>)
 8010a78:	482b      	ldr	r0, [pc, #172]	@ (8010b28 <_dtoa_r+0xa88>)
 8010a7a:	492c      	ldr	r1, [pc, #176]	@ (8010b2c <_dtoa_r+0xa8c>)
 8010a7c:	f7ff fb25 	bl	80100ca <_dtoa_r+0x2a>
 8010a80:	0039      	movs	r1, r7
 8010a82:	693a      	ldr	r2, [r7, #16]
 8010a84:	310c      	adds	r1, #12
 8010a86:	3202      	adds	r2, #2
 8010a88:	0092      	lsls	r2, r2, #2
 8010a8a:	300c      	adds	r0, #12
 8010a8c:	f001 f9c0 	bl	8011e10 <memcpy>
 8010a90:	2201      	movs	r2, #1
 8010a92:	0021      	movs	r1, r4
 8010a94:	9803      	ldr	r0, [sp, #12]
 8010a96:	f000 fc1f 	bl	80112d8 <__lshift>
 8010a9a:	9b08      	ldr	r3, [sp, #32]
 8010a9c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010a9e:	9306      	str	r3, [sp, #24]
 8010aa0:	3b01      	subs	r3, #1
 8010aa2:	189b      	adds	r3, r3, r2
 8010aa4:	2201      	movs	r2, #1
 8010aa6:	9704      	str	r7, [sp, #16]
 8010aa8:	0007      	movs	r7, r0
 8010aaa:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010aac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010aae:	4013      	ands	r3, r2
 8010ab0:	930e      	str	r3, [sp, #56]	@ 0x38
 8010ab2:	0031      	movs	r1, r6
 8010ab4:	9805      	ldr	r0, [sp, #20]
 8010ab6:	f7ff fa65 	bl	800ff84 <quorem>
 8010aba:	9904      	ldr	r1, [sp, #16]
 8010abc:	0005      	movs	r5, r0
 8010abe:	900a      	str	r0, [sp, #40]	@ 0x28
 8010ac0:	9805      	ldr	r0, [sp, #20]
 8010ac2:	f000 fc75 	bl	80113b0 <__mcmp>
 8010ac6:	003a      	movs	r2, r7
 8010ac8:	900d      	str	r0, [sp, #52]	@ 0x34
 8010aca:	0031      	movs	r1, r6
 8010acc:	9803      	ldr	r0, [sp, #12]
 8010ace:	f000 fc8b 	bl	80113e8 <__mdiff>
 8010ad2:	2201      	movs	r2, #1
 8010ad4:	68c3      	ldr	r3, [r0, #12]
 8010ad6:	0004      	movs	r4, r0
 8010ad8:	3530      	adds	r5, #48	@ 0x30
 8010ada:	9209      	str	r2, [sp, #36]	@ 0x24
 8010adc:	2b00      	cmp	r3, #0
 8010ade:	d104      	bne.n	8010aea <_dtoa_r+0xa4a>
 8010ae0:	0001      	movs	r1, r0
 8010ae2:	9805      	ldr	r0, [sp, #20]
 8010ae4:	f000 fc64 	bl	80113b0 <__mcmp>
 8010ae8:	9009      	str	r0, [sp, #36]	@ 0x24
 8010aea:	0021      	movs	r1, r4
 8010aec:	9803      	ldr	r0, [sp, #12]
 8010aee:	f000 fa15 	bl	8010f1c <_Bfree>
 8010af2:	9b06      	ldr	r3, [sp, #24]
 8010af4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010af6:	1c5c      	adds	r4, r3, #1
 8010af8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010afa:	4313      	orrs	r3, r2
 8010afc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010afe:	4313      	orrs	r3, r2
 8010b00:	d116      	bne.n	8010b30 <_dtoa_r+0xa90>
 8010b02:	2d39      	cmp	r5, #57	@ 0x39
 8010b04:	d02f      	beq.n	8010b66 <_dtoa_r+0xac6>
 8010b06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	dd01      	ble.n	8010b10 <_dtoa_r+0xa70>
 8010b0c:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8010b0e:	3531      	adds	r5, #49	@ 0x31
 8010b10:	9b06      	ldr	r3, [sp, #24]
 8010b12:	701d      	strb	r5, [r3, #0]
 8010b14:	e638      	b.n	8010788 <_dtoa_r+0x6e8>
 8010b16:	46c0      	nop			@ (mov r8, r8)
 8010b18:	40240000 	.word	0x40240000
 8010b1c:	00000433 	.word	0x00000433
 8010b20:	7ff00000 	.word	0x7ff00000
 8010b24:	080130e4 	.word	0x080130e4
 8010b28:	0801308c 	.word	0x0801308c
 8010b2c:	000002ef 	.word	0x000002ef
 8010b30:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010b32:	2b00      	cmp	r3, #0
 8010b34:	db04      	blt.n	8010b40 <_dtoa_r+0xaa0>
 8010b36:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010b38:	4313      	orrs	r3, r2
 8010b3a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8010b3c:	4313      	orrs	r3, r2
 8010b3e:	d11e      	bne.n	8010b7e <_dtoa_r+0xade>
 8010b40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	dde4      	ble.n	8010b10 <_dtoa_r+0xa70>
 8010b46:	9905      	ldr	r1, [sp, #20]
 8010b48:	2201      	movs	r2, #1
 8010b4a:	9803      	ldr	r0, [sp, #12]
 8010b4c:	f000 fbc4 	bl	80112d8 <__lshift>
 8010b50:	0031      	movs	r1, r6
 8010b52:	9005      	str	r0, [sp, #20]
 8010b54:	f000 fc2c 	bl	80113b0 <__mcmp>
 8010b58:	2800      	cmp	r0, #0
 8010b5a:	dc02      	bgt.n	8010b62 <_dtoa_r+0xac2>
 8010b5c:	d1d8      	bne.n	8010b10 <_dtoa_r+0xa70>
 8010b5e:	07eb      	lsls	r3, r5, #31
 8010b60:	d5d6      	bpl.n	8010b10 <_dtoa_r+0xa70>
 8010b62:	2d39      	cmp	r5, #57	@ 0x39
 8010b64:	d1d2      	bne.n	8010b0c <_dtoa_r+0xa6c>
 8010b66:	2339      	movs	r3, #57	@ 0x39
 8010b68:	9a06      	ldr	r2, [sp, #24]
 8010b6a:	7013      	strb	r3, [r2, #0]
 8010b6c:	0023      	movs	r3, r4
 8010b6e:	001c      	movs	r4, r3
 8010b70:	3b01      	subs	r3, #1
 8010b72:	781a      	ldrb	r2, [r3, #0]
 8010b74:	2a39      	cmp	r2, #57	@ 0x39
 8010b76:	d04f      	beq.n	8010c18 <_dtoa_r+0xb78>
 8010b78:	3201      	adds	r2, #1
 8010b7a:	701a      	strb	r2, [r3, #0]
 8010b7c:	e604      	b.n	8010788 <_dtoa_r+0x6e8>
 8010b7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b80:	2b00      	cmp	r3, #0
 8010b82:	dd03      	ble.n	8010b8c <_dtoa_r+0xaec>
 8010b84:	2d39      	cmp	r5, #57	@ 0x39
 8010b86:	d0ee      	beq.n	8010b66 <_dtoa_r+0xac6>
 8010b88:	3501      	adds	r5, #1
 8010b8a:	e7c1      	b.n	8010b10 <_dtoa_r+0xa70>
 8010b8c:	9b06      	ldr	r3, [sp, #24]
 8010b8e:	9a06      	ldr	r2, [sp, #24]
 8010b90:	701d      	strb	r5, [r3, #0]
 8010b92:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010b94:	4293      	cmp	r3, r2
 8010b96:	d02a      	beq.n	8010bee <_dtoa_r+0xb4e>
 8010b98:	2300      	movs	r3, #0
 8010b9a:	220a      	movs	r2, #10
 8010b9c:	9905      	ldr	r1, [sp, #20]
 8010b9e:	9803      	ldr	r0, [sp, #12]
 8010ba0:	f000 f9e0 	bl	8010f64 <__multadd>
 8010ba4:	9b04      	ldr	r3, [sp, #16]
 8010ba6:	9005      	str	r0, [sp, #20]
 8010ba8:	42bb      	cmp	r3, r7
 8010baa:	d109      	bne.n	8010bc0 <_dtoa_r+0xb20>
 8010bac:	2300      	movs	r3, #0
 8010bae:	220a      	movs	r2, #10
 8010bb0:	9904      	ldr	r1, [sp, #16]
 8010bb2:	9803      	ldr	r0, [sp, #12]
 8010bb4:	f000 f9d6 	bl	8010f64 <__multadd>
 8010bb8:	9004      	str	r0, [sp, #16]
 8010bba:	0007      	movs	r7, r0
 8010bbc:	9406      	str	r4, [sp, #24]
 8010bbe:	e778      	b.n	8010ab2 <_dtoa_r+0xa12>
 8010bc0:	9904      	ldr	r1, [sp, #16]
 8010bc2:	2300      	movs	r3, #0
 8010bc4:	220a      	movs	r2, #10
 8010bc6:	9803      	ldr	r0, [sp, #12]
 8010bc8:	f000 f9cc 	bl	8010f64 <__multadd>
 8010bcc:	2300      	movs	r3, #0
 8010bce:	9004      	str	r0, [sp, #16]
 8010bd0:	220a      	movs	r2, #10
 8010bd2:	0039      	movs	r1, r7
 8010bd4:	9803      	ldr	r0, [sp, #12]
 8010bd6:	f000 f9c5 	bl	8010f64 <__multadd>
 8010bda:	e7ee      	b.n	8010bba <_dtoa_r+0xb1a>
 8010bdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010bde:	2401      	movs	r4, #1
 8010be0:	2b00      	cmp	r3, #0
 8010be2:	dd00      	ble.n	8010be6 <_dtoa_r+0xb46>
 8010be4:	001c      	movs	r4, r3
 8010be6:	9b08      	ldr	r3, [sp, #32]
 8010be8:	191c      	adds	r4, r3, r4
 8010bea:	2300      	movs	r3, #0
 8010bec:	9304      	str	r3, [sp, #16]
 8010bee:	9905      	ldr	r1, [sp, #20]
 8010bf0:	2201      	movs	r2, #1
 8010bf2:	9803      	ldr	r0, [sp, #12]
 8010bf4:	f000 fb70 	bl	80112d8 <__lshift>
 8010bf8:	0031      	movs	r1, r6
 8010bfa:	9005      	str	r0, [sp, #20]
 8010bfc:	f000 fbd8 	bl	80113b0 <__mcmp>
 8010c00:	2800      	cmp	r0, #0
 8010c02:	dcb3      	bgt.n	8010b6c <_dtoa_r+0xacc>
 8010c04:	d101      	bne.n	8010c0a <_dtoa_r+0xb6a>
 8010c06:	07ed      	lsls	r5, r5, #31
 8010c08:	d4b0      	bmi.n	8010b6c <_dtoa_r+0xacc>
 8010c0a:	0023      	movs	r3, r4
 8010c0c:	001c      	movs	r4, r3
 8010c0e:	3b01      	subs	r3, #1
 8010c10:	781a      	ldrb	r2, [r3, #0]
 8010c12:	2a30      	cmp	r2, #48	@ 0x30
 8010c14:	d0fa      	beq.n	8010c0c <_dtoa_r+0xb6c>
 8010c16:	e5b7      	b.n	8010788 <_dtoa_r+0x6e8>
 8010c18:	9a08      	ldr	r2, [sp, #32]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d1a7      	bne.n	8010b6e <_dtoa_r+0xace>
 8010c1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010c20:	3301      	adds	r3, #1
 8010c22:	930c      	str	r3, [sp, #48]	@ 0x30
 8010c24:	2331      	movs	r3, #49	@ 0x31
 8010c26:	7013      	strb	r3, [r2, #0]
 8010c28:	e5ae      	b.n	8010788 <_dtoa_r+0x6e8>
 8010c2a:	4b15      	ldr	r3, [pc, #84]	@ (8010c80 <_dtoa_r+0xbe0>)
 8010c2c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8010c2e:	9308      	str	r3, [sp, #32]
 8010c30:	4b14      	ldr	r3, [pc, #80]	@ (8010c84 <_dtoa_r+0xbe4>)
 8010c32:	2a00      	cmp	r2, #0
 8010c34:	d001      	beq.n	8010c3a <_dtoa_r+0xb9a>
 8010c36:	f7ff fa7b 	bl	8010130 <_dtoa_r+0x90>
 8010c3a:	f7ff fa7b 	bl	8010134 <_dtoa_r+0x94>
 8010c3e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010c40:	2b01      	cmp	r3, #1
 8010c42:	dc00      	bgt.n	8010c46 <_dtoa_r+0xba6>
 8010c44:	e648      	b.n	80108d8 <_dtoa_r+0x838>
 8010c46:	2001      	movs	r0, #1
 8010c48:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8010c4a:	e665      	b.n	8010918 <_dtoa_r+0x878>
 8010c4c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	dc00      	bgt.n	8010c54 <_dtoa_r+0xbb4>
 8010c52:	e6d6      	b.n	8010a02 <_dtoa_r+0x962>
 8010c54:	2400      	movs	r4, #0
 8010c56:	0031      	movs	r1, r6
 8010c58:	9805      	ldr	r0, [sp, #20]
 8010c5a:	f7ff f993 	bl	800ff84 <quorem>
 8010c5e:	9b08      	ldr	r3, [sp, #32]
 8010c60:	3030      	adds	r0, #48	@ 0x30
 8010c62:	5518      	strb	r0, [r3, r4]
 8010c64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010c66:	3401      	adds	r4, #1
 8010c68:	0005      	movs	r5, r0
 8010c6a:	429c      	cmp	r4, r3
 8010c6c:	dab6      	bge.n	8010bdc <_dtoa_r+0xb3c>
 8010c6e:	2300      	movs	r3, #0
 8010c70:	220a      	movs	r2, #10
 8010c72:	9905      	ldr	r1, [sp, #20]
 8010c74:	9803      	ldr	r0, [sp, #12]
 8010c76:	f000 f975 	bl	8010f64 <__multadd>
 8010c7a:	9005      	str	r0, [sp, #20]
 8010c7c:	e7eb      	b.n	8010c56 <_dtoa_r+0xbb6>
 8010c7e:	46c0      	nop			@ (mov r8, r8)
 8010c80:	08013068 	.word	0x08013068
 8010c84:	08013070 	.word	0x08013070

08010c88 <_free_r>:
 8010c88:	b570      	push	{r4, r5, r6, lr}
 8010c8a:	0005      	movs	r5, r0
 8010c8c:	1e0c      	subs	r4, r1, #0
 8010c8e:	d010      	beq.n	8010cb2 <_free_r+0x2a>
 8010c90:	3c04      	subs	r4, #4
 8010c92:	6823      	ldr	r3, [r4, #0]
 8010c94:	2b00      	cmp	r3, #0
 8010c96:	da00      	bge.n	8010c9a <_free_r+0x12>
 8010c98:	18e4      	adds	r4, r4, r3
 8010c9a:	0028      	movs	r0, r5
 8010c9c:	f000 f8ea 	bl	8010e74 <__malloc_lock>
 8010ca0:	4a1d      	ldr	r2, [pc, #116]	@ (8010d18 <_free_r+0x90>)
 8010ca2:	6813      	ldr	r3, [r2, #0]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d105      	bne.n	8010cb4 <_free_r+0x2c>
 8010ca8:	6063      	str	r3, [r4, #4]
 8010caa:	6014      	str	r4, [r2, #0]
 8010cac:	0028      	movs	r0, r5
 8010cae:	f000 f8e9 	bl	8010e84 <__malloc_unlock>
 8010cb2:	bd70      	pop	{r4, r5, r6, pc}
 8010cb4:	42a3      	cmp	r3, r4
 8010cb6:	d908      	bls.n	8010cca <_free_r+0x42>
 8010cb8:	6820      	ldr	r0, [r4, #0]
 8010cba:	1821      	adds	r1, r4, r0
 8010cbc:	428b      	cmp	r3, r1
 8010cbe:	d1f3      	bne.n	8010ca8 <_free_r+0x20>
 8010cc0:	6819      	ldr	r1, [r3, #0]
 8010cc2:	685b      	ldr	r3, [r3, #4]
 8010cc4:	1809      	adds	r1, r1, r0
 8010cc6:	6021      	str	r1, [r4, #0]
 8010cc8:	e7ee      	b.n	8010ca8 <_free_r+0x20>
 8010cca:	001a      	movs	r2, r3
 8010ccc:	685b      	ldr	r3, [r3, #4]
 8010cce:	2b00      	cmp	r3, #0
 8010cd0:	d001      	beq.n	8010cd6 <_free_r+0x4e>
 8010cd2:	42a3      	cmp	r3, r4
 8010cd4:	d9f9      	bls.n	8010cca <_free_r+0x42>
 8010cd6:	6811      	ldr	r1, [r2, #0]
 8010cd8:	1850      	adds	r0, r2, r1
 8010cda:	42a0      	cmp	r0, r4
 8010cdc:	d10b      	bne.n	8010cf6 <_free_r+0x6e>
 8010cde:	6820      	ldr	r0, [r4, #0]
 8010ce0:	1809      	adds	r1, r1, r0
 8010ce2:	1850      	adds	r0, r2, r1
 8010ce4:	6011      	str	r1, [r2, #0]
 8010ce6:	4283      	cmp	r3, r0
 8010ce8:	d1e0      	bne.n	8010cac <_free_r+0x24>
 8010cea:	6818      	ldr	r0, [r3, #0]
 8010cec:	685b      	ldr	r3, [r3, #4]
 8010cee:	1841      	adds	r1, r0, r1
 8010cf0:	6011      	str	r1, [r2, #0]
 8010cf2:	6053      	str	r3, [r2, #4]
 8010cf4:	e7da      	b.n	8010cac <_free_r+0x24>
 8010cf6:	42a0      	cmp	r0, r4
 8010cf8:	d902      	bls.n	8010d00 <_free_r+0x78>
 8010cfa:	230c      	movs	r3, #12
 8010cfc:	602b      	str	r3, [r5, #0]
 8010cfe:	e7d5      	b.n	8010cac <_free_r+0x24>
 8010d00:	6820      	ldr	r0, [r4, #0]
 8010d02:	1821      	adds	r1, r4, r0
 8010d04:	428b      	cmp	r3, r1
 8010d06:	d103      	bne.n	8010d10 <_free_r+0x88>
 8010d08:	6819      	ldr	r1, [r3, #0]
 8010d0a:	685b      	ldr	r3, [r3, #4]
 8010d0c:	1809      	adds	r1, r1, r0
 8010d0e:	6021      	str	r1, [r4, #0]
 8010d10:	6063      	str	r3, [r4, #4]
 8010d12:	6054      	str	r4, [r2, #4]
 8010d14:	e7ca      	b.n	8010cac <_free_r+0x24>
 8010d16:	46c0      	nop			@ (mov r8, r8)
 8010d18:	20001f18 	.word	0x20001f18

08010d1c <malloc>:
 8010d1c:	b510      	push	{r4, lr}
 8010d1e:	4b03      	ldr	r3, [pc, #12]	@ (8010d2c <malloc+0x10>)
 8010d20:	0001      	movs	r1, r0
 8010d22:	6818      	ldr	r0, [r3, #0]
 8010d24:	f000 f826 	bl	8010d74 <_malloc_r>
 8010d28:	bd10      	pop	{r4, pc}
 8010d2a:	46c0      	nop			@ (mov r8, r8)
 8010d2c:	20000158 	.word	0x20000158

08010d30 <sbrk_aligned>:
 8010d30:	b570      	push	{r4, r5, r6, lr}
 8010d32:	4e0f      	ldr	r6, [pc, #60]	@ (8010d70 <sbrk_aligned+0x40>)
 8010d34:	000d      	movs	r5, r1
 8010d36:	6831      	ldr	r1, [r6, #0]
 8010d38:	0004      	movs	r4, r0
 8010d3a:	2900      	cmp	r1, #0
 8010d3c:	d102      	bne.n	8010d44 <sbrk_aligned+0x14>
 8010d3e:	f001 f855 	bl	8011dec <_sbrk_r>
 8010d42:	6030      	str	r0, [r6, #0]
 8010d44:	0029      	movs	r1, r5
 8010d46:	0020      	movs	r0, r4
 8010d48:	f001 f850 	bl	8011dec <_sbrk_r>
 8010d4c:	1c43      	adds	r3, r0, #1
 8010d4e:	d103      	bne.n	8010d58 <sbrk_aligned+0x28>
 8010d50:	2501      	movs	r5, #1
 8010d52:	426d      	negs	r5, r5
 8010d54:	0028      	movs	r0, r5
 8010d56:	bd70      	pop	{r4, r5, r6, pc}
 8010d58:	2303      	movs	r3, #3
 8010d5a:	1cc5      	adds	r5, r0, #3
 8010d5c:	439d      	bics	r5, r3
 8010d5e:	42a8      	cmp	r0, r5
 8010d60:	d0f8      	beq.n	8010d54 <sbrk_aligned+0x24>
 8010d62:	1a29      	subs	r1, r5, r0
 8010d64:	0020      	movs	r0, r4
 8010d66:	f001 f841 	bl	8011dec <_sbrk_r>
 8010d6a:	3001      	adds	r0, #1
 8010d6c:	d1f2      	bne.n	8010d54 <sbrk_aligned+0x24>
 8010d6e:	e7ef      	b.n	8010d50 <sbrk_aligned+0x20>
 8010d70:	20001f14 	.word	0x20001f14

08010d74 <_malloc_r>:
 8010d74:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010d76:	2203      	movs	r2, #3
 8010d78:	1ccb      	adds	r3, r1, #3
 8010d7a:	4393      	bics	r3, r2
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	0005      	movs	r5, r0
 8010d80:	001f      	movs	r7, r3
 8010d82:	2b0c      	cmp	r3, #12
 8010d84:	d234      	bcs.n	8010df0 <_malloc_r+0x7c>
 8010d86:	270c      	movs	r7, #12
 8010d88:	42b9      	cmp	r1, r7
 8010d8a:	d833      	bhi.n	8010df4 <_malloc_r+0x80>
 8010d8c:	0028      	movs	r0, r5
 8010d8e:	f000 f871 	bl	8010e74 <__malloc_lock>
 8010d92:	4e37      	ldr	r6, [pc, #220]	@ (8010e70 <_malloc_r+0xfc>)
 8010d94:	6833      	ldr	r3, [r6, #0]
 8010d96:	001c      	movs	r4, r3
 8010d98:	2c00      	cmp	r4, #0
 8010d9a:	d12f      	bne.n	8010dfc <_malloc_r+0x88>
 8010d9c:	0039      	movs	r1, r7
 8010d9e:	0028      	movs	r0, r5
 8010da0:	f7ff ffc6 	bl	8010d30 <sbrk_aligned>
 8010da4:	0004      	movs	r4, r0
 8010da6:	1c43      	adds	r3, r0, #1
 8010da8:	d15f      	bne.n	8010e6a <_malloc_r+0xf6>
 8010daa:	6834      	ldr	r4, [r6, #0]
 8010dac:	9400      	str	r4, [sp, #0]
 8010dae:	9b00      	ldr	r3, [sp, #0]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d14a      	bne.n	8010e4a <_malloc_r+0xd6>
 8010db4:	2c00      	cmp	r4, #0
 8010db6:	d052      	beq.n	8010e5e <_malloc_r+0xea>
 8010db8:	6823      	ldr	r3, [r4, #0]
 8010dba:	0028      	movs	r0, r5
 8010dbc:	18e3      	adds	r3, r4, r3
 8010dbe:	9900      	ldr	r1, [sp, #0]
 8010dc0:	9301      	str	r3, [sp, #4]
 8010dc2:	f001 f813 	bl	8011dec <_sbrk_r>
 8010dc6:	9b01      	ldr	r3, [sp, #4]
 8010dc8:	4283      	cmp	r3, r0
 8010dca:	d148      	bne.n	8010e5e <_malloc_r+0xea>
 8010dcc:	6823      	ldr	r3, [r4, #0]
 8010dce:	0028      	movs	r0, r5
 8010dd0:	1aff      	subs	r7, r7, r3
 8010dd2:	0039      	movs	r1, r7
 8010dd4:	f7ff ffac 	bl	8010d30 <sbrk_aligned>
 8010dd8:	3001      	adds	r0, #1
 8010dda:	d040      	beq.n	8010e5e <_malloc_r+0xea>
 8010ddc:	6823      	ldr	r3, [r4, #0]
 8010dde:	19db      	adds	r3, r3, r7
 8010de0:	6023      	str	r3, [r4, #0]
 8010de2:	6833      	ldr	r3, [r6, #0]
 8010de4:	685a      	ldr	r2, [r3, #4]
 8010de6:	2a00      	cmp	r2, #0
 8010de8:	d133      	bne.n	8010e52 <_malloc_r+0xde>
 8010dea:	9b00      	ldr	r3, [sp, #0]
 8010dec:	6033      	str	r3, [r6, #0]
 8010dee:	e019      	b.n	8010e24 <_malloc_r+0xb0>
 8010df0:	2b00      	cmp	r3, #0
 8010df2:	dac9      	bge.n	8010d88 <_malloc_r+0x14>
 8010df4:	230c      	movs	r3, #12
 8010df6:	602b      	str	r3, [r5, #0]
 8010df8:	2000      	movs	r0, #0
 8010dfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010dfc:	6821      	ldr	r1, [r4, #0]
 8010dfe:	1bc9      	subs	r1, r1, r7
 8010e00:	d420      	bmi.n	8010e44 <_malloc_r+0xd0>
 8010e02:	290b      	cmp	r1, #11
 8010e04:	d90a      	bls.n	8010e1c <_malloc_r+0xa8>
 8010e06:	19e2      	adds	r2, r4, r7
 8010e08:	6027      	str	r7, [r4, #0]
 8010e0a:	42a3      	cmp	r3, r4
 8010e0c:	d104      	bne.n	8010e18 <_malloc_r+0xa4>
 8010e0e:	6032      	str	r2, [r6, #0]
 8010e10:	6863      	ldr	r3, [r4, #4]
 8010e12:	6011      	str	r1, [r2, #0]
 8010e14:	6053      	str	r3, [r2, #4]
 8010e16:	e005      	b.n	8010e24 <_malloc_r+0xb0>
 8010e18:	605a      	str	r2, [r3, #4]
 8010e1a:	e7f9      	b.n	8010e10 <_malloc_r+0x9c>
 8010e1c:	6862      	ldr	r2, [r4, #4]
 8010e1e:	42a3      	cmp	r3, r4
 8010e20:	d10e      	bne.n	8010e40 <_malloc_r+0xcc>
 8010e22:	6032      	str	r2, [r6, #0]
 8010e24:	0028      	movs	r0, r5
 8010e26:	f000 f82d 	bl	8010e84 <__malloc_unlock>
 8010e2a:	0020      	movs	r0, r4
 8010e2c:	2207      	movs	r2, #7
 8010e2e:	300b      	adds	r0, #11
 8010e30:	1d23      	adds	r3, r4, #4
 8010e32:	4390      	bics	r0, r2
 8010e34:	1ac2      	subs	r2, r0, r3
 8010e36:	4298      	cmp	r0, r3
 8010e38:	d0df      	beq.n	8010dfa <_malloc_r+0x86>
 8010e3a:	1a1b      	subs	r3, r3, r0
 8010e3c:	50a3      	str	r3, [r4, r2]
 8010e3e:	e7dc      	b.n	8010dfa <_malloc_r+0x86>
 8010e40:	605a      	str	r2, [r3, #4]
 8010e42:	e7ef      	b.n	8010e24 <_malloc_r+0xb0>
 8010e44:	0023      	movs	r3, r4
 8010e46:	6864      	ldr	r4, [r4, #4]
 8010e48:	e7a6      	b.n	8010d98 <_malloc_r+0x24>
 8010e4a:	9c00      	ldr	r4, [sp, #0]
 8010e4c:	6863      	ldr	r3, [r4, #4]
 8010e4e:	9300      	str	r3, [sp, #0]
 8010e50:	e7ad      	b.n	8010dae <_malloc_r+0x3a>
 8010e52:	001a      	movs	r2, r3
 8010e54:	685b      	ldr	r3, [r3, #4]
 8010e56:	42a3      	cmp	r3, r4
 8010e58:	d1fb      	bne.n	8010e52 <_malloc_r+0xde>
 8010e5a:	2300      	movs	r3, #0
 8010e5c:	e7da      	b.n	8010e14 <_malloc_r+0xa0>
 8010e5e:	230c      	movs	r3, #12
 8010e60:	0028      	movs	r0, r5
 8010e62:	602b      	str	r3, [r5, #0]
 8010e64:	f000 f80e 	bl	8010e84 <__malloc_unlock>
 8010e68:	e7c6      	b.n	8010df8 <_malloc_r+0x84>
 8010e6a:	6007      	str	r7, [r0, #0]
 8010e6c:	e7da      	b.n	8010e24 <_malloc_r+0xb0>
 8010e6e:	46c0      	nop			@ (mov r8, r8)
 8010e70:	20001f18 	.word	0x20001f18

08010e74 <__malloc_lock>:
 8010e74:	b510      	push	{r4, lr}
 8010e76:	4802      	ldr	r0, [pc, #8]	@ (8010e80 <__malloc_lock+0xc>)
 8010e78:	f7ff f877 	bl	800ff6a <__retarget_lock_acquire_recursive>
 8010e7c:	bd10      	pop	{r4, pc}
 8010e7e:	46c0      	nop			@ (mov r8, r8)
 8010e80:	20001f10 	.word	0x20001f10

08010e84 <__malloc_unlock>:
 8010e84:	b510      	push	{r4, lr}
 8010e86:	4802      	ldr	r0, [pc, #8]	@ (8010e90 <__malloc_unlock+0xc>)
 8010e88:	f7ff f870 	bl	800ff6c <__retarget_lock_release_recursive>
 8010e8c:	bd10      	pop	{r4, pc}
 8010e8e:	46c0      	nop			@ (mov r8, r8)
 8010e90:	20001f10 	.word	0x20001f10

08010e94 <_Balloc>:
 8010e94:	b570      	push	{r4, r5, r6, lr}
 8010e96:	69c5      	ldr	r5, [r0, #28]
 8010e98:	0006      	movs	r6, r0
 8010e9a:	000c      	movs	r4, r1
 8010e9c:	2d00      	cmp	r5, #0
 8010e9e:	d10e      	bne.n	8010ebe <_Balloc+0x2a>
 8010ea0:	2010      	movs	r0, #16
 8010ea2:	f7ff ff3b 	bl	8010d1c <malloc>
 8010ea6:	1e02      	subs	r2, r0, #0
 8010ea8:	61f0      	str	r0, [r6, #28]
 8010eaa:	d104      	bne.n	8010eb6 <_Balloc+0x22>
 8010eac:	216b      	movs	r1, #107	@ 0x6b
 8010eae:	4b19      	ldr	r3, [pc, #100]	@ (8010f14 <_Balloc+0x80>)
 8010eb0:	4819      	ldr	r0, [pc, #100]	@ (8010f18 <_Balloc+0x84>)
 8010eb2:	f000 ffb7 	bl	8011e24 <__assert_func>
 8010eb6:	6045      	str	r5, [r0, #4]
 8010eb8:	6085      	str	r5, [r0, #8]
 8010eba:	6005      	str	r5, [r0, #0]
 8010ebc:	60c5      	str	r5, [r0, #12]
 8010ebe:	69f5      	ldr	r5, [r6, #28]
 8010ec0:	68eb      	ldr	r3, [r5, #12]
 8010ec2:	2b00      	cmp	r3, #0
 8010ec4:	d013      	beq.n	8010eee <_Balloc+0x5a>
 8010ec6:	69f3      	ldr	r3, [r6, #28]
 8010ec8:	00a2      	lsls	r2, r4, #2
 8010eca:	68db      	ldr	r3, [r3, #12]
 8010ecc:	189b      	adds	r3, r3, r2
 8010ece:	6818      	ldr	r0, [r3, #0]
 8010ed0:	2800      	cmp	r0, #0
 8010ed2:	d118      	bne.n	8010f06 <_Balloc+0x72>
 8010ed4:	2101      	movs	r1, #1
 8010ed6:	000d      	movs	r5, r1
 8010ed8:	40a5      	lsls	r5, r4
 8010eda:	1d6a      	adds	r2, r5, #5
 8010edc:	0030      	movs	r0, r6
 8010ede:	0092      	lsls	r2, r2, #2
 8010ee0:	f000 ffbe 	bl	8011e60 <_calloc_r>
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d00c      	beq.n	8010f02 <_Balloc+0x6e>
 8010ee8:	6044      	str	r4, [r0, #4]
 8010eea:	6085      	str	r5, [r0, #8]
 8010eec:	e00d      	b.n	8010f0a <_Balloc+0x76>
 8010eee:	2221      	movs	r2, #33	@ 0x21
 8010ef0:	2104      	movs	r1, #4
 8010ef2:	0030      	movs	r0, r6
 8010ef4:	f000 ffb4 	bl	8011e60 <_calloc_r>
 8010ef8:	69f3      	ldr	r3, [r6, #28]
 8010efa:	60e8      	str	r0, [r5, #12]
 8010efc:	68db      	ldr	r3, [r3, #12]
 8010efe:	2b00      	cmp	r3, #0
 8010f00:	d1e1      	bne.n	8010ec6 <_Balloc+0x32>
 8010f02:	2000      	movs	r0, #0
 8010f04:	bd70      	pop	{r4, r5, r6, pc}
 8010f06:	6802      	ldr	r2, [r0, #0]
 8010f08:	601a      	str	r2, [r3, #0]
 8010f0a:	2300      	movs	r3, #0
 8010f0c:	6103      	str	r3, [r0, #16]
 8010f0e:	60c3      	str	r3, [r0, #12]
 8010f10:	e7f8      	b.n	8010f04 <_Balloc+0x70>
 8010f12:	46c0      	nop			@ (mov r8, r8)
 8010f14:	08013075 	.word	0x08013075
 8010f18:	080130f5 	.word	0x080130f5

08010f1c <_Bfree>:
 8010f1c:	b570      	push	{r4, r5, r6, lr}
 8010f1e:	69c6      	ldr	r6, [r0, #28]
 8010f20:	0005      	movs	r5, r0
 8010f22:	000c      	movs	r4, r1
 8010f24:	2e00      	cmp	r6, #0
 8010f26:	d10e      	bne.n	8010f46 <_Bfree+0x2a>
 8010f28:	2010      	movs	r0, #16
 8010f2a:	f7ff fef7 	bl	8010d1c <malloc>
 8010f2e:	1e02      	subs	r2, r0, #0
 8010f30:	61e8      	str	r0, [r5, #28]
 8010f32:	d104      	bne.n	8010f3e <_Bfree+0x22>
 8010f34:	218f      	movs	r1, #143	@ 0x8f
 8010f36:	4b09      	ldr	r3, [pc, #36]	@ (8010f5c <_Bfree+0x40>)
 8010f38:	4809      	ldr	r0, [pc, #36]	@ (8010f60 <_Bfree+0x44>)
 8010f3a:	f000 ff73 	bl	8011e24 <__assert_func>
 8010f3e:	6046      	str	r6, [r0, #4]
 8010f40:	6086      	str	r6, [r0, #8]
 8010f42:	6006      	str	r6, [r0, #0]
 8010f44:	60c6      	str	r6, [r0, #12]
 8010f46:	2c00      	cmp	r4, #0
 8010f48:	d007      	beq.n	8010f5a <_Bfree+0x3e>
 8010f4a:	69eb      	ldr	r3, [r5, #28]
 8010f4c:	6862      	ldr	r2, [r4, #4]
 8010f4e:	68db      	ldr	r3, [r3, #12]
 8010f50:	0092      	lsls	r2, r2, #2
 8010f52:	189b      	adds	r3, r3, r2
 8010f54:	681a      	ldr	r2, [r3, #0]
 8010f56:	6022      	str	r2, [r4, #0]
 8010f58:	601c      	str	r4, [r3, #0]
 8010f5a:	bd70      	pop	{r4, r5, r6, pc}
 8010f5c:	08013075 	.word	0x08013075
 8010f60:	080130f5 	.word	0x080130f5

08010f64 <__multadd>:
 8010f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010f66:	000f      	movs	r7, r1
 8010f68:	9001      	str	r0, [sp, #4]
 8010f6a:	000c      	movs	r4, r1
 8010f6c:	001e      	movs	r6, r3
 8010f6e:	2000      	movs	r0, #0
 8010f70:	690d      	ldr	r5, [r1, #16]
 8010f72:	3714      	adds	r7, #20
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	3001      	adds	r0, #1
 8010f78:	b299      	uxth	r1, r3
 8010f7a:	4351      	muls	r1, r2
 8010f7c:	0c1b      	lsrs	r3, r3, #16
 8010f7e:	4353      	muls	r3, r2
 8010f80:	1989      	adds	r1, r1, r6
 8010f82:	0c0e      	lsrs	r6, r1, #16
 8010f84:	199b      	adds	r3, r3, r6
 8010f86:	0c1e      	lsrs	r6, r3, #16
 8010f88:	b289      	uxth	r1, r1
 8010f8a:	041b      	lsls	r3, r3, #16
 8010f8c:	185b      	adds	r3, r3, r1
 8010f8e:	c708      	stmia	r7!, {r3}
 8010f90:	4285      	cmp	r5, r0
 8010f92:	dcef      	bgt.n	8010f74 <__multadd+0x10>
 8010f94:	2e00      	cmp	r6, #0
 8010f96:	d022      	beq.n	8010fde <__multadd+0x7a>
 8010f98:	68a3      	ldr	r3, [r4, #8]
 8010f9a:	42ab      	cmp	r3, r5
 8010f9c:	dc19      	bgt.n	8010fd2 <__multadd+0x6e>
 8010f9e:	6861      	ldr	r1, [r4, #4]
 8010fa0:	9801      	ldr	r0, [sp, #4]
 8010fa2:	3101      	adds	r1, #1
 8010fa4:	f7ff ff76 	bl	8010e94 <_Balloc>
 8010fa8:	1e07      	subs	r7, r0, #0
 8010faa:	d105      	bne.n	8010fb8 <__multadd+0x54>
 8010fac:	003a      	movs	r2, r7
 8010fae:	21ba      	movs	r1, #186	@ 0xba
 8010fb0:	4b0c      	ldr	r3, [pc, #48]	@ (8010fe4 <__multadd+0x80>)
 8010fb2:	480d      	ldr	r0, [pc, #52]	@ (8010fe8 <__multadd+0x84>)
 8010fb4:	f000 ff36 	bl	8011e24 <__assert_func>
 8010fb8:	0021      	movs	r1, r4
 8010fba:	6922      	ldr	r2, [r4, #16]
 8010fbc:	310c      	adds	r1, #12
 8010fbe:	3202      	adds	r2, #2
 8010fc0:	0092      	lsls	r2, r2, #2
 8010fc2:	300c      	adds	r0, #12
 8010fc4:	f000 ff24 	bl	8011e10 <memcpy>
 8010fc8:	0021      	movs	r1, r4
 8010fca:	9801      	ldr	r0, [sp, #4]
 8010fcc:	f7ff ffa6 	bl	8010f1c <_Bfree>
 8010fd0:	003c      	movs	r4, r7
 8010fd2:	1d2b      	adds	r3, r5, #4
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	18e3      	adds	r3, r4, r3
 8010fd8:	3501      	adds	r5, #1
 8010fda:	605e      	str	r6, [r3, #4]
 8010fdc:	6125      	str	r5, [r4, #16]
 8010fde:	0020      	movs	r0, r4
 8010fe0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010fe2:	46c0      	nop			@ (mov r8, r8)
 8010fe4:	080130e4 	.word	0x080130e4
 8010fe8:	080130f5 	.word	0x080130f5

08010fec <__hi0bits>:
 8010fec:	2280      	movs	r2, #128	@ 0x80
 8010fee:	0003      	movs	r3, r0
 8010ff0:	0252      	lsls	r2, r2, #9
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	4293      	cmp	r3, r2
 8010ff6:	d201      	bcs.n	8010ffc <__hi0bits+0x10>
 8010ff8:	041b      	lsls	r3, r3, #16
 8010ffa:	3010      	adds	r0, #16
 8010ffc:	2280      	movs	r2, #128	@ 0x80
 8010ffe:	0452      	lsls	r2, r2, #17
 8011000:	4293      	cmp	r3, r2
 8011002:	d201      	bcs.n	8011008 <__hi0bits+0x1c>
 8011004:	3008      	adds	r0, #8
 8011006:	021b      	lsls	r3, r3, #8
 8011008:	2280      	movs	r2, #128	@ 0x80
 801100a:	0552      	lsls	r2, r2, #21
 801100c:	4293      	cmp	r3, r2
 801100e:	d201      	bcs.n	8011014 <__hi0bits+0x28>
 8011010:	3004      	adds	r0, #4
 8011012:	011b      	lsls	r3, r3, #4
 8011014:	2280      	movs	r2, #128	@ 0x80
 8011016:	05d2      	lsls	r2, r2, #23
 8011018:	4293      	cmp	r3, r2
 801101a:	d201      	bcs.n	8011020 <__hi0bits+0x34>
 801101c:	3002      	adds	r0, #2
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	2b00      	cmp	r3, #0
 8011022:	db03      	blt.n	801102c <__hi0bits+0x40>
 8011024:	3001      	adds	r0, #1
 8011026:	4213      	tst	r3, r2
 8011028:	d100      	bne.n	801102c <__hi0bits+0x40>
 801102a:	2020      	movs	r0, #32
 801102c:	4770      	bx	lr

0801102e <__lo0bits>:
 801102e:	6803      	ldr	r3, [r0, #0]
 8011030:	0001      	movs	r1, r0
 8011032:	2207      	movs	r2, #7
 8011034:	0018      	movs	r0, r3
 8011036:	4010      	ands	r0, r2
 8011038:	4213      	tst	r3, r2
 801103a:	d00d      	beq.n	8011058 <__lo0bits+0x2a>
 801103c:	3a06      	subs	r2, #6
 801103e:	2000      	movs	r0, #0
 8011040:	4213      	tst	r3, r2
 8011042:	d105      	bne.n	8011050 <__lo0bits+0x22>
 8011044:	3002      	adds	r0, #2
 8011046:	4203      	tst	r3, r0
 8011048:	d003      	beq.n	8011052 <__lo0bits+0x24>
 801104a:	40d3      	lsrs	r3, r2
 801104c:	0010      	movs	r0, r2
 801104e:	600b      	str	r3, [r1, #0]
 8011050:	4770      	bx	lr
 8011052:	089b      	lsrs	r3, r3, #2
 8011054:	600b      	str	r3, [r1, #0]
 8011056:	e7fb      	b.n	8011050 <__lo0bits+0x22>
 8011058:	b29a      	uxth	r2, r3
 801105a:	2a00      	cmp	r2, #0
 801105c:	d101      	bne.n	8011062 <__lo0bits+0x34>
 801105e:	2010      	movs	r0, #16
 8011060:	0c1b      	lsrs	r3, r3, #16
 8011062:	b2da      	uxtb	r2, r3
 8011064:	2a00      	cmp	r2, #0
 8011066:	d101      	bne.n	801106c <__lo0bits+0x3e>
 8011068:	3008      	adds	r0, #8
 801106a:	0a1b      	lsrs	r3, r3, #8
 801106c:	071a      	lsls	r2, r3, #28
 801106e:	d101      	bne.n	8011074 <__lo0bits+0x46>
 8011070:	3004      	adds	r0, #4
 8011072:	091b      	lsrs	r3, r3, #4
 8011074:	079a      	lsls	r2, r3, #30
 8011076:	d101      	bne.n	801107c <__lo0bits+0x4e>
 8011078:	3002      	adds	r0, #2
 801107a:	089b      	lsrs	r3, r3, #2
 801107c:	07da      	lsls	r2, r3, #31
 801107e:	d4e9      	bmi.n	8011054 <__lo0bits+0x26>
 8011080:	3001      	adds	r0, #1
 8011082:	085b      	lsrs	r3, r3, #1
 8011084:	d1e6      	bne.n	8011054 <__lo0bits+0x26>
 8011086:	2020      	movs	r0, #32
 8011088:	e7e2      	b.n	8011050 <__lo0bits+0x22>
	...

0801108c <__i2b>:
 801108c:	b510      	push	{r4, lr}
 801108e:	000c      	movs	r4, r1
 8011090:	2101      	movs	r1, #1
 8011092:	f7ff feff 	bl	8010e94 <_Balloc>
 8011096:	2800      	cmp	r0, #0
 8011098:	d107      	bne.n	80110aa <__i2b+0x1e>
 801109a:	2146      	movs	r1, #70	@ 0x46
 801109c:	4c05      	ldr	r4, [pc, #20]	@ (80110b4 <__i2b+0x28>)
 801109e:	0002      	movs	r2, r0
 80110a0:	4b05      	ldr	r3, [pc, #20]	@ (80110b8 <__i2b+0x2c>)
 80110a2:	0020      	movs	r0, r4
 80110a4:	31ff      	adds	r1, #255	@ 0xff
 80110a6:	f000 febd 	bl	8011e24 <__assert_func>
 80110aa:	2301      	movs	r3, #1
 80110ac:	6144      	str	r4, [r0, #20]
 80110ae:	6103      	str	r3, [r0, #16]
 80110b0:	bd10      	pop	{r4, pc}
 80110b2:	46c0      	nop			@ (mov r8, r8)
 80110b4:	080130f5 	.word	0x080130f5
 80110b8:	080130e4 	.word	0x080130e4

080110bc <__multiply>:
 80110bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80110be:	0014      	movs	r4, r2
 80110c0:	690a      	ldr	r2, [r1, #16]
 80110c2:	6923      	ldr	r3, [r4, #16]
 80110c4:	000d      	movs	r5, r1
 80110c6:	b08b      	sub	sp, #44	@ 0x2c
 80110c8:	429a      	cmp	r2, r3
 80110ca:	db02      	blt.n	80110d2 <__multiply+0x16>
 80110cc:	0023      	movs	r3, r4
 80110ce:	000c      	movs	r4, r1
 80110d0:	001d      	movs	r5, r3
 80110d2:	6927      	ldr	r7, [r4, #16]
 80110d4:	692e      	ldr	r6, [r5, #16]
 80110d6:	6861      	ldr	r1, [r4, #4]
 80110d8:	19bb      	adds	r3, r7, r6
 80110da:	9303      	str	r3, [sp, #12]
 80110dc:	68a3      	ldr	r3, [r4, #8]
 80110de:	19ba      	adds	r2, r7, r6
 80110e0:	4293      	cmp	r3, r2
 80110e2:	da00      	bge.n	80110e6 <__multiply+0x2a>
 80110e4:	3101      	adds	r1, #1
 80110e6:	f7ff fed5 	bl	8010e94 <_Balloc>
 80110ea:	9002      	str	r0, [sp, #8]
 80110ec:	2800      	cmp	r0, #0
 80110ee:	d106      	bne.n	80110fe <__multiply+0x42>
 80110f0:	21b1      	movs	r1, #177	@ 0xb1
 80110f2:	4b49      	ldr	r3, [pc, #292]	@ (8011218 <__multiply+0x15c>)
 80110f4:	4849      	ldr	r0, [pc, #292]	@ (801121c <__multiply+0x160>)
 80110f6:	9a02      	ldr	r2, [sp, #8]
 80110f8:	0049      	lsls	r1, r1, #1
 80110fa:	f000 fe93 	bl	8011e24 <__assert_func>
 80110fe:	9b02      	ldr	r3, [sp, #8]
 8011100:	2200      	movs	r2, #0
 8011102:	3314      	adds	r3, #20
 8011104:	469c      	mov	ip, r3
 8011106:	19bb      	adds	r3, r7, r6
 8011108:	009b      	lsls	r3, r3, #2
 801110a:	4463      	add	r3, ip
 801110c:	9304      	str	r3, [sp, #16]
 801110e:	4663      	mov	r3, ip
 8011110:	9904      	ldr	r1, [sp, #16]
 8011112:	428b      	cmp	r3, r1
 8011114:	d32a      	bcc.n	801116c <__multiply+0xb0>
 8011116:	0023      	movs	r3, r4
 8011118:	00bf      	lsls	r7, r7, #2
 801111a:	3314      	adds	r3, #20
 801111c:	3514      	adds	r5, #20
 801111e:	9308      	str	r3, [sp, #32]
 8011120:	00b6      	lsls	r6, r6, #2
 8011122:	19db      	adds	r3, r3, r7
 8011124:	9305      	str	r3, [sp, #20]
 8011126:	19ab      	adds	r3, r5, r6
 8011128:	9309      	str	r3, [sp, #36]	@ 0x24
 801112a:	2304      	movs	r3, #4
 801112c:	9306      	str	r3, [sp, #24]
 801112e:	0023      	movs	r3, r4
 8011130:	9a05      	ldr	r2, [sp, #20]
 8011132:	3315      	adds	r3, #21
 8011134:	9501      	str	r5, [sp, #4]
 8011136:	429a      	cmp	r2, r3
 8011138:	d305      	bcc.n	8011146 <__multiply+0x8a>
 801113a:	1b13      	subs	r3, r2, r4
 801113c:	3b15      	subs	r3, #21
 801113e:	089b      	lsrs	r3, r3, #2
 8011140:	3301      	adds	r3, #1
 8011142:	009b      	lsls	r3, r3, #2
 8011144:	9306      	str	r3, [sp, #24]
 8011146:	9b01      	ldr	r3, [sp, #4]
 8011148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801114a:	4293      	cmp	r3, r2
 801114c:	d310      	bcc.n	8011170 <__multiply+0xb4>
 801114e:	9b03      	ldr	r3, [sp, #12]
 8011150:	2b00      	cmp	r3, #0
 8011152:	dd05      	ble.n	8011160 <__multiply+0xa4>
 8011154:	9b04      	ldr	r3, [sp, #16]
 8011156:	3b04      	subs	r3, #4
 8011158:	9304      	str	r3, [sp, #16]
 801115a:	681b      	ldr	r3, [r3, #0]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d056      	beq.n	801120e <__multiply+0x152>
 8011160:	9b02      	ldr	r3, [sp, #8]
 8011162:	9a03      	ldr	r2, [sp, #12]
 8011164:	0018      	movs	r0, r3
 8011166:	611a      	str	r2, [r3, #16]
 8011168:	b00b      	add	sp, #44	@ 0x2c
 801116a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801116c:	c304      	stmia	r3!, {r2}
 801116e:	e7cf      	b.n	8011110 <__multiply+0x54>
 8011170:	9b01      	ldr	r3, [sp, #4]
 8011172:	6818      	ldr	r0, [r3, #0]
 8011174:	b280      	uxth	r0, r0
 8011176:	2800      	cmp	r0, #0
 8011178:	d01e      	beq.n	80111b8 <__multiply+0xfc>
 801117a:	4667      	mov	r7, ip
 801117c:	2500      	movs	r5, #0
 801117e:	9e08      	ldr	r6, [sp, #32]
 8011180:	ce02      	ldmia	r6!, {r1}
 8011182:	683b      	ldr	r3, [r7, #0]
 8011184:	9307      	str	r3, [sp, #28]
 8011186:	b28b      	uxth	r3, r1
 8011188:	4343      	muls	r3, r0
 801118a:	001a      	movs	r2, r3
 801118c:	466b      	mov	r3, sp
 801118e:	0c09      	lsrs	r1, r1, #16
 8011190:	8b9b      	ldrh	r3, [r3, #28]
 8011192:	4341      	muls	r1, r0
 8011194:	18d3      	adds	r3, r2, r3
 8011196:	9a07      	ldr	r2, [sp, #28]
 8011198:	195b      	adds	r3, r3, r5
 801119a:	0c12      	lsrs	r2, r2, #16
 801119c:	1889      	adds	r1, r1, r2
 801119e:	0c1a      	lsrs	r2, r3, #16
 80111a0:	188a      	adds	r2, r1, r2
 80111a2:	b29b      	uxth	r3, r3
 80111a4:	0c15      	lsrs	r5, r2, #16
 80111a6:	0412      	lsls	r2, r2, #16
 80111a8:	431a      	orrs	r2, r3
 80111aa:	9b05      	ldr	r3, [sp, #20]
 80111ac:	c704      	stmia	r7!, {r2}
 80111ae:	42b3      	cmp	r3, r6
 80111b0:	d8e6      	bhi.n	8011180 <__multiply+0xc4>
 80111b2:	4663      	mov	r3, ip
 80111b4:	9a06      	ldr	r2, [sp, #24]
 80111b6:	509d      	str	r5, [r3, r2]
 80111b8:	9b01      	ldr	r3, [sp, #4]
 80111ba:	6818      	ldr	r0, [r3, #0]
 80111bc:	0c00      	lsrs	r0, r0, #16
 80111be:	d020      	beq.n	8011202 <__multiply+0x146>
 80111c0:	4663      	mov	r3, ip
 80111c2:	0025      	movs	r5, r4
 80111c4:	4661      	mov	r1, ip
 80111c6:	2700      	movs	r7, #0
 80111c8:	681b      	ldr	r3, [r3, #0]
 80111ca:	3514      	adds	r5, #20
 80111cc:	682a      	ldr	r2, [r5, #0]
 80111ce:	680e      	ldr	r6, [r1, #0]
 80111d0:	b292      	uxth	r2, r2
 80111d2:	4342      	muls	r2, r0
 80111d4:	0c36      	lsrs	r6, r6, #16
 80111d6:	1992      	adds	r2, r2, r6
 80111d8:	19d2      	adds	r2, r2, r7
 80111da:	0416      	lsls	r6, r2, #16
 80111dc:	b29b      	uxth	r3, r3
 80111de:	431e      	orrs	r6, r3
 80111e0:	600e      	str	r6, [r1, #0]
 80111e2:	cd40      	ldmia	r5!, {r6}
 80111e4:	684b      	ldr	r3, [r1, #4]
 80111e6:	0c36      	lsrs	r6, r6, #16
 80111e8:	4346      	muls	r6, r0
 80111ea:	b29b      	uxth	r3, r3
 80111ec:	0c12      	lsrs	r2, r2, #16
 80111ee:	18f3      	adds	r3, r6, r3
 80111f0:	189b      	adds	r3, r3, r2
 80111f2:	9a05      	ldr	r2, [sp, #20]
 80111f4:	0c1f      	lsrs	r7, r3, #16
 80111f6:	3104      	adds	r1, #4
 80111f8:	42aa      	cmp	r2, r5
 80111fa:	d8e7      	bhi.n	80111cc <__multiply+0x110>
 80111fc:	4662      	mov	r2, ip
 80111fe:	9906      	ldr	r1, [sp, #24]
 8011200:	5053      	str	r3, [r2, r1]
 8011202:	9b01      	ldr	r3, [sp, #4]
 8011204:	3304      	adds	r3, #4
 8011206:	9301      	str	r3, [sp, #4]
 8011208:	2304      	movs	r3, #4
 801120a:	449c      	add	ip, r3
 801120c:	e79b      	b.n	8011146 <__multiply+0x8a>
 801120e:	9b03      	ldr	r3, [sp, #12]
 8011210:	3b01      	subs	r3, #1
 8011212:	9303      	str	r3, [sp, #12]
 8011214:	e79b      	b.n	801114e <__multiply+0x92>
 8011216:	46c0      	nop			@ (mov r8, r8)
 8011218:	080130e4 	.word	0x080130e4
 801121c:	080130f5 	.word	0x080130f5

08011220 <__pow5mult>:
 8011220:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011222:	2303      	movs	r3, #3
 8011224:	0015      	movs	r5, r2
 8011226:	0007      	movs	r7, r0
 8011228:	000e      	movs	r6, r1
 801122a:	401a      	ands	r2, r3
 801122c:	421d      	tst	r5, r3
 801122e:	d008      	beq.n	8011242 <__pow5mult+0x22>
 8011230:	4925      	ldr	r1, [pc, #148]	@ (80112c8 <__pow5mult+0xa8>)
 8011232:	3a01      	subs	r2, #1
 8011234:	0092      	lsls	r2, r2, #2
 8011236:	5852      	ldr	r2, [r2, r1]
 8011238:	2300      	movs	r3, #0
 801123a:	0031      	movs	r1, r6
 801123c:	f7ff fe92 	bl	8010f64 <__multadd>
 8011240:	0006      	movs	r6, r0
 8011242:	10ad      	asrs	r5, r5, #2
 8011244:	d03d      	beq.n	80112c2 <__pow5mult+0xa2>
 8011246:	69fc      	ldr	r4, [r7, #28]
 8011248:	2c00      	cmp	r4, #0
 801124a:	d10f      	bne.n	801126c <__pow5mult+0x4c>
 801124c:	2010      	movs	r0, #16
 801124e:	f7ff fd65 	bl	8010d1c <malloc>
 8011252:	1e02      	subs	r2, r0, #0
 8011254:	61f8      	str	r0, [r7, #28]
 8011256:	d105      	bne.n	8011264 <__pow5mult+0x44>
 8011258:	21b4      	movs	r1, #180	@ 0xb4
 801125a:	4b1c      	ldr	r3, [pc, #112]	@ (80112cc <__pow5mult+0xac>)
 801125c:	481c      	ldr	r0, [pc, #112]	@ (80112d0 <__pow5mult+0xb0>)
 801125e:	31ff      	adds	r1, #255	@ 0xff
 8011260:	f000 fde0 	bl	8011e24 <__assert_func>
 8011264:	6044      	str	r4, [r0, #4]
 8011266:	6084      	str	r4, [r0, #8]
 8011268:	6004      	str	r4, [r0, #0]
 801126a:	60c4      	str	r4, [r0, #12]
 801126c:	69fb      	ldr	r3, [r7, #28]
 801126e:	689c      	ldr	r4, [r3, #8]
 8011270:	9301      	str	r3, [sp, #4]
 8011272:	2c00      	cmp	r4, #0
 8011274:	d108      	bne.n	8011288 <__pow5mult+0x68>
 8011276:	0038      	movs	r0, r7
 8011278:	4916      	ldr	r1, [pc, #88]	@ (80112d4 <__pow5mult+0xb4>)
 801127a:	f7ff ff07 	bl	801108c <__i2b>
 801127e:	9b01      	ldr	r3, [sp, #4]
 8011280:	0004      	movs	r4, r0
 8011282:	6098      	str	r0, [r3, #8]
 8011284:	2300      	movs	r3, #0
 8011286:	6003      	str	r3, [r0, #0]
 8011288:	2301      	movs	r3, #1
 801128a:	421d      	tst	r5, r3
 801128c:	d00a      	beq.n	80112a4 <__pow5mult+0x84>
 801128e:	0031      	movs	r1, r6
 8011290:	0022      	movs	r2, r4
 8011292:	0038      	movs	r0, r7
 8011294:	f7ff ff12 	bl	80110bc <__multiply>
 8011298:	0031      	movs	r1, r6
 801129a:	9001      	str	r0, [sp, #4]
 801129c:	0038      	movs	r0, r7
 801129e:	f7ff fe3d 	bl	8010f1c <_Bfree>
 80112a2:	9e01      	ldr	r6, [sp, #4]
 80112a4:	106d      	asrs	r5, r5, #1
 80112a6:	d00c      	beq.n	80112c2 <__pow5mult+0xa2>
 80112a8:	6820      	ldr	r0, [r4, #0]
 80112aa:	2800      	cmp	r0, #0
 80112ac:	d107      	bne.n	80112be <__pow5mult+0x9e>
 80112ae:	0022      	movs	r2, r4
 80112b0:	0021      	movs	r1, r4
 80112b2:	0038      	movs	r0, r7
 80112b4:	f7ff ff02 	bl	80110bc <__multiply>
 80112b8:	2300      	movs	r3, #0
 80112ba:	6020      	str	r0, [r4, #0]
 80112bc:	6003      	str	r3, [r0, #0]
 80112be:	0004      	movs	r4, r0
 80112c0:	e7e2      	b.n	8011288 <__pow5mult+0x68>
 80112c2:	0030      	movs	r0, r6
 80112c4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80112c6:	46c0      	nop			@ (mov r8, r8)
 80112c8:	08013150 	.word	0x08013150
 80112cc:	08013075 	.word	0x08013075
 80112d0:	080130f5 	.word	0x080130f5
 80112d4:	00000271 	.word	0x00000271

080112d8 <__lshift>:
 80112d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112da:	000c      	movs	r4, r1
 80112dc:	0016      	movs	r6, r2
 80112de:	6923      	ldr	r3, [r4, #16]
 80112e0:	1157      	asrs	r7, r2, #5
 80112e2:	b085      	sub	sp, #20
 80112e4:	18fb      	adds	r3, r7, r3
 80112e6:	9301      	str	r3, [sp, #4]
 80112e8:	3301      	adds	r3, #1
 80112ea:	9300      	str	r3, [sp, #0]
 80112ec:	6849      	ldr	r1, [r1, #4]
 80112ee:	68a3      	ldr	r3, [r4, #8]
 80112f0:	9002      	str	r0, [sp, #8]
 80112f2:	9a00      	ldr	r2, [sp, #0]
 80112f4:	4293      	cmp	r3, r2
 80112f6:	db10      	blt.n	801131a <__lshift+0x42>
 80112f8:	9802      	ldr	r0, [sp, #8]
 80112fa:	f7ff fdcb 	bl	8010e94 <_Balloc>
 80112fe:	2300      	movs	r3, #0
 8011300:	0001      	movs	r1, r0
 8011302:	0005      	movs	r5, r0
 8011304:	001a      	movs	r2, r3
 8011306:	3114      	adds	r1, #20
 8011308:	4298      	cmp	r0, r3
 801130a:	d10c      	bne.n	8011326 <__lshift+0x4e>
 801130c:	21ef      	movs	r1, #239	@ 0xef
 801130e:	002a      	movs	r2, r5
 8011310:	4b25      	ldr	r3, [pc, #148]	@ (80113a8 <__lshift+0xd0>)
 8011312:	4826      	ldr	r0, [pc, #152]	@ (80113ac <__lshift+0xd4>)
 8011314:	0049      	lsls	r1, r1, #1
 8011316:	f000 fd85 	bl	8011e24 <__assert_func>
 801131a:	3101      	adds	r1, #1
 801131c:	005b      	lsls	r3, r3, #1
 801131e:	e7e8      	b.n	80112f2 <__lshift+0x1a>
 8011320:	0098      	lsls	r0, r3, #2
 8011322:	500a      	str	r2, [r1, r0]
 8011324:	3301      	adds	r3, #1
 8011326:	42bb      	cmp	r3, r7
 8011328:	dbfa      	blt.n	8011320 <__lshift+0x48>
 801132a:	43fb      	mvns	r3, r7
 801132c:	17db      	asrs	r3, r3, #31
 801132e:	401f      	ands	r7, r3
 8011330:	00bf      	lsls	r7, r7, #2
 8011332:	0023      	movs	r3, r4
 8011334:	201f      	movs	r0, #31
 8011336:	19c9      	adds	r1, r1, r7
 8011338:	0037      	movs	r7, r6
 801133a:	6922      	ldr	r2, [r4, #16]
 801133c:	3314      	adds	r3, #20
 801133e:	0092      	lsls	r2, r2, #2
 8011340:	189a      	adds	r2, r3, r2
 8011342:	4007      	ands	r7, r0
 8011344:	4206      	tst	r6, r0
 8011346:	d029      	beq.n	801139c <__lshift+0xc4>
 8011348:	3001      	adds	r0, #1
 801134a:	1bc0      	subs	r0, r0, r7
 801134c:	9003      	str	r0, [sp, #12]
 801134e:	468c      	mov	ip, r1
 8011350:	2000      	movs	r0, #0
 8011352:	681e      	ldr	r6, [r3, #0]
 8011354:	40be      	lsls	r6, r7
 8011356:	4306      	orrs	r6, r0
 8011358:	4660      	mov	r0, ip
 801135a:	c040      	stmia	r0!, {r6}
 801135c:	4684      	mov	ip, r0
 801135e:	9e03      	ldr	r6, [sp, #12]
 8011360:	cb01      	ldmia	r3!, {r0}
 8011362:	40f0      	lsrs	r0, r6
 8011364:	429a      	cmp	r2, r3
 8011366:	d8f4      	bhi.n	8011352 <__lshift+0x7a>
 8011368:	0026      	movs	r6, r4
 801136a:	3615      	adds	r6, #21
 801136c:	2304      	movs	r3, #4
 801136e:	42b2      	cmp	r2, r6
 8011370:	d304      	bcc.n	801137c <__lshift+0xa4>
 8011372:	1b13      	subs	r3, r2, r4
 8011374:	3b15      	subs	r3, #21
 8011376:	089b      	lsrs	r3, r3, #2
 8011378:	3301      	adds	r3, #1
 801137a:	009b      	lsls	r3, r3, #2
 801137c:	50c8      	str	r0, [r1, r3]
 801137e:	2800      	cmp	r0, #0
 8011380:	d002      	beq.n	8011388 <__lshift+0xb0>
 8011382:	9b01      	ldr	r3, [sp, #4]
 8011384:	3302      	adds	r3, #2
 8011386:	9300      	str	r3, [sp, #0]
 8011388:	9b00      	ldr	r3, [sp, #0]
 801138a:	9802      	ldr	r0, [sp, #8]
 801138c:	3b01      	subs	r3, #1
 801138e:	0021      	movs	r1, r4
 8011390:	612b      	str	r3, [r5, #16]
 8011392:	f7ff fdc3 	bl	8010f1c <_Bfree>
 8011396:	0028      	movs	r0, r5
 8011398:	b005      	add	sp, #20
 801139a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801139c:	cb01      	ldmia	r3!, {r0}
 801139e:	c101      	stmia	r1!, {r0}
 80113a0:	429a      	cmp	r2, r3
 80113a2:	d8fb      	bhi.n	801139c <__lshift+0xc4>
 80113a4:	e7f0      	b.n	8011388 <__lshift+0xb0>
 80113a6:	46c0      	nop			@ (mov r8, r8)
 80113a8:	080130e4 	.word	0x080130e4
 80113ac:	080130f5 	.word	0x080130f5

080113b0 <__mcmp>:
 80113b0:	b530      	push	{r4, r5, lr}
 80113b2:	690b      	ldr	r3, [r1, #16]
 80113b4:	6904      	ldr	r4, [r0, #16]
 80113b6:	0002      	movs	r2, r0
 80113b8:	1ae0      	subs	r0, r4, r3
 80113ba:	429c      	cmp	r4, r3
 80113bc:	d10f      	bne.n	80113de <__mcmp+0x2e>
 80113be:	3214      	adds	r2, #20
 80113c0:	009b      	lsls	r3, r3, #2
 80113c2:	3114      	adds	r1, #20
 80113c4:	0014      	movs	r4, r2
 80113c6:	18c9      	adds	r1, r1, r3
 80113c8:	18d2      	adds	r2, r2, r3
 80113ca:	3a04      	subs	r2, #4
 80113cc:	3904      	subs	r1, #4
 80113ce:	6815      	ldr	r5, [r2, #0]
 80113d0:	680b      	ldr	r3, [r1, #0]
 80113d2:	429d      	cmp	r5, r3
 80113d4:	d004      	beq.n	80113e0 <__mcmp+0x30>
 80113d6:	2001      	movs	r0, #1
 80113d8:	429d      	cmp	r5, r3
 80113da:	d200      	bcs.n	80113de <__mcmp+0x2e>
 80113dc:	3802      	subs	r0, #2
 80113de:	bd30      	pop	{r4, r5, pc}
 80113e0:	4294      	cmp	r4, r2
 80113e2:	d3f2      	bcc.n	80113ca <__mcmp+0x1a>
 80113e4:	e7fb      	b.n	80113de <__mcmp+0x2e>
	...

080113e8 <__mdiff>:
 80113e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80113ea:	000c      	movs	r4, r1
 80113ec:	b087      	sub	sp, #28
 80113ee:	9000      	str	r0, [sp, #0]
 80113f0:	0011      	movs	r1, r2
 80113f2:	0020      	movs	r0, r4
 80113f4:	0017      	movs	r7, r2
 80113f6:	f7ff ffdb 	bl	80113b0 <__mcmp>
 80113fa:	1e05      	subs	r5, r0, #0
 80113fc:	d110      	bne.n	8011420 <__mdiff+0x38>
 80113fe:	0001      	movs	r1, r0
 8011400:	9800      	ldr	r0, [sp, #0]
 8011402:	f7ff fd47 	bl	8010e94 <_Balloc>
 8011406:	1e02      	subs	r2, r0, #0
 8011408:	d104      	bne.n	8011414 <__mdiff+0x2c>
 801140a:	4b40      	ldr	r3, [pc, #256]	@ (801150c <__mdiff+0x124>)
 801140c:	4840      	ldr	r0, [pc, #256]	@ (8011510 <__mdiff+0x128>)
 801140e:	4941      	ldr	r1, [pc, #260]	@ (8011514 <__mdiff+0x12c>)
 8011410:	f000 fd08 	bl	8011e24 <__assert_func>
 8011414:	2301      	movs	r3, #1
 8011416:	6145      	str	r5, [r0, #20]
 8011418:	6103      	str	r3, [r0, #16]
 801141a:	0010      	movs	r0, r2
 801141c:	b007      	add	sp, #28
 801141e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011420:	2600      	movs	r6, #0
 8011422:	42b0      	cmp	r0, r6
 8011424:	da03      	bge.n	801142e <__mdiff+0x46>
 8011426:	0023      	movs	r3, r4
 8011428:	003c      	movs	r4, r7
 801142a:	001f      	movs	r7, r3
 801142c:	3601      	adds	r6, #1
 801142e:	6861      	ldr	r1, [r4, #4]
 8011430:	9800      	ldr	r0, [sp, #0]
 8011432:	f7ff fd2f 	bl	8010e94 <_Balloc>
 8011436:	1e02      	subs	r2, r0, #0
 8011438:	d103      	bne.n	8011442 <__mdiff+0x5a>
 801143a:	4b34      	ldr	r3, [pc, #208]	@ (801150c <__mdiff+0x124>)
 801143c:	4834      	ldr	r0, [pc, #208]	@ (8011510 <__mdiff+0x128>)
 801143e:	4936      	ldr	r1, [pc, #216]	@ (8011518 <__mdiff+0x130>)
 8011440:	e7e6      	b.n	8011410 <__mdiff+0x28>
 8011442:	6923      	ldr	r3, [r4, #16]
 8011444:	3414      	adds	r4, #20
 8011446:	9300      	str	r3, [sp, #0]
 8011448:	009b      	lsls	r3, r3, #2
 801144a:	18e3      	adds	r3, r4, r3
 801144c:	0021      	movs	r1, r4
 801144e:	9401      	str	r4, [sp, #4]
 8011450:	003c      	movs	r4, r7
 8011452:	9302      	str	r3, [sp, #8]
 8011454:	693b      	ldr	r3, [r7, #16]
 8011456:	3414      	adds	r4, #20
 8011458:	009b      	lsls	r3, r3, #2
 801145a:	18e3      	adds	r3, r4, r3
 801145c:	9303      	str	r3, [sp, #12]
 801145e:	0003      	movs	r3, r0
 8011460:	60c6      	str	r6, [r0, #12]
 8011462:	468c      	mov	ip, r1
 8011464:	2000      	movs	r0, #0
 8011466:	3314      	adds	r3, #20
 8011468:	9304      	str	r3, [sp, #16]
 801146a:	9305      	str	r3, [sp, #20]
 801146c:	4663      	mov	r3, ip
 801146e:	cb20      	ldmia	r3!, {r5}
 8011470:	b2a9      	uxth	r1, r5
 8011472:	000e      	movs	r6, r1
 8011474:	469c      	mov	ip, r3
 8011476:	cc08      	ldmia	r4!, {r3}
 8011478:	0c2d      	lsrs	r5, r5, #16
 801147a:	b299      	uxth	r1, r3
 801147c:	1a71      	subs	r1, r6, r1
 801147e:	1809      	adds	r1, r1, r0
 8011480:	0c1b      	lsrs	r3, r3, #16
 8011482:	1408      	asrs	r0, r1, #16
 8011484:	1aeb      	subs	r3, r5, r3
 8011486:	181b      	adds	r3, r3, r0
 8011488:	1418      	asrs	r0, r3, #16
 801148a:	b289      	uxth	r1, r1
 801148c:	041b      	lsls	r3, r3, #16
 801148e:	4319      	orrs	r1, r3
 8011490:	9b05      	ldr	r3, [sp, #20]
 8011492:	c302      	stmia	r3!, {r1}
 8011494:	9305      	str	r3, [sp, #20]
 8011496:	9b03      	ldr	r3, [sp, #12]
 8011498:	42a3      	cmp	r3, r4
 801149a:	d8e7      	bhi.n	801146c <__mdiff+0x84>
 801149c:	0039      	movs	r1, r7
 801149e:	9c03      	ldr	r4, [sp, #12]
 80114a0:	3115      	adds	r1, #21
 80114a2:	2304      	movs	r3, #4
 80114a4:	428c      	cmp	r4, r1
 80114a6:	d304      	bcc.n	80114b2 <__mdiff+0xca>
 80114a8:	1be3      	subs	r3, r4, r7
 80114aa:	3b15      	subs	r3, #21
 80114ac:	089b      	lsrs	r3, r3, #2
 80114ae:	3301      	adds	r3, #1
 80114b0:	009b      	lsls	r3, r3, #2
 80114b2:	9901      	ldr	r1, [sp, #4]
 80114b4:	18cd      	adds	r5, r1, r3
 80114b6:	9904      	ldr	r1, [sp, #16]
 80114b8:	002e      	movs	r6, r5
 80114ba:	18cb      	adds	r3, r1, r3
 80114bc:	001f      	movs	r7, r3
 80114be:	9902      	ldr	r1, [sp, #8]
 80114c0:	428e      	cmp	r6, r1
 80114c2:	d311      	bcc.n	80114e8 <__mdiff+0x100>
 80114c4:	9c02      	ldr	r4, [sp, #8]
 80114c6:	1ee9      	subs	r1, r5, #3
 80114c8:	2000      	movs	r0, #0
 80114ca:	428c      	cmp	r4, r1
 80114cc:	d304      	bcc.n	80114d8 <__mdiff+0xf0>
 80114ce:	0021      	movs	r1, r4
 80114d0:	3103      	adds	r1, #3
 80114d2:	1b49      	subs	r1, r1, r5
 80114d4:	0889      	lsrs	r1, r1, #2
 80114d6:	0088      	lsls	r0, r1, #2
 80114d8:	181b      	adds	r3, r3, r0
 80114da:	3b04      	subs	r3, #4
 80114dc:	6819      	ldr	r1, [r3, #0]
 80114de:	2900      	cmp	r1, #0
 80114e0:	d010      	beq.n	8011504 <__mdiff+0x11c>
 80114e2:	9b00      	ldr	r3, [sp, #0]
 80114e4:	6113      	str	r3, [r2, #16]
 80114e6:	e798      	b.n	801141a <__mdiff+0x32>
 80114e8:	4684      	mov	ip, r0
 80114ea:	ce02      	ldmia	r6!, {r1}
 80114ec:	b288      	uxth	r0, r1
 80114ee:	4460      	add	r0, ip
 80114f0:	1400      	asrs	r0, r0, #16
 80114f2:	0c0c      	lsrs	r4, r1, #16
 80114f4:	1904      	adds	r4, r0, r4
 80114f6:	4461      	add	r1, ip
 80114f8:	1420      	asrs	r0, r4, #16
 80114fa:	b289      	uxth	r1, r1
 80114fc:	0424      	lsls	r4, r4, #16
 80114fe:	4321      	orrs	r1, r4
 8011500:	c702      	stmia	r7!, {r1}
 8011502:	e7dc      	b.n	80114be <__mdiff+0xd6>
 8011504:	9900      	ldr	r1, [sp, #0]
 8011506:	3901      	subs	r1, #1
 8011508:	9100      	str	r1, [sp, #0]
 801150a:	e7e6      	b.n	80114da <__mdiff+0xf2>
 801150c:	080130e4 	.word	0x080130e4
 8011510:	080130f5 	.word	0x080130f5
 8011514:	00000237 	.word	0x00000237
 8011518:	00000245 	.word	0x00000245

0801151c <__d2b>:
 801151c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801151e:	2101      	movs	r1, #1
 8011520:	0016      	movs	r6, r2
 8011522:	001f      	movs	r7, r3
 8011524:	f7ff fcb6 	bl	8010e94 <_Balloc>
 8011528:	1e04      	subs	r4, r0, #0
 801152a:	d105      	bne.n	8011538 <__d2b+0x1c>
 801152c:	0022      	movs	r2, r4
 801152e:	4b25      	ldr	r3, [pc, #148]	@ (80115c4 <__d2b+0xa8>)
 8011530:	4825      	ldr	r0, [pc, #148]	@ (80115c8 <__d2b+0xac>)
 8011532:	4926      	ldr	r1, [pc, #152]	@ (80115cc <__d2b+0xb0>)
 8011534:	f000 fc76 	bl	8011e24 <__assert_func>
 8011538:	033b      	lsls	r3, r7, #12
 801153a:	007d      	lsls	r5, r7, #1
 801153c:	0b1b      	lsrs	r3, r3, #12
 801153e:	0d6d      	lsrs	r5, r5, #21
 8011540:	d002      	beq.n	8011548 <__d2b+0x2c>
 8011542:	2280      	movs	r2, #128	@ 0x80
 8011544:	0352      	lsls	r2, r2, #13
 8011546:	4313      	orrs	r3, r2
 8011548:	9301      	str	r3, [sp, #4]
 801154a:	2e00      	cmp	r6, #0
 801154c:	d025      	beq.n	801159a <__d2b+0x7e>
 801154e:	4668      	mov	r0, sp
 8011550:	9600      	str	r6, [sp, #0]
 8011552:	f7ff fd6c 	bl	801102e <__lo0bits>
 8011556:	9b01      	ldr	r3, [sp, #4]
 8011558:	9900      	ldr	r1, [sp, #0]
 801155a:	2800      	cmp	r0, #0
 801155c:	d01b      	beq.n	8011596 <__d2b+0x7a>
 801155e:	2220      	movs	r2, #32
 8011560:	001e      	movs	r6, r3
 8011562:	1a12      	subs	r2, r2, r0
 8011564:	4096      	lsls	r6, r2
 8011566:	0032      	movs	r2, r6
 8011568:	40c3      	lsrs	r3, r0
 801156a:	430a      	orrs	r2, r1
 801156c:	6162      	str	r2, [r4, #20]
 801156e:	9301      	str	r3, [sp, #4]
 8011570:	9e01      	ldr	r6, [sp, #4]
 8011572:	61a6      	str	r6, [r4, #24]
 8011574:	1e73      	subs	r3, r6, #1
 8011576:	419e      	sbcs	r6, r3
 8011578:	3601      	adds	r6, #1
 801157a:	6126      	str	r6, [r4, #16]
 801157c:	2d00      	cmp	r5, #0
 801157e:	d014      	beq.n	80115aa <__d2b+0x8e>
 8011580:	2635      	movs	r6, #53	@ 0x35
 8011582:	4b13      	ldr	r3, [pc, #76]	@ (80115d0 <__d2b+0xb4>)
 8011584:	18ed      	adds	r5, r5, r3
 8011586:	9b08      	ldr	r3, [sp, #32]
 8011588:	182d      	adds	r5, r5, r0
 801158a:	601d      	str	r5, [r3, #0]
 801158c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801158e:	1a36      	subs	r6, r6, r0
 8011590:	601e      	str	r6, [r3, #0]
 8011592:	0020      	movs	r0, r4
 8011594:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011596:	6161      	str	r1, [r4, #20]
 8011598:	e7ea      	b.n	8011570 <__d2b+0x54>
 801159a:	a801      	add	r0, sp, #4
 801159c:	f7ff fd47 	bl	801102e <__lo0bits>
 80115a0:	9b01      	ldr	r3, [sp, #4]
 80115a2:	2601      	movs	r6, #1
 80115a4:	6163      	str	r3, [r4, #20]
 80115a6:	3020      	adds	r0, #32
 80115a8:	e7e7      	b.n	801157a <__d2b+0x5e>
 80115aa:	4b0a      	ldr	r3, [pc, #40]	@ (80115d4 <__d2b+0xb8>)
 80115ac:	18c0      	adds	r0, r0, r3
 80115ae:	9b08      	ldr	r3, [sp, #32]
 80115b0:	6018      	str	r0, [r3, #0]
 80115b2:	4b09      	ldr	r3, [pc, #36]	@ (80115d8 <__d2b+0xbc>)
 80115b4:	18f3      	adds	r3, r6, r3
 80115b6:	009b      	lsls	r3, r3, #2
 80115b8:	18e3      	adds	r3, r4, r3
 80115ba:	6958      	ldr	r0, [r3, #20]
 80115bc:	f7ff fd16 	bl	8010fec <__hi0bits>
 80115c0:	0176      	lsls	r6, r6, #5
 80115c2:	e7e3      	b.n	801158c <__d2b+0x70>
 80115c4:	080130e4 	.word	0x080130e4
 80115c8:	080130f5 	.word	0x080130f5
 80115cc:	0000030f 	.word	0x0000030f
 80115d0:	fffffbcd 	.word	0xfffffbcd
 80115d4:	fffffbce 	.word	0xfffffbce
 80115d8:	3fffffff 	.word	0x3fffffff

080115dc <__ssputs_r>:
 80115dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115de:	688e      	ldr	r6, [r1, #8]
 80115e0:	b085      	sub	sp, #20
 80115e2:	001f      	movs	r7, r3
 80115e4:	000c      	movs	r4, r1
 80115e6:	680b      	ldr	r3, [r1, #0]
 80115e8:	9002      	str	r0, [sp, #8]
 80115ea:	9203      	str	r2, [sp, #12]
 80115ec:	42be      	cmp	r6, r7
 80115ee:	d830      	bhi.n	8011652 <__ssputs_r+0x76>
 80115f0:	210c      	movs	r1, #12
 80115f2:	5e62      	ldrsh	r2, [r4, r1]
 80115f4:	2190      	movs	r1, #144	@ 0x90
 80115f6:	00c9      	lsls	r1, r1, #3
 80115f8:	420a      	tst	r2, r1
 80115fa:	d028      	beq.n	801164e <__ssputs_r+0x72>
 80115fc:	2003      	movs	r0, #3
 80115fe:	6921      	ldr	r1, [r4, #16]
 8011600:	1a5b      	subs	r3, r3, r1
 8011602:	9301      	str	r3, [sp, #4]
 8011604:	6963      	ldr	r3, [r4, #20]
 8011606:	4343      	muls	r3, r0
 8011608:	9801      	ldr	r0, [sp, #4]
 801160a:	0fdd      	lsrs	r5, r3, #31
 801160c:	18ed      	adds	r5, r5, r3
 801160e:	1c7b      	adds	r3, r7, #1
 8011610:	181b      	adds	r3, r3, r0
 8011612:	106d      	asrs	r5, r5, #1
 8011614:	42ab      	cmp	r3, r5
 8011616:	d900      	bls.n	801161a <__ssputs_r+0x3e>
 8011618:	001d      	movs	r5, r3
 801161a:	0552      	lsls	r2, r2, #21
 801161c:	d528      	bpl.n	8011670 <__ssputs_r+0x94>
 801161e:	0029      	movs	r1, r5
 8011620:	9802      	ldr	r0, [sp, #8]
 8011622:	f7ff fba7 	bl	8010d74 <_malloc_r>
 8011626:	1e06      	subs	r6, r0, #0
 8011628:	d02c      	beq.n	8011684 <__ssputs_r+0xa8>
 801162a:	9a01      	ldr	r2, [sp, #4]
 801162c:	6921      	ldr	r1, [r4, #16]
 801162e:	f000 fbef 	bl	8011e10 <memcpy>
 8011632:	89a2      	ldrh	r2, [r4, #12]
 8011634:	4b18      	ldr	r3, [pc, #96]	@ (8011698 <__ssputs_r+0xbc>)
 8011636:	401a      	ands	r2, r3
 8011638:	2380      	movs	r3, #128	@ 0x80
 801163a:	4313      	orrs	r3, r2
 801163c:	81a3      	strh	r3, [r4, #12]
 801163e:	9b01      	ldr	r3, [sp, #4]
 8011640:	6126      	str	r6, [r4, #16]
 8011642:	18f6      	adds	r6, r6, r3
 8011644:	6026      	str	r6, [r4, #0]
 8011646:	003e      	movs	r6, r7
 8011648:	6165      	str	r5, [r4, #20]
 801164a:	1aed      	subs	r5, r5, r3
 801164c:	60a5      	str	r5, [r4, #8]
 801164e:	42be      	cmp	r6, r7
 8011650:	d900      	bls.n	8011654 <__ssputs_r+0x78>
 8011652:	003e      	movs	r6, r7
 8011654:	0032      	movs	r2, r6
 8011656:	9903      	ldr	r1, [sp, #12]
 8011658:	6820      	ldr	r0, [r4, #0]
 801165a:	f000 fbb3 	bl	8011dc4 <memmove>
 801165e:	2000      	movs	r0, #0
 8011660:	68a3      	ldr	r3, [r4, #8]
 8011662:	1b9b      	subs	r3, r3, r6
 8011664:	60a3      	str	r3, [r4, #8]
 8011666:	6823      	ldr	r3, [r4, #0]
 8011668:	199b      	adds	r3, r3, r6
 801166a:	6023      	str	r3, [r4, #0]
 801166c:	b005      	add	sp, #20
 801166e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011670:	002a      	movs	r2, r5
 8011672:	9802      	ldr	r0, [sp, #8]
 8011674:	f000 fc33 	bl	8011ede <_realloc_r>
 8011678:	1e06      	subs	r6, r0, #0
 801167a:	d1e0      	bne.n	801163e <__ssputs_r+0x62>
 801167c:	6921      	ldr	r1, [r4, #16]
 801167e:	9802      	ldr	r0, [sp, #8]
 8011680:	f7ff fb02 	bl	8010c88 <_free_r>
 8011684:	230c      	movs	r3, #12
 8011686:	2001      	movs	r0, #1
 8011688:	9a02      	ldr	r2, [sp, #8]
 801168a:	4240      	negs	r0, r0
 801168c:	6013      	str	r3, [r2, #0]
 801168e:	89a2      	ldrh	r2, [r4, #12]
 8011690:	3334      	adds	r3, #52	@ 0x34
 8011692:	4313      	orrs	r3, r2
 8011694:	81a3      	strh	r3, [r4, #12]
 8011696:	e7e9      	b.n	801166c <__ssputs_r+0x90>
 8011698:	fffffb7f 	.word	0xfffffb7f

0801169c <_svfiprintf_r>:
 801169c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801169e:	b0a1      	sub	sp, #132	@ 0x84
 80116a0:	9003      	str	r0, [sp, #12]
 80116a2:	001d      	movs	r5, r3
 80116a4:	898b      	ldrh	r3, [r1, #12]
 80116a6:	000f      	movs	r7, r1
 80116a8:	0016      	movs	r6, r2
 80116aa:	061b      	lsls	r3, r3, #24
 80116ac:	d511      	bpl.n	80116d2 <_svfiprintf_r+0x36>
 80116ae:	690b      	ldr	r3, [r1, #16]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d10e      	bne.n	80116d2 <_svfiprintf_r+0x36>
 80116b4:	2140      	movs	r1, #64	@ 0x40
 80116b6:	f7ff fb5d 	bl	8010d74 <_malloc_r>
 80116ba:	6038      	str	r0, [r7, #0]
 80116bc:	6138      	str	r0, [r7, #16]
 80116be:	2800      	cmp	r0, #0
 80116c0:	d105      	bne.n	80116ce <_svfiprintf_r+0x32>
 80116c2:	230c      	movs	r3, #12
 80116c4:	9a03      	ldr	r2, [sp, #12]
 80116c6:	6013      	str	r3, [r2, #0]
 80116c8:	2001      	movs	r0, #1
 80116ca:	4240      	negs	r0, r0
 80116cc:	e0cf      	b.n	801186e <_svfiprintf_r+0x1d2>
 80116ce:	2340      	movs	r3, #64	@ 0x40
 80116d0:	617b      	str	r3, [r7, #20]
 80116d2:	2300      	movs	r3, #0
 80116d4:	ac08      	add	r4, sp, #32
 80116d6:	6163      	str	r3, [r4, #20]
 80116d8:	3320      	adds	r3, #32
 80116da:	7663      	strb	r3, [r4, #25]
 80116dc:	3310      	adds	r3, #16
 80116de:	76a3      	strb	r3, [r4, #26]
 80116e0:	9507      	str	r5, [sp, #28]
 80116e2:	0035      	movs	r5, r6
 80116e4:	782b      	ldrb	r3, [r5, #0]
 80116e6:	2b00      	cmp	r3, #0
 80116e8:	d001      	beq.n	80116ee <_svfiprintf_r+0x52>
 80116ea:	2b25      	cmp	r3, #37	@ 0x25
 80116ec:	d148      	bne.n	8011780 <_svfiprintf_r+0xe4>
 80116ee:	1bab      	subs	r3, r5, r6
 80116f0:	9305      	str	r3, [sp, #20]
 80116f2:	42b5      	cmp	r5, r6
 80116f4:	d00b      	beq.n	801170e <_svfiprintf_r+0x72>
 80116f6:	0032      	movs	r2, r6
 80116f8:	0039      	movs	r1, r7
 80116fa:	9803      	ldr	r0, [sp, #12]
 80116fc:	f7ff ff6e 	bl	80115dc <__ssputs_r>
 8011700:	3001      	adds	r0, #1
 8011702:	d100      	bne.n	8011706 <_svfiprintf_r+0x6a>
 8011704:	e0ae      	b.n	8011864 <_svfiprintf_r+0x1c8>
 8011706:	6963      	ldr	r3, [r4, #20]
 8011708:	9a05      	ldr	r2, [sp, #20]
 801170a:	189b      	adds	r3, r3, r2
 801170c:	6163      	str	r3, [r4, #20]
 801170e:	782b      	ldrb	r3, [r5, #0]
 8011710:	2b00      	cmp	r3, #0
 8011712:	d100      	bne.n	8011716 <_svfiprintf_r+0x7a>
 8011714:	e0a6      	b.n	8011864 <_svfiprintf_r+0x1c8>
 8011716:	2201      	movs	r2, #1
 8011718:	2300      	movs	r3, #0
 801171a:	4252      	negs	r2, r2
 801171c:	6062      	str	r2, [r4, #4]
 801171e:	a904      	add	r1, sp, #16
 8011720:	3254      	adds	r2, #84	@ 0x54
 8011722:	1852      	adds	r2, r2, r1
 8011724:	1c6e      	adds	r6, r5, #1
 8011726:	6023      	str	r3, [r4, #0]
 8011728:	60e3      	str	r3, [r4, #12]
 801172a:	60a3      	str	r3, [r4, #8]
 801172c:	7013      	strb	r3, [r2, #0]
 801172e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8011730:	4b54      	ldr	r3, [pc, #336]	@ (8011884 <_svfiprintf_r+0x1e8>)
 8011732:	2205      	movs	r2, #5
 8011734:	0018      	movs	r0, r3
 8011736:	7831      	ldrb	r1, [r6, #0]
 8011738:	9305      	str	r3, [sp, #20]
 801173a:	f7fe fc18 	bl	800ff6e <memchr>
 801173e:	1c75      	adds	r5, r6, #1
 8011740:	2800      	cmp	r0, #0
 8011742:	d11f      	bne.n	8011784 <_svfiprintf_r+0xe8>
 8011744:	6822      	ldr	r2, [r4, #0]
 8011746:	06d3      	lsls	r3, r2, #27
 8011748:	d504      	bpl.n	8011754 <_svfiprintf_r+0xb8>
 801174a:	2353      	movs	r3, #83	@ 0x53
 801174c:	a904      	add	r1, sp, #16
 801174e:	185b      	adds	r3, r3, r1
 8011750:	2120      	movs	r1, #32
 8011752:	7019      	strb	r1, [r3, #0]
 8011754:	0713      	lsls	r3, r2, #28
 8011756:	d504      	bpl.n	8011762 <_svfiprintf_r+0xc6>
 8011758:	2353      	movs	r3, #83	@ 0x53
 801175a:	a904      	add	r1, sp, #16
 801175c:	185b      	adds	r3, r3, r1
 801175e:	212b      	movs	r1, #43	@ 0x2b
 8011760:	7019      	strb	r1, [r3, #0]
 8011762:	7833      	ldrb	r3, [r6, #0]
 8011764:	2b2a      	cmp	r3, #42	@ 0x2a
 8011766:	d016      	beq.n	8011796 <_svfiprintf_r+0xfa>
 8011768:	0035      	movs	r5, r6
 801176a:	2100      	movs	r1, #0
 801176c:	200a      	movs	r0, #10
 801176e:	68e3      	ldr	r3, [r4, #12]
 8011770:	782a      	ldrb	r2, [r5, #0]
 8011772:	1c6e      	adds	r6, r5, #1
 8011774:	3a30      	subs	r2, #48	@ 0x30
 8011776:	2a09      	cmp	r2, #9
 8011778:	d950      	bls.n	801181c <_svfiprintf_r+0x180>
 801177a:	2900      	cmp	r1, #0
 801177c:	d111      	bne.n	80117a2 <_svfiprintf_r+0x106>
 801177e:	e017      	b.n	80117b0 <_svfiprintf_r+0x114>
 8011780:	3501      	adds	r5, #1
 8011782:	e7af      	b.n	80116e4 <_svfiprintf_r+0x48>
 8011784:	9b05      	ldr	r3, [sp, #20]
 8011786:	6822      	ldr	r2, [r4, #0]
 8011788:	1ac0      	subs	r0, r0, r3
 801178a:	2301      	movs	r3, #1
 801178c:	4083      	lsls	r3, r0
 801178e:	4313      	orrs	r3, r2
 8011790:	002e      	movs	r6, r5
 8011792:	6023      	str	r3, [r4, #0]
 8011794:	e7cc      	b.n	8011730 <_svfiprintf_r+0x94>
 8011796:	9b07      	ldr	r3, [sp, #28]
 8011798:	1d19      	adds	r1, r3, #4
 801179a:	681b      	ldr	r3, [r3, #0]
 801179c:	9107      	str	r1, [sp, #28]
 801179e:	2b00      	cmp	r3, #0
 80117a0:	db01      	blt.n	80117a6 <_svfiprintf_r+0x10a>
 80117a2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80117a4:	e004      	b.n	80117b0 <_svfiprintf_r+0x114>
 80117a6:	425b      	negs	r3, r3
 80117a8:	60e3      	str	r3, [r4, #12]
 80117aa:	2302      	movs	r3, #2
 80117ac:	4313      	orrs	r3, r2
 80117ae:	6023      	str	r3, [r4, #0]
 80117b0:	782b      	ldrb	r3, [r5, #0]
 80117b2:	2b2e      	cmp	r3, #46	@ 0x2e
 80117b4:	d10c      	bne.n	80117d0 <_svfiprintf_r+0x134>
 80117b6:	786b      	ldrb	r3, [r5, #1]
 80117b8:	2b2a      	cmp	r3, #42	@ 0x2a
 80117ba:	d134      	bne.n	8011826 <_svfiprintf_r+0x18a>
 80117bc:	9b07      	ldr	r3, [sp, #28]
 80117be:	3502      	adds	r5, #2
 80117c0:	1d1a      	adds	r2, r3, #4
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	9207      	str	r2, [sp, #28]
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	da01      	bge.n	80117ce <_svfiprintf_r+0x132>
 80117ca:	2301      	movs	r3, #1
 80117cc:	425b      	negs	r3, r3
 80117ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80117d0:	4e2d      	ldr	r6, [pc, #180]	@ (8011888 <_svfiprintf_r+0x1ec>)
 80117d2:	2203      	movs	r2, #3
 80117d4:	0030      	movs	r0, r6
 80117d6:	7829      	ldrb	r1, [r5, #0]
 80117d8:	f7fe fbc9 	bl	800ff6e <memchr>
 80117dc:	2800      	cmp	r0, #0
 80117de:	d006      	beq.n	80117ee <_svfiprintf_r+0x152>
 80117e0:	2340      	movs	r3, #64	@ 0x40
 80117e2:	1b80      	subs	r0, r0, r6
 80117e4:	4083      	lsls	r3, r0
 80117e6:	6822      	ldr	r2, [r4, #0]
 80117e8:	3501      	adds	r5, #1
 80117ea:	4313      	orrs	r3, r2
 80117ec:	6023      	str	r3, [r4, #0]
 80117ee:	7829      	ldrb	r1, [r5, #0]
 80117f0:	2206      	movs	r2, #6
 80117f2:	4826      	ldr	r0, [pc, #152]	@ (801188c <_svfiprintf_r+0x1f0>)
 80117f4:	1c6e      	adds	r6, r5, #1
 80117f6:	7621      	strb	r1, [r4, #24]
 80117f8:	f7fe fbb9 	bl	800ff6e <memchr>
 80117fc:	2800      	cmp	r0, #0
 80117fe:	d038      	beq.n	8011872 <_svfiprintf_r+0x1d6>
 8011800:	4b23      	ldr	r3, [pc, #140]	@ (8011890 <_svfiprintf_r+0x1f4>)
 8011802:	2b00      	cmp	r3, #0
 8011804:	d122      	bne.n	801184c <_svfiprintf_r+0x1b0>
 8011806:	2207      	movs	r2, #7
 8011808:	9b07      	ldr	r3, [sp, #28]
 801180a:	3307      	adds	r3, #7
 801180c:	4393      	bics	r3, r2
 801180e:	3308      	adds	r3, #8
 8011810:	9307      	str	r3, [sp, #28]
 8011812:	6963      	ldr	r3, [r4, #20]
 8011814:	9a04      	ldr	r2, [sp, #16]
 8011816:	189b      	adds	r3, r3, r2
 8011818:	6163      	str	r3, [r4, #20]
 801181a:	e762      	b.n	80116e2 <_svfiprintf_r+0x46>
 801181c:	4343      	muls	r3, r0
 801181e:	0035      	movs	r5, r6
 8011820:	2101      	movs	r1, #1
 8011822:	189b      	adds	r3, r3, r2
 8011824:	e7a4      	b.n	8011770 <_svfiprintf_r+0xd4>
 8011826:	2300      	movs	r3, #0
 8011828:	200a      	movs	r0, #10
 801182a:	0019      	movs	r1, r3
 801182c:	3501      	adds	r5, #1
 801182e:	6063      	str	r3, [r4, #4]
 8011830:	782a      	ldrb	r2, [r5, #0]
 8011832:	1c6e      	adds	r6, r5, #1
 8011834:	3a30      	subs	r2, #48	@ 0x30
 8011836:	2a09      	cmp	r2, #9
 8011838:	d903      	bls.n	8011842 <_svfiprintf_r+0x1a6>
 801183a:	2b00      	cmp	r3, #0
 801183c:	d0c8      	beq.n	80117d0 <_svfiprintf_r+0x134>
 801183e:	9109      	str	r1, [sp, #36]	@ 0x24
 8011840:	e7c6      	b.n	80117d0 <_svfiprintf_r+0x134>
 8011842:	4341      	muls	r1, r0
 8011844:	0035      	movs	r5, r6
 8011846:	2301      	movs	r3, #1
 8011848:	1889      	adds	r1, r1, r2
 801184a:	e7f1      	b.n	8011830 <_svfiprintf_r+0x194>
 801184c:	aa07      	add	r2, sp, #28
 801184e:	9200      	str	r2, [sp, #0]
 8011850:	0021      	movs	r1, r4
 8011852:	003a      	movs	r2, r7
 8011854:	4b0f      	ldr	r3, [pc, #60]	@ (8011894 <_svfiprintf_r+0x1f8>)
 8011856:	9803      	ldr	r0, [sp, #12]
 8011858:	f7fd fda4 	bl	800f3a4 <_printf_float>
 801185c:	9004      	str	r0, [sp, #16]
 801185e:	9b04      	ldr	r3, [sp, #16]
 8011860:	3301      	adds	r3, #1
 8011862:	d1d6      	bne.n	8011812 <_svfiprintf_r+0x176>
 8011864:	89bb      	ldrh	r3, [r7, #12]
 8011866:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011868:	065b      	lsls	r3, r3, #25
 801186a:	d500      	bpl.n	801186e <_svfiprintf_r+0x1d2>
 801186c:	e72c      	b.n	80116c8 <_svfiprintf_r+0x2c>
 801186e:	b021      	add	sp, #132	@ 0x84
 8011870:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011872:	aa07      	add	r2, sp, #28
 8011874:	9200      	str	r2, [sp, #0]
 8011876:	0021      	movs	r1, r4
 8011878:	003a      	movs	r2, r7
 801187a:	4b06      	ldr	r3, [pc, #24]	@ (8011894 <_svfiprintf_r+0x1f8>)
 801187c:	9803      	ldr	r0, [sp, #12]
 801187e:	f7fe f83f 	bl	800f900 <_printf_i>
 8011882:	e7eb      	b.n	801185c <_svfiprintf_r+0x1c0>
 8011884:	08013250 	.word	0x08013250
 8011888:	08013256 	.word	0x08013256
 801188c:	0801325a 	.word	0x0801325a
 8011890:	0800f3a5 	.word	0x0800f3a5
 8011894:	080115dd 	.word	0x080115dd

08011898 <__sfputc_r>:
 8011898:	6893      	ldr	r3, [r2, #8]
 801189a:	b510      	push	{r4, lr}
 801189c:	3b01      	subs	r3, #1
 801189e:	6093      	str	r3, [r2, #8]
 80118a0:	2b00      	cmp	r3, #0
 80118a2:	da04      	bge.n	80118ae <__sfputc_r+0x16>
 80118a4:	6994      	ldr	r4, [r2, #24]
 80118a6:	42a3      	cmp	r3, r4
 80118a8:	db07      	blt.n	80118ba <__sfputc_r+0x22>
 80118aa:	290a      	cmp	r1, #10
 80118ac:	d005      	beq.n	80118ba <__sfputc_r+0x22>
 80118ae:	6813      	ldr	r3, [r2, #0]
 80118b0:	1c58      	adds	r0, r3, #1
 80118b2:	6010      	str	r0, [r2, #0]
 80118b4:	7019      	strb	r1, [r3, #0]
 80118b6:	0008      	movs	r0, r1
 80118b8:	bd10      	pop	{r4, pc}
 80118ba:	f000 f9e2 	bl	8011c82 <__swbuf_r>
 80118be:	0001      	movs	r1, r0
 80118c0:	e7f9      	b.n	80118b6 <__sfputc_r+0x1e>

080118c2 <__sfputs_r>:
 80118c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80118c4:	0006      	movs	r6, r0
 80118c6:	000f      	movs	r7, r1
 80118c8:	0014      	movs	r4, r2
 80118ca:	18d5      	adds	r5, r2, r3
 80118cc:	42ac      	cmp	r4, r5
 80118ce:	d101      	bne.n	80118d4 <__sfputs_r+0x12>
 80118d0:	2000      	movs	r0, #0
 80118d2:	e007      	b.n	80118e4 <__sfputs_r+0x22>
 80118d4:	7821      	ldrb	r1, [r4, #0]
 80118d6:	003a      	movs	r2, r7
 80118d8:	0030      	movs	r0, r6
 80118da:	f7ff ffdd 	bl	8011898 <__sfputc_r>
 80118de:	3401      	adds	r4, #1
 80118e0:	1c43      	adds	r3, r0, #1
 80118e2:	d1f3      	bne.n	80118cc <__sfputs_r+0xa>
 80118e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080118e8 <_vfiprintf_r>:
 80118e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80118ea:	b0a1      	sub	sp, #132	@ 0x84
 80118ec:	000f      	movs	r7, r1
 80118ee:	0015      	movs	r5, r2
 80118f0:	001e      	movs	r6, r3
 80118f2:	9003      	str	r0, [sp, #12]
 80118f4:	2800      	cmp	r0, #0
 80118f6:	d004      	beq.n	8011902 <_vfiprintf_r+0x1a>
 80118f8:	6a03      	ldr	r3, [r0, #32]
 80118fa:	2b00      	cmp	r3, #0
 80118fc:	d101      	bne.n	8011902 <_vfiprintf_r+0x1a>
 80118fe:	f7fe f99d 	bl	800fc3c <__sinit>
 8011902:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011904:	07db      	lsls	r3, r3, #31
 8011906:	d405      	bmi.n	8011914 <_vfiprintf_r+0x2c>
 8011908:	89bb      	ldrh	r3, [r7, #12]
 801190a:	059b      	lsls	r3, r3, #22
 801190c:	d402      	bmi.n	8011914 <_vfiprintf_r+0x2c>
 801190e:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011910:	f7fe fb2b 	bl	800ff6a <__retarget_lock_acquire_recursive>
 8011914:	89bb      	ldrh	r3, [r7, #12]
 8011916:	071b      	lsls	r3, r3, #28
 8011918:	d502      	bpl.n	8011920 <_vfiprintf_r+0x38>
 801191a:	693b      	ldr	r3, [r7, #16]
 801191c:	2b00      	cmp	r3, #0
 801191e:	d113      	bne.n	8011948 <_vfiprintf_r+0x60>
 8011920:	0039      	movs	r1, r7
 8011922:	9803      	ldr	r0, [sp, #12]
 8011924:	f000 f9f0 	bl	8011d08 <__swsetup_r>
 8011928:	2800      	cmp	r0, #0
 801192a:	d00d      	beq.n	8011948 <_vfiprintf_r+0x60>
 801192c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801192e:	07db      	lsls	r3, r3, #31
 8011930:	d503      	bpl.n	801193a <_vfiprintf_r+0x52>
 8011932:	2001      	movs	r0, #1
 8011934:	4240      	negs	r0, r0
 8011936:	b021      	add	sp, #132	@ 0x84
 8011938:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801193a:	89bb      	ldrh	r3, [r7, #12]
 801193c:	059b      	lsls	r3, r3, #22
 801193e:	d4f8      	bmi.n	8011932 <_vfiprintf_r+0x4a>
 8011940:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011942:	f7fe fb13 	bl	800ff6c <__retarget_lock_release_recursive>
 8011946:	e7f4      	b.n	8011932 <_vfiprintf_r+0x4a>
 8011948:	2300      	movs	r3, #0
 801194a:	ac08      	add	r4, sp, #32
 801194c:	6163      	str	r3, [r4, #20]
 801194e:	3320      	adds	r3, #32
 8011950:	7663      	strb	r3, [r4, #25]
 8011952:	3310      	adds	r3, #16
 8011954:	76a3      	strb	r3, [r4, #26]
 8011956:	9607      	str	r6, [sp, #28]
 8011958:	002e      	movs	r6, r5
 801195a:	7833      	ldrb	r3, [r6, #0]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d001      	beq.n	8011964 <_vfiprintf_r+0x7c>
 8011960:	2b25      	cmp	r3, #37	@ 0x25
 8011962:	d148      	bne.n	80119f6 <_vfiprintf_r+0x10e>
 8011964:	1b73      	subs	r3, r6, r5
 8011966:	9305      	str	r3, [sp, #20]
 8011968:	42ae      	cmp	r6, r5
 801196a:	d00b      	beq.n	8011984 <_vfiprintf_r+0x9c>
 801196c:	002a      	movs	r2, r5
 801196e:	0039      	movs	r1, r7
 8011970:	9803      	ldr	r0, [sp, #12]
 8011972:	f7ff ffa6 	bl	80118c2 <__sfputs_r>
 8011976:	3001      	adds	r0, #1
 8011978:	d100      	bne.n	801197c <_vfiprintf_r+0x94>
 801197a:	e0ae      	b.n	8011ada <_vfiprintf_r+0x1f2>
 801197c:	6963      	ldr	r3, [r4, #20]
 801197e:	9a05      	ldr	r2, [sp, #20]
 8011980:	189b      	adds	r3, r3, r2
 8011982:	6163      	str	r3, [r4, #20]
 8011984:	7833      	ldrb	r3, [r6, #0]
 8011986:	2b00      	cmp	r3, #0
 8011988:	d100      	bne.n	801198c <_vfiprintf_r+0xa4>
 801198a:	e0a6      	b.n	8011ada <_vfiprintf_r+0x1f2>
 801198c:	2201      	movs	r2, #1
 801198e:	2300      	movs	r3, #0
 8011990:	4252      	negs	r2, r2
 8011992:	6062      	str	r2, [r4, #4]
 8011994:	a904      	add	r1, sp, #16
 8011996:	3254      	adds	r2, #84	@ 0x54
 8011998:	1852      	adds	r2, r2, r1
 801199a:	1c75      	adds	r5, r6, #1
 801199c:	6023      	str	r3, [r4, #0]
 801199e:	60e3      	str	r3, [r4, #12]
 80119a0:	60a3      	str	r3, [r4, #8]
 80119a2:	7013      	strb	r3, [r2, #0]
 80119a4:	65a3      	str	r3, [r4, #88]	@ 0x58
 80119a6:	4b59      	ldr	r3, [pc, #356]	@ (8011b0c <_vfiprintf_r+0x224>)
 80119a8:	2205      	movs	r2, #5
 80119aa:	0018      	movs	r0, r3
 80119ac:	7829      	ldrb	r1, [r5, #0]
 80119ae:	9305      	str	r3, [sp, #20]
 80119b0:	f7fe fadd 	bl	800ff6e <memchr>
 80119b4:	1c6e      	adds	r6, r5, #1
 80119b6:	2800      	cmp	r0, #0
 80119b8:	d11f      	bne.n	80119fa <_vfiprintf_r+0x112>
 80119ba:	6822      	ldr	r2, [r4, #0]
 80119bc:	06d3      	lsls	r3, r2, #27
 80119be:	d504      	bpl.n	80119ca <_vfiprintf_r+0xe2>
 80119c0:	2353      	movs	r3, #83	@ 0x53
 80119c2:	a904      	add	r1, sp, #16
 80119c4:	185b      	adds	r3, r3, r1
 80119c6:	2120      	movs	r1, #32
 80119c8:	7019      	strb	r1, [r3, #0]
 80119ca:	0713      	lsls	r3, r2, #28
 80119cc:	d504      	bpl.n	80119d8 <_vfiprintf_r+0xf0>
 80119ce:	2353      	movs	r3, #83	@ 0x53
 80119d0:	a904      	add	r1, sp, #16
 80119d2:	185b      	adds	r3, r3, r1
 80119d4:	212b      	movs	r1, #43	@ 0x2b
 80119d6:	7019      	strb	r1, [r3, #0]
 80119d8:	782b      	ldrb	r3, [r5, #0]
 80119da:	2b2a      	cmp	r3, #42	@ 0x2a
 80119dc:	d016      	beq.n	8011a0c <_vfiprintf_r+0x124>
 80119de:	002e      	movs	r6, r5
 80119e0:	2100      	movs	r1, #0
 80119e2:	200a      	movs	r0, #10
 80119e4:	68e3      	ldr	r3, [r4, #12]
 80119e6:	7832      	ldrb	r2, [r6, #0]
 80119e8:	1c75      	adds	r5, r6, #1
 80119ea:	3a30      	subs	r2, #48	@ 0x30
 80119ec:	2a09      	cmp	r2, #9
 80119ee:	d950      	bls.n	8011a92 <_vfiprintf_r+0x1aa>
 80119f0:	2900      	cmp	r1, #0
 80119f2:	d111      	bne.n	8011a18 <_vfiprintf_r+0x130>
 80119f4:	e017      	b.n	8011a26 <_vfiprintf_r+0x13e>
 80119f6:	3601      	adds	r6, #1
 80119f8:	e7af      	b.n	801195a <_vfiprintf_r+0x72>
 80119fa:	9b05      	ldr	r3, [sp, #20]
 80119fc:	6822      	ldr	r2, [r4, #0]
 80119fe:	1ac0      	subs	r0, r0, r3
 8011a00:	2301      	movs	r3, #1
 8011a02:	4083      	lsls	r3, r0
 8011a04:	4313      	orrs	r3, r2
 8011a06:	0035      	movs	r5, r6
 8011a08:	6023      	str	r3, [r4, #0]
 8011a0a:	e7cc      	b.n	80119a6 <_vfiprintf_r+0xbe>
 8011a0c:	9b07      	ldr	r3, [sp, #28]
 8011a0e:	1d19      	adds	r1, r3, #4
 8011a10:	681b      	ldr	r3, [r3, #0]
 8011a12:	9107      	str	r1, [sp, #28]
 8011a14:	2b00      	cmp	r3, #0
 8011a16:	db01      	blt.n	8011a1c <_vfiprintf_r+0x134>
 8011a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8011a1a:	e004      	b.n	8011a26 <_vfiprintf_r+0x13e>
 8011a1c:	425b      	negs	r3, r3
 8011a1e:	60e3      	str	r3, [r4, #12]
 8011a20:	2302      	movs	r3, #2
 8011a22:	4313      	orrs	r3, r2
 8011a24:	6023      	str	r3, [r4, #0]
 8011a26:	7833      	ldrb	r3, [r6, #0]
 8011a28:	2b2e      	cmp	r3, #46	@ 0x2e
 8011a2a:	d10c      	bne.n	8011a46 <_vfiprintf_r+0x15e>
 8011a2c:	7873      	ldrb	r3, [r6, #1]
 8011a2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011a30:	d134      	bne.n	8011a9c <_vfiprintf_r+0x1b4>
 8011a32:	9b07      	ldr	r3, [sp, #28]
 8011a34:	3602      	adds	r6, #2
 8011a36:	1d1a      	adds	r2, r3, #4
 8011a38:	681b      	ldr	r3, [r3, #0]
 8011a3a:	9207      	str	r2, [sp, #28]
 8011a3c:	2b00      	cmp	r3, #0
 8011a3e:	da01      	bge.n	8011a44 <_vfiprintf_r+0x15c>
 8011a40:	2301      	movs	r3, #1
 8011a42:	425b      	negs	r3, r3
 8011a44:	9309      	str	r3, [sp, #36]	@ 0x24
 8011a46:	4d32      	ldr	r5, [pc, #200]	@ (8011b10 <_vfiprintf_r+0x228>)
 8011a48:	2203      	movs	r2, #3
 8011a4a:	0028      	movs	r0, r5
 8011a4c:	7831      	ldrb	r1, [r6, #0]
 8011a4e:	f7fe fa8e 	bl	800ff6e <memchr>
 8011a52:	2800      	cmp	r0, #0
 8011a54:	d006      	beq.n	8011a64 <_vfiprintf_r+0x17c>
 8011a56:	2340      	movs	r3, #64	@ 0x40
 8011a58:	1b40      	subs	r0, r0, r5
 8011a5a:	4083      	lsls	r3, r0
 8011a5c:	6822      	ldr	r2, [r4, #0]
 8011a5e:	3601      	adds	r6, #1
 8011a60:	4313      	orrs	r3, r2
 8011a62:	6023      	str	r3, [r4, #0]
 8011a64:	7831      	ldrb	r1, [r6, #0]
 8011a66:	2206      	movs	r2, #6
 8011a68:	482a      	ldr	r0, [pc, #168]	@ (8011b14 <_vfiprintf_r+0x22c>)
 8011a6a:	1c75      	adds	r5, r6, #1
 8011a6c:	7621      	strb	r1, [r4, #24]
 8011a6e:	f7fe fa7e 	bl	800ff6e <memchr>
 8011a72:	2800      	cmp	r0, #0
 8011a74:	d040      	beq.n	8011af8 <_vfiprintf_r+0x210>
 8011a76:	4b28      	ldr	r3, [pc, #160]	@ (8011b18 <_vfiprintf_r+0x230>)
 8011a78:	2b00      	cmp	r3, #0
 8011a7a:	d122      	bne.n	8011ac2 <_vfiprintf_r+0x1da>
 8011a7c:	2207      	movs	r2, #7
 8011a7e:	9b07      	ldr	r3, [sp, #28]
 8011a80:	3307      	adds	r3, #7
 8011a82:	4393      	bics	r3, r2
 8011a84:	3308      	adds	r3, #8
 8011a86:	9307      	str	r3, [sp, #28]
 8011a88:	6963      	ldr	r3, [r4, #20]
 8011a8a:	9a04      	ldr	r2, [sp, #16]
 8011a8c:	189b      	adds	r3, r3, r2
 8011a8e:	6163      	str	r3, [r4, #20]
 8011a90:	e762      	b.n	8011958 <_vfiprintf_r+0x70>
 8011a92:	4343      	muls	r3, r0
 8011a94:	002e      	movs	r6, r5
 8011a96:	2101      	movs	r1, #1
 8011a98:	189b      	adds	r3, r3, r2
 8011a9a:	e7a4      	b.n	80119e6 <_vfiprintf_r+0xfe>
 8011a9c:	2300      	movs	r3, #0
 8011a9e:	200a      	movs	r0, #10
 8011aa0:	0019      	movs	r1, r3
 8011aa2:	3601      	adds	r6, #1
 8011aa4:	6063      	str	r3, [r4, #4]
 8011aa6:	7832      	ldrb	r2, [r6, #0]
 8011aa8:	1c75      	adds	r5, r6, #1
 8011aaa:	3a30      	subs	r2, #48	@ 0x30
 8011aac:	2a09      	cmp	r2, #9
 8011aae:	d903      	bls.n	8011ab8 <_vfiprintf_r+0x1d0>
 8011ab0:	2b00      	cmp	r3, #0
 8011ab2:	d0c8      	beq.n	8011a46 <_vfiprintf_r+0x15e>
 8011ab4:	9109      	str	r1, [sp, #36]	@ 0x24
 8011ab6:	e7c6      	b.n	8011a46 <_vfiprintf_r+0x15e>
 8011ab8:	4341      	muls	r1, r0
 8011aba:	002e      	movs	r6, r5
 8011abc:	2301      	movs	r3, #1
 8011abe:	1889      	adds	r1, r1, r2
 8011ac0:	e7f1      	b.n	8011aa6 <_vfiprintf_r+0x1be>
 8011ac2:	aa07      	add	r2, sp, #28
 8011ac4:	9200      	str	r2, [sp, #0]
 8011ac6:	0021      	movs	r1, r4
 8011ac8:	003a      	movs	r2, r7
 8011aca:	4b14      	ldr	r3, [pc, #80]	@ (8011b1c <_vfiprintf_r+0x234>)
 8011acc:	9803      	ldr	r0, [sp, #12]
 8011ace:	f7fd fc69 	bl	800f3a4 <_printf_float>
 8011ad2:	9004      	str	r0, [sp, #16]
 8011ad4:	9b04      	ldr	r3, [sp, #16]
 8011ad6:	3301      	adds	r3, #1
 8011ad8:	d1d6      	bne.n	8011a88 <_vfiprintf_r+0x1a0>
 8011ada:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8011adc:	07db      	lsls	r3, r3, #31
 8011ade:	d405      	bmi.n	8011aec <_vfiprintf_r+0x204>
 8011ae0:	89bb      	ldrh	r3, [r7, #12]
 8011ae2:	059b      	lsls	r3, r3, #22
 8011ae4:	d402      	bmi.n	8011aec <_vfiprintf_r+0x204>
 8011ae6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8011ae8:	f7fe fa40 	bl	800ff6c <__retarget_lock_release_recursive>
 8011aec:	89bb      	ldrh	r3, [r7, #12]
 8011aee:	065b      	lsls	r3, r3, #25
 8011af0:	d500      	bpl.n	8011af4 <_vfiprintf_r+0x20c>
 8011af2:	e71e      	b.n	8011932 <_vfiprintf_r+0x4a>
 8011af4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8011af6:	e71e      	b.n	8011936 <_vfiprintf_r+0x4e>
 8011af8:	aa07      	add	r2, sp, #28
 8011afa:	9200      	str	r2, [sp, #0]
 8011afc:	0021      	movs	r1, r4
 8011afe:	003a      	movs	r2, r7
 8011b00:	4b06      	ldr	r3, [pc, #24]	@ (8011b1c <_vfiprintf_r+0x234>)
 8011b02:	9803      	ldr	r0, [sp, #12]
 8011b04:	f7fd fefc 	bl	800f900 <_printf_i>
 8011b08:	e7e3      	b.n	8011ad2 <_vfiprintf_r+0x1ea>
 8011b0a:	46c0      	nop			@ (mov r8, r8)
 8011b0c:	08013250 	.word	0x08013250
 8011b10:	08013256 	.word	0x08013256
 8011b14:	0801325a 	.word	0x0801325a
 8011b18:	0800f3a5 	.word	0x0800f3a5
 8011b1c:	080118c3 	.word	0x080118c3

08011b20 <__sflush_r>:
 8011b20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011b22:	220c      	movs	r2, #12
 8011b24:	5e8b      	ldrsh	r3, [r1, r2]
 8011b26:	0005      	movs	r5, r0
 8011b28:	000c      	movs	r4, r1
 8011b2a:	071a      	lsls	r2, r3, #28
 8011b2c:	d456      	bmi.n	8011bdc <__sflush_r+0xbc>
 8011b2e:	684a      	ldr	r2, [r1, #4]
 8011b30:	2a00      	cmp	r2, #0
 8011b32:	dc02      	bgt.n	8011b3a <__sflush_r+0x1a>
 8011b34:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8011b36:	2a00      	cmp	r2, #0
 8011b38:	dd4e      	ble.n	8011bd8 <__sflush_r+0xb8>
 8011b3a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011b3c:	2f00      	cmp	r7, #0
 8011b3e:	d04b      	beq.n	8011bd8 <__sflush_r+0xb8>
 8011b40:	2200      	movs	r2, #0
 8011b42:	2080      	movs	r0, #128	@ 0x80
 8011b44:	682e      	ldr	r6, [r5, #0]
 8011b46:	602a      	str	r2, [r5, #0]
 8011b48:	001a      	movs	r2, r3
 8011b4a:	0140      	lsls	r0, r0, #5
 8011b4c:	6a21      	ldr	r1, [r4, #32]
 8011b4e:	4002      	ands	r2, r0
 8011b50:	4203      	tst	r3, r0
 8011b52:	d033      	beq.n	8011bbc <__sflush_r+0x9c>
 8011b54:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011b56:	89a3      	ldrh	r3, [r4, #12]
 8011b58:	075b      	lsls	r3, r3, #29
 8011b5a:	d506      	bpl.n	8011b6a <__sflush_r+0x4a>
 8011b5c:	6863      	ldr	r3, [r4, #4]
 8011b5e:	1ad2      	subs	r2, r2, r3
 8011b60:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011b62:	2b00      	cmp	r3, #0
 8011b64:	d001      	beq.n	8011b6a <__sflush_r+0x4a>
 8011b66:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011b68:	1ad2      	subs	r2, r2, r3
 8011b6a:	2300      	movs	r3, #0
 8011b6c:	0028      	movs	r0, r5
 8011b6e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011b70:	6a21      	ldr	r1, [r4, #32]
 8011b72:	47b8      	blx	r7
 8011b74:	89a2      	ldrh	r2, [r4, #12]
 8011b76:	1c43      	adds	r3, r0, #1
 8011b78:	d106      	bne.n	8011b88 <__sflush_r+0x68>
 8011b7a:	6829      	ldr	r1, [r5, #0]
 8011b7c:	291d      	cmp	r1, #29
 8011b7e:	d846      	bhi.n	8011c0e <__sflush_r+0xee>
 8011b80:	4b29      	ldr	r3, [pc, #164]	@ (8011c28 <__sflush_r+0x108>)
 8011b82:	410b      	asrs	r3, r1
 8011b84:	07db      	lsls	r3, r3, #31
 8011b86:	d442      	bmi.n	8011c0e <__sflush_r+0xee>
 8011b88:	2300      	movs	r3, #0
 8011b8a:	6063      	str	r3, [r4, #4]
 8011b8c:	6923      	ldr	r3, [r4, #16]
 8011b8e:	6023      	str	r3, [r4, #0]
 8011b90:	04d2      	lsls	r2, r2, #19
 8011b92:	d505      	bpl.n	8011ba0 <__sflush_r+0x80>
 8011b94:	1c43      	adds	r3, r0, #1
 8011b96:	d102      	bne.n	8011b9e <__sflush_r+0x7e>
 8011b98:	682b      	ldr	r3, [r5, #0]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d100      	bne.n	8011ba0 <__sflush_r+0x80>
 8011b9e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011ba0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011ba2:	602e      	str	r6, [r5, #0]
 8011ba4:	2900      	cmp	r1, #0
 8011ba6:	d017      	beq.n	8011bd8 <__sflush_r+0xb8>
 8011ba8:	0023      	movs	r3, r4
 8011baa:	3344      	adds	r3, #68	@ 0x44
 8011bac:	4299      	cmp	r1, r3
 8011bae:	d002      	beq.n	8011bb6 <__sflush_r+0x96>
 8011bb0:	0028      	movs	r0, r5
 8011bb2:	f7ff f869 	bl	8010c88 <_free_r>
 8011bb6:	2300      	movs	r3, #0
 8011bb8:	6363      	str	r3, [r4, #52]	@ 0x34
 8011bba:	e00d      	b.n	8011bd8 <__sflush_r+0xb8>
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	0028      	movs	r0, r5
 8011bc0:	47b8      	blx	r7
 8011bc2:	0002      	movs	r2, r0
 8011bc4:	1c43      	adds	r3, r0, #1
 8011bc6:	d1c6      	bne.n	8011b56 <__sflush_r+0x36>
 8011bc8:	682b      	ldr	r3, [r5, #0]
 8011bca:	2b00      	cmp	r3, #0
 8011bcc:	d0c3      	beq.n	8011b56 <__sflush_r+0x36>
 8011bce:	2b1d      	cmp	r3, #29
 8011bd0:	d001      	beq.n	8011bd6 <__sflush_r+0xb6>
 8011bd2:	2b16      	cmp	r3, #22
 8011bd4:	d11a      	bne.n	8011c0c <__sflush_r+0xec>
 8011bd6:	602e      	str	r6, [r5, #0]
 8011bd8:	2000      	movs	r0, #0
 8011bda:	e01e      	b.n	8011c1a <__sflush_r+0xfa>
 8011bdc:	690e      	ldr	r6, [r1, #16]
 8011bde:	2e00      	cmp	r6, #0
 8011be0:	d0fa      	beq.n	8011bd8 <__sflush_r+0xb8>
 8011be2:	680f      	ldr	r7, [r1, #0]
 8011be4:	600e      	str	r6, [r1, #0]
 8011be6:	1bba      	subs	r2, r7, r6
 8011be8:	9201      	str	r2, [sp, #4]
 8011bea:	2200      	movs	r2, #0
 8011bec:	079b      	lsls	r3, r3, #30
 8011bee:	d100      	bne.n	8011bf2 <__sflush_r+0xd2>
 8011bf0:	694a      	ldr	r2, [r1, #20]
 8011bf2:	60a2      	str	r2, [r4, #8]
 8011bf4:	9b01      	ldr	r3, [sp, #4]
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	ddee      	ble.n	8011bd8 <__sflush_r+0xb8>
 8011bfa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8011bfc:	0032      	movs	r2, r6
 8011bfe:	001f      	movs	r7, r3
 8011c00:	0028      	movs	r0, r5
 8011c02:	9b01      	ldr	r3, [sp, #4]
 8011c04:	6a21      	ldr	r1, [r4, #32]
 8011c06:	47b8      	blx	r7
 8011c08:	2800      	cmp	r0, #0
 8011c0a:	dc07      	bgt.n	8011c1c <__sflush_r+0xfc>
 8011c0c:	89a2      	ldrh	r2, [r4, #12]
 8011c0e:	2340      	movs	r3, #64	@ 0x40
 8011c10:	2001      	movs	r0, #1
 8011c12:	4313      	orrs	r3, r2
 8011c14:	b21b      	sxth	r3, r3
 8011c16:	81a3      	strh	r3, [r4, #12]
 8011c18:	4240      	negs	r0, r0
 8011c1a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011c1c:	9b01      	ldr	r3, [sp, #4]
 8011c1e:	1836      	adds	r6, r6, r0
 8011c20:	1a1b      	subs	r3, r3, r0
 8011c22:	9301      	str	r3, [sp, #4]
 8011c24:	e7e6      	b.n	8011bf4 <__sflush_r+0xd4>
 8011c26:	46c0      	nop			@ (mov r8, r8)
 8011c28:	dfbffffe 	.word	0xdfbffffe

08011c2c <_fflush_r>:
 8011c2c:	690b      	ldr	r3, [r1, #16]
 8011c2e:	b570      	push	{r4, r5, r6, lr}
 8011c30:	0005      	movs	r5, r0
 8011c32:	000c      	movs	r4, r1
 8011c34:	2b00      	cmp	r3, #0
 8011c36:	d102      	bne.n	8011c3e <_fflush_r+0x12>
 8011c38:	2500      	movs	r5, #0
 8011c3a:	0028      	movs	r0, r5
 8011c3c:	bd70      	pop	{r4, r5, r6, pc}
 8011c3e:	2800      	cmp	r0, #0
 8011c40:	d004      	beq.n	8011c4c <_fflush_r+0x20>
 8011c42:	6a03      	ldr	r3, [r0, #32]
 8011c44:	2b00      	cmp	r3, #0
 8011c46:	d101      	bne.n	8011c4c <_fflush_r+0x20>
 8011c48:	f7fd fff8 	bl	800fc3c <__sinit>
 8011c4c:	220c      	movs	r2, #12
 8011c4e:	5ea3      	ldrsh	r3, [r4, r2]
 8011c50:	2b00      	cmp	r3, #0
 8011c52:	d0f1      	beq.n	8011c38 <_fflush_r+0xc>
 8011c54:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011c56:	07d2      	lsls	r2, r2, #31
 8011c58:	d404      	bmi.n	8011c64 <_fflush_r+0x38>
 8011c5a:	059b      	lsls	r3, r3, #22
 8011c5c:	d402      	bmi.n	8011c64 <_fflush_r+0x38>
 8011c5e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c60:	f7fe f983 	bl	800ff6a <__retarget_lock_acquire_recursive>
 8011c64:	0028      	movs	r0, r5
 8011c66:	0021      	movs	r1, r4
 8011c68:	f7ff ff5a 	bl	8011b20 <__sflush_r>
 8011c6c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8011c6e:	0005      	movs	r5, r0
 8011c70:	07db      	lsls	r3, r3, #31
 8011c72:	d4e2      	bmi.n	8011c3a <_fflush_r+0xe>
 8011c74:	89a3      	ldrh	r3, [r4, #12]
 8011c76:	059b      	lsls	r3, r3, #22
 8011c78:	d4df      	bmi.n	8011c3a <_fflush_r+0xe>
 8011c7a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011c7c:	f7fe f976 	bl	800ff6c <__retarget_lock_release_recursive>
 8011c80:	e7db      	b.n	8011c3a <_fflush_r+0xe>

08011c82 <__swbuf_r>:
 8011c82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011c84:	0006      	movs	r6, r0
 8011c86:	000d      	movs	r5, r1
 8011c88:	0014      	movs	r4, r2
 8011c8a:	2800      	cmp	r0, #0
 8011c8c:	d004      	beq.n	8011c98 <__swbuf_r+0x16>
 8011c8e:	6a03      	ldr	r3, [r0, #32]
 8011c90:	2b00      	cmp	r3, #0
 8011c92:	d101      	bne.n	8011c98 <__swbuf_r+0x16>
 8011c94:	f7fd ffd2 	bl	800fc3c <__sinit>
 8011c98:	69a3      	ldr	r3, [r4, #24]
 8011c9a:	60a3      	str	r3, [r4, #8]
 8011c9c:	89a3      	ldrh	r3, [r4, #12]
 8011c9e:	071b      	lsls	r3, r3, #28
 8011ca0:	d502      	bpl.n	8011ca8 <__swbuf_r+0x26>
 8011ca2:	6923      	ldr	r3, [r4, #16]
 8011ca4:	2b00      	cmp	r3, #0
 8011ca6:	d109      	bne.n	8011cbc <__swbuf_r+0x3a>
 8011ca8:	0021      	movs	r1, r4
 8011caa:	0030      	movs	r0, r6
 8011cac:	f000 f82c 	bl	8011d08 <__swsetup_r>
 8011cb0:	2800      	cmp	r0, #0
 8011cb2:	d003      	beq.n	8011cbc <__swbuf_r+0x3a>
 8011cb4:	2501      	movs	r5, #1
 8011cb6:	426d      	negs	r5, r5
 8011cb8:	0028      	movs	r0, r5
 8011cba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011cbc:	6923      	ldr	r3, [r4, #16]
 8011cbe:	6820      	ldr	r0, [r4, #0]
 8011cc0:	b2ef      	uxtb	r7, r5
 8011cc2:	1ac0      	subs	r0, r0, r3
 8011cc4:	6963      	ldr	r3, [r4, #20]
 8011cc6:	b2ed      	uxtb	r5, r5
 8011cc8:	4283      	cmp	r3, r0
 8011cca:	dc05      	bgt.n	8011cd8 <__swbuf_r+0x56>
 8011ccc:	0021      	movs	r1, r4
 8011cce:	0030      	movs	r0, r6
 8011cd0:	f7ff ffac 	bl	8011c2c <_fflush_r>
 8011cd4:	2800      	cmp	r0, #0
 8011cd6:	d1ed      	bne.n	8011cb4 <__swbuf_r+0x32>
 8011cd8:	68a3      	ldr	r3, [r4, #8]
 8011cda:	3001      	adds	r0, #1
 8011cdc:	3b01      	subs	r3, #1
 8011cde:	60a3      	str	r3, [r4, #8]
 8011ce0:	6823      	ldr	r3, [r4, #0]
 8011ce2:	1c5a      	adds	r2, r3, #1
 8011ce4:	6022      	str	r2, [r4, #0]
 8011ce6:	701f      	strb	r7, [r3, #0]
 8011ce8:	6963      	ldr	r3, [r4, #20]
 8011cea:	4283      	cmp	r3, r0
 8011cec:	d004      	beq.n	8011cf8 <__swbuf_r+0x76>
 8011cee:	89a3      	ldrh	r3, [r4, #12]
 8011cf0:	07db      	lsls	r3, r3, #31
 8011cf2:	d5e1      	bpl.n	8011cb8 <__swbuf_r+0x36>
 8011cf4:	2d0a      	cmp	r5, #10
 8011cf6:	d1df      	bne.n	8011cb8 <__swbuf_r+0x36>
 8011cf8:	0021      	movs	r1, r4
 8011cfa:	0030      	movs	r0, r6
 8011cfc:	f7ff ff96 	bl	8011c2c <_fflush_r>
 8011d00:	2800      	cmp	r0, #0
 8011d02:	d0d9      	beq.n	8011cb8 <__swbuf_r+0x36>
 8011d04:	e7d6      	b.n	8011cb4 <__swbuf_r+0x32>
	...

08011d08 <__swsetup_r>:
 8011d08:	4b2d      	ldr	r3, [pc, #180]	@ (8011dc0 <__swsetup_r+0xb8>)
 8011d0a:	b570      	push	{r4, r5, r6, lr}
 8011d0c:	0005      	movs	r5, r0
 8011d0e:	6818      	ldr	r0, [r3, #0]
 8011d10:	000c      	movs	r4, r1
 8011d12:	2800      	cmp	r0, #0
 8011d14:	d004      	beq.n	8011d20 <__swsetup_r+0x18>
 8011d16:	6a03      	ldr	r3, [r0, #32]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	d101      	bne.n	8011d20 <__swsetup_r+0x18>
 8011d1c:	f7fd ff8e 	bl	800fc3c <__sinit>
 8011d20:	230c      	movs	r3, #12
 8011d22:	5ee2      	ldrsh	r2, [r4, r3]
 8011d24:	0713      	lsls	r3, r2, #28
 8011d26:	d423      	bmi.n	8011d70 <__swsetup_r+0x68>
 8011d28:	06d3      	lsls	r3, r2, #27
 8011d2a:	d407      	bmi.n	8011d3c <__swsetup_r+0x34>
 8011d2c:	2309      	movs	r3, #9
 8011d2e:	602b      	str	r3, [r5, #0]
 8011d30:	2340      	movs	r3, #64	@ 0x40
 8011d32:	2001      	movs	r0, #1
 8011d34:	4313      	orrs	r3, r2
 8011d36:	81a3      	strh	r3, [r4, #12]
 8011d38:	4240      	negs	r0, r0
 8011d3a:	e03a      	b.n	8011db2 <__swsetup_r+0xaa>
 8011d3c:	0752      	lsls	r2, r2, #29
 8011d3e:	d513      	bpl.n	8011d68 <__swsetup_r+0x60>
 8011d40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011d42:	2900      	cmp	r1, #0
 8011d44:	d008      	beq.n	8011d58 <__swsetup_r+0x50>
 8011d46:	0023      	movs	r3, r4
 8011d48:	3344      	adds	r3, #68	@ 0x44
 8011d4a:	4299      	cmp	r1, r3
 8011d4c:	d002      	beq.n	8011d54 <__swsetup_r+0x4c>
 8011d4e:	0028      	movs	r0, r5
 8011d50:	f7fe ff9a 	bl	8010c88 <_free_r>
 8011d54:	2300      	movs	r3, #0
 8011d56:	6363      	str	r3, [r4, #52]	@ 0x34
 8011d58:	2224      	movs	r2, #36	@ 0x24
 8011d5a:	89a3      	ldrh	r3, [r4, #12]
 8011d5c:	4393      	bics	r3, r2
 8011d5e:	81a3      	strh	r3, [r4, #12]
 8011d60:	2300      	movs	r3, #0
 8011d62:	6063      	str	r3, [r4, #4]
 8011d64:	6923      	ldr	r3, [r4, #16]
 8011d66:	6023      	str	r3, [r4, #0]
 8011d68:	2308      	movs	r3, #8
 8011d6a:	89a2      	ldrh	r2, [r4, #12]
 8011d6c:	4313      	orrs	r3, r2
 8011d6e:	81a3      	strh	r3, [r4, #12]
 8011d70:	6923      	ldr	r3, [r4, #16]
 8011d72:	2b00      	cmp	r3, #0
 8011d74:	d10b      	bne.n	8011d8e <__swsetup_r+0x86>
 8011d76:	21a0      	movs	r1, #160	@ 0xa0
 8011d78:	2280      	movs	r2, #128	@ 0x80
 8011d7a:	89a3      	ldrh	r3, [r4, #12]
 8011d7c:	0089      	lsls	r1, r1, #2
 8011d7e:	0092      	lsls	r2, r2, #2
 8011d80:	400b      	ands	r3, r1
 8011d82:	4293      	cmp	r3, r2
 8011d84:	d003      	beq.n	8011d8e <__swsetup_r+0x86>
 8011d86:	0021      	movs	r1, r4
 8011d88:	0028      	movs	r0, r5
 8011d8a:	f000 f91f 	bl	8011fcc <__smakebuf_r>
 8011d8e:	230c      	movs	r3, #12
 8011d90:	5ee2      	ldrsh	r2, [r4, r3]
 8011d92:	2101      	movs	r1, #1
 8011d94:	0013      	movs	r3, r2
 8011d96:	400b      	ands	r3, r1
 8011d98:	420a      	tst	r2, r1
 8011d9a:	d00b      	beq.n	8011db4 <__swsetup_r+0xac>
 8011d9c:	2300      	movs	r3, #0
 8011d9e:	60a3      	str	r3, [r4, #8]
 8011da0:	6963      	ldr	r3, [r4, #20]
 8011da2:	425b      	negs	r3, r3
 8011da4:	61a3      	str	r3, [r4, #24]
 8011da6:	2000      	movs	r0, #0
 8011da8:	6923      	ldr	r3, [r4, #16]
 8011daa:	4283      	cmp	r3, r0
 8011dac:	d101      	bne.n	8011db2 <__swsetup_r+0xaa>
 8011dae:	0613      	lsls	r3, r2, #24
 8011db0:	d4be      	bmi.n	8011d30 <__swsetup_r+0x28>
 8011db2:	bd70      	pop	{r4, r5, r6, pc}
 8011db4:	0791      	lsls	r1, r2, #30
 8011db6:	d400      	bmi.n	8011dba <__swsetup_r+0xb2>
 8011db8:	6963      	ldr	r3, [r4, #20]
 8011dba:	60a3      	str	r3, [r4, #8]
 8011dbc:	e7f3      	b.n	8011da6 <__swsetup_r+0x9e>
 8011dbe:	46c0      	nop			@ (mov r8, r8)
 8011dc0:	20000158 	.word	0x20000158

08011dc4 <memmove>:
 8011dc4:	b510      	push	{r4, lr}
 8011dc6:	4288      	cmp	r0, r1
 8011dc8:	d806      	bhi.n	8011dd8 <memmove+0x14>
 8011dca:	2300      	movs	r3, #0
 8011dcc:	429a      	cmp	r2, r3
 8011dce:	d008      	beq.n	8011de2 <memmove+0x1e>
 8011dd0:	5ccc      	ldrb	r4, [r1, r3]
 8011dd2:	54c4      	strb	r4, [r0, r3]
 8011dd4:	3301      	adds	r3, #1
 8011dd6:	e7f9      	b.n	8011dcc <memmove+0x8>
 8011dd8:	188b      	adds	r3, r1, r2
 8011dda:	4298      	cmp	r0, r3
 8011ddc:	d2f5      	bcs.n	8011dca <memmove+0x6>
 8011dde:	3a01      	subs	r2, #1
 8011de0:	d200      	bcs.n	8011de4 <memmove+0x20>
 8011de2:	bd10      	pop	{r4, pc}
 8011de4:	5c8b      	ldrb	r3, [r1, r2]
 8011de6:	5483      	strb	r3, [r0, r2]
 8011de8:	e7f9      	b.n	8011dde <memmove+0x1a>
	...

08011dec <_sbrk_r>:
 8011dec:	2300      	movs	r3, #0
 8011dee:	b570      	push	{r4, r5, r6, lr}
 8011df0:	4d06      	ldr	r5, [pc, #24]	@ (8011e0c <_sbrk_r+0x20>)
 8011df2:	0004      	movs	r4, r0
 8011df4:	0008      	movs	r0, r1
 8011df6:	602b      	str	r3, [r5, #0]
 8011df8:	f7f5 fc7e 	bl	80076f8 <_sbrk>
 8011dfc:	1c43      	adds	r3, r0, #1
 8011dfe:	d103      	bne.n	8011e08 <_sbrk_r+0x1c>
 8011e00:	682b      	ldr	r3, [r5, #0]
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d000      	beq.n	8011e08 <_sbrk_r+0x1c>
 8011e06:	6023      	str	r3, [r4, #0]
 8011e08:	bd70      	pop	{r4, r5, r6, pc}
 8011e0a:	46c0      	nop			@ (mov r8, r8)
 8011e0c:	20001f0c 	.word	0x20001f0c

08011e10 <memcpy>:
 8011e10:	2300      	movs	r3, #0
 8011e12:	b510      	push	{r4, lr}
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d100      	bne.n	8011e1a <memcpy+0xa>
 8011e18:	bd10      	pop	{r4, pc}
 8011e1a:	5ccc      	ldrb	r4, [r1, r3]
 8011e1c:	54c4      	strb	r4, [r0, r3]
 8011e1e:	3301      	adds	r3, #1
 8011e20:	e7f8      	b.n	8011e14 <memcpy+0x4>
	...

08011e24 <__assert_func>:
 8011e24:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011e26:	0014      	movs	r4, r2
 8011e28:	001a      	movs	r2, r3
 8011e2a:	4b09      	ldr	r3, [pc, #36]	@ (8011e50 <__assert_func+0x2c>)
 8011e2c:	0005      	movs	r5, r0
 8011e2e:	681b      	ldr	r3, [r3, #0]
 8011e30:	000e      	movs	r6, r1
 8011e32:	68d8      	ldr	r0, [r3, #12]
 8011e34:	4b07      	ldr	r3, [pc, #28]	@ (8011e54 <__assert_func+0x30>)
 8011e36:	2c00      	cmp	r4, #0
 8011e38:	d101      	bne.n	8011e3e <__assert_func+0x1a>
 8011e3a:	4b07      	ldr	r3, [pc, #28]	@ (8011e58 <__assert_func+0x34>)
 8011e3c:	001c      	movs	r4, r3
 8011e3e:	4907      	ldr	r1, [pc, #28]	@ (8011e5c <__assert_func+0x38>)
 8011e40:	9301      	str	r3, [sp, #4]
 8011e42:	9402      	str	r4, [sp, #8]
 8011e44:	002b      	movs	r3, r5
 8011e46:	9600      	str	r6, [sp, #0]
 8011e48:	f000 f886 	bl	8011f58 <fiprintf>
 8011e4c:	f000 f924 	bl	8012098 <abort>
 8011e50:	20000158 	.word	0x20000158
 8011e54:	0801326b 	.word	0x0801326b
 8011e58:	080132a6 	.word	0x080132a6
 8011e5c:	08013278 	.word	0x08013278

08011e60 <_calloc_r>:
 8011e60:	b570      	push	{r4, r5, r6, lr}
 8011e62:	0c0b      	lsrs	r3, r1, #16
 8011e64:	0c15      	lsrs	r5, r2, #16
 8011e66:	2b00      	cmp	r3, #0
 8011e68:	d11e      	bne.n	8011ea8 <_calloc_r+0x48>
 8011e6a:	2d00      	cmp	r5, #0
 8011e6c:	d10c      	bne.n	8011e88 <_calloc_r+0x28>
 8011e6e:	b289      	uxth	r1, r1
 8011e70:	b294      	uxth	r4, r2
 8011e72:	434c      	muls	r4, r1
 8011e74:	0021      	movs	r1, r4
 8011e76:	f7fe ff7d 	bl	8010d74 <_malloc_r>
 8011e7a:	1e05      	subs	r5, r0, #0
 8011e7c:	d01a      	beq.n	8011eb4 <_calloc_r+0x54>
 8011e7e:	0022      	movs	r2, r4
 8011e80:	2100      	movs	r1, #0
 8011e82:	f7fd ffc3 	bl	800fe0c <memset>
 8011e86:	e016      	b.n	8011eb6 <_calloc_r+0x56>
 8011e88:	1c2b      	adds	r3, r5, #0
 8011e8a:	1c0c      	adds	r4, r1, #0
 8011e8c:	b289      	uxth	r1, r1
 8011e8e:	b292      	uxth	r2, r2
 8011e90:	434a      	muls	r2, r1
 8011e92:	b29b      	uxth	r3, r3
 8011e94:	b2a1      	uxth	r1, r4
 8011e96:	4359      	muls	r1, r3
 8011e98:	0c14      	lsrs	r4, r2, #16
 8011e9a:	190c      	adds	r4, r1, r4
 8011e9c:	0c23      	lsrs	r3, r4, #16
 8011e9e:	d107      	bne.n	8011eb0 <_calloc_r+0x50>
 8011ea0:	0424      	lsls	r4, r4, #16
 8011ea2:	b292      	uxth	r2, r2
 8011ea4:	4314      	orrs	r4, r2
 8011ea6:	e7e5      	b.n	8011e74 <_calloc_r+0x14>
 8011ea8:	2d00      	cmp	r5, #0
 8011eaa:	d101      	bne.n	8011eb0 <_calloc_r+0x50>
 8011eac:	1c14      	adds	r4, r2, #0
 8011eae:	e7ed      	b.n	8011e8c <_calloc_r+0x2c>
 8011eb0:	230c      	movs	r3, #12
 8011eb2:	6003      	str	r3, [r0, #0]
 8011eb4:	2500      	movs	r5, #0
 8011eb6:	0028      	movs	r0, r5
 8011eb8:	bd70      	pop	{r4, r5, r6, pc}

08011eba <__ascii_mbtowc>:
 8011eba:	b082      	sub	sp, #8
 8011ebc:	2900      	cmp	r1, #0
 8011ebe:	d100      	bne.n	8011ec2 <__ascii_mbtowc+0x8>
 8011ec0:	a901      	add	r1, sp, #4
 8011ec2:	1e10      	subs	r0, r2, #0
 8011ec4:	d006      	beq.n	8011ed4 <__ascii_mbtowc+0x1a>
 8011ec6:	2b00      	cmp	r3, #0
 8011ec8:	d006      	beq.n	8011ed8 <__ascii_mbtowc+0x1e>
 8011eca:	7813      	ldrb	r3, [r2, #0]
 8011ecc:	600b      	str	r3, [r1, #0]
 8011ece:	7810      	ldrb	r0, [r2, #0]
 8011ed0:	1e43      	subs	r3, r0, #1
 8011ed2:	4198      	sbcs	r0, r3
 8011ed4:	b002      	add	sp, #8
 8011ed6:	4770      	bx	lr
 8011ed8:	2002      	movs	r0, #2
 8011eda:	4240      	negs	r0, r0
 8011edc:	e7fa      	b.n	8011ed4 <__ascii_mbtowc+0x1a>

08011ede <_realloc_r>:
 8011ede:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011ee0:	0006      	movs	r6, r0
 8011ee2:	000c      	movs	r4, r1
 8011ee4:	0015      	movs	r5, r2
 8011ee6:	2900      	cmp	r1, #0
 8011ee8:	d105      	bne.n	8011ef6 <_realloc_r+0x18>
 8011eea:	0011      	movs	r1, r2
 8011eec:	f7fe ff42 	bl	8010d74 <_malloc_r>
 8011ef0:	0004      	movs	r4, r0
 8011ef2:	0020      	movs	r0, r4
 8011ef4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8011ef6:	2a00      	cmp	r2, #0
 8011ef8:	d103      	bne.n	8011f02 <_realloc_r+0x24>
 8011efa:	f7fe fec5 	bl	8010c88 <_free_r>
 8011efe:	2400      	movs	r4, #0
 8011f00:	e7f7      	b.n	8011ef2 <_realloc_r+0x14>
 8011f02:	f000 f8d0 	bl	80120a6 <_malloc_usable_size_r>
 8011f06:	0007      	movs	r7, r0
 8011f08:	4285      	cmp	r5, r0
 8011f0a:	d802      	bhi.n	8011f12 <_realloc_r+0x34>
 8011f0c:	0843      	lsrs	r3, r0, #1
 8011f0e:	42ab      	cmp	r3, r5
 8011f10:	d3ef      	bcc.n	8011ef2 <_realloc_r+0x14>
 8011f12:	0029      	movs	r1, r5
 8011f14:	0030      	movs	r0, r6
 8011f16:	f7fe ff2d 	bl	8010d74 <_malloc_r>
 8011f1a:	9001      	str	r0, [sp, #4]
 8011f1c:	2800      	cmp	r0, #0
 8011f1e:	d0ee      	beq.n	8011efe <_realloc_r+0x20>
 8011f20:	002a      	movs	r2, r5
 8011f22:	42bd      	cmp	r5, r7
 8011f24:	d900      	bls.n	8011f28 <_realloc_r+0x4a>
 8011f26:	003a      	movs	r2, r7
 8011f28:	0021      	movs	r1, r4
 8011f2a:	9801      	ldr	r0, [sp, #4]
 8011f2c:	f7ff ff70 	bl	8011e10 <memcpy>
 8011f30:	0021      	movs	r1, r4
 8011f32:	0030      	movs	r0, r6
 8011f34:	f7fe fea8 	bl	8010c88 <_free_r>
 8011f38:	9c01      	ldr	r4, [sp, #4]
 8011f3a:	e7da      	b.n	8011ef2 <_realloc_r+0x14>

08011f3c <__ascii_wctomb>:
 8011f3c:	0003      	movs	r3, r0
 8011f3e:	1e08      	subs	r0, r1, #0
 8011f40:	d005      	beq.n	8011f4e <__ascii_wctomb+0x12>
 8011f42:	2aff      	cmp	r2, #255	@ 0xff
 8011f44:	d904      	bls.n	8011f50 <__ascii_wctomb+0x14>
 8011f46:	228a      	movs	r2, #138	@ 0x8a
 8011f48:	2001      	movs	r0, #1
 8011f4a:	601a      	str	r2, [r3, #0]
 8011f4c:	4240      	negs	r0, r0
 8011f4e:	4770      	bx	lr
 8011f50:	2001      	movs	r0, #1
 8011f52:	700a      	strb	r2, [r1, #0]
 8011f54:	e7fb      	b.n	8011f4e <__ascii_wctomb+0x12>
	...

08011f58 <fiprintf>:
 8011f58:	b40e      	push	{r1, r2, r3}
 8011f5a:	b517      	push	{r0, r1, r2, r4, lr}
 8011f5c:	4c05      	ldr	r4, [pc, #20]	@ (8011f74 <fiprintf+0x1c>)
 8011f5e:	ab05      	add	r3, sp, #20
 8011f60:	cb04      	ldmia	r3!, {r2}
 8011f62:	0001      	movs	r1, r0
 8011f64:	6820      	ldr	r0, [r4, #0]
 8011f66:	9301      	str	r3, [sp, #4]
 8011f68:	f7ff fcbe 	bl	80118e8 <_vfiprintf_r>
 8011f6c:	bc1e      	pop	{r1, r2, r3, r4}
 8011f6e:	bc08      	pop	{r3}
 8011f70:	b003      	add	sp, #12
 8011f72:	4718      	bx	r3
 8011f74:	20000158 	.word	0x20000158

08011f78 <__swhatbuf_r>:
 8011f78:	b570      	push	{r4, r5, r6, lr}
 8011f7a:	000e      	movs	r6, r1
 8011f7c:	001d      	movs	r5, r3
 8011f7e:	230e      	movs	r3, #14
 8011f80:	5ec9      	ldrsh	r1, [r1, r3]
 8011f82:	0014      	movs	r4, r2
 8011f84:	b096      	sub	sp, #88	@ 0x58
 8011f86:	2900      	cmp	r1, #0
 8011f88:	da0c      	bge.n	8011fa4 <__swhatbuf_r+0x2c>
 8011f8a:	89b2      	ldrh	r2, [r6, #12]
 8011f8c:	2380      	movs	r3, #128	@ 0x80
 8011f8e:	0011      	movs	r1, r2
 8011f90:	4019      	ands	r1, r3
 8011f92:	421a      	tst	r2, r3
 8011f94:	d114      	bne.n	8011fc0 <__swhatbuf_r+0x48>
 8011f96:	2380      	movs	r3, #128	@ 0x80
 8011f98:	00db      	lsls	r3, r3, #3
 8011f9a:	2000      	movs	r0, #0
 8011f9c:	6029      	str	r1, [r5, #0]
 8011f9e:	6023      	str	r3, [r4, #0]
 8011fa0:	b016      	add	sp, #88	@ 0x58
 8011fa2:	bd70      	pop	{r4, r5, r6, pc}
 8011fa4:	466a      	mov	r2, sp
 8011fa6:	f000 f853 	bl	8012050 <_fstat_r>
 8011faa:	2800      	cmp	r0, #0
 8011fac:	dbed      	blt.n	8011f8a <__swhatbuf_r+0x12>
 8011fae:	23f0      	movs	r3, #240	@ 0xf0
 8011fb0:	9901      	ldr	r1, [sp, #4]
 8011fb2:	021b      	lsls	r3, r3, #8
 8011fb4:	4019      	ands	r1, r3
 8011fb6:	4b04      	ldr	r3, [pc, #16]	@ (8011fc8 <__swhatbuf_r+0x50>)
 8011fb8:	18c9      	adds	r1, r1, r3
 8011fba:	424b      	negs	r3, r1
 8011fbc:	4159      	adcs	r1, r3
 8011fbe:	e7ea      	b.n	8011f96 <__swhatbuf_r+0x1e>
 8011fc0:	2100      	movs	r1, #0
 8011fc2:	2340      	movs	r3, #64	@ 0x40
 8011fc4:	e7e9      	b.n	8011f9a <__swhatbuf_r+0x22>
 8011fc6:	46c0      	nop			@ (mov r8, r8)
 8011fc8:	ffffe000 	.word	0xffffe000

08011fcc <__smakebuf_r>:
 8011fcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011fce:	2602      	movs	r6, #2
 8011fd0:	898b      	ldrh	r3, [r1, #12]
 8011fd2:	0005      	movs	r5, r0
 8011fd4:	000c      	movs	r4, r1
 8011fd6:	b085      	sub	sp, #20
 8011fd8:	4233      	tst	r3, r6
 8011fda:	d007      	beq.n	8011fec <__smakebuf_r+0x20>
 8011fdc:	0023      	movs	r3, r4
 8011fde:	3347      	adds	r3, #71	@ 0x47
 8011fe0:	6023      	str	r3, [r4, #0]
 8011fe2:	6123      	str	r3, [r4, #16]
 8011fe4:	2301      	movs	r3, #1
 8011fe6:	6163      	str	r3, [r4, #20]
 8011fe8:	b005      	add	sp, #20
 8011fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fec:	ab03      	add	r3, sp, #12
 8011fee:	aa02      	add	r2, sp, #8
 8011ff0:	f7ff ffc2 	bl	8011f78 <__swhatbuf_r>
 8011ff4:	9f02      	ldr	r7, [sp, #8]
 8011ff6:	9001      	str	r0, [sp, #4]
 8011ff8:	0039      	movs	r1, r7
 8011ffa:	0028      	movs	r0, r5
 8011ffc:	f7fe feba 	bl	8010d74 <_malloc_r>
 8012000:	2800      	cmp	r0, #0
 8012002:	d108      	bne.n	8012016 <__smakebuf_r+0x4a>
 8012004:	220c      	movs	r2, #12
 8012006:	5ea3      	ldrsh	r3, [r4, r2]
 8012008:	059a      	lsls	r2, r3, #22
 801200a:	d4ed      	bmi.n	8011fe8 <__smakebuf_r+0x1c>
 801200c:	2203      	movs	r2, #3
 801200e:	4393      	bics	r3, r2
 8012010:	431e      	orrs	r6, r3
 8012012:	81a6      	strh	r6, [r4, #12]
 8012014:	e7e2      	b.n	8011fdc <__smakebuf_r+0x10>
 8012016:	2380      	movs	r3, #128	@ 0x80
 8012018:	89a2      	ldrh	r2, [r4, #12]
 801201a:	6020      	str	r0, [r4, #0]
 801201c:	4313      	orrs	r3, r2
 801201e:	81a3      	strh	r3, [r4, #12]
 8012020:	9b03      	ldr	r3, [sp, #12]
 8012022:	6120      	str	r0, [r4, #16]
 8012024:	6167      	str	r7, [r4, #20]
 8012026:	2b00      	cmp	r3, #0
 8012028:	d00c      	beq.n	8012044 <__smakebuf_r+0x78>
 801202a:	0028      	movs	r0, r5
 801202c:	230e      	movs	r3, #14
 801202e:	5ee1      	ldrsh	r1, [r4, r3]
 8012030:	f000 f820 	bl	8012074 <_isatty_r>
 8012034:	2800      	cmp	r0, #0
 8012036:	d005      	beq.n	8012044 <__smakebuf_r+0x78>
 8012038:	2303      	movs	r3, #3
 801203a:	89a2      	ldrh	r2, [r4, #12]
 801203c:	439a      	bics	r2, r3
 801203e:	3b02      	subs	r3, #2
 8012040:	4313      	orrs	r3, r2
 8012042:	81a3      	strh	r3, [r4, #12]
 8012044:	89a3      	ldrh	r3, [r4, #12]
 8012046:	9a01      	ldr	r2, [sp, #4]
 8012048:	4313      	orrs	r3, r2
 801204a:	81a3      	strh	r3, [r4, #12]
 801204c:	e7cc      	b.n	8011fe8 <__smakebuf_r+0x1c>
	...

08012050 <_fstat_r>:
 8012050:	2300      	movs	r3, #0
 8012052:	b570      	push	{r4, r5, r6, lr}
 8012054:	4d06      	ldr	r5, [pc, #24]	@ (8012070 <_fstat_r+0x20>)
 8012056:	0004      	movs	r4, r0
 8012058:	0008      	movs	r0, r1
 801205a:	0011      	movs	r1, r2
 801205c:	602b      	str	r3, [r5, #0]
 801205e:	f7f5 fb29 	bl	80076b4 <_fstat>
 8012062:	1c43      	adds	r3, r0, #1
 8012064:	d103      	bne.n	801206e <_fstat_r+0x1e>
 8012066:	682b      	ldr	r3, [r5, #0]
 8012068:	2b00      	cmp	r3, #0
 801206a:	d000      	beq.n	801206e <_fstat_r+0x1e>
 801206c:	6023      	str	r3, [r4, #0]
 801206e:	bd70      	pop	{r4, r5, r6, pc}
 8012070:	20001f0c 	.word	0x20001f0c

08012074 <_isatty_r>:
 8012074:	2300      	movs	r3, #0
 8012076:	b570      	push	{r4, r5, r6, lr}
 8012078:	4d06      	ldr	r5, [pc, #24]	@ (8012094 <_isatty_r+0x20>)
 801207a:	0004      	movs	r4, r0
 801207c:	0008      	movs	r0, r1
 801207e:	602b      	str	r3, [r5, #0]
 8012080:	f7f5 fb26 	bl	80076d0 <_isatty>
 8012084:	1c43      	adds	r3, r0, #1
 8012086:	d103      	bne.n	8012090 <_isatty_r+0x1c>
 8012088:	682b      	ldr	r3, [r5, #0]
 801208a:	2b00      	cmp	r3, #0
 801208c:	d000      	beq.n	8012090 <_isatty_r+0x1c>
 801208e:	6023      	str	r3, [r4, #0]
 8012090:	bd70      	pop	{r4, r5, r6, pc}
 8012092:	46c0      	nop			@ (mov r8, r8)
 8012094:	20001f0c 	.word	0x20001f0c

08012098 <abort>:
 8012098:	2006      	movs	r0, #6
 801209a:	b510      	push	{r4, lr}
 801209c:	f000 f834 	bl	8012108 <raise>
 80120a0:	2001      	movs	r0, #1
 80120a2:	f7f5 fad3 	bl	800764c <_exit>

080120a6 <_malloc_usable_size_r>:
 80120a6:	1f0b      	subs	r3, r1, #4
 80120a8:	681b      	ldr	r3, [r3, #0]
 80120aa:	1f18      	subs	r0, r3, #4
 80120ac:	2b00      	cmp	r3, #0
 80120ae:	da01      	bge.n	80120b4 <_malloc_usable_size_r+0xe>
 80120b0:	580b      	ldr	r3, [r1, r0]
 80120b2:	18c0      	adds	r0, r0, r3
 80120b4:	4770      	bx	lr

080120b6 <_raise_r>:
 80120b6:	b570      	push	{r4, r5, r6, lr}
 80120b8:	0004      	movs	r4, r0
 80120ba:	000d      	movs	r5, r1
 80120bc:	291f      	cmp	r1, #31
 80120be:	d904      	bls.n	80120ca <_raise_r+0x14>
 80120c0:	2316      	movs	r3, #22
 80120c2:	6003      	str	r3, [r0, #0]
 80120c4:	2001      	movs	r0, #1
 80120c6:	4240      	negs	r0, r0
 80120c8:	bd70      	pop	{r4, r5, r6, pc}
 80120ca:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d004      	beq.n	80120da <_raise_r+0x24>
 80120d0:	008a      	lsls	r2, r1, #2
 80120d2:	189b      	adds	r3, r3, r2
 80120d4:	681a      	ldr	r2, [r3, #0]
 80120d6:	2a00      	cmp	r2, #0
 80120d8:	d108      	bne.n	80120ec <_raise_r+0x36>
 80120da:	0020      	movs	r0, r4
 80120dc:	f000 f830 	bl	8012140 <_getpid_r>
 80120e0:	002a      	movs	r2, r5
 80120e2:	0001      	movs	r1, r0
 80120e4:	0020      	movs	r0, r4
 80120e6:	f000 f819 	bl	801211c <_kill_r>
 80120ea:	e7ed      	b.n	80120c8 <_raise_r+0x12>
 80120ec:	2a01      	cmp	r2, #1
 80120ee:	d009      	beq.n	8012104 <_raise_r+0x4e>
 80120f0:	1c51      	adds	r1, r2, #1
 80120f2:	d103      	bne.n	80120fc <_raise_r+0x46>
 80120f4:	2316      	movs	r3, #22
 80120f6:	6003      	str	r3, [r0, #0]
 80120f8:	2001      	movs	r0, #1
 80120fa:	e7e5      	b.n	80120c8 <_raise_r+0x12>
 80120fc:	2100      	movs	r1, #0
 80120fe:	0028      	movs	r0, r5
 8012100:	6019      	str	r1, [r3, #0]
 8012102:	4790      	blx	r2
 8012104:	2000      	movs	r0, #0
 8012106:	e7df      	b.n	80120c8 <_raise_r+0x12>

08012108 <raise>:
 8012108:	b510      	push	{r4, lr}
 801210a:	4b03      	ldr	r3, [pc, #12]	@ (8012118 <raise+0x10>)
 801210c:	0001      	movs	r1, r0
 801210e:	6818      	ldr	r0, [r3, #0]
 8012110:	f7ff ffd1 	bl	80120b6 <_raise_r>
 8012114:	bd10      	pop	{r4, pc}
 8012116:	46c0      	nop			@ (mov r8, r8)
 8012118:	20000158 	.word	0x20000158

0801211c <_kill_r>:
 801211c:	2300      	movs	r3, #0
 801211e:	b570      	push	{r4, r5, r6, lr}
 8012120:	4d06      	ldr	r5, [pc, #24]	@ (801213c <_kill_r+0x20>)
 8012122:	0004      	movs	r4, r0
 8012124:	0008      	movs	r0, r1
 8012126:	0011      	movs	r1, r2
 8012128:	602b      	str	r3, [r5, #0]
 801212a:	f7f5 fa7f 	bl	800762c <_kill>
 801212e:	1c43      	adds	r3, r0, #1
 8012130:	d103      	bne.n	801213a <_kill_r+0x1e>
 8012132:	682b      	ldr	r3, [r5, #0]
 8012134:	2b00      	cmp	r3, #0
 8012136:	d000      	beq.n	801213a <_kill_r+0x1e>
 8012138:	6023      	str	r3, [r4, #0]
 801213a:	bd70      	pop	{r4, r5, r6, pc}
 801213c:	20001f0c 	.word	0x20001f0c

08012140 <_getpid_r>:
 8012140:	b510      	push	{r4, lr}
 8012142:	f7f5 fa6d 	bl	8007620 <_getpid>
 8012146:	bd10      	pop	{r4, pc}

08012148 <expf>:
 8012148:	b570      	push	{r4, r5, r6, lr}
 801214a:	1c04      	adds	r4, r0, #0
 801214c:	f000 f8c2 	bl	80122d4 <__ieee754_expf>
 8012150:	1c05      	adds	r5, r0, #0
 8012152:	1c20      	adds	r0, r4, #0
 8012154:	f000 f83c 	bl	80121d0 <finitef>
 8012158:	2800      	cmp	r0, #0
 801215a:	d00b      	beq.n	8012174 <expf+0x2c>
 801215c:	490c      	ldr	r1, [pc, #48]	@ (8012190 <expf+0x48>)
 801215e:	1c20      	adds	r0, r4, #0
 8012160:	f7ee f9c8 	bl	80004f4 <__aeabi_fcmpgt>
 8012164:	2800      	cmp	r0, #0
 8012166:	d007      	beq.n	8012178 <expf+0x30>
 8012168:	f7fd fed4 	bl	800ff14 <__errno>
 801216c:	25ff      	movs	r5, #255	@ 0xff
 801216e:	2322      	movs	r3, #34	@ 0x22
 8012170:	05ed      	lsls	r5, r5, #23
 8012172:	6003      	str	r3, [r0, #0]
 8012174:	1c28      	adds	r0, r5, #0
 8012176:	bd70      	pop	{r4, r5, r6, pc}
 8012178:	4906      	ldr	r1, [pc, #24]	@ (8012194 <expf+0x4c>)
 801217a:	1c20      	adds	r0, r4, #0
 801217c:	f7ee f9a6 	bl	80004cc <__aeabi_fcmplt>
 8012180:	2800      	cmp	r0, #0
 8012182:	d0f7      	beq.n	8012174 <expf+0x2c>
 8012184:	f7fd fec6 	bl	800ff14 <__errno>
 8012188:	2322      	movs	r3, #34	@ 0x22
 801218a:	2500      	movs	r5, #0
 801218c:	6003      	str	r3, [r0, #0]
 801218e:	e7f1      	b.n	8012174 <expf+0x2c>
 8012190:	42b17217 	.word	0x42b17217
 8012194:	c2cff1b5 	.word	0xc2cff1b5

08012198 <sqrtf>:
 8012198:	b570      	push	{r4, r5, r6, lr}
 801219a:	1c05      	adds	r5, r0, #0
 801219c:	f000 f822 	bl	80121e4 <__ieee754_sqrtf>
 80121a0:	1c29      	adds	r1, r5, #0
 80121a2:	1c04      	adds	r4, r0, #0
 80121a4:	1c28      	adds	r0, r5, #0
 80121a6:	f7ef f95b 	bl	8001460 <__aeabi_fcmpun>
 80121aa:	2800      	cmp	r0, #0
 80121ac:	d10e      	bne.n	80121cc <sqrtf+0x34>
 80121ae:	2100      	movs	r1, #0
 80121b0:	1c28      	adds	r0, r5, #0
 80121b2:	f7ee f98b 	bl	80004cc <__aeabi_fcmplt>
 80121b6:	2800      	cmp	r0, #0
 80121b8:	d008      	beq.n	80121cc <sqrtf+0x34>
 80121ba:	f7fd feab 	bl	800ff14 <__errno>
 80121be:	2321      	movs	r3, #33	@ 0x21
 80121c0:	2100      	movs	r1, #0
 80121c2:	6003      	str	r3, [r0, #0]
 80121c4:	1c08      	adds	r0, r1, #0
 80121c6:	f7ee fc83 	bl	8000ad0 <__aeabi_fdiv>
 80121ca:	1c04      	adds	r4, r0, #0
 80121cc:	1c20      	adds	r0, r4, #0
 80121ce:	bd70      	pop	{r4, r5, r6, pc}

080121d0 <finitef>:
 80121d0:	22ff      	movs	r2, #255	@ 0xff
 80121d2:	0043      	lsls	r3, r0, #1
 80121d4:	085b      	lsrs	r3, r3, #1
 80121d6:	2001      	movs	r0, #1
 80121d8:	05d2      	lsls	r2, r2, #23
 80121da:	4293      	cmp	r3, r2
 80121dc:	db00      	blt.n	80121e0 <finitef+0x10>
 80121de:	2000      	movs	r0, #0
 80121e0:	4770      	bx	lr
	...

080121e4 <__ieee754_sqrtf>:
 80121e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80121e6:	0003      	movs	r3, r0
 80121e8:	0042      	lsls	r2, r0, #1
 80121ea:	1c04      	adds	r4, r0, #0
 80121ec:	20ff      	movs	r0, #255	@ 0xff
 80121ee:	0852      	lsrs	r2, r2, #1
 80121f0:	05c0      	lsls	r0, r0, #23
 80121f2:	4282      	cmp	r2, r0
 80121f4:	d30a      	bcc.n	801220c <__ieee754_sqrtf+0x28>
 80121f6:	1c21      	adds	r1, r4, #0
 80121f8:	1c20      	adds	r0, r4, #0
 80121fa:	f7ee fe4f 	bl	8000e9c <__aeabi_fmul>
 80121fe:	1c01      	adds	r1, r0, #0
 8012200:	1c20      	adds	r0, r4, #0
 8012202:	f7ee fadb 	bl	80007bc <__aeabi_fadd>
 8012206:	1c04      	adds	r4, r0, #0
 8012208:	1c20      	adds	r0, r4, #0
 801220a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801220c:	2a00      	cmp	r2, #0
 801220e:	d0fb      	beq.n	8012208 <__ieee754_sqrtf+0x24>
 8012210:	2c00      	cmp	r4, #0
 8012212:	da07      	bge.n	8012224 <__ieee754_sqrtf+0x40>
 8012214:	1c21      	adds	r1, r4, #0
 8012216:	1c20      	adds	r0, r4, #0
 8012218:	f7ee ff7e 	bl	8001118 <__aeabi_fsub>
 801221c:	1c01      	adds	r1, r0, #0
 801221e:	f7ee fc57 	bl	8000ad0 <__aeabi_fdiv>
 8012222:	e7f0      	b.n	8012206 <__ieee754_sqrtf+0x22>
 8012224:	0022      	movs	r2, r4
 8012226:	15e1      	asrs	r1, r4, #23
 8012228:	4002      	ands	r2, r0
 801222a:	4204      	tst	r4, r0
 801222c:	d046      	beq.n	80122bc <__ieee754_sqrtf+0xd8>
 801222e:	2280      	movs	r2, #128	@ 0x80
 8012230:	000f      	movs	r7, r1
 8012232:	025b      	lsls	r3, r3, #9
 8012234:	0a5b      	lsrs	r3, r3, #9
 8012236:	0412      	lsls	r2, r2, #16
 8012238:	3f7f      	subs	r7, #127	@ 0x7f
 801223a:	4313      	orrs	r3, r2
 801223c:	07c9      	lsls	r1, r1, #31
 801223e:	d400      	bmi.n	8012242 <__ieee754_sqrtf+0x5e>
 8012240:	005b      	lsls	r3, r3, #1
 8012242:	2400      	movs	r4, #0
 8012244:	2180      	movs	r1, #128	@ 0x80
 8012246:	2019      	movs	r0, #25
 8012248:	0026      	movs	r6, r4
 801224a:	107f      	asrs	r7, r7, #1
 801224c:	005b      	lsls	r3, r3, #1
 801224e:	0449      	lsls	r1, r1, #17
 8012250:	1875      	adds	r5, r6, r1
 8012252:	001a      	movs	r2, r3
 8012254:	429d      	cmp	r5, r3
 8012256:	dc02      	bgt.n	801225e <__ieee754_sqrtf+0x7a>
 8012258:	186e      	adds	r6, r5, r1
 801225a:	1b5a      	subs	r2, r3, r5
 801225c:	1864      	adds	r4, r4, r1
 801225e:	3801      	subs	r0, #1
 8012260:	0053      	lsls	r3, r2, #1
 8012262:	0849      	lsrs	r1, r1, #1
 8012264:	2800      	cmp	r0, #0
 8012266:	d1f3      	bne.n	8012250 <__ieee754_sqrtf+0x6c>
 8012268:	2a00      	cmp	r2, #0
 801226a:	d019      	beq.n	80122a0 <__ieee754_sqrtf+0xbc>
 801226c:	4d17      	ldr	r5, [pc, #92]	@ (80122cc <__ieee754_sqrtf+0xe8>)
 801226e:	4e18      	ldr	r6, [pc, #96]	@ (80122d0 <__ieee754_sqrtf+0xec>)
 8012270:	6828      	ldr	r0, [r5, #0]
 8012272:	6831      	ldr	r1, [r6, #0]
 8012274:	682b      	ldr	r3, [r5, #0]
 8012276:	9301      	str	r3, [sp, #4]
 8012278:	f7ee ff4e 	bl	8001118 <__aeabi_fsub>
 801227c:	1c01      	adds	r1, r0, #0
 801227e:	9801      	ldr	r0, [sp, #4]
 8012280:	f7ee f92e 	bl	80004e0 <__aeabi_fcmple>
 8012284:	2800      	cmp	r0, #0
 8012286:	d00b      	beq.n	80122a0 <__ieee754_sqrtf+0xbc>
 8012288:	6828      	ldr	r0, [r5, #0]
 801228a:	6831      	ldr	r1, [r6, #0]
 801228c:	f7ee fa96 	bl	80007bc <__aeabi_fadd>
 8012290:	682d      	ldr	r5, [r5, #0]
 8012292:	1c01      	adds	r1, r0, #0
 8012294:	1c28      	adds	r0, r5, #0
 8012296:	f7ee f919 	bl	80004cc <__aeabi_fcmplt>
 801229a:	2800      	cmp	r0, #0
 801229c:	d011      	beq.n	80122c2 <__ieee754_sqrtf+0xde>
 801229e:	3402      	adds	r4, #2
 80122a0:	23fc      	movs	r3, #252	@ 0xfc
 80122a2:	1064      	asrs	r4, r4, #1
 80122a4:	059b      	lsls	r3, r3, #22
 80122a6:	18e3      	adds	r3, r4, r3
 80122a8:	05fc      	lsls	r4, r7, #23
 80122aa:	18e4      	adds	r4, r4, r3
 80122ac:	e7ac      	b.n	8012208 <__ieee754_sqrtf+0x24>
 80122ae:	005b      	lsls	r3, r3, #1
 80122b0:	3201      	adds	r2, #1
 80122b2:	4203      	tst	r3, r0
 80122b4:	d0fb      	beq.n	80122ae <__ieee754_sqrtf+0xca>
 80122b6:	3a01      	subs	r2, #1
 80122b8:	1a89      	subs	r1, r1, r2
 80122ba:	e7b8      	b.n	801222e <__ieee754_sqrtf+0x4a>
 80122bc:	2080      	movs	r0, #128	@ 0x80
 80122be:	0400      	lsls	r0, r0, #16
 80122c0:	e7f7      	b.n	80122b2 <__ieee754_sqrtf+0xce>
 80122c2:	2301      	movs	r3, #1
 80122c4:	3401      	adds	r4, #1
 80122c6:	439c      	bics	r4, r3
 80122c8:	e7ea      	b.n	80122a0 <__ieee754_sqrtf+0xbc>
 80122ca:	46c0      	nop			@ (mov r8, r8)
 80122cc:	20000318 	.word	0x20000318
 80122d0:	20000314 	.word	0x20000314

080122d4 <__ieee754_expf>:
 80122d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80122d6:	21ff      	movs	r1, #255	@ 0xff
 80122d8:	0043      	lsls	r3, r0, #1
 80122da:	1c04      	adds	r4, r0, #0
 80122dc:	085b      	lsrs	r3, r3, #1
 80122de:	05c9      	lsls	r1, r1, #23
 80122e0:	428b      	cmp	r3, r1
 80122e2:	d904      	bls.n	80122ee <__ieee754_expf+0x1a>
 80122e4:	1c01      	adds	r1, r0, #0
 80122e6:	1c20      	adds	r0, r4, #0
 80122e8:	f7ee fa68 	bl	80007bc <__aeabi_fadd>
 80122ec:	e00d      	b.n	801230a <__ieee754_expf+0x36>
 80122ee:	0fc6      	lsrs	r6, r0, #31
 80122f0:	428b      	cmp	r3, r1
 80122f2:	d104      	bne.n	80122fe <__ieee754_expf+0x2a>
 80122f4:	2e00      	cmp	r6, #0
 80122f6:	d000      	beq.n	80122fa <__ieee754_expf+0x26>
 80122f8:	e0ba      	b.n	8012470 <__ieee754_expf+0x19c>
 80122fa:	1c20      	adds	r0, r4, #0
 80122fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80122fe:	495d      	ldr	r1, [pc, #372]	@ (8012474 <__ieee754_expf+0x1a0>)
 8012300:	4288      	cmp	r0, r1
 8012302:	dd04      	ble.n	801230e <__ieee754_expf+0x3a>
 8012304:	2000      	movs	r0, #0
 8012306:	f000 f8f1 	bl	80124ec <__math_oflowf>
 801230a:	1c04      	adds	r4, r0, #0
 801230c:	e7f5      	b.n	80122fa <__ieee754_expf+0x26>
 801230e:	2800      	cmp	r0, #0
 8012310:	da06      	bge.n	8012320 <__ieee754_expf+0x4c>
 8012312:	4a59      	ldr	r2, [pc, #356]	@ (8012478 <__ieee754_expf+0x1a4>)
 8012314:	4293      	cmp	r3, r2
 8012316:	d903      	bls.n	8012320 <__ieee754_expf+0x4c>
 8012318:	2000      	movs	r0, #0
 801231a:	f000 f8e1 	bl	80124e0 <__math_uflowf>
 801231e:	e7f4      	b.n	801230a <__ieee754_expf+0x36>
 8012320:	4a56      	ldr	r2, [pc, #344]	@ (801247c <__ieee754_expf+0x1a8>)
 8012322:	4293      	cmp	r3, r2
 8012324:	d96e      	bls.n	8012404 <__ieee754_expf+0x130>
 8012326:	4a56      	ldr	r2, [pc, #344]	@ (8012480 <__ieee754_expf+0x1ac>)
 8012328:	00b5      	lsls	r5, r6, #2
 801232a:	4293      	cmp	r3, r2
 801232c:	d84e      	bhi.n	80123cc <__ieee754_expf+0xf8>
 801232e:	4b55      	ldr	r3, [pc, #340]	@ (8012484 <__ieee754_expf+0x1b0>)
 8012330:	1c20      	adds	r0, r4, #0
 8012332:	5959      	ldr	r1, [r3, r5]
 8012334:	f7ee fef0 	bl	8001118 <__aeabi_fsub>
 8012338:	4b53      	ldr	r3, [pc, #332]	@ (8012488 <__ieee754_expf+0x1b4>)
 801233a:	1c07      	adds	r7, r0, #0
 801233c:	595b      	ldr	r3, [r3, r5]
 801233e:	2501      	movs	r5, #1
 8012340:	1bad      	subs	r5, r5, r6
 8012342:	9300      	str	r3, [sp, #0]
 8012344:	1bad      	subs	r5, r5, r6
 8012346:	9900      	ldr	r1, [sp, #0]
 8012348:	1c38      	adds	r0, r7, #0
 801234a:	f7ee fee5 	bl	8001118 <__aeabi_fsub>
 801234e:	1c04      	adds	r4, r0, #0
 8012350:	1c21      	adds	r1, r4, #0
 8012352:	1c20      	adds	r0, r4, #0
 8012354:	f7ee fda2 	bl	8000e9c <__aeabi_fmul>
 8012358:	494c      	ldr	r1, [pc, #304]	@ (801248c <__ieee754_expf+0x1b8>)
 801235a:	1c06      	adds	r6, r0, #0
 801235c:	f7ee fd9e 	bl	8000e9c <__aeabi_fmul>
 8012360:	494b      	ldr	r1, [pc, #300]	@ (8012490 <__ieee754_expf+0x1bc>)
 8012362:	f7ee fed9 	bl	8001118 <__aeabi_fsub>
 8012366:	1c31      	adds	r1, r6, #0
 8012368:	f7ee fd98 	bl	8000e9c <__aeabi_fmul>
 801236c:	4949      	ldr	r1, [pc, #292]	@ (8012494 <__ieee754_expf+0x1c0>)
 801236e:	f7ee fa25 	bl	80007bc <__aeabi_fadd>
 8012372:	1c31      	adds	r1, r6, #0
 8012374:	f7ee fd92 	bl	8000e9c <__aeabi_fmul>
 8012378:	4947      	ldr	r1, [pc, #284]	@ (8012498 <__ieee754_expf+0x1c4>)
 801237a:	f7ee fecd 	bl	8001118 <__aeabi_fsub>
 801237e:	1c31      	adds	r1, r6, #0
 8012380:	f7ee fd8c 	bl	8000e9c <__aeabi_fmul>
 8012384:	4945      	ldr	r1, [pc, #276]	@ (801249c <__ieee754_expf+0x1c8>)
 8012386:	f7ee fa19 	bl	80007bc <__aeabi_fadd>
 801238a:	1c31      	adds	r1, r6, #0
 801238c:	f7ee fd86 	bl	8000e9c <__aeabi_fmul>
 8012390:	1c01      	adds	r1, r0, #0
 8012392:	1c20      	adds	r0, r4, #0
 8012394:	f7ee fec0 	bl	8001118 <__aeabi_fsub>
 8012398:	1c01      	adds	r1, r0, #0
 801239a:	1c06      	adds	r6, r0, #0
 801239c:	1c20      	adds	r0, r4, #0
 801239e:	f7ee fd7d 	bl	8000e9c <__aeabi_fmul>
 80123a2:	9001      	str	r0, [sp, #4]
 80123a4:	2d00      	cmp	r5, #0
 80123a6:	d140      	bne.n	801242a <__ieee754_expf+0x156>
 80123a8:	2180      	movs	r1, #128	@ 0x80
 80123aa:	1c30      	adds	r0, r6, #0
 80123ac:	05c9      	lsls	r1, r1, #23
 80123ae:	f7ee feb3 	bl	8001118 <__aeabi_fsub>
 80123b2:	1c01      	adds	r1, r0, #0
 80123b4:	9801      	ldr	r0, [sp, #4]
 80123b6:	f7ee fb8b 	bl	8000ad0 <__aeabi_fdiv>
 80123ba:	1c21      	adds	r1, r4, #0
 80123bc:	f7ee feac 	bl	8001118 <__aeabi_fsub>
 80123c0:	1c01      	adds	r1, r0, #0
 80123c2:	20fe      	movs	r0, #254	@ 0xfe
 80123c4:	0580      	lsls	r0, r0, #22
 80123c6:	f7ee fea7 	bl	8001118 <__aeabi_fsub>
 80123ca:	e79e      	b.n	801230a <__ieee754_expf+0x36>
 80123cc:	4934      	ldr	r1, [pc, #208]	@ (80124a0 <__ieee754_expf+0x1cc>)
 80123ce:	1c20      	adds	r0, r4, #0
 80123d0:	f7ee fd64 	bl	8000e9c <__aeabi_fmul>
 80123d4:	4b33      	ldr	r3, [pc, #204]	@ (80124a4 <__ieee754_expf+0x1d0>)
 80123d6:	5959      	ldr	r1, [r3, r5]
 80123d8:	f7ee f9f0 	bl	80007bc <__aeabi_fadd>
 80123dc:	f7ef f856 	bl	800148c <__aeabi_f2iz>
 80123e0:	0005      	movs	r5, r0
 80123e2:	f7ef f873 	bl	80014cc <__aeabi_i2f>
 80123e6:	4930      	ldr	r1, [pc, #192]	@ (80124a8 <__ieee754_expf+0x1d4>)
 80123e8:	1c06      	adds	r6, r0, #0
 80123ea:	f7ee fd57 	bl	8000e9c <__aeabi_fmul>
 80123ee:	1c01      	adds	r1, r0, #0
 80123f0:	1c20      	adds	r0, r4, #0
 80123f2:	f7ee fe91 	bl	8001118 <__aeabi_fsub>
 80123f6:	492d      	ldr	r1, [pc, #180]	@ (80124ac <__ieee754_expf+0x1d8>)
 80123f8:	1c07      	adds	r7, r0, #0
 80123fa:	1c30      	adds	r0, r6, #0
 80123fc:	f7ee fd4e 	bl	8000e9c <__aeabi_fmul>
 8012400:	9000      	str	r0, [sp, #0]
 8012402:	e7a0      	b.n	8012346 <__ieee754_expf+0x72>
 8012404:	22d0      	movs	r2, #208	@ 0xd0
 8012406:	0592      	lsls	r2, r2, #22
 8012408:	4293      	cmp	r3, r2
 801240a:	d20c      	bcs.n	8012426 <__ieee754_expf+0x152>
 801240c:	4928      	ldr	r1, [pc, #160]	@ (80124b0 <__ieee754_expf+0x1dc>)
 801240e:	1c20      	adds	r0, r4, #0
 8012410:	f7ee f9d4 	bl	80007bc <__aeabi_fadd>
 8012414:	21fe      	movs	r1, #254	@ 0xfe
 8012416:	0589      	lsls	r1, r1, #22
 8012418:	f7ee f86c 	bl	80004f4 <__aeabi_fcmpgt>
 801241c:	1e05      	subs	r5, r0, #0
 801241e:	d097      	beq.n	8012350 <__ieee754_expf+0x7c>
 8012420:	21fe      	movs	r1, #254	@ 0xfe
 8012422:	0589      	lsls	r1, r1, #22
 8012424:	e75f      	b.n	80122e6 <__ieee754_expf+0x12>
 8012426:	2500      	movs	r5, #0
 8012428:	e792      	b.n	8012350 <__ieee754_expf+0x7c>
 801242a:	2080      	movs	r0, #128	@ 0x80
 801242c:	1c31      	adds	r1, r6, #0
 801242e:	05c0      	lsls	r0, r0, #23
 8012430:	f7ee fe72 	bl	8001118 <__aeabi_fsub>
 8012434:	1c01      	adds	r1, r0, #0
 8012436:	9801      	ldr	r0, [sp, #4]
 8012438:	f7ee fb4a 	bl	8000ad0 <__aeabi_fdiv>
 801243c:	1c01      	adds	r1, r0, #0
 801243e:	9800      	ldr	r0, [sp, #0]
 8012440:	f7ee fe6a 	bl	8001118 <__aeabi_fsub>
 8012444:	1c39      	adds	r1, r7, #0
 8012446:	f7ee fe67 	bl	8001118 <__aeabi_fsub>
 801244a:	1c01      	adds	r1, r0, #0
 801244c:	20fe      	movs	r0, #254	@ 0xfe
 801244e:	0580      	lsls	r0, r0, #22
 8012450:	f7ee fe62 	bl	8001118 <__aeabi_fsub>
 8012454:	002b      	movs	r3, r5
 8012456:	337d      	adds	r3, #125	@ 0x7d
 8012458:	db02      	blt.n	8012460 <__ieee754_expf+0x18c>
 801245a:	05ec      	lsls	r4, r5, #23
 801245c:	1824      	adds	r4, r4, r0
 801245e:	e74c      	b.n	80122fa <__ieee754_expf+0x26>
 8012460:	21d8      	movs	r1, #216	@ 0xd8
 8012462:	3564      	adds	r5, #100	@ 0x64
 8012464:	05ed      	lsls	r5, r5, #23
 8012466:	1828      	adds	r0, r5, r0
 8012468:	0509      	lsls	r1, r1, #20
 801246a:	f7ee fd17 	bl	8000e9c <__aeabi_fmul>
 801246e:	e74c      	b.n	801230a <__ieee754_expf+0x36>
 8012470:	2400      	movs	r4, #0
 8012472:	e742      	b.n	80122fa <__ieee754_expf+0x26>
 8012474:	42b17217 	.word	0x42b17217
 8012478:	42cff1b5 	.word	0x42cff1b5
 801247c:	3eb17218 	.word	0x3eb17218
 8012480:	3f851591 	.word	0x3f851591
 8012484:	080133b0 	.word	0x080133b0
 8012488:	080133a8 	.word	0x080133a8
 801248c:	3331bb4c 	.word	0x3331bb4c
 8012490:	35ddea0e 	.word	0x35ddea0e
 8012494:	388ab355 	.word	0x388ab355
 8012498:	3b360b61 	.word	0x3b360b61
 801249c:	3e2aaaab 	.word	0x3e2aaaab
 80124a0:	3fb8aa3b 	.word	0x3fb8aa3b
 80124a4:	080133b8 	.word	0x080133b8
 80124a8:	3f317180 	.word	0x3f317180
 80124ac:	3717f7d1 	.word	0x3717f7d1
 80124b0:	7149f2ca 	.word	0x7149f2ca

080124b4 <with_errnof>:
 80124b4:	b570      	push	{r4, r5, r6, lr}
 80124b6:	000d      	movs	r5, r1
 80124b8:	1c04      	adds	r4, r0, #0
 80124ba:	f7fd fd2b 	bl	800ff14 <__errno>
 80124be:	6005      	str	r5, [r0, #0]
 80124c0:	1c20      	adds	r0, r4, #0
 80124c2:	bd70      	pop	{r4, r5, r6, pc}

080124c4 <xflowf>:
 80124c4:	b510      	push	{r4, lr}
 80124c6:	1c0b      	adds	r3, r1, #0
 80124c8:	2800      	cmp	r0, #0
 80124ca:	d002      	beq.n	80124d2 <xflowf+0xe>
 80124cc:	2380      	movs	r3, #128	@ 0x80
 80124ce:	061b      	lsls	r3, r3, #24
 80124d0:	18cb      	adds	r3, r1, r3
 80124d2:	1c18      	adds	r0, r3, #0
 80124d4:	f7ee fce2 	bl	8000e9c <__aeabi_fmul>
 80124d8:	2122      	movs	r1, #34	@ 0x22
 80124da:	f7ff ffeb 	bl	80124b4 <with_errnof>
 80124de:	bd10      	pop	{r4, pc}

080124e0 <__math_uflowf>:
 80124e0:	2180      	movs	r1, #128	@ 0x80
 80124e2:	b510      	push	{r4, lr}
 80124e4:	0549      	lsls	r1, r1, #21
 80124e6:	f7ff ffed 	bl	80124c4 <xflowf>
 80124ea:	bd10      	pop	{r4, pc}

080124ec <__math_oflowf>:
 80124ec:	21e0      	movs	r1, #224	@ 0xe0
 80124ee:	b510      	push	{r4, lr}
 80124f0:	05c9      	lsls	r1, r1, #23
 80124f2:	f7ff ffe7 	bl	80124c4 <xflowf>
 80124f6:	bd10      	pop	{r4, pc}

080124f8 <_init>:
 80124f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80124fa:	46c0      	nop			@ (mov r8, r8)
 80124fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80124fe:	bc08      	pop	{r3}
 8012500:	469e      	mov	lr, r3
 8012502:	4770      	bx	lr

08012504 <_fini>:
 8012504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012506:	46c0      	nop			@ (mov r8, r8)
 8012508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801250a:	bc08      	pop	{r3}
 801250c:	469e      	mov	lr, r3
 801250e:	4770      	bx	lr
