
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011a40  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000eb0  08011b00  08011b00  00012b00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129b0  080129b0  00014318  2**0
                  CONTENTS
  4 .ARM          00000008  080129b0  080129b0  000139b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129b8  080129b8  00014318  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129b8  080129b8  000139b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080129bc  080129bc  000139bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000318  20000000  080129c0  00014000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b8c  20000318  08012cd8  00014318  2**2
                  ALLOC
 10 ._user_heap_stack 00000504  20001ea4  08012cd8  00014ea4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00014318  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e713  00000000  00000000  00014340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005256  00000000  00000000  00032a53  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001930  00000000  00000000  00037cb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000133e  00000000  00000000  000395e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae84  00000000  00000000  0003a91e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00025fbd  00000000  00000000  000557a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ee6e  00000000  00000000  0007b75f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0010a5cd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e48  00000000  00000000  0010a610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00111458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000318 	.word	0x20000318
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08011ae8 	.word	0x08011ae8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000031c 	.word	0x2000031c
 8000104:	08011ae8 	.word	0x08011ae8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f002 f809 	bl	8002454 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff49 	bl	80022e4 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fffb 	bl	8002454 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fff1 	bl	8002454 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff73 	bl	800236c <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff69 	bl	800236c <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fca5 	bl	8000e00 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fc25 	bl	8000d10 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc97 	bl	8000e00 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc8d 	bl	8000e00 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fc33 	bl	8000d60 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fc29 	bl	8000d60 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f86a 	bl	8000624 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__aeabi_f2uiz>:
 80005b8:	219e      	movs	r1, #158	@ 0x9e
 80005ba:	b510      	push	{r4, lr}
 80005bc:	05c9      	lsls	r1, r1, #23
 80005be:	1c04      	adds	r4, r0, #0
 80005c0:	f7ff ffa2 	bl	8000508 <__aeabi_fcmpge>
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d103      	bne.n	80005d0 <__aeabi_f2uiz+0x18>
 80005c8:	1c20      	adds	r0, r4, #0
 80005ca:	f000 ff5f 	bl	800148c <__aeabi_f2iz>
 80005ce:	bd10      	pop	{r4, pc}
 80005d0:	219e      	movs	r1, #158	@ 0x9e
 80005d2:	1c20      	adds	r0, r4, #0
 80005d4:	05c9      	lsls	r1, r1, #23
 80005d6:	f000 fd9f 	bl	8001118 <__aeabi_fsub>
 80005da:	f000 ff57 	bl	800148c <__aeabi_f2iz>
 80005de:	2380      	movs	r3, #128	@ 0x80
 80005e0:	061b      	lsls	r3, r3, #24
 80005e2:	469c      	mov	ip, r3
 80005e4:	4460      	add	r0, ip
 80005e6:	e7f2      	b.n	80005ce <__aeabi_f2uiz+0x16>

080005e8 <__aeabi_d2uiz>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	2200      	movs	r2, #0
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <__aeabi_d2uiz+0x38>)
 80005ee:	0004      	movs	r4, r0
 80005f0:	000d      	movs	r5, r1
 80005f2:	f7ff ff4f 	bl	8000494 <__aeabi_dcmpge>
 80005f6:	2800      	cmp	r0, #0
 80005f8:	d104      	bne.n	8000604 <__aeabi_d2uiz+0x1c>
 80005fa:	0020      	movs	r0, r4
 80005fc:	0029      	movs	r1, r5
 80005fe:	f002 fe21 	bl	8003244 <__aeabi_d2iz>
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	4b06      	ldr	r3, [pc, #24]	@ (8000620 <__aeabi_d2uiz+0x38>)
 8000606:	2200      	movs	r2, #0
 8000608:	0020      	movs	r0, r4
 800060a:	0029      	movs	r1, r5
 800060c:	f002 fa5c 	bl	8002ac8 <__aeabi_dsub>
 8000610:	f002 fe18 	bl	8003244 <__aeabi_d2iz>
 8000614:	2380      	movs	r3, #128	@ 0x80
 8000616:	061b      	lsls	r3, r3, #24
 8000618:	469c      	mov	ip, r3
 800061a:	4460      	add	r0, ip
 800061c:	e7f1      	b.n	8000602 <__aeabi_d2uiz+0x1a>
 800061e:	46c0      	nop			@ (mov r8, r8)
 8000620:	41e00000 	.word	0x41e00000

08000624 <__udivmoddi4>:
 8000624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000626:	4657      	mov	r7, sl
 8000628:	464e      	mov	r6, r9
 800062a:	4645      	mov	r5, r8
 800062c:	46de      	mov	lr, fp
 800062e:	b5e0      	push	{r5, r6, r7, lr}
 8000630:	0004      	movs	r4, r0
 8000632:	000d      	movs	r5, r1
 8000634:	4692      	mov	sl, r2
 8000636:	4699      	mov	r9, r3
 8000638:	b083      	sub	sp, #12
 800063a:	428b      	cmp	r3, r1
 800063c:	d830      	bhi.n	80006a0 <__udivmoddi4+0x7c>
 800063e:	d02d      	beq.n	800069c <__udivmoddi4+0x78>
 8000640:	4649      	mov	r1, r9
 8000642:	4650      	mov	r0, sl
 8000644:	f002 ff76 	bl	8003534 <__clzdi2>
 8000648:	0029      	movs	r1, r5
 800064a:	0006      	movs	r6, r0
 800064c:	0020      	movs	r0, r4
 800064e:	f002 ff71 	bl	8003534 <__clzdi2>
 8000652:	1a33      	subs	r3, r6, r0
 8000654:	4698      	mov	r8, r3
 8000656:	3b20      	subs	r3, #32
 8000658:	d434      	bmi.n	80006c4 <__udivmoddi4+0xa0>
 800065a:	469b      	mov	fp, r3
 800065c:	4653      	mov	r3, sl
 800065e:	465a      	mov	r2, fp
 8000660:	4093      	lsls	r3, r2
 8000662:	4642      	mov	r2, r8
 8000664:	001f      	movs	r7, r3
 8000666:	4653      	mov	r3, sl
 8000668:	4093      	lsls	r3, r2
 800066a:	001e      	movs	r6, r3
 800066c:	42af      	cmp	r7, r5
 800066e:	d83b      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 8000670:	42af      	cmp	r7, r5
 8000672:	d100      	bne.n	8000676 <__udivmoddi4+0x52>
 8000674:	e079      	b.n	800076a <__udivmoddi4+0x146>
 8000676:	465b      	mov	r3, fp
 8000678:	1ba4      	subs	r4, r4, r6
 800067a:	41bd      	sbcs	r5, r7
 800067c:	2b00      	cmp	r3, #0
 800067e:	da00      	bge.n	8000682 <__udivmoddi4+0x5e>
 8000680:	e076      	b.n	8000770 <__udivmoddi4+0x14c>
 8000682:	2200      	movs	r2, #0
 8000684:	2300      	movs	r3, #0
 8000686:	9200      	str	r2, [sp, #0]
 8000688:	9301      	str	r3, [sp, #4]
 800068a:	2301      	movs	r3, #1
 800068c:	465a      	mov	r2, fp
 800068e:	4093      	lsls	r3, r2
 8000690:	9301      	str	r3, [sp, #4]
 8000692:	2301      	movs	r3, #1
 8000694:	4642      	mov	r2, r8
 8000696:	4093      	lsls	r3, r2
 8000698:	9300      	str	r3, [sp, #0]
 800069a:	e029      	b.n	80006f0 <__udivmoddi4+0xcc>
 800069c:	4282      	cmp	r2, r0
 800069e:	d9cf      	bls.n	8000640 <__udivmoddi4+0x1c>
 80006a0:	2200      	movs	r2, #0
 80006a2:	2300      	movs	r3, #0
 80006a4:	9200      	str	r2, [sp, #0]
 80006a6:	9301      	str	r3, [sp, #4]
 80006a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <__udivmoddi4+0x8e>
 80006ae:	601c      	str	r4, [r3, #0]
 80006b0:	605d      	str	r5, [r3, #4]
 80006b2:	9800      	ldr	r0, [sp, #0]
 80006b4:	9901      	ldr	r1, [sp, #4]
 80006b6:	b003      	add	sp, #12
 80006b8:	bcf0      	pop	{r4, r5, r6, r7}
 80006ba:	46bb      	mov	fp, r7
 80006bc:	46b2      	mov	sl, r6
 80006be:	46a9      	mov	r9, r5
 80006c0:	46a0      	mov	r8, r4
 80006c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006c4:	4642      	mov	r2, r8
 80006c6:	469b      	mov	fp, r3
 80006c8:	2320      	movs	r3, #32
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	4652      	mov	r2, sl
 80006ce:	40da      	lsrs	r2, r3
 80006d0:	4641      	mov	r1, r8
 80006d2:	0013      	movs	r3, r2
 80006d4:	464a      	mov	r2, r9
 80006d6:	408a      	lsls	r2, r1
 80006d8:	0017      	movs	r7, r2
 80006da:	4642      	mov	r2, r8
 80006dc:	431f      	orrs	r7, r3
 80006de:	4653      	mov	r3, sl
 80006e0:	4093      	lsls	r3, r2
 80006e2:	001e      	movs	r6, r3
 80006e4:	42af      	cmp	r7, r5
 80006e6:	d9c3      	bls.n	8000670 <__udivmoddi4+0x4c>
 80006e8:	2200      	movs	r2, #0
 80006ea:	2300      	movs	r3, #0
 80006ec:	9200      	str	r2, [sp, #0]
 80006ee:	9301      	str	r3, [sp, #4]
 80006f0:	4643      	mov	r3, r8
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d0d8      	beq.n	80006a8 <__udivmoddi4+0x84>
 80006f6:	07fb      	lsls	r3, r7, #31
 80006f8:	0872      	lsrs	r2, r6, #1
 80006fa:	431a      	orrs	r2, r3
 80006fc:	4646      	mov	r6, r8
 80006fe:	087b      	lsrs	r3, r7, #1
 8000700:	e00e      	b.n	8000720 <__udivmoddi4+0xfc>
 8000702:	42ab      	cmp	r3, r5
 8000704:	d101      	bne.n	800070a <__udivmoddi4+0xe6>
 8000706:	42a2      	cmp	r2, r4
 8000708:	d80c      	bhi.n	8000724 <__udivmoddi4+0x100>
 800070a:	1aa4      	subs	r4, r4, r2
 800070c:	419d      	sbcs	r5, r3
 800070e:	2001      	movs	r0, #1
 8000710:	1924      	adds	r4, r4, r4
 8000712:	416d      	adcs	r5, r5
 8000714:	2100      	movs	r1, #0
 8000716:	3e01      	subs	r6, #1
 8000718:	1824      	adds	r4, r4, r0
 800071a:	414d      	adcs	r5, r1
 800071c:	2e00      	cmp	r6, #0
 800071e:	d006      	beq.n	800072e <__udivmoddi4+0x10a>
 8000720:	42ab      	cmp	r3, r5
 8000722:	d9ee      	bls.n	8000702 <__udivmoddi4+0xde>
 8000724:	3e01      	subs	r6, #1
 8000726:	1924      	adds	r4, r4, r4
 8000728:	416d      	adcs	r5, r5
 800072a:	2e00      	cmp	r6, #0
 800072c:	d1f8      	bne.n	8000720 <__udivmoddi4+0xfc>
 800072e:	9800      	ldr	r0, [sp, #0]
 8000730:	9901      	ldr	r1, [sp, #4]
 8000732:	465b      	mov	r3, fp
 8000734:	1900      	adds	r0, r0, r4
 8000736:	4169      	adcs	r1, r5
 8000738:	2b00      	cmp	r3, #0
 800073a:	db24      	blt.n	8000786 <__udivmoddi4+0x162>
 800073c:	002b      	movs	r3, r5
 800073e:	465a      	mov	r2, fp
 8000740:	4644      	mov	r4, r8
 8000742:	40d3      	lsrs	r3, r2
 8000744:	002a      	movs	r2, r5
 8000746:	40e2      	lsrs	r2, r4
 8000748:	001c      	movs	r4, r3
 800074a:	465b      	mov	r3, fp
 800074c:	0015      	movs	r5, r2
 800074e:	2b00      	cmp	r3, #0
 8000750:	db2a      	blt.n	80007a8 <__udivmoddi4+0x184>
 8000752:	0026      	movs	r6, r4
 8000754:	409e      	lsls	r6, r3
 8000756:	0033      	movs	r3, r6
 8000758:	0026      	movs	r6, r4
 800075a:	4647      	mov	r7, r8
 800075c:	40be      	lsls	r6, r7
 800075e:	0032      	movs	r2, r6
 8000760:	1a80      	subs	r0, r0, r2
 8000762:	4199      	sbcs	r1, r3
 8000764:	9000      	str	r0, [sp, #0]
 8000766:	9101      	str	r1, [sp, #4]
 8000768:	e79e      	b.n	80006a8 <__udivmoddi4+0x84>
 800076a:	42a3      	cmp	r3, r4
 800076c:	d8bc      	bhi.n	80006e8 <__udivmoddi4+0xc4>
 800076e:	e782      	b.n	8000676 <__udivmoddi4+0x52>
 8000770:	4642      	mov	r2, r8
 8000772:	2320      	movs	r3, #32
 8000774:	2100      	movs	r1, #0
 8000776:	1a9b      	subs	r3, r3, r2
 8000778:	2200      	movs	r2, #0
 800077a:	9100      	str	r1, [sp, #0]
 800077c:	9201      	str	r2, [sp, #4]
 800077e:	2201      	movs	r2, #1
 8000780:	40da      	lsrs	r2, r3
 8000782:	9201      	str	r2, [sp, #4]
 8000784:	e785      	b.n	8000692 <__udivmoddi4+0x6e>
 8000786:	4642      	mov	r2, r8
 8000788:	2320      	movs	r3, #32
 800078a:	1a9b      	subs	r3, r3, r2
 800078c:	002a      	movs	r2, r5
 800078e:	4646      	mov	r6, r8
 8000790:	409a      	lsls	r2, r3
 8000792:	0023      	movs	r3, r4
 8000794:	40f3      	lsrs	r3, r6
 8000796:	4644      	mov	r4, r8
 8000798:	4313      	orrs	r3, r2
 800079a:	002a      	movs	r2, r5
 800079c:	40e2      	lsrs	r2, r4
 800079e:	001c      	movs	r4, r3
 80007a0:	465b      	mov	r3, fp
 80007a2:	0015      	movs	r5, r2
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	dad4      	bge.n	8000752 <__udivmoddi4+0x12e>
 80007a8:	4642      	mov	r2, r8
 80007aa:	002f      	movs	r7, r5
 80007ac:	2320      	movs	r3, #32
 80007ae:	0026      	movs	r6, r4
 80007b0:	4097      	lsls	r7, r2
 80007b2:	1a9b      	subs	r3, r3, r2
 80007b4:	40de      	lsrs	r6, r3
 80007b6:	003b      	movs	r3, r7
 80007b8:	4333      	orrs	r3, r6
 80007ba:	e7cd      	b.n	8000758 <__udivmoddi4+0x134>

080007bc <__aeabi_fadd>:
 80007bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80007be:	46ce      	mov	lr, r9
 80007c0:	4647      	mov	r7, r8
 80007c2:	0243      	lsls	r3, r0, #9
 80007c4:	0a5a      	lsrs	r2, r3, #9
 80007c6:	024e      	lsls	r6, r1, #9
 80007c8:	0045      	lsls	r5, r0, #1
 80007ca:	0fc4      	lsrs	r4, r0, #31
 80007cc:	0048      	lsls	r0, r1, #1
 80007ce:	4691      	mov	r9, r2
 80007d0:	0e2d      	lsrs	r5, r5, #24
 80007d2:	0a72      	lsrs	r2, r6, #9
 80007d4:	0e00      	lsrs	r0, r0, #24
 80007d6:	4694      	mov	ip, r2
 80007d8:	b580      	push	{r7, lr}
 80007da:	099b      	lsrs	r3, r3, #6
 80007dc:	0fc9      	lsrs	r1, r1, #31
 80007de:	09b6      	lsrs	r6, r6, #6
 80007e0:	1a2a      	subs	r2, r5, r0
 80007e2:	428c      	cmp	r4, r1
 80007e4:	d021      	beq.n	800082a <__aeabi_fadd+0x6e>
 80007e6:	2a00      	cmp	r2, #0
 80007e8:	dd0d      	ble.n	8000806 <__aeabi_fadd+0x4a>
 80007ea:	2800      	cmp	r0, #0
 80007ec:	d12d      	bne.n	800084a <__aeabi_fadd+0x8e>
 80007ee:	2e00      	cmp	r6, #0
 80007f0:	d100      	bne.n	80007f4 <__aeabi_fadd+0x38>
 80007f2:	e08d      	b.n	8000910 <__aeabi_fadd+0x154>
 80007f4:	1e51      	subs	r1, r2, #1
 80007f6:	2a01      	cmp	r2, #1
 80007f8:	d100      	bne.n	80007fc <__aeabi_fadd+0x40>
 80007fa:	e11d      	b.n	8000a38 <__aeabi_fadd+0x27c>
 80007fc:	2aff      	cmp	r2, #255	@ 0xff
 80007fe:	d100      	bne.n	8000802 <__aeabi_fadd+0x46>
 8000800:	e0ab      	b.n	800095a <__aeabi_fadd+0x19e>
 8000802:	000a      	movs	r2, r1
 8000804:	e027      	b.n	8000856 <__aeabi_fadd+0x9a>
 8000806:	2a00      	cmp	r2, #0
 8000808:	d04d      	beq.n	80008a6 <__aeabi_fadd+0xea>
 800080a:	1b42      	subs	r2, r0, r5
 800080c:	2d00      	cmp	r5, #0
 800080e:	d000      	beq.n	8000812 <__aeabi_fadd+0x56>
 8000810:	e0cc      	b.n	80009ac <__aeabi_fadd+0x1f0>
 8000812:	2b00      	cmp	r3, #0
 8000814:	d100      	bne.n	8000818 <__aeabi_fadd+0x5c>
 8000816:	e079      	b.n	800090c <__aeabi_fadd+0x150>
 8000818:	1e54      	subs	r4, r2, #1
 800081a:	2a01      	cmp	r2, #1
 800081c:	d100      	bne.n	8000820 <__aeabi_fadd+0x64>
 800081e:	e128      	b.n	8000a72 <__aeabi_fadd+0x2b6>
 8000820:	2aff      	cmp	r2, #255	@ 0xff
 8000822:	d100      	bne.n	8000826 <__aeabi_fadd+0x6a>
 8000824:	e097      	b.n	8000956 <__aeabi_fadd+0x19a>
 8000826:	0022      	movs	r2, r4
 8000828:	e0c5      	b.n	80009b6 <__aeabi_fadd+0x1fa>
 800082a:	2a00      	cmp	r2, #0
 800082c:	dc00      	bgt.n	8000830 <__aeabi_fadd+0x74>
 800082e:	e096      	b.n	800095e <__aeabi_fadd+0x1a2>
 8000830:	2800      	cmp	r0, #0
 8000832:	d04f      	beq.n	80008d4 <__aeabi_fadd+0x118>
 8000834:	2dff      	cmp	r5, #255	@ 0xff
 8000836:	d100      	bne.n	800083a <__aeabi_fadd+0x7e>
 8000838:	e08f      	b.n	800095a <__aeabi_fadd+0x19e>
 800083a:	2180      	movs	r1, #128	@ 0x80
 800083c:	04c9      	lsls	r1, r1, #19
 800083e:	430e      	orrs	r6, r1
 8000840:	2a1b      	cmp	r2, #27
 8000842:	dd51      	ble.n	80008e8 <__aeabi_fadd+0x12c>
 8000844:	002a      	movs	r2, r5
 8000846:	3301      	adds	r3, #1
 8000848:	e018      	b.n	800087c <__aeabi_fadd+0xc0>
 800084a:	2dff      	cmp	r5, #255	@ 0xff
 800084c:	d100      	bne.n	8000850 <__aeabi_fadd+0x94>
 800084e:	e084      	b.n	800095a <__aeabi_fadd+0x19e>
 8000850:	2180      	movs	r1, #128	@ 0x80
 8000852:	04c9      	lsls	r1, r1, #19
 8000854:	430e      	orrs	r6, r1
 8000856:	2101      	movs	r1, #1
 8000858:	2a1b      	cmp	r2, #27
 800085a:	dc08      	bgt.n	800086e <__aeabi_fadd+0xb2>
 800085c:	0031      	movs	r1, r6
 800085e:	2020      	movs	r0, #32
 8000860:	40d1      	lsrs	r1, r2
 8000862:	1a82      	subs	r2, r0, r2
 8000864:	4096      	lsls	r6, r2
 8000866:	0032      	movs	r2, r6
 8000868:	1e50      	subs	r0, r2, #1
 800086a:	4182      	sbcs	r2, r0
 800086c:	4311      	orrs	r1, r2
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	015a      	lsls	r2, r3, #5
 8000872:	d459      	bmi.n	8000928 <__aeabi_fadd+0x16c>
 8000874:	2107      	movs	r1, #7
 8000876:	002a      	movs	r2, r5
 8000878:	4019      	ands	r1, r3
 800087a:	d049      	beq.n	8000910 <__aeabi_fadd+0x154>
 800087c:	210f      	movs	r1, #15
 800087e:	4019      	ands	r1, r3
 8000880:	2904      	cmp	r1, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fadd+0xca>
 8000884:	3304      	adds	r3, #4
 8000886:	0159      	lsls	r1, r3, #5
 8000888:	d542      	bpl.n	8000910 <__aeabi_fadd+0x154>
 800088a:	1c50      	adds	r0, r2, #1
 800088c:	2afe      	cmp	r2, #254	@ 0xfe
 800088e:	d03a      	beq.n	8000906 <__aeabi_fadd+0x14a>
 8000890:	019b      	lsls	r3, r3, #6
 8000892:	b2c0      	uxtb	r0, r0
 8000894:	0a5b      	lsrs	r3, r3, #9
 8000896:	05c0      	lsls	r0, r0, #23
 8000898:	4318      	orrs	r0, r3
 800089a:	07e4      	lsls	r4, r4, #31
 800089c:	4320      	orrs	r0, r4
 800089e:	bcc0      	pop	{r6, r7}
 80008a0:	46b9      	mov	r9, r7
 80008a2:	46b0      	mov	r8, r6
 80008a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80008a6:	20fe      	movs	r0, #254	@ 0xfe
 80008a8:	4680      	mov	r8, r0
 80008aa:	1c6f      	adds	r7, r5, #1
 80008ac:	0038      	movs	r0, r7
 80008ae:	4647      	mov	r7, r8
 80008b0:	4207      	tst	r7, r0
 80008b2:	d000      	beq.n	80008b6 <__aeabi_fadd+0xfa>
 80008b4:	e08e      	b.n	80009d4 <__aeabi_fadd+0x218>
 80008b6:	2d00      	cmp	r5, #0
 80008b8:	d000      	beq.n	80008bc <__aeabi_fadd+0x100>
 80008ba:	e0b4      	b.n	8000a26 <__aeabi_fadd+0x26a>
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d100      	bne.n	80008c2 <__aeabi_fadd+0x106>
 80008c0:	e0db      	b.n	8000a7a <__aeabi_fadd+0x2be>
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	d06c      	beq.n	80009a0 <__aeabi_fadd+0x1e4>
 80008c6:	1b98      	subs	r0, r3, r6
 80008c8:	0145      	lsls	r5, r0, #5
 80008ca:	d400      	bmi.n	80008ce <__aeabi_fadd+0x112>
 80008cc:	e0f7      	b.n	8000abe <__aeabi_fadd+0x302>
 80008ce:	000c      	movs	r4, r1
 80008d0:	1af3      	subs	r3, r6, r3
 80008d2:	e03d      	b.n	8000950 <__aeabi_fadd+0x194>
 80008d4:	2e00      	cmp	r6, #0
 80008d6:	d01b      	beq.n	8000910 <__aeabi_fadd+0x154>
 80008d8:	1e51      	subs	r1, r2, #1
 80008da:	2a01      	cmp	r2, #1
 80008dc:	d100      	bne.n	80008e0 <__aeabi_fadd+0x124>
 80008de:	e082      	b.n	80009e6 <__aeabi_fadd+0x22a>
 80008e0:	2aff      	cmp	r2, #255	@ 0xff
 80008e2:	d03a      	beq.n	800095a <__aeabi_fadd+0x19e>
 80008e4:	000a      	movs	r2, r1
 80008e6:	e7ab      	b.n	8000840 <__aeabi_fadd+0x84>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	430a      	orrs	r2, r1
 80008fa:	189b      	adds	r3, r3, r2
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d5b9      	bpl.n	8000874 <__aeabi_fadd+0xb8>
 8000900:	1c6a      	adds	r2, r5, #1
 8000902:	2dfe      	cmp	r5, #254	@ 0xfe
 8000904:	d175      	bne.n	80009f2 <__aeabi_fadd+0x236>
 8000906:	20ff      	movs	r0, #255	@ 0xff
 8000908:	2300      	movs	r3, #0
 800090a:	e7c4      	b.n	8000896 <__aeabi_fadd+0xda>
 800090c:	000c      	movs	r4, r1
 800090e:	0033      	movs	r3, r6
 8000910:	08db      	lsrs	r3, r3, #3
 8000912:	2aff      	cmp	r2, #255	@ 0xff
 8000914:	d146      	bne.n	80009a4 <__aeabi_fadd+0x1e8>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d0f5      	beq.n	8000906 <__aeabi_fadd+0x14a>
 800091a:	2280      	movs	r2, #128	@ 0x80
 800091c:	03d2      	lsls	r2, r2, #15
 800091e:	4313      	orrs	r3, r2
 8000920:	025b      	lsls	r3, r3, #9
 8000922:	20ff      	movs	r0, #255	@ 0xff
 8000924:	0a5b      	lsrs	r3, r3, #9
 8000926:	e7b6      	b.n	8000896 <__aeabi_fadd+0xda>
 8000928:	019f      	lsls	r7, r3, #6
 800092a:	09bf      	lsrs	r7, r7, #6
 800092c:	0038      	movs	r0, r7
 800092e:	f002 fde3 	bl	80034f8 <__clzsi2>
 8000932:	3805      	subs	r0, #5
 8000934:	4087      	lsls	r7, r0
 8000936:	4285      	cmp	r5, r0
 8000938:	dc24      	bgt.n	8000984 <__aeabi_fadd+0x1c8>
 800093a:	003b      	movs	r3, r7
 800093c:	2120      	movs	r1, #32
 800093e:	1b42      	subs	r2, r0, r5
 8000940:	3201      	adds	r2, #1
 8000942:	40d3      	lsrs	r3, r2
 8000944:	1a8a      	subs	r2, r1, r2
 8000946:	4097      	lsls	r7, r2
 8000948:	1e7a      	subs	r2, r7, #1
 800094a:	4197      	sbcs	r7, r2
 800094c:	2200      	movs	r2, #0
 800094e:	433b      	orrs	r3, r7
 8000950:	0759      	lsls	r1, r3, #29
 8000952:	d193      	bne.n	800087c <__aeabi_fadd+0xc0>
 8000954:	e797      	b.n	8000886 <__aeabi_fadd+0xca>
 8000956:	000c      	movs	r4, r1
 8000958:	0033      	movs	r3, r6
 800095a:	08db      	lsrs	r3, r3, #3
 800095c:	e7db      	b.n	8000916 <__aeabi_fadd+0x15a>
 800095e:	2a00      	cmp	r2, #0
 8000960:	d014      	beq.n	800098c <__aeabi_fadd+0x1d0>
 8000962:	1b42      	subs	r2, r0, r5
 8000964:	2d00      	cmp	r5, #0
 8000966:	d14b      	bne.n	8000a00 <__aeabi_fadd+0x244>
 8000968:	2b00      	cmp	r3, #0
 800096a:	d0d0      	beq.n	800090e <__aeabi_fadd+0x152>
 800096c:	1e51      	subs	r1, r2, #1
 800096e:	2a01      	cmp	r2, #1
 8000970:	d100      	bne.n	8000974 <__aeabi_fadd+0x1b8>
 8000972:	e09e      	b.n	8000ab2 <__aeabi_fadd+0x2f6>
 8000974:	2aff      	cmp	r2, #255	@ 0xff
 8000976:	d0ef      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000978:	000a      	movs	r2, r1
 800097a:	2a1b      	cmp	r2, #27
 800097c:	dd5f      	ble.n	8000a3e <__aeabi_fadd+0x282>
 800097e:	0002      	movs	r2, r0
 8000980:	1c73      	adds	r3, r6, #1
 8000982:	e77b      	b.n	800087c <__aeabi_fadd+0xc0>
 8000984:	4b50      	ldr	r3, [pc, #320]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000986:	1a2a      	subs	r2, r5, r0
 8000988:	403b      	ands	r3, r7
 800098a:	e7e1      	b.n	8000950 <__aeabi_fadd+0x194>
 800098c:	21fe      	movs	r1, #254	@ 0xfe
 800098e:	1c6a      	adds	r2, r5, #1
 8000990:	4211      	tst	r1, r2
 8000992:	d13b      	bne.n	8000a0c <__aeabi_fadd+0x250>
 8000994:	2d00      	cmp	r5, #0
 8000996:	d15d      	bne.n	8000a54 <__aeabi_fadd+0x298>
 8000998:	2b00      	cmp	r3, #0
 800099a:	d07f      	beq.n	8000a9c <__aeabi_fadd+0x2e0>
 800099c:	2e00      	cmp	r6, #0
 800099e:	d17f      	bne.n	8000aa0 <__aeabi_fadd+0x2e4>
 80009a0:	2200      	movs	r2, #0
 80009a2:	08db      	lsrs	r3, r3, #3
 80009a4:	025b      	lsls	r3, r3, #9
 80009a6:	0a5b      	lsrs	r3, r3, #9
 80009a8:	b2d0      	uxtb	r0, r2
 80009aa:	e774      	b.n	8000896 <__aeabi_fadd+0xda>
 80009ac:	28ff      	cmp	r0, #255	@ 0xff
 80009ae:	d0d2      	beq.n	8000956 <__aeabi_fadd+0x19a>
 80009b0:	2480      	movs	r4, #128	@ 0x80
 80009b2:	04e4      	lsls	r4, r4, #19
 80009b4:	4323      	orrs	r3, r4
 80009b6:	2401      	movs	r4, #1
 80009b8:	2a1b      	cmp	r2, #27
 80009ba:	dc07      	bgt.n	80009cc <__aeabi_fadd+0x210>
 80009bc:	001c      	movs	r4, r3
 80009be:	2520      	movs	r5, #32
 80009c0:	40d4      	lsrs	r4, r2
 80009c2:	1aaa      	subs	r2, r5, r2
 80009c4:	4093      	lsls	r3, r2
 80009c6:	1e5a      	subs	r2, r3, #1
 80009c8:	4193      	sbcs	r3, r2
 80009ca:	431c      	orrs	r4, r3
 80009cc:	1b33      	subs	r3, r6, r4
 80009ce:	0005      	movs	r5, r0
 80009d0:	000c      	movs	r4, r1
 80009d2:	e74d      	b.n	8000870 <__aeabi_fadd+0xb4>
 80009d4:	1b9f      	subs	r7, r3, r6
 80009d6:	017a      	lsls	r2, r7, #5
 80009d8:	d422      	bmi.n	8000a20 <__aeabi_fadd+0x264>
 80009da:	2f00      	cmp	r7, #0
 80009dc:	d1a6      	bne.n	800092c <__aeabi_fadd+0x170>
 80009de:	2400      	movs	r4, #0
 80009e0:	2000      	movs	r0, #0
 80009e2:	2300      	movs	r3, #0
 80009e4:	e757      	b.n	8000896 <__aeabi_fadd+0xda>
 80009e6:	199b      	adds	r3, r3, r6
 80009e8:	2501      	movs	r5, #1
 80009ea:	3201      	adds	r2, #1
 80009ec:	0159      	lsls	r1, r3, #5
 80009ee:	d400      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 80009f0:	e740      	b.n	8000874 <__aeabi_fadd+0xb8>
 80009f2:	2101      	movs	r1, #1
 80009f4:	4835      	ldr	r0, [pc, #212]	@ (8000acc <__aeabi_fadd+0x310>)
 80009f6:	4019      	ands	r1, r3
 80009f8:	085b      	lsrs	r3, r3, #1
 80009fa:	4003      	ands	r3, r0
 80009fc:	430b      	orrs	r3, r1
 80009fe:	e7a7      	b.n	8000950 <__aeabi_fadd+0x194>
 8000a00:	28ff      	cmp	r0, #255	@ 0xff
 8000a02:	d0a9      	beq.n	8000958 <__aeabi_fadd+0x19c>
 8000a04:	2180      	movs	r1, #128	@ 0x80
 8000a06:	04c9      	lsls	r1, r1, #19
 8000a08:	430b      	orrs	r3, r1
 8000a0a:	e7b6      	b.n	800097a <__aeabi_fadd+0x1be>
 8000a0c:	2aff      	cmp	r2, #255	@ 0xff
 8000a0e:	d100      	bne.n	8000a12 <__aeabi_fadd+0x256>
 8000a10:	e779      	b.n	8000906 <__aeabi_fadd+0x14a>
 8000a12:	199b      	adds	r3, r3, r6
 8000a14:	085b      	lsrs	r3, r3, #1
 8000a16:	0759      	lsls	r1, r3, #29
 8000a18:	d000      	beq.n	8000a1c <__aeabi_fadd+0x260>
 8000a1a:	e72f      	b.n	800087c <__aeabi_fadd+0xc0>
 8000a1c:	08db      	lsrs	r3, r3, #3
 8000a1e:	e7c1      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000a20:	000c      	movs	r4, r1
 8000a22:	1af7      	subs	r7, r6, r3
 8000a24:	e782      	b.n	800092c <__aeabi_fadd+0x170>
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d12c      	bne.n	8000a84 <__aeabi_fadd+0x2c8>
 8000a2a:	2e00      	cmp	r6, #0
 8000a2c:	d193      	bne.n	8000956 <__aeabi_fadd+0x19a>
 8000a2e:	2380      	movs	r3, #128	@ 0x80
 8000a30:	2400      	movs	r4, #0
 8000a32:	20ff      	movs	r0, #255	@ 0xff
 8000a34:	03db      	lsls	r3, r3, #15
 8000a36:	e72e      	b.n	8000896 <__aeabi_fadd+0xda>
 8000a38:	2501      	movs	r5, #1
 8000a3a:	1b9b      	subs	r3, r3, r6
 8000a3c:	e718      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a3e:	0019      	movs	r1, r3
 8000a40:	2520      	movs	r5, #32
 8000a42:	40d1      	lsrs	r1, r2
 8000a44:	1aaa      	subs	r2, r5, r2
 8000a46:	4093      	lsls	r3, r2
 8000a48:	1e5a      	subs	r2, r3, #1
 8000a4a:	4193      	sbcs	r3, r2
 8000a4c:	430b      	orrs	r3, r1
 8000a4e:	0005      	movs	r5, r0
 8000a50:	199b      	adds	r3, r3, r6
 8000a52:	e753      	b.n	80008fc <__aeabi_fadd+0x140>
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d100      	bne.n	8000a5a <__aeabi_fadd+0x29e>
 8000a58:	e77e      	b.n	8000958 <__aeabi_fadd+0x19c>
 8000a5a:	2e00      	cmp	r6, #0
 8000a5c:	d100      	bne.n	8000a60 <__aeabi_fadd+0x2a4>
 8000a5e:	e77c      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a60:	2280      	movs	r2, #128	@ 0x80
 8000a62:	03d2      	lsls	r2, r2, #15
 8000a64:	4591      	cmp	r9, r2
 8000a66:	d302      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a68:	4594      	cmp	ip, r2
 8000a6a:	d200      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a6c:	0033      	movs	r3, r6
 8000a6e:	08db      	lsrs	r3, r3, #3
 8000a70:	e753      	b.n	800091a <__aeabi_fadd+0x15e>
 8000a72:	000c      	movs	r4, r1
 8000a74:	1af3      	subs	r3, r6, r3
 8000a76:	3501      	adds	r5, #1
 8000a78:	e6fa      	b.n	8000870 <__aeabi_fadd+0xb4>
 8000a7a:	2e00      	cmp	r6, #0
 8000a7c:	d0af      	beq.n	80009de <__aeabi_fadd+0x222>
 8000a7e:	000c      	movs	r4, r1
 8000a80:	0033      	movs	r3, r6
 8000a82:	e78d      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000a84:	2e00      	cmp	r6, #0
 8000a86:	d100      	bne.n	8000a8a <__aeabi_fadd+0x2ce>
 8000a88:	e767      	b.n	800095a <__aeabi_fadd+0x19e>
 8000a8a:	2280      	movs	r2, #128	@ 0x80
 8000a8c:	03d2      	lsls	r2, r2, #15
 8000a8e:	4591      	cmp	r9, r2
 8000a90:	d3ed      	bcc.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a92:	4594      	cmp	ip, r2
 8000a94:	d2eb      	bcs.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a96:	000c      	movs	r4, r1
 8000a98:	0033      	movs	r3, r6
 8000a9a:	e7e8      	b.n	8000a6e <__aeabi_fadd+0x2b2>
 8000a9c:	0033      	movs	r3, r6
 8000a9e:	e77f      	b.n	80009a0 <__aeabi_fadd+0x1e4>
 8000aa0:	199b      	adds	r3, r3, r6
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	0159      	lsls	r1, r3, #5
 8000aa6:	d5b9      	bpl.n	8000a1c <__aeabi_fadd+0x260>
 8000aa8:	4a07      	ldr	r2, [pc, #28]	@ (8000ac8 <__aeabi_fadd+0x30c>)
 8000aaa:	4013      	ands	r3, r2
 8000aac:	08db      	lsrs	r3, r3, #3
 8000aae:	2201      	movs	r2, #1
 8000ab0:	e778      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ab2:	199b      	adds	r3, r3, r6
 8000ab4:	3201      	adds	r2, #1
 8000ab6:	3501      	adds	r5, #1
 8000ab8:	0159      	lsls	r1, r3, #5
 8000aba:	d49a      	bmi.n	80009f2 <__aeabi_fadd+0x236>
 8000abc:	e6da      	b.n	8000874 <__aeabi_fadd+0xb8>
 8000abe:	1e03      	subs	r3, r0, #0
 8000ac0:	d08d      	beq.n	80009de <__aeabi_fadd+0x222>
 8000ac2:	08db      	lsrs	r3, r3, #3
 8000ac4:	e76e      	b.n	80009a4 <__aeabi_fadd+0x1e8>
 8000ac6:	46c0      	nop			@ (mov r8, r8)
 8000ac8:	fbffffff 	.word	0xfbffffff
 8000acc:	7dffffff 	.word	0x7dffffff

08000ad0 <__aeabi_fdiv>:
 8000ad0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000ad2:	464f      	mov	r7, r9
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	46d6      	mov	lr, sl
 8000ad8:	0244      	lsls	r4, r0, #9
 8000ada:	b5c0      	push	{r6, r7, lr}
 8000adc:	0047      	lsls	r7, r0, #1
 8000ade:	1c0e      	adds	r6, r1, #0
 8000ae0:	0a64      	lsrs	r4, r4, #9
 8000ae2:	0e3f      	lsrs	r7, r7, #24
 8000ae4:	0fc5      	lsrs	r5, r0, #31
 8000ae6:	2f00      	cmp	r7, #0
 8000ae8:	d03c      	beq.n	8000b64 <__aeabi_fdiv+0x94>
 8000aea:	2fff      	cmp	r7, #255	@ 0xff
 8000aec:	d042      	beq.n	8000b74 <__aeabi_fdiv+0xa4>
 8000aee:	2300      	movs	r3, #0
 8000af0:	2280      	movs	r2, #128	@ 0x80
 8000af2:	4699      	mov	r9, r3
 8000af4:	469a      	mov	sl, r3
 8000af6:	00e4      	lsls	r4, r4, #3
 8000af8:	04d2      	lsls	r2, r2, #19
 8000afa:	4314      	orrs	r4, r2
 8000afc:	3f7f      	subs	r7, #127	@ 0x7f
 8000afe:	0273      	lsls	r3, r6, #9
 8000b00:	0a5b      	lsrs	r3, r3, #9
 8000b02:	4698      	mov	r8, r3
 8000b04:	0073      	lsls	r3, r6, #1
 8000b06:	0e1b      	lsrs	r3, r3, #24
 8000b08:	0ff6      	lsrs	r6, r6, #31
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01b      	beq.n	8000b46 <__aeabi_fdiv+0x76>
 8000b0e:	2bff      	cmp	r3, #255	@ 0xff
 8000b10:	d013      	beq.n	8000b3a <__aeabi_fdiv+0x6a>
 8000b12:	4642      	mov	r2, r8
 8000b14:	2180      	movs	r1, #128	@ 0x80
 8000b16:	00d2      	lsls	r2, r2, #3
 8000b18:	04c9      	lsls	r1, r1, #19
 8000b1a:	4311      	orrs	r1, r2
 8000b1c:	4688      	mov	r8, r1
 8000b1e:	2000      	movs	r0, #0
 8000b20:	3b7f      	subs	r3, #127	@ 0x7f
 8000b22:	0029      	movs	r1, r5
 8000b24:	1aff      	subs	r7, r7, r3
 8000b26:	464b      	mov	r3, r9
 8000b28:	4071      	eors	r1, r6
 8000b2a:	b2c9      	uxtb	r1, r1
 8000b2c:	2b0f      	cmp	r3, #15
 8000b2e:	d900      	bls.n	8000b32 <__aeabi_fdiv+0x62>
 8000b30:	e0b5      	b.n	8000c9e <__aeabi_fdiv+0x1ce>
 8000b32:	4a74      	ldr	r2, [pc, #464]	@ (8000d04 <__aeabi_fdiv+0x234>)
 8000b34:	009b      	lsls	r3, r3, #2
 8000b36:	58d3      	ldr	r3, [r2, r3]
 8000b38:	469f      	mov	pc, r3
 8000b3a:	4643      	mov	r3, r8
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d13f      	bne.n	8000bc0 <__aeabi_fdiv+0xf0>
 8000b40:	3fff      	subs	r7, #255	@ 0xff
 8000b42:	3302      	adds	r3, #2
 8000b44:	e003      	b.n	8000b4e <__aeabi_fdiv+0x7e>
 8000b46:	4643      	mov	r3, r8
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d12d      	bne.n	8000ba8 <__aeabi_fdiv+0xd8>
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	0029      	movs	r1, r5
 8000b50:	464a      	mov	r2, r9
 8000b52:	4071      	eors	r1, r6
 8000b54:	b2c9      	uxtb	r1, r1
 8000b56:	431a      	orrs	r2, r3
 8000b58:	2a0e      	cmp	r2, #14
 8000b5a:	d838      	bhi.n	8000bce <__aeabi_fdiv+0xfe>
 8000b5c:	486a      	ldr	r0, [pc, #424]	@ (8000d08 <__aeabi_fdiv+0x238>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	5882      	ldr	r2, [r0, r2]
 8000b62:	4697      	mov	pc, r2
 8000b64:	2c00      	cmp	r4, #0
 8000b66:	d113      	bne.n	8000b90 <__aeabi_fdiv+0xc0>
 8000b68:	2304      	movs	r3, #4
 8000b6a:	4699      	mov	r9, r3
 8000b6c:	3b03      	subs	r3, #3
 8000b6e:	2700      	movs	r7, #0
 8000b70:	469a      	mov	sl, r3
 8000b72:	e7c4      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b74:	2c00      	cmp	r4, #0
 8000b76:	d105      	bne.n	8000b84 <__aeabi_fdiv+0xb4>
 8000b78:	2308      	movs	r3, #8
 8000b7a:	4699      	mov	r9, r3
 8000b7c:	3b06      	subs	r3, #6
 8000b7e:	27ff      	movs	r7, #255	@ 0xff
 8000b80:	469a      	mov	sl, r3
 8000b82:	e7bc      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b84:	230c      	movs	r3, #12
 8000b86:	4699      	mov	r9, r3
 8000b88:	3b09      	subs	r3, #9
 8000b8a:	27ff      	movs	r7, #255	@ 0xff
 8000b8c:	469a      	mov	sl, r3
 8000b8e:	e7b6      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000b90:	0020      	movs	r0, r4
 8000b92:	f002 fcb1 	bl	80034f8 <__clzsi2>
 8000b96:	2776      	movs	r7, #118	@ 0x76
 8000b98:	1f43      	subs	r3, r0, #5
 8000b9a:	409c      	lsls	r4, r3
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	427f      	negs	r7, r7
 8000ba0:	4699      	mov	r9, r3
 8000ba2:	469a      	mov	sl, r3
 8000ba4:	1a3f      	subs	r7, r7, r0
 8000ba6:	e7aa      	b.n	8000afe <__aeabi_fdiv+0x2e>
 8000ba8:	4640      	mov	r0, r8
 8000baa:	f002 fca5 	bl	80034f8 <__clzsi2>
 8000bae:	4642      	mov	r2, r8
 8000bb0:	1f43      	subs	r3, r0, #5
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	2376      	movs	r3, #118	@ 0x76
 8000bb6:	425b      	negs	r3, r3
 8000bb8:	1a1b      	subs	r3, r3, r0
 8000bba:	4690      	mov	r8, r2
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e7b0      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	464a      	mov	r2, r9
 8000bc4:	431a      	orrs	r2, r3
 8000bc6:	4691      	mov	r9, r2
 8000bc8:	2003      	movs	r0, #3
 8000bca:	33fc      	adds	r3, #252	@ 0xfc
 8000bcc:	e7a9      	b.n	8000b22 <__aeabi_fdiv+0x52>
 8000bce:	000d      	movs	r5, r1
 8000bd0:	20ff      	movs	r0, #255	@ 0xff
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	05c0      	lsls	r0, r0, #23
 8000bd6:	07ed      	lsls	r5, r5, #31
 8000bd8:	4310      	orrs	r0, r2
 8000bda:	4328      	orrs	r0, r5
 8000bdc:	bce0      	pop	{r5, r6, r7}
 8000bde:	46ba      	mov	sl, r7
 8000be0:	46b1      	mov	r9, r6
 8000be2:	46a8      	mov	r8, r5
 8000be4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000be6:	000d      	movs	r5, r1
 8000be8:	2000      	movs	r0, #0
 8000bea:	2200      	movs	r2, #0
 8000bec:	e7f2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000bee:	4653      	mov	r3, sl
 8000bf0:	2b02      	cmp	r3, #2
 8000bf2:	d0ed      	beq.n	8000bd0 <__aeabi_fdiv+0x100>
 8000bf4:	2b03      	cmp	r3, #3
 8000bf6:	d033      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000bf8:	46a0      	mov	r8, r4
 8000bfa:	2b01      	cmp	r3, #1
 8000bfc:	d105      	bne.n	8000c0a <__aeabi_fdiv+0x13a>
 8000bfe:	2000      	movs	r0, #0
 8000c00:	2200      	movs	r2, #0
 8000c02:	e7e7      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c04:	0035      	movs	r5, r6
 8000c06:	2803      	cmp	r0, #3
 8000c08:	d07a      	beq.n	8000d00 <__aeabi_fdiv+0x230>
 8000c0a:	003b      	movs	r3, r7
 8000c0c:	337f      	adds	r3, #127	@ 0x7f
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	dd2d      	ble.n	8000c6e <__aeabi_fdiv+0x19e>
 8000c12:	4642      	mov	r2, r8
 8000c14:	0752      	lsls	r2, r2, #29
 8000c16:	d007      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c18:	220f      	movs	r2, #15
 8000c1a:	4641      	mov	r1, r8
 8000c1c:	400a      	ands	r2, r1
 8000c1e:	2a04      	cmp	r2, #4
 8000c20:	d002      	beq.n	8000c28 <__aeabi_fdiv+0x158>
 8000c22:	2204      	movs	r2, #4
 8000c24:	4694      	mov	ip, r2
 8000c26:	44e0      	add	r8, ip
 8000c28:	4642      	mov	r2, r8
 8000c2a:	0112      	lsls	r2, r2, #4
 8000c2c:	d505      	bpl.n	8000c3a <__aeabi_fdiv+0x16a>
 8000c2e:	4642      	mov	r2, r8
 8000c30:	4b36      	ldr	r3, [pc, #216]	@ (8000d0c <__aeabi_fdiv+0x23c>)
 8000c32:	401a      	ands	r2, r3
 8000c34:	003b      	movs	r3, r7
 8000c36:	4690      	mov	r8, r2
 8000c38:	3380      	adds	r3, #128	@ 0x80
 8000c3a:	2bfe      	cmp	r3, #254	@ 0xfe
 8000c3c:	dcc8      	bgt.n	8000bd0 <__aeabi_fdiv+0x100>
 8000c3e:	4642      	mov	r2, r8
 8000c40:	0192      	lsls	r2, r2, #6
 8000c42:	0a52      	lsrs	r2, r2, #9
 8000c44:	b2d8      	uxtb	r0, r3
 8000c46:	e7c5      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c48:	2280      	movs	r2, #128	@ 0x80
 8000c4a:	2500      	movs	r5, #0
 8000c4c:	20ff      	movs	r0, #255	@ 0xff
 8000c4e:	03d2      	lsls	r2, r2, #15
 8000c50:	e7c0      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c52:	2280      	movs	r2, #128	@ 0x80
 8000c54:	03d2      	lsls	r2, r2, #15
 8000c56:	4214      	tst	r4, r2
 8000c58:	d002      	beq.n	8000c60 <__aeabi_fdiv+0x190>
 8000c5a:	4643      	mov	r3, r8
 8000c5c:	4213      	tst	r3, r2
 8000c5e:	d049      	beq.n	8000cf4 <__aeabi_fdiv+0x224>
 8000c60:	2280      	movs	r2, #128	@ 0x80
 8000c62:	03d2      	lsls	r2, r2, #15
 8000c64:	4322      	orrs	r2, r4
 8000c66:	0252      	lsls	r2, r2, #9
 8000c68:	20ff      	movs	r0, #255	@ 0xff
 8000c6a:	0a52      	lsrs	r2, r2, #9
 8000c6c:	e7b2      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c6e:	2201      	movs	r2, #1
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	2b1b      	cmp	r3, #27
 8000c74:	dcc3      	bgt.n	8000bfe <__aeabi_fdiv+0x12e>
 8000c76:	4642      	mov	r2, r8
 8000c78:	40da      	lsrs	r2, r3
 8000c7a:	4643      	mov	r3, r8
 8000c7c:	379e      	adds	r7, #158	@ 0x9e
 8000c7e:	40bb      	lsls	r3, r7
 8000c80:	1e59      	subs	r1, r3, #1
 8000c82:	418b      	sbcs	r3, r1
 8000c84:	431a      	orrs	r2, r3
 8000c86:	0753      	lsls	r3, r2, #29
 8000c88:	d004      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c8a:	230f      	movs	r3, #15
 8000c8c:	4013      	ands	r3, r2
 8000c8e:	2b04      	cmp	r3, #4
 8000c90:	d000      	beq.n	8000c94 <__aeabi_fdiv+0x1c4>
 8000c92:	3204      	adds	r2, #4
 8000c94:	0153      	lsls	r3, r2, #5
 8000c96:	d529      	bpl.n	8000cec <__aeabi_fdiv+0x21c>
 8000c98:	2001      	movs	r0, #1
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	e79a      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0163      	lsls	r3, r4, #5
 8000ca2:	0155      	lsls	r5, r2, #5
 8000ca4:	42ab      	cmp	r3, r5
 8000ca6:	d215      	bcs.n	8000cd4 <__aeabi_fdiv+0x204>
 8000ca8:	201b      	movs	r0, #27
 8000caa:	2200      	movs	r2, #0
 8000cac:	3f01      	subs	r7, #1
 8000cae:	2601      	movs	r6, #1
 8000cb0:	001c      	movs	r4, r3
 8000cb2:	0052      	lsls	r2, r2, #1
 8000cb4:	005b      	lsls	r3, r3, #1
 8000cb6:	2c00      	cmp	r4, #0
 8000cb8:	db01      	blt.n	8000cbe <__aeabi_fdiv+0x1ee>
 8000cba:	429d      	cmp	r5, r3
 8000cbc:	d801      	bhi.n	8000cc2 <__aeabi_fdiv+0x1f2>
 8000cbe:	1b5b      	subs	r3, r3, r5
 8000cc0:	4332      	orrs	r2, r6
 8000cc2:	3801      	subs	r0, #1
 8000cc4:	2800      	cmp	r0, #0
 8000cc6:	d1f3      	bne.n	8000cb0 <__aeabi_fdiv+0x1e0>
 8000cc8:	1e58      	subs	r0, r3, #1
 8000cca:	4183      	sbcs	r3, r0
 8000ccc:	4313      	orrs	r3, r2
 8000cce:	4698      	mov	r8, r3
 8000cd0:	000d      	movs	r5, r1
 8000cd2:	e79a      	b.n	8000c0a <__aeabi_fdiv+0x13a>
 8000cd4:	201a      	movs	r0, #26
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	1b5b      	subs	r3, r3, r5
 8000cda:	e7e8      	b.n	8000cae <__aeabi_fdiv+0x1de>
 8000cdc:	3b02      	subs	r3, #2
 8000cde:	425a      	negs	r2, r3
 8000ce0:	4153      	adcs	r3, r2
 8000ce2:	425b      	negs	r3, r3
 8000ce4:	0035      	movs	r5, r6
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	b2d8      	uxtb	r0, r3
 8000cea:	e773      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cec:	0192      	lsls	r2, r2, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	0a52      	lsrs	r2, r2, #9
 8000cf2:	e76f      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000cf4:	431a      	orrs	r2, r3
 8000cf6:	0252      	lsls	r2, r2, #9
 8000cf8:	0035      	movs	r5, r6
 8000cfa:	20ff      	movs	r0, #255	@ 0xff
 8000cfc:	0a52      	lsrs	r2, r2, #9
 8000cfe:	e769      	b.n	8000bd4 <__aeabi_fdiv+0x104>
 8000d00:	4644      	mov	r4, r8
 8000d02:	e7ad      	b.n	8000c60 <__aeabi_fdiv+0x190>
 8000d04:	08012484 	.word	0x08012484
 8000d08:	080124c4 	.word	0x080124c4
 8000d0c:	f7ffffff 	.word	0xf7ffffff

08000d10 <__eqsf2>:
 8000d10:	b570      	push	{r4, r5, r6, lr}
 8000d12:	0042      	lsls	r2, r0, #1
 8000d14:	024e      	lsls	r6, r1, #9
 8000d16:	004c      	lsls	r4, r1, #1
 8000d18:	0245      	lsls	r5, r0, #9
 8000d1a:	0a6d      	lsrs	r5, r5, #9
 8000d1c:	0e12      	lsrs	r2, r2, #24
 8000d1e:	0fc3      	lsrs	r3, r0, #31
 8000d20:	0a76      	lsrs	r6, r6, #9
 8000d22:	0e24      	lsrs	r4, r4, #24
 8000d24:	0fc9      	lsrs	r1, r1, #31
 8000d26:	2aff      	cmp	r2, #255	@ 0xff
 8000d28:	d010      	beq.n	8000d4c <__eqsf2+0x3c>
 8000d2a:	2cff      	cmp	r4, #255	@ 0xff
 8000d2c:	d00c      	beq.n	8000d48 <__eqsf2+0x38>
 8000d2e:	2001      	movs	r0, #1
 8000d30:	42a2      	cmp	r2, r4
 8000d32:	d10a      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d34:	42b5      	cmp	r5, r6
 8000d36:	d108      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	d00f      	beq.n	8000d5c <__eqsf2+0x4c>
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	d104      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d40:	0028      	movs	r0, r5
 8000d42:	1e43      	subs	r3, r0, #1
 8000d44:	4198      	sbcs	r0, r3
 8000d46:	e000      	b.n	8000d4a <__eqsf2+0x3a>
 8000d48:	2001      	movs	r0, #1
 8000d4a:	bd70      	pop	{r4, r5, r6, pc}
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	2cff      	cmp	r4, #255	@ 0xff
 8000d50:	d1fb      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d52:	4335      	orrs	r5, r6
 8000d54:	d1f9      	bne.n	8000d4a <__eqsf2+0x3a>
 8000d56:	404b      	eors	r3, r1
 8000d58:	0018      	movs	r0, r3
 8000d5a:	e7f6      	b.n	8000d4a <__eqsf2+0x3a>
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	e7f4      	b.n	8000d4a <__eqsf2+0x3a>

08000d60 <__gesf2>:
 8000d60:	b530      	push	{r4, r5, lr}
 8000d62:	0042      	lsls	r2, r0, #1
 8000d64:	0244      	lsls	r4, r0, #9
 8000d66:	024d      	lsls	r5, r1, #9
 8000d68:	0fc3      	lsrs	r3, r0, #31
 8000d6a:	0048      	lsls	r0, r1, #1
 8000d6c:	0a64      	lsrs	r4, r4, #9
 8000d6e:	0e12      	lsrs	r2, r2, #24
 8000d70:	0a6d      	lsrs	r5, r5, #9
 8000d72:	0e00      	lsrs	r0, r0, #24
 8000d74:	0fc9      	lsrs	r1, r1, #31
 8000d76:	2aff      	cmp	r2, #255	@ 0xff
 8000d78:	d019      	beq.n	8000dae <__gesf2+0x4e>
 8000d7a:	28ff      	cmp	r0, #255	@ 0xff
 8000d7c:	d00b      	beq.n	8000d96 <__gesf2+0x36>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d11e      	bne.n	8000dc0 <__gesf2+0x60>
 8000d82:	2800      	cmp	r0, #0
 8000d84:	d10b      	bne.n	8000d9e <__gesf2+0x3e>
 8000d86:	2d00      	cmp	r5, #0
 8000d88:	d027      	beq.n	8000dda <__gesf2+0x7a>
 8000d8a:	2c00      	cmp	r4, #0
 8000d8c:	d134      	bne.n	8000df8 <__gesf2+0x98>
 8000d8e:	2900      	cmp	r1, #0
 8000d90:	d02f      	beq.n	8000df2 <__gesf2+0x92>
 8000d92:	0008      	movs	r0, r1
 8000d94:	bd30      	pop	{r4, r5, pc}
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d128      	bne.n	8000dec <__gesf2+0x8c>
 8000d9a:	2a00      	cmp	r2, #0
 8000d9c:	d101      	bne.n	8000da2 <__gesf2+0x42>
 8000d9e:	2c00      	cmp	r4, #0
 8000da0:	d0f5      	beq.n	8000d8e <__gesf2+0x2e>
 8000da2:	428b      	cmp	r3, r1
 8000da4:	d107      	bne.n	8000db6 <__gesf2+0x56>
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d023      	beq.n	8000df2 <__gesf2+0x92>
 8000daa:	0018      	movs	r0, r3
 8000dac:	e7f2      	b.n	8000d94 <__gesf2+0x34>
 8000dae:	2c00      	cmp	r4, #0
 8000db0:	d11c      	bne.n	8000dec <__gesf2+0x8c>
 8000db2:	28ff      	cmp	r0, #255	@ 0xff
 8000db4:	d014      	beq.n	8000de0 <__gesf2+0x80>
 8000db6:	1e58      	subs	r0, r3, #1
 8000db8:	2302      	movs	r3, #2
 8000dba:	4018      	ands	r0, r3
 8000dbc:	3801      	subs	r0, #1
 8000dbe:	e7e9      	b.n	8000d94 <__gesf2+0x34>
 8000dc0:	2800      	cmp	r0, #0
 8000dc2:	d0f8      	beq.n	8000db6 <__gesf2+0x56>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d1f6      	bne.n	8000db6 <__gesf2+0x56>
 8000dc8:	4282      	cmp	r2, r0
 8000dca:	dcf4      	bgt.n	8000db6 <__gesf2+0x56>
 8000dcc:	dbeb      	blt.n	8000da6 <__gesf2+0x46>
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	d8f1      	bhi.n	8000db6 <__gesf2+0x56>
 8000dd2:	2000      	movs	r0, #0
 8000dd4:	42ac      	cmp	r4, r5
 8000dd6:	d2dd      	bcs.n	8000d94 <__gesf2+0x34>
 8000dd8:	e7e5      	b.n	8000da6 <__gesf2+0x46>
 8000dda:	2c00      	cmp	r4, #0
 8000ddc:	d0da      	beq.n	8000d94 <__gesf2+0x34>
 8000dde:	e7ea      	b.n	8000db6 <__gesf2+0x56>
 8000de0:	2d00      	cmp	r5, #0
 8000de2:	d103      	bne.n	8000dec <__gesf2+0x8c>
 8000de4:	428b      	cmp	r3, r1
 8000de6:	d1e6      	bne.n	8000db6 <__gesf2+0x56>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7d3      	b.n	8000d94 <__gesf2+0x34>
 8000dec:	2002      	movs	r0, #2
 8000dee:	4240      	negs	r0, r0
 8000df0:	e7d0      	b.n	8000d94 <__gesf2+0x34>
 8000df2:	2001      	movs	r0, #1
 8000df4:	4240      	negs	r0, r0
 8000df6:	e7cd      	b.n	8000d94 <__gesf2+0x34>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d0e8      	beq.n	8000dce <__gesf2+0x6e>
 8000dfc:	e7db      	b.n	8000db6 <__gesf2+0x56>
 8000dfe:	46c0      	nop			@ (mov r8, r8)

08000e00 <__lesf2>:
 8000e00:	b530      	push	{r4, r5, lr}
 8000e02:	0042      	lsls	r2, r0, #1
 8000e04:	0244      	lsls	r4, r0, #9
 8000e06:	024d      	lsls	r5, r1, #9
 8000e08:	0fc3      	lsrs	r3, r0, #31
 8000e0a:	0048      	lsls	r0, r1, #1
 8000e0c:	0a64      	lsrs	r4, r4, #9
 8000e0e:	0e12      	lsrs	r2, r2, #24
 8000e10:	0a6d      	lsrs	r5, r5, #9
 8000e12:	0e00      	lsrs	r0, r0, #24
 8000e14:	0fc9      	lsrs	r1, r1, #31
 8000e16:	2aff      	cmp	r2, #255	@ 0xff
 8000e18:	d01a      	beq.n	8000e50 <__lesf2+0x50>
 8000e1a:	28ff      	cmp	r0, #255	@ 0xff
 8000e1c:	d00e      	beq.n	8000e3c <__lesf2+0x3c>
 8000e1e:	2a00      	cmp	r2, #0
 8000e20:	d11e      	bne.n	8000e60 <__lesf2+0x60>
 8000e22:	2800      	cmp	r0, #0
 8000e24:	d10e      	bne.n	8000e44 <__lesf2+0x44>
 8000e26:	2d00      	cmp	r5, #0
 8000e28:	d02a      	beq.n	8000e80 <__lesf2+0x80>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d00c      	beq.n	8000e48 <__lesf2+0x48>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d01d      	beq.n	8000e6e <__lesf2+0x6e>
 8000e32:	1e58      	subs	r0, r3, #1
 8000e34:	2302      	movs	r3, #2
 8000e36:	4018      	ands	r0, r3
 8000e38:	3801      	subs	r0, #1
 8000e3a:	e010      	b.n	8000e5e <__lesf2+0x5e>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	d10d      	bne.n	8000e5c <__lesf2+0x5c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d120      	bne.n	8000e86 <__lesf2+0x86>
 8000e44:	2c00      	cmp	r4, #0
 8000e46:	d11e      	bne.n	8000e86 <__lesf2+0x86>
 8000e48:	2900      	cmp	r1, #0
 8000e4a:	d023      	beq.n	8000e94 <__lesf2+0x94>
 8000e4c:	0008      	movs	r0, r1
 8000e4e:	e006      	b.n	8000e5e <__lesf2+0x5e>
 8000e50:	2c00      	cmp	r4, #0
 8000e52:	d103      	bne.n	8000e5c <__lesf2+0x5c>
 8000e54:	28ff      	cmp	r0, #255	@ 0xff
 8000e56:	d1ec      	bne.n	8000e32 <__lesf2+0x32>
 8000e58:	2d00      	cmp	r5, #0
 8000e5a:	d017      	beq.n	8000e8c <__lesf2+0x8c>
 8000e5c:	2002      	movs	r0, #2
 8000e5e:	bd30      	pop	{r4, r5, pc}
 8000e60:	2800      	cmp	r0, #0
 8000e62:	d0e6      	beq.n	8000e32 <__lesf2+0x32>
 8000e64:	428b      	cmp	r3, r1
 8000e66:	d1e4      	bne.n	8000e32 <__lesf2+0x32>
 8000e68:	4282      	cmp	r2, r0
 8000e6a:	dce2      	bgt.n	8000e32 <__lesf2+0x32>
 8000e6c:	db04      	blt.n	8000e78 <__lesf2+0x78>
 8000e6e:	42ac      	cmp	r4, r5
 8000e70:	d8df      	bhi.n	8000e32 <__lesf2+0x32>
 8000e72:	2000      	movs	r0, #0
 8000e74:	42ac      	cmp	r4, r5
 8000e76:	d2f2      	bcs.n	8000e5e <__lesf2+0x5e>
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	d00b      	beq.n	8000e94 <__lesf2+0x94>
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	e7ee      	b.n	8000e5e <__lesf2+0x5e>
 8000e80:	2c00      	cmp	r4, #0
 8000e82:	d0ec      	beq.n	8000e5e <__lesf2+0x5e>
 8000e84:	e7d5      	b.n	8000e32 <__lesf2+0x32>
 8000e86:	428b      	cmp	r3, r1
 8000e88:	d1d3      	bne.n	8000e32 <__lesf2+0x32>
 8000e8a:	e7f5      	b.n	8000e78 <__lesf2+0x78>
 8000e8c:	2000      	movs	r0, #0
 8000e8e:	428b      	cmp	r3, r1
 8000e90:	d0e5      	beq.n	8000e5e <__lesf2+0x5e>
 8000e92:	e7ce      	b.n	8000e32 <__lesf2+0x32>
 8000e94:	2001      	movs	r0, #1
 8000e96:	4240      	negs	r0, r0
 8000e98:	e7e1      	b.n	8000e5e <__lesf2+0x5e>
 8000e9a:	46c0      	nop			@ (mov r8, r8)

08000e9c <__aeabi_fmul>:
 8000e9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e9e:	464f      	mov	r7, r9
 8000ea0:	4646      	mov	r6, r8
 8000ea2:	46d6      	mov	lr, sl
 8000ea4:	0243      	lsls	r3, r0, #9
 8000ea6:	0a5b      	lsrs	r3, r3, #9
 8000ea8:	0045      	lsls	r5, r0, #1
 8000eaa:	b5c0      	push	{r6, r7, lr}
 8000eac:	4699      	mov	r9, r3
 8000eae:	1c0f      	adds	r7, r1, #0
 8000eb0:	0e2d      	lsrs	r5, r5, #24
 8000eb2:	0fc6      	lsrs	r6, r0, #31
 8000eb4:	2d00      	cmp	r5, #0
 8000eb6:	d100      	bne.n	8000eba <__aeabi_fmul+0x1e>
 8000eb8:	e088      	b.n	8000fcc <__aeabi_fmul+0x130>
 8000eba:	2dff      	cmp	r5, #255	@ 0xff
 8000ebc:	d100      	bne.n	8000ec0 <__aeabi_fmul+0x24>
 8000ebe:	e08d      	b.n	8000fdc <__aeabi_fmul+0x140>
 8000ec0:	2280      	movs	r2, #128	@ 0x80
 8000ec2:	00db      	lsls	r3, r3, #3
 8000ec4:	04d2      	lsls	r2, r2, #19
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	2300      	movs	r3, #0
 8000eca:	4691      	mov	r9, r2
 8000ecc:	4698      	mov	r8, r3
 8000ece:	469a      	mov	sl, r3
 8000ed0:	3d7f      	subs	r5, #127	@ 0x7f
 8000ed2:	027c      	lsls	r4, r7, #9
 8000ed4:	007b      	lsls	r3, r7, #1
 8000ed6:	0a64      	lsrs	r4, r4, #9
 8000ed8:	0e1b      	lsrs	r3, r3, #24
 8000eda:	0fff      	lsrs	r7, r7, #31
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d068      	beq.n	8000fb2 <__aeabi_fmul+0x116>
 8000ee0:	2bff      	cmp	r3, #255	@ 0xff
 8000ee2:	d021      	beq.n	8000f28 <__aeabi_fmul+0x8c>
 8000ee4:	2280      	movs	r2, #128	@ 0x80
 8000ee6:	00e4      	lsls	r4, r4, #3
 8000ee8:	04d2      	lsls	r2, r2, #19
 8000eea:	4314      	orrs	r4, r2
 8000eec:	4642      	mov	r2, r8
 8000eee:	3b7f      	subs	r3, #127	@ 0x7f
 8000ef0:	195b      	adds	r3, r3, r5
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	1c5d      	adds	r5, r3, #1
 8000ef6:	2a0a      	cmp	r2, #10
 8000ef8:	dc2e      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 8000efa:	407e      	eors	r6, r7
 8000efc:	4642      	mov	r2, r8
 8000efe:	2a02      	cmp	r2, #2
 8000f00:	dc23      	bgt.n	8000f4a <__aeabi_fmul+0xae>
 8000f02:	3a01      	subs	r2, #1
 8000f04:	2a01      	cmp	r2, #1
 8000f06:	d900      	bls.n	8000f0a <__aeabi_fmul+0x6e>
 8000f08:	e0bd      	b.n	8001086 <__aeabi_fmul+0x1ea>
 8000f0a:	2902      	cmp	r1, #2
 8000f0c:	d06e      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f0e:	2901      	cmp	r1, #1
 8000f10:	d12c      	bne.n	8000f6c <__aeabi_fmul+0xd0>
 8000f12:	2000      	movs	r0, #0
 8000f14:	2200      	movs	r2, #0
 8000f16:	05c0      	lsls	r0, r0, #23
 8000f18:	07f6      	lsls	r6, r6, #31
 8000f1a:	4310      	orrs	r0, r2
 8000f1c:	4330      	orrs	r0, r6
 8000f1e:	bce0      	pop	{r5, r6, r7}
 8000f20:	46ba      	mov	sl, r7
 8000f22:	46b1      	mov	r9, r6
 8000f24:	46a8      	mov	r8, r5
 8000f26:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f28:	002b      	movs	r3, r5
 8000f2a:	33ff      	adds	r3, #255	@ 0xff
 8000f2c:	2c00      	cmp	r4, #0
 8000f2e:	d065      	beq.n	8000ffc <__aeabi_fmul+0x160>
 8000f30:	2203      	movs	r2, #3
 8000f32:	4641      	mov	r1, r8
 8000f34:	4311      	orrs	r1, r2
 8000f36:	0032      	movs	r2, r6
 8000f38:	3501      	adds	r5, #1
 8000f3a:	4688      	mov	r8, r1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	35ff      	adds	r5, #255	@ 0xff
 8000f40:	290a      	cmp	r1, #10
 8000f42:	dd00      	ble.n	8000f46 <__aeabi_fmul+0xaa>
 8000f44:	e0d8      	b.n	80010f8 <__aeabi_fmul+0x25c>
 8000f46:	0016      	movs	r6, r2
 8000f48:	2103      	movs	r1, #3
 8000f4a:	4640      	mov	r0, r8
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	4082      	lsls	r2, r0
 8000f50:	20a6      	movs	r0, #166	@ 0xa6
 8000f52:	00c0      	lsls	r0, r0, #3
 8000f54:	4202      	tst	r2, r0
 8000f56:	d020      	beq.n	8000f9a <__aeabi_fmul+0xfe>
 8000f58:	4653      	mov	r3, sl
 8000f5a:	2b02      	cmp	r3, #2
 8000f5c:	d046      	beq.n	8000fec <__aeabi_fmul+0x150>
 8000f5e:	2b03      	cmp	r3, #3
 8000f60:	d100      	bne.n	8000f64 <__aeabi_fmul+0xc8>
 8000f62:	e0bb      	b.n	80010dc <__aeabi_fmul+0x240>
 8000f64:	4651      	mov	r1, sl
 8000f66:	464c      	mov	r4, r9
 8000f68:	2901      	cmp	r1, #1
 8000f6a:	d0d2      	beq.n	8000f12 <__aeabi_fmul+0x76>
 8000f6c:	002b      	movs	r3, r5
 8000f6e:	337f      	adds	r3, #127	@ 0x7f
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	dd70      	ble.n	8001056 <__aeabi_fmul+0x1ba>
 8000f74:	0762      	lsls	r2, r4, #29
 8000f76:	d004      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f78:	220f      	movs	r2, #15
 8000f7a:	4022      	ands	r2, r4
 8000f7c:	2a04      	cmp	r2, #4
 8000f7e:	d000      	beq.n	8000f82 <__aeabi_fmul+0xe6>
 8000f80:	3404      	adds	r4, #4
 8000f82:	0122      	lsls	r2, r4, #4
 8000f84:	d503      	bpl.n	8000f8e <__aeabi_fmul+0xf2>
 8000f86:	4b63      	ldr	r3, [pc, #396]	@ (8001114 <__aeabi_fmul+0x278>)
 8000f88:	401c      	ands	r4, r3
 8000f8a:	002b      	movs	r3, r5
 8000f8c:	3380      	adds	r3, #128	@ 0x80
 8000f8e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f90:	dc2c      	bgt.n	8000fec <__aeabi_fmul+0x150>
 8000f92:	01a2      	lsls	r2, r4, #6
 8000f94:	0a52      	lsrs	r2, r2, #9
 8000f96:	b2d8      	uxtb	r0, r3
 8000f98:	e7bd      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000f9a:	2090      	movs	r0, #144	@ 0x90
 8000f9c:	0080      	lsls	r0, r0, #2
 8000f9e:	4202      	tst	r2, r0
 8000fa0:	d127      	bne.n	8000ff2 <__aeabi_fmul+0x156>
 8000fa2:	38b9      	subs	r0, #185	@ 0xb9
 8000fa4:	38ff      	subs	r0, #255	@ 0xff
 8000fa6:	4210      	tst	r0, r2
 8000fa8:	d06d      	beq.n	8001086 <__aeabi_fmul+0x1ea>
 8000faa:	003e      	movs	r6, r7
 8000fac:	46a1      	mov	r9, r4
 8000fae:	468a      	mov	sl, r1
 8000fb0:	e7d2      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fb2:	2c00      	cmp	r4, #0
 8000fb4:	d141      	bne.n	800103a <__aeabi_fmul+0x19e>
 8000fb6:	2301      	movs	r3, #1
 8000fb8:	4642      	mov	r2, r8
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	4690      	mov	r8, r2
 8000fbe:	002b      	movs	r3, r5
 8000fc0:	4642      	mov	r2, r8
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	1c5d      	adds	r5, r3, #1
 8000fc6:	2a0a      	cmp	r2, #10
 8000fc8:	dd97      	ble.n	8000efa <__aeabi_fmul+0x5e>
 8000fca:	e7c5      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d126      	bne.n	800101e <__aeabi_fmul+0x182>
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	4698      	mov	r8, r3
 8000fd4:	3b03      	subs	r3, #3
 8000fd6:	2500      	movs	r5, #0
 8000fd8:	469a      	mov	sl, r3
 8000fda:	e77a      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d118      	bne.n	8001012 <__aeabi_fmul+0x176>
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	4698      	mov	r8, r3
 8000fe4:	3b06      	subs	r3, #6
 8000fe6:	25ff      	movs	r5, #255	@ 0xff
 8000fe8:	469a      	mov	sl, r3
 8000fea:	e772      	b.n	8000ed2 <__aeabi_fmul+0x36>
 8000fec:	20ff      	movs	r0, #255	@ 0xff
 8000fee:	2200      	movs	r2, #0
 8000ff0:	e791      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ff2:	2280      	movs	r2, #128	@ 0x80
 8000ff4:	2600      	movs	r6, #0
 8000ff6:	20ff      	movs	r0, #255	@ 0xff
 8000ff8:	03d2      	lsls	r2, r2, #15
 8000ffa:	e78c      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8000ffc:	4641      	mov	r1, r8
 8000ffe:	2202      	movs	r2, #2
 8001000:	3501      	adds	r5, #1
 8001002:	4311      	orrs	r1, r2
 8001004:	4688      	mov	r8, r1
 8001006:	35ff      	adds	r5, #255	@ 0xff
 8001008:	290a      	cmp	r1, #10
 800100a:	dca5      	bgt.n	8000f58 <__aeabi_fmul+0xbc>
 800100c:	2102      	movs	r1, #2
 800100e:	407e      	eors	r6, r7
 8001010:	e774      	b.n	8000efc <__aeabi_fmul+0x60>
 8001012:	230c      	movs	r3, #12
 8001014:	4698      	mov	r8, r3
 8001016:	3b09      	subs	r3, #9
 8001018:	25ff      	movs	r5, #255	@ 0xff
 800101a:	469a      	mov	sl, r3
 800101c:	e759      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800101e:	0018      	movs	r0, r3
 8001020:	f002 fa6a 	bl	80034f8 <__clzsi2>
 8001024:	464a      	mov	r2, r9
 8001026:	1f43      	subs	r3, r0, #5
 8001028:	2576      	movs	r5, #118	@ 0x76
 800102a:	409a      	lsls	r2, r3
 800102c:	2300      	movs	r3, #0
 800102e:	426d      	negs	r5, r5
 8001030:	4691      	mov	r9, r2
 8001032:	4698      	mov	r8, r3
 8001034:	469a      	mov	sl, r3
 8001036:	1a2d      	subs	r5, r5, r0
 8001038:	e74b      	b.n	8000ed2 <__aeabi_fmul+0x36>
 800103a:	0020      	movs	r0, r4
 800103c:	f002 fa5c 	bl	80034f8 <__clzsi2>
 8001040:	4642      	mov	r2, r8
 8001042:	1f43      	subs	r3, r0, #5
 8001044:	409c      	lsls	r4, r3
 8001046:	1a2b      	subs	r3, r5, r0
 8001048:	3b76      	subs	r3, #118	@ 0x76
 800104a:	2100      	movs	r1, #0
 800104c:	1c5d      	adds	r5, r3, #1
 800104e:	2a0a      	cmp	r2, #10
 8001050:	dc00      	bgt.n	8001054 <__aeabi_fmul+0x1b8>
 8001052:	e752      	b.n	8000efa <__aeabi_fmul+0x5e>
 8001054:	e780      	b.n	8000f58 <__aeabi_fmul+0xbc>
 8001056:	2201      	movs	r2, #1
 8001058:	1ad3      	subs	r3, r2, r3
 800105a:	2b1b      	cmp	r3, #27
 800105c:	dd00      	ble.n	8001060 <__aeabi_fmul+0x1c4>
 800105e:	e758      	b.n	8000f12 <__aeabi_fmul+0x76>
 8001060:	359e      	adds	r5, #158	@ 0x9e
 8001062:	0022      	movs	r2, r4
 8001064:	40ac      	lsls	r4, r5
 8001066:	40da      	lsrs	r2, r3
 8001068:	1e63      	subs	r3, r4, #1
 800106a:	419c      	sbcs	r4, r3
 800106c:	4322      	orrs	r2, r4
 800106e:	0753      	lsls	r3, r2, #29
 8001070:	d004      	beq.n	800107c <__aeabi_fmul+0x1e0>
 8001072:	230f      	movs	r3, #15
 8001074:	4013      	ands	r3, r2
 8001076:	2b04      	cmp	r3, #4
 8001078:	d000      	beq.n	800107c <__aeabi_fmul+0x1e0>
 800107a:	3204      	adds	r2, #4
 800107c:	0153      	lsls	r3, r2, #5
 800107e:	d537      	bpl.n	80010f0 <__aeabi_fmul+0x254>
 8001080:	2001      	movs	r0, #1
 8001082:	2200      	movs	r2, #0
 8001084:	e747      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001086:	0c21      	lsrs	r1, r4, #16
 8001088:	464a      	mov	r2, r9
 800108a:	0424      	lsls	r4, r4, #16
 800108c:	0c24      	lsrs	r4, r4, #16
 800108e:	0027      	movs	r7, r4
 8001090:	0c10      	lsrs	r0, r2, #16
 8001092:	0412      	lsls	r2, r2, #16
 8001094:	0c12      	lsrs	r2, r2, #16
 8001096:	4344      	muls	r4, r0
 8001098:	4357      	muls	r7, r2
 800109a:	4348      	muls	r0, r1
 800109c:	4351      	muls	r1, r2
 800109e:	0c3a      	lsrs	r2, r7, #16
 80010a0:	1909      	adds	r1, r1, r4
 80010a2:	1852      	adds	r2, r2, r1
 80010a4:	4294      	cmp	r4, r2
 80010a6:	d903      	bls.n	80010b0 <__aeabi_fmul+0x214>
 80010a8:	2180      	movs	r1, #128	@ 0x80
 80010aa:	0249      	lsls	r1, r1, #9
 80010ac:	468c      	mov	ip, r1
 80010ae:	4460      	add	r0, ip
 80010b0:	043f      	lsls	r7, r7, #16
 80010b2:	0411      	lsls	r1, r2, #16
 80010b4:	0c3f      	lsrs	r7, r7, #16
 80010b6:	19c9      	adds	r1, r1, r7
 80010b8:	018c      	lsls	r4, r1, #6
 80010ba:	1e67      	subs	r7, r4, #1
 80010bc:	41bc      	sbcs	r4, r7
 80010be:	0c12      	lsrs	r2, r2, #16
 80010c0:	0e89      	lsrs	r1, r1, #26
 80010c2:	1812      	adds	r2, r2, r0
 80010c4:	430c      	orrs	r4, r1
 80010c6:	0192      	lsls	r2, r2, #6
 80010c8:	4314      	orrs	r4, r2
 80010ca:	0112      	lsls	r2, r2, #4
 80010cc:	d50e      	bpl.n	80010ec <__aeabi_fmul+0x250>
 80010ce:	2301      	movs	r3, #1
 80010d0:	0862      	lsrs	r2, r4, #1
 80010d2:	401c      	ands	r4, r3
 80010d4:	4314      	orrs	r4, r2
 80010d6:	e749      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010d8:	003e      	movs	r6, r7
 80010da:	46a1      	mov	r9, r4
 80010dc:	2280      	movs	r2, #128	@ 0x80
 80010de:	464b      	mov	r3, r9
 80010e0:	03d2      	lsls	r2, r2, #15
 80010e2:	431a      	orrs	r2, r3
 80010e4:	0252      	lsls	r2, r2, #9
 80010e6:	20ff      	movs	r0, #255	@ 0xff
 80010e8:	0a52      	lsrs	r2, r2, #9
 80010ea:	e714      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010ec:	001d      	movs	r5, r3
 80010ee:	e73d      	b.n	8000f6c <__aeabi_fmul+0xd0>
 80010f0:	0192      	lsls	r2, r2, #6
 80010f2:	2000      	movs	r0, #0
 80010f4:	0a52      	lsrs	r2, r2, #9
 80010f6:	e70e      	b.n	8000f16 <__aeabi_fmul+0x7a>
 80010f8:	290f      	cmp	r1, #15
 80010fa:	d1ed      	bne.n	80010d8 <__aeabi_fmul+0x23c>
 80010fc:	2280      	movs	r2, #128	@ 0x80
 80010fe:	464b      	mov	r3, r9
 8001100:	03d2      	lsls	r2, r2, #15
 8001102:	4213      	tst	r3, r2
 8001104:	d0ea      	beq.n	80010dc <__aeabi_fmul+0x240>
 8001106:	4214      	tst	r4, r2
 8001108:	d1e8      	bne.n	80010dc <__aeabi_fmul+0x240>
 800110a:	003e      	movs	r6, r7
 800110c:	20ff      	movs	r0, #255	@ 0xff
 800110e:	4322      	orrs	r2, r4
 8001110:	e701      	b.n	8000f16 <__aeabi_fmul+0x7a>
 8001112:	46c0      	nop			@ (mov r8, r8)
 8001114:	f7ffffff 	.word	0xf7ffffff

08001118 <__aeabi_fsub>:
 8001118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800111a:	4647      	mov	r7, r8
 800111c:	46ce      	mov	lr, r9
 800111e:	024e      	lsls	r6, r1, #9
 8001120:	0243      	lsls	r3, r0, #9
 8001122:	0045      	lsls	r5, r0, #1
 8001124:	0a72      	lsrs	r2, r6, #9
 8001126:	0fc4      	lsrs	r4, r0, #31
 8001128:	0048      	lsls	r0, r1, #1
 800112a:	b580      	push	{r7, lr}
 800112c:	4694      	mov	ip, r2
 800112e:	0a5f      	lsrs	r7, r3, #9
 8001130:	0e2d      	lsrs	r5, r5, #24
 8001132:	099b      	lsrs	r3, r3, #6
 8001134:	0e00      	lsrs	r0, r0, #24
 8001136:	0fc9      	lsrs	r1, r1, #31
 8001138:	09b6      	lsrs	r6, r6, #6
 800113a:	28ff      	cmp	r0, #255	@ 0xff
 800113c:	d024      	beq.n	8001188 <__aeabi_fsub+0x70>
 800113e:	2201      	movs	r2, #1
 8001140:	4051      	eors	r1, r2
 8001142:	1a2a      	subs	r2, r5, r0
 8001144:	428c      	cmp	r4, r1
 8001146:	d00f      	beq.n	8001168 <__aeabi_fsub+0x50>
 8001148:	2a00      	cmp	r2, #0
 800114a:	dc00      	bgt.n	800114e <__aeabi_fsub+0x36>
 800114c:	e16a      	b.n	8001424 <__aeabi_fsub+0x30c>
 800114e:	2800      	cmp	r0, #0
 8001150:	d135      	bne.n	80011be <__aeabi_fsub+0xa6>
 8001152:	2e00      	cmp	r6, #0
 8001154:	d100      	bne.n	8001158 <__aeabi_fsub+0x40>
 8001156:	e0a2      	b.n	800129e <__aeabi_fsub+0x186>
 8001158:	1e51      	subs	r1, r2, #1
 800115a:	2a01      	cmp	r2, #1
 800115c:	d100      	bne.n	8001160 <__aeabi_fsub+0x48>
 800115e:	e124      	b.n	80013aa <__aeabi_fsub+0x292>
 8001160:	2aff      	cmp	r2, #255	@ 0xff
 8001162:	d021      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001164:	000a      	movs	r2, r1
 8001166:	e02f      	b.n	80011c8 <__aeabi_fsub+0xb0>
 8001168:	2a00      	cmp	r2, #0
 800116a:	dc00      	bgt.n	800116e <__aeabi_fsub+0x56>
 800116c:	e167      	b.n	800143e <__aeabi_fsub+0x326>
 800116e:	2800      	cmp	r0, #0
 8001170:	d05e      	beq.n	8001230 <__aeabi_fsub+0x118>
 8001172:	2dff      	cmp	r5, #255	@ 0xff
 8001174:	d018      	beq.n	80011a8 <__aeabi_fsub+0x90>
 8001176:	2180      	movs	r1, #128	@ 0x80
 8001178:	04c9      	lsls	r1, r1, #19
 800117a:	430e      	orrs	r6, r1
 800117c:	2a1b      	cmp	r2, #27
 800117e:	dc00      	bgt.n	8001182 <__aeabi_fsub+0x6a>
 8001180:	e076      	b.n	8001270 <__aeabi_fsub+0x158>
 8001182:	002a      	movs	r2, r5
 8001184:	3301      	adds	r3, #1
 8001186:	e032      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001188:	002a      	movs	r2, r5
 800118a:	3aff      	subs	r2, #255	@ 0xff
 800118c:	4691      	mov	r9, r2
 800118e:	2e00      	cmp	r6, #0
 8001190:	d042      	beq.n	8001218 <__aeabi_fsub+0x100>
 8001192:	428c      	cmp	r4, r1
 8001194:	d055      	beq.n	8001242 <__aeabi_fsub+0x12a>
 8001196:	464a      	mov	r2, r9
 8001198:	2a00      	cmp	r2, #0
 800119a:	d100      	bne.n	800119e <__aeabi_fsub+0x86>
 800119c:	e09c      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800119e:	2d00      	cmp	r5, #0
 80011a0:	d100      	bne.n	80011a4 <__aeabi_fsub+0x8c>
 80011a2:	e077      	b.n	8001294 <__aeabi_fsub+0x17c>
 80011a4:	000c      	movs	r4, r1
 80011a6:	0033      	movs	r3, r6
 80011a8:	08db      	lsrs	r3, r3, #3
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d100      	bne.n	80011b0 <__aeabi_fsub+0x98>
 80011ae:	e06e      	b.n	800128e <__aeabi_fsub+0x176>
 80011b0:	2280      	movs	r2, #128	@ 0x80
 80011b2:	03d2      	lsls	r2, r2, #15
 80011b4:	4313      	orrs	r3, r2
 80011b6:	025b      	lsls	r3, r3, #9
 80011b8:	20ff      	movs	r0, #255	@ 0xff
 80011ba:	0a5b      	lsrs	r3, r3, #9
 80011bc:	e024      	b.n	8001208 <__aeabi_fsub+0xf0>
 80011be:	2dff      	cmp	r5, #255	@ 0xff
 80011c0:	d0f2      	beq.n	80011a8 <__aeabi_fsub+0x90>
 80011c2:	2180      	movs	r1, #128	@ 0x80
 80011c4:	04c9      	lsls	r1, r1, #19
 80011c6:	430e      	orrs	r6, r1
 80011c8:	2101      	movs	r1, #1
 80011ca:	2a1b      	cmp	r2, #27
 80011cc:	dc08      	bgt.n	80011e0 <__aeabi_fsub+0xc8>
 80011ce:	0031      	movs	r1, r6
 80011d0:	2020      	movs	r0, #32
 80011d2:	40d1      	lsrs	r1, r2
 80011d4:	1a82      	subs	r2, r0, r2
 80011d6:	4096      	lsls	r6, r2
 80011d8:	0032      	movs	r2, r6
 80011da:	1e50      	subs	r0, r2, #1
 80011dc:	4182      	sbcs	r2, r0
 80011de:	4311      	orrs	r1, r2
 80011e0:	1a5b      	subs	r3, r3, r1
 80011e2:	015a      	lsls	r2, r3, #5
 80011e4:	d460      	bmi.n	80012a8 <__aeabi_fsub+0x190>
 80011e6:	2107      	movs	r1, #7
 80011e8:	002a      	movs	r2, r5
 80011ea:	4019      	ands	r1, r3
 80011ec:	d057      	beq.n	800129e <__aeabi_fsub+0x186>
 80011ee:	210f      	movs	r1, #15
 80011f0:	4019      	ands	r1, r3
 80011f2:	2904      	cmp	r1, #4
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0xe0>
 80011f6:	3304      	adds	r3, #4
 80011f8:	0159      	lsls	r1, r3, #5
 80011fa:	d550      	bpl.n	800129e <__aeabi_fsub+0x186>
 80011fc:	1c50      	adds	r0, r2, #1
 80011fe:	2afe      	cmp	r2, #254	@ 0xfe
 8001200:	d045      	beq.n	800128e <__aeabi_fsub+0x176>
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b2c0      	uxtb	r0, r0
 8001206:	0a5b      	lsrs	r3, r3, #9
 8001208:	05c0      	lsls	r0, r0, #23
 800120a:	4318      	orrs	r0, r3
 800120c:	07e4      	lsls	r4, r4, #31
 800120e:	4320      	orrs	r0, r4
 8001210:	bcc0      	pop	{r6, r7}
 8001212:	46b9      	mov	r9, r7
 8001214:	46b0      	mov	r8, r6
 8001216:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001218:	2201      	movs	r2, #1
 800121a:	4051      	eors	r1, r2
 800121c:	428c      	cmp	r4, r1
 800121e:	d1ba      	bne.n	8001196 <__aeabi_fsub+0x7e>
 8001220:	464a      	mov	r2, r9
 8001222:	2a00      	cmp	r2, #0
 8001224:	d010      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001226:	2d00      	cmp	r5, #0
 8001228:	d100      	bne.n	800122c <__aeabi_fsub+0x114>
 800122a:	e098      	b.n	800135e <__aeabi_fsub+0x246>
 800122c:	2300      	movs	r3, #0
 800122e:	e7bb      	b.n	80011a8 <__aeabi_fsub+0x90>
 8001230:	2e00      	cmp	r6, #0
 8001232:	d034      	beq.n	800129e <__aeabi_fsub+0x186>
 8001234:	1e51      	subs	r1, r2, #1
 8001236:	2a01      	cmp	r2, #1
 8001238:	d06e      	beq.n	8001318 <__aeabi_fsub+0x200>
 800123a:	2aff      	cmp	r2, #255	@ 0xff
 800123c:	d0b4      	beq.n	80011a8 <__aeabi_fsub+0x90>
 800123e:	000a      	movs	r2, r1
 8001240:	e79c      	b.n	800117c <__aeabi_fsub+0x64>
 8001242:	2a00      	cmp	r2, #0
 8001244:	d000      	beq.n	8001248 <__aeabi_fsub+0x130>
 8001246:	e088      	b.n	800135a <__aeabi_fsub+0x242>
 8001248:	20fe      	movs	r0, #254	@ 0xfe
 800124a:	1c6a      	adds	r2, r5, #1
 800124c:	4210      	tst	r0, r2
 800124e:	d000      	beq.n	8001252 <__aeabi_fsub+0x13a>
 8001250:	e092      	b.n	8001378 <__aeabi_fsub+0x260>
 8001252:	2d00      	cmp	r5, #0
 8001254:	d000      	beq.n	8001258 <__aeabi_fsub+0x140>
 8001256:	e0a4      	b.n	80013a2 <__aeabi_fsub+0x28a>
 8001258:	2b00      	cmp	r3, #0
 800125a:	d100      	bne.n	800125e <__aeabi_fsub+0x146>
 800125c:	e0cb      	b.n	80013f6 <__aeabi_fsub+0x2de>
 800125e:	2e00      	cmp	r6, #0
 8001260:	d000      	beq.n	8001264 <__aeabi_fsub+0x14c>
 8001262:	e0ca      	b.n	80013fa <__aeabi_fsub+0x2e2>
 8001264:	2200      	movs	r2, #0
 8001266:	08db      	lsrs	r3, r3, #3
 8001268:	025b      	lsls	r3, r3, #9
 800126a:	0a5b      	lsrs	r3, r3, #9
 800126c:	b2d0      	uxtb	r0, r2
 800126e:	e7cb      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001270:	0031      	movs	r1, r6
 8001272:	2020      	movs	r0, #32
 8001274:	40d1      	lsrs	r1, r2
 8001276:	1a82      	subs	r2, r0, r2
 8001278:	4096      	lsls	r6, r2
 800127a:	0032      	movs	r2, r6
 800127c:	1e50      	subs	r0, r2, #1
 800127e:	4182      	sbcs	r2, r0
 8001280:	430a      	orrs	r2, r1
 8001282:	189b      	adds	r3, r3, r2
 8001284:	015a      	lsls	r2, r3, #5
 8001286:	d5ae      	bpl.n	80011e6 <__aeabi_fsub+0xce>
 8001288:	1c6a      	adds	r2, r5, #1
 800128a:	2dfe      	cmp	r5, #254	@ 0xfe
 800128c:	d14a      	bne.n	8001324 <__aeabi_fsub+0x20c>
 800128e:	20ff      	movs	r0, #255	@ 0xff
 8001290:	2300      	movs	r3, #0
 8001292:	e7b9      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001294:	22ff      	movs	r2, #255	@ 0xff
 8001296:	2b00      	cmp	r3, #0
 8001298:	d14b      	bne.n	8001332 <__aeabi_fsub+0x21a>
 800129a:	000c      	movs	r4, r1
 800129c:	0033      	movs	r3, r6
 800129e:	08db      	lsrs	r3, r3, #3
 80012a0:	2aff      	cmp	r2, #255	@ 0xff
 80012a2:	d100      	bne.n	80012a6 <__aeabi_fsub+0x18e>
 80012a4:	e781      	b.n	80011aa <__aeabi_fsub+0x92>
 80012a6:	e7df      	b.n	8001268 <__aeabi_fsub+0x150>
 80012a8:	019f      	lsls	r7, r3, #6
 80012aa:	09bf      	lsrs	r7, r7, #6
 80012ac:	0038      	movs	r0, r7
 80012ae:	f002 f923 	bl	80034f8 <__clzsi2>
 80012b2:	3805      	subs	r0, #5
 80012b4:	4087      	lsls	r7, r0
 80012b6:	4285      	cmp	r5, r0
 80012b8:	dc21      	bgt.n	80012fe <__aeabi_fsub+0x1e6>
 80012ba:	003b      	movs	r3, r7
 80012bc:	2120      	movs	r1, #32
 80012be:	1b42      	subs	r2, r0, r5
 80012c0:	3201      	adds	r2, #1
 80012c2:	40d3      	lsrs	r3, r2
 80012c4:	1a8a      	subs	r2, r1, r2
 80012c6:	4097      	lsls	r7, r2
 80012c8:	1e7a      	subs	r2, r7, #1
 80012ca:	4197      	sbcs	r7, r2
 80012cc:	2200      	movs	r2, #0
 80012ce:	433b      	orrs	r3, r7
 80012d0:	0759      	lsls	r1, r3, #29
 80012d2:	d000      	beq.n	80012d6 <__aeabi_fsub+0x1be>
 80012d4:	e78b      	b.n	80011ee <__aeabi_fsub+0xd6>
 80012d6:	e78f      	b.n	80011f8 <__aeabi_fsub+0xe0>
 80012d8:	20fe      	movs	r0, #254	@ 0xfe
 80012da:	1c6a      	adds	r2, r5, #1
 80012dc:	4210      	tst	r0, r2
 80012de:	d112      	bne.n	8001306 <__aeabi_fsub+0x1ee>
 80012e0:	2d00      	cmp	r5, #0
 80012e2:	d152      	bne.n	800138a <__aeabi_fsub+0x272>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d07c      	beq.n	80013e2 <__aeabi_fsub+0x2ca>
 80012e8:	2e00      	cmp	r6, #0
 80012ea:	d0bb      	beq.n	8001264 <__aeabi_fsub+0x14c>
 80012ec:	1b9a      	subs	r2, r3, r6
 80012ee:	0150      	lsls	r0, r2, #5
 80012f0:	d400      	bmi.n	80012f4 <__aeabi_fsub+0x1dc>
 80012f2:	e08b      	b.n	800140c <__aeabi_fsub+0x2f4>
 80012f4:	2401      	movs	r4, #1
 80012f6:	2200      	movs	r2, #0
 80012f8:	1af3      	subs	r3, r6, r3
 80012fa:	400c      	ands	r4, r1
 80012fc:	e7e8      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 80012fe:	4b56      	ldr	r3, [pc, #344]	@ (8001458 <__aeabi_fsub+0x340>)
 8001300:	1a2a      	subs	r2, r5, r0
 8001302:	403b      	ands	r3, r7
 8001304:	e7e4      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001306:	1b9f      	subs	r7, r3, r6
 8001308:	017a      	lsls	r2, r7, #5
 800130a:	d446      	bmi.n	800139a <__aeabi_fsub+0x282>
 800130c:	2f00      	cmp	r7, #0
 800130e:	d1cd      	bne.n	80012ac <__aeabi_fsub+0x194>
 8001310:	2400      	movs	r4, #0
 8001312:	2000      	movs	r0, #0
 8001314:	2300      	movs	r3, #0
 8001316:	e777      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001318:	199b      	adds	r3, r3, r6
 800131a:	2501      	movs	r5, #1
 800131c:	3201      	adds	r2, #1
 800131e:	0159      	lsls	r1, r3, #5
 8001320:	d400      	bmi.n	8001324 <__aeabi_fsub+0x20c>
 8001322:	e760      	b.n	80011e6 <__aeabi_fsub+0xce>
 8001324:	2101      	movs	r1, #1
 8001326:	484d      	ldr	r0, [pc, #308]	@ (800145c <__aeabi_fsub+0x344>)
 8001328:	4019      	ands	r1, r3
 800132a:	085b      	lsrs	r3, r3, #1
 800132c:	4003      	ands	r3, r0
 800132e:	430b      	orrs	r3, r1
 8001330:	e7ce      	b.n	80012d0 <__aeabi_fsub+0x1b8>
 8001332:	1e57      	subs	r7, r2, #1
 8001334:	2a01      	cmp	r2, #1
 8001336:	d05a      	beq.n	80013ee <__aeabi_fsub+0x2d6>
 8001338:	000c      	movs	r4, r1
 800133a:	2aff      	cmp	r2, #255	@ 0xff
 800133c:	d033      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800133e:	2201      	movs	r2, #1
 8001340:	2f1b      	cmp	r7, #27
 8001342:	dc07      	bgt.n	8001354 <__aeabi_fsub+0x23c>
 8001344:	2120      	movs	r1, #32
 8001346:	1bc9      	subs	r1, r1, r7
 8001348:	001a      	movs	r2, r3
 800134a:	408b      	lsls	r3, r1
 800134c:	40fa      	lsrs	r2, r7
 800134e:	1e59      	subs	r1, r3, #1
 8001350:	418b      	sbcs	r3, r1
 8001352:	431a      	orrs	r2, r3
 8001354:	0005      	movs	r5, r0
 8001356:	1ab3      	subs	r3, r6, r2
 8001358:	e743      	b.n	80011e2 <__aeabi_fsub+0xca>
 800135a:	2d00      	cmp	r5, #0
 800135c:	d123      	bne.n	80013a6 <__aeabi_fsub+0x28e>
 800135e:	22ff      	movs	r2, #255	@ 0xff
 8001360:	2b00      	cmp	r3, #0
 8001362:	d09b      	beq.n	800129c <__aeabi_fsub+0x184>
 8001364:	1e51      	subs	r1, r2, #1
 8001366:	2a01      	cmp	r2, #1
 8001368:	d0d6      	beq.n	8001318 <__aeabi_fsub+0x200>
 800136a:	2aff      	cmp	r2, #255	@ 0xff
 800136c:	d01b      	beq.n	80013a6 <__aeabi_fsub+0x28e>
 800136e:	291b      	cmp	r1, #27
 8001370:	dd2c      	ble.n	80013cc <__aeabi_fsub+0x2b4>
 8001372:	0002      	movs	r2, r0
 8001374:	1c73      	adds	r3, r6, #1
 8001376:	e73a      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001378:	2aff      	cmp	r2, #255	@ 0xff
 800137a:	d088      	beq.n	800128e <__aeabi_fsub+0x176>
 800137c:	199b      	adds	r3, r3, r6
 800137e:	085b      	lsrs	r3, r3, #1
 8001380:	0759      	lsls	r1, r3, #29
 8001382:	d000      	beq.n	8001386 <__aeabi_fsub+0x26e>
 8001384:	e733      	b.n	80011ee <__aeabi_fsub+0xd6>
 8001386:	08db      	lsrs	r3, r3, #3
 8001388:	e76e      	b.n	8001268 <__aeabi_fsub+0x150>
 800138a:	2b00      	cmp	r3, #0
 800138c:	d110      	bne.n	80013b0 <__aeabi_fsub+0x298>
 800138e:	2e00      	cmp	r6, #0
 8001390:	d043      	beq.n	800141a <__aeabi_fsub+0x302>
 8001392:	2401      	movs	r4, #1
 8001394:	0033      	movs	r3, r6
 8001396:	400c      	ands	r4, r1
 8001398:	e706      	b.n	80011a8 <__aeabi_fsub+0x90>
 800139a:	2401      	movs	r4, #1
 800139c:	1af7      	subs	r7, r6, r3
 800139e:	400c      	ands	r4, r1
 80013a0:	e784      	b.n	80012ac <__aeabi_fsub+0x194>
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d104      	bne.n	80013b0 <__aeabi_fsub+0x298>
 80013a6:	0033      	movs	r3, r6
 80013a8:	e6fe      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013aa:	2501      	movs	r5, #1
 80013ac:	1b9b      	subs	r3, r3, r6
 80013ae:	e718      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013b0:	2e00      	cmp	r6, #0
 80013b2:	d100      	bne.n	80013b6 <__aeabi_fsub+0x29e>
 80013b4:	e6f8      	b.n	80011a8 <__aeabi_fsub+0x90>
 80013b6:	2280      	movs	r2, #128	@ 0x80
 80013b8:	03d2      	lsls	r2, r2, #15
 80013ba:	4297      	cmp	r7, r2
 80013bc:	d304      	bcc.n	80013c8 <__aeabi_fsub+0x2b0>
 80013be:	4594      	cmp	ip, r2
 80013c0:	d202      	bcs.n	80013c8 <__aeabi_fsub+0x2b0>
 80013c2:	2401      	movs	r4, #1
 80013c4:	0033      	movs	r3, r6
 80013c6:	400c      	ands	r4, r1
 80013c8:	08db      	lsrs	r3, r3, #3
 80013ca:	e6f1      	b.n	80011b0 <__aeabi_fsub+0x98>
 80013cc:	001a      	movs	r2, r3
 80013ce:	2520      	movs	r5, #32
 80013d0:	40ca      	lsrs	r2, r1
 80013d2:	1a69      	subs	r1, r5, r1
 80013d4:	408b      	lsls	r3, r1
 80013d6:	1e59      	subs	r1, r3, #1
 80013d8:	418b      	sbcs	r3, r1
 80013da:	4313      	orrs	r3, r2
 80013dc:	0005      	movs	r5, r0
 80013de:	199b      	adds	r3, r3, r6
 80013e0:	e750      	b.n	8001284 <__aeabi_fsub+0x16c>
 80013e2:	2e00      	cmp	r6, #0
 80013e4:	d094      	beq.n	8001310 <__aeabi_fsub+0x1f8>
 80013e6:	2401      	movs	r4, #1
 80013e8:	0033      	movs	r3, r6
 80013ea:	400c      	ands	r4, r1
 80013ec:	e73a      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013ee:	000c      	movs	r4, r1
 80013f0:	2501      	movs	r5, #1
 80013f2:	1af3      	subs	r3, r6, r3
 80013f4:	e6f5      	b.n	80011e2 <__aeabi_fsub+0xca>
 80013f6:	0033      	movs	r3, r6
 80013f8:	e734      	b.n	8001264 <__aeabi_fsub+0x14c>
 80013fa:	199b      	adds	r3, r3, r6
 80013fc:	2200      	movs	r2, #0
 80013fe:	0159      	lsls	r1, r3, #5
 8001400:	d5c1      	bpl.n	8001386 <__aeabi_fsub+0x26e>
 8001402:	4a15      	ldr	r2, [pc, #84]	@ (8001458 <__aeabi_fsub+0x340>)
 8001404:	4013      	ands	r3, r2
 8001406:	08db      	lsrs	r3, r3, #3
 8001408:	2201      	movs	r2, #1
 800140a:	e72d      	b.n	8001268 <__aeabi_fsub+0x150>
 800140c:	2a00      	cmp	r2, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_fsub+0x2fa>
 8001410:	e77e      	b.n	8001310 <__aeabi_fsub+0x1f8>
 8001412:	0013      	movs	r3, r2
 8001414:	2200      	movs	r2, #0
 8001416:	08db      	lsrs	r3, r3, #3
 8001418:	e726      	b.n	8001268 <__aeabi_fsub+0x150>
 800141a:	2380      	movs	r3, #128	@ 0x80
 800141c:	2400      	movs	r4, #0
 800141e:	20ff      	movs	r0, #255	@ 0xff
 8001420:	03db      	lsls	r3, r3, #15
 8001422:	e6f1      	b.n	8001208 <__aeabi_fsub+0xf0>
 8001424:	2a00      	cmp	r2, #0
 8001426:	d100      	bne.n	800142a <__aeabi_fsub+0x312>
 8001428:	e756      	b.n	80012d8 <__aeabi_fsub+0x1c0>
 800142a:	1b47      	subs	r7, r0, r5
 800142c:	003a      	movs	r2, r7
 800142e:	2d00      	cmp	r5, #0
 8001430:	d100      	bne.n	8001434 <__aeabi_fsub+0x31c>
 8001432:	e730      	b.n	8001296 <__aeabi_fsub+0x17e>
 8001434:	2280      	movs	r2, #128	@ 0x80
 8001436:	04d2      	lsls	r2, r2, #19
 8001438:	000c      	movs	r4, r1
 800143a:	4313      	orrs	r3, r2
 800143c:	e77f      	b.n	800133e <__aeabi_fsub+0x226>
 800143e:	2a00      	cmp	r2, #0
 8001440:	d100      	bne.n	8001444 <__aeabi_fsub+0x32c>
 8001442:	e701      	b.n	8001248 <__aeabi_fsub+0x130>
 8001444:	1b41      	subs	r1, r0, r5
 8001446:	2d00      	cmp	r5, #0
 8001448:	d101      	bne.n	800144e <__aeabi_fsub+0x336>
 800144a:	000a      	movs	r2, r1
 800144c:	e788      	b.n	8001360 <__aeabi_fsub+0x248>
 800144e:	2280      	movs	r2, #128	@ 0x80
 8001450:	04d2      	lsls	r2, r2, #19
 8001452:	4313      	orrs	r3, r2
 8001454:	e78b      	b.n	800136e <__aeabi_fsub+0x256>
 8001456:	46c0      	nop			@ (mov r8, r8)
 8001458:	fbffffff 	.word	0xfbffffff
 800145c:	7dffffff 	.word	0x7dffffff

08001460 <__aeabi_fcmpun>:
 8001460:	0243      	lsls	r3, r0, #9
 8001462:	024a      	lsls	r2, r1, #9
 8001464:	0040      	lsls	r0, r0, #1
 8001466:	0049      	lsls	r1, r1, #1
 8001468:	0a5b      	lsrs	r3, r3, #9
 800146a:	0a52      	lsrs	r2, r2, #9
 800146c:	0e09      	lsrs	r1, r1, #24
 800146e:	0e00      	lsrs	r0, r0, #24
 8001470:	28ff      	cmp	r0, #255	@ 0xff
 8001472:	d006      	beq.n	8001482 <__aeabi_fcmpun+0x22>
 8001474:	2000      	movs	r0, #0
 8001476:	29ff      	cmp	r1, #255	@ 0xff
 8001478:	d102      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 800147a:	1e53      	subs	r3, r2, #1
 800147c:	419a      	sbcs	r2, r3
 800147e:	0010      	movs	r0, r2
 8001480:	4770      	bx	lr
 8001482:	38fe      	subs	r0, #254	@ 0xfe
 8001484:	2b00      	cmp	r3, #0
 8001486:	d1fb      	bne.n	8001480 <__aeabi_fcmpun+0x20>
 8001488:	e7f4      	b.n	8001474 <__aeabi_fcmpun+0x14>
 800148a:	46c0      	nop			@ (mov r8, r8)

0800148c <__aeabi_f2iz>:
 800148c:	0241      	lsls	r1, r0, #9
 800148e:	0042      	lsls	r2, r0, #1
 8001490:	0fc3      	lsrs	r3, r0, #31
 8001492:	0a49      	lsrs	r1, r1, #9
 8001494:	2000      	movs	r0, #0
 8001496:	0e12      	lsrs	r2, r2, #24
 8001498:	2a7e      	cmp	r2, #126	@ 0x7e
 800149a:	dd03      	ble.n	80014a4 <__aeabi_f2iz+0x18>
 800149c:	2a9d      	cmp	r2, #157	@ 0x9d
 800149e:	dd02      	ble.n	80014a6 <__aeabi_f2iz+0x1a>
 80014a0:	4a09      	ldr	r2, [pc, #36]	@ (80014c8 <__aeabi_f2iz+0x3c>)
 80014a2:	1898      	adds	r0, r3, r2
 80014a4:	4770      	bx	lr
 80014a6:	2080      	movs	r0, #128	@ 0x80
 80014a8:	0400      	lsls	r0, r0, #16
 80014aa:	4301      	orrs	r1, r0
 80014ac:	2a95      	cmp	r2, #149	@ 0x95
 80014ae:	dc07      	bgt.n	80014c0 <__aeabi_f2iz+0x34>
 80014b0:	2096      	movs	r0, #150	@ 0x96
 80014b2:	1a82      	subs	r2, r0, r2
 80014b4:	40d1      	lsrs	r1, r2
 80014b6:	4248      	negs	r0, r1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f3      	bne.n	80014a4 <__aeabi_f2iz+0x18>
 80014bc:	0008      	movs	r0, r1
 80014be:	e7f1      	b.n	80014a4 <__aeabi_f2iz+0x18>
 80014c0:	3a96      	subs	r2, #150	@ 0x96
 80014c2:	4091      	lsls	r1, r2
 80014c4:	e7f7      	b.n	80014b6 <__aeabi_f2iz+0x2a>
 80014c6:	46c0      	nop			@ (mov r8, r8)
 80014c8:	7fffffff 	.word	0x7fffffff

080014cc <__aeabi_i2f>:
 80014cc:	b570      	push	{r4, r5, r6, lr}
 80014ce:	2800      	cmp	r0, #0
 80014d0:	d013      	beq.n	80014fa <__aeabi_i2f+0x2e>
 80014d2:	17c3      	asrs	r3, r0, #31
 80014d4:	18c5      	adds	r5, r0, r3
 80014d6:	405d      	eors	r5, r3
 80014d8:	0fc4      	lsrs	r4, r0, #31
 80014da:	0028      	movs	r0, r5
 80014dc:	f002 f80c 	bl	80034f8 <__clzsi2>
 80014e0:	239e      	movs	r3, #158	@ 0x9e
 80014e2:	0001      	movs	r1, r0
 80014e4:	1a1b      	subs	r3, r3, r0
 80014e6:	2b96      	cmp	r3, #150	@ 0x96
 80014e8:	dc0f      	bgt.n	800150a <__aeabi_i2f+0x3e>
 80014ea:	2808      	cmp	r0, #8
 80014ec:	d034      	beq.n	8001558 <__aeabi_i2f+0x8c>
 80014ee:	3908      	subs	r1, #8
 80014f0:	408d      	lsls	r5, r1
 80014f2:	026d      	lsls	r5, r5, #9
 80014f4:	0a6d      	lsrs	r5, r5, #9
 80014f6:	b2d8      	uxtb	r0, r3
 80014f8:	e002      	b.n	8001500 <__aeabi_i2f+0x34>
 80014fa:	2400      	movs	r4, #0
 80014fc:	2000      	movs	r0, #0
 80014fe:	2500      	movs	r5, #0
 8001500:	05c0      	lsls	r0, r0, #23
 8001502:	4328      	orrs	r0, r5
 8001504:	07e4      	lsls	r4, r4, #31
 8001506:	4320      	orrs	r0, r4
 8001508:	bd70      	pop	{r4, r5, r6, pc}
 800150a:	2b99      	cmp	r3, #153	@ 0x99
 800150c:	dc16      	bgt.n	800153c <__aeabi_i2f+0x70>
 800150e:	1f42      	subs	r2, r0, #5
 8001510:	2805      	cmp	r0, #5
 8001512:	d000      	beq.n	8001516 <__aeabi_i2f+0x4a>
 8001514:	4095      	lsls	r5, r2
 8001516:	002a      	movs	r2, r5
 8001518:	4811      	ldr	r0, [pc, #68]	@ (8001560 <__aeabi_i2f+0x94>)
 800151a:	4002      	ands	r2, r0
 800151c:	076e      	lsls	r6, r5, #29
 800151e:	d009      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001520:	260f      	movs	r6, #15
 8001522:	4035      	ands	r5, r6
 8001524:	2d04      	cmp	r5, #4
 8001526:	d005      	beq.n	8001534 <__aeabi_i2f+0x68>
 8001528:	3204      	adds	r2, #4
 800152a:	0155      	lsls	r5, r2, #5
 800152c:	d502      	bpl.n	8001534 <__aeabi_i2f+0x68>
 800152e:	239f      	movs	r3, #159	@ 0x9f
 8001530:	4002      	ands	r2, r0
 8001532:	1a5b      	subs	r3, r3, r1
 8001534:	0192      	lsls	r2, r2, #6
 8001536:	0a55      	lsrs	r5, r2, #9
 8001538:	b2d8      	uxtb	r0, r3
 800153a:	e7e1      	b.n	8001500 <__aeabi_i2f+0x34>
 800153c:	2205      	movs	r2, #5
 800153e:	1a12      	subs	r2, r2, r0
 8001540:	0028      	movs	r0, r5
 8001542:	40d0      	lsrs	r0, r2
 8001544:	0002      	movs	r2, r0
 8001546:	0008      	movs	r0, r1
 8001548:	301b      	adds	r0, #27
 800154a:	4085      	lsls	r5, r0
 800154c:	0028      	movs	r0, r5
 800154e:	1e45      	subs	r5, r0, #1
 8001550:	41a8      	sbcs	r0, r5
 8001552:	4302      	orrs	r2, r0
 8001554:	0015      	movs	r5, r2
 8001556:	e7de      	b.n	8001516 <__aeabi_i2f+0x4a>
 8001558:	026d      	lsls	r5, r5, #9
 800155a:	2096      	movs	r0, #150	@ 0x96
 800155c:	0a6d      	lsrs	r5, r5, #9
 800155e:	e7cf      	b.n	8001500 <__aeabi_i2f+0x34>
 8001560:	fbffffff 	.word	0xfbffffff

08001564 <__aeabi_ui2f>:
 8001564:	b570      	push	{r4, r5, r6, lr}
 8001566:	1e04      	subs	r4, r0, #0
 8001568:	d00e      	beq.n	8001588 <__aeabi_ui2f+0x24>
 800156a:	f001 ffc5 	bl	80034f8 <__clzsi2>
 800156e:	239e      	movs	r3, #158	@ 0x9e
 8001570:	0001      	movs	r1, r0
 8001572:	1a1b      	subs	r3, r3, r0
 8001574:	2b96      	cmp	r3, #150	@ 0x96
 8001576:	dc0c      	bgt.n	8001592 <__aeabi_ui2f+0x2e>
 8001578:	2808      	cmp	r0, #8
 800157a:	d02f      	beq.n	80015dc <__aeabi_ui2f+0x78>
 800157c:	3908      	subs	r1, #8
 800157e:	408c      	lsls	r4, r1
 8001580:	0264      	lsls	r4, r4, #9
 8001582:	0a64      	lsrs	r4, r4, #9
 8001584:	b2d8      	uxtb	r0, r3
 8001586:	e001      	b.n	800158c <__aeabi_ui2f+0x28>
 8001588:	2000      	movs	r0, #0
 800158a:	2400      	movs	r4, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4320      	orrs	r0, r4
 8001590:	bd70      	pop	{r4, r5, r6, pc}
 8001592:	2b99      	cmp	r3, #153	@ 0x99
 8001594:	dc16      	bgt.n	80015c4 <__aeabi_ui2f+0x60>
 8001596:	1f42      	subs	r2, r0, #5
 8001598:	2805      	cmp	r0, #5
 800159a:	d000      	beq.n	800159e <__aeabi_ui2f+0x3a>
 800159c:	4094      	lsls	r4, r2
 800159e:	0022      	movs	r2, r4
 80015a0:	4810      	ldr	r0, [pc, #64]	@ (80015e4 <__aeabi_ui2f+0x80>)
 80015a2:	4002      	ands	r2, r0
 80015a4:	0765      	lsls	r5, r4, #29
 80015a6:	d009      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015a8:	250f      	movs	r5, #15
 80015aa:	402c      	ands	r4, r5
 80015ac:	2c04      	cmp	r4, #4
 80015ae:	d005      	beq.n	80015bc <__aeabi_ui2f+0x58>
 80015b0:	3204      	adds	r2, #4
 80015b2:	0154      	lsls	r4, r2, #5
 80015b4:	d502      	bpl.n	80015bc <__aeabi_ui2f+0x58>
 80015b6:	239f      	movs	r3, #159	@ 0x9f
 80015b8:	4002      	ands	r2, r0
 80015ba:	1a5b      	subs	r3, r3, r1
 80015bc:	0192      	lsls	r2, r2, #6
 80015be:	0a54      	lsrs	r4, r2, #9
 80015c0:	b2d8      	uxtb	r0, r3
 80015c2:	e7e3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015c4:	0002      	movs	r2, r0
 80015c6:	0020      	movs	r0, r4
 80015c8:	321b      	adds	r2, #27
 80015ca:	4090      	lsls	r0, r2
 80015cc:	0002      	movs	r2, r0
 80015ce:	1e50      	subs	r0, r2, #1
 80015d0:	4182      	sbcs	r2, r0
 80015d2:	2005      	movs	r0, #5
 80015d4:	1a40      	subs	r0, r0, r1
 80015d6:	40c4      	lsrs	r4, r0
 80015d8:	4314      	orrs	r4, r2
 80015da:	e7e0      	b.n	800159e <__aeabi_ui2f+0x3a>
 80015dc:	0264      	lsls	r4, r4, #9
 80015de:	2096      	movs	r0, #150	@ 0x96
 80015e0:	0a64      	lsrs	r4, r4, #9
 80015e2:	e7d3      	b.n	800158c <__aeabi_ui2f+0x28>
 80015e4:	fbffffff 	.word	0xfbffffff

080015e8 <__aeabi_dadd>:
 80015e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ea:	4657      	mov	r7, sl
 80015ec:	464e      	mov	r6, r9
 80015ee:	4645      	mov	r5, r8
 80015f0:	46de      	mov	lr, fp
 80015f2:	b5e0      	push	{r5, r6, r7, lr}
 80015f4:	b083      	sub	sp, #12
 80015f6:	9000      	str	r0, [sp, #0]
 80015f8:	9101      	str	r1, [sp, #4]
 80015fa:	030c      	lsls	r4, r1, #12
 80015fc:	004f      	lsls	r7, r1, #1
 80015fe:	0fce      	lsrs	r6, r1, #31
 8001600:	0a61      	lsrs	r1, r4, #9
 8001602:	9c00      	ldr	r4, [sp, #0]
 8001604:	031d      	lsls	r5, r3, #12
 8001606:	0f64      	lsrs	r4, r4, #29
 8001608:	430c      	orrs	r4, r1
 800160a:	9900      	ldr	r1, [sp, #0]
 800160c:	9200      	str	r2, [sp, #0]
 800160e:	9301      	str	r3, [sp, #4]
 8001610:	00c8      	lsls	r0, r1, #3
 8001612:	0059      	lsls	r1, r3, #1
 8001614:	0d4b      	lsrs	r3, r1, #21
 8001616:	4699      	mov	r9, r3
 8001618:	9a00      	ldr	r2, [sp, #0]
 800161a:	9b01      	ldr	r3, [sp, #4]
 800161c:	0a6d      	lsrs	r5, r5, #9
 800161e:	0fd9      	lsrs	r1, r3, #31
 8001620:	0f53      	lsrs	r3, r2, #29
 8001622:	432b      	orrs	r3, r5
 8001624:	469a      	mov	sl, r3
 8001626:	9b00      	ldr	r3, [sp, #0]
 8001628:	0d7f      	lsrs	r7, r7, #21
 800162a:	00da      	lsls	r2, r3, #3
 800162c:	4694      	mov	ip, r2
 800162e:	464a      	mov	r2, r9
 8001630:	46b0      	mov	r8, r6
 8001632:	1aba      	subs	r2, r7, r2
 8001634:	428e      	cmp	r6, r1
 8001636:	d100      	bne.n	800163a <__aeabi_dadd+0x52>
 8001638:	e0b0      	b.n	800179c <__aeabi_dadd+0x1b4>
 800163a:	2a00      	cmp	r2, #0
 800163c:	dc00      	bgt.n	8001640 <__aeabi_dadd+0x58>
 800163e:	e078      	b.n	8001732 <__aeabi_dadd+0x14a>
 8001640:	4649      	mov	r1, r9
 8001642:	2900      	cmp	r1, #0
 8001644:	d100      	bne.n	8001648 <__aeabi_dadd+0x60>
 8001646:	e0e9      	b.n	800181c <__aeabi_dadd+0x234>
 8001648:	49c9      	ldr	r1, [pc, #804]	@ (8001970 <__aeabi_dadd+0x388>)
 800164a:	428f      	cmp	r7, r1
 800164c:	d100      	bne.n	8001650 <__aeabi_dadd+0x68>
 800164e:	e195      	b.n	800197c <__aeabi_dadd+0x394>
 8001650:	2501      	movs	r5, #1
 8001652:	2a38      	cmp	r2, #56	@ 0x38
 8001654:	dc16      	bgt.n	8001684 <__aeabi_dadd+0x9c>
 8001656:	2180      	movs	r1, #128	@ 0x80
 8001658:	4653      	mov	r3, sl
 800165a:	0409      	lsls	r1, r1, #16
 800165c:	430b      	orrs	r3, r1
 800165e:	469a      	mov	sl, r3
 8001660:	2a1f      	cmp	r2, #31
 8001662:	dd00      	ble.n	8001666 <__aeabi_dadd+0x7e>
 8001664:	e1e7      	b.n	8001a36 <__aeabi_dadd+0x44e>
 8001666:	2120      	movs	r1, #32
 8001668:	4655      	mov	r5, sl
 800166a:	1a8b      	subs	r3, r1, r2
 800166c:	4661      	mov	r1, ip
 800166e:	409d      	lsls	r5, r3
 8001670:	40d1      	lsrs	r1, r2
 8001672:	430d      	orrs	r5, r1
 8001674:	4661      	mov	r1, ip
 8001676:	4099      	lsls	r1, r3
 8001678:	1e4b      	subs	r3, r1, #1
 800167a:	4199      	sbcs	r1, r3
 800167c:	4653      	mov	r3, sl
 800167e:	40d3      	lsrs	r3, r2
 8001680:	430d      	orrs	r5, r1
 8001682:	1ae4      	subs	r4, r4, r3
 8001684:	1b45      	subs	r5, r0, r5
 8001686:	42a8      	cmp	r0, r5
 8001688:	4180      	sbcs	r0, r0
 800168a:	4240      	negs	r0, r0
 800168c:	1a24      	subs	r4, r4, r0
 800168e:	0223      	lsls	r3, r4, #8
 8001690:	d400      	bmi.n	8001694 <__aeabi_dadd+0xac>
 8001692:	e10f      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001694:	0264      	lsls	r4, r4, #9
 8001696:	0a64      	lsrs	r4, r4, #9
 8001698:	2c00      	cmp	r4, #0
 800169a:	d100      	bne.n	800169e <__aeabi_dadd+0xb6>
 800169c:	e139      	b.n	8001912 <__aeabi_dadd+0x32a>
 800169e:	0020      	movs	r0, r4
 80016a0:	f001 ff2a 	bl	80034f8 <__clzsi2>
 80016a4:	0003      	movs	r3, r0
 80016a6:	3b08      	subs	r3, #8
 80016a8:	2120      	movs	r1, #32
 80016aa:	0028      	movs	r0, r5
 80016ac:	1aca      	subs	r2, r1, r3
 80016ae:	40d0      	lsrs	r0, r2
 80016b0:	409c      	lsls	r4, r3
 80016b2:	0002      	movs	r2, r0
 80016b4:	409d      	lsls	r5, r3
 80016b6:	4322      	orrs	r2, r4
 80016b8:	429f      	cmp	r7, r3
 80016ba:	dd00      	ble.n	80016be <__aeabi_dadd+0xd6>
 80016bc:	e173      	b.n	80019a6 <__aeabi_dadd+0x3be>
 80016be:	1bd8      	subs	r0, r3, r7
 80016c0:	3001      	adds	r0, #1
 80016c2:	1a09      	subs	r1, r1, r0
 80016c4:	002c      	movs	r4, r5
 80016c6:	408d      	lsls	r5, r1
 80016c8:	40c4      	lsrs	r4, r0
 80016ca:	1e6b      	subs	r3, r5, #1
 80016cc:	419d      	sbcs	r5, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	40c2      	lsrs	r2, r0
 80016d2:	408b      	lsls	r3, r1
 80016d4:	4325      	orrs	r5, r4
 80016d6:	2700      	movs	r7, #0
 80016d8:	0014      	movs	r4, r2
 80016da:	431d      	orrs	r5, r3
 80016dc:	076b      	lsls	r3, r5, #29
 80016de:	d009      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e0:	230f      	movs	r3, #15
 80016e2:	402b      	ands	r3, r5
 80016e4:	2b04      	cmp	r3, #4
 80016e6:	d005      	beq.n	80016f4 <__aeabi_dadd+0x10c>
 80016e8:	1d2b      	adds	r3, r5, #4
 80016ea:	42ab      	cmp	r3, r5
 80016ec:	41ad      	sbcs	r5, r5
 80016ee:	426d      	negs	r5, r5
 80016f0:	1964      	adds	r4, r4, r5
 80016f2:	001d      	movs	r5, r3
 80016f4:	0223      	lsls	r3, r4, #8
 80016f6:	d400      	bmi.n	80016fa <__aeabi_dadd+0x112>
 80016f8:	e12d      	b.n	8001956 <__aeabi_dadd+0x36e>
 80016fa:	4a9d      	ldr	r2, [pc, #628]	@ (8001970 <__aeabi_dadd+0x388>)
 80016fc:	3701      	adds	r7, #1
 80016fe:	4297      	cmp	r7, r2
 8001700:	d100      	bne.n	8001704 <__aeabi_dadd+0x11c>
 8001702:	e0d3      	b.n	80018ac <__aeabi_dadd+0x2c4>
 8001704:	4646      	mov	r6, r8
 8001706:	499b      	ldr	r1, [pc, #620]	@ (8001974 <__aeabi_dadd+0x38c>)
 8001708:	08ed      	lsrs	r5, r5, #3
 800170a:	4021      	ands	r1, r4
 800170c:	074a      	lsls	r2, r1, #29
 800170e:	432a      	orrs	r2, r5
 8001710:	057c      	lsls	r4, r7, #21
 8001712:	024d      	lsls	r5, r1, #9
 8001714:	0b2d      	lsrs	r5, r5, #12
 8001716:	0d64      	lsrs	r4, r4, #21
 8001718:	0524      	lsls	r4, r4, #20
 800171a:	432c      	orrs	r4, r5
 800171c:	07f6      	lsls	r6, r6, #31
 800171e:	4334      	orrs	r4, r6
 8001720:	0010      	movs	r0, r2
 8001722:	0021      	movs	r1, r4
 8001724:	b003      	add	sp, #12
 8001726:	bcf0      	pop	{r4, r5, r6, r7}
 8001728:	46bb      	mov	fp, r7
 800172a:	46b2      	mov	sl, r6
 800172c:	46a9      	mov	r9, r5
 800172e:	46a0      	mov	r8, r4
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	2a00      	cmp	r2, #0
 8001734:	d100      	bne.n	8001738 <__aeabi_dadd+0x150>
 8001736:	e084      	b.n	8001842 <__aeabi_dadd+0x25a>
 8001738:	464a      	mov	r2, r9
 800173a:	1bd2      	subs	r2, r2, r7
 800173c:	2f00      	cmp	r7, #0
 800173e:	d000      	beq.n	8001742 <__aeabi_dadd+0x15a>
 8001740:	e16d      	b.n	8001a1e <__aeabi_dadd+0x436>
 8001742:	0025      	movs	r5, r4
 8001744:	4305      	orrs	r5, r0
 8001746:	d100      	bne.n	800174a <__aeabi_dadd+0x162>
 8001748:	e127      	b.n	800199a <__aeabi_dadd+0x3b2>
 800174a:	1e56      	subs	r6, r2, #1
 800174c:	2a01      	cmp	r2, #1
 800174e:	d100      	bne.n	8001752 <__aeabi_dadd+0x16a>
 8001750:	e23b      	b.n	8001bca <__aeabi_dadd+0x5e2>
 8001752:	4d87      	ldr	r5, [pc, #540]	@ (8001970 <__aeabi_dadd+0x388>)
 8001754:	42aa      	cmp	r2, r5
 8001756:	d100      	bne.n	800175a <__aeabi_dadd+0x172>
 8001758:	e26a      	b.n	8001c30 <__aeabi_dadd+0x648>
 800175a:	2501      	movs	r5, #1
 800175c:	2e38      	cmp	r6, #56	@ 0x38
 800175e:	dc12      	bgt.n	8001786 <__aeabi_dadd+0x19e>
 8001760:	0032      	movs	r2, r6
 8001762:	2a1f      	cmp	r2, #31
 8001764:	dd00      	ble.n	8001768 <__aeabi_dadd+0x180>
 8001766:	e1f8      	b.n	8001b5a <__aeabi_dadd+0x572>
 8001768:	2620      	movs	r6, #32
 800176a:	0025      	movs	r5, r4
 800176c:	1ab6      	subs	r6, r6, r2
 800176e:	0007      	movs	r7, r0
 8001770:	4653      	mov	r3, sl
 8001772:	40b0      	lsls	r0, r6
 8001774:	40d4      	lsrs	r4, r2
 8001776:	40b5      	lsls	r5, r6
 8001778:	40d7      	lsrs	r7, r2
 800177a:	1e46      	subs	r6, r0, #1
 800177c:	41b0      	sbcs	r0, r6
 800177e:	1b1b      	subs	r3, r3, r4
 8001780:	469a      	mov	sl, r3
 8001782:	433d      	orrs	r5, r7
 8001784:	4305      	orrs	r5, r0
 8001786:	4662      	mov	r2, ip
 8001788:	1b55      	subs	r5, r2, r5
 800178a:	45ac      	cmp	ip, r5
 800178c:	4192      	sbcs	r2, r2
 800178e:	4653      	mov	r3, sl
 8001790:	4252      	negs	r2, r2
 8001792:	000e      	movs	r6, r1
 8001794:	464f      	mov	r7, r9
 8001796:	4688      	mov	r8, r1
 8001798:	1a9c      	subs	r4, r3, r2
 800179a:	e778      	b.n	800168e <__aeabi_dadd+0xa6>
 800179c:	2a00      	cmp	r2, #0
 800179e:	dc00      	bgt.n	80017a2 <__aeabi_dadd+0x1ba>
 80017a0:	e08e      	b.n	80018c0 <__aeabi_dadd+0x2d8>
 80017a2:	4649      	mov	r1, r9
 80017a4:	2900      	cmp	r1, #0
 80017a6:	d175      	bne.n	8001894 <__aeabi_dadd+0x2ac>
 80017a8:	4661      	mov	r1, ip
 80017aa:	4653      	mov	r3, sl
 80017ac:	4319      	orrs	r1, r3
 80017ae:	d100      	bne.n	80017b2 <__aeabi_dadd+0x1ca>
 80017b0:	e0f6      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80017b2:	1e51      	subs	r1, r2, #1
 80017b4:	2a01      	cmp	r2, #1
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x1d2>
 80017b8:	e191      	b.n	8001ade <__aeabi_dadd+0x4f6>
 80017ba:	4d6d      	ldr	r5, [pc, #436]	@ (8001970 <__aeabi_dadd+0x388>)
 80017bc:	42aa      	cmp	r2, r5
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x1da>
 80017c0:	e0dc      	b.n	800197c <__aeabi_dadd+0x394>
 80017c2:	2501      	movs	r5, #1
 80017c4:	2938      	cmp	r1, #56	@ 0x38
 80017c6:	dc14      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80017c8:	000a      	movs	r2, r1
 80017ca:	2a1f      	cmp	r2, #31
 80017cc:	dd00      	ble.n	80017d0 <__aeabi_dadd+0x1e8>
 80017ce:	e1a2      	b.n	8001b16 <__aeabi_dadd+0x52e>
 80017d0:	2120      	movs	r1, #32
 80017d2:	4653      	mov	r3, sl
 80017d4:	1a89      	subs	r1, r1, r2
 80017d6:	408b      	lsls	r3, r1
 80017d8:	001d      	movs	r5, r3
 80017da:	4663      	mov	r3, ip
 80017dc:	40d3      	lsrs	r3, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	4663      	mov	r3, ip
 80017e2:	408b      	lsls	r3, r1
 80017e4:	0019      	movs	r1, r3
 80017e6:	1e4b      	subs	r3, r1, #1
 80017e8:	4199      	sbcs	r1, r3
 80017ea:	4653      	mov	r3, sl
 80017ec:	40d3      	lsrs	r3, r2
 80017ee:	430d      	orrs	r5, r1
 80017f0:	18e4      	adds	r4, r4, r3
 80017f2:	182d      	adds	r5, r5, r0
 80017f4:	4285      	cmp	r5, r0
 80017f6:	4180      	sbcs	r0, r0
 80017f8:	4240      	negs	r0, r0
 80017fa:	1824      	adds	r4, r4, r0
 80017fc:	0223      	lsls	r3, r4, #8
 80017fe:	d559      	bpl.n	80018b4 <__aeabi_dadd+0x2cc>
 8001800:	4b5b      	ldr	r3, [pc, #364]	@ (8001970 <__aeabi_dadd+0x388>)
 8001802:	3701      	adds	r7, #1
 8001804:	429f      	cmp	r7, r3
 8001806:	d051      	beq.n	80018ac <__aeabi_dadd+0x2c4>
 8001808:	2101      	movs	r1, #1
 800180a:	4b5a      	ldr	r3, [pc, #360]	@ (8001974 <__aeabi_dadd+0x38c>)
 800180c:	086a      	lsrs	r2, r5, #1
 800180e:	401c      	ands	r4, r3
 8001810:	4029      	ands	r1, r5
 8001812:	430a      	orrs	r2, r1
 8001814:	07e5      	lsls	r5, r4, #31
 8001816:	4315      	orrs	r5, r2
 8001818:	0864      	lsrs	r4, r4, #1
 800181a:	e75f      	b.n	80016dc <__aeabi_dadd+0xf4>
 800181c:	4661      	mov	r1, ip
 800181e:	4653      	mov	r3, sl
 8001820:	4319      	orrs	r1, r3
 8001822:	d100      	bne.n	8001826 <__aeabi_dadd+0x23e>
 8001824:	e0bc      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001826:	1e51      	subs	r1, r2, #1
 8001828:	2a01      	cmp	r2, #1
 800182a:	d100      	bne.n	800182e <__aeabi_dadd+0x246>
 800182c:	e164      	b.n	8001af8 <__aeabi_dadd+0x510>
 800182e:	4d50      	ldr	r5, [pc, #320]	@ (8001970 <__aeabi_dadd+0x388>)
 8001830:	42aa      	cmp	r2, r5
 8001832:	d100      	bne.n	8001836 <__aeabi_dadd+0x24e>
 8001834:	e16a      	b.n	8001b0c <__aeabi_dadd+0x524>
 8001836:	2501      	movs	r5, #1
 8001838:	2938      	cmp	r1, #56	@ 0x38
 800183a:	dd00      	ble.n	800183e <__aeabi_dadd+0x256>
 800183c:	e722      	b.n	8001684 <__aeabi_dadd+0x9c>
 800183e:	000a      	movs	r2, r1
 8001840:	e70e      	b.n	8001660 <__aeabi_dadd+0x78>
 8001842:	4a4d      	ldr	r2, [pc, #308]	@ (8001978 <__aeabi_dadd+0x390>)
 8001844:	1c7d      	adds	r5, r7, #1
 8001846:	4215      	tst	r5, r2
 8001848:	d000      	beq.n	800184c <__aeabi_dadd+0x264>
 800184a:	e0d0      	b.n	80019ee <__aeabi_dadd+0x406>
 800184c:	0025      	movs	r5, r4
 800184e:	4662      	mov	r2, ip
 8001850:	4653      	mov	r3, sl
 8001852:	4305      	orrs	r5, r0
 8001854:	431a      	orrs	r2, r3
 8001856:	2f00      	cmp	r7, #0
 8001858:	d000      	beq.n	800185c <__aeabi_dadd+0x274>
 800185a:	e137      	b.n	8001acc <__aeabi_dadd+0x4e4>
 800185c:	2d00      	cmp	r5, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x27a>
 8001860:	e1a8      	b.n	8001bb4 <__aeabi_dadd+0x5cc>
 8001862:	2a00      	cmp	r2, #0
 8001864:	d100      	bne.n	8001868 <__aeabi_dadd+0x280>
 8001866:	e16a      	b.n	8001b3e <__aeabi_dadd+0x556>
 8001868:	4663      	mov	r3, ip
 800186a:	1ac5      	subs	r5, r0, r3
 800186c:	4653      	mov	r3, sl
 800186e:	1ae2      	subs	r2, r4, r3
 8001870:	42a8      	cmp	r0, r5
 8001872:	419b      	sbcs	r3, r3
 8001874:	425b      	negs	r3, r3
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	021a      	lsls	r2, r3, #8
 800187a:	d400      	bmi.n	800187e <__aeabi_dadd+0x296>
 800187c:	e203      	b.n	8001c86 <__aeabi_dadd+0x69e>
 800187e:	4663      	mov	r3, ip
 8001880:	1a1d      	subs	r5, r3, r0
 8001882:	45ac      	cmp	ip, r5
 8001884:	4192      	sbcs	r2, r2
 8001886:	4653      	mov	r3, sl
 8001888:	4252      	negs	r2, r2
 800188a:	1b1c      	subs	r4, r3, r4
 800188c:	000e      	movs	r6, r1
 800188e:	4688      	mov	r8, r1
 8001890:	1aa4      	subs	r4, r4, r2
 8001892:	e723      	b.n	80016dc <__aeabi_dadd+0xf4>
 8001894:	4936      	ldr	r1, [pc, #216]	@ (8001970 <__aeabi_dadd+0x388>)
 8001896:	428f      	cmp	r7, r1
 8001898:	d070      	beq.n	800197c <__aeabi_dadd+0x394>
 800189a:	2501      	movs	r5, #1
 800189c:	2a38      	cmp	r2, #56	@ 0x38
 800189e:	dca8      	bgt.n	80017f2 <__aeabi_dadd+0x20a>
 80018a0:	2180      	movs	r1, #128	@ 0x80
 80018a2:	4653      	mov	r3, sl
 80018a4:	0409      	lsls	r1, r1, #16
 80018a6:	430b      	orrs	r3, r1
 80018a8:	469a      	mov	sl, r3
 80018aa:	e78e      	b.n	80017ca <__aeabi_dadd+0x1e2>
 80018ac:	003c      	movs	r4, r7
 80018ae:	2500      	movs	r5, #0
 80018b0:	2200      	movs	r2, #0
 80018b2:	e731      	b.n	8001718 <__aeabi_dadd+0x130>
 80018b4:	2307      	movs	r3, #7
 80018b6:	402b      	ands	r3, r5
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d000      	beq.n	80018be <__aeabi_dadd+0x2d6>
 80018bc:	e710      	b.n	80016e0 <__aeabi_dadd+0xf8>
 80018be:	e093      	b.n	80019e8 <__aeabi_dadd+0x400>
 80018c0:	2a00      	cmp	r2, #0
 80018c2:	d074      	beq.n	80019ae <__aeabi_dadd+0x3c6>
 80018c4:	464a      	mov	r2, r9
 80018c6:	1bd2      	subs	r2, r2, r7
 80018c8:	2f00      	cmp	r7, #0
 80018ca:	d100      	bne.n	80018ce <__aeabi_dadd+0x2e6>
 80018cc:	e0c7      	b.n	8001a5e <__aeabi_dadd+0x476>
 80018ce:	4928      	ldr	r1, [pc, #160]	@ (8001970 <__aeabi_dadd+0x388>)
 80018d0:	4589      	cmp	r9, r1
 80018d2:	d100      	bne.n	80018d6 <__aeabi_dadd+0x2ee>
 80018d4:	e185      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 80018d6:	2501      	movs	r5, #1
 80018d8:	2a38      	cmp	r2, #56	@ 0x38
 80018da:	dc12      	bgt.n	8001902 <__aeabi_dadd+0x31a>
 80018dc:	2180      	movs	r1, #128	@ 0x80
 80018de:	0409      	lsls	r1, r1, #16
 80018e0:	430c      	orrs	r4, r1
 80018e2:	2a1f      	cmp	r2, #31
 80018e4:	dd00      	ble.n	80018e8 <__aeabi_dadd+0x300>
 80018e6:	e1ab      	b.n	8001c40 <__aeabi_dadd+0x658>
 80018e8:	2120      	movs	r1, #32
 80018ea:	0025      	movs	r5, r4
 80018ec:	1a89      	subs	r1, r1, r2
 80018ee:	0007      	movs	r7, r0
 80018f0:	4088      	lsls	r0, r1
 80018f2:	408d      	lsls	r5, r1
 80018f4:	40d7      	lsrs	r7, r2
 80018f6:	1e41      	subs	r1, r0, #1
 80018f8:	4188      	sbcs	r0, r1
 80018fa:	40d4      	lsrs	r4, r2
 80018fc:	433d      	orrs	r5, r7
 80018fe:	4305      	orrs	r5, r0
 8001900:	44a2      	add	sl, r4
 8001902:	4465      	add	r5, ip
 8001904:	4565      	cmp	r5, ip
 8001906:	4192      	sbcs	r2, r2
 8001908:	4252      	negs	r2, r2
 800190a:	4452      	add	r2, sl
 800190c:	0014      	movs	r4, r2
 800190e:	464f      	mov	r7, r9
 8001910:	e774      	b.n	80017fc <__aeabi_dadd+0x214>
 8001912:	0028      	movs	r0, r5
 8001914:	f001 fdf0 	bl	80034f8 <__clzsi2>
 8001918:	0003      	movs	r3, r0
 800191a:	3318      	adds	r3, #24
 800191c:	2b1f      	cmp	r3, #31
 800191e:	dc00      	bgt.n	8001922 <__aeabi_dadd+0x33a>
 8001920:	e6c2      	b.n	80016a8 <__aeabi_dadd+0xc0>
 8001922:	002a      	movs	r2, r5
 8001924:	3808      	subs	r0, #8
 8001926:	4082      	lsls	r2, r0
 8001928:	429f      	cmp	r7, r3
 800192a:	dd00      	ble.n	800192e <__aeabi_dadd+0x346>
 800192c:	e0a9      	b.n	8001a82 <__aeabi_dadd+0x49a>
 800192e:	1bdb      	subs	r3, r3, r7
 8001930:	1c58      	adds	r0, r3, #1
 8001932:	281f      	cmp	r0, #31
 8001934:	dc00      	bgt.n	8001938 <__aeabi_dadd+0x350>
 8001936:	e1ac      	b.n	8001c92 <__aeabi_dadd+0x6aa>
 8001938:	0015      	movs	r5, r2
 800193a:	3b1f      	subs	r3, #31
 800193c:	40dd      	lsrs	r5, r3
 800193e:	2820      	cmp	r0, #32
 8001940:	d005      	beq.n	800194e <__aeabi_dadd+0x366>
 8001942:	2340      	movs	r3, #64	@ 0x40
 8001944:	1a1b      	subs	r3, r3, r0
 8001946:	409a      	lsls	r2, r3
 8001948:	1e53      	subs	r3, r2, #1
 800194a:	419a      	sbcs	r2, r3
 800194c:	4315      	orrs	r5, r2
 800194e:	2307      	movs	r3, #7
 8001950:	2700      	movs	r7, #0
 8001952:	402b      	ands	r3, r5
 8001954:	e7b0      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001956:	08ed      	lsrs	r5, r5, #3
 8001958:	4b05      	ldr	r3, [pc, #20]	@ (8001970 <__aeabi_dadd+0x388>)
 800195a:	0762      	lsls	r2, r4, #29
 800195c:	432a      	orrs	r2, r5
 800195e:	08e4      	lsrs	r4, r4, #3
 8001960:	429f      	cmp	r7, r3
 8001962:	d00f      	beq.n	8001984 <__aeabi_dadd+0x39c>
 8001964:	0324      	lsls	r4, r4, #12
 8001966:	0b25      	lsrs	r5, r4, #12
 8001968:	057c      	lsls	r4, r7, #21
 800196a:	0d64      	lsrs	r4, r4, #21
 800196c:	e6d4      	b.n	8001718 <__aeabi_dadd+0x130>
 800196e:	46c0      	nop			@ (mov r8, r8)
 8001970:	000007ff 	.word	0x000007ff
 8001974:	ff7fffff 	.word	0xff7fffff
 8001978:	000007fe 	.word	0x000007fe
 800197c:	08c0      	lsrs	r0, r0, #3
 800197e:	0762      	lsls	r2, r4, #29
 8001980:	4302      	orrs	r2, r0
 8001982:	08e4      	lsrs	r4, r4, #3
 8001984:	0013      	movs	r3, r2
 8001986:	4323      	orrs	r3, r4
 8001988:	d100      	bne.n	800198c <__aeabi_dadd+0x3a4>
 800198a:	e186      	b.n	8001c9a <__aeabi_dadd+0x6b2>
 800198c:	2580      	movs	r5, #128	@ 0x80
 800198e:	032d      	lsls	r5, r5, #12
 8001990:	4325      	orrs	r5, r4
 8001992:	032d      	lsls	r5, r5, #12
 8001994:	4cc3      	ldr	r4, [pc, #780]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001996:	0b2d      	lsrs	r5, r5, #12
 8001998:	e6be      	b.n	8001718 <__aeabi_dadd+0x130>
 800199a:	4660      	mov	r0, ip
 800199c:	4654      	mov	r4, sl
 800199e:	000e      	movs	r6, r1
 80019a0:	0017      	movs	r7, r2
 80019a2:	08c5      	lsrs	r5, r0, #3
 80019a4:	e7d8      	b.n	8001958 <__aeabi_dadd+0x370>
 80019a6:	4cc0      	ldr	r4, [pc, #768]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019a8:	1aff      	subs	r7, r7, r3
 80019aa:	4014      	ands	r4, r2
 80019ac:	e696      	b.n	80016dc <__aeabi_dadd+0xf4>
 80019ae:	4abf      	ldr	r2, [pc, #764]	@ (8001cac <__aeabi_dadd+0x6c4>)
 80019b0:	1c79      	adds	r1, r7, #1
 80019b2:	4211      	tst	r1, r2
 80019b4:	d16b      	bne.n	8001a8e <__aeabi_dadd+0x4a6>
 80019b6:	0022      	movs	r2, r4
 80019b8:	4302      	orrs	r2, r0
 80019ba:	2f00      	cmp	r7, #0
 80019bc:	d000      	beq.n	80019c0 <__aeabi_dadd+0x3d8>
 80019be:	e0db      	b.n	8001b78 <__aeabi_dadd+0x590>
 80019c0:	2a00      	cmp	r2, #0
 80019c2:	d100      	bne.n	80019c6 <__aeabi_dadd+0x3de>
 80019c4:	e12d      	b.n	8001c22 <__aeabi_dadd+0x63a>
 80019c6:	4662      	mov	r2, ip
 80019c8:	4653      	mov	r3, sl
 80019ca:	431a      	orrs	r2, r3
 80019cc:	d100      	bne.n	80019d0 <__aeabi_dadd+0x3e8>
 80019ce:	e0b6      	b.n	8001b3e <__aeabi_dadd+0x556>
 80019d0:	4663      	mov	r3, ip
 80019d2:	18c5      	adds	r5, r0, r3
 80019d4:	4285      	cmp	r5, r0
 80019d6:	4180      	sbcs	r0, r0
 80019d8:	4454      	add	r4, sl
 80019da:	4240      	negs	r0, r0
 80019dc:	1824      	adds	r4, r4, r0
 80019de:	0223      	lsls	r3, r4, #8
 80019e0:	d502      	bpl.n	80019e8 <__aeabi_dadd+0x400>
 80019e2:	000f      	movs	r7, r1
 80019e4:	4bb0      	ldr	r3, [pc, #704]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 80019e6:	401c      	ands	r4, r3
 80019e8:	003a      	movs	r2, r7
 80019ea:	0028      	movs	r0, r5
 80019ec:	e7d8      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 80019ee:	4662      	mov	r2, ip
 80019f0:	1a85      	subs	r5, r0, r2
 80019f2:	42a8      	cmp	r0, r5
 80019f4:	4192      	sbcs	r2, r2
 80019f6:	4653      	mov	r3, sl
 80019f8:	4252      	negs	r2, r2
 80019fa:	4691      	mov	r9, r2
 80019fc:	1ae3      	subs	r3, r4, r3
 80019fe:	001a      	movs	r2, r3
 8001a00:	464b      	mov	r3, r9
 8001a02:	1ad2      	subs	r2, r2, r3
 8001a04:	0013      	movs	r3, r2
 8001a06:	4691      	mov	r9, r2
 8001a08:	021a      	lsls	r2, r3, #8
 8001a0a:	d454      	bmi.n	8001ab6 <__aeabi_dadd+0x4ce>
 8001a0c:	464a      	mov	r2, r9
 8001a0e:	464c      	mov	r4, r9
 8001a10:	432a      	orrs	r2, r5
 8001a12:	d000      	beq.n	8001a16 <__aeabi_dadd+0x42e>
 8001a14:	e640      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001a16:	2600      	movs	r6, #0
 8001a18:	2400      	movs	r4, #0
 8001a1a:	2500      	movs	r5, #0
 8001a1c:	e67c      	b.n	8001718 <__aeabi_dadd+0x130>
 8001a1e:	4da1      	ldr	r5, [pc, #644]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a20:	45a9      	cmp	r9, r5
 8001a22:	d100      	bne.n	8001a26 <__aeabi_dadd+0x43e>
 8001a24:	e090      	b.n	8001b48 <__aeabi_dadd+0x560>
 8001a26:	2501      	movs	r5, #1
 8001a28:	2a38      	cmp	r2, #56	@ 0x38
 8001a2a:	dd00      	ble.n	8001a2e <__aeabi_dadd+0x446>
 8001a2c:	e6ab      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001a2e:	2580      	movs	r5, #128	@ 0x80
 8001a30:	042d      	lsls	r5, r5, #16
 8001a32:	432c      	orrs	r4, r5
 8001a34:	e695      	b.n	8001762 <__aeabi_dadd+0x17a>
 8001a36:	0011      	movs	r1, r2
 8001a38:	4655      	mov	r5, sl
 8001a3a:	3920      	subs	r1, #32
 8001a3c:	40cd      	lsrs	r5, r1
 8001a3e:	46a9      	mov	r9, r5
 8001a40:	2a20      	cmp	r2, #32
 8001a42:	d006      	beq.n	8001a52 <__aeabi_dadd+0x46a>
 8001a44:	2140      	movs	r1, #64	@ 0x40
 8001a46:	4653      	mov	r3, sl
 8001a48:	1a8a      	subs	r2, r1, r2
 8001a4a:	4093      	lsls	r3, r2
 8001a4c:	4662      	mov	r2, ip
 8001a4e:	431a      	orrs	r2, r3
 8001a50:	4694      	mov	ip, r2
 8001a52:	4665      	mov	r5, ip
 8001a54:	1e6b      	subs	r3, r5, #1
 8001a56:	419d      	sbcs	r5, r3
 8001a58:	464b      	mov	r3, r9
 8001a5a:	431d      	orrs	r5, r3
 8001a5c:	e612      	b.n	8001684 <__aeabi_dadd+0x9c>
 8001a5e:	0021      	movs	r1, r4
 8001a60:	4301      	orrs	r1, r0
 8001a62:	d100      	bne.n	8001a66 <__aeabi_dadd+0x47e>
 8001a64:	e0c4      	b.n	8001bf0 <__aeabi_dadd+0x608>
 8001a66:	1e51      	subs	r1, r2, #1
 8001a68:	2a01      	cmp	r2, #1
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dadd+0x486>
 8001a6c:	e0fb      	b.n	8001c66 <__aeabi_dadd+0x67e>
 8001a6e:	4d8d      	ldr	r5, [pc, #564]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a70:	42aa      	cmp	r2, r5
 8001a72:	d100      	bne.n	8001a76 <__aeabi_dadd+0x48e>
 8001a74:	e0b5      	b.n	8001be2 <__aeabi_dadd+0x5fa>
 8001a76:	2501      	movs	r5, #1
 8001a78:	2938      	cmp	r1, #56	@ 0x38
 8001a7a:	dd00      	ble.n	8001a7e <__aeabi_dadd+0x496>
 8001a7c:	e741      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001a7e:	000a      	movs	r2, r1
 8001a80:	e72f      	b.n	80018e2 <__aeabi_dadd+0x2fa>
 8001a82:	4c89      	ldr	r4, [pc, #548]	@ (8001ca8 <__aeabi_dadd+0x6c0>)
 8001a84:	1aff      	subs	r7, r7, r3
 8001a86:	4014      	ands	r4, r2
 8001a88:	0762      	lsls	r2, r4, #29
 8001a8a:	08e4      	lsrs	r4, r4, #3
 8001a8c:	e76a      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001a8e:	4a85      	ldr	r2, [pc, #532]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001a90:	4291      	cmp	r1, r2
 8001a92:	d100      	bne.n	8001a96 <__aeabi_dadd+0x4ae>
 8001a94:	e0e3      	b.n	8001c5e <__aeabi_dadd+0x676>
 8001a96:	4663      	mov	r3, ip
 8001a98:	18c2      	adds	r2, r0, r3
 8001a9a:	4282      	cmp	r2, r0
 8001a9c:	4180      	sbcs	r0, r0
 8001a9e:	0023      	movs	r3, r4
 8001aa0:	4240      	negs	r0, r0
 8001aa2:	4453      	add	r3, sl
 8001aa4:	181b      	adds	r3, r3, r0
 8001aa6:	07dd      	lsls	r5, r3, #31
 8001aa8:	085c      	lsrs	r4, r3, #1
 8001aaa:	2307      	movs	r3, #7
 8001aac:	0852      	lsrs	r2, r2, #1
 8001aae:	4315      	orrs	r5, r2
 8001ab0:	000f      	movs	r7, r1
 8001ab2:	402b      	ands	r3, r5
 8001ab4:	e700      	b.n	80018b8 <__aeabi_dadd+0x2d0>
 8001ab6:	4663      	mov	r3, ip
 8001ab8:	1a1d      	subs	r5, r3, r0
 8001aba:	45ac      	cmp	ip, r5
 8001abc:	4192      	sbcs	r2, r2
 8001abe:	4653      	mov	r3, sl
 8001ac0:	4252      	negs	r2, r2
 8001ac2:	1b1c      	subs	r4, r3, r4
 8001ac4:	000e      	movs	r6, r1
 8001ac6:	4688      	mov	r8, r1
 8001ac8:	1aa4      	subs	r4, r4, r2
 8001aca:	e5e5      	b.n	8001698 <__aeabi_dadd+0xb0>
 8001acc:	2d00      	cmp	r5, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dadd+0x4ea>
 8001ad0:	e091      	b.n	8001bf6 <__aeabi_dadd+0x60e>
 8001ad2:	2a00      	cmp	r2, #0
 8001ad4:	d138      	bne.n	8001b48 <__aeabi_dadd+0x560>
 8001ad6:	2480      	movs	r4, #128	@ 0x80
 8001ad8:	2600      	movs	r6, #0
 8001ada:	0324      	lsls	r4, r4, #12
 8001adc:	e756      	b.n	800198c <__aeabi_dadd+0x3a4>
 8001ade:	4663      	mov	r3, ip
 8001ae0:	18c5      	adds	r5, r0, r3
 8001ae2:	4285      	cmp	r5, r0
 8001ae4:	4180      	sbcs	r0, r0
 8001ae6:	4454      	add	r4, sl
 8001ae8:	4240      	negs	r0, r0
 8001aea:	1824      	adds	r4, r4, r0
 8001aec:	2701      	movs	r7, #1
 8001aee:	0223      	lsls	r3, r4, #8
 8001af0:	d400      	bmi.n	8001af4 <__aeabi_dadd+0x50c>
 8001af2:	e6df      	b.n	80018b4 <__aeabi_dadd+0x2cc>
 8001af4:	2702      	movs	r7, #2
 8001af6:	e687      	b.n	8001808 <__aeabi_dadd+0x220>
 8001af8:	4663      	mov	r3, ip
 8001afa:	1ac5      	subs	r5, r0, r3
 8001afc:	42a8      	cmp	r0, r5
 8001afe:	4180      	sbcs	r0, r0
 8001b00:	4653      	mov	r3, sl
 8001b02:	4240      	negs	r0, r0
 8001b04:	1ae4      	subs	r4, r4, r3
 8001b06:	2701      	movs	r7, #1
 8001b08:	1a24      	subs	r4, r4, r0
 8001b0a:	e5c0      	b.n	800168e <__aeabi_dadd+0xa6>
 8001b0c:	0762      	lsls	r2, r4, #29
 8001b0e:	08c0      	lsrs	r0, r0, #3
 8001b10:	4302      	orrs	r2, r0
 8001b12:	08e4      	lsrs	r4, r4, #3
 8001b14:	e736      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b16:	0011      	movs	r1, r2
 8001b18:	4653      	mov	r3, sl
 8001b1a:	3920      	subs	r1, #32
 8001b1c:	40cb      	lsrs	r3, r1
 8001b1e:	4699      	mov	r9, r3
 8001b20:	2a20      	cmp	r2, #32
 8001b22:	d006      	beq.n	8001b32 <__aeabi_dadd+0x54a>
 8001b24:	2140      	movs	r1, #64	@ 0x40
 8001b26:	4653      	mov	r3, sl
 8001b28:	1a8a      	subs	r2, r1, r2
 8001b2a:	4093      	lsls	r3, r2
 8001b2c:	4662      	mov	r2, ip
 8001b2e:	431a      	orrs	r2, r3
 8001b30:	4694      	mov	ip, r2
 8001b32:	4665      	mov	r5, ip
 8001b34:	1e6b      	subs	r3, r5, #1
 8001b36:	419d      	sbcs	r5, r3
 8001b38:	464b      	mov	r3, r9
 8001b3a:	431d      	orrs	r5, r3
 8001b3c:	e659      	b.n	80017f2 <__aeabi_dadd+0x20a>
 8001b3e:	0762      	lsls	r2, r4, #29
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	4302      	orrs	r2, r0
 8001b44:	08e4      	lsrs	r4, r4, #3
 8001b46:	e70d      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001b48:	4653      	mov	r3, sl
 8001b4a:	075a      	lsls	r2, r3, #29
 8001b4c:	4663      	mov	r3, ip
 8001b4e:	08d8      	lsrs	r0, r3, #3
 8001b50:	4653      	mov	r3, sl
 8001b52:	000e      	movs	r6, r1
 8001b54:	4302      	orrs	r2, r0
 8001b56:	08dc      	lsrs	r4, r3, #3
 8001b58:	e714      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001b5a:	0015      	movs	r5, r2
 8001b5c:	0026      	movs	r6, r4
 8001b5e:	3d20      	subs	r5, #32
 8001b60:	40ee      	lsrs	r6, r5
 8001b62:	2a20      	cmp	r2, #32
 8001b64:	d003      	beq.n	8001b6e <__aeabi_dadd+0x586>
 8001b66:	2540      	movs	r5, #64	@ 0x40
 8001b68:	1aaa      	subs	r2, r5, r2
 8001b6a:	4094      	lsls	r4, r2
 8001b6c:	4320      	orrs	r0, r4
 8001b6e:	1e42      	subs	r2, r0, #1
 8001b70:	4190      	sbcs	r0, r2
 8001b72:	0005      	movs	r5, r0
 8001b74:	4335      	orrs	r5, r6
 8001b76:	e606      	b.n	8001786 <__aeabi_dadd+0x19e>
 8001b78:	2a00      	cmp	r2, #0
 8001b7a:	d07c      	beq.n	8001c76 <__aeabi_dadd+0x68e>
 8001b7c:	4662      	mov	r2, ip
 8001b7e:	4653      	mov	r3, sl
 8001b80:	08c0      	lsrs	r0, r0, #3
 8001b82:	431a      	orrs	r2, r3
 8001b84:	d100      	bne.n	8001b88 <__aeabi_dadd+0x5a0>
 8001b86:	e6fa      	b.n	800197e <__aeabi_dadd+0x396>
 8001b88:	0762      	lsls	r2, r4, #29
 8001b8a:	4310      	orrs	r0, r2
 8001b8c:	2280      	movs	r2, #128	@ 0x80
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	0312      	lsls	r2, r2, #12
 8001b92:	4214      	tst	r4, r2
 8001b94:	d008      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b96:	08d9      	lsrs	r1, r3, #3
 8001b98:	4211      	tst	r1, r2
 8001b9a:	d105      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001b9c:	4663      	mov	r3, ip
 8001b9e:	08d8      	lsrs	r0, r3, #3
 8001ba0:	4653      	mov	r3, sl
 8001ba2:	000c      	movs	r4, r1
 8001ba4:	075b      	lsls	r3, r3, #29
 8001ba6:	4318      	orrs	r0, r3
 8001ba8:	0f42      	lsrs	r2, r0, #29
 8001baa:	00c0      	lsls	r0, r0, #3
 8001bac:	08c0      	lsrs	r0, r0, #3
 8001bae:	0752      	lsls	r2, r2, #29
 8001bb0:	4302      	orrs	r2, r0
 8001bb2:	e6e7      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bb4:	2a00      	cmp	r2, #0
 8001bb6:	d100      	bne.n	8001bba <__aeabi_dadd+0x5d2>
 8001bb8:	e72d      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	08d8      	lsrs	r0, r3, #3
 8001bbe:	4653      	mov	r3, sl
 8001bc0:	075a      	lsls	r2, r3, #29
 8001bc2:	000e      	movs	r6, r1
 8001bc4:	4302      	orrs	r2, r0
 8001bc6:	08dc      	lsrs	r4, r3, #3
 8001bc8:	e6cc      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001bca:	4663      	mov	r3, ip
 8001bcc:	1a1d      	subs	r5, r3, r0
 8001bce:	45ac      	cmp	ip, r5
 8001bd0:	4192      	sbcs	r2, r2
 8001bd2:	4653      	mov	r3, sl
 8001bd4:	4252      	negs	r2, r2
 8001bd6:	1b1c      	subs	r4, r3, r4
 8001bd8:	000e      	movs	r6, r1
 8001bda:	4688      	mov	r8, r1
 8001bdc:	1aa4      	subs	r4, r4, r2
 8001bde:	3701      	adds	r7, #1
 8001be0:	e555      	b.n	800168e <__aeabi_dadd+0xa6>
 8001be2:	4663      	mov	r3, ip
 8001be4:	08d9      	lsrs	r1, r3, #3
 8001be6:	4653      	mov	r3, sl
 8001be8:	075a      	lsls	r2, r3, #29
 8001bea:	430a      	orrs	r2, r1
 8001bec:	08dc      	lsrs	r4, r3, #3
 8001bee:	e6c9      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001bf0:	4660      	mov	r0, ip
 8001bf2:	4654      	mov	r4, sl
 8001bf4:	e6d4      	b.n	80019a0 <__aeabi_dadd+0x3b8>
 8001bf6:	08c0      	lsrs	r0, r0, #3
 8001bf8:	2a00      	cmp	r2, #0
 8001bfa:	d100      	bne.n	8001bfe <__aeabi_dadd+0x616>
 8001bfc:	e6bf      	b.n	800197e <__aeabi_dadd+0x396>
 8001bfe:	0762      	lsls	r2, r4, #29
 8001c00:	4310      	orrs	r0, r2
 8001c02:	2280      	movs	r2, #128	@ 0x80
 8001c04:	08e4      	lsrs	r4, r4, #3
 8001c06:	0312      	lsls	r2, r2, #12
 8001c08:	4214      	tst	r4, r2
 8001c0a:	d0cd      	beq.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c0c:	08dd      	lsrs	r5, r3, #3
 8001c0e:	4215      	tst	r5, r2
 8001c10:	d1ca      	bne.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c12:	4663      	mov	r3, ip
 8001c14:	08d8      	lsrs	r0, r3, #3
 8001c16:	4653      	mov	r3, sl
 8001c18:	075b      	lsls	r3, r3, #29
 8001c1a:	000e      	movs	r6, r1
 8001c1c:	002c      	movs	r4, r5
 8001c1e:	4318      	orrs	r0, r3
 8001c20:	e7c2      	b.n	8001ba8 <__aeabi_dadd+0x5c0>
 8001c22:	4663      	mov	r3, ip
 8001c24:	08d9      	lsrs	r1, r3, #3
 8001c26:	4653      	mov	r3, sl
 8001c28:	075a      	lsls	r2, r3, #29
 8001c2a:	430a      	orrs	r2, r1
 8001c2c:	08dc      	lsrs	r4, r3, #3
 8001c2e:	e699      	b.n	8001964 <__aeabi_dadd+0x37c>
 8001c30:	4663      	mov	r3, ip
 8001c32:	08d8      	lsrs	r0, r3, #3
 8001c34:	4653      	mov	r3, sl
 8001c36:	075a      	lsls	r2, r3, #29
 8001c38:	000e      	movs	r6, r1
 8001c3a:	4302      	orrs	r2, r0
 8001c3c:	08dc      	lsrs	r4, r3, #3
 8001c3e:	e6a1      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c40:	0011      	movs	r1, r2
 8001c42:	0027      	movs	r7, r4
 8001c44:	3920      	subs	r1, #32
 8001c46:	40cf      	lsrs	r7, r1
 8001c48:	2a20      	cmp	r2, #32
 8001c4a:	d003      	beq.n	8001c54 <__aeabi_dadd+0x66c>
 8001c4c:	2140      	movs	r1, #64	@ 0x40
 8001c4e:	1a8a      	subs	r2, r1, r2
 8001c50:	4094      	lsls	r4, r2
 8001c52:	4320      	orrs	r0, r4
 8001c54:	1e42      	subs	r2, r0, #1
 8001c56:	4190      	sbcs	r0, r2
 8001c58:	0005      	movs	r5, r0
 8001c5a:	433d      	orrs	r5, r7
 8001c5c:	e651      	b.n	8001902 <__aeabi_dadd+0x31a>
 8001c5e:	000c      	movs	r4, r1
 8001c60:	2500      	movs	r5, #0
 8001c62:	2200      	movs	r2, #0
 8001c64:	e558      	b.n	8001718 <__aeabi_dadd+0x130>
 8001c66:	4460      	add	r0, ip
 8001c68:	4560      	cmp	r0, ip
 8001c6a:	4192      	sbcs	r2, r2
 8001c6c:	4454      	add	r4, sl
 8001c6e:	4252      	negs	r2, r2
 8001c70:	0005      	movs	r5, r0
 8001c72:	18a4      	adds	r4, r4, r2
 8001c74:	e73a      	b.n	8001aec <__aeabi_dadd+0x504>
 8001c76:	4653      	mov	r3, sl
 8001c78:	075a      	lsls	r2, r3, #29
 8001c7a:	4663      	mov	r3, ip
 8001c7c:	08d9      	lsrs	r1, r3, #3
 8001c7e:	4653      	mov	r3, sl
 8001c80:	430a      	orrs	r2, r1
 8001c82:	08dc      	lsrs	r4, r3, #3
 8001c84:	e67e      	b.n	8001984 <__aeabi_dadd+0x39c>
 8001c86:	001a      	movs	r2, r3
 8001c88:	001c      	movs	r4, r3
 8001c8a:	432a      	orrs	r2, r5
 8001c8c:	d000      	beq.n	8001c90 <__aeabi_dadd+0x6a8>
 8001c8e:	e6ab      	b.n	80019e8 <__aeabi_dadd+0x400>
 8001c90:	e6c1      	b.n	8001a16 <__aeabi_dadd+0x42e>
 8001c92:	2120      	movs	r1, #32
 8001c94:	2500      	movs	r5, #0
 8001c96:	1a09      	subs	r1, r1, r0
 8001c98:	e519      	b.n	80016ce <__aeabi_dadd+0xe6>
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2500      	movs	r5, #0
 8001c9e:	4c01      	ldr	r4, [pc, #4]	@ (8001ca4 <__aeabi_dadd+0x6bc>)
 8001ca0:	e53a      	b.n	8001718 <__aeabi_dadd+0x130>
 8001ca2:	46c0      	nop			@ (mov r8, r8)
 8001ca4:	000007ff 	.word	0x000007ff
 8001ca8:	ff7fffff 	.word	0xff7fffff
 8001cac:	000007fe 	.word	0x000007fe

08001cb0 <__aeabi_ddiv>:
 8001cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cb2:	46de      	mov	lr, fp
 8001cb4:	4645      	mov	r5, r8
 8001cb6:	4657      	mov	r7, sl
 8001cb8:	464e      	mov	r6, r9
 8001cba:	b5e0      	push	{r5, r6, r7, lr}
 8001cbc:	b087      	sub	sp, #28
 8001cbe:	9200      	str	r2, [sp, #0]
 8001cc0:	9301      	str	r3, [sp, #4]
 8001cc2:	030b      	lsls	r3, r1, #12
 8001cc4:	0b1b      	lsrs	r3, r3, #12
 8001cc6:	469b      	mov	fp, r3
 8001cc8:	0fca      	lsrs	r2, r1, #31
 8001cca:	004b      	lsls	r3, r1, #1
 8001ccc:	0004      	movs	r4, r0
 8001cce:	4680      	mov	r8, r0
 8001cd0:	0d5b      	lsrs	r3, r3, #21
 8001cd2:	9202      	str	r2, [sp, #8]
 8001cd4:	d100      	bne.n	8001cd8 <__aeabi_ddiv+0x28>
 8001cd6:	e16a      	b.n	8001fae <__aeabi_ddiv+0x2fe>
 8001cd8:	4ad4      	ldr	r2, [pc, #848]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d100      	bne.n	8001ce0 <__aeabi_ddiv+0x30>
 8001cde:	e18c      	b.n	8001ffa <__aeabi_ddiv+0x34a>
 8001ce0:	4659      	mov	r1, fp
 8001ce2:	0f42      	lsrs	r2, r0, #29
 8001ce4:	00c9      	lsls	r1, r1, #3
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	2180      	movs	r1, #128	@ 0x80
 8001cea:	0409      	lsls	r1, r1, #16
 8001cec:	4311      	orrs	r1, r2
 8001cee:	00c2      	lsls	r2, r0, #3
 8001cf0:	4690      	mov	r8, r2
 8001cf2:	4acf      	ldr	r2, [pc, #828]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001cf4:	4689      	mov	r9, r1
 8001cf6:	4692      	mov	sl, r2
 8001cf8:	449a      	add	sl, r3
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	2400      	movs	r4, #0
 8001cfe:	9303      	str	r3, [sp, #12]
 8001d00:	9e00      	ldr	r6, [sp, #0]
 8001d02:	9f01      	ldr	r7, [sp, #4]
 8001d04:	033b      	lsls	r3, r7, #12
 8001d06:	0b1b      	lsrs	r3, r3, #12
 8001d08:	469b      	mov	fp, r3
 8001d0a:	007b      	lsls	r3, r7, #1
 8001d0c:	0030      	movs	r0, r6
 8001d0e:	0d5b      	lsrs	r3, r3, #21
 8001d10:	0ffd      	lsrs	r5, r7, #31
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d100      	bne.n	8001d18 <__aeabi_ddiv+0x68>
 8001d16:	e128      	b.n	8001f6a <__aeabi_ddiv+0x2ba>
 8001d18:	4ac4      	ldr	r2, [pc, #784]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d100      	bne.n	8001d20 <__aeabi_ddiv+0x70>
 8001d1e:	e177      	b.n	8002010 <__aeabi_ddiv+0x360>
 8001d20:	4659      	mov	r1, fp
 8001d22:	0f72      	lsrs	r2, r6, #29
 8001d24:	00c9      	lsls	r1, r1, #3
 8001d26:	430a      	orrs	r2, r1
 8001d28:	2180      	movs	r1, #128	@ 0x80
 8001d2a:	0409      	lsls	r1, r1, #16
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	468b      	mov	fp, r1
 8001d30:	49bf      	ldr	r1, [pc, #764]	@ (8002030 <__aeabi_ddiv+0x380>)
 8001d32:	00f2      	lsls	r2, r6, #3
 8001d34:	468c      	mov	ip, r1
 8001d36:	4651      	mov	r1, sl
 8001d38:	4463      	add	r3, ip
 8001d3a:	1acb      	subs	r3, r1, r3
 8001d3c:	469a      	mov	sl, r3
 8001d3e:	2300      	movs	r3, #0
 8001d40:	9e02      	ldr	r6, [sp, #8]
 8001d42:	406e      	eors	r6, r5
 8001d44:	2c0f      	cmp	r4, #15
 8001d46:	d827      	bhi.n	8001d98 <__aeabi_ddiv+0xe8>
 8001d48:	49ba      	ldr	r1, [pc, #744]	@ (8002034 <__aeabi_ddiv+0x384>)
 8001d4a:	00a4      	lsls	r4, r4, #2
 8001d4c:	5909      	ldr	r1, [r1, r4]
 8001d4e:	468f      	mov	pc, r1
 8001d50:	46cb      	mov	fp, r9
 8001d52:	4642      	mov	r2, r8
 8001d54:	9e02      	ldr	r6, [sp, #8]
 8001d56:	9b03      	ldr	r3, [sp, #12]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d016      	beq.n	8001d8a <__aeabi_ddiv+0xda>
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d100      	bne.n	8001d62 <__aeabi_ddiv+0xb2>
 8001d60:	e2a6      	b.n	80022b0 <__aeabi_ddiv+0x600>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d000      	beq.n	8001d68 <__aeabi_ddiv+0xb8>
 8001d66:	e0df      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4690      	mov	r8, r2
 8001d70:	051b      	lsls	r3, r3, #20
 8001d72:	4323      	orrs	r3, r4
 8001d74:	07f6      	lsls	r6, r6, #31
 8001d76:	4333      	orrs	r3, r6
 8001d78:	4640      	mov	r0, r8
 8001d7a:	0019      	movs	r1, r3
 8001d7c:	b007      	add	sp, #28
 8001d7e:	bcf0      	pop	{r4, r5, r6, r7}
 8001d80:	46bb      	mov	fp, r7
 8001d82:	46b2      	mov	sl, r6
 8001d84:	46a9      	mov	r9, r5
 8001d86:	46a0      	mov	r8, r4
 8001d88:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2400      	movs	r4, #0
 8001d8e:	4690      	mov	r8, r2
 8001d90:	4ba6      	ldr	r3, [pc, #664]	@ (800202c <__aeabi_ddiv+0x37c>)
 8001d92:	e7ed      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001d94:	002e      	movs	r6, r5
 8001d96:	e7df      	b.n	8001d58 <__aeabi_ddiv+0xa8>
 8001d98:	45cb      	cmp	fp, r9
 8001d9a:	d200      	bcs.n	8001d9e <__aeabi_ddiv+0xee>
 8001d9c:	e1d4      	b.n	8002148 <__aeabi_ddiv+0x498>
 8001d9e:	d100      	bne.n	8001da2 <__aeabi_ddiv+0xf2>
 8001da0:	e1cf      	b.n	8002142 <__aeabi_ddiv+0x492>
 8001da2:	2301      	movs	r3, #1
 8001da4:	425b      	negs	r3, r3
 8001da6:	469c      	mov	ip, r3
 8001da8:	4644      	mov	r4, r8
 8001daa:	4648      	mov	r0, r9
 8001dac:	2700      	movs	r7, #0
 8001dae:	44e2      	add	sl, ip
 8001db0:	465b      	mov	r3, fp
 8001db2:	0e15      	lsrs	r5, r2, #24
 8001db4:	021b      	lsls	r3, r3, #8
 8001db6:	431d      	orrs	r5, r3
 8001db8:	0c19      	lsrs	r1, r3, #16
 8001dba:	042b      	lsls	r3, r5, #16
 8001dbc:	0212      	lsls	r2, r2, #8
 8001dbe:	9500      	str	r5, [sp, #0]
 8001dc0:	0c1d      	lsrs	r5, r3, #16
 8001dc2:	4691      	mov	r9, r2
 8001dc4:	9102      	str	r1, [sp, #8]
 8001dc6:	9503      	str	r5, [sp, #12]
 8001dc8:	f7fe fa40 	bl	800024c <__aeabi_uidivmod>
 8001dcc:	0002      	movs	r2, r0
 8001dce:	436a      	muls	r2, r5
 8001dd0:	040b      	lsls	r3, r1, #16
 8001dd2:	0c21      	lsrs	r1, r4, #16
 8001dd4:	4680      	mov	r8, r0
 8001dd6:	4319      	orrs	r1, r3
 8001dd8:	428a      	cmp	r2, r1
 8001dda:	d909      	bls.n	8001df0 <__aeabi_ddiv+0x140>
 8001ddc:	9d00      	ldr	r5, [sp, #0]
 8001dde:	2301      	movs	r3, #1
 8001de0:	46ac      	mov	ip, r5
 8001de2:	425b      	negs	r3, r3
 8001de4:	4461      	add	r1, ip
 8001de6:	469c      	mov	ip, r3
 8001de8:	44e0      	add	r8, ip
 8001dea:	428d      	cmp	r5, r1
 8001dec:	d800      	bhi.n	8001df0 <__aeabi_ddiv+0x140>
 8001dee:	e1fb      	b.n	80021e8 <__aeabi_ddiv+0x538>
 8001df0:	1a88      	subs	r0, r1, r2
 8001df2:	9902      	ldr	r1, [sp, #8]
 8001df4:	f7fe fa2a 	bl	800024c <__aeabi_uidivmod>
 8001df8:	9a03      	ldr	r2, [sp, #12]
 8001dfa:	0424      	lsls	r4, r4, #16
 8001dfc:	4342      	muls	r2, r0
 8001dfe:	0409      	lsls	r1, r1, #16
 8001e00:	0c24      	lsrs	r4, r4, #16
 8001e02:	0003      	movs	r3, r0
 8001e04:	430c      	orrs	r4, r1
 8001e06:	42a2      	cmp	r2, r4
 8001e08:	d906      	bls.n	8001e18 <__aeabi_ddiv+0x168>
 8001e0a:	9900      	ldr	r1, [sp, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	468c      	mov	ip, r1
 8001e10:	4464      	add	r4, ip
 8001e12:	42a1      	cmp	r1, r4
 8001e14:	d800      	bhi.n	8001e18 <__aeabi_ddiv+0x168>
 8001e16:	e1e1      	b.n	80021dc <__aeabi_ddiv+0x52c>
 8001e18:	1aa0      	subs	r0, r4, r2
 8001e1a:	4642      	mov	r2, r8
 8001e1c:	0412      	lsls	r2, r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	4693      	mov	fp, r2
 8001e22:	464b      	mov	r3, r9
 8001e24:	4659      	mov	r1, fp
 8001e26:	0c1b      	lsrs	r3, r3, #16
 8001e28:	001d      	movs	r5, r3
 8001e2a:	9304      	str	r3, [sp, #16]
 8001e2c:	040b      	lsls	r3, r1, #16
 8001e2e:	4649      	mov	r1, r9
 8001e30:	0409      	lsls	r1, r1, #16
 8001e32:	0c09      	lsrs	r1, r1, #16
 8001e34:	000c      	movs	r4, r1
 8001e36:	0c1b      	lsrs	r3, r3, #16
 8001e38:	435c      	muls	r4, r3
 8001e3a:	0c12      	lsrs	r2, r2, #16
 8001e3c:	436b      	muls	r3, r5
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4351      	muls	r1, r2
 8001e42:	436a      	muls	r2, r5
 8001e44:	0c25      	lsrs	r5, r4, #16
 8001e46:	46ac      	mov	ip, r5
 8001e48:	185b      	adds	r3, r3, r1
 8001e4a:	4463      	add	r3, ip
 8001e4c:	4299      	cmp	r1, r3
 8001e4e:	d903      	bls.n	8001e58 <__aeabi_ddiv+0x1a8>
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	0249      	lsls	r1, r1, #9
 8001e54:	468c      	mov	ip, r1
 8001e56:	4462      	add	r2, ip
 8001e58:	0c19      	lsrs	r1, r3, #16
 8001e5a:	0424      	lsls	r4, r4, #16
 8001e5c:	041b      	lsls	r3, r3, #16
 8001e5e:	0c24      	lsrs	r4, r4, #16
 8001e60:	188a      	adds	r2, r1, r2
 8001e62:	191c      	adds	r4, r3, r4
 8001e64:	4290      	cmp	r0, r2
 8001e66:	d302      	bcc.n	8001e6e <__aeabi_ddiv+0x1be>
 8001e68:	d116      	bne.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6a:	42a7      	cmp	r7, r4
 8001e6c:	d214      	bcs.n	8001e98 <__aeabi_ddiv+0x1e8>
 8001e6e:	465b      	mov	r3, fp
 8001e70:	9d00      	ldr	r5, [sp, #0]
 8001e72:	3b01      	subs	r3, #1
 8001e74:	444f      	add	r7, r9
 8001e76:	9305      	str	r3, [sp, #20]
 8001e78:	454f      	cmp	r7, r9
 8001e7a:	419b      	sbcs	r3, r3
 8001e7c:	46ac      	mov	ip, r5
 8001e7e:	425b      	negs	r3, r3
 8001e80:	4463      	add	r3, ip
 8001e82:	18c0      	adds	r0, r0, r3
 8001e84:	4285      	cmp	r5, r0
 8001e86:	d300      	bcc.n	8001e8a <__aeabi_ddiv+0x1da>
 8001e88:	e1a1      	b.n	80021ce <__aeabi_ddiv+0x51e>
 8001e8a:	4282      	cmp	r2, r0
 8001e8c:	d900      	bls.n	8001e90 <__aeabi_ddiv+0x1e0>
 8001e8e:	e1f6      	b.n	800227e <__aeabi_ddiv+0x5ce>
 8001e90:	d100      	bne.n	8001e94 <__aeabi_ddiv+0x1e4>
 8001e92:	e1f1      	b.n	8002278 <__aeabi_ddiv+0x5c8>
 8001e94:	9b05      	ldr	r3, [sp, #20]
 8001e96:	469b      	mov	fp, r3
 8001e98:	1b3c      	subs	r4, r7, r4
 8001e9a:	42a7      	cmp	r7, r4
 8001e9c:	41bf      	sbcs	r7, r7
 8001e9e:	9d00      	ldr	r5, [sp, #0]
 8001ea0:	1a80      	subs	r0, r0, r2
 8001ea2:	427f      	negs	r7, r7
 8001ea4:	1bc0      	subs	r0, r0, r7
 8001ea6:	4285      	cmp	r5, r0
 8001ea8:	d100      	bne.n	8001eac <__aeabi_ddiv+0x1fc>
 8001eaa:	e1d0      	b.n	800224e <__aeabi_ddiv+0x59e>
 8001eac:	9902      	ldr	r1, [sp, #8]
 8001eae:	f7fe f9cd 	bl	800024c <__aeabi_uidivmod>
 8001eb2:	9a03      	ldr	r2, [sp, #12]
 8001eb4:	040b      	lsls	r3, r1, #16
 8001eb6:	4342      	muls	r2, r0
 8001eb8:	0c21      	lsrs	r1, r4, #16
 8001eba:	0007      	movs	r7, r0
 8001ebc:	4319      	orrs	r1, r3
 8001ebe:	428a      	cmp	r2, r1
 8001ec0:	d900      	bls.n	8001ec4 <__aeabi_ddiv+0x214>
 8001ec2:	e178      	b.n	80021b6 <__aeabi_ddiv+0x506>
 8001ec4:	1a88      	subs	r0, r1, r2
 8001ec6:	9902      	ldr	r1, [sp, #8]
 8001ec8:	f7fe f9c0 	bl	800024c <__aeabi_uidivmod>
 8001ecc:	9a03      	ldr	r2, [sp, #12]
 8001ece:	0424      	lsls	r4, r4, #16
 8001ed0:	4342      	muls	r2, r0
 8001ed2:	0409      	lsls	r1, r1, #16
 8001ed4:	0c24      	lsrs	r4, r4, #16
 8001ed6:	0003      	movs	r3, r0
 8001ed8:	430c      	orrs	r4, r1
 8001eda:	42a2      	cmp	r2, r4
 8001edc:	d900      	bls.n	8001ee0 <__aeabi_ddiv+0x230>
 8001ede:	e15d      	b.n	800219c <__aeabi_ddiv+0x4ec>
 8001ee0:	4641      	mov	r1, r8
 8001ee2:	1aa4      	subs	r4, r4, r2
 8001ee4:	043a      	lsls	r2, r7, #16
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	9d04      	ldr	r5, [sp, #16]
 8001eea:	0413      	lsls	r3, r2, #16
 8001eec:	0c1b      	lsrs	r3, r3, #16
 8001eee:	4359      	muls	r1, r3
 8001ef0:	4647      	mov	r7, r8
 8001ef2:	436b      	muls	r3, r5
 8001ef4:	469c      	mov	ip, r3
 8001ef6:	0c10      	lsrs	r0, r2, #16
 8001ef8:	4347      	muls	r7, r0
 8001efa:	0c0b      	lsrs	r3, r1, #16
 8001efc:	44bc      	add	ip, r7
 8001efe:	4463      	add	r3, ip
 8001f00:	4368      	muls	r0, r5
 8001f02:	429f      	cmp	r7, r3
 8001f04:	d903      	bls.n	8001f0e <__aeabi_ddiv+0x25e>
 8001f06:	2580      	movs	r5, #128	@ 0x80
 8001f08:	026d      	lsls	r5, r5, #9
 8001f0a:	46ac      	mov	ip, r5
 8001f0c:	4460      	add	r0, ip
 8001f0e:	0c1f      	lsrs	r7, r3, #16
 8001f10:	0409      	lsls	r1, r1, #16
 8001f12:	041b      	lsls	r3, r3, #16
 8001f14:	0c09      	lsrs	r1, r1, #16
 8001f16:	183f      	adds	r7, r7, r0
 8001f18:	185b      	adds	r3, r3, r1
 8001f1a:	42bc      	cmp	r4, r7
 8001f1c:	d200      	bcs.n	8001f20 <__aeabi_ddiv+0x270>
 8001f1e:	e102      	b.n	8002126 <__aeabi_ddiv+0x476>
 8001f20:	d100      	bne.n	8001f24 <__aeabi_ddiv+0x274>
 8001f22:	e0fd      	b.n	8002120 <__aeabi_ddiv+0x470>
 8001f24:	2301      	movs	r3, #1
 8001f26:	431a      	orrs	r2, r3
 8001f28:	4b43      	ldr	r3, [pc, #268]	@ (8002038 <__aeabi_ddiv+0x388>)
 8001f2a:	4453      	add	r3, sl
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	dc00      	bgt.n	8001f32 <__aeabi_ddiv+0x282>
 8001f30:	e0ae      	b.n	8002090 <__aeabi_ddiv+0x3e0>
 8001f32:	0751      	lsls	r1, r2, #29
 8001f34:	d000      	beq.n	8001f38 <__aeabi_ddiv+0x288>
 8001f36:	e198      	b.n	800226a <__aeabi_ddiv+0x5ba>
 8001f38:	4659      	mov	r1, fp
 8001f3a:	01c9      	lsls	r1, r1, #7
 8001f3c:	d506      	bpl.n	8001f4c <__aeabi_ddiv+0x29c>
 8001f3e:	4659      	mov	r1, fp
 8001f40:	4b3e      	ldr	r3, [pc, #248]	@ (800203c <__aeabi_ddiv+0x38c>)
 8001f42:	4019      	ands	r1, r3
 8001f44:	2380      	movs	r3, #128	@ 0x80
 8001f46:	468b      	mov	fp, r1
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4453      	add	r3, sl
 8001f4c:	493c      	ldr	r1, [pc, #240]	@ (8002040 <__aeabi_ddiv+0x390>)
 8001f4e:	428b      	cmp	r3, r1
 8001f50:	dd00      	ble.n	8001f54 <__aeabi_ddiv+0x2a4>
 8001f52:	e71a      	b.n	8001d8a <__aeabi_ddiv+0xda>
 8001f54:	4659      	mov	r1, fp
 8001f56:	08d2      	lsrs	r2, r2, #3
 8001f58:	0749      	lsls	r1, r1, #29
 8001f5a:	4311      	orrs	r1, r2
 8001f5c:	465a      	mov	r2, fp
 8001f5e:	055b      	lsls	r3, r3, #21
 8001f60:	0254      	lsls	r4, r2, #9
 8001f62:	4688      	mov	r8, r1
 8001f64:	0b24      	lsrs	r4, r4, #12
 8001f66:	0d5b      	lsrs	r3, r3, #21
 8001f68:	e702      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8001f6a:	465a      	mov	r2, fp
 8001f6c:	9b00      	ldr	r3, [sp, #0]
 8001f6e:	431a      	orrs	r2, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_ddiv+0x2c4>
 8001f72:	e07e      	b.n	8002072 <__aeabi_ddiv+0x3c2>
 8001f74:	465b      	mov	r3, fp
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d100      	bne.n	8001f7c <__aeabi_ddiv+0x2cc>
 8001f7a:	e100      	b.n	800217e <__aeabi_ddiv+0x4ce>
 8001f7c:	4658      	mov	r0, fp
 8001f7e:	f001 fabb 	bl	80034f8 <__clzsi2>
 8001f82:	0002      	movs	r2, r0
 8001f84:	0003      	movs	r3, r0
 8001f86:	3a0b      	subs	r2, #11
 8001f88:	271d      	movs	r7, #29
 8001f8a:	9e00      	ldr	r6, [sp, #0]
 8001f8c:	1aba      	subs	r2, r7, r2
 8001f8e:	0019      	movs	r1, r3
 8001f90:	4658      	mov	r0, fp
 8001f92:	40d6      	lsrs	r6, r2
 8001f94:	3908      	subs	r1, #8
 8001f96:	4088      	lsls	r0, r1
 8001f98:	0032      	movs	r2, r6
 8001f9a:	4302      	orrs	r2, r0
 8001f9c:	4693      	mov	fp, r2
 8001f9e:	9a00      	ldr	r2, [sp, #0]
 8001fa0:	408a      	lsls	r2, r1
 8001fa2:	4928      	ldr	r1, [pc, #160]	@ (8002044 <__aeabi_ddiv+0x394>)
 8001fa4:	4453      	add	r3, sl
 8001fa6:	468a      	mov	sl, r1
 8001fa8:	449a      	add	sl, r3
 8001faa:	2300      	movs	r3, #0
 8001fac:	e6c8      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8001fae:	465b      	mov	r3, fp
 8001fb0:	4303      	orrs	r3, r0
 8001fb2:	4699      	mov	r9, r3
 8001fb4:	d056      	beq.n	8002064 <__aeabi_ddiv+0x3b4>
 8001fb6:	465b      	mov	r3, fp
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d100      	bne.n	8001fbe <__aeabi_ddiv+0x30e>
 8001fbc:	e0cd      	b.n	800215a <__aeabi_ddiv+0x4aa>
 8001fbe:	4658      	mov	r0, fp
 8001fc0:	f001 fa9a 	bl	80034f8 <__clzsi2>
 8001fc4:	230b      	movs	r3, #11
 8001fc6:	425b      	negs	r3, r3
 8001fc8:	469c      	mov	ip, r3
 8001fca:	0002      	movs	r2, r0
 8001fcc:	4484      	add	ip, r0
 8001fce:	4666      	mov	r6, ip
 8001fd0:	231d      	movs	r3, #29
 8001fd2:	1b9b      	subs	r3, r3, r6
 8001fd4:	0026      	movs	r6, r4
 8001fd6:	0011      	movs	r1, r2
 8001fd8:	4658      	mov	r0, fp
 8001fda:	40de      	lsrs	r6, r3
 8001fdc:	3908      	subs	r1, #8
 8001fde:	4088      	lsls	r0, r1
 8001fe0:	0033      	movs	r3, r6
 8001fe2:	4303      	orrs	r3, r0
 8001fe4:	4699      	mov	r9, r3
 8001fe6:	0023      	movs	r3, r4
 8001fe8:	408b      	lsls	r3, r1
 8001fea:	4698      	mov	r8, r3
 8001fec:	4b16      	ldr	r3, [pc, #88]	@ (8002048 <__aeabi_ddiv+0x398>)
 8001fee:	2400      	movs	r4, #0
 8001ff0:	1a9b      	subs	r3, r3, r2
 8001ff2:	469a      	mov	sl, r3
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	9303      	str	r3, [sp, #12]
 8001ff8:	e682      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8001ffa:	465a      	mov	r2, fp
 8001ffc:	4302      	orrs	r2, r0
 8001ffe:	4691      	mov	r9, r2
 8002000:	d12a      	bne.n	8002058 <__aeabi_ddiv+0x3a8>
 8002002:	2200      	movs	r2, #0
 8002004:	469a      	mov	sl, r3
 8002006:	2302      	movs	r3, #2
 8002008:	4690      	mov	r8, r2
 800200a:	2408      	movs	r4, #8
 800200c:	9303      	str	r3, [sp, #12]
 800200e:	e677      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002010:	465a      	mov	r2, fp
 8002012:	9b00      	ldr	r3, [sp, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	4b0d      	ldr	r3, [pc, #52]	@ (800204c <__aeabi_ddiv+0x39c>)
 8002018:	469c      	mov	ip, r3
 800201a:	44e2      	add	sl, ip
 800201c:	2a00      	cmp	r2, #0
 800201e:	d117      	bne.n	8002050 <__aeabi_ddiv+0x3a0>
 8002020:	2302      	movs	r3, #2
 8002022:	431c      	orrs	r4, r3
 8002024:	2300      	movs	r3, #0
 8002026:	469b      	mov	fp, r3
 8002028:	3302      	adds	r3, #2
 800202a:	e689      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800202c:	000007ff 	.word	0x000007ff
 8002030:	fffffc01 	.word	0xfffffc01
 8002034:	08012500 	.word	0x08012500
 8002038:	000003ff 	.word	0x000003ff
 800203c:	feffffff 	.word	0xfeffffff
 8002040:	000007fe 	.word	0x000007fe
 8002044:	000003f3 	.word	0x000003f3
 8002048:	fffffc0d 	.word	0xfffffc0d
 800204c:	fffff801 	.word	0xfffff801
 8002050:	2303      	movs	r3, #3
 8002052:	0032      	movs	r2, r6
 8002054:	431c      	orrs	r4, r3
 8002056:	e673      	b.n	8001d40 <__aeabi_ddiv+0x90>
 8002058:	469a      	mov	sl, r3
 800205a:	2303      	movs	r3, #3
 800205c:	46d9      	mov	r9, fp
 800205e:	240c      	movs	r4, #12
 8002060:	9303      	str	r3, [sp, #12]
 8002062:	e64d      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002064:	2300      	movs	r3, #0
 8002066:	4698      	mov	r8, r3
 8002068:	469a      	mov	sl, r3
 800206a:	3301      	adds	r3, #1
 800206c:	2404      	movs	r4, #4
 800206e:	9303      	str	r3, [sp, #12]
 8002070:	e646      	b.n	8001d00 <__aeabi_ddiv+0x50>
 8002072:	2301      	movs	r3, #1
 8002074:	431c      	orrs	r4, r3
 8002076:	2300      	movs	r3, #0
 8002078:	469b      	mov	fp, r3
 800207a:	3301      	adds	r3, #1
 800207c:	e660      	b.n	8001d40 <__aeabi_ddiv+0x90>
 800207e:	2300      	movs	r3, #0
 8002080:	2480      	movs	r4, #128	@ 0x80
 8002082:	4698      	mov	r8, r3
 8002084:	2600      	movs	r6, #0
 8002086:	4b92      	ldr	r3, [pc, #584]	@ (80022d0 <__aeabi_ddiv+0x620>)
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	e671      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800208c:	2201      	movs	r2, #1
 800208e:	4252      	negs	r2, r2
 8002090:	2101      	movs	r1, #1
 8002092:	1ac9      	subs	r1, r1, r3
 8002094:	2938      	cmp	r1, #56	@ 0x38
 8002096:	dd00      	ble.n	800209a <__aeabi_ddiv+0x3ea>
 8002098:	e666      	b.n	8001d68 <__aeabi_ddiv+0xb8>
 800209a:	291f      	cmp	r1, #31
 800209c:	dc00      	bgt.n	80020a0 <__aeabi_ddiv+0x3f0>
 800209e:	e0ab      	b.n	80021f8 <__aeabi_ddiv+0x548>
 80020a0:	201f      	movs	r0, #31
 80020a2:	4240      	negs	r0, r0
 80020a4:	1ac3      	subs	r3, r0, r3
 80020a6:	4658      	mov	r0, fp
 80020a8:	40d8      	lsrs	r0, r3
 80020aa:	0003      	movs	r3, r0
 80020ac:	2920      	cmp	r1, #32
 80020ae:	d004      	beq.n	80020ba <__aeabi_ddiv+0x40a>
 80020b0:	4658      	mov	r0, fp
 80020b2:	4988      	ldr	r1, [pc, #544]	@ (80022d4 <__aeabi_ddiv+0x624>)
 80020b4:	4451      	add	r1, sl
 80020b6:	4088      	lsls	r0, r1
 80020b8:	4302      	orrs	r2, r0
 80020ba:	1e51      	subs	r1, r2, #1
 80020bc:	418a      	sbcs	r2, r1
 80020be:	431a      	orrs	r2, r3
 80020c0:	2307      	movs	r3, #7
 80020c2:	0019      	movs	r1, r3
 80020c4:	2400      	movs	r4, #0
 80020c6:	4011      	ands	r1, r2
 80020c8:	4213      	tst	r3, r2
 80020ca:	d00c      	beq.n	80020e6 <__aeabi_ddiv+0x436>
 80020cc:	230f      	movs	r3, #15
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d100      	bne.n	80020d6 <__aeabi_ddiv+0x426>
 80020d4:	e0f9      	b.n	80022ca <__aeabi_ddiv+0x61a>
 80020d6:	1d11      	adds	r1, r2, #4
 80020d8:	4291      	cmp	r1, r2
 80020da:	419b      	sbcs	r3, r3
 80020dc:	000a      	movs	r2, r1
 80020de:	425b      	negs	r3, r3
 80020e0:	0759      	lsls	r1, r3, #29
 80020e2:	025b      	lsls	r3, r3, #9
 80020e4:	0b1c      	lsrs	r4, r3, #12
 80020e6:	08d2      	lsrs	r2, r2, #3
 80020e8:	430a      	orrs	r2, r1
 80020ea:	4690      	mov	r8, r2
 80020ec:	2300      	movs	r3, #0
 80020ee:	e63f      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80020f0:	2480      	movs	r4, #128	@ 0x80
 80020f2:	464b      	mov	r3, r9
 80020f4:	0324      	lsls	r4, r4, #12
 80020f6:	4223      	tst	r3, r4
 80020f8:	d009      	beq.n	800210e <__aeabi_ddiv+0x45e>
 80020fa:	465b      	mov	r3, fp
 80020fc:	4223      	tst	r3, r4
 80020fe:	d106      	bne.n	800210e <__aeabi_ddiv+0x45e>
 8002100:	431c      	orrs	r4, r3
 8002102:	0324      	lsls	r4, r4, #12
 8002104:	002e      	movs	r6, r5
 8002106:	4690      	mov	r8, r2
 8002108:	4b71      	ldr	r3, [pc, #452]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800210a:	0b24      	lsrs	r4, r4, #12
 800210c:	e630      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800210e:	2480      	movs	r4, #128	@ 0x80
 8002110:	464b      	mov	r3, r9
 8002112:	0324      	lsls	r4, r4, #12
 8002114:	431c      	orrs	r4, r3
 8002116:	0324      	lsls	r4, r4, #12
 8002118:	9e02      	ldr	r6, [sp, #8]
 800211a:	4b6d      	ldr	r3, [pc, #436]	@ (80022d0 <__aeabi_ddiv+0x620>)
 800211c:	0b24      	lsrs	r4, r4, #12
 800211e:	e627      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 8002120:	2b00      	cmp	r3, #0
 8002122:	d100      	bne.n	8002126 <__aeabi_ddiv+0x476>
 8002124:	e700      	b.n	8001f28 <__aeabi_ddiv+0x278>
 8002126:	9800      	ldr	r0, [sp, #0]
 8002128:	1e51      	subs	r1, r2, #1
 800212a:	4684      	mov	ip, r0
 800212c:	4464      	add	r4, ip
 800212e:	4284      	cmp	r4, r0
 8002130:	d200      	bcs.n	8002134 <__aeabi_ddiv+0x484>
 8002132:	e084      	b.n	800223e <__aeabi_ddiv+0x58e>
 8002134:	42bc      	cmp	r4, r7
 8002136:	d200      	bcs.n	800213a <__aeabi_ddiv+0x48a>
 8002138:	e0ae      	b.n	8002298 <__aeabi_ddiv+0x5e8>
 800213a:	d100      	bne.n	800213e <__aeabi_ddiv+0x48e>
 800213c:	e0c1      	b.n	80022c2 <__aeabi_ddiv+0x612>
 800213e:	000a      	movs	r2, r1
 8002140:	e6f0      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002142:	4542      	cmp	r2, r8
 8002144:	d900      	bls.n	8002148 <__aeabi_ddiv+0x498>
 8002146:	e62c      	b.n	8001da2 <__aeabi_ddiv+0xf2>
 8002148:	464b      	mov	r3, r9
 800214a:	07dc      	lsls	r4, r3, #31
 800214c:	0858      	lsrs	r0, r3, #1
 800214e:	4643      	mov	r3, r8
 8002150:	085b      	lsrs	r3, r3, #1
 8002152:	431c      	orrs	r4, r3
 8002154:	4643      	mov	r3, r8
 8002156:	07df      	lsls	r7, r3, #31
 8002158:	e62a      	b.n	8001db0 <__aeabi_ddiv+0x100>
 800215a:	f001 f9cd 	bl	80034f8 <__clzsi2>
 800215e:	2315      	movs	r3, #21
 8002160:	469c      	mov	ip, r3
 8002162:	4484      	add	ip, r0
 8002164:	0002      	movs	r2, r0
 8002166:	4663      	mov	r3, ip
 8002168:	3220      	adds	r2, #32
 800216a:	2b1c      	cmp	r3, #28
 800216c:	dc00      	bgt.n	8002170 <__aeabi_ddiv+0x4c0>
 800216e:	e72e      	b.n	8001fce <__aeabi_ddiv+0x31e>
 8002170:	0023      	movs	r3, r4
 8002172:	3808      	subs	r0, #8
 8002174:	4083      	lsls	r3, r0
 8002176:	4699      	mov	r9, r3
 8002178:	2300      	movs	r3, #0
 800217a:	4698      	mov	r8, r3
 800217c:	e736      	b.n	8001fec <__aeabi_ddiv+0x33c>
 800217e:	f001 f9bb 	bl	80034f8 <__clzsi2>
 8002182:	0002      	movs	r2, r0
 8002184:	0003      	movs	r3, r0
 8002186:	3215      	adds	r2, #21
 8002188:	3320      	adds	r3, #32
 800218a:	2a1c      	cmp	r2, #28
 800218c:	dc00      	bgt.n	8002190 <__aeabi_ddiv+0x4e0>
 800218e:	e6fb      	b.n	8001f88 <__aeabi_ddiv+0x2d8>
 8002190:	9900      	ldr	r1, [sp, #0]
 8002192:	3808      	subs	r0, #8
 8002194:	4081      	lsls	r1, r0
 8002196:	2200      	movs	r2, #0
 8002198:	468b      	mov	fp, r1
 800219a:	e702      	b.n	8001fa2 <__aeabi_ddiv+0x2f2>
 800219c:	9900      	ldr	r1, [sp, #0]
 800219e:	3b01      	subs	r3, #1
 80021a0:	468c      	mov	ip, r1
 80021a2:	4464      	add	r4, ip
 80021a4:	42a1      	cmp	r1, r4
 80021a6:	d900      	bls.n	80021aa <__aeabi_ddiv+0x4fa>
 80021a8:	e69a      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021aa:	42a2      	cmp	r2, r4
 80021ac:	d800      	bhi.n	80021b0 <__aeabi_ddiv+0x500>
 80021ae:	e697      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b0:	1e83      	subs	r3, r0, #2
 80021b2:	4464      	add	r4, ip
 80021b4:	e694      	b.n	8001ee0 <__aeabi_ddiv+0x230>
 80021b6:	46ac      	mov	ip, r5
 80021b8:	4461      	add	r1, ip
 80021ba:	3f01      	subs	r7, #1
 80021bc:	428d      	cmp	r5, r1
 80021be:	d900      	bls.n	80021c2 <__aeabi_ddiv+0x512>
 80021c0:	e680      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c2:	428a      	cmp	r2, r1
 80021c4:	d800      	bhi.n	80021c8 <__aeabi_ddiv+0x518>
 80021c6:	e67d      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021c8:	1e87      	subs	r7, r0, #2
 80021ca:	4461      	add	r1, ip
 80021cc:	e67a      	b.n	8001ec4 <__aeabi_ddiv+0x214>
 80021ce:	4285      	cmp	r5, r0
 80021d0:	d000      	beq.n	80021d4 <__aeabi_ddiv+0x524>
 80021d2:	e65f      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021d4:	45b9      	cmp	r9, r7
 80021d6:	d900      	bls.n	80021da <__aeabi_ddiv+0x52a>
 80021d8:	e65c      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 80021da:	e656      	b.n	8001e8a <__aeabi_ddiv+0x1da>
 80021dc:	42a2      	cmp	r2, r4
 80021de:	d800      	bhi.n	80021e2 <__aeabi_ddiv+0x532>
 80021e0:	e61a      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e2:	1e83      	subs	r3, r0, #2
 80021e4:	4464      	add	r4, ip
 80021e6:	e617      	b.n	8001e18 <__aeabi_ddiv+0x168>
 80021e8:	428a      	cmp	r2, r1
 80021ea:	d800      	bhi.n	80021ee <__aeabi_ddiv+0x53e>
 80021ec:	e600      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021ee:	46ac      	mov	ip, r5
 80021f0:	1e83      	subs	r3, r0, #2
 80021f2:	4698      	mov	r8, r3
 80021f4:	4461      	add	r1, ip
 80021f6:	e5fb      	b.n	8001df0 <__aeabi_ddiv+0x140>
 80021f8:	4837      	ldr	r0, [pc, #220]	@ (80022d8 <__aeabi_ddiv+0x628>)
 80021fa:	0014      	movs	r4, r2
 80021fc:	4450      	add	r0, sl
 80021fe:	4082      	lsls	r2, r0
 8002200:	465b      	mov	r3, fp
 8002202:	0017      	movs	r7, r2
 8002204:	4083      	lsls	r3, r0
 8002206:	40cc      	lsrs	r4, r1
 8002208:	1e7a      	subs	r2, r7, #1
 800220a:	4197      	sbcs	r7, r2
 800220c:	4323      	orrs	r3, r4
 800220e:	433b      	orrs	r3, r7
 8002210:	001a      	movs	r2, r3
 8002212:	465b      	mov	r3, fp
 8002214:	40cb      	lsrs	r3, r1
 8002216:	0751      	lsls	r1, r2, #29
 8002218:	d009      	beq.n	800222e <__aeabi_ddiv+0x57e>
 800221a:	210f      	movs	r1, #15
 800221c:	4011      	ands	r1, r2
 800221e:	2904      	cmp	r1, #4
 8002220:	d005      	beq.n	800222e <__aeabi_ddiv+0x57e>
 8002222:	1d11      	adds	r1, r2, #4
 8002224:	4291      	cmp	r1, r2
 8002226:	4192      	sbcs	r2, r2
 8002228:	4252      	negs	r2, r2
 800222a:	189b      	adds	r3, r3, r2
 800222c:	000a      	movs	r2, r1
 800222e:	0219      	lsls	r1, r3, #8
 8002230:	d400      	bmi.n	8002234 <__aeabi_ddiv+0x584>
 8002232:	e755      	b.n	80020e0 <__aeabi_ddiv+0x430>
 8002234:	2200      	movs	r2, #0
 8002236:	2301      	movs	r3, #1
 8002238:	2400      	movs	r4, #0
 800223a:	4690      	mov	r8, r2
 800223c:	e598      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 800223e:	000a      	movs	r2, r1
 8002240:	42bc      	cmp	r4, r7
 8002242:	d000      	beq.n	8002246 <__aeabi_ddiv+0x596>
 8002244:	e66e      	b.n	8001f24 <__aeabi_ddiv+0x274>
 8002246:	454b      	cmp	r3, r9
 8002248:	d000      	beq.n	800224c <__aeabi_ddiv+0x59c>
 800224a:	e66b      	b.n	8001f24 <__aeabi_ddiv+0x274>
 800224c:	e66c      	b.n	8001f28 <__aeabi_ddiv+0x278>
 800224e:	4b23      	ldr	r3, [pc, #140]	@ (80022dc <__aeabi_ddiv+0x62c>)
 8002250:	4a23      	ldr	r2, [pc, #140]	@ (80022e0 <__aeabi_ddiv+0x630>)
 8002252:	4453      	add	r3, sl
 8002254:	4592      	cmp	sl, r2
 8002256:	da00      	bge.n	800225a <__aeabi_ddiv+0x5aa>
 8002258:	e718      	b.n	800208c <__aeabi_ddiv+0x3dc>
 800225a:	2101      	movs	r1, #1
 800225c:	4249      	negs	r1, r1
 800225e:	1d0a      	adds	r2, r1, #4
 8002260:	428a      	cmp	r2, r1
 8002262:	4189      	sbcs	r1, r1
 8002264:	4249      	negs	r1, r1
 8002266:	448b      	add	fp, r1
 8002268:	e666      	b.n	8001f38 <__aeabi_ddiv+0x288>
 800226a:	210f      	movs	r1, #15
 800226c:	4011      	ands	r1, r2
 800226e:	2904      	cmp	r1, #4
 8002270:	d100      	bne.n	8002274 <__aeabi_ddiv+0x5c4>
 8002272:	e661      	b.n	8001f38 <__aeabi_ddiv+0x288>
 8002274:	0011      	movs	r1, r2
 8002276:	e7f2      	b.n	800225e <__aeabi_ddiv+0x5ae>
 8002278:	42bc      	cmp	r4, r7
 800227a:	d800      	bhi.n	800227e <__aeabi_ddiv+0x5ce>
 800227c:	e60a      	b.n	8001e94 <__aeabi_ddiv+0x1e4>
 800227e:	2302      	movs	r3, #2
 8002280:	425b      	negs	r3, r3
 8002282:	469c      	mov	ip, r3
 8002284:	9900      	ldr	r1, [sp, #0]
 8002286:	444f      	add	r7, r9
 8002288:	454f      	cmp	r7, r9
 800228a:	419b      	sbcs	r3, r3
 800228c:	44e3      	add	fp, ip
 800228e:	468c      	mov	ip, r1
 8002290:	425b      	negs	r3, r3
 8002292:	4463      	add	r3, ip
 8002294:	18c0      	adds	r0, r0, r3
 8002296:	e5ff      	b.n	8001e98 <__aeabi_ddiv+0x1e8>
 8002298:	4649      	mov	r1, r9
 800229a:	9d00      	ldr	r5, [sp, #0]
 800229c:	0048      	lsls	r0, r1, #1
 800229e:	4548      	cmp	r0, r9
 80022a0:	4189      	sbcs	r1, r1
 80022a2:	46ac      	mov	ip, r5
 80022a4:	4249      	negs	r1, r1
 80022a6:	4461      	add	r1, ip
 80022a8:	4681      	mov	r9, r0
 80022aa:	3a02      	subs	r2, #2
 80022ac:	1864      	adds	r4, r4, r1
 80022ae:	e7c7      	b.n	8002240 <__aeabi_ddiv+0x590>
 80022b0:	2480      	movs	r4, #128	@ 0x80
 80022b2:	465b      	mov	r3, fp
 80022b4:	0324      	lsls	r4, r4, #12
 80022b6:	431c      	orrs	r4, r3
 80022b8:	0324      	lsls	r4, r4, #12
 80022ba:	4690      	mov	r8, r2
 80022bc:	4b04      	ldr	r3, [pc, #16]	@ (80022d0 <__aeabi_ddiv+0x620>)
 80022be:	0b24      	lsrs	r4, r4, #12
 80022c0:	e556      	b.n	8001d70 <__aeabi_ddiv+0xc0>
 80022c2:	4599      	cmp	r9, r3
 80022c4:	d3e8      	bcc.n	8002298 <__aeabi_ddiv+0x5e8>
 80022c6:	000a      	movs	r2, r1
 80022c8:	e7bd      	b.n	8002246 <__aeabi_ddiv+0x596>
 80022ca:	2300      	movs	r3, #0
 80022cc:	e708      	b.n	80020e0 <__aeabi_ddiv+0x430>
 80022ce:	46c0      	nop			@ (mov r8, r8)
 80022d0:	000007ff 	.word	0x000007ff
 80022d4:	0000043e 	.word	0x0000043e
 80022d8:	0000041e 	.word	0x0000041e
 80022dc:	000003ff 	.word	0x000003ff
 80022e0:	fffffc02 	.word	0xfffffc02

080022e4 <__eqdf2>:
 80022e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022e6:	4657      	mov	r7, sl
 80022e8:	46de      	mov	lr, fp
 80022ea:	464e      	mov	r6, r9
 80022ec:	4645      	mov	r5, r8
 80022ee:	b5e0      	push	{r5, r6, r7, lr}
 80022f0:	000d      	movs	r5, r1
 80022f2:	0004      	movs	r4, r0
 80022f4:	0fe8      	lsrs	r0, r5, #31
 80022f6:	4683      	mov	fp, r0
 80022f8:	0309      	lsls	r1, r1, #12
 80022fa:	0fd8      	lsrs	r0, r3, #31
 80022fc:	0b09      	lsrs	r1, r1, #12
 80022fe:	4682      	mov	sl, r0
 8002300:	4819      	ldr	r0, [pc, #100]	@ (8002368 <__eqdf2+0x84>)
 8002302:	468c      	mov	ip, r1
 8002304:	031f      	lsls	r7, r3, #12
 8002306:	0069      	lsls	r1, r5, #1
 8002308:	005e      	lsls	r6, r3, #1
 800230a:	0d49      	lsrs	r1, r1, #21
 800230c:	0b3f      	lsrs	r7, r7, #12
 800230e:	0d76      	lsrs	r6, r6, #21
 8002310:	4281      	cmp	r1, r0
 8002312:	d018      	beq.n	8002346 <__eqdf2+0x62>
 8002314:	4286      	cmp	r6, r0
 8002316:	d00f      	beq.n	8002338 <__eqdf2+0x54>
 8002318:	2001      	movs	r0, #1
 800231a:	42b1      	cmp	r1, r6
 800231c:	d10d      	bne.n	800233a <__eqdf2+0x56>
 800231e:	45bc      	cmp	ip, r7
 8002320:	d10b      	bne.n	800233a <__eqdf2+0x56>
 8002322:	4294      	cmp	r4, r2
 8002324:	d109      	bne.n	800233a <__eqdf2+0x56>
 8002326:	45d3      	cmp	fp, sl
 8002328:	d01c      	beq.n	8002364 <__eqdf2+0x80>
 800232a:	2900      	cmp	r1, #0
 800232c:	d105      	bne.n	800233a <__eqdf2+0x56>
 800232e:	4660      	mov	r0, ip
 8002330:	4320      	orrs	r0, r4
 8002332:	1e43      	subs	r3, r0, #1
 8002334:	4198      	sbcs	r0, r3
 8002336:	e000      	b.n	800233a <__eqdf2+0x56>
 8002338:	2001      	movs	r0, #1
 800233a:	bcf0      	pop	{r4, r5, r6, r7}
 800233c:	46bb      	mov	fp, r7
 800233e:	46b2      	mov	sl, r6
 8002340:	46a9      	mov	r9, r5
 8002342:	46a0      	mov	r8, r4
 8002344:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002346:	2001      	movs	r0, #1
 8002348:	428e      	cmp	r6, r1
 800234a:	d1f6      	bne.n	800233a <__eqdf2+0x56>
 800234c:	4661      	mov	r1, ip
 800234e:	4339      	orrs	r1, r7
 8002350:	000f      	movs	r7, r1
 8002352:	4317      	orrs	r7, r2
 8002354:	4327      	orrs	r7, r4
 8002356:	d1f0      	bne.n	800233a <__eqdf2+0x56>
 8002358:	465b      	mov	r3, fp
 800235a:	4652      	mov	r2, sl
 800235c:	1a98      	subs	r0, r3, r2
 800235e:	1e43      	subs	r3, r0, #1
 8002360:	4198      	sbcs	r0, r3
 8002362:	e7ea      	b.n	800233a <__eqdf2+0x56>
 8002364:	2000      	movs	r0, #0
 8002366:	e7e8      	b.n	800233a <__eqdf2+0x56>
 8002368:	000007ff 	.word	0x000007ff

0800236c <__gedf2>:
 800236c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800236e:	4657      	mov	r7, sl
 8002370:	464e      	mov	r6, r9
 8002372:	4645      	mov	r5, r8
 8002374:	46de      	mov	lr, fp
 8002376:	b5e0      	push	{r5, r6, r7, lr}
 8002378:	000d      	movs	r5, r1
 800237a:	030f      	lsls	r7, r1, #12
 800237c:	0b39      	lsrs	r1, r7, #12
 800237e:	b083      	sub	sp, #12
 8002380:	0004      	movs	r4, r0
 8002382:	4680      	mov	r8, r0
 8002384:	9101      	str	r1, [sp, #4]
 8002386:	0058      	lsls	r0, r3, #1
 8002388:	0fe9      	lsrs	r1, r5, #31
 800238a:	4f31      	ldr	r7, [pc, #196]	@ (8002450 <__gedf2+0xe4>)
 800238c:	0d40      	lsrs	r0, r0, #21
 800238e:	468c      	mov	ip, r1
 8002390:	006e      	lsls	r6, r5, #1
 8002392:	0319      	lsls	r1, r3, #12
 8002394:	4682      	mov	sl, r0
 8002396:	4691      	mov	r9, r2
 8002398:	0d76      	lsrs	r6, r6, #21
 800239a:	0b09      	lsrs	r1, r1, #12
 800239c:	0fd8      	lsrs	r0, r3, #31
 800239e:	42be      	cmp	r6, r7
 80023a0:	d01f      	beq.n	80023e2 <__gedf2+0x76>
 80023a2:	45ba      	cmp	sl, r7
 80023a4:	d00f      	beq.n	80023c6 <__gedf2+0x5a>
 80023a6:	2e00      	cmp	r6, #0
 80023a8:	d12f      	bne.n	800240a <__gedf2+0x9e>
 80023aa:	4655      	mov	r5, sl
 80023ac:	9e01      	ldr	r6, [sp, #4]
 80023ae:	4334      	orrs	r4, r6
 80023b0:	2d00      	cmp	r5, #0
 80023b2:	d127      	bne.n	8002404 <__gedf2+0x98>
 80023b4:	430a      	orrs	r2, r1
 80023b6:	d03a      	beq.n	800242e <__gedf2+0xc2>
 80023b8:	2c00      	cmp	r4, #0
 80023ba:	d145      	bne.n	8002448 <__gedf2+0xdc>
 80023bc:	2800      	cmp	r0, #0
 80023be:	d11a      	bne.n	80023f6 <__gedf2+0x8a>
 80023c0:	2001      	movs	r0, #1
 80023c2:	4240      	negs	r0, r0
 80023c4:	e017      	b.n	80023f6 <__gedf2+0x8a>
 80023c6:	4311      	orrs	r1, r2
 80023c8:	d13b      	bne.n	8002442 <__gedf2+0xd6>
 80023ca:	2e00      	cmp	r6, #0
 80023cc:	d102      	bne.n	80023d4 <__gedf2+0x68>
 80023ce:	9f01      	ldr	r7, [sp, #4]
 80023d0:	4327      	orrs	r7, r4
 80023d2:	d0f3      	beq.n	80023bc <__gedf2+0x50>
 80023d4:	4584      	cmp	ip, r0
 80023d6:	d109      	bne.n	80023ec <__gedf2+0x80>
 80023d8:	4663      	mov	r3, ip
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d0f0      	beq.n	80023c0 <__gedf2+0x54>
 80023de:	4660      	mov	r0, ip
 80023e0:	e009      	b.n	80023f6 <__gedf2+0x8a>
 80023e2:	9f01      	ldr	r7, [sp, #4]
 80023e4:	4327      	orrs	r7, r4
 80023e6:	d12c      	bne.n	8002442 <__gedf2+0xd6>
 80023e8:	45b2      	cmp	sl, r6
 80023ea:	d024      	beq.n	8002436 <__gedf2+0xca>
 80023ec:	4663      	mov	r3, ip
 80023ee:	2002      	movs	r0, #2
 80023f0:	3b01      	subs	r3, #1
 80023f2:	4018      	ands	r0, r3
 80023f4:	3801      	subs	r0, #1
 80023f6:	b003      	add	sp, #12
 80023f8:	bcf0      	pop	{r4, r5, r6, r7}
 80023fa:	46bb      	mov	fp, r7
 80023fc:	46b2      	mov	sl, r6
 80023fe:	46a9      	mov	r9, r5
 8002400:	46a0      	mov	r8, r4
 8002402:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002404:	2c00      	cmp	r4, #0
 8002406:	d0d9      	beq.n	80023bc <__gedf2+0x50>
 8002408:	e7e4      	b.n	80023d4 <__gedf2+0x68>
 800240a:	4654      	mov	r4, sl
 800240c:	2c00      	cmp	r4, #0
 800240e:	d0ed      	beq.n	80023ec <__gedf2+0x80>
 8002410:	4584      	cmp	ip, r0
 8002412:	d1eb      	bne.n	80023ec <__gedf2+0x80>
 8002414:	4556      	cmp	r6, sl
 8002416:	dce9      	bgt.n	80023ec <__gedf2+0x80>
 8002418:	dbde      	blt.n	80023d8 <__gedf2+0x6c>
 800241a:	9b01      	ldr	r3, [sp, #4]
 800241c:	428b      	cmp	r3, r1
 800241e:	d8e5      	bhi.n	80023ec <__gedf2+0x80>
 8002420:	d1da      	bne.n	80023d8 <__gedf2+0x6c>
 8002422:	45c8      	cmp	r8, r9
 8002424:	d8e2      	bhi.n	80023ec <__gedf2+0x80>
 8002426:	2000      	movs	r0, #0
 8002428:	45c8      	cmp	r8, r9
 800242a:	d2e4      	bcs.n	80023f6 <__gedf2+0x8a>
 800242c:	e7d4      	b.n	80023d8 <__gedf2+0x6c>
 800242e:	2000      	movs	r0, #0
 8002430:	2c00      	cmp	r4, #0
 8002432:	d0e0      	beq.n	80023f6 <__gedf2+0x8a>
 8002434:	e7da      	b.n	80023ec <__gedf2+0x80>
 8002436:	4311      	orrs	r1, r2
 8002438:	d103      	bne.n	8002442 <__gedf2+0xd6>
 800243a:	4584      	cmp	ip, r0
 800243c:	d1d6      	bne.n	80023ec <__gedf2+0x80>
 800243e:	2000      	movs	r0, #0
 8002440:	e7d9      	b.n	80023f6 <__gedf2+0x8a>
 8002442:	2002      	movs	r0, #2
 8002444:	4240      	negs	r0, r0
 8002446:	e7d6      	b.n	80023f6 <__gedf2+0x8a>
 8002448:	4584      	cmp	ip, r0
 800244a:	d0e6      	beq.n	800241a <__gedf2+0xae>
 800244c:	e7ce      	b.n	80023ec <__gedf2+0x80>
 800244e:	46c0      	nop			@ (mov r8, r8)
 8002450:	000007ff 	.word	0x000007ff

08002454 <__ledf2>:
 8002454:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002456:	4657      	mov	r7, sl
 8002458:	464e      	mov	r6, r9
 800245a:	4645      	mov	r5, r8
 800245c:	46de      	mov	lr, fp
 800245e:	b5e0      	push	{r5, r6, r7, lr}
 8002460:	000d      	movs	r5, r1
 8002462:	030f      	lsls	r7, r1, #12
 8002464:	0004      	movs	r4, r0
 8002466:	4680      	mov	r8, r0
 8002468:	0fe8      	lsrs	r0, r5, #31
 800246a:	0b39      	lsrs	r1, r7, #12
 800246c:	4684      	mov	ip, r0
 800246e:	b083      	sub	sp, #12
 8002470:	0058      	lsls	r0, r3, #1
 8002472:	4f30      	ldr	r7, [pc, #192]	@ (8002534 <__ledf2+0xe0>)
 8002474:	0d40      	lsrs	r0, r0, #21
 8002476:	9101      	str	r1, [sp, #4]
 8002478:	031e      	lsls	r6, r3, #12
 800247a:	0069      	lsls	r1, r5, #1
 800247c:	4682      	mov	sl, r0
 800247e:	4691      	mov	r9, r2
 8002480:	0d49      	lsrs	r1, r1, #21
 8002482:	0b36      	lsrs	r6, r6, #12
 8002484:	0fd8      	lsrs	r0, r3, #31
 8002486:	42b9      	cmp	r1, r7
 8002488:	d020      	beq.n	80024cc <__ledf2+0x78>
 800248a:	45ba      	cmp	sl, r7
 800248c:	d00f      	beq.n	80024ae <__ledf2+0x5a>
 800248e:	2900      	cmp	r1, #0
 8002490:	d12b      	bne.n	80024ea <__ledf2+0x96>
 8002492:	9901      	ldr	r1, [sp, #4]
 8002494:	430c      	orrs	r4, r1
 8002496:	4651      	mov	r1, sl
 8002498:	2900      	cmp	r1, #0
 800249a:	d137      	bne.n	800250c <__ledf2+0xb8>
 800249c:	4332      	orrs	r2, r6
 800249e:	d038      	beq.n	8002512 <__ledf2+0xbe>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d144      	bne.n	800252e <__ledf2+0xda>
 80024a4:	2800      	cmp	r0, #0
 80024a6:	d119      	bne.n	80024dc <__ledf2+0x88>
 80024a8:	2001      	movs	r0, #1
 80024aa:	4240      	negs	r0, r0
 80024ac:	e016      	b.n	80024dc <__ledf2+0x88>
 80024ae:	4316      	orrs	r6, r2
 80024b0:	d113      	bne.n	80024da <__ledf2+0x86>
 80024b2:	2900      	cmp	r1, #0
 80024b4:	d102      	bne.n	80024bc <__ledf2+0x68>
 80024b6:	9f01      	ldr	r7, [sp, #4]
 80024b8:	4327      	orrs	r7, r4
 80024ba:	d0f3      	beq.n	80024a4 <__ledf2+0x50>
 80024bc:	4584      	cmp	ip, r0
 80024be:	d020      	beq.n	8002502 <__ledf2+0xae>
 80024c0:	4663      	mov	r3, ip
 80024c2:	2002      	movs	r0, #2
 80024c4:	3b01      	subs	r3, #1
 80024c6:	4018      	ands	r0, r3
 80024c8:	3801      	subs	r0, #1
 80024ca:	e007      	b.n	80024dc <__ledf2+0x88>
 80024cc:	9f01      	ldr	r7, [sp, #4]
 80024ce:	4327      	orrs	r7, r4
 80024d0:	d103      	bne.n	80024da <__ledf2+0x86>
 80024d2:	458a      	cmp	sl, r1
 80024d4:	d1f4      	bne.n	80024c0 <__ledf2+0x6c>
 80024d6:	4316      	orrs	r6, r2
 80024d8:	d01f      	beq.n	800251a <__ledf2+0xc6>
 80024da:	2002      	movs	r0, #2
 80024dc:	b003      	add	sp, #12
 80024de:	bcf0      	pop	{r4, r5, r6, r7}
 80024e0:	46bb      	mov	fp, r7
 80024e2:	46b2      	mov	sl, r6
 80024e4:	46a9      	mov	r9, r5
 80024e6:	46a0      	mov	r8, r4
 80024e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024ea:	4654      	mov	r4, sl
 80024ec:	2c00      	cmp	r4, #0
 80024ee:	d0e7      	beq.n	80024c0 <__ledf2+0x6c>
 80024f0:	4584      	cmp	ip, r0
 80024f2:	d1e5      	bne.n	80024c0 <__ledf2+0x6c>
 80024f4:	4551      	cmp	r1, sl
 80024f6:	dce3      	bgt.n	80024c0 <__ledf2+0x6c>
 80024f8:	db03      	blt.n	8002502 <__ledf2+0xae>
 80024fa:	9b01      	ldr	r3, [sp, #4]
 80024fc:	42b3      	cmp	r3, r6
 80024fe:	d8df      	bhi.n	80024c0 <__ledf2+0x6c>
 8002500:	d00f      	beq.n	8002522 <__ledf2+0xce>
 8002502:	4663      	mov	r3, ip
 8002504:	2b00      	cmp	r3, #0
 8002506:	d0cf      	beq.n	80024a8 <__ledf2+0x54>
 8002508:	4660      	mov	r0, ip
 800250a:	e7e7      	b.n	80024dc <__ledf2+0x88>
 800250c:	2c00      	cmp	r4, #0
 800250e:	d0c9      	beq.n	80024a4 <__ledf2+0x50>
 8002510:	e7d4      	b.n	80024bc <__ledf2+0x68>
 8002512:	2000      	movs	r0, #0
 8002514:	2c00      	cmp	r4, #0
 8002516:	d0e1      	beq.n	80024dc <__ledf2+0x88>
 8002518:	e7d2      	b.n	80024c0 <__ledf2+0x6c>
 800251a:	4584      	cmp	ip, r0
 800251c:	d1d0      	bne.n	80024c0 <__ledf2+0x6c>
 800251e:	2000      	movs	r0, #0
 8002520:	e7dc      	b.n	80024dc <__ledf2+0x88>
 8002522:	45c8      	cmp	r8, r9
 8002524:	d8cc      	bhi.n	80024c0 <__ledf2+0x6c>
 8002526:	2000      	movs	r0, #0
 8002528:	45c8      	cmp	r8, r9
 800252a:	d2d7      	bcs.n	80024dc <__ledf2+0x88>
 800252c:	e7e9      	b.n	8002502 <__ledf2+0xae>
 800252e:	4584      	cmp	ip, r0
 8002530:	d0e3      	beq.n	80024fa <__ledf2+0xa6>
 8002532:	e7c5      	b.n	80024c0 <__ledf2+0x6c>
 8002534:	000007ff 	.word	0x000007ff

08002538 <__aeabi_dmul>:
 8002538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800253a:	4657      	mov	r7, sl
 800253c:	46de      	mov	lr, fp
 800253e:	464e      	mov	r6, r9
 8002540:	4645      	mov	r5, r8
 8002542:	b5e0      	push	{r5, r6, r7, lr}
 8002544:	001f      	movs	r7, r3
 8002546:	030b      	lsls	r3, r1, #12
 8002548:	0b1b      	lsrs	r3, r3, #12
 800254a:	0016      	movs	r6, r2
 800254c:	469a      	mov	sl, r3
 800254e:	0fca      	lsrs	r2, r1, #31
 8002550:	004b      	lsls	r3, r1, #1
 8002552:	0004      	movs	r4, r0
 8002554:	4693      	mov	fp, r2
 8002556:	b087      	sub	sp, #28
 8002558:	0d5b      	lsrs	r3, r3, #21
 800255a:	d100      	bne.n	800255e <__aeabi_dmul+0x26>
 800255c:	e0d5      	b.n	800270a <__aeabi_dmul+0x1d2>
 800255e:	4abb      	ldr	r2, [pc, #748]	@ (800284c <__aeabi_dmul+0x314>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d100      	bne.n	8002566 <__aeabi_dmul+0x2e>
 8002564:	e0f8      	b.n	8002758 <__aeabi_dmul+0x220>
 8002566:	4651      	mov	r1, sl
 8002568:	0f42      	lsrs	r2, r0, #29
 800256a:	00c9      	lsls	r1, r1, #3
 800256c:	430a      	orrs	r2, r1
 800256e:	2180      	movs	r1, #128	@ 0x80
 8002570:	0409      	lsls	r1, r1, #16
 8002572:	4311      	orrs	r1, r2
 8002574:	00c2      	lsls	r2, r0, #3
 8002576:	4691      	mov	r9, r2
 8002578:	4ab5      	ldr	r2, [pc, #724]	@ (8002850 <__aeabi_dmul+0x318>)
 800257a:	468a      	mov	sl, r1
 800257c:	189d      	adds	r5, r3, r2
 800257e:	2300      	movs	r3, #0
 8002580:	4698      	mov	r8, r3
 8002582:	9302      	str	r3, [sp, #8]
 8002584:	033c      	lsls	r4, r7, #12
 8002586:	007b      	lsls	r3, r7, #1
 8002588:	0ffa      	lsrs	r2, r7, #31
 800258a:	0030      	movs	r0, r6
 800258c:	0b24      	lsrs	r4, r4, #12
 800258e:	0d5b      	lsrs	r3, r3, #21
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	d100      	bne.n	8002596 <__aeabi_dmul+0x5e>
 8002594:	e096      	b.n	80026c4 <__aeabi_dmul+0x18c>
 8002596:	4aad      	ldr	r2, [pc, #692]	@ (800284c <__aeabi_dmul+0x314>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d031      	beq.n	8002600 <__aeabi_dmul+0xc8>
 800259c:	0f72      	lsrs	r2, r6, #29
 800259e:	00e4      	lsls	r4, r4, #3
 80025a0:	4322      	orrs	r2, r4
 80025a2:	2480      	movs	r4, #128	@ 0x80
 80025a4:	0424      	lsls	r4, r4, #16
 80025a6:	4314      	orrs	r4, r2
 80025a8:	4aa9      	ldr	r2, [pc, #676]	@ (8002850 <__aeabi_dmul+0x318>)
 80025aa:	00f0      	lsls	r0, r6, #3
 80025ac:	4694      	mov	ip, r2
 80025ae:	4463      	add	r3, ip
 80025b0:	195b      	adds	r3, r3, r5
 80025b2:	1c5a      	adds	r2, r3, #1
 80025b4:	9201      	str	r2, [sp, #4]
 80025b6:	4642      	mov	r2, r8
 80025b8:	2600      	movs	r6, #0
 80025ba:	2a0a      	cmp	r2, #10
 80025bc:	dc42      	bgt.n	8002644 <__aeabi_dmul+0x10c>
 80025be:	465a      	mov	r2, fp
 80025c0:	9900      	ldr	r1, [sp, #0]
 80025c2:	404a      	eors	r2, r1
 80025c4:	4693      	mov	fp, r2
 80025c6:	4642      	mov	r2, r8
 80025c8:	2a02      	cmp	r2, #2
 80025ca:	dc32      	bgt.n	8002632 <__aeabi_dmul+0xfa>
 80025cc:	3a01      	subs	r2, #1
 80025ce:	2a01      	cmp	r2, #1
 80025d0:	d900      	bls.n	80025d4 <__aeabi_dmul+0x9c>
 80025d2:	e149      	b.n	8002868 <__aeabi_dmul+0x330>
 80025d4:	2e02      	cmp	r6, #2
 80025d6:	d100      	bne.n	80025da <__aeabi_dmul+0xa2>
 80025d8:	e0ca      	b.n	8002770 <__aeabi_dmul+0x238>
 80025da:	2e01      	cmp	r6, #1
 80025dc:	d13d      	bne.n	800265a <__aeabi_dmul+0x122>
 80025de:	2300      	movs	r3, #0
 80025e0:	2400      	movs	r4, #0
 80025e2:	2200      	movs	r2, #0
 80025e4:	0010      	movs	r0, r2
 80025e6:	465a      	mov	r2, fp
 80025e8:	051b      	lsls	r3, r3, #20
 80025ea:	4323      	orrs	r3, r4
 80025ec:	07d2      	lsls	r2, r2, #31
 80025ee:	4313      	orrs	r3, r2
 80025f0:	0019      	movs	r1, r3
 80025f2:	b007      	add	sp, #28
 80025f4:	bcf0      	pop	{r4, r5, r6, r7}
 80025f6:	46bb      	mov	fp, r7
 80025f8:	46b2      	mov	sl, r6
 80025fa:	46a9      	mov	r9, r5
 80025fc:	46a0      	mov	r8, r4
 80025fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002600:	4b92      	ldr	r3, [pc, #584]	@ (800284c <__aeabi_dmul+0x314>)
 8002602:	4326      	orrs	r6, r4
 8002604:	18eb      	adds	r3, r5, r3
 8002606:	2e00      	cmp	r6, #0
 8002608:	d100      	bne.n	800260c <__aeabi_dmul+0xd4>
 800260a:	e0bb      	b.n	8002784 <__aeabi_dmul+0x24c>
 800260c:	2203      	movs	r2, #3
 800260e:	4641      	mov	r1, r8
 8002610:	4311      	orrs	r1, r2
 8002612:	465a      	mov	r2, fp
 8002614:	4688      	mov	r8, r1
 8002616:	9900      	ldr	r1, [sp, #0]
 8002618:	404a      	eors	r2, r1
 800261a:	2180      	movs	r1, #128	@ 0x80
 800261c:	0109      	lsls	r1, r1, #4
 800261e:	468c      	mov	ip, r1
 8002620:	0029      	movs	r1, r5
 8002622:	4461      	add	r1, ip
 8002624:	9101      	str	r1, [sp, #4]
 8002626:	4641      	mov	r1, r8
 8002628:	290a      	cmp	r1, #10
 800262a:	dd00      	ble.n	800262e <__aeabi_dmul+0xf6>
 800262c:	e233      	b.n	8002a96 <__aeabi_dmul+0x55e>
 800262e:	4693      	mov	fp, r2
 8002630:	2603      	movs	r6, #3
 8002632:	4642      	mov	r2, r8
 8002634:	2701      	movs	r7, #1
 8002636:	4097      	lsls	r7, r2
 8002638:	21a6      	movs	r1, #166	@ 0xa6
 800263a:	003a      	movs	r2, r7
 800263c:	00c9      	lsls	r1, r1, #3
 800263e:	400a      	ands	r2, r1
 8002640:	420f      	tst	r7, r1
 8002642:	d031      	beq.n	80026a8 <__aeabi_dmul+0x170>
 8002644:	9e02      	ldr	r6, [sp, #8]
 8002646:	2e02      	cmp	r6, #2
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x114>
 800264a:	e235      	b.n	8002ab8 <__aeabi_dmul+0x580>
 800264c:	2e03      	cmp	r6, #3
 800264e:	d100      	bne.n	8002652 <__aeabi_dmul+0x11a>
 8002650:	e1d2      	b.n	80029f8 <__aeabi_dmul+0x4c0>
 8002652:	4654      	mov	r4, sl
 8002654:	4648      	mov	r0, r9
 8002656:	2e01      	cmp	r6, #1
 8002658:	d0c1      	beq.n	80025de <__aeabi_dmul+0xa6>
 800265a:	9a01      	ldr	r2, [sp, #4]
 800265c:	4b7d      	ldr	r3, [pc, #500]	@ (8002854 <__aeabi_dmul+0x31c>)
 800265e:	4694      	mov	ip, r2
 8002660:	4463      	add	r3, ip
 8002662:	2b00      	cmp	r3, #0
 8002664:	dc00      	bgt.n	8002668 <__aeabi_dmul+0x130>
 8002666:	e0c0      	b.n	80027ea <__aeabi_dmul+0x2b2>
 8002668:	0742      	lsls	r2, r0, #29
 800266a:	d009      	beq.n	8002680 <__aeabi_dmul+0x148>
 800266c:	220f      	movs	r2, #15
 800266e:	4002      	ands	r2, r0
 8002670:	2a04      	cmp	r2, #4
 8002672:	d005      	beq.n	8002680 <__aeabi_dmul+0x148>
 8002674:	1d02      	adds	r2, r0, #4
 8002676:	4282      	cmp	r2, r0
 8002678:	4180      	sbcs	r0, r0
 800267a:	4240      	negs	r0, r0
 800267c:	1824      	adds	r4, r4, r0
 800267e:	0010      	movs	r0, r2
 8002680:	01e2      	lsls	r2, r4, #7
 8002682:	d506      	bpl.n	8002692 <__aeabi_dmul+0x15a>
 8002684:	4b74      	ldr	r3, [pc, #464]	@ (8002858 <__aeabi_dmul+0x320>)
 8002686:	9a01      	ldr	r2, [sp, #4]
 8002688:	401c      	ands	r4, r3
 800268a:	2380      	movs	r3, #128	@ 0x80
 800268c:	4694      	mov	ip, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4463      	add	r3, ip
 8002692:	4a72      	ldr	r2, [pc, #456]	@ (800285c <__aeabi_dmul+0x324>)
 8002694:	4293      	cmp	r3, r2
 8002696:	dc6b      	bgt.n	8002770 <__aeabi_dmul+0x238>
 8002698:	0762      	lsls	r2, r4, #29
 800269a:	08c0      	lsrs	r0, r0, #3
 800269c:	0264      	lsls	r4, r4, #9
 800269e:	055b      	lsls	r3, r3, #21
 80026a0:	4302      	orrs	r2, r0
 80026a2:	0b24      	lsrs	r4, r4, #12
 80026a4:	0d5b      	lsrs	r3, r3, #21
 80026a6:	e79d      	b.n	80025e4 <__aeabi_dmul+0xac>
 80026a8:	2190      	movs	r1, #144	@ 0x90
 80026aa:	0089      	lsls	r1, r1, #2
 80026ac:	420f      	tst	r7, r1
 80026ae:	d163      	bne.n	8002778 <__aeabi_dmul+0x240>
 80026b0:	2288      	movs	r2, #136	@ 0x88
 80026b2:	423a      	tst	r2, r7
 80026b4:	d100      	bne.n	80026b8 <__aeabi_dmul+0x180>
 80026b6:	e0d7      	b.n	8002868 <__aeabi_dmul+0x330>
 80026b8:	9b00      	ldr	r3, [sp, #0]
 80026ba:	46a2      	mov	sl, r4
 80026bc:	469b      	mov	fp, r3
 80026be:	4681      	mov	r9, r0
 80026c0:	9602      	str	r6, [sp, #8]
 80026c2:	e7bf      	b.n	8002644 <__aeabi_dmul+0x10c>
 80026c4:	0023      	movs	r3, r4
 80026c6:	4333      	orrs	r3, r6
 80026c8:	d100      	bne.n	80026cc <__aeabi_dmul+0x194>
 80026ca:	e07f      	b.n	80027cc <__aeabi_dmul+0x294>
 80026cc:	2c00      	cmp	r4, #0
 80026ce:	d100      	bne.n	80026d2 <__aeabi_dmul+0x19a>
 80026d0:	e1ad      	b.n	8002a2e <__aeabi_dmul+0x4f6>
 80026d2:	0020      	movs	r0, r4
 80026d4:	f000 ff10 	bl	80034f8 <__clzsi2>
 80026d8:	0002      	movs	r2, r0
 80026da:	0003      	movs	r3, r0
 80026dc:	3a0b      	subs	r2, #11
 80026de:	201d      	movs	r0, #29
 80026e0:	0019      	movs	r1, r3
 80026e2:	1a82      	subs	r2, r0, r2
 80026e4:	0030      	movs	r0, r6
 80026e6:	3908      	subs	r1, #8
 80026e8:	40d0      	lsrs	r0, r2
 80026ea:	408c      	lsls	r4, r1
 80026ec:	4304      	orrs	r4, r0
 80026ee:	0030      	movs	r0, r6
 80026f0:	4088      	lsls	r0, r1
 80026f2:	4a5b      	ldr	r2, [pc, #364]	@ (8002860 <__aeabi_dmul+0x328>)
 80026f4:	1aeb      	subs	r3, r5, r3
 80026f6:	4694      	mov	ip, r2
 80026f8:	4463      	add	r3, ip
 80026fa:	1c5a      	adds	r2, r3, #1
 80026fc:	9201      	str	r2, [sp, #4]
 80026fe:	4642      	mov	r2, r8
 8002700:	2600      	movs	r6, #0
 8002702:	2a0a      	cmp	r2, #10
 8002704:	dc00      	bgt.n	8002708 <__aeabi_dmul+0x1d0>
 8002706:	e75a      	b.n	80025be <__aeabi_dmul+0x86>
 8002708:	e79c      	b.n	8002644 <__aeabi_dmul+0x10c>
 800270a:	4653      	mov	r3, sl
 800270c:	4303      	orrs	r3, r0
 800270e:	4699      	mov	r9, r3
 8002710:	d054      	beq.n	80027bc <__aeabi_dmul+0x284>
 8002712:	4653      	mov	r3, sl
 8002714:	2b00      	cmp	r3, #0
 8002716:	d100      	bne.n	800271a <__aeabi_dmul+0x1e2>
 8002718:	e177      	b.n	8002a0a <__aeabi_dmul+0x4d2>
 800271a:	4650      	mov	r0, sl
 800271c:	f000 feec 	bl	80034f8 <__clzsi2>
 8002720:	230b      	movs	r3, #11
 8002722:	425b      	negs	r3, r3
 8002724:	469c      	mov	ip, r3
 8002726:	0002      	movs	r2, r0
 8002728:	4484      	add	ip, r0
 800272a:	0011      	movs	r1, r2
 800272c:	4650      	mov	r0, sl
 800272e:	3908      	subs	r1, #8
 8002730:	4088      	lsls	r0, r1
 8002732:	231d      	movs	r3, #29
 8002734:	4680      	mov	r8, r0
 8002736:	4660      	mov	r0, ip
 8002738:	1a1b      	subs	r3, r3, r0
 800273a:	0020      	movs	r0, r4
 800273c:	40d8      	lsrs	r0, r3
 800273e:	0003      	movs	r3, r0
 8002740:	4640      	mov	r0, r8
 8002742:	4303      	orrs	r3, r0
 8002744:	469a      	mov	sl, r3
 8002746:	0023      	movs	r3, r4
 8002748:	408b      	lsls	r3, r1
 800274a:	4699      	mov	r9, r3
 800274c:	2300      	movs	r3, #0
 800274e:	4d44      	ldr	r5, [pc, #272]	@ (8002860 <__aeabi_dmul+0x328>)
 8002750:	4698      	mov	r8, r3
 8002752:	1aad      	subs	r5, r5, r2
 8002754:	9302      	str	r3, [sp, #8]
 8002756:	e715      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002758:	4652      	mov	r2, sl
 800275a:	4302      	orrs	r2, r0
 800275c:	4691      	mov	r9, r2
 800275e:	d126      	bne.n	80027ae <__aeabi_dmul+0x276>
 8002760:	2200      	movs	r2, #0
 8002762:	001d      	movs	r5, r3
 8002764:	2302      	movs	r3, #2
 8002766:	4692      	mov	sl, r2
 8002768:	3208      	adds	r2, #8
 800276a:	4690      	mov	r8, r2
 800276c:	9302      	str	r3, [sp, #8]
 800276e:	e709      	b.n	8002584 <__aeabi_dmul+0x4c>
 8002770:	2400      	movs	r4, #0
 8002772:	2200      	movs	r2, #0
 8002774:	4b35      	ldr	r3, [pc, #212]	@ (800284c <__aeabi_dmul+0x314>)
 8002776:	e735      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002778:	2300      	movs	r3, #0
 800277a:	2480      	movs	r4, #128	@ 0x80
 800277c:	469b      	mov	fp, r3
 800277e:	0324      	lsls	r4, r4, #12
 8002780:	4b32      	ldr	r3, [pc, #200]	@ (800284c <__aeabi_dmul+0x314>)
 8002782:	e72f      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002784:	2202      	movs	r2, #2
 8002786:	4641      	mov	r1, r8
 8002788:	4311      	orrs	r1, r2
 800278a:	2280      	movs	r2, #128	@ 0x80
 800278c:	0112      	lsls	r2, r2, #4
 800278e:	4694      	mov	ip, r2
 8002790:	002a      	movs	r2, r5
 8002792:	4462      	add	r2, ip
 8002794:	4688      	mov	r8, r1
 8002796:	9201      	str	r2, [sp, #4]
 8002798:	290a      	cmp	r1, #10
 800279a:	dd00      	ble.n	800279e <__aeabi_dmul+0x266>
 800279c:	e752      	b.n	8002644 <__aeabi_dmul+0x10c>
 800279e:	465a      	mov	r2, fp
 80027a0:	2000      	movs	r0, #0
 80027a2:	9900      	ldr	r1, [sp, #0]
 80027a4:	0004      	movs	r4, r0
 80027a6:	404a      	eors	r2, r1
 80027a8:	4693      	mov	fp, r2
 80027aa:	2602      	movs	r6, #2
 80027ac:	e70b      	b.n	80025c6 <__aeabi_dmul+0x8e>
 80027ae:	220c      	movs	r2, #12
 80027b0:	001d      	movs	r5, r3
 80027b2:	2303      	movs	r3, #3
 80027b4:	4681      	mov	r9, r0
 80027b6:	4690      	mov	r8, r2
 80027b8:	9302      	str	r3, [sp, #8]
 80027ba:	e6e3      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027bc:	2300      	movs	r3, #0
 80027be:	469a      	mov	sl, r3
 80027c0:	3304      	adds	r3, #4
 80027c2:	4698      	mov	r8, r3
 80027c4:	3b03      	subs	r3, #3
 80027c6:	2500      	movs	r5, #0
 80027c8:	9302      	str	r3, [sp, #8]
 80027ca:	e6db      	b.n	8002584 <__aeabi_dmul+0x4c>
 80027cc:	4642      	mov	r2, r8
 80027ce:	3301      	adds	r3, #1
 80027d0:	431a      	orrs	r2, r3
 80027d2:	002b      	movs	r3, r5
 80027d4:	4690      	mov	r8, r2
 80027d6:	1c5a      	adds	r2, r3, #1
 80027d8:	9201      	str	r2, [sp, #4]
 80027da:	4642      	mov	r2, r8
 80027dc:	2400      	movs	r4, #0
 80027de:	2000      	movs	r0, #0
 80027e0:	2601      	movs	r6, #1
 80027e2:	2a0a      	cmp	r2, #10
 80027e4:	dc00      	bgt.n	80027e8 <__aeabi_dmul+0x2b0>
 80027e6:	e6ea      	b.n	80025be <__aeabi_dmul+0x86>
 80027e8:	e72c      	b.n	8002644 <__aeabi_dmul+0x10c>
 80027ea:	2201      	movs	r2, #1
 80027ec:	1ad2      	subs	r2, r2, r3
 80027ee:	2a38      	cmp	r2, #56	@ 0x38
 80027f0:	dd00      	ble.n	80027f4 <__aeabi_dmul+0x2bc>
 80027f2:	e6f4      	b.n	80025de <__aeabi_dmul+0xa6>
 80027f4:	2a1f      	cmp	r2, #31
 80027f6:	dc00      	bgt.n	80027fa <__aeabi_dmul+0x2c2>
 80027f8:	e12a      	b.n	8002a50 <__aeabi_dmul+0x518>
 80027fa:	211f      	movs	r1, #31
 80027fc:	4249      	negs	r1, r1
 80027fe:	1acb      	subs	r3, r1, r3
 8002800:	0021      	movs	r1, r4
 8002802:	40d9      	lsrs	r1, r3
 8002804:	000b      	movs	r3, r1
 8002806:	2a20      	cmp	r2, #32
 8002808:	d005      	beq.n	8002816 <__aeabi_dmul+0x2de>
 800280a:	4a16      	ldr	r2, [pc, #88]	@ (8002864 <__aeabi_dmul+0x32c>)
 800280c:	9d01      	ldr	r5, [sp, #4]
 800280e:	4694      	mov	ip, r2
 8002810:	4465      	add	r5, ip
 8002812:	40ac      	lsls	r4, r5
 8002814:	4320      	orrs	r0, r4
 8002816:	1e42      	subs	r2, r0, #1
 8002818:	4190      	sbcs	r0, r2
 800281a:	4318      	orrs	r0, r3
 800281c:	2307      	movs	r3, #7
 800281e:	0019      	movs	r1, r3
 8002820:	2400      	movs	r4, #0
 8002822:	4001      	ands	r1, r0
 8002824:	4203      	tst	r3, r0
 8002826:	d00c      	beq.n	8002842 <__aeabi_dmul+0x30a>
 8002828:	230f      	movs	r3, #15
 800282a:	4003      	ands	r3, r0
 800282c:	2b04      	cmp	r3, #4
 800282e:	d100      	bne.n	8002832 <__aeabi_dmul+0x2fa>
 8002830:	e140      	b.n	8002ab4 <__aeabi_dmul+0x57c>
 8002832:	1d03      	adds	r3, r0, #4
 8002834:	4283      	cmp	r3, r0
 8002836:	41a4      	sbcs	r4, r4
 8002838:	0018      	movs	r0, r3
 800283a:	4264      	negs	r4, r4
 800283c:	0761      	lsls	r1, r4, #29
 800283e:	0264      	lsls	r4, r4, #9
 8002840:	0b24      	lsrs	r4, r4, #12
 8002842:	08c2      	lsrs	r2, r0, #3
 8002844:	2300      	movs	r3, #0
 8002846:	430a      	orrs	r2, r1
 8002848:	e6cc      	b.n	80025e4 <__aeabi_dmul+0xac>
 800284a:	46c0      	nop			@ (mov r8, r8)
 800284c:	000007ff 	.word	0x000007ff
 8002850:	fffffc01 	.word	0xfffffc01
 8002854:	000003ff 	.word	0x000003ff
 8002858:	feffffff 	.word	0xfeffffff
 800285c:	000007fe 	.word	0x000007fe
 8002860:	fffffc0d 	.word	0xfffffc0d
 8002864:	0000043e 	.word	0x0000043e
 8002868:	4649      	mov	r1, r9
 800286a:	464a      	mov	r2, r9
 800286c:	0409      	lsls	r1, r1, #16
 800286e:	0c09      	lsrs	r1, r1, #16
 8002870:	000d      	movs	r5, r1
 8002872:	0c16      	lsrs	r6, r2, #16
 8002874:	0c02      	lsrs	r2, r0, #16
 8002876:	0400      	lsls	r0, r0, #16
 8002878:	0c00      	lsrs	r0, r0, #16
 800287a:	4345      	muls	r5, r0
 800287c:	46ac      	mov	ip, r5
 800287e:	0005      	movs	r5, r0
 8002880:	4375      	muls	r5, r6
 8002882:	46a8      	mov	r8, r5
 8002884:	0015      	movs	r5, r2
 8002886:	000f      	movs	r7, r1
 8002888:	4375      	muls	r5, r6
 800288a:	9200      	str	r2, [sp, #0]
 800288c:	9502      	str	r5, [sp, #8]
 800288e:	002a      	movs	r2, r5
 8002890:	9d00      	ldr	r5, [sp, #0]
 8002892:	436f      	muls	r7, r5
 8002894:	4665      	mov	r5, ip
 8002896:	0c2d      	lsrs	r5, r5, #16
 8002898:	46a9      	mov	r9, r5
 800289a:	4447      	add	r7, r8
 800289c:	444f      	add	r7, r9
 800289e:	45b8      	cmp	r8, r7
 80028a0:	d905      	bls.n	80028ae <__aeabi_dmul+0x376>
 80028a2:	0015      	movs	r5, r2
 80028a4:	2280      	movs	r2, #128	@ 0x80
 80028a6:	0252      	lsls	r2, r2, #9
 80028a8:	4690      	mov	r8, r2
 80028aa:	4445      	add	r5, r8
 80028ac:	9502      	str	r5, [sp, #8]
 80028ae:	0c3d      	lsrs	r5, r7, #16
 80028b0:	9503      	str	r5, [sp, #12]
 80028b2:	4665      	mov	r5, ip
 80028b4:	042d      	lsls	r5, r5, #16
 80028b6:	043f      	lsls	r7, r7, #16
 80028b8:	0c2d      	lsrs	r5, r5, #16
 80028ba:	46ac      	mov	ip, r5
 80028bc:	003d      	movs	r5, r7
 80028be:	4465      	add	r5, ip
 80028c0:	9504      	str	r5, [sp, #16]
 80028c2:	0c25      	lsrs	r5, r4, #16
 80028c4:	0424      	lsls	r4, r4, #16
 80028c6:	0c24      	lsrs	r4, r4, #16
 80028c8:	46ac      	mov	ip, r5
 80028ca:	0025      	movs	r5, r4
 80028cc:	4375      	muls	r5, r6
 80028ce:	46a8      	mov	r8, r5
 80028d0:	4665      	mov	r5, ip
 80028d2:	000f      	movs	r7, r1
 80028d4:	4369      	muls	r1, r5
 80028d6:	4441      	add	r1, r8
 80028d8:	4689      	mov	r9, r1
 80028da:	4367      	muls	r7, r4
 80028dc:	0c39      	lsrs	r1, r7, #16
 80028de:	4449      	add	r1, r9
 80028e0:	436e      	muls	r6, r5
 80028e2:	4588      	cmp	r8, r1
 80028e4:	d903      	bls.n	80028ee <__aeabi_dmul+0x3b6>
 80028e6:	2280      	movs	r2, #128	@ 0x80
 80028e8:	0252      	lsls	r2, r2, #9
 80028ea:	4690      	mov	r8, r2
 80028ec:	4446      	add	r6, r8
 80028ee:	0c0d      	lsrs	r5, r1, #16
 80028f0:	46a8      	mov	r8, r5
 80028f2:	0035      	movs	r5, r6
 80028f4:	4445      	add	r5, r8
 80028f6:	9505      	str	r5, [sp, #20]
 80028f8:	9d03      	ldr	r5, [sp, #12]
 80028fa:	043f      	lsls	r7, r7, #16
 80028fc:	46a8      	mov	r8, r5
 80028fe:	0c3f      	lsrs	r7, r7, #16
 8002900:	0409      	lsls	r1, r1, #16
 8002902:	19c9      	adds	r1, r1, r7
 8002904:	4488      	add	r8, r1
 8002906:	4645      	mov	r5, r8
 8002908:	9503      	str	r5, [sp, #12]
 800290a:	4655      	mov	r5, sl
 800290c:	042e      	lsls	r6, r5, #16
 800290e:	0c36      	lsrs	r6, r6, #16
 8002910:	0c2f      	lsrs	r7, r5, #16
 8002912:	0035      	movs	r5, r6
 8002914:	4345      	muls	r5, r0
 8002916:	4378      	muls	r0, r7
 8002918:	4681      	mov	r9, r0
 800291a:	0038      	movs	r0, r7
 800291c:	46a8      	mov	r8, r5
 800291e:	0c2d      	lsrs	r5, r5, #16
 8002920:	46aa      	mov	sl, r5
 8002922:	9a00      	ldr	r2, [sp, #0]
 8002924:	4350      	muls	r0, r2
 8002926:	4372      	muls	r2, r6
 8002928:	444a      	add	r2, r9
 800292a:	4452      	add	r2, sl
 800292c:	4591      	cmp	r9, r2
 800292e:	d903      	bls.n	8002938 <__aeabi_dmul+0x400>
 8002930:	2580      	movs	r5, #128	@ 0x80
 8002932:	026d      	lsls	r5, r5, #9
 8002934:	46a9      	mov	r9, r5
 8002936:	4448      	add	r0, r9
 8002938:	0c15      	lsrs	r5, r2, #16
 800293a:	46a9      	mov	r9, r5
 800293c:	4645      	mov	r5, r8
 800293e:	042d      	lsls	r5, r5, #16
 8002940:	0c2d      	lsrs	r5, r5, #16
 8002942:	46a8      	mov	r8, r5
 8002944:	4665      	mov	r5, ip
 8002946:	437d      	muls	r5, r7
 8002948:	0412      	lsls	r2, r2, #16
 800294a:	4448      	add	r0, r9
 800294c:	4490      	add	r8, r2
 800294e:	46a9      	mov	r9, r5
 8002950:	0032      	movs	r2, r6
 8002952:	4665      	mov	r5, ip
 8002954:	4362      	muls	r2, r4
 8002956:	436e      	muls	r6, r5
 8002958:	437c      	muls	r4, r7
 800295a:	0c17      	lsrs	r7, r2, #16
 800295c:	1936      	adds	r6, r6, r4
 800295e:	19bf      	adds	r7, r7, r6
 8002960:	42bc      	cmp	r4, r7
 8002962:	d903      	bls.n	800296c <__aeabi_dmul+0x434>
 8002964:	2480      	movs	r4, #128	@ 0x80
 8002966:	0264      	lsls	r4, r4, #9
 8002968:	46a4      	mov	ip, r4
 800296a:	44e1      	add	r9, ip
 800296c:	9c02      	ldr	r4, [sp, #8]
 800296e:	9e03      	ldr	r6, [sp, #12]
 8002970:	46a4      	mov	ip, r4
 8002972:	9d05      	ldr	r5, [sp, #20]
 8002974:	4466      	add	r6, ip
 8002976:	428e      	cmp	r6, r1
 8002978:	4189      	sbcs	r1, r1
 800297a:	46ac      	mov	ip, r5
 800297c:	0412      	lsls	r2, r2, #16
 800297e:	043c      	lsls	r4, r7, #16
 8002980:	0c12      	lsrs	r2, r2, #16
 8002982:	18a2      	adds	r2, r4, r2
 8002984:	4462      	add	r2, ip
 8002986:	4249      	negs	r1, r1
 8002988:	1854      	adds	r4, r2, r1
 800298a:	4446      	add	r6, r8
 800298c:	46a4      	mov	ip, r4
 800298e:	4546      	cmp	r6, r8
 8002990:	41a4      	sbcs	r4, r4
 8002992:	4682      	mov	sl, r0
 8002994:	4264      	negs	r4, r4
 8002996:	46a0      	mov	r8, r4
 8002998:	42aa      	cmp	r2, r5
 800299a:	4192      	sbcs	r2, r2
 800299c:	458c      	cmp	ip, r1
 800299e:	4189      	sbcs	r1, r1
 80029a0:	44e2      	add	sl, ip
 80029a2:	44d0      	add	r8, sl
 80029a4:	4249      	negs	r1, r1
 80029a6:	4252      	negs	r2, r2
 80029a8:	430a      	orrs	r2, r1
 80029aa:	45a0      	cmp	r8, r4
 80029ac:	41a4      	sbcs	r4, r4
 80029ae:	4582      	cmp	sl, r0
 80029b0:	4189      	sbcs	r1, r1
 80029b2:	4264      	negs	r4, r4
 80029b4:	4249      	negs	r1, r1
 80029b6:	430c      	orrs	r4, r1
 80029b8:	4641      	mov	r1, r8
 80029ba:	0c3f      	lsrs	r7, r7, #16
 80029bc:	19d2      	adds	r2, r2, r7
 80029be:	1912      	adds	r2, r2, r4
 80029c0:	0dcc      	lsrs	r4, r1, #23
 80029c2:	9904      	ldr	r1, [sp, #16]
 80029c4:	0270      	lsls	r0, r6, #9
 80029c6:	4308      	orrs	r0, r1
 80029c8:	1e41      	subs	r1, r0, #1
 80029ca:	4188      	sbcs	r0, r1
 80029cc:	4641      	mov	r1, r8
 80029ce:	444a      	add	r2, r9
 80029d0:	0df6      	lsrs	r6, r6, #23
 80029d2:	0252      	lsls	r2, r2, #9
 80029d4:	4330      	orrs	r0, r6
 80029d6:	0249      	lsls	r1, r1, #9
 80029d8:	4314      	orrs	r4, r2
 80029da:	4308      	orrs	r0, r1
 80029dc:	01d2      	lsls	r2, r2, #7
 80029de:	d535      	bpl.n	8002a4c <__aeabi_dmul+0x514>
 80029e0:	2201      	movs	r2, #1
 80029e2:	0843      	lsrs	r3, r0, #1
 80029e4:	4002      	ands	r2, r0
 80029e6:	4313      	orrs	r3, r2
 80029e8:	07e0      	lsls	r0, r4, #31
 80029ea:	4318      	orrs	r0, r3
 80029ec:	0864      	lsrs	r4, r4, #1
 80029ee:	e634      	b.n	800265a <__aeabi_dmul+0x122>
 80029f0:	9b00      	ldr	r3, [sp, #0]
 80029f2:	46a2      	mov	sl, r4
 80029f4:	469b      	mov	fp, r3
 80029f6:	4681      	mov	r9, r0
 80029f8:	2480      	movs	r4, #128	@ 0x80
 80029fa:	4653      	mov	r3, sl
 80029fc:	0324      	lsls	r4, r4, #12
 80029fe:	431c      	orrs	r4, r3
 8002a00:	0324      	lsls	r4, r4, #12
 8002a02:	464a      	mov	r2, r9
 8002a04:	4b2e      	ldr	r3, [pc, #184]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002a06:	0b24      	lsrs	r4, r4, #12
 8002a08:	e5ec      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a0a:	f000 fd75 	bl	80034f8 <__clzsi2>
 8002a0e:	2315      	movs	r3, #21
 8002a10:	469c      	mov	ip, r3
 8002a12:	4484      	add	ip, r0
 8002a14:	0002      	movs	r2, r0
 8002a16:	4663      	mov	r3, ip
 8002a18:	3220      	adds	r2, #32
 8002a1a:	2b1c      	cmp	r3, #28
 8002a1c:	dc00      	bgt.n	8002a20 <__aeabi_dmul+0x4e8>
 8002a1e:	e684      	b.n	800272a <__aeabi_dmul+0x1f2>
 8002a20:	2300      	movs	r3, #0
 8002a22:	4699      	mov	r9, r3
 8002a24:	0023      	movs	r3, r4
 8002a26:	3808      	subs	r0, #8
 8002a28:	4083      	lsls	r3, r0
 8002a2a:	469a      	mov	sl, r3
 8002a2c:	e68e      	b.n	800274c <__aeabi_dmul+0x214>
 8002a2e:	f000 fd63 	bl	80034f8 <__clzsi2>
 8002a32:	0002      	movs	r2, r0
 8002a34:	0003      	movs	r3, r0
 8002a36:	3215      	adds	r2, #21
 8002a38:	3320      	adds	r3, #32
 8002a3a:	2a1c      	cmp	r2, #28
 8002a3c:	dc00      	bgt.n	8002a40 <__aeabi_dmul+0x508>
 8002a3e:	e64e      	b.n	80026de <__aeabi_dmul+0x1a6>
 8002a40:	0002      	movs	r2, r0
 8002a42:	0034      	movs	r4, r6
 8002a44:	3a08      	subs	r2, #8
 8002a46:	2000      	movs	r0, #0
 8002a48:	4094      	lsls	r4, r2
 8002a4a:	e652      	b.n	80026f2 <__aeabi_dmul+0x1ba>
 8002a4c:	9301      	str	r3, [sp, #4]
 8002a4e:	e604      	b.n	800265a <__aeabi_dmul+0x122>
 8002a50:	4b1c      	ldr	r3, [pc, #112]	@ (8002ac4 <__aeabi_dmul+0x58c>)
 8002a52:	0021      	movs	r1, r4
 8002a54:	469c      	mov	ip, r3
 8002a56:	0003      	movs	r3, r0
 8002a58:	9d01      	ldr	r5, [sp, #4]
 8002a5a:	40d3      	lsrs	r3, r2
 8002a5c:	4465      	add	r5, ip
 8002a5e:	40a9      	lsls	r1, r5
 8002a60:	4319      	orrs	r1, r3
 8002a62:	0003      	movs	r3, r0
 8002a64:	40ab      	lsls	r3, r5
 8002a66:	1e58      	subs	r0, r3, #1
 8002a68:	4183      	sbcs	r3, r0
 8002a6a:	4319      	orrs	r1, r3
 8002a6c:	0008      	movs	r0, r1
 8002a6e:	40d4      	lsrs	r4, r2
 8002a70:	074b      	lsls	r3, r1, #29
 8002a72:	d009      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a74:	230f      	movs	r3, #15
 8002a76:	400b      	ands	r3, r1
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d005      	beq.n	8002a88 <__aeabi_dmul+0x550>
 8002a7c:	1d0b      	adds	r3, r1, #4
 8002a7e:	428b      	cmp	r3, r1
 8002a80:	4180      	sbcs	r0, r0
 8002a82:	4240      	negs	r0, r0
 8002a84:	1824      	adds	r4, r4, r0
 8002a86:	0018      	movs	r0, r3
 8002a88:	0223      	lsls	r3, r4, #8
 8002a8a:	d400      	bmi.n	8002a8e <__aeabi_dmul+0x556>
 8002a8c:	e6d6      	b.n	800283c <__aeabi_dmul+0x304>
 8002a8e:	2301      	movs	r3, #1
 8002a90:	2400      	movs	r4, #0
 8002a92:	2200      	movs	r2, #0
 8002a94:	e5a6      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002a96:	290f      	cmp	r1, #15
 8002a98:	d1aa      	bne.n	80029f0 <__aeabi_dmul+0x4b8>
 8002a9a:	2380      	movs	r3, #128	@ 0x80
 8002a9c:	4652      	mov	r2, sl
 8002a9e:	031b      	lsls	r3, r3, #12
 8002aa0:	421a      	tst	r2, r3
 8002aa2:	d0a9      	beq.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa4:	421c      	tst	r4, r3
 8002aa6:	d1a7      	bne.n	80029f8 <__aeabi_dmul+0x4c0>
 8002aa8:	431c      	orrs	r4, r3
 8002aaa:	9b00      	ldr	r3, [sp, #0]
 8002aac:	0002      	movs	r2, r0
 8002aae:	469b      	mov	fp, r3
 8002ab0:	4b03      	ldr	r3, [pc, #12]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002ab2:	e597      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ab4:	2400      	movs	r4, #0
 8002ab6:	e6c1      	b.n	800283c <__aeabi_dmul+0x304>
 8002ab8:	2400      	movs	r4, #0
 8002aba:	4b01      	ldr	r3, [pc, #4]	@ (8002ac0 <__aeabi_dmul+0x588>)
 8002abc:	0022      	movs	r2, r4
 8002abe:	e591      	b.n	80025e4 <__aeabi_dmul+0xac>
 8002ac0:	000007ff 	.word	0x000007ff
 8002ac4:	0000041e 	.word	0x0000041e

08002ac8 <__aeabi_dsub>:
 8002ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002aca:	464e      	mov	r6, r9
 8002acc:	4645      	mov	r5, r8
 8002ace:	46de      	mov	lr, fp
 8002ad0:	4657      	mov	r7, sl
 8002ad2:	b5e0      	push	{r5, r6, r7, lr}
 8002ad4:	b085      	sub	sp, #20
 8002ad6:	9000      	str	r0, [sp, #0]
 8002ad8:	9101      	str	r1, [sp, #4]
 8002ada:	030c      	lsls	r4, r1, #12
 8002adc:	004f      	lsls	r7, r1, #1
 8002ade:	0fce      	lsrs	r6, r1, #31
 8002ae0:	0a61      	lsrs	r1, r4, #9
 8002ae2:	9c00      	ldr	r4, [sp, #0]
 8002ae4:	46b0      	mov	r8, r6
 8002ae6:	0f64      	lsrs	r4, r4, #29
 8002ae8:	430c      	orrs	r4, r1
 8002aea:	9900      	ldr	r1, [sp, #0]
 8002aec:	0d7f      	lsrs	r7, r7, #21
 8002aee:	00c8      	lsls	r0, r1, #3
 8002af0:	0011      	movs	r1, r2
 8002af2:	001a      	movs	r2, r3
 8002af4:	031b      	lsls	r3, r3, #12
 8002af6:	469c      	mov	ip, r3
 8002af8:	9100      	str	r1, [sp, #0]
 8002afa:	9201      	str	r2, [sp, #4]
 8002afc:	0051      	lsls	r1, r2, #1
 8002afe:	0d4b      	lsrs	r3, r1, #21
 8002b00:	4699      	mov	r9, r3
 8002b02:	9b01      	ldr	r3, [sp, #4]
 8002b04:	9d00      	ldr	r5, [sp, #0]
 8002b06:	0fd9      	lsrs	r1, r3, #31
 8002b08:	4663      	mov	r3, ip
 8002b0a:	0f6a      	lsrs	r2, r5, #29
 8002b0c:	0a5b      	lsrs	r3, r3, #9
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	00ea      	lsls	r2, r5, #3
 8002b12:	4694      	mov	ip, r2
 8002b14:	4693      	mov	fp, r2
 8002b16:	4ac1      	ldr	r2, [pc, #772]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002b18:	9003      	str	r0, [sp, #12]
 8002b1a:	9302      	str	r3, [sp, #8]
 8002b1c:	4591      	cmp	r9, r2
 8002b1e:	d100      	bne.n	8002b22 <__aeabi_dsub+0x5a>
 8002b20:	e0cd      	b.n	8002cbe <__aeabi_dsub+0x1f6>
 8002b22:	2501      	movs	r5, #1
 8002b24:	4069      	eors	r1, r5
 8002b26:	464d      	mov	r5, r9
 8002b28:	1b7d      	subs	r5, r7, r5
 8002b2a:	46aa      	mov	sl, r5
 8002b2c:	428e      	cmp	r6, r1
 8002b2e:	d100      	bne.n	8002b32 <__aeabi_dsub+0x6a>
 8002b30:	e080      	b.n	8002c34 <__aeabi_dsub+0x16c>
 8002b32:	2d00      	cmp	r5, #0
 8002b34:	dc00      	bgt.n	8002b38 <__aeabi_dsub+0x70>
 8002b36:	e335      	b.n	80031a4 <__aeabi_dsub+0x6dc>
 8002b38:	4649      	mov	r1, r9
 8002b3a:	2900      	cmp	r1, #0
 8002b3c:	d100      	bne.n	8002b40 <__aeabi_dsub+0x78>
 8002b3e:	e0df      	b.n	8002d00 <__aeabi_dsub+0x238>
 8002b40:	4297      	cmp	r7, r2
 8002b42:	d100      	bne.n	8002b46 <__aeabi_dsub+0x7e>
 8002b44:	e194      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002b46:	4652      	mov	r2, sl
 8002b48:	2501      	movs	r5, #1
 8002b4a:	2a38      	cmp	r2, #56	@ 0x38
 8002b4c:	dc19      	bgt.n	8002b82 <__aeabi_dsub+0xba>
 8002b4e:	2280      	movs	r2, #128	@ 0x80
 8002b50:	9b02      	ldr	r3, [sp, #8]
 8002b52:	0412      	lsls	r2, r2, #16
 8002b54:	4313      	orrs	r3, r2
 8002b56:	9302      	str	r3, [sp, #8]
 8002b58:	4652      	mov	r2, sl
 8002b5a:	2a1f      	cmp	r2, #31
 8002b5c:	dd00      	ble.n	8002b60 <__aeabi_dsub+0x98>
 8002b5e:	e1e3      	b.n	8002f28 <__aeabi_dsub+0x460>
 8002b60:	4653      	mov	r3, sl
 8002b62:	2220      	movs	r2, #32
 8002b64:	4661      	mov	r1, ip
 8002b66:	9d02      	ldr	r5, [sp, #8]
 8002b68:	1ad2      	subs	r2, r2, r3
 8002b6a:	4095      	lsls	r5, r2
 8002b6c:	40d9      	lsrs	r1, r3
 8002b6e:	430d      	orrs	r5, r1
 8002b70:	4661      	mov	r1, ip
 8002b72:	4091      	lsls	r1, r2
 8002b74:	000a      	movs	r2, r1
 8002b76:	1e51      	subs	r1, r2, #1
 8002b78:	418a      	sbcs	r2, r1
 8002b7a:	4315      	orrs	r5, r2
 8002b7c:	9a02      	ldr	r2, [sp, #8]
 8002b7e:	40da      	lsrs	r2, r3
 8002b80:	1aa4      	subs	r4, r4, r2
 8002b82:	1b45      	subs	r5, r0, r5
 8002b84:	42a8      	cmp	r0, r5
 8002b86:	4180      	sbcs	r0, r0
 8002b88:	4240      	negs	r0, r0
 8002b8a:	1a24      	subs	r4, r4, r0
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dsub+0xca>
 8002b90:	e13d      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002b92:	0264      	lsls	r4, r4, #9
 8002b94:	0a64      	lsrs	r4, r4, #9
 8002b96:	2c00      	cmp	r4, #0
 8002b98:	d100      	bne.n	8002b9c <__aeabi_dsub+0xd4>
 8002b9a:	e147      	b.n	8002e2c <__aeabi_dsub+0x364>
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	f000 fcab 	bl	80034f8 <__clzsi2>
 8002ba2:	0003      	movs	r3, r0
 8002ba4:	3b08      	subs	r3, #8
 8002ba6:	2120      	movs	r1, #32
 8002ba8:	0028      	movs	r0, r5
 8002baa:	1aca      	subs	r2, r1, r3
 8002bac:	40d0      	lsrs	r0, r2
 8002bae:	409c      	lsls	r4, r3
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	409d      	lsls	r5, r3
 8002bb4:	4322      	orrs	r2, r4
 8002bb6:	429f      	cmp	r7, r3
 8002bb8:	dd00      	ble.n	8002bbc <__aeabi_dsub+0xf4>
 8002bba:	e177      	b.n	8002eac <__aeabi_dsub+0x3e4>
 8002bbc:	1bd8      	subs	r0, r3, r7
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	1a09      	subs	r1, r1, r0
 8002bc2:	002c      	movs	r4, r5
 8002bc4:	408d      	lsls	r5, r1
 8002bc6:	40c4      	lsrs	r4, r0
 8002bc8:	1e6b      	subs	r3, r5, #1
 8002bca:	419d      	sbcs	r5, r3
 8002bcc:	0013      	movs	r3, r2
 8002bce:	40c2      	lsrs	r2, r0
 8002bd0:	408b      	lsls	r3, r1
 8002bd2:	4325      	orrs	r5, r4
 8002bd4:	2700      	movs	r7, #0
 8002bd6:	0014      	movs	r4, r2
 8002bd8:	431d      	orrs	r5, r3
 8002bda:	076b      	lsls	r3, r5, #29
 8002bdc:	d009      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002bde:	230f      	movs	r3, #15
 8002be0:	402b      	ands	r3, r5
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d005      	beq.n	8002bf2 <__aeabi_dsub+0x12a>
 8002be6:	1d2b      	adds	r3, r5, #4
 8002be8:	42ab      	cmp	r3, r5
 8002bea:	41ad      	sbcs	r5, r5
 8002bec:	426d      	negs	r5, r5
 8002bee:	1964      	adds	r4, r4, r5
 8002bf0:	001d      	movs	r5, r3
 8002bf2:	0223      	lsls	r3, r4, #8
 8002bf4:	d400      	bmi.n	8002bf8 <__aeabi_dsub+0x130>
 8002bf6:	e140      	b.n	8002e7a <__aeabi_dsub+0x3b2>
 8002bf8:	4a88      	ldr	r2, [pc, #544]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002bfa:	3701      	adds	r7, #1
 8002bfc:	4297      	cmp	r7, r2
 8002bfe:	d100      	bne.n	8002c02 <__aeabi_dsub+0x13a>
 8002c00:	e101      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002c02:	2601      	movs	r6, #1
 8002c04:	4643      	mov	r3, r8
 8002c06:	4986      	ldr	r1, [pc, #536]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002c08:	08ed      	lsrs	r5, r5, #3
 8002c0a:	4021      	ands	r1, r4
 8002c0c:	074a      	lsls	r2, r1, #29
 8002c0e:	432a      	orrs	r2, r5
 8002c10:	057c      	lsls	r4, r7, #21
 8002c12:	024d      	lsls	r5, r1, #9
 8002c14:	0b2d      	lsrs	r5, r5, #12
 8002c16:	0d64      	lsrs	r4, r4, #21
 8002c18:	401e      	ands	r6, r3
 8002c1a:	0524      	lsls	r4, r4, #20
 8002c1c:	432c      	orrs	r4, r5
 8002c1e:	07f6      	lsls	r6, r6, #31
 8002c20:	4334      	orrs	r4, r6
 8002c22:	0010      	movs	r0, r2
 8002c24:	0021      	movs	r1, r4
 8002c26:	b005      	add	sp, #20
 8002c28:	bcf0      	pop	{r4, r5, r6, r7}
 8002c2a:	46bb      	mov	fp, r7
 8002c2c:	46b2      	mov	sl, r6
 8002c2e:	46a9      	mov	r9, r5
 8002c30:	46a0      	mov	r8, r4
 8002c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002c34:	2d00      	cmp	r5, #0
 8002c36:	dc00      	bgt.n	8002c3a <__aeabi_dsub+0x172>
 8002c38:	e2d0      	b.n	80031dc <__aeabi_dsub+0x714>
 8002c3a:	4649      	mov	r1, r9
 8002c3c:	2900      	cmp	r1, #0
 8002c3e:	d000      	beq.n	8002c42 <__aeabi_dsub+0x17a>
 8002c40:	e0d4      	b.n	8002dec <__aeabi_dsub+0x324>
 8002c42:	4661      	mov	r1, ip
 8002c44:	9b02      	ldr	r3, [sp, #8]
 8002c46:	4319      	orrs	r1, r3
 8002c48:	d100      	bne.n	8002c4c <__aeabi_dsub+0x184>
 8002c4a:	e12b      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002c4c:	1e69      	subs	r1, r5, #1
 8002c4e:	2d01      	cmp	r5, #1
 8002c50:	d100      	bne.n	8002c54 <__aeabi_dsub+0x18c>
 8002c52:	e1d9      	b.n	8003008 <__aeabi_dsub+0x540>
 8002c54:	4295      	cmp	r5, r2
 8002c56:	d100      	bne.n	8002c5a <__aeabi_dsub+0x192>
 8002c58:	e10a      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002c5a:	2501      	movs	r5, #1
 8002c5c:	2938      	cmp	r1, #56	@ 0x38
 8002c5e:	dc17      	bgt.n	8002c90 <__aeabi_dsub+0x1c8>
 8002c60:	468a      	mov	sl, r1
 8002c62:	4653      	mov	r3, sl
 8002c64:	2b1f      	cmp	r3, #31
 8002c66:	dd00      	ble.n	8002c6a <__aeabi_dsub+0x1a2>
 8002c68:	e1e7      	b.n	800303a <__aeabi_dsub+0x572>
 8002c6a:	2220      	movs	r2, #32
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	9b02      	ldr	r3, [sp, #8]
 8002c70:	4661      	mov	r1, ip
 8002c72:	4093      	lsls	r3, r2
 8002c74:	001d      	movs	r5, r3
 8002c76:	4653      	mov	r3, sl
 8002c78:	40d9      	lsrs	r1, r3
 8002c7a:	4663      	mov	r3, ip
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	001a      	movs	r2, r3
 8002c80:	430d      	orrs	r5, r1
 8002c82:	1e51      	subs	r1, r2, #1
 8002c84:	418a      	sbcs	r2, r1
 8002c86:	4653      	mov	r3, sl
 8002c88:	4315      	orrs	r5, r2
 8002c8a:	9a02      	ldr	r2, [sp, #8]
 8002c8c:	40da      	lsrs	r2, r3
 8002c8e:	18a4      	adds	r4, r4, r2
 8002c90:	182d      	adds	r5, r5, r0
 8002c92:	4285      	cmp	r5, r0
 8002c94:	4180      	sbcs	r0, r0
 8002c96:	4240      	negs	r0, r0
 8002c98:	1824      	adds	r4, r4, r0
 8002c9a:	0223      	lsls	r3, r4, #8
 8002c9c:	d400      	bmi.n	8002ca0 <__aeabi_dsub+0x1d8>
 8002c9e:	e0b6      	b.n	8002e0e <__aeabi_dsub+0x346>
 8002ca0:	4b5e      	ldr	r3, [pc, #376]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002ca2:	3701      	adds	r7, #1
 8002ca4:	429f      	cmp	r7, r3
 8002ca6:	d100      	bne.n	8002caa <__aeabi_dsub+0x1e2>
 8002ca8:	e0ad      	b.n	8002e06 <__aeabi_dsub+0x33e>
 8002caa:	2101      	movs	r1, #1
 8002cac:	4b5c      	ldr	r3, [pc, #368]	@ (8002e20 <__aeabi_dsub+0x358>)
 8002cae:	086a      	lsrs	r2, r5, #1
 8002cb0:	401c      	ands	r4, r3
 8002cb2:	4029      	ands	r1, r5
 8002cb4:	430a      	orrs	r2, r1
 8002cb6:	07e5      	lsls	r5, r4, #31
 8002cb8:	4315      	orrs	r5, r2
 8002cba:	0864      	lsrs	r4, r4, #1
 8002cbc:	e78d      	b.n	8002bda <__aeabi_dsub+0x112>
 8002cbe:	4a59      	ldr	r2, [pc, #356]	@ (8002e24 <__aeabi_dsub+0x35c>)
 8002cc0:	9b02      	ldr	r3, [sp, #8]
 8002cc2:	4692      	mov	sl, r2
 8002cc4:	4662      	mov	r2, ip
 8002cc6:	44ba      	add	sl, r7
 8002cc8:	431a      	orrs	r2, r3
 8002cca:	d02c      	beq.n	8002d26 <__aeabi_dsub+0x25e>
 8002ccc:	428e      	cmp	r6, r1
 8002cce:	d02e      	beq.n	8002d2e <__aeabi_dsub+0x266>
 8002cd0:	4652      	mov	r2, sl
 8002cd2:	2a00      	cmp	r2, #0
 8002cd4:	d060      	beq.n	8002d98 <__aeabi_dsub+0x2d0>
 8002cd6:	2f00      	cmp	r7, #0
 8002cd8:	d100      	bne.n	8002cdc <__aeabi_dsub+0x214>
 8002cda:	e0db      	b.n	8002e94 <__aeabi_dsub+0x3cc>
 8002cdc:	4663      	mov	r3, ip
 8002cde:	000e      	movs	r6, r1
 8002ce0:	9c02      	ldr	r4, [sp, #8]
 8002ce2:	08d8      	lsrs	r0, r3, #3
 8002ce4:	0762      	lsls	r2, r4, #29
 8002ce6:	4302      	orrs	r2, r0
 8002ce8:	08e4      	lsrs	r4, r4, #3
 8002cea:	0013      	movs	r3, r2
 8002cec:	4323      	orrs	r3, r4
 8002cee:	d100      	bne.n	8002cf2 <__aeabi_dsub+0x22a>
 8002cf0:	e254      	b.n	800319c <__aeabi_dsub+0x6d4>
 8002cf2:	2580      	movs	r5, #128	@ 0x80
 8002cf4:	032d      	lsls	r5, r5, #12
 8002cf6:	4325      	orrs	r5, r4
 8002cf8:	032d      	lsls	r5, r5, #12
 8002cfa:	4c48      	ldr	r4, [pc, #288]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002cfc:	0b2d      	lsrs	r5, r5, #12
 8002cfe:	e78c      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002d00:	4661      	mov	r1, ip
 8002d02:	9b02      	ldr	r3, [sp, #8]
 8002d04:	4319      	orrs	r1, r3
 8002d06:	d100      	bne.n	8002d0a <__aeabi_dsub+0x242>
 8002d08:	e0cc      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002d0a:	0029      	movs	r1, r5
 8002d0c:	3901      	subs	r1, #1
 8002d0e:	2d01      	cmp	r5, #1
 8002d10:	d100      	bne.n	8002d14 <__aeabi_dsub+0x24c>
 8002d12:	e188      	b.n	8003026 <__aeabi_dsub+0x55e>
 8002d14:	4295      	cmp	r5, r2
 8002d16:	d100      	bne.n	8002d1a <__aeabi_dsub+0x252>
 8002d18:	e0aa      	b.n	8002e70 <__aeabi_dsub+0x3a8>
 8002d1a:	2501      	movs	r5, #1
 8002d1c:	2938      	cmp	r1, #56	@ 0x38
 8002d1e:	dd00      	ble.n	8002d22 <__aeabi_dsub+0x25a>
 8002d20:	e72f      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002d22:	468a      	mov	sl, r1
 8002d24:	e718      	b.n	8002b58 <__aeabi_dsub+0x90>
 8002d26:	2201      	movs	r2, #1
 8002d28:	4051      	eors	r1, r2
 8002d2a:	428e      	cmp	r6, r1
 8002d2c:	d1d0      	bne.n	8002cd0 <__aeabi_dsub+0x208>
 8002d2e:	4653      	mov	r3, sl
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x26e>
 8002d34:	e0be      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 8002d36:	2f00      	cmp	r7, #0
 8002d38:	d000      	beq.n	8002d3c <__aeabi_dsub+0x274>
 8002d3a:	e138      	b.n	8002fae <__aeabi_dsub+0x4e6>
 8002d3c:	46ca      	mov	sl, r9
 8002d3e:	0022      	movs	r2, r4
 8002d40:	4302      	orrs	r2, r0
 8002d42:	d100      	bne.n	8002d46 <__aeabi_dsub+0x27e>
 8002d44:	e1e2      	b.n	800310c <__aeabi_dsub+0x644>
 8002d46:	4653      	mov	r3, sl
 8002d48:	1e59      	subs	r1, r3, #1
 8002d4a:	2b01      	cmp	r3, #1
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x288>
 8002d4e:	e20d      	b.n	800316c <__aeabi_dsub+0x6a4>
 8002d50:	4a32      	ldr	r2, [pc, #200]	@ (8002e1c <__aeabi_dsub+0x354>)
 8002d52:	4592      	cmp	sl, r2
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x290>
 8002d56:	e1d2      	b.n	80030fe <__aeabi_dsub+0x636>
 8002d58:	2701      	movs	r7, #1
 8002d5a:	2938      	cmp	r1, #56	@ 0x38
 8002d5c:	dc13      	bgt.n	8002d86 <__aeabi_dsub+0x2be>
 8002d5e:	291f      	cmp	r1, #31
 8002d60:	dd00      	ble.n	8002d64 <__aeabi_dsub+0x29c>
 8002d62:	e1ee      	b.n	8003142 <__aeabi_dsub+0x67a>
 8002d64:	2220      	movs	r2, #32
 8002d66:	9b02      	ldr	r3, [sp, #8]
 8002d68:	1a52      	subs	r2, r2, r1
 8002d6a:	0025      	movs	r5, r4
 8002d6c:	0007      	movs	r7, r0
 8002d6e:	469a      	mov	sl, r3
 8002d70:	40cc      	lsrs	r4, r1
 8002d72:	4090      	lsls	r0, r2
 8002d74:	4095      	lsls	r5, r2
 8002d76:	40cf      	lsrs	r7, r1
 8002d78:	44a2      	add	sl, r4
 8002d7a:	1e42      	subs	r2, r0, #1
 8002d7c:	4190      	sbcs	r0, r2
 8002d7e:	4653      	mov	r3, sl
 8002d80:	432f      	orrs	r7, r5
 8002d82:	4307      	orrs	r7, r0
 8002d84:	9302      	str	r3, [sp, #8]
 8002d86:	003d      	movs	r5, r7
 8002d88:	4465      	add	r5, ip
 8002d8a:	4565      	cmp	r5, ip
 8002d8c:	4192      	sbcs	r2, r2
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4252      	negs	r2, r2
 8002d92:	464f      	mov	r7, r9
 8002d94:	18d4      	adds	r4, r2, r3
 8002d96:	e780      	b.n	8002c9a <__aeabi_dsub+0x1d2>
 8002d98:	4a23      	ldr	r2, [pc, #140]	@ (8002e28 <__aeabi_dsub+0x360>)
 8002d9a:	1c7d      	adds	r5, r7, #1
 8002d9c:	4215      	tst	r5, r2
 8002d9e:	d000      	beq.n	8002da2 <__aeabi_dsub+0x2da>
 8002da0:	e0aa      	b.n	8002ef8 <__aeabi_dsub+0x430>
 8002da2:	4662      	mov	r2, ip
 8002da4:	0025      	movs	r5, r4
 8002da6:	9b02      	ldr	r3, [sp, #8]
 8002da8:	4305      	orrs	r5, r0
 8002daa:	431a      	orrs	r2, r3
 8002dac:	2f00      	cmp	r7, #0
 8002dae:	d000      	beq.n	8002db2 <__aeabi_dsub+0x2ea>
 8002db0:	e0f5      	b.n	8002f9e <__aeabi_dsub+0x4d6>
 8002db2:	2d00      	cmp	r5, #0
 8002db4:	d100      	bne.n	8002db8 <__aeabi_dsub+0x2f0>
 8002db6:	e16b      	b.n	8003090 <__aeabi_dsub+0x5c8>
 8002db8:	2a00      	cmp	r2, #0
 8002dba:	d100      	bne.n	8002dbe <__aeabi_dsub+0x2f6>
 8002dbc:	e152      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002dbe:	4663      	mov	r3, ip
 8002dc0:	1ac5      	subs	r5, r0, r3
 8002dc2:	9b02      	ldr	r3, [sp, #8]
 8002dc4:	1ae2      	subs	r2, r4, r3
 8002dc6:	42a8      	cmp	r0, r5
 8002dc8:	419b      	sbcs	r3, r3
 8002dca:	425b      	negs	r3, r3
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	021a      	lsls	r2, r3, #8
 8002dd0:	d400      	bmi.n	8002dd4 <__aeabi_dsub+0x30c>
 8002dd2:	e1d5      	b.n	8003180 <__aeabi_dsub+0x6b8>
 8002dd4:	4663      	mov	r3, ip
 8002dd6:	1a1d      	subs	r5, r3, r0
 8002dd8:	45ac      	cmp	ip, r5
 8002dda:	4192      	sbcs	r2, r2
 8002ddc:	2601      	movs	r6, #1
 8002dde:	9b02      	ldr	r3, [sp, #8]
 8002de0:	4252      	negs	r2, r2
 8002de2:	1b1c      	subs	r4, r3, r4
 8002de4:	4688      	mov	r8, r1
 8002de6:	1aa4      	subs	r4, r4, r2
 8002de8:	400e      	ands	r6, r1
 8002dea:	e6f6      	b.n	8002bda <__aeabi_dsub+0x112>
 8002dec:	4297      	cmp	r7, r2
 8002dee:	d03f      	beq.n	8002e70 <__aeabi_dsub+0x3a8>
 8002df0:	4652      	mov	r2, sl
 8002df2:	2501      	movs	r5, #1
 8002df4:	2a38      	cmp	r2, #56	@ 0x38
 8002df6:	dd00      	ble.n	8002dfa <__aeabi_dsub+0x332>
 8002df8:	e74a      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8002dfa:	2280      	movs	r2, #128	@ 0x80
 8002dfc:	9b02      	ldr	r3, [sp, #8]
 8002dfe:	0412      	lsls	r2, r2, #16
 8002e00:	4313      	orrs	r3, r2
 8002e02:	9302      	str	r3, [sp, #8]
 8002e04:	e72d      	b.n	8002c62 <__aeabi_dsub+0x19a>
 8002e06:	003c      	movs	r4, r7
 8002e08:	2500      	movs	r5, #0
 8002e0a:	2200      	movs	r2, #0
 8002e0c:	e705      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e0e:	2307      	movs	r3, #7
 8002e10:	402b      	ands	r3, r5
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d000      	beq.n	8002e18 <__aeabi_dsub+0x350>
 8002e16:	e6e2      	b.n	8002bde <__aeabi_dsub+0x116>
 8002e18:	e06b      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 8002e1a:	46c0      	nop			@ (mov r8, r8)
 8002e1c:	000007ff 	.word	0x000007ff
 8002e20:	ff7fffff 	.word	0xff7fffff
 8002e24:	fffff801 	.word	0xfffff801
 8002e28:	000007fe 	.word	0x000007fe
 8002e2c:	0028      	movs	r0, r5
 8002e2e:	f000 fb63 	bl	80034f8 <__clzsi2>
 8002e32:	0003      	movs	r3, r0
 8002e34:	3318      	adds	r3, #24
 8002e36:	2b1f      	cmp	r3, #31
 8002e38:	dc00      	bgt.n	8002e3c <__aeabi_dsub+0x374>
 8002e3a:	e6b4      	b.n	8002ba6 <__aeabi_dsub+0xde>
 8002e3c:	002a      	movs	r2, r5
 8002e3e:	3808      	subs	r0, #8
 8002e40:	4082      	lsls	r2, r0
 8002e42:	429f      	cmp	r7, r3
 8002e44:	dd00      	ble.n	8002e48 <__aeabi_dsub+0x380>
 8002e46:	e0b9      	b.n	8002fbc <__aeabi_dsub+0x4f4>
 8002e48:	1bdb      	subs	r3, r3, r7
 8002e4a:	1c58      	adds	r0, r3, #1
 8002e4c:	281f      	cmp	r0, #31
 8002e4e:	dc00      	bgt.n	8002e52 <__aeabi_dsub+0x38a>
 8002e50:	e1a0      	b.n	8003194 <__aeabi_dsub+0x6cc>
 8002e52:	0015      	movs	r5, r2
 8002e54:	3b1f      	subs	r3, #31
 8002e56:	40dd      	lsrs	r5, r3
 8002e58:	2820      	cmp	r0, #32
 8002e5a:	d005      	beq.n	8002e68 <__aeabi_dsub+0x3a0>
 8002e5c:	2340      	movs	r3, #64	@ 0x40
 8002e5e:	1a1b      	subs	r3, r3, r0
 8002e60:	409a      	lsls	r2, r3
 8002e62:	1e53      	subs	r3, r2, #1
 8002e64:	419a      	sbcs	r2, r3
 8002e66:	4315      	orrs	r5, r2
 8002e68:	2307      	movs	r3, #7
 8002e6a:	2700      	movs	r7, #0
 8002e6c:	402b      	ands	r3, r5
 8002e6e:	e7d0      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002e70:	08c0      	lsrs	r0, r0, #3
 8002e72:	0762      	lsls	r2, r4, #29
 8002e74:	4302      	orrs	r2, r0
 8002e76:	08e4      	lsrs	r4, r4, #3
 8002e78:	e737      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e7a:	08ea      	lsrs	r2, r5, #3
 8002e7c:	0763      	lsls	r3, r4, #29
 8002e7e:	431a      	orrs	r2, r3
 8002e80:	4bd3      	ldr	r3, [pc, #844]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002e82:	08e4      	lsrs	r4, r4, #3
 8002e84:	429f      	cmp	r7, r3
 8002e86:	d100      	bne.n	8002e8a <__aeabi_dsub+0x3c2>
 8002e88:	e72f      	b.n	8002cea <__aeabi_dsub+0x222>
 8002e8a:	0324      	lsls	r4, r4, #12
 8002e8c:	0b25      	lsrs	r5, r4, #12
 8002e8e:	057c      	lsls	r4, r7, #21
 8002e90:	0d64      	lsrs	r4, r4, #21
 8002e92:	e6c2      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002e94:	46ca      	mov	sl, r9
 8002e96:	0022      	movs	r2, r4
 8002e98:	4302      	orrs	r2, r0
 8002e9a:	d158      	bne.n	8002f4e <__aeabi_dsub+0x486>
 8002e9c:	4663      	mov	r3, ip
 8002e9e:	000e      	movs	r6, r1
 8002ea0:	9c02      	ldr	r4, [sp, #8]
 8002ea2:	9303      	str	r3, [sp, #12]
 8002ea4:	9b03      	ldr	r3, [sp, #12]
 8002ea6:	4657      	mov	r7, sl
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	e7e7      	b.n	8002e7c <__aeabi_dsub+0x3b4>
 8002eac:	4cc9      	ldr	r4, [pc, #804]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eae:	1aff      	subs	r7, r7, r3
 8002eb0:	4014      	ands	r4, r2
 8002eb2:	e692      	b.n	8002bda <__aeabi_dsub+0x112>
 8002eb4:	4dc8      	ldr	r5, [pc, #800]	@ (80031d8 <__aeabi_dsub+0x710>)
 8002eb6:	1c7a      	adds	r2, r7, #1
 8002eb8:	422a      	tst	r2, r5
 8002eba:	d000      	beq.n	8002ebe <__aeabi_dsub+0x3f6>
 8002ebc:	e084      	b.n	8002fc8 <__aeabi_dsub+0x500>
 8002ebe:	0022      	movs	r2, r4
 8002ec0:	4302      	orrs	r2, r0
 8002ec2:	2f00      	cmp	r7, #0
 8002ec4:	d000      	beq.n	8002ec8 <__aeabi_dsub+0x400>
 8002ec6:	e0ef      	b.n	80030a8 <__aeabi_dsub+0x5e0>
 8002ec8:	2a00      	cmp	r2, #0
 8002eca:	d100      	bne.n	8002ece <__aeabi_dsub+0x406>
 8002ecc:	e0e5      	b.n	800309a <__aeabi_dsub+0x5d2>
 8002ece:	4662      	mov	r2, ip
 8002ed0:	9902      	ldr	r1, [sp, #8]
 8002ed2:	430a      	orrs	r2, r1
 8002ed4:	d100      	bne.n	8002ed8 <__aeabi_dsub+0x410>
 8002ed6:	e0c5      	b.n	8003064 <__aeabi_dsub+0x59c>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	18c5      	adds	r5, r0, r3
 8002edc:	468c      	mov	ip, r1
 8002ede:	4285      	cmp	r5, r0
 8002ee0:	4180      	sbcs	r0, r0
 8002ee2:	4464      	add	r4, ip
 8002ee4:	4240      	negs	r0, r0
 8002ee6:	1824      	adds	r4, r4, r0
 8002ee8:	0223      	lsls	r3, r4, #8
 8002eea:	d502      	bpl.n	8002ef2 <__aeabi_dsub+0x42a>
 8002eec:	4bb9      	ldr	r3, [pc, #740]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002eee:	3701      	adds	r7, #1
 8002ef0:	401c      	ands	r4, r3
 8002ef2:	46ba      	mov	sl, r7
 8002ef4:	9503      	str	r5, [sp, #12]
 8002ef6:	e7d5      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8002ef8:	4662      	mov	r2, ip
 8002efa:	1a85      	subs	r5, r0, r2
 8002efc:	42a8      	cmp	r0, r5
 8002efe:	4192      	sbcs	r2, r2
 8002f00:	4252      	negs	r2, r2
 8002f02:	4691      	mov	r9, r2
 8002f04:	9b02      	ldr	r3, [sp, #8]
 8002f06:	1ae3      	subs	r3, r4, r3
 8002f08:	001a      	movs	r2, r3
 8002f0a:	464b      	mov	r3, r9
 8002f0c:	1ad2      	subs	r2, r2, r3
 8002f0e:	0013      	movs	r3, r2
 8002f10:	4691      	mov	r9, r2
 8002f12:	021a      	lsls	r2, r3, #8
 8002f14:	d46c      	bmi.n	8002ff0 <__aeabi_dsub+0x528>
 8002f16:	464a      	mov	r2, r9
 8002f18:	464c      	mov	r4, r9
 8002f1a:	432a      	orrs	r2, r5
 8002f1c:	d000      	beq.n	8002f20 <__aeabi_dsub+0x458>
 8002f1e:	e63a      	b.n	8002b96 <__aeabi_dsub+0xce>
 8002f20:	2600      	movs	r6, #0
 8002f22:	2400      	movs	r4, #0
 8002f24:	2500      	movs	r5, #0
 8002f26:	e678      	b.n	8002c1a <__aeabi_dsub+0x152>
 8002f28:	9902      	ldr	r1, [sp, #8]
 8002f2a:	4653      	mov	r3, sl
 8002f2c:	000d      	movs	r5, r1
 8002f2e:	3a20      	subs	r2, #32
 8002f30:	40d5      	lsrs	r5, r2
 8002f32:	2b20      	cmp	r3, #32
 8002f34:	d006      	beq.n	8002f44 <__aeabi_dsub+0x47c>
 8002f36:	2240      	movs	r2, #64	@ 0x40
 8002f38:	1ad2      	subs	r2, r2, r3
 8002f3a:	000b      	movs	r3, r1
 8002f3c:	4093      	lsls	r3, r2
 8002f3e:	4662      	mov	r2, ip
 8002f40:	431a      	orrs	r2, r3
 8002f42:	4693      	mov	fp, r2
 8002f44:	465b      	mov	r3, fp
 8002f46:	1e5a      	subs	r2, r3, #1
 8002f48:	4193      	sbcs	r3, r2
 8002f4a:	431d      	orrs	r5, r3
 8002f4c:	e619      	b.n	8002b82 <__aeabi_dsub+0xba>
 8002f4e:	4653      	mov	r3, sl
 8002f50:	1e5a      	subs	r2, r3, #1
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d100      	bne.n	8002f58 <__aeabi_dsub+0x490>
 8002f56:	e0c6      	b.n	80030e6 <__aeabi_dsub+0x61e>
 8002f58:	4e9d      	ldr	r6, [pc, #628]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002f5a:	45b2      	cmp	sl, r6
 8002f5c:	d100      	bne.n	8002f60 <__aeabi_dsub+0x498>
 8002f5e:	e6bd      	b.n	8002cdc <__aeabi_dsub+0x214>
 8002f60:	4688      	mov	r8, r1
 8002f62:	000e      	movs	r6, r1
 8002f64:	2501      	movs	r5, #1
 8002f66:	2a38      	cmp	r2, #56	@ 0x38
 8002f68:	dc10      	bgt.n	8002f8c <__aeabi_dsub+0x4c4>
 8002f6a:	2a1f      	cmp	r2, #31
 8002f6c:	dc7f      	bgt.n	800306e <__aeabi_dsub+0x5a6>
 8002f6e:	2120      	movs	r1, #32
 8002f70:	0025      	movs	r5, r4
 8002f72:	1a89      	subs	r1, r1, r2
 8002f74:	0007      	movs	r7, r0
 8002f76:	4088      	lsls	r0, r1
 8002f78:	408d      	lsls	r5, r1
 8002f7a:	40d7      	lsrs	r7, r2
 8002f7c:	40d4      	lsrs	r4, r2
 8002f7e:	1e41      	subs	r1, r0, #1
 8002f80:	4188      	sbcs	r0, r1
 8002f82:	9b02      	ldr	r3, [sp, #8]
 8002f84:	433d      	orrs	r5, r7
 8002f86:	1b1b      	subs	r3, r3, r4
 8002f88:	4305      	orrs	r5, r0
 8002f8a:	9302      	str	r3, [sp, #8]
 8002f8c:	4662      	mov	r2, ip
 8002f8e:	1b55      	subs	r5, r2, r5
 8002f90:	45ac      	cmp	ip, r5
 8002f92:	4192      	sbcs	r2, r2
 8002f94:	9b02      	ldr	r3, [sp, #8]
 8002f96:	4252      	negs	r2, r2
 8002f98:	464f      	mov	r7, r9
 8002f9a:	1a9c      	subs	r4, r3, r2
 8002f9c:	e5f6      	b.n	8002b8c <__aeabi_dsub+0xc4>
 8002f9e:	2d00      	cmp	r5, #0
 8002fa0:	d000      	beq.n	8002fa4 <__aeabi_dsub+0x4dc>
 8002fa2:	e0b7      	b.n	8003114 <__aeabi_dsub+0x64c>
 8002fa4:	2a00      	cmp	r2, #0
 8002fa6:	d100      	bne.n	8002faa <__aeabi_dsub+0x4e2>
 8002fa8:	e0f0      	b.n	800318c <__aeabi_dsub+0x6c4>
 8002faa:	2601      	movs	r6, #1
 8002fac:	400e      	ands	r6, r1
 8002fae:	4663      	mov	r3, ip
 8002fb0:	9802      	ldr	r0, [sp, #8]
 8002fb2:	08d9      	lsrs	r1, r3, #3
 8002fb4:	0742      	lsls	r2, r0, #29
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	08c4      	lsrs	r4, r0, #3
 8002fba:	e696      	b.n	8002cea <__aeabi_dsub+0x222>
 8002fbc:	4c85      	ldr	r4, [pc, #532]	@ (80031d4 <__aeabi_dsub+0x70c>)
 8002fbe:	1aff      	subs	r7, r7, r3
 8002fc0:	4014      	ands	r4, r2
 8002fc2:	0762      	lsls	r2, r4, #29
 8002fc4:	08e4      	lsrs	r4, r4, #3
 8002fc6:	e760      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 8002fc8:	4981      	ldr	r1, [pc, #516]	@ (80031d0 <__aeabi_dsub+0x708>)
 8002fca:	428a      	cmp	r2, r1
 8002fcc:	d100      	bne.n	8002fd0 <__aeabi_dsub+0x508>
 8002fce:	e0c9      	b.n	8003164 <__aeabi_dsub+0x69c>
 8002fd0:	4663      	mov	r3, ip
 8002fd2:	18c1      	adds	r1, r0, r3
 8002fd4:	4281      	cmp	r1, r0
 8002fd6:	4180      	sbcs	r0, r0
 8002fd8:	9b02      	ldr	r3, [sp, #8]
 8002fda:	4240      	negs	r0, r0
 8002fdc:	18e3      	adds	r3, r4, r3
 8002fde:	181b      	adds	r3, r3, r0
 8002fe0:	07dd      	lsls	r5, r3, #31
 8002fe2:	085c      	lsrs	r4, r3, #1
 8002fe4:	2307      	movs	r3, #7
 8002fe6:	0849      	lsrs	r1, r1, #1
 8002fe8:	430d      	orrs	r5, r1
 8002fea:	0017      	movs	r7, r2
 8002fec:	402b      	ands	r3, r5
 8002fee:	e710      	b.n	8002e12 <__aeabi_dsub+0x34a>
 8002ff0:	4663      	mov	r3, ip
 8002ff2:	1a1d      	subs	r5, r3, r0
 8002ff4:	45ac      	cmp	ip, r5
 8002ff6:	4192      	sbcs	r2, r2
 8002ff8:	2601      	movs	r6, #1
 8002ffa:	9b02      	ldr	r3, [sp, #8]
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	1b1c      	subs	r4, r3, r4
 8003000:	4688      	mov	r8, r1
 8003002:	1aa4      	subs	r4, r4, r2
 8003004:	400e      	ands	r6, r1
 8003006:	e5c6      	b.n	8002b96 <__aeabi_dsub+0xce>
 8003008:	4663      	mov	r3, ip
 800300a:	18c5      	adds	r5, r0, r3
 800300c:	9b02      	ldr	r3, [sp, #8]
 800300e:	4285      	cmp	r5, r0
 8003010:	4180      	sbcs	r0, r0
 8003012:	469c      	mov	ip, r3
 8003014:	4240      	negs	r0, r0
 8003016:	4464      	add	r4, ip
 8003018:	1824      	adds	r4, r4, r0
 800301a:	2701      	movs	r7, #1
 800301c:	0223      	lsls	r3, r4, #8
 800301e:	d400      	bmi.n	8003022 <__aeabi_dsub+0x55a>
 8003020:	e6f5      	b.n	8002e0e <__aeabi_dsub+0x346>
 8003022:	2702      	movs	r7, #2
 8003024:	e641      	b.n	8002caa <__aeabi_dsub+0x1e2>
 8003026:	4663      	mov	r3, ip
 8003028:	1ac5      	subs	r5, r0, r3
 800302a:	42a8      	cmp	r0, r5
 800302c:	4180      	sbcs	r0, r0
 800302e:	9b02      	ldr	r3, [sp, #8]
 8003030:	4240      	negs	r0, r0
 8003032:	1ae4      	subs	r4, r4, r3
 8003034:	2701      	movs	r7, #1
 8003036:	1a24      	subs	r4, r4, r0
 8003038:	e5a8      	b.n	8002b8c <__aeabi_dsub+0xc4>
 800303a:	9d02      	ldr	r5, [sp, #8]
 800303c:	4652      	mov	r2, sl
 800303e:	002b      	movs	r3, r5
 8003040:	3a20      	subs	r2, #32
 8003042:	40d3      	lsrs	r3, r2
 8003044:	0019      	movs	r1, r3
 8003046:	4653      	mov	r3, sl
 8003048:	2b20      	cmp	r3, #32
 800304a:	d006      	beq.n	800305a <__aeabi_dsub+0x592>
 800304c:	2240      	movs	r2, #64	@ 0x40
 800304e:	1ad2      	subs	r2, r2, r3
 8003050:	002b      	movs	r3, r5
 8003052:	4093      	lsls	r3, r2
 8003054:	4662      	mov	r2, ip
 8003056:	431a      	orrs	r2, r3
 8003058:	4693      	mov	fp, r2
 800305a:	465d      	mov	r5, fp
 800305c:	1e6b      	subs	r3, r5, #1
 800305e:	419d      	sbcs	r5, r3
 8003060:	430d      	orrs	r5, r1
 8003062:	e615      	b.n	8002c90 <__aeabi_dsub+0x1c8>
 8003064:	0762      	lsls	r2, r4, #29
 8003066:	08c0      	lsrs	r0, r0, #3
 8003068:	4302      	orrs	r2, r0
 800306a:	08e4      	lsrs	r4, r4, #3
 800306c:	e70d      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 800306e:	0011      	movs	r1, r2
 8003070:	0027      	movs	r7, r4
 8003072:	3920      	subs	r1, #32
 8003074:	40cf      	lsrs	r7, r1
 8003076:	2a20      	cmp	r2, #32
 8003078:	d005      	beq.n	8003086 <__aeabi_dsub+0x5be>
 800307a:	2140      	movs	r1, #64	@ 0x40
 800307c:	1a8a      	subs	r2, r1, r2
 800307e:	4094      	lsls	r4, r2
 8003080:	0025      	movs	r5, r4
 8003082:	4305      	orrs	r5, r0
 8003084:	9503      	str	r5, [sp, #12]
 8003086:	9d03      	ldr	r5, [sp, #12]
 8003088:	1e6a      	subs	r2, r5, #1
 800308a:	4195      	sbcs	r5, r2
 800308c:	433d      	orrs	r5, r7
 800308e:	e77d      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 8003090:	2a00      	cmp	r2, #0
 8003092:	d100      	bne.n	8003096 <__aeabi_dsub+0x5ce>
 8003094:	e744      	b.n	8002f20 <__aeabi_dsub+0x458>
 8003096:	2601      	movs	r6, #1
 8003098:	400e      	ands	r6, r1
 800309a:	4663      	mov	r3, ip
 800309c:	08d9      	lsrs	r1, r3, #3
 800309e:	9b02      	ldr	r3, [sp, #8]
 80030a0:	075a      	lsls	r2, r3, #29
 80030a2:	430a      	orrs	r2, r1
 80030a4:	08dc      	lsrs	r4, r3, #3
 80030a6:	e6f0      	b.n	8002e8a <__aeabi_dsub+0x3c2>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d028      	beq.n	80030fe <__aeabi_dsub+0x636>
 80030ac:	4662      	mov	r2, ip
 80030ae:	9f02      	ldr	r7, [sp, #8]
 80030b0:	08c0      	lsrs	r0, r0, #3
 80030b2:	433a      	orrs	r2, r7
 80030b4:	d100      	bne.n	80030b8 <__aeabi_dsub+0x5f0>
 80030b6:	e6dc      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 80030b8:	0762      	lsls	r2, r4, #29
 80030ba:	4310      	orrs	r0, r2
 80030bc:	2280      	movs	r2, #128	@ 0x80
 80030be:	08e4      	lsrs	r4, r4, #3
 80030c0:	0312      	lsls	r2, r2, #12
 80030c2:	4214      	tst	r4, r2
 80030c4:	d009      	beq.n	80030da <__aeabi_dsub+0x612>
 80030c6:	08fd      	lsrs	r5, r7, #3
 80030c8:	4215      	tst	r5, r2
 80030ca:	d106      	bne.n	80030da <__aeabi_dsub+0x612>
 80030cc:	4663      	mov	r3, ip
 80030ce:	2601      	movs	r6, #1
 80030d0:	002c      	movs	r4, r5
 80030d2:	08d8      	lsrs	r0, r3, #3
 80030d4:	077b      	lsls	r3, r7, #29
 80030d6:	4318      	orrs	r0, r3
 80030d8:	400e      	ands	r6, r1
 80030da:	0f42      	lsrs	r2, r0, #29
 80030dc:	00c0      	lsls	r0, r0, #3
 80030de:	08c0      	lsrs	r0, r0, #3
 80030e0:	0752      	lsls	r2, r2, #29
 80030e2:	4302      	orrs	r2, r0
 80030e4:	e601      	b.n	8002cea <__aeabi_dsub+0x222>
 80030e6:	4663      	mov	r3, ip
 80030e8:	1a1d      	subs	r5, r3, r0
 80030ea:	45ac      	cmp	ip, r5
 80030ec:	4192      	sbcs	r2, r2
 80030ee:	9b02      	ldr	r3, [sp, #8]
 80030f0:	4252      	negs	r2, r2
 80030f2:	1b1c      	subs	r4, r3, r4
 80030f4:	000e      	movs	r6, r1
 80030f6:	4688      	mov	r8, r1
 80030f8:	2701      	movs	r7, #1
 80030fa:	1aa4      	subs	r4, r4, r2
 80030fc:	e546      	b.n	8002b8c <__aeabi_dsub+0xc4>
 80030fe:	4663      	mov	r3, ip
 8003100:	08d9      	lsrs	r1, r3, #3
 8003102:	9b02      	ldr	r3, [sp, #8]
 8003104:	075a      	lsls	r2, r3, #29
 8003106:	430a      	orrs	r2, r1
 8003108:	08dc      	lsrs	r4, r3, #3
 800310a:	e5ee      	b.n	8002cea <__aeabi_dsub+0x222>
 800310c:	4663      	mov	r3, ip
 800310e:	9c02      	ldr	r4, [sp, #8]
 8003110:	9303      	str	r3, [sp, #12]
 8003112:	e6c7      	b.n	8002ea4 <__aeabi_dsub+0x3dc>
 8003114:	08c0      	lsrs	r0, r0, #3
 8003116:	2a00      	cmp	r2, #0
 8003118:	d100      	bne.n	800311c <__aeabi_dsub+0x654>
 800311a:	e6aa      	b.n	8002e72 <__aeabi_dsub+0x3aa>
 800311c:	0762      	lsls	r2, r4, #29
 800311e:	4310      	orrs	r0, r2
 8003120:	2280      	movs	r2, #128	@ 0x80
 8003122:	08e4      	lsrs	r4, r4, #3
 8003124:	0312      	lsls	r2, r2, #12
 8003126:	4214      	tst	r4, r2
 8003128:	d0d7      	beq.n	80030da <__aeabi_dsub+0x612>
 800312a:	9f02      	ldr	r7, [sp, #8]
 800312c:	08fd      	lsrs	r5, r7, #3
 800312e:	4215      	tst	r5, r2
 8003130:	d1d3      	bne.n	80030da <__aeabi_dsub+0x612>
 8003132:	4663      	mov	r3, ip
 8003134:	2601      	movs	r6, #1
 8003136:	08d8      	lsrs	r0, r3, #3
 8003138:	077b      	lsls	r3, r7, #29
 800313a:	002c      	movs	r4, r5
 800313c:	4318      	orrs	r0, r3
 800313e:	400e      	ands	r6, r1
 8003140:	e7cb      	b.n	80030da <__aeabi_dsub+0x612>
 8003142:	000a      	movs	r2, r1
 8003144:	0027      	movs	r7, r4
 8003146:	3a20      	subs	r2, #32
 8003148:	40d7      	lsrs	r7, r2
 800314a:	2920      	cmp	r1, #32
 800314c:	d005      	beq.n	800315a <__aeabi_dsub+0x692>
 800314e:	2240      	movs	r2, #64	@ 0x40
 8003150:	1a52      	subs	r2, r2, r1
 8003152:	4094      	lsls	r4, r2
 8003154:	0025      	movs	r5, r4
 8003156:	4305      	orrs	r5, r0
 8003158:	9503      	str	r5, [sp, #12]
 800315a:	9d03      	ldr	r5, [sp, #12]
 800315c:	1e6a      	subs	r2, r5, #1
 800315e:	4195      	sbcs	r5, r2
 8003160:	432f      	orrs	r7, r5
 8003162:	e610      	b.n	8002d86 <__aeabi_dsub+0x2be>
 8003164:	0014      	movs	r4, r2
 8003166:	2500      	movs	r5, #0
 8003168:	2200      	movs	r2, #0
 800316a:	e556      	b.n	8002c1a <__aeabi_dsub+0x152>
 800316c:	9b02      	ldr	r3, [sp, #8]
 800316e:	4460      	add	r0, ip
 8003170:	4699      	mov	r9, r3
 8003172:	4560      	cmp	r0, ip
 8003174:	4192      	sbcs	r2, r2
 8003176:	444c      	add	r4, r9
 8003178:	4252      	negs	r2, r2
 800317a:	0005      	movs	r5, r0
 800317c:	18a4      	adds	r4, r4, r2
 800317e:	e74c      	b.n	800301a <__aeabi_dsub+0x552>
 8003180:	001a      	movs	r2, r3
 8003182:	001c      	movs	r4, r3
 8003184:	432a      	orrs	r2, r5
 8003186:	d000      	beq.n	800318a <__aeabi_dsub+0x6c2>
 8003188:	e6b3      	b.n	8002ef2 <__aeabi_dsub+0x42a>
 800318a:	e6c9      	b.n	8002f20 <__aeabi_dsub+0x458>
 800318c:	2480      	movs	r4, #128	@ 0x80
 800318e:	2600      	movs	r6, #0
 8003190:	0324      	lsls	r4, r4, #12
 8003192:	e5ae      	b.n	8002cf2 <__aeabi_dsub+0x22a>
 8003194:	2120      	movs	r1, #32
 8003196:	2500      	movs	r5, #0
 8003198:	1a09      	subs	r1, r1, r0
 800319a:	e517      	b.n	8002bcc <__aeabi_dsub+0x104>
 800319c:	2200      	movs	r2, #0
 800319e:	2500      	movs	r5, #0
 80031a0:	4c0b      	ldr	r4, [pc, #44]	@ (80031d0 <__aeabi_dsub+0x708>)
 80031a2:	e53a      	b.n	8002c1a <__aeabi_dsub+0x152>
 80031a4:	2d00      	cmp	r5, #0
 80031a6:	d100      	bne.n	80031aa <__aeabi_dsub+0x6e2>
 80031a8:	e5f6      	b.n	8002d98 <__aeabi_dsub+0x2d0>
 80031aa:	464b      	mov	r3, r9
 80031ac:	1bda      	subs	r2, r3, r7
 80031ae:	4692      	mov	sl, r2
 80031b0:	2f00      	cmp	r7, #0
 80031b2:	d100      	bne.n	80031b6 <__aeabi_dsub+0x6ee>
 80031b4:	e66f      	b.n	8002e96 <__aeabi_dsub+0x3ce>
 80031b6:	2a38      	cmp	r2, #56	@ 0x38
 80031b8:	dc05      	bgt.n	80031c6 <__aeabi_dsub+0x6fe>
 80031ba:	2680      	movs	r6, #128	@ 0x80
 80031bc:	0436      	lsls	r6, r6, #16
 80031be:	4334      	orrs	r4, r6
 80031c0:	4688      	mov	r8, r1
 80031c2:	000e      	movs	r6, r1
 80031c4:	e6d1      	b.n	8002f6a <__aeabi_dsub+0x4a2>
 80031c6:	4688      	mov	r8, r1
 80031c8:	000e      	movs	r6, r1
 80031ca:	2501      	movs	r5, #1
 80031cc:	e6de      	b.n	8002f8c <__aeabi_dsub+0x4c4>
 80031ce:	46c0      	nop			@ (mov r8, r8)
 80031d0:	000007ff 	.word	0x000007ff
 80031d4:	ff7fffff 	.word	0xff7fffff
 80031d8:	000007fe 	.word	0x000007fe
 80031dc:	2d00      	cmp	r5, #0
 80031de:	d100      	bne.n	80031e2 <__aeabi_dsub+0x71a>
 80031e0:	e668      	b.n	8002eb4 <__aeabi_dsub+0x3ec>
 80031e2:	464b      	mov	r3, r9
 80031e4:	1bd9      	subs	r1, r3, r7
 80031e6:	2f00      	cmp	r7, #0
 80031e8:	d101      	bne.n	80031ee <__aeabi_dsub+0x726>
 80031ea:	468a      	mov	sl, r1
 80031ec:	e5a7      	b.n	8002d3e <__aeabi_dsub+0x276>
 80031ee:	2701      	movs	r7, #1
 80031f0:	2938      	cmp	r1, #56	@ 0x38
 80031f2:	dd00      	ble.n	80031f6 <__aeabi_dsub+0x72e>
 80031f4:	e5c7      	b.n	8002d86 <__aeabi_dsub+0x2be>
 80031f6:	2280      	movs	r2, #128	@ 0x80
 80031f8:	0412      	lsls	r2, r2, #16
 80031fa:	4314      	orrs	r4, r2
 80031fc:	e5af      	b.n	8002d5e <__aeabi_dsub+0x296>
 80031fe:	46c0      	nop			@ (mov r8, r8)

08003200 <__aeabi_dcmpun>:
 8003200:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003202:	46c6      	mov	lr, r8
 8003204:	031e      	lsls	r6, r3, #12
 8003206:	0b36      	lsrs	r6, r6, #12
 8003208:	46b0      	mov	r8, r6
 800320a:	4e0d      	ldr	r6, [pc, #52]	@ (8003240 <__aeabi_dcmpun+0x40>)
 800320c:	030c      	lsls	r4, r1, #12
 800320e:	004d      	lsls	r5, r1, #1
 8003210:	005f      	lsls	r7, r3, #1
 8003212:	b500      	push	{lr}
 8003214:	0b24      	lsrs	r4, r4, #12
 8003216:	0d6d      	lsrs	r5, r5, #21
 8003218:	0d7f      	lsrs	r7, r7, #21
 800321a:	42b5      	cmp	r5, r6
 800321c:	d00b      	beq.n	8003236 <__aeabi_dcmpun+0x36>
 800321e:	4908      	ldr	r1, [pc, #32]	@ (8003240 <__aeabi_dcmpun+0x40>)
 8003220:	2000      	movs	r0, #0
 8003222:	428f      	cmp	r7, r1
 8003224:	d104      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 8003226:	4646      	mov	r6, r8
 8003228:	4316      	orrs	r6, r2
 800322a:	0030      	movs	r0, r6
 800322c:	1e43      	subs	r3, r0, #1
 800322e:	4198      	sbcs	r0, r3
 8003230:	bc80      	pop	{r7}
 8003232:	46b8      	mov	r8, r7
 8003234:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003236:	4304      	orrs	r4, r0
 8003238:	2001      	movs	r0, #1
 800323a:	2c00      	cmp	r4, #0
 800323c:	d1f8      	bne.n	8003230 <__aeabi_dcmpun+0x30>
 800323e:	e7ee      	b.n	800321e <__aeabi_dcmpun+0x1e>
 8003240:	000007ff 	.word	0x000007ff

08003244 <__aeabi_d2iz>:
 8003244:	000b      	movs	r3, r1
 8003246:	0002      	movs	r2, r0
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	4d16      	ldr	r5, [pc, #88]	@ (80032a4 <__aeabi_d2iz+0x60>)
 800324c:	030c      	lsls	r4, r1, #12
 800324e:	b082      	sub	sp, #8
 8003250:	0049      	lsls	r1, r1, #1
 8003252:	2000      	movs	r0, #0
 8003254:	9200      	str	r2, [sp, #0]
 8003256:	9301      	str	r3, [sp, #4]
 8003258:	0b24      	lsrs	r4, r4, #12
 800325a:	0d49      	lsrs	r1, r1, #21
 800325c:	0fde      	lsrs	r6, r3, #31
 800325e:	42a9      	cmp	r1, r5
 8003260:	dd04      	ble.n	800326c <__aeabi_d2iz+0x28>
 8003262:	4811      	ldr	r0, [pc, #68]	@ (80032a8 <__aeabi_d2iz+0x64>)
 8003264:	4281      	cmp	r1, r0
 8003266:	dd03      	ble.n	8003270 <__aeabi_d2iz+0x2c>
 8003268:	4b10      	ldr	r3, [pc, #64]	@ (80032ac <__aeabi_d2iz+0x68>)
 800326a:	18f0      	adds	r0, r6, r3
 800326c:	b002      	add	sp, #8
 800326e:	bd70      	pop	{r4, r5, r6, pc}
 8003270:	2080      	movs	r0, #128	@ 0x80
 8003272:	0340      	lsls	r0, r0, #13
 8003274:	4320      	orrs	r0, r4
 8003276:	4c0e      	ldr	r4, [pc, #56]	@ (80032b0 <__aeabi_d2iz+0x6c>)
 8003278:	1a64      	subs	r4, r4, r1
 800327a:	2c1f      	cmp	r4, #31
 800327c:	dd08      	ble.n	8003290 <__aeabi_d2iz+0x4c>
 800327e:	4b0d      	ldr	r3, [pc, #52]	@ (80032b4 <__aeabi_d2iz+0x70>)
 8003280:	1a5b      	subs	r3, r3, r1
 8003282:	40d8      	lsrs	r0, r3
 8003284:	0003      	movs	r3, r0
 8003286:	4258      	negs	r0, r3
 8003288:	2e00      	cmp	r6, #0
 800328a:	d1ef      	bne.n	800326c <__aeabi_d2iz+0x28>
 800328c:	0018      	movs	r0, r3
 800328e:	e7ed      	b.n	800326c <__aeabi_d2iz+0x28>
 8003290:	4b09      	ldr	r3, [pc, #36]	@ (80032b8 <__aeabi_d2iz+0x74>)
 8003292:	9a00      	ldr	r2, [sp, #0]
 8003294:	469c      	mov	ip, r3
 8003296:	0003      	movs	r3, r0
 8003298:	4461      	add	r1, ip
 800329a:	408b      	lsls	r3, r1
 800329c:	40e2      	lsrs	r2, r4
 800329e:	4313      	orrs	r3, r2
 80032a0:	e7f1      	b.n	8003286 <__aeabi_d2iz+0x42>
 80032a2:	46c0      	nop			@ (mov r8, r8)
 80032a4:	000003fe 	.word	0x000003fe
 80032a8:	0000041d 	.word	0x0000041d
 80032ac:	7fffffff 	.word	0x7fffffff
 80032b0:	00000433 	.word	0x00000433
 80032b4:	00000413 	.word	0x00000413
 80032b8:	fffffbed 	.word	0xfffffbed

080032bc <__aeabi_i2d>:
 80032bc:	b570      	push	{r4, r5, r6, lr}
 80032be:	2800      	cmp	r0, #0
 80032c0:	d016      	beq.n	80032f0 <__aeabi_i2d+0x34>
 80032c2:	17c3      	asrs	r3, r0, #31
 80032c4:	18c5      	adds	r5, r0, r3
 80032c6:	405d      	eors	r5, r3
 80032c8:	0fc4      	lsrs	r4, r0, #31
 80032ca:	0028      	movs	r0, r5
 80032cc:	f000 f914 	bl	80034f8 <__clzsi2>
 80032d0:	4b10      	ldr	r3, [pc, #64]	@ (8003314 <__aeabi_i2d+0x58>)
 80032d2:	1a1b      	subs	r3, r3, r0
 80032d4:	055b      	lsls	r3, r3, #21
 80032d6:	0d5b      	lsrs	r3, r3, #21
 80032d8:	280a      	cmp	r0, #10
 80032da:	dc14      	bgt.n	8003306 <__aeabi_i2d+0x4a>
 80032dc:	0002      	movs	r2, r0
 80032de:	002e      	movs	r6, r5
 80032e0:	3215      	adds	r2, #21
 80032e2:	4096      	lsls	r6, r2
 80032e4:	220b      	movs	r2, #11
 80032e6:	1a12      	subs	r2, r2, r0
 80032e8:	40d5      	lsrs	r5, r2
 80032ea:	032d      	lsls	r5, r5, #12
 80032ec:	0b2d      	lsrs	r5, r5, #12
 80032ee:	e003      	b.n	80032f8 <__aeabi_i2d+0x3c>
 80032f0:	2400      	movs	r4, #0
 80032f2:	2300      	movs	r3, #0
 80032f4:	2500      	movs	r5, #0
 80032f6:	2600      	movs	r6, #0
 80032f8:	051b      	lsls	r3, r3, #20
 80032fa:	432b      	orrs	r3, r5
 80032fc:	07e4      	lsls	r4, r4, #31
 80032fe:	4323      	orrs	r3, r4
 8003300:	0030      	movs	r0, r6
 8003302:	0019      	movs	r1, r3
 8003304:	bd70      	pop	{r4, r5, r6, pc}
 8003306:	380b      	subs	r0, #11
 8003308:	4085      	lsls	r5, r0
 800330a:	032d      	lsls	r5, r5, #12
 800330c:	2600      	movs	r6, #0
 800330e:	0b2d      	lsrs	r5, r5, #12
 8003310:	e7f2      	b.n	80032f8 <__aeabi_i2d+0x3c>
 8003312:	46c0      	nop			@ (mov r8, r8)
 8003314:	0000041e 	.word	0x0000041e

08003318 <__aeabi_ui2d>:
 8003318:	b510      	push	{r4, lr}
 800331a:	1e04      	subs	r4, r0, #0
 800331c:	d010      	beq.n	8003340 <__aeabi_ui2d+0x28>
 800331e:	f000 f8eb 	bl	80034f8 <__clzsi2>
 8003322:	4b0e      	ldr	r3, [pc, #56]	@ (800335c <__aeabi_ui2d+0x44>)
 8003324:	1a1b      	subs	r3, r3, r0
 8003326:	055b      	lsls	r3, r3, #21
 8003328:	0d5b      	lsrs	r3, r3, #21
 800332a:	280a      	cmp	r0, #10
 800332c:	dc0f      	bgt.n	800334e <__aeabi_ui2d+0x36>
 800332e:	220b      	movs	r2, #11
 8003330:	0021      	movs	r1, r4
 8003332:	1a12      	subs	r2, r2, r0
 8003334:	40d1      	lsrs	r1, r2
 8003336:	3015      	adds	r0, #21
 8003338:	030a      	lsls	r2, r1, #12
 800333a:	4084      	lsls	r4, r0
 800333c:	0b12      	lsrs	r2, r2, #12
 800333e:	e001      	b.n	8003344 <__aeabi_ui2d+0x2c>
 8003340:	2300      	movs	r3, #0
 8003342:	2200      	movs	r2, #0
 8003344:	051b      	lsls	r3, r3, #20
 8003346:	4313      	orrs	r3, r2
 8003348:	0020      	movs	r0, r4
 800334a:	0019      	movs	r1, r3
 800334c:	bd10      	pop	{r4, pc}
 800334e:	0022      	movs	r2, r4
 8003350:	380b      	subs	r0, #11
 8003352:	4082      	lsls	r2, r0
 8003354:	0312      	lsls	r2, r2, #12
 8003356:	2400      	movs	r4, #0
 8003358:	0b12      	lsrs	r2, r2, #12
 800335a:	e7f3      	b.n	8003344 <__aeabi_ui2d+0x2c>
 800335c:	0000041e 	.word	0x0000041e

08003360 <__aeabi_f2d>:
 8003360:	b570      	push	{r4, r5, r6, lr}
 8003362:	0242      	lsls	r2, r0, #9
 8003364:	0043      	lsls	r3, r0, #1
 8003366:	0fc4      	lsrs	r4, r0, #31
 8003368:	20fe      	movs	r0, #254	@ 0xfe
 800336a:	0e1b      	lsrs	r3, r3, #24
 800336c:	1c59      	adds	r1, r3, #1
 800336e:	0a55      	lsrs	r5, r2, #9
 8003370:	4208      	tst	r0, r1
 8003372:	d00c      	beq.n	800338e <__aeabi_f2d+0x2e>
 8003374:	21e0      	movs	r1, #224	@ 0xe0
 8003376:	0089      	lsls	r1, r1, #2
 8003378:	468c      	mov	ip, r1
 800337a:	076d      	lsls	r5, r5, #29
 800337c:	0b12      	lsrs	r2, r2, #12
 800337e:	4463      	add	r3, ip
 8003380:	051b      	lsls	r3, r3, #20
 8003382:	4313      	orrs	r3, r2
 8003384:	07e4      	lsls	r4, r4, #31
 8003386:	4323      	orrs	r3, r4
 8003388:	0028      	movs	r0, r5
 800338a:	0019      	movs	r1, r3
 800338c:	bd70      	pop	{r4, r5, r6, pc}
 800338e:	2b00      	cmp	r3, #0
 8003390:	d114      	bne.n	80033bc <__aeabi_f2d+0x5c>
 8003392:	2d00      	cmp	r5, #0
 8003394:	d01b      	beq.n	80033ce <__aeabi_f2d+0x6e>
 8003396:	0028      	movs	r0, r5
 8003398:	f000 f8ae 	bl	80034f8 <__clzsi2>
 800339c:	280a      	cmp	r0, #10
 800339e:	dc1c      	bgt.n	80033da <__aeabi_f2d+0x7a>
 80033a0:	230b      	movs	r3, #11
 80033a2:	002a      	movs	r2, r5
 80033a4:	1a1b      	subs	r3, r3, r0
 80033a6:	40da      	lsrs	r2, r3
 80033a8:	0003      	movs	r3, r0
 80033aa:	3315      	adds	r3, #21
 80033ac:	409d      	lsls	r5, r3
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_f2d+0x88>)
 80033b0:	0312      	lsls	r2, r2, #12
 80033b2:	1a1b      	subs	r3, r3, r0
 80033b4:	055b      	lsls	r3, r3, #21
 80033b6:	0b12      	lsrs	r2, r2, #12
 80033b8:	0d5b      	lsrs	r3, r3, #21
 80033ba:	e7e1      	b.n	8003380 <__aeabi_f2d+0x20>
 80033bc:	2d00      	cmp	r5, #0
 80033be:	d009      	beq.n	80033d4 <__aeabi_f2d+0x74>
 80033c0:	0b13      	lsrs	r3, r2, #12
 80033c2:	2280      	movs	r2, #128	@ 0x80
 80033c4:	0312      	lsls	r2, r2, #12
 80033c6:	431a      	orrs	r2, r3
 80033c8:	076d      	lsls	r5, r5, #29
 80033ca:	4b08      	ldr	r3, [pc, #32]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033cc:	e7d8      	b.n	8003380 <__aeabi_f2d+0x20>
 80033ce:	2300      	movs	r3, #0
 80033d0:	2200      	movs	r2, #0
 80033d2:	e7d5      	b.n	8003380 <__aeabi_f2d+0x20>
 80033d4:	2200      	movs	r2, #0
 80033d6:	4b05      	ldr	r3, [pc, #20]	@ (80033ec <__aeabi_f2d+0x8c>)
 80033d8:	e7d2      	b.n	8003380 <__aeabi_f2d+0x20>
 80033da:	0003      	movs	r3, r0
 80033dc:	002a      	movs	r2, r5
 80033de:	3b0b      	subs	r3, #11
 80033e0:	409a      	lsls	r2, r3
 80033e2:	2500      	movs	r5, #0
 80033e4:	e7e3      	b.n	80033ae <__aeabi_f2d+0x4e>
 80033e6:	46c0      	nop			@ (mov r8, r8)
 80033e8:	00000389 	.word	0x00000389
 80033ec:	000007ff 	.word	0x000007ff

080033f0 <__aeabi_d2f>:
 80033f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033f2:	004b      	lsls	r3, r1, #1
 80033f4:	030f      	lsls	r7, r1, #12
 80033f6:	0d5b      	lsrs	r3, r3, #21
 80033f8:	4c3b      	ldr	r4, [pc, #236]	@ (80034e8 <__aeabi_d2f+0xf8>)
 80033fa:	0f45      	lsrs	r5, r0, #29
 80033fc:	b083      	sub	sp, #12
 80033fe:	0a7f      	lsrs	r7, r7, #9
 8003400:	1c5e      	adds	r6, r3, #1
 8003402:	432f      	orrs	r7, r5
 8003404:	9000      	str	r0, [sp, #0]
 8003406:	9101      	str	r1, [sp, #4]
 8003408:	0fca      	lsrs	r2, r1, #31
 800340a:	00c5      	lsls	r5, r0, #3
 800340c:	4226      	tst	r6, r4
 800340e:	d00b      	beq.n	8003428 <__aeabi_d2f+0x38>
 8003410:	4936      	ldr	r1, [pc, #216]	@ (80034ec <__aeabi_d2f+0xfc>)
 8003412:	185c      	adds	r4, r3, r1
 8003414:	2cfe      	cmp	r4, #254	@ 0xfe
 8003416:	dd13      	ble.n	8003440 <__aeabi_d2f+0x50>
 8003418:	20ff      	movs	r0, #255	@ 0xff
 800341a:	2300      	movs	r3, #0
 800341c:	05c0      	lsls	r0, r0, #23
 800341e:	4318      	orrs	r0, r3
 8003420:	07d2      	lsls	r2, r2, #31
 8003422:	4310      	orrs	r0, r2
 8003424:	b003      	add	sp, #12
 8003426:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003428:	2b00      	cmp	r3, #0
 800342a:	d102      	bne.n	8003432 <__aeabi_d2f+0x42>
 800342c:	2000      	movs	r0, #0
 800342e:	2300      	movs	r3, #0
 8003430:	e7f4      	b.n	800341c <__aeabi_d2f+0x2c>
 8003432:	433d      	orrs	r5, r7
 8003434:	d0f0      	beq.n	8003418 <__aeabi_d2f+0x28>
 8003436:	2380      	movs	r3, #128	@ 0x80
 8003438:	03db      	lsls	r3, r3, #15
 800343a:	20ff      	movs	r0, #255	@ 0xff
 800343c:	433b      	orrs	r3, r7
 800343e:	e7ed      	b.n	800341c <__aeabi_d2f+0x2c>
 8003440:	2c00      	cmp	r4, #0
 8003442:	dd14      	ble.n	800346e <__aeabi_d2f+0x7e>
 8003444:	9b00      	ldr	r3, [sp, #0]
 8003446:	00ff      	lsls	r7, r7, #3
 8003448:	019b      	lsls	r3, r3, #6
 800344a:	1e58      	subs	r0, r3, #1
 800344c:	4183      	sbcs	r3, r0
 800344e:	0f69      	lsrs	r1, r5, #29
 8003450:	433b      	orrs	r3, r7
 8003452:	430b      	orrs	r3, r1
 8003454:	0759      	lsls	r1, r3, #29
 8003456:	d041      	beq.n	80034dc <__aeabi_d2f+0xec>
 8003458:	210f      	movs	r1, #15
 800345a:	4019      	ands	r1, r3
 800345c:	2904      	cmp	r1, #4
 800345e:	d028      	beq.n	80034b2 <__aeabi_d2f+0xc2>
 8003460:	3304      	adds	r3, #4
 8003462:	0159      	lsls	r1, r3, #5
 8003464:	d525      	bpl.n	80034b2 <__aeabi_d2f+0xc2>
 8003466:	3401      	adds	r4, #1
 8003468:	2300      	movs	r3, #0
 800346a:	b2e0      	uxtb	r0, r4
 800346c:	e7d6      	b.n	800341c <__aeabi_d2f+0x2c>
 800346e:	0021      	movs	r1, r4
 8003470:	3117      	adds	r1, #23
 8003472:	dbdb      	blt.n	800342c <__aeabi_d2f+0x3c>
 8003474:	2180      	movs	r1, #128	@ 0x80
 8003476:	201e      	movs	r0, #30
 8003478:	0409      	lsls	r1, r1, #16
 800347a:	4339      	orrs	r1, r7
 800347c:	1b00      	subs	r0, r0, r4
 800347e:	281f      	cmp	r0, #31
 8003480:	dd1b      	ble.n	80034ba <__aeabi_d2f+0xca>
 8003482:	2602      	movs	r6, #2
 8003484:	4276      	negs	r6, r6
 8003486:	1b34      	subs	r4, r6, r4
 8003488:	000e      	movs	r6, r1
 800348a:	40e6      	lsrs	r6, r4
 800348c:	0034      	movs	r4, r6
 800348e:	2820      	cmp	r0, #32
 8003490:	d004      	beq.n	800349c <__aeabi_d2f+0xac>
 8003492:	4817      	ldr	r0, [pc, #92]	@ (80034f0 <__aeabi_d2f+0x100>)
 8003494:	4684      	mov	ip, r0
 8003496:	4463      	add	r3, ip
 8003498:	4099      	lsls	r1, r3
 800349a:	430d      	orrs	r5, r1
 800349c:	002b      	movs	r3, r5
 800349e:	1e59      	subs	r1, r3, #1
 80034a0:	418b      	sbcs	r3, r1
 80034a2:	4323      	orrs	r3, r4
 80034a4:	0759      	lsls	r1, r3, #29
 80034a6:	d015      	beq.n	80034d4 <__aeabi_d2f+0xe4>
 80034a8:	210f      	movs	r1, #15
 80034aa:	2400      	movs	r4, #0
 80034ac:	4019      	ands	r1, r3
 80034ae:	2904      	cmp	r1, #4
 80034b0:	d117      	bne.n	80034e2 <__aeabi_d2f+0xf2>
 80034b2:	019b      	lsls	r3, r3, #6
 80034b4:	0a5b      	lsrs	r3, r3, #9
 80034b6:	b2e0      	uxtb	r0, r4
 80034b8:	e7b0      	b.n	800341c <__aeabi_d2f+0x2c>
 80034ba:	4c0e      	ldr	r4, [pc, #56]	@ (80034f4 <__aeabi_d2f+0x104>)
 80034bc:	191c      	adds	r4, r3, r4
 80034be:	002b      	movs	r3, r5
 80034c0:	40a5      	lsls	r5, r4
 80034c2:	40c3      	lsrs	r3, r0
 80034c4:	40a1      	lsls	r1, r4
 80034c6:	1e68      	subs	r0, r5, #1
 80034c8:	4185      	sbcs	r5, r0
 80034ca:	4329      	orrs	r1, r5
 80034cc:	430b      	orrs	r3, r1
 80034ce:	2400      	movs	r4, #0
 80034d0:	0759      	lsls	r1, r3, #29
 80034d2:	d1c1      	bne.n	8003458 <__aeabi_d2f+0x68>
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	2000      	movs	r0, #0
 80034d8:	0a5b      	lsrs	r3, r3, #9
 80034da:	e79f      	b.n	800341c <__aeabi_d2f+0x2c>
 80034dc:	08db      	lsrs	r3, r3, #3
 80034de:	b2e0      	uxtb	r0, r4
 80034e0:	e79c      	b.n	800341c <__aeabi_d2f+0x2c>
 80034e2:	3304      	adds	r3, #4
 80034e4:	e7e5      	b.n	80034b2 <__aeabi_d2f+0xc2>
 80034e6:	46c0      	nop			@ (mov r8, r8)
 80034e8:	000007fe 	.word	0x000007fe
 80034ec:	fffffc80 	.word	0xfffffc80
 80034f0:	fffffca2 	.word	0xfffffca2
 80034f4:	fffffc82 	.word	0xfffffc82

080034f8 <__clzsi2>:
 80034f8:	211c      	movs	r1, #28
 80034fa:	2301      	movs	r3, #1
 80034fc:	041b      	lsls	r3, r3, #16
 80034fe:	4298      	cmp	r0, r3
 8003500:	d301      	bcc.n	8003506 <__clzsi2+0xe>
 8003502:	0c00      	lsrs	r0, r0, #16
 8003504:	3910      	subs	r1, #16
 8003506:	0a1b      	lsrs	r3, r3, #8
 8003508:	4298      	cmp	r0, r3
 800350a:	d301      	bcc.n	8003510 <__clzsi2+0x18>
 800350c:	0a00      	lsrs	r0, r0, #8
 800350e:	3908      	subs	r1, #8
 8003510:	091b      	lsrs	r3, r3, #4
 8003512:	4298      	cmp	r0, r3
 8003514:	d301      	bcc.n	800351a <__clzsi2+0x22>
 8003516:	0900      	lsrs	r0, r0, #4
 8003518:	3904      	subs	r1, #4
 800351a:	a202      	add	r2, pc, #8	@ (adr r2, 8003524 <__clzsi2+0x2c>)
 800351c:	5c10      	ldrb	r0, [r2, r0]
 800351e:	1840      	adds	r0, r0, r1
 8003520:	4770      	bx	lr
 8003522:	46c0      	nop			@ (mov r8, r8)
 8003524:	02020304 	.word	0x02020304
 8003528:	01010101 	.word	0x01010101
	...

08003534 <__clzdi2>:
 8003534:	b510      	push	{r4, lr}
 8003536:	2900      	cmp	r1, #0
 8003538:	d103      	bne.n	8003542 <__clzdi2+0xe>
 800353a:	f7ff ffdd 	bl	80034f8 <__clzsi2>
 800353e:	3020      	adds	r0, #32
 8003540:	e002      	b.n	8003548 <__clzdi2+0x14>
 8003542:	0008      	movs	r0, r1
 8003544:	f7ff ffd8 	bl	80034f8 <__clzsi2>
 8003548:	bd10      	pop	{r4, pc}
 800354a:	46c0      	nop			@ (mov r8, r8)

0800354c <setHIDSMeasurement>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setHIDSMeasurement(float temp, float humid){
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 8003556:	4b05      	ldr	r3, [pc, #20]	@ (800356c <setHIDSMeasurement+0x20>)
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 800355c:	4b04      	ldr	r3, [pc, #16]	@ (8003570 <setHIDSMeasurement+0x24>)
 800355e:	683a      	ldr	r2, [r7, #0]
 8003560:	601a      	str	r2, [r3, #0]
}
 8003562:	46c0      	nop			@ (mov r8, r8)
 8003564:	46bd      	mov	sp, r7
 8003566:	b002      	add	sp, #8
 8003568:	bd80      	pop	{r7, pc}
 800356a:	46c0      	nop			@ (mov r8, r8)
 800356c:	2000043c 	.word	0x2000043c
 8003570:	20000440 	.word	0x20000440

08003574 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 800357c:	4b04      	ldr	r3, [pc, #16]	@ (8003590 <ESP_Init+0x1c>)
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003582:	4b04      	ldr	r3, [pc, #16]	@ (8003594 <ESP_Init+0x20>)
 8003584:	2202      	movs	r2, #2
 8003586:	701a      	strb	r2, [r3, #0]
}
 8003588:	46c0      	nop			@ (mov r8, r8)
 800358a:	46bd      	mov	sp, r7
 800358c:	b002      	add	sp, #8
 800358e:	bd80      	pop	{r7, pc}
 8003590:	20000334 	.word	0x20000334
 8003594:	200000f7 	.word	0x200000f7

08003598 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 8003598:	b5b0      	push	{r4, r5, r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
 80035a0:	000a      	movs	r2, r1
 80035a2:	1cbb      	adds	r3, r7, #2
 80035a4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80035a6:	4b0e      	ldr	r3, [pc, #56]	@ (80035e0 <ESP_Send+0x48>)
 80035a8:	6818      	ldr	r0, [r3, #0]
 80035aa:	250f      	movs	r5, #15
 80035ac:	197c      	adds	r4, r7, r5
 80035ae:	1cbb      	adds	r3, r7, #2
 80035b0:	881a      	ldrh	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	0019      	movs	r1, r3
 80035b6:	f009 fd6f 	bl	800d098 <HAL_UART_Transmit_DMA>
 80035ba:	0003      	movs	r3, r0
 80035bc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80035be:	197b      	adds	r3, r7, r5
 80035c0:	781b      	ldrb	r3, [r3, #0]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d007      	beq.n	80035d6 <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 80035c6:	4a07      	ldr	r2, [pc, #28]	@ (80035e4 <ESP_Send+0x4c>)
 80035c8:	4b07      	ldr	r3, [pc, #28]	@ (80035e8 <ESP_Send+0x50>)
 80035ca:	0019      	movs	r1, r3
 80035cc:	2003      	movs	r0, #3
 80035ce:	f004 fab9 	bl	8007b44 <CreateLine>
    return false;
 80035d2:	2300      	movs	r3, #0
 80035d4:	e000      	b.n	80035d8 <ESP_Send+0x40>
  }
  return true;
 80035d6:	2301      	movs	r3, #1
}
 80035d8:	0018      	movs	r0, r3
 80035da:	46bd      	mov	sp, r7
 80035dc:	b004      	add	sp, #16
 80035de:	bdb0      	pop	{r4, r5, r7, pc}
 80035e0:	20000334 	.word	0x20000334
 80035e4:	08011b00 	.word	0x08011b00
 80035e8:	08011b20 	.word	0x08011b20

080035ec <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80035ec:	b5b0      	push	{r4, r5, r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	000a      	movs	r2, r1
 80035f6:	1cfb      	adds	r3, r7, #3
 80035f8:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80035fa:	4b12      	ldr	r3, [pc, #72]	@ (8003644 <ESP_Receive+0x58>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003600:	4b11      	ldr	r3, [pc, #68]	@ (8003648 <ESP_Receive+0x5c>)
 8003602:	6818      	ldr	r0, [r3, #0]
 8003604:	1cfb      	adds	r3, r7, #3
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	b29a      	uxth	r2, r3
 800360a:	250f      	movs	r5, #15
 800360c:	197c      	adds	r4, r7, r5
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	0019      	movs	r1, r3
 8003612:	f009 fdd1 	bl	800d1b8 <HAL_UART_Receive_DMA>
 8003616:	0003      	movs	r3, r0
 8003618:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800361a:	197b      	adds	r3, r7, r5
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 8003622:	4a0a      	ldr	r2, [pc, #40]	@ (800364c <ESP_Receive+0x60>)
 8003624:	4b0a      	ldr	r3, [pc, #40]	@ (8003650 <ESP_Receive+0x64>)
 8003626:	0019      	movs	r1, r3
 8003628:	2003      	movs	r0, #3
 800362a:	f004 fa8b 	bl	8007b44 <CreateLine>
    RxComplete = true;
 800362e:	4b05      	ldr	r3, [pc, #20]	@ (8003644 <ESP_Receive+0x58>)
 8003630:	2201      	movs	r2, #1
 8003632:	701a      	strb	r2, [r3, #0]
    return false;
 8003634:	2300      	movs	r3, #0
 8003636:	e000      	b.n	800363a <ESP_Receive+0x4e>
  }
  return true;
 8003638:	2301      	movs	r3, #1
}
 800363a:	0018      	movs	r0, r3
 800363c:	46bd      	mov	sp, r7
 800363e:	b004      	add	sp, #16
 8003640:	bdb0      	pop	{r4, r5, r7, pc}
 8003642:	46c0      	nop			@ (mov r8, r8)
 8003644:	20000338 	.word	0x20000338
 8003648:	20000334 	.word	0x20000334
 800364c:	08011b24 	.word	0x08011b24
 8003650:	08011b20 	.word	0x08011b20

08003654 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800365c:	4b08      	ldr	r3, [pc, #32]	@ (8003680 <HAL_UART_RxCpltCallback+0x2c>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	429a      	cmp	r2, r3
 8003664:	d108      	bne.n	8003678 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 8003666:	4b07      	ldr	r3, [pc, #28]	@ (8003684 <HAL_UART_RxCpltCallback+0x30>)
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 800366c:	4a06      	ldr	r2, [pc, #24]	@ (8003688 <HAL_UART_RxCpltCallback+0x34>)
 800366e:	4b07      	ldr	r3, [pc, #28]	@ (800368c <HAL_UART_RxCpltCallback+0x38>)
 8003670:	0019      	movs	r1, r3
 8003672:	2003      	movs	r0, #3
 8003674:	f004 fa66 	bl	8007b44 <CreateLine>
  }
}
 8003678:	46c0      	nop			@ (mov r8, r8)
 800367a:	46bd      	mov	sp, r7
 800367c:	b002      	add	sp, #8
 800367e:	bd80      	pop	{r7, pc}
 8003680:	20000334 	.word	0x20000334
 8003684:	20000338 	.word	0x20000338
 8003688:	08011b44 	.word	0x08011b44
 800368c:	08011b20 	.word	0x08011b20

08003690 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003690:	b580      	push	{r7, lr}
 8003692:	b082      	sub	sp, #8
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003698:	4b05      	ldr	r3, [pc, #20]	@ (80036b0 <HAL_UART_ErrorCallback+0x20>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	429a      	cmp	r2, r3
 80036a0:	d102      	bne.n	80036a8 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 80036a2:	4b04      	ldr	r3, [pc, #16]	@ (80036b4 <HAL_UART_ErrorCallback+0x24>)
 80036a4:	2207      	movs	r2, #7
 80036a6:	701a      	strb	r2, [r3, #0]
  }
}
 80036a8:	46c0      	nop			@ (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b002      	add	sp, #8
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	20000334 	.word	0x20000334
 80036b4:	200000f7 	.word	0x200000f7

080036b8 <CreateMessage>:
uint16_t CreateMessage(){
 80036b8:	b590      	push	{r4, r7, lr}
 80036ba:	b085      	sub	sp, #20
 80036bc:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 80036be:	1dbb      	adds	r3, r7, #6
 80036c0:	2200      	movs	r2, #0
 80036c2:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID1, Temperature);
 80036c4:	4b38      	ldr	r3, [pc, #224]	@ (80037a8 <CreateMessage+0xf0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	1c18      	adds	r0, r3, #0
 80036ca:	f7ff fe49 	bl	8003360 <__aeabi_f2d>
 80036ce:	0002      	movs	r2, r0
 80036d0:	000b      	movs	r3, r1
 80036d2:	4c36      	ldr	r4, [pc, #216]	@ (80037ac <CreateMessage+0xf4>)
 80036d4:	4936      	ldr	r1, [pc, #216]	@ (80037b0 <CreateMessage+0xf8>)
 80036d6:	4837      	ldr	r0, [pc, #220]	@ (80037b4 <CreateMessage+0xfc>)
 80036d8:	9200      	str	r2, [sp, #0]
 80036da:	9301      	str	r3, [sp, #4]
 80036dc:	0022      	movs	r2, r4
 80036de:	f00b fde9 	bl	800f2b4 <siprintf>
  messageLength += strlen(messagePart1);
 80036e2:	4b34      	ldr	r3, [pc, #208]	@ (80037b4 <CreateMessage+0xfc>)
 80036e4:	0018      	movs	r0, r3
 80036e6:	f7fc fd0f 	bl	8000108 <strlen>
 80036ea:	0003      	movs	r3, r0
 80036ec:	b299      	uxth	r1, r3
 80036ee:	1dbb      	adds	r3, r7, #6
 80036f0:	1dba      	adds	r2, r7, #6
 80036f2:	8812      	ldrh	r2, [r2, #0]
 80036f4:	188a      	adds	r2, r1, r2
 80036f6:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID2, Humidity);
 80036f8:	4b2f      	ldr	r3, [pc, #188]	@ (80037b8 <CreateMessage+0x100>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	1c18      	adds	r0, r3, #0
 80036fe:	f7ff fe2f 	bl	8003360 <__aeabi_f2d>
 8003702:	0002      	movs	r2, r0
 8003704:	000b      	movs	r3, r1
 8003706:	4c2d      	ldr	r4, [pc, #180]	@ (80037bc <CreateMessage+0x104>)
 8003708:	492d      	ldr	r1, [pc, #180]	@ (80037c0 <CreateMessage+0x108>)
 800370a:	482e      	ldr	r0, [pc, #184]	@ (80037c4 <CreateMessage+0x10c>)
 800370c:	9200      	str	r2, [sp, #0]
 800370e:	9301      	str	r3, [sp, #4]
 8003710:	0022      	movs	r2, r4
 8003712:	f00b fdcf 	bl	800f2b4 <siprintf>
  messageLength += strlen(messagePart2);
 8003716:	4b2b      	ldr	r3, [pc, #172]	@ (80037c4 <CreateMessage+0x10c>)
 8003718:	0018      	movs	r0, r3
 800371a:	f7fc fcf5 	bl	8000108 <strlen>
 800371e:	0003      	movs	r3, r0
 8003720:	b299      	uxth	r1, r3
 8003722:	1dbb      	adds	r3, r7, #6
 8003724:	1dba      	adds	r2, r7, #6
 8003726:	8812      	ldrh	r2, [r2, #0]
 8003728:	188a      	adds	r2, r1, r2
 800372a:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":77", sensorID3);
 800372c:	4a26      	ldr	r2, [pc, #152]	@ (80037c8 <CreateMessage+0x110>)
 800372e:	4927      	ldr	r1, [pc, #156]	@ (80037cc <CreateMessage+0x114>)
 8003730:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <CreateMessage+0x118>)
 8003732:	0018      	movs	r0, r3
 8003734:	f00b fdbe 	bl	800f2b4 <siprintf>
  messageLength += strlen(messagePart3);
 8003738:	4b25      	ldr	r3, [pc, #148]	@ (80037d0 <CreateMessage+0x118>)
 800373a:	0018      	movs	r0, r3
 800373c:	f7fc fce4 	bl	8000108 <strlen>
 8003740:	0003      	movs	r3, r0
 8003742:	b299      	uxth	r1, r3
 8003744:	1dbb      	adds	r3, r7, #6
 8003746:	1dba      	adds	r2, r7, #6
 8003748:	8812      	ldrh	r2, [r2, #0]
 800374a:	188a      	adds	r2, r1, r2
 800374c:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":200", sensorID4);
 800374e:	4a21      	ldr	r2, [pc, #132]	@ (80037d4 <CreateMessage+0x11c>)
 8003750:	4921      	ldr	r1, [pc, #132]	@ (80037d8 <CreateMessage+0x120>)
 8003752:	4b22      	ldr	r3, [pc, #136]	@ (80037dc <CreateMessage+0x124>)
 8003754:	0018      	movs	r0, r3
 8003756:	f00b fdad 	bl	800f2b4 <siprintf>
  messageLength += strlen(messagePart4);
 800375a:	4b20      	ldr	r3, [pc, #128]	@ (80037dc <CreateMessage+0x124>)
 800375c:	0018      	movs	r0, r3
 800375e:	f7fc fcd3 	bl	8000108 <strlen>
 8003762:	0003      	movs	r3, r0
 8003764:	b299      	uxth	r1, r3
 8003766:	1dbb      	adds	r3, r7, #6
 8003768:	1dba      	adds	r2, r7, #6
 800376a:	8812      	ldrh	r2, [r2, #0]
 800376c:	188a      	adds	r2, r1, r2
 800376e:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":4.05", sensorID5);
 8003770:	4a1b      	ldr	r2, [pc, #108]	@ (80037e0 <CreateMessage+0x128>)
 8003772:	491c      	ldr	r1, [pc, #112]	@ (80037e4 <CreateMessage+0x12c>)
 8003774:	4b1c      	ldr	r3, [pc, #112]	@ (80037e8 <CreateMessage+0x130>)
 8003776:	0018      	movs	r0, r3
 8003778:	f00b fd9c 	bl	800f2b4 <siprintf>
  messageLength += strlen(messagePart5);
 800377c:	4b1a      	ldr	r3, [pc, #104]	@ (80037e8 <CreateMessage+0x130>)
 800377e:	0018      	movs	r0, r3
 8003780:	f7fc fcc2 	bl	8000108 <strlen>
 8003784:	0003      	movs	r3, r0
 8003786:	b299      	uxth	r1, r3
 8003788:	1dbb      	adds	r3, r7, #6
 800378a:	1dba      	adds	r2, r7, #6
 800378c:	8812      	ldrh	r2, [r2, #0]
 800378e:	188a      	adds	r2, r1, r2
 8003790:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 8003792:	1dbb      	adds	r3, r7, #6
 8003794:	1dba      	adds	r2, r7, #6
 8003796:	8812      	ldrh	r2, [r2, #0]
 8003798:	3214      	adds	r2, #20
 800379a:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 800379c:	1dbb      	adds	r3, r7, #6
 800379e:	881b      	ldrh	r3, [r3, #0]
}
 80037a0:	0018      	movs	r0, r3
 80037a2:	46bd      	mov	sp, r7
 80037a4:	b003      	add	sp, #12
 80037a6:	bd90      	pop	{r4, r7, pc}
 80037a8:	2000043c 	.word	0x2000043c
 80037ac:	2000006c 	.word	0x2000006c
 80037b0:	08011b50 	.word	0x08011b50
 80037b4:	20000444 	.word	0x20000444
 80037b8:	20000440 	.word	0x20000440
 80037bc:	20000088 	.word	0x20000088
 80037c0:	08011b94 	.word	0x08011b94
 80037c4:	200004c4 	.word	0x200004c4
 80037c8:	200000a4 	.word	0x200000a4
 80037cc:	08011bd8 	.word	0x08011bd8
 80037d0:	20000544 	.word	0x20000544
 80037d4:	200000c0 	.word	0x200000c0
 80037d8:	08011c1c 	.word	0x08011c1c
 80037dc:	200005c4 	.word	0x200005c4
 80037e0:	200000dc 	.word	0x200000dc
 80037e4:	08011c60 	.word	0x08011c60
 80037e8:	20000644 	.word	0x20000644

080037ec <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 80037f4:	2380      	movs	r3, #128	@ 0x80
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	6879      	ldr	r1, [r7, #4]
 80037fa:	4b05      	ldr	r3, [pc, #20]	@ (8003810 <SetCommandBuffer+0x24>)
 80037fc:	0018      	movs	r0, r3
 80037fe:	f00b fe05 	bl	800f40c <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 8003802:	4b04      	ldr	r3, [pc, #16]	@ (8003814 <SetCommandBuffer+0x28>)
 8003804:	2200      	movs	r2, #0
 8003806:	701a      	strb	r2, [r3, #0]
}
 8003808:	46c0      	nop			@ (mov r8, r8)
 800380a:	46bd      	mov	sp, r7
 800380c:	b002      	add	sp, #8
 800380e:	bd80      	pop	{r7, pc}
 8003810:	200006d0 	.word	0x200006d0
 8003814:	200008d0 	.word	0x200008d0

08003818 <ParseBuffer>:

 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800381a:	46c6      	mov	lr, r8
 800381c:	b500      	push	{lr}
 800381e:	b094      	sub	sp, #80	@ 0x50
 8003820:	af00      	add	r7, sp, #0
 8003822:	61f8      	str	r0, [r7, #28]
 8003824:	0008      	movs	r0, r1
 8003826:	0011      	movs	r1, r2
 8003828:	261a      	movs	r6, #26
 800382a:	19bb      	adds	r3, r7, r6
 800382c:	1c02      	adds	r2, r0, #0
 800382e:	801a      	strh	r2, [r3, #0]
 8003830:	2319      	movs	r3, #25
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	1c0a      	adds	r2, r1, #0
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	466b      	mov	r3, sp
 800383a:	4698      	mov	r8, r3
  char tempBuf[len+1];
 800383c:	19bb      	adds	r3, r7, r6
 800383e:	881b      	ldrh	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	1e5a      	subs	r2, r3, #1
 8003844:	647a      	str	r2, [r7, #68]	@ 0x44
 8003846:	001a      	movs	r2, r3
 8003848:	60ba      	str	r2, [r7, #8]
 800384a:	2200      	movs	r2, #0
 800384c:	60fa      	str	r2, [r7, #12]
 800384e:	68b8      	ldr	r0, [r7, #8]
 8003850:	68f9      	ldr	r1, [r7, #12]
 8003852:	0002      	movs	r2, r0
 8003854:	0f52      	lsrs	r2, r2, #29
 8003856:	000e      	movs	r6, r1
 8003858:	00f6      	lsls	r6, r6, #3
 800385a:	617e      	str	r6, [r7, #20]
 800385c:	697e      	ldr	r6, [r7, #20]
 800385e:	4316      	orrs	r6, r2
 8003860:	617e      	str	r6, [r7, #20]
 8003862:	0002      	movs	r2, r0
 8003864:	00d2      	lsls	r2, r2, #3
 8003866:	613a      	str	r2, [r7, #16]
 8003868:	001a      	movs	r2, r3
 800386a:	603a      	str	r2, [r7, #0]
 800386c:	2200      	movs	r2, #0
 800386e:	607a      	str	r2, [r7, #4]
 8003870:	6838      	ldr	r0, [r7, #0]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	0002      	movs	r2, r0
 8003876:	0f52      	lsrs	r2, r2, #29
 8003878:	000e      	movs	r6, r1
 800387a:	00f5      	lsls	r5, r6, #3
 800387c:	4315      	orrs	r5, r2
 800387e:	0002      	movs	r2, r0
 8003880:	00d4      	lsls	r4, r2, #3
 8003882:	3307      	adds	r3, #7
 8003884:	08db      	lsrs	r3, r3, #3
 8003886:	00db      	lsls	r3, r3, #3
 8003888:	466a      	mov	r2, sp
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	469d      	mov	sp, r3
 800388e:	466b      	mov	r3, sp
 8003890:	3300      	adds	r3, #0
 8003892:	643b      	str	r3, [r7, #64]	@ 0x40
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003894:	2337      	movs	r3, #55	@ 0x37
 8003896:	2118      	movs	r1, #24
 8003898:	185b      	adds	r3, r3, r1
 800389a:	19db      	adds	r3, r3, r7
 800389c:	2203      	movs	r2, #3
 800389e:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 80038a0:	2334      	movs	r3, #52	@ 0x34
 80038a2:	185b      	adds	r3, r3, r1
 80038a4:	19db      	adds	r3, r3, r7
 80038a6:	2200      	movs	r2, #0
 80038a8:	801a      	strh	r2, [r3, #0]
 80038aa:	e013      	b.n	80038d4 <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 80038ac:	2034      	movs	r0, #52	@ 0x34
 80038ae:	2418      	movs	r4, #24
 80038b0:	1903      	adds	r3, r0, r4
 80038b2:	19db      	adds	r3, r3, r7
 80038b4:	881b      	ldrh	r3, [r3, #0]
 80038b6:	69fa      	ldr	r2, [r7, #28]
 80038b8:	18d2      	adds	r2, r2, r3
 80038ba:	1903      	adds	r3, r0, r4
 80038bc:	19db      	adds	r3, r3, r7
 80038be:	881b      	ldrh	r3, [r3, #0]
 80038c0:	7811      	ldrb	r1, [r2, #0]
 80038c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038c4:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 80038c6:	1903      	adds	r3, r0, r4
 80038c8:	19db      	adds	r3, r3, r7
 80038ca:	881a      	ldrh	r2, [r3, #0]
 80038cc:	1903      	adds	r3, r0, r4
 80038ce:	19db      	adds	r3, r3, r7
 80038d0:	3201      	adds	r2, #1
 80038d2:	801a      	strh	r2, [r3, #0]
 80038d4:	2334      	movs	r3, #52	@ 0x34
 80038d6:	2018      	movs	r0, #24
 80038d8:	181b      	adds	r3, r3, r0
 80038da:	19da      	adds	r2, r3, r7
 80038dc:	211a      	movs	r1, #26
 80038de:	187b      	adds	r3, r7, r1
 80038e0:	8812      	ldrh	r2, [r2, #0]
 80038e2:	881b      	ldrh	r3, [r3, #0]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d3e1      	bcc.n	80038ac <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 80038e8:	187b      	adds	r3, r7, r1
 80038ea:	881b      	ldrh	r3, [r3, #0]
 80038ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80038ee:	2100      	movs	r1, #0
 80038f0:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 80038f2:	2327      	movs	r3, #39	@ 0x27
 80038f4:	0004      	movs	r4, r0
 80038f6:	191b      	adds	r3, r3, r4
 80038f8:	19db      	adds	r3, r3, r7
 80038fa:	224e      	movs	r2, #78	@ 0x4e
 80038fc:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  const char OK[] = AT_RESPONSE_OK;
 80038fe:	201c      	movs	r0, #28
 8003900:	1903      	adds	r3, r0, r4
 8003902:	19db      	adds	r3, r3, r7
 8003904:	4a4f      	ldr	r2, [pc, #316]	@ (8003a44 <ParseBuffer+0x22c>)
 8003906:	8811      	ldrh	r1, [r2, #0]
 8003908:	8019      	strh	r1, [r3, #0]
 800390a:	7892      	ldrb	r2, [r2, #2]
 800390c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 800390e:	2314      	movs	r3, #20
 8003910:	191b      	adds	r3, r3, r4
 8003912:	19db      	adds	r3, r3, r7
 8003914:	4a4c      	ldr	r2, [pc, #304]	@ (8003a48 <ParseBuffer+0x230>)
 8003916:	6811      	ldr	r1, [r2, #0]
 8003918:	6019      	str	r1, [r3, #0]
 800391a:	8892      	ldrh	r2, [r2, #4]
 800391c:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 800391e:	230c      	movs	r3, #12
 8003920:	191b      	adds	r3, r3, r4
 8003922:	19db      	adds	r3, r3, r7
 8003924:	4a49      	ldr	r2, [pc, #292]	@ (8003a4c <ParseBuffer+0x234>)
 8003926:	6811      	ldr	r1, [r2, #0]
 8003928:	6019      	str	r1, [r3, #0]
 800392a:	8892      	ldrh	r2, [r2, #4]
 800392c:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 800392e:	2308      	movs	r3, #8
 8003930:	0021      	movs	r1, r4
 8003932:	185b      	adds	r3, r3, r1
 8003934:	19db      	adds	r3, r3, r7
 8003936:	223e      	movs	r2, #62	@ 0x3e
 8003938:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 800393a:	2319      	movs	r3, #25
 800393c:	18fb      	adds	r3, r7, r3
 800393e:	781b      	ldrb	r3, [r3, #0]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d108      	bne.n	8003956 <ParseBuffer+0x13e>
    ParsePoint = strstr(tempBuf, OK);
 8003944:	1843      	adds	r3, r0, r1
 8003946:	19da      	adds	r2, r3, r7
 8003948:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800394a:	0011      	movs	r1, r2
 800394c:	0018      	movs	r0, r3
 800394e:	f00b fd71 	bl	800f434 <strstr>
 8003952:	0003      	movs	r3, r0
 8003954:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003956:	2319      	movs	r3, #25
 8003958:	18fb      	adds	r3, r7, r3
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b01      	cmp	r3, #1
 800395e:	d10a      	bne.n	8003976 <ParseBuffer+0x15e>
    ParsePoint = strstr(tempBuf, ready);
 8003960:	230c      	movs	r3, #12
 8003962:	2218      	movs	r2, #24
 8003964:	189b      	adds	r3, r3, r2
 8003966:	19da      	adds	r2, r3, r7
 8003968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800396a:	0011      	movs	r1, r2
 800396c:	0018      	movs	r0, r3
 800396e:	f00b fd61 	bl	800f434 <strstr>
 8003972:	0003      	movs	r3, r0
 8003974:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003976:	2319      	movs	r3, #25
 8003978:	18fb      	adds	r3, r7, r3
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b02      	cmp	r3, #2
 800397e:	d10a      	bne.n	8003996 <ParseBuffer+0x17e>
    ParsePoint = strstr(tempBuf, start);
 8003980:	2308      	movs	r3, #8
 8003982:	2218      	movs	r2, #24
 8003984:	189b      	adds	r3, r3, r2
 8003986:	19da      	adds	r2, r3, r7
 8003988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800398a:	0011      	movs	r1, r2
 800398c:	0018      	movs	r0, r3
 800398e:	f00b fd51 	bl	800f434 <strstr>
 8003992:	0003      	movs	r3, r0
 8003994:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003996:	2314      	movs	r3, #20
 8003998:	2418      	movs	r4, #24
 800399a:	191b      	adds	r3, r3, r4
 800399c:	19da      	adds	r2, r3, r7
 800399e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80039a0:	0011      	movs	r1, r2
 80039a2:	0018      	movs	r0, r3
 80039a4:	f00b fd46 	bl	800f434 <strstr>
 80039a8:	0003      	movs	r3, r0
 80039aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  if(len > 1 ){
 80039ac:	231a      	movs	r3, #26
 80039ae:	18fb      	adds	r3, r7, r3
 80039b0:	881b      	ldrh	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d939      	bls.n	8003a2a <ParseBuffer+0x212>
    TestChar = *ParsePoint;
 80039b6:	2127      	movs	r1, #39	@ 0x27
 80039b8:	190b      	adds	r3, r1, r4
 80039ba:	19db      	adds	r3, r3, r7
 80039bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039be:	7812      	ldrb	r2, [r2, #0]
 80039c0:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 80039c2:	190b      	adds	r3, r1, r4
 80039c4:	19db      	adds	r3, r3, r7
 80039c6:	781b      	ldrb	r3, [r3, #0]
 80039c8:	2b4f      	cmp	r3, #79	@ 0x4f
 80039ca:	d104      	bne.n	80039d6 <ParseBuffer+0x1be>
      status = RECEIVE_STATUS_OK;
 80039cc:	2337      	movs	r3, #55	@ 0x37
 80039ce:	191b      	adds	r3, r3, r4
 80039d0:	19db      	adds	r3, r3, r7
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 80039d6:	2327      	movs	r3, #39	@ 0x27
 80039d8:	2218      	movs	r2, #24
 80039da:	189b      	adds	r3, r3, r2
 80039dc:	19db      	adds	r3, r3, r7
 80039de:	781b      	ldrb	r3, [r3, #0]
 80039e0:	2b72      	cmp	r3, #114	@ 0x72
 80039e2:	d104      	bne.n	80039ee <ParseBuffer+0x1d6>
      status = RECEIVE_STATUS_READY;
 80039e4:	2337      	movs	r3, #55	@ 0x37
 80039e6:	189b      	adds	r3, r3, r2
 80039e8:	19db      	adds	r3, r3, r7
 80039ea:	2202      	movs	r2, #2
 80039ec:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 80039ee:	2327      	movs	r3, #39	@ 0x27
 80039f0:	2218      	movs	r2, #24
 80039f2:	189b      	adds	r3, r3, r2
 80039f4:	19db      	adds	r3, r3, r7
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	2b3e      	cmp	r3, #62	@ 0x3e
 80039fa:	d104      	bne.n	8003a06 <ParseBuffer+0x1ee>
      status = RECEIVE_STATUS_START;
 80039fc:	2337      	movs	r3, #55	@ 0x37
 80039fe:	189b      	adds	r3, r3, r2
 8003a00:	19db      	adds	r3, r3, r7
 8003a02:	2205      	movs	r2, #5
 8003a04:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003a06:	2127      	movs	r1, #39	@ 0x27
 8003a08:	2018      	movs	r0, #24
 8003a0a:	180b      	adds	r3, r1, r0
 8003a0c:	19db      	adds	r3, r3, r7
 8003a0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003a10:	7812      	ldrb	r2, [r2, #0]
 8003a12:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003a14:	0002      	movs	r2, r0
 8003a16:	188b      	adds	r3, r1, r2
 8003a18:	19db      	adds	r3, r3, r7
 8003a1a:	781b      	ldrb	r3, [r3, #0]
 8003a1c:	2b45      	cmp	r3, #69	@ 0x45
 8003a1e:	d104      	bne.n	8003a2a <ParseBuffer+0x212>
      status = RECEIVE_STATUS_ERROR;
 8003a20:	2337      	movs	r3, #55	@ 0x37
 8003a22:	189b      	adds	r3, r3, r2
 8003a24:	19db      	adds	r3, r3, r7
 8003a26:	2201      	movs	r2, #1
 8003a28:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003a2a:	2337      	movs	r3, #55	@ 0x37
 8003a2c:	2218      	movs	r2, #24
 8003a2e:	189b      	adds	r3, r3, r2
 8003a30:	19db      	adds	r3, r3, r7
 8003a32:	781b      	ldrb	r3, [r3, #0]
 8003a34:	46c5      	mov	sp, r8
//          if (TempIndex >= ESP_MAX_BUFFER_SIZE) {
//              TempIndex = 0;
//          }
//       }
//    }
}
 8003a36:	0018      	movs	r0, r3
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	b014      	add	sp, #80	@ 0x50
 8003a3c:	bc80      	pop	{r7}
 8003a3e:	46b8      	mov	r8, r7
 8003a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a42:	46c0      	nop			@ (mov r8, r8)
 8003a44:	08011ca8 	.word	0x08011ca8
 8003a48:	08011cac 	.word	0x08011cac
 8003a4c:	08011cb4 	.word	0x08011cb4

08003a50 <PollAwake>:
/* line 228 to 383 contain the AT commands. This could be optimized by loading the commands into
 * an array and having the function handling the sending. This was the simple but verbose
 * implementation.
 */
bool PollAwake(){
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003a56:	4b0d      	ldr	r3, [pc, #52]	@ (8003a8c <PollAwake+0x3c>)
 8003a58:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	0018      	movs	r0, r3
 8003a5e:	f7ff fec5 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	0018      	movs	r0, r3
 8003a66:	f7fc fb4f 	bl	8000108 <strlen>
 8003a6a:	0003      	movs	r3, r0
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	0011      	movs	r1, r2
 8003a72:	0018      	movs	r0, r3
 8003a74:	f7ff fd90 	bl	8003598 <ESP_Send>
 8003a78:	1e03      	subs	r3, r0, #0
 8003a7a:	d001      	beq.n	8003a80 <PollAwake+0x30>
    return true;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <PollAwake+0x32>
  }
  else{
    return false;
 8003a80:	2300      	movs	r3, #0
  }
}
 8003a82:	0018      	movs	r0, r3
 8003a84:	46bd      	mov	sp, r7
 8003a86:	b002      	add	sp, #8
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	46c0      	nop			@ (mov r8, r8)
 8003a8c:	08011cbc 	.word	0x08011cbc

08003a90 <RFPower>:
bool RFPower(){
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <RFPower+0x3c>)
 8003a98:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	0018      	movs	r0, r3
 8003a9e:	f7ff fea5 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	0018      	movs	r0, r3
 8003aa6:	f7fc fb2f 	bl	8000108 <strlen>
 8003aaa:	0003      	movs	r3, r0
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	0011      	movs	r1, r2
 8003ab2:	0018      	movs	r0, r3
 8003ab4:	f7ff fd70 	bl	8003598 <ESP_Send>
 8003ab8:	1e03      	subs	r3, r0, #0
 8003aba:	d001      	beq.n	8003ac0 <RFPower+0x30>
    return true;
 8003abc:	2301      	movs	r3, #1
 8003abe:	e000      	b.n	8003ac2 <RFPower+0x32>
  }
  else{
    return false;
 8003ac0:	2300      	movs	r3, #0
  }
}
 8003ac2:	0018      	movs	r0, r3
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	b002      	add	sp, #8
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	46c0      	nop			@ (mov r8, r8)
 8003acc:	08011cc4 	.word	0x08011cc4

08003ad0 <CheckRFPower>:
bool CheckRFPower(){
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003ad6:	4b0d      	ldr	r3, [pc, #52]	@ (8003b0c <CheckRFPower+0x3c>)
 8003ad8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	0018      	movs	r0, r3
 8003ade:	f7ff fe85 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	0018      	movs	r0, r3
 8003ae6:	f7fc fb0f 	bl	8000108 <strlen>
 8003aea:	0003      	movs	r3, r0
 8003aec:	b29a      	uxth	r2, r3
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	0011      	movs	r1, r2
 8003af2:	0018      	movs	r0, r3
 8003af4:	f7ff fd50 	bl	8003598 <ESP_Send>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d001      	beq.n	8003b00 <CheckRFPower+0x30>
    return true;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e000      	b.n	8003b02 <CheckRFPower+0x32>
  }
  else{
    return false;
 8003b00:	2300      	movs	r3, #0
  }
}
 8003b02:	0018      	movs	r0, r3
 8003b04:	46bd      	mov	sp, r7
 8003b06:	b002      	add	sp, #8
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	08011cd4 	.word	0x08011cd4

08003b10 <ATRestore>:
bool ATRestore(){
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b082      	sub	sp, #8
 8003b14:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003b16:	4b0d      	ldr	r3, [pc, #52]	@ (8003b4c <ATRestore+0x3c>)
 8003b18:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	0018      	movs	r0, r3
 8003b1e:	f7ff fe65 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	0018      	movs	r0, r3
 8003b26:	f7fc faef 	bl	8000108 <strlen>
 8003b2a:	0003      	movs	r3, r0
 8003b2c:	b29a      	uxth	r2, r3
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	0011      	movs	r1, r2
 8003b32:	0018      	movs	r0, r3
 8003b34:	f7ff fd30 	bl	8003598 <ESP_Send>
 8003b38:	1e03      	subs	r3, r0, #0
 8003b3a:	d001      	beq.n	8003b40 <ATRestore+0x30>
    return true;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <ATRestore+0x32>
  }
  else{
    return false;
 8003b40:	2300      	movs	r3, #0
  }
}
 8003b42:	0018      	movs	r0, r3
 8003b44:	46bd      	mov	sp, r7
 8003b46:	b002      	add	sp, #8
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	08011ce4 	.word	0x08011ce4

08003b50 <CWINIT>:
bool CWINIT(){
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b082      	sub	sp, #8
 8003b54:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003b56:	4b0d      	ldr	r3, [pc, #52]	@ (8003b8c <CWINIT+0x3c>)
 8003b58:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	0018      	movs	r0, r3
 8003b5e:	f7ff fe45 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	0018      	movs	r0, r3
 8003b66:	f7fc facf 	bl	8000108 <strlen>
 8003b6a:	0003      	movs	r3, r0
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0011      	movs	r1, r2
 8003b72:	0018      	movs	r0, r3
 8003b74:	f7ff fd10 	bl	8003598 <ESP_Send>
 8003b78:	1e03      	subs	r3, r0, #0
 8003b7a:	d001      	beq.n	8003b80 <CWINIT+0x30>
    return true;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	e000      	b.n	8003b82 <CWINIT+0x32>
  }
  else{
    return false;
 8003b80:	2300      	movs	r3, #0
  }
}
 8003b82:	0018      	movs	r0, r3
 8003b84:	46bd      	mov	sp, r7
 8003b86:	b002      	add	sp, #8
 8003b88:	bd80      	pop	{r7, pc}
 8003b8a:	46c0      	nop			@ (mov r8, r8)
 8003b8c:	08011cf4 	.word	0x08011cf4

08003b90 <CWMODE1>:
bool CWMODE1(){
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b082      	sub	sp, #8
 8003b94:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003b96:	4b0d      	ldr	r3, [pc, #52]	@ (8003bcc <CWMODE1+0x3c>)
 8003b98:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	0018      	movs	r0, r3
 8003b9e:	f7ff fe25 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	0018      	movs	r0, r3
 8003ba6:	f7fc faaf 	bl	8000108 <strlen>
 8003baa:	0003      	movs	r3, r0
 8003bac:	b29a      	uxth	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	0011      	movs	r1, r2
 8003bb2:	0018      	movs	r0, r3
 8003bb4:	f7ff fcf0 	bl	8003598 <ESP_Send>
 8003bb8:	1e03      	subs	r3, r0, #0
 8003bba:	d001      	beq.n	8003bc0 <CWMODE1+0x30>
    return true;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <CWMODE1+0x32>
  }
  else{
    return false;
 8003bc0:	2300      	movs	r3, #0
  }
}
 8003bc2:	0018      	movs	r0, r3
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	b002      	add	sp, #8
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	46c0      	nop			@ (mov r8, r8)
 8003bcc:	08011d04 	.word	0x08011d04

08003bd0 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003bd6:	4b0d      	ldr	r3, [pc, #52]	@ (8003c0c <CWAUTOCONN+0x3c>)
 8003bd8:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	0018      	movs	r0, r3
 8003bde:	f7ff fe05 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	0018      	movs	r0, r3
 8003be6:	f7fc fa8f 	bl	8000108 <strlen>
 8003bea:	0003      	movs	r3, r0
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	0011      	movs	r1, r2
 8003bf2:	0018      	movs	r0, r3
 8003bf4:	f7ff fcd0 	bl	8003598 <ESP_Send>
 8003bf8:	1e03      	subs	r3, r0, #0
 8003bfa:	d001      	beq.n	8003c00 <CWAUTOCONN+0x30>
    return true;
 8003bfc:	2301      	movs	r3, #1
 8003bfe:	e000      	b.n	8003c02 <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003c00:	2300      	movs	r3, #0
  }
}
 8003c02:	0018      	movs	r0, r3
 8003c04:	46bd      	mov	sp, r7
 8003c06:	b002      	add	sp, #8
 8003c08:	bd80      	pop	{r7, pc}
 8003c0a:	46c0      	nop			@ (mov r8, r8)
 8003c0c:	08011d14 	.word	0x08011d14

08003c10 <CWJAP>:
bool CWJAP(){
 8003c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c12:	46c6      	mov	lr, r8
 8003c14:	b500      	push	{lr}
 8003c16:	b0a2      	sub	sp, #136	@ 0x88
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	466b      	mov	r3, sp
 8003c1c:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003c1e:	2618      	movs	r6, #24
 8003c20:	19bb      	adds	r3, r7, r6
 8003c22:	2264      	movs	r2, #100	@ 0x64
 8003c24:	2100      	movs	r1, #0
 8003c26:	0018      	movs	r0, r3
 8003c28:	f00b fbe8 	bl	800f3fc <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, Password);
 8003c2c:	4b34      	ldr	r3, [pc, #208]	@ (8003d00 <CWJAP+0xf0>)
 8003c2e:	4a35      	ldr	r2, [pc, #212]	@ (8003d04 <CWJAP+0xf4>)
 8003c30:	4935      	ldr	r1, [pc, #212]	@ (8003d08 <CWJAP+0xf8>)
 8003c32:	19b8      	adds	r0, r7, r6
 8003c34:	f00b fb3e 	bl	800f2b4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003c38:	19bb      	adds	r3, r7, r6
 8003c3a:	0018      	movs	r0, r3
 8003c3c:	f7fc fa64 	bl	8000108 <strlen>
 8003c40:	0002      	movs	r2, r0
 8003c42:	216f      	movs	r1, #111	@ 0x6f
 8003c44:	0030      	movs	r0, r6
 8003c46:	180b      	adds	r3, r1, r0
 8003c48:	19db      	adds	r3, r3, r7
 8003c4a:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003c4c:	180b      	adds	r3, r1, r0
 8003c4e:	19db      	adds	r3, r3, r7
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	3301      	adds	r3, #1
 8003c54:	1e5a      	subs	r2, r3, #1
 8003c56:	2180      	movs	r1, #128	@ 0x80
 8003c58:	1879      	adds	r1, r7, r1
 8003c5a:	600a      	str	r2, [r1, #0]
 8003c5c:	001a      	movs	r2, r3
 8003c5e:	60ba      	str	r2, [r7, #8]
 8003c60:	2200      	movs	r2, #0
 8003c62:	60fa      	str	r2, [r7, #12]
 8003c64:	68b8      	ldr	r0, [r7, #8]
 8003c66:	68f9      	ldr	r1, [r7, #12]
 8003c68:	0002      	movs	r2, r0
 8003c6a:	0f52      	lsrs	r2, r2, #29
 8003c6c:	000e      	movs	r6, r1
 8003c6e:	00f6      	lsls	r6, r6, #3
 8003c70:	617e      	str	r6, [r7, #20]
 8003c72:	697e      	ldr	r6, [r7, #20]
 8003c74:	4316      	orrs	r6, r2
 8003c76:	617e      	str	r6, [r7, #20]
 8003c78:	0002      	movs	r2, r0
 8003c7a:	00d2      	lsls	r2, r2, #3
 8003c7c:	613a      	str	r2, [r7, #16]
 8003c7e:	001a      	movs	r2, r3
 8003c80:	603a      	str	r2, [r7, #0]
 8003c82:	2200      	movs	r2, #0
 8003c84:	607a      	str	r2, [r7, #4]
 8003c86:	6838      	ldr	r0, [r7, #0]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	0f52      	lsrs	r2, r2, #29
 8003c8e:	000e      	movs	r6, r1
 8003c90:	00f5      	lsls	r5, r6, #3
 8003c92:	4315      	orrs	r5, r2
 8003c94:	0002      	movs	r2, r0
 8003c96:	00d4      	lsls	r4, r2, #3
 8003c98:	3307      	adds	r3, #7
 8003c9a:	08db      	lsrs	r3, r3, #3
 8003c9c:	00db      	lsls	r3, r3, #3
 8003c9e:	466a      	mov	r2, sp
 8003ca0:	1ad3      	subs	r3, r2, r3
 8003ca2:	469d      	mov	sp, r3
 8003ca4:	466b      	mov	r3, sp
 8003ca6:	3300      	adds	r3, #0
 8003ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
  atCommand[len] = '\0';
 8003caa:	246f      	movs	r4, #111	@ 0x6f
 8003cac:	2018      	movs	r0, #24
 8003cae:	1823      	adds	r3, r4, r0
 8003cb0:	19db      	adds	r3, r3, r7
 8003cb2:	781b      	ldrb	r3, [r3, #0]
 8003cb4:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	54d1      	strb	r1, [r2, r3]
  strncpy(atCommand, atCommandBuff, len);
 8003cba:	1823      	adds	r3, r4, r0
 8003cbc:	19db      	adds	r3, r3, r7
 8003cbe:	781a      	ldrb	r2, [r3, #0]
 8003cc0:	0005      	movs	r5, r0
 8003cc2:	1839      	adds	r1, r7, r0
 8003cc4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f00b fba0 	bl	800f40c <strncpy>
  SetCommandBuffer(atCommand);
 8003ccc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cce:	0018      	movs	r0, r3
 8003cd0:	f7ff fd8c 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003cd4:	1963      	adds	r3, r4, r5
 8003cd6:	19db      	adds	r3, r3, r7
 8003cd8:	781b      	ldrb	r3, [r3, #0]
 8003cda:	b29a      	uxth	r2, r3
 8003cdc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003cde:	0011      	movs	r1, r2
 8003ce0:	0018      	movs	r0, r3
 8003ce2:	f7ff fc59 	bl	8003598 <ESP_Send>
 8003ce6:	1e03      	subs	r3, r0, #0
 8003ce8:	d001      	beq.n	8003cee <CWJAP+0xde>
    return true;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e000      	b.n	8003cf0 <CWJAP+0xe0>
  }
  else{
    return false;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	46c5      	mov	sp, r8
  }
}
 8003cf2:	0018      	movs	r0, r3
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	b022      	add	sp, #136	@ 0x88
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	46b8      	mov	r8, r7
 8003cfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cfe:	46c0      	nop			@ (mov r8, r8)
 8003d00:	2000000c 	.word	0x2000000c
 8003d04:	20000000 	.word	0x20000000
 8003d08:	08011d28 	.word	0x08011d28

08003d0c <CWMODE3>:
bool CWMODE3(){
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003d12:	4b0d      	ldr	r3, [pc, #52]	@ (8003d48 <CWMODE3+0x3c>)
 8003d14:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	0018      	movs	r0, r3
 8003d1a:	f7ff fd67 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fc f9f1 	bl	8000108 <strlen>
 8003d26:	0003      	movs	r3, r0
 8003d28:	b29a      	uxth	r2, r3
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	0011      	movs	r1, r2
 8003d2e:	0018      	movs	r0, r3
 8003d30:	f7ff fc32 	bl	8003598 <ESP_Send>
 8003d34:	1e03      	subs	r3, r0, #0
 8003d36:	d001      	beq.n	8003d3c <CWMODE3+0x30>
    return true;
 8003d38:	2301      	movs	r3, #1
 8003d3a:	e000      	b.n	8003d3e <CWMODE3+0x32>
  }
  else{
    return false;
 8003d3c:	2300      	movs	r3, #0
  }
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b002      	add	sp, #8
 8003d44:	bd80      	pop	{r7, pc}
 8003d46:	46c0      	nop			@ (mov r8, r8)
 8003d48:	08011d40 	.word	0x08011d40

08003d4c <CWSAP>:
bool CWSAP(){
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003d52:	4b0d      	ldr	r3, [pc, #52]	@ (8003d88 <CWSAP+0x3c>)
 8003d54:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	0018      	movs	r0, r3
 8003d5a:	f7ff fd47 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	0018      	movs	r0, r3
 8003d62:	f7fc f9d1 	bl	8000108 <strlen>
 8003d66:	0003      	movs	r3, r0
 8003d68:	b29a      	uxth	r2, r3
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	0011      	movs	r1, r2
 8003d6e:	0018      	movs	r0, r3
 8003d70:	f7ff fc12 	bl	8003598 <ESP_Send>
 8003d74:	1e03      	subs	r3, r0, #0
 8003d76:	d001      	beq.n	8003d7c <CWSAP+0x30>
    return true;
 8003d78:	2301      	movs	r3, #1
 8003d7a:	e000      	b.n	8003d7e <CWSAP+0x32>
  }
  else{
    return false;
 8003d7c:	2300      	movs	r3, #0
  }
}
 8003d7e:	0018      	movs	r0, r3
 8003d80:	46bd      	mov	sp, r7
 8003d82:	b002      	add	sp, #8
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	46c0      	nop			@ (mov r8, r8)
 8003d88:	08011d50 	.word	0x08011d50

08003d8c <CIPMUX>:
bool CIPMUX(){
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 8003d92:	4b0d      	ldr	r3, [pc, #52]	@ (8003dc8 <CIPMUX+0x3c>)
 8003d94:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	0018      	movs	r0, r3
 8003d9a:	f7ff fd27 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fc f9b1 	bl	8000108 <strlen>
 8003da6:	0003      	movs	r3, r0
 8003da8:	b29a      	uxth	r2, r3
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	0011      	movs	r1, r2
 8003dae:	0018      	movs	r0, r3
 8003db0:	f7ff fbf2 	bl	8003598 <ESP_Send>
 8003db4:	1e03      	subs	r3, r0, #0
 8003db6:	d001      	beq.n	8003dbc <CIPMUX+0x30>
    return true;
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <CIPMUX+0x32>
  }
  else{
    return false;
 8003dbc:	2300      	movs	r3, #0
  }
}
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	b002      	add	sp, #8
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	46c0      	nop			@ (mov r8, r8)
 8003dc8:	08011d74 	.word	0x08011d74

08003dcc <WEBSERVER>:
bool WEBSERVER(){
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b082      	sub	sp, #8
 8003dd0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8003dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e08 <WEBSERVER+0x3c>)
 8003dd4:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	0018      	movs	r0, r3
 8003dda:	f7ff fd07 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	0018      	movs	r0, r3
 8003de2:	f7fc f991 	bl	8000108 <strlen>
 8003de6:	0003      	movs	r3, r0
 8003de8:	b29a      	uxth	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	0011      	movs	r1, r2
 8003dee:	0018      	movs	r0, r3
 8003df0:	f7ff fbd2 	bl	8003598 <ESP_Send>
 8003df4:	1e03      	subs	r3, r0, #0
 8003df6:	d001      	beq.n	8003dfc <WEBSERVER+0x30>
    return true;
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <WEBSERVER+0x32>
  }
  else{
    return false;
 8003dfc:	2300      	movs	r3, #0
  }
}
 8003dfe:	0018      	movs	r0, r3
 8003e00:	46bd      	mov	sp, r7
 8003e02:	b002      	add	sp, #8
 8003e04:	bd80      	pop	{r7, pc}
 8003e06:	46c0      	nop			@ (mov r8, r8)
 8003e08:	08011d84 	.word	0x08011d84

08003e0c <HTTPCPOST>:
bool HTTPCPOST(){
 8003e0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0e:	46c6      	mov	lr, r8
 8003e10:	b500      	push	{lr}
 8003e12:	4c47      	ldr	r4, [pc, #284]	@ (8003f30 <HTTPCPOST+0x124>)
 8003e14:	44a5      	add	sp, r4
 8003e16:	af00      	add	r7, sp, #0
 8003e18:	466b      	mov	r3, sp
 8003e1a:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 8003e1c:	4b45      	ldr	r3, [pc, #276]	@ (8003f34 <HTTPCPOST+0x128>)
 8003e1e:	2218      	movs	r2, #24
 8003e20:	189b      	adds	r3, r3, r2
 8003e22:	19dc      	adds	r4, r3, r7
 8003e24:	f7ff fc48 	bl	80036b8 <CreateMessage>
 8003e28:	0003      	movs	r3, r0
 8003e2a:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", API, length);
 8003e2c:	4b41      	ldr	r3, [pc, #260]	@ (8003f34 <HTTPCPOST+0x128>)
 8003e2e:	2218      	movs	r2, #24
 8003e30:	189b      	adds	r3, r3, r2
 8003e32:	19db      	adds	r3, r3, r7
 8003e34:	881b      	ldrh	r3, [r3, #0]
 8003e36:	4a40      	ldr	r2, [pc, #256]	@ (8003f38 <HTTPCPOST+0x12c>)
 8003e38:	4940      	ldr	r1, [pc, #256]	@ (8003f3c <HTTPCPOST+0x130>)
 8003e3a:	201c      	movs	r0, #28
 8003e3c:	1838      	adds	r0, r7, r0
 8003e3e:	f00b fa39 	bl	800f2b4 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003e42:	231c      	movs	r3, #28
 8003e44:	18fb      	adds	r3, r7, r3
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7fc f95e 	bl	8000108 <strlen>
 8003e4c:	0002      	movs	r2, r0
 8003e4e:	4c3c      	ldr	r4, [pc, #240]	@ (8003f40 <HTTPCPOST+0x134>)
 8003e50:	2318      	movs	r3, #24
 8003e52:	18e3      	adds	r3, r4, r3
 8003e54:	19db      	adds	r3, r3, r7
 8003e56:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003e58:	2318      	movs	r3, #24
 8003e5a:	18e3      	adds	r3, r4, r3
 8003e5c:	19db      	adds	r3, r3, r7
 8003e5e:	781b      	ldrb	r3, [r3, #0]
 8003e60:	3301      	adds	r3, #1
 8003e62:	1e5a      	subs	r2, r3, #1
 8003e64:	2198      	movs	r1, #152	@ 0x98
 8003e66:	0089      	lsls	r1, r1, #2
 8003e68:	2018      	movs	r0, #24
 8003e6a:	1809      	adds	r1, r1, r0
 8003e6c:	19c9      	adds	r1, r1, r7
 8003e6e:	600a      	str	r2, [r1, #0]
 8003e70:	001a      	movs	r2, r3
 8003e72:	0015      	movs	r5, r2
 8003e74:	2200      	movs	r2, #0
 8003e76:	0016      	movs	r6, r2
 8003e78:	0028      	movs	r0, r5
 8003e7a:	0031      	movs	r1, r6
 8003e7c:	0002      	movs	r2, r0
 8003e7e:	0f52      	lsrs	r2, r2, #29
 8003e80:	000d      	movs	r5, r1
 8003e82:	00ed      	lsls	r5, r5, #3
 8003e84:	617d      	str	r5, [r7, #20]
 8003e86:	697d      	ldr	r5, [r7, #20]
 8003e88:	4315      	orrs	r5, r2
 8003e8a:	617d      	str	r5, [r7, #20]
 8003e8c:	0002      	movs	r2, r0
 8003e8e:	00d2      	lsls	r2, r2, #3
 8003e90:	613a      	str	r2, [r7, #16]
 8003e92:	001a      	movs	r2, r3
 8003e94:	603a      	str	r2, [r7, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	607a      	str	r2, [r7, #4]
 8003e9a:	6838      	ldr	r0, [r7, #0]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	0002      	movs	r2, r0
 8003ea0:	0f52      	lsrs	r2, r2, #29
 8003ea2:	000d      	movs	r5, r1
 8003ea4:	00ed      	lsls	r5, r5, #3
 8003ea6:	60fd      	str	r5, [r7, #12]
 8003ea8:	68fd      	ldr	r5, [r7, #12]
 8003eaa:	4315      	orrs	r5, r2
 8003eac:	60fd      	str	r5, [r7, #12]
 8003eae:	0002      	movs	r2, r0
 8003eb0:	00d2      	lsls	r2, r2, #3
 8003eb2:	60ba      	str	r2, [r7, #8]
 8003eb4:	3307      	adds	r3, #7
 8003eb6:	08db      	lsrs	r3, r3, #3
 8003eb8:	00db      	lsls	r3, r3, #3
 8003eba:	466a      	mov	r2, sp
 8003ebc:	1ad3      	subs	r3, r2, r3
 8003ebe:	469d      	mov	sp, r3
 8003ec0:	466b      	mov	r3, sp
 8003ec2:	3300      	adds	r3, #0
 8003ec4:	2597      	movs	r5, #151	@ 0x97
 8003ec6:	00ad      	lsls	r5, r5, #2
 8003ec8:	2218      	movs	r2, #24
 8003eca:	18aa      	adds	r2, r5, r2
 8003ecc:	19d2      	adds	r2, r2, r7
 8003ece:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 8003ed0:	2318      	movs	r3, #24
 8003ed2:	18e3      	adds	r3, r4, r3
 8003ed4:	19db      	adds	r3, r3, r7
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	231c      	movs	r3, #28
 8003eda:	18f9      	adds	r1, r7, r3
 8003edc:	2318      	movs	r3, #24
 8003ede:	18eb      	adds	r3, r5, r3
 8003ee0:	19db      	adds	r3, r3, r7
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	f00b fa91 	bl	800f40c <strncpy>
  SetCommandBuffer(atCommand);
 8003eea:	2318      	movs	r3, #24
 8003eec:	18eb      	adds	r3, r5, r3
 8003eee:	19db      	adds	r3, r3, r7
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	0018      	movs	r0, r3
 8003ef4:	f7ff fc7a 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8003ef8:	2318      	movs	r3, #24
 8003efa:	18e3      	adds	r3, r4, r3
 8003efc:	19db      	adds	r3, r3, r7
 8003efe:	781b      	ldrb	r3, [r3, #0]
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	2318      	movs	r3, #24
 8003f04:	18eb      	adds	r3, r5, r3
 8003f06:	19db      	adds	r3, r3, r7
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	0011      	movs	r1, r2
 8003f0c:	0018      	movs	r0, r3
 8003f0e:	f7ff fb43 	bl	8003598 <ESP_Send>
 8003f12:	1e03      	subs	r3, r0, #0
 8003f14:	d001      	beq.n	8003f1a <HTTPCPOST+0x10e>
    return true;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e000      	b.n	8003f1c <HTTPCPOST+0x110>
  }
  else{
    return false;
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	46c5      	mov	sp, r8
  }
}
 8003f1e:	0018      	movs	r0, r3
 8003f20:	46bd      	mov	sp, r7
 8003f22:	23a0      	movs	r3, #160	@ 0xa0
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	449d      	add	sp, r3
 8003f28:	bc80      	pop	{r7}
 8003f2a:	46b8      	mov	r8, r7
 8003f2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f2e:	46c0      	nop			@ (mov r8, r8)
 8003f30:	fffffd80 	.word	0xfffffd80
 8003f34:	00000266 	.word	0x00000266
 8003f38:	20000028 	.word	0x20000028
 8003f3c:	08011d9c 	.word	0x08011d9c
 8003f40:	00000265 	.word	0x00000265

08003f44 <SENDDATA>:
bool SENDDATA(){
 8003f44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f46:	46c6      	mov	lr, r8
 8003f48:	b500      	push	{lr}
 8003f4a:	4c4c      	ldr	r4, [pc, #304]	@ (800407c <SENDDATA+0x138>)
 8003f4c:	44a5      	add	sp, r4
 8003f4e:	af04      	add	r7, sp, #16
 8003f50:	466b      	mov	r3, sp
 8003f52:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 8003f54:	23a4      	movs	r3, #164	@ 0xa4
 8003f56:	009a      	lsls	r2, r3, #2
 8003f58:	261c      	movs	r6, #28
 8003f5a:	19bb      	adds	r3, r7, r6
 8003f5c:	2100      	movs	r1, #0
 8003f5e:	0018      	movs	r0, r3
 8003f60:	f00b fa4c 	bl	800f3fc <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 8003f64:	4a46      	ldr	r2, [pc, #280]	@ (8004080 <SENDDATA+0x13c>)
 8003f66:	4947      	ldr	r1, [pc, #284]	@ (8004084 <SENDDATA+0x140>)
 8003f68:	4847      	ldr	r0, [pc, #284]	@ (8004088 <SENDDATA+0x144>)
 8003f6a:	19be      	adds	r6, r7, r6
 8003f6c:	4b47      	ldr	r3, [pc, #284]	@ (800408c <SENDDATA+0x148>)
 8003f6e:	9302      	str	r3, [sp, #8]
 8003f70:	4b47      	ldr	r3, [pc, #284]	@ (8004090 <SENDDATA+0x14c>)
 8003f72:	9301      	str	r3, [sp, #4]
 8003f74:	4b47      	ldr	r3, [pc, #284]	@ (8004094 <SENDDATA+0x150>)
 8003f76:	9300      	str	r3, [sp, #0]
 8003f78:	0013      	movs	r3, r2
 8003f7a:	000a      	movs	r2, r1
 8003f7c:	0001      	movs	r1, r0
 8003f7e:	0030      	movs	r0, r6
 8003f80:	f00b f998 	bl	800f2b4 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 8003f84:	231c      	movs	r3, #28
 8003f86:	18fb      	adds	r3, r7, r3
 8003f88:	0018      	movs	r0, r3
 8003f8a:	f7fc f8bd 	bl	8000108 <strlen>
 8003f8e:	0002      	movs	r2, r0
 8003f90:	4e41      	ldr	r6, [pc, #260]	@ (8004098 <SENDDATA+0x154>)
 8003f92:	2018      	movs	r0, #24
 8003f94:	1831      	adds	r1, r6, r0
 8003f96:	19cb      	adds	r3, r1, r7
 8003f98:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 8003f9a:	1832      	adds	r2, r6, r0
 8003f9c:	19d3      	adds	r3, r2, r7
 8003f9e:	881b      	ldrh	r3, [r3, #0]
 8003fa0:	3301      	adds	r3, #1
 8003fa2:	1e5a      	subs	r2, r3, #1
 8003fa4:	21a6      	movs	r1, #166	@ 0xa6
 8003fa6:	0089      	lsls	r1, r1, #2
 8003fa8:	1809      	adds	r1, r1, r0
 8003faa:	19c9      	adds	r1, r1, r7
 8003fac:	600a      	str	r2, [r1, #0]
 8003fae:	001a      	movs	r2, r3
 8003fb0:	60ba      	str	r2, [r7, #8]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	60fa      	str	r2, [r7, #12]
 8003fb6:	68b8      	ldr	r0, [r7, #8]
 8003fb8:	68f9      	ldr	r1, [r7, #12]
 8003fba:	0002      	movs	r2, r0
 8003fbc:	0f52      	lsrs	r2, r2, #29
 8003fbe:	000e      	movs	r6, r1
 8003fc0:	00f6      	lsls	r6, r6, #3
 8003fc2:	617e      	str	r6, [r7, #20]
 8003fc4:	697e      	ldr	r6, [r7, #20]
 8003fc6:	4316      	orrs	r6, r2
 8003fc8:	617e      	str	r6, [r7, #20]
 8003fca:	0002      	movs	r2, r0
 8003fcc:	00d2      	lsls	r2, r2, #3
 8003fce:	613a      	str	r2, [r7, #16]
 8003fd0:	001a      	movs	r2, r3
 8003fd2:	603a      	str	r2, [r7, #0]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	6838      	ldr	r0, [r7, #0]
 8003fda:	6879      	ldr	r1, [r7, #4]
 8003fdc:	0002      	movs	r2, r0
 8003fde:	0f52      	lsrs	r2, r2, #29
 8003fe0:	000e      	movs	r6, r1
 8003fe2:	00f5      	lsls	r5, r6, #3
 8003fe4:	4315      	orrs	r5, r2
 8003fe6:	0002      	movs	r2, r0
 8003fe8:	00d4      	lsls	r4, r2, #3
 8003fea:	3307      	adds	r3, #7
 8003fec:	08db      	lsrs	r3, r3, #3
 8003fee:	00db      	lsls	r3, r3, #3
 8003ff0:	466a      	mov	r2, sp
 8003ff2:	1ad3      	subs	r3, r2, r3
 8003ff4:	469d      	mov	sp, r3
 8003ff6:	ab04      	add	r3, sp, #16
 8003ff8:	3300      	adds	r3, #0
 8003ffa:	21a5      	movs	r1, #165	@ 0xa5
 8003ffc:	0089      	lsls	r1, r1, #2
 8003ffe:	2018      	movs	r0, #24
 8004000:	180a      	adds	r2, r1, r0
 8004002:	19d2      	adds	r2, r2, r7
 8004004:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 8004006:	4e24      	ldr	r6, [pc, #144]	@ (8004098 <SENDDATA+0x154>)
 8004008:	1832      	adds	r2, r6, r0
 800400a:	19d3      	adds	r3, r2, r7
 800400c:	881b      	ldrh	r3, [r3, #0]
 800400e:	3301      	adds	r3, #1
 8004010:	001a      	movs	r2, r3
 8004012:	000c      	movs	r4, r1
 8004014:	0005      	movs	r5, r0
 8004016:	1821      	adds	r1, r4, r0
 8004018:	19cb      	adds	r3, r1, r7
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	2100      	movs	r1, #0
 800401e:	0018      	movs	r0, r3
 8004020:	f00b f9ec 	bl	800f3fc <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004024:	0028      	movs	r0, r5
 8004026:	1832      	adds	r2, r6, r0
 8004028:	19d3      	adds	r3, r2, r7
 800402a:	881a      	ldrh	r2, [r3, #0]
 800402c:	231c      	movs	r3, #28
 800402e:	18f9      	adds	r1, r7, r3
 8004030:	0005      	movs	r5, r0
 8004032:	1963      	adds	r3, r4, r5
 8004034:	19db      	adds	r3, r3, r7
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	0018      	movs	r0, r3
 800403a:	f00b f9e7 	bl	800f40c <strncpy>
  SetCommandBuffer(atCommand);
 800403e:	1963      	adds	r3, r4, r5
 8004040:	19db      	adds	r3, r3, r7
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	0018      	movs	r0, r3
 8004046:	f7ff fbd1 	bl	80037ec <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 800404a:	0028      	movs	r0, r5
 800404c:	1833      	adds	r3, r6, r0
 800404e:	19db      	adds	r3, r3, r7
 8004050:	881a      	ldrh	r2, [r3, #0]
 8004052:	1823      	adds	r3, r4, r0
 8004054:	19db      	adds	r3, r3, r7
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	0011      	movs	r1, r2
 800405a:	0018      	movs	r0, r3
 800405c:	f7ff fa9c 	bl	8003598 <ESP_Send>
 8004060:	1e03      	subs	r3, r0, #0
 8004062:	d001      	beq.n	8004068 <SENDDATA+0x124>
    return true;
 8004064:	2301      	movs	r3, #1
 8004066:	e000      	b.n	800406a <SENDDATA+0x126>
  }
  else{
    return false;
 8004068:	2300      	movs	r3, #0
 800406a:	46c5      	mov	sp, r8
  }
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	23ae      	movs	r3, #174	@ 0xae
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	449d      	add	sp, r3
 8004076:	bc80      	pop	{r7}
 8004078:	46b8      	mov	r8, r7
 800407a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800407c:	fffffd38 	.word	0xfffffd38
 8004080:	200004c4 	.word	0x200004c4
 8004084:	20000444 	.word	0x20000444
 8004088:	08011dd4 	.word	0x08011dd4
 800408c:	20000644 	.word	0x20000644
 8004090:	200005c4 	.word	0x200005c4
 8004094:	20000544 	.word	0x20000544
 8004098:	0000029e 	.word	0x0000029e

0800409c <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 800409c:	b5b0      	push	{r4, r5, r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	0002      	movs	r2, r0
 80040a4:	1dfb      	adds	r3, r7, #7
 80040a6:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 80040a8:	4b46      	ldr	r3, [pc, #280]	@ (80041c4 <DMA_ProcessBuffer+0x128>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	b2da      	uxtb	r2, r3
 80040b0:	210e      	movs	r1, #14
 80040b2:	187b      	adds	r3, r7, r1
 80040b4:	43d2      	mvns	r2, r2
 80040b6:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 80040b8:	200f      	movs	r0, #15
 80040ba:	183b      	adds	r3, r7, r0
 80040bc:	2203      	movs	r2, #3
 80040be:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 80040c0:	4b41      	ldr	r3, [pc, #260]	@ (80041c8 <DMA_ProcessBuffer+0x12c>)
 80040c2:	781b      	ldrb	r3, [r3, #0]
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	187a      	adds	r2, r7, r1
 80040c8:	7812      	ldrb	r2, [r2, #0]
 80040ca:	429a      	cmp	r2, r3
 80040cc:	d11c      	bne.n	8004108 <DMA_ProcessBuffer+0x6c>
      if(retry >4){
 80040ce:	4b3f      	ldr	r3, [pc, #252]	@ (80041cc <DMA_ProcessBuffer+0x130>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	2b04      	cmp	r3, #4
 80040d4:	d906      	bls.n	80040e4 <DMA_ProcessBuffer+0x48>
        //EspState = ESP_STATE_SEND;
        retry = 0;
 80040d6:	4b3d      	ldr	r3, [pc, #244]	@ (80041cc <DMA_ProcessBuffer+0x130>)
 80040d8:	2200      	movs	r2, #0
 80040da:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_TIMEOUT;
 80040dc:	183b      	adds	r3, r7, r0
 80040de:	2206      	movs	r2, #6
 80040e0:	701a      	strb	r2, [r3, #0]
 80040e2:	e011      	b.n	8004108 <DMA_ProcessBuffer+0x6c>
      }
     else{
       retry ++;
 80040e4:	4b39      	ldr	r3, [pc, #228]	@ (80041cc <DMA_ProcessBuffer+0x130>)
 80040e6:	781b      	ldrb	r3, [r3, #0]
 80040e8:	3301      	adds	r3, #1
 80040ea:	b2da      	uxtb	r2, r3
 80040ec:	4b37      	ldr	r3, [pc, #220]	@ (80041cc <DMA_ProcessBuffer+0x130>)
 80040ee:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80040f0:	f004 f920 	bl	8008334 <HAL_GetTick>
 80040f4:	0003      	movs	r3, r0
 80040f6:	33f5      	adds	r3, #245	@ 0xf5
 80040f8:	33ff      	adds	r3, #255	@ 0xff
 80040fa:	001a      	movs	r2, r3
 80040fc:	4b34      	ldr	r3, [pc, #208]	@ (80041d0 <DMA_ProcessBuffer+0x134>)
 80040fe:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 8004100:	230f      	movs	r3, #15
 8004102:	18fb      	adds	r3, r7, r3
 8004104:	2204      	movs	r2, #4
 8004106:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004108:	4b2f      	ldr	r3, [pc, #188]	@ (80041c8 <DMA_ProcessBuffer+0x12c>)
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	b2db      	uxtb	r3, r3
 800410e:	210e      	movs	r1, #14
 8004110:	187a      	adds	r2, r7, r1
 8004112:	7812      	ldrb	r2, [r2, #0]
 8004114:	429a      	cmp	r2, r3
 8004116:	d048      	beq.n	80041aa <DMA_ProcessBuffer+0x10e>
      retry = 0;
 8004118:	4b2c      	ldr	r3, [pc, #176]	@ (80041cc <DMA_ProcessBuffer+0x130>)
 800411a:	2200      	movs	r2, #0
 800411c:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 800411e:	4b2a      	ldr	r3, [pc, #168]	@ (80041c8 <DMA_ProcessBuffer+0x12c>)
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	b2db      	uxtb	r3, r3
 8004124:	187a      	adds	r2, r7, r1
 8004126:	7812      	ldrb	r2, [r2, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d917      	bls.n	800415c <DMA_ProcessBuffer+0xc0>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800412c:	4b26      	ldr	r3, [pc, #152]	@ (80041c8 <DMA_ProcessBuffer+0x12c>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	b2db      	uxtb	r3, r3
 8004132:	001a      	movs	r2, r3
 8004134:	4b27      	ldr	r3, [pc, #156]	@ (80041d4 <DMA_ProcessBuffer+0x138>)
 8004136:	18d0      	adds	r0, r2, r3
 8004138:	187b      	adds	r3, r7, r1
 800413a:	781b      	ldrb	r3, [r3, #0]
 800413c:	b29b      	uxth	r3, r3
 800413e:	4a22      	ldr	r2, [pc, #136]	@ (80041c8 <DMA_ProcessBuffer+0x12c>)
 8004140:	7812      	ldrb	r2, [r2, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	b299      	uxth	r1, r3
 8004148:	230f      	movs	r3, #15
 800414a:	18fc      	adds	r4, r7, r3
 800414c:	1dfb      	adds	r3, r7, #7
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	001a      	movs	r2, r3
 8004152:	f7ff fb61 	bl	8003818 <ParseBuffer>
 8004156:	0003      	movs	r3, r0
 8004158:	7023      	strb	r3, [r4, #0]
 800415a:	e026      	b.n	80041aa <DMA_ProcessBuffer+0x10e>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 800415c:	4b1a      	ldr	r3, [pc, #104]	@ (80041c8 <DMA_ProcessBuffer+0x12c>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	b2db      	uxtb	r3, r3
 8004162:	001a      	movs	r2, r3
 8004164:	4b1b      	ldr	r3, [pc, #108]	@ (80041d4 <DMA_ProcessBuffer+0x138>)
 8004166:	18d0      	adds	r0, r2, r3
 8004168:	4b17      	ldr	r3, [pc, #92]	@ (80041c8 <DMA_ProcessBuffer+0x12c>)
 800416a:	781b      	ldrb	r3, [r3, #0]
 800416c:	b2db      	uxtb	r3, r3
 800416e:	001a      	movs	r2, r3
 8004170:	23ff      	movs	r3, #255	@ 0xff
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	b299      	uxth	r1, r3
 8004176:	250f      	movs	r5, #15
 8004178:	197c      	adds	r4, r7, r5
 800417a:	1dfb      	adds	r3, r7, #7
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	001a      	movs	r2, r3
 8004180:	f7ff fb4a 	bl	8003818 <ParseBuffer>
 8004184:	0003      	movs	r3, r0
 8004186:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 8004188:	220e      	movs	r2, #14
 800418a:	18bb      	adds	r3, r7, r2
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	2b00      	cmp	r3, #0
 8004190:	d00b      	beq.n	80041aa <DMA_ProcessBuffer+0x10e>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004192:	18bb      	adds	r3, r7, r2
 8004194:	781b      	ldrb	r3, [r3, #0]
 8004196:	b299      	uxth	r1, r3
 8004198:	197c      	adds	r4, r7, r5
 800419a:	1dfb      	adds	r3, r7, #7
 800419c:	781a      	ldrb	r2, [r3, #0]
 800419e:	4b0d      	ldr	r3, [pc, #52]	@ (80041d4 <DMA_ProcessBuffer+0x138>)
 80041a0:	0018      	movs	r0, r3
 80041a2:	f7ff fb39 	bl	8003818 <ParseBuffer>
 80041a6:	0003      	movs	r3, r0
 80041a8:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 80041aa:	4b07      	ldr	r3, [pc, #28]	@ (80041c8 <DMA_ProcessBuffer+0x12c>)
 80041ac:	220e      	movs	r2, #14
 80041ae:	18ba      	adds	r2, r7, r2
 80041b0:	7812      	ldrb	r2, [r2, #0]
 80041b2:	701a      	strb	r2, [r3, #0]
    return status;
 80041b4:	230f      	movs	r3, #15
 80041b6:	18fb      	adds	r3, r7, r3
 80041b8:	781b      	ldrb	r3, [r3, #0]
}
 80041ba:	0018      	movs	r0, r3
 80041bc:	46bd      	mov	sp, r7
 80041be:	b004      	add	sp, #16
 80041c0:	bdb0      	pop	{r4, r5, r7, pc}
 80041c2:	46c0      	nop			@ (mov r8, r8)
 80041c4:	200011b4 	.word	0x200011b4
 80041c8:	200006c4 	.word	0x200006c4
 80041cc:	200006cc 	.word	0x200006cc
 80041d0:	200006c8 	.word	0x200006c8
 80041d4:	2000033c 	.word	0x2000033c

080041d8 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	0002      	movs	r2, r0
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	701a      	strb	r2, [r3, #0]
 80041e4:	1dbb      	adds	r3, r7, #6
 80041e6:	1c0a      	adds	r2, r1, #0
 80041e8:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80041ea:	210f      	movs	r1, #15
 80041ec:	187b      	adds	r3, r7, r1
 80041ee:	2200      	movs	r2, #0
 80041f0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80041f2:	1dbb      	adds	r3, r7, #6
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d105      	bne.n	8004206 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80041fa:	187b      	adds	r3, r7, r1
 80041fc:	1dfa      	adds	r2, r7, #7
 80041fe:	7812      	ldrb	r2, [r2, #0]
 8004200:	4251      	negs	r1, r2
 8004202:	414a      	adcs	r2, r1
 8004204:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004206:	1dbb      	adds	r3, r7, #6
 8004208:	781b      	ldrb	r3, [r3, #0]
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 800420e:	230f      	movs	r3, #15
 8004210:	18fb      	adds	r3, r7, r3
 8004212:	1dfa      	adds	r2, r7, #7
 8004214:	7812      	ldrb	r2, [r2, #0]
 8004216:	3a02      	subs	r2, #2
 8004218:	4251      	negs	r1, r2
 800421a:	414a      	adcs	r2, r1
 800421c:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 800421e:	1dbb      	adds	r3, r7, #6
 8004220:	781b      	ldrb	r3, [r3, #0]
 8004222:	2b02      	cmp	r3, #2
 8004224:	d107      	bne.n	8004236 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004226:	230f      	movs	r3, #15
 8004228:	18fb      	adds	r3, r7, r3
 800422a:	1dfa      	adds	r2, r7, #7
 800422c:	7812      	ldrb	r2, [r2, #0]
 800422e:	3a05      	subs	r2, #5
 8004230:	4251      	negs	r1, r2
 8004232:	414a      	adcs	r2, r1
 8004234:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004236:	230f      	movs	r3, #15
 8004238:	18fb      	adds	r3, r7, r3
 800423a:	781b      	ldrb	r3, [r3, #0]
}
 800423c:	0018      	movs	r0, r3
 800423e:	46bd      	mov	sp, r7
 8004240:	b004      	add	sp, #16
 8004242:	bd80      	pop	{r7, pc}

08004244 <AT_Send>:

bool AT_Send(AT_Commands state){
 8004244:	b590      	push	{r4, r7, lr}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	0002      	movs	r2, r0
 800424c:	1dfb      	adds	r3, r7, #7
 800424e:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004250:	230f      	movs	r3, #15
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	2200      	movs	r2, #0
 8004256:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004258:	1dfb      	adds	r3, r7, #7
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	2b0d      	cmp	r3, #13
 800425e:	d900      	bls.n	8004262 <AT_Send+0x1e>
 8004260:	e122      	b.n	80044a8 <AT_Send+0x264>
 8004262:	009a      	lsls	r2, r3, #2
 8004264:	4b94      	ldr	r3, [pc, #592]	@ (80044b8 <AT_Send+0x274>)
 8004266:	18d3      	adds	r3, r2, r3
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 800426c:	4b93      	ldr	r3, [pc, #588]	@ (80044bc <AT_Send+0x278>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	0018      	movs	r0, r3
 8004272:	f003 fc11 	bl	8007a98 <TimestampIsReached>
 8004276:	1e03      	subs	r3, r0, #0
 8004278:	d100      	bne.n	800427c <AT_Send+0x38>
 800427a:	e114      	b.n	80044a6 <AT_Send+0x262>
    ATCommandSend = PollAwake();
 800427c:	230f      	movs	r3, #15
 800427e:	18fc      	adds	r4, r7, r3
 8004280:	f7ff fbe6 	bl	8003a50 <PollAwake>
 8004284:	0003      	movs	r3, r0
 8004286:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004288:	f004 f854 	bl	8008334 <HAL_GetTick>
 800428c:	0003      	movs	r3, r0
 800428e:	330a      	adds	r3, #10
 8004290:	001a      	movs	r2, r3
 8004292:	4b8a      	ldr	r3, [pc, #552]	@ (80044bc <AT_Send+0x278>)
 8004294:	601a      	str	r2, [r3, #0]
  }
  break;
 8004296:	e106      	b.n	80044a6 <AT_Send+0x262>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004298:	4a89      	ldr	r2, [pc, #548]	@ (80044c0 <AT_Send+0x27c>)
 800429a:	4b8a      	ldr	r3, [pc, #552]	@ (80044c4 <AT_Send+0x280>)
 800429c:	0019      	movs	r1, r3
 800429e:	2003      	movs	r0, #3
 80042a0:	f003 fc50 	bl	8007b44 <CreateLine>
    ATCommandSend = RFPower();
 80042a4:	230f      	movs	r3, #15
 80042a6:	18fc      	adds	r4, r7, r3
 80042a8:	f7ff fbf2 	bl	8003a90 <RFPower>
 80042ac:	0003      	movs	r3, r0
 80042ae:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80042b0:	f004 f840 	bl	8008334 <HAL_GetTick>
 80042b4:	0003      	movs	r3, r0
 80042b6:	330a      	adds	r3, #10
 80042b8:	001a      	movs	r2, r3
 80042ba:	4b80      	ldr	r3, [pc, #512]	@ (80044bc <AT_Send+0x278>)
 80042bc:	601a      	str	r2, [r3, #0]
    break;
 80042be:	e0f3      	b.n	80044a8 <AT_Send+0x264>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 80042c0:	4a81      	ldr	r2, [pc, #516]	@ (80044c8 <AT_Send+0x284>)
 80042c2:	4b80      	ldr	r3, [pc, #512]	@ (80044c4 <AT_Send+0x280>)
 80042c4:	0019      	movs	r1, r3
 80042c6:	2003      	movs	r0, #3
 80042c8:	f003 fc3c 	bl	8007b44 <CreateLine>
    ATCommandSend = CheckRFPower();
 80042cc:	230f      	movs	r3, #15
 80042ce:	18fc      	adds	r4, r7, r3
 80042d0:	f7ff fbfe 	bl	8003ad0 <CheckRFPower>
 80042d4:	0003      	movs	r3, r0
 80042d6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80042d8:	f004 f82c 	bl	8008334 <HAL_GetTick>
 80042dc:	0003      	movs	r3, r0
 80042de:	330a      	adds	r3, #10
 80042e0:	001a      	movs	r2, r3
 80042e2:	4b76      	ldr	r3, [pc, #472]	@ (80044bc <AT_Send+0x278>)
 80042e4:	601a      	str	r2, [r3, #0]
    break;
 80042e6:	e0df      	b.n	80044a8 <AT_Send+0x264>

  case AT_RESTORE:
    Debug("Restoring ESP");
 80042e8:	4a78      	ldr	r2, [pc, #480]	@ (80044cc <AT_Send+0x288>)
 80042ea:	4b76      	ldr	r3, [pc, #472]	@ (80044c4 <AT_Send+0x280>)
 80042ec:	0019      	movs	r1, r3
 80042ee:	2003      	movs	r0, #3
 80042f0:	f003 fc28 	bl	8007b44 <CreateLine>
    ATCommandSend = ATRestore();
 80042f4:	230f      	movs	r3, #15
 80042f6:	18fc      	adds	r4, r7, r3
 80042f8:	f7ff fc0a 	bl	8003b10 <ATRestore>
 80042fc:	0003      	movs	r3, r0
 80042fe:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004300:	f004 f818 	bl	8008334 <HAL_GetTick>
 8004304:	0003      	movs	r3, r0
 8004306:	3332      	adds	r3, #50	@ 0x32
 8004308:	001a      	movs	r2, r3
 800430a:	4b6c      	ldr	r3, [pc, #432]	@ (80044bc <AT_Send+0x278>)
 800430c:	601a      	str	r2, [r3, #0]
    break;
 800430e:	e0cb      	b.n	80044a8 <AT_Send+0x264>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004310:	4a6f      	ldr	r2, [pc, #444]	@ (80044d0 <AT_Send+0x28c>)
 8004312:	4b6c      	ldr	r3, [pc, #432]	@ (80044c4 <AT_Send+0x280>)
 8004314:	0019      	movs	r1, r3
 8004316:	2003      	movs	r0, #3
 8004318:	f003 fc14 	bl	8007b44 <CreateLine>
    ATCommandSend = CWINIT();
 800431c:	230f      	movs	r3, #15
 800431e:	18fc      	adds	r4, r7, r3
 8004320:	f7ff fc16 	bl	8003b50 <CWINIT>
 8004324:	0003      	movs	r3, r0
 8004326:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004328:	f004 f804 	bl	8008334 <HAL_GetTick>
 800432c:	0003      	movs	r3, r0
 800432e:	33f5      	adds	r3, #245	@ 0xf5
 8004330:	33ff      	adds	r3, #255	@ 0xff
 8004332:	001a      	movs	r2, r3
 8004334:	4b61      	ldr	r3, [pc, #388]	@ (80044bc <AT_Send+0x278>)
 8004336:	601a      	str	r2, [r3, #0]
    break;
 8004338:	e0b6      	b.n	80044a8 <AT_Send+0x264>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 800433a:	4a66      	ldr	r2, [pc, #408]	@ (80044d4 <AT_Send+0x290>)
 800433c:	4b61      	ldr	r3, [pc, #388]	@ (80044c4 <AT_Send+0x280>)
 800433e:	0019      	movs	r1, r3
 8004340:	2003      	movs	r0, #3
 8004342:	f003 fbff 	bl	8007b44 <CreateLine>
    ATCommandSend = CWMODE1();
 8004346:	230f      	movs	r3, #15
 8004348:	18fc      	adds	r4, r7, r3
 800434a:	f7ff fc21 	bl	8003b90 <CWMODE1>
 800434e:	0003      	movs	r3, r0
 8004350:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004352:	f003 ffef 	bl	8008334 <HAL_GetTick>
 8004356:	0003      	movs	r3, r0
 8004358:	330a      	adds	r3, #10
 800435a:	001a      	movs	r2, r3
 800435c:	4b57      	ldr	r3, [pc, #348]	@ (80044bc <AT_Send+0x278>)
 800435e:	601a      	str	r2, [r3, #0]
    break;
 8004360:	e0a2      	b.n	80044a8 <AT_Send+0x264>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004362:	4a5d      	ldr	r2, [pc, #372]	@ (80044d8 <AT_Send+0x294>)
 8004364:	4b57      	ldr	r3, [pc, #348]	@ (80044c4 <AT_Send+0x280>)
 8004366:	0019      	movs	r1, r3
 8004368:	2003      	movs	r0, #3
 800436a:	f003 fbeb 	bl	8007b44 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 800436e:	230f      	movs	r3, #15
 8004370:	18fc      	adds	r4, r7, r3
 8004372:	f7ff fc2d 	bl	8003bd0 <CWAUTOCONN>
 8004376:	0003      	movs	r3, r0
 8004378:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800437a:	f003 ffdb 	bl	8008334 <HAL_GetTick>
 800437e:	0003      	movs	r3, r0
 8004380:	330a      	adds	r3, #10
 8004382:	001a      	movs	r2, r3
 8004384:	4b4d      	ldr	r3, [pc, #308]	@ (80044bc <AT_Send+0x278>)
 8004386:	601a      	str	r2, [r3, #0]
    break;
 8004388:	e08e      	b.n	80044a8 <AT_Send+0x264>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 800438a:	4a54      	ldr	r2, [pc, #336]	@ (80044dc <AT_Send+0x298>)
 800438c:	4b4d      	ldr	r3, [pc, #308]	@ (80044c4 <AT_Send+0x280>)
 800438e:	0019      	movs	r1, r3
 8004390:	2003      	movs	r0, #3
 8004392:	f003 fbd7 	bl	8007b44 <CreateLine>
    ATCommandSend = CWJAP();
 8004396:	230f      	movs	r3, #15
 8004398:	18fc      	adds	r4, r7, r3
 800439a:	f7ff fc39 	bl	8003c10 <CWJAP>
 800439e:	0003      	movs	r3, r0
 80043a0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80043a2:	f003 ffc7 	bl	8008334 <HAL_GetTick>
 80043a6:	0003      	movs	r3, r0
 80043a8:	3332      	adds	r3, #50	@ 0x32
 80043aa:	001a      	movs	r2, r3
 80043ac:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <AT_Send+0x278>)
 80043ae:	601a      	str	r2, [r3, #0]
    break;
 80043b0:	e07a      	b.n	80044a8 <AT_Send+0x264>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80043b2:	4a4b      	ldr	r2, [pc, #300]	@ (80044e0 <AT_Send+0x29c>)
 80043b4:	4b43      	ldr	r3, [pc, #268]	@ (80044c4 <AT_Send+0x280>)
 80043b6:	0019      	movs	r1, r3
 80043b8:	2003      	movs	r0, #3
 80043ba:	f003 fbc3 	bl	8007b44 <CreateLine>
    ATCommandSend = CWMODE3();
 80043be:	230f      	movs	r3, #15
 80043c0:	18fc      	adds	r4, r7, r3
 80043c2:	f7ff fca3 	bl	8003d0c <CWMODE3>
 80043c6:	0003      	movs	r3, r0
 80043c8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80043ca:	f003 ffb3 	bl	8008334 <HAL_GetTick>
 80043ce:	0003      	movs	r3, r0
 80043d0:	330a      	adds	r3, #10
 80043d2:	001a      	movs	r2, r3
 80043d4:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <AT_Send+0x278>)
 80043d6:	601a      	str	r2, [r3, #0]
    break;
 80043d8:	e066      	b.n	80044a8 <AT_Send+0x264>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80043da:	4a42      	ldr	r2, [pc, #264]	@ (80044e4 <AT_Send+0x2a0>)
 80043dc:	4b39      	ldr	r3, [pc, #228]	@ (80044c4 <AT_Send+0x280>)
 80043de:	0019      	movs	r1, r3
 80043e0:	2003      	movs	r0, #3
 80043e2:	f003 fbaf 	bl	8007b44 <CreateLine>
    ATCommandSend = CWSAP();
 80043e6:	230f      	movs	r3, #15
 80043e8:	18fc      	adds	r4, r7, r3
 80043ea:	f7ff fcaf 	bl	8003d4c <CWSAP>
 80043ee:	0003      	movs	r3, r0
 80043f0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80043f2:	f003 ff9f 	bl	8008334 <HAL_GetTick>
 80043f6:	0003      	movs	r3, r0
 80043f8:	330a      	adds	r3, #10
 80043fa:	001a      	movs	r2, r3
 80043fc:	4b2f      	ldr	r3, [pc, #188]	@ (80044bc <AT_Send+0x278>)
 80043fe:	601a      	str	r2, [r3, #0]
    break;
 8004400:	e052      	b.n	80044a8 <AT_Send+0x264>

  case AT_CIPMUX:
    Debug("SET in station/soft-ap mode");
 8004402:	4a37      	ldr	r2, [pc, #220]	@ (80044e0 <AT_Send+0x29c>)
 8004404:	4b2f      	ldr	r3, [pc, #188]	@ (80044c4 <AT_Send+0x280>)
 8004406:	0019      	movs	r1, r3
 8004408:	2003      	movs	r0, #3
 800440a:	f003 fb9b 	bl	8007b44 <CreateLine>
    ATCommandSend = CIPMUX();
 800440e:	230f      	movs	r3, #15
 8004410:	18fc      	adds	r4, r7, r3
 8004412:	f7ff fcbb 	bl	8003d8c <CIPMUX>
 8004416:	0003      	movs	r3, r0
 8004418:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800441a:	f003 ff8b 	bl	8008334 <HAL_GetTick>
 800441e:	0003      	movs	r3, r0
 8004420:	330a      	adds	r3, #10
 8004422:	001a      	movs	r2, r3
 8004424:	4b25      	ldr	r3, [pc, #148]	@ (80044bc <AT_Send+0x278>)
 8004426:	601a      	str	r2, [r3, #0]
    break;
 8004428:	e03e      	b.n	80044a8 <AT_Send+0x264>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 800442a:	4a2d      	ldr	r2, [pc, #180]	@ (80044e0 <AT_Send+0x29c>)
 800442c:	4b25      	ldr	r3, [pc, #148]	@ (80044c4 <AT_Send+0x280>)
 800442e:	0019      	movs	r1, r3
 8004430:	2003      	movs	r0, #3
 8004432:	f003 fb87 	bl	8007b44 <CreateLine>
    ATCommandSend = WEBSERVER();
 8004436:	230f      	movs	r3, #15
 8004438:	18fc      	adds	r4, r7, r3
 800443a:	f7ff fcc7 	bl	8003dcc <WEBSERVER>
 800443e:	0003      	movs	r3, r0
 8004440:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004442:	f003 ff77 	bl	8008334 <HAL_GetTick>
 8004446:	0003      	movs	r3, r0
 8004448:	330a      	adds	r3, #10
 800444a:	001a      	movs	r2, r3
 800444c:	4b1b      	ldr	r3, [pc, #108]	@ (80044bc <AT_Send+0x278>)
 800444e:	601a      	str	r2, [r3, #0]
    break;
 8004450:	e02a      	b.n	80044a8 <AT_Send+0x264>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 8004452:	4a23      	ldr	r2, [pc, #140]	@ (80044e0 <AT_Send+0x29c>)
 8004454:	4b1b      	ldr	r3, [pc, #108]	@ (80044c4 <AT_Send+0x280>)
 8004456:	0019      	movs	r1, r3
 8004458:	2003      	movs	r0, #3
 800445a:	f003 fb73 	bl	8007b44 <CreateLine>
    ATCommandSend = HTTPCPOST();
 800445e:	230f      	movs	r3, #15
 8004460:	18fc      	adds	r4, r7, r3
 8004462:	f7ff fcd3 	bl	8003e0c <HTTPCPOST>
 8004466:	0003      	movs	r3, r0
 8004468:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800446a:	f003 ff63 	bl	8008334 <HAL_GetTick>
 800446e:	0003      	movs	r3, r0
 8004470:	33f5      	adds	r3, #245	@ 0xf5
 8004472:	33ff      	adds	r3, #255	@ 0xff
 8004474:	001a      	movs	r2, r3
 8004476:	4b11      	ldr	r3, [pc, #68]	@ (80044bc <AT_Send+0x278>)
 8004478:	601a      	str	r2, [r3, #0]
    break;
 800447a:	e015      	b.n	80044a8 <AT_Send+0x264>

  case AT_SENDDATA:
    Debug("Send the data");
 800447c:	4a1a      	ldr	r2, [pc, #104]	@ (80044e8 <AT_Send+0x2a4>)
 800447e:	4b11      	ldr	r3, [pc, #68]	@ (80044c4 <AT_Send+0x280>)
 8004480:	0019      	movs	r1, r3
 8004482:	2003      	movs	r0, #3
 8004484:	f003 fb5e 	bl	8007b44 <CreateLine>
    ATCommandSend = SENDDATA();
 8004488:	230f      	movs	r3, #15
 800448a:	18fc      	adds	r4, r7, r3
 800448c:	f7ff fd5a 	bl	8003f44 <SENDDATA>
 8004490:	0003      	movs	r3, r0
 8004492:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004494:	f003 ff4e 	bl	8008334 <HAL_GetTick>
 8004498:	0003      	movs	r3, r0
 800449a:	33f5      	adds	r3, #245	@ 0xf5
 800449c:	33ff      	adds	r3, #255	@ 0xff
 800449e:	001a      	movs	r2, r3
 80044a0:	4b06      	ldr	r3, [pc, #24]	@ (80044bc <AT_Send+0x278>)
 80044a2:	601a      	str	r2, [r3, #0]
    break;
 80044a4:	e000      	b.n	80044a8 <AT_Send+0x264>
  break;
 80044a6:	46c0      	nop			@ (mov r8, r8)

  }

  return(ATCommandSend);
 80044a8:	230f      	movs	r3, #15
 80044aa:	18fb      	adds	r3, r7, r3
 80044ac:	781b      	ldrb	r3, [r3, #0]
}
 80044ae:	0018      	movs	r0, r3
 80044b0:	46bd      	mov	sp, r7
 80044b2:	b005      	add	sp, #20
 80044b4:	bd90      	pop	{r4, r7, pc}
 80044b6:	46c0      	nop			@ (mov r8, r8)
 80044b8:	08012540 	.word	0x08012540
 80044bc:	200006c8 	.word	0x200006c8
 80044c0:	08011df4 	.word	0x08011df4
 80044c4:	08011b20 	.word	0x08011b20
 80044c8:	08011e08 	.word	0x08011e08
 80044cc:	08011e1c 	.word	0x08011e1c
 80044d0:	08011e2c 	.word	0x08011e2c
 80044d4:	08011e40 	.word	0x08011e40
 80044d8:	08011e58 	.word	0x08011e58
 80044dc:	08011e70 	.word	0x08011e70
 80044e0:	08011e84 	.word	0x08011e84
 80044e4:	08011ea0 	.word	0x08011ea0
 80044e8:	08011ebc 	.word	0x08011ebc

080044ec <ESP_Upkeep>:

void ESP_Upkeep(void) {
 80044ec:	b590      	push	{r4, r7, lr}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
  bool ATSend = false;
 80044f2:	1dfb      	adds	r3, r7, #7
 80044f4:	2200      	movs	r2, #0
 80044f6:	701a      	strb	r2, [r3, #0]
  uint8_t ATReceived = RECEIVE_STATUS_INCOMPLETE;
 80044f8:	1dbb      	adds	r3, r7, #6
 80044fa:	2203      	movs	r2, #3
 80044fc:	701a      	strb	r2, [r3, #0]
  switch (EspState) {
 80044fe:	4b83      	ldr	r3, [pc, #524]	@ (800470c <ESP_Upkeep+0x220>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b09      	cmp	r3, #9
 8004504:	d900      	bls.n	8004508 <ESP_Upkeep+0x1c>
 8004506:	e0f0      	b.n	80046ea <ESP_Upkeep+0x1fe>
 8004508:	009a      	lsls	r2, r3, #2
 800450a:	4b81      	ldr	r3, [pc, #516]	@ (8004710 <ESP_Upkeep+0x224>)
 800450c:	18d3      	adds	r3, r2, r3
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004512:	4b7e      	ldr	r3, [pc, #504]	@ (800470c <ESP_Upkeep+0x220>)
 8004514:	2201      	movs	r2, #1
 8004516:	701a      	strb	r2, [r3, #0]
      break;
 8004518:	e0f4      	b.n	8004704 <ESP_Upkeep+0x218>
//      ATCommands[offset++] = (ATCommands) {};
      // TODO: Add turning on the ESP32 and wait for ready after, so we know for sure that the ESP is on.
      // Initialization state
//      StartUpTime = GetCurrentHalTicks() + ESP_START_UP_TIME;
//      StartUpDone = false;
      if(!EspTurnedOn) {
 800451a:	4b7e      	ldr	r3, [pc, #504]	@ (8004714 <ESP_Upkeep+0x228>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	2201      	movs	r2, #1
 8004520:	4053      	eors	r3, r2
 8004522:	b2db      	uxtb	r3, r3
 8004524:	2b00      	cmp	r3, #0
 8004526:	d01e      	beq.n	8004566 <ESP_Upkeep+0x7a>

        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004528:	2380      	movs	r3, #128	@ 0x80
 800452a:	011b      	lsls	r3, r3, #4
 800452c:	487a      	ldr	r0, [pc, #488]	@ (8004718 <ESP_Upkeep+0x22c>)
 800452e:	2200      	movs	r2, #0
 8004530:	0019      	movs	r1, r3
 8004532:	f004 fd17 	bl	8008f64 <HAL_GPIO_WritePin>
//        // Turn ESP on.
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004536:	2380      	movs	r3, #128	@ 0x80
 8004538:	011b      	lsls	r3, r3, #4
 800453a:	4877      	ldr	r0, [pc, #476]	@ (8004718 <ESP_Upkeep+0x22c>)
 800453c:	2201      	movs	r2, #1
 800453e:	0019      	movs	r1, r3
 8004540:	f004 fd10 	bl	8008f64 <HAL_GPIO_WritePin>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004544:	4b75      	ldr	r3, [pc, #468]	@ (800471c <ESP_Upkeep+0x230>)
 8004546:	2201      	movs	r2, #1
 8004548:	2101      	movs	r1, #1
 800454a:	0018      	movs	r0, r3
 800454c:	f004 fd0a 	bl	8008f64 <HAL_GPIO_WritePin>
//        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004550:	f003 fef0 	bl	8008334 <HAL_GetTick>
 8004554:	0003      	movs	r3, r0
 8004556:	22af      	movs	r2, #175	@ 0xaf
 8004558:	0092      	lsls	r2, r2, #2
 800455a:	189a      	adds	r2, r3, r2
 800455c:	4b70      	ldr	r3, [pc, #448]	@ (8004720 <ESP_Upkeep+0x234>)
 800455e:	601a      	str	r2, [r3, #0]

        EspTurnedOn = true;
 8004560:	4b6c      	ldr	r3, [pc, #432]	@ (8004714 <ESP_Upkeep+0x228>)
 8004562:	2201      	movs	r2, #1
 8004564:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004566:	4b6f      	ldr	r3, [pc, #444]	@ (8004724 <ESP_Upkeep+0x238>)
 8004568:	21ff      	movs	r1, #255	@ 0xff
 800456a:	0018      	movs	r0, r3
 800456c:	f7ff f83e 	bl	80035ec <ESP_Receive>
 8004570:	1e03      	subs	r3, r0, #0
 8004572:	d100      	bne.n	8004576 <ESP_Upkeep+0x8a>
 8004574:	e0bf      	b.n	80046f6 <ESP_Upkeep+0x20a>
        EspState = ESP_STATE_SEND;
 8004576:	4b65      	ldr	r3, [pc, #404]	@ (800470c <ESP_Upkeep+0x220>)
 8004578:	2204      	movs	r2, #4
 800457a:	701a      	strb	r2, [r3, #0]
      }
      break;
 800457c:	e0bb      	b.n	80046f6 <ESP_Upkeep+0x20a>

    case ESP_STATE_SEND:
        ATSend = AT_Send(nextATCommand);
 800457e:	4b6a      	ldr	r3, [pc, #424]	@ (8004728 <ESP_Upkeep+0x23c>)
 8004580:	781b      	ldrb	r3, [r3, #0]
 8004582:	1dfc      	adds	r4, r7, #7
 8004584:	0018      	movs	r0, r3
 8004586:	f7ff fe5d 	bl	8004244 <AT_Send>
 800458a:	0003      	movs	r3, r0
 800458c:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 800458e:	1dfb      	adds	r3, r7, #7
 8004590:	781b      	ldrb	r3, [r3, #0]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d100      	bne.n	8004598 <ESP_Upkeep+0xac>
 8004596:	e0b0      	b.n	80046fa <ESP_Upkeep+0x20e>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004598:	4b5c      	ldr	r3, [pc, #368]	@ (800470c <ESP_Upkeep+0x220>)
 800459a:	2203      	movs	r2, #3
 800459c:	701a      	strb	r2, [r3, #0]
        }
         break;
 800459e:	e0ac      	b.n	80046fa <ESP_Upkeep+0x20e>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80045a0:	4b5f      	ldr	r3, [pc, #380]	@ (8004720 <ESP_Upkeep+0x234>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	0018      	movs	r0, r3
 80045a6:	f003 fa77 	bl	8007a98 <TimestampIsReached>
 80045aa:	1e03      	subs	r3, r0, #0
 80045ac:	d100      	bne.n	80045b0 <ESP_Upkeep+0xc4>
 80045ae:	e0a6      	b.n	80046fe <ESP_Upkeep+0x212>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80045b0:	4b5e      	ldr	r3, [pc, #376]	@ (800472c <ESP_Upkeep+0x240>)
 80045b2:	781b      	ldrb	r3, [r3, #0]
 80045b4:	1dbc      	adds	r4, r7, #6
 80045b6:	0018      	movs	r0, r3
 80045b8:	f7ff fd70 	bl	800409c <DMA_ProcessBuffer>
 80045bc:	0003      	movs	r3, r0
 80045be:	7023      	strb	r3, [r4, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80045c0:	4b5a      	ldr	r3, [pc, #360]	@ (800472c <ESP_Upkeep+0x240>)
 80045c2:	781a      	ldrb	r2, [r3, #0]
 80045c4:	1d7c      	adds	r4, r7, #5
 80045c6:	1dbb      	adds	r3, r7, #6
 80045c8:	781b      	ldrb	r3, [r3, #0]
 80045ca:	0011      	movs	r1, r2
 80045cc:	0018      	movs	r0, r3
 80045ce:	f7ff fe03 	bl	80041d8 <ATCompare>
 80045d2:	0003      	movs	r3, r0
 80045d4:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80045d6:	1dbb      	adds	r3, r7, #6
 80045d8:	781b      	ldrb	r3, [r3, #0]
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d102      	bne.n	80045e4 <ESP_Upkeep+0xf8>
          EspState = ESP_STATE_SEND;
 80045de:	4b4b      	ldr	r3, [pc, #300]	@ (800470c <ESP_Upkeep+0x220>)
 80045e0:	2204      	movs	r2, #4
 80045e2:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 80045e4:	1dbb      	adds	r3, r7, #6
 80045e6:	781b      	ldrb	r3, [r3, #0]
 80045e8:	2b03      	cmp	r3, #3
 80045ea:	d106      	bne.n	80045fa <ESP_Upkeep+0x10e>
          ESPTimeStamp = HAL_GetTick() + 10;
 80045ec:	f003 fea2 	bl	8008334 <HAL_GetTick>
 80045f0:	0003      	movs	r3, r0
 80045f2:	330a      	adds	r3, #10
 80045f4:	001a      	movs	r2, r3
 80045f6:	4b4a      	ldr	r3, [pc, #296]	@ (8004720 <ESP_Upkeep+0x234>)
 80045f8:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 80045fa:	1dbb      	adds	r3, r7, #6
 80045fc:	781b      	ldrb	r3, [r3, #0]
 80045fe:	2b06      	cmp	r3, #6
 8004600:	d113      	bne.n	800462a <ESP_Upkeep+0x13e>
          if(nextATCommand != AT_SENDDATA){
 8004602:	4b49      	ldr	r3, [pc, #292]	@ (8004728 <ESP_Upkeep+0x23c>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b0d      	cmp	r3, #13
 8004608:	d003      	beq.n	8004612 <ESP_Upkeep+0x126>
            EspState = ESP_STATE_SEND;
 800460a:	4b40      	ldr	r3, [pc, #256]	@ (800470c <ESP_Upkeep+0x220>)
 800460c:	2204      	movs	r2, #4
 800460e:	701a      	strb	r2, [r3, #0]
 8004610:	e00b      	b.n	800462a <ESP_Upkeep+0x13e>
          }
          else{
            nextATCommand = AT_HTTPCPOST;
 8004612:	4b45      	ldr	r3, [pc, #276]	@ (8004728 <ESP_Upkeep+0x23c>)
 8004614:	220c      	movs	r2, #12
 8004616:	701a      	strb	r2, [r3, #0]
            ATCommands = AT_HTTPCPOST;
 8004618:	4b45      	ldr	r3, [pc, #276]	@ (8004730 <ESP_Upkeep+0x244>)
 800461a:	220c      	movs	r2, #12
 800461c:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800461e:	4b43      	ldr	r3, [pc, #268]	@ (800472c <ESP_Upkeep+0x240>)
 8004620:	2202      	movs	r2, #2
 8004622:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004624:	4b39      	ldr	r3, [pc, #228]	@ (800470c <ESP_Upkeep+0x220>)
 8004626:	2204      	movs	r2, #4
 8004628:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 800462a:	1d7b      	adds	r3, r7, #5
 800462c:	781b      	ldrb	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d065      	beq.n	80046fe <ESP_Upkeep+0x212>
          EspState = ESP_STATE_NEXT_AT;
 8004632:	4b36      	ldr	r3, [pc, #216]	@ (800470c <ESP_Upkeep+0x220>)
 8004634:	2205      	movs	r2, #5
 8004636:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004638:	e061      	b.n	80046fe <ESP_Upkeep+0x212>

    case ESP_STATE_NEXT_AT:
      if(ATCommands < AT_SENDDATA){
 800463a:	4b3d      	ldr	r3, [pc, #244]	@ (8004730 <ESP_Upkeep+0x244>)
 800463c:	781b      	ldrb	r3, [r3, #0]
 800463e:	2b0c      	cmp	r3, #12
 8004640:	d82a      	bhi.n	8004698 <ESP_Upkeep+0x1ac>
        ATCommands = ATCommands+1;
 8004642:	4b3b      	ldr	r3, [pc, #236]	@ (8004730 <ESP_Upkeep+0x244>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	3301      	adds	r3, #1
 8004648:	b2da      	uxtb	r2, r3
 800464a:	4b39      	ldr	r3, [pc, #228]	@ (8004730 <ESP_Upkeep+0x244>)
 800464c:	701a      	strb	r2, [r3, #0]
        if(ATCommands == AT_RESTORE){
 800464e:	4b38      	ldr	r3, [pc, #224]	@ (8004730 <ESP_Upkeep+0x244>)
 8004650:	781b      	ldrb	r3, [r3, #0]
 8004652:	2b03      	cmp	r3, #3
 8004654:	d102      	bne.n	800465c <ESP_Upkeep+0x170>
            ATExpectation = RECEIVE_EXPECTATION_READY;
 8004656:	4b35      	ldr	r3, [pc, #212]	@ (800472c <ESP_Upkeep+0x240>)
 8004658:	2201      	movs	r2, #1
 800465a:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands == AT_HTTPCPOST){
 800465c:	4b34      	ldr	r3, [pc, #208]	@ (8004730 <ESP_Upkeep+0x244>)
 800465e:	781b      	ldrb	r3, [r3, #0]
 8004660:	2b0c      	cmp	r3, #12
 8004662:	d102      	bne.n	800466a <ESP_Upkeep+0x17e>
          ATExpectation = RECEIVE_EXPECTATION_START;
 8004664:	4b31      	ldr	r3, [pc, #196]	@ (800472c <ESP_Upkeep+0x240>)
 8004666:	2202      	movs	r2, #2
 8004668:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommands != AT_HTTPCPOST && ATCommands != AT_RESTORE){
 800466a:	4b31      	ldr	r3, [pc, #196]	@ (8004730 <ESP_Upkeep+0x244>)
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	2b0c      	cmp	r3, #12
 8004670:	d006      	beq.n	8004680 <ESP_Upkeep+0x194>
 8004672:	4b2f      	ldr	r3, [pc, #188]	@ (8004730 <ESP_Upkeep+0x244>)
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	2b03      	cmp	r3, #3
 8004678:	d002      	beq.n	8004680 <ESP_Upkeep+0x194>
          ATExpectation = RECEIVE_EXPECTATION_OK;
 800467a:	4b2c      	ldr	r3, [pc, #176]	@ (800472c <ESP_Upkeep+0x240>)
 800467c:	2200      	movs	r2, #0
 800467e:	701a      	strb	r2, [r3, #0]
        }
        EspState = EspState = ESP_STATE_SEND;
 8004680:	4b22      	ldr	r3, [pc, #136]	@ (800470c <ESP_Upkeep+0x220>)
 8004682:	2204      	movs	r2, #4
 8004684:	701a      	strb	r2, [r3, #0]
 8004686:	4b21      	ldr	r3, [pc, #132]	@ (800470c <ESP_Upkeep+0x220>)
 8004688:	781a      	ldrb	r2, [r3, #0]
 800468a:	4b20      	ldr	r3, [pc, #128]	@ (800470c <ESP_Upkeep+0x220>)
 800468c:	701a      	strb	r2, [r3, #0]
        nextATCommand = ATCommands;
 800468e:	4b28      	ldr	r3, [pc, #160]	@ (8004730 <ESP_Upkeep+0x244>)
 8004690:	781a      	ldrb	r2, [r3, #0]
 8004692:	4b25      	ldr	r3, [pc, #148]	@ (8004728 <ESP_Upkeep+0x23c>)
 8004694:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
        break;
      }


    break;
 8004696:	e035      	b.n	8004704 <ESP_Upkeep+0x218>
        ESPTimeStamp = HAL_GetTick() + 300000;
 8004698:	f003 fe4c 	bl	8008334 <HAL_GetTick>
 800469c:	0003      	movs	r3, r0
 800469e:	4a25      	ldr	r2, [pc, #148]	@ (8004734 <ESP_Upkeep+0x248>)
 80046a0:	189a      	adds	r2, r3, r2
 80046a2:	4b1f      	ldr	r3, [pc, #124]	@ (8004720 <ESP_Upkeep+0x234>)
 80046a4:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_RESET;
 80046a6:	4b19      	ldr	r3, [pc, #100]	@ (800470c <ESP_Upkeep+0x220>)
 80046a8:	2209      	movs	r2, #9
 80046aa:	701a      	strb	r2, [r3, #0]
        break;
 80046ac:	e02a      	b.n	8004704 <ESP_Upkeep+0x218>
    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 80046ae:	4b1c      	ldr	r3, [pc, #112]	@ (8004720 <ESP_Upkeep+0x234>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	0018      	movs	r0, r3
 80046b4:	f003 f9f0 	bl	8007a98 <TimestampIsReached>
 80046b8:	1e03      	subs	r3, r0, #0
 80046ba:	d022      	beq.n	8004702 <ESP_Upkeep+0x216>
        nextATCommand = AT_HTTPCPOST;
 80046bc:	4b1a      	ldr	r3, [pc, #104]	@ (8004728 <ESP_Upkeep+0x23c>)
 80046be:	220c      	movs	r2, #12
 80046c0:	701a      	strb	r2, [r3, #0]
        ATCommands = AT_HTTPCPOST;
 80046c2:	4b1b      	ldr	r3, [pc, #108]	@ (8004730 <ESP_Upkeep+0x244>)
 80046c4:	220c      	movs	r2, #12
 80046c6:	701a      	strb	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80046c8:	4b10      	ldr	r3, [pc, #64]	@ (800470c <ESP_Upkeep+0x220>)
 80046ca:	2204      	movs	r2, #4
 80046cc:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_START;
 80046ce:	4b17      	ldr	r3, [pc, #92]	@ (800472c <ESP_Upkeep+0x240>)
 80046d0:	2202      	movs	r2, #2
 80046d2:	701a      	strb	r2, [r3, #0]
      }

      break;
 80046d4:	e015      	b.n	8004702 <ESP_Upkeep+0x216>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80046d6:	4a18      	ldr	r2, [pc, #96]	@ (8004738 <ESP_Upkeep+0x24c>)
 80046d8:	4b18      	ldr	r3, [pc, #96]	@ (800473c <ESP_Upkeep+0x250>)
 80046da:	0019      	movs	r1, r3
 80046dc:	2003      	movs	r0, #3
 80046de:	f003 fa31 	bl	8007b44 <CreateLine>
      EspState = ESP_STATE_INIT;
 80046e2:	4b0a      	ldr	r3, [pc, #40]	@ (800470c <ESP_Upkeep+0x220>)
 80046e4:	2202      	movs	r2, #2
 80046e6:	701a      	strb	r2, [r3, #0]
      break;
 80046e8:	e00c      	b.n	8004704 <ESP_Upkeep+0x218>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 80046ea:	4b08      	ldr	r3, [pc, #32]	@ (800470c <ESP_Upkeep+0x220>)
 80046ec:	2207      	movs	r2, #7
 80046ee:	701a      	strb	r2, [r3, #0]
      break;
 80046f0:	e008      	b.n	8004704 <ESP_Upkeep+0x218>
      break;
 80046f2:	46c0      	nop			@ (mov r8, r8)
 80046f4:	e006      	b.n	8004704 <ESP_Upkeep+0x218>
      break;
 80046f6:	46c0      	nop			@ (mov r8, r8)
 80046f8:	e004      	b.n	8004704 <ESP_Upkeep+0x218>
         break;
 80046fa:	46c0      	nop			@ (mov r8, r8)
 80046fc:	e002      	b.n	8004704 <ESP_Upkeep+0x218>
      break;
 80046fe:	46c0      	nop			@ (mov r8, r8)
 8004700:	e000      	b.n	8004704 <ESP_Upkeep+0x218>
      break;
 8004702:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004704:	46c0      	nop			@ (mov r8, r8)
 8004706:	46bd      	mov	sp, r7
 8004708:	b003      	add	sp, #12
 800470a:	bd90      	pop	{r4, r7, pc}
 800470c:	200000f7 	.word	0x200000f7
 8004710:	08012578 	.word	0x08012578
 8004714:	2000043b 	.word	0x2000043b
 8004718:	50000800 	.word	0x50000800
 800471c:	50001c00 	.word	0x50001c00
 8004720:	200006c8 	.word	0x200006c8
 8004724:	2000033c 	.word	0x2000033c
 8004728:	200006ce 	.word	0x200006ce
 800472c:	200006cd 	.word	0x200006cd
 8004730:	200008d1 	.word	0x200008d1
 8004734:	000493e0 	.word	0x000493e0
 8004738:	08011ecc 	.word	0x08011ecc
 800473c:	08011b20 	.word	0x08011b20

08004740 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004740:	b580      	push	{r7, lr}
 8004742:	b082      	sub	sp, #8
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004748:	4b09      	ldr	r3, [pc, #36]	@ (8004770 <I2CSensors_Init+0x30>)
 800474a:	687a      	ldr	r2, [r7, #4]
 800474c:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 800474e:	4a09      	ldr	r2, [pc, #36]	@ (8004774 <I2CSensors_Init+0x34>)
 8004750:	4b09      	ldr	r3, [pc, #36]	@ (8004778 <I2CSensors_Init+0x38>)
 8004752:	0011      	movs	r1, r2
 8004754:	0018      	movs	r0, r3
 8004756:	f000 fa2d 	bl	8004bb4 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 800475a:	4a06      	ldr	r2, [pc, #24]	@ (8004774 <I2CSensors_Init+0x34>)
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <I2CSensors_Init+0x38>)
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f000 f8b0 	bl	80048c6 <Gas_Init>
}
 8004766:	46c0      	nop			@ (mov r8, r8)
 8004768:	46bd      	mov	sp, r7
 800476a:	b002      	add	sp, #8
 800476c:	bd80      	pop	{r7, pc}
 800476e:	46c0      	nop			@ (mov r8, r8)
 8004770:	200008d4 	.word	0x200008d4
 8004774:	080047d1 	.word	0x080047d1
 8004778:	0800477d 	.word	0x0800477d

0800477c <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800477c:	b5b0      	push	{r4, r5, r7, lr}
 800477e:	b084      	sub	sp, #16
 8004780:	af00      	add	r7, sp, #0
 8004782:	6039      	str	r1, [r7, #0]
 8004784:	0011      	movs	r1, r2
 8004786:	1dfb      	adds	r3, r7, #7
 8004788:	1c02      	adds	r2, r0, #0
 800478a:	701a      	strb	r2, [r3, #0]
 800478c:	1dbb      	adds	r3, r7, #6
 800478e:	1c0a      	adds	r2, r1, #0
 8004790:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004792:	4b0e      	ldr	r3, [pc, #56]	@ (80047cc <ReadI2C+0x50>)
 8004794:	6818      	ldr	r0, [r3, #0]
 8004796:	1dfb      	adds	r3, r7, #7
 8004798:	781b      	ldrb	r3, [r3, #0]
 800479a:	b29b      	uxth	r3, r3
 800479c:	18db      	adds	r3, r3, r3
 800479e:	b299      	uxth	r1, r3
 80047a0:	1dbb      	adds	r3, r7, #6
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	250f      	movs	r5, #15
 80047a8:	197c      	adds	r4, r7, r5
 80047aa:	683a      	ldr	r2, [r7, #0]
 80047ac:	f004 fd94 	bl	80092d8 <HAL_I2C_Master_Receive_DMA>
 80047b0:	0003      	movs	r3, r0
 80047b2:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80047b4:	197b      	adds	r3, r7, r5
 80047b6:	781b      	ldrb	r3, [r3, #0]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d001      	beq.n	80047c0 <ReadI2C+0x44>
        return false;
 80047bc:	2300      	movs	r3, #0
 80047be:	e000      	b.n	80047c2 <ReadI2C+0x46>
    }
    return true;
 80047c0:	2301      	movs	r3, #1
}
 80047c2:	0018      	movs	r0, r3
 80047c4:	46bd      	mov	sp, r7
 80047c6:	b004      	add	sp, #16
 80047c8:	bdb0      	pop	{r4, r5, r7, pc}
 80047ca:	46c0      	nop			@ (mov r8, r8)
 80047cc:	200008d4 	.word	0x200008d4

080047d0 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80047d0:	b5b0      	push	{r4, r5, r7, lr}
 80047d2:	b084      	sub	sp, #16
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6039      	str	r1, [r7, #0]
 80047d8:	0011      	movs	r1, r2
 80047da:	1dfb      	adds	r3, r7, #7
 80047dc:	1c02      	adds	r2, r0, #0
 80047de:	701a      	strb	r2, [r3, #0]
 80047e0:	1dbb      	adds	r3, r7, #6
 80047e2:	1c0a      	adds	r2, r1, #0
 80047e4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80047e6:	4b0e      	ldr	r3, [pc, #56]	@ (8004820 <WriteI2C+0x50>)
 80047e8:	6818      	ldr	r0, [r3, #0]
 80047ea:	1dfb      	adds	r3, r7, #7
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	b29b      	uxth	r3, r3
 80047f0:	18db      	adds	r3, r3, r3
 80047f2:	b299      	uxth	r1, r3
 80047f4:	1dbb      	adds	r3, r7, #6
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	b29b      	uxth	r3, r3
 80047fa:	250f      	movs	r5, #15
 80047fc:	197c      	adds	r4, r7, r5
 80047fe:	683a      	ldr	r2, [r7, #0]
 8004800:	f004 fc64 	bl	80090cc <HAL_I2C_Master_Transmit_DMA>
 8004804:	0003      	movs	r3, r0
 8004806:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004808:	197b      	adds	r3, r7, r5
 800480a:	781b      	ldrb	r3, [r3, #0]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d001      	beq.n	8004814 <WriteI2C+0x44>
        return false;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <WriteI2C+0x46>
    }
    return true;
 8004814:	2301      	movs	r3, #1
}
 8004816:	0018      	movs	r0, r3
 8004818:	46bd      	mov	sp, r7
 800481a:	b004      	add	sp, #16
 800481c:	bdb0      	pop	{r4, r5, r7, pc}
 800481e:	46c0      	nop			@ (mov r8, r8)
 8004820:	200008d4 	.word	0x200008d4

08004824 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b082      	sub	sp, #8
 8004828:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800482a:	4b10      	ldr	r3, [pc, #64]	@ (800486c <MX_DMA_Init+0x48>)
 800482c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800482e:	4b0f      	ldr	r3, [pc, #60]	@ (800486c <MX_DMA_Init+0x48>)
 8004830:	2101      	movs	r1, #1
 8004832:	430a      	orrs	r2, r1
 8004834:	631a      	str	r2, [r3, #48]	@ 0x30
 8004836:	4b0d      	ldr	r3, [pc, #52]	@ (800486c <MX_DMA_Init+0x48>)
 8004838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800483a:	2201      	movs	r2, #1
 800483c:	4013      	ands	r3, r2
 800483e:	607b      	str	r3, [r7, #4]
 8004840:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	200a      	movs	r0, #10
 8004848:	f003 fe4e 	bl	80084e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800484c:	200a      	movs	r0, #10
 800484e:	f003 fe60 	bl	8008512 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	2103      	movs	r1, #3
 8004856:	200b      	movs	r0, #11
 8004858:	f003 fe46 	bl	80084e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 800485c:	200b      	movs	r0, #11
 800485e:	f003 fe58 	bl	8008512 <HAL_NVIC_EnableIRQ>

}
 8004862:	46c0      	nop			@ (mov r8, r8)
 8004864:	46bd      	mov	sp, r7
 8004866:	b002      	add	sp, #8
 8004868:	bd80      	pop	{r7, pc}
 800486a:	46c0      	nop			@ (mov r8, r8)
 800486c:	40021000 	.word	0x40021000

08004870 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart) {
 8004870:	b580      	push	{r7, lr}
 8004872:	b084      	sub	sp, #16
 8004874:	af00      	add	r7, sp, #0
 8004876:	60f8      	str	r0, [r7, #12]
 8004878:	60b9      	str	r1, [r7, #8]
 800487a:	607a      	str	r2, [r7, #4]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 800487c:	4b0b      	ldr	r3, [pc, #44]	@ (80048ac <Gadget_Init+0x3c>)
 800487e:	6818      	ldr	r0, [r3, #0]
 8004880:	f000 ff10 	bl	80056a4 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s);
 8004884:	68ba      	ldr	r2, [r7, #8]
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	0011      	movs	r1, r2
 800488a:	0018      	movs	r0, r3
 800488c:	f000 fce4 	bl	8005258 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	0018      	movs	r0, r3
 8004894:	f7fe fe6e 	bl	8003574 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8004898:	4a05      	ldr	r2, [pc, #20]	@ (80048b0 <Gadget_Init+0x40>)
 800489a:	4b06      	ldr	r3, [pc, #24]	@ (80048b4 <Gadget_Init+0x44>)
 800489c:	0019      	movs	r1, r3
 800489e:	2003      	movs	r0, #3
 80048a0:	f003 f950 	bl	8007b44 <CreateLine>
}
 80048a4:	46c0      	nop			@ (mov r8, r8)
 80048a6:	46bd      	mov	sp, r7
 80048a8:	b004      	add	sp, #16
 80048aa:	bd80      	pop	{r7, pc}
 80048ac:	200000f8 	.word	0x200000f8
 80048b0:	08011ee0 	.word	0x08011ee0
 80048b4:	08011ef4 	.word	0x08011ef4

080048b8 <UpkeepGadget>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void UpkeepGadget() {
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 80048bc:	f000 fe82 	bl	80055c4 <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 80048c0:	46c0      	nop			@ (mov r8, r8)
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80048c6:	b580      	push	{r7, lr}
 80048c8:	b082      	sub	sp, #8
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	6078      	str	r0, [r7, #4]
 80048ce:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80048d0:	683a      	ldr	r2, [r7, #0]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	0011      	movs	r1, r2
 80048d6:	0018      	movs	r0, r3
 80048d8:	f002 f80c 	bl	80068f4 <SGP_Init>
}
 80048dc:	46c0      	nop			@ (mov r8, r8)
 80048de:	46bd      	mov	sp, r7
 80048e0:	b002      	add	sp, #8
 80048e2:	bd80      	pop	{r7, pc}

080048e4 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 80048e4:	b580      	push	{r7, lr}
 80048e6:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 80048e8:	f002 f81e 	bl	8006928 <SGP_StartMeasurement>
}
 80048ec:	46c0      	nop			@ (mov r8, r8)
 80048ee:	46bd      	mov	sp, r7
 80048f0:	bd80      	pop	{r7, pc}

080048f2 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 80048f2:	b580      	push	{r7, lr}
 80048f4:	b082      	sub	sp, #8
 80048f6:	af00      	add	r7, sp, #0
 80048f8:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	0018      	movs	r0, r3
 80048fe:	f002 f883 	bl	8006a08 <SGP_GetMeasurementValues>
 8004902:	0003      	movs	r3, r0
}
 8004904:	0018      	movs	r0, r3
 8004906:	46bd      	mov	sp, r7
 8004908:	b002      	add	sp, #8
 800490a:	bd80      	pop	{r7, pc}

0800490c <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800490c:	b580      	push	{r7, lr}
 800490e:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 8004910:	f002 fa9c 	bl	8006e4c <SGP_DeviceConnected>
 8004914:	0003      	movs	r3, r0
}
 8004916:	0018      	movs	r0, r3
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}

0800491c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800491c:	b590      	push	{r4, r7, lr}
 800491e:	b08b      	sub	sp, #44	@ 0x2c
 8004920:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004922:	2414      	movs	r4, #20
 8004924:	193b      	adds	r3, r7, r4
 8004926:	0018      	movs	r0, r3
 8004928:	2314      	movs	r3, #20
 800492a:	001a      	movs	r2, r3
 800492c:	2100      	movs	r1, #0
 800492e:	f00a fd65 	bl	800f3fc <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004932:	4b70      	ldr	r3, [pc, #448]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004936:	4b6f      	ldr	r3, [pc, #444]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004938:	2104      	movs	r1, #4
 800493a:	430a      	orrs	r2, r1
 800493c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800493e:	4b6d      	ldr	r3, [pc, #436]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004940:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004942:	2204      	movs	r2, #4
 8004944:	4013      	ands	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
 8004948:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800494a:	4b6a      	ldr	r3, [pc, #424]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 800494c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800494e:	4b69      	ldr	r3, [pc, #420]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004950:	2180      	movs	r1, #128	@ 0x80
 8004952:	430a      	orrs	r2, r1
 8004954:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004956:	4b67      	ldr	r3, [pc, #412]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004958:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495a:	2280      	movs	r2, #128	@ 0x80
 800495c:	4013      	ands	r3, r2
 800495e:	60fb      	str	r3, [r7, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8004962:	4b64      	ldr	r3, [pc, #400]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004964:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004966:	4b63      	ldr	r3, [pc, #396]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004968:	2101      	movs	r1, #1
 800496a:	430a      	orrs	r2, r1
 800496c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800496e:	4b61      	ldr	r3, [pc, #388]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004970:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004972:	2201      	movs	r2, #1
 8004974:	4013      	ands	r3, r2
 8004976:	60bb      	str	r3, [r7, #8]
 8004978:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800497a:	4b5e      	ldr	r3, [pc, #376]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 800497c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800497e:	4b5d      	ldr	r3, [pc, #372]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004980:	2102      	movs	r1, #2
 8004982:	430a      	orrs	r2, r1
 8004984:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004986:	4b5b      	ldr	r3, [pc, #364]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	2202      	movs	r2, #2
 800498c:	4013      	ands	r3, r2
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004992:	4b58      	ldr	r3, [pc, #352]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004994:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004996:	4b57      	ldr	r3, [pc, #348]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 8004998:	2108      	movs	r1, #8
 800499a:	430a      	orrs	r2, r1
 800499c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800499e:	4b55      	ldr	r3, [pc, #340]	@ (8004af4 <MX_GPIO_Init+0x1d8>)
 80049a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a2:	2208      	movs	r2, #8
 80049a4:	4013      	ands	r3, r2
 80049a6:	603b      	str	r3, [r7, #0]
 80049a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 80049aa:	4b53      	ldr	r3, [pc, #332]	@ (8004af8 <MX_GPIO_Init+0x1dc>)
 80049ac:	2201      	movs	r2, #1
 80049ae:	2101      	movs	r1, #1
 80049b0:	0018      	movs	r0, r3
 80049b2:	f004 fad7 	bl	8008f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 80049b6:	4b50      	ldr	r3, [pc, #320]	@ (8004af8 <MX_GPIO_Init+0x1dc>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	2102      	movs	r1, #2
 80049bc:	0018      	movs	r0, r3
 80049be:	f004 fad1 	bl	8008f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 80049c2:	494e      	ldr	r1, [pc, #312]	@ (8004afc <MX_GPIO_Init+0x1e0>)
 80049c4:	4b4e      	ldr	r3, [pc, #312]	@ (8004b00 <MX_GPIO_Init+0x1e4>)
 80049c6:	2201      	movs	r2, #1
 80049c8:	0018      	movs	r0, r3
 80049ca:	f004 facb 	bl	8008f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80049ce:	2380      	movs	r3, #128	@ 0x80
 80049d0:	011b      	lsls	r3, r3, #4
 80049d2:	484c      	ldr	r0, [pc, #304]	@ (8004b04 <MX_GPIO_Init+0x1e8>)
 80049d4:	2201      	movs	r2, #1
 80049d6:	0019      	movs	r1, r3
 80049d8:	f004 fac4 	bl	8008f64 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC9
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 80049dc:	193b      	adds	r3, r7, r4
 80049de:	4a4a      	ldr	r2, [pc, #296]	@ (8004b08 <MX_GPIO_Init+0x1ec>)
 80049e0:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_9
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80049e2:	193b      	adds	r3, r7, r4
 80049e4:	2203      	movs	r2, #3
 80049e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049e8:	193b      	adds	r3, r7, r4
 80049ea:	2200      	movs	r2, #0
 80049ec:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049ee:	193b      	adds	r3, r7, r4
 80049f0:	4a44      	ldr	r2, [pc, #272]	@ (8004b04 <MX_GPIO_Init+0x1e8>)
 80049f2:	0019      	movs	r1, r3
 80049f4:	0010      	movs	r0, r2
 80049f6:	f004 f855 	bl	8008aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80049fa:	193b      	adds	r3, r7, r4
 80049fc:	2203      	movs	r2, #3
 80049fe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a00:	193b      	adds	r3, r7, r4
 8004a02:	2201      	movs	r2, #1
 8004a04:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a06:	193b      	adds	r3, r7, r4
 8004a08:	2200      	movs	r2, #0
 8004a0a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a0c:	193b      	adds	r3, r7, r4
 8004a0e:	2200      	movs	r2, #0
 8004a10:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004a12:	193b      	adds	r3, r7, r4
 8004a14:	4a38      	ldr	r2, [pc, #224]	@ (8004af8 <MX_GPIO_Init+0x1dc>)
 8004a16:	0019      	movs	r1, r3
 8004a18:	0010      	movs	r0, r2
 8004a1a:	f004 f843 	bl	8008aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 8004a1e:	193b      	adds	r3, r7, r4
 8004a20:	4a3a      	ldr	r2, [pc, #232]	@ (8004b0c <MX_GPIO_Init+0x1f0>)
 8004a22:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a24:	193b      	adds	r3, r7, r4
 8004a26:	2203      	movs	r2, #3
 8004a28:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	193b      	adds	r3, r7, r4
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a30:	193a      	adds	r2, r7, r4
 8004a32:	23a0      	movs	r3, #160	@ 0xa0
 8004a34:	05db      	lsls	r3, r3, #23
 8004a36:	0011      	movs	r1, r2
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f004 f833 	bl	8008aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 8004a3e:	193b      	adds	r3, r7, r4
 8004a40:	22c0      	movs	r2, #192	@ 0xc0
 8004a42:	0052      	lsls	r2, r2, #1
 8004a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004a46:	193b      	adds	r3, r7, r4
 8004a48:	2200      	movs	r2, #0
 8004a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a4c:	193b      	adds	r3, r7, r4
 8004a4e:	2200      	movs	r2, #0
 8004a50:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a52:	193a      	adds	r2, r7, r4
 8004a54:	23a0      	movs	r3, #160	@ 0xa0
 8004a56:	05db      	lsls	r3, r3, #23
 8004a58:	0011      	movs	r1, r2
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f004 f822 	bl	8008aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8004a60:	193b      	adds	r3, r7, r4
 8004a62:	4a26      	ldr	r2, [pc, #152]	@ (8004afc <MX_GPIO_Init+0x1e0>)
 8004a64:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004a66:	193b      	adds	r3, r7, r4
 8004a68:	2201      	movs	r2, #1
 8004a6a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a6c:	193b      	adds	r3, r7, r4
 8004a6e:	2200      	movs	r2, #0
 8004a70:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a72:	193b      	adds	r3, r7, r4
 8004a74:	2200      	movs	r2, #0
 8004a76:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a78:	193b      	adds	r3, r7, r4
 8004a7a:	4a21      	ldr	r2, [pc, #132]	@ (8004b00 <MX_GPIO_Init+0x1e4>)
 8004a7c:	0019      	movs	r1, r3
 8004a7e:	0010      	movs	r0, r2
 8004a80:	f004 f810 	bl	8008aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8004a84:	193b      	adds	r3, r7, r4
 8004a86:	4a22      	ldr	r2, [pc, #136]	@ (8004b10 <MX_GPIO_Init+0x1f4>)
 8004a88:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004a8a:	193b      	adds	r3, r7, r4
 8004a8c:	2203      	movs	r2, #3
 8004a8e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a90:	193b      	adds	r3, r7, r4
 8004a92:	2200      	movs	r2, #0
 8004a94:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004a96:	193b      	adds	r3, r7, r4
 8004a98:	4a19      	ldr	r2, [pc, #100]	@ (8004b00 <MX_GPIO_Init+0x1e4>)
 8004a9a:	0019      	movs	r1, r3
 8004a9c:	0010      	movs	r0, r2
 8004a9e:	f004 f801 	bl	8008aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8004aa2:	0021      	movs	r1, r4
 8004aa4:	187b      	adds	r3, r7, r1
 8004aa6:	2280      	movs	r2, #128	@ 0x80
 8004aa8:	0112      	lsls	r2, r2, #4
 8004aaa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004aac:	000c      	movs	r4, r1
 8004aae:	193b      	adds	r3, r7, r4
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ab4:	193b      	adds	r3, r7, r4
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004aba:	193b      	adds	r3, r7, r4
 8004abc:	2200      	movs	r2, #0
 8004abe:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8004ac0:	193b      	adds	r3, r7, r4
 8004ac2:	4a10      	ldr	r2, [pc, #64]	@ (8004b04 <MX_GPIO_Init+0x1e8>)
 8004ac4:	0019      	movs	r1, r3
 8004ac6:	0010      	movs	r0, r2
 8004ac8:	f003 ffec 	bl	8008aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8004acc:	0021      	movs	r1, r4
 8004ace:	187b      	adds	r3, r7, r1
 8004ad0:	2204      	movs	r2, #4
 8004ad2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004ad4:	187b      	adds	r3, r7, r1
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ada:	187b      	adds	r3, r7, r1
 8004adc:	2200      	movs	r2, #0
 8004ade:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8004ae0:	187b      	adds	r3, r7, r1
 8004ae2:	4a0c      	ldr	r2, [pc, #48]	@ (8004b14 <MX_GPIO_Init+0x1f8>)
 8004ae4:	0019      	movs	r1, r3
 8004ae6:	0010      	movs	r0, r2
 8004ae8:	f003 ffdc 	bl	8008aa4 <HAL_GPIO_Init>

}
 8004aec:	46c0      	nop			@ (mov r8, r8)
 8004aee:	46bd      	mov	sp, r7
 8004af0:	b00b      	add	sp, #44	@ 0x2c
 8004af2:	bd90      	pop	{r4, r7, pc}
 8004af4:	40021000 	.word	0x40021000
 8004af8:	50001c00 	.word	0x50001c00
 8004afc:	00000301 	.word	0x00000301
 8004b00:	50000400 	.word	0x50000400
 8004b04:	50000800 	.word	0x50000800
 8004b08:	0000323f 	.word	0x0000323f
 8004b0c:	00008070 	.word	0x00008070
 8004b10:	0000403e 	.word	0x0000403e
 8004b14:	50000c00 	.word	0x50000c00

08004b18 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
 8004b20:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2100      	movs	r1, #0
 8004b26:	0018      	movs	r0, r3
 8004b28:	f007 fe56 	bl	800c7d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2108      	movs	r1, #8
 8004b30:	0018      	movs	r0, r3
 8004b32:	f007 fe51 	bl	800c7d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	210c      	movs	r1, #12
 8004b3a:	0018      	movs	r0, r3
 8004b3c:	f007 fe4c 	bl	800c7d8 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8004b40:	2380      	movs	r3, #128	@ 0x80
 8004b42:	05db      	lsls	r3, r3, #23
 8004b44:	22fa      	movs	r2, #250	@ 0xfa
 8004b46:	0112      	lsls	r2, r2, #4
 8004b48:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8004b4a:	2380      	movs	r3, #128	@ 0x80
 8004b4c:	05db      	lsls	r3, r3, #23
 8004b4e:	22fa      	movs	r2, #250	@ 0xfa
 8004b50:	0112      	lsls	r2, r2, #4
 8004b52:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8004b54:	2380      	movs	r3, #128	@ 0x80
 8004b56:	05db      	lsls	r3, r3, #23
 8004b58:	22fa      	movs	r2, #250	@ 0xfa
 8004b5a:	0112      	lsls	r2, r2, #4
 8004b5c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8004b5e:	2380      	movs	r3, #128	@ 0x80
 8004b60:	05db      	lsls	r3, r3, #23
 8004b62:	22fa      	movs	r2, #250	@ 0xfa
 8004b64:	0112      	lsls	r2, r2, #4
 8004b66:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	2100      	movs	r1, #0
 8004b6c:	0018      	movs	r0, r3
 8004b6e:	f007 fe33 	bl	800c7d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	2104      	movs	r1, #4
 8004b76:	0018      	movs	r0, r3
 8004b78:	f007 fe2e 	bl	800c7d8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	2108      	movs	r1, #8
 8004b80:	0018      	movs	r0, r3
 8004b82:	f007 fe29 	bl	800c7d8 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8004b86:	4b0a      	ldr	r3, [pc, #40]	@ (8004bb0 <GPIO_InitPWMLEDs+0x98>)
 8004b88:	22fa      	movs	r2, #250	@ 0xfa
 8004b8a:	0112      	lsls	r2, r2, #4
 8004b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8004b8e:	4b08      	ldr	r3, [pc, #32]	@ (8004bb0 <GPIO_InitPWMLEDs+0x98>)
 8004b90:	22fa      	movs	r2, #250	@ 0xfa
 8004b92:	0112      	lsls	r2, r2, #4
 8004b94:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8004b96:	4b06      	ldr	r3, [pc, #24]	@ (8004bb0 <GPIO_InitPWMLEDs+0x98>)
 8004b98:	22fa      	movs	r2, #250	@ 0xfa
 8004b9a:	0112      	lsls	r2, r2, #4
 8004b9c:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8004b9e:	4b04      	ldr	r3, [pc, #16]	@ (8004bb0 <GPIO_InitPWMLEDs+0x98>)
 8004ba0:	22fa      	movs	r2, #250	@ 0xfa
 8004ba2:	0112      	lsls	r2, r2, #4
 8004ba4:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8004ba6:	46c0      	nop			@ (mov r8, r8)
 8004ba8:	46bd      	mov	sp, r7
 8004baa:	b002      	add	sp, #8
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	46c0      	nop			@ (mov r8, r8)
 8004bb0:	40000400 	.word	0x40000400

08004bb4 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	b082      	sub	sp, #8
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8004bbe:	683a      	ldr	r2, [r7, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	0011      	movs	r1, r2
 8004bc4:	0018      	movs	r0, r3
 8004bc6:	f003 f915 	bl	8007df4 <HIDS_Init>
}
 8004bca:	46c0      	nop			@ (mov r8, r8)
 8004bcc:	46bd      	mov	sp, r7
 8004bce:	b002      	add	sp, #8
 8004bd0:	bd80      	pop	{r7, pc}

08004bd2 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8004bd2:	b580      	push	{r7, lr}
 8004bd4:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8004bd6:	f003 f92f 	bl	8007e38 <HIDS_StartMeasurement>
}
 8004bda:	46c0      	nop			@ (mov r8, r8)
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	bd80      	pop	{r7, pc}

08004be0 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b082      	sub	sp, #8
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
 8004be8:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8004bea:	683a      	ldr	r2, [r7, #0]
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	0011      	movs	r1, r2
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f003 f9fd 	bl	8007ff0 <HIDS_GetMeasurementValues>
 8004bf6:	0003      	movs	r3, r0
}
 8004bf8:	0018      	movs	r0, r3
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	b002      	add	sp, #8
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8004c00:	b580      	push	{r7, lr}
 8004c02:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8004c04:	f003 f998 	bl	8007f38 <HIDS_DeviceConnected>
 8004c08:	0003      	movs	r3, r0
}
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	bd80      	pop	{r7, pc}

08004c10 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004c14:	4b1b      	ldr	r3, [pc, #108]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c16:	4a1c      	ldr	r2, [pc, #112]	@ (8004c88 <MX_I2C1_Init+0x78>)
 8004c18:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8004c1a:	4b1a      	ldr	r3, [pc, #104]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c1c:	4a1b      	ldr	r2, [pc, #108]	@ (8004c8c <MX_I2C1_Init+0x7c>)
 8004c1e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8004c20:	4b18      	ldr	r3, [pc, #96]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004c26:	4b17      	ldr	r3, [pc, #92]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c28:	2201      	movs	r2, #1
 8004c2a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004c2c:	4b15      	ldr	r3, [pc, #84]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c2e:	2200      	movs	r2, #0
 8004c30:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8004c32:	4b14      	ldr	r3, [pc, #80]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c34:	2200      	movs	r2, #0
 8004c36:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004c38:	4b12      	ldr	r3, [pc, #72]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004c3e:	4b11      	ldr	r3, [pc, #68]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c40:	2200      	movs	r2, #0
 8004c42:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004c44:	4b0f      	ldr	r3, [pc, #60]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c4c:	0018      	movs	r0, r3
 8004c4e:	f004 f9a7 	bl	8008fa0 <HAL_I2C_Init>
 8004c52:	1e03      	subs	r3, r0, #0
 8004c54:	d001      	beq.n	8004c5a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8004c56:	f000 faaf 	bl	80051b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c5c:	2100      	movs	r1, #0
 8004c5e:	0018      	movs	r0, r3
 8004c60:	f006 f916 	bl	800ae90 <HAL_I2CEx_ConfigAnalogFilter>
 8004c64:	1e03      	subs	r3, r0, #0
 8004c66:	d001      	beq.n	8004c6c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8004c68:	f000 faa6 	bl	80051b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8004c6c:	4b05      	ldr	r3, [pc, #20]	@ (8004c84 <MX_I2C1_Init+0x74>)
 8004c6e:	2100      	movs	r1, #0
 8004c70:	0018      	movs	r0, r3
 8004c72:	f006 f959 	bl	800af28 <HAL_I2CEx_ConfigDigitalFilter>
 8004c76:	1e03      	subs	r3, r0, #0
 8004c78:	d001      	beq.n	8004c7e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8004c7a:	f000 fa9d 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004c7e:	46c0      	nop			@ (mov r8, r8)
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}
 8004c84:	200008d8 	.word	0x200008d8
 8004c88:	40005400 	.word	0x40005400
 8004c8c:	00503d58 	.word	0x00503d58

08004c90 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8004c90:	b580      	push	{r7, lr}
 8004c92:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8004c94:	4b1b      	ldr	r3, [pc, #108]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004c96:	4a1c      	ldr	r2, [pc, #112]	@ (8004d08 <MX_I2C2_Init+0x78>)
 8004c98:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8004c9a:	4b1a      	ldr	r3, [pc, #104]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004c9c:	4a1b      	ldr	r2, [pc, #108]	@ (8004d0c <MX_I2C2_Init+0x7c>)
 8004c9e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8004ca0:	4b18      	ldr	r3, [pc, #96]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004ca6:	4b17      	ldr	r3, [pc, #92]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004ca8:	2201      	movs	r2, #1
 8004caa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004cac:	4b15      	ldr	r3, [pc, #84]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004cae:	2200      	movs	r2, #0
 8004cb0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8004cb2:	4b14      	ldr	r3, [pc, #80]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004cb8:	4b12      	ldr	r3, [pc, #72]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004cba:	2200      	movs	r2, #0
 8004cbc:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004cbe:	4b11      	ldr	r3, [pc, #68]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004cc4:	4b0f      	ldr	r3, [pc, #60]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8004cca:	4b0e      	ldr	r3, [pc, #56]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004ccc:	0018      	movs	r0, r3
 8004cce:	f004 f967 	bl	8008fa0 <HAL_I2C_Init>
 8004cd2:	1e03      	subs	r3, r0, #0
 8004cd4:	d001      	beq.n	8004cda <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8004cd6:	f000 fa6f 	bl	80051b8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8004cda:	4b0a      	ldr	r3, [pc, #40]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004cdc:	2100      	movs	r1, #0
 8004cde:	0018      	movs	r0, r3
 8004ce0:	f006 f8d6 	bl	800ae90 <HAL_I2CEx_ConfigAnalogFilter>
 8004ce4:	1e03      	subs	r3, r0, #0
 8004ce6:	d001      	beq.n	8004cec <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8004ce8:	f000 fa66 	bl	80051b8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8004cec:	4b05      	ldr	r3, [pc, #20]	@ (8004d04 <MX_I2C2_Init+0x74>)
 8004cee:	2100      	movs	r1, #0
 8004cf0:	0018      	movs	r0, r3
 8004cf2:	f006 f919 	bl	800af28 <HAL_I2CEx_ConfigDigitalFilter>
 8004cf6:	1e03      	subs	r3, r0, #0
 8004cf8:	d001      	beq.n	8004cfe <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8004cfa:	f000 fa5d 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8004cfe:	46c0      	nop			@ (mov r8, r8)
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	2000092c 	.word	0x2000092c
 8004d08:	40005800 	.word	0x40005800
 8004d0c:	00503d58 	.word	0x00503d58

08004d10 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004d10:	b590      	push	{r4, r7, lr}
 8004d12:	b08b      	sub	sp, #44	@ 0x2c
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d18:	2414      	movs	r4, #20
 8004d1a:	193b      	adds	r3, r7, r4
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	2314      	movs	r3, #20
 8004d20:	001a      	movs	r2, r3
 8004d22:	2100      	movs	r1, #0
 8004d24:	f00a fb6a 	bl	800f3fc <memset>
  if(i2cHandle->Instance==I2C1)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a5d      	ldr	r2, [pc, #372]	@ (8004ea4 <HAL_I2C_MspInit+0x194>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d000      	beq.n	8004d34 <HAL_I2C_MspInit+0x24>
 8004d32:	e083      	b.n	8004e3c <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004d34:	4b5c      	ldr	r3, [pc, #368]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d38:	4b5b      	ldr	r3, [pc, #364]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004d3a:	2102      	movs	r1, #2
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004d40:	4b59      	ldr	r3, [pc, #356]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004d42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d44:	2202      	movs	r2, #2
 8004d46:	4013      	ands	r3, r2
 8004d48:	613b      	str	r3, [r7, #16]
 8004d4a:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004d4c:	0021      	movs	r1, r4
 8004d4e:	187b      	adds	r3, r7, r1
 8004d50:	22c0      	movs	r2, #192	@ 0xc0
 8004d52:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004d54:	187b      	adds	r3, r7, r1
 8004d56:	2212      	movs	r2, #18
 8004d58:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004d5a:	187b      	adds	r3, r7, r1
 8004d5c:	2200      	movs	r2, #0
 8004d5e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004d60:	187b      	adds	r3, r7, r1
 8004d62:	2203      	movs	r2, #3
 8004d64:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8004d66:	187b      	adds	r3, r7, r1
 8004d68:	2201      	movs	r2, #1
 8004d6a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004d6c:	187b      	adds	r3, r7, r1
 8004d6e:	4a4f      	ldr	r2, [pc, #316]	@ (8004eac <HAL_I2C_MspInit+0x19c>)
 8004d70:	0019      	movs	r1, r3
 8004d72:	0010      	movs	r0, r2
 8004d74:	f003 fe96 	bl	8008aa4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004d78:	4b4b      	ldr	r3, [pc, #300]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004d7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004d7c:	4b4a      	ldr	r3, [pc, #296]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004d7e:	2180      	movs	r1, #128	@ 0x80
 8004d80:	0389      	lsls	r1, r1, #14
 8004d82:	430a      	orrs	r2, r1
 8004d84:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8004d86:	4b4a      	ldr	r3, [pc, #296]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004d88:	4a4a      	ldr	r2, [pc, #296]	@ (8004eb4 <HAL_I2C_MspInit+0x1a4>)
 8004d8a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8004d8c:	4b48      	ldr	r3, [pc, #288]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004d8e:	2206      	movs	r2, #6
 8004d90:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d92:	4b47      	ldr	r3, [pc, #284]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004d94:	2200      	movs	r2, #0
 8004d96:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d98:	4b45      	ldr	r3, [pc, #276]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004d9e:	4b44      	ldr	r3, [pc, #272]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004da0:	2280      	movs	r2, #128	@ 0x80
 8004da2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004da4:	4b42      	ldr	r3, [pc, #264]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004da6:	2200      	movs	r2, #0
 8004da8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004daa:	4b41      	ldr	r3, [pc, #260]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8004db0:	4b3f      	ldr	r3, [pc, #252]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004db6:	4b3e      	ldr	r3, [pc, #248]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004db8:	2200      	movs	r2, #0
 8004dba:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8004dbc:	4b3c      	ldr	r3, [pc, #240]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004dbe:	0018      	movs	r0, r3
 8004dc0:	f003 fbc4 	bl	800854c <HAL_DMA_Init>
 8004dc4:	1e03      	subs	r3, r0, #0
 8004dc6:	d001      	beq.n	8004dcc <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8004dc8:	f000 f9f6 	bl	80051b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	4a38      	ldr	r2, [pc, #224]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004dd0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004dd2:	4b37      	ldr	r3, [pc, #220]	@ (8004eb0 <HAL_I2C_MspInit+0x1a0>)
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8004dd8:	4b37      	ldr	r3, [pc, #220]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004dda:	4a38      	ldr	r2, [pc, #224]	@ (8004ebc <HAL_I2C_MspInit+0x1ac>)
 8004ddc:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8004dde:	4b36      	ldr	r3, [pc, #216]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004de0:	2206      	movs	r2, #6
 8004de2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004de4:	4b34      	ldr	r3, [pc, #208]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004de6:	2210      	movs	r2, #16
 8004de8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004dea:	4b33      	ldr	r3, [pc, #204]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004dec:	2200      	movs	r2, #0
 8004dee:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004df0:	4b31      	ldr	r3, [pc, #196]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004df2:	2280      	movs	r2, #128	@ 0x80
 8004df4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8004df6:	4b30      	ldr	r3, [pc, #192]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8004dfc:	4b2e      	ldr	r3, [pc, #184]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004dfe:	2200      	movs	r2, #0
 8004e00:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8004e02:	4b2d      	ldr	r3, [pc, #180]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004e04:	2200      	movs	r2, #0
 8004e06:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8004e08:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004e0a:	2200      	movs	r2, #0
 8004e0c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8004e0e:	4b2a      	ldr	r3, [pc, #168]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004e10:	0018      	movs	r0, r3
 8004e12:	f003 fb9b 	bl	800854c <HAL_DMA_Init>
 8004e16:	1e03      	subs	r3, r0, #0
 8004e18:	d001      	beq.n	8004e1e <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8004e1a:	f000 f9cd 	bl	80051b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	4a25      	ldr	r2, [pc, #148]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004e22:	639a      	str	r2, [r3, #56]	@ 0x38
 8004e24:	4b24      	ldr	r3, [pc, #144]	@ (8004eb8 <HAL_I2C_MspInit+0x1a8>)
 8004e26:	687a      	ldr	r2, [r7, #4]
 8004e28:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	2017      	movs	r0, #23
 8004e30:	f003 fb5a 	bl	80084e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8004e34:	2017      	movs	r0, #23
 8004e36:	f003 fb6c 	bl	8008512 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8004e3a:	e02e      	b.n	8004e9a <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a1f      	ldr	r2, [pc, #124]	@ (8004ec0 <HAL_I2C_MspInit+0x1b0>)
 8004e42:	4293      	cmp	r3, r2
 8004e44:	d129      	bne.n	8004e9a <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e46:	4b18      	ldr	r3, [pc, #96]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004e48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e4a:	4b17      	ldr	r3, [pc, #92]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004e4c:	2102      	movs	r1, #2
 8004e4e:	430a      	orrs	r2, r1
 8004e50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004e52:	4b15      	ldr	r3, [pc, #84]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e56:	2202      	movs	r2, #2
 8004e58:	4013      	ands	r3, r2
 8004e5a:	60fb      	str	r3, [r7, #12]
 8004e5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8004e5e:	2114      	movs	r1, #20
 8004e60:	187b      	adds	r3, r7, r1
 8004e62:	22c0      	movs	r2, #192	@ 0xc0
 8004e64:	0112      	lsls	r2, r2, #4
 8004e66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e68:	187b      	adds	r3, r7, r1
 8004e6a:	2212      	movs	r2, #18
 8004e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e6e:	187b      	adds	r3, r7, r1
 8004e70:	2200      	movs	r2, #0
 8004e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e74:	187b      	adds	r3, r7, r1
 8004e76:	2203      	movs	r2, #3
 8004e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8004e7a:	187b      	adds	r3, r7, r1
 8004e7c:	2206      	movs	r2, #6
 8004e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e80:	187b      	adds	r3, r7, r1
 8004e82:	4a0a      	ldr	r2, [pc, #40]	@ (8004eac <HAL_I2C_MspInit+0x19c>)
 8004e84:	0019      	movs	r1, r3
 8004e86:	0010      	movs	r0, r2
 8004e88:	f003 fe0c 	bl	8008aa4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8004e8c:	4b06      	ldr	r3, [pc, #24]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004e8e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e90:	4b05      	ldr	r3, [pc, #20]	@ (8004ea8 <HAL_I2C_MspInit+0x198>)
 8004e92:	2180      	movs	r1, #128	@ 0x80
 8004e94:	03c9      	lsls	r1, r1, #15
 8004e96:	430a      	orrs	r2, r1
 8004e98:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8004e9a:	46c0      	nop			@ (mov r8, r8)
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	b00b      	add	sp, #44	@ 0x2c
 8004ea0:	bd90      	pop	{r4, r7, pc}
 8004ea2:	46c0      	nop			@ (mov r8, r8)
 8004ea4:	40005400 	.word	0x40005400
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	50000400 	.word	0x50000400
 8004eb0:	20000980 	.word	0x20000980
 8004eb4:	40020030 	.word	0x40020030
 8004eb8:	200009c8 	.word	0x200009c8
 8004ebc:	4002001c 	.word	0x4002001c
 8004ec0:	40005800 	.word	0x40005800

08004ec4 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8004ec8:	4b10      	ldr	r3, [pc, #64]	@ (8004f0c <MX_I2S2_Init+0x48>)
 8004eca:	4a11      	ldr	r2, [pc, #68]	@ (8004f10 <MX_I2S2_Init+0x4c>)
 8004ecc:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8004ece:	4b0f      	ldr	r3, [pc, #60]	@ (8004f0c <MX_I2S2_Init+0x48>)
 8004ed0:	22c0      	movs	r2, #192	@ 0xc0
 8004ed2:	0092      	lsls	r2, r2, #2
 8004ed4:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8004ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8004f0c <MX_I2S2_Init+0x48>)
 8004ed8:	2210      	movs	r2, #16
 8004eda:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8004edc:	4b0b      	ldr	r3, [pc, #44]	@ (8004f0c <MX_I2S2_Init+0x48>)
 8004ede:	2205      	movs	r2, #5
 8004ee0:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8004ee2:	4b0a      	ldr	r3, [pc, #40]	@ (8004f0c <MX_I2S2_Init+0x48>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8004ee8:	4b08      	ldr	r3, [pc, #32]	@ (8004f0c <MX_I2S2_Init+0x48>)
 8004eea:	22fa      	movs	r2, #250	@ 0xfa
 8004eec:	0152      	lsls	r2, r2, #5
 8004eee:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8004ef0:	4b06      	ldr	r3, [pc, #24]	@ (8004f0c <MX_I2S2_Init+0x48>)
 8004ef2:	2208      	movs	r2, #8
 8004ef4:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8004ef6:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <MX_I2S2_Init+0x48>)
 8004ef8:	0018      	movs	r0, r3
 8004efa:	f006 f861 	bl	800afc0 <HAL_I2S_Init>
 8004efe:	1e03      	subs	r3, r0, #0
 8004f00:	d001      	beq.n	8004f06 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8004f02:	f000 f959 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8004f06:	46c0      	nop			@ (mov r8, r8)
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	bd80      	pop	{r7, pc}
 8004f0c:	20000a10 	.word	0x20000a10
 8004f10:	40003800 	.word	0x40003800

08004f14 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8004f14:	b590      	push	{r4, r7, lr}
 8004f16:	b089      	sub	sp, #36	@ 0x24
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f1c:	240c      	movs	r4, #12
 8004f1e:	193b      	adds	r3, r7, r4
 8004f20:	0018      	movs	r0, r3
 8004f22:	2314      	movs	r3, #20
 8004f24:	001a      	movs	r2, r3
 8004f26:	2100      	movs	r1, #0
 8004f28:	f00a fa68 	bl	800f3fc <memset>
  if(i2sHandle->Instance==SPI2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a2d      	ldr	r2, [pc, #180]	@ (8004fe8 <HAL_I2S_MspInit+0xd4>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d154      	bne.n	8004fe0 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004f36:	4b2d      	ldr	r3, [pc, #180]	@ (8004fec <HAL_I2S_MspInit+0xd8>)
 8004f38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f3a:	4b2c      	ldr	r3, [pc, #176]	@ (8004fec <HAL_I2S_MspInit+0xd8>)
 8004f3c:	2180      	movs	r1, #128	@ 0x80
 8004f3e:	01c9      	lsls	r1, r1, #7
 8004f40:	430a      	orrs	r2, r1
 8004f42:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f44:	4b29      	ldr	r3, [pc, #164]	@ (8004fec <HAL_I2S_MspInit+0xd8>)
 8004f46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f48:	4b28      	ldr	r3, [pc, #160]	@ (8004fec <HAL_I2S_MspInit+0xd8>)
 8004f4a:	2102      	movs	r1, #2
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004f50:	4b26      	ldr	r3, [pc, #152]	@ (8004fec <HAL_I2S_MspInit+0xd8>)
 8004f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f54:	2202      	movs	r2, #2
 8004f56:	4013      	ands	r3, r2
 8004f58:	60bb      	str	r3, [r7, #8]
 8004f5a:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8004f5c:	193b      	adds	r3, r7, r4
 8004f5e:	22b0      	movs	r2, #176	@ 0xb0
 8004f60:	0212      	lsls	r2, r2, #8
 8004f62:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f64:	0021      	movs	r1, r4
 8004f66:	187b      	adds	r3, r7, r1
 8004f68:	2202      	movs	r2, #2
 8004f6a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f6c:	187b      	adds	r3, r7, r1
 8004f6e:	2200      	movs	r2, #0
 8004f70:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f72:	187b      	adds	r3, r7, r1
 8004f74:	2200      	movs	r2, #0
 8004f76:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8004f78:	187b      	adds	r3, r7, r1
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f7e:	187b      	adds	r3, r7, r1
 8004f80:	4a1b      	ldr	r2, [pc, #108]	@ (8004ff0 <HAL_I2S_MspInit+0xdc>)
 8004f82:	0019      	movs	r1, r3
 8004f84:	0010      	movs	r0, r2
 8004f86:	f003 fd8d 	bl	8008aa4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8004f8a:	4b1a      	ldr	r3, [pc, #104]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004f8c:	4a1a      	ldr	r2, [pc, #104]	@ (8004ff8 <HAL_I2S_MspInit+0xe4>)
 8004f8e:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8004f90:	4b18      	ldr	r3, [pc, #96]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004f92:	2202      	movs	r2, #2
 8004f94:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004f96:	4b17      	ldr	r3, [pc, #92]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004f9c:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8004fa2:	4b14      	ldr	r3, [pc, #80]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004fa4:	2280      	movs	r2, #128	@ 0x80
 8004fa6:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004fa8:	4b12      	ldr	r3, [pc, #72]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004faa:	2280      	movs	r2, #128	@ 0x80
 8004fac:	0052      	lsls	r2, r2, #1
 8004fae:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004fb0:	4b10      	ldr	r3, [pc, #64]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004fb2:	2280      	movs	r2, #128	@ 0x80
 8004fb4:	00d2      	lsls	r2, r2, #3
 8004fb6:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8004fb8:	4b0e      	ldr	r3, [pc, #56]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004fba:	2220      	movs	r2, #32
 8004fbc:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8004fbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8004fc4:	4b0b      	ldr	r3, [pc, #44]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004fc6:	0018      	movs	r0, r3
 8004fc8:	f003 fac0 	bl	800854c <HAL_DMA_Init>
 8004fcc:	1e03      	subs	r3, r0, #0
 8004fce:	d001      	beq.n	8004fd4 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8004fd0:	f000 f8f2 	bl	80051b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a07      	ldr	r2, [pc, #28]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004fd8:	631a      	str	r2, [r3, #48]	@ 0x30
 8004fda:	4b06      	ldr	r3, [pc, #24]	@ (8004ff4 <HAL_I2S_MspInit+0xe0>)
 8004fdc:	687a      	ldr	r2, [r7, #4]
 8004fde:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8004fe0:	46c0      	nop			@ (mov r8, r8)
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	b009      	add	sp, #36	@ 0x24
 8004fe6:	bd90      	pop	{r4, r7, pc}
 8004fe8:	40003800 	.word	0x40003800
 8004fec:	40021000 	.word	0x40021000
 8004ff0:	50000400 	.word	0x50000400
 8004ff4:	20000a4c 	.word	0x20000a4c
 8004ff8:	40020044 	.word	0x40020044

08004ffc <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b082      	sub	sp, #8
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a0c      	ldr	r2, [pc, #48]	@ (800503c <HAL_I2S_MspDeInit+0x40>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d111      	bne.n	8005032 <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800500e:	4b0c      	ldr	r3, [pc, #48]	@ (8005040 <HAL_I2S_MspDeInit+0x44>)
 8005010:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005012:	4b0b      	ldr	r3, [pc, #44]	@ (8005040 <HAL_I2S_MspDeInit+0x44>)
 8005014:	490b      	ldr	r1, [pc, #44]	@ (8005044 <HAL_I2S_MspDeInit+0x48>)
 8005016:	400a      	ands	r2, r1
 8005018:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 800501a:	23b0      	movs	r3, #176	@ 0xb0
 800501c:	021b      	lsls	r3, r3, #8
 800501e:	4a0a      	ldr	r2, [pc, #40]	@ (8005048 <HAL_I2S_MspDeInit+0x4c>)
 8005020:	0019      	movs	r1, r3
 8005022:	0010      	movs	r0, r2
 8005024:	f003 febc 	bl	8008da0 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800502c:	0018      	movs	r0, r3
 800502e:	f003 fb05 	bl	800863c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 8005032:	46c0      	nop			@ (mov r8, r8)
 8005034:	46bd      	mov	sp, r7
 8005036:	b002      	add	sp, #8
 8005038:	bd80      	pop	{r7, pc}
 800503a:	46c0      	nop			@ (mov r8, r8)
 800503c:	40003800 	.word	0x40003800
 8005040:	40021000 	.word	0x40021000
 8005044:	ffffbfff 	.word	0xffffbfff
 8005048:	50000400 	.word	0x50000400

0800504c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800504c:	b580      	push	{r7, lr}
 800504e:	b082      	sub	sp, #8
 8005050:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005052:	f003 f909 	bl	8008268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005056:	f000 f83d 	bl	80050d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800505a:	f7ff fc5f 	bl	800491c <MX_GPIO_Init>
  MX_DMA_Init();
 800505e:	f7ff fbe1 	bl	8004824 <MX_DMA_Init>
  MX_I2C1_Init();
 8005062:	f7ff fdd5 	bl	8004c10 <MX_I2C1_Init>
  MX_I2S2_Init();
 8005066:	f7ff ff2d 	bl	8004ec4 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 800506a:	f002 fb75 	bl	8007758 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 800506e:	f7ff fe0f 	bl	8004c90 <MX_I2C2_Init>
  MX_USB_PCD_Init();
 8005072:	f002 fcd3 	bl	8007a1c <MX_USB_PCD_Init>
  MX_TIM2_Init();
 8005076:	f002 f9f1 	bl	800745c <MX_TIM2_Init>
  MX_TIM3_Init();
 800507a:	f002 fa63 	bl	8007544 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 800507e:	f002 fb9f 	bl	80077c0 <MX_USART4_UART_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 8005082:	4a0f      	ldr	r2, [pc, #60]	@ (80050c0 <main+0x74>)
 8005084:	4b0f      	ldr	r3, [pc, #60]	@ (80050c4 <main+0x78>)
 8005086:	0011      	movs	r1, r2
 8005088:	0018      	movs	r0, r3
 800508a:	f7ff fd45 	bl	8004b18 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 800508e:	f003 f951 	bl	8008334 <HAL_GetTick>
 8005092:	0003      	movs	r3, r0
 8005094:	22fa      	movs	r2, #250	@ 0xfa
 8005096:	0092      	lsls	r2, r2, #2
 8005098:	4694      	mov	ip, r2
 800509a:	4463      	add	r3, ip
 800509c:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 800509e:	2003      	movs	r0, #3
 80050a0:	f002 fdcc 	bl	8007c3c <SetVerboseLevel>
  BinaryReleaseInfo();
 80050a4:	f002 fde2 	bl	8007c6c <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4);
 80050a8:	4a07      	ldr	r2, [pc, #28]	@ (80050c8 <main+0x7c>)
 80050aa:	4908      	ldr	r1, [pc, #32]	@ (80050cc <main+0x80>)
 80050ac:	4b08      	ldr	r3, [pc, #32]	@ (80050d0 <main+0x84>)
 80050ae:	0018      	movs	r0, r3
 80050b0:	f7ff fbde 	bl	8004870 <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    UpkeepGadget();
 80050b4:	f7ff fc00 	bl	80048b8 <UpkeepGadget>
    ESP_Upkeep();
 80050b8:	f7ff fa18 	bl	80044ec <ESP_Upkeep>
    UpkeepGadget();
 80050bc:	46c0      	nop			@ (mov r8, r8)
 80050be:	e7f9      	b.n	80050b4 <main+0x68>
 80050c0:	20001004 	.word	0x20001004
 80050c4:	20000fc4 	.word	0x20000fc4
 80050c8:	200010fc 	.word	0x200010fc
 80050cc:	20000a10 	.word	0x20000a10
 80050d0:	200008d8 	.word	0x200008d8

080050d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80050d4:	b590      	push	{r4, r7, lr}
 80050d6:	b09d      	sub	sp, #116	@ 0x74
 80050d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80050da:	2438      	movs	r4, #56	@ 0x38
 80050dc:	193b      	adds	r3, r7, r4
 80050de:	0018      	movs	r0, r3
 80050e0:	2338      	movs	r3, #56	@ 0x38
 80050e2:	001a      	movs	r2, r3
 80050e4:	2100      	movs	r1, #0
 80050e6:	f00a f989 	bl	800f3fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050ea:	2324      	movs	r3, #36	@ 0x24
 80050ec:	18fb      	adds	r3, r7, r3
 80050ee:	0018      	movs	r0, r3
 80050f0:	2314      	movs	r3, #20
 80050f2:	001a      	movs	r2, r3
 80050f4:	2100      	movs	r1, #0
 80050f6:	f00a f981 	bl	800f3fc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80050fa:	003b      	movs	r3, r7
 80050fc:	0018      	movs	r0, r3
 80050fe:	2324      	movs	r3, #36	@ 0x24
 8005100:	001a      	movs	r2, r3
 8005102:	2100      	movs	r1, #0
 8005104:	f00a f97a 	bl	800f3fc <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005108:	4b29      	ldr	r3, [pc, #164]	@ (80051b0 <SystemClock_Config+0xdc>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a29      	ldr	r2, [pc, #164]	@ (80051b4 <SystemClock_Config+0xe0>)
 800510e:	401a      	ands	r2, r3
 8005110:	4b27      	ldr	r3, [pc, #156]	@ (80051b0 <SystemClock_Config+0xdc>)
 8005112:	2180      	movs	r1, #128	@ 0x80
 8005114:	0109      	lsls	r1, r1, #4
 8005116:	430a      	orrs	r2, r1
 8005118:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 800511a:	0021      	movs	r1, r4
 800511c:	187b      	adds	r3, r7, r1
 800511e:	2222      	movs	r2, #34	@ 0x22
 8005120:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005122:	187b      	adds	r3, r7, r1
 8005124:	2201      	movs	r2, #1
 8005126:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005128:	187b      	adds	r3, r7, r1
 800512a:	2210      	movs	r2, #16
 800512c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800512e:	187b      	adds	r3, r7, r1
 8005130:	2201      	movs	r2, #1
 8005132:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005134:	187b      	adds	r3, r7, r1
 8005136:	2200      	movs	r2, #0
 8005138:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800513a:	187b      	adds	r3, r7, r1
 800513c:	0018      	movs	r0, r3
 800513e:	f006 fbb7 	bl	800b8b0 <HAL_RCC_OscConfig>
 8005142:	1e03      	subs	r3, r0, #0
 8005144:	d001      	beq.n	800514a <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005146:	f000 f837 	bl	80051b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800514a:	2124      	movs	r1, #36	@ 0x24
 800514c:	187b      	adds	r3, r7, r1
 800514e:	220f      	movs	r2, #15
 8005150:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005152:	187b      	adds	r3, r7, r1
 8005154:	2201      	movs	r2, #1
 8005156:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005158:	187b      	adds	r3, r7, r1
 800515a:	2200      	movs	r2, #0
 800515c:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800515e:	187b      	adds	r3, r7, r1
 8005160:	2200      	movs	r2, #0
 8005162:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005164:	187b      	adds	r3, r7, r1
 8005166:	2200      	movs	r2, #0
 8005168:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800516a:	187b      	adds	r3, r7, r1
 800516c:	2100      	movs	r1, #0
 800516e:	0018      	movs	r0, r3
 8005170:	f006 ff72 	bl	800c058 <HAL_RCC_ClockConfig>
 8005174:	1e03      	subs	r3, r0, #0
 8005176:	d001      	beq.n	800517c <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005178:	f000 f81e 	bl	80051b8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 800517c:	003b      	movs	r3, r7
 800517e:	2249      	movs	r2, #73	@ 0x49
 8005180:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005182:	003b      	movs	r3, r7
 8005184:	2200      	movs	r2, #0
 8005186:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005188:	003b      	movs	r3, r7
 800518a:	2200      	movs	r2, #0
 800518c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 800518e:	003b      	movs	r3, r7
 8005190:	2280      	movs	r2, #128	@ 0x80
 8005192:	04d2      	lsls	r2, r2, #19
 8005194:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005196:	003b      	movs	r3, r7
 8005198:	0018      	movs	r0, r3
 800519a:	f007 f981 	bl	800c4a0 <HAL_RCCEx_PeriphCLKConfig>
 800519e:	1e03      	subs	r3, r0, #0
 80051a0:	d001      	beq.n	80051a6 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80051a2:	f000 f809 	bl	80051b8 <Error_Handler>
  }
}
 80051a6:	46c0      	nop			@ (mov r8, r8)
 80051a8:	46bd      	mov	sp, r7
 80051aa:	b01d      	add	sp, #116	@ 0x74
 80051ac:	bd90      	pop	{r4, r7, pc}
 80051ae:	46c0      	nop			@ (mov r8, r8)
 80051b0:	40007000 	.word	0x40007000
 80051b4:	ffffe7ff 	.word	0xffffe7ff

080051b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80051bc:	b672      	cpsid	i
}
 80051be:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80051c0:	46c0      	nop			@ (mov r8, r8)
 80051c2:	e7fd      	b.n	80051c0 <Error_Handler+0x8>

080051c4 <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 80051c8:	f7ff fd03 	bl	8004bd2 <HT_StartMeasurement>
}
 80051cc:	46c0      	nop			@ (mov r8, r8)
 80051ce:	46bd      	mov	sp, r7
 80051d0:	bd80      	pop	{r7, pc}
	...

080051d4 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 80051d8:	4a04      	ldr	r2, [pc, #16]	@ (80051ec <HT_IsMeasurementDoneWrapper+0x18>)
 80051da:	4b05      	ldr	r3, [pc, #20]	@ (80051f0 <HT_IsMeasurementDoneWrapper+0x1c>)
 80051dc:	0011      	movs	r1, r2
 80051de:	0018      	movs	r0, r3
 80051e0:	f7ff fcfe 	bl	8004be0 <HT_GetMeasurementValues>
 80051e4:	0003      	movs	r3, r0
}
 80051e6:	0018      	movs	r0, r3
 80051e8:	46bd      	mov	sp, r7
 80051ea:	bd80      	pop	{r7, pc}
 80051ec:	20000a98 	.word	0x20000a98
 80051f0:	20000a94 	.word	0x20000a94

080051f4 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 80051f8:	f7ff fb74 	bl	80048e4 <Gas_StartMeasurement>
}
 80051fc:	46c0      	nop			@ (mov r8, r8)
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005204:	b580      	push	{r7, lr}
 8005206:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005208:	4b03      	ldr	r3, [pc, #12]	@ (8005218 <VOC_IsMeasurementDoneWrapper+0x14>)
 800520a:	0018      	movs	r0, r3
 800520c:	f7ff fb71 	bl	80048f2 <Gas_GetMeasurementValues>
 8005210:	0003      	movs	r3, r0
}
 8005212:	0018      	movs	r0, r3
 8005214:	46bd      	mov	sp, r7
 8005216:	bd80      	pop	{r7, pc}
 8005218:	20000a9c 	.word	0x20000a9c

0800521c <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 800521c:	b580      	push	{r7, lr}
 800521e:	af00      	add	r7, sp, #0
}
 8005220:	46c0      	nop			@ (mov r8, r8)
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005226:	b580      	push	{r7, lr}
 8005228:	af00      	add	r7, sp, #0
  return true;
 800522a:	2301      	movs	r3, #1
}
 800522c:	0018      	movs	r0, r3
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}

08005232 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005232:	b580      	push	{r7, lr}
 8005234:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128);
 8005236:	23fa      	movs	r3, #250	@ 0xfa
 8005238:	015b      	lsls	r3, r3, #5
 800523a:	2180      	movs	r1, #128	@ 0x80
 800523c:	0018      	movs	r0, r3
 800523e:	f000 fb59 	bl	80058f4 <MIC_Start>
}
 8005242:	46c0      	nop			@ (mov r8, r8)
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 800524c:	f000 fbde 	bl	8005a0c <MIC_MeasurementDone>
 8005250:	0003      	movs	r3, r0
}
 8005252:	0018      	movs	r0, r3
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 8005258:	b5b0      	push	{r4, r5, r7, lr}
 800525a:	b094      	sub	sp, #80	@ 0x50
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
 8005260:	6039      	str	r1, [r7, #0]
  MeasState = MEAS_STATE_INIT;
 8005262:	4b84      	ldr	r3, [pc, #528]	@ (8005474 <Meas_Init+0x21c>)
 8005264:	2200      	movs	r2, #0
 8005266:	701a      	strb	r2, [r3, #0]
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005268:	4b83      	ldr	r3, [pc, #524]	@ (8005478 <Meas_Init+0x220>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d103      	bne.n	8005278 <Meas_Init+0x20>
 8005270:	4b81      	ldr	r3, [pc, #516]	@ (8005478 <Meas_Init+0x220>)
 8005272:	785b      	ldrb	r3, [r3, #1]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d079      	beq.n	800536c <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	0018      	movs	r0, r3
 800527c:	f7ff fa60 	bl	8004740 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005280:	f7ff fcbe 	bl	8004c00 <HT_DeviceConnected>
 8005284:	0003      	movs	r3, r0
 8005286:	001a      	movs	r2, r3
 8005288:	2301      	movs	r3, #1
 800528a:	4053      	eors	r3, r2
 800528c:	b2db      	uxtb	r3, r3
 800528e:	2b00      	cmp	r3, #0
 8005290:	d017      	beq.n	80052c2 <Meas_Init+0x6a>
       Error("Humidity / Temperature sensor NOT connected!");
 8005292:	4a7a      	ldr	r2, [pc, #488]	@ (800547c <Meas_Init+0x224>)
 8005294:	4b7a      	ldr	r3, [pc, #488]	@ (8005480 <Meas_Init+0x228>)
 8005296:	0019      	movs	r1, r3
 8005298:	2001      	movs	r0, #1
 800529a:	f002 fc53 	bl	8007b44 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 800529e:	4b76      	ldr	r3, [pc, #472]	@ (8005478 <Meas_Init+0x220>)
 80052a0:	2200      	movs	r2, #0
 80052a2:	701a      	strb	r2, [r3, #0]
       // HT Device NOT connected, turning LED on RED.
       // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
       TIM2 -> CCR1 = 0;
 80052a4:	2380      	movs	r3, #128	@ 0x80
 80052a6:	05db      	lsls	r3, r3, #23
 80052a8:	2200      	movs	r2, #0
 80052aa:	635a      	str	r2, [r3, #52]	@ 0x34
       TIM2 -> CCR3 = 4000;
 80052ac:	2380      	movs	r3, #128	@ 0x80
 80052ae:	05db      	lsls	r3, r3, #23
 80052b0:	22fa      	movs	r2, #250	@ 0xfa
 80052b2:	0112      	lsls	r2, r2, #4
 80052b4:	63da      	str	r2, [r3, #60]	@ 0x3c
       TIM2 -> CCR4 = 4000;
 80052b6:	2380      	movs	r3, #128	@ 0x80
 80052b8:	05db      	lsls	r3, r3, #23
 80052ba:	22fa      	movs	r2, #250	@ 0xfa
 80052bc:	0112      	lsls	r2, r2, #4
 80052be:	641a      	str	r2, [r3, #64]	@ 0x40
 80052c0:	e013      	b.n	80052ea <Meas_Init+0x92>
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      Debug("Humidity / Temperature sensor initialised.");
 80052c2:	4a70      	ldr	r2, [pc, #448]	@ (8005484 <Meas_Init+0x22c>)
 80052c4:	4b70      	ldr	r3, [pc, #448]	@ (8005488 <Meas_Init+0x230>)
 80052c6:	0019      	movs	r1, r3
 80052c8:	2003      	movs	r0, #3
 80052ca:	f002 fc3b 	bl	8007b44 <CreateLine>
      TIM2 -> CCR1 = 4000;
 80052ce:	2380      	movs	r3, #128	@ 0x80
 80052d0:	05db      	lsls	r3, r3, #23
 80052d2:	22fa      	movs	r2, #250	@ 0xfa
 80052d4:	0112      	lsls	r2, r2, #4
 80052d6:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 80052d8:	2380      	movs	r3, #128	@ 0x80
 80052da:	05db      	lsls	r3, r3, #23
 80052dc:	2200      	movs	r2, #0
 80052de:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 4000;
 80052e0:	2380      	movs	r3, #128	@ 0x80
 80052e2:	05db      	lsls	r3, r3, #23
 80052e4:	22fa      	movs	r2, #250	@ 0xfa
 80052e6:	0112      	lsls	r2, r2, #4
 80052e8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    if(!Gas_DeviceConnected()) {
 80052ea:	f7ff fb0f 	bl	800490c <Gas_DeviceConnected>
 80052ee:	0003      	movs	r3, r0
 80052f0:	001a      	movs	r2, r3
 80052f2:	2301      	movs	r3, #1
 80052f4:	4053      	eors	r3, r2
 80052f6:	b2db      	uxtb	r3, r3
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d01d      	beq.n	8005338 <Meas_Init+0xe0>
       Error("SGP device not connected!");
 80052fc:	4a63      	ldr	r2, [pc, #396]	@ (800548c <Meas_Init+0x234>)
 80052fe:	4b60      	ldr	r3, [pc, #384]	@ (8005480 <Meas_Init+0x228>)
 8005300:	0019      	movs	r1, r3
 8005302:	2001      	movs	r0, #1
 8005304:	f002 fc1e 	bl	8007b44 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005308:	4b61      	ldr	r3, [pc, #388]	@ (8005490 <Meas_Init+0x238>)
 800530a:	2200      	movs	r2, #0
 800530c:	2101      	movs	r1, #1
 800530e:	0018      	movs	r0, r3
 8005310:	f003 fe28 	bl	8008f64 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005314:	2380      	movs	r3, #128	@ 0x80
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	485d      	ldr	r0, [pc, #372]	@ (8005490 <Meas_Init+0x238>)
 800531a:	2201      	movs	r2, #1
 800531c:	0019      	movs	r1, r3
 800531e:	f003 fe21 	bl	8008f64 <HAL_GPIO_WritePin>
       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005322:	2380      	movs	r3, #128	@ 0x80
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	485a      	ldr	r0, [pc, #360]	@ (8005490 <Meas_Init+0x238>)
 8005328:	2201      	movs	r2, #1
 800532a:	0019      	movs	r1, r3
 800532c:	f003 fe1a 	bl	8008f64 <HAL_GPIO_WritePin>
       MeasEnabled.VOC_measurementEnabled = false;
 8005330:	4b51      	ldr	r3, [pc, #324]	@ (8005478 <Meas_Init+0x220>)
 8005332:	2200      	movs	r2, #0
 8005334:	705a      	strb	r2, [r3, #1]
 8005336:	e019      	b.n	800536c <Meas_Init+0x114>
    }else{
      Debug("SGP sensor initialised.");
 8005338:	4a56      	ldr	r2, [pc, #344]	@ (8005494 <Meas_Init+0x23c>)
 800533a:	4b53      	ldr	r3, [pc, #332]	@ (8005488 <Meas_Init+0x230>)
 800533c:	0019      	movs	r1, r3
 800533e:	2003      	movs	r0, #3
 8005340:	f002 fc00 	bl	8007b44 <CreateLine>
      // HT Device is connected, turning led on GREEN.
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005344:	4b52      	ldr	r3, [pc, #328]	@ (8005490 <Meas_Init+0x238>)
 8005346:	2201      	movs	r2, #1
 8005348:	2101      	movs	r1, #1
 800534a:	0018      	movs	r0, r3
 800534c:	f003 fe0a 	bl	8008f64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005350:	2380      	movs	r3, #128	@ 0x80
 8005352:	005b      	lsls	r3, r3, #1
 8005354:	484e      	ldr	r0, [pc, #312]	@ (8005490 <Meas_Init+0x238>)
 8005356:	2200      	movs	r2, #0
 8005358:	0019      	movs	r1, r3
 800535a:	f003 fe03 	bl	8008f64 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 800535e:	2380      	movs	r3, #128	@ 0x80
 8005360:	009b      	lsls	r3, r3, #2
 8005362:	484b      	ldr	r0, [pc, #300]	@ (8005490 <Meas_Init+0x238>)
 8005364:	2201      	movs	r2, #1
 8005366:	0019      	movs	r1, r3
 8005368:	f003 fdfc 	bl	8008f64 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 800536c:	4b42      	ldr	r3, [pc, #264]	@ (8005478 <Meas_Init+0x220>)
 800536e:	78db      	ldrb	r3, [r3, #3]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d003      	beq.n	800537c <Meas_Init+0x124>
    MIC_Init(micI2s);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	0018      	movs	r0, r3
 8005378:	f000 f9e2 	bl	8005740 <MIC_Init>
  }
  uint8_t offset = 0;
 800537c:	254f      	movs	r5, #79	@ 0x4f
 800537e:	197b      	adds	r3, r7, r5
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8005384:	197b      	adds	r3, r7, r5
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	197a      	adds	r2, r7, r5
 800538a:	1c59      	adds	r1, r3, #1
 800538c:	7011      	strb	r1, [r2, #0]
 800538e:	4a3a      	ldr	r2, [pc, #232]	@ (8005478 <Meas_Init+0x220>)
 8005390:	7814      	ldrb	r4, [r2, #0]
 8005392:	4a41      	ldr	r2, [pc, #260]	@ (8005498 <Meas_Init+0x240>)
 8005394:	0119      	lsls	r1, r3, #4
 8005396:	4841      	ldr	r0, [pc, #260]	@ (800549c <Meas_Init+0x244>)
 8005398:	5088      	str	r0, [r1, r2]
 800539a:	493f      	ldr	r1, [pc, #252]	@ (8005498 <Meas_Init+0x240>)
 800539c:	011a      	lsls	r2, r3, #4
 800539e:	188a      	adds	r2, r1, r2
 80053a0:	3204      	adds	r2, #4
 80053a2:	493f      	ldr	r1, [pc, #252]	@ (80054a0 <Meas_Init+0x248>)
 80053a4:	6011      	str	r1, [r2, #0]
 80053a6:	493c      	ldr	r1, [pc, #240]	@ (8005498 <Meas_Init+0x240>)
 80053a8:	011a      	lsls	r2, r3, #4
 80053aa:	188a      	adds	r2, r1, r2
 80053ac:	3208      	adds	r2, #8
 80053ae:	493d      	ldr	r1, [pc, #244]	@ (80054a4 <Meas_Init+0x24c>)
 80053b0:	6011      	str	r1, [r2, #0]
 80053b2:	4a39      	ldr	r2, [pc, #228]	@ (8005498 <Meas_Init+0x240>)
 80053b4:	011b      	lsls	r3, r3, #4
 80053b6:	18d3      	adds	r3, r2, r3
 80053b8:	330c      	adds	r3, #12
 80053ba:	1c22      	adds	r2, r4, #0
 80053bc:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 80053be:	197b      	adds	r3, r7, r5
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	197a      	adds	r2, r7, r5
 80053c4:	1c59      	adds	r1, r3, #1
 80053c6:	7011      	strb	r1, [r2, #0]
 80053c8:	4a2b      	ldr	r2, [pc, #172]	@ (8005478 <Meas_Init+0x220>)
 80053ca:	7854      	ldrb	r4, [r2, #1]
 80053cc:	4a32      	ldr	r2, [pc, #200]	@ (8005498 <Meas_Init+0x240>)
 80053ce:	0119      	lsls	r1, r3, #4
 80053d0:	4835      	ldr	r0, [pc, #212]	@ (80054a8 <Meas_Init+0x250>)
 80053d2:	5088      	str	r0, [r1, r2]
 80053d4:	4930      	ldr	r1, [pc, #192]	@ (8005498 <Meas_Init+0x240>)
 80053d6:	011a      	lsls	r2, r3, #4
 80053d8:	188a      	adds	r2, r1, r2
 80053da:	3204      	adds	r2, #4
 80053dc:	4933      	ldr	r1, [pc, #204]	@ (80054ac <Meas_Init+0x254>)
 80053de:	6011      	str	r1, [r2, #0]
 80053e0:	492d      	ldr	r1, [pc, #180]	@ (8005498 <Meas_Init+0x240>)
 80053e2:	011a      	lsls	r2, r3, #4
 80053e4:	188a      	adds	r2, r1, r2
 80053e6:	3208      	adds	r2, #8
 80053e8:	4931      	ldr	r1, [pc, #196]	@ (80054b0 <Meas_Init+0x258>)
 80053ea:	6011      	str	r1, [r2, #0]
 80053ec:	4a2a      	ldr	r2, [pc, #168]	@ (8005498 <Meas_Init+0x240>)
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	18d3      	adds	r3, r2, r3
 80053f2:	330c      	adds	r3, #12
 80053f4:	1c22      	adds	r2, r4, #0
 80053f6:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 80053f8:	197b      	adds	r3, r7, r5
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	197a      	adds	r2, r7, r5
 80053fe:	1c59      	adds	r1, r3, #1
 8005400:	7011      	strb	r1, [r2, #0]
 8005402:	4a1d      	ldr	r2, [pc, #116]	@ (8005478 <Meas_Init+0x220>)
 8005404:	7894      	ldrb	r4, [r2, #2]
 8005406:	4a24      	ldr	r2, [pc, #144]	@ (8005498 <Meas_Init+0x240>)
 8005408:	0119      	lsls	r1, r3, #4
 800540a:	482a      	ldr	r0, [pc, #168]	@ (80054b4 <Meas_Init+0x25c>)
 800540c:	5088      	str	r0, [r1, r2]
 800540e:	4922      	ldr	r1, [pc, #136]	@ (8005498 <Meas_Init+0x240>)
 8005410:	011a      	lsls	r2, r3, #4
 8005412:	188a      	adds	r2, r1, r2
 8005414:	3204      	adds	r2, #4
 8005416:	4928      	ldr	r1, [pc, #160]	@ (80054b8 <Meas_Init+0x260>)
 8005418:	6011      	str	r1, [r2, #0]
 800541a:	491f      	ldr	r1, [pc, #124]	@ (8005498 <Meas_Init+0x240>)
 800541c:	011a      	lsls	r2, r3, #4
 800541e:	188a      	adds	r2, r1, r2
 8005420:	3208      	adds	r2, #8
 8005422:	4926      	ldr	r1, [pc, #152]	@ (80054bc <Meas_Init+0x264>)
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	4a1c      	ldr	r2, [pc, #112]	@ (8005498 <Meas_Init+0x240>)
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	18d3      	adds	r3, r2, r3
 800542c:	330c      	adds	r3, #12
 800542e:	1c22      	adds	r2, r4, #0
 8005430:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8005432:	197b      	adds	r3, r7, r5
 8005434:	781b      	ldrb	r3, [r3, #0]
 8005436:	197a      	adds	r2, r7, r5
 8005438:	1c59      	adds	r1, r3, #1
 800543a:	7011      	strb	r1, [r2, #0]
 800543c:	4a0e      	ldr	r2, [pc, #56]	@ (8005478 <Meas_Init+0x220>)
 800543e:	78d4      	ldrb	r4, [r2, #3]
 8005440:	4a15      	ldr	r2, [pc, #84]	@ (8005498 <Meas_Init+0x240>)
 8005442:	0119      	lsls	r1, r3, #4
 8005444:	481e      	ldr	r0, [pc, #120]	@ (80054c0 <Meas_Init+0x268>)
 8005446:	5088      	str	r0, [r1, r2]
 8005448:	4913      	ldr	r1, [pc, #76]	@ (8005498 <Meas_Init+0x240>)
 800544a:	011a      	lsls	r2, r3, #4
 800544c:	188a      	adds	r2, r1, r2
 800544e:	3204      	adds	r2, #4
 8005450:	491c      	ldr	r1, [pc, #112]	@ (80054c4 <Meas_Init+0x26c>)
 8005452:	6011      	str	r1, [r2, #0]
 8005454:	4910      	ldr	r1, [pc, #64]	@ (8005498 <Meas_Init+0x240>)
 8005456:	011a      	lsls	r2, r3, #4
 8005458:	188a      	adds	r2, r1, r2
 800545a:	3208      	adds	r2, #8
 800545c:	491a      	ldr	r1, [pc, #104]	@ (80054c8 <Meas_Init+0x270>)
 800545e:	6011      	str	r1, [r2, #0]
 8005460:	4a0d      	ldr	r2, [pc, #52]	@ (8005498 <Meas_Init+0x240>)
 8005462:	011b      	lsls	r3, r3, #4
 8005464:	18d3      	adds	r3, r2, r3
 8005466:	330c      	adds	r3, #12
 8005468:	1c22      	adds	r2, r4, #0
 800546a:	701a      	strb	r2, [r3, #0]
}
 800546c:	46c0      	nop			@ (mov r8, r8)
 800546e:	46bd      	mov	sp, r7
 8005470:	b014      	add	sp, #80	@ 0x50
 8005472:	bdb0      	pop	{r4, r5, r7, pc}
 8005474:	20000ae8 	.word	0x20000ae8
 8005478:	20000ae4 	.word	0x20000ae4
 800547c:	08011ef8 	.word	0x08011ef8
 8005480:	08011f28 	.word	0x08011f28
 8005484:	08011f2c 	.word	0x08011f2c
 8005488:	08011f58 	.word	0x08011f58
 800548c:	08011f5c 	.word	0x08011f5c
 8005490:	50000400 	.word	0x50000400
 8005494:	08011f78 	.word	0x08011f78
 8005498:	20000aa4 	.word	0x20000aa4
 800549c:	080051c5 	.word	0x080051c5
 80054a0:	080051d5 	.word	0x080051d5
 80054a4:	20000aa0 	.word	0x20000aa0
 80054a8:	080051f5 	.word	0x080051f5
 80054ac:	08005205 	.word	0x08005205
 80054b0:	20000aa1 	.word	0x20000aa1
 80054b4:	0800521d 	.word	0x0800521d
 80054b8:	08005227 	.word	0x08005227
 80054bc:	20000aa2 	.word	0x20000aa2
 80054c0:	08005233 	.word	0x08005233
 80054c4:	08005249 	.word	0x08005249
 80054c8:	20000aa3 	.word	0x20000aa3

080054cc <StartMeasurements>:

void StartMeasurements(void) {
 80054cc:	b580      	push	{r7, lr}
 80054ce:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80054d0:	4b10      	ldr	r3, [pc, #64]	@ (8005514 <StartMeasurements+0x48>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	701a      	strb	r2, [r3, #0]
 80054d6:	e015      	b.n	8005504 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 80054d8:	4b0e      	ldr	r3, [pc, #56]	@ (8005514 <StartMeasurements+0x48>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	4a0e      	ldr	r2, [pc, #56]	@ (8005518 <StartMeasurements+0x4c>)
 80054de:	011b      	lsls	r3, r3, #4
 80054e0:	18d3      	adds	r3, r2, r3
 80054e2:	330c      	adds	r3, #12
 80054e4:	781b      	ldrb	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d006      	beq.n	80054f8 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 80054ea:	4b0a      	ldr	r3, [pc, #40]	@ (8005514 <StartMeasurements+0x48>)
 80054ec:	781b      	ldrb	r3, [r3, #0]
 80054ee:	001a      	movs	r2, r3
 80054f0:	4b09      	ldr	r3, [pc, #36]	@ (8005518 <StartMeasurements+0x4c>)
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	58d3      	ldr	r3, [r2, r3]
 80054f6:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 80054f8:	4b06      	ldr	r3, [pc, #24]	@ (8005514 <StartMeasurements+0x48>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	3301      	adds	r3, #1
 80054fe:	b2da      	uxtb	r2, r3
 8005500:	4b04      	ldr	r3, [pc, #16]	@ (8005514 <StartMeasurements+0x48>)
 8005502:	701a      	strb	r2, [r3, #0]
 8005504:	4b03      	ldr	r3, [pc, #12]	@ (8005514 <StartMeasurements+0x48>)
 8005506:	781b      	ldrb	r3, [r3, #0]
 8005508:	2b03      	cmp	r3, #3
 800550a:	d9e5      	bls.n	80054d8 <StartMeasurements+0xc>
    }
  }
}
 800550c:	46c0      	nop			@ (mov r8, r8)
 800550e:	46c0      	nop			@ (mov r8, r8)
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000ae9 	.word	0x20000ae9
 8005518:	20000aa4 	.word	0x20000aa4

0800551c <ResetMeasurements>:

void ResetMeasurements(void) {
 800551c:	b580      	push	{r7, lr}
 800551e:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005520:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <ResetMeasurements+0x34>)
 8005522:	2200      	movs	r2, #0
 8005524:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005526:	4b0a      	ldr	r3, [pc, #40]	@ (8005550 <ResetMeasurements+0x34>)
 8005528:	2200      	movs	r2, #0
 800552a:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 800552c:	4b08      	ldr	r3, [pc, #32]	@ (8005550 <ResetMeasurements+0x34>)
 800552e:	2200      	movs	r2, #0
 8005530:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005532:	4b07      	ldr	r3, [pc, #28]	@ (8005550 <ResetMeasurements+0x34>)
 8005534:	2200      	movs	r2, #0
 8005536:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005538:	4b05      	ldr	r3, [pc, #20]	@ (8005550 <ResetMeasurements+0x34>)
 800553a:	2200      	movs	r2, #0
 800553c:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 800553e:	4b04      	ldr	r3, [pc, #16]	@ (8005550 <ResetMeasurements+0x34>)
 8005540:	2200      	movs	r2, #0
 8005542:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005544:	4b02      	ldr	r3, [pc, #8]	@ (8005550 <ResetMeasurements+0x34>)
 8005546:	2200      	movs	r2, #0
 8005548:	73da      	strb	r2, [r3, #15]
}
 800554a:	46c0      	nop			@ (mov r8, r8)
 800554c:	46bd      	mov	sp, r7
 800554e:	bd80      	pop	{r7, pc}
 8005550:	20000a94 	.word	0x20000a94

08005554 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005554:	b580      	push	{r7, lr}
 8005556:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005558:	4b18      	ldr	r3, [pc, #96]	@ (80055bc <MeasurementsCompleted+0x68>)
 800555a:	2200      	movs	r2, #0
 800555c:	701a      	strb	r2, [r3, #0]
 800555e:	e024      	b.n	80055aa <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005560:	4b16      	ldr	r3, [pc, #88]	@ (80055bc <MeasurementsCompleted+0x68>)
 8005562:	781b      	ldrb	r3, [r3, #0]
 8005564:	4a16      	ldr	r2, [pc, #88]	@ (80055c0 <MeasurementsCompleted+0x6c>)
 8005566:	011b      	lsls	r3, r3, #4
 8005568:	18d3      	adds	r3, r2, r3
 800556a:	330c      	adds	r3, #12
 800556c:	781b      	ldrb	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d015      	beq.n	800559e <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005572:	4b12      	ldr	r3, [pc, #72]	@ (80055bc <MeasurementsCompleted+0x68>)
 8005574:	781b      	ldrb	r3, [r3, #0]
 8005576:	4a12      	ldr	r2, [pc, #72]	@ (80055c0 <MeasurementsCompleted+0x6c>)
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	18d3      	adds	r3, r2, r3
 800557c:	3304      	adds	r3, #4
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4798      	blx	r3
 8005582:	1e03      	subs	r3, r0, #0
 8005584:	d009      	beq.n	800559a <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005586:	4b0d      	ldr	r3, [pc, #52]	@ (80055bc <MeasurementsCompleted+0x68>)
 8005588:	781b      	ldrb	r3, [r3, #0]
 800558a:	4a0d      	ldr	r2, [pc, #52]	@ (80055c0 <MeasurementsCompleted+0x6c>)
 800558c:	011b      	lsls	r3, r3, #4
 800558e:	18d3      	adds	r3, r2, r3
 8005590:	3308      	adds	r3, #8
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	2201      	movs	r2, #1
 8005596:	701a      	strb	r2, [r3, #0]
 8005598:	e001      	b.n	800559e <MeasurementsCompleted+0x4a>
      }else {
        return false;
 800559a:	2300      	movs	r3, #0
 800559c:	e00a      	b.n	80055b4 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 800559e:	4b07      	ldr	r3, [pc, #28]	@ (80055bc <MeasurementsCompleted+0x68>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	3301      	adds	r3, #1
 80055a4:	b2da      	uxtb	r2, r3
 80055a6:	4b05      	ldr	r3, [pc, #20]	@ (80055bc <MeasurementsCompleted+0x68>)
 80055a8:	701a      	strb	r2, [r3, #0]
 80055aa:	4b04      	ldr	r3, [pc, #16]	@ (80055bc <MeasurementsCompleted+0x68>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	2b03      	cmp	r3, #3
 80055b0:	d9d6      	bls.n	8005560 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 80055b2:	2301      	movs	r3, #1
}
 80055b4:	0018      	movs	r0, r3
 80055b6:	46bd      	mov	sp, r7
 80055b8:	bd80      	pop	{r7, pc}
 80055ba:	46c0      	nop			@ (mov r8, r8)
 80055bc:	20000ae9 	.word	0x20000ae9
 80055c0:	20000aa4 	.word	0x20000aa4

080055c4 <Meas_Upkeep>:

void Meas_Upkeep(void) {
 80055c4:	b5b0      	push	{r4, r5, r7, lr}
 80055c6:	b084      	sub	sp, #16
 80055c8:	af04      	add	r7, sp, #16
  switch(MeasState) {
 80055ca:	4b2e      	ldr	r3, [pc, #184]	@ (8005684 <Meas_Upkeep+0xc0>)
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b05      	cmp	r3, #5
 80055d0:	d850      	bhi.n	8005674 <Meas_Upkeep+0xb0>
 80055d2:	009a      	lsls	r2, r3, #2
 80055d4:	4b2c      	ldr	r3, [pc, #176]	@ (8005688 <Meas_Upkeep+0xc4>)
 80055d6:	18d3      	adds	r3, r2, r3
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 80055dc:	4a2b      	ldr	r2, [pc, #172]	@ (800568c <Meas_Upkeep+0xc8>)
 80055de:	4b2c      	ldr	r3, [pc, #176]	@ (8005690 <Meas_Upkeep+0xcc>)
 80055e0:	0019      	movs	r1, r3
 80055e2:	2003      	movs	r0, #3
 80055e4:	f002 faae 	bl	8007b44 <CreateLine>
    break;
 80055e8:	e049      	b.n	800567e <Meas_Upkeep+0xba>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 80055ea:	f7ff ff97 	bl	800551c <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 80055ee:	4b25      	ldr	r3, [pc, #148]	@ (8005684 <Meas_Upkeep+0xc0>)
 80055f0:	2201      	movs	r2, #1
 80055f2:	701a      	strb	r2, [r3, #0]
    break;
 80055f4:	e043      	b.n	800567e <Meas_Upkeep+0xba>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 80055f6:	f7ff ff69 	bl	80054cc <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 80055fa:	4b22      	ldr	r3, [pc, #136]	@ (8005684 <Meas_Upkeep+0xc0>)
 80055fc:	2202      	movs	r2, #2
 80055fe:	701a      	strb	r2, [r3, #0]
   break;
 8005600:	e03d      	b.n	800567e <Meas_Upkeep+0xba>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8005602:	f7ff ffa7 	bl	8005554 <MeasurementsCompleted>
 8005606:	1e03      	subs	r3, r0, #0
 8005608:	d038      	beq.n	800567c <Meas_Upkeep+0xb8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 800560a:	4b1e      	ldr	r3, [pc, #120]	@ (8005684 <Meas_Upkeep+0xc0>)
 800560c:	2203      	movs	r2, #3
 800560e:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005610:	e034      	b.n	800567c <Meas_Upkeep+0xb8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8005612:	4a20      	ldr	r2, [pc, #128]	@ (8005694 <Meas_Upkeep+0xd0>)
 8005614:	4b1e      	ldr	r3, [pc, #120]	@ (8005690 <Meas_Upkeep+0xcc>)
 8005616:	0019      	movs	r1, r3
 8005618:	2003      	movs	r0, #3
 800561a:	f002 fa93 	bl	8007b44 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 800561e:	4b1e      	ldr	r3, [pc, #120]	@ (8005698 <Meas_Upkeep+0xd4>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	4a1e      	ldr	r2, [pc, #120]	@ (800569c <Meas_Upkeep+0xd8>)
 8005624:	491a      	ldr	r1, [pc, #104]	@ (8005690 <Meas_Upkeep+0xcc>)
 8005626:	2003      	movs	r0, #3
 8005628:	f002 fa8c 	bl	8007b44 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 800562c:	4b1a      	ldr	r3, [pc, #104]	@ (8005698 <Meas_Upkeep+0xd4>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	1c18      	adds	r0, r3, #0
 8005632:	f7fd fe95 	bl	8003360 <__aeabi_f2d>
 8005636:	0004      	movs	r4, r0
 8005638:	000d      	movs	r5, r1
 800563a:	4b17      	ldr	r3, [pc, #92]	@ (8005698 <Meas_Upkeep+0xd4>)
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	1c18      	adds	r0, r3, #0
 8005640:	f7fd fe8e 	bl	8003360 <__aeabi_f2d>
 8005644:	0002      	movs	r2, r0
 8005646:	000b      	movs	r3, r1
 8005648:	4815      	ldr	r0, [pc, #84]	@ (80056a0 <Meas_Upkeep+0xdc>)
 800564a:	4911      	ldr	r1, [pc, #68]	@ (8005690 <Meas_Upkeep+0xcc>)
 800564c:	9202      	str	r2, [sp, #8]
 800564e:	9303      	str	r3, [sp, #12]
 8005650:	9400      	str	r4, [sp, #0]
 8005652:	9501      	str	r5, [sp, #4]
 8005654:	0002      	movs	r2, r0
 8005656:	2003      	movs	r0, #3
 8005658:	f002 fa74 	bl	8007b44 <CreateLine>
    setHIDSMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc);
 800565c:	4b0e      	ldr	r3, [pc, #56]	@ (8005698 <Meas_Upkeep+0xd4>)
 800565e:	685a      	ldr	r2, [r3, #4]
 8005660:	4b0d      	ldr	r3, [pc, #52]	@ (8005698 <Meas_Upkeep+0xd4>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	1c19      	adds	r1, r3, #0
 8005666:	1c10      	adds	r0, r2, #0
 8005668:	f7fd ff70 	bl	800354c <setHIDSMeasurement>
    MeasState = MEAS_STATE_INIT;
 800566c:	4b05      	ldr	r3, [pc, #20]	@ (8005684 <Meas_Upkeep+0xc0>)
 800566e:	2200      	movs	r2, #0
 8005670:	701a      	strb	r2, [r3, #0]
    break;
 8005672:	e004      	b.n	800567e <Meas_Upkeep+0xba>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8005674:	4b03      	ldr	r3, [pc, #12]	@ (8005684 <Meas_Upkeep+0xc0>)
 8005676:	2200      	movs	r2, #0
 8005678:	701a      	strb	r2, [r3, #0]
    break;
 800567a:	e000      	b.n	800567e <Meas_Upkeep+0xba>
    break;
 800567c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800567e:	46c0      	nop			@ (mov r8, r8)
 8005680:	46bd      	mov	sp, r7
 8005682:	bdb0      	pop	{r4, r5, r7, pc}
 8005684:	20000ae8 	.word	0x20000ae8
 8005688:	080125a0 	.word	0x080125a0
 800568c:	08011f90 	.word	0x08011f90
 8005690:	08011f58 	.word	0x08011f58
 8005694:	08011fb0 	.word	0x08011fb0
 8005698:	20000a94 	.word	0x20000a94
 800569c:	08011fc4 	.word	0x08011fc4
 80056a0:	08011fdc 	.word	0x08011fdc

080056a4 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 80056a4:	b590      	push	{r4, r7, lr}
 80056a6:	b085      	sub	sp, #20
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	1d3b      	adds	r3, r7, #4
 80056ac:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 80056ae:	240f      	movs	r4, #15
 80056b0:	193b      	adds	r3, r7, r4
 80056b2:	2200      	movs	r2, #0
 80056b4:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 80056b6:	4b20      	ldr	r3, [pc, #128]	@ (8005738 <Meas_SetEnabledSensors+0x94>)
 80056b8:	1d3a      	adds	r2, r7, #4
 80056ba:	6812      	ldr	r2, [r2, #0]
 80056bc:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 80056be:	193b      	adds	r3, r7, r4
 80056c0:	781b      	ldrb	r3, [r3, #0]
 80056c2:	193a      	adds	r2, r7, r4
 80056c4:	1c59      	adds	r1, r3, #1
 80056c6:	7011      	strb	r1, [r2, #0]
 80056c8:	0018      	movs	r0, r3
 80056ca:	1d3b      	adds	r3, r7, #4
 80056cc:	7819      	ldrb	r1, [r3, #0]
 80056ce:	4a1b      	ldr	r2, [pc, #108]	@ (800573c <Meas_SetEnabledSensors+0x98>)
 80056d0:	0103      	lsls	r3, r0, #4
 80056d2:	18d3      	adds	r3, r2, r3
 80056d4:	330c      	adds	r3, #12
 80056d6:	1c0a      	adds	r2, r1, #0
 80056d8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80056da:	193b      	adds	r3, r7, r4
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	193a      	adds	r2, r7, r4
 80056e0:	1c59      	adds	r1, r3, #1
 80056e2:	7011      	strb	r1, [r2, #0]
 80056e4:	0018      	movs	r0, r3
 80056e6:	1d3b      	adds	r3, r7, #4
 80056e8:	7859      	ldrb	r1, [r3, #1]
 80056ea:	4a14      	ldr	r2, [pc, #80]	@ (800573c <Meas_SetEnabledSensors+0x98>)
 80056ec:	0103      	lsls	r3, r0, #4
 80056ee:	18d3      	adds	r3, r2, r3
 80056f0:	330c      	adds	r3, #12
 80056f2:	1c0a      	adds	r2, r1, #0
 80056f4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 80056f6:	193b      	adds	r3, r7, r4
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	193a      	adds	r2, r7, r4
 80056fc:	1c59      	adds	r1, r3, #1
 80056fe:	7011      	strb	r1, [r2, #0]
 8005700:	0018      	movs	r0, r3
 8005702:	1d3b      	adds	r3, r7, #4
 8005704:	7899      	ldrb	r1, [r3, #2]
 8005706:	4a0d      	ldr	r2, [pc, #52]	@ (800573c <Meas_SetEnabledSensors+0x98>)
 8005708:	0103      	lsls	r3, r0, #4
 800570a:	18d3      	adds	r3, r2, r3
 800570c:	330c      	adds	r3, #12
 800570e:	1c0a      	adds	r2, r1, #0
 8005710:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8005712:	193b      	adds	r3, r7, r4
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	193a      	adds	r2, r7, r4
 8005718:	1c59      	adds	r1, r3, #1
 800571a:	7011      	strb	r1, [r2, #0]
 800571c:	0018      	movs	r0, r3
 800571e:	1d3b      	adds	r3, r7, #4
 8005720:	78d9      	ldrb	r1, [r3, #3]
 8005722:	4a06      	ldr	r2, [pc, #24]	@ (800573c <Meas_SetEnabledSensors+0x98>)
 8005724:	0103      	lsls	r3, r0, #4
 8005726:	18d3      	adds	r3, r2, r3
 8005728:	330c      	adds	r3, #12
 800572a:	1c0a      	adds	r2, r1, #0
 800572c:	701a      	strb	r2, [r3, #0]
}
 800572e:	46c0      	nop			@ (mov r8, r8)
 8005730:	46bd      	mov	sp, r7
 8005732:	b005      	add	sp, #20
 8005734:	bd90      	pop	{r4, r7, pc}
 8005736:	46c0      	nop			@ (mov r8, r8)
 8005738:	20000ae4 	.word	0x20000ae4
 800573c:	20000aa4 	.word	0x20000aa4

08005740 <MIC_Init>:
static volatile bool StartUpDone = false;
static volatile bool DataReady = false;
static uint8_t MIC_InitRetries = 0;
static uint8_t MIC_MaxRetries = 3;

void MIC_Init(I2S_HandleTypeDef* i2SHandle) {
 8005740:	b5b0      	push	{r4, r5, r7, lr}
 8005742:	b084      	sub	sp, #16
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
  I2SHandle = i2SHandle;
 8005748:	4b42      	ldr	r3, [pc, #264]	@ (8005854 <MIC_Init+0x114>)
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	601a      	str	r2, [r3, #0]
  if (I2SHandle == NULL) {
 800574e:	4b41      	ldr	r3, [pc, #260]	@ (8005854 <MIC_Init+0x114>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d106      	bne.n	8005764 <MIC_Init+0x24>
     Error("Microphone is not initialised.");
 8005756:	4a40      	ldr	r2, [pc, #256]	@ (8005858 <MIC_Init+0x118>)
 8005758:	4b40      	ldr	r3, [pc, #256]	@ (800585c <MIC_Init+0x11c>)
 800575a:	0019      	movs	r1, r3
 800575c:	2001      	movs	r0, #1
 800575e:	f002 f9f1 	bl	8007b44 <CreateLine>
     return;
 8005762:	e073      	b.n	800584c <MIC_Init+0x10c>
  }
  // Start data receiving to check if MIC is connected.
  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples);
 8005764:	4b3b      	ldr	r3, [pc, #236]	@ (8005854 <MIC_Init+0x114>)
 8005766:	6818      	ldr	r0, [r3, #0]
 8005768:	4b3d      	ldr	r3, [pc, #244]	@ (8005860 <MIC_Init+0x120>)
 800576a:	881a      	ldrh	r2, [r3, #0]
 800576c:	250f      	movs	r5, #15
 800576e:	197c      	adds	r4, r7, r5
 8005770:	4b3c      	ldr	r3, [pc, #240]	@ (8005864 <MIC_Init+0x124>)
 8005772:	0019      	movs	r1, r3
 8005774:	f005 fd42 	bl	800b1fc <HAL_I2S_Receive_DMA>
 8005778:	0003      	movs	r3, r0
 800577a:	7023      	strb	r3, [r4, #0]
  if(status == HAL_ERROR) {
 800577c:	197b      	adds	r3, r7, r5
 800577e:	781b      	ldrb	r3, [r3, #0]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d111      	bne.n	80057a8 <MIC_Init+0x68>
    Error("Microphone NOT initialised.");
 8005784:	4a38      	ldr	r2, [pc, #224]	@ (8005868 <MIC_Init+0x128>)
 8005786:	4b35      	ldr	r3, [pc, #212]	@ (800585c <MIC_Init+0x11c>)
 8005788:	0019      	movs	r1, r3
 800578a:	2001      	movs	r0, #1
 800578c:	f002 f9da 	bl	8007b44 <CreateLine>
    // Setting LED to RED to show mic is not working.
    TIM3 -> CCR1 = 2000;
 8005790:	4b36      	ldr	r3, [pc, #216]	@ (800586c <MIC_Init+0x12c>)
 8005792:	22fa      	movs	r2, #250	@ 0xfa
 8005794:	00d2      	lsls	r2, r2, #3
 8005796:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 4000;
 8005798:	4b34      	ldr	r3, [pc, #208]	@ (800586c <MIC_Init+0x12c>)
 800579a:	22fa      	movs	r2, #250	@ 0xfa
 800579c:	0112      	lsls	r2, r2, #4
 800579e:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 80057a0:	4b32      	ldr	r3, [pc, #200]	@ (800586c <MIC_Init+0x12c>)
 80057a2:	22fa      	movs	r2, #250	@ 0xfa
 80057a4:	0112      	lsls	r2, r2, #4
 80057a6:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if(status == HAL_BUSY) {
 80057a8:	230f      	movs	r3, #15
 80057aa:	18fb      	adds	r3, r7, r3
 80057ac:	781b      	ldrb	r3, [r3, #0]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d135      	bne.n	800581e <MIC_Init+0xde>
    Debug("Microphone is BUSY, retrying.");
 80057b2:	4a2f      	ldr	r2, [pc, #188]	@ (8005870 <MIC_Init+0x130>)
 80057b4:	4b2f      	ldr	r3, [pc, #188]	@ (8005874 <MIC_Init+0x134>)
 80057b6:	0019      	movs	r1, r3
 80057b8:	2003      	movs	r0, #3
 80057ba:	f002 f9c3 	bl	8007b44 <CreateLine>
    // Setting LED to YELLOW to show mic is busy.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 2000;
 80057be:	4b2b      	ldr	r3, [pc, #172]	@ (800586c <MIC_Init+0x12c>)
 80057c0:	22fa      	movs	r2, #250	@ 0xfa
 80057c2:	00d2      	lsls	r2, r2, #3
 80057c4:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 80057c6:	4b29      	ldr	r3, [pc, #164]	@ (800586c <MIC_Init+0x12c>)
 80057c8:	22fa      	movs	r2, #250	@ 0xfa
 80057ca:	00d2      	lsls	r2, r2, #3
 80057cc:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 80057ce:	4b27      	ldr	r3, [pc, #156]	@ (800586c <MIC_Init+0x12c>)
 80057d0:	22fa      	movs	r2, #250	@ 0xfa
 80057d2:	0112      	lsls	r2, r2, #4
 80057d4:	63da      	str	r2, [r3, #60]	@ 0x3c
    if(MIC_InitRetries <= MIC_MaxRetries) {
 80057d6:	4b28      	ldr	r3, [pc, #160]	@ (8005878 <MIC_Init+0x138>)
 80057d8:	781a      	ldrb	r2, [r3, #0]
 80057da:	4b28      	ldr	r3, [pc, #160]	@ (800587c <MIC_Init+0x13c>)
 80057dc:	781b      	ldrb	r3, [r3, #0]
 80057de:	429a      	cmp	r2, r3
 80057e0:	d80a      	bhi.n	80057f8 <MIC_Init+0xb8>
      MIC_InitRetries += 1;
 80057e2:	4b25      	ldr	r3, [pc, #148]	@ (8005878 <MIC_Init+0x138>)
 80057e4:	781b      	ldrb	r3, [r3, #0]
 80057e6:	3301      	adds	r3, #1
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	4b23      	ldr	r3, [pc, #140]	@ (8005878 <MIC_Init+0x138>)
 80057ec:	701a      	strb	r2, [r3, #0]
      // Calling function again.
      MIC_Init(i2SHandle);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	0018      	movs	r0, r3
 80057f2:	f7ff ffa5 	bl	8005740 <MIC_Init>
 80057f6:	e024      	b.n	8005842 <MIC_Init+0x102>
    }else {
      Debug("Microphone is BUSY and is NOT working after retrying.");
 80057f8:	4a21      	ldr	r2, [pc, #132]	@ (8005880 <MIC_Init+0x140>)
 80057fa:	4b1e      	ldr	r3, [pc, #120]	@ (8005874 <MIC_Init+0x134>)
 80057fc:	0019      	movs	r1, r3
 80057fe:	2003      	movs	r0, #3
 8005800:	f002 f9a0 	bl	8007b44 <CreateLine>
      // Setting LED to RED to show mic is not working.
      // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
      TIM3 -> CCR1 = 2000;
 8005804:	4b19      	ldr	r3, [pc, #100]	@ (800586c <MIC_Init+0x12c>)
 8005806:	22fa      	movs	r2, #250	@ 0xfa
 8005808:	00d2      	lsls	r2, r2, #3
 800580a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 800580c:	4b17      	ldr	r3, [pc, #92]	@ (800586c <MIC_Init+0x12c>)
 800580e:	22fa      	movs	r2, #250	@ 0xfa
 8005810:	0112      	lsls	r2, r2, #4
 8005812:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8005814:	4b15      	ldr	r3, [pc, #84]	@ (800586c <MIC_Init+0x12c>)
 8005816:	22fa      	movs	r2, #250	@ 0xfa
 8005818:	0112      	lsls	r2, r2, #4
 800581a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800581c:	e011      	b.n	8005842 <MIC_Init+0x102>
    }
  }else {
    Debug("Microphone initialised.");
 800581e:	4a19      	ldr	r2, [pc, #100]	@ (8005884 <MIC_Init+0x144>)
 8005820:	4b14      	ldr	r3, [pc, #80]	@ (8005874 <MIC_Init+0x134>)
 8005822:	0019      	movs	r1, r3
 8005824:	2003      	movs	r0, #3
 8005826:	f002 f98d 	bl	8007b44 <CreateLine>
    // Setting LED to GREEN to show mic is working.
    // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
    TIM3 -> CCR1 = 4000;
 800582a:	4b10      	ldr	r3, [pc, #64]	@ (800586c <MIC_Init+0x12c>)
 800582c:	22fa      	movs	r2, #250	@ 0xfa
 800582e:	0112      	lsls	r2, r2, #4
 8005830:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = 2000;
 8005832:	4b0e      	ldr	r3, [pc, #56]	@ (800586c <MIC_Init+0x12c>)
 8005834:	22fa      	movs	r2, #250	@ 0xfa
 8005836:	00d2      	lsls	r2, r2, #3
 8005838:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = 4000;
 800583a:	4b0c      	ldr	r3, [pc, #48]	@ (800586c <MIC_Init+0x12c>)
 800583c:	22fa      	movs	r2, #250	@ 0xfa
 800583e:	0112      	lsls	r2, r2, #4
 8005840:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  // Stop DMA
  HAL_I2S_DMAStop(I2SHandle);
 8005842:	4b04      	ldr	r3, [pc, #16]	@ (8005854 <MIC_Init+0x114>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	0018      	movs	r0, r3
 8005848:	f005 fd9a 	bl	800b380 <HAL_I2S_DMAStop>
}
 800584c:	46bd      	mov	sp, r7
 800584e:	b004      	add	sp, #16
 8005850:	bdb0      	pop	{r4, r5, r7, pc}
 8005852:	46c0      	nop			@ (mov r8, r8)
 8005854:	20000aec 	.word	0x20000aec
 8005858:	08012010 	.word	0x08012010
 800585c:	08012030 	.word	0x08012030
 8005860:	200000fc 	.word	0x200000fc
 8005864:	20000af0 	.word	0x20000af0
 8005868:	08012034 	.word	0x08012034
 800586c:	40000400 	.word	0x40000400
 8005870:	08012050 	.word	0x08012050
 8005874:	08012070 	.word	0x08012070
 8005878:	20000efa 	.word	0x20000efa
 800587c:	200000fe 	.word	0x200000fe
 8005880:	08012074 	.word	0x08012074
 8005884:	080120ac 	.word	0x080120ac

08005888 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 8005890:	4b0c      	ldr	r3, [pc, #48]	@ (80058c4 <UpdateSampleRate+0x3c>)
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	695b      	ldr	r3, [r3, #20]
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	429a      	cmp	r2, r3
 800589a:	d00e      	beq.n	80058ba <UpdateSampleRate+0x32>
    return;
  }
  HAL_I2S_DeInit(I2SHandle);
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <UpdateSampleRate+0x3c>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f005 fc7f 	bl	800b1a4 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 80058a6:	4b07      	ldr	r3, [pc, #28]	@ (80058c4 <UpdateSampleRate+0x3c>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	687a      	ldr	r2, [r7, #4]
 80058ac:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 80058ae:	4b05      	ldr	r3, [pc, #20]	@ (80058c4 <UpdateSampleRate+0x3c>)
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	0018      	movs	r0, r3
 80058b4:	f005 fb84 	bl	800afc0 <HAL_I2S_Init>
 80058b8:	e000      	b.n	80058bc <UpdateSampleRate+0x34>
    return;
 80058ba:	46c0      	nop			@ (mov r8, r8)
}
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	20000aec 	.word	0x20000aec

080058c8 <ConvertAudio>:

static uint32_t ConvertAudio(uint16_t* data) {
 80058c8:	b580      	push	{r7, lr}
 80058ca:	b084      	sub	sp, #16
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	6078      	str	r0, [r7, #4]
  uint32_t audioValue = data[1] | (data[0] << 16);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	3302      	adds	r3, #2
 80058d4:	881b      	ldrh	r3, [r3, #0]
 80058d6:	001a      	movs	r2, r3
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	041b      	lsls	r3, r3, #16
 80058de:	4313      	orrs	r3, r2
 80058e0:	60fb      	str	r3, [r7, #12]
  audioValue = audioValue >> 7;
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	09db      	lsrs	r3, r3, #7
 80058e6:	60fb      	str	r3, [r7, #12]
  return audioValue;
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	0018      	movs	r0, r3
 80058ec:	46bd      	mov	sp, r7
 80058ee:	b004      	add	sp, #16
 80058f0:	bd80      	pop	{r7, pc}
	...

080058f4 <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 80058f4:	b590      	push	{r4, r7, lr}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	000a      	movs	r2, r1
 80058fe:	1cbb      	adds	r3, r7, #2
 8005900:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 8005902:	4b1d      	ldr	r3, [pc, #116]	@ (8005978 <MIC_Start+0x84>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 800590a:	4a1c      	ldr	r2, [pc, #112]	@ (800597c <MIC_Start+0x88>)
 800590c:	4b1c      	ldr	r3, [pc, #112]	@ (8005980 <MIC_Start+0x8c>)
 800590e:	0019      	movs	r1, r3
 8005910:	2001      	movs	r0, #1
 8005912:	f002 f917 	bl	8007b44 <CreateLine>
    return;
 8005916:	e02c      	b.n	8005972 <MIC_Start+0x7e>
  }
  Debug("In mic start");
 8005918:	4a1a      	ldr	r2, [pc, #104]	@ (8005984 <MIC_Start+0x90>)
 800591a:	4b1b      	ldr	r3, [pc, #108]	@ (8005988 <MIC_Start+0x94>)
 800591c:	0019      	movs	r1, r3
 800591e:	2003      	movs	r0, #3
 8005920:	f002 f910 	bl	8007b44 <CreateLine>
  UpdateSampleRate(sampleRate);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	0018      	movs	r0, r3
 8005928:	f7ff ffae 	bl	8005888 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 800592c:	4b17      	ldr	r3, [pc, #92]	@ (800598c <MIC_Start+0x98>)
 800592e:	1cba      	adds	r2, r7, #2
 8005930:	8812      	ldrh	r2, [r2, #0]
 8005932:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 8005934:	f002 f992 	bl	8007c5c <GetCurrentHalTicks>
 8005938:	0002      	movs	r2, r0
 800593a:	4b15      	ldr	r3, [pc, #84]	@ (8005990 <MIC_Start+0x9c>)
 800593c:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 800593e:	4b14      	ldr	r3, [pc, #80]	@ (8005990 <MIC_Start+0x9c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3314      	adds	r3, #20
 8005944:	001a      	movs	r2, r3
 8005946:	4b13      	ldr	r3, [pc, #76]	@ (8005994 <MIC_Start+0xa0>)
 8005948:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 800594a:	4b13      	ldr	r3, [pc, #76]	@ (8005998 <MIC_Start+0xa4>)
 800594c:	2200      	movs	r2, #0
 800594e:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8005950:	4b12      	ldr	r3, [pc, #72]	@ (800599c <MIC_Start+0xa8>)
 8005952:	2200      	movs	r2, #0
 8005954:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, Samples >> 1);
 8005956:	4b08      	ldr	r3, [pc, #32]	@ (8005978 <MIC_Start+0x84>)
 8005958:	6818      	ldr	r0, [r3, #0]
 800595a:	4b0c      	ldr	r3, [pc, #48]	@ (800598c <MIC_Start+0x98>)
 800595c:	881b      	ldrh	r3, [r3, #0]
 800595e:	085b      	lsrs	r3, r3, #1
 8005960:	b29a      	uxth	r2, r3
 8005962:	230f      	movs	r3, #15
 8005964:	18fc      	adds	r4, r7, r3
 8005966:	4b0e      	ldr	r3, [pc, #56]	@ (80059a0 <MIC_Start+0xac>)
 8005968:	0019      	movs	r1, r3
 800596a:	f005 fc47 	bl	800b1fc <HAL_I2S_Receive_DMA>
 800596e:	0003      	movs	r3, r0
 8005970:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

//  Info("Status %d", status);

}
 8005972:	46bd      	mov	sp, r7
 8005974:	b005      	add	sp, #20
 8005976:	bd90      	pop	{r4, r7, pc}
 8005978:	20000aec 	.word	0x20000aec
 800597c:	08012010 	.word	0x08012010
 8005980:	08012030 	.word	0x08012030
 8005984:	080120c4 	.word	0x080120c4
 8005988:	08012070 	.word	0x08012070
 800598c:	200000fc 	.word	0x200000fc
 8005990:	20000ef0 	.word	0x20000ef0
 8005994:	20000ef4 	.word	0x20000ef4
 8005998:	20000ef8 	.word	0x20000ef8
 800599c:	20000ef9 	.word	0x20000ef9
 80059a0:	20000af0 	.word	0x20000af0

080059a4 <MIC_Print>:
//static void MIC_ProcessFFT() {
//  CalculateFFT();
//}


void MIC_Print(void) {
 80059a4:	b580      	push	{r7, lr}
 80059a6:	b082      	sub	sp, #8
 80059a8:	af00      	add	r7, sp, #0
  Info("New samples");
 80059aa:	4a13      	ldr	r2, [pc, #76]	@ (80059f8 <MIC_Print+0x54>)
 80059ac:	4b13      	ldr	r3, [pc, #76]	@ (80059fc <MIC_Print+0x58>)
 80059ae:	0019      	movs	r1, r3
 80059b0:	2002      	movs	r0, #2
 80059b2:	f002 f8c7 	bl	8007b44 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 80059b6:	2300      	movs	r3, #0
 80059b8:	607b      	str	r3, [r7, #4]
 80059ba:	e011      	b.n	80059e0 <MIC_Print+0x3c>
    uint32_t sample = ConvertAudio(&AudioRxBuffer[i]);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	005a      	lsls	r2, r3, #1
 80059c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005a00 <MIC_Print+0x5c>)
 80059c2:	18d3      	adds	r3, r2, r3
 80059c4:	0018      	movs	r0, r3
 80059c6:	f7ff ff7f 	bl	80058c8 <ConvertAudio>
 80059ca:	0003      	movs	r3, r0
 80059cc:	603b      	str	r3, [r7, #0]
    Info("0x%08x", sample);
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	4a0c      	ldr	r2, [pc, #48]	@ (8005a04 <MIC_Print+0x60>)
 80059d2:	490a      	ldr	r1, [pc, #40]	@ (80059fc <MIC_Print+0x58>)
 80059d4:	2002      	movs	r0, #2
 80059d6:	f002 f8b5 	bl	8007b44 <CreateLine>
  for (uint32_t i = 0; i < Samples; i += 2) {
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	3302      	adds	r3, #2
 80059de:	607b      	str	r3, [r7, #4]
 80059e0:	4b09      	ldr	r3, [pc, #36]	@ (8005a08 <MIC_Print+0x64>)
 80059e2:	881b      	ldrh	r3, [r3, #0]
 80059e4:	001a      	movs	r2, r3
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d3e7      	bcc.n	80059bc <MIC_Print+0x18>
  }
}
 80059ec:	46c0      	nop			@ (mov r8, r8)
 80059ee:	46c0      	nop			@ (mov r8, r8)
 80059f0:	46bd      	mov	sp, r7
 80059f2:	b002      	add	sp, #8
 80059f4:	bd80      	pop	{r7, pc}
 80059f6:	46c0      	nop			@ (mov r8, r8)
 80059f8:	080120d4 	.word	0x080120d4
 80059fc:	080120e0 	.word	0x080120e0
 8005a00:	20000af0 	.word	0x20000af0
 8005a04:	080120e4 	.word	0x080120e4
 8005a08:	200000fc 	.word	0x200000fc

08005a0c <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	af00      	add	r7, sp, #0
  if(DataReady) {
 8005a10:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <MIC_MeasurementDone+0x30>)
 8005a12:	781b      	ldrb	r3, [r3, #0]
 8005a14:	b2db      	uxtb	r3, r3
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d00c      	beq.n	8005a34 <MIC_MeasurementDone+0x28>
    MIC_Print();
 8005a1a:	f7ff ffc3 	bl	80059a4 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples >> 1);
 8005a1e:	4b08      	ldr	r3, [pc, #32]	@ (8005a40 <MIC_MeasurementDone+0x34>)
 8005a20:	881b      	ldrh	r3, [r3, #0]
 8005a22:	085b      	lsrs	r3, r3, #1
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	4a07      	ldr	r2, [pc, #28]	@ (8005a44 <MIC_MeasurementDone+0x38>)
 8005a28:	4907      	ldr	r1, [pc, #28]	@ (8005a48 <MIC_MeasurementDone+0x3c>)
 8005a2a:	2003      	movs	r0, #3
 8005a2c:	f002 f88a 	bl	8007b44 <CreateLine>
    return true;
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <MIC_MeasurementDone+0x2a>
  }
  return false;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	0018      	movs	r0, r3
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	20000ef9 	.word	0x20000ef9
 8005a40:	200000fc 	.word	0x200000fc
 8005a44:	080120ec 	.word	0x080120ec
 8005a48:	08012070 	.word	0x08012070

08005a4c <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b082      	sub	sp, #8
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8005a54:	4b10      	ldr	r3, [pc, #64]	@ (8005a98 <HAL_I2S_RxCpltCallback+0x4c>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d118      	bne.n	8005a90 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 8005a5e:	4b0f      	ldr	r3, [pc, #60]	@ (8005a9c <HAL_I2S_RxCpltCallback+0x50>)
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8005a68:	4b0b      	ldr	r3, [pc, #44]	@ (8005a98 <HAL_I2S_RxCpltCallback+0x4c>)
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f005 fc87 	bl	800b380 <HAL_I2S_DMAStop>
    DataReady = true;
 8005a72:	4b0b      	ldr	r3, [pc, #44]	@ (8005aa0 <HAL_I2S_RxCpltCallback+0x54>)
 8005a74:	2201      	movs	r2, #1
 8005a76:	701a      	strb	r2, [r3, #0]
 8005a78:	e00b      	b.n	8005a92 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 8005a7a:	4b0a      	ldr	r3, [pc, #40]	@ (8005aa4 <HAL_I2S_RxCpltCallback+0x58>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	0018      	movs	r0, r3
 8005a80:	f002 f80a 	bl	8007a98 <TimestampIsReached>
 8005a84:	1e03      	subs	r3, r0, #0
 8005a86:	d004      	beq.n	8005a92 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8005a88:	4b04      	ldr	r3, [pc, #16]	@ (8005a9c <HAL_I2S_RxCpltCallback+0x50>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
 8005a8e:	e000      	b.n	8005a92 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8005a90:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8005a92:	46bd      	mov	sp, r7
 8005a94:	b002      	add	sp, #8
 8005a96:	bd80      	pop	{r7, pc}
 8005a98:	20000aec 	.word	0x20000aec
 8005a9c:	20000ef8 	.word	0x20000ef8
 8005aa0:	20000ef9 	.word	0x20000ef9
 8005aa4:	20000ef4 	.word	0x20000ef4

08005aa8 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	60f8      	str	r0, [r7, #12]
 8005ab0:	60b9      	str	r1, [r7, #8]
 8005ab2:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	687a      	ldr	r2, [r7, #4]
 8005abe:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	2b01      	cmp	r3, #1
 8005ac4:	d113      	bne.n	8005aee <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	22fe      	movs	r2, #254	@ 0xfe
 8005aca:	0592      	lsls	r2, r2, #22
 8005acc:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	4a1a      	ldr	r2, [pc, #104]	@ (8005b3c <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8005ad2:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	4a1a      	ldr	r2, [pc, #104]	@ (8005b40 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8005ad8:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4a19      	ldr	r2, [pc, #100]	@ (8005b44 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 8005ade:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a19      	ldr	r2, [pc, #100]	@ (8005b48 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8005ae4:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	4a18      	ldr	r2, [pc, #96]	@ (8005b4c <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 8005aea:	61da      	str	r2, [r3, #28]
 8005aec:	e011      	b.n	8005b12 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	4a17      	ldr	r2, [pc, #92]	@ (8005b50 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8005af2:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a17      	ldr	r2, [pc, #92]	@ (8005b54 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8005af8:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	4a16      	ldr	r2, [pc, #88]	@ (8005b58 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 8005afe:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	4a16      	ldr	r2, [pc, #88]	@ (8005b5c <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 8005b04:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	4a15      	ldr	r2, [pc, #84]	@ (8005b60 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8005b0a:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	4a15      	ldr	r2, [pc, #84]	@ (8005b64 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8005b10:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	4a14      	ldr	r2, [pc, #80]	@ (8005b68 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 8005b16:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	4a14      	ldr	r2, [pc, #80]	@ (8005b6c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8005b1c:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4a12      	ldr	r2, [pc, #72]	@ (8005b6c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8005b22:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a12      	ldr	r2, [pc, #72]	@ (8005b70 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8005b28:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	0018      	movs	r0, r3
 8005b2e:	f000 f831 	bl	8005b94 <GasIndexAlgorithm_reset>
}
 8005b32:	46c0      	nop			@ (mov r8, r8)
 8005b34:	46bd      	mov	sp, r7
 8005b36:	b004      	add	sp, #16
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	46c0      	nop			@ (mov r8, r8)
 8005b3c:	00002710 	.word	0x00002710
 8005b40:	44340000 	.word	0x44340000
 8005b44:	46859800 	.word	0x46859800
 8005b48:	46a05000 	.word	0x46a05000
 8005b4c:	41f00000 	.word	0x41f00000
 8005b50:	42c80000 	.word	0x42c80000
 8005b54:	00004e20 	.word	0x00004e20
 8005b58:	43340000 	.word	0x43340000
 8005b5c:	4528c000 	.word	0x4528c000
 8005b60:	45a32000 	.word	0x45a32000
 8005b64:	43aa0000 	.word	0x43aa0000
 8005b68:	43660000 	.word	0x43660000
 8005b6c:	41400000 	.word	0x41400000
 8005b70:	42480000 	.word	0x42480000

08005b74 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8005b74:	b580      	push	{r7, lr}
 8005b76:	b082      	sub	sp, #8
 8005b78:	af00      	add	r7, sp, #0
 8005b7a:	6078      	str	r0, [r7, #4]
 8005b7c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8005b7e:	22fe      	movs	r2, #254	@ 0xfe
 8005b80:	0592      	lsls	r2, r2, #22
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	0018      	movs	r0, r3
 8005b88:	f7ff ff8e 	bl	8005aa8 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8005b8c:	46c0      	nop			@ (mov r8, r8)
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	b002      	add	sp, #8
 8005b92:	bd80      	pop	{r7, pc}

08005b94 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	b082      	sub	sp, #8
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2200      	movs	r2, #0
 8005bac:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	0018      	movs	r0, r3
 8005bb2:	f000 f805 	bl	8005bc0 <GasIndexAlgorithm__init_instances>
}
 8005bb6:	46c0      	nop			@ (mov r8, r8)
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	b002      	add	sp, #8
 8005bbc:	bd80      	pop	{r7, pc}
	...

08005bc0 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8005bc0:	b590      	push	{r4, r7, lr}
 8005bc2:	b083      	sub	sp, #12
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	0018      	movs	r0, r3
 8005bcc:	f000 f8e8 	bl	8005da0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	0018      	movs	r0, r3
 8005bd4:	f000 f9a6 	bl	8005f24 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8005bd8:	1c04      	adds	r4, r0, #0
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	0018      	movs	r0, r3
 8005bde:	f000 f9ab 	bl	8005f38 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8005be2:	1c02      	adds	r2, r0, #0
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	1c21      	adds	r1, r4, #0
 8005be8:	0018      	movs	r0, r3
 8005bea:	f000 fc3b 	bl	8006464 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d107      	bne.n	8005c06 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8005bf6:	23fe      	movs	r3, #254	@ 0xfe
 8005bf8:	059b      	lsls	r3, r3, #22
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <GasIndexAlgorithm__init_instances+0x64>)
 8005bfc:	490a      	ldr	r1, [pc, #40]	@ (8005c28 <GasIndexAlgorithm__init_instances+0x68>)
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fc86 	bl	8006510 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 8005c04:	e005      	b.n	8005c12 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8005c06:	4b09      	ldr	r3, [pc, #36]	@ (8005c2c <GasIndexAlgorithm__init_instances+0x6c>)
 8005c08:	4a09      	ldr	r2, [pc, #36]	@ (8005c30 <GasIndexAlgorithm__init_instances+0x70>)
 8005c0a:	490a      	ldr	r1, [pc, #40]	@ (8005c34 <GasIndexAlgorithm__init_instances+0x74>)
 8005c0c:	6878      	ldr	r0, [r7, #4]
 8005c0e:	f000 fc7f 	bl	8006510 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	0018      	movs	r0, r3
 8005c16:	f000 fd35 	bl	8006684 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8005c1a:	46c0      	nop			@ (mov r8, r8)
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	b003      	add	sp, #12
 8005c20:	bd90      	pop	{r4, r7, pc}
 8005c22:	46c0      	nop			@ (mov r8, r8)
 8005c24:	bc257a78 	.word	0xbc257a78
 8005c28:	44198000 	.word	0x44198000
 8005c2c:	42c80000 	.word	0x42c80000
 8005c30:	bbd4fdf4 	.word	0xbbd4fdf4
 8005c34:	43550000 	.word	0x43550000

08005c38 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8005c38:	b590      	push	{r4, r7, lr}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c48:	4952      	ldr	r1, [pc, #328]	@ (8005d94 <GasIndexAlgorithm_process+0x15c>)
 8005c4a:	1c18      	adds	r0, r3, #0
 8005c4c:	f7fa fc48 	bl	80004e0 <__aeabi_fcmple>
 8005c50:	1e03      	subs	r3, r0, #0
 8005c52:	d00c      	beq.n	8005c6e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	1c19      	adds	r1, r3, #0
 8005c5e:	1c10      	adds	r0, r2, #0
 8005c60:	f7fa fdac 	bl	80007bc <__aeabi_fadd>
 8005c64:	1c03      	adds	r3, r0, #0
 8005c66:	1c1a      	adds	r2, r3, #0
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	631a      	str	r2, [r3, #48]	@ 0x30
 8005c6c:	e080      	b.n	8005d70 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	dd25      	ble.n	8005cc0 <GasIndexAlgorithm_process+0x88>
 8005c74:	68bb      	ldr	r3, [r7, #8]
 8005c76:	4a48      	ldr	r2, [pc, #288]	@ (8005d98 <GasIndexAlgorithm_process+0x160>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	dc21      	bgt.n	8005cc0 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	68db      	ldr	r3, [r3, #12]
 8005c80:	68ba      	ldr	r2, [r7, #8]
 8005c82:	429a      	cmp	r2, r3
 8005c84:	dc04      	bgt.n	8005c90 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	68db      	ldr	r3, [r3, #12]
 8005c8a:	3301      	adds	r3, #1
 8005c8c:	60bb      	str	r3, [r7, #8]
 8005c8e:	e00d      	b.n	8005cac <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	68db      	ldr	r3, [r3, #12]
 8005c94:	4a41      	ldr	r2, [pc, #260]	@ (8005d9c <GasIndexAlgorithm_process+0x164>)
 8005c96:	4694      	mov	ip, r2
 8005c98:	4463      	add	r3, ip
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	dd05      	ble.n	8005cac <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	68db      	ldr	r3, [r3, #12]
 8005ca4:	4a3d      	ldr	r2, [pc, #244]	@ (8005d9c <GasIndexAlgorithm_process+0x164>)
 8005ca6:	4694      	mov	ip, r2
 8005ca8:	4463      	add	r3, ip
 8005caa:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	68db      	ldr	r3, [r3, #12]
 8005cb0:	68ba      	ldr	r2, [r7, #8]
 8005cb2:	1ad3      	subs	r3, r2, r3
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f7fb fc09 	bl	80014cc <__aeabi_i2f>
 8005cba:	1c02      	adds	r2, r0, #0
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	0018      	movs	r0, r3
 8005ccc:	f000 f945 	bl	8005f5a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8005cd0:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8005cd2:	d014      	beq.n	8005cfe <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	1c11      	adds	r1, r2, #0
 8005cdc:	0018      	movs	r0, r3
 8005cde:	f000 fbd1 	bl	8006484 <GasIndexAlgorithm__mox_model__process>
 8005ce2:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	1c11      	adds	r1, r2, #0
 8005cf0:	0018      	movs	r0, r3
 8005cf2:	f000 fc25 	bl	8006540 <GasIndexAlgorithm__sigmoid_scaled__process>
 8005cf6:	1c02      	adds	r2, r0, #0
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	639a      	str	r2, [r3, #56]	@ 0x38
 8005cfc:	e003      	b.n	8005d06 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	689a      	ldr	r2, [r3, #8]
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	1c11      	adds	r1, r2, #0
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f000 fcec 	bl	80066ec <GasIndexAlgorithm__adaptive_lowpass__process>
 8005d14:	1c02      	adds	r2, r0, #0
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d1e:	21fc      	movs	r1, #252	@ 0xfc
 8005d20:	0589      	lsls	r1, r1, #22
 8005d22:	1c18      	adds	r0, r3, #0
 8005d24:	f7fa fbd2 	bl	80004cc <__aeabi_fcmplt>
 8005d28:	1e03      	subs	r3, r0, #0
 8005d2a:	d003      	beq.n	8005d34 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	22fc      	movs	r2, #252	@ 0xfc
 8005d30:	0592      	lsls	r2, r2, #22
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005d38:	2100      	movs	r1, #0
 8005d3a:	1c18      	adds	r0, r3, #0
 8005d3c:	f7fa fbda 	bl	80004f4 <__aeabi_fcmpgt>
 8005d40:	1e03      	subs	r3, r0, #0
 8005d42:	d015      	beq.n	8005d70 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	1c11      	adds	r1, r2, #0
 8005d4c:	0018      	movs	r0, r3
 8005d4e:	f000 fa4f 	bl	80061f0 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	0018      	movs	r0, r3
 8005d56:	f000 f8e5 	bl	8005f24 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8005d5a:	1c04      	adds	r4, r0, #0
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	0018      	movs	r0, r3
 8005d60:	f000 f8ea 	bl	8005f38 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8005d64:	1c02      	adds	r2, r0, #0
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	1c21      	adds	r1, r4, #0
 8005d6a:	0018      	movs	r0, r3
 8005d6c:	f000 fb7a 	bl	8006464 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d74:	21fc      	movs	r1, #252	@ 0xfc
 8005d76:	0589      	lsls	r1, r1, #22
 8005d78:	1c18      	adds	r0, r3, #0
 8005d7a:	f7fa fd1f 	bl	80007bc <__aeabi_fadd>
 8005d7e:	1c03      	adds	r3, r0, #0
 8005d80:	1c18      	adds	r0, r3, #0
 8005d82:	f7fb fb83 	bl	800148c <__aeabi_f2iz>
 8005d86:	0002      	movs	r2, r0
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	601a      	str	r2, [r3, #0]
    return;
 8005d8c:	46c0      	nop			@ (mov r8, r8)
}
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	b005      	add	sp, #20
 8005d92:	bd90      	pop	{r4, r7, pc}
 8005d94:	42340000 	.word	0x42340000
 8005d98:	0000fde7 	.word	0x0000fde7
 8005d9c:	00007fff 	.word	0x00007fff

08005da0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8005da0:	b5b0      	push	{r4, r5, r7, lr}
 8005da2:	b082      	sub	sp, #8
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	223c      	movs	r2, #60	@ 0x3c
 8005dac:	2100      	movs	r1, #0
 8005dae:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2200      	movs	r2, #0
 8005db4:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2200      	movs	r2, #0
 8005dba:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	685b      	ldr	r3, [r3, #4]
 8005dc8:	4952      	ldr	r1, [pc, #328]	@ (8005f14 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8005dca:	1c18      	adds	r0, r3, #0
 8005dcc:	f7fa fe80 	bl	8000ad0 <__aeabi_fdiv>
 8005dd0:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8005dd2:	2188      	movs	r1, #136	@ 0x88
 8005dd4:	05c9      	lsls	r1, r1, #23
 8005dd6:	1c18      	adds	r0, r3, #0
 8005dd8:	f7fb f860 	bl	8000e9c <__aeabi_fmul>
 8005ddc:	1c03      	adds	r3, r0, #0
 8005dde:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	494a      	ldr	r1, [pc, #296]	@ (8005f14 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8005dea:	1c18      	adds	r0, r3, #0
 8005dec:	f7fa fe70 	bl	8000ad0 <__aeabi_fdiv>
 8005df0:	1c03      	adds	r3, r0, #0
 8005df2:	1c19      	adds	r1, r3, #0
 8005df4:	1c20      	adds	r0, r4, #0
 8005df6:	f7fa fce1 	bl	80007bc <__aeabi_fadd>
 8005dfa:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8005dfc:	1c19      	adds	r1, r3, #0
 8005dfe:	1c28      	adds	r0, r5, #0
 8005e00:	f7fa fe66 	bl	8000ad0 <__aeabi_fdiv>
 8005e04:	1c03      	adds	r3, r0, #0
 8005e06:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	4940      	ldr	r1, [pc, #256]	@ (8005f14 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8005e12:	1c18      	adds	r0, r3, #0
 8005e14:	f7fa fe5c 	bl	8000ad0 <__aeabi_fdiv>
 8005e18:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8005e1a:	2185      	movs	r1, #133	@ 0x85
 8005e1c:	05c9      	lsls	r1, r1, #23
 8005e1e:	1c18      	adds	r0, r3, #0
 8005e20:	f7fb f83c 	bl	8000e9c <__aeabi_fmul>
 8005e24:	1c03      	adds	r3, r0, #0
 8005e26:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	685b      	ldr	r3, [r3, #4]
 8005e30:	4938      	ldr	r1, [pc, #224]	@ (8005f14 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8005e32:	1c18      	adds	r0, r3, #0
 8005e34:	f7fa fe4c 	bl	8000ad0 <__aeabi_fdiv>
 8005e38:	1c03      	adds	r3, r0, #0
 8005e3a:	1c19      	adds	r1, r3, #0
 8005e3c:	1c20      	adds	r0, r4, #0
 8005e3e:	f7fa fcbd 	bl	80007bc <__aeabi_fadd>
 8005e42:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8005e44:	1c19      	adds	r1, r3, #0
 8005e46:	1c28      	adds	r0, r5, #0
 8005e48:	f7fa fe42 	bl	8000ad0 <__aeabi_fdiv>
 8005e4c:	1c03      	adds	r3, r0, #0
 8005e4e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d118      	bne.n	8005e8e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8005e60:	2188      	movs	r1, #136	@ 0x88
 8005e62:	05c9      	lsls	r1, r1, #23
 8005e64:	1c18      	adds	r0, r3, #0
 8005e66:	f7fb f819 	bl	8000e9c <__aeabi_fmul>
 8005e6a:	1c03      	adds	r3, r0, #0
 8005e6c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8005e72:	4929      	ldr	r1, [pc, #164]	@ (8005f18 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8005e74:	1c18      	adds	r0, r3, #0
 8005e76:	f7fa fca1 	bl	80007bc <__aeabi_fadd>
 8005e7a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8005e7c:	1c19      	adds	r1, r3, #0
 8005e7e:	1c20      	adds	r0, r4, #0
 8005e80:	f7fa fe26 	bl	8000ad0 <__aeabi_fdiv>
 8005e84:	1c03      	adds	r3, r0, #0
 8005e86:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e8c:	e017      	b.n	8005ebe <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8005e92:	2188      	movs	r1, #136	@ 0x88
 8005e94:	05c9      	lsls	r1, r1, #23
 8005e96:	1c18      	adds	r0, r3, #0
 8005e98:	f7fb f800 	bl	8000e9c <__aeabi_fmul>
 8005e9c:	1c03      	adds	r3, r0, #0
 8005e9e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8005ea4:	491d      	ldr	r1, [pc, #116]	@ (8005f1c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8005ea6:	1c18      	adds	r0, r3, #0
 8005ea8:	f7fa fc88 	bl	80007bc <__aeabi_fadd>
 8005eac:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8005eae:	1c19      	adds	r1, r3, #0
 8005eb0:	1c20      	adds	r0, r4, #0
 8005eb2:	f7fa fe0d 	bl	8000ad0 <__aeabi_fdiv>
 8005eb6:	1c03      	adds	r3, r0, #0
 8005eb8:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8005ec2:	2185      	movs	r1, #133	@ 0x85
 8005ec4:	05c9      	lsls	r1, r1, #23
 8005ec6:	1c18      	adds	r0, r3, #0
 8005ec8:	f7fa ffe8 	bl	8000e9c <__aeabi_fmul>
 8005ecc:	1c03      	adds	r3, r0, #0
 8005ece:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	685b      	ldr	r3, [r3, #4]
 8005ed4:	4912      	ldr	r1, [pc, #72]	@ (8005f20 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8005ed6:	1c18      	adds	r0, r3, #0
 8005ed8:	f7fa fc70 	bl	80007bc <__aeabi_fadd>
 8005edc:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8005ede:	1c19      	adds	r1, r3, #0
 8005ee0:	1c20      	adds	r0, r4, #0
 8005ee2:	f7fa fdf5 	bl	8000ad0 <__aeabi_fdiv>
 8005ee6:	1c03      	adds	r3, r0, #0
 8005ee8:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2200      	movs	r2, #0
 8005f04:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8005f0c:	46c0      	nop			@ (mov r8, r8)
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b002      	add	sp, #8
 8005f12:	bdb0      	pop	{r4, r5, r7, pc}
 8005f14:	45610000 	.word	0x45610000
 8005f18:	44960000 	.word	0x44960000
 8005f1c:	41a00000 	.word	0x41a00000
 8005f20:	451c4000 	.word	0x451c4000

08005f24 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b082      	sub	sp, #8
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8005f30:	1c18      	adds	r0, r3, #0
 8005f32:	46bd      	mov	sp, r7
 8005f34:	b002      	add	sp, #8
 8005f36:	bd80      	pop	{r7, pc}

08005f38 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	b082      	sub	sp, #8
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8005f48:	1c19      	adds	r1, r3, #0
 8005f4a:	1c10      	adds	r0, r2, #0
 8005f4c:	f7fa fc36 	bl	80007bc <__aeabi_fadd>
 8005f50:	1c03      	adds	r3, r0, #0
}
 8005f52:	1c18      	adds	r0, r3, #0
 8005f54:	46bd      	mov	sp, r7
 8005f56:	b002      	add	sp, #8
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b082      	sub	sp, #8
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	223c      	movs	r2, #60	@ 0x3c
 8005f66:	5c9b      	ldrb	r3, [r3, r2]
}
 8005f68:	0018      	movs	r0, r3
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	b002      	add	sp, #8
 8005f6e:	bd80      	pop	{r7, pc}

08005f70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8005f70:	b5b0      	push	{r4, r5, r7, lr}
 8005f72:	b08c      	sub	sp, #48	@ 0x30
 8005f74:	af00      	add	r7, sp, #0
 8005f76:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8005f7c:	1c19      	adds	r1, r3, #0
 8005f7e:	4895      	ldr	r0, [pc, #596]	@ (80061d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8005f80:	f7fb f8ca 	bl	8001118 <__aeabi_fsub>
 8005f84:	1c03      	adds	r3, r0, #0
 8005f86:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005f8c:	1c19      	adds	r1, r3, #0
 8005f8e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005f90:	f7fa fab0 	bl	80004f4 <__aeabi_fcmpgt>
 8005f94:	1e03      	subs	r3, r0, #0
 8005f96:	d00b      	beq.n	8005fb0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8005fa0:	1c19      	adds	r1, r3, #0
 8005fa2:	1c10      	adds	r0, r2, #0
 8005fa4:	f7fa fc0a 	bl	80007bc <__aeabi_fadd>
 8005fa8:	1c03      	adds	r3, r0, #0
 8005faa:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005fb4:	1c19      	adds	r1, r3, #0
 8005fb6:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8005fb8:	f7fa fa9c 	bl	80004f4 <__aeabi_fcmpgt>
 8005fbc:	1e03      	subs	r3, r0, #0
 8005fbe:	d00b      	beq.n	8005fd8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8005fc8:	1c19      	adds	r1, r3, #0
 8005fca:	1c10      	adds	r0, r2, #0
 8005fcc:	f7fa fbf6 	bl	80007bc <__aeabi_fadd>
 8005fd0:	1c03      	adds	r3, r0, #0
 8005fd2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6959      	ldr	r1, [r3, #20]
 8005fdc:	4a7e      	ldr	r2, [pc, #504]	@ (80061d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	0018      	movs	r0, r3
 8005fe2:	f000 f9f1 	bl	80063c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	1c11      	adds	r1, r2, #0
 8005fee:	0018      	movs	r0, r3
 8005ff0:	f000 f9fa 	bl	80063e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8005ff4:	1c03      	adds	r3, r0, #0
 8005ff6:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006004:	1c19      	adds	r1, r3, #0
 8006006:	1c10      	adds	r0, r2, #0
 8006008:	f7fb f886 	bl	8001118 <__aeabi_fsub>
 800600c:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 800600e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006010:	1c18      	adds	r0, r3, #0
 8006012:	f7fa ff43 	bl	8000e9c <__aeabi_fmul>
 8006016:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006018:	1c19      	adds	r1, r3, #0
 800601a:	1c20      	adds	r0, r4, #0
 800601c:	f7fa fbce 	bl	80007bc <__aeabi_fadd>
 8006020:	1c03      	adds	r3, r0, #0
 8006022:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 800602c:	1c19      	adds	r1, r3, #0
 800602e:	486b      	ldr	r0, [pc, #428]	@ (80061dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006030:	f7fb f872 	bl	8001118 <__aeabi_fsub>
 8006034:	1c03      	adds	r3, r0, #0
 8006036:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	1c11      	adds	r1, r2, #0
 8006040:	0018      	movs	r0, r3
 8006042:	f000 f9d1 	bl	80063e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006046:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006048:	1c19      	adds	r1, r3, #0
 800604a:	1c28      	adds	r0, r5, #0
 800604c:	f7fa ff26 	bl	8000e9c <__aeabi_fmul>
 8006050:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8006052:	1c19      	adds	r1, r3, #0
 8006054:	1c20      	adds	r0, r4, #0
 8006056:	f7fa fbb1 	bl	80007bc <__aeabi_fadd>
 800605a:	1c03      	adds	r3, r0, #0
 800605c:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800605e:	4a60      	ldr	r2, [pc, #384]	@ (80061e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006060:	6a39      	ldr	r1, [r7, #32]
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	0018      	movs	r0, r3
 8006066:	f000 f9af 	bl	80063c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	1c11      	adds	r1, r2, #0
 8006072:	0018      	movs	r0, r3
 8006074:	f000 f9b8 	bl	80063e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006078:	1c03      	adds	r3, r0, #0
 800607a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 800607c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800607e:	69f8      	ldr	r0, [r7, #28]
 8006080:	f7fa ff0c 	bl	8000e9c <__aeabi_fmul>
 8006084:	1c03      	adds	r3, r0, #0
 8006086:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	6999      	ldr	r1, [r3, #24]
 8006090:	4a51      	ldr	r2, [pc, #324]	@ (80061d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	0018      	movs	r0, r3
 8006096:	f000 f997 	bl	80063c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	1c11      	adds	r1, r2, #0
 80060a2:	0018      	movs	r0, r3
 80060a4:	f000 f9a0 	bl	80063e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80060a8:	1c03      	adds	r3, r0, #0
 80060aa:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80060b8:	1c19      	adds	r1, r3, #0
 80060ba:	1c10      	adds	r0, r2, #0
 80060bc:	f7fb f82c 	bl	8001118 <__aeabi_fsub>
 80060c0:	1c03      	adds	r3, r0, #0
 80060c2:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80060c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80060c6:	69b8      	ldr	r0, [r7, #24]
 80060c8:	f7fb f826 	bl	8001118 <__aeabi_fsub>
 80060cc:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80060ce:	1c19      	adds	r1, r3, #0
 80060d0:	1c28      	adds	r0, r5, #0
 80060d2:	f7fa fee3 	bl	8000e9c <__aeabi_fmul>
 80060d6:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80060d8:	1c19      	adds	r1, r3, #0
 80060da:	1c20      	adds	r0, r4, #0
 80060dc:	f7fa fb6e 	bl	80007bc <__aeabi_fadd>
 80060e0:	1c03      	adds	r3, r0, #0
 80060e2:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80060ec:	1c19      	adds	r1, r3, #0
 80060ee:	483b      	ldr	r0, [pc, #236]	@ (80061dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80060f0:	f7fb f812 	bl	8001118 <__aeabi_fsub>
 80060f4:	1c03      	adds	r3, r0, #0
 80060f6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	1c11      	adds	r1, r2, #0
 8006100:	0018      	movs	r0, r3
 8006102:	f000 f971 	bl	80063e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006106:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006108:	1c19      	adds	r1, r3, #0
 800610a:	1c28      	adds	r0, r5, #0
 800610c:	f7fa fec6 	bl	8000e9c <__aeabi_fmul>
 8006110:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8006112:	1c19      	adds	r1, r3, #0
 8006114:	1c20      	adds	r0, r4, #0
 8006116:	f7fa fb51 	bl	80007bc <__aeabi_fadd>
 800611a:	1c03      	adds	r3, r0, #0
 800611c:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800611e:	4a30      	ldr	r2, [pc, #192]	@ (80061e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006120:	6939      	ldr	r1, [r7, #16]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	0018      	movs	r0, r3
 8006126:	f000 f94f 	bl	80063c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	1c11      	adds	r1, r2, #0
 8006132:	0018      	movs	r0, r3
 8006134:	f000 f958 	bl	80063e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006138:	1c03      	adds	r3, r0, #0
 800613a:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 800613c:	6979      	ldr	r1, [r7, #20]
 800613e:	68f8      	ldr	r0, [r7, #12]
 8006140:	f7fa feac 	bl	8000e9c <__aeabi_fmul>
 8006144:	1c03      	adds	r3, r0, #0
 8006146:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	4923      	ldr	r1, [pc, #140]	@ (80061e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8006156:	1c18      	adds	r0, r3, #0
 8006158:	f7fa fcba 	bl	8000ad0 <__aeabi_fdiv>
 800615c:	1c03      	adds	r3, r0, #0
 800615e:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8006160:	69f9      	ldr	r1, [r7, #28]
 8006162:	20fe      	movs	r0, #254	@ 0xfe
 8006164:	0580      	lsls	r0, r0, #22
 8006166:	f7fa ffd7 	bl	8001118 <__aeabi_fsub>
 800616a:	1c03      	adds	r3, r0, #0
 800616c:	491e      	ldr	r1, [pc, #120]	@ (80061e8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 800616e:	1c18      	adds	r0, r3, #0
 8006170:	f7fa fe94 	bl	8000e9c <__aeabi_fmul>
 8006174:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8006176:	491d      	ldr	r1, [pc, #116]	@ (80061ec <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8006178:	1c18      	adds	r0, r3, #0
 800617a:	f7fa ffcd 	bl	8001118 <__aeabi_fsub>
 800617e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8006180:	1c19      	adds	r1, r3, #0
 8006182:	1c28      	adds	r0, r5, #0
 8006184:	f7fa fe8a 	bl	8000e9c <__aeabi_fmul>
 8006188:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 800618a:	1c19      	adds	r1, r3, #0
 800618c:	1c20      	adds	r0, r4, #0
 800618e:	f7fa fb15 	bl	80007bc <__aeabi_fadd>
 8006192:	1c03      	adds	r3, r0, #0
 8006194:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800619e:	2100      	movs	r1, #0
 80061a0:	1c18      	adds	r0, r3, #0
 80061a2:	f7fa f993 	bl	80004cc <__aeabi_fcmplt>
 80061a6:	1e03      	subs	r3, r0, #0
 80061a8:	d002      	beq.n	80061b0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2200      	movs	r2, #0
 80061ae:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80061b8:	1c19      	adds	r1, r3, #0
 80061ba:	1c10      	adds	r0, r2, #0
 80061bc:	f7fa f99a 	bl	80004f4 <__aeabi_fcmpgt>
 80061c0:	1e03      	subs	r3, r0, #0
 80061c2:	d100      	bne.n	80061c6 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80061c4:	e002      	b.n	80061cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80061cc:	46c0      	nop			@ (mov r8, r8)
 80061ce:	46bd      	mov	sp, r7
 80061d0:	b00c      	add	sp, #48	@ 0x30
 80061d2:	bdb0      	pop	{r4, r5, r7, pc}
 80061d4:	46fffe00 	.word	0x46fffe00
 80061d8:	3c23d70a 	.word	0x3c23d70a
 80061dc:	43ff0000 	.word	0x43ff0000
 80061e0:	3db851ec 	.word	0x3db851ec
 80061e4:	42700000 	.word	0x42700000
 80061e8:	3fa66666 	.word	0x3fa66666
 80061ec:	3e99999a 	.word	0x3e99999a

080061f0 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80061f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80061f2:	b087      	sub	sp, #28
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	223c      	movs	r2, #60	@ 0x3c
 80061fe:	5c9b      	ldrb	r3, [r3, r2]
 8006200:	2201      	movs	r2, #1
 8006202:	4053      	eors	r3, r2
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00a      	beq.n	8006220 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	223c      	movs	r2, #60	@ 0x3c
 800620e:	2101      	movs	r1, #1
 8006210:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	683a      	ldr	r2, [r7, #0]
 8006216:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2200      	movs	r2, #0
 800621c:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 800621e:	e0c8      	b.n	80063b2 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006224:	4965      	ldr	r1, [pc, #404]	@ (80063bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8006226:	1c18      	adds	r0, r3, #0
 8006228:	f7fa f96e 	bl	8000508 <__aeabi_fcmpge>
 800622c:	1e03      	subs	r3, r0, #0
 800622e:	d107      	bne.n	8006240 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006234:	4962      	ldr	r1, [pc, #392]	@ (80063c0 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8006236:	1c18      	adds	r0, r3, #0
 8006238:	f7fa f952 	bl	80004e0 <__aeabi_fcmple>
 800623c:	1e03      	subs	r3, r0, #0
 800623e:	d00e      	beq.n	800625e <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006248:	1c19      	adds	r1, r3, #0
 800624a:	1c10      	adds	r0, r2, #0
 800624c:	f7fa fab6 	bl	80007bc <__aeabi_fadd>
 8006250:	1c03      	adds	r3, r0, #0
 8006252:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2200      	movs	r2, #0
 800625c:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006262:	1c19      	adds	r1, r3, #0
 8006264:	6838      	ldr	r0, [r7, #0]
 8006266:	f7fa ff57 	bl	8001118 <__aeabi_fsub>
 800626a:	1c03      	adds	r3, r0, #0
 800626c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	0018      	movs	r0, r3
 8006272:	f7ff fe7d 	bl	8005f70 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627a:	1c19      	adds	r1, r3, #0
 800627c:	6838      	ldr	r0, [r7, #0]
 800627e:	f7fa ff4b 	bl	8001118 <__aeabi_fsub>
 8006282:	1c03      	adds	r3, r0, #0
 8006284:	2185      	movs	r1, #133	@ 0x85
 8006286:	05c9      	lsls	r1, r1, #23
 8006288:	1c18      	adds	r0, r3, #0
 800628a:	f7fa fc21 	bl	8000ad0 <__aeabi_fdiv>
 800628e:	1c03      	adds	r3, r0, #0
 8006290:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8006292:	2100      	movs	r1, #0
 8006294:	68f8      	ldr	r0, [r7, #12]
 8006296:	f7fa f919 	bl	80004cc <__aeabi_fcmplt>
 800629a:	1e03      	subs	r3, r0, #0
 800629c:	d008      	beq.n	80062b0 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062a2:	68f9      	ldr	r1, [r7, #12]
 80062a4:	1c18      	adds	r0, r3, #0
 80062a6:	f7fa ff37 	bl	8001118 <__aeabi_fsub>
 80062aa:	1c03      	adds	r3, r0, #0
 80062ac:	617b      	str	r3, [r7, #20]
 80062ae:	e007      	b.n	80062c0 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80062b4:	1c19      	adds	r1, r3, #0
 80062b6:	68f8      	ldr	r0, [r7, #12]
 80062b8:	f7fa fa80 	bl	80007bc <__aeabi_fadd>
 80062bc:	1c03      	adds	r3, r0, #0
 80062be:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80062c0:	23fe      	movs	r3, #254	@ 0xfe
 80062c2:	059b      	lsls	r3, r3, #22
 80062c4:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80062c6:	493f      	ldr	r1, [pc, #252]	@ (80063c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80062c8:	6978      	ldr	r0, [r7, #20]
 80062ca:	f7fa f913 	bl	80004f4 <__aeabi_fcmpgt>
 80062ce:	1e03      	subs	r3, r0, #0
 80062d0:	d010      	beq.n	80062f4 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80062d2:	493c      	ldr	r1, [pc, #240]	@ (80063c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80062d4:	6978      	ldr	r0, [r7, #20]
 80062d6:	f7fa fbfb 	bl	8000ad0 <__aeabi_fdiv>
 80062da:	1c03      	adds	r3, r0, #0
 80062dc:	1c1c      	adds	r4, r3, #0
 80062de:	4939      	ldr	r1, [pc, #228]	@ (80063c4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80062e0:	6978      	ldr	r0, [r7, #20]
 80062e2:	f7fa fbf5 	bl	8000ad0 <__aeabi_fdiv>
 80062e6:	1c03      	adds	r3, r0, #0
 80062e8:	1c19      	adds	r1, r3, #0
 80062ea:	1c20      	adds	r0, r4, #0
 80062ec:	f7fa fdd6 	bl	8000e9c <__aeabi_fmul>
 80062f0:	1c03      	adds	r3, r0, #0
 80062f2:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80062f8:	1c19      	adds	r1, r3, #0
 80062fa:	2085      	movs	r0, #133	@ 0x85
 80062fc:	05c0      	lsls	r0, r0, #23
 80062fe:	f7fa ff0b 	bl	8001118 <__aeabi_fsub>
 8006302:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8006304:	6939      	ldr	r1, [r7, #16]
 8006306:	1c18      	adds	r0, r3, #0
 8006308:	f7fa fdc8 	bl	8000e9c <__aeabi_fmul>
 800630c:	1c03      	adds	r3, r0, #0
 800630e:	1c18      	adds	r0, r3, #0
 8006310:	f00b fa3a 	bl	8011788 <sqrtf>
 8006314:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 800631e:	2185      	movs	r1, #133	@ 0x85
 8006320:	05c9      	lsls	r1, r1, #23
 8006322:	6938      	ldr	r0, [r7, #16]
 8006324:	f7fa fdba 	bl	8000e9c <__aeabi_fmul>
 8006328:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 800632a:	1c19      	adds	r1, r3, #0
 800632c:	1c28      	adds	r0, r5, #0
 800632e:	f7fa fbcf 	bl	8000ad0 <__aeabi_fdiv>
 8006332:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8006334:	1c19      	adds	r1, r3, #0
 8006336:	1c20      	adds	r0, r4, #0
 8006338:	f7fa fdb0 	bl	8000e9c <__aeabi_fmul>
 800633c:	1c03      	adds	r3, r0, #0
 800633e:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006344:	68f9      	ldr	r1, [r7, #12]
 8006346:	1c18      	adds	r0, r3, #0
 8006348:	f7fa fda8 	bl	8000e9c <__aeabi_fmul>
 800634c:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 800634e:	6939      	ldr	r1, [r7, #16]
 8006350:	1c18      	adds	r0, r3, #0
 8006352:	f7fa fbbd 	bl	8000ad0 <__aeabi_fdiv>
 8006356:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8006358:	68f9      	ldr	r1, [r7, #12]
 800635a:	1c18      	adds	r0, r3, #0
 800635c:	f7fa fd9e 	bl	8000e9c <__aeabi_fmul>
 8006360:	1c03      	adds	r3, r0, #0
             sqrtf(
 8006362:	1c19      	adds	r1, r3, #0
 8006364:	1c20      	adds	r0, r4, #0
 8006366:	f7fa fa29 	bl	80007bc <__aeabi_fadd>
 800636a:	1c03      	adds	r3, r0, #0
 800636c:	1c18      	adds	r0, r3, #0
 800636e:	f00b fa0b 	bl	8011788 <sqrtf>
 8006372:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8006374:	1c19      	adds	r1, r3, #0
 8006376:	1c30      	adds	r0, r6, #0
 8006378:	f7fa fd90 	bl	8000e9c <__aeabi_fmul>
 800637c:	1c03      	adds	r3, r0, #0
 800637e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800638c:	68f9      	ldr	r1, [r7, #12]
 800638e:	1c18      	adds	r0, r3, #0
 8006390:	f7fa fd84 	bl	8000e9c <__aeabi_fmul>
 8006394:	1c03      	adds	r3, r0, #0
 8006396:	2182      	movs	r1, #130	@ 0x82
 8006398:	05c9      	lsls	r1, r1, #23
 800639a:	1c18      	adds	r0, r3, #0
 800639c:	f7fa fb98 	bl	8000ad0 <__aeabi_fdiv>
 80063a0:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 80063a2:	1c19      	adds	r1, r3, #0
 80063a4:	1c20      	adds	r0, r4, #0
 80063a6:	f7fa fa09 	bl	80007bc <__aeabi_fadd>
 80063aa:	1c03      	adds	r3, r0, #0
 80063ac:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80063b2:	46c0      	nop			@ (mov r8, r8)
 80063b4:	46bd      	mov	sp, r7
 80063b6:	b007      	add	sp, #28
 80063b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063ba:	46c0      	nop			@ (mov r8, r8)
 80063bc:	42c80000 	.word	0x42c80000
 80063c0:	c2c80000 	.word	0xc2c80000
 80063c4:	44b40000 	.word	0x44b40000

080063c8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b084      	sub	sp, #16
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	68ba      	ldr	r2, [r7, #8]
 80063de:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80063e0:	46c0      	nop			@ (mov r8, r8)
 80063e2:	46bd      	mov	sp, r7
 80063e4:	b004      	add	sp, #16
 80063e6:	bd80      	pop	{r7, pc}

080063e8 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80063e8:	b590      	push	{r4, r7, lr}
 80063ea:	b085      	sub	sp, #20
 80063ec:	af00      	add	r7, sp, #0
 80063ee:	6078      	str	r0, [r7, #4]
 80063f0:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80063fa:	1c19      	adds	r1, r3, #0
 80063fc:	6838      	ldr	r0, [r7, #0]
 80063fe:	f7fa fe8b 	bl	8001118 <__aeabi_fsub>
 8006402:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8006404:	1c19      	adds	r1, r3, #0
 8006406:	1c20      	adds	r0, r4, #0
 8006408:	f7fa fd48 	bl	8000e9c <__aeabi_fmul>
 800640c:	1c03      	adds	r3, r0, #0
 800640e:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8006410:	4912      	ldr	r1, [pc, #72]	@ (800645c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8006412:	68f8      	ldr	r0, [r7, #12]
 8006414:	f7fa f85a 	bl	80004cc <__aeabi_fcmplt>
 8006418:	1e03      	subs	r3, r0, #0
 800641a:	d002      	beq.n	8006422 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 800641c:	23fe      	movs	r3, #254	@ 0xfe
 800641e:	059b      	lsls	r3, r3, #22
 8006420:	e018      	b.n	8006454 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8006422:	490f      	ldr	r1, [pc, #60]	@ (8006460 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8006424:	68f8      	ldr	r0, [r7, #12]
 8006426:	f7fa f865 	bl	80004f4 <__aeabi_fcmpgt>
 800642a:	1e03      	subs	r3, r0, #0
 800642c:	d001      	beq.n	8006432 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 800642e:	2300      	movs	r3, #0
 8006430:	e010      	b.n	8006454 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	1c18      	adds	r0, r3, #0
 8006436:	f00b f97f 	bl	8011738 <expf>
 800643a:	1c03      	adds	r3, r0, #0
 800643c:	21fe      	movs	r1, #254	@ 0xfe
 800643e:	0589      	lsls	r1, r1, #22
 8006440:	1c18      	adds	r0, r3, #0
 8006442:	f7fa f9bb 	bl	80007bc <__aeabi_fadd>
 8006446:	1c03      	adds	r3, r0, #0
 8006448:	1c19      	adds	r1, r3, #0
 800644a:	20fe      	movs	r0, #254	@ 0xfe
 800644c:	0580      	lsls	r0, r0, #22
 800644e:	f7fa fb3f 	bl	8000ad0 <__aeabi_fdiv>
 8006452:	1c03      	adds	r3, r0, #0
    }
}
 8006454:	1c18      	adds	r0, r3, #0
 8006456:	46bd      	mov	sp, r7
 8006458:	b005      	add	sp, #20
 800645a:	bd90      	pop	{r4, r7, pc}
 800645c:	c2480000 	.word	0xc2480000
 8006460:	42480000 	.word	0x42480000

08006464 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	68ba      	ldr	r2, [r7, #8]
 8006474:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	687a      	ldr	r2, [r7, #4]
 800647a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800647c:	46c0      	nop			@ (mov r8, r8)
 800647e:	46bd      	mov	sp, r7
 8006480:	b004      	add	sp, #16
 8006482:	bd80      	pop	{r7, pc}

08006484 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	2b01      	cmp	r3, #1
 8006494:	d114      	bne.n	80064c0 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800649a:	1c19      	adds	r1, r3, #0
 800649c:	6838      	ldr	r0, [r7, #0]
 800649e:	f7fa fe3b 	bl	8001118 <__aeabi_fsub>
 80064a2:	1c03      	adds	r3, r0, #0
 80064a4:	4918      	ldr	r1, [pc, #96]	@ (8006508 <GasIndexAlgorithm__mox_model__process+0x84>)
 80064a6:	1c18      	adds	r0, r3, #0
 80064a8:	f7fa fb12 	bl	8000ad0 <__aeabi_fdiv>
 80064ac:	1c03      	adds	r3, r0, #0
 80064ae:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 80064b4:	1c19      	adds	r1, r3, #0
 80064b6:	1c10      	adds	r0, r2, #0
 80064b8:	f7fa fcf0 	bl	8000e9c <__aeabi_fmul>
 80064bc:	1c03      	adds	r3, r0, #0
 80064be:	e01f      	b.n	8006500 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064c4:	1c19      	adds	r1, r3, #0
 80064c6:	6838      	ldr	r0, [r7, #0]
 80064c8:	f7fa fe26 	bl	8001118 <__aeabi_fsub>
 80064cc:	1c03      	adds	r3, r0, #0
 80064ce:	1c1a      	adds	r2, r3, #0
 80064d0:	2380      	movs	r3, #128	@ 0x80
 80064d2:	061b      	lsls	r3, r3, #24
 80064d4:	4053      	eors	r3, r2
 80064d6:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80064dc:	490b      	ldr	r1, [pc, #44]	@ (800650c <GasIndexAlgorithm__mox_model__process+0x88>)
 80064de:	1c18      	adds	r0, r3, #0
 80064e0:	f7fa f96c 	bl	80007bc <__aeabi_fadd>
 80064e4:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 80064e6:	1c19      	adds	r1, r3, #0
 80064e8:	1c20      	adds	r0, r4, #0
 80064ea:	f7fa faf1 	bl	8000ad0 <__aeabi_fdiv>
 80064ee:	1c03      	adds	r3, r0, #0
 80064f0:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 80064f6:	1c19      	adds	r1, r3, #0
 80064f8:	1c10      	adds	r0, r2, #0
 80064fa:	f7fa fccf 	bl	8000e9c <__aeabi_fmul>
 80064fe:	1c03      	adds	r3, r0, #0
    }
}
 8006500:	1c18      	adds	r0, r3, #0
 8006502:	46bd      	mov	sp, r7
 8006504:	b003      	add	sp, #12
 8006506:	bd90      	pop	{r4, r7, pc}
 8006508:	44fa0000 	.word	0x44fa0000
 800650c:	435c0000 	.word	0x435c0000

08006510 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	60f8      	str	r0, [r7, #12]
 8006518:	60b9      	str	r1, [r7, #8]
 800651a:	607a      	str	r2, [r7, #4]
 800651c:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2180      	movs	r1, #128	@ 0x80
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2184      	movs	r1, #132	@ 0x84
 800652a:	68ba      	ldr	r2, [r7, #8]
 800652c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2188      	movs	r1, #136	@ 0x88
 8006532:	683a      	ldr	r2, [r7, #0]
 8006534:	505a      	str	r2, [r3, r1]
}
 8006536:	46c0      	nop			@ (mov r8, r8)
 8006538:	46bd      	mov	sp, r7
 800653a:	b004      	add	sp, #16
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8006540:	b590      	push	{r4, r7, lr}
 8006542:	b085      	sub	sp, #20
 8006544:	af00      	add	r7, sp, #0
 8006546:	6078      	str	r0, [r7, #4]
 8006548:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2280      	movs	r2, #128	@ 0x80
 800654e:	589c      	ldr	r4, [r3, r2]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2284      	movs	r2, #132	@ 0x84
 8006554:	589b      	ldr	r3, [r3, r2]
 8006556:	1c19      	adds	r1, r3, #0
 8006558:	6838      	ldr	r0, [r7, #0]
 800655a:	f7fa fddd 	bl	8001118 <__aeabi_fsub>
 800655e:	1c03      	adds	r3, r0, #0
 8006560:	1c19      	adds	r1, r3, #0
 8006562:	1c20      	adds	r0, r4, #0
 8006564:	f7fa fc9a 	bl	8000e9c <__aeabi_fmul>
 8006568:	1c03      	adds	r3, r0, #0
 800656a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800656c:	4940      	ldr	r1, [pc, #256]	@ (8006670 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800656e:	68b8      	ldr	r0, [r7, #8]
 8006570:	f7f9 ffac 	bl	80004cc <__aeabi_fcmplt>
 8006574:	1e03      	subs	r3, r0, #0
 8006576:	d001      	beq.n	800657c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8006578:	4b3e      	ldr	r3, [pc, #248]	@ (8006674 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800657a:	e075      	b.n	8006668 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800657c:	493e      	ldr	r1, [pc, #248]	@ (8006678 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800657e:	68b8      	ldr	r0, [r7, #8]
 8006580:	f7f9 ffb8 	bl	80004f4 <__aeabi_fcmpgt>
 8006584:	1e03      	subs	r3, r0, #0
 8006586:	d001      	beq.n	800658c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8006588:	2300      	movs	r3, #0
 800658a:	e06d      	b.n	8006668 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800658c:	2100      	movs	r1, #0
 800658e:	6838      	ldr	r0, [r7, #0]
 8006590:	f7f9 ffba 	bl	8000508 <__aeabi_fcmpge>
 8006594:	1e03      	subs	r3, r0, #0
 8006596:	d047      	beq.n	8006628 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2288      	movs	r2, #136	@ 0x88
 800659c:	589b      	ldr	r3, [r3, r2]
 800659e:	21fe      	movs	r1, #254	@ 0xfe
 80065a0:	0589      	lsls	r1, r1, #22
 80065a2:	1c18      	adds	r0, r3, #0
 80065a4:	f7f9 ff8c 	bl	80004c0 <__aeabi_fcmpeq>
 80065a8:	1e03      	subs	r3, r0, #0
 80065aa:	d00e      	beq.n	80065ca <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	689b      	ldr	r3, [r3, #8]
 80065b0:	1c19      	adds	r1, r3, #0
 80065b2:	20fe      	movs	r0, #254	@ 0xfe
 80065b4:	0580      	lsls	r0, r0, #22
 80065b6:	f7fa fdaf 	bl	8001118 <__aeabi_fsub>
 80065ba:	1c03      	adds	r3, r0, #0
 80065bc:	492f      	ldr	r1, [pc, #188]	@ (800667c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 80065be:	1c18      	adds	r0, r3, #0
 80065c0:	f7fa fc6c 	bl	8000e9c <__aeabi_fmul>
 80065c4:	1c03      	adds	r3, r0, #0
 80065c6:	60fb      	str	r3, [r7, #12]
 80065c8:	e012      	b.n	80065f0 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	492c      	ldr	r1, [pc, #176]	@ (8006680 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 80065d0:	1c18      	adds	r0, r3, #0
 80065d2:	f7fa fc63 	bl	8000e9c <__aeabi_fmul>
 80065d6:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 80065d8:	1c19      	adds	r1, r3, #0
 80065da:	4826      	ldr	r0, [pc, #152]	@ (8006674 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80065dc:	f7fa fd9c 	bl	8001118 <__aeabi_fsub>
 80065e0:	1c03      	adds	r3, r0, #0
 80065e2:	2181      	movs	r1, #129	@ 0x81
 80065e4:	05c9      	lsls	r1, r1, #23
 80065e6:	1c18      	adds	r0, r3, #0
 80065e8:	f7fa fa72 	bl	8000ad0 <__aeabi_fdiv>
 80065ec:	1c03      	adds	r3, r0, #0
 80065ee:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 80065f0:	4920      	ldr	r1, [pc, #128]	@ (8006674 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7fa f8e2 	bl	80007bc <__aeabi_fadd>
 80065f8:	1c03      	adds	r3, r0, #0
 80065fa:	1c1c      	adds	r4, r3, #0
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	1c18      	adds	r0, r3, #0
 8006600:	f00b f89a 	bl	8011738 <expf>
 8006604:	1c03      	adds	r3, r0, #0
 8006606:	21fe      	movs	r1, #254	@ 0xfe
 8006608:	0589      	lsls	r1, r1, #22
 800660a:	1c18      	adds	r0, r3, #0
 800660c:	f7fa f8d6 	bl	80007bc <__aeabi_fadd>
 8006610:	1c03      	adds	r3, r0, #0
 8006612:	1c19      	adds	r1, r3, #0
 8006614:	1c20      	adds	r0, r4, #0
 8006616:	f7fa fa5b 	bl	8000ad0 <__aeabi_fdiv>
 800661a:	1c03      	adds	r3, r0, #0
 800661c:	68f9      	ldr	r1, [r7, #12]
 800661e:	1c18      	adds	r0, r3, #0
 8006620:	f7fa fd7a 	bl	8001118 <__aeabi_fsub>
 8006624:	1c03      	adds	r3, r0, #0
 8006626:	e01f      	b.n	8006668 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2188      	movs	r1, #136	@ 0x88
 8006630:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8006632:	1c19      	adds	r1, r3, #0
 8006634:	1c10      	adds	r0, r2, #0
 8006636:	f7fa fa4b 	bl	8000ad0 <__aeabi_fdiv>
 800663a:	1c03      	adds	r3, r0, #0
 800663c:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 800663e:	68bb      	ldr	r3, [r7, #8]
 8006640:	1c18      	adds	r0, r3, #0
 8006642:	f00b f879 	bl	8011738 <expf>
 8006646:	1c03      	adds	r3, r0, #0
 8006648:	21fe      	movs	r1, #254	@ 0xfe
 800664a:	0589      	lsls	r1, r1, #22
 800664c:	1c18      	adds	r0, r3, #0
 800664e:	f7fa f8b5 	bl	80007bc <__aeabi_fadd>
 8006652:	1c03      	adds	r3, r0, #0
 8006654:	1c19      	adds	r1, r3, #0
 8006656:	4807      	ldr	r0, [pc, #28]	@ (8006674 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8006658:	f7fa fa3a 	bl	8000ad0 <__aeabi_fdiv>
 800665c:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 800665e:	1c19      	adds	r1, r3, #0
 8006660:	1c20      	adds	r0, r4, #0
 8006662:	f7fa fc1b 	bl	8000e9c <__aeabi_fmul>
 8006666:	1c03      	adds	r3, r0, #0
        }
    }
}
 8006668:	1c18      	adds	r0, r3, #0
 800666a:	46bd      	mov	sp, r7
 800666c:	b005      	add	sp, #20
 800666e:	bd90      	pop	{r4, r7, pc}
 8006670:	c2480000 	.word	0xc2480000
 8006674:	43fa0000 	.word	0x43fa0000
 8006678:	42480000 	.word	0x42480000
 800667c:	3f8041ab 	.word	0x3f8041ab
 8006680:	40a00000 	.word	0x40a00000

08006684 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006684:	b590      	push	{r4, r7, lr}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	685b      	ldr	r3, [r3, #4]
 8006694:	4913      	ldr	r1, [pc, #76]	@ (80066e4 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8006696:	1c18      	adds	r0, r3, #0
 8006698:	f7fa f890 	bl	80007bc <__aeabi_fadd>
 800669c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800669e:	1c19      	adds	r1, r3, #0
 80066a0:	1c20      	adds	r0, r4, #0
 80066a2:	f7fa fa15 	bl	8000ad0 <__aeabi_fdiv>
 80066a6:	1c03      	adds	r3, r0, #0
 80066a8:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	228c      	movs	r2, #140	@ 0x8c
 80066ae:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685b      	ldr	r3, [r3, #4]
 80066b8:	490b      	ldr	r1, [pc, #44]	@ (80066e8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 80066ba:	1c18      	adds	r0, r3, #0
 80066bc:	f7fa f87e 	bl	80007bc <__aeabi_fadd>
 80066c0:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 80066c2:	1c19      	adds	r1, r3, #0
 80066c4:	1c20      	adds	r0, r4, #0
 80066c6:	f7fa fa03 	bl	8000ad0 <__aeabi_fdiv>
 80066ca:	1c03      	adds	r3, r0, #0
 80066cc:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	2290      	movs	r2, #144	@ 0x90
 80066d2:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	2294      	movs	r2, #148	@ 0x94
 80066d8:	2100      	movs	r1, #0
 80066da:	5499      	strb	r1, [r3, r2]
}
 80066dc:	46c0      	nop			@ (mov r8, r8)
 80066de:	46bd      	mov	sp, r7
 80066e0:	b003      	add	sp, #12
 80066e2:	bd90      	pop	{r4, r7, pc}
 80066e4:	41a00000 	.word	0x41a00000
 80066e8:	43fa0000 	.word	0x43fa0000

080066ec <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b087      	sub	sp, #28
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2294      	movs	r2, #148	@ 0x94
 80066fa:	5c9b      	ldrb	r3, [r3, r2]
 80066fc:	2201      	movs	r2, #1
 80066fe:	4053      	eors	r3, r2
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00f      	beq.n	8006726 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2198      	movs	r1, #152	@ 0x98
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	219c      	movs	r1, #156	@ 0x9c
 8006712:	683a      	ldr	r2, [r7, #0]
 8006714:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	21a0      	movs	r1, #160	@ 0xa0
 800671a:	683a      	ldr	r2, [r7, #0]
 800671c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2294      	movs	r2, #148	@ 0x94
 8006722:	2101      	movs	r1, #1
 8006724:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	228c      	movs	r2, #140	@ 0x8c
 800672a:	589b      	ldr	r3, [r3, r2]
 800672c:	1c19      	adds	r1, r3, #0
 800672e:	20fe      	movs	r0, #254	@ 0xfe
 8006730:	0580      	lsls	r0, r0, #22
 8006732:	f7fa fcf1 	bl	8001118 <__aeabi_fsub>
 8006736:	1c03      	adds	r3, r0, #0
 8006738:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2298      	movs	r2, #152	@ 0x98
 800673e:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8006740:	1c19      	adds	r1, r3, #0
 8006742:	f7fa fbab 	bl	8000e9c <__aeabi_fmul>
 8006746:	1c03      	adds	r3, r0, #0
 8006748:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	228c      	movs	r2, #140	@ 0x8c
 800674e:	589b      	ldr	r3, [r3, r2]
 8006750:	6839      	ldr	r1, [r7, #0]
 8006752:	1c18      	adds	r0, r3, #0
 8006754:	f7fa fba2 	bl	8000e9c <__aeabi_fmul>
 8006758:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800675a:	1c19      	adds	r1, r3, #0
 800675c:	1c20      	adds	r0, r4, #0
 800675e:	f7fa f82d 	bl	80007bc <__aeabi_fadd>
 8006762:	1c03      	adds	r3, r0, #0
 8006764:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2298      	movs	r2, #152	@ 0x98
 800676a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2290      	movs	r2, #144	@ 0x90
 8006770:	589b      	ldr	r3, [r3, r2]
 8006772:	1c19      	adds	r1, r3, #0
 8006774:	20fe      	movs	r0, #254	@ 0xfe
 8006776:	0580      	lsls	r0, r0, #22
 8006778:	f7fa fcce 	bl	8001118 <__aeabi_fsub>
 800677c:	1c03      	adds	r3, r0, #0
 800677e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	229c      	movs	r2, #156	@ 0x9c
 8006784:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8006786:	1c19      	adds	r1, r3, #0
 8006788:	f7fa fb88 	bl	8000e9c <__aeabi_fmul>
 800678c:	1c03      	adds	r3, r0, #0
 800678e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2290      	movs	r2, #144	@ 0x90
 8006794:	589b      	ldr	r3, [r3, r2]
 8006796:	6839      	ldr	r1, [r7, #0]
 8006798:	1c18      	adds	r0, r3, #0
 800679a:	f7fa fb7f 	bl	8000e9c <__aeabi_fmul>
 800679e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 80067a0:	1c19      	adds	r1, r3, #0
 80067a2:	1c20      	adds	r0, r4, #0
 80067a4:	f7fa f80a 	bl	80007bc <__aeabi_fadd>
 80067a8:	1c03      	adds	r3, r0, #0
 80067aa:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	229c      	movs	r2, #156	@ 0x9c
 80067b0:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2298      	movs	r2, #152	@ 0x98
 80067b6:	589a      	ldr	r2, [r3, r2]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	219c      	movs	r1, #156	@ 0x9c
 80067bc:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 80067be:	1c19      	adds	r1, r3, #0
 80067c0:	1c10      	adds	r0, r2, #0
 80067c2:	f7fa fca9 	bl	8001118 <__aeabi_fsub>
 80067c6:	1c03      	adds	r3, r0, #0
 80067c8:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 80067ca:	2100      	movs	r1, #0
 80067cc:	6978      	ldr	r0, [r7, #20]
 80067ce:	f7f9 fe7d 	bl	80004cc <__aeabi_fcmplt>
 80067d2:	1e03      	subs	r3, r0, #0
 80067d4:	d004      	beq.n	80067e0 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2280      	movs	r2, #128	@ 0x80
 80067da:	0612      	lsls	r2, r2, #24
 80067dc:	4053      	eors	r3, r2
 80067de:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80067e0:	4923      	ldr	r1, [pc, #140]	@ (8006870 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80067e2:	6978      	ldr	r0, [r7, #20]
 80067e4:	f7fa fb5a 	bl	8000e9c <__aeabi_fmul>
 80067e8:	1c03      	adds	r3, r0, #0
 80067ea:	1c18      	adds	r0, r3, #0
 80067ec:	f00a ffa4 	bl	8011738 <expf>
 80067f0:	1c03      	adds	r3, r0, #0
 80067f2:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80067f4:	491f      	ldr	r1, [pc, #124]	@ (8006874 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80067f6:	6938      	ldr	r0, [r7, #16]
 80067f8:	f7fa fb50 	bl	8000e9c <__aeabi_fmul>
 80067fc:	1c03      	adds	r3, r0, #0
 80067fe:	491e      	ldr	r1, [pc, #120]	@ (8006878 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8006800:	1c18      	adds	r0, r3, #0
 8006802:	f7f9 ffdb 	bl	80007bc <__aeabi_fadd>
 8006806:	1c03      	adds	r3, r0, #0
 8006808:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	685c      	ldr	r4, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	68f9      	ldr	r1, [r7, #12]
 8006814:	1c18      	adds	r0, r3, #0
 8006816:	f7f9 ffd1 	bl	80007bc <__aeabi_fadd>
 800681a:	1c03      	adds	r3, r0, #0
 800681c:	1c19      	adds	r1, r3, #0
 800681e:	1c20      	adds	r0, r4, #0
 8006820:	f7fa f956 	bl	8000ad0 <__aeabi_fdiv>
 8006824:	1c03      	adds	r3, r0, #0
 8006826:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8006828:	68b9      	ldr	r1, [r7, #8]
 800682a:	20fe      	movs	r0, #254	@ 0xfe
 800682c:	0580      	lsls	r0, r0, #22
 800682e:	f7fa fc73 	bl	8001118 <__aeabi_fsub>
 8006832:	1c03      	adds	r3, r0, #0
 8006834:	1c18      	adds	r0, r3, #0
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	22a0      	movs	r2, #160	@ 0xa0
 800683a:	589b      	ldr	r3, [r3, r2]
 800683c:	1c19      	adds	r1, r3, #0
 800683e:	f7fa fb2d 	bl	8000e9c <__aeabi_fmul>
 8006842:	1c03      	adds	r3, r0, #0
 8006844:	1c1c      	adds	r4, r3, #0
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	68b8      	ldr	r0, [r7, #8]
 800684a:	f7fa fb27 	bl	8000e9c <__aeabi_fmul>
 800684e:	1c03      	adds	r3, r0, #0
 8006850:	1c19      	adds	r1, r3, #0
 8006852:	1c20      	adds	r0, r4, #0
 8006854:	f7f9 ffb2 	bl	80007bc <__aeabi_fadd>
 8006858:	1c03      	adds	r3, r0, #0
 800685a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	22a0      	movs	r2, #160	@ 0xa0
 8006860:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	22a0      	movs	r2, #160	@ 0xa0
 8006866:	589b      	ldr	r3, [r3, r2]
}
 8006868:	1c18      	adds	r0, r3, #0
 800686a:	46bd      	mov	sp, r7
 800686c:	b007      	add	sp, #28
 800686e:	bd90      	pop	{r4, r7, pc}
 8006870:	be4ccccd 	.word	0xbe4ccccd
 8006874:	43f00000 	.word	0x43f00000
 8006878:	41a00000 	.word	0x41a00000

0800687c <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800687c:	b590      	push	{r4, r7, lr}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6039      	str	r1, [r7, #0]
 8006884:	0011      	movs	r1, r2
 8006886:	1dfb      	adds	r3, r7, #7
 8006888:	1c02      	adds	r2, r0, #0
 800688a:	701a      	strb	r2, [r3, #0]
 800688c:	1dbb      	adds	r3, r7, #6
 800688e:	1c0a      	adds	r2, r1, #0
 8006890:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8006892:	4b08      	ldr	r3, [pc, #32]	@ (80068b4 <ReadRegister+0x38>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	2b00      	cmp	r3, #0
 8006898:	d008      	beq.n	80068ac <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800689a:	4b06      	ldr	r3, [pc, #24]	@ (80068b4 <ReadRegister+0x38>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	1dba      	adds	r2, r7, #6
 80068a0:	7814      	ldrb	r4, [r2, #0]
 80068a2:	6839      	ldr	r1, [r7, #0]
 80068a4:	1dfa      	adds	r2, r7, #7
 80068a6:	7810      	ldrb	r0, [r2, #0]
 80068a8:	0022      	movs	r2, r4
 80068aa:	4798      	blx	r3
  }
}
 80068ac:	46c0      	nop			@ (mov r8, r8)
 80068ae:	46bd      	mov	sp, r7
 80068b0:	b003      	add	sp, #12
 80068b2:	bd90      	pop	{r4, r7, pc}
 80068b4:	20000efc 	.word	0x20000efc

080068b8 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 80068b8:	b590      	push	{r4, r7, lr}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6039      	str	r1, [r7, #0]
 80068c0:	0011      	movs	r1, r2
 80068c2:	1dfb      	adds	r3, r7, #7
 80068c4:	1c02      	adds	r2, r0, #0
 80068c6:	701a      	strb	r2, [r3, #0]
 80068c8:	1dbb      	adds	r3, r7, #6
 80068ca:	1c0a      	adds	r2, r1, #0
 80068cc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 80068ce:	4b08      	ldr	r3, [pc, #32]	@ (80068f0 <WriteRegister+0x38>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d008      	beq.n	80068e8 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 80068d6:	4b06      	ldr	r3, [pc, #24]	@ (80068f0 <WriteRegister+0x38>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	1dba      	adds	r2, r7, #6
 80068dc:	7814      	ldrb	r4, [r2, #0]
 80068de:	6839      	ldr	r1, [r7, #0]
 80068e0:	1dfa      	adds	r2, r7, #7
 80068e2:	7810      	ldrb	r0, [r2, #0]
 80068e4:	0022      	movs	r2, r4
 80068e6:	4798      	blx	r3
  }
}
 80068e8:	46c0      	nop			@ (mov r8, r8)
 80068ea:	46bd      	mov	sp, r7
 80068ec:	b003      	add	sp, #12
 80068ee:	bd90      	pop	{r4, r7, pc}
 80068f0:	20000f00 	.word	0x20000f00

080068f4 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b082      	sub	sp, #8
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80068fe:	4b07      	ldr	r3, [pc, #28]	@ (800691c <SGP_Init+0x28>)
 8006900:	687a      	ldr	r2, [r7, #4]
 8006902:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8006904:	4b06      	ldr	r3, [pc, #24]	@ (8006920 <SGP_Init+0x2c>)
 8006906:	683a      	ldr	r2, [r7, #0]
 8006908:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 800690a:	4b06      	ldr	r3, [pc, #24]	@ (8006924 <SGP_Init+0x30>)
 800690c:	2100      	movs	r1, #0
 800690e:	0018      	movs	r0, r3
 8006910:	f7ff f930 	bl	8005b74 <GasIndexAlgorithm_init>
}
 8006914:	46c0      	nop			@ (mov r8, r8)
 8006916:	46bd      	mov	sp, r7
 8006918:	b002      	add	sp, #8
 800691a:	bd80      	pop	{r7, pc}
 800691c:	20000efc 	.word	0x20000efc
 8006920:	20000f00 	.word	0x20000f00
 8006924:	20000f10 	.word	0x20000f10

08006928 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8006928:	b580      	push	{r7, lr}
 800692a:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 800692c:	4b13      	ldr	r3, [pc, #76]	@ (800697c <SGP_StartMeasurement+0x54>)
 800692e:	781b      	ldrb	r3, [r3, #0]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d00d      	beq.n	8006950 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006934:	4b12      	ldr	r3, [pc, #72]	@ (8006980 <SGP_StartMeasurement+0x58>)
 8006936:	2208      	movs	r2, #8
 8006938:	0019      	movs	r1, r3
 800693a:	2059      	movs	r0, #89	@ 0x59
 800693c:	f7ff ffbc 	bl	80068b8 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006940:	f001 f98c 	bl	8007c5c <GetCurrentHalTicks>
 8006944:	0003      	movs	r3, r0
 8006946:	331e      	adds	r3, #30
 8006948:	001a      	movs	r2, r3
 800694a:	4b0e      	ldr	r3, [pc, #56]	@ (8006984 <SGP_StartMeasurement+0x5c>)
 800694c:	601a      	str	r2, [r3, #0]
 800694e:	e00c      	b.n	800696a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006950:	4b0d      	ldr	r3, [pc, #52]	@ (8006988 <SGP_StartMeasurement+0x60>)
 8006952:	2208      	movs	r2, #8
 8006954:	0019      	movs	r1, r3
 8006956:	2059      	movs	r0, #89	@ 0x59
 8006958:	f7ff ffae 	bl	80068b8 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 800695c:	f001 f97e 	bl	8007c5c <GetCurrentHalTicks>
 8006960:	0003      	movs	r3, r0
 8006962:	33aa      	adds	r3, #170	@ 0xaa
 8006964:	001a      	movs	r2, r3
 8006966:	4b09      	ldr	r3, [pc, #36]	@ (800698c <SGP_StartMeasurement+0x64>)
 8006968:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800696a:	4b09      	ldr	r3, [pc, #36]	@ (8006990 <SGP_StartMeasurement+0x68>)
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8006970:	4b08      	ldr	r3, [pc, #32]	@ (8006994 <SGP_StartMeasurement+0x6c>)
 8006972:	2200      	movs	r2, #0
 8006974:	701a      	strb	r2, [r3, #0]
}
 8006976:	46c0      	nop			@ (mov r8, r8)
 8006978:	46bd      	mov	sp, r7
 800697a:	bd80      	pop	{r7, pc}
 800697c:	20000fb8 	.word	0x20000fb8
 8006980:	20000110 	.word	0x20000110
 8006984:	20000124 	.word	0x20000124
 8006988:	20000108 	.word	0x20000108
 800698c:	2000011c 	.word	0x2000011c
 8006990:	20000f0e 	.word	0x20000f0e
 8006994:	20000f0f 	.word	0x20000f0f

08006998 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8006998:	b580      	push	{r7, lr}
 800699a:	af00      	add	r7, sp, #0
 800699c:	4b04      	ldr	r3, [pc, #16]	@ (80069b0 <SGP_HeatedUp+0x18>)
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	0018      	movs	r0, r3
 80069a2:	f001 f879 	bl	8007a98 <TimestampIsReached>
 80069a6:	0003      	movs	r3, r0
 80069a8:	0018      	movs	r0, r3
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	46c0      	nop			@ (mov r8, r8)
 80069b0:	2000011c 	.word	0x2000011c

080069b4 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 80069b4:	b580      	push	{r7, lr}
 80069b6:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 80069b8:	4b04      	ldr	r3, [pc, #16]	@ (80069cc <SGP_MeasurementReady+0x18>)
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	0018      	movs	r0, r3
 80069be:	f001 f86b 	bl	8007a98 <TimestampIsReached>
 80069c2:	0003      	movs	r3, r0
}
 80069c4:	0018      	movs	r0, r3
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	46c0      	nop			@ (mov r8, r8)
 80069cc:	20000124 	.word	0x20000124

080069d0 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 80069d0:	b580      	push	{r7, lr}
 80069d2:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 80069d4:	4b04      	ldr	r3, [pc, #16]	@ (80069e8 <SGP_MeasurementDone+0x18>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	0018      	movs	r0, r3
 80069da:	f001 f85d 	bl	8007a98 <TimestampIsReached>
 80069de:	0003      	movs	r3, r0
}
 80069e0:	0018      	movs	r0, r3
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	46c0      	nop			@ (mov r8, r8)
 80069e8:	20000120 	.word	0x20000120

080069ec <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80069f0:	4b04      	ldr	r3, [pc, #16]	@ (8006a04 <SGP_TurnHeaterOff+0x18>)
 80069f2:	2202      	movs	r2, #2
 80069f4:	0019      	movs	r1, r3
 80069f6:	2059      	movs	r0, #89	@ 0x59
 80069f8:	f7ff ff5e 	bl	80068b8 <WriteRegister>
}
 80069fc:	46c0      	nop			@ (mov r8, r8)
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}
 8006a02:	46c0      	nop			@ (mov r8, r8)
 8006a04:	20000100 	.word	0x20000100

08006a08 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8006a08:	b5b0      	push	{r4, r5, r7, lr}
 8006a0a:	b086      	sub	sp, #24
 8006a0c:	af02      	add	r7, sp, #8
 8006a0e:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8006a10:	f7ff ffc2 	bl	8006998 <SGP_HeatedUp>
 8006a14:	1e03      	subs	r3, r0, #0
 8006a16:	d038      	beq.n	8006a8a <SGP_GetMeasurementValues+0x82>
 8006a18:	4bdb      	ldr	r3, [pc, #876]	@ (8006d88 <SGP_GetMeasurementValues+0x380>)
 8006a1a:	781b      	ldrb	r3, [r3, #0]
 8006a1c:	2201      	movs	r2, #1
 8006a1e:	4053      	eors	r3, r2
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d031      	beq.n	8006a8a <SGP_GetMeasurementValues+0x82>
 8006a26:	4bd9      	ldr	r3, [pc, #868]	@ (8006d8c <SGP_GetMeasurementValues+0x384>)
 8006a28:	781b      	ldrb	r3, [r3, #0]
 8006a2a:	2201      	movs	r2, #1
 8006a2c:	4053      	eors	r3, r2
 8006a2e:	b2db      	uxtb	r3, r3
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d02a      	beq.n	8006a8a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 8006a34:	4ad6      	ldr	r2, [pc, #856]	@ (8006d90 <SGP_GetMeasurementValues+0x388>)
 8006a36:	4bd7      	ldr	r3, [pc, #860]	@ (8006d94 <SGP_GetMeasurementValues+0x38c>)
 8006a38:	0019      	movs	r1, r3
 8006a3a:	2003      	movs	r0, #3
 8006a3c:	f001 f882 	bl	8007b44 <CreateLine>
    HeatUpIsDone = true;
 8006a40:	4bd1      	ldr	r3, [pc, #836]	@ (8006d88 <SGP_GetMeasurementValues+0x380>)
 8006a42:	2201      	movs	r2, #1
 8006a44:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 8006a46:	4bd4      	ldr	r3, [pc, #848]	@ (8006d98 <SGP_GetMeasurementValues+0x390>)
 8006a48:	781b      	ldrb	r3, [r3, #0]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00d      	beq.n	8006a6a <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006a4e:	4bd3      	ldr	r3, [pc, #844]	@ (8006d9c <SGP_GetMeasurementValues+0x394>)
 8006a50:	2208      	movs	r2, #8
 8006a52:	0019      	movs	r1, r3
 8006a54:	2059      	movs	r0, #89	@ 0x59
 8006a56:	f7ff ff2f 	bl	80068b8 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006a5a:	f001 f8ff 	bl	8007c5c <GetCurrentHalTicks>
 8006a5e:	0003      	movs	r3, r0
 8006a60:	331e      	adds	r3, #30
 8006a62:	001a      	movs	r2, r3
 8006a64:	4bce      	ldr	r3, [pc, #824]	@ (8006da0 <SGP_GetMeasurementValues+0x398>)
 8006a66:	601a      	str	r2, [r3, #0]
 8006a68:	e00c      	b.n	8006a84 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8006a6a:	4bce      	ldr	r3, [pc, #824]	@ (8006da4 <SGP_GetMeasurementValues+0x39c>)
 8006a6c:	2208      	movs	r2, #8
 8006a6e:	0019      	movs	r1, r3
 8006a70:	2059      	movs	r0, #89	@ 0x59
 8006a72:	f7ff ff21 	bl	80068b8 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8006a76:	f001 f8f1 	bl	8007c5c <GetCurrentHalTicks>
 8006a7a:	0003      	movs	r3, r0
 8006a7c:	331e      	adds	r3, #30
 8006a7e:	001a      	movs	r2, r3
 8006a80:	4bc7      	ldr	r3, [pc, #796]	@ (8006da0 <SGP_GetMeasurementValues+0x398>)
 8006a82:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8006a84:	4bc1      	ldr	r3, [pc, #772]	@ (8006d8c <SGP_GetMeasurementValues+0x384>)
 8006a86:	2201      	movs	r2, #1
 8006a88:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8006a8a:	4bbf      	ldr	r3, [pc, #764]	@ (8006d88 <SGP_GetMeasurementValues+0x380>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d100      	bne.n	8006a94 <SGP_GetMeasurementValues+0x8c>
 8006a92:	e1b5      	b.n	8006e00 <SGP_GetMeasurementValues+0x3f8>
 8006a94:	f7ff ff8e 	bl	80069b4 <SGP_MeasurementReady>
 8006a98:	1e03      	subs	r3, r0, #0
 8006a9a:	d100      	bne.n	8006a9e <SGP_GetMeasurementValues+0x96>
 8006a9c:	e1b0      	b.n	8006e00 <SGP_GetMeasurementValues+0x3f8>
 8006a9e:	4bc2      	ldr	r3, [pc, #776]	@ (8006da8 <SGP_GetMeasurementValues+0x3a0>)
 8006aa0:	781b      	ldrb	r3, [r3, #0]
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	4053      	eors	r3, r2
 8006aa6:	b2db      	uxtb	r3, r3
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d100      	bne.n	8006aae <SGP_GetMeasurementValues+0xa6>
 8006aac:	e1a8      	b.n	8006e00 <SGP_GetMeasurementValues+0x3f8>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 8006aae:	4bbf      	ldr	r3, [pc, #764]	@ (8006dac <SGP_GetMeasurementValues+0x3a4>)
 8006ab0:	781b      	ldrb	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4abe      	ldr	r2, [pc, #760]	@ (8006db0 <SGP_GetMeasurementValues+0x3a8>)
 8006ab6:	49b7      	ldr	r1, [pc, #732]	@ (8006d94 <SGP_GetMeasurementValues+0x38c>)
 8006ab8:	2003      	movs	r0, #3
 8006aba:	f001 f843 	bl	8007b44 <CreateLine>
    MeasurementIsReady = true;
 8006abe:	4bba      	ldr	r3, [pc, #744]	@ (8006da8 <SGP_GetMeasurementValues+0x3a0>)
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8006ac4:	4bbb      	ldr	r3, [pc, #748]	@ (8006db4 <SGP_GetMeasurementValues+0x3ac>)
 8006ac6:	2203      	movs	r2, #3
 8006ac8:	0019      	movs	r1, r3
 8006aca:	2059      	movs	r0, #89	@ 0x59
 8006acc:	f7ff fed6 	bl	800687c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8006ad0:	4bb8      	ldr	r3, [pc, #736]	@ (8006db4 <SGP_GetMeasurementValues+0x3ac>)
 8006ad2:	2203      	movs	r2, #3
 8006ad4:	2103      	movs	r1, #3
 8006ad6:	0018      	movs	r0, r3
 8006ad8:	f000 f9f8 	bl	8006ecc <CheckCRC>
 8006adc:	0003      	movs	r3, r0
 8006ade:	001a      	movs	r2, r3
 8006ae0:	2301      	movs	r3, #1
 8006ae2:	4053      	eors	r3, r2
 8006ae4:	b2db      	uxtb	r3, r3
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d02a      	beq.n	8006b40 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 8006aea:	4ab3      	ldr	r2, [pc, #716]	@ (8006db8 <SGP_GetMeasurementValues+0x3b0>)
 8006aec:	4bb3      	ldr	r3, [pc, #716]	@ (8006dbc <SGP_GetMeasurementValues+0x3b4>)
 8006aee:	0019      	movs	r1, r3
 8006af0:	2001      	movs	r0, #1
 8006af2:	f001 f827 	bl	8007b44 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8006af6:	4ab2      	ldr	r2, [pc, #712]	@ (8006dc0 <SGP_GetMeasurementValues+0x3b8>)
 8006af8:	4bb2      	ldr	r3, [pc, #712]	@ (8006dc4 <SGP_GetMeasurementValues+0x3bc>)
 8006afa:	0019      	movs	r1, r3
 8006afc:	2002      	movs	r0, #2
 8006afe:	f001 f821 	bl	8007b44 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8006b02:	230f      	movs	r3, #15
 8006b04:	18fb      	adds	r3, r7, r3
 8006b06:	2200      	movs	r2, #0
 8006b08:	701a      	strb	r2, [r3, #0]
 8006b0a:	e012      	b.n	8006b32 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8006b0c:	240f      	movs	r4, #15
 8006b0e:	193b      	adds	r3, r7, r4
 8006b10:	7818      	ldrb	r0, [r3, #0]
 8006b12:	193b      	adds	r3, r7, r4
 8006b14:	781b      	ldrb	r3, [r3, #0]
 8006b16:	4aa7      	ldr	r2, [pc, #668]	@ (8006db4 <SGP_GetMeasurementValues+0x3ac>)
 8006b18:	5cd3      	ldrb	r3, [r2, r3]
 8006b1a:	4aab      	ldr	r2, [pc, #684]	@ (8006dc8 <SGP_GetMeasurementValues+0x3c0>)
 8006b1c:	499d      	ldr	r1, [pc, #628]	@ (8006d94 <SGP_GetMeasurementValues+0x38c>)
 8006b1e:	9300      	str	r3, [sp, #0]
 8006b20:	0003      	movs	r3, r0
 8006b22:	2003      	movs	r0, #3
 8006b24:	f001 f80e 	bl	8007b44 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8006b28:	193b      	adds	r3, r7, r4
 8006b2a:	781a      	ldrb	r2, [r3, #0]
 8006b2c:	193b      	adds	r3, r7, r4
 8006b2e:	3201      	adds	r2, #1
 8006b30:	701a      	strb	r2, [r3, #0]
 8006b32:	230f      	movs	r3, #15
 8006b34:	18fb      	adds	r3, r7, r3
 8006b36:	781b      	ldrb	r3, [r3, #0]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d9e7      	bls.n	8006b0c <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	e177      	b.n	8006e30 <SGP_GetMeasurementValues+0x428>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8006b40:	f001 f88c 	bl	8007c5c <GetCurrentHalTicks>
 8006b44:	0003      	movs	r3, r0
 8006b46:	22fa      	movs	r2, #250	@ 0xfa
 8006b48:	0092      	lsls	r2, r2, #2
 8006b4a:	189a      	adds	r2, r3, r2
 8006b4c:	4b9f      	ldr	r3, [pc, #636]	@ (8006dcc <SGP_GetMeasurementValues+0x3c4>)
 8006b4e:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8006b50:	f7ff ff4c 	bl	80069ec <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 8006b54:	4b95      	ldr	r3, [pc, #596]	@ (8006dac <SGP_GetMeasurementValues+0x3a4>)
 8006b56:	781b      	ldrb	r3, [r3, #0]
 8006b58:	3301      	adds	r3, #1
 8006b5a:	b2da      	uxtb	r2, r3
 8006b5c:	4b93      	ldr	r3, [pc, #588]	@ (8006dac <SGP_GetMeasurementValues+0x3a4>)
 8006b5e:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8006b60:	4b92      	ldr	r3, [pc, #584]	@ (8006dac <SGP_GetMeasurementValues+0x3a4>)
 8006b62:	781a      	ldrb	r2, [r3, #0]
 8006b64:	4b9a      	ldr	r3, [pc, #616]	@ (8006dd0 <SGP_GetMeasurementValues+0x3c8>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d200      	bcs.n	8006b6e <SGP_GetMeasurementValues+0x166>
 8006b6c:	e148      	b.n	8006e00 <SGP_GetMeasurementValues+0x3f8>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8006b6e:	4b91      	ldr	r3, [pc, #580]	@ (8006db4 <SGP_GetMeasurementValues+0x3ac>)
 8006b70:	785b      	ldrb	r3, [r3, #1]
 8006b72:	021b      	lsls	r3, r3, #8
 8006b74:	b21a      	sxth	r2, r3
 8006b76:	4b8f      	ldr	r3, [pc, #572]	@ (8006db4 <SGP_GetMeasurementValues+0x3ac>)
 8006b78:	781b      	ldrb	r3, [r3, #0]
 8006b7a:	b21b      	sxth	r3, r3
 8006b7c:	4313      	orrs	r3, r2
 8006b7e:	b21a      	sxth	r2, r3
 8006b80:	240c      	movs	r4, #12
 8006b82:	193b      	adds	r3, r7, r4
 8006b84:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8006b86:	193b      	adds	r3, r7, r4
 8006b88:	881b      	ldrh	r3, [r3, #0]
 8006b8a:	4a92      	ldr	r2, [pc, #584]	@ (8006dd4 <SGP_GetMeasurementValues+0x3cc>)
 8006b8c:	4981      	ldr	r1, [pc, #516]	@ (8006d94 <SGP_GetMeasurementValues+0x38c>)
 8006b8e:	2003      	movs	r0, #3
 8006b90:	f000 ffd8 	bl	8007b44 <CreateLine>
      int32_t tempVocIndex = 0;
 8006b94:	2300      	movs	r3, #0
 8006b96:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8006b98:	193b      	adds	r3, r7, r4
 8006b9a:	8819      	ldrh	r1, [r3, #0]
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	18fa      	adds	r2, r7, r3
 8006ba0:	4b8d      	ldr	r3, [pc, #564]	@ (8006dd8 <SGP_GetMeasurementValues+0x3d0>)
 8006ba2:	0018      	movs	r0, r3
 8006ba4:	f7ff f848 	bl	8005c38 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	4a8c      	ldr	r2, [pc, #560]	@ (8006ddc <SGP_GetMeasurementValues+0x3d4>)
 8006bac:	4979      	ldr	r1, [pc, #484]	@ (8006d94 <SGP_GetMeasurementValues+0x38c>)
 8006bae:	2003      	movs	r0, #3
 8006bb0:	f000 ffc8 	bl	8007b44 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8006bb4:	68ba      	ldr	r2, [r7, #8]
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	dd60      	ble.n	8006c84 <SGP_GetMeasurementValues+0x27c>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b64      	cmp	r3, #100	@ 0x64
 8006bc8:	dc5c      	bgt.n	8006c84 <SGP_GetMeasurementValues+0x27c>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	0018      	movs	r0, r3
 8006bd0:	f7fc fb74 	bl	80032bc <__aeabi_i2d>
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	4b82      	ldr	r3, [pc, #520]	@ (8006de0 <SGP_GetMeasurementValues+0x3d8>)
 8006bd8:	f7fb f86a 	bl	8001cb0 <__aeabi_ddiv>
 8006bdc:	0002      	movs	r2, r0
 8006bde:	000b      	movs	r3, r1
 8006be0:	2000      	movs	r0, #0
 8006be2:	4980      	ldr	r1, [pc, #512]	@ (8006de4 <SGP_GetMeasurementValues+0x3dc>)
 8006be4:	f7fb ff70 	bl	8002ac8 <__aeabi_dsub>
 8006be8:	0002      	movs	r2, r0
 8006bea:	000b      	movs	r3, r1
 8006bec:	0014      	movs	r4, r2
 8006bee:	001d      	movs	r5, r3
 8006bf0:	4b7d      	ldr	r3, [pc, #500]	@ (8006de8 <SGP_GetMeasurementValues+0x3e0>)
 8006bf2:	881b      	ldrh	r3, [r3, #0]
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f7fc fb61 	bl	80032bc <__aeabi_i2d>
 8006bfa:	0002      	movs	r2, r0
 8006bfc:	000b      	movs	r3, r1
 8006bfe:	0020      	movs	r0, r4
 8006c00:	0029      	movs	r1, r5
 8006c02:	f7fb fc99 	bl	8002538 <__aeabi_dmul>
 8006c06:	0002      	movs	r2, r0
 8006c08:	000b      	movs	r3, r1
 8006c0a:	0010      	movs	r0, r2
 8006c0c:	0019      	movs	r1, r3
 8006c0e:	f7f9 fceb 	bl	80005e8 <__aeabi_d2uiz>
 8006c12:	0003      	movs	r3, r0
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	4b75      	ldr	r3, [pc, #468]	@ (8006dec <SGP_GetMeasurementValues+0x3e4>)
 8006c18:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	0018      	movs	r0, r3
 8006c20:	f7fc fb4c 	bl	80032bc <__aeabi_i2d>
 8006c24:	2200      	movs	r2, #0
 8006c26:	4b6e      	ldr	r3, [pc, #440]	@ (8006de0 <SGP_GetMeasurementValues+0x3d8>)
 8006c28:	f7fb f842 	bl	8001cb0 <__aeabi_ddiv>
 8006c2c:	0002      	movs	r2, r0
 8006c2e:	000b      	movs	r3, r1
 8006c30:	0014      	movs	r4, r2
 8006c32:	001d      	movs	r5, r3
 8006c34:	4b6c      	ldr	r3, [pc, #432]	@ (8006de8 <SGP_GetMeasurementValues+0x3e0>)
 8006c36:	881b      	ldrh	r3, [r3, #0]
 8006c38:	0018      	movs	r0, r3
 8006c3a:	f7fc fb3f 	bl	80032bc <__aeabi_i2d>
 8006c3e:	0002      	movs	r2, r0
 8006c40:	000b      	movs	r3, r1
 8006c42:	0020      	movs	r0, r4
 8006c44:	0029      	movs	r1, r5
 8006c46:	f7fb fc77 	bl	8002538 <__aeabi_dmul>
 8006c4a:	0002      	movs	r2, r0
 8006c4c:	000b      	movs	r3, r1
 8006c4e:	0010      	movs	r0, r2
 8006c50:	0019      	movs	r1, r3
 8006c52:	f7f9 fcc9 	bl	80005e8 <__aeabi_d2uiz>
 8006c56:	0003      	movs	r3, r0
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	4b65      	ldr	r3, [pc, #404]	@ (8006df0 <SGP_GetMeasurementValues+0x3e8>)
 8006c5c:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8006c5e:	4b62      	ldr	r3, [pc, #392]	@ (8006de8 <SGP_GetMeasurementValues+0x3e0>)
 8006c60:	881a      	ldrh	r2, [r3, #0]
 8006c62:	4b64      	ldr	r3, [pc, #400]	@ (8006df4 <SGP_GetMeasurementValues+0x3ec>)
 8006c64:	801a      	strh	r2, [r3, #0]
      TIM2->CCR1 = Red;
 8006c66:	4b63      	ldr	r3, [pc, #396]	@ (8006df4 <SGP_GetMeasurementValues+0x3ec>)
 8006c68:	881a      	ldrh	r2, [r3, #0]
 8006c6a:	2380      	movs	r3, #128	@ 0x80
 8006c6c:	05db      	lsls	r3, r3, #23
 8006c6e:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2->CCR3 = Green;
 8006c70:	4b5e      	ldr	r3, [pc, #376]	@ (8006dec <SGP_GetMeasurementValues+0x3e4>)
 8006c72:	881a      	ldrh	r2, [r3, #0]
 8006c74:	2380      	movs	r3, #128	@ 0x80
 8006c76:	05db      	lsls	r3, r3, #23
 8006c78:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2->CCR4 = Blue;
 8006c7a:	4b5d      	ldr	r3, [pc, #372]	@ (8006df0 <SGP_GetMeasurementValues+0x3e8>)
 8006c7c:	881a      	ldrh	r2, [r3, #0]
 8006c7e:	2380      	movs	r3, #128	@ 0x80
 8006c80:	05db      	lsls	r3, r3, #23
 8006c82:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      if(*vocIndex > 100){
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b64      	cmp	r3, #100	@ 0x64
 8006c8a:	dd6c      	ble.n	8006d66 <SGP_GetMeasurementValues+0x35e>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	0018      	movs	r0, r3
 8006c92:	f7fc fb13 	bl	80032bc <__aeabi_i2d>
 8006c96:	2200      	movs	r2, #0
 8006c98:	4b51      	ldr	r3, [pc, #324]	@ (8006de0 <SGP_GetMeasurementValues+0x3d8>)
 8006c9a:	f7fb ff15 	bl	8002ac8 <__aeabi_dsub>
 8006c9e:	0002      	movs	r2, r0
 8006ca0:	000b      	movs	r3, r1
 8006ca2:	0010      	movs	r0, r2
 8006ca4:	0019      	movs	r1, r3
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	4b53      	ldr	r3, [pc, #332]	@ (8006df8 <SGP_GetMeasurementValues+0x3f0>)
 8006caa:	f7fb f801 	bl	8001cb0 <__aeabi_ddiv>
 8006cae:	0002      	movs	r2, r0
 8006cb0:	000b      	movs	r3, r1
 8006cb2:	0014      	movs	r4, r2
 8006cb4:	001d      	movs	r5, r3
 8006cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8006de8 <SGP_GetMeasurementValues+0x3e0>)
 8006cb8:	881b      	ldrh	r3, [r3, #0]
 8006cba:	0018      	movs	r0, r3
 8006cbc:	f7fc fafe 	bl	80032bc <__aeabi_i2d>
 8006cc0:	0002      	movs	r2, r0
 8006cc2:	000b      	movs	r3, r1
 8006cc4:	0020      	movs	r0, r4
 8006cc6:	0029      	movs	r1, r5
 8006cc8:	f7fb fc36 	bl	8002538 <__aeabi_dmul>
 8006ccc:	0002      	movs	r2, r0
 8006cce:	000b      	movs	r3, r1
 8006cd0:	0010      	movs	r0, r2
 8006cd2:	0019      	movs	r1, r3
 8006cd4:	f7f9 fc88 	bl	80005e8 <__aeabi_d2uiz>
 8006cd8:	0003      	movs	r3, r0
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	4b43      	ldr	r3, [pc, #268]	@ (8006dec <SGP_GetMeasurementValues+0x3e4>)
 8006cde:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	0018      	movs	r0, r3
 8006ce6:	f7fc fae9 	bl	80032bc <__aeabi_i2d>
 8006cea:	2200      	movs	r2, #0
 8006cec:	4b3c      	ldr	r3, [pc, #240]	@ (8006de0 <SGP_GetMeasurementValues+0x3d8>)
 8006cee:	f7fb feeb 	bl	8002ac8 <__aeabi_dsub>
 8006cf2:	0002      	movs	r2, r0
 8006cf4:	000b      	movs	r3, r1
 8006cf6:	0010      	movs	r0, r2
 8006cf8:	0019      	movs	r1, r3
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	4b3e      	ldr	r3, [pc, #248]	@ (8006df8 <SGP_GetMeasurementValues+0x3f0>)
 8006cfe:	f7fa ffd7 	bl	8001cb0 <__aeabi_ddiv>
 8006d02:	0002      	movs	r2, r0
 8006d04:	000b      	movs	r3, r1
 8006d06:	2000      	movs	r0, #0
 8006d08:	4936      	ldr	r1, [pc, #216]	@ (8006de4 <SGP_GetMeasurementValues+0x3dc>)
 8006d0a:	f7fb fedd 	bl	8002ac8 <__aeabi_dsub>
 8006d0e:	0002      	movs	r2, r0
 8006d10:	000b      	movs	r3, r1
 8006d12:	0014      	movs	r4, r2
 8006d14:	001d      	movs	r5, r3
 8006d16:	4b34      	ldr	r3, [pc, #208]	@ (8006de8 <SGP_GetMeasurementValues+0x3e0>)
 8006d18:	881b      	ldrh	r3, [r3, #0]
 8006d1a:	0018      	movs	r0, r3
 8006d1c:	f7fc face 	bl	80032bc <__aeabi_i2d>
 8006d20:	0002      	movs	r2, r0
 8006d22:	000b      	movs	r3, r1
 8006d24:	0020      	movs	r0, r4
 8006d26:	0029      	movs	r1, r5
 8006d28:	f7fb fc06 	bl	8002538 <__aeabi_dmul>
 8006d2c:	0002      	movs	r2, r0
 8006d2e:	000b      	movs	r3, r1
 8006d30:	0010      	movs	r0, r2
 8006d32:	0019      	movs	r1, r3
 8006d34:	f7f9 fc58 	bl	80005e8 <__aeabi_d2uiz>
 8006d38:	0003      	movs	r3, r0
 8006d3a:	b29a      	uxth	r2, r3
 8006d3c:	4b2d      	ldr	r3, [pc, #180]	@ (8006df4 <SGP_GetMeasurementValues+0x3ec>)
 8006d3e:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8006d40:	4b29      	ldr	r3, [pc, #164]	@ (8006de8 <SGP_GetMeasurementValues+0x3e0>)
 8006d42:	881a      	ldrh	r2, [r3, #0]
 8006d44:	4b2a      	ldr	r3, [pc, #168]	@ (8006df0 <SGP_GetMeasurementValues+0x3e8>)
 8006d46:	801a      	strh	r2, [r3, #0]
        TIM2->CCR1 = Red;
 8006d48:	4b2a      	ldr	r3, [pc, #168]	@ (8006df4 <SGP_GetMeasurementValues+0x3ec>)
 8006d4a:	881a      	ldrh	r2, [r3, #0]
 8006d4c:	2380      	movs	r3, #128	@ 0x80
 8006d4e:	05db      	lsls	r3, r3, #23
 8006d50:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2->CCR3 = Green;
 8006d52:	4b26      	ldr	r3, [pc, #152]	@ (8006dec <SGP_GetMeasurementValues+0x3e4>)
 8006d54:	881a      	ldrh	r2, [r3, #0]
 8006d56:	2380      	movs	r3, #128	@ 0x80
 8006d58:	05db      	lsls	r3, r3, #23
 8006d5a:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2->CCR4 = Blue;
 8006d5c:	4b24      	ldr	r3, [pc, #144]	@ (8006df0 <SGP_GetMeasurementValues+0x3e8>)
 8006d5e:	881a      	ldrh	r2, [r3, #0]
 8006d60:	2380      	movs	r3, #128	@ 0x80
 8006d62:	05db      	lsls	r3, r3, #23
 8006d64:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      SGP_AmountOfSamplesDone = 0;
 8006d66:	4b11      	ldr	r3, [pc, #68]	@ (8006dac <SGP_GetMeasurementValues+0x3a4>)
 8006d68:	2200      	movs	r2, #0
 8006d6a:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8006d6c:	4a23      	ldr	r2, [pc, #140]	@ (8006dfc <SGP_GetMeasurementValues+0x3f4>)
 8006d6e:	4b09      	ldr	r3, [pc, #36]	@ (8006d94 <SGP_GetMeasurementValues+0x38c>)
 8006d70:	0019      	movs	r1, r3
 8006d72:	2003      	movs	r0, #3
 8006d74:	f000 fee6 	bl	8007b44 <CreateLine>
      HT_MeasurementReceived = false;
 8006d78:	4b07      	ldr	r3, [pc, #28]	@ (8006d98 <SGP_GetMeasurementValues+0x390>)
 8006d7a:	2200      	movs	r2, #0
 8006d7c:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8006d7e:	4b03      	ldr	r3, [pc, #12]	@ (8006d8c <SGP_GetMeasurementValues+0x384>)
 8006d80:	2200      	movs	r2, #0
 8006d82:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e053      	b.n	8006e30 <SGP_GetMeasurementValues+0x428>
 8006d88:	20000f0e 	.word	0x20000f0e
 8006d8c:	20000fb9 	.word	0x20000fb9
 8006d90:	08012118 	.word	0x08012118
 8006d94:	08012144 	.word	0x08012144
 8006d98:	20000fb8 	.word	0x20000fb8
 8006d9c:	20000110 	.word	0x20000110
 8006da0:	20000124 	.word	0x20000124
 8006da4:	20000108 	.word	0x20000108
 8006da8:	20000f0f 	.word	0x20000f0f
 8006dac:	20000f0d 	.word	0x20000f0d
 8006db0:	08012148 	.word	0x08012148
 8006db4:	20000f04 	.word	0x20000f04
 8006db8:	08012178 	.word	0x08012178
 8006dbc:	0801219c 	.word	0x0801219c
 8006dc0:	080121a0 	.word	0x080121a0
 8006dc4:	080121c0 	.word	0x080121c0
 8006dc8:	080121c4 	.word	0x080121c4
 8006dcc:	20000120 	.word	0x20000120
 8006dd0:	20000118 	.word	0x20000118
 8006dd4:	080121e4 	.word	0x080121e4
 8006dd8:	20000f10 	.word	0x20000f10
 8006ddc:	080121f8 	.word	0x080121f8
 8006de0:	40590000 	.word	0x40590000
 8006de4:	3ff00000 	.word	0x3ff00000
 8006de8:	20000128 	.word	0x20000128
 8006dec:	20000fbe 	.word	0x20000fbe
 8006df0:	20000fbc 	.word	0x20000fbc
 8006df4:	20000fba 	.word	0x20000fba
 8006df8:	40790000 	.word	0x40790000
 8006dfc:	0801220c 	.word	0x0801220c
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8006e00:	f7ff fde6 	bl	80069d0 <SGP_MeasurementDone>
 8006e04:	1e03      	subs	r3, r0, #0
 8006e06:	d012      	beq.n	8006e2e <SGP_GetMeasurementValues+0x426>
 8006e08:	4b0b      	ldr	r3, [pc, #44]	@ (8006e38 <SGP_GetMeasurementValues+0x430>)
 8006e0a:	781b      	ldrb	r3, [r3, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d00e      	beq.n	8006e2e <SGP_GetMeasurementValues+0x426>
 8006e10:	4b0a      	ldr	r3, [pc, #40]	@ (8006e3c <SGP_GetMeasurementValues+0x434>)
 8006e12:	781b      	ldrb	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00a      	beq.n	8006e2e <SGP_GetMeasurementValues+0x426>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8006e18:	4a09      	ldr	r2, [pc, #36]	@ (8006e40 <SGP_GetMeasurementValues+0x438>)
 8006e1a:	4b0a      	ldr	r3, [pc, #40]	@ (8006e44 <SGP_GetMeasurementValues+0x43c>)
 8006e1c:	0019      	movs	r1, r3
 8006e1e:	2003      	movs	r0, #3
 8006e20:	f000 fe90 	bl	8007b44 <CreateLine>
    SGP_StartMeasurement();
 8006e24:	f7ff fd80 	bl	8006928 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8006e28:	4b07      	ldr	r3, [pc, #28]	@ (8006e48 <SGP_GetMeasurementValues+0x440>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8006e2e:	2300      	movs	r3, #0
}
 8006e30:	0018      	movs	r0, r3
 8006e32:	46bd      	mov	sp, r7
 8006e34:	b004      	add	sp, #16
 8006e36:	bdb0      	pop	{r4, r5, r7, pc}
 8006e38:	20000f0e 	.word	0x20000f0e
 8006e3c:	20000f0f 	.word	0x20000f0f
 8006e40:	08012230 	.word	0x08012230
 8006e44:	08012144 	.word	0x08012144
 8006e48:	20000fb9 	.word	0x20000fb9

08006e4c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8006e4c:	b580      	push	{r7, lr}
 8006e4e:	b084      	sub	sp, #16
 8006e50:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8006e52:	4b1a      	ldr	r3, [pc, #104]	@ (8006ebc <SGP_DeviceConnected+0x70>)
 8006e54:	2202      	movs	r2, #2
 8006e56:	0019      	movs	r1, r3
 8006e58:	2059      	movs	r0, #89	@ 0x59
 8006e5a:	f7ff fd2d 	bl	80068b8 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8006e5e:	2001      	movs	r0, #1
 8006e60:	f001 fa72 	bl	8008348 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8006e64:	4b16      	ldr	r3, [pc, #88]	@ (8006ec0 <SGP_DeviceConnected+0x74>)
 8006e66:	2209      	movs	r2, #9
 8006e68:	0019      	movs	r1, r3
 8006e6a:	2059      	movs	r0, #89	@ 0x59
 8006e6c:	f7ff fd06 	bl	800687c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8006e70:	1dfb      	adds	r3, r7, #7
 8006e72:	2200      	movs	r2, #0
 8006e74:	701a      	strb	r2, [r3, #0]
 8006e76:	e011      	b.n	8006e9c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8006e78:	1dfb      	adds	r3, r7, #7
 8006e7a:	7818      	ldrb	r0, [r3, #0]
 8006e7c:	1dfb      	adds	r3, r7, #7
 8006e7e:	781b      	ldrb	r3, [r3, #0]
 8006e80:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec0 <SGP_DeviceConnected+0x74>)
 8006e82:	5cd3      	ldrb	r3, [r2, r3]
 8006e84:	4a0f      	ldr	r2, [pc, #60]	@ (8006ec4 <SGP_DeviceConnected+0x78>)
 8006e86:	4910      	ldr	r1, [pc, #64]	@ (8006ec8 <SGP_DeviceConnected+0x7c>)
 8006e88:	9300      	str	r3, [sp, #0]
 8006e8a:	0003      	movs	r3, r0
 8006e8c:	2002      	movs	r0, #2
 8006e8e:	f000 fe59 	bl	8007b44 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8006e92:	1dfb      	adds	r3, r7, #7
 8006e94:	781a      	ldrb	r2, [r3, #0]
 8006e96:	1dfb      	adds	r3, r7, #7
 8006e98:	3201      	adds	r2, #1
 8006e9a:	701a      	strb	r2, [r3, #0]
 8006e9c:	1dfb      	adds	r3, r7, #7
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	d9e9      	bls.n	8006e78 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8006ea4:	4b06      	ldr	r3, [pc, #24]	@ (8006ec0 <SGP_DeviceConnected+0x74>)
 8006ea6:	2203      	movs	r2, #3
 8006ea8:	2109      	movs	r1, #9
 8006eaa:	0018      	movs	r0, r3
 8006eac:	f000 f80e 	bl	8006ecc <CheckCRC>
 8006eb0:	0003      	movs	r3, r0
}
 8006eb2:	0018      	movs	r0, r3
 8006eb4:	46bd      	mov	sp, r7
 8006eb6:	b002      	add	sp, #8
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	46c0      	nop			@ (mov r8, r8)
 8006ebc:	20000104 	.word	0x20000104
 8006ec0:	20000f04 	.word	0x20000f04
 8006ec4:	08012250 	.word	0x08012250
 8006ec8:	080121c0 	.word	0x080121c0

08006ecc <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8006ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ece:	b08f      	sub	sp, #60	@ 0x3c
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6278      	str	r0, [r7, #36]	@ 0x24
 8006ed4:	0008      	movs	r0, r1
 8006ed6:	0011      	movs	r1, r2
 8006ed8:	2323      	movs	r3, #35	@ 0x23
 8006eda:	18fb      	adds	r3, r7, r3
 8006edc:	1c02      	adds	r2, r0, #0
 8006ede:	701a      	strb	r2, [r3, #0]
 8006ee0:	2322      	movs	r3, #34	@ 0x22
 8006ee2:	18fb      	adds	r3, r7, r3
 8006ee4:	1c0a      	adds	r2, r1, #0
 8006ee6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8006ee8:	2317      	movs	r3, #23
 8006eea:	2220      	movs	r2, #32
 8006eec:	189b      	adds	r3, r3, r2
 8006eee:	19db      	adds	r3, r3, r7
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]
 8006ef4:	e09f      	b.n	8007036 <CheckCRC+0x16a>
 8006ef6:	466b      	mov	r3, sp
 8006ef8:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8006efa:	2322      	movs	r3, #34	@ 0x22
 8006efc:	18fb      	adds	r3, r7, r3
 8006efe:	781b      	ldrb	r3, [r3, #0]
 8006f00:	001a      	movs	r2, r3
 8006f02:	3a01      	subs	r2, #1
 8006f04:	633a      	str	r2, [r7, #48]	@ 0x30
 8006f06:	60bb      	str	r3, [r7, #8]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	60fa      	str	r2, [r7, #12]
 8006f0c:	68b8      	ldr	r0, [r7, #8]
 8006f0e:	68f9      	ldr	r1, [r7, #12]
 8006f10:	0002      	movs	r2, r0
 8006f12:	0f52      	lsrs	r2, r2, #29
 8006f14:	000c      	movs	r4, r1
 8006f16:	00e4      	lsls	r4, r4, #3
 8006f18:	61fc      	str	r4, [r7, #28]
 8006f1a:	69fc      	ldr	r4, [r7, #28]
 8006f1c:	4314      	orrs	r4, r2
 8006f1e:	61fc      	str	r4, [r7, #28]
 8006f20:	0002      	movs	r2, r0
 8006f22:	00d2      	lsls	r2, r2, #3
 8006f24:	61ba      	str	r2, [r7, #24]
 8006f26:	603b      	str	r3, [r7, #0]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	607a      	str	r2, [r7, #4]
 8006f2c:	6838      	ldr	r0, [r7, #0]
 8006f2e:	6879      	ldr	r1, [r7, #4]
 8006f30:	0002      	movs	r2, r0
 8006f32:	0f52      	lsrs	r2, r2, #29
 8006f34:	000c      	movs	r4, r1
 8006f36:	00e4      	lsls	r4, r4, #3
 8006f38:	617c      	str	r4, [r7, #20]
 8006f3a:	697c      	ldr	r4, [r7, #20]
 8006f3c:	4314      	orrs	r4, r2
 8006f3e:	617c      	str	r4, [r7, #20]
 8006f40:	0002      	movs	r2, r0
 8006f42:	00d2      	lsls	r2, r2, #3
 8006f44:	613a      	str	r2, [r7, #16]
 8006f46:	3307      	adds	r3, #7
 8006f48:	08db      	lsrs	r3, r3, #3
 8006f4a:	00db      	lsls	r3, r3, #3
 8006f4c:	466a      	mov	r2, sp
 8006f4e:	1ad3      	subs	r3, r2, r3
 8006f50:	469d      	mov	sp, r3
 8006f52:	466b      	mov	r3, sp
 8006f54:	3300      	adds	r3, #0
 8006f56:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8006f58:	2316      	movs	r3, #22
 8006f5a:	2220      	movs	r2, #32
 8006f5c:	189b      	adds	r3, r3, r2
 8006f5e:	19db      	adds	r3, r3, r7
 8006f60:	2200      	movs	r2, #0
 8006f62:	701a      	strb	r2, [r3, #0]
 8006f64:	e01e      	b.n	8006fa4 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8006f66:	2317      	movs	r3, #23
 8006f68:	2220      	movs	r2, #32
 8006f6a:	189b      	adds	r3, r3, r2
 8006f6c:	19db      	adds	r3, r3, r7
 8006f6e:	781a      	ldrb	r2, [r3, #0]
 8006f70:	2116      	movs	r1, #22
 8006f72:	2320      	movs	r3, #32
 8006f74:	18cb      	adds	r3, r1, r3
 8006f76:	19db      	adds	r3, r3, r7
 8006f78:	781b      	ldrb	r3, [r3, #0]
 8006f7a:	18d3      	adds	r3, r2, r3
 8006f7c:	001a      	movs	r2, r3
 8006f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f80:	189a      	adds	r2, r3, r2
 8006f82:	0008      	movs	r0, r1
 8006f84:	2320      	movs	r3, #32
 8006f86:	18cb      	adds	r3, r1, r3
 8006f88:	19db      	adds	r3, r3, r7
 8006f8a:	781b      	ldrb	r3, [r3, #0]
 8006f8c:	7811      	ldrb	r1, [r2, #0]
 8006f8e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f90:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8006f92:	2320      	movs	r3, #32
 8006f94:	18c3      	adds	r3, r0, r3
 8006f96:	19db      	adds	r3, r3, r7
 8006f98:	781a      	ldrb	r2, [r3, #0]
 8006f9a:	2320      	movs	r3, #32
 8006f9c:	18c3      	adds	r3, r0, r3
 8006f9e:	19db      	adds	r3, r3, r7
 8006fa0:	3201      	adds	r2, #1
 8006fa2:	701a      	strb	r2, [r3, #0]
 8006fa4:	2316      	movs	r3, #22
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	189b      	adds	r3, r3, r2
 8006faa:	19da      	adds	r2, r3, r7
 8006fac:	2322      	movs	r3, #34	@ 0x22
 8006fae:	18fb      	adds	r3, r7, r3
 8006fb0:	7812      	ldrb	r2, [r2, #0]
 8006fb2:	781b      	ldrb	r3, [r3, #0]
 8006fb4:	429a      	cmp	r2, r3
 8006fb6:	d3d6      	bcc.n	8006f66 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8006fb8:	2417      	movs	r4, #23
 8006fba:	2320      	movs	r3, #32
 8006fbc:	18e3      	adds	r3, r4, r3
 8006fbe:	19db      	adds	r3, r3, r7
 8006fc0:	781a      	ldrb	r2, [r3, #0]
 8006fc2:	2322      	movs	r3, #34	@ 0x22
 8006fc4:	18fb      	adds	r3, r7, r3
 8006fc6:	781b      	ldrb	r3, [r3, #0]
 8006fc8:	18d3      	adds	r3, r2, r3
 8006fca:	3b01      	subs	r3, #1
 8006fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006fce:	18d2      	adds	r2, r2, r3
 8006fd0:	250b      	movs	r5, #11
 8006fd2:	2320      	movs	r3, #32
 8006fd4:	18eb      	adds	r3, r5, r3
 8006fd6:	19db      	adds	r3, r3, r7
 8006fd8:	7812      	ldrb	r2, [r2, #0]
 8006fda:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8006fdc:	2322      	movs	r3, #34	@ 0x22
 8006fde:	18fb      	adds	r3, r7, r3
 8006fe0:	781b      	ldrb	r3, [r3, #0]
 8006fe2:	3b01      	subs	r3, #1
 8006fe4:	b2da      	uxtb	r2, r3
 8006fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006fe8:	0011      	movs	r1, r2
 8006fea:	0018      	movs	r0, r3
 8006fec:	f000 f838 	bl	8007060 <CalculateCRC>
 8006ff0:	0003      	movs	r3, r0
 8006ff2:	001a      	movs	r2, r3
 8006ff4:	2320      	movs	r3, #32
 8006ff6:	18eb      	adds	r3, r5, r3
 8006ff8:	19db      	adds	r3, r3, r7
 8006ffa:	781b      	ldrb	r3, [r3, #0]
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00c      	beq.n	800701a <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007000:	2320      	movs	r3, #32
 8007002:	18e3      	adds	r3, r4, r3
 8007004:	19db      	adds	r3, r3, r7
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	3301      	adds	r3, #1
 800700a:	4a13      	ldr	r2, [pc, #76]	@ (8007058 <CheckCRC+0x18c>)
 800700c:	4913      	ldr	r1, [pc, #76]	@ (800705c <CheckCRC+0x190>)
 800700e:	2001      	movs	r0, #1
 8007010:	f000 fd98 	bl	8007b44 <CreateLine>
      return false;
 8007014:	2300      	movs	r3, #0
 8007016:	46b5      	mov	sp, r6
 8007018:	e019      	b.n	800704e <CheckCRC+0x182>
 800701a:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800701c:	2217      	movs	r2, #23
 800701e:	2320      	movs	r3, #32
 8007020:	18d3      	adds	r3, r2, r3
 8007022:	19db      	adds	r3, r3, r7
 8007024:	2120      	movs	r1, #32
 8007026:	1852      	adds	r2, r2, r1
 8007028:	19d1      	adds	r1, r2, r7
 800702a:	2222      	movs	r2, #34	@ 0x22
 800702c:	18ba      	adds	r2, r7, r2
 800702e:	7809      	ldrb	r1, [r1, #0]
 8007030:	7812      	ldrb	r2, [r2, #0]
 8007032:	188a      	adds	r2, r1, r2
 8007034:	701a      	strb	r2, [r3, #0]
 8007036:	2317      	movs	r3, #23
 8007038:	2220      	movs	r2, #32
 800703a:	189b      	adds	r3, r3, r2
 800703c:	19da      	adds	r2, r3, r7
 800703e:	2323      	movs	r3, #35	@ 0x23
 8007040:	18fb      	adds	r3, r7, r3
 8007042:	7812      	ldrb	r2, [r2, #0]
 8007044:	781b      	ldrb	r3, [r3, #0]
 8007046:	429a      	cmp	r2, r3
 8007048:	d200      	bcs.n	800704c <CheckCRC+0x180>
 800704a:	e754      	b.n	8006ef6 <CheckCRC+0x2a>
    }
  }
  return true;
 800704c:	2301      	movs	r3, #1
}
 800704e:	0018      	movs	r0, r3
 8007050:	46bd      	mov	sp, r7
 8007052:	b00f      	add	sp, #60	@ 0x3c
 8007054:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007056:	46c0      	nop			@ (mov r8, r8)
 8007058:	08012270 	.word	0x08012270
 800705c:	0801219c 	.word	0x0801219c

08007060 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8007060:	b580      	push	{r7, lr}
 8007062:	b084      	sub	sp, #16
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
 8007068:	000a      	movs	r2, r1
 800706a:	1cfb      	adds	r3, r7, #3
 800706c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800706e:	230f      	movs	r3, #15
 8007070:	18fb      	adds	r3, r7, r3
 8007072:	22ff      	movs	r2, #255	@ 0xff
 8007074:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007076:	230e      	movs	r3, #14
 8007078:	18fb      	adds	r3, r7, r3
 800707a:	2200      	movs	r2, #0
 800707c:	701a      	strb	r2, [r3, #0]
 800707e:	e037      	b.n	80070f0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007080:	230e      	movs	r3, #14
 8007082:	18fb      	adds	r3, r7, r3
 8007084:	781b      	ldrb	r3, [r3, #0]
 8007086:	687a      	ldr	r2, [r7, #4]
 8007088:	18d3      	adds	r3, r2, r3
 800708a:	7819      	ldrb	r1, [r3, #0]
 800708c:	220f      	movs	r2, #15
 800708e:	18bb      	adds	r3, r7, r2
 8007090:	18ba      	adds	r2, r7, r2
 8007092:	7812      	ldrb	r2, [r2, #0]
 8007094:	404a      	eors	r2, r1
 8007096:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007098:	230d      	movs	r3, #13
 800709a:	18fb      	adds	r3, r7, r3
 800709c:	2200      	movs	r2, #0
 800709e:	701a      	strb	r2, [r3, #0]
 80070a0:	e01b      	b.n	80070da <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 80070a2:	210f      	movs	r1, #15
 80070a4:	187b      	adds	r3, r7, r1
 80070a6:	781b      	ldrb	r3, [r3, #0]
 80070a8:	b25b      	sxtb	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	da09      	bge.n	80070c2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 80070ae:	187b      	adds	r3, r7, r1
 80070b0:	781b      	ldrb	r3, [r3, #0]
 80070b2:	005b      	lsls	r3, r3, #1
 80070b4:	b25b      	sxtb	r3, r3
 80070b6:	2231      	movs	r2, #49	@ 0x31
 80070b8:	4053      	eors	r3, r2
 80070ba:	b25a      	sxtb	r2, r3
 80070bc:	187b      	adds	r3, r7, r1
 80070be:	701a      	strb	r2, [r3, #0]
 80070c0:	e005      	b.n	80070ce <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80070c2:	230f      	movs	r3, #15
 80070c4:	18fa      	adds	r2, r7, r3
 80070c6:	18fb      	adds	r3, r7, r3
 80070c8:	781b      	ldrb	r3, [r3, #0]
 80070ca:	18db      	adds	r3, r3, r3
 80070cc:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80070ce:	210d      	movs	r1, #13
 80070d0:	187b      	adds	r3, r7, r1
 80070d2:	781a      	ldrb	r2, [r3, #0]
 80070d4:	187b      	adds	r3, r7, r1
 80070d6:	3201      	adds	r2, #1
 80070d8:	701a      	strb	r2, [r3, #0]
 80070da:	230d      	movs	r3, #13
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	781b      	ldrb	r3, [r3, #0]
 80070e0:	2b07      	cmp	r3, #7
 80070e2:	d9de      	bls.n	80070a2 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80070e4:	210e      	movs	r1, #14
 80070e6:	187b      	adds	r3, r7, r1
 80070e8:	781a      	ldrb	r2, [r3, #0]
 80070ea:	187b      	adds	r3, r7, r1
 80070ec:	3201      	adds	r2, #1
 80070ee:	701a      	strb	r2, [r3, #0]
 80070f0:	230e      	movs	r3, #14
 80070f2:	18fa      	adds	r2, r7, r3
 80070f4:	1cfb      	adds	r3, r7, #3
 80070f6:	7812      	ldrb	r2, [r2, #0]
 80070f8:	781b      	ldrb	r3, [r3, #0]
 80070fa:	429a      	cmp	r2, r3
 80070fc:	d3c0      	bcc.n	8007080 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80070fe:	230f      	movs	r3, #15
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	781b      	ldrb	r3, [r3, #0]
}
 8007104:	0018      	movs	r0, r3
 8007106:	46bd      	mov	sp, r7
 8007108:	b004      	add	sp, #16
 800710a:	bd80      	pop	{r7, pc}

0800710c <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 800710c:	b580      	push	{r7, lr}
 800710e:	b084      	sub	sp, #16
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]
 8007114:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	4936      	ldr	r1, [pc, #216]	@ (80071f4 <SGP_GetHT+0xe8>)
 800711c:	1c18      	adds	r0, r3, #0
 800711e:	f7f9 fb4d 	bl	80007bc <__aeabi_fadd>
 8007122:	1c03      	adds	r3, r0, #0
 8007124:	4934      	ldr	r1, [pc, #208]	@ (80071f8 <SGP_GetHT+0xec>)
 8007126:	1c18      	adds	r0, r3, #0
 8007128:	f7f9 fcd2 	bl	8000ad0 <__aeabi_fdiv>
 800712c:	1c03      	adds	r3, r0, #0
 800712e:	4933      	ldr	r1, [pc, #204]	@ (80071fc <SGP_GetHT+0xf0>)
 8007130:	1c18      	adds	r0, r3, #0
 8007132:	f7f9 feb3 	bl	8000e9c <__aeabi_fmul>
 8007136:	1c03      	adds	r3, r0, #0
 8007138:	1c18      	adds	r0, r3, #0
 800713a:	f7f9 fa3d 	bl	80005b8 <__aeabi_f2uiz>
 800713e:	0003      	movs	r3, r0
 8007140:	b29a      	uxth	r2, r3
 8007142:	4b2f      	ldr	r3, [pc, #188]	@ (8007200 <SGP_GetHT+0xf4>)
 8007144:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8007146:	683b      	ldr	r3, [r7, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	492e      	ldr	r1, [pc, #184]	@ (8007204 <SGP_GetHT+0xf8>)
 800714c:	1c18      	adds	r0, r3, #0
 800714e:	f7f9 fcbf 	bl	8000ad0 <__aeabi_fdiv>
 8007152:	1c03      	adds	r3, r0, #0
 8007154:	4929      	ldr	r1, [pc, #164]	@ (80071fc <SGP_GetHT+0xf0>)
 8007156:	1c18      	adds	r0, r3, #0
 8007158:	f7f9 fea0 	bl	8000e9c <__aeabi_fmul>
 800715c:	1c03      	adds	r3, r0, #0
 800715e:	1c18      	adds	r0, r3, #0
 8007160:	f7f9 fa2a 	bl	80005b8 <__aeabi_f2uiz>
 8007164:	0003      	movs	r3, r0
 8007166:	b29a      	uxth	r2, r3
 8007168:	4b27      	ldr	r3, [pc, #156]	@ (8007208 <SGP_GetHT+0xfc>)
 800716a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800716c:	4b26      	ldr	r3, [pc, #152]	@ (8007208 <SGP_GetHT+0xfc>)
 800716e:	881b      	ldrh	r3, [r3, #0]
 8007170:	0a1b      	lsrs	r3, r3, #8
 8007172:	b29b      	uxth	r3, r3
 8007174:	b2da      	uxtb	r2, r3
 8007176:	4b25      	ldr	r3, [pc, #148]	@ (800720c <SGP_GetHT+0x100>)
 8007178:	709a      	strb	r2, [r3, #2]
 800717a:	4b24      	ldr	r3, [pc, #144]	@ (800720c <SGP_GetHT+0x100>)
 800717c:	789a      	ldrb	r2, [r3, #2]
 800717e:	210c      	movs	r1, #12
 8007180:	187b      	adds	r3, r7, r1
 8007182:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8007184:	4b20      	ldr	r3, [pc, #128]	@ (8007208 <SGP_GetHT+0xfc>)
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b2da      	uxtb	r2, r3
 800718a:	4b20      	ldr	r3, [pc, #128]	@ (800720c <SGP_GetHT+0x100>)
 800718c:	70da      	strb	r2, [r3, #3]
 800718e:	4b1f      	ldr	r3, [pc, #124]	@ (800720c <SGP_GetHT+0x100>)
 8007190:	78da      	ldrb	r2, [r3, #3]
 8007192:	187b      	adds	r3, r7, r1
 8007194:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8007196:	187b      	adds	r3, r7, r1
 8007198:	2102      	movs	r1, #2
 800719a:	0018      	movs	r0, r3
 800719c:	f7ff ff60 	bl	8007060 <CalculateCRC>
 80071a0:	0003      	movs	r3, r0
 80071a2:	001a      	movs	r2, r3
 80071a4:	4b19      	ldr	r3, [pc, #100]	@ (800720c <SGP_GetHT+0x100>)
 80071a6:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 80071a8:	4b15      	ldr	r3, [pc, #84]	@ (8007200 <SGP_GetHT+0xf4>)
 80071aa:	881b      	ldrh	r3, [r3, #0]
 80071ac:	0a1b      	lsrs	r3, r3, #8
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	b2da      	uxtb	r2, r3
 80071b2:	4b16      	ldr	r3, [pc, #88]	@ (800720c <SGP_GetHT+0x100>)
 80071b4:	715a      	strb	r2, [r3, #5]
 80071b6:	4b15      	ldr	r3, [pc, #84]	@ (800720c <SGP_GetHT+0x100>)
 80071b8:	795a      	ldrb	r2, [r3, #5]
 80071ba:	2108      	movs	r1, #8
 80071bc:	187b      	adds	r3, r7, r1
 80071be:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80071c0:	4b0f      	ldr	r3, [pc, #60]	@ (8007200 <SGP_GetHT+0xf4>)
 80071c2:	881b      	ldrh	r3, [r3, #0]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	4b11      	ldr	r3, [pc, #68]	@ (800720c <SGP_GetHT+0x100>)
 80071c8:	719a      	strb	r2, [r3, #6]
 80071ca:	4b10      	ldr	r3, [pc, #64]	@ (800720c <SGP_GetHT+0x100>)
 80071cc:	799a      	ldrb	r2, [r3, #6]
 80071ce:	187b      	adds	r3, r7, r1
 80071d0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80071d2:	187b      	adds	r3, r7, r1
 80071d4:	2102      	movs	r1, #2
 80071d6:	0018      	movs	r0, r3
 80071d8:	f7ff ff42 	bl	8007060 <CalculateCRC>
 80071dc:	0003      	movs	r3, r0
 80071de:	001a      	movs	r2, r3
 80071e0:	4b0a      	ldr	r3, [pc, #40]	@ (800720c <SGP_GetHT+0x100>)
 80071e2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80071e4:	4b0a      	ldr	r3, [pc, #40]	@ (8007210 <SGP_GetHT+0x104>)
 80071e6:	2201      	movs	r2, #1
 80071e8:	701a      	strb	r2, [r3, #0]
}
 80071ea:	46c0      	nop			@ (mov r8, r8)
 80071ec:	46bd      	mov	sp, r7
 80071ee:	b004      	add	sp, #16
 80071f0:	bd80      	pop	{r7, pc}
 80071f2:	46c0      	nop			@ (mov r8, r8)
 80071f4:	42340000 	.word	0x42340000
 80071f8:	432f0000 	.word	0x432f0000
 80071fc:	477fff00 	.word	0x477fff00
 8007200:	20000fb6 	.word	0x20000fb6
 8007204:	42c80000 	.word	0x42c80000
 8007208:	20000fb4 	.word	0x20000fb4
 800720c:	20000110 	.word	0x20000110
 8007210:	20000fb8 	.word	0x20000fb8

08007214 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007218:	4b07      	ldr	r3, [pc, #28]	@ (8007238 <HAL_MspInit+0x24>)
 800721a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800721c:	4b06      	ldr	r3, [pc, #24]	@ (8007238 <HAL_MspInit+0x24>)
 800721e:	2101      	movs	r1, #1
 8007220:	430a      	orrs	r2, r1
 8007222:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8007224:	4b04      	ldr	r3, [pc, #16]	@ (8007238 <HAL_MspInit+0x24>)
 8007226:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007228:	4b03      	ldr	r3, [pc, #12]	@ (8007238 <HAL_MspInit+0x24>)
 800722a:	2180      	movs	r1, #128	@ 0x80
 800722c:	0549      	lsls	r1, r1, #21
 800722e:	430a      	orrs	r2, r1
 8007230:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007232:	46c0      	nop			@ (mov r8, r8)
 8007234:	46bd      	mov	sp, r7
 8007236:	bd80      	pop	{r7, pc}
 8007238:	40021000 	.word	0x40021000

0800723c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007240:	46c0      	nop			@ (mov r8, r8)
 8007242:	e7fd      	b.n	8007240 <NMI_Handler+0x4>

08007244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007244:	b580      	push	{r7, lr}
 8007246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007248:	46c0      	nop			@ (mov r8, r8)
 800724a:	e7fd      	b.n	8007248 <HardFault_Handler+0x4>

0800724c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800724c:	b580      	push	{r7, lr}
 800724e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007250:	46c0      	nop			@ (mov r8, r8)
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}

08007256 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007256:	b580      	push	{r7, lr}
 8007258:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800725a:	46c0      	nop			@ (mov r8, r8)
 800725c:	46bd      	mov	sp, r7
 800725e:	bd80      	pop	{r7, pc}

08007260 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007260:	b580      	push	{r7, lr}
 8007262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007264:	f001 f854 	bl	8008310 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007268:	46c0      	nop			@ (mov r8, r8)
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}
	...

08007270 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8007274:	4b05      	ldr	r3, [pc, #20]	@ (800728c <DMA1_Channel2_3_IRQHandler+0x1c>)
 8007276:	0018      	movs	r0, r3
 8007278:	f001 fb2b 	bl	80088d2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800727c:	4b04      	ldr	r3, [pc, #16]	@ (8007290 <DMA1_Channel2_3_IRQHandler+0x20>)
 800727e:	0018      	movs	r0, r3
 8007280:	f001 fb27 	bl	80088d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8007284:	46c0      	nop			@ (mov r8, r8)
 8007286:	46bd      	mov	sp, r7
 8007288:	bd80      	pop	{r7, pc}
 800728a:	46c0      	nop			@ (mov r8, r8)
 800728c:	200009c8 	.word	0x200009c8
 8007290:	20000980 	.word	0x20000980

08007294 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8007294:	b580      	push	{r7, lr}
 8007296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8007298:	4b07      	ldr	r3, [pc, #28]	@ (80072b8 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800729a:	0018      	movs	r0, r3
 800729c:	f001 fb19 	bl	80088d2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80072a0:	4b06      	ldr	r3, [pc, #24]	@ (80072bc <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80072a2:	0018      	movs	r0, r3
 80072a4:	f001 fb15 	bl	80088d2 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 80072a8:	4b05      	ldr	r3, [pc, #20]	@ (80072c0 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 80072aa:	0018      	movs	r0, r3
 80072ac:	f001 fb11 	bl	80088d2 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 80072b0:	46c0      	nop			@ (mov r8, r8)
 80072b2:	46bd      	mov	sp, r7
 80072b4:	bd80      	pop	{r7, pc}
 80072b6:	46c0      	nop			@ (mov r8, r8)
 80072b8:	20000a4c 	.word	0x20000a4c
 80072bc:	200011b4 	.word	0x200011b4
 80072c0:	200011fc 	.word	0x200011fc

080072c4 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 80072c8:	4b03      	ldr	r3, [pc, #12]	@ (80072d8 <USART4_5_IRQHandler+0x14>)
 80072ca:	0018      	movs	r0, r3
 80072cc:	f005 ffd2 	bl	800d274 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 80072d0:	46c0      	nop			@ (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	bd80      	pop	{r7, pc}
 80072d6:	46c0      	nop			@ (mov r8, r8)
 80072d8:	200010fc 	.word	0x200010fc

080072dc <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 80072dc:	b580      	push	{r7, lr}
 80072de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 80072e0:	4b09      	ldr	r3, [pc, #36]	@ (8007308 <I2C1_IRQHandler+0x2c>)
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	699a      	ldr	r2, [r3, #24]
 80072e6:	23e0      	movs	r3, #224	@ 0xe0
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	4013      	ands	r3, r2
 80072ec:	d004      	beq.n	80072f8 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 80072ee:	4b06      	ldr	r3, [pc, #24]	@ (8007308 <I2C1_IRQHandler+0x2c>)
 80072f0:	0018      	movs	r0, r3
 80072f2:	f002 f911 	bl	8009518 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 80072f6:	e003      	b.n	8007300 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 80072f8:	4b03      	ldr	r3, [pc, #12]	@ (8007308 <I2C1_IRQHandler+0x2c>)
 80072fa:	0018      	movs	r0, r3
 80072fc:	f002 f8f2 	bl	80094e4 <HAL_I2C_EV_IRQHandler>
}
 8007300:	46c0      	nop			@ (mov r8, r8)
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	46c0      	nop			@ (mov r8, r8)
 8007308:	200008d8 	.word	0x200008d8

0800730c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0
  return 1;
 8007310:	2301      	movs	r3, #1
}
 8007312:	0018      	movs	r0, r3
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <_kill>:

int _kill(int pid, int sig)
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8007322:	f008 f8ef 	bl	800f504 <__errno>
 8007326:	0003      	movs	r3, r0
 8007328:	2216      	movs	r2, #22
 800732a:	601a      	str	r2, [r3, #0]
  return -1;
 800732c:	2301      	movs	r3, #1
 800732e:	425b      	negs	r3, r3
}
 8007330:	0018      	movs	r0, r3
 8007332:	46bd      	mov	sp, r7
 8007334:	b002      	add	sp, #8
 8007336:	bd80      	pop	{r7, pc}

08007338 <_exit>:

void _exit (int status)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b082      	sub	sp, #8
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8007340:	2301      	movs	r3, #1
 8007342:	425a      	negs	r2, r3
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	0011      	movs	r1, r2
 8007348:	0018      	movs	r0, r3
 800734a:	f7ff ffe5 	bl	8007318 <_kill>
  while (1) {}    /* Make sure we hang here */
 800734e:	46c0      	nop			@ (mov r8, r8)
 8007350:	e7fd      	b.n	800734e <_exit+0x16>

08007352 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007352:	b580      	push	{r7, lr}
 8007354:	b086      	sub	sp, #24
 8007356:	af00      	add	r7, sp, #0
 8007358:	60f8      	str	r0, [r7, #12]
 800735a:	60b9      	str	r1, [r7, #8]
 800735c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800735e:	2300      	movs	r3, #0
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	e00a      	b.n	800737a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8007364:	e000      	b.n	8007368 <_read+0x16>
 8007366:	bf00      	nop
 8007368:	0001      	movs	r1, r0
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	1c5a      	adds	r2, r3, #1
 800736e:	60ba      	str	r2, [r7, #8]
 8007370:	b2ca      	uxtb	r2, r1
 8007372:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007374:	697b      	ldr	r3, [r7, #20]
 8007376:	3301      	adds	r3, #1
 8007378:	617b      	str	r3, [r7, #20]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	429a      	cmp	r2, r3
 8007380:	dbf0      	blt.n	8007364 <_read+0x12>
  }

  return len;
 8007382:	687b      	ldr	r3, [r7, #4]
}
 8007384:	0018      	movs	r0, r3
 8007386:	46bd      	mov	sp, r7
 8007388:	b006      	add	sp, #24
 800738a:	bd80      	pop	{r7, pc}

0800738c <_close>:
  }
  return len;
}

int _close(int file)
{
 800738c:	b580      	push	{r7, lr}
 800738e:	b082      	sub	sp, #8
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8007394:	2301      	movs	r3, #1
 8007396:	425b      	negs	r3, r3
}
 8007398:	0018      	movs	r0, r3
 800739a:	46bd      	mov	sp, r7
 800739c:	b002      	add	sp, #8
 800739e:	bd80      	pop	{r7, pc}

080073a0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80073a0:	b580      	push	{r7, lr}
 80073a2:	b082      	sub	sp, #8
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2280      	movs	r2, #128	@ 0x80
 80073ae:	0192      	lsls	r2, r2, #6
 80073b0:	605a      	str	r2, [r3, #4]
  return 0;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	0018      	movs	r0, r3
 80073b6:	46bd      	mov	sp, r7
 80073b8:	b002      	add	sp, #8
 80073ba:	bd80      	pop	{r7, pc}

080073bc <_isatty>:

int _isatty(int file)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80073c4:	2301      	movs	r3, #1
}
 80073c6:	0018      	movs	r0, r3
 80073c8:	46bd      	mov	sp, r7
 80073ca:	b002      	add	sp, #8
 80073cc:	bd80      	pop	{r7, pc}

080073ce <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80073ce:	b580      	push	{r7, lr}
 80073d0:	b084      	sub	sp, #16
 80073d2:	af00      	add	r7, sp, #0
 80073d4:	60f8      	str	r0, [r7, #12]
 80073d6:	60b9      	str	r1, [r7, #8]
 80073d8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80073da:	2300      	movs	r3, #0
}
 80073dc:	0018      	movs	r0, r3
 80073de:	46bd      	mov	sp, r7
 80073e0:	b004      	add	sp, #16
 80073e2:	bd80      	pop	{r7, pc}

080073e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80073e4:	b580      	push	{r7, lr}
 80073e6:	b086      	sub	sp, #24
 80073e8:	af00      	add	r7, sp, #0
 80073ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80073ec:	4a14      	ldr	r2, [pc, #80]	@ (8007440 <_sbrk+0x5c>)
 80073ee:	4b15      	ldr	r3, [pc, #84]	@ (8007444 <_sbrk+0x60>)
 80073f0:	1ad3      	subs	r3, r2, r3
 80073f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80073f8:	4b13      	ldr	r3, [pc, #76]	@ (8007448 <_sbrk+0x64>)
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d102      	bne.n	8007406 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007400:	4b11      	ldr	r3, [pc, #68]	@ (8007448 <_sbrk+0x64>)
 8007402:	4a12      	ldr	r2, [pc, #72]	@ (800744c <_sbrk+0x68>)
 8007404:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007406:	4b10      	ldr	r3, [pc, #64]	@ (8007448 <_sbrk+0x64>)
 8007408:	681a      	ldr	r2, [r3, #0]
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	18d3      	adds	r3, r2, r3
 800740e:	693a      	ldr	r2, [r7, #16]
 8007410:	429a      	cmp	r2, r3
 8007412:	d207      	bcs.n	8007424 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007414:	f008 f876 	bl	800f504 <__errno>
 8007418:	0003      	movs	r3, r0
 800741a:	220c      	movs	r2, #12
 800741c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800741e:	2301      	movs	r3, #1
 8007420:	425b      	negs	r3, r3
 8007422:	e009      	b.n	8007438 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007424:	4b08      	ldr	r3, [pc, #32]	@ (8007448 <_sbrk+0x64>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800742a:	4b07      	ldr	r3, [pc, #28]	@ (8007448 <_sbrk+0x64>)
 800742c:	681a      	ldr	r2, [r3, #0]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	18d2      	adds	r2, r2, r3
 8007432:	4b05      	ldr	r3, [pc, #20]	@ (8007448 <_sbrk+0x64>)
 8007434:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8007436:	68fb      	ldr	r3, [r7, #12]
}
 8007438:	0018      	movs	r0, r3
 800743a:	46bd      	mov	sp, r7
 800743c:	b006      	add	sp, #24
 800743e:	bd80      	pop	{r7, pc}
 8007440:	20005000 	.word	0x20005000
 8007444:	00000400 	.word	0x00000400
 8007448:	20000fc0 	.word	0x20000fc0
 800744c:	20001ea8 	.word	0x20001ea8

08007450 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007454:	46c0      	nop			@ (mov r8, r8)
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}
	...

0800745c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800745c:	b580      	push	{r7, lr}
 800745e:	b086      	sub	sp, #24
 8007460:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007462:	2310      	movs	r3, #16
 8007464:	18fb      	adds	r3, r7, r3
 8007466:	0018      	movs	r0, r3
 8007468:	2308      	movs	r3, #8
 800746a:	001a      	movs	r2, r3
 800746c:	2100      	movs	r1, #0
 800746e:	f007 ffc5 	bl	800f3fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8007472:	003b      	movs	r3, r7
 8007474:	0018      	movs	r0, r3
 8007476:	2310      	movs	r3, #16
 8007478:	001a      	movs	r2, r3
 800747a:	2100      	movs	r1, #0
 800747c:	f007 ffbe 	bl	800f3fc <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8007480:	4b2e      	ldr	r3, [pc, #184]	@ (800753c <MX_TIM2_Init+0xe0>)
 8007482:	2280      	movs	r2, #128	@ 0x80
 8007484:	05d2      	lsls	r2, r2, #23
 8007486:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8007488:	4b2c      	ldr	r3, [pc, #176]	@ (800753c <MX_TIM2_Init+0xe0>)
 800748a:	2200      	movs	r2, #0
 800748c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800748e:	4b2b      	ldr	r3, [pc, #172]	@ (800753c <MX_TIM2_Init+0xe0>)
 8007490:	2200      	movs	r2, #0
 8007492:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8007494:	4b29      	ldr	r3, [pc, #164]	@ (800753c <MX_TIM2_Init+0xe0>)
 8007496:	4a2a      	ldr	r2, [pc, #168]	@ (8007540 <MX_TIM2_Init+0xe4>)
 8007498:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800749a:	4b28      	ldr	r3, [pc, #160]	@ (800753c <MX_TIM2_Init+0xe0>)
 800749c:	2200      	movs	r2, #0
 800749e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80074a0:	4b26      	ldr	r3, [pc, #152]	@ (800753c <MX_TIM2_Init+0xe0>)
 80074a2:	2200      	movs	r2, #0
 80074a4:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80074a6:	4b25      	ldr	r3, [pc, #148]	@ (800753c <MX_TIM2_Init+0xe0>)
 80074a8:	0018      	movs	r0, r3
 80074aa:	f005 f955 	bl	800c758 <HAL_TIM_PWM_Init>
 80074ae:	1e03      	subs	r3, r0, #0
 80074b0:	d001      	beq.n	80074b6 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 80074b2:	f7fd fe81 	bl	80051b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80074b6:	2110      	movs	r1, #16
 80074b8:	187b      	adds	r3, r7, r1
 80074ba:	2200      	movs	r2, #0
 80074bc:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80074be:	187b      	adds	r3, r7, r1
 80074c0:	2200      	movs	r2, #0
 80074c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80074c4:	187a      	adds	r2, r7, r1
 80074c6:	4b1d      	ldr	r3, [pc, #116]	@ (800753c <MX_TIM2_Init+0xe0>)
 80074c8:	0011      	movs	r1, r2
 80074ca:	0018      	movs	r0, r3
 80074cc:	f005 fc62 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 80074d0:	1e03      	subs	r3, r0, #0
 80074d2:	d001      	beq.n	80074d8 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80074d4:	f7fd fe70 	bl	80051b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80074d8:	003b      	movs	r3, r7
 80074da:	2260      	movs	r2, #96	@ 0x60
 80074dc:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80074de:	003b      	movs	r3, r7
 80074e0:	2200      	movs	r2, #0
 80074e2:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80074e4:	003b      	movs	r3, r7
 80074e6:	2200      	movs	r2, #0
 80074e8:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80074ea:	003b      	movs	r3, r7
 80074ec:	2200      	movs	r2, #0
 80074ee:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80074f0:	0039      	movs	r1, r7
 80074f2:	4b12      	ldr	r3, [pc, #72]	@ (800753c <MX_TIM2_Init+0xe0>)
 80074f4:	2200      	movs	r2, #0
 80074f6:	0018      	movs	r0, r3
 80074f8:	f005 fa00 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 80074fc:	1e03      	subs	r3, r0, #0
 80074fe:	d001      	beq.n	8007504 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 8007500:	f7fd fe5a 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007504:	0039      	movs	r1, r7
 8007506:	4b0d      	ldr	r3, [pc, #52]	@ (800753c <MX_TIM2_Init+0xe0>)
 8007508:	2208      	movs	r2, #8
 800750a:	0018      	movs	r0, r3
 800750c:	f005 f9f6 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 8007510:	1e03      	subs	r3, r0, #0
 8007512:	d001      	beq.n	8007518 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 8007514:	f7fd fe50 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8007518:	0039      	movs	r1, r7
 800751a:	4b08      	ldr	r3, [pc, #32]	@ (800753c <MX_TIM2_Init+0xe0>)
 800751c:	220c      	movs	r2, #12
 800751e:	0018      	movs	r0, r3
 8007520:	f005 f9ec 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 8007524:	1e03      	subs	r3, r0, #0
 8007526:	d001      	beq.n	800752c <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8007528:	f7fd fe46 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800752c:	4b03      	ldr	r3, [pc, #12]	@ (800753c <MX_TIM2_Init+0xe0>)
 800752e:	0018      	movs	r0, r3
 8007530:	f000 f8aa 	bl	8007688 <HAL_TIM_MspPostInit>

}
 8007534:	46c0      	nop			@ (mov r8, r8)
 8007536:	46bd      	mov	sp, r7
 8007538:	b006      	add	sp, #24
 800753a:	bd80      	pop	{r7, pc}
 800753c:	20000fc4 	.word	0x20000fc4
 8007540:	0000ffff 	.word	0x0000ffff

08007544 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b086      	sub	sp, #24
 8007548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800754a:	2310      	movs	r3, #16
 800754c:	18fb      	adds	r3, r7, r3
 800754e:	0018      	movs	r0, r3
 8007550:	2308      	movs	r3, #8
 8007552:	001a      	movs	r2, r3
 8007554:	2100      	movs	r1, #0
 8007556:	f007 ff51 	bl	800f3fc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800755a:	003b      	movs	r3, r7
 800755c:	0018      	movs	r0, r3
 800755e:	2310      	movs	r3, #16
 8007560:	001a      	movs	r2, r3
 8007562:	2100      	movs	r1, #0
 8007564:	f007 ff4a 	bl	800f3fc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8007568:	4b32      	ldr	r3, [pc, #200]	@ (8007634 <MX_TIM3_Init+0xf0>)
 800756a:	4a33      	ldr	r2, [pc, #204]	@ (8007638 <MX_TIM3_Init+0xf4>)
 800756c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800756e:	4b31      	ldr	r3, [pc, #196]	@ (8007634 <MX_TIM3_Init+0xf0>)
 8007570:	2200      	movs	r2, #0
 8007572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007574:	4b2f      	ldr	r3, [pc, #188]	@ (8007634 <MX_TIM3_Init+0xf0>)
 8007576:	2200      	movs	r2, #0
 8007578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800757a:	4b2e      	ldr	r3, [pc, #184]	@ (8007634 <MX_TIM3_Init+0xf0>)
 800757c:	4a2f      	ldr	r2, [pc, #188]	@ (800763c <MX_TIM3_Init+0xf8>)
 800757e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007580:	4b2c      	ldr	r3, [pc, #176]	@ (8007634 <MX_TIM3_Init+0xf0>)
 8007582:	2200      	movs	r2, #0
 8007584:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007586:	4b2b      	ldr	r3, [pc, #172]	@ (8007634 <MX_TIM3_Init+0xf0>)
 8007588:	2200      	movs	r2, #0
 800758a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800758c:	4b29      	ldr	r3, [pc, #164]	@ (8007634 <MX_TIM3_Init+0xf0>)
 800758e:	0018      	movs	r0, r3
 8007590:	f005 f8e2 	bl	800c758 <HAL_TIM_PWM_Init>
 8007594:	1e03      	subs	r3, r0, #0
 8007596:	d001      	beq.n	800759c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8007598:	f7fd fe0e 	bl	80051b8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800759c:	2110      	movs	r1, #16
 800759e:	187b      	adds	r3, r7, r1
 80075a0:	2200      	movs	r2, #0
 80075a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80075a4:	187b      	adds	r3, r7, r1
 80075a6:	2200      	movs	r2, #0
 80075a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80075aa:	187a      	adds	r2, r7, r1
 80075ac:	4b21      	ldr	r3, [pc, #132]	@ (8007634 <MX_TIM3_Init+0xf0>)
 80075ae:	0011      	movs	r1, r2
 80075b0:	0018      	movs	r0, r3
 80075b2:	f005 fbef 	bl	800cd94 <HAL_TIMEx_MasterConfigSynchronization>
 80075b6:	1e03      	subs	r3, r0, #0
 80075b8:	d001      	beq.n	80075be <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 80075ba:	f7fd fdfd 	bl	80051b8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80075be:	003b      	movs	r3, r7
 80075c0:	2260      	movs	r2, #96	@ 0x60
 80075c2:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 80075c4:	003b      	movs	r3, r7
 80075c6:	2200      	movs	r2, #0
 80075c8:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80075ca:	003b      	movs	r3, r7
 80075cc:	2200      	movs	r2, #0
 80075ce:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80075d0:	003b      	movs	r3, r7
 80075d2:	2200      	movs	r2, #0
 80075d4:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80075d6:	0039      	movs	r1, r7
 80075d8:	4b16      	ldr	r3, [pc, #88]	@ (8007634 <MX_TIM3_Init+0xf0>)
 80075da:	2200      	movs	r2, #0
 80075dc:	0018      	movs	r0, r3
 80075de:	f005 f98d 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 80075e2:	1e03      	subs	r3, r0, #0
 80075e4:	d001      	beq.n	80075ea <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 80075e6:	f7fd fde7 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 80075ea:	4b12      	ldr	r3, [pc, #72]	@ (8007634 <MX_TIM3_Init+0xf0>)
 80075ec:	2104      	movs	r1, #4
 80075ee:	0018      	movs	r0, r3
 80075f0:	f005 fc2e 	bl	800ce50 <HAL_TIMEx_RemapConfig>
 80075f4:	1e03      	subs	r3, r0, #0
 80075f6:	d001      	beq.n	80075fc <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80075f8:	f7fd fdde 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80075fc:	0039      	movs	r1, r7
 80075fe:	4b0d      	ldr	r3, [pc, #52]	@ (8007634 <MX_TIM3_Init+0xf0>)
 8007600:	2204      	movs	r2, #4
 8007602:	0018      	movs	r0, r3
 8007604:	f005 f97a 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 8007608:	1e03      	subs	r3, r0, #0
 800760a:	d001      	beq.n	8007610 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800760c:	f7fd fdd4 	bl	80051b8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8007610:	0039      	movs	r1, r7
 8007612:	4b08      	ldr	r3, [pc, #32]	@ (8007634 <MX_TIM3_Init+0xf0>)
 8007614:	2208      	movs	r2, #8
 8007616:	0018      	movs	r0, r3
 8007618:	f005 f970 	bl	800c8fc <HAL_TIM_PWM_ConfigChannel>
 800761c:	1e03      	subs	r3, r0, #0
 800761e:	d001      	beq.n	8007624 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 8007620:	f7fd fdca 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8007624:	4b03      	ldr	r3, [pc, #12]	@ (8007634 <MX_TIM3_Init+0xf0>)
 8007626:	0018      	movs	r0, r3
 8007628:	f000 f82e 	bl	8007688 <HAL_TIM_MspPostInit>

}
 800762c:	46c0      	nop			@ (mov r8, r8)
 800762e:	46bd      	mov	sp, r7
 8007630:	b006      	add	sp, #24
 8007632:	bd80      	pop	{r7, pc}
 8007634:	20001004 	.word	0x20001004
 8007638:	40000400 	.word	0x40000400
 800763c:	0000ffff 	.word	0x0000ffff

08007640 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b082      	sub	sp, #8
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681a      	ldr	r2, [r3, #0]
 800764c:	2380      	movs	r3, #128	@ 0x80
 800764e:	05db      	lsls	r3, r3, #23
 8007650:	429a      	cmp	r2, r3
 8007652:	d106      	bne.n	8007662 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007654:	4b0a      	ldr	r3, [pc, #40]	@ (8007680 <HAL_TIM_PWM_MspInit+0x40>)
 8007656:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007658:	4b09      	ldr	r3, [pc, #36]	@ (8007680 <HAL_TIM_PWM_MspInit+0x40>)
 800765a:	2101      	movs	r1, #1
 800765c:	430a      	orrs	r2, r1
 800765e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8007660:	e00a      	b.n	8007678 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	4a07      	ldr	r2, [pc, #28]	@ (8007684 <HAL_TIM_PWM_MspInit+0x44>)
 8007668:	4293      	cmp	r3, r2
 800766a:	d105      	bne.n	8007678 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800766c:	4b04      	ldr	r3, [pc, #16]	@ (8007680 <HAL_TIM_PWM_MspInit+0x40>)
 800766e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007670:	4b03      	ldr	r3, [pc, #12]	@ (8007680 <HAL_TIM_PWM_MspInit+0x40>)
 8007672:	2102      	movs	r1, #2
 8007674:	430a      	orrs	r2, r1
 8007676:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8007678:	46c0      	nop			@ (mov r8, r8)
 800767a:	46bd      	mov	sp, r7
 800767c:	b002      	add	sp, #8
 800767e:	bd80      	pop	{r7, pc}
 8007680:	40021000 	.word	0x40021000
 8007684:	40000400 	.word	0x40000400

08007688 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8007688:	b590      	push	{r4, r7, lr}
 800768a:	b08b      	sub	sp, #44	@ 0x2c
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007690:	2414      	movs	r4, #20
 8007692:	193b      	adds	r3, r7, r4
 8007694:	0018      	movs	r0, r3
 8007696:	2314      	movs	r3, #20
 8007698:	001a      	movs	r2, r3
 800769a:	2100      	movs	r1, #0
 800769c:	f007 feae 	bl	800f3fc <memset>
  if(timHandle->Instance==TIM2)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681a      	ldr	r2, [r3, #0]
 80076a4:	2380      	movs	r3, #128	@ 0x80
 80076a6:	05db      	lsls	r3, r3, #23
 80076a8:	429a      	cmp	r2, r3
 80076aa:	d123      	bne.n	80076f4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80076ac:	4b27      	ldr	r3, [pc, #156]	@ (800774c <HAL_TIM_MspPostInit+0xc4>)
 80076ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80076b0:	4b26      	ldr	r3, [pc, #152]	@ (800774c <HAL_TIM_MspPostInit+0xc4>)
 80076b2:	2101      	movs	r1, #1
 80076b4:	430a      	orrs	r2, r1
 80076b6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80076b8:	4b24      	ldr	r3, [pc, #144]	@ (800774c <HAL_TIM_MspPostInit+0xc4>)
 80076ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80076bc:	2201      	movs	r2, #1
 80076be:	4013      	ands	r3, r2
 80076c0:	613b      	str	r3, [r7, #16]
 80076c2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 80076c4:	0021      	movs	r1, r4
 80076c6:	187b      	adds	r3, r7, r1
 80076c8:	220d      	movs	r2, #13
 80076ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80076cc:	187b      	adds	r3, r7, r1
 80076ce:	2202      	movs	r2, #2
 80076d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80076d2:	187b      	adds	r3, r7, r1
 80076d4:	2200      	movs	r2, #0
 80076d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80076d8:	187b      	adds	r3, r7, r1
 80076da:	2200      	movs	r2, #0
 80076dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 80076de:	187b      	adds	r3, r7, r1
 80076e0:	2202      	movs	r2, #2
 80076e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80076e4:	187a      	adds	r2, r7, r1
 80076e6:	23a0      	movs	r3, #160	@ 0xa0
 80076e8:	05db      	lsls	r3, r3, #23
 80076ea:	0011      	movs	r1, r2
 80076ec:	0018      	movs	r0, r3
 80076ee:	f001 f9d9 	bl	8008aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80076f2:	e027      	b.n	8007744 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a15      	ldr	r2, [pc, #84]	@ (8007750 <HAL_TIM_MspPostInit+0xc8>)
 80076fa:	4293      	cmp	r3, r2
 80076fc:	d122      	bne.n	8007744 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80076fe:	4b13      	ldr	r3, [pc, #76]	@ (800774c <HAL_TIM_MspPostInit+0xc4>)
 8007700:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007702:	4b12      	ldr	r3, [pc, #72]	@ (800774c <HAL_TIM_MspPostInit+0xc4>)
 8007704:	2104      	movs	r1, #4
 8007706:	430a      	orrs	r2, r1
 8007708:	62da      	str	r2, [r3, #44]	@ 0x2c
 800770a:	4b10      	ldr	r3, [pc, #64]	@ (800774c <HAL_TIM_MspPostInit+0xc4>)
 800770c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800770e:	2204      	movs	r2, #4
 8007710:	4013      	ands	r3, r2
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 8007716:	2114      	movs	r1, #20
 8007718:	187b      	adds	r3, r7, r1
 800771a:	22e0      	movs	r2, #224	@ 0xe0
 800771c:	0052      	lsls	r2, r2, #1
 800771e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007720:	187b      	adds	r3, r7, r1
 8007722:	2202      	movs	r2, #2
 8007724:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007726:	187b      	adds	r3, r7, r1
 8007728:	2200      	movs	r2, #0
 800772a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800772c:	187b      	adds	r3, r7, r1
 800772e:	2200      	movs	r2, #0
 8007730:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8007732:	187b      	adds	r3, r7, r1
 8007734:	2202      	movs	r2, #2
 8007736:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007738:	187b      	adds	r3, r7, r1
 800773a:	4a06      	ldr	r2, [pc, #24]	@ (8007754 <HAL_TIM_MspPostInit+0xcc>)
 800773c:	0019      	movs	r1, r3
 800773e:	0010      	movs	r0, r2
 8007740:	f001 f9b0 	bl	8008aa4 <HAL_GPIO_Init>
}
 8007744:	46c0      	nop			@ (mov r8, r8)
 8007746:	46bd      	mov	sp, r7
 8007748:	b00b      	add	sp, #44	@ 0x2c
 800774a:	bd90      	pop	{r4, r7, pc}
 800774c:	40021000 	.word	0x40021000
 8007750:	40000400 	.word	0x40000400
 8007754:	50000800 	.word	0x50000800

08007758 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800775c:	4b16      	ldr	r3, [pc, #88]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 800775e:	4a17      	ldr	r2, [pc, #92]	@ (80077bc <MX_USART1_UART_Init+0x64>)
 8007760:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8007762:	4b15      	ldr	r3, [pc, #84]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 8007764:	22e1      	movs	r2, #225	@ 0xe1
 8007766:	0252      	lsls	r2, r2, #9
 8007768:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800776a:	4b13      	ldr	r3, [pc, #76]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 800776c:	2200      	movs	r2, #0
 800776e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8007770:	4b11      	ldr	r3, [pc, #68]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 8007772:	2200      	movs	r2, #0
 8007774:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8007776:	4b10      	ldr	r3, [pc, #64]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 8007778:	2200      	movs	r2, #0
 800777a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800777c:	4b0e      	ldr	r3, [pc, #56]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 800777e:	220c      	movs	r2, #12
 8007780:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007782:	4b0d      	ldr	r3, [pc, #52]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 8007784:	2200      	movs	r2, #0
 8007786:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8007788:	4b0b      	ldr	r3, [pc, #44]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 800778a:	2200      	movs	r2, #0
 800778c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800778e:	4b0a      	ldr	r3, [pc, #40]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 8007790:	2200      	movs	r2, #0
 8007792:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8007794:	4b08      	ldr	r3, [pc, #32]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 8007796:	2208      	movs	r2, #8
 8007798:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800779a:	4b07      	ldr	r3, [pc, #28]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 800779c:	2280      	movs	r2, #128	@ 0x80
 800779e:	0212      	lsls	r2, r2, #8
 80077a0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80077a2:	4b05      	ldr	r3, [pc, #20]	@ (80077b8 <MX_USART1_UART_Init+0x60>)
 80077a4:	0018      	movs	r0, r3
 80077a6:	f005 fb71 	bl	800ce8c <HAL_UART_Init>
 80077aa:	1e03      	subs	r3, r0, #0
 80077ac:	d001      	beq.n	80077b2 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80077ae:	f7fd fd03 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80077b2:	46c0      	nop			@ (mov r8, r8)
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}
 80077b8:	20001044 	.word	0x20001044
 80077bc:	40013800 	.word	0x40013800

080077c0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 80077c0:	b580      	push	{r7, lr}
 80077c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 80077c4:	4b14      	ldr	r3, [pc, #80]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077c6:	4a15      	ldr	r2, [pc, #84]	@ (800781c <MX_USART4_UART_Init+0x5c>)
 80077c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80077ca:	4b13      	ldr	r3, [pc, #76]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077cc:	22e1      	movs	r2, #225	@ 0xe1
 80077ce:	0252      	lsls	r2, r2, #9
 80077d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80077d2:	4b11      	ldr	r3, [pc, #68]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077d4:	2200      	movs	r2, #0
 80077d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80077d8:	4b0f      	ldr	r3, [pc, #60]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077da:	2200      	movs	r2, #0
 80077dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80077de:	4b0e      	ldr	r3, [pc, #56]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077e0:	2200      	movs	r2, #0
 80077e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80077e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077e6:	220c      	movs	r2, #12
 80077e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80077ea:	4b0b      	ldr	r3, [pc, #44]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077ec:	2200      	movs	r2, #0
 80077ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80077f0:	4b09      	ldr	r3, [pc, #36]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80077f6:	4b08      	ldr	r3, [pc, #32]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077f8:	2200      	movs	r2, #0
 80077fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80077fc:	4b06      	ldr	r3, [pc, #24]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 80077fe:	2200      	movs	r2, #0
 8007800:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8007802:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <MX_USART4_UART_Init+0x58>)
 8007804:	0018      	movs	r0, r3
 8007806:	f005 fb41 	bl	800ce8c <HAL_UART_Init>
 800780a:	1e03      	subs	r3, r0, #0
 800780c:	d001      	beq.n	8007812 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800780e:	f7fd fcd3 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8007812:	46c0      	nop			@ (mov r8, r8)
 8007814:	46bd      	mov	sp, r7
 8007816:	bd80      	pop	{r7, pc}
 8007818:	200010fc 	.word	0x200010fc
 800781c:	40004c00 	.word	0x40004c00

08007820 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8007820:	b590      	push	{r4, r7, lr}
 8007822:	b08b      	sub	sp, #44	@ 0x2c
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007828:	2414      	movs	r4, #20
 800782a:	193b      	adds	r3, r7, r4
 800782c:	0018      	movs	r0, r3
 800782e:	2314      	movs	r3, #20
 8007830:	001a      	movs	r2, r3
 8007832:	2100      	movs	r1, #0
 8007834:	f007 fde2 	bl	800f3fc <memset>
  if(uartHandle->Instance==USART1)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a6f      	ldr	r2, [pc, #444]	@ (80079fc <HAL_UART_MspInit+0x1dc>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d12b      	bne.n	800789a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007842:	4b6f      	ldr	r3, [pc, #444]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 8007844:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007846:	4b6e      	ldr	r3, [pc, #440]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 8007848:	2180      	movs	r1, #128	@ 0x80
 800784a:	01c9      	lsls	r1, r1, #7
 800784c:	430a      	orrs	r2, r1
 800784e:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007850:	4b6b      	ldr	r3, [pc, #428]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 8007852:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007854:	4b6a      	ldr	r3, [pc, #424]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 8007856:	2101      	movs	r1, #1
 8007858:	430a      	orrs	r2, r1
 800785a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800785c:	4b68      	ldr	r3, [pc, #416]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 800785e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007860:	2201      	movs	r2, #1
 8007862:	4013      	ands	r3, r2
 8007864:	613b      	str	r3, [r7, #16]
 8007866:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8007868:	193b      	adds	r3, r7, r4
 800786a:	22c0      	movs	r2, #192	@ 0xc0
 800786c:	00d2      	lsls	r2, r2, #3
 800786e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007870:	0021      	movs	r1, r4
 8007872:	187b      	adds	r3, r7, r1
 8007874:	2202      	movs	r2, #2
 8007876:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007878:	187b      	adds	r3, r7, r1
 800787a:	2200      	movs	r2, #0
 800787c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800787e:	187b      	adds	r3, r7, r1
 8007880:	2203      	movs	r2, #3
 8007882:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8007884:	187b      	adds	r3, r7, r1
 8007886:	2204      	movs	r2, #4
 8007888:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800788a:	187a      	adds	r2, r7, r1
 800788c:	23a0      	movs	r3, #160	@ 0xa0
 800788e:	05db      	lsls	r3, r3, #23
 8007890:	0011      	movs	r1, r2
 8007892:	0018      	movs	r0, r3
 8007894:	f001 f906 	bl	8008aa4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8007898:	e0ac      	b.n	80079f4 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	4a59      	ldr	r2, [pc, #356]	@ (8007a04 <HAL_UART_MspInit+0x1e4>)
 80078a0:	4293      	cmp	r3, r2
 80078a2:	d000      	beq.n	80078a6 <HAL_UART_MspInit+0x86>
 80078a4:	e0a6      	b.n	80079f4 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 80078a6:	4b56      	ldr	r3, [pc, #344]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 80078a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80078aa:	4b55      	ldr	r3, [pc, #340]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 80078ac:	2180      	movs	r1, #128	@ 0x80
 80078ae:	0309      	lsls	r1, r1, #12
 80078b0:	430a      	orrs	r2, r1
 80078b2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80078b4:	4b52      	ldr	r3, [pc, #328]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 80078b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078b8:	4b51      	ldr	r3, [pc, #324]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 80078ba:	2101      	movs	r1, #1
 80078bc:	430a      	orrs	r2, r1
 80078be:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078c0:	4b4f      	ldr	r3, [pc, #316]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 80078c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078c4:	2201      	movs	r2, #1
 80078c6:	4013      	ands	r3, r2
 80078c8:	60fb      	str	r3, [r7, #12]
 80078ca:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80078cc:	4b4c      	ldr	r3, [pc, #304]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 80078ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80078d0:	4b4b      	ldr	r3, [pc, #300]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 80078d2:	2104      	movs	r1, #4
 80078d4:	430a      	orrs	r2, r1
 80078d6:	62da      	str	r2, [r3, #44]	@ 0x2c
 80078d8:	4b49      	ldr	r3, [pc, #292]	@ (8007a00 <HAL_UART_MspInit+0x1e0>)
 80078da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80078dc:	2204      	movs	r2, #4
 80078de:	4013      	ands	r3, r2
 80078e0:	60bb      	str	r3, [r7, #8]
 80078e2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80078e4:	2414      	movs	r4, #20
 80078e6:	193b      	adds	r3, r7, r4
 80078e8:	2202      	movs	r2, #2
 80078ea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80078ec:	193b      	adds	r3, r7, r4
 80078ee:	2202      	movs	r2, #2
 80078f0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80078f2:	193b      	adds	r3, r7, r4
 80078f4:	2200      	movs	r2, #0
 80078f6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80078f8:	193b      	adds	r3, r7, r4
 80078fa:	2203      	movs	r2, #3
 80078fc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80078fe:	193b      	adds	r3, r7, r4
 8007900:	2206      	movs	r2, #6
 8007902:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007904:	193a      	adds	r2, r7, r4
 8007906:	23a0      	movs	r3, #160	@ 0xa0
 8007908:	05db      	lsls	r3, r3, #23
 800790a:	0011      	movs	r1, r2
 800790c:	0018      	movs	r0, r3
 800790e:	f001 f8c9 	bl	8008aa4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007912:	0021      	movs	r1, r4
 8007914:	187b      	adds	r3, r7, r1
 8007916:	2280      	movs	r2, #128	@ 0x80
 8007918:	00d2      	lsls	r2, r2, #3
 800791a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800791c:	187b      	adds	r3, r7, r1
 800791e:	2202      	movs	r2, #2
 8007920:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007922:	187b      	adds	r3, r7, r1
 8007924:	2200      	movs	r2, #0
 8007926:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007928:	187b      	adds	r3, r7, r1
 800792a:	2203      	movs	r2, #3
 800792c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800792e:	187b      	adds	r3, r7, r1
 8007930:	2206      	movs	r2, #6
 8007932:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007934:	187b      	adds	r3, r7, r1
 8007936:	4a34      	ldr	r2, [pc, #208]	@ (8007a08 <HAL_UART_MspInit+0x1e8>)
 8007938:	0019      	movs	r1, r3
 800793a:	0010      	movs	r0, r2
 800793c:	f001 f8b2 	bl	8008aa4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8007940:	4b32      	ldr	r3, [pc, #200]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 8007942:	4a33      	ldr	r2, [pc, #204]	@ (8007a10 <HAL_UART_MspInit+0x1f0>)
 8007944:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8007946:	4b31      	ldr	r3, [pc, #196]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 8007948:	220c      	movs	r2, #12
 800794a:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800794c:	4b2f      	ldr	r3, [pc, #188]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 800794e:	2200      	movs	r2, #0
 8007950:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8007952:	4b2e      	ldr	r3, [pc, #184]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 8007954:	2200      	movs	r2, #0
 8007956:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8007958:	4b2c      	ldr	r3, [pc, #176]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 800795a:	2280      	movs	r2, #128	@ 0x80
 800795c:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800795e:	4b2b      	ldr	r3, [pc, #172]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 8007960:	2200      	movs	r2, #0
 8007962:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8007964:	4b29      	ldr	r3, [pc, #164]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 8007966:	2200      	movs	r2, #0
 8007968:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800796a:	4b28      	ldr	r3, [pc, #160]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 800796c:	2220      	movs	r2, #32
 800796e:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8007970:	4b26      	ldr	r3, [pc, #152]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 8007972:	2200      	movs	r2, #0
 8007974:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8007976:	4b25      	ldr	r3, [pc, #148]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 8007978:	0018      	movs	r0, r3
 800797a:	f000 fde7 	bl	800854c <HAL_DMA_Init>
 800797e:	1e03      	subs	r3, r0, #0
 8007980:	d001      	beq.n	8007986 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8007982:	f7fd fc19 	bl	80051b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	4a20      	ldr	r2, [pc, #128]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 800798a:	675a      	str	r2, [r3, #116]	@ 0x74
 800798c:	4b1f      	ldr	r3, [pc, #124]	@ (8007a0c <HAL_UART_MspInit+0x1ec>)
 800798e:	687a      	ldr	r2, [r7, #4]
 8007990:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8007992:	4b20      	ldr	r3, [pc, #128]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 8007994:	4a20      	ldr	r2, [pc, #128]	@ (8007a18 <HAL_UART_MspInit+0x1f8>)
 8007996:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8007998:	4b1e      	ldr	r3, [pc, #120]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 800799a:	220c      	movs	r2, #12
 800799c:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800799e:	4b1d      	ldr	r3, [pc, #116]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079a0:	2210      	movs	r2, #16
 80079a2:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80079a4:	4b1b      	ldr	r3, [pc, #108]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079a6:	2200      	movs	r2, #0
 80079a8:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80079aa:	4b1a      	ldr	r3, [pc, #104]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079ac:	2280      	movs	r2, #128	@ 0x80
 80079ae:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80079b0:	4b18      	ldr	r3, [pc, #96]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079b2:	2200      	movs	r2, #0
 80079b4:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80079b6:	4b17      	ldr	r3, [pc, #92]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079b8:	2200      	movs	r2, #0
 80079ba:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 80079bc:	4b15      	ldr	r3, [pc, #84]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079be:	2200      	movs	r2, #0
 80079c0:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80079c2:	4b14      	ldr	r3, [pc, #80]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 80079c8:	4b12      	ldr	r3, [pc, #72]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079ca:	0018      	movs	r0, r3
 80079cc:	f000 fdbe 	bl	800854c <HAL_DMA_Init>
 80079d0:	1e03      	subs	r3, r0, #0
 80079d2:	d001      	beq.n	80079d8 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 80079d4:	f7fd fbf0 	bl	80051b8 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a0e      	ldr	r2, [pc, #56]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079dc:	671a      	str	r2, [r3, #112]	@ 0x70
 80079de:	4b0d      	ldr	r3, [pc, #52]	@ (8007a14 <HAL_UART_MspInit+0x1f4>)
 80079e0:	687a      	ldr	r2, [r7, #4]
 80079e2:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 80079e4:	2200      	movs	r2, #0
 80079e6:	2100      	movs	r1, #0
 80079e8:	200e      	movs	r0, #14
 80079ea:	f000 fd7d 	bl	80084e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 80079ee:	200e      	movs	r0, #14
 80079f0:	f000 fd8f 	bl	8008512 <HAL_NVIC_EnableIRQ>
}
 80079f4:	46c0      	nop			@ (mov r8, r8)
 80079f6:	46bd      	mov	sp, r7
 80079f8:	b00b      	add	sp, #44	@ 0x2c
 80079fa:	bd90      	pop	{r4, r7, pc}
 80079fc:	40013800 	.word	0x40013800
 8007a00:	40021000 	.word	0x40021000
 8007a04:	40004c00 	.word	0x40004c00
 8007a08:	50000800 	.word	0x50000800
 8007a0c:	200011b4 	.word	0x200011b4
 8007a10:	4002006c 	.word	0x4002006c
 8007a14:	200011fc 	.word	0x200011fc
 8007a18:	40020080 	.word	0x40020080

08007a1c <MX_USB_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_FS;

/* USB init function */

void MX_USB_PCD_Init(void)
{
 8007a1c:	b580      	push	{r7, lr}
 8007a1e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8007a20:	4b0f      	ldr	r3, [pc, #60]	@ (8007a60 <MX_USB_PCD_Init+0x44>)
 8007a22:	4a10      	ldr	r2, [pc, #64]	@ (8007a64 <MX_USB_PCD_Init+0x48>)
 8007a24:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8007a26:	4b0e      	ldr	r3, [pc, #56]	@ (8007a60 <MX_USB_PCD_Init+0x44>)
 8007a28:	2208      	movs	r2, #8
 8007a2a:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8007a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8007a60 <MX_USB_PCD_Init+0x44>)
 8007a2e:	2202      	movs	r2, #2
 8007a30:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007a32:	4b0b      	ldr	r3, [pc, #44]	@ (8007a60 <MX_USB_PCD_Init+0x44>)
 8007a34:	2202      	movs	r2, #2
 8007a36:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8007a38:	4b09      	ldr	r3, [pc, #36]	@ (8007a60 <MX_USB_PCD_Init+0x44>)
 8007a3a:	2200      	movs	r2, #0
 8007a3c:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8007a3e:	4b08      	ldr	r3, [pc, #32]	@ (8007a60 <MX_USB_PCD_Init+0x44>)
 8007a40:	2200      	movs	r2, #0
 8007a42:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8007a44:	4b06      	ldr	r3, [pc, #24]	@ (8007a60 <MX_USB_PCD_Init+0x44>)
 8007a46:	2200      	movs	r2, #0
 8007a48:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8007a4a:	4b05      	ldr	r3, [pc, #20]	@ (8007a60 <MX_USB_PCD_Init+0x44>)
 8007a4c:	0018      	movs	r0, r3
 8007a4e:	f003 fe05 	bl	800b65c <HAL_PCD_Init>
 8007a52:	1e03      	subs	r3, r0, #0
 8007a54:	d001      	beq.n	8007a5a <MX_USB_PCD_Init+0x3e>
  {
    Error_Handler();
 8007a56:	f7fd fbaf 	bl	80051b8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8007a5a:	46c0      	nop			@ (mov r8, r8)
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}
 8007a60:	20001244 	.word	0x20001244
 8007a64:	40005c00 	.word	0x40005c00

08007a68 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b082      	sub	sp, #8
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	6078      	str	r0, [r7, #4]

  if(pcdHandle->Instance==USB)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	4a06      	ldr	r2, [pc, #24]	@ (8007a90 <HAL_PCD_MspInit+0x28>)
 8007a76:	4293      	cmp	r3, r2
 8007a78:	d106      	bne.n	8007a88 <HAL_PCD_MspInit+0x20>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* USB clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8007a7a:	4b06      	ldr	r3, [pc, #24]	@ (8007a94 <HAL_PCD_MspInit+0x2c>)
 8007a7c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007a7e:	4b05      	ldr	r3, [pc, #20]	@ (8007a94 <HAL_PCD_MspInit+0x2c>)
 8007a80:	2180      	movs	r1, #128	@ 0x80
 8007a82:	0409      	lsls	r1, r1, #16
 8007a84:	430a      	orrs	r2, r1
 8007a86:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8007a88:	46c0      	nop			@ (mov r8, r8)
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	b002      	add	sp, #8
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	40005c00 	.word	0x40005c00
 8007a94:	40021000 	.word	0x40021000

08007a98 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8007aa0:	f000 fc48 	bl	8008334 <HAL_GetTick>
 8007aa4:	0003      	movs	r3, r0
 8007aa6:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8007aa8:	4b1c      	ldr	r3, [pc, #112]	@ (8007b1c <TimestampIsReached+0x84>)
 8007aaa:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8007aac:	697a      	ldr	r2, [r7, #20]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	429a      	cmp	r2, r3
 8007ab2:	d307      	bcc.n	8007ac4 <TimestampIsReached+0x2c>
 8007ab4:	697a      	ldr	r2, [r7, #20]
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	1ad3      	subs	r3, r2, r3
 8007aba:	693a      	ldr	r2, [r7, #16]
 8007abc:	429a      	cmp	r2, r3
 8007abe:	d901      	bls.n	8007ac4 <TimestampIsReached+0x2c>
 8007ac0:	2201      	movs	r2, #1
 8007ac2:	e000      	b.n	8007ac6 <TimestampIsReached+0x2e>
 8007ac4:	2200      	movs	r2, #0
 8007ac6:	230f      	movs	r3, #15
 8007ac8:	18fb      	adds	r3, r7, r3
 8007aca:	701a      	strb	r2, [r3, #0]
 8007acc:	781a      	ldrb	r2, [r3, #0]
 8007ace:	2101      	movs	r1, #1
 8007ad0:	400a      	ands	r2, r1
 8007ad2:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8007ad4:	697a      	ldr	r2, [r7, #20]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	429a      	cmp	r2, r3
 8007ada:	d207      	bcs.n	8007aec <TimestampIsReached+0x54>
 8007adc:	687a      	ldr	r2, [r7, #4]
 8007ade:	697b      	ldr	r3, [r7, #20]
 8007ae0:	1ad3      	subs	r3, r2, r3
 8007ae2:	693a      	ldr	r2, [r7, #16]
 8007ae4:	429a      	cmp	r2, r3
 8007ae6:	d201      	bcs.n	8007aec <TimestampIsReached+0x54>
 8007ae8:	2201      	movs	r2, #1
 8007aea:	e000      	b.n	8007aee <TimestampIsReached+0x56>
 8007aec:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8007aee:	200e      	movs	r0, #14
 8007af0:	183b      	adds	r3, r7, r0
 8007af2:	701a      	strb	r2, [r3, #0]
 8007af4:	781a      	ldrb	r2, [r3, #0]
 8007af6:	2101      	movs	r1, #1
 8007af8:	400a      	ands	r2, r1
 8007afa:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8007afc:	230f      	movs	r3, #15
 8007afe:	18fb      	adds	r3, r7, r3
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d103      	bne.n	8007b0e <TimestampIsReached+0x76>
 8007b06:	183b      	adds	r3, r7, r0
 8007b08:	781b      	ldrb	r3, [r3, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8007b0e:	2301      	movs	r3, #1
 8007b10:	e000      	b.n	8007b14 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	0018      	movs	r0, r3
 8007b16:	46bd      	mov	sp, r7
 8007b18:	b006      	add	sp, #24
 8007b1a:	bd80      	pop	{r7, pc}
 8007b1c:	7fffffff 	.word	0x7fffffff

08007b20 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b082      	sub	sp, #8
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8007b28:	f000 fc04 	bl	8008334 <HAL_GetTick>
 8007b2c:	0002      	movs	r2, r0
 8007b2e:	4904      	ldr	r1, [pc, #16]	@ (8007b40 <AddTimestamp+0x20>)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	0018      	movs	r0, r3
 8007b34:	f007 fbbe 	bl	800f2b4 <siprintf>
}
 8007b38:	46c0      	nop			@ (mov r8, r8)
 8007b3a:	46bd      	mov	sp, r7
 8007b3c:	b002      	add	sp, #8
 8007b3e:	bd80      	pop	{r7, pc}
 8007b40:	08012318 	.word	0x08012318

08007b44 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8007b44:	b40c      	push	{r2, r3}
 8007b46:	b5b0      	push	{r4, r5, r7, lr}
 8007b48:	4c2b      	ldr	r4, [pc, #172]	@ (8007bf8 <CreateLine+0xb4>)
 8007b4a:	44a5      	add	sp, r4
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	0002      	movs	r2, r0
 8007b50:	6039      	str	r1, [r7, #0]
 8007b52:	4b2a      	ldr	r3, [pc, #168]	@ (8007bfc <CreateLine+0xb8>)
 8007b54:	2182      	movs	r1, #130	@ 0x82
 8007b56:	00c9      	lsls	r1, r1, #3
 8007b58:	185b      	adds	r3, r3, r1
 8007b5a:	19db      	adds	r3, r3, r7
 8007b5c:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8007b5e:	4b28      	ldr	r3, [pc, #160]	@ (8007c00 <CreateLine+0xbc>)
 8007b60:	781b      	ldrb	r3, [r3, #0]
 8007b62:	4a26      	ldr	r2, [pc, #152]	@ (8007bfc <CreateLine+0xb8>)
 8007b64:	1852      	adds	r2, r2, r1
 8007b66:	19d2      	adds	r2, r2, r7
 8007b68:	7812      	ldrb	r2, [r2, #0]
 8007b6a:	429a      	cmp	r2, r3
 8007b6c:	d83b      	bhi.n	8007be6 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8007b6e:	683a      	ldr	r2, [r7, #0]
 8007b70:	4924      	ldr	r1, [pc, #144]	@ (8007c04 <CreateLine+0xc0>)
 8007b72:	240c      	movs	r4, #12
 8007b74:	193b      	adds	r3, r7, r4
 8007b76:	0018      	movs	r0, r3
 8007b78:	f007 fb9c 	bl	800f2b4 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8007b7c:	4b20      	ldr	r3, [pc, #128]	@ (8007c00 <CreateLine+0xbc>)
 8007b7e:	781b      	ldrb	r3, [r3, #0]
 8007b80:	2b01      	cmp	r3, #1
 8007b82:	d909      	bls.n	8007b98 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8007b84:	193b      	adds	r3, r7, r4
 8007b86:	0018      	movs	r0, r3
 8007b88:	f7f8 fabe 	bl	8000108 <strlen>
 8007b8c:	0002      	movs	r2, r0
 8007b8e:	193b      	adds	r3, r7, r4
 8007b90:	189b      	adds	r3, r3, r2
 8007b92:	0018      	movs	r0, r3
 8007b94:	f7ff ffc4 	bl	8007b20 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8007b98:	240c      	movs	r4, #12
 8007b9a:	193b      	adds	r3, r7, r4
 8007b9c:	0018      	movs	r0, r3
 8007b9e:	f7f8 fab3 	bl	8000108 <strlen>
 8007ba2:	0003      	movs	r3, r0
 8007ba4:	4918      	ldr	r1, [pc, #96]	@ (8007c08 <CreateLine+0xc4>)
 8007ba6:	187a      	adds	r2, r7, r1
 8007ba8:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8007baa:	4b18      	ldr	r3, [pc, #96]	@ (8007c0c <CreateLine+0xc8>)
 8007bac:	2508      	movs	r5, #8
 8007bae:	195b      	adds	r3, r3, r5
 8007bb0:	19db      	adds	r3, r3, r7
 8007bb2:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8007bb4:	193a      	adds	r2, r7, r4
 8007bb6:	187b      	adds	r3, r7, r1
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	18d0      	adds	r0, r2, r3
 8007bbc:	187b      	adds	r3, r7, r1
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2280      	movs	r2, #128	@ 0x80
 8007bc2:	00d2      	lsls	r2, r2, #3
 8007bc4:	1ad3      	subs	r3, r2, r3
 8007bc6:	0019      	movs	r1, r3
 8007bc8:	68bb      	ldr	r3, [r7, #8]
 8007bca:	2283      	movs	r2, #131	@ 0x83
 8007bcc:	00d2      	lsls	r2, r2, #3
 8007bce:	1952      	adds	r2, r2, r5
 8007bd0:	19d2      	adds	r2, r2, r7
 8007bd2:	6812      	ldr	r2, [r2, #0]
 8007bd4:	f007 fc06 	bl	800f3e4 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8007bd8:	193a      	adds	r2, r7, r4
 8007bda:	4b0d      	ldr	r3, [pc, #52]	@ (8007c10 <CreateLine+0xcc>)
 8007bdc:	0011      	movs	r1, r2
 8007bde:	0018      	movs	r0, r3
 8007be0:	f007 fb58 	bl	800f294 <iprintf>
 8007be4:	e000      	b.n	8007be8 <CreateLine+0xa4>
    return;
 8007be6:	46c0      	nop			@ (mov r8, r8)
}
 8007be8:	46bd      	mov	sp, r7
 8007bea:	2382      	movs	r3, #130	@ 0x82
 8007bec:	00db      	lsls	r3, r3, #3
 8007bee:	449d      	add	sp, r3
 8007bf0:	bcb0      	pop	{r4, r5, r7}
 8007bf2:	bc08      	pop	{r3}
 8007bf4:	b002      	add	sp, #8
 8007bf6:	4718      	bx	r3
 8007bf8:	fffffbf0 	.word	0xfffffbf0
 8007bfc:	fffffbf7 	.word	0xfffffbf7
 8007c00:	20000130 	.word	0x20000130
 8007c04:	08012324 	.word	0x08012324
 8007c08:	0000040c 	.word	0x0000040c
 8007c0c:	0000041c 	.word	0x0000041c
 8007c10:	08012328 	.word	0x08012328

08007c14 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b084      	sub	sp, #16
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	b29a      	uxth	r2, r3
 8007c24:	68b9      	ldr	r1, [r7, #8]
 8007c26:	4804      	ldr	r0, [pc, #16]	@ (8007c38 <_write+0x24>)
 8007c28:	2364      	movs	r3, #100	@ 0x64
 8007c2a:	f005 f995 	bl	800cf58 <HAL_UART_Transmit>
  return count;
 8007c2e:	687b      	ldr	r3, [r7, #4]
}
 8007c30:	0018      	movs	r0, r3
 8007c32:	46bd      	mov	sp, r7
 8007c34:	b004      	add	sp, #16
 8007c36:	bd80      	pop	{r7, pc}
 8007c38:	20001044 	.word	0x20001044

08007c3c <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b082      	sub	sp, #8
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	0002      	movs	r2, r0
 8007c44:	1dfb      	adds	r3, r7, #7
 8007c46:	701a      	strb	r2, [r3, #0]
 8007c48:	4b03      	ldr	r3, [pc, #12]	@ (8007c58 <SetVerboseLevel+0x1c>)
 8007c4a:	1dfa      	adds	r2, r7, #7
 8007c4c:	7812      	ldrb	r2, [r2, #0]
 8007c4e:	701a      	strb	r2, [r3, #0]
 8007c50:	46c0      	nop			@ (mov r8, r8)
 8007c52:	46bd      	mov	sp, r7
 8007c54:	b002      	add	sp, #8
 8007c56:	bd80      	pop	{r7, pc}
 8007c58:	20000130 	.word	0x20000130

08007c5c <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8007c5c:	b580      	push	{r7, lr}
 8007c5e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8007c60:	f000 fb68 	bl	8008334 <HAL_GetTick>
 8007c64:	0003      	movs	r3, r0
}
 8007c66:	0018      	movs	r0, r3
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b082      	sub	sp, #8
 8007c70:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8007c72:	4a0f      	ldr	r2, [pc, #60]	@ (8007cb0 <BinaryReleaseInfo+0x44>)
 8007c74:	4b0f      	ldr	r3, [pc, #60]	@ (8007cb4 <BinaryReleaseInfo+0x48>)
 8007c76:	0019      	movs	r1, r3
 8007c78:	2002      	movs	r0, #2
 8007c7a:	f7ff ff63 	bl	8007b44 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8007c7e:	480e      	ldr	r0, [pc, #56]	@ (8007cb8 <BinaryReleaseInfo+0x4c>)
 8007c80:	4a0e      	ldr	r2, [pc, #56]	@ (8007cbc <BinaryReleaseInfo+0x50>)
 8007c82:	490c      	ldr	r1, [pc, #48]	@ (8007cb4 <BinaryReleaseInfo+0x48>)
 8007c84:	4b0e      	ldr	r3, [pc, #56]	@ (8007cc0 <BinaryReleaseInfo+0x54>)
 8007c86:	9300      	str	r3, [sp, #0]
 8007c88:	0003      	movs	r3, r0
 8007c8a:	2002      	movs	r0, #2
 8007c8c:	f7ff ff5a 	bl	8007b44 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 8007c90:	4a0c      	ldr	r2, [pc, #48]	@ (8007cc4 <BinaryReleaseInfo+0x58>)
 8007c92:	4b08      	ldr	r3, [pc, #32]	@ (8007cb4 <BinaryReleaseInfo+0x48>)
 8007c94:	0019      	movs	r1, r3
 8007c96:	2002      	movs	r0, #2
 8007c98:	f7ff ff54 	bl	8007b44 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8007c9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007cc8 <BinaryReleaseInfo+0x5c>)
 8007c9e:	4a0b      	ldr	r2, [pc, #44]	@ (8007ccc <BinaryReleaseInfo+0x60>)
 8007ca0:	4904      	ldr	r1, [pc, #16]	@ (8007cb4 <BinaryReleaseInfo+0x48>)
 8007ca2:	2002      	movs	r0, #2
 8007ca4:	f7ff ff4e 	bl	8007b44 <CreateLine>
}
 8007ca8:	46c0      	nop			@ (mov r8, r8)
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
 8007cae:	46c0      	nop			@ (mov r8, r8)
 8007cb0:	08012330 	.word	0x08012330
 8007cb4:	0801235c 	.word	0x0801235c
 8007cb8:	08012360 	.word	0x08012360
 8007cbc:	0801236c 	.word	0x0801236c
 8007cc0:	08012380 	.word	0x08012380
 8007cc4:	0801238c 	.word	0x0801238c
 8007cc8:	08012398 	.word	0x08012398
 8007ccc:	080123a0 	.word	0x080123a0

08007cd0 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007cd0:	b590      	push	{r4, r7, lr}
 8007cd2:	b083      	sub	sp, #12
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6039      	str	r1, [r7, #0]
 8007cd8:	0011      	movs	r1, r2
 8007cda:	1dfb      	adds	r3, r7, #7
 8007cdc:	1c02      	adds	r2, r0, #0
 8007cde:	701a      	strb	r2, [r3, #0]
 8007ce0:	1dbb      	adds	r3, r7, #6
 8007ce2:	1c0a      	adds	r2, r1, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8007ce6:	4b08      	ldr	r3, [pc, #32]	@ (8007d08 <ReadRegister+0x38>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d008      	beq.n	8007d00 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8007cee:	4b06      	ldr	r3, [pc, #24]	@ (8007d08 <ReadRegister+0x38>)
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	1dba      	adds	r2, r7, #6
 8007cf4:	7814      	ldrb	r4, [r2, #0]
 8007cf6:	6839      	ldr	r1, [r7, #0]
 8007cf8:	1dfa      	adds	r2, r7, #7
 8007cfa:	7810      	ldrb	r0, [r2, #0]
 8007cfc:	0022      	movs	r2, r4
 8007cfe:	4798      	blx	r3
	}
}
 8007d00:	46c0      	nop			@ (mov r8, r8)
 8007d02:	46bd      	mov	sp, r7
 8007d04:	b003      	add	sp, #12
 8007d06:	bd90      	pop	{r4, r7, pc}
 8007d08:	20001538 	.word	0x20001538

08007d0c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8007d0c:	b590      	push	{r4, r7, lr}
 8007d0e:	b083      	sub	sp, #12
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6039      	str	r1, [r7, #0]
 8007d14:	0011      	movs	r1, r2
 8007d16:	1dfb      	adds	r3, r7, #7
 8007d18:	1c02      	adds	r2, r0, #0
 8007d1a:	701a      	strb	r2, [r3, #0]
 8007d1c:	1dbb      	adds	r3, r7, #6
 8007d1e:	1c0a      	adds	r2, r1, #0
 8007d20:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8007d22:	4b08      	ldr	r3, [pc, #32]	@ (8007d44 <WriteRegister+0x38>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d008      	beq.n	8007d3c <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8007d2a:	4b06      	ldr	r3, [pc, #24]	@ (8007d44 <WriteRegister+0x38>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	1dba      	adds	r2, r7, #6
 8007d30:	7814      	ldrb	r4, [r2, #0]
 8007d32:	6839      	ldr	r1, [r7, #0]
 8007d34:	1dfa      	adds	r2, r7, #7
 8007d36:	7810      	ldrb	r0, [r2, #0]
 8007d38:	0022      	movs	r2, r4
 8007d3a:	4798      	blx	r3
  }
}
 8007d3c:	46c0      	nop			@ (mov r8, r8)
 8007d3e:	46bd      	mov	sp, r7
 8007d40:	b003      	add	sp, #12
 8007d42:	bd90      	pop	{r4, r7, pc}
 8007d44:	2000153c 	.word	0x2000153c

08007d48 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b084      	sub	sp, #16
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	6078      	str	r0, [r7, #4]
 8007d50:	000a      	movs	r2, r1
 8007d52:	1cfb      	adds	r3, r7, #3
 8007d54:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8007d56:	230f      	movs	r3, #15
 8007d58:	18fb      	adds	r3, r7, r3
 8007d5a:	22ff      	movs	r2, #255	@ 0xff
 8007d5c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007d5e:	230e      	movs	r3, #14
 8007d60:	18fb      	adds	r3, r7, r3
 8007d62:	2200      	movs	r2, #0
 8007d64:	701a      	strb	r2, [r3, #0]
 8007d66:	e037      	b.n	8007dd8 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007d68:	230e      	movs	r3, #14
 8007d6a:	18fb      	adds	r3, r7, r3
 8007d6c:	781b      	ldrb	r3, [r3, #0]
 8007d6e:	687a      	ldr	r2, [r7, #4]
 8007d70:	18d3      	adds	r3, r2, r3
 8007d72:	7819      	ldrb	r1, [r3, #0]
 8007d74:	220f      	movs	r2, #15
 8007d76:	18bb      	adds	r3, r7, r2
 8007d78:	18ba      	adds	r2, r7, r2
 8007d7a:	7812      	ldrb	r2, [r2, #0]
 8007d7c:	404a      	eors	r2, r1
 8007d7e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007d80:	230d      	movs	r3, #13
 8007d82:	18fb      	adds	r3, r7, r3
 8007d84:	2200      	movs	r2, #0
 8007d86:	701a      	strb	r2, [r3, #0]
 8007d88:	e01b      	b.n	8007dc2 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8007d8a:	210f      	movs	r1, #15
 8007d8c:	187b      	adds	r3, r7, r1
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da09      	bge.n	8007daa <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8007d96:	187b      	adds	r3, r7, r1
 8007d98:	781b      	ldrb	r3, [r3, #0]
 8007d9a:	005b      	lsls	r3, r3, #1
 8007d9c:	b25b      	sxtb	r3, r3
 8007d9e:	2231      	movs	r2, #49	@ 0x31
 8007da0:	4053      	eors	r3, r2
 8007da2:	b25a      	sxtb	r2, r3
 8007da4:	187b      	adds	r3, r7, r1
 8007da6:	701a      	strb	r2, [r3, #0]
 8007da8:	e005      	b.n	8007db6 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8007daa:	230f      	movs	r3, #15
 8007dac:	18fa      	adds	r2, r7, r3
 8007dae:	18fb      	adds	r3, r7, r3
 8007db0:	781b      	ldrb	r3, [r3, #0]
 8007db2:	18db      	adds	r3, r3, r3
 8007db4:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007db6:	210d      	movs	r1, #13
 8007db8:	187b      	adds	r3, r7, r1
 8007dba:	781a      	ldrb	r2, [r3, #0]
 8007dbc:	187b      	adds	r3, r7, r1
 8007dbe:	3201      	adds	r2, #1
 8007dc0:	701a      	strb	r2, [r3, #0]
 8007dc2:	230d      	movs	r3, #13
 8007dc4:	18fb      	adds	r3, r7, r3
 8007dc6:	781b      	ldrb	r3, [r3, #0]
 8007dc8:	2b07      	cmp	r3, #7
 8007dca:	d9de      	bls.n	8007d8a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007dcc:	210e      	movs	r1, #14
 8007dce:	187b      	adds	r3, r7, r1
 8007dd0:	781a      	ldrb	r2, [r3, #0]
 8007dd2:	187b      	adds	r3, r7, r1
 8007dd4:	3201      	adds	r2, #1
 8007dd6:	701a      	strb	r2, [r3, #0]
 8007dd8:	230e      	movs	r3, #14
 8007dda:	18fa      	adds	r2, r7, r3
 8007ddc:	1cfb      	adds	r3, r7, #3
 8007dde:	7812      	ldrb	r2, [r2, #0]
 8007de0:	781b      	ldrb	r3, [r3, #0]
 8007de2:	429a      	cmp	r2, r3
 8007de4:	d3c0      	bcc.n	8007d68 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8007de6:	230f      	movs	r3, #15
 8007de8:	18fb      	adds	r3, r7, r3
 8007dea:	781b      	ldrb	r3, [r3, #0]
}
 8007dec:	0018      	movs	r0, r3
 8007dee:	46bd      	mov	sp, r7
 8007df0:	b004      	add	sp, #16
 8007df2:	bd80      	pop	{r7, pc}

08007df4 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b082      	sub	sp, #8
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8007dfe:	4b0a      	ldr	r3, [pc, #40]	@ (8007e28 <HIDS_Init+0x34>)
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8007e04:	4b09      	ldr	r3, [pc, #36]	@ (8007e2c <HIDS_Init+0x38>)
 8007e06:	683a      	ldr	r2, [r7, #0]
 8007e08:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8007e0a:	4b09      	ldr	r3, [pc, #36]	@ (8007e30 <HIDS_Init+0x3c>)
 8007e0c:	781b      	ldrb	r3, [r3, #0]
 8007e0e:	0018      	movs	r0, r3
 8007e10:	f000 f8d0 	bl	8007fb4 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8007e14:	4b07      	ldr	r3, [pc, #28]	@ (8007e34 <HIDS_Init+0x40>)
 8007e16:	781b      	ldrb	r3, [r3, #0]
 8007e18:	0018      	movs	r0, r3
 8007e1a:	f000 f82b 	bl	8007e74 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8007e1e:	46c0      	nop			@ (mov r8, r8)
 8007e20:	46bd      	mov	sp, r7
 8007e22:	b002      	add	sp, #8
 8007e24:	bd80      	pop	{r7, pc}
 8007e26:	46c0      	nop			@ (mov r8, r8)
 8007e28:	20001538 	.word	0x20001538
 8007e2c:	2000153c 	.word	0x2000153c
 8007e30:	20000132 	.word	0x20000132
 8007e34:	20000131 	.word	0x20000131

08007e38 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8007e3c:	f7ff ff0e 	bl	8007c5c <GetCurrentHalTicks>
 8007e40:	0002      	movs	r2, r0
 8007e42:	4b08      	ldr	r3, [pc, #32]	@ (8007e64 <HIDS_StartMeasurement+0x2c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	18d2      	adds	r2, r2, r3
 8007e48:	4b07      	ldr	r3, [pc, #28]	@ (8007e68 <HIDS_StartMeasurement+0x30>)
 8007e4a:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8007e4c:	4b07      	ldr	r3, [pc, #28]	@ (8007e6c <HIDS_StartMeasurement+0x34>)
 8007e4e:	2201      	movs	r2, #1
 8007e50:	0019      	movs	r1, r3
 8007e52:	2044      	movs	r0, #68	@ 0x44
 8007e54:	f7ff ff5a 	bl	8007d0c <WriteRegister>
  MeasurementDone = false;
 8007e58:	4b05      	ldr	r3, [pc, #20]	@ (8007e70 <HIDS_StartMeasurement+0x38>)
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	701a      	strb	r2, [r3, #0]
}
 8007e5e:	46c0      	nop			@ (mov r8, r8)
 8007e60:	46bd      	mov	sp, r7
 8007e62:	bd80      	pop	{r7, pc}
 8007e64:	20000138 	.word	0x20000138
 8007e68:	20000134 	.word	0x20000134
 8007e6c:	20000132 	.word	0x20000132
 8007e70:	2000154e 	.word	0x2000154e

08007e74 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8007e74:	b580      	push	{r7, lr}
 8007e76:	b082      	sub	sp, #8
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	0002      	movs	r2, r0
 8007e7c:	1dfb      	adds	r3, r7, #7
 8007e7e:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8007e80:	4b03      	ldr	r3, [pc, #12]	@ (8007e90 <HIDS_SetHeaterMode+0x1c>)
 8007e82:	1dfa      	adds	r2, r7, #7
 8007e84:	7812      	ldrb	r2, [r2, #0]
 8007e86:	701a      	strb	r2, [r3, #0]
}
 8007e88:	46c0      	nop			@ (mov r8, r8)
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	b002      	add	sp, #8
 8007e8e:	bd80      	pop	{r7, pc}
 8007e90:	20000131 	.word	0x20000131

08007e94 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8007e94:	b590      	push	{r4, r7, lr}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	781a      	ldrb	r2, [r3, #0]
 8007ea0:	210c      	movs	r1, #12
 8007ea2:	187b      	adds	r3, r7, r1
 8007ea4:	701a      	strb	r2, [r3, #0]
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	785a      	ldrb	r2, [r3, #1]
 8007eaa:	187b      	adds	r3, r7, r1
 8007eac:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8007eae:	240f      	movs	r4, #15
 8007eb0:	193b      	adds	r3, r7, r4
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	7892      	ldrb	r2, [r2, #2]
 8007eb6:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8007eb8:	187b      	adds	r3, r7, r1
 8007eba:	2102      	movs	r1, #2
 8007ebc:	0018      	movs	r0, r3
 8007ebe:	f7ff ff43 	bl	8007d48 <CalculateCRC>
 8007ec2:	0003      	movs	r3, r0
 8007ec4:	001a      	movs	r2, r3
 8007ec6:	193b      	adds	r3, r7, r4
 8007ec8:	781b      	ldrb	r3, [r3, #0]
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d007      	beq.n	8007ede <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8007ece:	4a17      	ldr	r2, [pc, #92]	@ (8007f2c <CheckCRC+0x98>)
 8007ed0:	4b17      	ldr	r3, [pc, #92]	@ (8007f30 <CheckCRC+0x9c>)
 8007ed2:	0019      	movs	r1, r3
 8007ed4:	2001      	movs	r0, #1
 8007ed6:	f7ff fe35 	bl	8007b44 <CreateLine>
		return false;
 8007eda:	2300      	movs	r3, #0
 8007edc:	e021      	b.n	8007f22 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	78da      	ldrb	r2, [r3, #3]
 8007ee2:	2108      	movs	r1, #8
 8007ee4:	187b      	adds	r3, r7, r1
 8007ee6:	701a      	strb	r2, [r3, #0]
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	791a      	ldrb	r2, [r3, #4]
 8007eec:	187b      	adds	r3, r7, r1
 8007eee:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8007ef0:	240e      	movs	r4, #14
 8007ef2:	193b      	adds	r3, r7, r4
 8007ef4:	687a      	ldr	r2, [r7, #4]
 8007ef6:	7952      	ldrb	r2, [r2, #5]
 8007ef8:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8007efa:	187b      	adds	r3, r7, r1
 8007efc:	2102      	movs	r1, #2
 8007efe:	0018      	movs	r0, r3
 8007f00:	f7ff ff22 	bl	8007d48 <CalculateCRC>
 8007f04:	0003      	movs	r3, r0
 8007f06:	001a      	movs	r2, r3
 8007f08:	193b      	adds	r3, r7, r4
 8007f0a:	781b      	ldrb	r3, [r3, #0]
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d007      	beq.n	8007f20 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8007f10:	4a08      	ldr	r2, [pc, #32]	@ (8007f34 <CheckCRC+0xa0>)
 8007f12:	4b07      	ldr	r3, [pc, #28]	@ (8007f30 <CheckCRC+0x9c>)
 8007f14:	0019      	movs	r1, r3
 8007f16:	2001      	movs	r0, #1
 8007f18:	f7ff fe14 	bl	8007b44 <CreateLine>
		return false;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	e000      	b.n	8007f22 <CheckCRC+0x8e>
	}
	return true;
 8007f20:	2301      	movs	r3, #1
}
 8007f22:	0018      	movs	r0, r3
 8007f24:	46bd      	mov	sp, r7
 8007f26:	b005      	add	sp, #20
 8007f28:	bd90      	pop	{r4, r7, pc}
 8007f2a:	46c0      	nop			@ (mov r8, r8)
 8007f2c:	080123dc 	.word	0x080123dc
 8007f30:	08012404 	.word	0x08012404
 8007f34:	08012408 	.word	0x08012408

08007f38 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8007f3e:	1dbb      	adds	r3, r7, #6
 8007f40:	2289      	movs	r2, #137	@ 0x89
 8007f42:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8007f44:	1dbb      	adds	r3, r7, #6
 8007f46:	2201      	movs	r2, #1
 8007f48:	0019      	movs	r1, r3
 8007f4a:	2044      	movs	r0, #68	@ 0x44
 8007f4c:	f7ff fede 	bl	8007d0c <WriteRegister>
	HAL_Delay(30);
 8007f50:	201e      	movs	r0, #30
 8007f52:	f000 f9f9 	bl	8008348 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8007f56:	4b14      	ldr	r3, [pc, #80]	@ (8007fa8 <HIDS_DeviceConnected+0x70>)
 8007f58:	2206      	movs	r2, #6
 8007f5a:	0019      	movs	r1, r3
 8007f5c:	2044      	movs	r0, #68	@ 0x44
 8007f5e:	f7ff feb7 	bl	8007cd0 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8007f62:	1dfb      	adds	r3, r7, #7
 8007f64:	2200      	movs	r2, #0
 8007f66:	701a      	strb	r2, [r3, #0]
 8007f68:	e011      	b.n	8007f8e <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8007f6a:	1dfb      	adds	r3, r7, #7
 8007f6c:	7818      	ldrb	r0, [r3, #0]
 8007f6e:	1dfb      	adds	r3, r7, #7
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	4a0d      	ldr	r2, [pc, #52]	@ (8007fa8 <HIDS_DeviceConnected+0x70>)
 8007f74:	5cd3      	ldrb	r3, [r2, r3]
 8007f76:	4a0d      	ldr	r2, [pc, #52]	@ (8007fac <HIDS_DeviceConnected+0x74>)
 8007f78:	490d      	ldr	r1, [pc, #52]	@ (8007fb0 <HIDS_DeviceConnected+0x78>)
 8007f7a:	9300      	str	r3, [sp, #0]
 8007f7c:	0003      	movs	r3, r0
 8007f7e:	2002      	movs	r0, #2
 8007f80:	f7ff fde0 	bl	8007b44 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8007f84:	1dfb      	adds	r3, r7, #7
 8007f86:	781a      	ldrb	r2, [r3, #0]
 8007f88:	1dfb      	adds	r3, r7, #7
 8007f8a:	3201      	adds	r2, #1
 8007f8c:	701a      	strb	r2, [r3, #0]
 8007f8e:	1dfb      	adds	r3, r7, #7
 8007f90:	781b      	ldrb	r3, [r3, #0]
 8007f92:	2b05      	cmp	r3, #5
 8007f94:	d9e9      	bls.n	8007f6a <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8007f96:	4b04      	ldr	r3, [pc, #16]	@ (8007fa8 <HIDS_DeviceConnected+0x70>)
 8007f98:	0018      	movs	r0, r3
 8007f9a:	f7ff ff7b 	bl	8007e94 <CheckCRC>
 8007f9e:	0003      	movs	r3, r0
}
 8007fa0:	0018      	movs	r0, r3
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	b002      	add	sp, #8
 8007fa6:	bd80      	pop	{r7, pc}
 8007fa8:	20001540 	.word	0x20001540
 8007fac:	08012434 	.word	0x08012434
 8007fb0:	080123d8 	.word	0x080123d8

08007fb4 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b082      	sub	sp, #8
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	0002      	movs	r2, r0
 8007fbc:	1dfb      	adds	r3, r7, #7
 8007fbe:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8007fc0:	4b03      	ldr	r3, [pc, #12]	@ (8007fd0 <HIDS_SetMeasurementMode+0x1c>)
 8007fc2:	1dfa      	adds	r2, r7, #7
 8007fc4:	7812      	ldrb	r2, [r2, #0]
 8007fc6:	701a      	strb	r2, [r3, #0]
}
 8007fc8:	46c0      	nop			@ (mov r8, r8)
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	b002      	add	sp, #8
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	20000132 	.word	0x20000132

08007fd4 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8007fd8:	4b04      	ldr	r3, [pc, #16]	@ (8007fec <HIDS_MeasurementReady+0x18>)
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f7ff fd5b 	bl	8007a98 <TimestampIsReached>
 8007fe2:	0003      	movs	r3, r0
}
 8007fe4:	0018      	movs	r0, r3
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	46c0      	nop			@ (mov r8, r8)
 8007fec:	20000134 	.word	0x20000134

08007ff0 <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8007ff0:	b580      	push	{r7, lr}
 8007ff2:	b08c      	sub	sp, #48	@ 0x30
 8007ff4:	af02      	add	r7, sp, #8
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8007ffa:	4b7a      	ldr	r3, [pc, #488]	@ (80081e4 <HIDS_GetMeasurementValues+0x1f4>)
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d001      	beq.n	8008006 <HIDS_GetMeasurementValues+0x16>
 8008002:	2301      	movs	r3, #1
 8008004:	e0ea      	b.n	80081dc <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8008006:	f7ff ffe5 	bl	8007fd4 <HIDS_MeasurementReady>
 800800a:	0003      	movs	r3, r0
 800800c:	001a      	movs	r2, r3
 800800e:	2301      	movs	r3, #1
 8008010:	4053      	eors	r3, r2
 8008012:	b2db      	uxtb	r3, r3
 8008014:	2b00      	cmp	r3, #0
 8008016:	d001      	beq.n	800801c <HIDS_GetMeasurementValues+0x2c>
 8008018:	2300      	movs	r3, #0
 800801a:	e0df      	b.n	80081dc <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 800801c:	4b72      	ldr	r3, [pc, #456]	@ (80081e8 <HIDS_GetMeasurementValues+0x1f8>)
 800801e:	681a      	ldr	r2, [r3, #0]
 8008020:	4b72      	ldr	r3, [pc, #456]	@ (80081ec <HIDS_GetMeasurementValues+0x1fc>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	0019      	movs	r1, r3
 8008026:	0010      	movs	r0, r2
 8008028:	f7f8 f88a 	bl	8000140 <__udivsi3>
 800802c:	0003      	movs	r3, r0
 800802e:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008030:	4b6f      	ldr	r3, [pc, #444]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	1c58      	adds	r0, r3, #1
 8008036:	4a6f      	ldr	r2, [pc, #444]	@ (80081f4 <HIDS_GetMeasurementValues+0x204>)
 8008038:	496f      	ldr	r1, [pc, #444]	@ (80081f8 <HIDS_GetMeasurementValues+0x208>)
 800803a:	697b      	ldr	r3, [r7, #20]
 800803c:	9300      	str	r3, [sp, #0]
 800803e:	0003      	movs	r3, r0
 8008040:	2003      	movs	r0, #3
 8008042:	f7ff fd7f 	bl	8007b44 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8008046:	4b6d      	ldr	r3, [pc, #436]	@ (80081fc <HIDS_GetMeasurementValues+0x20c>)
 8008048:	2206      	movs	r2, #6
 800804a:	0019      	movs	r1, r3
 800804c:	2044      	movs	r0, #68	@ 0x44
 800804e:	f7ff fe3f 	bl	8007cd0 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008052:	4b6a      	ldr	r3, [pc, #424]	@ (80081fc <HIDS_GetMeasurementValues+0x20c>)
 8008054:	0018      	movs	r0, r3
 8008056:	f7ff ff1d 	bl	8007e94 <CheckCRC>
 800805a:	0003      	movs	r3, r0
 800805c:	001a      	movs	r2, r3
 800805e:	2301      	movs	r3, #1
 8008060:	4053      	eors	r3, r2
 8008062:	b2db      	uxtb	r3, r3
 8008064:	2b00      	cmp	r3, #0
 8008066:	d011      	beq.n	800808c <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8008068:	2327      	movs	r3, #39	@ 0x27
 800806a:	18fb      	adds	r3, r7, r3
 800806c:	2200      	movs	r2, #0
 800806e:	701a      	strb	r2, [r3, #0]
 8008070:	e005      	b.n	800807e <HIDS_GetMeasurementValues+0x8e>
 8008072:	2127      	movs	r1, #39	@ 0x27
 8008074:	187b      	adds	r3, r7, r1
 8008076:	781a      	ldrb	r2, [r3, #0]
 8008078:	187b      	adds	r3, r7, r1
 800807a:	3201      	adds	r2, #1
 800807c:	701a      	strb	r2, [r3, #0]
 800807e:	2327      	movs	r3, #39	@ 0x27
 8008080:	18fb      	adds	r3, r7, r3
 8008082:	781b      	ldrb	r3, [r3, #0]
 8008084:	2b05      	cmp	r3, #5
 8008086:	d9f4      	bls.n	8008072 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8008088:	2300      	movs	r3, #0
 800808a:	e0a7      	b.n	80081dc <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 800808c:	4b5b      	ldr	r3, [pc, #364]	@ (80081fc <HIDS_GetMeasurementValues+0x20c>)
 800808e:	781b      	ldrb	r3, [r3, #0]
 8008090:	021b      	lsls	r3, r3, #8
 8008092:	22af      	movs	r2, #175	@ 0xaf
 8008094:	4353      	muls	r3, r2
 8008096:	4a59      	ldr	r2, [pc, #356]	@ (80081fc <HIDS_GetMeasurementValues+0x20c>)
 8008098:	7852      	ldrb	r2, [r2, #1]
 800809a:	4313      	orrs	r3, r2
 800809c:	0018      	movs	r0, r3
 800809e:	f7fb f90d 	bl	80032bc <__aeabi_i2d>
 80080a2:	2200      	movs	r2, #0
 80080a4:	4b56      	ldr	r3, [pc, #344]	@ (8008200 <HIDS_GetMeasurementValues+0x210>)
 80080a6:	f7f9 fe03 	bl	8001cb0 <__aeabi_ddiv>
 80080aa:	0002      	movs	r2, r0
 80080ac:	000b      	movs	r3, r1
 80080ae:	0010      	movs	r0, r2
 80080b0:	0019      	movs	r1, r3
 80080b2:	f7fb f99d 	bl	80033f0 <__aeabi_d2f>
 80080b6:	1c03      	adds	r3, r0, #0
 80080b8:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 80080ba:	4952      	ldr	r1, [pc, #328]	@ (8008204 <HIDS_GetMeasurementValues+0x214>)
 80080bc:	6938      	ldr	r0, [r7, #16]
 80080be:	f7f9 f82b 	bl	8001118 <__aeabi_fsub>
 80080c2:	1c03      	adds	r3, r0, #0
 80080c4:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80080c6:	4b4d      	ldr	r3, [pc, #308]	@ (80081fc <HIDS_GetMeasurementValues+0x20c>)
 80080c8:	78db      	ldrb	r3, [r3, #3]
 80080ca:	021b      	lsls	r3, r3, #8
 80080cc:	4a4b      	ldr	r2, [pc, #300]	@ (80081fc <HIDS_GetMeasurementValues+0x20c>)
 80080ce:	7912      	ldrb	r2, [r2, #4]
 80080d0:	431a      	orrs	r2, r3
 80080d2:	0013      	movs	r3, r2
 80080d4:	015b      	lsls	r3, r3, #5
 80080d6:	1a9b      	subs	r3, r3, r2
 80080d8:	009b      	lsls	r3, r3, #2
 80080da:	189b      	adds	r3, r3, r2
 80080dc:	0018      	movs	r0, r3
 80080de:	f7fb f8ed 	bl	80032bc <__aeabi_i2d>
 80080e2:	2200      	movs	r2, #0
 80080e4:	4b46      	ldr	r3, [pc, #280]	@ (8008200 <HIDS_GetMeasurementValues+0x210>)
 80080e6:	f7f9 fde3 	bl	8001cb0 <__aeabi_ddiv>
 80080ea:	0002      	movs	r2, r0
 80080ec:	000b      	movs	r3, r1
 80080ee:	0010      	movs	r0, r2
 80080f0:	0019      	movs	r1, r3
 80080f2:	f7fb f97d 	bl	80033f0 <__aeabi_d2f>
 80080f6:	1c03      	adds	r3, r0, #0
 80080f8:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 80080fa:	4943      	ldr	r1, [pc, #268]	@ (8008208 <HIDS_GetMeasurementValues+0x218>)
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f7f9 f80b 	bl	8001118 <__aeabi_fsub>
 8008102:	1c03      	adds	r3, r0, #0
 8008104:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8008106:	4b3a      	ldr	r3, [pc, #232]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	697a      	ldr	r2, [r7, #20]
 800810c:	429a      	cmp	r2, r3
 800810e:	d910      	bls.n	8008132 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 8008110:	4b37      	ldr	r3, [pc, #220]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 8008112:	681a      	ldr	r2, [r3, #0]
 8008114:	4b3d      	ldr	r3, [pc, #244]	@ (800820c <HIDS_GetMeasurementValues+0x21c>)
 8008116:	0092      	lsls	r2, r2, #2
 8008118:	6939      	ldr	r1, [r7, #16]
 800811a:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 800811c:	4b34      	ldr	r3, [pc, #208]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	4b3b      	ldr	r3, [pc, #236]	@ (8008210 <HIDS_GetMeasurementValues+0x220>)
 8008122:	0092      	lsls	r2, r2, #2
 8008124:	68f9      	ldr	r1, [r7, #12]
 8008126:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8008128:	4b31      	ldr	r3, [pc, #196]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 800812a:	681b      	ldr	r3, [r3, #0]
 800812c:	1c5a      	adds	r2, r3, #1
 800812e:	4b30      	ldr	r3, [pc, #192]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 8008130:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8008132:	4b2f      	ldr	r3, [pc, #188]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	697a      	ldr	r2, [r7, #20]
 8008138:	429a      	cmp	r2, r3
 800813a:	d84c      	bhi.n	80081d6 <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 800813c:	2300      	movs	r3, #0
 800813e:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8008140:	2300      	movs	r3, #0
 8008142:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008144:	2300      	movs	r3, #0
 8008146:	61bb      	str	r3, [r7, #24]
 8008148:	e016      	b.n	8008178 <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 800814a:	4b30      	ldr	r3, [pc, #192]	@ (800820c <HIDS_GetMeasurementValues+0x21c>)
 800814c:	69ba      	ldr	r2, [r7, #24]
 800814e:	0092      	lsls	r2, r2, #2
 8008150:	58d3      	ldr	r3, [r2, r3]
 8008152:	1c19      	adds	r1, r3, #0
 8008154:	6a38      	ldr	r0, [r7, #32]
 8008156:	f7f8 fb31 	bl	80007bc <__aeabi_fadd>
 800815a:	1c03      	adds	r3, r0, #0
 800815c:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 800815e:	4b2c      	ldr	r3, [pc, #176]	@ (8008210 <HIDS_GetMeasurementValues+0x220>)
 8008160:	69ba      	ldr	r2, [r7, #24]
 8008162:	0092      	lsls	r2, r2, #2
 8008164:	58d3      	ldr	r3, [r2, r3]
 8008166:	1c19      	adds	r1, r3, #0
 8008168:	69f8      	ldr	r0, [r7, #28]
 800816a:	f7f8 fb27 	bl	80007bc <__aeabi_fadd>
 800816e:	1c03      	adds	r3, r0, #0
 8008170:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008172:	69bb      	ldr	r3, [r7, #24]
 8008174:	3301      	adds	r3, #1
 8008176:	61bb      	str	r3, [r7, #24]
 8008178:	4b1d      	ldr	r3, [pc, #116]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	69ba      	ldr	r2, [r7, #24]
 800817e:	429a      	cmp	r2, r3
 8008180:	d3e3      	bcc.n	800814a <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8008182:	4b1b      	ldr	r3, [pc, #108]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	0018      	movs	r0, r3
 8008188:	f7f9 f9ec 	bl	8001564 <__aeabi_ui2f>
 800818c:	1c03      	adds	r3, r0, #0
 800818e:	1c19      	adds	r1, r3, #0
 8008190:	6a38      	ldr	r0, [r7, #32]
 8008192:	f7f8 fc9d 	bl	8000ad0 <__aeabi_fdiv>
 8008196:	1c03      	adds	r3, r0, #0
 8008198:	1c1a      	adds	r2, r3, #0
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 800819e:	4b14      	ldr	r3, [pc, #80]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	0018      	movs	r0, r3
 80081a4:	f7f9 f9de 	bl	8001564 <__aeabi_ui2f>
 80081a8:	1c03      	adds	r3, r0, #0
 80081aa:	1c19      	adds	r1, r3, #0
 80081ac:	69f8      	ldr	r0, [r7, #28]
 80081ae:	f7f8 fc8f 	bl	8000ad0 <__aeabi_fdiv>
 80081b2:	1c03      	adds	r3, r0, #0
 80081b4:	1c1a      	adds	r2, r3, #0
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 80081ba:	687a      	ldr	r2, [r7, #4]
 80081bc:	683b      	ldr	r3, [r7, #0]
 80081be:	0011      	movs	r1, r2
 80081c0:	0018      	movs	r0, r3
 80081c2:	f7fe ffa3 	bl	800710c <SGP_GetHT>

    measurements = 0;
 80081c6:	4b0a      	ldr	r3, [pc, #40]	@ (80081f0 <HIDS_GetMeasurementValues+0x200>)
 80081c8:	2200      	movs	r2, #0
 80081ca:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 80081cc:	4b05      	ldr	r3, [pc, #20]	@ (80081e4 <HIDS_GetMeasurementValues+0x1f4>)
 80081ce:	2201      	movs	r2, #1
 80081d0:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 80081d2:	2301      	movs	r3, #1
 80081d4:	e002      	b.n	80081dc <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 80081d6:	f7ff fe2f 	bl	8007e38 <HIDS_StartMeasurement>
	return false;
 80081da:	2300      	movs	r3, #0
}
 80081dc:	0018      	movs	r0, r3
 80081de:	46bd      	mov	sp, r7
 80081e0:	b00a      	add	sp, #40	@ 0x28
 80081e2:	bd80      	pop	{r7, pc}
 80081e4:	2000154e 	.word	0x2000154e
 80081e8:	2000013c 	.word	0x2000013c
 80081ec:	20000138 	.word	0x20000138
 80081f0:	20001550 	.word	0x20001550
 80081f4:	08012454 	.word	0x08012454
 80081f8:	08012480 	.word	0x08012480
 80081fc:	20001548 	.word	0x20001548
 8008200:	40efffe0 	.word	0x40efffe0
 8008204:	42340000 	.word	0x42340000
 8008208:	40c00000 	.word	0x40c00000
 800820c:	20001554 	.word	0x20001554
 8008210:	20001954 	.word	0x20001954

08008214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008214:	480d      	ldr	r0, [pc, #52]	@ (800824c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008216:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008218:	f7ff f91a 	bl	8007450 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800821c:	480c      	ldr	r0, [pc, #48]	@ (8008250 <LoopForever+0x6>)
  ldr r1, =_edata
 800821e:	490d      	ldr	r1, [pc, #52]	@ (8008254 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008220:	4a0d      	ldr	r2, [pc, #52]	@ (8008258 <LoopForever+0xe>)
  movs r3, #0
 8008222:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008224:	e002      	b.n	800822c <LoopCopyDataInit>

08008226 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008226:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008228:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800822a:	3304      	adds	r3, #4

0800822c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800822c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800822e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008230:	d3f9      	bcc.n	8008226 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008232:	4a0a      	ldr	r2, [pc, #40]	@ (800825c <LoopForever+0x12>)
  ldr r4, =_ebss
 8008234:	4c0a      	ldr	r4, [pc, #40]	@ (8008260 <LoopForever+0x16>)
  movs r3, #0
 8008236:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008238:	e001      	b.n	800823e <LoopFillZerobss>

0800823a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800823a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800823c:	3204      	adds	r2, #4

0800823e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800823e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008240:	d3fb      	bcc.n	800823a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008242:	f007 f965 	bl	800f510 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008246:	f7fc ff01 	bl	800504c <main>

0800824a <LoopForever>:

LoopForever:
    b LoopForever
 800824a:	e7fe      	b.n	800824a <LoopForever>
   ldr   r0, =_estack
 800824c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8008250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008254:	20000318 	.word	0x20000318
  ldr r2, =_sidata
 8008258:	080129c0 	.word	0x080129c0
  ldr r2, =_sbss
 800825c:	20000318 	.word	0x20000318
  ldr r4, =_ebss
 8008260:	20001ea4 	.word	0x20001ea4

08008264 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008264:	e7fe      	b.n	8008264 <ADC1_COMP_IRQHandler>
	...

08008268 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b082      	sub	sp, #8
 800826c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800826e:	1dfb      	adds	r3, r7, #7
 8008270:	2200      	movs	r2, #0
 8008272:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8008274:	4b0b      	ldr	r3, [pc, #44]	@ (80082a4 <HAL_Init+0x3c>)
 8008276:	681a      	ldr	r2, [r3, #0]
 8008278:	4b0a      	ldr	r3, [pc, #40]	@ (80082a4 <HAL_Init+0x3c>)
 800827a:	2140      	movs	r1, #64	@ 0x40
 800827c:	430a      	orrs	r2, r1
 800827e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008280:	2003      	movs	r0, #3
 8008282:	f000 f811 	bl	80082a8 <HAL_InitTick>
 8008286:	1e03      	subs	r3, r0, #0
 8008288:	d003      	beq.n	8008292 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800828a:	1dfb      	adds	r3, r7, #7
 800828c:	2201      	movs	r2, #1
 800828e:	701a      	strb	r2, [r3, #0]
 8008290:	e001      	b.n	8008296 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008292:	f7fe ffbf 	bl	8007214 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008296:	1dfb      	adds	r3, r7, #7
 8008298:	781b      	ldrb	r3, [r3, #0]
}
 800829a:	0018      	movs	r0, r3
 800829c:	46bd      	mov	sp, r7
 800829e:	b002      	add	sp, #8
 80082a0:	bd80      	pop	{r7, pc}
 80082a2:	46c0      	nop			@ (mov r8, r8)
 80082a4:	40022000 	.word	0x40022000

080082a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80082a8:	b590      	push	{r4, r7, lr}
 80082aa:	b083      	sub	sp, #12
 80082ac:	af00      	add	r7, sp, #0
 80082ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80082b0:	4b14      	ldr	r3, [pc, #80]	@ (8008304 <HAL_InitTick+0x5c>)
 80082b2:	681c      	ldr	r4, [r3, #0]
 80082b4:	4b14      	ldr	r3, [pc, #80]	@ (8008308 <HAL_InitTick+0x60>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	0019      	movs	r1, r3
 80082ba:	23fa      	movs	r3, #250	@ 0xfa
 80082bc:	0098      	lsls	r0, r3, #2
 80082be:	f7f7 ff3f 	bl	8000140 <__udivsi3>
 80082c2:	0003      	movs	r3, r0
 80082c4:	0019      	movs	r1, r3
 80082c6:	0020      	movs	r0, r4
 80082c8:	f7f7 ff3a 	bl	8000140 <__udivsi3>
 80082cc:	0003      	movs	r3, r0
 80082ce:	0018      	movs	r0, r3
 80082d0:	f000 f92f 	bl	8008532 <HAL_SYSTICK_Config>
 80082d4:	1e03      	subs	r3, r0, #0
 80082d6:	d001      	beq.n	80082dc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80082d8:	2301      	movs	r3, #1
 80082da:	e00f      	b.n	80082fc <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2b03      	cmp	r3, #3
 80082e0:	d80b      	bhi.n	80082fa <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80082e2:	6879      	ldr	r1, [r7, #4]
 80082e4:	2301      	movs	r3, #1
 80082e6:	425b      	negs	r3, r3
 80082e8:	2200      	movs	r2, #0
 80082ea:	0018      	movs	r0, r3
 80082ec:	f000 f8fc 	bl	80084e8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80082f0:	4b06      	ldr	r3, [pc, #24]	@ (800830c <HAL_InitTick+0x64>)
 80082f2:	687a      	ldr	r2, [r7, #4]
 80082f4:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e000      	b.n	80082fc <HAL_InitTick+0x54>
    return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
}
 80082fc:	0018      	movs	r0, r3
 80082fe:	46bd      	mov	sp, r7
 8008300:	b003      	add	sp, #12
 8008302:	bd90      	pop	{r4, r7, pc}
 8008304:	2000012c 	.word	0x2000012c
 8008308:	20000144 	.word	0x20000144
 800830c:	20000140 	.word	0x20000140

08008310 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008314:	4b05      	ldr	r3, [pc, #20]	@ (800832c <HAL_IncTick+0x1c>)
 8008316:	781b      	ldrb	r3, [r3, #0]
 8008318:	001a      	movs	r2, r3
 800831a:	4b05      	ldr	r3, [pc, #20]	@ (8008330 <HAL_IncTick+0x20>)
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	18d2      	adds	r2, r2, r3
 8008320:	4b03      	ldr	r3, [pc, #12]	@ (8008330 <HAL_IncTick+0x20>)
 8008322:	601a      	str	r2, [r3, #0]
}
 8008324:	46c0      	nop			@ (mov r8, r8)
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	46c0      	nop			@ (mov r8, r8)
 800832c:	20000144 	.word	0x20000144
 8008330:	20001d54 	.word	0x20001d54

08008334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008334:	b580      	push	{r7, lr}
 8008336:	af00      	add	r7, sp, #0
  return uwTick;
 8008338:	4b02      	ldr	r3, [pc, #8]	@ (8008344 <HAL_GetTick+0x10>)
 800833a:	681b      	ldr	r3, [r3, #0]
}
 800833c:	0018      	movs	r0, r3
 800833e:	46bd      	mov	sp, r7
 8008340:	bd80      	pop	{r7, pc}
 8008342:	46c0      	nop			@ (mov r8, r8)
 8008344:	20001d54 	.word	0x20001d54

08008348 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008348:	b580      	push	{r7, lr}
 800834a:	b084      	sub	sp, #16
 800834c:	af00      	add	r7, sp, #0
 800834e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008350:	f7ff fff0 	bl	8008334 <HAL_GetTick>
 8008354:	0003      	movs	r3, r0
 8008356:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	3301      	adds	r3, #1
 8008360:	d005      	beq.n	800836e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008362:	4b0a      	ldr	r3, [pc, #40]	@ (800838c <HAL_Delay+0x44>)
 8008364:	781b      	ldrb	r3, [r3, #0]
 8008366:	001a      	movs	r2, r3
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	189b      	adds	r3, r3, r2
 800836c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800836e:	46c0      	nop			@ (mov r8, r8)
 8008370:	f7ff ffe0 	bl	8008334 <HAL_GetTick>
 8008374:	0002      	movs	r2, r0
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	1ad3      	subs	r3, r2, r3
 800837a:	68fa      	ldr	r2, [r7, #12]
 800837c:	429a      	cmp	r2, r3
 800837e:	d8f7      	bhi.n	8008370 <HAL_Delay+0x28>
  {
  }
}
 8008380:	46c0      	nop			@ (mov r8, r8)
 8008382:	46c0      	nop			@ (mov r8, r8)
 8008384:	46bd      	mov	sp, r7
 8008386:	b004      	add	sp, #16
 8008388:	bd80      	pop	{r7, pc}
 800838a:	46c0      	nop			@ (mov r8, r8)
 800838c:	20000144 	.word	0x20000144

08008390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008390:	b580      	push	{r7, lr}
 8008392:	b082      	sub	sp, #8
 8008394:	af00      	add	r7, sp, #0
 8008396:	0002      	movs	r2, r0
 8008398:	1dfb      	adds	r3, r7, #7
 800839a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800839c:	1dfb      	adds	r3, r7, #7
 800839e:	781b      	ldrb	r3, [r3, #0]
 80083a0:	2b7f      	cmp	r3, #127	@ 0x7f
 80083a2:	d809      	bhi.n	80083b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80083a4:	1dfb      	adds	r3, r7, #7
 80083a6:	781b      	ldrb	r3, [r3, #0]
 80083a8:	001a      	movs	r2, r3
 80083aa:	231f      	movs	r3, #31
 80083ac:	401a      	ands	r2, r3
 80083ae:	4b04      	ldr	r3, [pc, #16]	@ (80083c0 <__NVIC_EnableIRQ+0x30>)
 80083b0:	2101      	movs	r1, #1
 80083b2:	4091      	lsls	r1, r2
 80083b4:	000a      	movs	r2, r1
 80083b6:	601a      	str	r2, [r3, #0]
  }
}
 80083b8:	46c0      	nop			@ (mov r8, r8)
 80083ba:	46bd      	mov	sp, r7
 80083bc:	b002      	add	sp, #8
 80083be:	bd80      	pop	{r7, pc}
 80083c0:	e000e100 	.word	0xe000e100

080083c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80083c4:	b590      	push	{r4, r7, lr}
 80083c6:	b083      	sub	sp, #12
 80083c8:	af00      	add	r7, sp, #0
 80083ca:	0002      	movs	r2, r0
 80083cc:	6039      	str	r1, [r7, #0]
 80083ce:	1dfb      	adds	r3, r7, #7
 80083d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80083d2:	1dfb      	adds	r3, r7, #7
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	2b7f      	cmp	r3, #127	@ 0x7f
 80083d8:	d828      	bhi.n	800842c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80083da:	4a2f      	ldr	r2, [pc, #188]	@ (8008498 <__NVIC_SetPriority+0xd4>)
 80083dc:	1dfb      	adds	r3, r7, #7
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	089b      	lsrs	r3, r3, #2
 80083e4:	33c0      	adds	r3, #192	@ 0xc0
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	589b      	ldr	r3, [r3, r2]
 80083ea:	1dfa      	adds	r2, r7, #7
 80083ec:	7812      	ldrb	r2, [r2, #0]
 80083ee:	0011      	movs	r1, r2
 80083f0:	2203      	movs	r2, #3
 80083f2:	400a      	ands	r2, r1
 80083f4:	00d2      	lsls	r2, r2, #3
 80083f6:	21ff      	movs	r1, #255	@ 0xff
 80083f8:	4091      	lsls	r1, r2
 80083fa:	000a      	movs	r2, r1
 80083fc:	43d2      	mvns	r2, r2
 80083fe:	401a      	ands	r2, r3
 8008400:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8008402:	683b      	ldr	r3, [r7, #0]
 8008404:	019b      	lsls	r3, r3, #6
 8008406:	22ff      	movs	r2, #255	@ 0xff
 8008408:	401a      	ands	r2, r3
 800840a:	1dfb      	adds	r3, r7, #7
 800840c:	781b      	ldrb	r3, [r3, #0]
 800840e:	0018      	movs	r0, r3
 8008410:	2303      	movs	r3, #3
 8008412:	4003      	ands	r3, r0
 8008414:	00db      	lsls	r3, r3, #3
 8008416:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008418:	481f      	ldr	r0, [pc, #124]	@ (8008498 <__NVIC_SetPriority+0xd4>)
 800841a:	1dfb      	adds	r3, r7, #7
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	b25b      	sxtb	r3, r3
 8008420:	089b      	lsrs	r3, r3, #2
 8008422:	430a      	orrs	r2, r1
 8008424:	33c0      	adds	r3, #192	@ 0xc0
 8008426:	009b      	lsls	r3, r3, #2
 8008428:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800842a:	e031      	b.n	8008490 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800842c:	4a1b      	ldr	r2, [pc, #108]	@ (800849c <__NVIC_SetPriority+0xd8>)
 800842e:	1dfb      	adds	r3, r7, #7
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	0019      	movs	r1, r3
 8008434:	230f      	movs	r3, #15
 8008436:	400b      	ands	r3, r1
 8008438:	3b08      	subs	r3, #8
 800843a:	089b      	lsrs	r3, r3, #2
 800843c:	3306      	adds	r3, #6
 800843e:	009b      	lsls	r3, r3, #2
 8008440:	18d3      	adds	r3, r2, r3
 8008442:	3304      	adds	r3, #4
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	1dfa      	adds	r2, r7, #7
 8008448:	7812      	ldrb	r2, [r2, #0]
 800844a:	0011      	movs	r1, r2
 800844c:	2203      	movs	r2, #3
 800844e:	400a      	ands	r2, r1
 8008450:	00d2      	lsls	r2, r2, #3
 8008452:	21ff      	movs	r1, #255	@ 0xff
 8008454:	4091      	lsls	r1, r2
 8008456:	000a      	movs	r2, r1
 8008458:	43d2      	mvns	r2, r2
 800845a:	401a      	ands	r2, r3
 800845c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	019b      	lsls	r3, r3, #6
 8008462:	22ff      	movs	r2, #255	@ 0xff
 8008464:	401a      	ands	r2, r3
 8008466:	1dfb      	adds	r3, r7, #7
 8008468:	781b      	ldrb	r3, [r3, #0]
 800846a:	0018      	movs	r0, r3
 800846c:	2303      	movs	r3, #3
 800846e:	4003      	ands	r3, r0
 8008470:	00db      	lsls	r3, r3, #3
 8008472:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8008474:	4809      	ldr	r0, [pc, #36]	@ (800849c <__NVIC_SetPriority+0xd8>)
 8008476:	1dfb      	adds	r3, r7, #7
 8008478:	781b      	ldrb	r3, [r3, #0]
 800847a:	001c      	movs	r4, r3
 800847c:	230f      	movs	r3, #15
 800847e:	4023      	ands	r3, r4
 8008480:	3b08      	subs	r3, #8
 8008482:	089b      	lsrs	r3, r3, #2
 8008484:	430a      	orrs	r2, r1
 8008486:	3306      	adds	r3, #6
 8008488:	009b      	lsls	r3, r3, #2
 800848a:	18c3      	adds	r3, r0, r3
 800848c:	3304      	adds	r3, #4
 800848e:	601a      	str	r2, [r3, #0]
}
 8008490:	46c0      	nop			@ (mov r8, r8)
 8008492:	46bd      	mov	sp, r7
 8008494:	b003      	add	sp, #12
 8008496:	bd90      	pop	{r4, r7, pc}
 8008498:	e000e100 	.word	0xe000e100
 800849c:	e000ed00 	.word	0xe000ed00

080084a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80084a0:	b580      	push	{r7, lr}
 80084a2:	b082      	sub	sp, #8
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	1e5a      	subs	r2, r3, #1
 80084ac:	2380      	movs	r3, #128	@ 0x80
 80084ae:	045b      	lsls	r3, r3, #17
 80084b0:	429a      	cmp	r2, r3
 80084b2:	d301      	bcc.n	80084b8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80084b4:	2301      	movs	r3, #1
 80084b6:	e010      	b.n	80084da <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80084b8:	4b0a      	ldr	r3, [pc, #40]	@ (80084e4 <SysTick_Config+0x44>)
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	3a01      	subs	r2, #1
 80084be:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80084c0:	2301      	movs	r3, #1
 80084c2:	425b      	negs	r3, r3
 80084c4:	2103      	movs	r1, #3
 80084c6:	0018      	movs	r0, r3
 80084c8:	f7ff ff7c 	bl	80083c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80084cc:	4b05      	ldr	r3, [pc, #20]	@ (80084e4 <SysTick_Config+0x44>)
 80084ce:	2200      	movs	r2, #0
 80084d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80084d2:	4b04      	ldr	r3, [pc, #16]	@ (80084e4 <SysTick_Config+0x44>)
 80084d4:	2207      	movs	r2, #7
 80084d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80084d8:	2300      	movs	r3, #0
}
 80084da:	0018      	movs	r0, r3
 80084dc:	46bd      	mov	sp, r7
 80084de:	b002      	add	sp, #8
 80084e0:	bd80      	pop	{r7, pc}
 80084e2:	46c0      	nop			@ (mov r8, r8)
 80084e4:	e000e010 	.word	0xe000e010

080084e8 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b084      	sub	sp, #16
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60b9      	str	r1, [r7, #8]
 80084f0:	607a      	str	r2, [r7, #4]
 80084f2:	210f      	movs	r1, #15
 80084f4:	187b      	adds	r3, r7, r1
 80084f6:	1c02      	adds	r2, r0, #0
 80084f8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80084fa:	68ba      	ldr	r2, [r7, #8]
 80084fc:	187b      	adds	r3, r7, r1
 80084fe:	781b      	ldrb	r3, [r3, #0]
 8008500:	b25b      	sxtb	r3, r3
 8008502:	0011      	movs	r1, r2
 8008504:	0018      	movs	r0, r3
 8008506:	f7ff ff5d 	bl	80083c4 <__NVIC_SetPriority>
}
 800850a:	46c0      	nop			@ (mov r8, r8)
 800850c:	46bd      	mov	sp, r7
 800850e:	b004      	add	sp, #16
 8008510:	bd80      	pop	{r7, pc}

08008512 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8008512:	b580      	push	{r7, lr}
 8008514:	b082      	sub	sp, #8
 8008516:	af00      	add	r7, sp, #0
 8008518:	0002      	movs	r2, r0
 800851a:	1dfb      	adds	r3, r7, #7
 800851c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800851e:	1dfb      	adds	r3, r7, #7
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	b25b      	sxtb	r3, r3
 8008524:	0018      	movs	r0, r3
 8008526:	f7ff ff33 	bl	8008390 <__NVIC_EnableIRQ>
}
 800852a:	46c0      	nop			@ (mov r8, r8)
 800852c:	46bd      	mov	sp, r7
 800852e:	b002      	add	sp, #8
 8008530:	bd80      	pop	{r7, pc}

08008532 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	0018      	movs	r0, r3
 800853e:	f7ff ffaf 	bl	80084a0 <SysTick_Config>
 8008542:	0003      	movs	r3, r0
}
 8008544:	0018      	movs	r0, r3
 8008546:	46bd      	mov	sp, r7
 8008548:	b002      	add	sp, #8
 800854a:	bd80      	pop	{r7, pc}

0800854c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800854c:	b580      	push	{r7, lr}
 800854e:	b084      	sub	sp, #16
 8008550:	af00      	add	r7, sp, #0
 8008552:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2b00      	cmp	r3, #0
 8008558:	d101      	bne.n	800855e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800855a:	2301      	movs	r3, #1
 800855c:	e061      	b.n	8008622 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	4a32      	ldr	r2, [pc, #200]	@ (800862c <HAL_DMA_Init+0xe0>)
 8008564:	4694      	mov	ip, r2
 8008566:	4463      	add	r3, ip
 8008568:	2114      	movs	r1, #20
 800856a:	0018      	movs	r0, r3
 800856c:	f7f7 fde8 	bl	8000140 <__udivsi3>
 8008570:	0003      	movs	r3, r0
 8008572:	009a      	lsls	r2, r3, #2
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a2d      	ldr	r2, [pc, #180]	@ (8008630 <HAL_DMA_Init+0xe4>)
 800857c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	2225      	movs	r2, #37	@ 0x25
 8008582:	2102      	movs	r1, #2
 8008584:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	4a28      	ldr	r2, [pc, #160]	@ (8008634 <HAL_DMA_Init+0xe8>)
 8008592:	4013      	ands	r3, r2
 8008594:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800859e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	691b      	ldr	r3, [r3, #16]
 80085a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80085aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	699b      	ldr	r3, [r3, #24]
 80085b0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80085b6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6a1b      	ldr	r3, [r3, #32]
 80085bc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80085be:	68fa      	ldr	r2, [r7, #12]
 80085c0:	4313      	orrs	r3, r2
 80085c2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	689a      	ldr	r2, [r3, #8]
 80085d0:	2380      	movs	r3, #128	@ 0x80
 80085d2:	01db      	lsls	r3, r3, #7
 80085d4:	429a      	cmp	r2, r3
 80085d6:	d018      	beq.n	800860a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 80085d8:	4b17      	ldr	r3, [pc, #92]	@ (8008638 <HAL_DMA_Init+0xec>)
 80085da:	681a      	ldr	r2, [r3, #0]
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085e0:	211c      	movs	r1, #28
 80085e2:	400b      	ands	r3, r1
 80085e4:	210f      	movs	r1, #15
 80085e6:	4099      	lsls	r1, r3
 80085e8:	000b      	movs	r3, r1
 80085ea:	43d9      	mvns	r1, r3
 80085ec:	4b12      	ldr	r3, [pc, #72]	@ (8008638 <HAL_DMA_Init+0xec>)
 80085ee:	400a      	ands	r2, r1
 80085f0:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80085f2:	4b11      	ldr	r3, [pc, #68]	@ (8008638 <HAL_DMA_Init+0xec>)
 80085f4:	6819      	ldr	r1, [r3, #0]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	685a      	ldr	r2, [r3, #4]
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085fe:	201c      	movs	r0, #28
 8008600:	4003      	ands	r3, r0
 8008602:	409a      	lsls	r2, r3
 8008604:	4b0c      	ldr	r3, [pc, #48]	@ (8008638 <HAL_DMA_Init+0xec>)
 8008606:	430a      	orrs	r2, r1
 8008608:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2200      	movs	r2, #0
 800860e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	2225      	movs	r2, #37	@ 0x25
 8008614:	2101      	movs	r1, #1
 8008616:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2224      	movs	r2, #36	@ 0x24
 800861c:	2100      	movs	r1, #0
 800861e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008620:	2300      	movs	r3, #0
}
 8008622:	0018      	movs	r0, r3
 8008624:	46bd      	mov	sp, r7
 8008626:	b004      	add	sp, #16
 8008628:	bd80      	pop	{r7, pc}
 800862a:	46c0      	nop			@ (mov r8, r8)
 800862c:	bffdfff8 	.word	0xbffdfff8
 8008630:	40020000 	.word	0x40020000
 8008634:	ffff800f 	.word	0xffff800f
 8008638:	400200a8 	.word	0x400200a8

0800863c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800863c:	b580      	push	{r7, lr}
 800863e:	b082      	sub	sp, #8
 8008640:	af00      	add	r7, sp, #0
 8008642:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2b00      	cmp	r3, #0
 8008648:	d101      	bne.n	800864e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	e04a      	b.n	80086e4 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	681a      	ldr	r2, [r3, #0]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	2101      	movs	r1, #1
 800865a:	438a      	bics	r2, r1
 800865c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	4a22      	ldr	r2, [pc, #136]	@ (80086ec <HAL_DMA_DeInit+0xb0>)
 8008664:	4694      	mov	ip, r2
 8008666:	4463      	add	r3, ip
 8008668:	2114      	movs	r1, #20
 800866a:	0018      	movs	r0, r3
 800866c:	f7f7 fd68 	bl	8000140 <__udivsi3>
 8008670:	0003      	movs	r3, r0
 8008672:	009a      	lsls	r2, r3, #2
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	4a1d      	ldr	r2, [pc, #116]	@ (80086f0 <HAL_DMA_DeInit+0xb4>)
 800867c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2200      	movs	r2, #0
 8008684:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800868a:	221c      	movs	r2, #28
 800868c:	401a      	ands	r2, r3
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008692:	2101      	movs	r1, #1
 8008694:	4091      	lsls	r1, r2
 8008696:	000a      	movs	r2, r1
 8008698:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800869a:	4b16      	ldr	r3, [pc, #88]	@ (80086f4 <HAL_DMA_DeInit+0xb8>)
 800869c:	681a      	ldr	r2, [r3, #0]
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086a2:	211c      	movs	r1, #28
 80086a4:	400b      	ands	r3, r1
 80086a6:	210f      	movs	r1, #15
 80086a8:	4099      	lsls	r1, r3
 80086aa:	000b      	movs	r3, r1
 80086ac:	43d9      	mvns	r1, r3
 80086ae:	4b11      	ldr	r3, [pc, #68]	@ (80086f4 <HAL_DMA_DeInit+0xb8>)
 80086b0:	400a      	ands	r2, r1
 80086b2:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	2200      	movs	r2, #0
 80086b8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	2200      	movs	r2, #0
 80086be:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	2200      	movs	r2, #0
 80086ca:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2225      	movs	r2, #37	@ 0x25
 80086d6:	2100      	movs	r1, #0
 80086d8:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2224      	movs	r2, #36	@ 0x24
 80086de:	2100      	movs	r1, #0
 80086e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	0018      	movs	r0, r3
 80086e6:	46bd      	mov	sp, r7
 80086e8:	b002      	add	sp, #8
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	bffdfff8 	.word	0xbffdfff8
 80086f0:	40020000 	.word	0x40020000
 80086f4:	400200a8 	.word	0x400200a8

080086f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b086      	sub	sp, #24
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	60f8      	str	r0, [r7, #12]
 8008700:	60b9      	str	r1, [r7, #8]
 8008702:	607a      	str	r2, [r7, #4]
 8008704:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008706:	2317      	movs	r3, #23
 8008708:	18fb      	adds	r3, r7, r3
 800870a:	2200      	movs	r2, #0
 800870c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	2224      	movs	r2, #36	@ 0x24
 8008712:	5c9b      	ldrb	r3, [r3, r2]
 8008714:	2b01      	cmp	r3, #1
 8008716:	d101      	bne.n	800871c <HAL_DMA_Start_IT+0x24>
 8008718:	2302      	movs	r3, #2
 800871a:	e04f      	b.n	80087bc <HAL_DMA_Start_IT+0xc4>
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	2224      	movs	r2, #36	@ 0x24
 8008720:	2101      	movs	r1, #1
 8008722:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	2225      	movs	r2, #37	@ 0x25
 8008728:	5c9b      	ldrb	r3, [r3, r2]
 800872a:	b2db      	uxtb	r3, r3
 800872c:	2b01      	cmp	r3, #1
 800872e:	d13a      	bne.n	80087a6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2225      	movs	r2, #37	@ 0x25
 8008734:	2102      	movs	r1, #2
 8008736:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	2200      	movs	r2, #0
 800873c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	681a      	ldr	r2, [r3, #0]
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2101      	movs	r1, #1
 800874a:	438a      	bics	r2, r1
 800874c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	68b9      	ldr	r1, [r7, #8]
 8008754:	68f8      	ldr	r0, [r7, #12]
 8008756:	f000 f976 	bl	8008a46 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800875e:	2b00      	cmp	r3, #0
 8008760:	d008      	beq.n	8008774 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	210e      	movs	r1, #14
 800876e:	430a      	orrs	r2, r1
 8008770:	601a      	str	r2, [r3, #0]
 8008772:	e00f      	b.n	8008794 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2104      	movs	r1, #4
 8008780:	438a      	bics	r2, r1
 8008782:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	681a      	ldr	r2, [r3, #0]
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	210a      	movs	r1, #10
 8008790:	430a      	orrs	r2, r1
 8008792:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	681a      	ldr	r2, [r3, #0]
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2101      	movs	r1, #1
 80087a0:	430a      	orrs	r2, r1
 80087a2:	601a      	str	r2, [r3, #0]
 80087a4:	e007      	b.n	80087b6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2224      	movs	r2, #36	@ 0x24
 80087aa:	2100      	movs	r1, #0
 80087ac:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80087ae:	2317      	movs	r3, #23
 80087b0:	18fb      	adds	r3, r7, r3
 80087b2:	2202      	movs	r2, #2
 80087b4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 80087b6:	2317      	movs	r3, #23
 80087b8:	18fb      	adds	r3, r7, r3
 80087ba:	781b      	ldrb	r3, [r3, #0]
}
 80087bc:	0018      	movs	r0, r3
 80087be:	46bd      	mov	sp, r7
 80087c0:	b006      	add	sp, #24
 80087c2:	bd80      	pop	{r7, pc}

080087c4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b084      	sub	sp, #16
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80087cc:	230f      	movs	r3, #15
 80087ce:	18fb      	adds	r3, r7, r3
 80087d0:	2200      	movs	r2, #0
 80087d2:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2225      	movs	r2, #37	@ 0x25
 80087d8:	5c9b      	ldrb	r3, [r3, r2]
 80087da:	b2db      	uxtb	r3, r3
 80087dc:	2b02      	cmp	r3, #2
 80087de:	d008      	beq.n	80087f2 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2204      	movs	r2, #4
 80087e4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2224      	movs	r2, #36	@ 0x24
 80087ea:	2100      	movs	r1, #0
 80087ec:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80087ee:	2301      	movs	r3, #1
 80087f0:	e024      	b.n	800883c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681a      	ldr	r2, [r3, #0]
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	210e      	movs	r1, #14
 80087fe:	438a      	bics	r2, r1
 8008800:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	681a      	ldr	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	2101      	movs	r1, #1
 800880e:	438a      	bics	r2, r1
 8008810:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008816:	221c      	movs	r2, #28
 8008818:	401a      	ands	r2, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881e:	2101      	movs	r1, #1
 8008820:	4091      	lsls	r1, r2
 8008822:	000a      	movs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	2225      	movs	r2, #37	@ 0x25
 800882a:	2101      	movs	r1, #1
 800882c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	2224      	movs	r2, #36	@ 0x24
 8008832:	2100      	movs	r1, #0
 8008834:	5499      	strb	r1, [r3, r2]

    return status;
 8008836:	230f      	movs	r3, #15
 8008838:	18fb      	adds	r3, r7, r3
 800883a:	781b      	ldrb	r3, [r3, #0]
  }
}
 800883c:	0018      	movs	r0, r3
 800883e:	46bd      	mov	sp, r7
 8008840:	b004      	add	sp, #16
 8008842:	bd80      	pop	{r7, pc}

08008844 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008844:	b580      	push	{r7, lr}
 8008846:	b084      	sub	sp, #16
 8008848:	af00      	add	r7, sp, #0
 800884a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800884c:	210f      	movs	r1, #15
 800884e:	187b      	adds	r3, r7, r1
 8008850:	2200      	movs	r2, #0
 8008852:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	2225      	movs	r2, #37	@ 0x25
 8008858:	5c9b      	ldrb	r3, [r3, r2]
 800885a:	b2db      	uxtb	r3, r3
 800885c:	2b02      	cmp	r3, #2
 800885e:	d006      	beq.n	800886e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	2204      	movs	r2, #4
 8008864:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8008866:	187b      	adds	r3, r7, r1
 8008868:	2201      	movs	r2, #1
 800886a:	701a      	strb	r2, [r3, #0]
 800886c:	e02a      	b.n	80088c4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	210e      	movs	r1, #14
 800887a:	438a      	bics	r2, r1
 800887c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	681b      	ldr	r3, [r3, #0]
 8008888:	2101      	movs	r1, #1
 800888a:	438a      	bics	r2, r1
 800888c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008892:	221c      	movs	r2, #28
 8008894:	401a      	ands	r2, r3
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800889a:	2101      	movs	r1, #1
 800889c:	4091      	lsls	r1, r2
 800889e:	000a      	movs	r2, r1
 80088a0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2225      	movs	r2, #37	@ 0x25
 80088a6:	2101      	movs	r1, #1
 80088a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2224      	movs	r2, #36	@ 0x24
 80088ae:	2100      	movs	r1, #0
 80088b0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d004      	beq.n	80088c4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80088be:	687a      	ldr	r2, [r7, #4]
 80088c0:	0010      	movs	r0, r2
 80088c2:	4798      	blx	r3
    }
  }
  return status;
 80088c4:	230f      	movs	r3, #15
 80088c6:	18fb      	adds	r3, r7, r3
 80088c8:	781b      	ldrb	r3, [r3, #0]
}
 80088ca:	0018      	movs	r0, r3
 80088cc:	46bd      	mov	sp, r7
 80088ce:	b004      	add	sp, #16
 80088d0:	bd80      	pop	{r7, pc}

080088d2 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80088d2:	b580      	push	{r7, lr}
 80088d4:	b084      	sub	sp, #16
 80088d6:	af00      	add	r7, sp, #0
 80088d8:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80088ee:	221c      	movs	r2, #28
 80088f0:	4013      	ands	r3, r2
 80088f2:	2204      	movs	r2, #4
 80088f4:	409a      	lsls	r2, r3
 80088f6:	0013      	movs	r3, r2
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	4013      	ands	r3, r2
 80088fc:	d026      	beq.n	800894c <HAL_DMA_IRQHandler+0x7a>
 80088fe:	68bb      	ldr	r3, [r7, #8]
 8008900:	2204      	movs	r2, #4
 8008902:	4013      	ands	r3, r2
 8008904:	d022      	beq.n	800894c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	2220      	movs	r2, #32
 800890e:	4013      	ands	r3, r2
 8008910:	d107      	bne.n	8008922 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	681a      	ldr	r2, [r3, #0]
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	2104      	movs	r1, #4
 800891e:	438a      	bics	r2, r1
 8008920:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008926:	221c      	movs	r2, #28
 8008928:	401a      	ands	r2, r3
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800892e:	2104      	movs	r1, #4
 8008930:	4091      	lsls	r1, r2
 8008932:	000a      	movs	r2, r1
 8008934:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800893a:	2b00      	cmp	r3, #0
 800893c:	d100      	bne.n	8008940 <HAL_DMA_IRQHandler+0x6e>
 800893e:	e071      	b.n	8008a24 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	0010      	movs	r0, r2
 8008948:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800894a:	e06b      	b.n	8008a24 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008950:	221c      	movs	r2, #28
 8008952:	4013      	ands	r3, r2
 8008954:	2202      	movs	r2, #2
 8008956:	409a      	lsls	r2, r3
 8008958:	0013      	movs	r3, r2
 800895a:	68fa      	ldr	r2, [r7, #12]
 800895c:	4013      	ands	r3, r2
 800895e:	d02d      	beq.n	80089bc <HAL_DMA_IRQHandler+0xea>
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	2202      	movs	r2, #2
 8008964:	4013      	ands	r3, r2
 8008966:	d029      	beq.n	80089bc <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	2220      	movs	r2, #32
 8008970:	4013      	ands	r3, r2
 8008972:	d10b      	bne.n	800898c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	681a      	ldr	r2, [r3, #0]
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	210a      	movs	r1, #10
 8008980:	438a      	bics	r2, r1
 8008982:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2225      	movs	r2, #37	@ 0x25
 8008988:	2101      	movs	r1, #1
 800898a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008990:	221c      	movs	r2, #28
 8008992:	401a      	ands	r2, r3
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008998:	2102      	movs	r1, #2
 800899a:	4091      	lsls	r1, r2
 800899c:	000a      	movs	r2, r1
 800899e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2224      	movs	r2, #36	@ 0x24
 80089a4:	2100      	movs	r1, #0
 80089a6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d039      	beq.n	8008a24 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	687a      	ldr	r2, [r7, #4]
 80089b6:	0010      	movs	r0, r2
 80089b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80089ba:	e033      	b.n	8008a24 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089c0:	221c      	movs	r2, #28
 80089c2:	4013      	ands	r3, r2
 80089c4:	2208      	movs	r2, #8
 80089c6:	409a      	lsls	r2, r3
 80089c8:	0013      	movs	r3, r2
 80089ca:	68fa      	ldr	r2, [r7, #12]
 80089cc:	4013      	ands	r3, r2
 80089ce:	d02a      	beq.n	8008a26 <HAL_DMA_IRQHandler+0x154>
 80089d0:	68bb      	ldr	r3, [r7, #8]
 80089d2:	2208      	movs	r2, #8
 80089d4:	4013      	ands	r3, r2
 80089d6:	d026      	beq.n	8008a26 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	681a      	ldr	r2, [r3, #0]
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	210e      	movs	r1, #14
 80089e4:	438a      	bics	r2, r1
 80089e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80089ec:	221c      	movs	r2, #28
 80089ee:	401a      	ands	r2, r3
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089f4:	2101      	movs	r1, #1
 80089f6:	4091      	lsls	r1, r2
 80089f8:	000a      	movs	r2, r1
 80089fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	2201      	movs	r2, #1
 8008a00:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2225      	movs	r2, #37	@ 0x25
 8008a06:	2101      	movs	r1, #1
 8008a08:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2224      	movs	r2, #36	@ 0x24
 8008a0e:	2100      	movs	r1, #0
 8008a10:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d005      	beq.n	8008a26 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008a1e:	687a      	ldr	r2, [r7, #4]
 8008a20:	0010      	movs	r0, r2
 8008a22:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008a24:	46c0      	nop			@ (mov r8, r8)
 8008a26:	46c0      	nop			@ (mov r8, r8)
}
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	b004      	add	sp, #16
 8008a2c:	bd80      	pop	{r7, pc}

08008a2e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8008a2e:	b580      	push	{r7, lr}
 8008a30:	b082      	sub	sp, #8
 8008a32:	af00      	add	r7, sp, #0
 8008a34:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2225      	movs	r2, #37	@ 0x25
 8008a3a:	5c9b      	ldrb	r3, [r3, r2]
 8008a3c:	b2db      	uxtb	r3, r3
}
 8008a3e:	0018      	movs	r0, r3
 8008a40:	46bd      	mov	sp, r7
 8008a42:	b002      	add	sp, #8
 8008a44:	bd80      	pop	{r7, pc}

08008a46 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008a46:	b580      	push	{r7, lr}
 8008a48:	b084      	sub	sp, #16
 8008a4a:	af00      	add	r7, sp, #0
 8008a4c:	60f8      	str	r0, [r7, #12]
 8008a4e:	60b9      	str	r1, [r7, #8]
 8008a50:	607a      	str	r2, [r7, #4]
 8008a52:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008a58:	221c      	movs	r2, #28
 8008a5a:	401a      	ands	r2, r3
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008a60:	2101      	movs	r1, #1
 8008a62:	4091      	lsls	r1, r2
 8008a64:	000a      	movs	r2, r1
 8008a66:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	683a      	ldr	r2, [r7, #0]
 8008a6e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	689b      	ldr	r3, [r3, #8]
 8008a74:	2b10      	cmp	r3, #16
 8008a76:	d108      	bne.n	8008a8a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	687a      	ldr	r2, [r7, #4]
 8008a7e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008a88:	e007      	b.n	8008a9a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	687a      	ldr	r2, [r7, #4]
 8008a98:	60da      	str	r2, [r3, #12]
}
 8008a9a:	46c0      	nop			@ (mov r8, r8)
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	b004      	add	sp, #16
 8008aa0:	bd80      	pop	{r7, pc}
	...

08008aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b086      	sub	sp, #24
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8008aba:	e155      	b.n	8008d68 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8008abc:	683b      	ldr	r3, [r7, #0]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	2101      	movs	r1, #1
 8008ac2:	697a      	ldr	r2, [r7, #20]
 8008ac4:	4091      	lsls	r1, r2
 8008ac6:	000a      	movs	r2, r1
 8008ac8:	4013      	ands	r3, r2
 8008aca:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d100      	bne.n	8008ad4 <HAL_GPIO_Init+0x30>
 8008ad2:	e146      	b.n	8008d62 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	2203      	movs	r2, #3
 8008ada:	4013      	ands	r3, r2
 8008adc:	2b01      	cmp	r3, #1
 8008ade:	d005      	beq.n	8008aec <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008ae0:	683b      	ldr	r3, [r7, #0]
 8008ae2:	685b      	ldr	r3, [r3, #4]
 8008ae4:	2203      	movs	r2, #3
 8008ae6:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d130      	bne.n	8008b4e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	689b      	ldr	r3, [r3, #8]
 8008af0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008af2:	697b      	ldr	r3, [r7, #20]
 8008af4:	005b      	lsls	r3, r3, #1
 8008af6:	2203      	movs	r2, #3
 8008af8:	409a      	lsls	r2, r3
 8008afa:	0013      	movs	r3, r2
 8008afc:	43da      	mvns	r2, r3
 8008afe:	693b      	ldr	r3, [r7, #16]
 8008b00:	4013      	ands	r3, r2
 8008b02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008b04:	683b      	ldr	r3, [r7, #0]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	697b      	ldr	r3, [r7, #20]
 8008b0a:	005b      	lsls	r3, r3, #1
 8008b0c:	409a      	lsls	r2, r3
 8008b0e:	0013      	movs	r3, r2
 8008b10:	693a      	ldr	r2, [r7, #16]
 8008b12:	4313      	orrs	r3, r2
 8008b14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	693a      	ldr	r2, [r7, #16]
 8008b1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	685b      	ldr	r3, [r3, #4]
 8008b20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008b22:	2201      	movs	r2, #1
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	409a      	lsls	r2, r3
 8008b28:	0013      	movs	r3, r2
 8008b2a:	43da      	mvns	r2, r3
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	4013      	ands	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008b32:	683b      	ldr	r3, [r7, #0]
 8008b34:	685b      	ldr	r3, [r3, #4]
 8008b36:	091b      	lsrs	r3, r3, #4
 8008b38:	2201      	movs	r2, #1
 8008b3a:	401a      	ands	r2, r3
 8008b3c:	697b      	ldr	r3, [r7, #20]
 8008b3e:	409a      	lsls	r2, r3
 8008b40:	0013      	movs	r3, r2
 8008b42:	693a      	ldr	r2, [r7, #16]
 8008b44:	4313      	orrs	r3, r2
 8008b46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	693a      	ldr	r2, [r7, #16]
 8008b4c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	685b      	ldr	r3, [r3, #4]
 8008b52:	2203      	movs	r2, #3
 8008b54:	4013      	ands	r3, r2
 8008b56:	2b03      	cmp	r3, #3
 8008b58:	d017      	beq.n	8008b8a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	68db      	ldr	r3, [r3, #12]
 8008b5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	005b      	lsls	r3, r3, #1
 8008b64:	2203      	movs	r2, #3
 8008b66:	409a      	lsls	r2, r3
 8008b68:	0013      	movs	r3, r2
 8008b6a:	43da      	mvns	r2, r3
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	4013      	ands	r3, r2
 8008b70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008b72:	683b      	ldr	r3, [r7, #0]
 8008b74:	689a      	ldr	r2, [r3, #8]
 8008b76:	697b      	ldr	r3, [r7, #20]
 8008b78:	005b      	lsls	r3, r3, #1
 8008b7a:	409a      	lsls	r2, r3
 8008b7c:	0013      	movs	r3, r2
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	4313      	orrs	r3, r2
 8008b82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	693a      	ldr	r2, [r7, #16]
 8008b88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008b8a:	683b      	ldr	r3, [r7, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	2203      	movs	r2, #3
 8008b90:	4013      	ands	r3, r2
 8008b92:	2b02      	cmp	r3, #2
 8008b94:	d123      	bne.n	8008bde <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008b96:	697b      	ldr	r3, [r7, #20]
 8008b98:	08da      	lsrs	r2, r3, #3
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	3208      	adds	r2, #8
 8008b9e:	0092      	lsls	r2, r2, #2
 8008ba0:	58d3      	ldr	r3, [r2, r3]
 8008ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8008ba4:	697b      	ldr	r3, [r7, #20]
 8008ba6:	2207      	movs	r2, #7
 8008ba8:	4013      	ands	r3, r2
 8008baa:	009b      	lsls	r3, r3, #2
 8008bac:	220f      	movs	r2, #15
 8008bae:	409a      	lsls	r2, r3
 8008bb0:	0013      	movs	r3, r2
 8008bb2:	43da      	mvns	r2, r3
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	4013      	ands	r3, r2
 8008bb8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8008bba:	683b      	ldr	r3, [r7, #0]
 8008bbc:	691a      	ldr	r2, [r3, #16]
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	2107      	movs	r1, #7
 8008bc2:	400b      	ands	r3, r1
 8008bc4:	009b      	lsls	r3, r3, #2
 8008bc6:	409a      	lsls	r2, r3
 8008bc8:	0013      	movs	r3, r2
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	08da      	lsrs	r2, r3, #3
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	3208      	adds	r2, #8
 8008bd8:	0092      	lsls	r2, r2, #2
 8008bda:	6939      	ldr	r1, [r7, #16]
 8008bdc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008be4:	697b      	ldr	r3, [r7, #20]
 8008be6:	005b      	lsls	r3, r3, #1
 8008be8:	2203      	movs	r2, #3
 8008bea:	409a      	lsls	r2, r3
 8008bec:	0013      	movs	r3, r2
 8008bee:	43da      	mvns	r2, r3
 8008bf0:	693b      	ldr	r3, [r7, #16]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008bf6:	683b      	ldr	r3, [r7, #0]
 8008bf8:	685b      	ldr	r3, [r3, #4]
 8008bfa:	2203      	movs	r2, #3
 8008bfc:	401a      	ands	r2, r3
 8008bfe:	697b      	ldr	r3, [r7, #20]
 8008c00:	005b      	lsls	r3, r3, #1
 8008c02:	409a      	lsls	r2, r3
 8008c04:	0013      	movs	r3, r2
 8008c06:	693a      	ldr	r2, [r7, #16]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	693a      	ldr	r2, [r7, #16]
 8008c10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685a      	ldr	r2, [r3, #4]
 8008c16:	23c0      	movs	r3, #192	@ 0xc0
 8008c18:	029b      	lsls	r3, r3, #10
 8008c1a:	4013      	ands	r3, r2
 8008c1c:	d100      	bne.n	8008c20 <HAL_GPIO_Init+0x17c>
 8008c1e:	e0a0      	b.n	8008d62 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008c20:	4b57      	ldr	r3, [pc, #348]	@ (8008d80 <HAL_GPIO_Init+0x2dc>)
 8008c22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008c24:	4b56      	ldr	r3, [pc, #344]	@ (8008d80 <HAL_GPIO_Init+0x2dc>)
 8008c26:	2101      	movs	r1, #1
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8008c2c:	4a55      	ldr	r2, [pc, #340]	@ (8008d84 <HAL_GPIO_Init+0x2e0>)
 8008c2e:	697b      	ldr	r3, [r7, #20]
 8008c30:	089b      	lsrs	r3, r3, #2
 8008c32:	3302      	adds	r3, #2
 8008c34:	009b      	lsls	r3, r3, #2
 8008c36:	589b      	ldr	r3, [r3, r2]
 8008c38:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	2203      	movs	r2, #3
 8008c3e:	4013      	ands	r3, r2
 8008c40:	009b      	lsls	r3, r3, #2
 8008c42:	220f      	movs	r2, #15
 8008c44:	409a      	lsls	r2, r3
 8008c46:	0013      	movs	r3, r2
 8008c48:	43da      	mvns	r2, r3
 8008c4a:	693b      	ldr	r3, [r7, #16]
 8008c4c:	4013      	ands	r3, r2
 8008c4e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8008c50:	687a      	ldr	r2, [r7, #4]
 8008c52:	23a0      	movs	r3, #160	@ 0xa0
 8008c54:	05db      	lsls	r3, r3, #23
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d01f      	beq.n	8008c9a <HAL_GPIO_Init+0x1f6>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	4a4a      	ldr	r2, [pc, #296]	@ (8008d88 <HAL_GPIO_Init+0x2e4>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d019      	beq.n	8008c96 <HAL_GPIO_Init+0x1f2>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	4a49      	ldr	r2, [pc, #292]	@ (8008d8c <HAL_GPIO_Init+0x2e8>)
 8008c66:	4293      	cmp	r3, r2
 8008c68:	d013      	beq.n	8008c92 <HAL_GPIO_Init+0x1ee>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	4a48      	ldr	r2, [pc, #288]	@ (8008d90 <HAL_GPIO_Init+0x2ec>)
 8008c6e:	4293      	cmp	r3, r2
 8008c70:	d00d      	beq.n	8008c8e <HAL_GPIO_Init+0x1ea>
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	4a47      	ldr	r2, [pc, #284]	@ (8008d94 <HAL_GPIO_Init+0x2f0>)
 8008c76:	4293      	cmp	r3, r2
 8008c78:	d007      	beq.n	8008c8a <HAL_GPIO_Init+0x1e6>
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	4a46      	ldr	r2, [pc, #280]	@ (8008d98 <HAL_GPIO_Init+0x2f4>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d101      	bne.n	8008c86 <HAL_GPIO_Init+0x1e2>
 8008c82:	2305      	movs	r3, #5
 8008c84:	e00a      	b.n	8008c9c <HAL_GPIO_Init+0x1f8>
 8008c86:	2306      	movs	r3, #6
 8008c88:	e008      	b.n	8008c9c <HAL_GPIO_Init+0x1f8>
 8008c8a:	2304      	movs	r3, #4
 8008c8c:	e006      	b.n	8008c9c <HAL_GPIO_Init+0x1f8>
 8008c8e:	2303      	movs	r3, #3
 8008c90:	e004      	b.n	8008c9c <HAL_GPIO_Init+0x1f8>
 8008c92:	2302      	movs	r3, #2
 8008c94:	e002      	b.n	8008c9c <HAL_GPIO_Init+0x1f8>
 8008c96:	2301      	movs	r3, #1
 8008c98:	e000      	b.n	8008c9c <HAL_GPIO_Init+0x1f8>
 8008c9a:	2300      	movs	r3, #0
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	2103      	movs	r1, #3
 8008ca0:	400a      	ands	r2, r1
 8008ca2:	0092      	lsls	r2, r2, #2
 8008ca4:	4093      	lsls	r3, r2
 8008ca6:	693a      	ldr	r2, [r7, #16]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008cac:	4935      	ldr	r1, [pc, #212]	@ (8008d84 <HAL_GPIO_Init+0x2e0>)
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	089b      	lsrs	r3, r3, #2
 8008cb2:	3302      	adds	r3, #2
 8008cb4:	009b      	lsls	r3, r3, #2
 8008cb6:	693a      	ldr	r2, [r7, #16]
 8008cb8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008cba:	4b38      	ldr	r3, [pc, #224]	@ (8008d9c <HAL_GPIO_Init+0x2f8>)
 8008cbc:	689b      	ldr	r3, [r3, #8]
 8008cbe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	43da      	mvns	r2, r3
 8008cc4:	693b      	ldr	r3, [r7, #16]
 8008cc6:	4013      	ands	r3, r2
 8008cc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	685a      	ldr	r2, [r3, #4]
 8008cce:	2380      	movs	r3, #128	@ 0x80
 8008cd0:	035b      	lsls	r3, r3, #13
 8008cd2:	4013      	ands	r3, r2
 8008cd4:	d003      	beq.n	8008cde <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8008cd6:	693a      	ldr	r2, [r7, #16]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8008cde:	4b2f      	ldr	r3, [pc, #188]	@ (8008d9c <HAL_GPIO_Init+0x2f8>)
 8008ce0:	693a      	ldr	r2, [r7, #16]
 8008ce2:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8008ce4:	4b2d      	ldr	r3, [pc, #180]	@ (8008d9c <HAL_GPIO_Init+0x2f8>)
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	43da      	mvns	r2, r3
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	4013      	ands	r3, r2
 8008cf2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8008cf4:	683b      	ldr	r3, [r7, #0]
 8008cf6:	685a      	ldr	r2, [r3, #4]
 8008cf8:	2380      	movs	r3, #128	@ 0x80
 8008cfa:	039b      	lsls	r3, r3, #14
 8008cfc:	4013      	ands	r3, r2
 8008cfe:	d003      	beq.n	8008d08 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8008d00:	693a      	ldr	r2, [r7, #16]
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	4313      	orrs	r3, r2
 8008d06:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8008d08:	4b24      	ldr	r3, [pc, #144]	@ (8008d9c <HAL_GPIO_Init+0x2f8>)
 8008d0a:	693a      	ldr	r2, [r7, #16]
 8008d0c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8008d0e:	4b23      	ldr	r3, [pc, #140]	@ (8008d9c <HAL_GPIO_Init+0x2f8>)
 8008d10:	685b      	ldr	r3, [r3, #4]
 8008d12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	43da      	mvns	r2, r3
 8008d18:	693b      	ldr	r3, [r7, #16]
 8008d1a:	4013      	ands	r3, r2
 8008d1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	685a      	ldr	r2, [r3, #4]
 8008d22:	2380      	movs	r3, #128	@ 0x80
 8008d24:	029b      	lsls	r3, r3, #10
 8008d26:	4013      	ands	r3, r2
 8008d28:	d003      	beq.n	8008d32 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8008d2a:	693a      	ldr	r2, [r7, #16]
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8008d32:	4b1a      	ldr	r3, [pc, #104]	@ (8008d9c <HAL_GPIO_Init+0x2f8>)
 8008d34:	693a      	ldr	r2, [r7, #16]
 8008d36:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008d38:	4b18      	ldr	r3, [pc, #96]	@ (8008d9c <HAL_GPIO_Init+0x2f8>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	43da      	mvns	r2, r3
 8008d42:	693b      	ldr	r3, [r7, #16]
 8008d44:	4013      	ands	r3, r2
 8008d46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	2380      	movs	r3, #128	@ 0x80
 8008d4e:	025b      	lsls	r3, r3, #9
 8008d50:	4013      	ands	r3, r2
 8008d52:	d003      	beq.n	8008d5c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8008d54:	693a      	ldr	r2, [r7, #16]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	4313      	orrs	r3, r2
 8008d5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8008d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008d9c <HAL_GPIO_Init+0x2f8>)
 8008d5e:	693a      	ldr	r2, [r7, #16]
 8008d60:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8008d62:	697b      	ldr	r3, [r7, #20]
 8008d64:	3301      	adds	r3, #1
 8008d66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8008d68:	683b      	ldr	r3, [r7, #0]
 8008d6a:	681a      	ldr	r2, [r3, #0]
 8008d6c:	697b      	ldr	r3, [r7, #20]
 8008d6e:	40da      	lsrs	r2, r3
 8008d70:	1e13      	subs	r3, r2, #0
 8008d72:	d000      	beq.n	8008d76 <HAL_GPIO_Init+0x2d2>
 8008d74:	e6a2      	b.n	8008abc <HAL_GPIO_Init+0x18>
  }
}
 8008d76:	46c0      	nop			@ (mov r8, r8)
 8008d78:	46c0      	nop			@ (mov r8, r8)
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	b006      	add	sp, #24
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	40021000 	.word	0x40021000
 8008d84:	40010000 	.word	0x40010000
 8008d88:	50000400 	.word	0x50000400
 8008d8c:	50000800 	.word	0x50000800
 8008d90:	50000c00 	.word	0x50000c00
 8008d94:	50001000 	.word	0x50001000
 8008d98:	50001c00 	.word	0x50001c00
 8008d9c:	40010400 	.word	0x40010400

08008da0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	b086      	sub	sp, #24
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	6078      	str	r0, [r7, #4]
 8008da8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8008daa:	2300      	movs	r3, #0
 8008dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008dae:	2300      	movs	r3, #0
 8008db0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 8008db2:	2300      	movs	r3, #0
 8008db4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 8008db6:	e0bc      	b.n	8008f32 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 8008db8:	2201      	movs	r2, #1
 8008dba:	697b      	ldr	r3, [r7, #20]
 8008dbc:	409a      	lsls	r2, r3
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	4013      	ands	r3, r2
 8008dc2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 8008dc4:	693b      	ldr	r3, [r7, #16]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d100      	bne.n	8008dcc <HAL_GPIO_DeInit+0x2c>
 8008dca:	e0af      	b.n	8008f2c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 8008dcc:	4a5e      	ldr	r2, [pc, #376]	@ (8008f48 <HAL_GPIO_DeInit+0x1a8>)
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	089b      	lsrs	r3, r3, #2
 8008dd2:	3302      	adds	r3, #2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	589b      	ldr	r3, [r3, r2]
 8008dd8:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 8008dda:	697b      	ldr	r3, [r7, #20]
 8008ddc:	2203      	movs	r2, #3
 8008dde:	4013      	ands	r3, r2
 8008de0:	009b      	lsls	r3, r3, #2
 8008de2:	220f      	movs	r2, #15
 8008de4:	409a      	lsls	r2, r3
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	4013      	ands	r3, r2
 8008dea:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008dec:	687a      	ldr	r2, [r7, #4]
 8008dee:	23a0      	movs	r3, #160	@ 0xa0
 8008df0:	05db      	lsls	r3, r3, #23
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d01f      	beq.n	8008e36 <HAL_GPIO_DeInit+0x96>
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	4a54      	ldr	r2, [pc, #336]	@ (8008f4c <HAL_GPIO_DeInit+0x1ac>)
 8008dfa:	4293      	cmp	r3, r2
 8008dfc:	d019      	beq.n	8008e32 <HAL_GPIO_DeInit+0x92>
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4a53      	ldr	r2, [pc, #332]	@ (8008f50 <HAL_GPIO_DeInit+0x1b0>)
 8008e02:	4293      	cmp	r3, r2
 8008e04:	d013      	beq.n	8008e2e <HAL_GPIO_DeInit+0x8e>
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	4a52      	ldr	r2, [pc, #328]	@ (8008f54 <HAL_GPIO_DeInit+0x1b4>)
 8008e0a:	4293      	cmp	r3, r2
 8008e0c:	d00d      	beq.n	8008e2a <HAL_GPIO_DeInit+0x8a>
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	4a51      	ldr	r2, [pc, #324]	@ (8008f58 <HAL_GPIO_DeInit+0x1b8>)
 8008e12:	4293      	cmp	r3, r2
 8008e14:	d007      	beq.n	8008e26 <HAL_GPIO_DeInit+0x86>
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	4a50      	ldr	r2, [pc, #320]	@ (8008f5c <HAL_GPIO_DeInit+0x1bc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d101      	bne.n	8008e22 <HAL_GPIO_DeInit+0x82>
 8008e1e:	2305      	movs	r3, #5
 8008e20:	e00a      	b.n	8008e38 <HAL_GPIO_DeInit+0x98>
 8008e22:	2306      	movs	r3, #6
 8008e24:	e008      	b.n	8008e38 <HAL_GPIO_DeInit+0x98>
 8008e26:	2304      	movs	r3, #4
 8008e28:	e006      	b.n	8008e38 <HAL_GPIO_DeInit+0x98>
 8008e2a:	2303      	movs	r3, #3
 8008e2c:	e004      	b.n	8008e38 <HAL_GPIO_DeInit+0x98>
 8008e2e:	2302      	movs	r3, #2
 8008e30:	e002      	b.n	8008e38 <HAL_GPIO_DeInit+0x98>
 8008e32:	2301      	movs	r3, #1
 8008e34:	e000      	b.n	8008e38 <HAL_GPIO_DeInit+0x98>
 8008e36:	2300      	movs	r3, #0
 8008e38:	697a      	ldr	r2, [r7, #20]
 8008e3a:	2103      	movs	r1, #3
 8008e3c:	400a      	ands	r2, r1
 8008e3e:	0092      	lsls	r2, r2, #2
 8008e40:	4093      	lsls	r3, r2
 8008e42:	68fa      	ldr	r2, [r7, #12]
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d132      	bne.n	8008eae <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8008e48:	4b45      	ldr	r3, [pc, #276]	@ (8008f60 <HAL_GPIO_DeInit+0x1c0>)
 8008e4a:	681a      	ldr	r2, [r3, #0]
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	43d9      	mvns	r1, r3
 8008e50:	4b43      	ldr	r3, [pc, #268]	@ (8008f60 <HAL_GPIO_DeInit+0x1c0>)
 8008e52:	400a      	ands	r2, r1
 8008e54:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8008e56:	4b42      	ldr	r3, [pc, #264]	@ (8008f60 <HAL_GPIO_DeInit+0x1c0>)
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	43d9      	mvns	r1, r3
 8008e5e:	4b40      	ldr	r3, [pc, #256]	@ (8008f60 <HAL_GPIO_DeInit+0x1c0>)
 8008e60:	400a      	ands	r2, r1
 8008e62:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8008e64:	4b3e      	ldr	r3, [pc, #248]	@ (8008f60 <HAL_GPIO_DeInit+0x1c0>)
 8008e66:	68da      	ldr	r2, [r3, #12]
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	43d9      	mvns	r1, r3
 8008e6c:	4b3c      	ldr	r3, [pc, #240]	@ (8008f60 <HAL_GPIO_DeInit+0x1c0>)
 8008e6e:	400a      	ands	r2, r1
 8008e70:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8008e72:	4b3b      	ldr	r3, [pc, #236]	@ (8008f60 <HAL_GPIO_DeInit+0x1c0>)
 8008e74:	689a      	ldr	r2, [r3, #8]
 8008e76:	693b      	ldr	r3, [r7, #16]
 8008e78:	43d9      	mvns	r1, r3
 8008e7a:	4b39      	ldr	r3, [pc, #228]	@ (8008f60 <HAL_GPIO_DeInit+0x1c0>)
 8008e7c:	400a      	ands	r2, r1
 8008e7e:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 8008e80:	697b      	ldr	r3, [r7, #20]
 8008e82:	2203      	movs	r2, #3
 8008e84:	4013      	ands	r3, r2
 8008e86:	009b      	lsls	r3, r3, #2
 8008e88:	220f      	movs	r2, #15
 8008e8a:	409a      	lsls	r2, r3
 8008e8c:	0013      	movs	r3, r2
 8008e8e:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008e90:	4a2d      	ldr	r2, [pc, #180]	@ (8008f48 <HAL_GPIO_DeInit+0x1a8>)
 8008e92:	697b      	ldr	r3, [r7, #20]
 8008e94:	089b      	lsrs	r3, r3, #2
 8008e96:	3302      	adds	r3, #2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	589a      	ldr	r2, [r3, r2]
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	43d9      	mvns	r1, r3
 8008ea0:	4829      	ldr	r0, [pc, #164]	@ (8008f48 <HAL_GPIO_DeInit+0x1a8>)
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	089b      	lsrs	r3, r3, #2
 8008ea6:	400a      	ands	r2, r1
 8008ea8:	3302      	adds	r3, #2
 8008eaa:	009b      	lsls	r3, r3, #2
 8008eac:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681a      	ldr	r2, [r3, #0]
 8008eb2:	697b      	ldr	r3, [r7, #20]
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	2103      	movs	r1, #3
 8008eb8:	4099      	lsls	r1, r3
 8008eba:	000b      	movs	r3, r1
 8008ebc:	431a      	orrs	r2, r3
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8008ec2:	697b      	ldr	r3, [r7, #20]
 8008ec4:	08da      	lsrs	r2, r3, #3
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	3208      	adds	r2, #8
 8008eca:	0092      	lsls	r2, r2, #2
 8008ecc:	58d3      	ldr	r3, [r2, r3]
 8008ece:	697a      	ldr	r2, [r7, #20]
 8008ed0:	2107      	movs	r1, #7
 8008ed2:	400a      	ands	r2, r1
 8008ed4:	0092      	lsls	r2, r2, #2
 8008ed6:	210f      	movs	r1, #15
 8008ed8:	4091      	lsls	r1, r2
 8008eda:	000a      	movs	r2, r1
 8008edc:	43d1      	mvns	r1, r2
 8008ede:	697a      	ldr	r2, [r7, #20]
 8008ee0:	08d2      	lsrs	r2, r2, #3
 8008ee2:	4019      	ands	r1, r3
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	3208      	adds	r2, #8
 8008ee8:	0092      	lsls	r2, r2, #2
 8008eea:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	697a      	ldr	r2, [r7, #20]
 8008ef2:	0052      	lsls	r2, r2, #1
 8008ef4:	2103      	movs	r1, #3
 8008ef6:	4091      	lsls	r1, r2
 8008ef8:	000a      	movs	r2, r1
 8008efa:	43d2      	mvns	r2, r2
 8008efc:	401a      	ands	r2, r3
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	685b      	ldr	r3, [r3, #4]
 8008f06:	2101      	movs	r1, #1
 8008f08:	697a      	ldr	r2, [r7, #20]
 8008f0a:	4091      	lsls	r1, r2
 8008f0c:	000a      	movs	r2, r1
 8008f0e:	43d2      	mvns	r2, r2
 8008f10:	401a      	ands	r2, r3
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	689b      	ldr	r3, [r3, #8]
 8008f1a:	697a      	ldr	r2, [r7, #20]
 8008f1c:	0052      	lsls	r2, r2, #1
 8008f1e:	2103      	movs	r1, #3
 8008f20:	4091      	lsls	r1, r2
 8008f22:	000a      	movs	r2, r1
 8008f24:	43d2      	mvns	r2, r2
 8008f26:	401a      	ands	r2, r3
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	609a      	str	r2, [r3, #8]
    }
    position++;
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 8008f32:	683a      	ldr	r2, [r7, #0]
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	40da      	lsrs	r2, r3
 8008f38:	1e13      	subs	r3, r2, #0
 8008f3a:	d000      	beq.n	8008f3e <HAL_GPIO_DeInit+0x19e>
 8008f3c:	e73c      	b.n	8008db8 <HAL_GPIO_DeInit+0x18>
  }
}
 8008f3e:	46c0      	nop			@ (mov r8, r8)
 8008f40:	46c0      	nop			@ (mov r8, r8)
 8008f42:	46bd      	mov	sp, r7
 8008f44:	b006      	add	sp, #24
 8008f46:	bd80      	pop	{r7, pc}
 8008f48:	40010000 	.word	0x40010000
 8008f4c:	50000400 	.word	0x50000400
 8008f50:	50000800 	.word	0x50000800
 8008f54:	50000c00 	.word	0x50000c00
 8008f58:	50001000 	.word	0x50001000
 8008f5c:	50001c00 	.word	0x50001c00
 8008f60:	40010400 	.word	0x40010400

08008f64 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b082      	sub	sp, #8
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	6078      	str	r0, [r7, #4]
 8008f6c:	0008      	movs	r0, r1
 8008f6e:	0011      	movs	r1, r2
 8008f70:	1cbb      	adds	r3, r7, #2
 8008f72:	1c02      	adds	r2, r0, #0
 8008f74:	801a      	strh	r2, [r3, #0]
 8008f76:	1c7b      	adds	r3, r7, #1
 8008f78:	1c0a      	adds	r2, r1, #0
 8008f7a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008f7c:	1c7b      	adds	r3, r7, #1
 8008f7e:	781b      	ldrb	r3, [r3, #0]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d004      	beq.n	8008f8e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8008f84:	1cbb      	adds	r3, r7, #2
 8008f86:	881a      	ldrh	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8008f8c:	e003      	b.n	8008f96 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 8008f8e:	1cbb      	adds	r3, r7, #2
 8008f90:	881a      	ldrh	r2, [r3, #0]
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8008f96:	46c0      	nop			@ (mov r8, r8)
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	b002      	add	sp, #8
 8008f9c:	bd80      	pop	{r7, pc}
	...

08008fa0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008fa0:	b580      	push	{r7, lr}
 8008fa2:	b082      	sub	sp, #8
 8008fa4:	af00      	add	r7, sp, #0
 8008fa6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d101      	bne.n	8008fb2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	e082      	b.n	80090b8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	2241      	movs	r2, #65	@ 0x41
 8008fb6:	5c9b      	ldrb	r3, [r3, r2]
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d107      	bne.n	8008fce <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	2240      	movs	r2, #64	@ 0x40
 8008fc2:	2100      	movs	r1, #0
 8008fc4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	0018      	movs	r0, r3
 8008fca:	f7fb fea1 	bl	8004d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2241      	movs	r2, #65	@ 0x41
 8008fd2:	2124      	movs	r1, #36	@ 0x24
 8008fd4:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	681a      	ldr	r2, [r3, #0]
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	2101      	movs	r1, #1
 8008fe2:	438a      	bics	r2, r1
 8008fe4:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	685a      	ldr	r2, [r3, #4]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	4934      	ldr	r1, [pc, #208]	@ (80090c0 <HAL_I2C_Init+0x120>)
 8008ff0:	400a      	ands	r2, r1
 8008ff2:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	689a      	ldr	r2, [r3, #8]
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4931      	ldr	r1, [pc, #196]	@ (80090c4 <HAL_I2C_Init+0x124>)
 8009000:	400a      	ands	r2, r1
 8009002:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	68db      	ldr	r3, [r3, #12]
 8009008:	2b01      	cmp	r3, #1
 800900a:	d108      	bne.n	800901e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	689a      	ldr	r2, [r3, #8]
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2180      	movs	r1, #128	@ 0x80
 8009016:	0209      	lsls	r1, r1, #8
 8009018:	430a      	orrs	r2, r1
 800901a:	609a      	str	r2, [r3, #8]
 800901c:	e007      	b.n	800902e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	689a      	ldr	r2, [r3, #8]
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	2184      	movs	r1, #132	@ 0x84
 8009028:	0209      	lsls	r1, r1, #8
 800902a:	430a      	orrs	r2, r1
 800902c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68db      	ldr	r3, [r3, #12]
 8009032:	2b02      	cmp	r3, #2
 8009034:	d104      	bne.n	8009040 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	2280      	movs	r2, #128	@ 0x80
 800903c:	0112      	lsls	r2, r2, #4
 800903e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	685a      	ldr	r2, [r3, #4]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	491f      	ldr	r1, [pc, #124]	@ (80090c8 <HAL_I2C_Init+0x128>)
 800904c:	430a      	orrs	r2, r1
 800904e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	68da      	ldr	r2, [r3, #12]
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	491a      	ldr	r1, [pc, #104]	@ (80090c4 <HAL_I2C_Init+0x124>)
 800905c:	400a      	ands	r2, r1
 800905e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	691a      	ldr	r2, [r3, #16]
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	695b      	ldr	r3, [r3, #20]
 8009068:	431a      	orrs	r2, r3
 800906a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	681b      	ldr	r3, [r3, #0]
 8009076:	430a      	orrs	r2, r1
 8009078:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	69d9      	ldr	r1, [r3, #28]
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6a1a      	ldr	r2, [r3, #32]
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	2101      	movs	r1, #1
 8009096:	430a      	orrs	r2, r1
 8009098:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2241      	movs	r2, #65	@ 0x41
 80090a4:	2120      	movs	r1, #32
 80090a6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2242      	movs	r2, #66	@ 0x42
 80090b2:	2100      	movs	r1, #0
 80090b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80090b6:	2300      	movs	r3, #0
}
 80090b8:	0018      	movs	r0, r3
 80090ba:	46bd      	mov	sp, r7
 80090bc:	b002      	add	sp, #8
 80090be:	bd80      	pop	{r7, pc}
 80090c0:	f0ffffff 	.word	0xf0ffffff
 80090c4:	ffff7fff 	.word	0xffff7fff
 80090c8:	02008000 	.word	0x02008000

080090cc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 80090cc:	b5b0      	push	{r4, r5, r7, lr}
 80090ce:	b088      	sub	sp, #32
 80090d0:	af02      	add	r7, sp, #8
 80090d2:	60f8      	str	r0, [r7, #12]
 80090d4:	0008      	movs	r0, r1
 80090d6:	607a      	str	r2, [r7, #4]
 80090d8:	0019      	movs	r1, r3
 80090da:	230a      	movs	r3, #10
 80090dc:	18fb      	adds	r3, r7, r3
 80090de:	1c02      	adds	r2, r0, #0
 80090e0:	801a      	strh	r2, [r3, #0]
 80090e2:	2308      	movs	r3, #8
 80090e4:	18fb      	adds	r3, r7, r3
 80090e6:	1c0a      	adds	r2, r1, #0
 80090e8:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	2241      	movs	r2, #65	@ 0x41
 80090ee:	5c9b      	ldrb	r3, [r3, r2]
 80090f0:	b2db      	uxtb	r3, r3
 80090f2:	2b20      	cmp	r3, #32
 80090f4:	d000      	beq.n	80090f8 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80090f6:	e0dd      	b.n	80092b4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	699a      	ldr	r2, [r3, #24]
 80090fe:	2380      	movs	r3, #128	@ 0x80
 8009100:	021b      	lsls	r3, r3, #8
 8009102:	401a      	ands	r2, r3
 8009104:	2380      	movs	r3, #128	@ 0x80
 8009106:	021b      	lsls	r3, r3, #8
 8009108:	429a      	cmp	r2, r3
 800910a:	d101      	bne.n	8009110 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800910c:	2302      	movs	r3, #2
 800910e:	e0d2      	b.n	80092b6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2240      	movs	r2, #64	@ 0x40
 8009114:	5c9b      	ldrb	r3, [r3, r2]
 8009116:	2b01      	cmp	r3, #1
 8009118:	d101      	bne.n	800911e <HAL_I2C_Master_Transmit_DMA+0x52>
 800911a:	2302      	movs	r3, #2
 800911c:	e0cb      	b.n	80092b6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	2240      	movs	r2, #64	@ 0x40
 8009122:	2101      	movs	r1, #1
 8009124:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	2241      	movs	r2, #65	@ 0x41
 800912a:	2121      	movs	r1, #33	@ 0x21
 800912c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	2242      	movs	r2, #66	@ 0x42
 8009132:	2110      	movs	r1, #16
 8009134:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	2200      	movs	r2, #0
 800913a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	687a      	ldr	r2, [r7, #4]
 8009140:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	2208      	movs	r2, #8
 8009146:	18ba      	adds	r2, r7, r2
 8009148:	8812      	ldrh	r2, [r2, #0]
 800914a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800914c:	68fb      	ldr	r3, [r7, #12]
 800914e:	4a5c      	ldr	r2, [pc, #368]	@ (80092c0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 8009150:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	4a5b      	ldr	r2, [pc, #364]	@ (80092c4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8009156:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800915c:	b29b      	uxth	r3, r3
 800915e:	2bff      	cmp	r3, #255	@ 0xff
 8009160:	d906      	bls.n	8009170 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	22ff      	movs	r2, #255	@ 0xff
 8009166:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009168:	2380      	movs	r3, #128	@ 0x80
 800916a:	045b      	lsls	r3, r3, #17
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	e007      	b.n	8009180 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009174:	b29a      	uxth	r2, r3
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800917a:	2380      	movs	r3, #128	@ 0x80
 800917c:	049b      	lsls	r3, r3, #18
 800917e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009184:	2b00      	cmp	r3, #0
 8009186:	d100      	bne.n	800918a <HAL_I2C_Master_Transmit_DMA+0xbe>
 8009188:	e078      	b.n	800927c <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800918e:	2b00      	cmp	r3, #0
 8009190:	d023      	beq.n	80091da <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 8009192:	68fb      	ldr	r3, [r7, #12]
 8009194:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009196:	4a4c      	ldr	r2, [pc, #304]	@ (80092c8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8009198:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800919a:	68fb      	ldr	r3, [r7, #12]
 800919c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800919e:	4a4b      	ldr	r2, [pc, #300]	@ (80092cc <HAL_I2C_Master_Transmit_DMA+0x200>)
 80091a0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091a6:	2200      	movs	r2, #0
 80091a8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091ae:	2200      	movs	r2, #0
 80091b0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80091b6:	6879      	ldr	r1, [r7, #4]
 80091b8:	68fb      	ldr	r3, [r7, #12]
 80091ba:	681b      	ldr	r3, [r3, #0]
 80091bc:	3328      	adds	r3, #40	@ 0x28
 80091be:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 80091c4:	2513      	movs	r5, #19
 80091c6:	197c      	adds	r4, r7, r5
 80091c8:	f7ff fa96 	bl	80086f8 <HAL_DMA_Start_IT>
 80091cc:	0003      	movs	r3, r0
 80091ce:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80091d0:	197b      	adds	r3, r7, r5
 80091d2:	781b      	ldrb	r3, [r3, #0]
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d13d      	bne.n	8009254 <HAL_I2C_Master_Transmit_DMA+0x188>
 80091d8:	e013      	b.n	8009202 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	2241      	movs	r2, #65	@ 0x41
 80091de:	2120      	movs	r1, #32
 80091e0:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2242      	movs	r2, #66	@ 0x42
 80091e6:	2100      	movs	r1, #0
 80091e8:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80091ee:	2280      	movs	r2, #128	@ 0x80
 80091f0:	431a      	orrs	r2, r3
 80091f2:	68fb      	ldr	r3, [r7, #12]
 80091f4:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2240      	movs	r2, #64	@ 0x40
 80091fa:	2100      	movs	r1, #0
 80091fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80091fe:	2301      	movs	r3, #1
 8009200:	e059      	b.n	80092b6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 8009202:	68fb      	ldr	r3, [r7, #12]
 8009204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009206:	b2da      	uxtb	r2, r3
 8009208:	697c      	ldr	r4, [r7, #20]
 800920a:	230a      	movs	r3, #10
 800920c:	18fb      	adds	r3, r7, r3
 800920e:	8819      	ldrh	r1, [r3, #0]
 8009210:	68f8      	ldr	r0, [r7, #12]
 8009212:	4b2f      	ldr	r3, [pc, #188]	@ (80092d0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	0023      	movs	r3, r4
 8009218:	f001 fd0e 	bl	800ac38 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800921c:	68fb      	ldr	r3, [r7, #12]
 800921e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009220:	b29a      	uxth	r2, r3
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009226:	1ad3      	subs	r3, r2, r3
 8009228:	b29a      	uxth	r2, r3
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800922e:	68fb      	ldr	r3, [r7, #12]
 8009230:	2240      	movs	r2, #64	@ 0x40
 8009232:	2100      	movs	r1, #0
 8009234:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	2110      	movs	r1, #16
 800923a:	0018      	movs	r0, r3
 800923c:	f001 fd36 	bl	800acac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	681a      	ldr	r2, [r3, #0]
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	2180      	movs	r1, #128	@ 0x80
 800924c:	01c9      	lsls	r1, r1, #7
 800924e:	430a      	orrs	r2, r1
 8009250:	601a      	str	r2, [r3, #0]
 8009252:	e02d      	b.n	80092b0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2241      	movs	r2, #65	@ 0x41
 8009258:	2120      	movs	r1, #32
 800925a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	2242      	movs	r2, #66	@ 0x42
 8009260:	2100      	movs	r1, #0
 8009262:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009268:	2210      	movs	r2, #16
 800926a:	431a      	orrs	r2, r3
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009270:	68fb      	ldr	r3, [r7, #12]
 8009272:	2240      	movs	r2, #64	@ 0x40
 8009274:	2100      	movs	r1, #0
 8009276:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e01c      	b.n	80092b6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800927c:	68fb      	ldr	r3, [r7, #12]
 800927e:	4a15      	ldr	r2, [pc, #84]	@ (80092d4 <HAL_I2C_Master_Transmit_DMA+0x208>)
 8009280:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009286:	b2da      	uxtb	r2, r3
 8009288:	2380      	movs	r3, #128	@ 0x80
 800928a:	049c      	lsls	r4, r3, #18
 800928c:	230a      	movs	r3, #10
 800928e:	18fb      	adds	r3, r7, r3
 8009290:	8819      	ldrh	r1, [r3, #0]
 8009292:	68f8      	ldr	r0, [r7, #12]
 8009294:	4b0e      	ldr	r3, [pc, #56]	@ (80092d0 <HAL_I2C_Master_Transmit_DMA+0x204>)
 8009296:	9300      	str	r3, [sp, #0]
 8009298:	0023      	movs	r3, r4
 800929a:	f001 fccd 	bl	800ac38 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800929e:	68fb      	ldr	r3, [r7, #12]
 80092a0:	2240      	movs	r2, #64	@ 0x40
 80092a2:	2100      	movs	r1, #0
 80092a4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	2101      	movs	r1, #1
 80092aa:	0018      	movs	r0, r3
 80092ac:	f001 fcfe 	bl	800acac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80092b0:	2300      	movs	r3, #0
 80092b2:	e000      	b.n	80092b6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80092b4:	2302      	movs	r3, #2
  }
}
 80092b6:	0018      	movs	r0, r3
 80092b8:	46bd      	mov	sp, r7
 80092ba:	b006      	add	sp, #24
 80092bc:	bdb0      	pop	{r4, r5, r7, pc}
 80092be:	46c0      	nop			@ (mov r8, r8)
 80092c0:	ffff0000 	.word	0xffff0000
 80092c4:	08009ad1 	.word	0x08009ad1
 80092c8:	0800aa89 	.word	0x0800aa89
 80092cc:	0800abc9 	.word	0x0800abc9
 80092d0:	80002000 	.word	0x80002000
 80092d4:	0800967d 	.word	0x0800967d

080092d8 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 80092d8:	b5b0      	push	{r4, r5, r7, lr}
 80092da:	b088      	sub	sp, #32
 80092dc:	af02      	add	r7, sp, #8
 80092de:	60f8      	str	r0, [r7, #12]
 80092e0:	0008      	movs	r0, r1
 80092e2:	607a      	str	r2, [r7, #4]
 80092e4:	0019      	movs	r1, r3
 80092e6:	230a      	movs	r3, #10
 80092e8:	18fb      	adds	r3, r7, r3
 80092ea:	1c02      	adds	r2, r0, #0
 80092ec:	801a      	strh	r2, [r3, #0]
 80092ee:	2308      	movs	r3, #8
 80092f0:	18fb      	adds	r3, r7, r3
 80092f2:	1c0a      	adds	r2, r1, #0
 80092f4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	2241      	movs	r2, #65	@ 0x41
 80092fa:	5c9b      	ldrb	r3, [r3, r2]
 80092fc:	b2db      	uxtb	r3, r3
 80092fe:	2b20      	cmp	r3, #32
 8009300:	d000      	beq.n	8009304 <HAL_I2C_Master_Receive_DMA+0x2c>
 8009302:	e0dd      	b.n	80094c0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	699a      	ldr	r2, [r3, #24]
 800930a:	2380      	movs	r3, #128	@ 0x80
 800930c:	021b      	lsls	r3, r3, #8
 800930e:	401a      	ands	r2, r3
 8009310:	2380      	movs	r3, #128	@ 0x80
 8009312:	021b      	lsls	r3, r3, #8
 8009314:	429a      	cmp	r2, r3
 8009316:	d101      	bne.n	800931c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 8009318:	2302      	movs	r3, #2
 800931a:	e0d2      	b.n	80094c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2240      	movs	r2, #64	@ 0x40
 8009320:	5c9b      	ldrb	r3, [r3, r2]
 8009322:	2b01      	cmp	r3, #1
 8009324:	d101      	bne.n	800932a <HAL_I2C_Master_Receive_DMA+0x52>
 8009326:	2302      	movs	r3, #2
 8009328:	e0cb      	b.n	80094c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	2240      	movs	r2, #64	@ 0x40
 800932e:	2101      	movs	r1, #1
 8009330:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	2241      	movs	r2, #65	@ 0x41
 8009336:	2122      	movs	r1, #34	@ 0x22
 8009338:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2242      	movs	r2, #66	@ 0x42
 800933e:	2110      	movs	r1, #16
 8009340:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8009342:	68fb      	ldr	r3, [r7, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	687a      	ldr	r2, [r7, #4]
 800934c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2208      	movs	r2, #8
 8009352:	18ba      	adds	r2, r7, r2
 8009354:	8812      	ldrh	r2, [r2, #0]
 8009356:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	4a5c      	ldr	r2, [pc, #368]	@ (80094cc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800935c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4a5b      	ldr	r2, [pc, #364]	@ (80094d0 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 8009362:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009368:	b29b      	uxth	r3, r3
 800936a:	2bff      	cmp	r3, #255	@ 0xff
 800936c:	d906      	bls.n	800937c <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	22ff      	movs	r2, #255	@ 0xff
 8009372:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8009374:	2380      	movs	r3, #128	@ 0x80
 8009376:	045b      	lsls	r3, r3, #17
 8009378:	617b      	str	r3, [r7, #20]
 800937a:	e007      	b.n	800938c <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009380:	b29a      	uxth	r2, r3
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8009386:	2380      	movs	r3, #128	@ 0x80
 8009388:	049b      	lsls	r3, r3, #18
 800938a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009390:	2b00      	cmp	r3, #0
 8009392:	d100      	bne.n	8009396 <HAL_I2C_Master_Receive_DMA+0xbe>
 8009394:	e078      	b.n	8009488 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800939a:	2b00      	cmp	r3, #0
 800939c:	d023      	beq.n	80093e6 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093a2:	4a4c      	ldr	r2, [pc, #304]	@ (80094d4 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 80093a4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093aa:	4a4b      	ldr	r2, [pc, #300]	@ (80094d8 <HAL_I2C_Master_Receive_DMA+0x200>)
 80093ac:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093b2:	2200      	movs	r2, #0
 80093b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80093ba:	2200      	movs	r2, #0
 80093bc:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	3324      	adds	r3, #36	@ 0x24
 80093c8:	0019      	movs	r1, r3
 80093ca:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 80093d0:	2513      	movs	r5, #19
 80093d2:	197c      	adds	r4, r7, r5
 80093d4:	f7ff f990 	bl	80086f8 <HAL_DMA_Start_IT>
 80093d8:	0003      	movs	r3, r0
 80093da:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80093dc:	197b      	adds	r3, r7, r5
 80093de:	781b      	ldrb	r3, [r3, #0]
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d13d      	bne.n	8009460 <HAL_I2C_Master_Receive_DMA+0x188>
 80093e4:	e013      	b.n	800940e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	2241      	movs	r2, #65	@ 0x41
 80093ea:	2120      	movs	r1, #32
 80093ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2242      	movs	r2, #66	@ 0x42
 80093f2:	2100      	movs	r1, #0
 80093f4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80093fa:	2280      	movs	r2, #128	@ 0x80
 80093fc:	431a      	orrs	r2, r3
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2240      	movs	r2, #64	@ 0x40
 8009406:	2100      	movs	r1, #0
 8009408:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800940a:	2301      	movs	r3, #1
 800940c:	e059      	b.n	80094c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800940e:	68fb      	ldr	r3, [r7, #12]
 8009410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009412:	b2da      	uxtb	r2, r3
 8009414:	697c      	ldr	r4, [r7, #20]
 8009416:	230a      	movs	r3, #10
 8009418:	18fb      	adds	r3, r7, r3
 800941a:	8819      	ldrh	r1, [r3, #0]
 800941c:	68f8      	ldr	r0, [r7, #12]
 800941e:	4b2f      	ldr	r3, [pc, #188]	@ (80094dc <HAL_I2C_Master_Receive_DMA+0x204>)
 8009420:	9300      	str	r3, [sp, #0]
 8009422:	0023      	movs	r3, r4
 8009424:	f001 fc08 	bl	800ac38 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800942c:	b29a      	uxth	r2, r3
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009432:	1ad3      	subs	r3, r2, r3
 8009434:	b29a      	uxth	r2, r3
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	2240      	movs	r2, #64	@ 0x40
 800943e:	2100      	movs	r1, #0
 8009440:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009442:	68fb      	ldr	r3, [r7, #12]
 8009444:	2110      	movs	r1, #16
 8009446:	0018      	movs	r0, r3
 8009448:	f001 fc30 	bl	800acac <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	681a      	ldr	r2, [r3, #0]
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	681b      	ldr	r3, [r3, #0]
 8009456:	2180      	movs	r1, #128	@ 0x80
 8009458:	0209      	lsls	r1, r1, #8
 800945a:	430a      	orrs	r2, r1
 800945c:	601a      	str	r2, [r3, #0]
 800945e:	e02d      	b.n	80094bc <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2241      	movs	r2, #65	@ 0x41
 8009464:	2120      	movs	r1, #32
 8009466:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	2242      	movs	r2, #66	@ 0x42
 800946c:	2100      	movs	r1, #0
 800946e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009474:	2210      	movs	r2, #16
 8009476:	431a      	orrs	r2, r3
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	2240      	movs	r2, #64	@ 0x40
 8009480:	2100      	movs	r1, #0
 8009482:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8009484:	2301      	movs	r3, #1
 8009486:	e01c      	b.n	80094c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	4a15      	ldr	r2, [pc, #84]	@ (80094e0 <HAL_I2C_Master_Receive_DMA+0x208>)
 800948c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009492:	b2da      	uxtb	r2, r3
 8009494:	2380      	movs	r3, #128	@ 0x80
 8009496:	049c      	lsls	r4, r3, #18
 8009498:	230a      	movs	r3, #10
 800949a:	18fb      	adds	r3, r7, r3
 800949c:	8819      	ldrh	r1, [r3, #0]
 800949e:	68f8      	ldr	r0, [r7, #12]
 80094a0:	4b0e      	ldr	r3, [pc, #56]	@ (80094dc <HAL_I2C_Master_Receive_DMA+0x204>)
 80094a2:	9300      	str	r3, [sp, #0]
 80094a4:	0023      	movs	r3, r4
 80094a6:	f001 fbc7 	bl	800ac38 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2240      	movs	r2, #64	@ 0x40
 80094ae:	2100      	movs	r1, #0
 80094b0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	2101      	movs	r1, #1
 80094b6:	0018      	movs	r0, r3
 80094b8:	f001 fbf8 	bl	800acac <I2C_Enable_IRQ>
    }

    return HAL_OK;
 80094bc:	2300      	movs	r3, #0
 80094be:	e000      	b.n	80094c2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80094c0:	2302      	movs	r3, #2
  }
}
 80094c2:	0018      	movs	r0, r3
 80094c4:	46bd      	mov	sp, r7
 80094c6:	b006      	add	sp, #24
 80094c8:	bdb0      	pop	{r4, r5, r7, pc}
 80094ca:	46c0      	nop			@ (mov r8, r8)
 80094cc:	ffff0000 	.word	0xffff0000
 80094d0:	08009ad1 	.word	0x08009ad1
 80094d4:	0800ab29 	.word	0x0800ab29
 80094d8:	0800abc9 	.word	0x0800abc9
 80094dc:	80002400 	.word	0x80002400
 80094e0:	0800967d 	.word	0x0800967d

080094e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b084      	sub	sp, #16
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	699b      	ldr	r3, [r3, #24]
 80094f2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009500:	2b00      	cmp	r3, #0
 8009502:	d005      	beq.n	8009510 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009508:	68ba      	ldr	r2, [r7, #8]
 800950a:	68f9      	ldr	r1, [r7, #12]
 800950c:	6878      	ldr	r0, [r7, #4]
 800950e:	4798      	blx	r3
  }
}
 8009510:	46c0      	nop			@ (mov r8, r8)
 8009512:	46bd      	mov	sp, r7
 8009514:	b004      	add	sp, #16
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b086      	sub	sp, #24
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	699b      	ldr	r3, [r3, #24]
 8009526:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009530:	697a      	ldr	r2, [r7, #20]
 8009532:	2380      	movs	r3, #128	@ 0x80
 8009534:	005b      	lsls	r3, r3, #1
 8009536:	4013      	ands	r3, r2
 8009538:	d00e      	beq.n	8009558 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	2280      	movs	r2, #128	@ 0x80
 800953e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8009540:	d00a      	beq.n	8009558 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009546:	2201      	movs	r2, #1
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	2280      	movs	r2, #128	@ 0x80
 8009554:	0052      	lsls	r2, r2, #1
 8009556:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009558:	697a      	ldr	r2, [r7, #20]
 800955a:	2380      	movs	r3, #128	@ 0x80
 800955c:	00db      	lsls	r3, r3, #3
 800955e:	4013      	ands	r3, r2
 8009560:	d00e      	beq.n	8009580 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8009562:	693b      	ldr	r3, [r7, #16]
 8009564:	2280      	movs	r2, #128	@ 0x80
 8009566:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8009568:	d00a      	beq.n	8009580 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800956e:	2208      	movs	r2, #8
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	2280      	movs	r2, #128	@ 0x80
 800957c:	00d2      	lsls	r2, r2, #3
 800957e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009580:	697a      	ldr	r2, [r7, #20]
 8009582:	2380      	movs	r3, #128	@ 0x80
 8009584:	009b      	lsls	r3, r3, #2
 8009586:	4013      	ands	r3, r2
 8009588:	d00e      	beq.n	80095a8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800958a:	693b      	ldr	r3, [r7, #16]
 800958c:	2280      	movs	r2, #128	@ 0x80
 800958e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8009590:	d00a      	beq.n	80095a8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009596:	2202      	movs	r2, #2
 8009598:	431a      	orrs	r2, r3
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	2280      	movs	r2, #128	@ 0x80
 80095a4:	0092      	lsls	r2, r2, #2
 80095a6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80095ac:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	220b      	movs	r2, #11
 80095b2:	4013      	ands	r3, r2
 80095b4:	d005      	beq.n	80095c2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 80095b6:	68fa      	ldr	r2, [r7, #12]
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	0011      	movs	r1, r2
 80095bc:	0018      	movs	r0, r3
 80095be:	f001 f915 	bl	800a7ec <I2C_ITError>
  }
}
 80095c2:	46c0      	nop			@ (mov r8, r8)
 80095c4:	46bd      	mov	sp, r7
 80095c6:	b006      	add	sp, #24
 80095c8:	bd80      	pop	{r7, pc}

080095ca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095ca:	b580      	push	{r7, lr}
 80095cc:	b082      	sub	sp, #8
 80095ce:	af00      	add	r7, sp, #0
 80095d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80095d2:	46c0      	nop			@ (mov r8, r8)
 80095d4:	46bd      	mov	sp, r7
 80095d6:	b002      	add	sp, #8
 80095d8:	bd80      	pop	{r7, pc}

080095da <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095da:	b580      	push	{r7, lr}
 80095dc:	b082      	sub	sp, #8
 80095de:	af00      	add	r7, sp, #0
 80095e0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 80095e2:	46c0      	nop			@ (mov r8, r8)
 80095e4:	46bd      	mov	sp, r7
 80095e6:	b002      	add	sp, #8
 80095e8:	bd80      	pop	{r7, pc}

080095ea <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095ea:	b580      	push	{r7, lr}
 80095ec:	b082      	sub	sp, #8
 80095ee:	af00      	add	r7, sp, #0
 80095f0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80095f2:	46c0      	nop			@ (mov r8, r8)
 80095f4:	46bd      	mov	sp, r7
 80095f6:	b002      	add	sp, #8
 80095f8:	bd80      	pop	{r7, pc}

080095fa <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80095fa:	b580      	push	{r7, lr}
 80095fc:	b082      	sub	sp, #8
 80095fe:	af00      	add	r7, sp, #0
 8009600:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8009602:	46c0      	nop			@ (mov r8, r8)
 8009604:	46bd      	mov	sp, r7
 8009606:	b002      	add	sp, #8
 8009608:	bd80      	pop	{r7, pc}

0800960a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
 8009612:	0008      	movs	r0, r1
 8009614:	0011      	movs	r1, r2
 8009616:	1cfb      	adds	r3, r7, #3
 8009618:	1c02      	adds	r2, r0, #0
 800961a:	701a      	strb	r2, [r3, #0]
 800961c:	003b      	movs	r3, r7
 800961e:	1c0a      	adds	r2, r1, #0
 8009620:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8009622:	46c0      	nop			@ (mov r8, r8)
 8009624:	46bd      	mov	sp, r7
 8009626:	b002      	add	sp, #8
 8009628:	bd80      	pop	{r7, pc}

0800962a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800962a:	b580      	push	{r7, lr}
 800962c:	b082      	sub	sp, #8
 800962e:	af00      	add	r7, sp, #0
 8009630:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8009632:	46c0      	nop			@ (mov r8, r8)
 8009634:	46bd      	mov	sp, r7
 8009636:	b002      	add	sp, #8
 8009638:	bd80      	pop	{r7, pc}

0800963a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800963a:	b580      	push	{r7, lr}
 800963c:	b082      	sub	sp, #8
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8009642:	46c0      	nop			@ (mov r8, r8)
 8009644:	46bd      	mov	sp, r7
 8009646:	b002      	add	sp, #8
 8009648:	bd80      	pop	{r7, pc}

0800964a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800964a:	b580      	push	{r7, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
 8009650:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8009652:	46c0      	nop			@ (mov r8, r8)
 8009654:	46bd      	mov	sp, r7
 8009656:	b002      	add	sp, #8
 8009658:	bd80      	pop	{r7, pc}

0800965a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800965a:	b580      	push	{r7, lr}
 800965c:	b082      	sub	sp, #8
 800965e:	af00      	add	r7, sp, #0
 8009660:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8009662:	46c0      	nop			@ (mov r8, r8)
 8009664:	46bd      	mov	sp, r7
 8009666:	b002      	add	sp, #8
 8009668:	bd80      	pop	{r7, pc}

0800966a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800966a:	b580      	push	{r7, lr}
 800966c:	b082      	sub	sp, #8
 800966e:	af00      	add	r7, sp, #0
 8009670:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8009672:	46c0      	nop			@ (mov r8, r8)
 8009674:	46bd      	mov	sp, r7
 8009676:	b002      	add	sp, #8
 8009678:	bd80      	pop	{r7, pc}
	...

0800967c <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800967c:	b590      	push	{r4, r7, lr}
 800967e:	b089      	sub	sp, #36	@ 0x24
 8009680:	af02      	add	r7, sp, #8
 8009682:	60f8      	str	r0, [r7, #12]
 8009684:	60b9      	str	r1, [r7, #8]
 8009686:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8009688:	68bb      	ldr	r3, [r7, #8]
 800968a:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2240      	movs	r2, #64	@ 0x40
 8009690:	5c9b      	ldrb	r3, [r3, r2]
 8009692:	2b01      	cmp	r3, #1
 8009694:	d101      	bne.n	800969a <I2C_Master_ISR_IT+0x1e>
 8009696:	2302      	movs	r3, #2
 8009698:	e113      	b.n	80098c2 <I2C_Master_ISR_IT+0x246>
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	2240      	movs	r2, #64	@ 0x40
 800969e:	2101      	movs	r1, #1
 80096a0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80096a2:	697b      	ldr	r3, [r7, #20]
 80096a4:	2210      	movs	r2, #16
 80096a6:	4013      	ands	r3, r2
 80096a8:	d012      	beq.n	80096d0 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2210      	movs	r2, #16
 80096ae:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80096b0:	d00e      	beq.n	80096d0 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	2210      	movs	r2, #16
 80096b8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80096be:	2204      	movs	r2, #4
 80096c0:	431a      	orrs	r2, r3
 80096c2:	68fb      	ldr	r3, [r7, #12]
 80096c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	0018      	movs	r0, r3
 80096ca:	f001 f9ba 	bl	800aa42 <I2C_Flush_TXDR>
 80096ce:	e0e5      	b.n	800989c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80096d0:	697b      	ldr	r3, [r7, #20]
 80096d2:	2204      	movs	r2, #4
 80096d4:	4013      	ands	r3, r2
 80096d6:	d021      	beq.n	800971c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2204      	movs	r2, #4
 80096dc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80096de:	d01d      	beq.n	800971c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80096e0:	697b      	ldr	r3, [r7, #20]
 80096e2:	2204      	movs	r2, #4
 80096e4:	4393      	bics	r3, r2
 80096e6:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096f2:	b2d2      	uxtb	r2, r2
 80096f4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096fa:	1c5a      	adds	r2, r3, #1
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009704:	3b01      	subs	r3, #1
 8009706:	b29a      	uxth	r2, r3
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800970c:	68fb      	ldr	r3, [r7, #12]
 800970e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009710:	b29b      	uxth	r3, r3
 8009712:	3b01      	subs	r3, #1
 8009714:	b29a      	uxth	r2, r3
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800971a:	e0bf      	b.n	800989c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	2202      	movs	r2, #2
 8009720:	4013      	ands	r3, r2
 8009722:	d01c      	beq.n	800975e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	2202      	movs	r2, #2
 8009728:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800972a:	d018      	beq.n	800975e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009730:	781a      	ldrb	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800973c:	1c5a      	adds	r2, r3, #1
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009746:	3b01      	subs	r3, #1
 8009748:	b29a      	uxth	r2, r3
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800974e:	68fb      	ldr	r3, [r7, #12]
 8009750:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009752:	b29b      	uxth	r3, r3
 8009754:	3b01      	subs	r3, #1
 8009756:	b29a      	uxth	r2, r3
 8009758:	68fb      	ldr	r3, [r7, #12]
 800975a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800975c:	e09e      	b.n	800989c <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800975e:	697b      	ldr	r3, [r7, #20]
 8009760:	2280      	movs	r2, #128	@ 0x80
 8009762:	4013      	ands	r3, r2
 8009764:	d100      	bne.n	8009768 <I2C_Master_ISR_IT+0xec>
 8009766:	e069      	b.n	800983c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	2240      	movs	r2, #64	@ 0x40
 800976c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800976e:	d065      	beq.n	800983c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009774:	b29b      	uxth	r3, r3
 8009776:	2b00      	cmp	r3, #0
 8009778:	d04a      	beq.n	8009810 <I2C_Master_ISR_IT+0x194>
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800977e:	2b00      	cmp	r3, #0
 8009780:	d146      	bne.n	8009810 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	b29a      	uxth	r2, r3
 800978a:	2112      	movs	r1, #18
 800978c:	187b      	adds	r3, r7, r1
 800978e:	0592      	lsls	r2, r2, #22
 8009790:	0d92      	lsrs	r2, r2, #22
 8009792:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009798:	b29b      	uxth	r3, r3
 800979a:	2bff      	cmp	r3, #255	@ 0xff
 800979c:	d910      	bls.n	80097c0 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	22ff      	movs	r2, #255	@ 0xff
 80097a2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80097a4:	68fb      	ldr	r3, [r7, #12]
 80097a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097a8:	b2da      	uxtb	r2, r3
 80097aa:	2380      	movs	r3, #128	@ 0x80
 80097ac:	045c      	lsls	r4, r3, #17
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	8819      	ldrh	r1, [r3, #0]
 80097b2:	68f8      	ldr	r0, [r7, #12]
 80097b4:	2300      	movs	r3, #0
 80097b6:	9300      	str	r3, [sp, #0]
 80097b8:	0023      	movs	r3, r4
 80097ba:	f001 fa3d 	bl	800ac38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097be:	e03c      	b.n	800983a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80097c4:	b29a      	uxth	r2, r3
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80097ce:	4a3f      	ldr	r2, [pc, #252]	@ (80098cc <I2C_Master_ISR_IT+0x250>)
 80097d0:	4293      	cmp	r3, r2
 80097d2:	d00e      	beq.n	80097f2 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097d8:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80097de:	2312      	movs	r3, #18
 80097e0:	18fb      	adds	r3, r7, r3
 80097e2:	8819      	ldrh	r1, [r3, #0]
 80097e4:	68f8      	ldr	r0, [r7, #12]
 80097e6:	2300      	movs	r3, #0
 80097e8:	9300      	str	r3, [sp, #0]
 80097ea:	0023      	movs	r3, r4
 80097ec:	f001 fa24 	bl	800ac38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80097f0:	e023      	b.n	800983a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80097f6:	b2da      	uxtb	r2, r3
 80097f8:	2380      	movs	r3, #128	@ 0x80
 80097fa:	049c      	lsls	r4, r3, #18
 80097fc:	2312      	movs	r3, #18
 80097fe:	18fb      	adds	r3, r7, r3
 8009800:	8819      	ldrh	r1, [r3, #0]
 8009802:	68f8      	ldr	r0, [r7, #12]
 8009804:	2300      	movs	r3, #0
 8009806:	9300      	str	r3, [sp, #0]
 8009808:	0023      	movs	r3, r4
 800980a:	f001 fa15 	bl	800ac38 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800980e:	e014      	b.n	800983a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009810:	68fb      	ldr	r3, [r7, #12]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	685a      	ldr	r2, [r3, #4]
 8009816:	2380      	movs	r3, #128	@ 0x80
 8009818:	049b      	lsls	r3, r3, #18
 800981a:	401a      	ands	r2, r3
 800981c:	2380      	movs	r3, #128	@ 0x80
 800981e:	049b      	lsls	r3, r3, #18
 8009820:	429a      	cmp	r2, r3
 8009822:	d004      	beq.n	800982e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	0018      	movs	r0, r3
 8009828:	f000 fcf4 	bl	800a214 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800982c:	e036      	b.n	800989c <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2140      	movs	r1, #64	@ 0x40
 8009832:	0018      	movs	r0, r3
 8009834:	f000 ffda 	bl	800a7ec <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009838:	e030      	b.n	800989c <I2C_Master_ISR_IT+0x220>
 800983a:	e02f      	b.n	800989c <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800983c:	697b      	ldr	r3, [r7, #20]
 800983e:	2240      	movs	r2, #64	@ 0x40
 8009840:	4013      	ands	r3, r2
 8009842:	d02b      	beq.n	800989c <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2240      	movs	r2, #64	@ 0x40
 8009848:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800984a:	d027      	beq.n	800989c <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009850:	b29b      	uxth	r3, r3
 8009852:	2b00      	cmp	r3, #0
 8009854:	d11d      	bne.n	8009892 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	685a      	ldr	r2, [r3, #4]
 800985c:	2380      	movs	r3, #128	@ 0x80
 800985e:	049b      	lsls	r3, r3, #18
 8009860:	401a      	ands	r2, r3
 8009862:	2380      	movs	r3, #128	@ 0x80
 8009864:	049b      	lsls	r3, r3, #18
 8009866:	429a      	cmp	r2, r3
 8009868:	d018      	beq.n	800989c <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800986a:	68fb      	ldr	r3, [r7, #12]
 800986c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800986e:	4a17      	ldr	r2, [pc, #92]	@ (80098cc <I2C_Master_ISR_IT+0x250>)
 8009870:	4293      	cmp	r3, r2
 8009872:	d109      	bne.n	8009888 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	685a      	ldr	r2, [r3, #4]
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2180      	movs	r1, #128	@ 0x80
 8009880:	01c9      	lsls	r1, r1, #7
 8009882:	430a      	orrs	r2, r1
 8009884:	605a      	str	r2, [r3, #4]
 8009886:	e009      	b.n	800989c <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	0018      	movs	r0, r3
 800988c:	f000 fcc2 	bl	800a214 <I2C_ITMasterSeqCplt>
 8009890:	e004      	b.n	800989c <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	2140      	movs	r1, #64	@ 0x40
 8009896:	0018      	movs	r0, r3
 8009898:	f000 ffa8 	bl	800a7ec <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800989c:	697b      	ldr	r3, [r7, #20]
 800989e:	2220      	movs	r2, #32
 80098a0:	4013      	ands	r3, r2
 80098a2:	d009      	beq.n	80098b8 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	2220      	movs	r2, #32
 80098a8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80098aa:	d005      	beq.n	80098b8 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80098ac:	697a      	ldr	r2, [r7, #20]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	0011      	movs	r1, r2
 80098b2:	0018      	movs	r0, r3
 80098b4:	f000 fd54 	bl	800a360 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	2240      	movs	r2, #64	@ 0x40
 80098bc:	2100      	movs	r1, #0
 80098be:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098c0:	2300      	movs	r3, #0
}
 80098c2:	0018      	movs	r0, r3
 80098c4:	46bd      	mov	sp, r7
 80098c6:	b007      	add	sp, #28
 80098c8:	bd90      	pop	{r4, r7, pc}
 80098ca:	46c0      	nop			@ (mov r8, r8)
 80098cc:	ffff0000 	.word	0xffff0000

080098d0 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b086      	sub	sp, #24
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	60f8      	str	r0, [r7, #12]
 80098d8:	60b9      	str	r1, [r7, #8]
 80098da:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098e0:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	2240      	movs	r2, #64	@ 0x40
 80098ea:	5c9b      	ldrb	r3, [r3, r2]
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d101      	bne.n	80098f4 <I2C_Slave_ISR_IT+0x24>
 80098f0:	2302      	movs	r3, #2
 80098f2:	e0e6      	b.n	8009ac2 <I2C_Slave_ISR_IT+0x1f2>
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	2240      	movs	r2, #64	@ 0x40
 80098f8:	2101      	movs	r1, #1
 80098fa:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80098fc:	693b      	ldr	r3, [r7, #16]
 80098fe:	2220      	movs	r2, #32
 8009900:	4013      	ands	r3, r2
 8009902:	d009      	beq.n	8009918 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2220      	movs	r2, #32
 8009908:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800990a:	d005      	beq.n	8009918 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800990c:	693a      	ldr	r2, [r7, #16]
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	0011      	movs	r1, r2
 8009912:	0018      	movs	r0, r3
 8009914:	f000 fdf2 	bl	800a4fc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009918:	693b      	ldr	r3, [r7, #16]
 800991a:	2210      	movs	r2, #16
 800991c:	4013      	ands	r3, r2
 800991e:	d052      	beq.n	80099c6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2210      	movs	r2, #16
 8009924:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8009926:	d04e      	beq.n	80099c6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800992c:	b29b      	uxth	r3, r3
 800992e:	2b00      	cmp	r3, #0
 8009930:	d12d      	bne.n	800998e <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2241      	movs	r2, #65	@ 0x41
 8009936:	5c9b      	ldrb	r3, [r3, r2]
 8009938:	b2db      	uxtb	r3, r3
 800993a:	2b28      	cmp	r3, #40	@ 0x28
 800993c:	d10b      	bne.n	8009956 <I2C_Slave_ISR_IT+0x86>
 800993e:	697a      	ldr	r2, [r7, #20]
 8009940:	2380      	movs	r3, #128	@ 0x80
 8009942:	049b      	lsls	r3, r3, #18
 8009944:	429a      	cmp	r2, r3
 8009946:	d106      	bne.n	8009956 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	68fb      	ldr	r3, [r7, #12]
 800994c:	0011      	movs	r1, r2
 800994e:	0018      	movs	r0, r3
 8009950:	f000 fef4 	bl	800a73c <I2C_ITListenCplt>
 8009954:	e036      	b.n	80099c4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	2241      	movs	r2, #65	@ 0x41
 800995a:	5c9b      	ldrb	r3, [r3, r2]
 800995c:	b2db      	uxtb	r3, r3
 800995e:	2b29      	cmp	r3, #41	@ 0x29
 8009960:	d110      	bne.n	8009984 <I2C_Slave_ISR_IT+0xb4>
 8009962:	697b      	ldr	r3, [r7, #20]
 8009964:	4a59      	ldr	r2, [pc, #356]	@ (8009acc <I2C_Slave_ISR_IT+0x1fc>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d00c      	beq.n	8009984 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800996a:	68fb      	ldr	r3, [r7, #12]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	2210      	movs	r2, #16
 8009970:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	0018      	movs	r0, r3
 8009976:	f001 f864 	bl	800aa42 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	0018      	movs	r0, r3
 800997e:	f000 fc8b 	bl	800a298 <I2C_ITSlaveSeqCplt>
 8009982:	e01f      	b.n	80099c4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	2210      	movs	r2, #16
 800998a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800998c:	e091      	b.n	8009ab2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2210      	movs	r2, #16
 8009994:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800999a:	2204      	movs	r2, #4
 800999c:	431a      	orrs	r2, r3
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80099a2:	697b      	ldr	r3, [r7, #20]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d005      	beq.n	80099b4 <I2C_Slave_ISR_IT+0xe4>
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	2380      	movs	r3, #128	@ 0x80
 80099ac:	045b      	lsls	r3, r3, #17
 80099ae:	429a      	cmp	r2, r3
 80099b0:	d000      	beq.n	80099b4 <I2C_Slave_ISR_IT+0xe4>
 80099b2:	e07e      	b.n	8009ab2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	0011      	movs	r1, r2
 80099bc:	0018      	movs	r0, r3
 80099be:	f000 ff15 	bl	800a7ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80099c2:	e076      	b.n	8009ab2 <I2C_Slave_ISR_IT+0x1e2>
 80099c4:	e075      	b.n	8009ab2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80099c6:	693b      	ldr	r3, [r7, #16]
 80099c8:	2204      	movs	r2, #4
 80099ca:	4013      	ands	r3, r2
 80099cc:	d02f      	beq.n	8009a2e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	2204      	movs	r2, #4
 80099d2:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80099d4:	d02b      	beq.n	8009a2e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80099da:	b29b      	uxth	r3, r3
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d018      	beq.n	8009a12 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099ea:	b2d2      	uxtb	r2, r2
 80099ec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099f2:	1c5a      	adds	r2, r3, #1
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80099fc:	3b01      	subs	r3, #1
 80099fe:	b29a      	uxth	r2, r3
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a08:	b29b      	uxth	r3, r3
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	b29a      	uxth	r2, r3
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a16:	b29b      	uxth	r3, r3
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d14c      	bne.n	8009ab6 <I2C_Slave_ISR_IT+0x1e6>
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	4a2b      	ldr	r2, [pc, #172]	@ (8009acc <I2C_Slave_ISR_IT+0x1fc>)
 8009a20:	4293      	cmp	r3, r2
 8009a22:	d048      	beq.n	8009ab6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	0018      	movs	r0, r3
 8009a28:	f000 fc36 	bl	800a298 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8009a2c:	e043      	b.n	8009ab6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009a2e:	693b      	ldr	r3, [r7, #16]
 8009a30:	2208      	movs	r2, #8
 8009a32:	4013      	ands	r3, r2
 8009a34:	d00a      	beq.n	8009a4c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2208      	movs	r2, #8
 8009a3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8009a3c:	d006      	beq.n	8009a4c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8009a3e:	693a      	ldr	r2, [r7, #16]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	0011      	movs	r1, r2
 8009a44:	0018      	movs	r0, r3
 8009a46:	f000 fb41 	bl	800a0cc <I2C_ITAddrCplt>
 8009a4a:	e035      	b.n	8009ab8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009a4c:	693b      	ldr	r3, [r7, #16]
 8009a4e:	2202      	movs	r2, #2
 8009a50:	4013      	ands	r3, r2
 8009a52:	d031      	beq.n	8009ab8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	2202      	movs	r2, #2
 8009a58:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009a5a:	d02d      	beq.n	8009ab8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d018      	beq.n	8009a98 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a6a:	781a      	ldrb	r2, [r3, #0]
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009a76:	1c5a      	adds	r2, r3, #1
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009a80:	b29b      	uxth	r3, r3
 8009a82:	3b01      	subs	r3, #1
 8009a84:	b29a      	uxth	r2, r3
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	851a      	strh	r2, [r3, #40]	@ 0x28
 8009a96:	e00f      	b.n	8009ab8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	2380      	movs	r3, #128	@ 0x80
 8009a9c:	045b      	lsls	r3, r3, #17
 8009a9e:	429a      	cmp	r2, r3
 8009aa0:	d002      	beq.n	8009aa8 <I2C_Slave_ISR_IT+0x1d8>
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d107      	bne.n	8009ab8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	0018      	movs	r0, r3
 8009aac:	f000 fbf4 	bl	800a298 <I2C_ITSlaveSeqCplt>
 8009ab0:	e002      	b.n	8009ab8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8009ab2:	46c0      	nop			@ (mov r8, r8)
 8009ab4:	e000      	b.n	8009ab8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8009ab6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	2240      	movs	r2, #64	@ 0x40
 8009abc:	2100      	movs	r1, #0
 8009abe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009ac0:	2300      	movs	r3, #0
}
 8009ac2:	0018      	movs	r0, r3
 8009ac4:	46bd      	mov	sp, r7
 8009ac6:	b006      	add	sp, #24
 8009ac8:	bd80      	pop	{r7, pc}
 8009aca:	46c0      	nop			@ (mov r8, r8)
 8009acc:	ffff0000 	.word	0xffff0000

08009ad0 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8009ad0:	b590      	push	{r4, r7, lr}
 8009ad2:	b089      	sub	sp, #36	@ 0x24
 8009ad4:	af02      	add	r7, sp, #8
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009adc:	68fb      	ldr	r3, [r7, #12]
 8009ade:	2240      	movs	r2, #64	@ 0x40
 8009ae0:	5c9b      	ldrb	r3, [r3, r2]
 8009ae2:	2b01      	cmp	r3, #1
 8009ae4:	d101      	bne.n	8009aea <I2C_Master_ISR_DMA+0x1a>
 8009ae6:	2302      	movs	r3, #2
 8009ae8:	e0e7      	b.n	8009cba <I2C_Master_ISR_DMA+0x1ea>
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	2240      	movs	r2, #64	@ 0x40
 8009aee:	2101      	movs	r1, #1
 8009af0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2210      	movs	r2, #16
 8009af6:	4013      	ands	r3, r2
 8009af8:	d017      	beq.n	8009b2a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	2210      	movs	r2, #16
 8009afe:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009b00:	d013      	beq.n	8009b2a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	2210      	movs	r2, #16
 8009b08:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009b0e:	2204      	movs	r2, #4
 8009b10:	431a      	orrs	r2, r3
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	2120      	movs	r1, #32
 8009b1a:	0018      	movs	r0, r3
 8009b1c:	f001 f8c6 	bl	800acac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	0018      	movs	r0, r3
 8009b24:	f000 ff8d 	bl	800aa42 <I2C_Flush_TXDR>
 8009b28:	e0c2      	b.n	8009cb0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b2a:	68bb      	ldr	r3, [r7, #8]
 8009b2c:	2280      	movs	r2, #128	@ 0x80
 8009b2e:	4013      	ands	r3, r2
 8009b30:	d100      	bne.n	8009b34 <I2C_Master_ISR_DMA+0x64>
 8009b32:	e07c      	b.n	8009c2e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2240      	movs	r2, #64	@ 0x40
 8009b38:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009b3a:	d100      	bne.n	8009b3e <I2C_Master_ISR_DMA+0x6e>
 8009b3c:	e077      	b.n	8009c2e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	681a      	ldr	r2, [r3, #0]
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	2140      	movs	r1, #64	@ 0x40
 8009b4a:	438a      	bics	r2, r1
 8009b4c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b52:	b29b      	uxth	r3, r3
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d055      	beq.n	8009c04 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	681b      	ldr	r3, [r3, #0]
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	2312      	movs	r3, #18
 8009b62:	18fb      	adds	r3, r7, r3
 8009b64:	0592      	lsls	r2, r2, #22
 8009b66:	0d92      	lsrs	r2, r2, #22
 8009b68:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b6e:	b29b      	uxth	r3, r3
 8009b70:	2bff      	cmp	r3, #255	@ 0xff
 8009b72:	d906      	bls.n	8009b82 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	22ff      	movs	r2, #255	@ 0xff
 8009b78:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8009b7a:	2380      	movs	r3, #128	@ 0x80
 8009b7c:	045b      	lsls	r3, r3, #17
 8009b7e:	617b      	str	r3, [r7, #20]
 8009b80:	e010      	b.n	8009ba4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b90:	4a4c      	ldr	r2, [pc, #304]	@ (8009cc4 <I2C_Master_ISR_DMA+0x1f4>)
 8009b92:	4293      	cmp	r3, r2
 8009b94:	d003      	beq.n	8009b9e <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009b9a:	617b      	str	r3, [r7, #20]
 8009b9c:	e002      	b.n	8009ba4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8009b9e:	2380      	movs	r3, #128	@ 0x80
 8009ba0:	049b      	lsls	r3, r3, #18
 8009ba2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009ba8:	b2da      	uxtb	r2, r3
 8009baa:	697c      	ldr	r4, [r7, #20]
 8009bac:	2312      	movs	r3, #18
 8009bae:	18fb      	adds	r3, r7, r3
 8009bb0:	8819      	ldrh	r1, [r3, #0]
 8009bb2:	68f8      	ldr	r0, [r7, #12]
 8009bb4:	2300      	movs	r3, #0
 8009bb6:	9300      	str	r3, [sp, #0]
 8009bb8:	0023      	movs	r3, r4
 8009bba:	f001 f83d 	bl	800ac38 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009bc2:	b29a      	uxth	r2, r3
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009bc8:	1ad3      	subs	r3, r2, r3
 8009bca:	b29a      	uxth	r2, r3
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	2241      	movs	r2, #65	@ 0x41
 8009bd4:	5c9b      	ldrb	r3, [r3, r2]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b22      	cmp	r3, #34	@ 0x22
 8009bda:	d109      	bne.n	8009bf0 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	681a      	ldr	r2, [r3, #0]
 8009be2:	68fb      	ldr	r3, [r7, #12]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	2180      	movs	r1, #128	@ 0x80
 8009be8:	0209      	lsls	r1, r1, #8
 8009bea:	430a      	orrs	r2, r1
 8009bec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009bee:	e05f      	b.n	8009cb0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009bf0:	68fb      	ldr	r3, [r7, #12]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	681a      	ldr	r2, [r3, #0]
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	2180      	movs	r1, #128	@ 0x80
 8009bfc:	01c9      	lsls	r1, r1, #7
 8009bfe:	430a      	orrs	r2, r1
 8009c00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009c02:	e055      	b.n	8009cb0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	685a      	ldr	r2, [r3, #4]
 8009c0a:	2380      	movs	r3, #128	@ 0x80
 8009c0c:	049b      	lsls	r3, r3, #18
 8009c0e:	401a      	ands	r2, r3
 8009c10:	2380      	movs	r3, #128	@ 0x80
 8009c12:	049b      	lsls	r3, r3, #18
 8009c14:	429a      	cmp	r2, r3
 8009c16:	d004      	beq.n	8009c22 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	f000 fafa 	bl	800a214 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8009c20:	e046      	b.n	8009cb0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009c22:	68fb      	ldr	r3, [r7, #12]
 8009c24:	2140      	movs	r1, #64	@ 0x40
 8009c26:	0018      	movs	r0, r3
 8009c28:	f000 fde0 	bl	800a7ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009c2c:	e040      	b.n	8009cb0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	2240      	movs	r2, #64	@ 0x40
 8009c32:	4013      	ands	r3, r2
 8009c34:	d02c      	beq.n	8009c90 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	2240      	movs	r2, #64	@ 0x40
 8009c3a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009c3c:	d028      	beq.n	8009c90 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009c42:	b29b      	uxth	r3, r3
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d11d      	bne.n	8009c84 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	685a      	ldr	r2, [r3, #4]
 8009c4e:	2380      	movs	r3, #128	@ 0x80
 8009c50:	049b      	lsls	r3, r3, #18
 8009c52:	401a      	ands	r2, r3
 8009c54:	2380      	movs	r3, #128	@ 0x80
 8009c56:	049b      	lsls	r3, r3, #18
 8009c58:	429a      	cmp	r2, r3
 8009c5a:	d028      	beq.n	8009cae <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c60:	4a18      	ldr	r2, [pc, #96]	@ (8009cc4 <I2C_Master_ISR_DMA+0x1f4>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d109      	bne.n	8009c7a <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	685a      	ldr	r2, [r3, #4]
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	2180      	movs	r1, #128	@ 0x80
 8009c72:	01c9      	lsls	r1, r1, #7
 8009c74:	430a      	orrs	r2, r1
 8009c76:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8009c78:	e019      	b.n	8009cae <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	0018      	movs	r0, r3
 8009c7e:	f000 fac9 	bl	800a214 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8009c82:	e014      	b.n	8009cae <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2140      	movs	r1, #64	@ 0x40
 8009c88:	0018      	movs	r0, r3
 8009c8a:	f000 fdaf 	bl	800a7ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8009c8e:	e00e      	b.n	8009cae <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c90:	68bb      	ldr	r3, [r7, #8]
 8009c92:	2220      	movs	r2, #32
 8009c94:	4013      	ands	r3, r2
 8009c96:	d00b      	beq.n	8009cb0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	2220      	movs	r2, #32
 8009c9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009c9e:	d007      	beq.n	8009cb0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009ca0:	68ba      	ldr	r2, [r7, #8]
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	0011      	movs	r1, r2
 8009ca6:	0018      	movs	r0, r3
 8009ca8:	f000 fb5a 	bl	800a360 <I2C_ITMasterCplt>
 8009cac:	e000      	b.n	8009cb0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8009cae:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	2240      	movs	r2, #64	@ 0x40
 8009cb4:	2100      	movs	r1, #0
 8009cb6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009cb8:	2300      	movs	r3, #0
}
 8009cba:	0018      	movs	r0, r3
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	b007      	add	sp, #28
 8009cc0:	bd90      	pop	{r4, r7, pc}
 8009cc2:	46c0      	nop			@ (mov r8, r8)
 8009cc4:	ffff0000 	.word	0xffff0000

08009cc8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8009cc8:	b590      	push	{r4, r7, lr}
 8009cca:	b089      	sub	sp, #36	@ 0x24
 8009ccc:	af02      	add	r7, sp, #8
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8009cd4:	4b88      	ldr	r3, [pc, #544]	@ (8009ef8 <I2C_Mem_ISR_DMA+0x230>)
 8009cd6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8009cd8:	68fb      	ldr	r3, [r7, #12]
 8009cda:	2240      	movs	r2, #64	@ 0x40
 8009cdc:	5c9b      	ldrb	r3, [r3, r2]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <I2C_Mem_ISR_DMA+0x1e>
 8009ce2:	2302      	movs	r3, #2
 8009ce4:	e104      	b.n	8009ef0 <I2C_Mem_ISR_DMA+0x228>
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	2240      	movs	r2, #64	@ 0x40
 8009cea:	2101      	movs	r1, #1
 8009cec:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	2210      	movs	r2, #16
 8009cf2:	4013      	ands	r3, r2
 8009cf4:	d017      	beq.n	8009d26 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2210      	movs	r2, #16
 8009cfa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009cfc:	d013      	beq.n	8009d26 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	681b      	ldr	r3, [r3, #0]
 8009d02:	2210      	movs	r2, #16
 8009d04:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d0a:	2204      	movs	r2, #4
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2120      	movs	r1, #32
 8009d16:	0018      	movs	r0, r3
 8009d18:	f000 ffc8 	bl	800acac <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	0018      	movs	r0, r3
 8009d20:	f000 fe8f 	bl	800aa42 <I2C_Flush_TXDR>
 8009d24:	e0df      	b.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	2202      	movs	r2, #2
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	d00d      	beq.n	8009d4a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	2202      	movs	r2, #2
 8009d32:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8009d34:	d009      	beq.n	8009d4a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8009d36:	68fb      	ldr	r3, [r7, #12]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68fa      	ldr	r2, [r7, #12]
 8009d3c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8009d3e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	2201      	movs	r2, #1
 8009d44:	4252      	negs	r2, r2
 8009d46:	651a      	str	r2, [r3, #80]	@ 0x50
 8009d48:	e0cd      	b.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2280      	movs	r2, #128	@ 0x80
 8009d4e:	4013      	ands	r3, r2
 8009d50:	d05e      	beq.n	8009e10 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2240      	movs	r2, #64	@ 0x40
 8009d56:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8009d58:	d05a      	beq.n	8009e10 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	2110      	movs	r1, #16
 8009d5e:	0018      	movs	r0, r3
 8009d60:	f000 ffa4 	bl	800acac <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d68:	b29b      	uxth	r3, r3
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d04a      	beq.n	8009e04 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d72:	b29b      	uxth	r3, r3
 8009d74:	2bff      	cmp	r3, #255	@ 0xff
 8009d76:	d910      	bls.n	8009d9a <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	22ff      	movs	r2, #255	@ 0xff
 8009d7c:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009d82:	b299      	uxth	r1, r3
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009d88:	b2da      	uxtb	r2, r3
 8009d8a:	2380      	movs	r3, #128	@ 0x80
 8009d8c:	045b      	lsls	r3, r3, #17
 8009d8e:	68f8      	ldr	r0, [r7, #12]
 8009d90:	2400      	movs	r4, #0
 8009d92:	9400      	str	r4, [sp, #0]
 8009d94:	f000 ff50 	bl	800ac38 <I2C_TransferConfig>
 8009d98:	e011      	b.n	8009dbe <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8009d9a:	68fb      	ldr	r3, [r7, #12]
 8009d9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009d9e:	b29a      	uxth	r2, r3
 8009da0:	68fb      	ldr	r3, [r7, #12]
 8009da2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009da8:	b299      	uxth	r1, r3
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dae:	b2da      	uxtb	r2, r3
 8009db0:	2380      	movs	r3, #128	@ 0x80
 8009db2:	049b      	lsls	r3, r3, #18
 8009db4:	68f8      	ldr	r0, [r7, #12]
 8009db6:	2400      	movs	r4, #0
 8009db8:	9400      	str	r4, [sp, #0]
 8009dba:	f000 ff3d 	bl	800ac38 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8009dbe:	68fb      	ldr	r3, [r7, #12]
 8009dc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009dc2:	b29a      	uxth	r2, r3
 8009dc4:	68fb      	ldr	r3, [r7, #12]
 8009dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009dc8:	1ad3      	subs	r3, r2, r3
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	2241      	movs	r2, #65	@ 0x41
 8009dd4:	5c9b      	ldrb	r3, [r3, r2]
 8009dd6:	b2db      	uxtb	r3, r3
 8009dd8:	2b22      	cmp	r3, #34	@ 0x22
 8009dda:	d109      	bne.n	8009df0 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	681a      	ldr	r2, [r3, #0]
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	2180      	movs	r1, #128	@ 0x80
 8009de8:	0209      	lsls	r1, r1, #8
 8009dea:	430a      	orrs	r2, r1
 8009dec:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009dee:	e07a      	b.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	681a      	ldr	r2, [r3, #0]
 8009df6:	68fb      	ldr	r3, [r7, #12]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	2180      	movs	r1, #128	@ 0x80
 8009dfc:	01c9      	lsls	r1, r1, #7
 8009dfe:	430a      	orrs	r2, r1
 8009e00:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8009e02:	e070      	b.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	2140      	movs	r1, #64	@ 0x40
 8009e08:	0018      	movs	r0, r3
 8009e0a:	f000 fcef 	bl	800a7ec <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8009e0e:	e06a      	b.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009e10:	68bb      	ldr	r3, [r7, #8]
 8009e12:	2240      	movs	r2, #64	@ 0x40
 8009e14:	4013      	ands	r3, r2
 8009e16:	d058      	beq.n	8009eca <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2240      	movs	r2, #64	@ 0x40
 8009e1c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8009e1e:	d054      	beq.n	8009eca <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	2241      	movs	r2, #65	@ 0x41
 8009e24:	5c9b      	ldrb	r3, [r3, r2]
 8009e26:	b2db      	uxtb	r3, r3
 8009e28:	2b22      	cmp	r3, #34	@ 0x22
 8009e2a:	d101      	bne.n	8009e30 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8009e2c:	4b33      	ldr	r3, [pc, #204]	@ (8009efc <I2C_Mem_ISR_DMA+0x234>)
 8009e2e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e34:	b29b      	uxth	r3, r3
 8009e36:	2bff      	cmp	r3, #255	@ 0xff
 8009e38:	d911      	bls.n	8009e5e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	22ff      	movs	r2, #255	@ 0xff
 8009e3e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009e40:	68fb      	ldr	r3, [r7, #12]
 8009e42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e44:	b299      	uxth	r1, r3
 8009e46:	68fb      	ldr	r3, [r7, #12]
 8009e48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e4a:	b2da      	uxtb	r2, r3
 8009e4c:	2380      	movs	r3, #128	@ 0x80
 8009e4e:	045c      	lsls	r4, r3, #17
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	697b      	ldr	r3, [r7, #20]
 8009e54:	9300      	str	r3, [sp, #0]
 8009e56:	0023      	movs	r3, r4
 8009e58:	f000 feee 	bl	800ac38 <I2C_TransferConfig>
 8009e5c:	e012      	b.n	8009e84 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e62:	b29a      	uxth	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009e6c:	b299      	uxth	r1, r3
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	2380      	movs	r3, #128	@ 0x80
 8009e76:	049c      	lsls	r4, r3, #18
 8009e78:	68f8      	ldr	r0, [r7, #12]
 8009e7a:	697b      	ldr	r3, [r7, #20]
 8009e7c:	9300      	str	r3, [sp, #0]
 8009e7e:	0023      	movs	r3, r4
 8009e80:	f000 feda 	bl	800ac38 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8009e88:	b29a      	uxth	r2, r3
 8009e8a:	68fb      	ldr	r3, [r7, #12]
 8009e8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8009e8e:	1ad3      	subs	r3, r2, r3
 8009e90:	b29a      	uxth	r2, r3
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	2241      	movs	r2, #65	@ 0x41
 8009e9a:	5c9b      	ldrb	r3, [r3, r2]
 8009e9c:	b2db      	uxtb	r3, r3
 8009e9e:	2b22      	cmp	r3, #34	@ 0x22
 8009ea0:	d109      	bne.n	8009eb6 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	681a      	ldr	r2, [r3, #0]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	2180      	movs	r1, #128	@ 0x80
 8009eae:	0209      	lsls	r1, r1, #8
 8009eb0:	430a      	orrs	r2, r1
 8009eb2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009eb4:	e017      	b.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8009eb6:	68fb      	ldr	r3, [r7, #12]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	681a      	ldr	r2, [r3, #0]
 8009ebc:	68fb      	ldr	r3, [r7, #12]
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	2180      	movs	r1, #128	@ 0x80
 8009ec2:	01c9      	lsls	r1, r1, #7
 8009ec4:	430a      	orrs	r2, r1
 8009ec6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8009ec8:	e00d      	b.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009eca:	68bb      	ldr	r3, [r7, #8]
 8009ecc:	2220      	movs	r2, #32
 8009ece:	4013      	ands	r3, r2
 8009ed0:	d009      	beq.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2220      	movs	r2, #32
 8009ed6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009ed8:	d005      	beq.n	8009ee6 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8009eda:	68ba      	ldr	r2, [r7, #8]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	0011      	movs	r1, r2
 8009ee0:	0018      	movs	r0, r3
 8009ee2:	f000 fa3d 	bl	800a360 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	2240      	movs	r2, #64	@ 0x40
 8009eea:	2100      	movs	r1, #0
 8009eec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009eee:	2300      	movs	r3, #0
}
 8009ef0:	0018      	movs	r0, r3
 8009ef2:	46bd      	mov	sp, r7
 8009ef4:	b007      	add	sp, #28
 8009ef6:	bd90      	pop	{r4, r7, pc}
 8009ef8:	80002000 	.word	0x80002000
 8009efc:	80002400 	.word	0x80002400

08009f00 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b088      	sub	sp, #32
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	60f8      	str	r0, [r7, #12]
 8009f08:	60b9      	str	r1, [r7, #8]
 8009f0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8009f0c:	68fb      	ldr	r3, [r7, #12]
 8009f0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009f10:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	2240      	movs	r2, #64	@ 0x40
 8009f1a:	5c9b      	ldrb	r3, [r3, r2]
 8009f1c:	2b01      	cmp	r3, #1
 8009f1e:	d101      	bne.n	8009f24 <I2C_Slave_ISR_DMA+0x24>
 8009f20:	2302      	movs	r3, #2
 8009f22:	e0cd      	b.n	800a0c0 <I2C_Slave_ISR_DMA+0x1c0>
 8009f24:	68fb      	ldr	r3, [r7, #12]
 8009f26:	2240      	movs	r2, #64	@ 0x40
 8009f28:	2101      	movs	r1, #1
 8009f2a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	2220      	movs	r2, #32
 8009f30:	4013      	ands	r3, r2
 8009f32:	d009      	beq.n	8009f48 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8009f34:	687b      	ldr	r3, [r7, #4]
 8009f36:	2220      	movs	r2, #32
 8009f38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8009f3a:	d005      	beq.n	8009f48 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8009f3c:	68ba      	ldr	r2, [r7, #8]
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	0011      	movs	r1, r2
 8009f42:	0018      	movs	r0, r3
 8009f44:	f000 fada 	bl	800a4fc <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	2210      	movs	r2, #16
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	d100      	bne.n	8009f52 <I2C_Slave_ISR_DMA+0x52>
 8009f50:	e0a3      	b.n	800a09a <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	2210      	movs	r2, #16
 8009f56:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8009f58:	d100      	bne.n	8009f5c <I2C_Slave_ISR_DMA+0x5c>
 8009f5a:	e09e      	b.n	800a09a <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f5c:	687a      	ldr	r2, [r7, #4]
 8009f5e:	2380      	movs	r3, #128	@ 0x80
 8009f60:	01db      	lsls	r3, r3, #7
 8009f62:	4013      	ands	r3, r2
 8009f64:	d105      	bne.n	8009f72 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8009f66:	687a      	ldr	r2, [r7, #4]
 8009f68:	2380      	movs	r3, #128	@ 0x80
 8009f6a:	021b      	lsls	r3, r3, #8
 8009f6c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8009f6e:	d100      	bne.n	8009f72 <I2C_Slave_ISR_DMA+0x72>
 8009f70:	e08c      	b.n	800a08c <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d00c      	beq.n	8009f94 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8009f7a:	687a      	ldr	r2, [r7, #4]
 8009f7c:	2380      	movs	r3, #128	@ 0x80
 8009f7e:	021b      	lsls	r3, r3, #8
 8009f80:	4013      	ands	r3, r2
 8009f82:	d007      	beq.n	8009f94 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	685b      	ldr	r3, [r3, #4]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d101      	bne.n	8009f94 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 8009f90:	2301      	movs	r3, #1
 8009f92:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d00c      	beq.n	8009fb6 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8009f9c:	687a      	ldr	r2, [r7, #4]
 8009f9e:	2380      	movs	r3, #128	@ 0x80
 8009fa0:	01db      	lsls	r3, r3, #7
 8009fa2:	4013      	ands	r3, r2
 8009fa4:	d007      	beq.n	8009fb6 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d101      	bne.n	8009fb6 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 8009fb2:	2301      	movs	r3, #1
 8009fb4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8009fb6:	69fb      	ldr	r3, [r7, #28]
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	d12d      	bne.n	800a018 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	2241      	movs	r2, #65	@ 0x41
 8009fc0:	5c9b      	ldrb	r3, [r3, r2]
 8009fc2:	b2db      	uxtb	r3, r3
 8009fc4:	2b28      	cmp	r3, #40	@ 0x28
 8009fc6:	d10b      	bne.n	8009fe0 <I2C_Slave_ISR_DMA+0xe0>
 8009fc8:	69ba      	ldr	r2, [r7, #24]
 8009fca:	2380      	movs	r3, #128	@ 0x80
 8009fcc:	049b      	lsls	r3, r3, #18
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d106      	bne.n	8009fe0 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8009fd2:	68ba      	ldr	r2, [r7, #8]
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	0011      	movs	r1, r2
 8009fd8:	0018      	movs	r0, r3
 8009fda:	f000 fbaf 	bl	800a73c <I2C_ITListenCplt>
 8009fde:	e054      	b.n	800a08a <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	2241      	movs	r2, #65	@ 0x41
 8009fe4:	5c9b      	ldrb	r3, [r3, r2]
 8009fe6:	b2db      	uxtb	r3, r3
 8009fe8:	2b29      	cmp	r3, #41	@ 0x29
 8009fea:	d110      	bne.n	800a00e <I2C_Slave_ISR_DMA+0x10e>
 8009fec:	69bb      	ldr	r3, [r7, #24]
 8009fee:	4a36      	ldr	r2, [pc, #216]	@ (800a0c8 <I2C_Slave_ISR_DMA+0x1c8>)
 8009ff0:	4293      	cmp	r3, r2
 8009ff2:	d00c      	beq.n	800a00e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	2210      	movs	r2, #16
 8009ffa:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8009ffc:	68fb      	ldr	r3, [r7, #12]
 8009ffe:	0018      	movs	r0, r3
 800a000:	f000 fd1f 	bl	800aa42 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	0018      	movs	r0, r3
 800a008:	f000 f946 	bl	800a298 <I2C_ITSlaveSeqCplt>
 800a00c:	e03d      	b.n	800a08a <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2210      	movs	r2, #16
 800a014:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800a016:	e03e      	b.n	800a096 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a018:	68fb      	ldr	r3, [r7, #12]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	2210      	movs	r2, #16
 800a01e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a024:	2204      	movs	r2, #4
 800a026:	431a      	orrs	r2, r3
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800a02c:	2317      	movs	r3, #23
 800a02e:	18fb      	adds	r3, r7, r3
 800a030:	68fa      	ldr	r2, [r7, #12]
 800a032:	2141      	movs	r1, #65	@ 0x41
 800a034:	5c52      	ldrb	r2, [r2, r1]
 800a036:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800a038:	69bb      	ldr	r3, [r7, #24]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d004      	beq.n	800a048 <I2C_Slave_ISR_DMA+0x148>
 800a03e:	69ba      	ldr	r2, [r7, #24]
 800a040:	2380      	movs	r3, #128	@ 0x80
 800a042:	045b      	lsls	r3, r3, #17
 800a044:	429a      	cmp	r2, r3
 800a046:	d126      	bne.n	800a096 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a048:	2217      	movs	r2, #23
 800a04a:	18bb      	adds	r3, r7, r2
 800a04c:	781b      	ldrb	r3, [r3, #0]
 800a04e:	2b21      	cmp	r3, #33	@ 0x21
 800a050:	d003      	beq.n	800a05a <I2C_Slave_ISR_DMA+0x15a>
 800a052:	18bb      	adds	r3, r7, r2
 800a054:	781b      	ldrb	r3, [r3, #0]
 800a056:	2b29      	cmp	r3, #41	@ 0x29
 800a058:	d103      	bne.n	800a062 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2221      	movs	r2, #33	@ 0x21
 800a05e:	631a      	str	r2, [r3, #48]	@ 0x30
 800a060:	e00b      	b.n	800a07a <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a062:	2217      	movs	r2, #23
 800a064:	18bb      	adds	r3, r7, r2
 800a066:	781b      	ldrb	r3, [r3, #0]
 800a068:	2b22      	cmp	r3, #34	@ 0x22
 800a06a:	d003      	beq.n	800a074 <I2C_Slave_ISR_DMA+0x174>
 800a06c:	18bb      	adds	r3, r7, r2
 800a06e:	781b      	ldrb	r3, [r3, #0]
 800a070:	2b2a      	cmp	r3, #42	@ 0x2a
 800a072:	d102      	bne.n	800a07a <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a074:	68fb      	ldr	r3, [r7, #12]
 800a076:	2222      	movs	r2, #34	@ 0x22
 800a078:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	0011      	movs	r1, r2
 800a082:	0018      	movs	r0, r3
 800a084:	f000 fbb2 	bl	800a7ec <I2C_ITError>
      if (treatdmanack == 1U)
 800a088:	e005      	b.n	800a096 <I2C_Slave_ISR_DMA+0x196>
 800a08a:	e004      	b.n	800a096 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a08c:	68fb      	ldr	r3, [r7, #12]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2210      	movs	r2, #16
 800a092:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a094:	e00f      	b.n	800a0b6 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800a096:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800a098:	e00d      	b.n	800a0b6 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a09a:	68bb      	ldr	r3, [r7, #8]
 800a09c:	2208      	movs	r2, #8
 800a09e:	4013      	ands	r3, r2
 800a0a0:	d009      	beq.n	800a0b6 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2208      	movs	r2, #8
 800a0a6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800a0a8:	d005      	beq.n	800a0b6 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800a0aa:	68ba      	ldr	r2, [r7, #8]
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	0011      	movs	r1, r2
 800a0b0:	0018      	movs	r0, r3
 800a0b2:	f000 f80b 	bl	800a0cc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	2240      	movs	r2, #64	@ 0x40
 800a0ba:	2100      	movs	r1, #0
 800a0bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a0be:	2300      	movs	r3, #0
}
 800a0c0:	0018      	movs	r0, r3
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	b008      	add	sp, #32
 800a0c6:	bd80      	pop	{r7, pc}
 800a0c8:	ffff0000 	.word	0xffff0000

0800a0cc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a0cc:	b5b0      	push	{r4, r5, r7, lr}
 800a0ce:	b084      	sub	sp, #16
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
 800a0d4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	2241      	movs	r2, #65	@ 0x41
 800a0da:	5c9b      	ldrb	r3, [r3, r2]
 800a0dc:	b2db      	uxtb	r3, r3
 800a0de:	001a      	movs	r2, r3
 800a0e0:	2328      	movs	r3, #40	@ 0x28
 800a0e2:	4013      	ands	r3, r2
 800a0e4:	2b28      	cmp	r3, #40	@ 0x28
 800a0e6:	d000      	beq.n	800a0ea <I2C_ITAddrCplt+0x1e>
 800a0e8:	e088      	b.n	800a1fc <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	699b      	ldr	r3, [r3, #24]
 800a0f0:	0c1b      	lsrs	r3, r3, #16
 800a0f2:	b2da      	uxtb	r2, r3
 800a0f4:	250f      	movs	r5, #15
 800a0f6:	197b      	adds	r3, r7, r5
 800a0f8:	2101      	movs	r1, #1
 800a0fa:	400a      	ands	r2, r1
 800a0fc:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	0c1b      	lsrs	r3, r3, #16
 800a106:	b29a      	uxth	r2, r3
 800a108:	200c      	movs	r0, #12
 800a10a:	183b      	adds	r3, r7, r0
 800a10c:	21fe      	movs	r1, #254	@ 0xfe
 800a10e:	400a      	ands	r2, r1
 800a110:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	689b      	ldr	r3, [r3, #8]
 800a118:	b29a      	uxth	r2, r3
 800a11a:	240a      	movs	r4, #10
 800a11c:	193b      	adds	r3, r7, r4
 800a11e:	0592      	lsls	r2, r2, #22
 800a120:	0d92      	lsrs	r2, r2, #22
 800a122:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	b29a      	uxth	r2, r3
 800a12c:	2308      	movs	r3, #8
 800a12e:	18fb      	adds	r3, r7, r3
 800a130:	21fe      	movs	r1, #254	@ 0xfe
 800a132:	400a      	ands	r2, r1
 800a134:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	68db      	ldr	r3, [r3, #12]
 800a13a:	2b02      	cmp	r3, #2
 800a13c:	d148      	bne.n	800a1d0 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800a13e:	0021      	movs	r1, r4
 800a140:	187b      	adds	r3, r7, r1
 800a142:	881b      	ldrh	r3, [r3, #0]
 800a144:	09db      	lsrs	r3, r3, #7
 800a146:	b29a      	uxth	r2, r3
 800a148:	183b      	adds	r3, r7, r0
 800a14a:	881b      	ldrh	r3, [r3, #0]
 800a14c:	4053      	eors	r3, r2
 800a14e:	b29b      	uxth	r3, r3
 800a150:	001a      	movs	r2, r3
 800a152:	2306      	movs	r3, #6
 800a154:	4013      	ands	r3, r2
 800a156:	d120      	bne.n	800a19a <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800a158:	183b      	adds	r3, r7, r0
 800a15a:	187a      	adds	r2, r7, r1
 800a15c:	8812      	ldrh	r2, [r2, #0]
 800a15e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a164:	1c5a      	adds	r2, r3, #1
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800a16e:	2b02      	cmp	r3, #2
 800a170:	d14c      	bne.n	800a20c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	2200      	movs	r2, #0
 800a176:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2208      	movs	r2, #8
 800a17e:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2240      	movs	r2, #64	@ 0x40
 800a184:	2100      	movs	r1, #0
 800a186:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a188:	183b      	adds	r3, r7, r0
 800a18a:	881a      	ldrh	r2, [r3, #0]
 800a18c:	197b      	adds	r3, r7, r5
 800a18e:	7819      	ldrb	r1, [r3, #0]
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	0018      	movs	r0, r3
 800a194:	f7ff fa39 	bl	800960a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800a198:	e038      	b.n	800a20c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800a19a:	240c      	movs	r4, #12
 800a19c:	193b      	adds	r3, r7, r4
 800a19e:	2208      	movs	r2, #8
 800a1a0:	18ba      	adds	r2, r7, r2
 800a1a2:	8812      	ldrh	r2, [r2, #0]
 800a1a4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a1a6:	2380      	movs	r3, #128	@ 0x80
 800a1a8:	021a      	lsls	r2, r3, #8
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	0011      	movs	r1, r2
 800a1ae:	0018      	movs	r0, r3
 800a1b0:	f000 fe0a 	bl	800adc8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	2240      	movs	r2, #64	@ 0x40
 800a1b8:	2100      	movs	r1, #0
 800a1ba:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a1bc:	193b      	adds	r3, r7, r4
 800a1be:	881a      	ldrh	r2, [r3, #0]
 800a1c0:	230f      	movs	r3, #15
 800a1c2:	18fb      	adds	r3, r7, r3
 800a1c4:	7819      	ldrb	r1, [r3, #0]
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	0018      	movs	r0, r3
 800a1ca:	f7ff fa1e 	bl	800960a <HAL_I2C_AddrCallback>
}
 800a1ce:	e01d      	b.n	800a20c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800a1d0:	2380      	movs	r3, #128	@ 0x80
 800a1d2:	021a      	lsls	r2, r3, #8
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	0011      	movs	r1, r2
 800a1d8:	0018      	movs	r0, r3
 800a1da:	f000 fdf5 	bl	800adc8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2240      	movs	r2, #64	@ 0x40
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800a1e6:	230c      	movs	r3, #12
 800a1e8:	18fb      	adds	r3, r7, r3
 800a1ea:	881a      	ldrh	r2, [r3, #0]
 800a1ec:	230f      	movs	r3, #15
 800a1ee:	18fb      	adds	r3, r7, r3
 800a1f0:	7819      	ldrb	r1, [r3, #0]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	0018      	movs	r0, r3
 800a1f6:	f7ff fa08 	bl	800960a <HAL_I2C_AddrCallback>
}
 800a1fa:	e007      	b.n	800a20c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	2208      	movs	r2, #8
 800a202:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	2240      	movs	r2, #64	@ 0x40
 800a208:	2100      	movs	r1, #0
 800a20a:	5499      	strb	r1, [r3, r2]
}
 800a20c:	46c0      	nop			@ (mov r8, r8)
 800a20e:	46bd      	mov	sp, r7
 800a210:	b004      	add	sp, #16
 800a212:	bdb0      	pop	{r4, r5, r7, pc}

0800a214 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a214:	b580      	push	{r7, lr}
 800a216:	b082      	sub	sp, #8
 800a218:	af00      	add	r7, sp, #0
 800a21a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	2242      	movs	r2, #66	@ 0x42
 800a220:	2100      	movs	r1, #0
 800a222:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	2241      	movs	r2, #65	@ 0x41
 800a228:	5c9b      	ldrb	r3, [r3, r2]
 800a22a:	b2db      	uxtb	r3, r3
 800a22c:	2b21      	cmp	r3, #33	@ 0x21
 800a22e:	d117      	bne.n	800a260 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2241      	movs	r2, #65	@ 0x41
 800a234:	2120      	movs	r1, #32
 800a236:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	2211      	movs	r2, #17
 800a23c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	2200      	movs	r2, #0
 800a242:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	2101      	movs	r1, #1
 800a248:	0018      	movs	r0, r3
 800a24a:	f000 fdbd 	bl	800adc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	2240      	movs	r2, #64	@ 0x40
 800a252:	2100      	movs	r1, #0
 800a254:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	0018      	movs	r0, r3
 800a25a:	f7ff f9b6 	bl	80095ca <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a25e:	e016      	b.n	800a28e <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2241      	movs	r2, #65	@ 0x41
 800a264:	2120      	movs	r1, #32
 800a266:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	2212      	movs	r2, #18
 800a26c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2200      	movs	r2, #0
 800a272:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	2102      	movs	r1, #2
 800a278:	0018      	movs	r0, r3
 800a27a:	f000 fda5 	bl	800adc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	2240      	movs	r2, #64	@ 0x40
 800a282:	2100      	movs	r1, #0
 800a284:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	0018      	movs	r0, r3
 800a28a:	f7ff f9a6 	bl	80095da <HAL_I2C_MasterRxCpltCallback>
}
 800a28e:	46c0      	nop			@ (mov r8, r8)
 800a290:	46bd      	mov	sp, r7
 800a292:	b002      	add	sp, #8
 800a294:	bd80      	pop	{r7, pc}
	...

0800a298 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800a298:	b580      	push	{r7, lr}
 800a29a:	b084      	sub	sp, #16
 800a29c:	af00      	add	r7, sp, #0
 800a29e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a2a8:	687b      	ldr	r3, [r7, #4]
 800a2aa:	2242      	movs	r2, #66	@ 0x42
 800a2ac:	2100      	movs	r1, #0
 800a2ae:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	2380      	movs	r3, #128	@ 0x80
 800a2b4:	01db      	lsls	r3, r3, #7
 800a2b6:	4013      	ands	r3, r2
 800a2b8:	d008      	beq.n	800a2cc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	681b      	ldr	r3, [r3, #0]
 800a2be:	681a      	ldr	r2, [r3, #0]
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4924      	ldr	r1, [pc, #144]	@ (800a358 <I2C_ITSlaveSeqCplt+0xc0>)
 800a2c6:	400a      	ands	r2, r1
 800a2c8:	601a      	str	r2, [r3, #0]
 800a2ca:	e00c      	b.n	800a2e6 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a2cc:	68fa      	ldr	r2, [r7, #12]
 800a2ce:	2380      	movs	r3, #128	@ 0x80
 800a2d0:	021b      	lsls	r3, r3, #8
 800a2d2:	4013      	ands	r3, r2
 800a2d4:	d007      	beq.n	800a2e6 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	681a      	ldr	r2, [r3, #0]
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	491e      	ldr	r1, [pc, #120]	@ (800a35c <I2C_ITSlaveSeqCplt+0xc4>)
 800a2e2:	400a      	ands	r2, r1
 800a2e4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	2241      	movs	r2, #65	@ 0x41
 800a2ea:	5c9b      	ldrb	r3, [r3, r2]
 800a2ec:	b2db      	uxtb	r3, r3
 800a2ee:	2b29      	cmp	r3, #41	@ 0x29
 800a2f0:	d114      	bne.n	800a31c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	2241      	movs	r2, #65	@ 0x41
 800a2f6:	2128      	movs	r1, #40	@ 0x28
 800a2f8:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	2221      	movs	r2, #33	@ 0x21
 800a2fe:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2101      	movs	r1, #1
 800a304:	0018      	movs	r0, r3
 800a306:	f000 fd5f 	bl	800adc8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	2240      	movs	r2, #64	@ 0x40
 800a30e:	2100      	movs	r1, #0
 800a310:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	0018      	movs	r0, r3
 800a316:	f7ff f968 	bl	80095ea <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a31a:	e019      	b.n	800a350 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	2241      	movs	r2, #65	@ 0x41
 800a320:	5c9b      	ldrb	r3, [r3, r2]
 800a322:	b2db      	uxtb	r3, r3
 800a324:	2b2a      	cmp	r3, #42	@ 0x2a
 800a326:	d113      	bne.n	800a350 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2241      	movs	r2, #65	@ 0x41
 800a32c:	2128      	movs	r1, #40	@ 0x28
 800a32e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2222      	movs	r2, #34	@ 0x22
 800a334:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2102      	movs	r1, #2
 800a33a:	0018      	movs	r0, r3
 800a33c:	f000 fd44 	bl	800adc8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	2240      	movs	r2, #64	@ 0x40
 800a344:	2100      	movs	r1, #0
 800a346:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	0018      	movs	r0, r3
 800a34c:	f7ff f955 	bl	80095fa <HAL_I2C_SlaveRxCpltCallback>
}
 800a350:	46c0      	nop			@ (mov r8, r8)
 800a352:	46bd      	mov	sp, r7
 800a354:	b004      	add	sp, #16
 800a356:	bd80      	pop	{r7, pc}
 800a358:	ffffbfff 	.word	0xffffbfff
 800a35c:	ffff7fff 	.word	0xffff7fff

0800a360 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b086      	sub	sp, #24
 800a364:	af00      	add	r7, sp, #0
 800a366:	6078      	str	r0, [r7, #4]
 800a368:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800a36a:	683b      	ldr	r3, [r7, #0]
 800a36c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2220      	movs	r2, #32
 800a374:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	2241      	movs	r2, #65	@ 0x41
 800a37a:	5c9b      	ldrb	r3, [r3, r2]
 800a37c:	b2db      	uxtb	r3, r3
 800a37e:	2b21      	cmp	r3, #33	@ 0x21
 800a380:	d108      	bne.n	800a394 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2101      	movs	r1, #1
 800a386:	0018      	movs	r0, r3
 800a388:	f000 fd1e 	bl	800adc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	2211      	movs	r2, #17
 800a390:	631a      	str	r2, [r3, #48]	@ 0x30
 800a392:	e00d      	b.n	800a3b0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2241      	movs	r2, #65	@ 0x41
 800a398:	5c9b      	ldrb	r3, [r3, r2]
 800a39a:	b2db      	uxtb	r3, r3
 800a39c:	2b22      	cmp	r3, #34	@ 0x22
 800a39e:	d107      	bne.n	800a3b0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	2102      	movs	r1, #2
 800a3a4:	0018      	movs	r0, r3
 800a3a6:	f000 fd0f 	bl	800adc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	2212      	movs	r2, #18
 800a3ae:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	685a      	ldr	r2, [r3, #4]
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	494e      	ldr	r1, [pc, #312]	@ (800a4f4 <I2C_ITMasterCplt+0x194>)
 800a3bc:	400a      	ands	r2, r1
 800a3be:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	2200      	movs	r2, #0
 800a3c4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	4a4b      	ldr	r2, [pc, #300]	@ (800a4f8 <I2C_ITMasterCplt+0x198>)
 800a3ca:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800a3cc:	697b      	ldr	r3, [r7, #20]
 800a3ce:	2210      	movs	r2, #16
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	d009      	beq.n	800a3e8 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2210      	movs	r2, #16
 800a3da:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a3e0:	2204      	movs	r2, #4
 800a3e2:	431a      	orrs	r2, r3
 800a3e4:	687b      	ldr	r3, [r7, #4]
 800a3e6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	2241      	movs	r2, #65	@ 0x41
 800a3ec:	5c9b      	ldrb	r3, [r3, r2]
 800a3ee:	b2db      	uxtb	r3, r3
 800a3f0:	2b60      	cmp	r3, #96	@ 0x60
 800a3f2:	d109      	bne.n	800a408 <I2C_ITMasterCplt+0xa8>
 800a3f4:	697b      	ldr	r3, [r7, #20]
 800a3f6:	2204      	movs	r2, #4
 800a3f8:	4013      	ands	r3, r2
 800a3fa:	d005      	beq.n	800a408 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a402:	b2db      	uxtb	r3, r3
 800a404:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800a406:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	0018      	movs	r0, r3
 800a40c:	f000 fb19 	bl	800aa42 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a414:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	2241      	movs	r2, #65	@ 0x41
 800a41a:	5c9b      	ldrb	r3, [r3, r2]
 800a41c:	b2db      	uxtb	r3, r3
 800a41e:	2b60      	cmp	r3, #96	@ 0x60
 800a420:	d002      	beq.n	800a428 <I2C_ITMasterCplt+0xc8>
 800a422:	693b      	ldr	r3, [r7, #16]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d007      	beq.n	800a438 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	0011      	movs	r1, r2
 800a430:	0018      	movs	r0, r3
 800a432:	f000 f9db 	bl	800a7ec <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800a436:	e058      	b.n	800a4ea <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	2241      	movs	r2, #65	@ 0x41
 800a43c:	5c9b      	ldrb	r3, [r3, r2]
 800a43e:	b2db      	uxtb	r3, r3
 800a440:	2b21      	cmp	r3, #33	@ 0x21
 800a442:	d126      	bne.n	800a492 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2241      	movs	r2, #65	@ 0x41
 800a448:	2120      	movs	r1, #32
 800a44a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	2200      	movs	r2, #0
 800a450:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	2242      	movs	r2, #66	@ 0x42
 800a456:	5c9b      	ldrb	r3, [r3, r2]
 800a458:	b2db      	uxtb	r3, r3
 800a45a:	2b40      	cmp	r3, #64	@ 0x40
 800a45c:	d10c      	bne.n	800a478 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	2242      	movs	r2, #66	@ 0x42
 800a462:	2100      	movs	r1, #0
 800a464:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2240      	movs	r2, #64	@ 0x40
 800a46a:	2100      	movs	r1, #0
 800a46c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	0018      	movs	r0, r3
 800a472:	f7ff f8e2 	bl	800963a <HAL_I2C_MemTxCpltCallback>
}
 800a476:	e038      	b.n	800a4ea <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	2242      	movs	r2, #66	@ 0x42
 800a47c:	2100      	movs	r1, #0
 800a47e:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	2240      	movs	r2, #64	@ 0x40
 800a484:	2100      	movs	r1, #0
 800a486:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	0018      	movs	r0, r3
 800a48c:	f7ff f89d 	bl	80095ca <HAL_I2C_MasterTxCpltCallback>
}
 800a490:	e02b      	b.n	800a4ea <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	2241      	movs	r2, #65	@ 0x41
 800a496:	5c9b      	ldrb	r3, [r3, r2]
 800a498:	b2db      	uxtb	r3, r3
 800a49a:	2b22      	cmp	r3, #34	@ 0x22
 800a49c:	d125      	bne.n	800a4ea <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	2241      	movs	r2, #65	@ 0x41
 800a4a2:	2120      	movs	r1, #32
 800a4a4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	2242      	movs	r2, #66	@ 0x42
 800a4b0:	5c9b      	ldrb	r3, [r3, r2]
 800a4b2:	b2db      	uxtb	r3, r3
 800a4b4:	2b40      	cmp	r3, #64	@ 0x40
 800a4b6:	d10c      	bne.n	800a4d2 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	2242      	movs	r2, #66	@ 0x42
 800a4bc:	2100      	movs	r1, #0
 800a4be:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2240      	movs	r2, #64	@ 0x40
 800a4c4:	2100      	movs	r1, #0
 800a4c6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	0018      	movs	r0, r3
 800a4cc:	f7ff f8bd 	bl	800964a <HAL_I2C_MemRxCpltCallback>
}
 800a4d0:	e00b      	b.n	800a4ea <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	2242      	movs	r2, #66	@ 0x42
 800a4d6:	2100      	movs	r1, #0
 800a4d8:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2240      	movs	r2, #64	@ 0x40
 800a4de:	2100      	movs	r1, #0
 800a4e0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	0018      	movs	r0, r3
 800a4e6:	f7ff f878 	bl	80095da <HAL_I2C_MasterRxCpltCallback>
}
 800a4ea:	46c0      	nop			@ (mov r8, r8)
 800a4ec:	46bd      	mov	sp, r7
 800a4ee:	b006      	add	sp, #24
 800a4f0:	bd80      	pop	{r7, pc}
 800a4f2:	46c0      	nop			@ (mov r8, r8)
 800a4f4:	fe00e800 	.word	0xfe00e800
 800a4f8:	ffff0000 	.word	0xffff0000

0800a4fc <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b086      	sub	sp, #24
 800a500:	af00      	add	r7, sp, #0
 800a502:	6078      	str	r0, [r7, #4]
 800a504:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	681b      	ldr	r3, [r3, #0]
 800a50c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a512:	200f      	movs	r0, #15
 800a514:	183b      	adds	r3, r7, r0
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	2141      	movs	r1, #65	@ 0x41
 800a51a:	5c52      	ldrb	r2, [r2, r1]
 800a51c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	2220      	movs	r2, #32
 800a524:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a526:	183b      	adds	r3, r7, r0
 800a528:	781b      	ldrb	r3, [r3, #0]
 800a52a:	2b21      	cmp	r3, #33	@ 0x21
 800a52c:	d003      	beq.n	800a536 <I2C_ITSlaveCplt+0x3a>
 800a52e:	183b      	adds	r3, r7, r0
 800a530:	781b      	ldrb	r3, [r3, #0]
 800a532:	2b29      	cmp	r3, #41	@ 0x29
 800a534:	d109      	bne.n	800a54a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800a536:	4a7b      	ldr	r2, [pc, #492]	@ (800a724 <I2C_ITSlaveCplt+0x228>)
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	0011      	movs	r1, r2
 800a53c:	0018      	movs	r0, r3
 800a53e:	f000 fc43 	bl	800adc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	2221      	movs	r2, #33	@ 0x21
 800a546:	631a      	str	r2, [r3, #48]	@ 0x30
 800a548:	e011      	b.n	800a56e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800a54a:	220f      	movs	r2, #15
 800a54c:	18bb      	adds	r3, r7, r2
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b22      	cmp	r3, #34	@ 0x22
 800a552:	d003      	beq.n	800a55c <I2C_ITSlaveCplt+0x60>
 800a554:	18bb      	adds	r3, r7, r2
 800a556:	781b      	ldrb	r3, [r3, #0]
 800a558:	2b2a      	cmp	r3, #42	@ 0x2a
 800a55a:	d108      	bne.n	800a56e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800a55c:	4a72      	ldr	r2, [pc, #456]	@ (800a728 <I2C_ITSlaveCplt+0x22c>)
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	0011      	movs	r1, r2
 800a562:	0018      	movs	r0, r3
 800a564:	f000 fc30 	bl	800adc8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	2222      	movs	r2, #34	@ 0x22
 800a56c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	685a      	ldr	r2, [r3, #4]
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	2180      	movs	r1, #128	@ 0x80
 800a57a:	0209      	lsls	r1, r1, #8
 800a57c:	430a      	orrs	r2, r1
 800a57e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	685a      	ldr	r2, [r3, #4]
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	4968      	ldr	r1, [pc, #416]	@ (800a72c <I2C_ITSlaveCplt+0x230>)
 800a58c:	400a      	ands	r2, r1
 800a58e:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	0018      	movs	r0, r3
 800a594:	f000 fa55 	bl	800aa42 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800a598:	693a      	ldr	r2, [r7, #16]
 800a59a:	2380      	movs	r3, #128	@ 0x80
 800a59c:	01db      	lsls	r3, r3, #7
 800a59e:	4013      	ands	r3, r2
 800a5a0:	d013      	beq.n	800a5ca <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	681b      	ldr	r3, [r3, #0]
 800a5a6:	681a      	ldr	r2, [r3, #0]
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	4960      	ldr	r1, [pc, #384]	@ (800a730 <I2C_ITSlaveCplt+0x234>)
 800a5ae:	400a      	ands	r2, r1
 800a5b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d01f      	beq.n	800a5fa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5be:	681b      	ldr	r3, [r3, #0]
 800a5c0:	685b      	ldr	r3, [r3, #4]
 800a5c2:	b29a      	uxth	r2, r3
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800a5c8:	e017      	b.n	800a5fa <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800a5ca:	693a      	ldr	r2, [r7, #16]
 800a5cc:	2380      	movs	r3, #128	@ 0x80
 800a5ce:	021b      	lsls	r3, r3, #8
 800a5d0:	4013      	ands	r3, r2
 800a5d2:	d012      	beq.n	800a5fa <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	681a      	ldr	r2, [r3, #0]
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	681b      	ldr	r3, [r3, #0]
 800a5de:	4955      	ldr	r1, [pc, #340]	@ (800a734 <I2C_ITSlaveCplt+0x238>)
 800a5e0:	400a      	ands	r2, r1
 800a5e2:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d006      	beq.n	800a5fa <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	b29a      	uxth	r2, r3
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800a5fa:	697b      	ldr	r3, [r7, #20]
 800a5fc:	2204      	movs	r2, #4
 800a5fe:	4013      	ands	r3, r2
 800a600:	d020      	beq.n	800a644 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800a602:	697b      	ldr	r3, [r7, #20]
 800a604:	2204      	movs	r2, #4
 800a606:	4393      	bics	r3, r2
 800a608:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a614:	b2d2      	uxtb	r2, r2
 800a616:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a61c:	1c5a      	adds	r2, r3, #1
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a626:	2b00      	cmp	r3, #0
 800a628:	d00c      	beq.n	800a644 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a62e:	3b01      	subs	r3, #1
 800a630:	b29a      	uxth	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a63a:	b29b      	uxth	r3, r3
 800a63c:	3b01      	subs	r3, #1
 800a63e:	b29a      	uxth	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a648:	b29b      	uxth	r3, r3
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d005      	beq.n	800a65a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a652:	2204      	movs	r2, #4
 800a654:	431a      	orrs	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	2242      	movs	r2, #66	@ 0x42
 800a65e:	2100      	movs	r1, #0
 800a660:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2200      	movs	r2, #0
 800a666:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a66c:	2b00      	cmp	r3, #0
 800a66e:	d013      	beq.n	800a698 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	0011      	movs	r1, r2
 800a678:	0018      	movs	r0, r3
 800a67a:	f000 f8b7 	bl	800a7ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	2241      	movs	r2, #65	@ 0x41
 800a682:	5c9b      	ldrb	r3, [r3, r2]
 800a684:	b2db      	uxtb	r3, r3
 800a686:	2b28      	cmp	r3, #40	@ 0x28
 800a688:	d147      	bne.n	800a71a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800a68a:	697a      	ldr	r2, [r7, #20]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	0011      	movs	r1, r2
 800a690:	0018      	movs	r0, r3
 800a692:	f000 f853 	bl	800a73c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800a696:	e040      	b.n	800a71a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a69c:	4a26      	ldr	r2, [pc, #152]	@ (800a738 <I2C_ITSlaveCplt+0x23c>)
 800a69e:	4293      	cmp	r3, r2
 800a6a0:	d016      	beq.n	800a6d0 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	0018      	movs	r0, r3
 800a6a6:	f7ff fdf7 	bl	800a298 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	4a22      	ldr	r2, [pc, #136]	@ (800a738 <I2C_ITSlaveCplt+0x23c>)
 800a6ae:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2241      	movs	r2, #65	@ 0x41
 800a6b4:	2120      	movs	r1, #32
 800a6b6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	2200      	movs	r2, #0
 800a6bc:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	2240      	movs	r2, #64	@ 0x40
 800a6c2:	2100      	movs	r1, #0
 800a6c4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f7fe ffae 	bl	800962a <HAL_I2C_ListenCpltCallback>
}
 800a6ce:	e024      	b.n	800a71a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	2241      	movs	r2, #65	@ 0x41
 800a6d4:	5c9b      	ldrb	r3, [r3, r2]
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	2b22      	cmp	r3, #34	@ 0x22
 800a6da:	d10f      	bne.n	800a6fc <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2241      	movs	r2, #65	@ 0x41
 800a6e0:	2120      	movs	r1, #32
 800a6e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	2240      	movs	r2, #64	@ 0x40
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	0018      	movs	r0, r3
 800a6f6:	f7fe ff80 	bl	80095fa <HAL_I2C_SlaveRxCpltCallback>
}
 800a6fa:	e00e      	b.n	800a71a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800a6fc:	687b      	ldr	r3, [r7, #4]
 800a6fe:	2241      	movs	r2, #65	@ 0x41
 800a700:	2120      	movs	r1, #32
 800a702:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2240      	movs	r2, #64	@ 0x40
 800a70e:	2100      	movs	r1, #0
 800a710:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	0018      	movs	r0, r3
 800a716:	f7fe ff68 	bl	80095ea <HAL_I2C_SlaveTxCpltCallback>
}
 800a71a:	46c0      	nop			@ (mov r8, r8)
 800a71c:	46bd      	mov	sp, r7
 800a71e:	b006      	add	sp, #24
 800a720:	bd80      	pop	{r7, pc}
 800a722:	46c0      	nop			@ (mov r8, r8)
 800a724:	00008001 	.word	0x00008001
 800a728:	00008002 	.word	0x00008002
 800a72c:	fe00e800 	.word	0xfe00e800
 800a730:	ffffbfff 	.word	0xffffbfff
 800a734:	ffff7fff 	.word	0xffff7fff
 800a738:	ffff0000 	.word	0xffff0000

0800a73c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b082      	sub	sp, #8
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
 800a744:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	4a26      	ldr	r2, [pc, #152]	@ (800a7e4 <I2C_ITListenCplt+0xa8>)
 800a74a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	2241      	movs	r2, #65	@ 0x41
 800a756:	2120      	movs	r1, #32
 800a758:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2242      	movs	r2, #66	@ 0x42
 800a75e:	2100      	movs	r1, #0
 800a760:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2200      	movs	r2, #0
 800a766:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800a768:	683b      	ldr	r3, [r7, #0]
 800a76a:	2204      	movs	r2, #4
 800a76c:	4013      	ands	r3, r2
 800a76e:	d022      	beq.n	800a7b6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a77a:	b2d2      	uxtb	r2, r2
 800a77c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d012      	beq.n	800a7b6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a794:	3b01      	subs	r3, #1
 800a796:	b29a      	uxth	r2, r3
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7a0:	b29b      	uxth	r3, r3
 800a7a2:	3b01      	subs	r3, #1
 800a7a4:	b29a      	uxth	r2, r3
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ae:	2204      	movs	r2, #4
 800a7b0:	431a      	orrs	r2, r3
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a7b6:	4a0c      	ldr	r2, [pc, #48]	@ (800a7e8 <I2C_ITListenCplt+0xac>)
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	0011      	movs	r1, r2
 800a7bc:	0018      	movs	r0, r3
 800a7be:	f000 fb03 	bl	800adc8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	2210      	movs	r2, #16
 800a7c8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800a7ca:	687b      	ldr	r3, [r7, #4]
 800a7cc:	2240      	movs	r2, #64	@ 0x40
 800a7ce:	2100      	movs	r1, #0
 800a7d0:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	0018      	movs	r0, r3
 800a7d6:	f7fe ff28 	bl	800962a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800a7da:	46c0      	nop			@ (mov r8, r8)
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	b002      	add	sp, #8
 800a7e0:	bd80      	pop	{r7, pc}
 800a7e2:	46c0      	nop			@ (mov r8, r8)
 800a7e4:	ffff0000 	.word	0xffff0000
 800a7e8:	00008003 	.word	0x00008003

0800a7ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
 800a7f2:	6078      	str	r0, [r7, #4]
 800a7f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800a7f6:	200f      	movs	r0, #15
 800a7f8:	183b      	adds	r3, r7, r0
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	2141      	movs	r1, #65	@ 0x41
 800a7fe:	5c52      	ldrb	r2, [r2, r1]
 800a800:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2242      	movs	r2, #66	@ 0x42
 800a806:	2100      	movs	r1, #0
 800a808:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	4a72      	ldr	r2, [pc, #456]	@ (800a9d8 <I2C_ITError+0x1ec>)
 800a80e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	2200      	movs	r2, #0
 800a814:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800a816:	687b      	ldr	r3, [r7, #4]
 800a818:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a81a:	683b      	ldr	r3, [r7, #0]
 800a81c:	431a      	orrs	r2, r3
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800a822:	183b      	adds	r3, r7, r0
 800a824:	781b      	ldrb	r3, [r3, #0]
 800a826:	2b28      	cmp	r3, #40	@ 0x28
 800a828:	d007      	beq.n	800a83a <I2C_ITError+0x4e>
 800a82a:	183b      	adds	r3, r7, r0
 800a82c:	781b      	ldrb	r3, [r3, #0]
 800a82e:	2b29      	cmp	r3, #41	@ 0x29
 800a830:	d003      	beq.n	800a83a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800a832:	183b      	adds	r3, r7, r0
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	2b2a      	cmp	r3, #42	@ 0x2a
 800a838:	d10c      	bne.n	800a854 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2103      	movs	r1, #3
 800a83e:	0018      	movs	r0, r3
 800a840:	f000 fac2 	bl	800adc8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	2241      	movs	r2, #65	@ 0x41
 800a848:	2128      	movs	r1, #40	@ 0x28
 800a84a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	4a63      	ldr	r2, [pc, #396]	@ (800a9dc <I2C_ITError+0x1f0>)
 800a850:	635a      	str	r2, [r3, #52]	@ 0x34
 800a852:	e032      	b.n	800a8ba <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800a854:	4a62      	ldr	r2, [pc, #392]	@ (800a9e0 <I2C_ITError+0x1f4>)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	0011      	movs	r1, r2
 800a85a:	0018      	movs	r0, r3
 800a85c:	f000 fab4 	bl	800adc8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	0018      	movs	r0, r3
 800a864:	f000 f8ed 	bl	800aa42 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	2241      	movs	r2, #65	@ 0x41
 800a86c:	5c9b      	ldrb	r3, [r3, r2]
 800a86e:	b2db      	uxtb	r3, r3
 800a870:	2b60      	cmp	r3, #96	@ 0x60
 800a872:	d01f      	beq.n	800a8b4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	2241      	movs	r2, #65	@ 0x41
 800a878:	2120      	movs	r1, #32
 800a87a:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	699b      	ldr	r3, [r3, #24]
 800a882:	2220      	movs	r2, #32
 800a884:	4013      	ands	r3, r2
 800a886:	2b20      	cmp	r3, #32
 800a888:	d114      	bne.n	800a8b4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	699b      	ldr	r3, [r3, #24]
 800a890:	2210      	movs	r2, #16
 800a892:	4013      	ands	r3, r2
 800a894:	2b10      	cmp	r3, #16
 800a896:	d109      	bne.n	800a8ac <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2210      	movs	r2, #16
 800a89e:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8a4:	2204      	movs	r2, #4
 800a8a6:	431a      	orrs	r2, r3
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2220      	movs	r2, #32
 800a8b2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	2200      	movs	r2, #0
 800a8b8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a8be:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d03b      	beq.n	800a940 <I2C_ITError+0x154>
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	2b11      	cmp	r3, #17
 800a8cc:	d002      	beq.n	800a8d4 <I2C_ITError+0xe8>
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b21      	cmp	r3, #33	@ 0x21
 800a8d2:	d135      	bne.n	800a940 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	681b      	ldr	r3, [r3, #0]
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	2380      	movs	r3, #128	@ 0x80
 800a8dc:	01db      	lsls	r3, r3, #7
 800a8de:	401a      	ands	r2, r3
 800a8e0:	2380      	movs	r3, #128	@ 0x80
 800a8e2:	01db      	lsls	r3, r3, #7
 800a8e4:	429a      	cmp	r2, r3
 800a8e6:	d107      	bne.n	800a8f8 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	681a      	ldr	r2, [r3, #0]
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	681b      	ldr	r3, [r3, #0]
 800a8f2:	493c      	ldr	r1, [pc, #240]	@ (800a9e4 <I2C_ITError+0x1f8>)
 800a8f4:	400a      	ands	r2, r1
 800a8f6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a8fc:	0018      	movs	r0, r3
 800a8fe:	f7fe f896 	bl	8008a2e <HAL_DMA_GetState>
 800a902:	0003      	movs	r3, r0
 800a904:	2b01      	cmp	r3, #1
 800a906:	d016      	beq.n	800a936 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a90c:	4a36      	ldr	r2, [pc, #216]	@ (800a9e8 <I2C_ITError+0x1fc>)
 800a90e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a910:	687b      	ldr	r3, [r7, #4]
 800a912:	2240      	movs	r2, #64	@ 0x40
 800a914:	2100      	movs	r1, #0
 800a916:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a91c:	0018      	movs	r0, r3
 800a91e:	f7fd ff91 	bl	8008844 <HAL_DMA_Abort_IT>
 800a922:	1e03      	subs	r3, r0, #0
 800a924:	d051      	beq.n	800a9ca <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a92a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a930:	0018      	movs	r0, r3
 800a932:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a934:	e049      	b.n	800a9ca <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	0018      	movs	r0, r3
 800a93a:	f000 f859 	bl	800a9f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a93e:	e044      	b.n	800a9ca <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a944:	2b00      	cmp	r3, #0
 800a946:	d03b      	beq.n	800a9c0 <I2C_ITError+0x1d4>
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	2b12      	cmp	r3, #18
 800a94c:	d002      	beq.n	800a954 <I2C_ITError+0x168>
 800a94e:	68bb      	ldr	r3, [r7, #8]
 800a950:	2b22      	cmp	r3, #34	@ 0x22
 800a952:	d135      	bne.n	800a9c0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	681a      	ldr	r2, [r3, #0]
 800a95a:	2380      	movs	r3, #128	@ 0x80
 800a95c:	021b      	lsls	r3, r3, #8
 800a95e:	401a      	ands	r2, r3
 800a960:	2380      	movs	r3, #128	@ 0x80
 800a962:	021b      	lsls	r3, r3, #8
 800a964:	429a      	cmp	r2, r3
 800a966:	d107      	bne.n	800a978 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	491e      	ldr	r1, [pc, #120]	@ (800a9ec <I2C_ITError+0x200>)
 800a974:	400a      	ands	r2, r1
 800a976:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a978:	687b      	ldr	r3, [r7, #4]
 800a97a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a97c:	0018      	movs	r0, r3
 800a97e:	f7fe f856 	bl	8008a2e <HAL_DMA_GetState>
 800a982:	0003      	movs	r3, r0
 800a984:	2b01      	cmp	r3, #1
 800a986:	d016      	beq.n	800a9b6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a98c:	4a16      	ldr	r2, [pc, #88]	@ (800a9e8 <I2C_ITError+0x1fc>)
 800a98e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	2240      	movs	r2, #64	@ 0x40
 800a994:	2100      	movs	r1, #0
 800a996:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a99c:	0018      	movs	r0, r3
 800a99e:	f7fd ff51 	bl	8008844 <HAL_DMA_Abort_IT>
 800a9a2:	1e03      	subs	r3, r0, #0
 800a9a4:	d013      	beq.n	800a9ce <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a9b0:	0018      	movs	r0, r3
 800a9b2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a9b4:	e00b      	b.n	800a9ce <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	0018      	movs	r0, r3
 800a9ba:	f000 f819 	bl	800a9f0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a9be:	e006      	b.n	800a9ce <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	0018      	movs	r0, r3
 800a9c4:	f000 f814 	bl	800a9f0 <I2C_TreatErrorCallback>
  }
}
 800a9c8:	e002      	b.n	800a9d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800a9ca:	46c0      	nop			@ (mov r8, r8)
 800a9cc:	e000      	b.n	800a9d0 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800a9ce:	46c0      	nop			@ (mov r8, r8)
}
 800a9d0:	46c0      	nop			@ (mov r8, r8)
 800a9d2:	46bd      	mov	sp, r7
 800a9d4:	b004      	add	sp, #16
 800a9d6:	bd80      	pop	{r7, pc}
 800a9d8:	ffff0000 	.word	0xffff0000
 800a9dc:	080098d1 	.word	0x080098d1
 800a9e0:	00008003 	.word	0x00008003
 800a9e4:	ffffbfff 	.word	0xffffbfff
 800a9e8:	0800abfb 	.word	0x0800abfb
 800a9ec:	ffff7fff 	.word	0xffff7fff

0800a9f0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a9f0:	b580      	push	{r7, lr}
 800a9f2:	b082      	sub	sp, #8
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2241      	movs	r2, #65	@ 0x41
 800a9fc:	5c9b      	ldrb	r3, [r3, r2]
 800a9fe:	b2db      	uxtb	r3, r3
 800aa00:	2b60      	cmp	r3, #96	@ 0x60
 800aa02:	d10f      	bne.n	800aa24 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2241      	movs	r2, #65	@ 0x41
 800aa08:	2120      	movs	r1, #32
 800aa0a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa0c:	687b      	ldr	r3, [r7, #4]
 800aa0e:	2200      	movs	r2, #0
 800aa10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	2240      	movs	r2, #64	@ 0x40
 800aa16:	2100      	movs	r1, #0
 800aa18:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	0018      	movs	r0, r3
 800aa1e:	f7fe fe24 	bl	800966a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800aa22:	e00a      	b.n	800aa3a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800aa24:	687b      	ldr	r3, [r7, #4]
 800aa26:	2200      	movs	r2, #0
 800aa28:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	2240      	movs	r2, #64	@ 0x40
 800aa2e:	2100      	movs	r1, #0
 800aa30:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	0018      	movs	r0, r3
 800aa36:	f7fe fe10 	bl	800965a <HAL_I2C_ErrorCallback>
}
 800aa3a:	46c0      	nop			@ (mov r8, r8)
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	b002      	add	sp, #8
 800aa40:	bd80      	pop	{r7, pc}

0800aa42 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800aa42:	b580      	push	{r7, lr}
 800aa44:	b082      	sub	sp, #8
 800aa46:	af00      	add	r7, sp, #0
 800aa48:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	699b      	ldr	r3, [r3, #24]
 800aa50:	2202      	movs	r2, #2
 800aa52:	4013      	ands	r3, r2
 800aa54:	2b02      	cmp	r3, #2
 800aa56:	d103      	bne.n	800aa60 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	699b      	ldr	r3, [r3, #24]
 800aa66:	2201      	movs	r2, #1
 800aa68:	4013      	ands	r3, r2
 800aa6a:	2b01      	cmp	r3, #1
 800aa6c:	d007      	beq.n	800aa7e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	699a      	ldr	r2, [r3, #24]
 800aa74:	687b      	ldr	r3, [r7, #4]
 800aa76:	681b      	ldr	r3, [r3, #0]
 800aa78:	2101      	movs	r1, #1
 800aa7a:	430a      	orrs	r2, r1
 800aa7c:	619a      	str	r2, [r3, #24]
  }
}
 800aa7e:	46c0      	nop			@ (mov r8, r8)
 800aa80:	46bd      	mov	sp, r7
 800aa82:	b002      	add	sp, #8
 800aa84:	bd80      	pop	{r7, pc}
	...

0800aa88 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800aa88:	b580      	push	{r7, lr}
 800aa8a:	b084      	sub	sp, #16
 800aa8c:	af00      	add	r7, sp, #0
 800aa8e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800aa94:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	681a      	ldr	r2, [r3, #0]
 800aa9c:	68fb      	ldr	r3, [r7, #12]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	4920      	ldr	r1, [pc, #128]	@ (800ab24 <I2C_DMAMasterTransmitCplt+0x9c>)
 800aaa2:	400a      	ands	r2, r1
 800aaa4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aaaa:	b29b      	uxth	r3, r3
 800aaac:	2b00      	cmp	r3, #0
 800aaae:	d105      	bne.n	800aabc <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	2120      	movs	r1, #32
 800aab4:	0018      	movs	r0, r3
 800aab6:	f000 f8f9 	bl	800acac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800aaba:	e02e      	b.n	800ab1a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aac0:	68fa      	ldr	r2, [r7, #12]
 800aac2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800aac4:	189a      	adds	r2, r3, r2
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aace:	b29b      	uxth	r3, r3
 800aad0:	2bff      	cmp	r3, #255	@ 0xff
 800aad2:	d903      	bls.n	800aadc <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800aad4:	68fb      	ldr	r3, [r7, #12]
 800aad6:	22ff      	movs	r2, #255	@ 0xff
 800aad8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800aada:	e004      	b.n	800aae6 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aae0:	b29a      	uxth	r2, r3
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800aae6:	68fb      	ldr	r3, [r7, #12]
 800aae8:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aaee:	0019      	movs	r1, r3
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	3328      	adds	r3, #40	@ 0x28
 800aaf6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800aafc:	f7fd fdfc 	bl	80086f8 <HAL_DMA_Start_IT>
 800ab00:	1e03      	subs	r3, r0, #0
 800ab02:	d005      	beq.n	800ab10 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	2110      	movs	r1, #16
 800ab08:	0018      	movs	r0, r3
 800ab0a:	f7ff fe6f 	bl	800a7ec <I2C_ITError>
}
 800ab0e:	e004      	b.n	800ab1a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ab10:	68fb      	ldr	r3, [r7, #12]
 800ab12:	2140      	movs	r1, #64	@ 0x40
 800ab14:	0018      	movs	r0, r3
 800ab16:	f000 f8c9 	bl	800acac <I2C_Enable_IRQ>
}
 800ab1a:	46c0      	nop			@ (mov r8, r8)
 800ab1c:	46bd      	mov	sp, r7
 800ab1e:	b004      	add	sp, #16
 800ab20:	bd80      	pop	{r7, pc}
 800ab22:	46c0      	nop			@ (mov r8, r8)
 800ab24:	ffffbfff 	.word	0xffffbfff

0800ab28 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b084      	sub	sp, #16
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ab34:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	681b      	ldr	r3, [r3, #0]
 800ab3a:	681a      	ldr	r2, [r3, #0]
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	4920      	ldr	r1, [pc, #128]	@ (800abc4 <I2C_DMAMasterReceiveCplt+0x9c>)
 800ab42:	400a      	ands	r2, r1
 800ab44:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab4a:	b29b      	uxth	r3, r3
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d105      	bne.n	800ab5c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	2120      	movs	r1, #32
 800ab54:	0018      	movs	r0, r3
 800ab56:	f000 f8a9 	bl	800acac <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ab5a:	e02e      	b.n	800abba <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	68fa      	ldr	r2, [r7, #12]
 800ab62:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ab64:	189a      	adds	r2, r3, r2
 800ab66:	68fb      	ldr	r3, [r7, #12]
 800ab68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab6e:	b29b      	uxth	r3, r3
 800ab70:	2bff      	cmp	r3, #255	@ 0xff
 800ab72:	d903      	bls.n	800ab7c <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	22ff      	movs	r2, #255	@ 0xff
 800ab78:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ab7a:	e004      	b.n	800ab86 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab80:	b29a      	uxth	r2, r3
 800ab82:	68fb      	ldr	r3, [r7, #12]
 800ab84:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ab86:	68fb      	ldr	r3, [r7, #12]
 800ab88:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	3324      	adds	r3, #36	@ 0x24
 800ab90:	0019      	movs	r1, r3
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab96:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ab9c:	f7fd fdac 	bl	80086f8 <HAL_DMA_Start_IT>
 800aba0:	1e03      	subs	r3, r0, #0
 800aba2:	d005      	beq.n	800abb0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	2110      	movs	r1, #16
 800aba8:	0018      	movs	r0, r3
 800abaa:	f7ff fe1f 	bl	800a7ec <I2C_ITError>
}
 800abae:	e004      	b.n	800abba <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	2140      	movs	r1, #64	@ 0x40
 800abb4:	0018      	movs	r0, r3
 800abb6:	f000 f879 	bl	800acac <I2C_Enable_IRQ>
}
 800abba:	46c0      	nop			@ (mov r8, r8)
 800abbc:	46bd      	mov	sp, r7
 800abbe:	b004      	add	sp, #16
 800abc0:	bd80      	pop	{r7, pc}
 800abc2:	46c0      	nop			@ (mov r8, r8)
 800abc4:	ffff7fff 	.word	0xffff7fff

0800abc8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800abc8:	b580      	push	{r7, lr}
 800abca:	b084      	sub	sp, #16
 800abcc:	af00      	add	r7, sp, #0
 800abce:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800abd4:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	685a      	ldr	r2, [r3, #4]
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	681b      	ldr	r3, [r3, #0]
 800abe0:	2180      	movs	r1, #128	@ 0x80
 800abe2:	0209      	lsls	r1, r1, #8
 800abe4:	430a      	orrs	r2, r1
 800abe6:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	2110      	movs	r1, #16
 800abec:	0018      	movs	r0, r3
 800abee:	f7ff fdfd 	bl	800a7ec <I2C_ITError>
}
 800abf2:	46c0      	nop			@ (mov r8, r8)
 800abf4:	46bd      	mov	sp, r7
 800abf6:	b004      	add	sp, #16
 800abf8:	bd80      	pop	{r7, pc}

0800abfa <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800abfa:	b580      	push	{r7, lr}
 800abfc:	b084      	sub	sp, #16
 800abfe:	af00      	add	r7, sp, #0
 800ac00:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ac06:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d003      	beq.n	800ac18 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac14:	2200      	movs	r2, #0
 800ac16:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d003      	beq.n	800ac28 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800ac20:	68fb      	ldr	r3, [r7, #12]
 800ac22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ac24:	2200      	movs	r2, #0
 800ac26:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	0018      	movs	r0, r3
 800ac2c:	f7ff fee0 	bl	800a9f0 <I2C_TreatErrorCallback>
}
 800ac30:	46c0      	nop			@ (mov r8, r8)
 800ac32:	46bd      	mov	sp, r7
 800ac34:	b004      	add	sp, #16
 800ac36:	bd80      	pop	{r7, pc}

0800ac38 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ac38:	b590      	push	{r4, r7, lr}
 800ac3a:	b087      	sub	sp, #28
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	60f8      	str	r0, [r7, #12]
 800ac40:	0008      	movs	r0, r1
 800ac42:	0011      	movs	r1, r2
 800ac44:	607b      	str	r3, [r7, #4]
 800ac46:	240a      	movs	r4, #10
 800ac48:	193b      	adds	r3, r7, r4
 800ac4a:	1c02      	adds	r2, r0, #0
 800ac4c:	801a      	strh	r2, [r3, #0]
 800ac4e:	2009      	movs	r0, #9
 800ac50:	183b      	adds	r3, r7, r0
 800ac52:	1c0a      	adds	r2, r1, #0
 800ac54:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac56:	193b      	adds	r3, r7, r4
 800ac58:	881b      	ldrh	r3, [r3, #0]
 800ac5a:	059b      	lsls	r3, r3, #22
 800ac5c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ac5e:	183b      	adds	r3, r7, r0
 800ac60:	781b      	ldrb	r3, [r3, #0]
 800ac62:	0419      	lsls	r1, r3, #16
 800ac64:	23ff      	movs	r3, #255	@ 0xff
 800ac66:	041b      	lsls	r3, r3, #16
 800ac68:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac6a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ac70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac72:	4313      	orrs	r3, r2
 800ac74:	005b      	lsls	r3, r3, #1
 800ac76:	085b      	lsrs	r3, r3, #1
 800ac78:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ac82:	0d51      	lsrs	r1, r2, #21
 800ac84:	2280      	movs	r2, #128	@ 0x80
 800ac86:	00d2      	lsls	r2, r2, #3
 800ac88:	400a      	ands	r2, r1
 800ac8a:	4907      	ldr	r1, [pc, #28]	@ (800aca8 <I2C_TransferConfig+0x70>)
 800ac8c:	430a      	orrs	r2, r1
 800ac8e:	43d2      	mvns	r2, r2
 800ac90:	401a      	ands	r2, r3
 800ac92:	0011      	movs	r1, r2
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	697a      	ldr	r2, [r7, #20]
 800ac9a:	430a      	orrs	r2, r1
 800ac9c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800ac9e:	46c0      	nop			@ (mov r8, r8)
 800aca0:	46bd      	mov	sp, r7
 800aca2:	b007      	add	sp, #28
 800aca4:	bd90      	pop	{r4, r7, pc}
 800aca6:	46c0      	nop			@ (mov r8, r8)
 800aca8:	03ff63ff 	.word	0x03ff63ff

0800acac <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800acac:	b580      	push	{r7, lr}
 800acae:	b084      	sub	sp, #16
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
 800acb4:	000a      	movs	r2, r1
 800acb6:	1cbb      	adds	r3, r7, #2
 800acb8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800acba:	2300      	movs	r3, #0
 800acbc:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acc2:	4b3e      	ldr	r3, [pc, #248]	@ (800adbc <I2C_Enable_IRQ+0x110>)
 800acc4:	429a      	cmp	r2, r3
 800acc6:	d035      	beq.n	800ad34 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800accc:	4b3c      	ldr	r3, [pc, #240]	@ (800adc0 <I2C_Enable_IRQ+0x114>)
 800acce:	429a      	cmp	r2, r3
 800acd0:	d030      	beq.n	800ad34 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800acd6:	4b3b      	ldr	r3, [pc, #236]	@ (800adc4 <I2C_Enable_IRQ+0x118>)
 800acd8:	429a      	cmp	r2, r3
 800acda:	d02b      	beq.n	800ad34 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800acdc:	1cbb      	adds	r3, r7, #2
 800acde:	2200      	movs	r2, #0
 800ace0:	5e9b      	ldrsh	r3, [r3, r2]
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	da03      	bge.n	800acee <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ace6:	68fb      	ldr	r3, [r7, #12]
 800ace8:	22b8      	movs	r2, #184	@ 0xb8
 800acea:	4313      	orrs	r3, r2
 800acec:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800acee:	1cbb      	adds	r3, r7, #2
 800acf0:	881b      	ldrh	r3, [r3, #0]
 800acf2:	2201      	movs	r2, #1
 800acf4:	4013      	ands	r3, r2
 800acf6:	d003      	beq.n	800ad00 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	22f2      	movs	r2, #242	@ 0xf2
 800acfc:	4313      	orrs	r3, r2
 800acfe:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ad00:	1cbb      	adds	r3, r7, #2
 800ad02:	881b      	ldrh	r3, [r3, #0]
 800ad04:	2202      	movs	r2, #2
 800ad06:	4013      	ands	r3, r2
 800ad08:	d003      	beq.n	800ad12 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	22f4      	movs	r2, #244	@ 0xf4
 800ad0e:	4313      	orrs	r3, r2
 800ad10:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ad12:	1cbb      	adds	r3, r7, #2
 800ad14:	881b      	ldrh	r3, [r3, #0]
 800ad16:	2b10      	cmp	r3, #16
 800ad18:	d103      	bne.n	800ad22 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2290      	movs	r2, #144	@ 0x90
 800ad1e:	4313      	orrs	r3, r2
 800ad20:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ad22:	1cbb      	adds	r3, r7, #2
 800ad24:	881b      	ldrh	r3, [r3, #0]
 800ad26:	2b20      	cmp	r3, #32
 800ad28:	d13c      	bne.n	800ada4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800ad2a:	68fb      	ldr	r3, [r7, #12]
 800ad2c:	2220      	movs	r2, #32
 800ad2e:	4313      	orrs	r3, r2
 800ad30:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ad32:	e037      	b.n	800ada4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ad34:	1cbb      	adds	r3, r7, #2
 800ad36:	2200      	movs	r2, #0
 800ad38:	5e9b      	ldrsh	r3, [r3, r2]
 800ad3a:	2b00      	cmp	r3, #0
 800ad3c:	da03      	bge.n	800ad46 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	22b8      	movs	r2, #184	@ 0xb8
 800ad42:	4313      	orrs	r3, r2
 800ad44:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800ad46:	1cbb      	adds	r3, r7, #2
 800ad48:	881b      	ldrh	r3, [r3, #0]
 800ad4a:	2201      	movs	r2, #1
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	d003      	beq.n	800ad58 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	22f2      	movs	r2, #242	@ 0xf2
 800ad54:	4313      	orrs	r3, r2
 800ad56:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ad58:	1cbb      	adds	r3, r7, #2
 800ad5a:	881b      	ldrh	r3, [r3, #0]
 800ad5c:	2202      	movs	r2, #2
 800ad5e:	4013      	ands	r3, r2
 800ad60:	d003      	beq.n	800ad6a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	22f4      	movs	r2, #244	@ 0xf4
 800ad66:	4313      	orrs	r3, r2
 800ad68:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ad6a:	1cbb      	adds	r3, r7, #2
 800ad6c:	881b      	ldrh	r3, [r3, #0]
 800ad6e:	2b10      	cmp	r3, #16
 800ad70:	d103      	bne.n	800ad7a <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	2290      	movs	r2, #144	@ 0x90
 800ad76:	4313      	orrs	r3, r2
 800ad78:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ad7a:	1cbb      	adds	r3, r7, #2
 800ad7c:	881b      	ldrh	r3, [r3, #0]
 800ad7e:	2b20      	cmp	r3, #32
 800ad80:	d103      	bne.n	800ad8a <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	2260      	movs	r2, #96	@ 0x60
 800ad86:	4313      	orrs	r3, r2
 800ad88:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ad8e:	4b0d      	ldr	r3, [pc, #52]	@ (800adc4 <I2C_Enable_IRQ+0x118>)
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d007      	beq.n	800ada4 <I2C_Enable_IRQ+0xf8>
 800ad94:	1cbb      	adds	r3, r7, #2
 800ad96:	881b      	ldrh	r3, [r3, #0]
 800ad98:	2b40      	cmp	r3, #64	@ 0x40
 800ad9a:	d103      	bne.n	800ada4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800ad9c:	68fb      	ldr	r3, [r7, #12]
 800ad9e:	2240      	movs	r2, #64	@ 0x40
 800ada0:	4313      	orrs	r3, r2
 800ada2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	6819      	ldr	r1, [r3, #0]
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	681b      	ldr	r3, [r3, #0]
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	430a      	orrs	r2, r1
 800adb2:	601a      	str	r2, [r3, #0]
}
 800adb4:	46c0      	nop			@ (mov r8, r8)
 800adb6:	46bd      	mov	sp, r7
 800adb8:	b004      	add	sp, #16
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	08009ad1 	.word	0x08009ad1
 800adc0:	08009f01 	.word	0x08009f01
 800adc4:	08009cc9 	.word	0x08009cc9

0800adc8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800adc8:	b580      	push	{r7, lr}
 800adca:	b084      	sub	sp, #16
 800adcc:	af00      	add	r7, sp, #0
 800adce:	6078      	str	r0, [r7, #4]
 800add0:	000a      	movs	r2, r1
 800add2:	1cbb      	adds	r3, r7, #2
 800add4:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800add6:	2300      	movs	r3, #0
 800add8:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800adda:	1cbb      	adds	r3, r7, #2
 800addc:	881b      	ldrh	r3, [r3, #0]
 800adde:	2201      	movs	r2, #1
 800ade0:	4013      	ands	r3, r2
 800ade2:	d010      	beq.n	800ae06 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	2242      	movs	r2, #66	@ 0x42
 800ade8:	4313      	orrs	r3, r2
 800adea:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	2241      	movs	r2, #65	@ 0x41
 800adf0:	5c9b      	ldrb	r3, [r3, r2]
 800adf2:	b2db      	uxtb	r3, r3
 800adf4:	001a      	movs	r2, r3
 800adf6:	2328      	movs	r3, #40	@ 0x28
 800adf8:	4013      	ands	r3, r2
 800adfa:	2b28      	cmp	r3, #40	@ 0x28
 800adfc:	d003      	beq.n	800ae06 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800adfe:	68fb      	ldr	r3, [r7, #12]
 800ae00:	22b0      	movs	r2, #176	@ 0xb0
 800ae02:	4313      	orrs	r3, r2
 800ae04:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800ae06:	1cbb      	adds	r3, r7, #2
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	2202      	movs	r2, #2
 800ae0c:	4013      	ands	r3, r2
 800ae0e:	d010      	beq.n	800ae32 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	2244      	movs	r2, #68	@ 0x44
 800ae14:	4313      	orrs	r3, r2
 800ae16:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	2241      	movs	r2, #65	@ 0x41
 800ae1c:	5c9b      	ldrb	r3, [r3, r2]
 800ae1e:	b2db      	uxtb	r3, r3
 800ae20:	001a      	movs	r2, r3
 800ae22:	2328      	movs	r3, #40	@ 0x28
 800ae24:	4013      	ands	r3, r2
 800ae26:	2b28      	cmp	r3, #40	@ 0x28
 800ae28:	d003      	beq.n	800ae32 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ae2a:	68fb      	ldr	r3, [r7, #12]
 800ae2c:	22b0      	movs	r2, #176	@ 0xb0
 800ae2e:	4313      	orrs	r3, r2
 800ae30:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800ae32:	1cbb      	adds	r3, r7, #2
 800ae34:	2200      	movs	r2, #0
 800ae36:	5e9b      	ldrsh	r3, [r3, r2]
 800ae38:	2b00      	cmp	r3, #0
 800ae3a:	da03      	bge.n	800ae44 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800ae3c:	68fb      	ldr	r3, [r7, #12]
 800ae3e:	22b8      	movs	r2, #184	@ 0xb8
 800ae40:	4313      	orrs	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800ae44:	1cbb      	adds	r3, r7, #2
 800ae46:	881b      	ldrh	r3, [r3, #0]
 800ae48:	2b10      	cmp	r3, #16
 800ae4a:	d103      	bne.n	800ae54 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	2290      	movs	r2, #144	@ 0x90
 800ae50:	4313      	orrs	r3, r2
 800ae52:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800ae54:	1cbb      	adds	r3, r7, #2
 800ae56:	881b      	ldrh	r3, [r3, #0]
 800ae58:	2b20      	cmp	r3, #32
 800ae5a:	d103      	bne.n	800ae64 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	2220      	movs	r2, #32
 800ae60:	4313      	orrs	r3, r2
 800ae62:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800ae64:	1cbb      	adds	r3, r7, #2
 800ae66:	881b      	ldrh	r3, [r3, #0]
 800ae68:	2b40      	cmp	r3, #64	@ 0x40
 800ae6a:	d103      	bne.n	800ae74 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2240      	movs	r2, #64	@ 0x40
 800ae70:	4313      	orrs	r3, r2
 800ae72:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	681a      	ldr	r2, [r3, #0]
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	43d9      	mvns	r1, r3
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	400a      	ands	r2, r1
 800ae84:	601a      	str	r2, [r3, #0]
}
 800ae86:	46c0      	nop			@ (mov r8, r8)
 800ae88:	46bd      	mov	sp, r7
 800ae8a:	b004      	add	sp, #16
 800ae8c:	bd80      	pop	{r7, pc}
	...

0800ae90 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	2241      	movs	r2, #65	@ 0x41
 800ae9e:	5c9b      	ldrb	r3, [r3, r2]
 800aea0:	b2db      	uxtb	r3, r3
 800aea2:	2b20      	cmp	r3, #32
 800aea4:	d138      	bne.n	800af18 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	2240      	movs	r2, #64	@ 0x40
 800aeaa:	5c9b      	ldrb	r3, [r3, r2]
 800aeac:	2b01      	cmp	r3, #1
 800aeae:	d101      	bne.n	800aeb4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800aeb0:	2302      	movs	r3, #2
 800aeb2:	e032      	b.n	800af1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	2240      	movs	r2, #64	@ 0x40
 800aeb8:	2101      	movs	r1, #1
 800aeba:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	2241      	movs	r2, #65	@ 0x41
 800aec0:	2124      	movs	r1, #36	@ 0x24
 800aec2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	681a      	ldr	r2, [r3, #0]
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	2101      	movs	r1, #1
 800aed0:	438a      	bics	r2, r1
 800aed2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	681b      	ldr	r3, [r3, #0]
 800aed8:	681a      	ldr	r2, [r3, #0]
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	4911      	ldr	r1, [pc, #68]	@ (800af24 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800aee0:	400a      	ands	r2, r1
 800aee2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	681b      	ldr	r3, [r3, #0]
 800aee8:	6819      	ldr	r1, [r3, #0]
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	683a      	ldr	r2, [r7, #0]
 800aef0:	430a      	orrs	r2, r1
 800aef2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	681b      	ldr	r3, [r3, #0]
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2101      	movs	r1, #1
 800af00:	430a      	orrs	r2, r1
 800af02:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2241      	movs	r2, #65	@ 0x41
 800af08:	2120      	movs	r1, #32
 800af0a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	2240      	movs	r2, #64	@ 0x40
 800af10:	2100      	movs	r1, #0
 800af12:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800af14:	2300      	movs	r3, #0
 800af16:	e000      	b.n	800af1a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800af18:	2302      	movs	r3, #2
  }
}
 800af1a:	0018      	movs	r0, r3
 800af1c:	46bd      	mov	sp, r7
 800af1e:	b002      	add	sp, #8
 800af20:	bd80      	pop	{r7, pc}
 800af22:	46c0      	nop			@ (mov r8, r8)
 800af24:	ffffefff 	.word	0xffffefff

0800af28 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b084      	sub	sp, #16
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	2241      	movs	r2, #65	@ 0x41
 800af36:	5c9b      	ldrb	r3, [r3, r2]
 800af38:	b2db      	uxtb	r3, r3
 800af3a:	2b20      	cmp	r3, #32
 800af3c:	d139      	bne.n	800afb2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	2240      	movs	r2, #64	@ 0x40
 800af42:	5c9b      	ldrb	r3, [r3, r2]
 800af44:	2b01      	cmp	r3, #1
 800af46:	d101      	bne.n	800af4c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800af48:	2302      	movs	r3, #2
 800af4a:	e033      	b.n	800afb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2240      	movs	r2, #64	@ 0x40
 800af50:	2101      	movs	r1, #1
 800af52:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	2241      	movs	r2, #65	@ 0x41
 800af58:	2124      	movs	r1, #36	@ 0x24
 800af5a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	681a      	ldr	r2, [r3, #0]
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	2101      	movs	r1, #1
 800af68:	438a      	bics	r2, r1
 800af6a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4a11      	ldr	r2, [pc, #68]	@ (800afbc <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800af78:	4013      	ands	r3, r2
 800af7a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	021b      	lsls	r3, r3, #8
 800af80:	68fa      	ldr	r2, [r7, #12]
 800af82:	4313      	orrs	r3, r2
 800af84:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	681a      	ldr	r2, [r3, #0]
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	2101      	movs	r1, #1
 800af9a:	430a      	orrs	r2, r1
 800af9c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	2241      	movs	r2, #65	@ 0x41
 800afa2:	2120      	movs	r1, #32
 800afa4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2240      	movs	r2, #64	@ 0x40
 800afaa:	2100      	movs	r1, #0
 800afac:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800afae:	2300      	movs	r3, #0
 800afb0:	e000      	b.n	800afb4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800afb2:	2302      	movs	r3, #2
  }
}
 800afb4:	0018      	movs	r0, r3
 800afb6:	46bd      	mov	sp, r7
 800afb8:	b004      	add	sp, #16
 800afba:	bd80      	pop	{r7, pc}
 800afbc:	fffff0ff 	.word	0xfffff0ff

0800afc0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800afc0:	b580      	push	{r7, lr}
 800afc2:	b088      	sub	sp, #32
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	2b00      	cmp	r3, #0
 800afcc:	d101      	bne.n	800afd2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800afce:	2301      	movs	r3, #1
 800afd0:	e0e1      	b.n	800b196 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800afd2:	687b      	ldr	r3, [r7, #4]
 800afd4:	2235      	movs	r2, #53	@ 0x35
 800afd6:	5c9b      	ldrb	r3, [r3, r2]
 800afd8:	b2db      	uxtb	r3, r3
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d107      	bne.n	800afee <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2234      	movs	r2, #52	@ 0x34
 800afe2:	2100      	movs	r1, #0
 800afe4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	0018      	movs	r0, r3
 800afea:	f7f9 ff93 	bl	8004f14 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2235      	movs	r2, #53	@ 0x35
 800aff2:	2102      	movs	r1, #2
 800aff4:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	69da      	ldr	r2, [r3, #28]
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	4967      	ldr	r1, [pc, #412]	@ (800b1a0 <HAL_I2S_Init+0x1e0>)
 800b002:	400a      	ands	r2, r1
 800b004:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	2202      	movs	r2, #2
 800b00c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	695b      	ldr	r3, [r3, #20]
 800b012:	2b02      	cmp	r3, #2
 800b014:	d073      	beq.n	800b0fe <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	68db      	ldr	r3, [r3, #12]
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d102      	bne.n	800b024 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800b01e:	2310      	movs	r3, #16
 800b020:	617b      	str	r3, [r7, #20]
 800b022:	e001      	b.n	800b028 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800b024:	2320      	movs	r3, #32
 800b026:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	689b      	ldr	r3, [r3, #8]
 800b02c:	2b20      	cmp	r3, #32
 800b02e:	d802      	bhi.n	800b036 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800b030:	697b      	ldr	r3, [r7, #20]
 800b032:	005b      	lsls	r3, r3, #1
 800b034:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800b036:	f001 f957 	bl	800c2e8 <HAL_RCC_GetSysClockFreq>
 800b03a:	0003      	movs	r3, r0
 800b03c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	691a      	ldr	r2, [r3, #16]
 800b042:	2380      	movs	r3, #128	@ 0x80
 800b044:	009b      	lsls	r3, r3, #2
 800b046:	429a      	cmp	r2, r3
 800b048:	d131      	bne.n	800b0ae <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	68db      	ldr	r3, [r3, #12]
 800b04e:	2b00      	cmp	r3, #0
 800b050:	d016      	beq.n	800b080 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b052:	697b      	ldr	r3, [r7, #20]
 800b054:	009b      	lsls	r3, r3, #2
 800b056:	0019      	movs	r1, r3
 800b058:	68f8      	ldr	r0, [r7, #12]
 800b05a:	f7f5 f871 	bl	8000140 <__udivsi3>
 800b05e:	0003      	movs	r3, r0
 800b060:	001a      	movs	r2, r3
 800b062:	0013      	movs	r3, r2
 800b064:	009b      	lsls	r3, r3, #2
 800b066:	189b      	adds	r3, r3, r2
 800b068:	005b      	lsls	r3, r3, #1
 800b06a:	001a      	movs	r2, r3
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	695b      	ldr	r3, [r3, #20]
 800b070:	0019      	movs	r1, r3
 800b072:	0010      	movs	r0, r2
 800b074:	f7f5 f864 	bl	8000140 <__udivsi3>
 800b078:	0003      	movs	r3, r0
 800b07a:	3305      	adds	r3, #5
 800b07c:	613b      	str	r3, [r7, #16]
 800b07e:	e02a      	b.n	800b0d6 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	00db      	lsls	r3, r3, #3
 800b084:	0019      	movs	r1, r3
 800b086:	68f8      	ldr	r0, [r7, #12]
 800b088:	f7f5 f85a 	bl	8000140 <__udivsi3>
 800b08c:	0003      	movs	r3, r0
 800b08e:	001a      	movs	r2, r3
 800b090:	0013      	movs	r3, r2
 800b092:	009b      	lsls	r3, r3, #2
 800b094:	189b      	adds	r3, r3, r2
 800b096:	005b      	lsls	r3, r3, #1
 800b098:	001a      	movs	r2, r3
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	695b      	ldr	r3, [r3, #20]
 800b09e:	0019      	movs	r1, r3
 800b0a0:	0010      	movs	r0, r2
 800b0a2:	f7f5 f84d 	bl	8000140 <__udivsi3>
 800b0a6:	0003      	movs	r3, r0
 800b0a8:	3305      	adds	r3, #5
 800b0aa:	613b      	str	r3, [r7, #16]
 800b0ac:	e013      	b.n	800b0d6 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800b0ae:	6979      	ldr	r1, [r7, #20]
 800b0b0:	68f8      	ldr	r0, [r7, #12]
 800b0b2:	f7f5 f845 	bl	8000140 <__udivsi3>
 800b0b6:	0003      	movs	r3, r0
 800b0b8:	001a      	movs	r2, r3
 800b0ba:	0013      	movs	r3, r2
 800b0bc:	009b      	lsls	r3, r3, #2
 800b0be:	189b      	adds	r3, r3, r2
 800b0c0:	005b      	lsls	r3, r3, #1
 800b0c2:	001a      	movs	r2, r3
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	695b      	ldr	r3, [r3, #20]
 800b0c8:	0019      	movs	r1, r3
 800b0ca:	0010      	movs	r0, r2
 800b0cc:	f7f5 f838 	bl	8000140 <__udivsi3>
 800b0d0:	0003      	movs	r3, r0
 800b0d2:	3305      	adds	r3, #5
 800b0d4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800b0d6:	693b      	ldr	r3, [r7, #16]
 800b0d8:	210a      	movs	r1, #10
 800b0da:	0018      	movs	r0, r3
 800b0dc:	f7f5 f830 	bl	8000140 <__udivsi3>
 800b0e0:	0003      	movs	r3, r0
 800b0e2:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	2201      	movs	r2, #1
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800b0ec:	693a      	ldr	r2, [r7, #16]
 800b0ee:	69bb      	ldr	r3, [r7, #24]
 800b0f0:	1ad3      	subs	r3, r2, r3
 800b0f2:	085b      	lsrs	r3, r3, #1
 800b0f4:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800b0f6:	69bb      	ldr	r3, [r7, #24]
 800b0f8:	021b      	lsls	r3, r3, #8
 800b0fa:	61bb      	str	r3, [r7, #24]
 800b0fc:	e003      	b.n	800b106 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800b0fe:	2302      	movs	r3, #2
 800b100:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800b102:	2300      	movs	r3, #0
 800b104:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800b106:	69fb      	ldr	r3, [r7, #28]
 800b108:	2b01      	cmp	r3, #1
 800b10a:	d902      	bls.n	800b112 <HAL_I2S_Init+0x152>
 800b10c:	69fb      	ldr	r3, [r7, #28]
 800b10e:	2bff      	cmp	r3, #255	@ 0xff
 800b110:	d907      	bls.n	800b122 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b116:	2210      	movs	r2, #16
 800b118:	431a      	orrs	r2, r3
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800b11e:	2301      	movs	r3, #1
 800b120:	e039      	b.n	800b196 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	691a      	ldr	r2, [r3, #16]
 800b126:	69bb      	ldr	r3, [r7, #24]
 800b128:	431a      	orrs	r2, r3
 800b12a:	0011      	movs	r1, r2
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	69fa      	ldr	r2, [r7, #28]
 800b132:	430a      	orrs	r2, r1
 800b134:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	69db      	ldr	r3, [r3, #28]
 800b13c:	4a18      	ldr	r2, [pc, #96]	@ (800b1a0 <HAL_I2S_Init+0x1e0>)
 800b13e:	401a      	ands	r2, r3
 800b140:	687b      	ldr	r3, [r7, #4]
 800b142:	6859      	ldr	r1, [r3, #4]
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	689b      	ldr	r3, [r3, #8]
 800b148:	4319      	orrs	r1, r3
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	68db      	ldr	r3, [r3, #12]
 800b14e:	4319      	orrs	r1, r3
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	699b      	ldr	r3, [r3, #24]
 800b154:	430b      	orrs	r3, r1
 800b156:	431a      	orrs	r2, r3
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2180      	movs	r1, #128	@ 0x80
 800b15e:	0109      	lsls	r1, r1, #4
 800b160:	430a      	orrs	r2, r1
 800b162:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	689b      	ldr	r3, [r3, #8]
 800b168:	2b30      	cmp	r3, #48	@ 0x30
 800b16a:	d003      	beq.n	800b174 <HAL_I2S_Init+0x1b4>
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	2bb0      	cmp	r3, #176	@ 0xb0
 800b172:	d108      	bne.n	800b186 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	69da      	ldr	r2, [r3, #28]
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	2180      	movs	r1, #128	@ 0x80
 800b180:	0149      	lsls	r1, r1, #5
 800b182:	430a      	orrs	r2, r1
 800b184:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	2200      	movs	r2, #0
 800b18a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	2235      	movs	r2, #53	@ 0x35
 800b190:	2101      	movs	r1, #1
 800b192:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b194:	2300      	movs	r3, #0
}
 800b196:	0018      	movs	r0, r3
 800b198:	46bd      	mov	sp, r7
 800b19a:	b008      	add	sp, #32
 800b19c:	bd80      	pop	{r7, pc}
 800b19e:	46c0      	nop			@ (mov r8, r8)
 800b1a0:	fffff040 	.word	0xfffff040

0800b1a4 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800b1a4:	b580      	push	{r7, lr}
 800b1a6:	b082      	sub	sp, #8
 800b1a8:	af00      	add	r7, sp, #0
 800b1aa:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d101      	bne.n	800b1b6 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800b1b2:	2301      	movs	r3, #1
 800b1b4:	e01b      	b.n	800b1ee <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	2235      	movs	r2, #53	@ 0x35
 800b1ba:	2102      	movs	r1, #2
 800b1bc:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	69da      	ldr	r2, [r3, #28]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	490b      	ldr	r1, [pc, #44]	@ (800b1f8 <HAL_I2S_DeInit+0x54>)
 800b1ca:	400a      	ands	r2, r1
 800b1cc:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	0018      	movs	r0, r3
 800b1d2:	f7f9 ff13 	bl	8004ffc <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	2235      	movs	r2, #53	@ 0x35
 800b1e0:	2100      	movs	r1, #0
 800b1e2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	2234      	movs	r2, #52	@ 0x34
 800b1e8:	2100      	movs	r1, #0
 800b1ea:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b1ec:	2300      	movs	r3, #0
}
 800b1ee:	0018      	movs	r0, r3
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	b002      	add	sp, #8
 800b1f4:	bd80      	pop	{r7, pc}
 800b1f6:	46c0      	nop			@ (mov r8, r8)
 800b1f8:	fffffbff 	.word	0xfffffbff

0800b1fc <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	1dbb      	adds	r3, r7, #6
 800b208:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <HAL_I2S_Receive_DMA+0x1c>
 800b210:	1dbb      	adds	r3, r7, #6
 800b212:	881b      	ldrh	r3, [r3, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	d101      	bne.n	800b21c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800b218:	2301      	movs	r3, #1
 800b21a:	e0a6      	b.n	800b36a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800b21c:	68fb      	ldr	r3, [r7, #12]
 800b21e:	2234      	movs	r2, #52	@ 0x34
 800b220:	5c9b      	ldrb	r3, [r3, r2]
 800b222:	b2db      	uxtb	r3, r3
 800b224:	2b01      	cmp	r3, #1
 800b226:	d101      	bne.n	800b22c <HAL_I2S_Receive_DMA+0x30>
 800b228:	2302      	movs	r3, #2
 800b22a:	e09e      	b.n	800b36a <HAL_I2S_Receive_DMA+0x16e>
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2234      	movs	r2, #52	@ 0x34
 800b230:	2101      	movs	r1, #1
 800b232:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2235      	movs	r2, #53	@ 0x35
 800b238:	5c9b      	ldrb	r3, [r3, r2]
 800b23a:	b2db      	uxtb	r3, r3
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d005      	beq.n	800b24c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	2234      	movs	r2, #52	@ 0x34
 800b244:	2100      	movs	r1, #0
 800b246:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800b248:	2302      	movs	r3, #2
 800b24a:	e08e      	b.n	800b36a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	2235      	movs	r2, #53	@ 0x35
 800b250:	2104      	movs	r1, #4
 800b252:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	2200      	movs	r2, #0
 800b258:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	68ba      	ldr	r2, [r7, #8]
 800b25e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	2207      	movs	r2, #7
 800b268:	4013      	ands	r3, r2
 800b26a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800b26c:	697b      	ldr	r3, [r7, #20]
 800b26e:	2b03      	cmp	r3, #3
 800b270:	d002      	beq.n	800b278 <HAL_I2S_Receive_DMA+0x7c>
 800b272:	697b      	ldr	r3, [r7, #20]
 800b274:	2b05      	cmp	r3, #5
 800b276:	d10c      	bne.n	800b292 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800b278:	1dbb      	adds	r3, r7, #6
 800b27a:	881b      	ldrh	r3, [r3, #0]
 800b27c:	18db      	adds	r3, r3, r3
 800b27e:	b29a      	uxth	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800b284:	1dbb      	adds	r3, r7, #6
 800b286:	881b      	ldrh	r3, [r3, #0]
 800b288:	18db      	adds	r3, r3, r3
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b290:	e007      	b.n	800b2a2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	1dba      	adds	r2, r7, #6
 800b296:	8812      	ldrh	r2, [r2, #0]
 800b298:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	1dba      	adds	r2, r7, #6
 800b29e:	8812      	ldrh	r2, [r2, #0]
 800b2a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2a6:	4a33      	ldr	r2, [pc, #204]	@ (800b374 <HAL_I2S_Receive_DMA+0x178>)
 800b2a8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ae:	4a32      	ldr	r2, [pc, #200]	@ (800b378 <HAL_I2S_Receive_DMA+0x17c>)
 800b2b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2b6:	4a31      	ldr	r2, [pc, #196]	@ (800b37c <HAL_I2S_Receive_DMA+0x180>)
 800b2b8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	69da      	ldr	r2, [r3, #28]
 800b2c0:	23c0      	movs	r3, #192	@ 0xc0
 800b2c2:	009b      	lsls	r3, r3, #2
 800b2c4:	401a      	ands	r2, r3
 800b2c6:	23c0      	movs	r3, #192	@ 0xc0
 800b2c8:	009b      	lsls	r3, r3, #2
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d10a      	bne.n	800b2e4 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	613b      	str	r3, [r7, #16]
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	68db      	ldr	r3, [r3, #12]
 800b2d8:	613b      	str	r3, [r7, #16]
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	613b      	str	r3, [r7, #16]
 800b2e2:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	330c      	adds	r3, #12
 800b2ee:	0019      	movs	r1, r3
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b2f4:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2fa:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800b2fc:	f7fd f9fc 	bl	80086f8 <HAL_DMA_Start_IT>
 800b300:	1e03      	subs	r3, r0, #0
 800b302:	d00f      	beq.n	800b324 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b308:	2208      	movs	r2, #8
 800b30a:	431a      	orrs	r2, r3
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2235      	movs	r2, #53	@ 0x35
 800b314:	2101      	movs	r1, #1
 800b316:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2234      	movs	r2, #52	@ 0x34
 800b31c:	2100      	movs	r1, #0
 800b31e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800b320:	2301      	movs	r3, #1
 800b322:	e022      	b.n	800b36a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	681b      	ldr	r3, [r3, #0]
 800b328:	69da      	ldr	r2, [r3, #28]
 800b32a:	2380      	movs	r3, #128	@ 0x80
 800b32c:	00db      	lsls	r3, r3, #3
 800b32e:	4013      	ands	r3, r2
 800b330:	d108      	bne.n	800b344 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	69da      	ldr	r2, [r3, #28]
 800b338:	68fb      	ldr	r3, [r7, #12]
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	2180      	movs	r1, #128	@ 0x80
 800b33e:	00c9      	lsls	r1, r1, #3
 800b340:	430a      	orrs	r2, r1
 800b342:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800b344:	68fb      	ldr	r3, [r7, #12]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	685b      	ldr	r3, [r3, #4]
 800b34a:	2201      	movs	r2, #1
 800b34c:	4013      	ands	r3, r2
 800b34e:	d107      	bne.n	800b360 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	685a      	ldr	r2, [r3, #4]
 800b356:	68fb      	ldr	r3, [r7, #12]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	2101      	movs	r1, #1
 800b35c:	430a      	orrs	r2, r1
 800b35e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2234      	movs	r2, #52	@ 0x34
 800b364:	2100      	movs	r1, #0
 800b366:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800b368:	2300      	movs	r3, #0
}
 800b36a:	0018      	movs	r0, r3
 800b36c:	46bd      	mov	sp, r7
 800b36e:	b006      	add	sp, #24
 800b370:	bd80      	pop	{r7, pc}
 800b372:	46c0      	nop			@ (mov r8, r8)
 800b374:	0800b57d 	.word	0x0800b57d
 800b378:	0800b539 	.word	0x0800b539
 800b37c:	0800b59b 	.word	0x0800b59b

0800b380 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800b380:	b580      	push	{r7, lr}
 800b382:	b086      	sub	sp, #24
 800b384:	af00      	add	r7, sp, #0
 800b386:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b388:	2317      	movs	r3, #23
 800b38a:	18fb      	adds	r3, r7, r3
 800b38c:	2200      	movs	r2, #0
 800b38e:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	685a      	ldr	r2, [r3, #4]
 800b394:	2380      	movs	r3, #128	@ 0x80
 800b396:	009b      	lsls	r3, r3, #2
 800b398:	429a      	cmp	r2, r3
 800b39a:	d003      	beq.n	800b3a4 <HAL_I2S_DMAStop+0x24>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	685b      	ldr	r3, [r3, #4]
 800b3a0:	2b00      	cmp	r3, #0
 800b3a2:	d158      	bne.n	800b456 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d010      	beq.n	800b3ce <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b0:	0018      	movs	r0, r3
 800b3b2:	f7fd fa07 	bl	80087c4 <HAL_DMA_Abort>
 800b3b6:	1e03      	subs	r3, r0, #0
 800b3b8:	d009      	beq.n	800b3ce <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3be:	2208      	movs	r2, #8
 800b3c0:	431a      	orrs	r2, r3
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800b3c6:	2317      	movs	r3, #23
 800b3c8:	18fb      	adds	r3, r7, r3
 800b3ca:	2201      	movs	r2, #1
 800b3cc:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	2364      	movs	r3, #100	@ 0x64
 800b3d2:	2201      	movs	r2, #1
 800b3d4:	2102      	movs	r1, #2
 800b3d6:	f000 f907 	bl	800b5e8 <I2S_WaitFlagStateUntilTimeout>
 800b3da:	1e03      	subs	r3, r0, #0
 800b3dc:	d00d      	beq.n	800b3fa <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3e2:	2201      	movs	r2, #1
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	2235      	movs	r2, #53	@ 0x35
 800b3ee:	2101      	movs	r1, #1
 800b3f0:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800b3f2:	2317      	movs	r3, #23
 800b3f4:	18fb      	adds	r3, r7, r3
 800b3f6:	2201      	movs	r2, #1
 800b3f8:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800b3fa:	6878      	ldr	r0, [r7, #4]
 800b3fc:	2364      	movs	r3, #100	@ 0x64
 800b3fe:	2200      	movs	r2, #0
 800b400:	2180      	movs	r1, #128	@ 0x80
 800b402:	f000 f8f1 	bl	800b5e8 <I2S_WaitFlagStateUntilTimeout>
 800b406:	1e03      	subs	r3, r0, #0
 800b408:	d00d      	beq.n	800b426 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b40e:	2201      	movs	r2, #1
 800b410:	431a      	orrs	r2, r3
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	2235      	movs	r2, #53	@ 0x35
 800b41a:	2101      	movs	r1, #1
 800b41c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800b41e:	2317      	movs	r3, #23
 800b420:	18fb      	adds	r3, r7, r3
 800b422:	2201      	movs	r2, #1
 800b424:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	69da      	ldr	r2, [r3, #28]
 800b42c:	687b      	ldr	r3, [r7, #4]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	4938      	ldr	r1, [pc, #224]	@ (800b514 <HAL_I2S_DMAStop+0x194>)
 800b432:	400a      	ands	r2, r1
 800b434:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800b436:	2300      	movs	r3, #0
 800b438:	613b      	str	r3, [r7, #16]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	613b      	str	r3, [r7, #16]
 800b442:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	685a      	ldr	r2, [r3, #4]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681b      	ldr	r3, [r3, #0]
 800b44e:	2102      	movs	r1, #2
 800b450:	438a      	bics	r2, r1
 800b452:	605a      	str	r2, [r3, #4]
 800b454:	e053      	b.n	800b4fe <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	685a      	ldr	r2, [r3, #4]
 800b45a:	23c0      	movs	r3, #192	@ 0xc0
 800b45c:	009b      	lsls	r3, r3, #2
 800b45e:	429a      	cmp	r2, r3
 800b460:	d005      	beq.n	800b46e <HAL_I2S_DMAStop+0xee>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	685a      	ldr	r2, [r3, #4]
 800b466:	2380      	movs	r3, #128	@ 0x80
 800b468:	005b      	lsls	r3, r3, #1
 800b46a:	429a      	cmp	r2, r3
 800b46c:	d147      	bne.n	800b4fe <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b472:	2b00      	cmp	r3, #0
 800b474:	d010      	beq.n	800b498 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b47a:	0018      	movs	r0, r3
 800b47c:	f7fd f9a2 	bl	80087c4 <HAL_DMA_Abort>
 800b480:	1e03      	subs	r3, r0, #0
 800b482:	d009      	beq.n	800b498 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b488:	2208      	movs	r2, #8
 800b48a:	431a      	orrs	r2, r3
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800b490:	2317      	movs	r3, #23
 800b492:	18fb      	adds	r3, r7, r3
 800b494:	2201      	movs	r2, #1
 800b496:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	69da      	ldr	r2, [r3, #28]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	491c      	ldr	r1, [pc, #112]	@ (800b514 <HAL_I2S_DMAStop+0x194>)
 800b4a4:	400a      	ands	r2, r1
 800b4a6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800b4a8:	2300      	movs	r3, #0
 800b4aa:	60fb      	str	r3, [r7, #12]
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	681b      	ldr	r3, [r3, #0]
 800b4b0:	68db      	ldr	r3, [r3, #12]
 800b4b2:	60fb      	str	r3, [r7, #12]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	689b      	ldr	r3, [r3, #8]
 800b4ba:	60fb      	str	r3, [r7, #12]
 800b4bc:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685a      	ldr	r2, [r3, #4]
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	681b      	ldr	r3, [r3, #0]
 800b4c8:	2101      	movs	r1, #1
 800b4ca:	438a      	bics	r2, r1
 800b4cc:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	685a      	ldr	r2, [r3, #4]
 800b4d2:	2380      	movs	r3, #128	@ 0x80
 800b4d4:	005b      	lsls	r3, r3, #1
 800b4d6:	429a      	cmp	r2, r3
 800b4d8:	d10e      	bne.n	800b4f8 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b4de:	2240      	movs	r2, #64	@ 0x40
 800b4e0:	431a      	orrs	r2, r3
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2235      	movs	r2, #53	@ 0x35
 800b4ea:	2101      	movs	r1, #1
 800b4ec:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800b4ee:	2317      	movs	r3, #23
 800b4f0:	18fb      	adds	r3, r7, r3
 800b4f2:	2201      	movs	r2, #1
 800b4f4:	701a      	strb	r2, [r3, #0]
 800b4f6:	e002      	b.n	800b4fe <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800b4fe:	687b      	ldr	r3, [r7, #4]
 800b500:	2235      	movs	r2, #53	@ 0x35
 800b502:	2101      	movs	r1, #1
 800b504:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800b506:	2317      	movs	r3, #23
 800b508:	18fb      	adds	r3, r7, r3
 800b50a:	781b      	ldrb	r3, [r3, #0]
}
 800b50c:	0018      	movs	r0, r3
 800b50e:	46bd      	mov	sp, r7
 800b510:	b006      	add	sp, #24
 800b512:	bd80      	pop	{r7, pc}
 800b514:	fffffbff 	.word	0xfffffbff

0800b518 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800b518:	b580      	push	{r7, lr}
 800b51a:	b082      	sub	sp, #8
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800b520:	46c0      	nop			@ (mov r8, r8)
 800b522:	46bd      	mov	sp, r7
 800b524:	b002      	add	sp, #8
 800b526:	bd80      	pop	{r7, pc}

0800b528 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800b528:	b580      	push	{r7, lr}
 800b52a:	b082      	sub	sp, #8
 800b52c:	af00      	add	r7, sp, #0
 800b52e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800b530:	46c0      	nop			@ (mov r8, r8)
 800b532:	46bd      	mov	sp, r7
 800b534:	b002      	add	sp, #8
 800b536:	bd80      	pop	{r7, pc}

0800b538 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800b538:	b580      	push	{r7, lr}
 800b53a:	b084      	sub	sp, #16
 800b53c:	af00      	add	r7, sp, #0
 800b53e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b544:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	69db      	ldr	r3, [r3, #28]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10e      	bne.n	800b56c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	685a      	ldr	r2, [r3, #4]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	2101      	movs	r1, #1
 800b55a:	438a      	bics	r2, r1
 800b55c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800b55e:	68fb      	ldr	r3, [r7, #12]
 800b560:	2200      	movs	r2, #0
 800b562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800b564:	68fb      	ldr	r3, [r7, #12]
 800b566:	2235      	movs	r2, #53	@ 0x35
 800b568:	2101      	movs	r1, #1
 800b56a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	0018      	movs	r0, r3
 800b570:	f7fa fa6c 	bl	8005a4c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800b574:	46c0      	nop			@ (mov r8, r8)
 800b576:	46bd      	mov	sp, r7
 800b578:	b004      	add	sp, #16
 800b57a:	bd80      	pop	{r7, pc}

0800b57c <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800b57c:	b580      	push	{r7, lr}
 800b57e:	b084      	sub	sp, #16
 800b580:	af00      	add	r7, sp, #0
 800b582:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b588:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800b58a:	68fb      	ldr	r3, [r7, #12]
 800b58c:	0018      	movs	r0, r3
 800b58e:	f7ff ffc3 	bl	800b518 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800b592:	46c0      	nop			@ (mov r8, r8)
 800b594:	46bd      	mov	sp, r7
 800b596:	b004      	add	sp, #16
 800b598:	bd80      	pop	{r7, pc}

0800b59a <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800b59a:	b580      	push	{r7, lr}
 800b59c:	b084      	sub	sp, #16
 800b59e:	af00      	add	r7, sp, #0
 800b5a0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5a6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	685a      	ldr	r2, [r3, #4]
 800b5ae:	68fb      	ldr	r3, [r7, #12]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	2103      	movs	r1, #3
 800b5b4:	438a      	bics	r2, r1
 800b5b6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	2200      	movs	r2, #0
 800b5bc:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	2235      	movs	r2, #53	@ 0x35
 800b5c8:	2101      	movs	r1, #1
 800b5ca:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800b5cc:	68fb      	ldr	r3, [r7, #12]
 800b5ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b5d0:	2208      	movs	r2, #8
 800b5d2:	431a      	orrs	r2, r3
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800b5d8:	68fb      	ldr	r3, [r7, #12]
 800b5da:	0018      	movs	r0, r3
 800b5dc:	f7ff ffa4 	bl	800b528 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800b5e0:	46c0      	nop			@ (mov r8, r8)
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	b004      	add	sp, #16
 800b5e6:	bd80      	pop	{r7, pc}

0800b5e8 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b086      	sub	sp, #24
 800b5ec:	af00      	add	r7, sp, #0
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	60b9      	str	r1, [r7, #8]
 800b5f2:	603b      	str	r3, [r7, #0]
 800b5f4:	1dfb      	adds	r3, r7, #7
 800b5f6:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800b5f8:	f7fc fe9c 	bl	8008334 <HAL_GetTick>
 800b5fc:	0003      	movs	r3, r0
 800b5fe:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800b600:	e017      	b.n	800b632 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	3301      	adds	r3, #1
 800b606:	d014      	beq.n	800b632 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800b608:	f7fc fe94 	bl	8008334 <HAL_GetTick>
 800b60c:	0002      	movs	r2, r0
 800b60e:	697b      	ldr	r3, [r7, #20]
 800b610:	1ad3      	subs	r3, r2, r3
 800b612:	683a      	ldr	r2, [r7, #0]
 800b614:	429a      	cmp	r2, r3
 800b616:	d902      	bls.n	800b61e <I2S_WaitFlagStateUntilTimeout+0x36>
 800b618:	683b      	ldr	r3, [r7, #0]
 800b61a:	2b00      	cmp	r3, #0
 800b61c:	d109      	bne.n	800b632 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	2235      	movs	r2, #53	@ 0x35
 800b622:	2101      	movs	r1, #1
 800b624:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800b626:	68fb      	ldr	r3, [r7, #12]
 800b628:	2234      	movs	r2, #52	@ 0x34
 800b62a:	2100      	movs	r1, #0
 800b62c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800b62e:	2303      	movs	r3, #3
 800b630:	e00f      	b.n	800b652 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	689b      	ldr	r3, [r3, #8]
 800b638:	68ba      	ldr	r2, [r7, #8]
 800b63a:	4013      	ands	r3, r2
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	1ad3      	subs	r3, r2, r3
 800b640:	425a      	negs	r2, r3
 800b642:	4153      	adcs	r3, r2
 800b644:	b2db      	uxtb	r3, r3
 800b646:	001a      	movs	r2, r3
 800b648:	1dfb      	adds	r3, r7, #7
 800b64a:	781b      	ldrb	r3, [r3, #0]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d1d8      	bne.n	800b602 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800b650:	2300      	movs	r3, #0
}
 800b652:	0018      	movs	r0, r3
 800b654:	46bd      	mov	sp, r7
 800b656:	b006      	add	sp, #24
 800b658:	bd80      	pop	{r7, pc}
	...

0800b65c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800b65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b65e:	b08b      	sub	sp, #44	@ 0x2c
 800b660:	af06      	add	r7, sp, #24
 800b662:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	2b00      	cmp	r3, #0
 800b668:	d101      	bne.n	800b66e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800b66a:	2301      	movs	r3, #1
 800b66c:	e0f0      	b.n	800b850 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	4a79      	ldr	r2, [pc, #484]	@ (800b858 <HAL_PCD_Init+0x1fc>)
 800b672:	5c9b      	ldrb	r3, [r3, r2]
 800b674:	b2db      	uxtb	r3, r3
 800b676:	2b00      	cmp	r3, #0
 800b678:	d108      	bne.n	800b68c <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800b67a:	687a      	ldr	r2, [r7, #4]
 800b67c:	23aa      	movs	r3, #170	@ 0xaa
 800b67e:	009b      	lsls	r3, r3, #2
 800b680:	2100      	movs	r1, #0
 800b682:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	0018      	movs	r0, r3
 800b688:	f7fc f9ee 	bl	8007a68 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	4a72      	ldr	r2, [pc, #456]	@ (800b858 <HAL_PCD_Init+0x1fc>)
 800b690:	2103      	movs	r1, #3
 800b692:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	0018      	movs	r0, r3
 800b69a:	f003 f893 	bl	800e7c4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b69e:	230f      	movs	r3, #15
 800b6a0:	18fb      	adds	r3, r7, r3
 800b6a2:	2200      	movs	r2, #0
 800b6a4:	701a      	strb	r2, [r3, #0]
 800b6a6:	e049      	b.n	800b73c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800b6a8:	200f      	movs	r0, #15
 800b6aa:	183b      	adds	r3, r7, r0
 800b6ac:	781b      	ldrb	r3, [r3, #0]
 800b6ae:	6879      	ldr	r1, [r7, #4]
 800b6b0:	1c5a      	adds	r2, r3, #1
 800b6b2:	0013      	movs	r3, r2
 800b6b4:	009b      	lsls	r3, r3, #2
 800b6b6:	189b      	adds	r3, r3, r2
 800b6b8:	00db      	lsls	r3, r3, #3
 800b6ba:	18cb      	adds	r3, r1, r3
 800b6bc:	3301      	adds	r3, #1
 800b6be:	2201      	movs	r2, #1
 800b6c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800b6c2:	183b      	adds	r3, r7, r0
 800b6c4:	781b      	ldrb	r3, [r3, #0]
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	1c5a      	adds	r2, r3, #1
 800b6ca:	0013      	movs	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	189b      	adds	r3, r3, r2
 800b6d0:	00db      	lsls	r3, r3, #3
 800b6d2:	183a      	adds	r2, r7, r0
 800b6d4:	7812      	ldrb	r2, [r2, #0]
 800b6d6:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800b6d8:	183b      	adds	r3, r7, r0
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	6879      	ldr	r1, [r7, #4]
 800b6de:	1c5a      	adds	r2, r3, #1
 800b6e0:	0013      	movs	r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	189b      	adds	r3, r3, r2
 800b6e6:	00db      	lsls	r3, r3, #3
 800b6e8:	18cb      	adds	r3, r1, r3
 800b6ea:	3303      	adds	r3, #3
 800b6ec:	2200      	movs	r2, #0
 800b6ee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800b6f0:	183b      	adds	r3, r7, r0
 800b6f2:	781a      	ldrb	r2, [r3, #0]
 800b6f4:	6879      	ldr	r1, [r7, #4]
 800b6f6:	0013      	movs	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	189b      	adds	r3, r3, r2
 800b6fc:	00db      	lsls	r3, r3, #3
 800b6fe:	18cb      	adds	r3, r1, r3
 800b700:	3338      	adds	r3, #56	@ 0x38
 800b702:	2200      	movs	r2, #0
 800b704:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800b706:	183b      	adds	r3, r7, r0
 800b708:	781a      	ldrb	r2, [r3, #0]
 800b70a:	6879      	ldr	r1, [r7, #4]
 800b70c:	0013      	movs	r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	189b      	adds	r3, r3, r2
 800b712:	00db      	lsls	r3, r3, #3
 800b714:	18cb      	adds	r3, r1, r3
 800b716:	333c      	adds	r3, #60	@ 0x3c
 800b718:	2200      	movs	r2, #0
 800b71a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800b71c:	183b      	adds	r3, r7, r0
 800b71e:	781a      	ldrb	r2, [r3, #0]
 800b720:	6879      	ldr	r1, [r7, #4]
 800b722:	0013      	movs	r3, r2
 800b724:	009b      	lsls	r3, r3, #2
 800b726:	189b      	adds	r3, r3, r2
 800b728:	00db      	lsls	r3, r3, #3
 800b72a:	18cb      	adds	r3, r1, r3
 800b72c:	3340      	adds	r3, #64	@ 0x40
 800b72e:	2200      	movs	r2, #0
 800b730:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b732:	183b      	adds	r3, r7, r0
 800b734:	781a      	ldrb	r2, [r3, #0]
 800b736:	183b      	adds	r3, r7, r0
 800b738:	3201      	adds	r2, #1
 800b73a:	701a      	strb	r2, [r3, #0]
 800b73c:	210f      	movs	r1, #15
 800b73e:	187b      	adds	r3, r7, r1
 800b740:	781a      	ldrb	r2, [r3, #0]
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	685b      	ldr	r3, [r3, #4]
 800b746:	429a      	cmp	r2, r3
 800b748:	d3ae      	bcc.n	800b6a8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b74a:	187b      	adds	r3, r7, r1
 800b74c:	2200      	movs	r2, #0
 800b74e:	701a      	strb	r2, [r3, #0]
 800b750:	e056      	b.n	800b800 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800b752:	240f      	movs	r4, #15
 800b754:	193b      	adds	r3, r7, r4
 800b756:	781a      	ldrb	r2, [r3, #0]
 800b758:	6878      	ldr	r0, [r7, #4]
 800b75a:	236a      	movs	r3, #106	@ 0x6a
 800b75c:	33ff      	adds	r3, #255	@ 0xff
 800b75e:	0019      	movs	r1, r3
 800b760:	0013      	movs	r3, r2
 800b762:	009b      	lsls	r3, r3, #2
 800b764:	189b      	adds	r3, r3, r2
 800b766:	00db      	lsls	r3, r3, #3
 800b768:	18c3      	adds	r3, r0, r3
 800b76a:	185b      	adds	r3, r3, r1
 800b76c:	2200      	movs	r2, #0
 800b76e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800b770:	193b      	adds	r3, r7, r4
 800b772:	781a      	ldrb	r2, [r3, #0]
 800b774:	6878      	ldr	r0, [r7, #4]
 800b776:	23b4      	movs	r3, #180	@ 0xb4
 800b778:	0059      	lsls	r1, r3, #1
 800b77a:	0013      	movs	r3, r2
 800b77c:	009b      	lsls	r3, r3, #2
 800b77e:	189b      	adds	r3, r3, r2
 800b780:	00db      	lsls	r3, r3, #3
 800b782:	18c3      	adds	r3, r0, r3
 800b784:	185b      	adds	r3, r3, r1
 800b786:	193a      	adds	r2, r7, r4
 800b788:	7812      	ldrb	r2, [r2, #0]
 800b78a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800b78c:	193b      	adds	r3, r7, r4
 800b78e:	781a      	ldrb	r2, [r3, #0]
 800b790:	6878      	ldr	r0, [r7, #4]
 800b792:	236c      	movs	r3, #108	@ 0x6c
 800b794:	33ff      	adds	r3, #255	@ 0xff
 800b796:	0019      	movs	r1, r3
 800b798:	0013      	movs	r3, r2
 800b79a:	009b      	lsls	r3, r3, #2
 800b79c:	189b      	adds	r3, r3, r2
 800b79e:	00db      	lsls	r3, r3, #3
 800b7a0:	18c3      	adds	r3, r0, r3
 800b7a2:	185b      	adds	r3, r3, r1
 800b7a4:	2200      	movs	r2, #0
 800b7a6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800b7a8:	193b      	adds	r3, r7, r4
 800b7aa:	781a      	ldrb	r2, [r3, #0]
 800b7ac:	6878      	ldr	r0, [r7, #4]
 800b7ae:	23bc      	movs	r3, #188	@ 0xbc
 800b7b0:	0059      	lsls	r1, r3, #1
 800b7b2:	0013      	movs	r3, r2
 800b7b4:	009b      	lsls	r3, r3, #2
 800b7b6:	189b      	adds	r3, r3, r2
 800b7b8:	00db      	lsls	r3, r3, #3
 800b7ba:	18c3      	adds	r3, r0, r3
 800b7bc:	185b      	adds	r3, r3, r1
 800b7be:	2200      	movs	r2, #0
 800b7c0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800b7c2:	193b      	adds	r3, r7, r4
 800b7c4:	781a      	ldrb	r2, [r3, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	23be      	movs	r3, #190	@ 0xbe
 800b7ca:	0059      	lsls	r1, r3, #1
 800b7cc:	0013      	movs	r3, r2
 800b7ce:	009b      	lsls	r3, r3, #2
 800b7d0:	189b      	adds	r3, r3, r2
 800b7d2:	00db      	lsls	r3, r3, #3
 800b7d4:	18c3      	adds	r3, r0, r3
 800b7d6:	185b      	adds	r3, r3, r1
 800b7d8:	2200      	movs	r2, #0
 800b7da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800b7dc:	193b      	adds	r3, r7, r4
 800b7de:	781a      	ldrb	r2, [r3, #0]
 800b7e0:	6878      	ldr	r0, [r7, #4]
 800b7e2:	23c0      	movs	r3, #192	@ 0xc0
 800b7e4:	0059      	lsls	r1, r3, #1
 800b7e6:	0013      	movs	r3, r2
 800b7e8:	009b      	lsls	r3, r3, #2
 800b7ea:	189b      	adds	r3, r3, r2
 800b7ec:	00db      	lsls	r3, r3, #3
 800b7ee:	18c3      	adds	r3, r0, r3
 800b7f0:	185b      	adds	r3, r3, r1
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b7f6:	193b      	adds	r3, r7, r4
 800b7f8:	781a      	ldrb	r2, [r3, #0]
 800b7fa:	193b      	adds	r3, r7, r4
 800b7fc:	3201      	adds	r2, #1
 800b7fe:	701a      	strb	r2, [r3, #0]
 800b800:	230f      	movs	r3, #15
 800b802:	18fb      	adds	r3, r7, r3
 800b804:	781a      	ldrb	r2, [r3, #0]
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	685b      	ldr	r3, [r3, #4]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	d3a1      	bcc.n	800b752 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	6818      	ldr	r0, [r3, #0]
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	466a      	mov	r2, sp
 800b816:	0011      	movs	r1, r2
 800b818:	001a      	movs	r2, r3
 800b81a:	3210      	adds	r2, #16
 800b81c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800b81e:	c170      	stmia	r1!, {r4, r5, r6}
 800b820:	ca30      	ldmia	r2!, {r4, r5}
 800b822:	c130      	stmia	r1!, {r4, r5}
 800b824:	6859      	ldr	r1, [r3, #4]
 800b826:	689a      	ldr	r2, [r3, #8]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	f002 ffe5 	bl	800e7f8 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	2224      	movs	r2, #36	@ 0x24
 800b832:	2100      	movs	r1, #0
 800b834:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	4a07      	ldr	r2, [pc, #28]	@ (800b858 <HAL_PCD_Init+0x1fc>)
 800b83a:	2101      	movs	r1, #1
 800b83c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800b83e:	687b      	ldr	r3, [r7, #4]
 800b840:	69db      	ldr	r3, [r3, #28]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d103      	bne.n	800b84e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	0018      	movs	r0, r3
 800b84a:	f000 f807 	bl	800b85c <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800b84e:	2300      	movs	r3, #0
}
 800b850:	0018      	movs	r0, r3
 800b852:	46bd      	mov	sp, r7
 800b854:	b005      	add	sp, #20
 800b856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b858:	000002a9 	.word	0x000002a9

0800b85c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800b86a:	687a      	ldr	r2, [r7, #4]
 800b86c:	23ba      	movs	r3, #186	@ 0xba
 800b86e:	009b      	lsls	r3, r3, #2
 800b870:	2101      	movs	r1, #1
 800b872:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800b874:	687a      	ldr	r2, [r7, #4]
 800b876:	23b8      	movs	r3, #184	@ 0xb8
 800b878:	009b      	lsls	r3, r3, #2
 800b87a:	2100      	movs	r1, #0
 800b87c:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2254      	movs	r2, #84	@ 0x54
 800b882:	5a9b      	ldrh	r3, [r3, r2]
 800b884:	b29b      	uxth	r3, r3
 800b886:	2201      	movs	r2, #1
 800b888:	4313      	orrs	r3, r2
 800b88a:	b299      	uxth	r1, r3
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	2254      	movs	r2, #84	@ 0x54
 800b890:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	2254      	movs	r2, #84	@ 0x54
 800b896:	5a9b      	ldrh	r3, [r3, r2]
 800b898:	b29b      	uxth	r3, r3
 800b89a:	2202      	movs	r2, #2
 800b89c:	4313      	orrs	r3, r2
 800b89e:	b299      	uxth	r1, r3
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	2254      	movs	r2, #84	@ 0x54
 800b8a4:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800b8a6:	2300      	movs	r3, #0
}
 800b8a8:	0018      	movs	r0, r3
 800b8aa:	46bd      	mov	sp, r7
 800b8ac:	b004      	add	sp, #16
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800b8b0:	b5b0      	push	{r4, r5, r7, lr}
 800b8b2:	b08a      	sub	sp, #40	@ 0x28
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d102      	bne.n	800b8c4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800b8be:	2301      	movs	r3, #1
 800b8c0:	f000 fbbf 	bl	800c042 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800b8c4:	4bc9      	ldr	r3, [pc, #804]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b8c6:	68db      	ldr	r3, [r3, #12]
 800b8c8:	220c      	movs	r2, #12
 800b8ca:	4013      	ands	r3, r2
 800b8cc:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800b8ce:	4bc7      	ldr	r3, [pc, #796]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b8d0:	68da      	ldr	r2, [r3, #12]
 800b8d2:	2380      	movs	r3, #128	@ 0x80
 800b8d4:	025b      	lsls	r3, r3, #9
 800b8d6:	4013      	ands	r3, r2
 800b8d8:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	2201      	movs	r2, #1
 800b8e0:	4013      	ands	r3, r2
 800b8e2:	d100      	bne.n	800b8e6 <HAL_RCC_OscConfig+0x36>
 800b8e4:	e07e      	b.n	800b9e4 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800b8e6:	69fb      	ldr	r3, [r7, #28]
 800b8e8:	2b08      	cmp	r3, #8
 800b8ea:	d007      	beq.n	800b8fc <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	2b0c      	cmp	r3, #12
 800b8f0:	d112      	bne.n	800b918 <HAL_RCC_OscConfig+0x68>
 800b8f2:	69ba      	ldr	r2, [r7, #24]
 800b8f4:	2380      	movs	r3, #128	@ 0x80
 800b8f6:	025b      	lsls	r3, r3, #9
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d10d      	bne.n	800b918 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b8fc:	4bbb      	ldr	r3, [pc, #748]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b8fe:	681a      	ldr	r2, [r3, #0]
 800b900:	2380      	movs	r3, #128	@ 0x80
 800b902:	029b      	lsls	r3, r3, #10
 800b904:	4013      	ands	r3, r2
 800b906:	d100      	bne.n	800b90a <HAL_RCC_OscConfig+0x5a>
 800b908:	e06b      	b.n	800b9e2 <HAL_RCC_OscConfig+0x132>
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	685b      	ldr	r3, [r3, #4]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d167      	bne.n	800b9e2 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800b912:	2301      	movs	r3, #1
 800b914:	f000 fb95 	bl	800c042 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	685a      	ldr	r2, [r3, #4]
 800b91c:	2380      	movs	r3, #128	@ 0x80
 800b91e:	025b      	lsls	r3, r3, #9
 800b920:	429a      	cmp	r2, r3
 800b922:	d107      	bne.n	800b934 <HAL_RCC_OscConfig+0x84>
 800b924:	4bb1      	ldr	r3, [pc, #708]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b926:	681a      	ldr	r2, [r3, #0]
 800b928:	4bb0      	ldr	r3, [pc, #704]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b92a:	2180      	movs	r1, #128	@ 0x80
 800b92c:	0249      	lsls	r1, r1, #9
 800b92e:	430a      	orrs	r2, r1
 800b930:	601a      	str	r2, [r3, #0]
 800b932:	e027      	b.n	800b984 <HAL_RCC_OscConfig+0xd4>
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	685a      	ldr	r2, [r3, #4]
 800b938:	23a0      	movs	r3, #160	@ 0xa0
 800b93a:	02db      	lsls	r3, r3, #11
 800b93c:	429a      	cmp	r2, r3
 800b93e:	d10e      	bne.n	800b95e <HAL_RCC_OscConfig+0xae>
 800b940:	4baa      	ldr	r3, [pc, #680]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b942:	681a      	ldr	r2, [r3, #0]
 800b944:	4ba9      	ldr	r3, [pc, #676]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b946:	2180      	movs	r1, #128	@ 0x80
 800b948:	02c9      	lsls	r1, r1, #11
 800b94a:	430a      	orrs	r2, r1
 800b94c:	601a      	str	r2, [r3, #0]
 800b94e:	4ba7      	ldr	r3, [pc, #668]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b950:	681a      	ldr	r2, [r3, #0]
 800b952:	4ba6      	ldr	r3, [pc, #664]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b954:	2180      	movs	r1, #128	@ 0x80
 800b956:	0249      	lsls	r1, r1, #9
 800b958:	430a      	orrs	r2, r1
 800b95a:	601a      	str	r2, [r3, #0]
 800b95c:	e012      	b.n	800b984 <HAL_RCC_OscConfig+0xd4>
 800b95e:	4ba3      	ldr	r3, [pc, #652]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b960:	681a      	ldr	r2, [r3, #0]
 800b962:	4ba2      	ldr	r3, [pc, #648]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b964:	49a2      	ldr	r1, [pc, #648]	@ (800bbf0 <HAL_RCC_OscConfig+0x340>)
 800b966:	400a      	ands	r2, r1
 800b968:	601a      	str	r2, [r3, #0]
 800b96a:	4ba0      	ldr	r3, [pc, #640]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b96c:	681a      	ldr	r2, [r3, #0]
 800b96e:	2380      	movs	r3, #128	@ 0x80
 800b970:	025b      	lsls	r3, r3, #9
 800b972:	4013      	ands	r3, r2
 800b974:	60fb      	str	r3, [r7, #12]
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	4b9c      	ldr	r3, [pc, #624]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b97a:	681a      	ldr	r2, [r3, #0]
 800b97c:	4b9b      	ldr	r3, [pc, #620]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b97e:	499d      	ldr	r1, [pc, #628]	@ (800bbf4 <HAL_RCC_OscConfig+0x344>)
 800b980:	400a      	ands	r2, r1
 800b982:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	685b      	ldr	r3, [r3, #4]
 800b988:	2b00      	cmp	r3, #0
 800b98a:	d015      	beq.n	800b9b8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b98c:	f7fc fcd2 	bl	8008334 <HAL_GetTick>
 800b990:	0003      	movs	r3, r0
 800b992:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b994:	e009      	b.n	800b9aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b996:	f7fc fccd 	bl	8008334 <HAL_GetTick>
 800b99a:	0002      	movs	r2, r0
 800b99c:	697b      	ldr	r3, [r7, #20]
 800b99e:	1ad3      	subs	r3, r2, r3
 800b9a0:	2b64      	cmp	r3, #100	@ 0x64
 800b9a2:	d902      	bls.n	800b9aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800b9a4:	2303      	movs	r3, #3
 800b9a6:	f000 fb4c 	bl	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b9aa:	4b90      	ldr	r3, [pc, #576]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b9ac:	681a      	ldr	r2, [r3, #0]
 800b9ae:	2380      	movs	r3, #128	@ 0x80
 800b9b0:	029b      	lsls	r3, r3, #10
 800b9b2:	4013      	ands	r3, r2
 800b9b4:	d0ef      	beq.n	800b996 <HAL_RCC_OscConfig+0xe6>
 800b9b6:	e015      	b.n	800b9e4 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b9b8:	f7fc fcbc 	bl	8008334 <HAL_GetTick>
 800b9bc:	0003      	movs	r3, r0
 800b9be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b9c0:	e008      	b.n	800b9d4 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800b9c2:	f7fc fcb7 	bl	8008334 <HAL_GetTick>
 800b9c6:	0002      	movs	r2, r0
 800b9c8:	697b      	ldr	r3, [r7, #20]
 800b9ca:	1ad3      	subs	r3, r2, r3
 800b9cc:	2b64      	cmp	r3, #100	@ 0x64
 800b9ce:	d901      	bls.n	800b9d4 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800b9d0:	2303      	movs	r3, #3
 800b9d2:	e336      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800b9d4:	4b85      	ldr	r3, [pc, #532]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	2380      	movs	r3, #128	@ 0x80
 800b9da:	029b      	lsls	r3, r3, #10
 800b9dc:	4013      	ands	r3, r2
 800b9de:	d1f0      	bne.n	800b9c2 <HAL_RCC_OscConfig+0x112>
 800b9e0:	e000      	b.n	800b9e4 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800b9e2:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	2202      	movs	r2, #2
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	d100      	bne.n	800b9f0 <HAL_RCC_OscConfig+0x140>
 800b9ee:	e099      	b.n	800bb24 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	68db      	ldr	r3, [r3, #12]
 800b9f4:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800b9f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f8:	2220      	movs	r2, #32
 800b9fa:	4013      	ands	r3, r2
 800b9fc:	d009      	beq.n	800ba12 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800b9fe:	4b7b      	ldr	r3, [pc, #492]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	4b7a      	ldr	r3, [pc, #488]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800ba04:	2120      	movs	r1, #32
 800ba06:	430a      	orrs	r2, r1
 800ba08:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800ba0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0c:	2220      	movs	r2, #32
 800ba0e:	4393      	bics	r3, r2
 800ba10:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800ba12:	69fb      	ldr	r3, [r7, #28]
 800ba14:	2b04      	cmp	r3, #4
 800ba16:	d005      	beq.n	800ba24 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800ba18:	69fb      	ldr	r3, [r7, #28]
 800ba1a:	2b0c      	cmp	r3, #12
 800ba1c:	d13e      	bne.n	800ba9c <HAL_RCC_OscConfig+0x1ec>
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	d13b      	bne.n	800ba9c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800ba24:	4b71      	ldr	r3, [pc, #452]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800ba26:	681b      	ldr	r3, [r3, #0]
 800ba28:	2204      	movs	r2, #4
 800ba2a:	4013      	ands	r3, r2
 800ba2c:	d004      	beq.n	800ba38 <HAL_RCC_OscConfig+0x188>
 800ba2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d101      	bne.n	800ba38 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800ba34:	2301      	movs	r3, #1
 800ba36:	e304      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ba38:	4b6c      	ldr	r3, [pc, #432]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800ba3a:	685b      	ldr	r3, [r3, #4]
 800ba3c:	4a6e      	ldr	r2, [pc, #440]	@ (800bbf8 <HAL_RCC_OscConfig+0x348>)
 800ba3e:	4013      	ands	r3, r2
 800ba40:	0019      	movs	r1, r3
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	691b      	ldr	r3, [r3, #16]
 800ba46:	021a      	lsls	r2, r3, #8
 800ba48:	4b68      	ldr	r3, [pc, #416]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800ba4a:	430a      	orrs	r2, r1
 800ba4c:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800ba4e:	4b67      	ldr	r3, [pc, #412]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800ba50:	681b      	ldr	r3, [r3, #0]
 800ba52:	2209      	movs	r2, #9
 800ba54:	4393      	bics	r3, r2
 800ba56:	0019      	movs	r1, r3
 800ba58:	4b64      	ldr	r3, [pc, #400]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800ba5a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ba5c:	430a      	orrs	r2, r1
 800ba5e:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800ba60:	f000 fc42 	bl	800c2e8 <HAL_RCC_GetSysClockFreq>
 800ba64:	0001      	movs	r1, r0
 800ba66:	4b61      	ldr	r3, [pc, #388]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800ba68:	68db      	ldr	r3, [r3, #12]
 800ba6a:	091b      	lsrs	r3, r3, #4
 800ba6c:	220f      	movs	r2, #15
 800ba6e:	4013      	ands	r3, r2
 800ba70:	4a62      	ldr	r2, [pc, #392]	@ (800bbfc <HAL_RCC_OscConfig+0x34c>)
 800ba72:	5cd3      	ldrb	r3, [r2, r3]
 800ba74:	000a      	movs	r2, r1
 800ba76:	40da      	lsrs	r2, r3
 800ba78:	4b61      	ldr	r3, [pc, #388]	@ (800bc00 <HAL_RCC_OscConfig+0x350>)
 800ba7a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800ba7c:	4b61      	ldr	r3, [pc, #388]	@ (800bc04 <HAL_RCC_OscConfig+0x354>)
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2513      	movs	r5, #19
 800ba82:	197c      	adds	r4, r7, r5
 800ba84:	0018      	movs	r0, r3
 800ba86:	f7fc fc0f 	bl	80082a8 <HAL_InitTick>
 800ba8a:	0003      	movs	r3, r0
 800ba8c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800ba8e:	197b      	adds	r3, r7, r5
 800ba90:	781b      	ldrb	r3, [r3, #0]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	d046      	beq.n	800bb24 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800ba96:	197b      	adds	r3, r7, r5
 800ba98:	781b      	ldrb	r3, [r3, #0]
 800ba9a:	e2d2      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800ba9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d027      	beq.n	800baf2 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800baa2:	4b52      	ldr	r3, [pc, #328]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800baa4:	681b      	ldr	r3, [r3, #0]
 800baa6:	2209      	movs	r2, #9
 800baa8:	4393      	bics	r3, r2
 800baaa:	0019      	movs	r1, r3
 800baac:	4b4f      	ldr	r3, [pc, #316]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800baae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800bab0:	430a      	orrs	r2, r1
 800bab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bab4:	f7fc fc3e 	bl	8008334 <HAL_GetTick>
 800bab8:	0003      	movs	r3, r0
 800baba:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800babc:	e008      	b.n	800bad0 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800babe:	f7fc fc39 	bl	8008334 <HAL_GetTick>
 800bac2:	0002      	movs	r2, r0
 800bac4:	697b      	ldr	r3, [r7, #20]
 800bac6:	1ad3      	subs	r3, r2, r3
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d901      	bls.n	800bad0 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800bacc:	2303      	movs	r3, #3
 800bace:	e2b8      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bad0:	4b46      	ldr	r3, [pc, #280]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	2204      	movs	r2, #4
 800bad6:	4013      	ands	r3, r2
 800bad8:	d0f1      	beq.n	800babe <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800bada:	4b44      	ldr	r3, [pc, #272]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	4a46      	ldr	r2, [pc, #280]	@ (800bbf8 <HAL_RCC_OscConfig+0x348>)
 800bae0:	4013      	ands	r3, r2
 800bae2:	0019      	movs	r1, r3
 800bae4:	687b      	ldr	r3, [r7, #4]
 800bae6:	691b      	ldr	r3, [r3, #16]
 800bae8:	021a      	lsls	r2, r3, #8
 800baea:	4b40      	ldr	r3, [pc, #256]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800baec:	430a      	orrs	r2, r1
 800baee:	605a      	str	r2, [r3, #4]
 800baf0:	e018      	b.n	800bb24 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800baf2:	4b3e      	ldr	r3, [pc, #248]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800baf4:	681a      	ldr	r2, [r3, #0]
 800baf6:	4b3d      	ldr	r3, [pc, #244]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800baf8:	2101      	movs	r1, #1
 800bafa:	438a      	bics	r2, r1
 800bafc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bafe:	f7fc fc19 	bl	8008334 <HAL_GetTick>
 800bb02:	0003      	movs	r3, r0
 800bb04:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bb06:	e008      	b.n	800bb1a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800bb08:	f7fc fc14 	bl	8008334 <HAL_GetTick>
 800bb0c:	0002      	movs	r2, r0
 800bb0e:	697b      	ldr	r3, [r7, #20]
 800bb10:	1ad3      	subs	r3, r2, r3
 800bb12:	2b02      	cmp	r3, #2
 800bb14:	d901      	bls.n	800bb1a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800bb16:	2303      	movs	r3, #3
 800bb18:	e293      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bb1a:	4b34      	ldr	r3, [pc, #208]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	2204      	movs	r2, #4
 800bb20:	4013      	ands	r3, r2
 800bb22:	d1f1      	bne.n	800bb08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	2210      	movs	r2, #16
 800bb2a:	4013      	ands	r3, r2
 800bb2c:	d100      	bne.n	800bb30 <HAL_RCC_OscConfig+0x280>
 800bb2e:	e0a2      	b.n	800bc76 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	d140      	bne.n	800bbb8 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800bb36:	4b2d      	ldr	r3, [pc, #180]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	2380      	movs	r3, #128	@ 0x80
 800bb3c:	009b      	lsls	r3, r3, #2
 800bb3e:	4013      	ands	r3, r2
 800bb40:	d005      	beq.n	800bb4e <HAL_RCC_OscConfig+0x29e>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	69db      	ldr	r3, [r3, #28]
 800bb46:	2b00      	cmp	r3, #0
 800bb48:	d101      	bne.n	800bb4e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e279      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bb4e:	4b27      	ldr	r3, [pc, #156]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bb50:	685b      	ldr	r3, [r3, #4]
 800bb52:	4a2d      	ldr	r2, [pc, #180]	@ (800bc08 <HAL_RCC_OscConfig+0x358>)
 800bb54:	4013      	ands	r3, r2
 800bb56:	0019      	movs	r1, r3
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bb5c:	4b23      	ldr	r3, [pc, #140]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bb5e:	430a      	orrs	r2, r1
 800bb60:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bb62:	4b22      	ldr	r3, [pc, #136]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bb64:	685b      	ldr	r3, [r3, #4]
 800bb66:	021b      	lsls	r3, r3, #8
 800bb68:	0a19      	lsrs	r1, r3, #8
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	6a1b      	ldr	r3, [r3, #32]
 800bb6e:	061a      	lsls	r2, r3, #24
 800bb70:	4b1e      	ldr	r3, [pc, #120]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bb72:	430a      	orrs	r2, r1
 800bb74:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb7a:	0b5b      	lsrs	r3, r3, #13
 800bb7c:	3301      	adds	r3, #1
 800bb7e:	2280      	movs	r2, #128	@ 0x80
 800bb80:	0212      	lsls	r2, r2, #8
 800bb82:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800bb84:	4b19      	ldr	r3, [pc, #100]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	091b      	lsrs	r3, r3, #4
 800bb8a:	210f      	movs	r1, #15
 800bb8c:	400b      	ands	r3, r1
 800bb8e:	491b      	ldr	r1, [pc, #108]	@ (800bbfc <HAL_RCC_OscConfig+0x34c>)
 800bb90:	5ccb      	ldrb	r3, [r1, r3]
 800bb92:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800bb94:	4b1a      	ldr	r3, [pc, #104]	@ (800bc00 <HAL_RCC_OscConfig+0x350>)
 800bb96:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800bb98:	4b1a      	ldr	r3, [pc, #104]	@ (800bc04 <HAL_RCC_OscConfig+0x354>)
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	2513      	movs	r5, #19
 800bb9e:	197c      	adds	r4, r7, r5
 800bba0:	0018      	movs	r0, r3
 800bba2:	f7fc fb81 	bl	80082a8 <HAL_InitTick>
 800bba6:	0003      	movs	r3, r0
 800bba8:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800bbaa:	197b      	adds	r3, r7, r5
 800bbac:	781b      	ldrb	r3, [r3, #0]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	d061      	beq.n	800bc76 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800bbb2:	197b      	adds	r3, r7, r5
 800bbb4:	781b      	ldrb	r3, [r3, #0]
 800bbb6:	e244      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	69db      	ldr	r3, [r3, #28]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d040      	beq.n	800bc42 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800bbc0:	4b0a      	ldr	r3, [pc, #40]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bbc2:	681a      	ldr	r2, [r3, #0]
 800bbc4:	4b09      	ldr	r3, [pc, #36]	@ (800bbec <HAL_RCC_OscConfig+0x33c>)
 800bbc6:	2180      	movs	r1, #128	@ 0x80
 800bbc8:	0049      	lsls	r1, r1, #1
 800bbca:	430a      	orrs	r2, r1
 800bbcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bbce:	f7fc fbb1 	bl	8008334 <HAL_GetTick>
 800bbd2:	0003      	movs	r3, r0
 800bbd4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800bbd6:	e019      	b.n	800bc0c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bbd8:	f7fc fbac 	bl	8008334 <HAL_GetTick>
 800bbdc:	0002      	movs	r2, r0
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	1ad3      	subs	r3, r2, r3
 800bbe2:	2b02      	cmp	r3, #2
 800bbe4:	d912      	bls.n	800bc0c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800bbe6:	2303      	movs	r3, #3
 800bbe8:	e22b      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
 800bbea:	46c0      	nop			@ (mov r8, r8)
 800bbec:	40021000 	.word	0x40021000
 800bbf0:	fffeffff 	.word	0xfffeffff
 800bbf4:	fffbffff 	.word	0xfffbffff
 800bbf8:	ffffe0ff 	.word	0xffffe0ff
 800bbfc:	080125b8 	.word	0x080125b8
 800bc00:	2000012c 	.word	0x2000012c
 800bc04:	20000140 	.word	0x20000140
 800bc08:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800bc0c:	4bca      	ldr	r3, [pc, #808]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc0e:	681a      	ldr	r2, [r3, #0]
 800bc10:	2380      	movs	r3, #128	@ 0x80
 800bc12:	009b      	lsls	r3, r3, #2
 800bc14:	4013      	ands	r3, r2
 800bc16:	d0df      	beq.n	800bbd8 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800bc18:	4bc7      	ldr	r3, [pc, #796]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc1a:	685b      	ldr	r3, [r3, #4]
 800bc1c:	4ac7      	ldr	r2, [pc, #796]	@ (800bf3c <HAL_RCC_OscConfig+0x68c>)
 800bc1e:	4013      	ands	r3, r2
 800bc20:	0019      	movs	r1, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bc26:	4bc4      	ldr	r3, [pc, #784]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc28:	430a      	orrs	r2, r1
 800bc2a:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800bc2c:	4bc2      	ldr	r3, [pc, #776]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	021b      	lsls	r3, r3, #8
 800bc32:	0a19      	lsrs	r1, r3, #8
 800bc34:	687b      	ldr	r3, [r7, #4]
 800bc36:	6a1b      	ldr	r3, [r3, #32]
 800bc38:	061a      	lsls	r2, r3, #24
 800bc3a:	4bbf      	ldr	r3, [pc, #764]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc3c:	430a      	orrs	r2, r1
 800bc3e:	605a      	str	r2, [r3, #4]
 800bc40:	e019      	b.n	800bc76 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800bc42:	4bbd      	ldr	r3, [pc, #756]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc44:	681a      	ldr	r2, [r3, #0]
 800bc46:	4bbc      	ldr	r3, [pc, #752]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc48:	49bd      	ldr	r1, [pc, #756]	@ (800bf40 <HAL_RCC_OscConfig+0x690>)
 800bc4a:	400a      	ands	r2, r1
 800bc4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bc4e:	f7fc fb71 	bl	8008334 <HAL_GetTick>
 800bc52:	0003      	movs	r3, r0
 800bc54:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800bc56:	e008      	b.n	800bc6a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800bc58:	f7fc fb6c 	bl	8008334 <HAL_GetTick>
 800bc5c:	0002      	movs	r2, r0
 800bc5e:	697b      	ldr	r3, [r7, #20]
 800bc60:	1ad3      	subs	r3, r2, r3
 800bc62:	2b02      	cmp	r3, #2
 800bc64:	d901      	bls.n	800bc6a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800bc66:	2303      	movs	r3, #3
 800bc68:	e1eb      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800bc6a:	4bb3      	ldr	r3, [pc, #716]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc6c:	681a      	ldr	r2, [r3, #0]
 800bc6e:	2380      	movs	r3, #128	@ 0x80
 800bc70:	009b      	lsls	r3, r3, #2
 800bc72:	4013      	ands	r3, r2
 800bc74:	d1f0      	bne.n	800bc58 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	681b      	ldr	r3, [r3, #0]
 800bc7a:	2208      	movs	r2, #8
 800bc7c:	4013      	ands	r3, r2
 800bc7e:	d036      	beq.n	800bcee <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	695b      	ldr	r3, [r3, #20]
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d019      	beq.n	800bcbc <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800bc88:	4bab      	ldr	r3, [pc, #684]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc8c:	4baa      	ldr	r3, [pc, #680]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bc8e:	2101      	movs	r1, #1
 800bc90:	430a      	orrs	r2, r1
 800bc92:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bc94:	f7fc fb4e 	bl	8008334 <HAL_GetTick>
 800bc98:	0003      	movs	r3, r0
 800bc9a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bc9c:	e008      	b.n	800bcb0 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bc9e:	f7fc fb49 	bl	8008334 <HAL_GetTick>
 800bca2:	0002      	movs	r2, r0
 800bca4:	697b      	ldr	r3, [r7, #20]
 800bca6:	1ad3      	subs	r3, r2, r3
 800bca8:	2b02      	cmp	r3, #2
 800bcaa:	d901      	bls.n	800bcb0 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800bcac:	2303      	movs	r3, #3
 800bcae:	e1c8      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800bcb0:	4ba1      	ldr	r3, [pc, #644]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bcb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcb4:	2202      	movs	r2, #2
 800bcb6:	4013      	ands	r3, r2
 800bcb8:	d0f1      	beq.n	800bc9e <HAL_RCC_OscConfig+0x3ee>
 800bcba:	e018      	b.n	800bcee <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800bcbc:	4b9e      	ldr	r3, [pc, #632]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bcbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bcc0:	4b9d      	ldr	r3, [pc, #628]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bcc2:	2101      	movs	r1, #1
 800bcc4:	438a      	bics	r2, r1
 800bcc6:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bcc8:	f7fc fb34 	bl	8008334 <HAL_GetTick>
 800bccc:	0003      	movs	r3, r0
 800bcce:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bcd0:	e008      	b.n	800bce4 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800bcd2:	f7fc fb2f 	bl	8008334 <HAL_GetTick>
 800bcd6:	0002      	movs	r2, r0
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	1ad3      	subs	r3, r2, r3
 800bcdc:	2b02      	cmp	r3, #2
 800bcde:	d901      	bls.n	800bce4 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800bce0:	2303      	movs	r3, #3
 800bce2:	e1ae      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800bce4:	4b94      	ldr	r3, [pc, #592]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bce6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bce8:	2202      	movs	r2, #2
 800bcea:	4013      	ands	r3, r2
 800bcec:	d1f1      	bne.n	800bcd2 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	2204      	movs	r2, #4
 800bcf4:	4013      	ands	r3, r2
 800bcf6:	d100      	bne.n	800bcfa <HAL_RCC_OscConfig+0x44a>
 800bcf8:	e0ae      	b.n	800be58 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800bcfa:	2023      	movs	r0, #35	@ 0x23
 800bcfc:	183b      	adds	r3, r7, r0
 800bcfe:	2200      	movs	r2, #0
 800bd00:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800bd02:	4b8d      	ldr	r3, [pc, #564]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd04:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd06:	2380      	movs	r3, #128	@ 0x80
 800bd08:	055b      	lsls	r3, r3, #21
 800bd0a:	4013      	ands	r3, r2
 800bd0c:	d109      	bne.n	800bd22 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800bd0e:	4b8a      	ldr	r3, [pc, #552]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd12:	4b89      	ldr	r3, [pc, #548]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd14:	2180      	movs	r1, #128	@ 0x80
 800bd16:	0549      	lsls	r1, r1, #21
 800bd18:	430a      	orrs	r2, r1
 800bd1a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800bd1c:	183b      	adds	r3, r7, r0
 800bd1e:	2201      	movs	r2, #1
 800bd20:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd22:	4b88      	ldr	r3, [pc, #544]	@ (800bf44 <HAL_RCC_OscConfig+0x694>)
 800bd24:	681a      	ldr	r2, [r3, #0]
 800bd26:	2380      	movs	r3, #128	@ 0x80
 800bd28:	005b      	lsls	r3, r3, #1
 800bd2a:	4013      	ands	r3, r2
 800bd2c:	d11a      	bne.n	800bd64 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800bd2e:	4b85      	ldr	r3, [pc, #532]	@ (800bf44 <HAL_RCC_OscConfig+0x694>)
 800bd30:	681a      	ldr	r2, [r3, #0]
 800bd32:	4b84      	ldr	r3, [pc, #528]	@ (800bf44 <HAL_RCC_OscConfig+0x694>)
 800bd34:	2180      	movs	r1, #128	@ 0x80
 800bd36:	0049      	lsls	r1, r1, #1
 800bd38:	430a      	orrs	r2, r1
 800bd3a:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800bd3c:	f7fc fafa 	bl	8008334 <HAL_GetTick>
 800bd40:	0003      	movs	r3, r0
 800bd42:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd44:	e008      	b.n	800bd58 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bd46:	f7fc faf5 	bl	8008334 <HAL_GetTick>
 800bd4a:	0002      	movs	r2, r0
 800bd4c:	697b      	ldr	r3, [r7, #20]
 800bd4e:	1ad3      	subs	r3, r2, r3
 800bd50:	2b64      	cmp	r3, #100	@ 0x64
 800bd52:	d901      	bls.n	800bd58 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800bd54:	2303      	movs	r3, #3
 800bd56:	e174      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800bd58:	4b7a      	ldr	r3, [pc, #488]	@ (800bf44 <HAL_RCC_OscConfig+0x694>)
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	2380      	movs	r3, #128	@ 0x80
 800bd5e:	005b      	lsls	r3, r3, #1
 800bd60:	4013      	ands	r3, r2
 800bd62:	d0f0      	beq.n	800bd46 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	689a      	ldr	r2, [r3, #8]
 800bd68:	2380      	movs	r3, #128	@ 0x80
 800bd6a:	005b      	lsls	r3, r3, #1
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d107      	bne.n	800bd80 <HAL_RCC_OscConfig+0x4d0>
 800bd70:	4b71      	ldr	r3, [pc, #452]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd72:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd74:	4b70      	ldr	r3, [pc, #448]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd76:	2180      	movs	r1, #128	@ 0x80
 800bd78:	0049      	lsls	r1, r1, #1
 800bd7a:	430a      	orrs	r2, r1
 800bd7c:	651a      	str	r2, [r3, #80]	@ 0x50
 800bd7e:	e031      	b.n	800bde4 <HAL_RCC_OscConfig+0x534>
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d10c      	bne.n	800bda2 <HAL_RCC_OscConfig+0x4f2>
 800bd88:	4b6b      	ldr	r3, [pc, #428]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd8a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd8c:	4b6a      	ldr	r3, [pc, #424]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd8e:	496c      	ldr	r1, [pc, #432]	@ (800bf40 <HAL_RCC_OscConfig+0x690>)
 800bd90:	400a      	ands	r2, r1
 800bd92:	651a      	str	r2, [r3, #80]	@ 0x50
 800bd94:	4b68      	ldr	r3, [pc, #416]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd96:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd98:	4b67      	ldr	r3, [pc, #412]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bd9a:	496b      	ldr	r1, [pc, #428]	@ (800bf48 <HAL_RCC_OscConfig+0x698>)
 800bd9c:	400a      	ands	r2, r1
 800bd9e:	651a      	str	r2, [r3, #80]	@ 0x50
 800bda0:	e020      	b.n	800bde4 <HAL_RCC_OscConfig+0x534>
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	689a      	ldr	r2, [r3, #8]
 800bda6:	23a0      	movs	r3, #160	@ 0xa0
 800bda8:	00db      	lsls	r3, r3, #3
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d10e      	bne.n	800bdcc <HAL_RCC_OscConfig+0x51c>
 800bdae:	4b62      	ldr	r3, [pc, #392]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bdb0:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bdb2:	4b61      	ldr	r3, [pc, #388]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bdb4:	2180      	movs	r1, #128	@ 0x80
 800bdb6:	00c9      	lsls	r1, r1, #3
 800bdb8:	430a      	orrs	r2, r1
 800bdba:	651a      	str	r2, [r3, #80]	@ 0x50
 800bdbc:	4b5e      	ldr	r3, [pc, #376]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bdbe:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bdc0:	4b5d      	ldr	r3, [pc, #372]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bdc2:	2180      	movs	r1, #128	@ 0x80
 800bdc4:	0049      	lsls	r1, r1, #1
 800bdc6:	430a      	orrs	r2, r1
 800bdc8:	651a      	str	r2, [r3, #80]	@ 0x50
 800bdca:	e00b      	b.n	800bde4 <HAL_RCC_OscConfig+0x534>
 800bdcc:	4b5a      	ldr	r3, [pc, #360]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bdce:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bdd0:	4b59      	ldr	r3, [pc, #356]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bdd2:	495b      	ldr	r1, [pc, #364]	@ (800bf40 <HAL_RCC_OscConfig+0x690>)
 800bdd4:	400a      	ands	r2, r1
 800bdd6:	651a      	str	r2, [r3, #80]	@ 0x50
 800bdd8:	4b57      	ldr	r3, [pc, #348]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bdda:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bddc:	4b56      	ldr	r3, [pc, #344]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bdde:	495a      	ldr	r1, [pc, #360]	@ (800bf48 <HAL_RCC_OscConfig+0x698>)
 800bde0:	400a      	ands	r2, r1
 800bde2:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	689b      	ldr	r3, [r3, #8]
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d015      	beq.n	800be18 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800bdec:	f7fc faa2 	bl	8008334 <HAL_GetTick>
 800bdf0:	0003      	movs	r3, r0
 800bdf2:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bdf4:	e009      	b.n	800be0a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800bdf6:	f7fc fa9d 	bl	8008334 <HAL_GetTick>
 800bdfa:	0002      	movs	r2, r0
 800bdfc:	697b      	ldr	r3, [r7, #20]
 800bdfe:	1ad3      	subs	r3, r2, r3
 800be00:	4a52      	ldr	r2, [pc, #328]	@ (800bf4c <HAL_RCC_OscConfig+0x69c>)
 800be02:	4293      	cmp	r3, r2
 800be04:	d901      	bls.n	800be0a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800be06:	2303      	movs	r3, #3
 800be08:	e11b      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800be0a:	4b4b      	ldr	r3, [pc, #300]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800be0c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be0e:	2380      	movs	r3, #128	@ 0x80
 800be10:	009b      	lsls	r3, r3, #2
 800be12:	4013      	ands	r3, r2
 800be14:	d0ef      	beq.n	800bdf6 <HAL_RCC_OscConfig+0x546>
 800be16:	e014      	b.n	800be42 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800be18:	f7fc fa8c 	bl	8008334 <HAL_GetTick>
 800be1c:	0003      	movs	r3, r0
 800be1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800be20:	e009      	b.n	800be36 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800be22:	f7fc fa87 	bl	8008334 <HAL_GetTick>
 800be26:	0002      	movs	r2, r0
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	1ad3      	subs	r3, r2, r3
 800be2c:	4a47      	ldr	r2, [pc, #284]	@ (800bf4c <HAL_RCC_OscConfig+0x69c>)
 800be2e:	4293      	cmp	r3, r2
 800be30:	d901      	bls.n	800be36 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800be32:	2303      	movs	r3, #3
 800be34:	e105      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800be36:	4b40      	ldr	r3, [pc, #256]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800be38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800be3a:	2380      	movs	r3, #128	@ 0x80
 800be3c:	009b      	lsls	r3, r3, #2
 800be3e:	4013      	ands	r3, r2
 800be40:	d1ef      	bne.n	800be22 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800be42:	2323      	movs	r3, #35	@ 0x23
 800be44:	18fb      	adds	r3, r7, r3
 800be46:	781b      	ldrb	r3, [r3, #0]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d105      	bne.n	800be58 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800be4c:	4b3a      	ldr	r3, [pc, #232]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800be4e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800be50:	4b39      	ldr	r3, [pc, #228]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800be52:	493f      	ldr	r1, [pc, #252]	@ (800bf50 <HAL_RCC_OscConfig+0x6a0>)
 800be54:	400a      	ands	r2, r1
 800be56:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	681b      	ldr	r3, [r3, #0]
 800be5c:	2220      	movs	r2, #32
 800be5e:	4013      	ands	r3, r2
 800be60:	d049      	beq.n	800bef6 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	699b      	ldr	r3, [r3, #24]
 800be66:	2b00      	cmp	r3, #0
 800be68:	d026      	beq.n	800beb8 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800be6a:	4b33      	ldr	r3, [pc, #204]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800be6c:	689a      	ldr	r2, [r3, #8]
 800be6e:	4b32      	ldr	r3, [pc, #200]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800be70:	2101      	movs	r1, #1
 800be72:	430a      	orrs	r2, r1
 800be74:	609a      	str	r2, [r3, #8]
 800be76:	4b30      	ldr	r3, [pc, #192]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800be78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800be7a:	4b2f      	ldr	r3, [pc, #188]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800be7c:	2101      	movs	r1, #1
 800be7e:	430a      	orrs	r2, r1
 800be80:	635a      	str	r2, [r3, #52]	@ 0x34
 800be82:	4b34      	ldr	r3, [pc, #208]	@ (800bf54 <HAL_RCC_OscConfig+0x6a4>)
 800be84:	6a1a      	ldr	r2, [r3, #32]
 800be86:	4b33      	ldr	r3, [pc, #204]	@ (800bf54 <HAL_RCC_OscConfig+0x6a4>)
 800be88:	2180      	movs	r1, #128	@ 0x80
 800be8a:	0189      	lsls	r1, r1, #6
 800be8c:	430a      	orrs	r2, r1
 800be8e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800be90:	f7fc fa50 	bl	8008334 <HAL_GetTick>
 800be94:	0003      	movs	r3, r0
 800be96:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800be98:	e008      	b.n	800beac <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800be9a:	f7fc fa4b 	bl	8008334 <HAL_GetTick>
 800be9e:	0002      	movs	r2, r0
 800bea0:	697b      	ldr	r3, [r7, #20]
 800bea2:	1ad3      	subs	r3, r2, r3
 800bea4:	2b02      	cmp	r3, #2
 800bea6:	d901      	bls.n	800beac <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800bea8:	2303      	movs	r3, #3
 800beaa:	e0ca      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800beac:	4b22      	ldr	r3, [pc, #136]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800beae:	689b      	ldr	r3, [r3, #8]
 800beb0:	2202      	movs	r2, #2
 800beb2:	4013      	ands	r3, r2
 800beb4:	d0f1      	beq.n	800be9a <HAL_RCC_OscConfig+0x5ea>
 800beb6:	e01e      	b.n	800bef6 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800beb8:	4b1f      	ldr	r3, [pc, #124]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800beba:	689a      	ldr	r2, [r3, #8]
 800bebc:	4b1e      	ldr	r3, [pc, #120]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bebe:	2101      	movs	r1, #1
 800bec0:	438a      	bics	r2, r1
 800bec2:	609a      	str	r2, [r3, #8]
 800bec4:	4b23      	ldr	r3, [pc, #140]	@ (800bf54 <HAL_RCC_OscConfig+0x6a4>)
 800bec6:	6a1a      	ldr	r2, [r3, #32]
 800bec8:	4b22      	ldr	r3, [pc, #136]	@ (800bf54 <HAL_RCC_OscConfig+0x6a4>)
 800beca:	4923      	ldr	r1, [pc, #140]	@ (800bf58 <HAL_RCC_OscConfig+0x6a8>)
 800becc:	400a      	ands	r2, r1
 800bece:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bed0:	f7fc fa30 	bl	8008334 <HAL_GetTick>
 800bed4:	0003      	movs	r3, r0
 800bed6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800bed8:	e008      	b.n	800beec <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800beda:	f7fc fa2b 	bl	8008334 <HAL_GetTick>
 800bede:	0002      	movs	r2, r0
 800bee0:	697b      	ldr	r3, [r7, #20]
 800bee2:	1ad3      	subs	r3, r2, r3
 800bee4:	2b02      	cmp	r3, #2
 800bee6:	d901      	bls.n	800beec <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800bee8:	2303      	movs	r3, #3
 800beea:	e0aa      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800beec:	4b12      	ldr	r3, [pc, #72]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800beee:	689b      	ldr	r3, [r3, #8]
 800bef0:	2202      	movs	r2, #2
 800bef2:	4013      	ands	r3, r2
 800bef4:	d1f1      	bne.n	800beda <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800befa:	2b00      	cmp	r3, #0
 800befc:	d100      	bne.n	800bf00 <HAL_RCC_OscConfig+0x650>
 800befe:	e09f      	b.n	800c040 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	2b0c      	cmp	r3, #12
 800bf04:	d100      	bne.n	800bf08 <HAL_RCC_OscConfig+0x658>
 800bf06:	e078      	b.n	800bffa <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d159      	bne.n	800bfc4 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bf10:	4b09      	ldr	r3, [pc, #36]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bf12:	681a      	ldr	r2, [r3, #0]
 800bf14:	4b08      	ldr	r3, [pc, #32]	@ (800bf38 <HAL_RCC_OscConfig+0x688>)
 800bf16:	4911      	ldr	r1, [pc, #68]	@ (800bf5c <HAL_RCC_OscConfig+0x6ac>)
 800bf18:	400a      	ands	r2, r1
 800bf1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf1c:	f7fc fa0a 	bl	8008334 <HAL_GetTick>
 800bf20:	0003      	movs	r3, r0
 800bf22:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800bf24:	e01c      	b.n	800bf60 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bf26:	f7fc fa05 	bl	8008334 <HAL_GetTick>
 800bf2a:	0002      	movs	r2, r0
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	1ad3      	subs	r3, r2, r3
 800bf30:	2b02      	cmp	r3, #2
 800bf32:	d915      	bls.n	800bf60 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800bf34:	2303      	movs	r3, #3
 800bf36:	e084      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
 800bf38:	40021000 	.word	0x40021000
 800bf3c:	ffff1fff 	.word	0xffff1fff
 800bf40:	fffffeff 	.word	0xfffffeff
 800bf44:	40007000 	.word	0x40007000
 800bf48:	fffffbff 	.word	0xfffffbff
 800bf4c:	00001388 	.word	0x00001388
 800bf50:	efffffff 	.word	0xefffffff
 800bf54:	40010000 	.word	0x40010000
 800bf58:	ffffdfff 	.word	0xffffdfff
 800bf5c:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800bf60:	4b3a      	ldr	r3, [pc, #232]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bf62:	681a      	ldr	r2, [r3, #0]
 800bf64:	2380      	movs	r3, #128	@ 0x80
 800bf66:	049b      	lsls	r3, r3, #18
 800bf68:	4013      	ands	r3, r2
 800bf6a:	d1dc      	bne.n	800bf26 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800bf6c:	4b37      	ldr	r3, [pc, #220]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bf6e:	68db      	ldr	r3, [r3, #12]
 800bf70:	4a37      	ldr	r2, [pc, #220]	@ (800c050 <HAL_RCC_OscConfig+0x7a0>)
 800bf72:	4013      	ands	r3, r2
 800bf74:	0019      	movs	r1, r3
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf7a:	687b      	ldr	r3, [r7, #4]
 800bf7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bf7e:	431a      	orrs	r2, r3
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bf84:	431a      	orrs	r2, r3
 800bf86:	4b31      	ldr	r3, [pc, #196]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bf88:	430a      	orrs	r2, r1
 800bf8a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800bf8c:	4b2f      	ldr	r3, [pc, #188]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bf8e:	681a      	ldr	r2, [r3, #0]
 800bf90:	4b2e      	ldr	r3, [pc, #184]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bf92:	2180      	movs	r1, #128	@ 0x80
 800bf94:	0449      	lsls	r1, r1, #17
 800bf96:	430a      	orrs	r2, r1
 800bf98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bf9a:	f7fc f9cb 	bl	8008334 <HAL_GetTick>
 800bf9e:	0003      	movs	r3, r0
 800bfa0:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800bfa2:	e008      	b.n	800bfb6 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfa4:	f7fc f9c6 	bl	8008334 <HAL_GetTick>
 800bfa8:	0002      	movs	r2, r0
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	2b02      	cmp	r3, #2
 800bfb0:	d901      	bls.n	800bfb6 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800bfb2:	2303      	movs	r3, #3
 800bfb4:	e045      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800bfb6:	4b25      	ldr	r3, [pc, #148]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bfb8:	681a      	ldr	r2, [r3, #0]
 800bfba:	2380      	movs	r3, #128	@ 0x80
 800bfbc:	049b      	lsls	r3, r3, #18
 800bfbe:	4013      	ands	r3, r2
 800bfc0:	d0f0      	beq.n	800bfa4 <HAL_RCC_OscConfig+0x6f4>
 800bfc2:	e03d      	b.n	800c040 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800bfc4:	4b21      	ldr	r3, [pc, #132]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bfc6:	681a      	ldr	r2, [r3, #0]
 800bfc8:	4b20      	ldr	r3, [pc, #128]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bfca:	4922      	ldr	r1, [pc, #136]	@ (800c054 <HAL_RCC_OscConfig+0x7a4>)
 800bfcc:	400a      	ands	r2, r1
 800bfce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800bfd0:	f7fc f9b0 	bl	8008334 <HAL_GetTick>
 800bfd4:	0003      	movs	r3, r0
 800bfd6:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800bfd8:	e008      	b.n	800bfec <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800bfda:	f7fc f9ab 	bl	8008334 <HAL_GetTick>
 800bfde:	0002      	movs	r2, r0
 800bfe0:	697b      	ldr	r3, [r7, #20]
 800bfe2:	1ad3      	subs	r3, r2, r3
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d901      	bls.n	800bfec <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800bfe8:	2303      	movs	r3, #3
 800bfea:	e02a      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800bfec:	4b17      	ldr	r3, [pc, #92]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	2380      	movs	r3, #128	@ 0x80
 800bff2:	049b      	lsls	r3, r3, #18
 800bff4:	4013      	ands	r3, r2
 800bff6:	d1f0      	bne.n	800bfda <HAL_RCC_OscConfig+0x72a>
 800bff8:	e022      	b.n	800c040 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bffe:	2b01      	cmp	r3, #1
 800c000:	d101      	bne.n	800c006 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800c002:	2301      	movs	r3, #1
 800c004:	e01d      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800c006:	4b11      	ldr	r3, [pc, #68]	@ (800c04c <HAL_RCC_OscConfig+0x79c>)
 800c008:	68db      	ldr	r3, [r3, #12]
 800c00a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c00c:	69ba      	ldr	r2, [r7, #24]
 800c00e:	2380      	movs	r3, #128	@ 0x80
 800c010:	025b      	lsls	r3, r3, #9
 800c012:	401a      	ands	r2, r3
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c018:	429a      	cmp	r2, r3
 800c01a:	d10f      	bne.n	800c03c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800c01c:	69ba      	ldr	r2, [r7, #24]
 800c01e:	23f0      	movs	r3, #240	@ 0xf0
 800c020:	039b      	lsls	r3, r3, #14
 800c022:	401a      	ands	r2, r3
 800c024:	687b      	ldr	r3, [r7, #4]
 800c026:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c028:	429a      	cmp	r2, r3
 800c02a:	d107      	bne.n	800c03c <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800c02c:	69ba      	ldr	r2, [r7, #24]
 800c02e:	23c0      	movs	r3, #192	@ 0xc0
 800c030:	041b      	lsls	r3, r3, #16
 800c032:	401a      	ands	r2, r3
 800c034:	687b      	ldr	r3, [r7, #4]
 800c036:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800c038:	429a      	cmp	r2, r3
 800c03a:	d001      	beq.n	800c040 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800c03c:	2301      	movs	r3, #1
 800c03e:	e000      	b.n	800c042 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800c040:	2300      	movs	r3, #0
}
 800c042:	0018      	movs	r0, r3
 800c044:	46bd      	mov	sp, r7
 800c046:	b00a      	add	sp, #40	@ 0x28
 800c048:	bdb0      	pop	{r4, r5, r7, pc}
 800c04a:	46c0      	nop			@ (mov r8, r8)
 800c04c:	40021000 	.word	0x40021000
 800c050:	ff02ffff 	.word	0xff02ffff
 800c054:	feffffff 	.word	0xfeffffff

0800c058 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c058:	b5b0      	push	{r4, r5, r7, lr}
 800c05a:	b084      	sub	sp, #16
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	6078      	str	r0, [r7, #4]
 800c060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d101      	bne.n	800c06c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c068:	2301      	movs	r3, #1
 800c06a:	e128      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c06c:	4b96      	ldr	r3, [pc, #600]	@ (800c2c8 <HAL_RCC_ClockConfig+0x270>)
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	2201      	movs	r2, #1
 800c072:	4013      	ands	r3, r2
 800c074:	683a      	ldr	r2, [r7, #0]
 800c076:	429a      	cmp	r2, r3
 800c078:	d91e      	bls.n	800c0b8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c07a:	4b93      	ldr	r3, [pc, #588]	@ (800c2c8 <HAL_RCC_ClockConfig+0x270>)
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	2201      	movs	r2, #1
 800c080:	4393      	bics	r3, r2
 800c082:	0019      	movs	r1, r3
 800c084:	4b90      	ldr	r3, [pc, #576]	@ (800c2c8 <HAL_RCC_ClockConfig+0x270>)
 800c086:	683a      	ldr	r2, [r7, #0]
 800c088:	430a      	orrs	r2, r1
 800c08a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c08c:	f7fc f952 	bl	8008334 <HAL_GetTick>
 800c090:	0003      	movs	r3, r0
 800c092:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c094:	e009      	b.n	800c0aa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c096:	f7fc f94d 	bl	8008334 <HAL_GetTick>
 800c09a:	0002      	movs	r2, r0
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	1ad3      	subs	r3, r2, r3
 800c0a0:	4a8a      	ldr	r2, [pc, #552]	@ (800c2cc <HAL_RCC_ClockConfig+0x274>)
 800c0a2:	4293      	cmp	r3, r2
 800c0a4:	d901      	bls.n	800c0aa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800c0a6:	2303      	movs	r3, #3
 800c0a8:	e109      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c0aa:	4b87      	ldr	r3, [pc, #540]	@ (800c2c8 <HAL_RCC_ClockConfig+0x270>)
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	2201      	movs	r2, #1
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	683a      	ldr	r2, [r7, #0]
 800c0b4:	429a      	cmp	r2, r3
 800c0b6:	d1ee      	bne.n	800c096 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2202      	movs	r2, #2
 800c0be:	4013      	ands	r3, r2
 800c0c0:	d009      	beq.n	800c0d6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c0c2:	4b83      	ldr	r3, [pc, #524]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c0c4:	68db      	ldr	r3, [r3, #12]
 800c0c6:	22f0      	movs	r2, #240	@ 0xf0
 800c0c8:	4393      	bics	r3, r2
 800c0ca:	0019      	movs	r1, r3
 800c0cc:	687b      	ldr	r3, [r7, #4]
 800c0ce:	689a      	ldr	r2, [r3, #8]
 800c0d0:	4b7f      	ldr	r3, [pc, #508]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c0d2:	430a      	orrs	r2, r1
 800c0d4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c0d6:	687b      	ldr	r3, [r7, #4]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	2201      	movs	r2, #1
 800c0dc:	4013      	ands	r3, r2
 800c0de:	d100      	bne.n	800c0e2 <HAL_RCC_ClockConfig+0x8a>
 800c0e0:	e089      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0e2:	687b      	ldr	r3, [r7, #4]
 800c0e4:	685b      	ldr	r3, [r3, #4]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	d107      	bne.n	800c0fa <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c0ea:	4b79      	ldr	r3, [pc, #484]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c0ec:	681a      	ldr	r2, [r3, #0]
 800c0ee:	2380      	movs	r3, #128	@ 0x80
 800c0f0:	029b      	lsls	r3, r3, #10
 800c0f2:	4013      	ands	r3, r2
 800c0f4:	d120      	bne.n	800c138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800c0f6:	2301      	movs	r3, #1
 800c0f8:	e0e1      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	685b      	ldr	r3, [r3, #4]
 800c0fe:	2b03      	cmp	r3, #3
 800c100:	d107      	bne.n	800c112 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c102:	4b73      	ldr	r3, [pc, #460]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c104:	681a      	ldr	r2, [r3, #0]
 800c106:	2380      	movs	r3, #128	@ 0x80
 800c108:	049b      	lsls	r3, r3, #18
 800c10a:	4013      	ands	r3, r2
 800c10c:	d114      	bne.n	800c138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800c10e:	2301      	movs	r3, #1
 800c110:	e0d5      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	685b      	ldr	r3, [r3, #4]
 800c116:	2b01      	cmp	r3, #1
 800c118:	d106      	bne.n	800c128 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c11a:	4b6d      	ldr	r3, [pc, #436]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	2204      	movs	r2, #4
 800c120:	4013      	ands	r3, r2
 800c122:	d109      	bne.n	800c138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800c124:	2301      	movs	r3, #1
 800c126:	e0ca      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800c128:	4b69      	ldr	r3, [pc, #420]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c12a:	681a      	ldr	r2, [r3, #0]
 800c12c:	2380      	movs	r3, #128	@ 0x80
 800c12e:	009b      	lsls	r3, r3, #2
 800c130:	4013      	ands	r3, r2
 800c132:	d101      	bne.n	800c138 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800c134:	2301      	movs	r3, #1
 800c136:	e0c2      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c138:	4b65      	ldr	r3, [pc, #404]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c13a:	68db      	ldr	r3, [r3, #12]
 800c13c:	2203      	movs	r2, #3
 800c13e:	4393      	bics	r3, r2
 800c140:	0019      	movs	r1, r3
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	685a      	ldr	r2, [r3, #4]
 800c146:	4b62      	ldr	r3, [pc, #392]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c148:	430a      	orrs	r2, r1
 800c14a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c14c:	f7fc f8f2 	bl	8008334 <HAL_GetTick>
 800c150:	0003      	movs	r3, r0
 800c152:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c154:	687b      	ldr	r3, [r7, #4]
 800c156:	685b      	ldr	r3, [r3, #4]
 800c158:	2b02      	cmp	r3, #2
 800c15a:	d111      	bne.n	800c180 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c15c:	e009      	b.n	800c172 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c15e:	f7fc f8e9 	bl	8008334 <HAL_GetTick>
 800c162:	0002      	movs	r2, r0
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	1ad3      	subs	r3, r2, r3
 800c168:	4a58      	ldr	r2, [pc, #352]	@ (800c2cc <HAL_RCC_ClockConfig+0x274>)
 800c16a:	4293      	cmp	r3, r2
 800c16c:	d901      	bls.n	800c172 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800c16e:	2303      	movs	r3, #3
 800c170:	e0a5      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800c172:	4b57      	ldr	r3, [pc, #348]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c174:	68db      	ldr	r3, [r3, #12]
 800c176:	220c      	movs	r2, #12
 800c178:	4013      	ands	r3, r2
 800c17a:	2b08      	cmp	r3, #8
 800c17c:	d1ef      	bne.n	800c15e <HAL_RCC_ClockConfig+0x106>
 800c17e:	e03a      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	2b03      	cmp	r3, #3
 800c186:	d111      	bne.n	800c1ac <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c188:	e009      	b.n	800c19e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c18a:	f7fc f8d3 	bl	8008334 <HAL_GetTick>
 800c18e:	0002      	movs	r2, r0
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	1ad3      	subs	r3, r2, r3
 800c194:	4a4d      	ldr	r2, [pc, #308]	@ (800c2cc <HAL_RCC_ClockConfig+0x274>)
 800c196:	4293      	cmp	r3, r2
 800c198:	d901      	bls.n	800c19e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800c19a:	2303      	movs	r3, #3
 800c19c:	e08f      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800c19e:	4b4c      	ldr	r3, [pc, #304]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c1a0:	68db      	ldr	r3, [r3, #12]
 800c1a2:	220c      	movs	r2, #12
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	2b0c      	cmp	r3, #12
 800c1a8:	d1ef      	bne.n	800c18a <HAL_RCC_ClockConfig+0x132>
 800c1aa:	e024      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	2b01      	cmp	r3, #1
 800c1b2:	d11b      	bne.n	800c1ec <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c1b4:	e009      	b.n	800c1ca <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1b6:	f7fc f8bd 	bl	8008334 <HAL_GetTick>
 800c1ba:	0002      	movs	r2, r0
 800c1bc:	68fb      	ldr	r3, [r7, #12]
 800c1be:	1ad3      	subs	r3, r2, r3
 800c1c0:	4a42      	ldr	r2, [pc, #264]	@ (800c2cc <HAL_RCC_ClockConfig+0x274>)
 800c1c2:	4293      	cmp	r3, r2
 800c1c4:	d901      	bls.n	800c1ca <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800c1c6:	2303      	movs	r3, #3
 800c1c8:	e079      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800c1ca:	4b41      	ldr	r3, [pc, #260]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c1cc:	68db      	ldr	r3, [r3, #12]
 800c1ce:	220c      	movs	r2, #12
 800c1d0:	4013      	ands	r3, r2
 800c1d2:	2b04      	cmp	r3, #4
 800c1d4:	d1ef      	bne.n	800c1b6 <HAL_RCC_ClockConfig+0x15e>
 800c1d6:	e00e      	b.n	800c1f6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c1d8:	f7fc f8ac 	bl	8008334 <HAL_GetTick>
 800c1dc:	0002      	movs	r2, r0
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	1ad3      	subs	r3, r2, r3
 800c1e2:	4a3a      	ldr	r2, [pc, #232]	@ (800c2cc <HAL_RCC_ClockConfig+0x274>)
 800c1e4:	4293      	cmp	r3, r2
 800c1e6:	d901      	bls.n	800c1ec <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800c1e8:	2303      	movs	r3, #3
 800c1ea:	e068      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800c1ec:	4b38      	ldr	r3, [pc, #224]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c1ee:	68db      	ldr	r3, [r3, #12]
 800c1f0:	220c      	movs	r2, #12
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	d1f0      	bne.n	800c1d8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c1f6:	4b34      	ldr	r3, [pc, #208]	@ (800c2c8 <HAL_RCC_ClockConfig+0x270>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	2201      	movs	r2, #1
 800c1fc:	4013      	ands	r3, r2
 800c1fe:	683a      	ldr	r2, [r7, #0]
 800c200:	429a      	cmp	r2, r3
 800c202:	d21e      	bcs.n	800c242 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c204:	4b30      	ldr	r3, [pc, #192]	@ (800c2c8 <HAL_RCC_ClockConfig+0x270>)
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	2201      	movs	r2, #1
 800c20a:	4393      	bics	r3, r2
 800c20c:	0019      	movs	r1, r3
 800c20e:	4b2e      	ldr	r3, [pc, #184]	@ (800c2c8 <HAL_RCC_ClockConfig+0x270>)
 800c210:	683a      	ldr	r2, [r7, #0]
 800c212:	430a      	orrs	r2, r1
 800c214:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800c216:	f7fc f88d 	bl	8008334 <HAL_GetTick>
 800c21a:	0003      	movs	r3, r0
 800c21c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c21e:	e009      	b.n	800c234 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c220:	f7fc f888 	bl	8008334 <HAL_GetTick>
 800c224:	0002      	movs	r2, r0
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	1ad3      	subs	r3, r2, r3
 800c22a:	4a28      	ldr	r2, [pc, #160]	@ (800c2cc <HAL_RCC_ClockConfig+0x274>)
 800c22c:	4293      	cmp	r3, r2
 800c22e:	d901      	bls.n	800c234 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800c230:	2303      	movs	r3, #3
 800c232:	e044      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c234:	4b24      	ldr	r3, [pc, #144]	@ (800c2c8 <HAL_RCC_ClockConfig+0x270>)
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	2201      	movs	r2, #1
 800c23a:	4013      	ands	r3, r2
 800c23c:	683a      	ldr	r2, [r7, #0]
 800c23e:	429a      	cmp	r2, r3
 800c240:	d1ee      	bne.n	800c220 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	681b      	ldr	r3, [r3, #0]
 800c246:	2204      	movs	r2, #4
 800c248:	4013      	ands	r3, r2
 800c24a:	d009      	beq.n	800c260 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c24c:	4b20      	ldr	r3, [pc, #128]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c24e:	68db      	ldr	r3, [r3, #12]
 800c250:	4a20      	ldr	r2, [pc, #128]	@ (800c2d4 <HAL_RCC_ClockConfig+0x27c>)
 800c252:	4013      	ands	r3, r2
 800c254:	0019      	movs	r1, r3
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	68da      	ldr	r2, [r3, #12]
 800c25a:	4b1d      	ldr	r3, [pc, #116]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c25c:	430a      	orrs	r2, r1
 800c25e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	2208      	movs	r2, #8
 800c266:	4013      	ands	r3, r2
 800c268:	d00a      	beq.n	800c280 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800c26a:	4b19      	ldr	r3, [pc, #100]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c26c:	68db      	ldr	r3, [r3, #12]
 800c26e:	4a1a      	ldr	r2, [pc, #104]	@ (800c2d8 <HAL_RCC_ClockConfig+0x280>)
 800c270:	4013      	ands	r3, r2
 800c272:	0019      	movs	r1, r3
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	691b      	ldr	r3, [r3, #16]
 800c278:	00da      	lsls	r2, r3, #3
 800c27a:	4b15      	ldr	r3, [pc, #84]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c27c:	430a      	orrs	r2, r1
 800c27e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c280:	f000 f832 	bl	800c2e8 <HAL_RCC_GetSysClockFreq>
 800c284:	0001      	movs	r1, r0
 800c286:	4b12      	ldr	r3, [pc, #72]	@ (800c2d0 <HAL_RCC_ClockConfig+0x278>)
 800c288:	68db      	ldr	r3, [r3, #12]
 800c28a:	091b      	lsrs	r3, r3, #4
 800c28c:	220f      	movs	r2, #15
 800c28e:	4013      	ands	r3, r2
 800c290:	4a12      	ldr	r2, [pc, #72]	@ (800c2dc <HAL_RCC_ClockConfig+0x284>)
 800c292:	5cd3      	ldrb	r3, [r2, r3]
 800c294:	000a      	movs	r2, r1
 800c296:	40da      	lsrs	r2, r3
 800c298:	4b11      	ldr	r3, [pc, #68]	@ (800c2e0 <HAL_RCC_ClockConfig+0x288>)
 800c29a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800c29c:	4b11      	ldr	r3, [pc, #68]	@ (800c2e4 <HAL_RCC_ClockConfig+0x28c>)
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	250b      	movs	r5, #11
 800c2a2:	197c      	adds	r4, r7, r5
 800c2a4:	0018      	movs	r0, r3
 800c2a6:	f7fb ffff 	bl	80082a8 <HAL_InitTick>
 800c2aa:	0003      	movs	r3, r0
 800c2ac:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800c2ae:	197b      	adds	r3, r7, r5
 800c2b0:	781b      	ldrb	r3, [r3, #0]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d002      	beq.n	800c2bc <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800c2b6:	197b      	adds	r3, r7, r5
 800c2b8:	781b      	ldrb	r3, [r3, #0]
 800c2ba:	e000      	b.n	800c2be <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800c2bc:	2300      	movs	r3, #0
}
 800c2be:	0018      	movs	r0, r3
 800c2c0:	46bd      	mov	sp, r7
 800c2c2:	b004      	add	sp, #16
 800c2c4:	bdb0      	pop	{r4, r5, r7, pc}
 800c2c6:	46c0      	nop			@ (mov r8, r8)
 800c2c8:	40022000 	.word	0x40022000
 800c2cc:	00001388 	.word	0x00001388
 800c2d0:	40021000 	.word	0x40021000
 800c2d4:	fffff8ff 	.word	0xfffff8ff
 800c2d8:	ffffc7ff 	.word	0xffffc7ff
 800c2dc:	080125b8 	.word	0x080125b8
 800c2e0:	2000012c 	.word	0x2000012c
 800c2e4:	20000140 	.word	0x20000140

0800c2e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2e8:	b5b0      	push	{r4, r5, r7, lr}
 800c2ea:	b08e      	sub	sp, #56	@ 0x38
 800c2ec:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800c2ee:	4b4c      	ldr	r3, [pc, #304]	@ (800c420 <HAL_RCC_GetSysClockFreq+0x138>)
 800c2f0:	68db      	ldr	r3, [r3, #12]
 800c2f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800c2f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c2f6:	230c      	movs	r3, #12
 800c2f8:	4013      	ands	r3, r2
 800c2fa:	2b0c      	cmp	r3, #12
 800c2fc:	d014      	beq.n	800c328 <HAL_RCC_GetSysClockFreq+0x40>
 800c2fe:	d900      	bls.n	800c302 <HAL_RCC_GetSysClockFreq+0x1a>
 800c300:	e07b      	b.n	800c3fa <HAL_RCC_GetSysClockFreq+0x112>
 800c302:	2b04      	cmp	r3, #4
 800c304:	d002      	beq.n	800c30c <HAL_RCC_GetSysClockFreq+0x24>
 800c306:	2b08      	cmp	r3, #8
 800c308:	d00b      	beq.n	800c322 <HAL_RCC_GetSysClockFreq+0x3a>
 800c30a:	e076      	b.n	800c3fa <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800c30c:	4b44      	ldr	r3, [pc, #272]	@ (800c420 <HAL_RCC_GetSysClockFreq+0x138>)
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	2210      	movs	r2, #16
 800c312:	4013      	ands	r3, r2
 800c314:	d002      	beq.n	800c31c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800c316:	4b43      	ldr	r3, [pc, #268]	@ (800c424 <HAL_RCC_GetSysClockFreq+0x13c>)
 800c318:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800c31a:	e07c      	b.n	800c416 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800c31c:	4b42      	ldr	r3, [pc, #264]	@ (800c428 <HAL_RCC_GetSysClockFreq+0x140>)
 800c31e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c320:	e079      	b.n	800c416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800c322:	4b42      	ldr	r3, [pc, #264]	@ (800c42c <HAL_RCC_GetSysClockFreq+0x144>)
 800c324:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c326:	e076      	b.n	800c416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800c328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c32a:	0c9a      	lsrs	r2, r3, #18
 800c32c:	230f      	movs	r3, #15
 800c32e:	401a      	ands	r2, r3
 800c330:	4b3f      	ldr	r3, [pc, #252]	@ (800c430 <HAL_RCC_GetSysClockFreq+0x148>)
 800c332:	5c9b      	ldrb	r3, [r3, r2]
 800c334:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800c336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c338:	0d9a      	lsrs	r2, r3, #22
 800c33a:	2303      	movs	r3, #3
 800c33c:	4013      	ands	r3, r2
 800c33e:	3301      	adds	r3, #1
 800c340:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c342:	4b37      	ldr	r3, [pc, #220]	@ (800c420 <HAL_RCC_GetSysClockFreq+0x138>)
 800c344:	68da      	ldr	r2, [r3, #12]
 800c346:	2380      	movs	r3, #128	@ 0x80
 800c348:	025b      	lsls	r3, r3, #9
 800c34a:	4013      	ands	r3, r2
 800c34c:	d01a      	beq.n	800c384 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800c34e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c350:	61bb      	str	r3, [r7, #24]
 800c352:	2300      	movs	r3, #0
 800c354:	61fb      	str	r3, [r7, #28]
 800c356:	4a35      	ldr	r2, [pc, #212]	@ (800c42c <HAL_RCC_GetSysClockFreq+0x144>)
 800c358:	2300      	movs	r3, #0
 800c35a:	69b8      	ldr	r0, [r7, #24]
 800c35c:	69f9      	ldr	r1, [r7, #28]
 800c35e:	f7f4 f8fd 	bl	800055c <__aeabi_lmul>
 800c362:	0002      	movs	r2, r0
 800c364:	000b      	movs	r3, r1
 800c366:	0010      	movs	r0, r2
 800c368:	0019      	movs	r1, r3
 800c36a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c36c:	613b      	str	r3, [r7, #16]
 800c36e:	2300      	movs	r3, #0
 800c370:	617b      	str	r3, [r7, #20]
 800c372:	693a      	ldr	r2, [r7, #16]
 800c374:	697b      	ldr	r3, [r7, #20]
 800c376:	f7f4 f8d1 	bl	800051c <__aeabi_uldivmod>
 800c37a:	0002      	movs	r2, r0
 800c37c:	000b      	movs	r3, r1
 800c37e:	0013      	movs	r3, r2
 800c380:	637b      	str	r3, [r7, #52]	@ 0x34
 800c382:	e037      	b.n	800c3f4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800c384:	4b26      	ldr	r3, [pc, #152]	@ (800c420 <HAL_RCC_GetSysClockFreq+0x138>)
 800c386:	681b      	ldr	r3, [r3, #0]
 800c388:	2210      	movs	r2, #16
 800c38a:	4013      	ands	r3, r2
 800c38c:	d01a      	beq.n	800c3c4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800c38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c390:	60bb      	str	r3, [r7, #8]
 800c392:	2300      	movs	r3, #0
 800c394:	60fb      	str	r3, [r7, #12]
 800c396:	4a23      	ldr	r2, [pc, #140]	@ (800c424 <HAL_RCC_GetSysClockFreq+0x13c>)
 800c398:	2300      	movs	r3, #0
 800c39a:	68b8      	ldr	r0, [r7, #8]
 800c39c:	68f9      	ldr	r1, [r7, #12]
 800c39e:	f7f4 f8dd 	bl	800055c <__aeabi_lmul>
 800c3a2:	0002      	movs	r2, r0
 800c3a4:	000b      	movs	r3, r1
 800c3a6:	0010      	movs	r0, r2
 800c3a8:	0019      	movs	r1, r3
 800c3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3ac:	603b      	str	r3, [r7, #0]
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	607b      	str	r3, [r7, #4]
 800c3b2:	683a      	ldr	r2, [r7, #0]
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	f7f4 f8b1 	bl	800051c <__aeabi_uldivmod>
 800c3ba:	0002      	movs	r2, r0
 800c3bc:	000b      	movs	r3, r1
 800c3be:	0013      	movs	r3, r2
 800c3c0:	637b      	str	r3, [r7, #52]	@ 0x34
 800c3c2:	e017      	b.n	800c3f4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800c3c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c3c6:	0018      	movs	r0, r3
 800c3c8:	2300      	movs	r3, #0
 800c3ca:	0019      	movs	r1, r3
 800c3cc:	4a16      	ldr	r2, [pc, #88]	@ (800c428 <HAL_RCC_GetSysClockFreq+0x140>)
 800c3ce:	2300      	movs	r3, #0
 800c3d0:	f7f4 f8c4 	bl	800055c <__aeabi_lmul>
 800c3d4:	0002      	movs	r2, r0
 800c3d6:	000b      	movs	r3, r1
 800c3d8:	0010      	movs	r0, r2
 800c3da:	0019      	movs	r1, r3
 800c3dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3de:	001c      	movs	r4, r3
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	001d      	movs	r5, r3
 800c3e4:	0022      	movs	r2, r4
 800c3e6:	002b      	movs	r3, r5
 800c3e8:	f7f4 f898 	bl	800051c <__aeabi_uldivmod>
 800c3ec:	0002      	movs	r2, r0
 800c3ee:	000b      	movs	r3, r1
 800c3f0:	0013      	movs	r3, r2
 800c3f2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800c3f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c3f6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c3f8:	e00d      	b.n	800c416 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800c3fa:	4b09      	ldr	r3, [pc, #36]	@ (800c420 <HAL_RCC_GetSysClockFreq+0x138>)
 800c3fc:	685b      	ldr	r3, [r3, #4]
 800c3fe:	0b5b      	lsrs	r3, r3, #13
 800c400:	2207      	movs	r2, #7
 800c402:	4013      	ands	r3, r2
 800c404:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800c406:	6a3b      	ldr	r3, [r7, #32]
 800c408:	3301      	adds	r3, #1
 800c40a:	2280      	movs	r2, #128	@ 0x80
 800c40c:	0212      	lsls	r2, r2, #8
 800c40e:	409a      	lsls	r2, r3
 800c410:	0013      	movs	r3, r2
 800c412:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800c414:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800c416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800c418:	0018      	movs	r0, r3
 800c41a:	46bd      	mov	sp, r7
 800c41c:	b00e      	add	sp, #56	@ 0x38
 800c41e:	bdb0      	pop	{r4, r5, r7, pc}
 800c420:	40021000 	.word	0x40021000
 800c424:	003d0900 	.word	0x003d0900
 800c428:	00f42400 	.word	0x00f42400
 800c42c:	007a1200 	.word	0x007a1200
 800c430:	080125d0 	.word	0x080125d0

0800c434 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c438:	4b02      	ldr	r3, [pc, #8]	@ (800c444 <HAL_RCC_GetHCLKFreq+0x10>)
 800c43a:	681b      	ldr	r3, [r3, #0]
}
 800c43c:	0018      	movs	r0, r3
 800c43e:	46bd      	mov	sp, r7
 800c440:	bd80      	pop	{r7, pc}
 800c442:	46c0      	nop			@ (mov r8, r8)
 800c444:	2000012c 	.word	0x2000012c

0800c448 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800c44c:	f7ff fff2 	bl	800c434 <HAL_RCC_GetHCLKFreq>
 800c450:	0001      	movs	r1, r0
 800c452:	4b06      	ldr	r3, [pc, #24]	@ (800c46c <HAL_RCC_GetPCLK1Freq+0x24>)
 800c454:	68db      	ldr	r3, [r3, #12]
 800c456:	0a1b      	lsrs	r3, r3, #8
 800c458:	2207      	movs	r2, #7
 800c45a:	4013      	ands	r3, r2
 800c45c:	4a04      	ldr	r2, [pc, #16]	@ (800c470 <HAL_RCC_GetPCLK1Freq+0x28>)
 800c45e:	5cd3      	ldrb	r3, [r2, r3]
 800c460:	40d9      	lsrs	r1, r3
 800c462:	000b      	movs	r3, r1
}
 800c464:	0018      	movs	r0, r3
 800c466:	46bd      	mov	sp, r7
 800c468:	bd80      	pop	{r7, pc}
 800c46a:	46c0      	nop			@ (mov r8, r8)
 800c46c:	40021000 	.word	0x40021000
 800c470:	080125c8 	.word	0x080125c8

0800c474 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800c478:	f7ff ffdc 	bl	800c434 <HAL_RCC_GetHCLKFreq>
 800c47c:	0001      	movs	r1, r0
 800c47e:	4b06      	ldr	r3, [pc, #24]	@ (800c498 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c480:	68db      	ldr	r3, [r3, #12]
 800c482:	0adb      	lsrs	r3, r3, #11
 800c484:	2207      	movs	r2, #7
 800c486:	4013      	ands	r3, r2
 800c488:	4a04      	ldr	r2, [pc, #16]	@ (800c49c <HAL_RCC_GetPCLK2Freq+0x28>)
 800c48a:	5cd3      	ldrb	r3, [r2, r3]
 800c48c:	40d9      	lsrs	r1, r3
 800c48e:	000b      	movs	r3, r1
}
 800c490:	0018      	movs	r0, r3
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	46c0      	nop			@ (mov r8, r8)
 800c498:	40021000 	.word	0x40021000
 800c49c:	080125c8 	.word	0x080125c8

0800c4a0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800c4a0:	b580      	push	{r7, lr}
 800c4a2:	b086      	sub	sp, #24
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800c4a8:	2017      	movs	r0, #23
 800c4aa:	183b      	adds	r3, r7, r0
 800c4ac:	2200      	movs	r2, #0
 800c4ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	2220      	movs	r2, #32
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	d100      	bne.n	800c4bc <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800c4ba:	e0c7      	b.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c4bc:	4b9b      	ldr	r3, [pc, #620]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c4be:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4c0:	2380      	movs	r3, #128	@ 0x80
 800c4c2:	055b      	lsls	r3, r3, #21
 800c4c4:	4013      	ands	r3, r2
 800c4c6:	d109      	bne.n	800c4dc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c4c8:	4b98      	ldr	r3, [pc, #608]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c4ca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c4cc:	4b97      	ldr	r3, [pc, #604]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c4ce:	2180      	movs	r1, #128	@ 0x80
 800c4d0:	0549      	lsls	r1, r1, #21
 800c4d2:	430a      	orrs	r2, r1
 800c4d4:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800c4d6:	183b      	adds	r3, r7, r0
 800c4d8:	2201      	movs	r2, #1
 800c4da:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4dc:	4b94      	ldr	r3, [pc, #592]	@ (800c730 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800c4de:	681a      	ldr	r2, [r3, #0]
 800c4e0:	2380      	movs	r3, #128	@ 0x80
 800c4e2:	005b      	lsls	r3, r3, #1
 800c4e4:	4013      	ands	r3, r2
 800c4e6:	d11a      	bne.n	800c51e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c4e8:	4b91      	ldr	r3, [pc, #580]	@ (800c730 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800c4ea:	681a      	ldr	r2, [r3, #0]
 800c4ec:	4b90      	ldr	r3, [pc, #576]	@ (800c730 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800c4ee:	2180      	movs	r1, #128	@ 0x80
 800c4f0:	0049      	lsls	r1, r1, #1
 800c4f2:	430a      	orrs	r2, r1
 800c4f4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c4f6:	f7fb ff1d 	bl	8008334 <HAL_GetTick>
 800c4fa:	0003      	movs	r3, r0
 800c4fc:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c4fe:	e008      	b.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c500:	f7fb ff18 	bl	8008334 <HAL_GetTick>
 800c504:	0002      	movs	r2, r0
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	1ad3      	subs	r3, r2, r3
 800c50a:	2b64      	cmp	r3, #100	@ 0x64
 800c50c:	d901      	bls.n	800c512 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800c50e:	2303      	movs	r3, #3
 800c510:	e107      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c512:	4b87      	ldr	r3, [pc, #540]	@ (800c730 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	2380      	movs	r3, #128	@ 0x80
 800c518:	005b      	lsls	r3, r3, #1
 800c51a:	4013      	ands	r3, r2
 800c51c:	d0f0      	beq.n	800c500 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800c51e:	4b83      	ldr	r3, [pc, #524]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c520:	681a      	ldr	r2, [r3, #0]
 800c522:	23c0      	movs	r3, #192	@ 0xc0
 800c524:	039b      	lsls	r3, r3, #14
 800c526:	4013      	ands	r3, r2
 800c528:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	685a      	ldr	r2, [r3, #4]
 800c52e:	23c0      	movs	r3, #192	@ 0xc0
 800c530:	039b      	lsls	r3, r3, #14
 800c532:	4013      	ands	r3, r2
 800c534:	68fa      	ldr	r2, [r7, #12]
 800c536:	429a      	cmp	r2, r3
 800c538:	d013      	beq.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800c53a:	687b      	ldr	r3, [r7, #4]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	23c0      	movs	r3, #192	@ 0xc0
 800c540:	029b      	lsls	r3, r3, #10
 800c542:	401a      	ands	r2, r3
 800c544:	23c0      	movs	r3, #192	@ 0xc0
 800c546:	029b      	lsls	r3, r3, #10
 800c548:	429a      	cmp	r2, r3
 800c54a:	d10a      	bne.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c54c:	4b77      	ldr	r3, [pc, #476]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c54e:	681a      	ldr	r2, [r3, #0]
 800c550:	2380      	movs	r3, #128	@ 0x80
 800c552:	029b      	lsls	r3, r3, #10
 800c554:	401a      	ands	r2, r3
 800c556:	2380      	movs	r3, #128	@ 0x80
 800c558:	029b      	lsls	r3, r3, #10
 800c55a:	429a      	cmp	r2, r3
 800c55c:	d101      	bne.n	800c562 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800c55e:	2301      	movs	r3, #1
 800c560:	e0df      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800c562:	4b72      	ldr	r3, [pc, #456]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c564:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c566:	23c0      	movs	r3, #192	@ 0xc0
 800c568:	029b      	lsls	r3, r3, #10
 800c56a:	4013      	ands	r3, r2
 800c56c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800c56e:	68fb      	ldr	r3, [r7, #12]
 800c570:	2b00      	cmp	r3, #0
 800c572:	d03b      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	685a      	ldr	r2, [r3, #4]
 800c578:	23c0      	movs	r3, #192	@ 0xc0
 800c57a:	029b      	lsls	r3, r3, #10
 800c57c:	4013      	ands	r3, r2
 800c57e:	68fa      	ldr	r2, [r7, #12]
 800c580:	429a      	cmp	r2, r3
 800c582:	d033      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	2220      	movs	r2, #32
 800c58a:	4013      	ands	r3, r2
 800c58c:	d02e      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800c58e:	4b67      	ldr	r3, [pc, #412]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c590:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800c592:	4a68      	ldr	r2, [pc, #416]	@ (800c734 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c594:	4013      	ands	r3, r2
 800c596:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800c598:	4b64      	ldr	r3, [pc, #400]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c59a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c59c:	4b63      	ldr	r3, [pc, #396]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c59e:	2180      	movs	r1, #128	@ 0x80
 800c5a0:	0309      	lsls	r1, r1, #12
 800c5a2:	430a      	orrs	r2, r1
 800c5a4:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800c5a6:	4b61      	ldr	r3, [pc, #388]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c5a8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5aa:	4b60      	ldr	r3, [pc, #384]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c5ac:	4962      	ldr	r1, [pc, #392]	@ (800c738 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800c5ae:	400a      	ands	r2, r1
 800c5b0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800c5b2:	4b5e      	ldr	r3, [pc, #376]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c5b4:	68fa      	ldr	r2, [r7, #12]
 800c5b6:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	2380      	movs	r3, #128	@ 0x80
 800c5bc:	005b      	lsls	r3, r3, #1
 800c5be:	4013      	ands	r3, r2
 800c5c0:	d014      	beq.n	800c5ec <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800c5c2:	f7fb feb7 	bl	8008334 <HAL_GetTick>
 800c5c6:	0003      	movs	r3, r0
 800c5c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c5ca:	e009      	b.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800c5cc:	f7fb feb2 	bl	8008334 <HAL_GetTick>
 800c5d0:	0002      	movs	r2, r0
 800c5d2:	693b      	ldr	r3, [r7, #16]
 800c5d4:	1ad3      	subs	r3, r2, r3
 800c5d6:	4a59      	ldr	r2, [pc, #356]	@ (800c73c <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800c5d8:	4293      	cmp	r3, r2
 800c5da:	d901      	bls.n	800c5e0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800c5dc:	2303      	movs	r3, #3
 800c5de:	e0a0      	b.n	800c722 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c5e0:	4b52      	ldr	r3, [pc, #328]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c5e2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800c5e4:	2380      	movs	r3, #128	@ 0x80
 800c5e6:	009b      	lsls	r3, r3, #2
 800c5e8:	4013      	ands	r3, r2
 800c5ea:	d0ef      	beq.n	800c5cc <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2220      	movs	r2, #32
 800c5f2:	4013      	ands	r3, r2
 800c5f4:	d01f      	beq.n	800c636 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	685a      	ldr	r2, [r3, #4]
 800c5fa:	23c0      	movs	r3, #192	@ 0xc0
 800c5fc:	029b      	lsls	r3, r3, #10
 800c5fe:	401a      	ands	r2, r3
 800c600:	23c0      	movs	r3, #192	@ 0xc0
 800c602:	029b      	lsls	r3, r3, #10
 800c604:	429a      	cmp	r2, r3
 800c606:	d10c      	bne.n	800c622 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800c608:	4b48      	ldr	r3, [pc, #288]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c60a:	681b      	ldr	r3, [r3, #0]
 800c60c:	4a4c      	ldr	r2, [pc, #304]	@ (800c740 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800c60e:	4013      	ands	r3, r2
 800c610:	0019      	movs	r1, r3
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	685a      	ldr	r2, [r3, #4]
 800c616:	23c0      	movs	r3, #192	@ 0xc0
 800c618:	039b      	lsls	r3, r3, #14
 800c61a:	401a      	ands	r2, r3
 800c61c:	4b43      	ldr	r3, [pc, #268]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c61e:	430a      	orrs	r2, r1
 800c620:	601a      	str	r2, [r3, #0]
 800c622:	4b42      	ldr	r3, [pc, #264]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c624:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	685a      	ldr	r2, [r3, #4]
 800c62a:	23c0      	movs	r3, #192	@ 0xc0
 800c62c:	029b      	lsls	r3, r3, #10
 800c62e:	401a      	ands	r2, r3
 800c630:	4b3e      	ldr	r3, [pc, #248]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c632:	430a      	orrs	r2, r1
 800c634:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800c636:	2317      	movs	r3, #23
 800c638:	18fb      	adds	r3, r7, r3
 800c63a:	781b      	ldrb	r3, [r3, #0]
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d105      	bne.n	800c64c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800c640:	4b3a      	ldr	r3, [pc, #232]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c642:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c644:	4b39      	ldr	r3, [pc, #228]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c646:	493f      	ldr	r1, [pc, #252]	@ (800c744 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800c648:	400a      	ands	r2, r1
 800c64a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	681b      	ldr	r3, [r3, #0]
 800c650:	2201      	movs	r2, #1
 800c652:	4013      	ands	r3, r2
 800c654:	d009      	beq.n	800c66a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800c656:	4b35      	ldr	r3, [pc, #212]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c658:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c65a:	2203      	movs	r2, #3
 800c65c:	4393      	bics	r3, r2
 800c65e:	0019      	movs	r1, r3
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	689a      	ldr	r2, [r3, #8]
 800c664:	4b31      	ldr	r3, [pc, #196]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c666:	430a      	orrs	r2, r1
 800c668:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2202      	movs	r2, #2
 800c670:	4013      	ands	r3, r2
 800c672:	d009      	beq.n	800c688 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800c674:	4b2d      	ldr	r3, [pc, #180]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c676:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c678:	220c      	movs	r2, #12
 800c67a:	4393      	bics	r3, r2
 800c67c:	0019      	movs	r1, r3
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	68da      	ldr	r2, [r3, #12]
 800c682:	4b2a      	ldr	r3, [pc, #168]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c684:	430a      	orrs	r2, r1
 800c686:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c688:	687b      	ldr	r3, [r7, #4]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	2204      	movs	r2, #4
 800c68e:	4013      	ands	r3, r2
 800c690:	d009      	beq.n	800c6a6 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c692:	4b26      	ldr	r3, [pc, #152]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c694:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c696:	4a2c      	ldr	r2, [pc, #176]	@ (800c748 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800c698:	4013      	ands	r3, r2
 800c69a:	0019      	movs	r1, r3
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	691a      	ldr	r2, [r3, #16]
 800c6a0:	4b22      	ldr	r3, [pc, #136]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c6a2:	430a      	orrs	r2, r1
 800c6a4:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2208      	movs	r2, #8
 800c6ac:	4013      	ands	r3, r2
 800c6ae:	d009      	beq.n	800c6c4 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800c6b0:	4b1e      	ldr	r3, [pc, #120]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c6b2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6b4:	4a25      	ldr	r2, [pc, #148]	@ (800c74c <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800c6b6:	4013      	ands	r3, r2
 800c6b8:	0019      	movs	r1, r3
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	695a      	ldr	r2, [r3, #20]
 800c6be:	4b1b      	ldr	r3, [pc, #108]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c6c0:	430a      	orrs	r2, r1
 800c6c2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681a      	ldr	r2, [r3, #0]
 800c6c8:	2380      	movs	r3, #128	@ 0x80
 800c6ca:	005b      	lsls	r3, r3, #1
 800c6cc:	4013      	ands	r3, r2
 800c6ce:	d009      	beq.n	800c6e4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800c6d0:	4b16      	ldr	r3, [pc, #88]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c6d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6d4:	4a17      	ldr	r2, [pc, #92]	@ (800c734 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800c6d6:	4013      	ands	r3, r2
 800c6d8:	0019      	movs	r1, r3
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	699a      	ldr	r2, [r3, #24]
 800c6de:	4b13      	ldr	r3, [pc, #76]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c6e0:	430a      	orrs	r2, r1
 800c6e2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	2240      	movs	r2, #64	@ 0x40
 800c6ea:	4013      	ands	r3, r2
 800c6ec:	d009      	beq.n	800c702 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c6ee:	4b0f      	ldr	r3, [pc, #60]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c6f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c6f2:	4a17      	ldr	r2, [pc, #92]	@ (800c750 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800c6f4:	4013      	ands	r3, r2
 800c6f6:	0019      	movs	r1, r3
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	6a1a      	ldr	r2, [r3, #32]
 800c6fc:	4b0b      	ldr	r3, [pc, #44]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c6fe:	430a      	orrs	r2, r1
 800c700:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	2280      	movs	r2, #128	@ 0x80
 800c708:	4013      	ands	r3, r2
 800c70a:	d009      	beq.n	800c720 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800c70c:	4b07      	ldr	r3, [pc, #28]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c70e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800c710:	4a10      	ldr	r2, [pc, #64]	@ (800c754 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800c712:	4013      	ands	r3, r2
 800c714:	0019      	movs	r1, r3
 800c716:	687b      	ldr	r3, [r7, #4]
 800c718:	69da      	ldr	r2, [r3, #28]
 800c71a:	4b04      	ldr	r3, [pc, #16]	@ (800c72c <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800c71c:	430a      	orrs	r2, r1
 800c71e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800c720:	2300      	movs	r3, #0
}
 800c722:	0018      	movs	r0, r3
 800c724:	46bd      	mov	sp, r7
 800c726:	b006      	add	sp, #24
 800c728:	bd80      	pop	{r7, pc}
 800c72a:	46c0      	nop			@ (mov r8, r8)
 800c72c:	40021000 	.word	0x40021000
 800c730:	40007000 	.word	0x40007000
 800c734:	fffcffff 	.word	0xfffcffff
 800c738:	fff7ffff 	.word	0xfff7ffff
 800c73c:	00001388 	.word	0x00001388
 800c740:	ffcfffff 	.word	0xffcfffff
 800c744:	efffffff 	.word	0xefffffff
 800c748:	fffff3ff 	.word	0xfffff3ff
 800c74c:	ffffcfff 	.word	0xffffcfff
 800c750:	fbffffff 	.word	0xfbffffff
 800c754:	fff3ffff 	.word	0xfff3ffff

0800c758 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800c758:	b580      	push	{r7, lr}
 800c75a:	b082      	sub	sp, #8
 800c75c:	af00      	add	r7, sp, #0
 800c75e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d101      	bne.n	800c76a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800c766:	2301      	movs	r3, #1
 800c768:	e032      	b.n	800c7d0 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2239      	movs	r2, #57	@ 0x39
 800c76e:	5c9b      	ldrb	r3, [r3, r2]
 800c770:	b2db      	uxtb	r3, r3
 800c772:	2b00      	cmp	r3, #0
 800c774:	d107      	bne.n	800c786 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c776:	687b      	ldr	r3, [r7, #4]
 800c778:	2238      	movs	r2, #56	@ 0x38
 800c77a:	2100      	movs	r1, #0
 800c77c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	0018      	movs	r0, r3
 800c782:	f7fa ff5d 	bl	8007640 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	2239      	movs	r2, #57	@ 0x39
 800c78a:	2102      	movs	r1, #2
 800c78c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c78e:	687b      	ldr	r3, [r7, #4]
 800c790:	681a      	ldr	r2, [r3, #0]
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	3304      	adds	r3, #4
 800c796:	0019      	movs	r1, r3
 800c798:	0010      	movs	r0, r2
 800c79a:	f000 f975 	bl	800ca88 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c79e:	687b      	ldr	r3, [r7, #4]
 800c7a0:	223e      	movs	r2, #62	@ 0x3e
 800c7a2:	2101      	movs	r1, #1
 800c7a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	223a      	movs	r2, #58	@ 0x3a
 800c7aa:	2101      	movs	r1, #1
 800c7ac:	5499      	strb	r1, [r3, r2]
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	223b      	movs	r2, #59	@ 0x3b
 800c7b2:	2101      	movs	r1, #1
 800c7b4:	5499      	strb	r1, [r3, r2]
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	223c      	movs	r2, #60	@ 0x3c
 800c7ba:	2101      	movs	r1, #1
 800c7bc:	5499      	strb	r1, [r3, r2]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	223d      	movs	r2, #61	@ 0x3d
 800c7c2:	2101      	movs	r1, #1
 800c7c4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	2239      	movs	r2, #57	@ 0x39
 800c7ca:	2101      	movs	r1, #1
 800c7cc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c7ce:	2300      	movs	r3, #0
}
 800c7d0:	0018      	movs	r0, r3
 800c7d2:	46bd      	mov	sp, r7
 800c7d4:	b002      	add	sp, #8
 800c7d6:	bd80      	pop	{r7, pc}

0800c7d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800c7d8:	b580      	push	{r7, lr}
 800c7da:	b084      	sub	sp, #16
 800c7dc:	af00      	add	r7, sp, #0
 800c7de:	6078      	str	r0, [r7, #4]
 800c7e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d108      	bne.n	800c7fa <HAL_TIM_PWM_Start+0x22>
 800c7e8:	687b      	ldr	r3, [r7, #4]
 800c7ea:	223a      	movs	r2, #58	@ 0x3a
 800c7ec:	5c9b      	ldrb	r3, [r3, r2]
 800c7ee:	b2db      	uxtb	r3, r3
 800c7f0:	3b01      	subs	r3, #1
 800c7f2:	1e5a      	subs	r2, r3, #1
 800c7f4:	4193      	sbcs	r3, r2
 800c7f6:	b2db      	uxtb	r3, r3
 800c7f8:	e01f      	b.n	800c83a <HAL_TIM_PWM_Start+0x62>
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	2b04      	cmp	r3, #4
 800c7fe:	d108      	bne.n	800c812 <HAL_TIM_PWM_Start+0x3a>
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	223b      	movs	r2, #59	@ 0x3b
 800c804:	5c9b      	ldrb	r3, [r3, r2]
 800c806:	b2db      	uxtb	r3, r3
 800c808:	3b01      	subs	r3, #1
 800c80a:	1e5a      	subs	r2, r3, #1
 800c80c:	4193      	sbcs	r3, r2
 800c80e:	b2db      	uxtb	r3, r3
 800c810:	e013      	b.n	800c83a <HAL_TIM_PWM_Start+0x62>
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	2b08      	cmp	r3, #8
 800c816:	d108      	bne.n	800c82a <HAL_TIM_PWM_Start+0x52>
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	223c      	movs	r2, #60	@ 0x3c
 800c81c:	5c9b      	ldrb	r3, [r3, r2]
 800c81e:	b2db      	uxtb	r3, r3
 800c820:	3b01      	subs	r3, #1
 800c822:	1e5a      	subs	r2, r3, #1
 800c824:	4193      	sbcs	r3, r2
 800c826:	b2db      	uxtb	r3, r3
 800c828:	e007      	b.n	800c83a <HAL_TIM_PWM_Start+0x62>
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	223d      	movs	r2, #61	@ 0x3d
 800c82e:	5c9b      	ldrb	r3, [r3, r2]
 800c830:	b2db      	uxtb	r3, r3
 800c832:	3b01      	subs	r3, #1
 800c834:	1e5a      	subs	r2, r3, #1
 800c836:	4193      	sbcs	r3, r2
 800c838:	b2db      	uxtb	r3, r3
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d001      	beq.n	800c842 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800c83e:	2301      	movs	r3, #1
 800c840:	e052      	b.n	800c8e8 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	2b00      	cmp	r3, #0
 800c846:	d104      	bne.n	800c852 <HAL_TIM_PWM_Start+0x7a>
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	223a      	movs	r2, #58	@ 0x3a
 800c84c:	2102      	movs	r1, #2
 800c84e:	5499      	strb	r1, [r3, r2]
 800c850:	e013      	b.n	800c87a <HAL_TIM_PWM_Start+0xa2>
 800c852:	683b      	ldr	r3, [r7, #0]
 800c854:	2b04      	cmp	r3, #4
 800c856:	d104      	bne.n	800c862 <HAL_TIM_PWM_Start+0x8a>
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	223b      	movs	r2, #59	@ 0x3b
 800c85c:	2102      	movs	r1, #2
 800c85e:	5499      	strb	r1, [r3, r2]
 800c860:	e00b      	b.n	800c87a <HAL_TIM_PWM_Start+0xa2>
 800c862:	683b      	ldr	r3, [r7, #0]
 800c864:	2b08      	cmp	r3, #8
 800c866:	d104      	bne.n	800c872 <HAL_TIM_PWM_Start+0x9a>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	223c      	movs	r2, #60	@ 0x3c
 800c86c:	2102      	movs	r1, #2
 800c86e:	5499      	strb	r1, [r3, r2]
 800c870:	e003      	b.n	800c87a <HAL_TIM_PWM_Start+0xa2>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	223d      	movs	r2, #61	@ 0x3d
 800c876:	2102      	movs	r1, #2
 800c878:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	6839      	ldr	r1, [r7, #0]
 800c880:	2201      	movs	r2, #1
 800c882:	0018      	movs	r0, r3
 800c884:	f000 fa62 	bl	800cd4c <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	2380      	movs	r3, #128	@ 0x80
 800c88e:	05db      	lsls	r3, r3, #23
 800c890:	429a      	cmp	r2, r3
 800c892:	d00e      	beq.n	800c8b2 <HAL_TIM_PWM_Start+0xda>
 800c894:	687b      	ldr	r3, [r7, #4]
 800c896:	681b      	ldr	r3, [r3, #0]
 800c898:	4a15      	ldr	r2, [pc, #84]	@ (800c8f0 <HAL_TIM_PWM_Start+0x118>)
 800c89a:	4293      	cmp	r3, r2
 800c89c:	d009      	beq.n	800c8b2 <HAL_TIM_PWM_Start+0xda>
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	4a14      	ldr	r2, [pc, #80]	@ (800c8f4 <HAL_TIM_PWM_Start+0x11c>)
 800c8a4:	4293      	cmp	r3, r2
 800c8a6:	d004      	beq.n	800c8b2 <HAL_TIM_PWM_Start+0xda>
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	4a12      	ldr	r2, [pc, #72]	@ (800c8f8 <HAL_TIM_PWM_Start+0x120>)
 800c8ae:	4293      	cmp	r3, r2
 800c8b0:	d111      	bne.n	800c8d6 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	689b      	ldr	r3, [r3, #8]
 800c8b8:	2207      	movs	r2, #7
 800c8ba:	4013      	ands	r3, r2
 800c8bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8be:	68fb      	ldr	r3, [r7, #12]
 800c8c0:	2b06      	cmp	r3, #6
 800c8c2:	d010      	beq.n	800c8e6 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	681a      	ldr	r2, [r3, #0]
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	2101      	movs	r1, #1
 800c8d0:	430a      	orrs	r2, r1
 800c8d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8d4:	e007      	b.n	800c8e6 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800c8d6:	687b      	ldr	r3, [r7, #4]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	681a      	ldr	r2, [r3, #0]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	2101      	movs	r1, #1
 800c8e2:	430a      	orrs	r2, r1
 800c8e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c8e6:	2300      	movs	r3, #0
}
 800c8e8:	0018      	movs	r0, r3
 800c8ea:	46bd      	mov	sp, r7
 800c8ec:	b004      	add	sp, #16
 800c8ee:	bd80      	pop	{r7, pc}
 800c8f0:	40000400 	.word	0x40000400
 800c8f4:	40010800 	.word	0x40010800
 800c8f8:	40011400 	.word	0x40011400

0800c8fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800c8fc:	b580      	push	{r7, lr}
 800c8fe:	b086      	sub	sp, #24
 800c900:	af00      	add	r7, sp, #0
 800c902:	60f8      	str	r0, [r7, #12]
 800c904:	60b9      	str	r1, [r7, #8]
 800c906:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c908:	2317      	movs	r3, #23
 800c90a:	18fb      	adds	r3, r7, r3
 800c90c:	2200      	movs	r2, #0
 800c90e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	2238      	movs	r2, #56	@ 0x38
 800c914:	5c9b      	ldrb	r3, [r3, r2]
 800c916:	2b01      	cmp	r3, #1
 800c918:	d101      	bne.n	800c91e <HAL_TIM_PWM_ConfigChannel+0x22>
 800c91a:	2302      	movs	r3, #2
 800c91c:	e0ad      	b.n	800ca7a <HAL_TIM_PWM_ConfigChannel+0x17e>
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	2238      	movs	r2, #56	@ 0x38
 800c922:	2101      	movs	r1, #1
 800c924:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b0c      	cmp	r3, #12
 800c92a:	d100      	bne.n	800c92e <HAL_TIM_PWM_ConfigChannel+0x32>
 800c92c:	e076      	b.n	800ca1c <HAL_TIM_PWM_ConfigChannel+0x120>
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2b0c      	cmp	r3, #12
 800c932:	d900      	bls.n	800c936 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800c934:	e095      	b.n	800ca62 <HAL_TIM_PWM_ConfigChannel+0x166>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	2b08      	cmp	r3, #8
 800c93a:	d04e      	beq.n	800c9da <HAL_TIM_PWM_ConfigChannel+0xde>
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b08      	cmp	r3, #8
 800c940:	d900      	bls.n	800c944 <HAL_TIM_PWM_ConfigChannel+0x48>
 800c942:	e08e      	b.n	800ca62 <HAL_TIM_PWM_ConfigChannel+0x166>
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d003      	beq.n	800c952 <HAL_TIM_PWM_ConfigChannel+0x56>
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	2b04      	cmp	r3, #4
 800c94e:	d021      	beq.n	800c994 <HAL_TIM_PWM_ConfigChannel+0x98>
 800c950:	e087      	b.n	800ca62 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800c952:	68fb      	ldr	r3, [r7, #12]
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	68ba      	ldr	r2, [r7, #8]
 800c958:	0011      	movs	r1, r2
 800c95a:	0018      	movs	r0, r3
 800c95c:	f000 f8f2 	bl	800cb44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800c960:	68fb      	ldr	r3, [r7, #12]
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	699a      	ldr	r2, [r3, #24]
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	681b      	ldr	r3, [r3, #0]
 800c96a:	2108      	movs	r1, #8
 800c96c:	430a      	orrs	r2, r1
 800c96e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800c970:	68fb      	ldr	r3, [r7, #12]
 800c972:	681b      	ldr	r3, [r3, #0]
 800c974:	699a      	ldr	r2, [r3, #24]
 800c976:	68fb      	ldr	r3, [r7, #12]
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	2104      	movs	r1, #4
 800c97c:	438a      	bics	r2, r1
 800c97e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	6999      	ldr	r1, [r3, #24]
 800c986:	68bb      	ldr	r3, [r7, #8]
 800c988:	68da      	ldr	r2, [r3, #12]
 800c98a:	68fb      	ldr	r3, [r7, #12]
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	430a      	orrs	r2, r1
 800c990:	619a      	str	r2, [r3, #24]
      break;
 800c992:	e06b      	b.n	800ca6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	68ba      	ldr	r2, [r7, #8]
 800c99a:	0011      	movs	r1, r2
 800c99c:	0018      	movs	r0, r3
 800c99e:	f000 f90d 	bl	800cbbc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	699a      	ldr	r2, [r3, #24]
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	681b      	ldr	r3, [r3, #0]
 800c9ac:	2180      	movs	r1, #128	@ 0x80
 800c9ae:	0109      	lsls	r1, r1, #4
 800c9b0:	430a      	orrs	r2, r1
 800c9b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	681b      	ldr	r3, [r3, #0]
 800c9b8:	699a      	ldr	r2, [r3, #24]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	4931      	ldr	r1, [pc, #196]	@ (800ca84 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800c9c0:	400a      	ands	r2, r1
 800c9c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800c9c4:	68fb      	ldr	r3, [r7, #12]
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	6999      	ldr	r1, [r3, #24]
 800c9ca:	68bb      	ldr	r3, [r7, #8]
 800c9cc:	68db      	ldr	r3, [r3, #12]
 800c9ce:	021a      	lsls	r2, r3, #8
 800c9d0:	68fb      	ldr	r3, [r7, #12]
 800c9d2:	681b      	ldr	r3, [r3, #0]
 800c9d4:	430a      	orrs	r2, r1
 800c9d6:	619a      	str	r2, [r3, #24]
      break;
 800c9d8:	e048      	b.n	800ca6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800c9da:	68fb      	ldr	r3, [r7, #12]
 800c9dc:	681b      	ldr	r3, [r3, #0]
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	0011      	movs	r1, r2
 800c9e2:	0018      	movs	r0, r3
 800c9e4:	f000 f92c 	bl	800cc40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	69da      	ldr	r2, [r3, #28]
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	2108      	movs	r1, #8
 800c9f4:	430a      	orrs	r2, r1
 800c9f6:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800c9f8:	68fb      	ldr	r3, [r7, #12]
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	69da      	ldr	r2, [r3, #28]
 800c9fe:	68fb      	ldr	r3, [r7, #12]
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	2104      	movs	r1, #4
 800ca04:	438a      	bics	r2, r1
 800ca06:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	69d9      	ldr	r1, [r3, #28]
 800ca0e:	68bb      	ldr	r3, [r7, #8]
 800ca10:	68da      	ldr	r2, [r3, #12]
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	681b      	ldr	r3, [r3, #0]
 800ca16:	430a      	orrs	r2, r1
 800ca18:	61da      	str	r2, [r3, #28]
      break;
 800ca1a:	e027      	b.n	800ca6c <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800ca1c:	68fb      	ldr	r3, [r7, #12]
 800ca1e:	681b      	ldr	r3, [r3, #0]
 800ca20:	68ba      	ldr	r2, [r7, #8]
 800ca22:	0011      	movs	r1, r2
 800ca24:	0018      	movs	r0, r3
 800ca26:	f000 f94b 	bl	800ccc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	681b      	ldr	r3, [r3, #0]
 800ca2e:	69da      	ldr	r2, [r3, #28]
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	2180      	movs	r1, #128	@ 0x80
 800ca36:	0109      	lsls	r1, r1, #4
 800ca38:	430a      	orrs	r2, r1
 800ca3a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	69da      	ldr	r2, [r3, #28]
 800ca42:	68fb      	ldr	r3, [r7, #12]
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	490f      	ldr	r1, [pc, #60]	@ (800ca84 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800ca48:	400a      	ands	r2, r1
 800ca4a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800ca4c:	68fb      	ldr	r3, [r7, #12]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	69d9      	ldr	r1, [r3, #28]
 800ca52:	68bb      	ldr	r3, [r7, #8]
 800ca54:	68db      	ldr	r3, [r3, #12]
 800ca56:	021a      	lsls	r2, r3, #8
 800ca58:	68fb      	ldr	r3, [r7, #12]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	430a      	orrs	r2, r1
 800ca5e:	61da      	str	r2, [r3, #28]
      break;
 800ca60:	e004      	b.n	800ca6c <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800ca62:	2317      	movs	r3, #23
 800ca64:	18fb      	adds	r3, r7, r3
 800ca66:	2201      	movs	r2, #1
 800ca68:	701a      	strb	r2, [r3, #0]
      break;
 800ca6a:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800ca6c:	68fb      	ldr	r3, [r7, #12]
 800ca6e:	2238      	movs	r2, #56	@ 0x38
 800ca70:	2100      	movs	r1, #0
 800ca72:	5499      	strb	r1, [r3, r2]

  return status;
 800ca74:	2317      	movs	r3, #23
 800ca76:	18fb      	adds	r3, r7, r3
 800ca78:	781b      	ldrb	r3, [r3, #0]
}
 800ca7a:	0018      	movs	r0, r3
 800ca7c:	46bd      	mov	sp, r7
 800ca7e:	b006      	add	sp, #24
 800ca80:	bd80      	pop	{r7, pc}
 800ca82:	46c0      	nop			@ (mov r8, r8)
 800ca84:	fffffbff 	.word	0xfffffbff

0800ca88 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	b084      	sub	sp, #16
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	6078      	str	r0, [r7, #4]
 800ca90:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ca98:	687a      	ldr	r2, [r7, #4]
 800ca9a:	2380      	movs	r3, #128	@ 0x80
 800ca9c:	05db      	lsls	r3, r3, #23
 800ca9e:	429a      	cmp	r2, r3
 800caa0:	d00b      	beq.n	800caba <TIM_Base_SetConfig+0x32>
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	4a23      	ldr	r2, [pc, #140]	@ (800cb34 <TIM_Base_SetConfig+0xac>)
 800caa6:	4293      	cmp	r3, r2
 800caa8:	d007      	beq.n	800caba <TIM_Base_SetConfig+0x32>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	4a22      	ldr	r2, [pc, #136]	@ (800cb38 <TIM_Base_SetConfig+0xb0>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d003      	beq.n	800caba <TIM_Base_SetConfig+0x32>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	4a21      	ldr	r2, [pc, #132]	@ (800cb3c <TIM_Base_SetConfig+0xb4>)
 800cab6:	4293      	cmp	r3, r2
 800cab8:	d108      	bne.n	800cacc <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	2270      	movs	r2, #112	@ 0x70
 800cabe:	4393      	bics	r3, r2
 800cac0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	685b      	ldr	r3, [r3, #4]
 800cac6:	68fa      	ldr	r2, [r7, #12]
 800cac8:	4313      	orrs	r3, r2
 800caca:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cacc:	687a      	ldr	r2, [r7, #4]
 800cace:	2380      	movs	r3, #128	@ 0x80
 800cad0:	05db      	lsls	r3, r3, #23
 800cad2:	429a      	cmp	r2, r3
 800cad4:	d00b      	beq.n	800caee <TIM_Base_SetConfig+0x66>
 800cad6:	687b      	ldr	r3, [r7, #4]
 800cad8:	4a16      	ldr	r2, [pc, #88]	@ (800cb34 <TIM_Base_SetConfig+0xac>)
 800cada:	4293      	cmp	r3, r2
 800cadc:	d007      	beq.n	800caee <TIM_Base_SetConfig+0x66>
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	4a15      	ldr	r2, [pc, #84]	@ (800cb38 <TIM_Base_SetConfig+0xb0>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d003      	beq.n	800caee <TIM_Base_SetConfig+0x66>
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	4a14      	ldr	r2, [pc, #80]	@ (800cb3c <TIM_Base_SetConfig+0xb4>)
 800caea:	4293      	cmp	r3, r2
 800caec:	d108      	bne.n	800cb00 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	4a13      	ldr	r2, [pc, #76]	@ (800cb40 <TIM_Base_SetConfig+0xb8>)
 800caf2:	4013      	ands	r3, r2
 800caf4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	68fa      	ldr	r2, [r7, #12]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb00:	68fb      	ldr	r3, [r7, #12]
 800cb02:	2280      	movs	r2, #128	@ 0x80
 800cb04:	4393      	bics	r3, r2
 800cb06:	001a      	movs	r2, r3
 800cb08:	683b      	ldr	r3, [r7, #0]
 800cb0a:	691b      	ldr	r3, [r3, #16]
 800cb0c:	4313      	orrs	r3, r2
 800cb0e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	68fa      	ldr	r2, [r7, #12]
 800cb14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	689a      	ldr	r2, [r3, #8]
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb1e:	683b      	ldr	r3, [r7, #0]
 800cb20:	681a      	ldr	r2, [r3, #0]
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2201      	movs	r2, #1
 800cb2a:	615a      	str	r2, [r3, #20]
}
 800cb2c:	46c0      	nop			@ (mov r8, r8)
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	b004      	add	sp, #16
 800cb32:	bd80      	pop	{r7, pc}
 800cb34:	40000400 	.word	0x40000400
 800cb38:	40010800 	.word	0x40010800
 800cb3c:	40011400 	.word	0x40011400
 800cb40:	fffffcff 	.word	0xfffffcff

0800cb44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cb44:	b580      	push	{r7, lr}
 800cb46:	b086      	sub	sp, #24
 800cb48:	af00      	add	r7, sp, #0
 800cb4a:	6078      	str	r0, [r7, #4]
 800cb4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	6a1b      	ldr	r3, [r3, #32]
 800cb52:	2201      	movs	r2, #1
 800cb54:	4393      	bics	r3, r2
 800cb56:	001a      	movs	r2, r3
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	6a1b      	ldr	r3, [r3, #32]
 800cb60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	685b      	ldr	r3, [r3, #4]
 800cb66:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cb68:	687b      	ldr	r3, [r7, #4]
 800cb6a:	699b      	ldr	r3, [r3, #24]
 800cb6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	2270      	movs	r2, #112	@ 0x70
 800cb72:	4393      	bics	r3, r2
 800cb74:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800cb76:	68fb      	ldr	r3, [r7, #12]
 800cb78:	2203      	movs	r2, #3
 800cb7a:	4393      	bics	r3, r2
 800cb7c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cb7e:	683b      	ldr	r3, [r7, #0]
 800cb80:	681b      	ldr	r3, [r3, #0]
 800cb82:	68fa      	ldr	r2, [r7, #12]
 800cb84:	4313      	orrs	r3, r2
 800cb86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	2202      	movs	r2, #2
 800cb8c:	4393      	bics	r3, r2
 800cb8e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800cb90:	683b      	ldr	r3, [r7, #0]
 800cb92:	689b      	ldr	r3, [r3, #8]
 800cb94:	697a      	ldr	r2, [r7, #20]
 800cb96:	4313      	orrs	r3, r2
 800cb98:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cb9a:	687b      	ldr	r3, [r7, #4]
 800cb9c:	693a      	ldr	r2, [r7, #16]
 800cb9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cba0:	687b      	ldr	r3, [r7, #4]
 800cba2:	68fa      	ldr	r2, [r7, #12]
 800cba4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	685a      	ldr	r2, [r3, #4]
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	697a      	ldr	r2, [r7, #20]
 800cbb2:	621a      	str	r2, [r3, #32]
}
 800cbb4:	46c0      	nop			@ (mov r8, r8)
 800cbb6:	46bd      	mov	sp, r7
 800cbb8:	b006      	add	sp, #24
 800cbba:	bd80      	pop	{r7, pc}

0800cbbc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cbbc:	b580      	push	{r7, lr}
 800cbbe:	b086      	sub	sp, #24
 800cbc0:	af00      	add	r7, sp, #0
 800cbc2:	6078      	str	r0, [r7, #4]
 800cbc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	6a1b      	ldr	r3, [r3, #32]
 800cbca:	2210      	movs	r2, #16
 800cbcc:	4393      	bics	r3, r2
 800cbce:	001a      	movs	r2, r3
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	6a1b      	ldr	r3, [r3, #32]
 800cbd8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cbda:	687b      	ldr	r3, [r7, #4]
 800cbdc:	685b      	ldr	r3, [r3, #4]
 800cbde:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800cbe0:	687b      	ldr	r3, [r7, #4]
 800cbe2:	699b      	ldr	r3, [r3, #24]
 800cbe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	4a13      	ldr	r2, [pc, #76]	@ (800cc38 <TIM_OC2_SetConfig+0x7c>)
 800cbea:	4013      	ands	r3, r2
 800cbec:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	4a12      	ldr	r2, [pc, #72]	@ (800cc3c <TIM_OC2_SetConfig+0x80>)
 800cbf2:	4013      	ands	r3, r2
 800cbf4:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800cbf6:	683b      	ldr	r3, [r7, #0]
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	021b      	lsls	r3, r3, #8
 800cbfc:	68fa      	ldr	r2, [r7, #12]
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	2220      	movs	r2, #32
 800cc06:	4393      	bics	r3, r2
 800cc08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	689b      	ldr	r3, [r3, #8]
 800cc0e:	011b      	lsls	r3, r3, #4
 800cc10:	697a      	ldr	r2, [r7, #20]
 800cc12:	4313      	orrs	r3, r2
 800cc14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	693a      	ldr	r2, [r7, #16]
 800cc1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	68fa      	ldr	r2, [r7, #12]
 800cc20:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	685a      	ldr	r2, [r3, #4]
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	697a      	ldr	r2, [r7, #20]
 800cc2e:	621a      	str	r2, [r3, #32]
}
 800cc30:	46c0      	nop			@ (mov r8, r8)
 800cc32:	46bd      	mov	sp, r7
 800cc34:	b006      	add	sp, #24
 800cc36:	bd80      	pop	{r7, pc}
 800cc38:	ffff8fff 	.word	0xffff8fff
 800cc3c:	fffffcff 	.word	0xfffffcff

0800cc40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b086      	sub	sp, #24
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
 800cc48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800cc4a:	687b      	ldr	r3, [r7, #4]
 800cc4c:	6a1b      	ldr	r3, [r3, #32]
 800cc4e:	4a1a      	ldr	r2, [pc, #104]	@ (800ccb8 <TIM_OC3_SetConfig+0x78>)
 800cc50:	401a      	ands	r2, r3
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	6a1b      	ldr	r3, [r3, #32]
 800cc5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	69db      	ldr	r3, [r3, #28]
 800cc66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800cc68:	68fb      	ldr	r3, [r7, #12]
 800cc6a:	2270      	movs	r2, #112	@ 0x70
 800cc6c:	4393      	bics	r3, r2
 800cc6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	2203      	movs	r2, #3
 800cc74:	4393      	bics	r3, r2
 800cc76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800cc78:	683b      	ldr	r3, [r7, #0]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	68fa      	ldr	r2, [r7, #12]
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800cc82:	697b      	ldr	r3, [r7, #20]
 800cc84:	4a0d      	ldr	r2, [pc, #52]	@ (800ccbc <TIM_OC3_SetConfig+0x7c>)
 800cc86:	4013      	ands	r3, r2
 800cc88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800cc8a:	683b      	ldr	r3, [r7, #0]
 800cc8c:	689b      	ldr	r3, [r3, #8]
 800cc8e:	021b      	lsls	r3, r3, #8
 800cc90:	697a      	ldr	r2, [r7, #20]
 800cc92:	4313      	orrs	r3, r2
 800cc94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	693a      	ldr	r2, [r7, #16]
 800cc9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800cca2:	683b      	ldr	r3, [r7, #0]
 800cca4:	685a      	ldr	r2, [r3, #4]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ccaa:	687b      	ldr	r3, [r7, #4]
 800ccac:	697a      	ldr	r2, [r7, #20]
 800ccae:	621a      	str	r2, [r3, #32]
}
 800ccb0:	46c0      	nop			@ (mov r8, r8)
 800ccb2:	46bd      	mov	sp, r7
 800ccb4:	b006      	add	sp, #24
 800ccb6:	bd80      	pop	{r7, pc}
 800ccb8:	fffffeff 	.word	0xfffffeff
 800ccbc:	fffffdff 	.word	0xfffffdff

0800ccc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b086      	sub	sp, #24
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
 800ccc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	6a1b      	ldr	r3, [r3, #32]
 800ccce:	4a1b      	ldr	r2, [pc, #108]	@ (800cd3c <TIM_OC4_SetConfig+0x7c>)
 800ccd0:	401a      	ands	r2, r3
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800cce2:	687b      	ldr	r3, [r7, #4]
 800cce4:	69db      	ldr	r3, [r3, #28]
 800cce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	4a15      	ldr	r2, [pc, #84]	@ (800cd40 <TIM_OC4_SetConfig+0x80>)
 800ccec:	4013      	ands	r3, r2
 800ccee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	4a14      	ldr	r2, [pc, #80]	@ (800cd44 <TIM_OC4_SetConfig+0x84>)
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800ccf8:	683b      	ldr	r3, [r7, #0]
 800ccfa:	681b      	ldr	r3, [r3, #0]
 800ccfc:	021b      	lsls	r3, r3, #8
 800ccfe:	68fa      	ldr	r2, [r7, #12]
 800cd00:	4313      	orrs	r3, r2
 800cd02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800cd04:	697b      	ldr	r3, [r7, #20]
 800cd06:	4a10      	ldr	r2, [pc, #64]	@ (800cd48 <TIM_OC4_SetConfig+0x88>)
 800cd08:	4013      	ands	r3, r2
 800cd0a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800cd0c:	683b      	ldr	r3, [r7, #0]
 800cd0e:	689b      	ldr	r3, [r3, #8]
 800cd10:	031b      	lsls	r3, r3, #12
 800cd12:	697a      	ldr	r2, [r7, #20]
 800cd14:	4313      	orrs	r3, r2
 800cd16:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	693a      	ldr	r2, [r7, #16]
 800cd1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	68fa      	ldr	r2, [r7, #12]
 800cd22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800cd24:	683b      	ldr	r3, [r7, #0]
 800cd26:	685a      	ldr	r2, [r3, #4]
 800cd28:	687b      	ldr	r3, [r7, #4]
 800cd2a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	697a      	ldr	r2, [r7, #20]
 800cd30:	621a      	str	r2, [r3, #32]
}
 800cd32:	46c0      	nop			@ (mov r8, r8)
 800cd34:	46bd      	mov	sp, r7
 800cd36:	b006      	add	sp, #24
 800cd38:	bd80      	pop	{r7, pc}
 800cd3a:	46c0      	nop			@ (mov r8, r8)
 800cd3c:	ffffefff 	.word	0xffffefff
 800cd40:	ffff8fff 	.word	0xffff8fff
 800cd44:	fffffcff 	.word	0xfffffcff
 800cd48:	ffffdfff 	.word	0xffffdfff

0800cd4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800cd4c:	b580      	push	{r7, lr}
 800cd4e:	b086      	sub	sp, #24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800cd58:	68bb      	ldr	r3, [r7, #8]
 800cd5a:	221f      	movs	r2, #31
 800cd5c:	4013      	ands	r3, r2
 800cd5e:	2201      	movs	r2, #1
 800cd60:	409a      	lsls	r2, r3
 800cd62:	0013      	movs	r3, r2
 800cd64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800cd66:	68fb      	ldr	r3, [r7, #12]
 800cd68:	6a1b      	ldr	r3, [r3, #32]
 800cd6a:	697a      	ldr	r2, [r7, #20]
 800cd6c:	43d2      	mvns	r2, r2
 800cd6e:	401a      	ands	r2, r3
 800cd70:	68fb      	ldr	r3, [r7, #12]
 800cd72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800cd74:	68fb      	ldr	r3, [r7, #12]
 800cd76:	6a1a      	ldr	r2, [r3, #32]
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	211f      	movs	r1, #31
 800cd7c:	400b      	ands	r3, r1
 800cd7e:	6879      	ldr	r1, [r7, #4]
 800cd80:	4099      	lsls	r1, r3
 800cd82:	000b      	movs	r3, r1
 800cd84:	431a      	orrs	r2, r3
 800cd86:	68fb      	ldr	r3, [r7, #12]
 800cd88:	621a      	str	r2, [r3, #32]
}
 800cd8a:	46c0      	nop			@ (mov r8, r8)
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	b006      	add	sp, #24
 800cd90:	bd80      	pop	{r7, pc}
	...

0800cd94 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800cd94:	b580      	push	{r7, lr}
 800cd96:	b084      	sub	sp, #16
 800cd98:	af00      	add	r7, sp, #0
 800cd9a:	6078      	str	r0, [r7, #4]
 800cd9c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2238      	movs	r2, #56	@ 0x38
 800cda2:	5c9b      	ldrb	r3, [r3, r2]
 800cda4:	2b01      	cmp	r3, #1
 800cda6:	d101      	bne.n	800cdac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800cda8:	2302      	movs	r3, #2
 800cdaa:	e047      	b.n	800ce3c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	2238      	movs	r2, #56	@ 0x38
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	2239      	movs	r2, #57	@ 0x39
 800cdb8:	2102      	movs	r1, #2
 800cdba:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	681b      	ldr	r3, [r3, #0]
 800cdc0:	685b      	ldr	r3, [r3, #4]
 800cdc2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	689b      	ldr	r3, [r3, #8]
 800cdca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2270      	movs	r2, #112	@ 0x70
 800cdd0:	4393      	bics	r3, r2
 800cdd2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800cdd4:	683b      	ldr	r3, [r7, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68fa      	ldr	r2, [r7, #12]
 800cdda:	4313      	orrs	r3, r2
 800cddc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	68fa      	ldr	r2, [r7, #12]
 800cde4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	681a      	ldr	r2, [r3, #0]
 800cdea:	2380      	movs	r3, #128	@ 0x80
 800cdec:	05db      	lsls	r3, r3, #23
 800cdee:	429a      	cmp	r2, r3
 800cdf0:	d00e      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800cdf2:	687b      	ldr	r3, [r7, #4]
 800cdf4:	681b      	ldr	r3, [r3, #0]
 800cdf6:	4a13      	ldr	r2, [pc, #76]	@ (800ce44 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d009      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4a11      	ldr	r2, [pc, #68]	@ (800ce48 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800ce02:	4293      	cmp	r3, r2
 800ce04:	d004      	beq.n	800ce10 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	4a10      	ldr	r2, [pc, #64]	@ (800ce4c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800ce0c:	4293      	cmp	r3, r2
 800ce0e:	d10c      	bne.n	800ce2a <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800ce10:	68bb      	ldr	r3, [r7, #8]
 800ce12:	2280      	movs	r2, #128	@ 0x80
 800ce14:	4393      	bics	r3, r2
 800ce16:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	685b      	ldr	r3, [r3, #4]
 800ce1c:	68ba      	ldr	r2, [r7, #8]
 800ce1e:	4313      	orrs	r3, r2
 800ce20:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	681b      	ldr	r3, [r3, #0]
 800ce26:	68ba      	ldr	r2, [r7, #8]
 800ce28:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	2239      	movs	r2, #57	@ 0x39
 800ce2e:	2101      	movs	r1, #1
 800ce30:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2238      	movs	r2, #56	@ 0x38
 800ce36:	2100      	movs	r1, #0
 800ce38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ce3a:	2300      	movs	r3, #0
}
 800ce3c:	0018      	movs	r0, r3
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	b004      	add	sp, #16
 800ce42:	bd80      	pop	{r7, pc}
 800ce44:	40000400 	.word	0x40000400
 800ce48:	40010800 	.word	0x40010800
 800ce4c:	40011400 	.word	0x40011400

0800ce50 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800ce50:	b580      	push	{r7, lr}
 800ce52:	b082      	sub	sp, #8
 800ce54:	af00      	add	r7, sp, #0
 800ce56:	6078      	str	r0, [r7, #4]
 800ce58:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800ce5a:	687b      	ldr	r3, [r7, #4]
 800ce5c:	2238      	movs	r2, #56	@ 0x38
 800ce5e:	5c9b      	ldrb	r3, [r3, r2]
 800ce60:	2b01      	cmp	r3, #1
 800ce62:	d101      	bne.n	800ce68 <HAL_TIMEx_RemapConfig+0x18>
 800ce64:	2302      	movs	r3, #2
 800ce66:	e00c      	b.n	800ce82 <HAL_TIMEx_RemapConfig+0x32>
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	2238      	movs	r2, #56	@ 0x38
 800ce6c:	2101      	movs	r1, #1
 800ce6e:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	681b      	ldr	r3, [r3, #0]
 800ce74:	683a      	ldr	r2, [r7, #0]
 800ce76:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2238      	movs	r2, #56	@ 0x38
 800ce7c:	2100      	movs	r1, #0
 800ce7e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800ce80:	2300      	movs	r3, #0
}
 800ce82:	0018      	movs	r0, r3
 800ce84:	46bd      	mov	sp, r7
 800ce86:	b002      	add	sp, #8
 800ce88:	bd80      	pop	{r7, pc}
	...

0800ce8c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ce8c:	b580      	push	{r7, lr}
 800ce8e:	b082      	sub	sp, #8
 800ce90:	af00      	add	r7, sp, #0
 800ce92:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	2b00      	cmp	r3, #0
 800ce98:	d101      	bne.n	800ce9e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	e053      	b.n	800cf46 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d116      	bne.n	800ced4 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	2278      	movs	r2, #120	@ 0x78
 800ceaa:	2100      	movs	r1, #0
 800ceac:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	0018      	movs	r0, r3
 800ceb2:	f000 fd07 	bl	800d8c4 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800ceb6:	687b      	ldr	r3, [r7, #4]
 800ceb8:	22b0      	movs	r2, #176	@ 0xb0
 800ceba:	589b      	ldr	r3, [r3, r2]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d103      	bne.n	800cec8 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	21b0      	movs	r1, #176	@ 0xb0
 800cec4:	4a22      	ldr	r2, [pc, #136]	@ (800cf50 <HAL_UART_Init+0xc4>)
 800cec6:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	22b0      	movs	r2, #176	@ 0xb0
 800cecc:	589b      	ldr	r3, [r3, r2]
 800cece:	687a      	ldr	r2, [r7, #4]
 800ced0:	0010      	movs	r0, r2
 800ced2:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	2224      	movs	r2, #36	@ 0x24
 800ced8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800ceda:	687b      	ldr	r3, [r7, #4]
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	681a      	ldr	r2, [r3, #0]
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	681b      	ldr	r3, [r3, #0]
 800cee4:	2101      	movs	r1, #1
 800cee6:	438a      	bics	r2, r1
 800cee8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	0018      	movs	r0, r3
 800ceee:	f000 fd2d 	bl	800d94c <UART_SetConfig>
 800cef2:	0003      	movs	r3, r0
 800cef4:	2b01      	cmp	r3, #1
 800cef6:	d101      	bne.n	800cefc <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800cef8:	2301      	movs	r3, #1
 800cefa:	e024      	b.n	800cf46 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d003      	beq.n	800cf0c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	0018      	movs	r0, r3
 800cf08:	f000 ffbe 	bl	800de88 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800cf0c:	687b      	ldr	r3, [r7, #4]
 800cf0e:	681b      	ldr	r3, [r3, #0]
 800cf10:	685a      	ldr	r2, [r3, #4]
 800cf12:	687b      	ldr	r3, [r7, #4]
 800cf14:	681b      	ldr	r3, [r3, #0]
 800cf16:	490f      	ldr	r1, [pc, #60]	@ (800cf54 <HAL_UART_Init+0xc8>)
 800cf18:	400a      	ands	r2, r1
 800cf1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800cf1c:	687b      	ldr	r3, [r7, #4]
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	689a      	ldr	r2, [r3, #8]
 800cf22:	687b      	ldr	r3, [r7, #4]
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	212a      	movs	r1, #42	@ 0x2a
 800cf28:	438a      	bics	r2, r1
 800cf2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800cf2c:	687b      	ldr	r3, [r7, #4]
 800cf2e:	681b      	ldr	r3, [r3, #0]
 800cf30:	681a      	ldr	r2, [r3, #0]
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2101      	movs	r1, #1
 800cf38:	430a      	orrs	r2, r1
 800cf3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	0018      	movs	r0, r3
 800cf40:	f001 f856 	bl	800dff0 <UART_CheckIdleState>
 800cf44:	0003      	movs	r3, r0
}
 800cf46:	0018      	movs	r0, r3
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	b002      	add	sp, #8
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	46c0      	nop			@ (mov r8, r8)
 800cf50:	08007821 	.word	0x08007821
 800cf54:	ffffb7ff 	.word	0xffffb7ff

0800cf58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800cf58:	b580      	push	{r7, lr}
 800cf5a:	b08a      	sub	sp, #40	@ 0x28
 800cf5c:	af02      	add	r7, sp, #8
 800cf5e:	60f8      	str	r0, [r7, #12]
 800cf60:	60b9      	str	r1, [r7, #8]
 800cf62:	603b      	str	r3, [r7, #0]
 800cf64:	1dbb      	adds	r3, r7, #6
 800cf66:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800cf68:	68fb      	ldr	r3, [r7, #12]
 800cf6a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800cf6c:	2b20      	cmp	r3, #32
 800cf6e:	d000      	beq.n	800cf72 <HAL_UART_Transmit+0x1a>
 800cf70:	e08c      	b.n	800d08c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800cf72:	68bb      	ldr	r3, [r7, #8]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d003      	beq.n	800cf80 <HAL_UART_Transmit+0x28>
 800cf78:	1dbb      	adds	r3, r7, #6
 800cf7a:	881b      	ldrh	r3, [r3, #0]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d101      	bne.n	800cf84 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800cf80:	2301      	movs	r3, #1
 800cf82:	e084      	b.n	800d08e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	689a      	ldr	r2, [r3, #8]
 800cf88:	2380      	movs	r3, #128	@ 0x80
 800cf8a:	015b      	lsls	r3, r3, #5
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d109      	bne.n	800cfa4 <HAL_UART_Transmit+0x4c>
 800cf90:	68fb      	ldr	r3, [r7, #12]
 800cf92:	691b      	ldr	r3, [r3, #16]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d105      	bne.n	800cfa4 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800cf98:	68bb      	ldr	r3, [r7, #8]
 800cf9a:	2201      	movs	r2, #1
 800cf9c:	4013      	ands	r3, r2
 800cf9e:	d001      	beq.n	800cfa4 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800cfa0:	2301      	movs	r3, #1
 800cfa2:	e074      	b.n	800d08e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cfa4:	68fb      	ldr	r3, [r7, #12]
 800cfa6:	2284      	movs	r2, #132	@ 0x84
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	2221      	movs	r2, #33	@ 0x21
 800cfb0:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800cfb2:	f7fb f9bf 	bl	8008334 <HAL_GetTick>
 800cfb6:	0003      	movs	r3, r0
 800cfb8:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	1dba      	adds	r2, r7, #6
 800cfbe:	2150      	movs	r1, #80	@ 0x50
 800cfc0:	8812      	ldrh	r2, [r2, #0]
 800cfc2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800cfc4:	68fb      	ldr	r3, [r7, #12]
 800cfc6:	1dba      	adds	r2, r7, #6
 800cfc8:	2152      	movs	r1, #82	@ 0x52
 800cfca:	8812      	ldrh	r2, [r2, #0]
 800cfcc:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800cfce:	68fb      	ldr	r3, [r7, #12]
 800cfd0:	689a      	ldr	r2, [r3, #8]
 800cfd2:	2380      	movs	r3, #128	@ 0x80
 800cfd4:	015b      	lsls	r3, r3, #5
 800cfd6:	429a      	cmp	r2, r3
 800cfd8:	d108      	bne.n	800cfec <HAL_UART_Transmit+0x94>
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	691b      	ldr	r3, [r3, #16]
 800cfde:	2b00      	cmp	r3, #0
 800cfe0:	d104      	bne.n	800cfec <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800cfe2:	2300      	movs	r3, #0
 800cfe4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800cfe6:	68bb      	ldr	r3, [r7, #8]
 800cfe8:	61bb      	str	r3, [r7, #24]
 800cfea:	e003      	b.n	800cff4 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800cfec:	68bb      	ldr	r3, [r7, #8]
 800cfee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800cff0:	2300      	movs	r3, #0
 800cff2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800cff4:	e02f      	b.n	800d056 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800cff6:	697a      	ldr	r2, [r7, #20]
 800cff8:	68f8      	ldr	r0, [r7, #12]
 800cffa:	683b      	ldr	r3, [r7, #0]
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	0013      	movs	r3, r2
 800d000:	2200      	movs	r2, #0
 800d002:	2180      	movs	r1, #128	@ 0x80
 800d004:	f001 f89c 	bl	800e140 <UART_WaitOnFlagUntilTimeout>
 800d008:	1e03      	subs	r3, r0, #0
 800d00a:	d004      	beq.n	800d016 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800d00c:	68fb      	ldr	r3, [r7, #12]
 800d00e:	2220      	movs	r2, #32
 800d010:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800d012:	2303      	movs	r3, #3
 800d014:	e03b      	b.n	800d08e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800d016:	69fb      	ldr	r3, [r7, #28]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d10b      	bne.n	800d034 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d01c:	69bb      	ldr	r3, [r7, #24]
 800d01e:	881b      	ldrh	r3, [r3, #0]
 800d020:	001a      	movs	r2, r3
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	681b      	ldr	r3, [r3, #0]
 800d026:	05d2      	lsls	r2, r2, #23
 800d028:	0dd2      	lsrs	r2, r2, #23
 800d02a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800d02c:	69bb      	ldr	r3, [r7, #24]
 800d02e:	3302      	adds	r3, #2
 800d030:	61bb      	str	r3, [r7, #24]
 800d032:	e007      	b.n	800d044 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d034:	69fb      	ldr	r3, [r7, #28]
 800d036:	781a      	ldrb	r2, [r3, #0]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800d03e:	69fb      	ldr	r3, [r7, #28]
 800d040:	3301      	adds	r3, #1
 800d042:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	2252      	movs	r2, #82	@ 0x52
 800d048:	5a9b      	ldrh	r3, [r3, r2]
 800d04a:	b29b      	uxth	r3, r3
 800d04c:	3b01      	subs	r3, #1
 800d04e:	b299      	uxth	r1, r3
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2252      	movs	r2, #82	@ 0x52
 800d054:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2252      	movs	r2, #82	@ 0x52
 800d05a:	5a9b      	ldrh	r3, [r3, r2]
 800d05c:	b29b      	uxth	r3, r3
 800d05e:	2b00      	cmp	r3, #0
 800d060:	d1c9      	bne.n	800cff6 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d062:	697a      	ldr	r2, [r7, #20]
 800d064:	68f8      	ldr	r0, [r7, #12]
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	9300      	str	r3, [sp, #0]
 800d06a:	0013      	movs	r3, r2
 800d06c:	2200      	movs	r2, #0
 800d06e:	2140      	movs	r1, #64	@ 0x40
 800d070:	f001 f866 	bl	800e140 <UART_WaitOnFlagUntilTimeout>
 800d074:	1e03      	subs	r3, r0, #0
 800d076:	d004      	beq.n	800d082 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800d078:	68fb      	ldr	r3, [r7, #12]
 800d07a:	2220      	movs	r2, #32
 800d07c:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800d07e:	2303      	movs	r3, #3
 800d080:	e005      	b.n	800d08e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2220      	movs	r2, #32
 800d086:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800d088:	2300      	movs	r3, #0
 800d08a:	e000      	b.n	800d08e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800d08c:	2302      	movs	r3, #2
  }
}
 800d08e:	0018      	movs	r0, r3
 800d090:	46bd      	mov	sp, r7
 800d092:	b008      	add	sp, #32
 800d094:	bd80      	pop	{r7, pc}
	...

0800d098 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800d098:	b580      	push	{r7, lr}
 800d09a:	b088      	sub	sp, #32
 800d09c:	af00      	add	r7, sp, #0
 800d09e:	60f8      	str	r0, [r7, #12]
 800d0a0:	60b9      	str	r1, [r7, #8]
 800d0a2:	1dbb      	adds	r3, r7, #6
 800d0a4:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800d0a6:	68fb      	ldr	r3, [r7, #12]
 800d0a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d0aa:	2b20      	cmp	r3, #32
 800d0ac:	d000      	beq.n	800d0b0 <HAL_UART_Transmit_DMA+0x18>
 800d0ae:	e077      	b.n	800d1a0 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800d0b0:	68bb      	ldr	r3, [r7, #8]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d003      	beq.n	800d0be <HAL_UART_Transmit_DMA+0x26>
 800d0b6:	1dbb      	adds	r3, r7, #6
 800d0b8:	881b      	ldrh	r3, [r3, #0]
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d101      	bne.n	800d0c2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800d0be:	2301      	movs	r3, #1
 800d0c0:	e06f      	b.n	800d1a2 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d0c2:	68fb      	ldr	r3, [r7, #12]
 800d0c4:	689a      	ldr	r2, [r3, #8]
 800d0c6:	2380      	movs	r3, #128	@ 0x80
 800d0c8:	015b      	lsls	r3, r3, #5
 800d0ca:	429a      	cmp	r2, r3
 800d0cc:	d109      	bne.n	800d0e2 <HAL_UART_Transmit_DMA+0x4a>
 800d0ce:	68fb      	ldr	r3, [r7, #12]
 800d0d0:	691b      	ldr	r3, [r3, #16]
 800d0d2:	2b00      	cmp	r3, #0
 800d0d4:	d105      	bne.n	800d0e2 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d0d6:	68bb      	ldr	r3, [r7, #8]
 800d0d8:	2201      	movs	r2, #1
 800d0da:	4013      	ands	r3, r2
 800d0dc:	d001      	beq.n	800d0e2 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800d0de:	2301      	movs	r3, #1
 800d0e0:	e05f      	b.n	800d1a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	68ba      	ldr	r2, [r7, #8]
 800d0e6:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800d0e8:	68fb      	ldr	r3, [r7, #12]
 800d0ea:	1dba      	adds	r2, r7, #6
 800d0ec:	2150      	movs	r1, #80	@ 0x50
 800d0ee:	8812      	ldrh	r2, [r2, #0]
 800d0f0:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800d0f2:	68fb      	ldr	r3, [r7, #12]
 800d0f4:	1dba      	adds	r2, r7, #6
 800d0f6:	2152      	movs	r1, #82	@ 0x52
 800d0f8:	8812      	ldrh	r2, [r2, #0]
 800d0fa:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0fc:	68fb      	ldr	r3, [r7, #12]
 800d0fe:	2284      	movs	r2, #132	@ 0x84
 800d100:	2100      	movs	r1, #0
 800d102:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2221      	movs	r2, #33	@ 0x21
 800d108:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d027      	beq.n	800d162 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d116:	4a25      	ldr	r2, [pc, #148]	@ (800d1ac <HAL_UART_Transmit_DMA+0x114>)
 800d118:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d11e:	4a24      	ldr	r2, [pc, #144]	@ (800d1b0 <HAL_UART_Transmit_DMA+0x118>)
 800d120:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800d122:	68fb      	ldr	r3, [r7, #12]
 800d124:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d126:	4a23      	ldr	r2, [pc, #140]	@ (800d1b4 <HAL_UART_Transmit_DMA+0x11c>)
 800d128:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d12e:	2200      	movs	r2, #0
 800d130:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800d132:	68fb      	ldr	r3, [r7, #12]
 800d134:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800d136:	68fb      	ldr	r3, [r7, #12]
 800d138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d13a:	0019      	movs	r1, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	3328      	adds	r3, #40	@ 0x28
 800d142:	001a      	movs	r2, r3
 800d144:	1dbb      	adds	r3, r7, #6
 800d146:	881b      	ldrh	r3, [r3, #0]
 800d148:	f7fb fad6 	bl	80086f8 <HAL_DMA_Start_IT>
 800d14c:	1e03      	subs	r3, r0, #0
 800d14e:	d008      	beq.n	800d162 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d150:	68fb      	ldr	r3, [r7, #12]
 800d152:	2284      	movs	r2, #132	@ 0x84
 800d154:	2110      	movs	r1, #16
 800d156:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800d158:	68fb      	ldr	r3, [r7, #12]
 800d15a:	2220      	movs	r2, #32
 800d15c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e01f      	b.n	800d1a2 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	681b      	ldr	r3, [r3, #0]
 800d166:	2240      	movs	r2, #64	@ 0x40
 800d168:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d16a:	f3ef 8310 	mrs	r3, PRIMASK
 800d16e:	613b      	str	r3, [r7, #16]
  return(result);
 800d170:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d172:	61fb      	str	r3, [r7, #28]
 800d174:	2301      	movs	r3, #1
 800d176:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	f383 8810 	msr	PRIMASK, r3
}
 800d17e:	46c0      	nop			@ (mov r8, r8)
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	689a      	ldr	r2, [r3, #8]
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	681b      	ldr	r3, [r3, #0]
 800d18a:	2180      	movs	r1, #128	@ 0x80
 800d18c:	430a      	orrs	r2, r1
 800d18e:	609a      	str	r2, [r3, #8]
 800d190:	69fb      	ldr	r3, [r7, #28]
 800d192:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d194:	69bb      	ldr	r3, [r7, #24]
 800d196:	f383 8810 	msr	PRIMASK, r3
}
 800d19a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800d19c:	2300      	movs	r3, #0
 800d19e:	e000      	b.n	800d1a2 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800d1a0:	2302      	movs	r3, #2
  }
}
 800d1a2:	0018      	movs	r0, r3
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	b008      	add	sp, #32
 800d1a8:	bd80      	pop	{r7, pc}
 800d1aa:	46c0      	nop			@ (mov r8, r8)
 800d1ac:	0800e465 	.word	0x0800e465
 800d1b0:	0800e501 	.word	0x0800e501
 800d1b4:	0800e6a1 	.word	0x0800e6a1

0800d1b8 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d1b8:	b580      	push	{r7, lr}
 800d1ba:	b088      	sub	sp, #32
 800d1bc:	af00      	add	r7, sp, #0
 800d1be:	60f8      	str	r0, [r7, #12]
 800d1c0:	60b9      	str	r1, [r7, #8]
 800d1c2:	1dbb      	adds	r3, r7, #6
 800d1c4:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800d1c6:	68fb      	ldr	r3, [r7, #12]
 800d1c8:	2280      	movs	r2, #128	@ 0x80
 800d1ca:	589b      	ldr	r3, [r3, r2]
 800d1cc:	2b20      	cmp	r3, #32
 800d1ce:	d14a      	bne.n	800d266 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800d1d0:	68bb      	ldr	r3, [r7, #8]
 800d1d2:	2b00      	cmp	r3, #0
 800d1d4:	d003      	beq.n	800d1de <HAL_UART_Receive_DMA+0x26>
 800d1d6:	1dbb      	adds	r3, r7, #6
 800d1d8:	881b      	ldrh	r3, [r3, #0]
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d101      	bne.n	800d1e2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800d1de:	2301      	movs	r3, #1
 800d1e0:	e042      	b.n	800d268 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d1e2:	68fb      	ldr	r3, [r7, #12]
 800d1e4:	689a      	ldr	r2, [r3, #8]
 800d1e6:	2380      	movs	r3, #128	@ 0x80
 800d1e8:	015b      	lsls	r3, r3, #5
 800d1ea:	429a      	cmp	r2, r3
 800d1ec:	d109      	bne.n	800d202 <HAL_UART_Receive_DMA+0x4a>
 800d1ee:	68fb      	ldr	r3, [r7, #12]
 800d1f0:	691b      	ldr	r3, [r3, #16]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d105      	bne.n	800d202 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800d1f6:	68bb      	ldr	r3, [r7, #8]
 800d1f8:	2201      	movs	r2, #1
 800d1fa:	4013      	ands	r3, r2
 800d1fc:	d001      	beq.n	800d202 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800d1fe:	2301      	movs	r3, #1
 800d200:	e032      	b.n	800d268 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d202:	68fb      	ldr	r3, [r7, #12]
 800d204:	2200      	movs	r2, #0
 800d206:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	4a18      	ldr	r2, [pc, #96]	@ (800d270 <HAL_UART_Receive_DMA+0xb8>)
 800d20e:	4293      	cmp	r3, r2
 800d210:	d020      	beq.n	800d254 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	685a      	ldr	r2, [r3, #4]
 800d218:	2380      	movs	r3, #128	@ 0x80
 800d21a:	041b      	lsls	r3, r3, #16
 800d21c:	4013      	ands	r3, r2
 800d21e:	d019      	beq.n	800d254 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d220:	f3ef 8310 	mrs	r3, PRIMASK
 800d224:	613b      	str	r3, [r7, #16]
  return(result);
 800d226:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d228:	61fb      	str	r3, [r7, #28]
 800d22a:	2301      	movs	r3, #1
 800d22c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d22e:	697b      	ldr	r3, [r7, #20]
 800d230:	f383 8810 	msr	PRIMASK, r3
}
 800d234:	46c0      	nop			@ (mov r8, r8)
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	681a      	ldr	r2, [r3, #0]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2180      	movs	r1, #128	@ 0x80
 800d242:	04c9      	lsls	r1, r1, #19
 800d244:	430a      	orrs	r2, r1
 800d246:	601a      	str	r2, [r3, #0]
 800d248:	69fb      	ldr	r3, [r7, #28]
 800d24a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d24c:	69bb      	ldr	r3, [r7, #24]
 800d24e:	f383 8810 	msr	PRIMASK, r3
}
 800d252:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800d254:	1dbb      	adds	r3, r7, #6
 800d256:	881a      	ldrh	r2, [r3, #0]
 800d258:	68b9      	ldr	r1, [r7, #8]
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	0018      	movs	r0, r3
 800d25e:	f000 ffd9 	bl	800e214 <UART_Start_Receive_DMA>
 800d262:	0003      	movs	r3, r0
 800d264:	e000      	b.n	800d268 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800d266:	2302      	movs	r3, #2
  }
}
 800d268:	0018      	movs	r0, r3
 800d26a:	46bd      	mov	sp, r7
 800d26c:	b008      	add	sp, #32
 800d26e:	bd80      	pop	{r7, pc}
 800d270:	40004800 	.word	0x40004800

0800d274 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800d274:	b590      	push	{r4, r7, lr}
 800d276:	b0ab      	sub	sp, #172	@ 0xac
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	69db      	ldr	r3, [r3, #28]
 800d282:	22a4      	movs	r2, #164	@ 0xa4
 800d284:	18b9      	adds	r1, r7, r2
 800d286:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	20a0      	movs	r0, #160	@ 0xa0
 800d290:	1839      	adds	r1, r7, r0
 800d292:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	681b      	ldr	r3, [r3, #0]
 800d298:	689b      	ldr	r3, [r3, #8]
 800d29a:	219c      	movs	r1, #156	@ 0x9c
 800d29c:	1879      	adds	r1, r7, r1
 800d29e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800d2a0:	0011      	movs	r1, r2
 800d2a2:	18bb      	adds	r3, r7, r2
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	4a9c      	ldr	r2, [pc, #624]	@ (800d518 <HAL_UART_IRQHandler+0x2a4>)
 800d2a8:	4013      	ands	r3, r2
 800d2aa:	2298      	movs	r2, #152	@ 0x98
 800d2ac:	18bc      	adds	r4, r7, r2
 800d2ae:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800d2b0:	18bb      	adds	r3, r7, r2
 800d2b2:	681b      	ldr	r3, [r3, #0]
 800d2b4:	2b00      	cmp	r3, #0
 800d2b6:	d114      	bne.n	800d2e2 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800d2b8:	187b      	adds	r3, r7, r1
 800d2ba:	681b      	ldr	r3, [r3, #0]
 800d2bc:	2220      	movs	r2, #32
 800d2be:	4013      	ands	r3, r2
 800d2c0:	d00f      	beq.n	800d2e2 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d2c2:	183b      	adds	r3, r7, r0
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	2220      	movs	r2, #32
 800d2c8:	4013      	ands	r3, r2
 800d2ca:	d00a      	beq.n	800d2e2 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d100      	bne.n	800d2d6 <HAL_UART_IRQHandler+0x62>
 800d2d4:	e2aa      	b.n	800d82c <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	0010      	movs	r0, r2
 800d2de:	4798      	blx	r3
      }
      return;
 800d2e0:	e2a4      	b.n	800d82c <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800d2e2:	2398      	movs	r3, #152	@ 0x98
 800d2e4:	18fb      	adds	r3, r7, r3
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d100      	bne.n	800d2ee <HAL_UART_IRQHandler+0x7a>
 800d2ec:	e11a      	b.n	800d524 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800d2ee:	239c      	movs	r3, #156	@ 0x9c
 800d2f0:	18fb      	adds	r3, r7, r3
 800d2f2:	681b      	ldr	r3, [r3, #0]
 800d2f4:	2201      	movs	r2, #1
 800d2f6:	4013      	ands	r3, r2
 800d2f8:	d106      	bne.n	800d308 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800d2fa:	23a0      	movs	r3, #160	@ 0xa0
 800d2fc:	18fb      	adds	r3, r7, r3
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4a86      	ldr	r2, [pc, #536]	@ (800d51c <HAL_UART_IRQHandler+0x2a8>)
 800d302:	4013      	ands	r3, r2
 800d304:	d100      	bne.n	800d308 <HAL_UART_IRQHandler+0x94>
 800d306:	e10d      	b.n	800d524 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800d308:	23a4      	movs	r3, #164	@ 0xa4
 800d30a:	18fb      	adds	r3, r7, r3
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	2201      	movs	r2, #1
 800d310:	4013      	ands	r3, r2
 800d312:	d012      	beq.n	800d33a <HAL_UART_IRQHandler+0xc6>
 800d314:	23a0      	movs	r3, #160	@ 0xa0
 800d316:	18fb      	adds	r3, r7, r3
 800d318:	681a      	ldr	r2, [r3, #0]
 800d31a:	2380      	movs	r3, #128	@ 0x80
 800d31c:	005b      	lsls	r3, r3, #1
 800d31e:	4013      	ands	r3, r2
 800d320:	d00b      	beq.n	800d33a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800d322:	687b      	ldr	r3, [r7, #4]
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	2201      	movs	r2, #1
 800d328:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800d32a:	687b      	ldr	r3, [r7, #4]
 800d32c:	2284      	movs	r2, #132	@ 0x84
 800d32e:	589b      	ldr	r3, [r3, r2]
 800d330:	2201      	movs	r2, #1
 800d332:	431a      	orrs	r2, r3
 800d334:	687b      	ldr	r3, [r7, #4]
 800d336:	2184      	movs	r1, #132	@ 0x84
 800d338:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d33a:	23a4      	movs	r3, #164	@ 0xa4
 800d33c:	18fb      	adds	r3, r7, r3
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	2202      	movs	r2, #2
 800d342:	4013      	ands	r3, r2
 800d344:	d011      	beq.n	800d36a <HAL_UART_IRQHandler+0xf6>
 800d346:	239c      	movs	r3, #156	@ 0x9c
 800d348:	18fb      	adds	r3, r7, r3
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	2201      	movs	r2, #1
 800d34e:	4013      	ands	r3, r2
 800d350:	d00b      	beq.n	800d36a <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	2202      	movs	r2, #2
 800d358:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	2284      	movs	r2, #132	@ 0x84
 800d35e:	589b      	ldr	r3, [r3, r2]
 800d360:	2204      	movs	r2, #4
 800d362:	431a      	orrs	r2, r3
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	2184      	movs	r1, #132	@ 0x84
 800d368:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800d36a:	23a4      	movs	r3, #164	@ 0xa4
 800d36c:	18fb      	adds	r3, r7, r3
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	2204      	movs	r2, #4
 800d372:	4013      	ands	r3, r2
 800d374:	d011      	beq.n	800d39a <HAL_UART_IRQHandler+0x126>
 800d376:	239c      	movs	r3, #156	@ 0x9c
 800d378:	18fb      	adds	r3, r7, r3
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	2201      	movs	r2, #1
 800d37e:	4013      	ands	r3, r2
 800d380:	d00b      	beq.n	800d39a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	2204      	movs	r2, #4
 800d388:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	2284      	movs	r2, #132	@ 0x84
 800d38e:	589b      	ldr	r3, [r3, r2]
 800d390:	2202      	movs	r2, #2
 800d392:	431a      	orrs	r2, r3
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	2184      	movs	r1, #132	@ 0x84
 800d398:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800d39a:	23a4      	movs	r3, #164	@ 0xa4
 800d39c:	18fb      	adds	r3, r7, r3
 800d39e:	681b      	ldr	r3, [r3, #0]
 800d3a0:	2208      	movs	r2, #8
 800d3a2:	4013      	ands	r3, r2
 800d3a4:	d017      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d3a6:	23a0      	movs	r3, #160	@ 0xa0
 800d3a8:	18fb      	adds	r3, r7, r3
 800d3aa:	681b      	ldr	r3, [r3, #0]
 800d3ac:	2220      	movs	r2, #32
 800d3ae:	4013      	ands	r3, r2
 800d3b0:	d105      	bne.n	800d3be <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800d3b2:	239c      	movs	r3, #156	@ 0x9c
 800d3b4:	18fb      	adds	r3, r7, r3
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	2201      	movs	r2, #1
 800d3ba:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800d3bc:	d00b      	beq.n	800d3d6 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3be:	687b      	ldr	r3, [r7, #4]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	2208      	movs	r2, #8
 800d3c4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	2284      	movs	r2, #132	@ 0x84
 800d3ca:	589b      	ldr	r3, [r3, r2]
 800d3cc:	2208      	movs	r2, #8
 800d3ce:	431a      	orrs	r2, r3
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	2184      	movs	r1, #132	@ 0x84
 800d3d4:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800d3d6:	23a4      	movs	r3, #164	@ 0xa4
 800d3d8:	18fb      	adds	r3, r7, r3
 800d3da:	681a      	ldr	r2, [r3, #0]
 800d3dc:	2380      	movs	r3, #128	@ 0x80
 800d3de:	011b      	lsls	r3, r3, #4
 800d3e0:	4013      	ands	r3, r2
 800d3e2:	d013      	beq.n	800d40c <HAL_UART_IRQHandler+0x198>
 800d3e4:	23a0      	movs	r3, #160	@ 0xa0
 800d3e6:	18fb      	adds	r3, r7, r3
 800d3e8:	681a      	ldr	r2, [r3, #0]
 800d3ea:	2380      	movs	r3, #128	@ 0x80
 800d3ec:	04db      	lsls	r3, r3, #19
 800d3ee:	4013      	ands	r3, r2
 800d3f0:	d00c      	beq.n	800d40c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	2280      	movs	r2, #128	@ 0x80
 800d3f8:	0112      	lsls	r2, r2, #4
 800d3fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	2284      	movs	r2, #132	@ 0x84
 800d400:	589b      	ldr	r3, [r3, r2]
 800d402:	2220      	movs	r2, #32
 800d404:	431a      	orrs	r2, r3
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2184      	movs	r1, #132	@ 0x84
 800d40a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2284      	movs	r2, #132	@ 0x84
 800d410:	589b      	ldr	r3, [r3, r2]
 800d412:	2b00      	cmp	r3, #0
 800d414:	d100      	bne.n	800d418 <HAL_UART_IRQHandler+0x1a4>
 800d416:	e20b      	b.n	800d830 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800d418:	23a4      	movs	r3, #164	@ 0xa4
 800d41a:	18fb      	adds	r3, r7, r3
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	2220      	movs	r2, #32
 800d420:	4013      	ands	r3, r2
 800d422:	d00e      	beq.n	800d442 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800d424:	23a0      	movs	r3, #160	@ 0xa0
 800d426:	18fb      	adds	r3, r7, r3
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	2220      	movs	r2, #32
 800d42c:	4013      	ands	r3, r2
 800d42e:	d008      	beq.n	800d442 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d434:	2b00      	cmp	r3, #0
 800d436:	d004      	beq.n	800d442 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d43c:	687a      	ldr	r2, [r7, #4]
 800d43e:	0010      	movs	r0, r2
 800d440:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800d442:	687b      	ldr	r3, [r7, #4]
 800d444:	2284      	movs	r2, #132	@ 0x84
 800d446:	589b      	ldr	r3, [r3, r2]
 800d448:	2194      	movs	r1, #148	@ 0x94
 800d44a:	187a      	adds	r2, r7, r1
 800d44c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d44e:	687b      	ldr	r3, [r7, #4]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	689b      	ldr	r3, [r3, #8]
 800d454:	2240      	movs	r2, #64	@ 0x40
 800d456:	4013      	ands	r3, r2
 800d458:	2b40      	cmp	r3, #64	@ 0x40
 800d45a:	d004      	beq.n	800d466 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800d45c:	187b      	adds	r3, r7, r1
 800d45e:	681b      	ldr	r3, [r3, #0]
 800d460:	2228      	movs	r2, #40	@ 0x28
 800d462:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800d464:	d04b      	beq.n	800d4fe <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	0018      	movs	r0, r3
 800d46a:	f000 ff97 	bl	800e39c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d46e:	687b      	ldr	r3, [r7, #4]
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	689b      	ldr	r3, [r3, #8]
 800d474:	2240      	movs	r2, #64	@ 0x40
 800d476:	4013      	ands	r3, r2
 800d478:	2b40      	cmp	r3, #64	@ 0x40
 800d47a:	d139      	bne.n	800d4f0 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d47c:	f3ef 8310 	mrs	r3, PRIMASK
 800d480:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800d482:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d484:	2090      	movs	r0, #144	@ 0x90
 800d486:	183a      	adds	r2, r7, r0
 800d488:	6013      	str	r3, [r2, #0]
 800d48a:	2301      	movs	r3, #1
 800d48c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d48e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d490:	f383 8810 	msr	PRIMASK, r3
}
 800d494:	46c0      	nop			@ (mov r8, r8)
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	681b      	ldr	r3, [r3, #0]
 800d49a:	689a      	ldr	r2, [r3, #8]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	2140      	movs	r1, #64	@ 0x40
 800d4a2:	438a      	bics	r2, r1
 800d4a4:	609a      	str	r2, [r3, #8]
 800d4a6:	183b      	adds	r3, r7, r0
 800d4a8:	681b      	ldr	r3, [r3, #0]
 800d4aa:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d4ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d4ae:	f383 8810 	msr	PRIMASK, r3
}
 800d4b2:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4b8:	2b00      	cmp	r3, #0
 800d4ba:	d012      	beq.n	800d4e2 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800d4bc:	687b      	ldr	r3, [r7, #4]
 800d4be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4c0:	4a17      	ldr	r2, [pc, #92]	@ (800d520 <HAL_UART_IRQHandler+0x2ac>)
 800d4c2:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4c8:	0018      	movs	r0, r3
 800d4ca:	f7fb f9bb 	bl	8008844 <HAL_DMA_Abort_IT>
 800d4ce:	1e03      	subs	r3, r0, #0
 800d4d0:	d020      	beq.n	800d514 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d4dc:	0018      	movs	r0, r3
 800d4de:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4e0:	e018      	b.n	800d514 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	2298      	movs	r2, #152	@ 0x98
 800d4e6:	589b      	ldr	r3, [r3, r2]
 800d4e8:	687a      	ldr	r2, [r7, #4]
 800d4ea:	0010      	movs	r0, r2
 800d4ec:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4ee:	e011      	b.n	800d514 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800d4f0:	687b      	ldr	r3, [r7, #4]
 800d4f2:	2298      	movs	r2, #152	@ 0x98
 800d4f4:	589b      	ldr	r3, [r3, r2]
 800d4f6:	687a      	ldr	r2, [r7, #4]
 800d4f8:	0010      	movs	r0, r2
 800d4fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d4fc:	e00a      	b.n	800d514 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800d4fe:	687b      	ldr	r3, [r7, #4]
 800d500:	2298      	movs	r2, #152	@ 0x98
 800d502:	589b      	ldr	r3, [r3, r2]
 800d504:	687a      	ldr	r2, [r7, #4]
 800d506:	0010      	movs	r0, r2
 800d508:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d50a:	687b      	ldr	r3, [r7, #4]
 800d50c:	2284      	movs	r2, #132	@ 0x84
 800d50e:	2100      	movs	r1, #0
 800d510:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800d512:	e18d      	b.n	800d830 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d514:	46c0      	nop			@ (mov r8, r8)
    return;
 800d516:	e18b      	b.n	800d830 <HAL_UART_IRQHandler+0x5bc>
 800d518:	0000080f 	.word	0x0000080f
 800d51c:	04000120 	.word	0x04000120
 800d520:	0800e729 	.word	0x0800e729

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800d528:	2b01      	cmp	r3, #1
 800d52a:	d000      	beq.n	800d52e <HAL_UART_IRQHandler+0x2ba>
 800d52c:	e13d      	b.n	800d7aa <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800d52e:	23a4      	movs	r3, #164	@ 0xa4
 800d530:	18fb      	adds	r3, r7, r3
 800d532:	681b      	ldr	r3, [r3, #0]
 800d534:	2210      	movs	r2, #16
 800d536:	4013      	ands	r3, r2
 800d538:	d100      	bne.n	800d53c <HAL_UART_IRQHandler+0x2c8>
 800d53a:	e136      	b.n	800d7aa <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800d53c:	23a0      	movs	r3, #160	@ 0xa0
 800d53e:	18fb      	adds	r3, r7, r3
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	2210      	movs	r2, #16
 800d544:	4013      	ands	r3, r2
 800d546:	d100      	bne.n	800d54a <HAL_UART_IRQHandler+0x2d6>
 800d548:	e12f      	b.n	800d7aa <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	2210      	movs	r2, #16
 800d550:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	689b      	ldr	r3, [r3, #8]
 800d558:	2240      	movs	r2, #64	@ 0x40
 800d55a:	4013      	ands	r3, r2
 800d55c:	2b40      	cmp	r3, #64	@ 0x40
 800d55e:	d000      	beq.n	800d562 <HAL_UART_IRQHandler+0x2ee>
 800d560:	e0a2      	b.n	800d6a8 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	685a      	ldr	r2, [r3, #4]
 800d56a:	217e      	movs	r1, #126	@ 0x7e
 800d56c:	187b      	adds	r3, r7, r1
 800d56e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800d570:	187b      	adds	r3, r7, r1
 800d572:	881b      	ldrh	r3, [r3, #0]
 800d574:	2b00      	cmp	r3, #0
 800d576:	d100      	bne.n	800d57a <HAL_UART_IRQHandler+0x306>
 800d578:	e15c      	b.n	800d834 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800d57a:	687b      	ldr	r3, [r7, #4]
 800d57c:	2258      	movs	r2, #88	@ 0x58
 800d57e:	5a9b      	ldrh	r3, [r3, r2]
 800d580:	187a      	adds	r2, r7, r1
 800d582:	8812      	ldrh	r2, [r2, #0]
 800d584:	429a      	cmp	r2, r3
 800d586:	d300      	bcc.n	800d58a <HAL_UART_IRQHandler+0x316>
 800d588:	e154      	b.n	800d834 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	187a      	adds	r2, r7, r1
 800d58e:	215a      	movs	r1, #90	@ 0x5a
 800d590:	8812      	ldrh	r2, [r2, #0]
 800d592:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	2220      	movs	r2, #32
 800d59e:	4013      	ands	r3, r2
 800d5a0:	d16f      	bne.n	800d682 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d5a6:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800d5a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d5aa:	67bb      	str	r3, [r7, #120]	@ 0x78
 800d5ac:	2301      	movs	r3, #1
 800d5ae:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d5b2:	f383 8810 	msr	PRIMASK, r3
}
 800d5b6:	46c0      	nop			@ (mov r8, r8)
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	681b      	ldr	r3, [r3, #0]
 800d5bc:	681a      	ldr	r2, [r3, #0]
 800d5be:	687b      	ldr	r3, [r7, #4]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	49a0      	ldr	r1, [pc, #640]	@ (800d844 <HAL_UART_IRQHandler+0x5d0>)
 800d5c4:	400a      	ands	r2, r1
 800d5c6:	601a      	str	r2, [r3, #0]
 800d5c8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800d5ca:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d5ce:	f383 8810 	msr	PRIMASK, r3
}
 800d5d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d5d4:	f3ef 8310 	mrs	r3, PRIMASK
 800d5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800d5da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d5dc:	677b      	str	r3, [r7, #116]	@ 0x74
 800d5de:	2301      	movs	r3, #1
 800d5e0:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d5e4:	f383 8810 	msr	PRIMASK, r3
}
 800d5e8:	46c0      	nop			@ (mov r8, r8)
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	689a      	ldr	r2, [r3, #8]
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	681b      	ldr	r3, [r3, #0]
 800d5f4:	2101      	movs	r1, #1
 800d5f6:	438a      	bics	r2, r1
 800d5f8:	609a      	str	r2, [r3, #8]
 800d5fa:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800d5fc:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d5fe:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d600:	f383 8810 	msr	PRIMASK, r3
}
 800d604:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d606:	f3ef 8310 	mrs	r3, PRIMASK
 800d60a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800d60c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d60e:	673b      	str	r3, [r7, #112]	@ 0x70
 800d610:	2301      	movs	r3, #1
 800d612:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d614:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800d616:	f383 8810 	msr	PRIMASK, r3
}
 800d61a:	46c0      	nop			@ (mov r8, r8)
 800d61c:	687b      	ldr	r3, [r7, #4]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	689a      	ldr	r2, [r3, #8]
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	2140      	movs	r1, #64	@ 0x40
 800d628:	438a      	bics	r2, r1
 800d62a:	609a      	str	r2, [r3, #8]
 800d62c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800d62e:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800d632:	f383 8810 	msr	PRIMASK, r3
}
 800d636:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	2280      	movs	r2, #128	@ 0x80
 800d63c:	2120      	movs	r1, #32
 800d63e:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	2200      	movs	r2, #0
 800d644:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d646:	f3ef 8310 	mrs	r3, PRIMASK
 800d64a:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800d64c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d64e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800d650:	2301      	movs	r3, #1
 800d652:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d654:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800d656:	f383 8810 	msr	PRIMASK, r3
}
 800d65a:	46c0      	nop			@ (mov r8, r8)
 800d65c:	687b      	ldr	r3, [r7, #4]
 800d65e:	681b      	ldr	r3, [r3, #0]
 800d660:	681a      	ldr	r2, [r3, #0]
 800d662:	687b      	ldr	r3, [r7, #4]
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	2110      	movs	r1, #16
 800d668:	438a      	bics	r2, r1
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800d66e:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800d672:	f383 8810 	msr	PRIMASK, r3
}
 800d676:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800d678:	687b      	ldr	r3, [r7, #4]
 800d67a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d67c:	0018      	movs	r0, r3
 800d67e:	f7fb f8a1 	bl	80087c4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	2202      	movs	r2, #2
 800d686:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	22ac      	movs	r2, #172	@ 0xac
 800d68c:	589b      	ldr	r3, [r3, r2]
 800d68e:	687a      	ldr	r2, [r7, #4]
 800d690:	2158      	movs	r1, #88	@ 0x58
 800d692:	5a51      	ldrh	r1, [r2, r1]
 800d694:	687a      	ldr	r2, [r7, #4]
 800d696:	205a      	movs	r0, #90	@ 0x5a
 800d698:	5a12      	ldrh	r2, [r2, r0]
 800d69a:	b292      	uxth	r2, r2
 800d69c:	1a8a      	subs	r2, r1, r2
 800d69e:	b291      	uxth	r1, r2
 800d6a0:	687a      	ldr	r2, [r7, #4]
 800d6a2:	0010      	movs	r0, r2
 800d6a4:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d6a6:	e0c5      	b.n	800d834 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2258      	movs	r2, #88	@ 0x58
 800d6ac:	5a99      	ldrh	r1, [r3, r2]
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	225a      	movs	r2, #90	@ 0x5a
 800d6b2:	5a9b      	ldrh	r3, [r3, r2]
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	208e      	movs	r0, #142	@ 0x8e
 800d6b8:	183b      	adds	r3, r7, r0
 800d6ba:	1a8a      	subs	r2, r1, r2
 800d6bc:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	225a      	movs	r2, #90	@ 0x5a
 800d6c2:	5a9b      	ldrh	r3, [r3, r2]
 800d6c4:	b29b      	uxth	r3, r3
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d100      	bne.n	800d6cc <HAL_UART_IRQHandler+0x458>
 800d6ca:	e0b5      	b.n	800d838 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800d6cc:	183b      	adds	r3, r7, r0
 800d6ce:	881b      	ldrh	r3, [r3, #0]
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d100      	bne.n	800d6d6 <HAL_UART_IRQHandler+0x462>
 800d6d4:	e0b0      	b.n	800d838 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d6d6:	f3ef 8310 	mrs	r3, PRIMASK
 800d6da:	60fb      	str	r3, [r7, #12]
  return(result);
 800d6dc:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d6de:	2488      	movs	r4, #136	@ 0x88
 800d6e0:	193a      	adds	r2, r7, r4
 800d6e2:	6013      	str	r3, [r2, #0]
 800d6e4:	2301      	movs	r3, #1
 800d6e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d6e8:	693b      	ldr	r3, [r7, #16]
 800d6ea:	f383 8810 	msr	PRIMASK, r3
}
 800d6ee:	46c0      	nop			@ (mov r8, r8)
 800d6f0:	687b      	ldr	r3, [r7, #4]
 800d6f2:	681b      	ldr	r3, [r3, #0]
 800d6f4:	681a      	ldr	r2, [r3, #0]
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	4953      	ldr	r1, [pc, #332]	@ (800d848 <HAL_UART_IRQHandler+0x5d4>)
 800d6fc:	400a      	ands	r2, r1
 800d6fe:	601a      	str	r2, [r3, #0]
 800d700:	193b      	adds	r3, r7, r4
 800d702:	681b      	ldr	r3, [r3, #0]
 800d704:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d706:	697b      	ldr	r3, [r7, #20]
 800d708:	f383 8810 	msr	PRIMASK, r3
}
 800d70c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d70e:	f3ef 8310 	mrs	r3, PRIMASK
 800d712:	61bb      	str	r3, [r7, #24]
  return(result);
 800d714:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d716:	2484      	movs	r4, #132	@ 0x84
 800d718:	193a      	adds	r2, r7, r4
 800d71a:	6013      	str	r3, [r2, #0]
 800d71c:	2301      	movs	r3, #1
 800d71e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	f383 8810 	msr	PRIMASK, r3
}
 800d726:	46c0      	nop			@ (mov r8, r8)
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	689a      	ldr	r2, [r3, #8]
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	681b      	ldr	r3, [r3, #0]
 800d732:	2101      	movs	r1, #1
 800d734:	438a      	bics	r2, r1
 800d736:	609a      	str	r2, [r3, #8]
 800d738:	193b      	adds	r3, r7, r4
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	f383 8810 	msr	PRIMASK, r3
}
 800d744:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800d746:	687b      	ldr	r3, [r7, #4]
 800d748:	2280      	movs	r2, #128	@ 0x80
 800d74a:	2120      	movs	r1, #32
 800d74c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d74e:	687b      	ldr	r3, [r7, #4]
 800d750:	2200      	movs	r2, #0
 800d752:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	2200      	movs	r2, #0
 800d758:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d75a:	f3ef 8310 	mrs	r3, PRIMASK
 800d75e:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800d760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d762:	2480      	movs	r4, #128	@ 0x80
 800d764:	193a      	adds	r2, r7, r4
 800d766:	6013      	str	r3, [r2, #0]
 800d768:	2301      	movs	r3, #1
 800d76a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d76c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d76e:	f383 8810 	msr	PRIMASK, r3
}
 800d772:	46c0      	nop			@ (mov r8, r8)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	681a      	ldr	r2, [r3, #0]
 800d77a:	687b      	ldr	r3, [r7, #4]
 800d77c:	681b      	ldr	r3, [r3, #0]
 800d77e:	2110      	movs	r1, #16
 800d780:	438a      	bics	r2, r1
 800d782:	601a      	str	r2, [r3, #0]
 800d784:	193b      	adds	r3, r7, r4
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800d78a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d78c:	f383 8810 	msr	PRIMASK, r3
}
 800d790:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	2202      	movs	r2, #2
 800d796:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	22ac      	movs	r2, #172	@ 0xac
 800d79c:	589b      	ldr	r3, [r3, r2]
 800d79e:	183a      	adds	r2, r7, r0
 800d7a0:	8811      	ldrh	r1, [r2, #0]
 800d7a2:	687a      	ldr	r2, [r7, #4]
 800d7a4:	0010      	movs	r0, r2
 800d7a6:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800d7a8:	e046      	b.n	800d838 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800d7aa:	23a4      	movs	r3, #164	@ 0xa4
 800d7ac:	18fb      	adds	r3, r7, r3
 800d7ae:	681a      	ldr	r2, [r3, #0]
 800d7b0:	2380      	movs	r3, #128	@ 0x80
 800d7b2:	035b      	lsls	r3, r3, #13
 800d7b4:	4013      	ands	r3, r2
 800d7b6:	d012      	beq.n	800d7de <HAL_UART_IRQHandler+0x56a>
 800d7b8:	239c      	movs	r3, #156	@ 0x9c
 800d7ba:	18fb      	adds	r3, r7, r3
 800d7bc:	681a      	ldr	r2, [r3, #0]
 800d7be:	2380      	movs	r3, #128	@ 0x80
 800d7c0:	03db      	lsls	r3, r3, #15
 800d7c2:	4013      	ands	r3, r2
 800d7c4:	d00b      	beq.n	800d7de <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2280      	movs	r2, #128	@ 0x80
 800d7cc:	0352      	lsls	r2, r2, #13
 800d7ce:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	22a8      	movs	r2, #168	@ 0xa8
 800d7d4:	589b      	ldr	r3, [r3, r2]
 800d7d6:	687a      	ldr	r2, [r7, #4]
 800d7d8:	0010      	movs	r0, r2
 800d7da:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800d7dc:	e02f      	b.n	800d83e <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800d7de:	23a4      	movs	r3, #164	@ 0xa4
 800d7e0:	18fb      	adds	r3, r7, r3
 800d7e2:	681b      	ldr	r3, [r3, #0]
 800d7e4:	2280      	movs	r2, #128	@ 0x80
 800d7e6:	4013      	ands	r3, r2
 800d7e8:	d00f      	beq.n	800d80a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800d7ea:	23a0      	movs	r3, #160	@ 0xa0
 800d7ec:	18fb      	adds	r3, r7, r3
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	2280      	movs	r2, #128	@ 0x80
 800d7f2:	4013      	ands	r3, r2
 800d7f4:	d009      	beq.n	800d80a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7fa:	2b00      	cmp	r3, #0
 800d7fc:	d01e      	beq.n	800d83c <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d802:	687a      	ldr	r2, [r7, #4]
 800d804:	0010      	movs	r0, r2
 800d806:	4798      	blx	r3
    }
    return;
 800d808:	e018      	b.n	800d83c <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800d80a:	23a4      	movs	r3, #164	@ 0xa4
 800d80c:	18fb      	adds	r3, r7, r3
 800d80e:	681b      	ldr	r3, [r3, #0]
 800d810:	2240      	movs	r2, #64	@ 0x40
 800d812:	4013      	ands	r3, r2
 800d814:	d013      	beq.n	800d83e <HAL_UART_IRQHandler+0x5ca>
 800d816:	23a0      	movs	r3, #160	@ 0xa0
 800d818:	18fb      	adds	r3, r7, r3
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	2240      	movs	r2, #64	@ 0x40
 800d81e:	4013      	ands	r3, r2
 800d820:	d00d      	beq.n	800d83e <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	0018      	movs	r0, r3
 800d826:	f000 ff98 	bl	800e75a <UART_EndTransmit_IT>
    return;
 800d82a:	e008      	b.n	800d83e <HAL_UART_IRQHandler+0x5ca>
      return;
 800d82c:	46c0      	nop			@ (mov r8, r8)
 800d82e:	e006      	b.n	800d83e <HAL_UART_IRQHandler+0x5ca>
    return;
 800d830:	46c0      	nop			@ (mov r8, r8)
 800d832:	e004      	b.n	800d83e <HAL_UART_IRQHandler+0x5ca>
      return;
 800d834:	46c0      	nop			@ (mov r8, r8)
 800d836:	e002      	b.n	800d83e <HAL_UART_IRQHandler+0x5ca>
      return;
 800d838:	46c0      	nop			@ (mov r8, r8)
 800d83a:	e000      	b.n	800d83e <HAL_UART_IRQHandler+0x5ca>
    return;
 800d83c:	46c0      	nop			@ (mov r8, r8)
  }

}
 800d83e:	46bd      	mov	sp, r7
 800d840:	b02b      	add	sp, #172	@ 0xac
 800d842:	bd90      	pop	{r4, r7, pc}
 800d844:	fffffeff 	.word	0xfffffeff
 800d848:	fffffedf 	.word	0xfffffedf

0800d84c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800d84c:	b580      	push	{r7, lr}
 800d84e:	b082      	sub	sp, #8
 800d850:	af00      	add	r7, sp, #0
 800d852:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800d854:	46c0      	nop			@ (mov r8, r8)
 800d856:	46bd      	mov	sp, r7
 800d858:	b002      	add	sp, #8
 800d85a:	bd80      	pop	{r7, pc}

0800d85c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d85c:	b580      	push	{r7, lr}
 800d85e:	b082      	sub	sp, #8
 800d860:	af00      	add	r7, sp, #0
 800d862:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800d864:	46c0      	nop			@ (mov r8, r8)
 800d866:	46bd      	mov	sp, r7
 800d868:	b002      	add	sp, #8
 800d86a:	bd80      	pop	{r7, pc}

0800d86c <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800d86c:	b580      	push	{r7, lr}
 800d86e:	b082      	sub	sp, #8
 800d870:	af00      	add	r7, sp, #0
 800d872:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800d874:	46c0      	nop			@ (mov r8, r8)
 800d876:	46bd      	mov	sp, r7
 800d878:	b002      	add	sp, #8
 800d87a:	bd80      	pop	{r7, pc}

0800d87c <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800d87c:	b580      	push	{r7, lr}
 800d87e:	b082      	sub	sp, #8
 800d880:	af00      	add	r7, sp, #0
 800d882:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800d884:	46c0      	nop			@ (mov r8, r8)
 800d886:	46bd      	mov	sp, r7
 800d888:	b002      	add	sp, #8
 800d88a:	bd80      	pop	{r7, pc}

0800d88c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b082      	sub	sp, #8
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800d894:	46c0      	nop			@ (mov r8, r8)
 800d896:	46bd      	mov	sp, r7
 800d898:	b002      	add	sp, #8
 800d89a:	bd80      	pop	{r7, pc}

0800d89c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800d89c:	b580      	push	{r7, lr}
 800d89e:	b082      	sub	sp, #8
 800d8a0:	af00      	add	r7, sp, #0
 800d8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800d8a4:	46c0      	nop			@ (mov r8, r8)
 800d8a6:	46bd      	mov	sp, r7
 800d8a8:	b002      	add	sp, #8
 800d8aa:	bd80      	pop	{r7, pc}

0800d8ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800d8ac:	b580      	push	{r7, lr}
 800d8ae:	b082      	sub	sp, #8
 800d8b0:	af00      	add	r7, sp, #0
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	000a      	movs	r2, r1
 800d8b6:	1cbb      	adds	r3, r7, #2
 800d8b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800d8ba:	46c0      	nop			@ (mov r8, r8)
 800d8bc:	46bd      	mov	sp, r7
 800d8be:	b002      	add	sp, #8
 800d8c0:	bd80      	pop	{r7, pc}
	...

0800d8c4 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b082      	sub	sp, #8
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	2188      	movs	r1, #136	@ 0x88
 800d8d0:	4a14      	ldr	r2, [pc, #80]	@ (800d924 <UART_InitCallbacksToDefault+0x60>)
 800d8d2:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	218c      	movs	r1, #140	@ 0x8c
 800d8d8:	4a13      	ldr	r2, [pc, #76]	@ (800d928 <UART_InitCallbacksToDefault+0x64>)
 800d8da:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	2190      	movs	r1, #144	@ 0x90
 800d8e0:	4a12      	ldr	r2, [pc, #72]	@ (800d92c <UART_InitCallbacksToDefault+0x68>)
 800d8e2:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800d8e4:	687b      	ldr	r3, [r7, #4]
 800d8e6:	2194      	movs	r1, #148	@ 0x94
 800d8e8:	4a11      	ldr	r2, [pc, #68]	@ (800d930 <UART_InitCallbacksToDefault+0x6c>)
 800d8ea:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	2198      	movs	r1, #152	@ 0x98
 800d8f0:	4a10      	ldr	r2, [pc, #64]	@ (800d934 <UART_InitCallbacksToDefault+0x70>)
 800d8f2:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	219c      	movs	r1, #156	@ 0x9c
 800d8f8:	4a0f      	ldr	r2, [pc, #60]	@ (800d938 <UART_InitCallbacksToDefault+0x74>)
 800d8fa:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800d8fc:	687b      	ldr	r3, [r7, #4]
 800d8fe:	21a0      	movs	r1, #160	@ 0xa0
 800d900:	4a0e      	ldr	r2, [pc, #56]	@ (800d93c <UART_InitCallbacksToDefault+0x78>)
 800d902:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	21a4      	movs	r1, #164	@ 0xa4
 800d908:	4a0d      	ldr	r2, [pc, #52]	@ (800d940 <UART_InitCallbacksToDefault+0x7c>)
 800d90a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	21a8      	movs	r1, #168	@ 0xa8
 800d910:	4a0c      	ldr	r2, [pc, #48]	@ (800d944 <UART_InitCallbacksToDefault+0x80>)
 800d912:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	21ac      	movs	r1, #172	@ 0xac
 800d918:	4a0b      	ldr	r2, [pc, #44]	@ (800d948 <UART_InitCallbacksToDefault+0x84>)
 800d91a:	505a      	str	r2, [r3, r1]

}
 800d91c:	46c0      	nop			@ (mov r8, r8)
 800d91e:	46bd      	mov	sp, r7
 800d920:	b002      	add	sp, #8
 800d922:	bd80      	pop	{r7, pc}
 800d924:	0800d85d 	.word	0x0800d85d
 800d928:	0800d84d 	.word	0x0800d84d
 800d92c:	0800d86d 	.word	0x0800d86d
 800d930:	08003655 	.word	0x08003655
 800d934:	08003691 	.word	0x08003691
 800d938:	0800d87d 	.word	0x0800d87d
 800d93c:	0800d88d 	.word	0x0800d88d
 800d940:	0800d89d 	.word	0x0800d89d
 800d944:	0800e7b5 	.word	0x0800e7b5
 800d948:	0800d8ad 	.word	0x0800d8ad

0800d94c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800d94c:	b5b0      	push	{r4, r5, r7, lr}
 800d94e:	b08e      	sub	sp, #56	@ 0x38
 800d950:	af00      	add	r7, sp, #0
 800d952:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800d954:	231a      	movs	r3, #26
 800d956:	2218      	movs	r2, #24
 800d958:	189b      	adds	r3, r3, r2
 800d95a:	19db      	adds	r3, r3, r7
 800d95c:	2200      	movs	r2, #0
 800d95e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800d960:	69fb      	ldr	r3, [r7, #28]
 800d962:	689a      	ldr	r2, [r3, #8]
 800d964:	69fb      	ldr	r3, [r7, #28]
 800d966:	691b      	ldr	r3, [r3, #16]
 800d968:	431a      	orrs	r2, r3
 800d96a:	69fb      	ldr	r3, [r7, #28]
 800d96c:	695b      	ldr	r3, [r3, #20]
 800d96e:	431a      	orrs	r2, r3
 800d970:	69fb      	ldr	r3, [r7, #28]
 800d972:	69db      	ldr	r3, [r3, #28]
 800d974:	4313      	orrs	r3, r2
 800d976:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	4ac3      	ldr	r2, [pc, #780]	@ (800dc8c <UART_SetConfig+0x340>)
 800d980:	4013      	ands	r3, r2
 800d982:	0019      	movs	r1, r3
 800d984:	69fb      	ldr	r3, [r7, #28]
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d98a:	430a      	orrs	r2, r1
 800d98c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d98e:	69fb      	ldr	r3, [r7, #28]
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	685b      	ldr	r3, [r3, #4]
 800d994:	4abe      	ldr	r2, [pc, #760]	@ (800dc90 <UART_SetConfig+0x344>)
 800d996:	4013      	ands	r3, r2
 800d998:	0019      	movs	r1, r3
 800d99a:	69fb      	ldr	r3, [r7, #28]
 800d99c:	68da      	ldr	r2, [r3, #12]
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	430a      	orrs	r2, r1
 800d9a4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d9a6:	69fb      	ldr	r3, [r7, #28]
 800d9a8:	699b      	ldr	r3, [r3, #24]
 800d9aa:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	681b      	ldr	r3, [r3, #0]
 800d9b0:	4ab8      	ldr	r2, [pc, #736]	@ (800dc94 <UART_SetConfig+0x348>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d004      	beq.n	800d9c0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800d9b6:	69fb      	ldr	r3, [r7, #28]
 800d9b8:	6a1b      	ldr	r3, [r3, #32]
 800d9ba:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d9c0:	69fb      	ldr	r3, [r7, #28]
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	689b      	ldr	r3, [r3, #8]
 800d9c6:	4ab4      	ldr	r2, [pc, #720]	@ (800dc98 <UART_SetConfig+0x34c>)
 800d9c8:	4013      	ands	r3, r2
 800d9ca:	0019      	movs	r1, r3
 800d9cc:	69fb      	ldr	r3, [r7, #28]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d9d2:	430a      	orrs	r2, r1
 800d9d4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d9d6:	69fb      	ldr	r3, [r7, #28]
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	4ab0      	ldr	r2, [pc, #704]	@ (800dc9c <UART_SetConfig+0x350>)
 800d9dc:	4293      	cmp	r3, r2
 800d9de:	d131      	bne.n	800da44 <UART_SetConfig+0xf8>
 800d9e0:	4baf      	ldr	r3, [pc, #700]	@ (800dca0 <UART_SetConfig+0x354>)
 800d9e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d9e4:	2203      	movs	r2, #3
 800d9e6:	4013      	ands	r3, r2
 800d9e8:	2b03      	cmp	r3, #3
 800d9ea:	d01d      	beq.n	800da28 <UART_SetConfig+0xdc>
 800d9ec:	d823      	bhi.n	800da36 <UART_SetConfig+0xea>
 800d9ee:	2b02      	cmp	r3, #2
 800d9f0:	d00c      	beq.n	800da0c <UART_SetConfig+0xc0>
 800d9f2:	d820      	bhi.n	800da36 <UART_SetConfig+0xea>
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d002      	beq.n	800d9fe <UART_SetConfig+0xb2>
 800d9f8:	2b01      	cmp	r3, #1
 800d9fa:	d00e      	beq.n	800da1a <UART_SetConfig+0xce>
 800d9fc:	e01b      	b.n	800da36 <UART_SetConfig+0xea>
 800d9fe:	231b      	movs	r3, #27
 800da00:	2218      	movs	r2, #24
 800da02:	189b      	adds	r3, r3, r2
 800da04:	19db      	adds	r3, r3, r7
 800da06:	2201      	movs	r2, #1
 800da08:	701a      	strb	r2, [r3, #0]
 800da0a:	e0b4      	b.n	800db76 <UART_SetConfig+0x22a>
 800da0c:	231b      	movs	r3, #27
 800da0e:	2218      	movs	r2, #24
 800da10:	189b      	adds	r3, r3, r2
 800da12:	19db      	adds	r3, r3, r7
 800da14:	2202      	movs	r2, #2
 800da16:	701a      	strb	r2, [r3, #0]
 800da18:	e0ad      	b.n	800db76 <UART_SetConfig+0x22a>
 800da1a:	231b      	movs	r3, #27
 800da1c:	2218      	movs	r2, #24
 800da1e:	189b      	adds	r3, r3, r2
 800da20:	19db      	adds	r3, r3, r7
 800da22:	2204      	movs	r2, #4
 800da24:	701a      	strb	r2, [r3, #0]
 800da26:	e0a6      	b.n	800db76 <UART_SetConfig+0x22a>
 800da28:	231b      	movs	r3, #27
 800da2a:	2218      	movs	r2, #24
 800da2c:	189b      	adds	r3, r3, r2
 800da2e:	19db      	adds	r3, r3, r7
 800da30:	2208      	movs	r2, #8
 800da32:	701a      	strb	r2, [r3, #0]
 800da34:	e09f      	b.n	800db76 <UART_SetConfig+0x22a>
 800da36:	231b      	movs	r3, #27
 800da38:	2218      	movs	r2, #24
 800da3a:	189b      	adds	r3, r3, r2
 800da3c:	19db      	adds	r3, r3, r7
 800da3e:	2210      	movs	r2, #16
 800da40:	701a      	strb	r2, [r3, #0]
 800da42:	e098      	b.n	800db76 <UART_SetConfig+0x22a>
 800da44:	69fb      	ldr	r3, [r7, #28]
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	4a96      	ldr	r2, [pc, #600]	@ (800dca4 <UART_SetConfig+0x358>)
 800da4a:	4293      	cmp	r3, r2
 800da4c:	d131      	bne.n	800dab2 <UART_SetConfig+0x166>
 800da4e:	4b94      	ldr	r3, [pc, #592]	@ (800dca0 <UART_SetConfig+0x354>)
 800da50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800da52:	220c      	movs	r2, #12
 800da54:	4013      	ands	r3, r2
 800da56:	2b0c      	cmp	r3, #12
 800da58:	d01d      	beq.n	800da96 <UART_SetConfig+0x14a>
 800da5a:	d823      	bhi.n	800daa4 <UART_SetConfig+0x158>
 800da5c:	2b08      	cmp	r3, #8
 800da5e:	d00c      	beq.n	800da7a <UART_SetConfig+0x12e>
 800da60:	d820      	bhi.n	800daa4 <UART_SetConfig+0x158>
 800da62:	2b00      	cmp	r3, #0
 800da64:	d002      	beq.n	800da6c <UART_SetConfig+0x120>
 800da66:	2b04      	cmp	r3, #4
 800da68:	d00e      	beq.n	800da88 <UART_SetConfig+0x13c>
 800da6a:	e01b      	b.n	800daa4 <UART_SetConfig+0x158>
 800da6c:	231b      	movs	r3, #27
 800da6e:	2218      	movs	r2, #24
 800da70:	189b      	adds	r3, r3, r2
 800da72:	19db      	adds	r3, r3, r7
 800da74:	2200      	movs	r2, #0
 800da76:	701a      	strb	r2, [r3, #0]
 800da78:	e07d      	b.n	800db76 <UART_SetConfig+0x22a>
 800da7a:	231b      	movs	r3, #27
 800da7c:	2218      	movs	r2, #24
 800da7e:	189b      	adds	r3, r3, r2
 800da80:	19db      	adds	r3, r3, r7
 800da82:	2202      	movs	r2, #2
 800da84:	701a      	strb	r2, [r3, #0]
 800da86:	e076      	b.n	800db76 <UART_SetConfig+0x22a>
 800da88:	231b      	movs	r3, #27
 800da8a:	2218      	movs	r2, #24
 800da8c:	189b      	adds	r3, r3, r2
 800da8e:	19db      	adds	r3, r3, r7
 800da90:	2204      	movs	r2, #4
 800da92:	701a      	strb	r2, [r3, #0]
 800da94:	e06f      	b.n	800db76 <UART_SetConfig+0x22a>
 800da96:	231b      	movs	r3, #27
 800da98:	2218      	movs	r2, #24
 800da9a:	189b      	adds	r3, r3, r2
 800da9c:	19db      	adds	r3, r3, r7
 800da9e:	2208      	movs	r2, #8
 800daa0:	701a      	strb	r2, [r3, #0]
 800daa2:	e068      	b.n	800db76 <UART_SetConfig+0x22a>
 800daa4:	231b      	movs	r3, #27
 800daa6:	2218      	movs	r2, #24
 800daa8:	189b      	adds	r3, r3, r2
 800daaa:	19db      	adds	r3, r3, r7
 800daac:	2210      	movs	r2, #16
 800daae:	701a      	strb	r2, [r3, #0]
 800dab0:	e061      	b.n	800db76 <UART_SetConfig+0x22a>
 800dab2:	69fb      	ldr	r3, [r7, #28]
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	4a7c      	ldr	r2, [pc, #496]	@ (800dca8 <UART_SetConfig+0x35c>)
 800dab8:	4293      	cmp	r3, r2
 800daba:	d106      	bne.n	800daca <UART_SetConfig+0x17e>
 800dabc:	231b      	movs	r3, #27
 800dabe:	2218      	movs	r2, #24
 800dac0:	189b      	adds	r3, r3, r2
 800dac2:	19db      	adds	r3, r3, r7
 800dac4:	2200      	movs	r2, #0
 800dac6:	701a      	strb	r2, [r3, #0]
 800dac8:	e055      	b.n	800db76 <UART_SetConfig+0x22a>
 800daca:	69fb      	ldr	r3, [r7, #28]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	4a77      	ldr	r2, [pc, #476]	@ (800dcac <UART_SetConfig+0x360>)
 800dad0:	4293      	cmp	r3, r2
 800dad2:	d106      	bne.n	800dae2 <UART_SetConfig+0x196>
 800dad4:	231b      	movs	r3, #27
 800dad6:	2218      	movs	r2, #24
 800dad8:	189b      	adds	r3, r3, r2
 800dada:	19db      	adds	r3, r3, r7
 800dadc:	2200      	movs	r2, #0
 800dade:	701a      	strb	r2, [r3, #0]
 800dae0:	e049      	b.n	800db76 <UART_SetConfig+0x22a>
 800dae2:	69fb      	ldr	r3, [r7, #28]
 800dae4:	681b      	ldr	r3, [r3, #0]
 800dae6:	4a6b      	ldr	r2, [pc, #428]	@ (800dc94 <UART_SetConfig+0x348>)
 800dae8:	4293      	cmp	r3, r2
 800daea:	d13e      	bne.n	800db6a <UART_SetConfig+0x21e>
 800daec:	4b6c      	ldr	r3, [pc, #432]	@ (800dca0 <UART_SetConfig+0x354>)
 800daee:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800daf0:	23c0      	movs	r3, #192	@ 0xc0
 800daf2:	011b      	lsls	r3, r3, #4
 800daf4:	4013      	ands	r3, r2
 800daf6:	22c0      	movs	r2, #192	@ 0xc0
 800daf8:	0112      	lsls	r2, r2, #4
 800dafa:	4293      	cmp	r3, r2
 800dafc:	d027      	beq.n	800db4e <UART_SetConfig+0x202>
 800dafe:	22c0      	movs	r2, #192	@ 0xc0
 800db00:	0112      	lsls	r2, r2, #4
 800db02:	4293      	cmp	r3, r2
 800db04:	d82a      	bhi.n	800db5c <UART_SetConfig+0x210>
 800db06:	2280      	movs	r2, #128	@ 0x80
 800db08:	0112      	lsls	r2, r2, #4
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d011      	beq.n	800db32 <UART_SetConfig+0x1e6>
 800db0e:	2280      	movs	r2, #128	@ 0x80
 800db10:	0112      	lsls	r2, r2, #4
 800db12:	4293      	cmp	r3, r2
 800db14:	d822      	bhi.n	800db5c <UART_SetConfig+0x210>
 800db16:	2b00      	cmp	r3, #0
 800db18:	d004      	beq.n	800db24 <UART_SetConfig+0x1d8>
 800db1a:	2280      	movs	r2, #128	@ 0x80
 800db1c:	00d2      	lsls	r2, r2, #3
 800db1e:	4293      	cmp	r3, r2
 800db20:	d00e      	beq.n	800db40 <UART_SetConfig+0x1f4>
 800db22:	e01b      	b.n	800db5c <UART_SetConfig+0x210>
 800db24:	231b      	movs	r3, #27
 800db26:	2218      	movs	r2, #24
 800db28:	189b      	adds	r3, r3, r2
 800db2a:	19db      	adds	r3, r3, r7
 800db2c:	2200      	movs	r2, #0
 800db2e:	701a      	strb	r2, [r3, #0]
 800db30:	e021      	b.n	800db76 <UART_SetConfig+0x22a>
 800db32:	231b      	movs	r3, #27
 800db34:	2218      	movs	r2, #24
 800db36:	189b      	adds	r3, r3, r2
 800db38:	19db      	adds	r3, r3, r7
 800db3a:	2202      	movs	r2, #2
 800db3c:	701a      	strb	r2, [r3, #0]
 800db3e:	e01a      	b.n	800db76 <UART_SetConfig+0x22a>
 800db40:	231b      	movs	r3, #27
 800db42:	2218      	movs	r2, #24
 800db44:	189b      	adds	r3, r3, r2
 800db46:	19db      	adds	r3, r3, r7
 800db48:	2204      	movs	r2, #4
 800db4a:	701a      	strb	r2, [r3, #0]
 800db4c:	e013      	b.n	800db76 <UART_SetConfig+0x22a>
 800db4e:	231b      	movs	r3, #27
 800db50:	2218      	movs	r2, #24
 800db52:	189b      	adds	r3, r3, r2
 800db54:	19db      	adds	r3, r3, r7
 800db56:	2208      	movs	r2, #8
 800db58:	701a      	strb	r2, [r3, #0]
 800db5a:	e00c      	b.n	800db76 <UART_SetConfig+0x22a>
 800db5c:	231b      	movs	r3, #27
 800db5e:	2218      	movs	r2, #24
 800db60:	189b      	adds	r3, r3, r2
 800db62:	19db      	adds	r3, r3, r7
 800db64:	2210      	movs	r2, #16
 800db66:	701a      	strb	r2, [r3, #0]
 800db68:	e005      	b.n	800db76 <UART_SetConfig+0x22a>
 800db6a:	231b      	movs	r3, #27
 800db6c:	2218      	movs	r2, #24
 800db6e:	189b      	adds	r3, r3, r2
 800db70:	19db      	adds	r3, r3, r7
 800db72:	2210      	movs	r2, #16
 800db74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800db76:	69fb      	ldr	r3, [r7, #28]
 800db78:	681b      	ldr	r3, [r3, #0]
 800db7a:	4a46      	ldr	r2, [pc, #280]	@ (800dc94 <UART_SetConfig+0x348>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d000      	beq.n	800db82 <UART_SetConfig+0x236>
 800db80:	e09a      	b.n	800dcb8 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800db82:	231b      	movs	r3, #27
 800db84:	2218      	movs	r2, #24
 800db86:	189b      	adds	r3, r3, r2
 800db88:	19db      	adds	r3, r3, r7
 800db8a:	781b      	ldrb	r3, [r3, #0]
 800db8c:	2b08      	cmp	r3, #8
 800db8e:	d01d      	beq.n	800dbcc <UART_SetConfig+0x280>
 800db90:	dc20      	bgt.n	800dbd4 <UART_SetConfig+0x288>
 800db92:	2b04      	cmp	r3, #4
 800db94:	d015      	beq.n	800dbc2 <UART_SetConfig+0x276>
 800db96:	dc1d      	bgt.n	800dbd4 <UART_SetConfig+0x288>
 800db98:	2b00      	cmp	r3, #0
 800db9a:	d002      	beq.n	800dba2 <UART_SetConfig+0x256>
 800db9c:	2b02      	cmp	r3, #2
 800db9e:	d005      	beq.n	800dbac <UART_SetConfig+0x260>
 800dba0:	e018      	b.n	800dbd4 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dba2:	f7fe fc51 	bl	800c448 <HAL_RCC_GetPCLK1Freq>
 800dba6:	0003      	movs	r3, r0
 800dba8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dbaa:	e01c      	b.n	800dbe6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dbac:	4b3c      	ldr	r3, [pc, #240]	@ (800dca0 <UART_SetConfig+0x354>)
 800dbae:	681b      	ldr	r3, [r3, #0]
 800dbb0:	2210      	movs	r2, #16
 800dbb2:	4013      	ands	r3, r2
 800dbb4:	d002      	beq.n	800dbbc <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800dbb6:	4b3e      	ldr	r3, [pc, #248]	@ (800dcb0 <UART_SetConfig+0x364>)
 800dbb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dbba:	e014      	b.n	800dbe6 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800dbbc:	4b3d      	ldr	r3, [pc, #244]	@ (800dcb4 <UART_SetConfig+0x368>)
 800dbbe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dbc0:	e011      	b.n	800dbe6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dbc2:	f7fe fb91 	bl	800c2e8 <HAL_RCC_GetSysClockFreq>
 800dbc6:	0003      	movs	r3, r0
 800dbc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dbca:	e00c      	b.n	800dbe6 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dbcc:	2380      	movs	r3, #128	@ 0x80
 800dbce:	021b      	lsls	r3, r3, #8
 800dbd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dbd2:	e008      	b.n	800dbe6 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800dbd4:	2300      	movs	r3, #0
 800dbd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800dbd8:	231a      	movs	r3, #26
 800dbda:	2218      	movs	r2, #24
 800dbdc:	189b      	adds	r3, r3, r2
 800dbde:	19db      	adds	r3, r3, r7
 800dbe0:	2201      	movs	r2, #1
 800dbe2:	701a      	strb	r2, [r3, #0]
        break;
 800dbe4:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800dbe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	d100      	bne.n	800dbee <UART_SetConfig+0x2a2>
 800dbec:	e133      	b.n	800de56 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dbee:	69fb      	ldr	r3, [r7, #28]
 800dbf0:	685a      	ldr	r2, [r3, #4]
 800dbf2:	0013      	movs	r3, r2
 800dbf4:	005b      	lsls	r3, r3, #1
 800dbf6:	189b      	adds	r3, r3, r2
 800dbf8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dbfa:	429a      	cmp	r2, r3
 800dbfc:	d305      	bcc.n	800dc0a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800dbfe:	69fb      	ldr	r3, [r7, #28]
 800dc00:	685b      	ldr	r3, [r3, #4]
 800dc02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800dc04:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d906      	bls.n	800dc18 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800dc0a:	231a      	movs	r3, #26
 800dc0c:	2218      	movs	r2, #24
 800dc0e:	189b      	adds	r3, r3, r2
 800dc10:	19db      	adds	r3, r3, r7
 800dc12:	2201      	movs	r2, #1
 800dc14:	701a      	strb	r2, [r3, #0]
 800dc16:	e11e      	b.n	800de56 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800dc18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc1a:	613b      	str	r3, [r7, #16]
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	617b      	str	r3, [r7, #20]
 800dc20:	6939      	ldr	r1, [r7, #16]
 800dc22:	697a      	ldr	r2, [r7, #20]
 800dc24:	000b      	movs	r3, r1
 800dc26:	0e1b      	lsrs	r3, r3, #24
 800dc28:	0010      	movs	r0, r2
 800dc2a:	0205      	lsls	r5, r0, #8
 800dc2c:	431d      	orrs	r5, r3
 800dc2e:	000b      	movs	r3, r1
 800dc30:	021c      	lsls	r4, r3, #8
 800dc32:	69fb      	ldr	r3, [r7, #28]
 800dc34:	685b      	ldr	r3, [r3, #4]
 800dc36:	085b      	lsrs	r3, r3, #1
 800dc38:	60bb      	str	r3, [r7, #8]
 800dc3a:	2300      	movs	r3, #0
 800dc3c:	60fb      	str	r3, [r7, #12]
 800dc3e:	68b8      	ldr	r0, [r7, #8]
 800dc40:	68f9      	ldr	r1, [r7, #12]
 800dc42:	1900      	adds	r0, r0, r4
 800dc44:	4169      	adcs	r1, r5
 800dc46:	69fb      	ldr	r3, [r7, #28]
 800dc48:	685b      	ldr	r3, [r3, #4]
 800dc4a:	603b      	str	r3, [r7, #0]
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	607b      	str	r3, [r7, #4]
 800dc50:	683a      	ldr	r2, [r7, #0]
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	f7f2 fc62 	bl	800051c <__aeabi_uldivmod>
 800dc58:	0002      	movs	r2, r0
 800dc5a:	000b      	movs	r3, r1
 800dc5c:	0013      	movs	r3, r2
 800dc5e:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800dc60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc62:	23c0      	movs	r3, #192	@ 0xc0
 800dc64:	009b      	lsls	r3, r3, #2
 800dc66:	429a      	cmp	r2, r3
 800dc68:	d309      	bcc.n	800dc7e <UART_SetConfig+0x332>
 800dc6a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc6c:	2380      	movs	r3, #128	@ 0x80
 800dc6e:	035b      	lsls	r3, r3, #13
 800dc70:	429a      	cmp	r2, r3
 800dc72:	d204      	bcs.n	800dc7e <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800dc74:	69fb      	ldr	r3, [r7, #28]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dc7a:	60da      	str	r2, [r3, #12]
 800dc7c:	e0eb      	b.n	800de56 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800dc7e:	231a      	movs	r3, #26
 800dc80:	2218      	movs	r2, #24
 800dc82:	189b      	adds	r3, r3, r2
 800dc84:	19db      	adds	r3, r3, r7
 800dc86:	2201      	movs	r2, #1
 800dc88:	701a      	strb	r2, [r3, #0]
 800dc8a:	e0e4      	b.n	800de56 <UART_SetConfig+0x50a>
 800dc8c:	efff69f3 	.word	0xefff69f3
 800dc90:	ffffcfff 	.word	0xffffcfff
 800dc94:	40004800 	.word	0x40004800
 800dc98:	fffff4ff 	.word	0xfffff4ff
 800dc9c:	40013800 	.word	0x40013800
 800dca0:	40021000 	.word	0x40021000
 800dca4:	40004400 	.word	0x40004400
 800dca8:	40004c00 	.word	0x40004c00
 800dcac:	40005000 	.word	0x40005000
 800dcb0:	003d0900 	.word	0x003d0900
 800dcb4:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800dcb8:	69fb      	ldr	r3, [r7, #28]
 800dcba:	69da      	ldr	r2, [r3, #28]
 800dcbc:	2380      	movs	r3, #128	@ 0x80
 800dcbe:	021b      	lsls	r3, r3, #8
 800dcc0:	429a      	cmp	r2, r3
 800dcc2:	d000      	beq.n	800dcc6 <UART_SetConfig+0x37a>
 800dcc4:	e070      	b.n	800dda8 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800dcc6:	231b      	movs	r3, #27
 800dcc8:	2218      	movs	r2, #24
 800dcca:	189b      	adds	r3, r3, r2
 800dccc:	19db      	adds	r3, r3, r7
 800dcce:	781b      	ldrb	r3, [r3, #0]
 800dcd0:	2b08      	cmp	r3, #8
 800dcd2:	d822      	bhi.n	800dd1a <UART_SetConfig+0x3ce>
 800dcd4:	009a      	lsls	r2, r3, #2
 800dcd6:	4b67      	ldr	r3, [pc, #412]	@ (800de74 <UART_SetConfig+0x528>)
 800dcd8:	18d3      	adds	r3, r2, r3
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800dcde:	f7fe fbb3 	bl	800c448 <HAL_RCC_GetPCLK1Freq>
 800dce2:	0003      	movs	r3, r0
 800dce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dce6:	e021      	b.n	800dd2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800dce8:	f7fe fbc4 	bl	800c474 <HAL_RCC_GetPCLK2Freq>
 800dcec:	0003      	movs	r3, r0
 800dcee:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dcf0:	e01c      	b.n	800dd2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800dcf2:	4b61      	ldr	r3, [pc, #388]	@ (800de78 <UART_SetConfig+0x52c>)
 800dcf4:	681b      	ldr	r3, [r3, #0]
 800dcf6:	2210      	movs	r2, #16
 800dcf8:	4013      	ands	r3, r2
 800dcfa:	d002      	beq.n	800dd02 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800dcfc:	4b5f      	ldr	r3, [pc, #380]	@ (800de7c <UART_SetConfig+0x530>)
 800dcfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dd00:	e014      	b.n	800dd2c <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800dd02:	4b5f      	ldr	r3, [pc, #380]	@ (800de80 <UART_SetConfig+0x534>)
 800dd04:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dd06:	e011      	b.n	800dd2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800dd08:	f7fe faee 	bl	800c2e8 <HAL_RCC_GetSysClockFreq>
 800dd0c:	0003      	movs	r3, r0
 800dd0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dd10:	e00c      	b.n	800dd2c <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800dd12:	2380      	movs	r3, #128	@ 0x80
 800dd14:	021b      	lsls	r3, r3, #8
 800dd16:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dd18:	e008      	b.n	800dd2c <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800dd1a:	2300      	movs	r3, #0
 800dd1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800dd1e:	231a      	movs	r3, #26
 800dd20:	2218      	movs	r2, #24
 800dd22:	189b      	adds	r3, r3, r2
 800dd24:	19db      	adds	r3, r3, r7
 800dd26:	2201      	movs	r2, #1
 800dd28:	701a      	strb	r2, [r3, #0]
        break;
 800dd2a:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800dd2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d100      	bne.n	800dd34 <UART_SetConfig+0x3e8>
 800dd32:	e090      	b.n	800de56 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800dd34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd36:	005a      	lsls	r2, r3, #1
 800dd38:	69fb      	ldr	r3, [r7, #28]
 800dd3a:	685b      	ldr	r3, [r3, #4]
 800dd3c:	085b      	lsrs	r3, r3, #1
 800dd3e:	18d2      	adds	r2, r2, r3
 800dd40:	69fb      	ldr	r3, [r7, #28]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	0019      	movs	r1, r3
 800dd46:	0010      	movs	r0, r2
 800dd48:	f7f2 f9fa 	bl	8000140 <__udivsi3>
 800dd4c:	0003      	movs	r3, r0
 800dd4e:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800dd50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd52:	2b0f      	cmp	r3, #15
 800dd54:	d921      	bls.n	800dd9a <UART_SetConfig+0x44e>
 800dd56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dd58:	2380      	movs	r3, #128	@ 0x80
 800dd5a:	025b      	lsls	r3, r3, #9
 800dd5c:	429a      	cmp	r2, r3
 800dd5e:	d21c      	bcs.n	800dd9a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800dd60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd62:	b29a      	uxth	r2, r3
 800dd64:	200e      	movs	r0, #14
 800dd66:	2418      	movs	r4, #24
 800dd68:	1903      	adds	r3, r0, r4
 800dd6a:	19db      	adds	r3, r3, r7
 800dd6c:	210f      	movs	r1, #15
 800dd6e:	438a      	bics	r2, r1
 800dd70:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800dd72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dd74:	085b      	lsrs	r3, r3, #1
 800dd76:	b29b      	uxth	r3, r3
 800dd78:	2207      	movs	r2, #7
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	b299      	uxth	r1, r3
 800dd7e:	1903      	adds	r3, r0, r4
 800dd80:	19db      	adds	r3, r3, r7
 800dd82:	1902      	adds	r2, r0, r4
 800dd84:	19d2      	adds	r2, r2, r7
 800dd86:	8812      	ldrh	r2, [r2, #0]
 800dd88:	430a      	orrs	r2, r1
 800dd8a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	1902      	adds	r2, r0, r4
 800dd92:	19d2      	adds	r2, r2, r7
 800dd94:	8812      	ldrh	r2, [r2, #0]
 800dd96:	60da      	str	r2, [r3, #12]
 800dd98:	e05d      	b.n	800de56 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800dd9a:	231a      	movs	r3, #26
 800dd9c:	2218      	movs	r2, #24
 800dd9e:	189b      	adds	r3, r3, r2
 800dda0:	19db      	adds	r3, r3, r7
 800dda2:	2201      	movs	r2, #1
 800dda4:	701a      	strb	r2, [r3, #0]
 800dda6:	e056      	b.n	800de56 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800dda8:	231b      	movs	r3, #27
 800ddaa:	2218      	movs	r2, #24
 800ddac:	189b      	adds	r3, r3, r2
 800ddae:	19db      	adds	r3, r3, r7
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	2b08      	cmp	r3, #8
 800ddb4:	d822      	bhi.n	800ddfc <UART_SetConfig+0x4b0>
 800ddb6:	009a      	lsls	r2, r3, #2
 800ddb8:	4b32      	ldr	r3, [pc, #200]	@ (800de84 <UART_SetConfig+0x538>)
 800ddba:	18d3      	adds	r3, r2, r3
 800ddbc:	681b      	ldr	r3, [r3, #0]
 800ddbe:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ddc0:	f7fe fb42 	bl	800c448 <HAL_RCC_GetPCLK1Freq>
 800ddc4:	0003      	movs	r3, r0
 800ddc6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ddc8:	e021      	b.n	800de0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ddca:	f7fe fb53 	bl	800c474 <HAL_RCC_GetPCLK2Freq>
 800ddce:	0003      	movs	r3, r0
 800ddd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ddd2:	e01c      	b.n	800de0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ddd4:	4b28      	ldr	r3, [pc, #160]	@ (800de78 <UART_SetConfig+0x52c>)
 800ddd6:	681b      	ldr	r3, [r3, #0]
 800ddd8:	2210      	movs	r2, #16
 800ddda:	4013      	ands	r3, r2
 800dddc:	d002      	beq.n	800dde4 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800ddde:	4b27      	ldr	r3, [pc, #156]	@ (800de7c <UART_SetConfig+0x530>)
 800dde0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800dde2:	e014      	b.n	800de0e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800dde4:	4b26      	ldr	r3, [pc, #152]	@ (800de80 <UART_SetConfig+0x534>)
 800dde6:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800dde8:	e011      	b.n	800de0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ddea:	f7fe fa7d 	bl	800c2e8 <HAL_RCC_GetSysClockFreq>
 800ddee:	0003      	movs	r3, r0
 800ddf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ddf2:	e00c      	b.n	800de0e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ddf4:	2380      	movs	r3, #128	@ 0x80
 800ddf6:	021b      	lsls	r3, r3, #8
 800ddf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800ddfa:	e008      	b.n	800de0e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800ddfc:	2300      	movs	r3, #0
 800ddfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800de00:	231a      	movs	r3, #26
 800de02:	2218      	movs	r2, #24
 800de04:	189b      	adds	r3, r3, r2
 800de06:	19db      	adds	r3, r3, r7
 800de08:	2201      	movs	r2, #1
 800de0a:	701a      	strb	r2, [r3, #0]
        break;
 800de0c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800de0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de10:	2b00      	cmp	r3, #0
 800de12:	d020      	beq.n	800de56 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800de14:	69fb      	ldr	r3, [r7, #28]
 800de16:	685b      	ldr	r3, [r3, #4]
 800de18:	085a      	lsrs	r2, r3, #1
 800de1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de1c:	18d2      	adds	r2, r2, r3
 800de1e:	69fb      	ldr	r3, [r7, #28]
 800de20:	685b      	ldr	r3, [r3, #4]
 800de22:	0019      	movs	r1, r3
 800de24:	0010      	movs	r0, r2
 800de26:	f7f2 f98b 	bl	8000140 <__udivsi3>
 800de2a:	0003      	movs	r3, r0
 800de2c:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800de2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de30:	2b0f      	cmp	r3, #15
 800de32:	d90a      	bls.n	800de4a <UART_SetConfig+0x4fe>
 800de34:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800de36:	2380      	movs	r3, #128	@ 0x80
 800de38:	025b      	lsls	r3, r3, #9
 800de3a:	429a      	cmp	r2, r3
 800de3c:	d205      	bcs.n	800de4a <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800de3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800de40:	b29a      	uxth	r2, r3
 800de42:	69fb      	ldr	r3, [r7, #28]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	60da      	str	r2, [r3, #12]
 800de48:	e005      	b.n	800de56 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800de4a:	231a      	movs	r3, #26
 800de4c:	2218      	movs	r2, #24
 800de4e:	189b      	adds	r3, r3, r2
 800de50:	19db      	adds	r3, r3, r7
 800de52:	2201      	movs	r2, #1
 800de54:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800de56:	69fb      	ldr	r3, [r7, #28]
 800de58:	2200      	movs	r2, #0
 800de5a:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800de5c:	69fb      	ldr	r3, [r7, #28]
 800de5e:	2200      	movs	r2, #0
 800de60:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800de62:	231a      	movs	r3, #26
 800de64:	2218      	movs	r2, #24
 800de66:	189b      	adds	r3, r3, r2
 800de68:	19db      	adds	r3, r3, r7
 800de6a:	781b      	ldrb	r3, [r3, #0]
}
 800de6c:	0018      	movs	r0, r3
 800de6e:	46bd      	mov	sp, r7
 800de70:	b00e      	add	sp, #56	@ 0x38
 800de72:	bdb0      	pop	{r4, r5, r7, pc}
 800de74:	080125dc 	.word	0x080125dc
 800de78:	40021000 	.word	0x40021000
 800de7c:	003d0900 	.word	0x003d0900
 800de80:	00f42400 	.word	0x00f42400
 800de84:	08012600 	.word	0x08012600

0800de88 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800de88:	b580      	push	{r7, lr}
 800de8a:	b082      	sub	sp, #8
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800de90:	687b      	ldr	r3, [r7, #4]
 800de92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de94:	2201      	movs	r2, #1
 800de96:	4013      	ands	r3, r2
 800de98:	d00b      	beq.n	800deb2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	681b      	ldr	r3, [r3, #0]
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	4a4a      	ldr	r2, [pc, #296]	@ (800dfcc <UART_AdvFeatureConfig+0x144>)
 800dea2:	4013      	ands	r3, r2
 800dea4:	0019      	movs	r1, r3
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800deaa:	687b      	ldr	r3, [r7, #4]
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	430a      	orrs	r2, r1
 800deb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800deb6:	2202      	movs	r2, #2
 800deb8:	4013      	ands	r3, r2
 800deba:	d00b      	beq.n	800ded4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800debc:	687b      	ldr	r3, [r7, #4]
 800debe:	681b      	ldr	r3, [r3, #0]
 800dec0:	685b      	ldr	r3, [r3, #4]
 800dec2:	4a43      	ldr	r2, [pc, #268]	@ (800dfd0 <UART_AdvFeatureConfig+0x148>)
 800dec4:	4013      	ands	r3, r2
 800dec6:	0019      	movs	r1, r3
 800dec8:	687b      	ldr	r3, [r7, #4]
 800deca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	681b      	ldr	r3, [r3, #0]
 800ded0:	430a      	orrs	r2, r1
 800ded2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ded8:	2204      	movs	r2, #4
 800deda:	4013      	ands	r3, r2
 800dedc:	d00b      	beq.n	800def6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800dede:	687b      	ldr	r3, [r7, #4]
 800dee0:	681b      	ldr	r3, [r3, #0]
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	4a3b      	ldr	r2, [pc, #236]	@ (800dfd4 <UART_AdvFeatureConfig+0x14c>)
 800dee6:	4013      	ands	r3, r2
 800dee8:	0019      	movs	r1, r3
 800deea:	687b      	ldr	r3, [r7, #4]
 800deec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800deee:	687b      	ldr	r3, [r7, #4]
 800def0:	681b      	ldr	r3, [r3, #0]
 800def2:	430a      	orrs	r2, r1
 800def4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800defa:	2208      	movs	r2, #8
 800defc:	4013      	ands	r3, r2
 800defe:	d00b      	beq.n	800df18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	681b      	ldr	r3, [r3, #0]
 800df04:	685b      	ldr	r3, [r3, #4]
 800df06:	4a34      	ldr	r2, [pc, #208]	@ (800dfd8 <UART_AdvFeatureConfig+0x150>)
 800df08:	4013      	ands	r3, r2
 800df0a:	0019      	movs	r1, r3
 800df0c:	687b      	ldr	r3, [r7, #4]
 800df0e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	681b      	ldr	r3, [r3, #0]
 800df14:	430a      	orrs	r2, r1
 800df16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df1c:	2210      	movs	r2, #16
 800df1e:	4013      	ands	r3, r2
 800df20:	d00b      	beq.n	800df3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	689b      	ldr	r3, [r3, #8]
 800df28:	4a2c      	ldr	r2, [pc, #176]	@ (800dfdc <UART_AdvFeatureConfig+0x154>)
 800df2a:	4013      	ands	r3, r2
 800df2c:	0019      	movs	r1, r3
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	681b      	ldr	r3, [r3, #0]
 800df36:	430a      	orrs	r2, r1
 800df38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df3e:	2220      	movs	r2, #32
 800df40:	4013      	ands	r3, r2
 800df42:	d00b      	beq.n	800df5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	689b      	ldr	r3, [r3, #8]
 800df4a:	4a25      	ldr	r2, [pc, #148]	@ (800dfe0 <UART_AdvFeatureConfig+0x158>)
 800df4c:	4013      	ands	r3, r2
 800df4e:	0019      	movs	r1, r3
 800df50:	687b      	ldr	r3, [r7, #4]
 800df52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800df54:	687b      	ldr	r3, [r7, #4]
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	430a      	orrs	r2, r1
 800df5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800df60:	2240      	movs	r2, #64	@ 0x40
 800df62:	4013      	ands	r3, r2
 800df64:	d01d      	beq.n	800dfa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	681b      	ldr	r3, [r3, #0]
 800df6a:	685b      	ldr	r3, [r3, #4]
 800df6c:	4a1d      	ldr	r2, [pc, #116]	@ (800dfe4 <UART_AdvFeatureConfig+0x15c>)
 800df6e:	4013      	ands	r3, r2
 800df70:	0019      	movs	r1, r3
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df76:	687b      	ldr	r3, [r7, #4]
 800df78:	681b      	ldr	r3, [r3, #0]
 800df7a:	430a      	orrs	r2, r1
 800df7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800df82:	2380      	movs	r3, #128	@ 0x80
 800df84:	035b      	lsls	r3, r3, #13
 800df86:	429a      	cmp	r2, r3
 800df88:	d10b      	bne.n	800dfa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	681b      	ldr	r3, [r3, #0]
 800df8e:	685b      	ldr	r3, [r3, #4]
 800df90:	4a15      	ldr	r2, [pc, #84]	@ (800dfe8 <UART_AdvFeatureConfig+0x160>)
 800df92:	4013      	ands	r3, r2
 800df94:	0019      	movs	r1, r3
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	681b      	ldr	r3, [r3, #0]
 800df9e:	430a      	orrs	r2, r1
 800dfa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800dfa2:	687b      	ldr	r3, [r7, #4]
 800dfa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dfa6:	2280      	movs	r2, #128	@ 0x80
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	d00b      	beq.n	800dfc4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	685b      	ldr	r3, [r3, #4]
 800dfb2:	4a0e      	ldr	r2, [pc, #56]	@ (800dfec <UART_AdvFeatureConfig+0x164>)
 800dfb4:	4013      	ands	r3, r2
 800dfb6:	0019      	movs	r1, r3
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	430a      	orrs	r2, r1
 800dfc2:	605a      	str	r2, [r3, #4]
  }
}
 800dfc4:	46c0      	nop			@ (mov r8, r8)
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	b002      	add	sp, #8
 800dfca:	bd80      	pop	{r7, pc}
 800dfcc:	fffdffff 	.word	0xfffdffff
 800dfd0:	fffeffff 	.word	0xfffeffff
 800dfd4:	fffbffff 	.word	0xfffbffff
 800dfd8:	ffff7fff 	.word	0xffff7fff
 800dfdc:	ffffefff 	.word	0xffffefff
 800dfe0:	ffffdfff 	.word	0xffffdfff
 800dfe4:	ffefffff 	.word	0xffefffff
 800dfe8:	ff9fffff 	.word	0xff9fffff
 800dfec:	fff7ffff 	.word	0xfff7ffff

0800dff0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800dff0:	b580      	push	{r7, lr}
 800dff2:	b092      	sub	sp, #72	@ 0x48
 800dff4:	af02      	add	r7, sp, #8
 800dff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2284      	movs	r2, #132	@ 0x84
 800dffc:	2100      	movs	r1, #0
 800dffe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800e000:	f7fa f998 	bl	8008334 <HAL_GetTick>
 800e004:	0003      	movs	r3, r0
 800e006:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800e008:	687b      	ldr	r3, [r7, #4]
 800e00a:	681b      	ldr	r3, [r3, #0]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2208      	movs	r2, #8
 800e010:	4013      	ands	r3, r2
 800e012:	2b08      	cmp	r3, #8
 800e014:	d12c      	bne.n	800e070 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e016:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e018:	2280      	movs	r2, #128	@ 0x80
 800e01a:	0391      	lsls	r1, r2, #14
 800e01c:	6878      	ldr	r0, [r7, #4]
 800e01e:	4a46      	ldr	r2, [pc, #280]	@ (800e138 <UART_CheckIdleState+0x148>)
 800e020:	9200      	str	r2, [sp, #0]
 800e022:	2200      	movs	r2, #0
 800e024:	f000 f88c 	bl	800e140 <UART_WaitOnFlagUntilTimeout>
 800e028:	1e03      	subs	r3, r0, #0
 800e02a:	d021      	beq.n	800e070 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e02c:	f3ef 8310 	mrs	r3, PRIMASK
 800e030:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800e034:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e036:	2301      	movs	r3, #1
 800e038:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e03a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e03c:	f383 8810 	msr	PRIMASK, r3
}
 800e040:	46c0      	nop			@ (mov r8, r8)
 800e042:	687b      	ldr	r3, [r7, #4]
 800e044:	681b      	ldr	r3, [r3, #0]
 800e046:	681a      	ldr	r2, [r3, #0]
 800e048:	687b      	ldr	r3, [r7, #4]
 800e04a:	681b      	ldr	r3, [r3, #0]
 800e04c:	2180      	movs	r1, #128	@ 0x80
 800e04e:	438a      	bics	r2, r1
 800e050:	601a      	str	r2, [r3, #0]
 800e052:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e054:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e056:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e058:	f383 8810 	msr	PRIMASK, r3
}
 800e05c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	2220      	movs	r2, #32
 800e062:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	2278      	movs	r2, #120	@ 0x78
 800e068:	2100      	movs	r1, #0
 800e06a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e06c:	2303      	movs	r3, #3
 800e06e:	e05f      	b.n	800e130 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	681b      	ldr	r3, [r3, #0]
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	2204      	movs	r2, #4
 800e078:	4013      	ands	r3, r2
 800e07a:	2b04      	cmp	r3, #4
 800e07c:	d146      	bne.n	800e10c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800e07e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e080:	2280      	movs	r2, #128	@ 0x80
 800e082:	03d1      	lsls	r1, r2, #15
 800e084:	6878      	ldr	r0, [r7, #4]
 800e086:	4a2c      	ldr	r2, [pc, #176]	@ (800e138 <UART_CheckIdleState+0x148>)
 800e088:	9200      	str	r2, [sp, #0]
 800e08a:	2200      	movs	r2, #0
 800e08c:	f000 f858 	bl	800e140 <UART_WaitOnFlagUntilTimeout>
 800e090:	1e03      	subs	r3, r0, #0
 800e092:	d03b      	beq.n	800e10c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e094:	f3ef 8310 	mrs	r3, PRIMASK
 800e098:	60fb      	str	r3, [r7, #12]
  return(result);
 800e09a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e09c:	637b      	str	r3, [r7, #52]	@ 0x34
 800e09e:	2301      	movs	r3, #1
 800e0a0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	f383 8810 	msr	PRIMASK, r3
}
 800e0a8:	46c0      	nop			@ (mov r8, r8)
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	681a      	ldr	r2, [r3, #0]
 800e0b0:	687b      	ldr	r3, [r7, #4]
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	4921      	ldr	r1, [pc, #132]	@ (800e13c <UART_CheckIdleState+0x14c>)
 800e0b6:	400a      	ands	r2, r1
 800e0b8:	601a      	str	r2, [r3, #0]
 800e0ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e0bc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0be:	697b      	ldr	r3, [r7, #20]
 800e0c0:	f383 8810 	msr	PRIMASK, r3
}
 800e0c4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e0c6:	f3ef 8310 	mrs	r3, PRIMASK
 800e0ca:	61bb      	str	r3, [r7, #24]
  return(result);
 800e0cc:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e0ce:	633b      	str	r3, [r7, #48]	@ 0x30
 800e0d0:	2301      	movs	r3, #1
 800e0d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0d4:	69fb      	ldr	r3, [r7, #28]
 800e0d6:	f383 8810 	msr	PRIMASK, r3
}
 800e0da:	46c0      	nop			@ (mov r8, r8)
 800e0dc:	687b      	ldr	r3, [r7, #4]
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	689a      	ldr	r2, [r3, #8]
 800e0e2:	687b      	ldr	r3, [r7, #4]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	2101      	movs	r1, #1
 800e0e8:	438a      	bics	r2, r1
 800e0ea:	609a      	str	r2, [r3, #8]
 800e0ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e0ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e0f0:	6a3b      	ldr	r3, [r7, #32]
 800e0f2:	f383 8810 	msr	PRIMASK, r3
}
 800e0f6:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	2280      	movs	r2, #128	@ 0x80
 800e0fc:	2120      	movs	r1, #32
 800e0fe:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	2278      	movs	r2, #120	@ 0x78
 800e104:	2100      	movs	r1, #0
 800e106:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800e108:	2303      	movs	r3, #3
 800e10a:	e011      	b.n	800e130 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	2220      	movs	r2, #32
 800e110:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800e112:	687b      	ldr	r3, [r7, #4]
 800e114:	2280      	movs	r2, #128	@ 0x80
 800e116:	2120      	movs	r1, #32
 800e118:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	2200      	movs	r2, #0
 800e11e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	2200      	movs	r2, #0
 800e124:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2278      	movs	r2, #120	@ 0x78
 800e12a:	2100      	movs	r1, #0
 800e12c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e12e:	2300      	movs	r3, #0
}
 800e130:	0018      	movs	r0, r3
 800e132:	46bd      	mov	sp, r7
 800e134:	b010      	add	sp, #64	@ 0x40
 800e136:	bd80      	pop	{r7, pc}
 800e138:	01ffffff 	.word	0x01ffffff
 800e13c:	fffffedf 	.word	0xfffffedf

0800e140 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800e140:	b580      	push	{r7, lr}
 800e142:	b084      	sub	sp, #16
 800e144:	af00      	add	r7, sp, #0
 800e146:	60f8      	str	r0, [r7, #12]
 800e148:	60b9      	str	r1, [r7, #8]
 800e14a:	603b      	str	r3, [r7, #0]
 800e14c:	1dfb      	adds	r3, r7, #7
 800e14e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e150:	e04b      	b.n	800e1ea <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e152:	69bb      	ldr	r3, [r7, #24]
 800e154:	3301      	adds	r3, #1
 800e156:	d048      	beq.n	800e1ea <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e158:	f7fa f8ec 	bl	8008334 <HAL_GetTick>
 800e15c:	0002      	movs	r2, r0
 800e15e:	683b      	ldr	r3, [r7, #0]
 800e160:	1ad3      	subs	r3, r2, r3
 800e162:	69ba      	ldr	r2, [r7, #24]
 800e164:	429a      	cmp	r2, r3
 800e166:	d302      	bcc.n	800e16e <UART_WaitOnFlagUntilTimeout+0x2e>
 800e168:	69bb      	ldr	r3, [r7, #24]
 800e16a:	2b00      	cmp	r3, #0
 800e16c:	d101      	bne.n	800e172 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800e16e:	2303      	movs	r3, #3
 800e170:	e04b      	b.n	800e20a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	2204      	movs	r2, #4
 800e17a:	4013      	ands	r3, r2
 800e17c:	d035      	beq.n	800e1ea <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800e17e:	68fb      	ldr	r3, [r7, #12]
 800e180:	681b      	ldr	r3, [r3, #0]
 800e182:	69db      	ldr	r3, [r3, #28]
 800e184:	2208      	movs	r2, #8
 800e186:	4013      	ands	r3, r2
 800e188:	2b08      	cmp	r3, #8
 800e18a:	d111      	bne.n	800e1b0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	681b      	ldr	r3, [r3, #0]
 800e190:	2208      	movs	r2, #8
 800e192:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	0018      	movs	r0, r3
 800e198:	f000 f900 	bl	800e39c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	2284      	movs	r2, #132	@ 0x84
 800e1a0:	2108      	movs	r1, #8
 800e1a2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	2278      	movs	r2, #120	@ 0x78
 800e1a8:	2100      	movs	r1, #0
 800e1aa:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800e1ac:	2301      	movs	r3, #1
 800e1ae:	e02c      	b.n	800e20a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	69da      	ldr	r2, [r3, #28]
 800e1b6:	2380      	movs	r3, #128	@ 0x80
 800e1b8:	011b      	lsls	r3, r3, #4
 800e1ba:	401a      	ands	r2, r3
 800e1bc:	2380      	movs	r3, #128	@ 0x80
 800e1be:	011b      	lsls	r3, r3, #4
 800e1c0:	429a      	cmp	r2, r3
 800e1c2:	d112      	bne.n	800e1ea <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	2280      	movs	r2, #128	@ 0x80
 800e1ca:	0112      	lsls	r2, r2, #4
 800e1cc:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	0018      	movs	r0, r3
 800e1d2:	f000 f8e3 	bl	800e39c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	2284      	movs	r2, #132	@ 0x84
 800e1da:	2120      	movs	r1, #32
 800e1dc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	2278      	movs	r2, #120	@ 0x78
 800e1e2:	2100      	movs	r1, #0
 800e1e4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800e1e6:	2303      	movs	r3, #3
 800e1e8:	e00f      	b.n	800e20a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800e1ea:	68fb      	ldr	r3, [r7, #12]
 800e1ec:	681b      	ldr	r3, [r3, #0]
 800e1ee:	69db      	ldr	r3, [r3, #28]
 800e1f0:	68ba      	ldr	r2, [r7, #8]
 800e1f2:	4013      	ands	r3, r2
 800e1f4:	68ba      	ldr	r2, [r7, #8]
 800e1f6:	1ad3      	subs	r3, r2, r3
 800e1f8:	425a      	negs	r2, r3
 800e1fa:	4153      	adcs	r3, r2
 800e1fc:	b2db      	uxtb	r3, r3
 800e1fe:	001a      	movs	r2, r3
 800e200:	1dfb      	adds	r3, r7, #7
 800e202:	781b      	ldrb	r3, [r3, #0]
 800e204:	429a      	cmp	r2, r3
 800e206:	d0a4      	beq.n	800e152 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e208:	2300      	movs	r3, #0
}
 800e20a:	0018      	movs	r0, r3
 800e20c:	46bd      	mov	sp, r7
 800e20e:	b004      	add	sp, #16
 800e210:	bd80      	pop	{r7, pc}
	...

0800e214 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800e214:	b580      	push	{r7, lr}
 800e216:	b090      	sub	sp, #64	@ 0x40
 800e218:	af00      	add	r7, sp, #0
 800e21a:	60f8      	str	r0, [r7, #12]
 800e21c:	60b9      	str	r1, [r7, #8]
 800e21e:	1dbb      	adds	r3, r7, #6
 800e220:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	68ba      	ldr	r2, [r7, #8]
 800e226:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	1dba      	adds	r2, r7, #6
 800e22c:	2158      	movs	r1, #88	@ 0x58
 800e22e:	8812      	ldrh	r2, [r2, #0]
 800e230:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	2284      	movs	r2, #132	@ 0x84
 800e236:	2100      	movs	r1, #0
 800e238:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800e23a:	68fb      	ldr	r3, [r7, #12]
 800e23c:	2280      	movs	r2, #128	@ 0x80
 800e23e:	2122      	movs	r1, #34	@ 0x22
 800e240:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e246:	2b00      	cmp	r3, #0
 800e248:	d028      	beq.n	800e29c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800e24a:	68fb      	ldr	r3, [r7, #12]
 800e24c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e24e:	4a3e      	ldr	r2, [pc, #248]	@ (800e348 <UART_Start_Receive_DMA+0x134>)
 800e250:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e256:	4a3d      	ldr	r2, [pc, #244]	@ (800e34c <UART_Start_Receive_DMA+0x138>)
 800e258:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e25e:	4a3c      	ldr	r2, [pc, #240]	@ (800e350 <UART_Start_Receive_DMA+0x13c>)
 800e260:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e266:	2200      	movs	r2, #0
 800e268:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	3324      	adds	r3, #36	@ 0x24
 800e274:	0019      	movs	r1, r3
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e27a:	001a      	movs	r2, r3
 800e27c:	1dbb      	adds	r3, r7, #6
 800e27e:	881b      	ldrh	r3, [r3, #0]
 800e280:	f7fa fa3a 	bl	80086f8 <HAL_DMA_Start_IT>
 800e284:	1e03      	subs	r3, r0, #0
 800e286:	d009      	beq.n	800e29c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	2284      	movs	r2, #132	@ 0x84
 800e28c:	2110      	movs	r1, #16
 800e28e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	2280      	movs	r2, #128	@ 0x80
 800e294:	2120      	movs	r1, #32
 800e296:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800e298:	2301      	movs	r3, #1
 800e29a:	e050      	b.n	800e33e <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	691b      	ldr	r3, [r3, #16]
 800e2a0:	2b00      	cmp	r3, #0
 800e2a2:	d019      	beq.n	800e2d8 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2a4:	f3ef 8310 	mrs	r3, PRIMASK
 800e2a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800e2aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e2ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e2ae:	2301      	movs	r3, #1
 800e2b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b4:	f383 8810 	msr	PRIMASK, r3
}
 800e2b8:	46c0      	nop			@ (mov r8, r8)
 800e2ba:	68fb      	ldr	r3, [r7, #12]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	2180      	movs	r1, #128	@ 0x80
 800e2c6:	0049      	lsls	r1, r1, #1
 800e2c8:	430a      	orrs	r2, r1
 800e2ca:	601a      	str	r2, [r3, #0]
 800e2cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e2ce:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e2d2:	f383 8810 	msr	PRIMASK, r3
}
 800e2d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e2d8:	f3ef 8310 	mrs	r3, PRIMASK
 800e2dc:	613b      	str	r3, [r7, #16]
  return(result);
 800e2de:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e2e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e2e2:	2301      	movs	r3, #1
 800e2e4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e2e6:	697b      	ldr	r3, [r7, #20]
 800e2e8:	f383 8810 	msr	PRIMASK, r3
}
 800e2ec:	46c0      	nop			@ (mov r8, r8)
 800e2ee:	68fb      	ldr	r3, [r7, #12]
 800e2f0:	681b      	ldr	r3, [r3, #0]
 800e2f2:	689a      	ldr	r2, [r3, #8]
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2101      	movs	r1, #1
 800e2fa:	430a      	orrs	r2, r1
 800e2fc:	609a      	str	r2, [r3, #8]
 800e2fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e300:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e302:	69bb      	ldr	r3, [r7, #24]
 800e304:	f383 8810 	msr	PRIMASK, r3
}
 800e308:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e30a:	f3ef 8310 	mrs	r3, PRIMASK
 800e30e:	61fb      	str	r3, [r7, #28]
  return(result);
 800e310:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e312:	637b      	str	r3, [r7, #52]	@ 0x34
 800e314:	2301      	movs	r3, #1
 800e316:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e318:	6a3b      	ldr	r3, [r7, #32]
 800e31a:	f383 8810 	msr	PRIMASK, r3
}
 800e31e:	46c0      	nop			@ (mov r8, r8)
 800e320:	68fb      	ldr	r3, [r7, #12]
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	689a      	ldr	r2, [r3, #8]
 800e326:	68fb      	ldr	r3, [r7, #12]
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	2140      	movs	r1, #64	@ 0x40
 800e32c:	430a      	orrs	r2, r1
 800e32e:	609a      	str	r2, [r3, #8]
 800e330:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e332:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e336:	f383 8810 	msr	PRIMASK, r3
}
 800e33a:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800e33c:	2300      	movs	r3, #0
}
 800e33e:	0018      	movs	r0, r3
 800e340:	46bd      	mov	sp, r7
 800e342:	b010      	add	sp, #64	@ 0x40
 800e344:	bd80      	pop	{r7, pc}
 800e346:	46c0      	nop			@ (mov r8, r8)
 800e348:	0800e525 	.word	0x0800e525
 800e34c:	0800e659 	.word	0x0800e659
 800e350:	0800e6a1 	.word	0x0800e6a1

0800e354 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800e354:	b580      	push	{r7, lr}
 800e356:	b086      	sub	sp, #24
 800e358:	af00      	add	r7, sp, #0
 800e35a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e35c:	f3ef 8310 	mrs	r3, PRIMASK
 800e360:	60bb      	str	r3, [r7, #8]
  return(result);
 800e362:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800e364:	617b      	str	r3, [r7, #20]
 800e366:	2301      	movs	r3, #1
 800e368:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e36a:	68fb      	ldr	r3, [r7, #12]
 800e36c:	f383 8810 	msr	PRIMASK, r3
}
 800e370:	46c0      	nop			@ (mov r8, r8)
 800e372:	687b      	ldr	r3, [r7, #4]
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	681a      	ldr	r2, [r3, #0]
 800e378:	687b      	ldr	r3, [r7, #4]
 800e37a:	681b      	ldr	r3, [r3, #0]
 800e37c:	21c0      	movs	r1, #192	@ 0xc0
 800e37e:	438a      	bics	r2, r1
 800e380:	601a      	str	r2, [r3, #0]
 800e382:	697b      	ldr	r3, [r7, #20]
 800e384:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e386:	693b      	ldr	r3, [r7, #16]
 800e388:	f383 8810 	msr	PRIMASK, r3
}
 800e38c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2220      	movs	r2, #32
 800e392:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800e394:	46c0      	nop			@ (mov r8, r8)
 800e396:	46bd      	mov	sp, r7
 800e398:	b006      	add	sp, #24
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b08e      	sub	sp, #56	@ 0x38
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3a4:	f3ef 8310 	mrs	r3, PRIMASK
 800e3a8:	617b      	str	r3, [r7, #20]
  return(result);
 800e3aa:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e3ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800e3ae:	2301      	movs	r3, #1
 800e3b0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3b2:	69bb      	ldr	r3, [r7, #24]
 800e3b4:	f383 8810 	msr	PRIMASK, r3
}
 800e3b8:	46c0      	nop			@ (mov r8, r8)
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	681a      	ldr	r2, [r3, #0]
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	681b      	ldr	r3, [r3, #0]
 800e3c4:	4926      	ldr	r1, [pc, #152]	@ (800e460 <UART_EndRxTransfer+0xc4>)
 800e3c6:	400a      	ands	r2, r1
 800e3c8:	601a      	str	r2, [r3, #0]
 800e3ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e3cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3ce:	69fb      	ldr	r3, [r7, #28]
 800e3d0:	f383 8810 	msr	PRIMASK, r3
}
 800e3d4:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e3d6:	f3ef 8310 	mrs	r3, PRIMASK
 800e3da:	623b      	str	r3, [r7, #32]
  return(result);
 800e3dc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e3de:	633b      	str	r3, [r7, #48]	@ 0x30
 800e3e0:	2301      	movs	r3, #1
 800e3e2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e3e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3e6:	f383 8810 	msr	PRIMASK, r3
}
 800e3ea:	46c0      	nop			@ (mov r8, r8)
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	681b      	ldr	r3, [r3, #0]
 800e3f0:	689a      	ldr	r2, [r3, #8]
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	681b      	ldr	r3, [r3, #0]
 800e3f6:	2101      	movs	r1, #1
 800e3f8:	438a      	bics	r2, r1
 800e3fa:	609a      	str	r2, [r3, #8]
 800e3fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e3fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e400:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e402:	f383 8810 	msr	PRIMASK, r3
}
 800e406:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e40c:	2b01      	cmp	r3, #1
 800e40e:	d118      	bne.n	800e442 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e410:	f3ef 8310 	mrs	r3, PRIMASK
 800e414:	60bb      	str	r3, [r7, #8]
  return(result);
 800e416:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e418:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800e41a:	2301      	movs	r3, #1
 800e41c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e41e:	68fb      	ldr	r3, [r7, #12]
 800e420:	f383 8810 	msr	PRIMASK, r3
}
 800e424:	46c0      	nop			@ (mov r8, r8)
 800e426:	687b      	ldr	r3, [r7, #4]
 800e428:	681b      	ldr	r3, [r3, #0]
 800e42a:	681a      	ldr	r2, [r3, #0]
 800e42c:	687b      	ldr	r3, [r7, #4]
 800e42e:	681b      	ldr	r3, [r3, #0]
 800e430:	2110      	movs	r1, #16
 800e432:	438a      	bics	r2, r1
 800e434:	601a      	str	r2, [r3, #0]
 800e436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e438:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e43a:	693b      	ldr	r3, [r7, #16]
 800e43c:	f383 8810 	msr	PRIMASK, r3
}
 800e440:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2280      	movs	r2, #128	@ 0x80
 800e446:	2120      	movs	r1, #32
 800e448:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e44a:	687b      	ldr	r3, [r7, #4]
 800e44c:	2200      	movs	r2, #0
 800e44e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800e450:	687b      	ldr	r3, [r7, #4]
 800e452:	2200      	movs	r2, #0
 800e454:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800e456:	46c0      	nop			@ (mov r8, r8)
 800e458:	46bd      	mov	sp, r7
 800e45a:	b00e      	add	sp, #56	@ 0x38
 800e45c:	bd80      	pop	{r7, pc}
 800e45e:	46c0      	nop			@ (mov r8, r8)
 800e460:	fffffedf 	.word	0xfffffedf

0800e464 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800e464:	b580      	push	{r7, lr}
 800e466:	b08c      	sub	sp, #48	@ 0x30
 800e468:	af00      	add	r7, sp, #0
 800e46a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e470:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e472:	687b      	ldr	r3, [r7, #4]
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	681b      	ldr	r3, [r3, #0]
 800e478:	2220      	movs	r2, #32
 800e47a:	4013      	ands	r3, r2
 800e47c:	d135      	bne.n	800e4ea <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800e47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e480:	2252      	movs	r2, #82	@ 0x52
 800e482:	2100      	movs	r1, #0
 800e484:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e486:	f3ef 8310 	mrs	r3, PRIMASK
 800e48a:	60fb      	str	r3, [r7, #12]
  return(result);
 800e48c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800e48e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800e490:	2301      	movs	r3, #1
 800e492:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e494:	693b      	ldr	r3, [r7, #16]
 800e496:	f383 8810 	msr	PRIMASK, r3
}
 800e49a:	46c0      	nop			@ (mov r8, r8)
 800e49c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e49e:	681b      	ldr	r3, [r3, #0]
 800e4a0:	689a      	ldr	r2, [r3, #8]
 800e4a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4a4:	681b      	ldr	r3, [r3, #0]
 800e4a6:	2180      	movs	r1, #128	@ 0x80
 800e4a8:	438a      	bics	r2, r1
 800e4aa:	609a      	str	r2, [r3, #8]
 800e4ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e4ae:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4b0:	697b      	ldr	r3, [r7, #20]
 800e4b2:	f383 8810 	msr	PRIMASK, r3
}
 800e4b6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e4b8:	f3ef 8310 	mrs	r3, PRIMASK
 800e4bc:	61bb      	str	r3, [r7, #24]
  return(result);
 800e4be:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e4c0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4c6:	69fb      	ldr	r3, [r7, #28]
 800e4c8:	f383 8810 	msr	PRIMASK, r3
}
 800e4cc:	46c0      	nop			@ (mov r8, r8)
 800e4ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	681a      	ldr	r2, [r3, #0]
 800e4d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	2140      	movs	r1, #64	@ 0x40
 800e4da:	430a      	orrs	r2, r1
 800e4dc:	601a      	str	r2, [r3, #0]
 800e4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4e0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e4e2:	6a3b      	ldr	r3, [r7, #32]
 800e4e4:	f383 8810 	msr	PRIMASK, r3
}
 800e4e8:	e006      	b.n	800e4f8 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800e4ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e4ec:	228c      	movs	r2, #140	@ 0x8c
 800e4ee:	589b      	ldr	r3, [r3, r2]
 800e4f0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800e4f2:	0010      	movs	r0, r2
 800e4f4:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e4f6:	46c0      	nop			@ (mov r8, r8)
 800e4f8:	46c0      	nop			@ (mov r8, r8)
 800e4fa:	46bd      	mov	sp, r7
 800e4fc:	b00c      	add	sp, #48	@ 0x30
 800e4fe:	bd80      	pop	{r7, pc}

0800e500 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e500:	b580      	push	{r7, lr}
 800e502:	b084      	sub	sp, #16
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e50c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800e50e:	68fb      	ldr	r3, [r7, #12]
 800e510:	2288      	movs	r2, #136	@ 0x88
 800e512:	589b      	ldr	r3, [r3, r2]
 800e514:	68fa      	ldr	r2, [r7, #12]
 800e516:	0010      	movs	r0, r2
 800e518:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e51a:	46c0      	nop			@ (mov r8, r8)
 800e51c:	46bd      	mov	sp, r7
 800e51e:	b004      	add	sp, #16
 800e520:	bd80      	pop	{r7, pc}
	...

0800e524 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800e524:	b580      	push	{r7, lr}
 800e526:	b094      	sub	sp, #80	@ 0x50
 800e528:	af00      	add	r7, sp, #0
 800e52a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e530:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800e532:	687b      	ldr	r3, [r7, #4]
 800e534:	681b      	ldr	r3, [r3, #0]
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	2220      	movs	r2, #32
 800e53a:	4013      	ands	r3, r2
 800e53c:	d16f      	bne.n	800e61e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800e53e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e540:	225a      	movs	r2, #90	@ 0x5a
 800e542:	2100      	movs	r1, #0
 800e544:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e546:	f3ef 8310 	mrs	r3, PRIMASK
 800e54a:	61bb      	str	r3, [r7, #24]
  return(result);
 800e54c:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800e54e:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e550:	2301      	movs	r3, #1
 800e552:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	f383 8810 	msr	PRIMASK, r3
}
 800e55a:	46c0      	nop			@ (mov r8, r8)
 800e55c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	681a      	ldr	r2, [r3, #0]
 800e562:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e564:	681b      	ldr	r3, [r3, #0]
 800e566:	493b      	ldr	r1, [pc, #236]	@ (800e654 <UART_DMAReceiveCplt+0x130>)
 800e568:	400a      	ands	r2, r1
 800e56a:	601a      	str	r2, [r3, #0]
 800e56c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e56e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e570:	6a3b      	ldr	r3, [r7, #32]
 800e572:	f383 8810 	msr	PRIMASK, r3
}
 800e576:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e578:	f3ef 8310 	mrs	r3, PRIMASK
 800e57c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800e57e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e580:	647b      	str	r3, [r7, #68]	@ 0x44
 800e582:	2301      	movs	r3, #1
 800e584:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e586:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e588:	f383 8810 	msr	PRIMASK, r3
}
 800e58c:	46c0      	nop			@ (mov r8, r8)
 800e58e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e590:	681b      	ldr	r3, [r3, #0]
 800e592:	689a      	ldr	r2, [r3, #8]
 800e594:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e596:	681b      	ldr	r3, [r3, #0]
 800e598:	2101      	movs	r1, #1
 800e59a:	438a      	bics	r2, r1
 800e59c:	609a      	str	r2, [r3, #8]
 800e59e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e5a4:	f383 8810 	msr	PRIMASK, r3
}
 800e5a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5aa:	f3ef 8310 	mrs	r3, PRIMASK
 800e5ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800e5b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800e5b2:	643b      	str	r3, [r7, #64]	@ 0x40
 800e5b4:	2301      	movs	r3, #1
 800e5b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e5ba:	f383 8810 	msr	PRIMASK, r3
}
 800e5be:	46c0      	nop			@ (mov r8, r8)
 800e5c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5c2:	681b      	ldr	r3, [r3, #0]
 800e5c4:	689a      	ldr	r2, [r3, #8]
 800e5c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	2140      	movs	r1, #64	@ 0x40
 800e5cc:	438a      	bics	r2, r1
 800e5ce:	609a      	str	r2, [r3, #8]
 800e5d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e5d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e5d6:	f383 8810 	msr	PRIMASK, r3
}
 800e5da:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800e5dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5de:	2280      	movs	r2, #128	@ 0x80
 800e5e0:	2120      	movs	r1, #32
 800e5e2:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e5e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e5e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e5e8:	2b01      	cmp	r3, #1
 800e5ea:	d118      	bne.n	800e61e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e5ec:	f3ef 8310 	mrs	r3, PRIMASK
 800e5f0:	60fb      	str	r3, [r7, #12]
  return(result);
 800e5f2:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e5f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e5f6:	2301      	movs	r3, #1
 800e5f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e5fa:	693b      	ldr	r3, [r7, #16]
 800e5fc:	f383 8810 	msr	PRIMASK, r3
}
 800e600:	46c0      	nop			@ (mov r8, r8)
 800e602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	681a      	ldr	r2, [r3, #0]
 800e608:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	2110      	movs	r1, #16
 800e60e:	438a      	bics	r2, r1
 800e610:	601a      	str	r2, [r3, #0]
 800e612:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e614:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e616:	697b      	ldr	r3, [r7, #20]
 800e618:	f383 8810 	msr	PRIMASK, r3
}
 800e61c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e61e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e620:	2200      	movs	r2, #0
 800e622:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e624:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e626:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e628:	2b01      	cmp	r3, #1
 800e62a:	d109      	bne.n	800e640 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800e62c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e62e:	22ac      	movs	r2, #172	@ 0xac
 800e630:	589b      	ldr	r3, [r3, r2]
 800e632:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e634:	2158      	movs	r1, #88	@ 0x58
 800e636:	5a51      	ldrh	r1, [r2, r1]
 800e638:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e63a:	0010      	movs	r0, r2
 800e63c:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e63e:	e005      	b.n	800e64c <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800e640:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800e642:	2294      	movs	r2, #148	@ 0x94
 800e644:	589b      	ldr	r3, [r3, r2]
 800e646:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800e648:	0010      	movs	r0, r2
 800e64a:	4798      	blx	r3
}
 800e64c:	46c0      	nop			@ (mov r8, r8)
 800e64e:	46bd      	mov	sp, r7
 800e650:	b014      	add	sp, #80	@ 0x50
 800e652:	bd80      	pop	{r7, pc}
 800e654:	fffffeff 	.word	0xfffffeff

0800e658 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e664:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2201      	movs	r2, #1
 800e66a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e66c:	68fb      	ldr	r3, [r7, #12]
 800e66e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800e670:	2b01      	cmp	r3, #1
 800e672:	d10b      	bne.n	800e68c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800e674:	68fb      	ldr	r3, [r7, #12]
 800e676:	22ac      	movs	r2, #172	@ 0xac
 800e678:	589b      	ldr	r3, [r3, r2]
 800e67a:	68fa      	ldr	r2, [r7, #12]
 800e67c:	2158      	movs	r1, #88	@ 0x58
 800e67e:	5a52      	ldrh	r2, [r2, r1]
 800e680:	0852      	lsrs	r2, r2, #1
 800e682:	b291      	uxth	r1, r2
 800e684:	68fa      	ldr	r2, [r7, #12]
 800e686:	0010      	movs	r0, r2
 800e688:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800e68a:	e005      	b.n	800e698 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800e68c:	68fb      	ldr	r3, [r7, #12]
 800e68e:	2290      	movs	r2, #144	@ 0x90
 800e690:	589b      	ldr	r3, [r3, r2]
 800e692:	68fa      	ldr	r2, [r7, #12]
 800e694:	0010      	movs	r0, r2
 800e696:	4798      	blx	r3
}
 800e698:	46c0      	nop			@ (mov r8, r8)
 800e69a:	46bd      	mov	sp, r7
 800e69c:	b004      	add	sp, #16
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e6ac:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800e6ae:	697b      	ldr	r3, [r7, #20]
 800e6b0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800e6b2:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800e6b4:	697b      	ldr	r3, [r7, #20]
 800e6b6:	2280      	movs	r2, #128	@ 0x80
 800e6b8:	589b      	ldr	r3, [r3, r2]
 800e6ba:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800e6bc:	697b      	ldr	r3, [r7, #20]
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	689b      	ldr	r3, [r3, #8]
 800e6c2:	2280      	movs	r2, #128	@ 0x80
 800e6c4:	4013      	ands	r3, r2
 800e6c6:	2b80      	cmp	r3, #128	@ 0x80
 800e6c8:	d10a      	bne.n	800e6e0 <UART_DMAError+0x40>
 800e6ca:	693b      	ldr	r3, [r7, #16]
 800e6cc:	2b21      	cmp	r3, #33	@ 0x21
 800e6ce:	d107      	bne.n	800e6e0 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800e6d0:	697b      	ldr	r3, [r7, #20]
 800e6d2:	2252      	movs	r2, #82	@ 0x52
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800e6d8:	697b      	ldr	r3, [r7, #20]
 800e6da:	0018      	movs	r0, r3
 800e6dc:	f7ff fe3a 	bl	800e354 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800e6e0:	697b      	ldr	r3, [r7, #20]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	689b      	ldr	r3, [r3, #8]
 800e6e6:	2240      	movs	r2, #64	@ 0x40
 800e6e8:	4013      	ands	r3, r2
 800e6ea:	2b40      	cmp	r3, #64	@ 0x40
 800e6ec:	d10a      	bne.n	800e704 <UART_DMAError+0x64>
 800e6ee:	68fb      	ldr	r3, [r7, #12]
 800e6f0:	2b22      	cmp	r3, #34	@ 0x22
 800e6f2:	d107      	bne.n	800e704 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800e6f4:	697b      	ldr	r3, [r7, #20]
 800e6f6:	225a      	movs	r2, #90	@ 0x5a
 800e6f8:	2100      	movs	r1, #0
 800e6fa:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800e6fc:	697b      	ldr	r3, [r7, #20]
 800e6fe:	0018      	movs	r0, r3
 800e700:	f7ff fe4c 	bl	800e39c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800e704:	697b      	ldr	r3, [r7, #20]
 800e706:	2284      	movs	r2, #132	@ 0x84
 800e708:	589b      	ldr	r3, [r3, r2]
 800e70a:	2210      	movs	r2, #16
 800e70c:	431a      	orrs	r2, r3
 800e70e:	697b      	ldr	r3, [r7, #20]
 800e710:	2184      	movs	r1, #132	@ 0x84
 800e712:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e714:	697b      	ldr	r3, [r7, #20]
 800e716:	2298      	movs	r2, #152	@ 0x98
 800e718:	589b      	ldr	r3, [r3, r2]
 800e71a:	697a      	ldr	r2, [r7, #20]
 800e71c:	0010      	movs	r0, r2
 800e71e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e720:	46c0      	nop			@ (mov r8, r8)
 800e722:	46bd      	mov	sp, r7
 800e724:	b006      	add	sp, #24
 800e726:	bd80      	pop	{r7, pc}

0800e728 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800e728:	b580      	push	{r7, lr}
 800e72a:	b084      	sub	sp, #16
 800e72c:	af00      	add	r7, sp, #0
 800e72e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e734:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	225a      	movs	r2, #90	@ 0x5a
 800e73a:	2100      	movs	r1, #0
 800e73c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800e73e:	68fb      	ldr	r3, [r7, #12]
 800e740:	2252      	movs	r2, #82	@ 0x52
 800e742:	2100      	movs	r1, #0
 800e744:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800e746:	68fb      	ldr	r3, [r7, #12]
 800e748:	2298      	movs	r2, #152	@ 0x98
 800e74a:	589b      	ldr	r3, [r3, r2]
 800e74c:	68fa      	ldr	r2, [r7, #12]
 800e74e:	0010      	movs	r0, r2
 800e750:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e752:	46c0      	nop			@ (mov r8, r8)
 800e754:	46bd      	mov	sp, r7
 800e756:	b004      	add	sp, #16
 800e758:	bd80      	pop	{r7, pc}

0800e75a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e75a:	b580      	push	{r7, lr}
 800e75c:	b086      	sub	sp, #24
 800e75e:	af00      	add	r7, sp, #0
 800e760:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800e762:	f3ef 8310 	mrs	r3, PRIMASK
 800e766:	60bb      	str	r3, [r7, #8]
  return(result);
 800e768:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e76a:	617b      	str	r3, [r7, #20]
 800e76c:	2301      	movs	r3, #1
 800e76e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	f383 8810 	msr	PRIMASK, r3
}
 800e776:	46c0      	nop			@ (mov r8, r8)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	2140      	movs	r1, #64	@ 0x40
 800e784:	438a      	bics	r2, r1
 800e786:	601a      	str	r2, [r3, #0]
 800e788:	697b      	ldr	r3, [r7, #20]
 800e78a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	f383 8810 	msr	PRIMASK, r3
}
 800e792:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2220      	movs	r2, #32
 800e798:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e79a:	687b      	ldr	r3, [r7, #4]
 800e79c:	2200      	movs	r2, #0
 800e79e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	228c      	movs	r2, #140	@ 0x8c
 800e7a4:	589b      	ldr	r3, [r3, r2]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	0010      	movs	r0, r2
 800e7aa:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e7ac:	46c0      	nop			@ (mov r8, r8)
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	b006      	add	sp, #24
 800e7b2:	bd80      	pop	{r7, pc}

0800e7b4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800e7b4:	b580      	push	{r7, lr}
 800e7b6:	b082      	sub	sp, #8
 800e7b8:	af00      	add	r7, sp, #0
 800e7ba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800e7bc:	46c0      	nop			@ (mov r8, r8)
 800e7be:	46bd      	mov	sp, r7
 800e7c0:	b002      	add	sp, #8
 800e7c2:	bd80      	pop	{r7, pc}

0800e7c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 800e7c4:	b580      	push	{r7, lr}
 800e7c6:	b084      	sub	sp, #16
 800e7c8:	af00      	add	r7, sp, #0
 800e7ca:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 800e7cc:	4b09      	ldr	r3, [pc, #36]	@ (800e7f4 <USB_DisableGlobalInt+0x30>)
 800e7ce:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2240      	movs	r2, #64	@ 0x40
 800e7d4:	5a9b      	ldrh	r3, [r3, r2]
 800e7d6:	b29b      	uxth	r3, r3
 800e7d8:	68fa      	ldr	r2, [r7, #12]
 800e7da:	b292      	uxth	r2, r2
 800e7dc:	43d2      	mvns	r2, r2
 800e7de:	b292      	uxth	r2, r2
 800e7e0:	4013      	ands	r3, r2
 800e7e2:	b299      	uxth	r1, r3
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2240      	movs	r2, #64	@ 0x40
 800e7e8:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e7ea:	2300      	movs	r3, #0
}
 800e7ec:	0018      	movs	r0, r3
 800e7ee:	46bd      	mov	sp, r7
 800e7f0:	b004      	add	sp, #16
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	0000bf80 	.word	0x0000bf80

0800e7f8 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 800e7f8:	b084      	sub	sp, #16
 800e7fa:	b590      	push	{r4, r7, lr}
 800e7fc:	b083      	sub	sp, #12
 800e7fe:	af00      	add	r7, sp, #0
 800e800:	6078      	str	r0, [r7, #4]
 800e802:	2004      	movs	r0, #4
 800e804:	2410      	movs	r4, #16
 800e806:	1900      	adds	r0, r0, r4
 800e808:	2408      	movs	r4, #8
 800e80a:	46a4      	mov	ip, r4
 800e80c:	44bc      	add	ip, r7
 800e80e:	4460      	add	r0, ip
 800e810:	6001      	str	r1, [r0, #0]
 800e812:	6042      	str	r2, [r0, #4]
 800e814:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800e816:	687b      	ldr	r3, [r7, #4]
 800e818:	2240      	movs	r2, #64	@ 0x40
 800e81a:	2101      	movs	r1, #1
 800e81c:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2240      	movs	r2, #64	@ 0x40
 800e822:	2100      	movs	r1, #0
 800e824:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800e826:	687b      	ldr	r3, [r7, #4]
 800e828:	2244      	movs	r2, #68	@ 0x44
 800e82a:	2100      	movs	r1, #0
 800e82c:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	2250      	movs	r2, #80	@ 0x50
 800e832:	2100      	movs	r1, #0
 800e834:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e836:	2300      	movs	r3, #0
}
 800e838:	0018      	movs	r0, r3
 800e83a:	46bd      	mov	sp, r7
 800e83c:	b003      	add	sp, #12
 800e83e:	bc90      	pop	{r4, r7}
 800e840:	bc08      	pop	{r3}
 800e842:	b004      	add	sp, #16
 800e844:	4718      	bx	r3

0800e846 <__cvt>:
 800e846:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e848:	001f      	movs	r7, r3
 800e84a:	2300      	movs	r3, #0
 800e84c:	0016      	movs	r6, r2
 800e84e:	b08b      	sub	sp, #44	@ 0x2c
 800e850:	429f      	cmp	r7, r3
 800e852:	da04      	bge.n	800e85e <__cvt+0x18>
 800e854:	2180      	movs	r1, #128	@ 0x80
 800e856:	0609      	lsls	r1, r1, #24
 800e858:	187b      	adds	r3, r7, r1
 800e85a:	001f      	movs	r7, r3
 800e85c:	232d      	movs	r3, #45	@ 0x2d
 800e85e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800e860:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800e862:	7013      	strb	r3, [r2, #0]
 800e864:	2320      	movs	r3, #32
 800e866:	2203      	movs	r2, #3
 800e868:	439d      	bics	r5, r3
 800e86a:	2d46      	cmp	r5, #70	@ 0x46
 800e86c:	d007      	beq.n	800e87e <__cvt+0x38>
 800e86e:	002b      	movs	r3, r5
 800e870:	3b45      	subs	r3, #69	@ 0x45
 800e872:	4259      	negs	r1, r3
 800e874:	414b      	adcs	r3, r1
 800e876:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800e878:	3a01      	subs	r2, #1
 800e87a:	18cb      	adds	r3, r1, r3
 800e87c:	9310      	str	r3, [sp, #64]	@ 0x40
 800e87e:	ab09      	add	r3, sp, #36	@ 0x24
 800e880:	9304      	str	r3, [sp, #16]
 800e882:	ab08      	add	r3, sp, #32
 800e884:	9303      	str	r3, [sp, #12]
 800e886:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e888:	9200      	str	r2, [sp, #0]
 800e88a:	9302      	str	r3, [sp, #8]
 800e88c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e88e:	0032      	movs	r2, r6
 800e890:	9301      	str	r3, [sp, #4]
 800e892:	003b      	movs	r3, r7
 800e894:	f000 fefc 	bl	800f690 <_dtoa_r>
 800e898:	0004      	movs	r4, r0
 800e89a:	2d47      	cmp	r5, #71	@ 0x47
 800e89c:	d11b      	bne.n	800e8d6 <__cvt+0x90>
 800e89e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800e8a0:	07db      	lsls	r3, r3, #31
 800e8a2:	d511      	bpl.n	800e8c8 <__cvt+0x82>
 800e8a4:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8a6:	18c3      	adds	r3, r0, r3
 800e8a8:	9307      	str	r3, [sp, #28]
 800e8aa:	2200      	movs	r2, #0
 800e8ac:	2300      	movs	r3, #0
 800e8ae:	0030      	movs	r0, r6
 800e8b0:	0039      	movs	r1, r7
 800e8b2:	f7f1 fdcb 	bl	800044c <__aeabi_dcmpeq>
 800e8b6:	2800      	cmp	r0, #0
 800e8b8:	d001      	beq.n	800e8be <__cvt+0x78>
 800e8ba:	9b07      	ldr	r3, [sp, #28]
 800e8bc:	9309      	str	r3, [sp, #36]	@ 0x24
 800e8be:	2230      	movs	r2, #48	@ 0x30
 800e8c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8c2:	9907      	ldr	r1, [sp, #28]
 800e8c4:	428b      	cmp	r3, r1
 800e8c6:	d320      	bcc.n	800e90a <__cvt+0xc4>
 800e8c8:	0020      	movs	r0, r4
 800e8ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e8cc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800e8ce:	1b1b      	subs	r3, r3, r4
 800e8d0:	6013      	str	r3, [r2, #0]
 800e8d2:	b00b      	add	sp, #44	@ 0x2c
 800e8d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8d6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800e8d8:	18c3      	adds	r3, r0, r3
 800e8da:	9307      	str	r3, [sp, #28]
 800e8dc:	2d46      	cmp	r5, #70	@ 0x46
 800e8de:	d1e4      	bne.n	800e8aa <__cvt+0x64>
 800e8e0:	7803      	ldrb	r3, [r0, #0]
 800e8e2:	2b30      	cmp	r3, #48	@ 0x30
 800e8e4:	d10c      	bne.n	800e900 <__cvt+0xba>
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	0030      	movs	r0, r6
 800e8ec:	0039      	movs	r1, r7
 800e8ee:	f7f1 fdad 	bl	800044c <__aeabi_dcmpeq>
 800e8f2:	2800      	cmp	r0, #0
 800e8f4:	d104      	bne.n	800e900 <__cvt+0xba>
 800e8f6:	2301      	movs	r3, #1
 800e8f8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800e8fa:	1a9b      	subs	r3, r3, r2
 800e8fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800e8fe:	6013      	str	r3, [r2, #0]
 800e900:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e902:	9a07      	ldr	r2, [sp, #28]
 800e904:	681b      	ldr	r3, [r3, #0]
 800e906:	18d3      	adds	r3, r2, r3
 800e908:	e7ce      	b.n	800e8a8 <__cvt+0x62>
 800e90a:	1c59      	adds	r1, r3, #1
 800e90c:	9109      	str	r1, [sp, #36]	@ 0x24
 800e90e:	701a      	strb	r2, [r3, #0]
 800e910:	e7d6      	b.n	800e8c0 <__cvt+0x7a>

0800e912 <__exponent>:
 800e912:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e914:	232b      	movs	r3, #43	@ 0x2b
 800e916:	0005      	movs	r5, r0
 800e918:	000c      	movs	r4, r1
 800e91a:	b085      	sub	sp, #20
 800e91c:	7002      	strb	r2, [r0, #0]
 800e91e:	2900      	cmp	r1, #0
 800e920:	da01      	bge.n	800e926 <__exponent+0x14>
 800e922:	424c      	negs	r4, r1
 800e924:	3302      	adds	r3, #2
 800e926:	706b      	strb	r3, [r5, #1]
 800e928:	2c09      	cmp	r4, #9
 800e92a:	dd2c      	ble.n	800e986 <__exponent+0x74>
 800e92c:	ab02      	add	r3, sp, #8
 800e92e:	1dde      	adds	r6, r3, #7
 800e930:	0020      	movs	r0, r4
 800e932:	210a      	movs	r1, #10
 800e934:	f7f1 fd74 	bl	8000420 <__aeabi_idivmod>
 800e938:	0037      	movs	r7, r6
 800e93a:	3130      	adds	r1, #48	@ 0x30
 800e93c:	3e01      	subs	r6, #1
 800e93e:	0020      	movs	r0, r4
 800e940:	7031      	strb	r1, [r6, #0]
 800e942:	210a      	movs	r1, #10
 800e944:	9401      	str	r4, [sp, #4]
 800e946:	f7f1 fc85 	bl	8000254 <__divsi3>
 800e94a:	9b01      	ldr	r3, [sp, #4]
 800e94c:	0004      	movs	r4, r0
 800e94e:	2b63      	cmp	r3, #99	@ 0x63
 800e950:	dcee      	bgt.n	800e930 <__exponent+0x1e>
 800e952:	1eba      	subs	r2, r7, #2
 800e954:	1ca8      	adds	r0, r5, #2
 800e956:	0001      	movs	r1, r0
 800e958:	0013      	movs	r3, r2
 800e95a:	3430      	adds	r4, #48	@ 0x30
 800e95c:	7014      	strb	r4, [r2, #0]
 800e95e:	ac02      	add	r4, sp, #8
 800e960:	3407      	adds	r4, #7
 800e962:	429c      	cmp	r4, r3
 800e964:	d80a      	bhi.n	800e97c <__exponent+0x6a>
 800e966:	2300      	movs	r3, #0
 800e968:	42a2      	cmp	r2, r4
 800e96a:	d803      	bhi.n	800e974 <__exponent+0x62>
 800e96c:	3309      	adds	r3, #9
 800e96e:	aa02      	add	r2, sp, #8
 800e970:	189b      	adds	r3, r3, r2
 800e972:	1bdb      	subs	r3, r3, r7
 800e974:	18c0      	adds	r0, r0, r3
 800e976:	1b40      	subs	r0, r0, r5
 800e978:	b005      	add	sp, #20
 800e97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e97c:	781c      	ldrb	r4, [r3, #0]
 800e97e:	3301      	adds	r3, #1
 800e980:	700c      	strb	r4, [r1, #0]
 800e982:	3101      	adds	r1, #1
 800e984:	e7eb      	b.n	800e95e <__exponent+0x4c>
 800e986:	2330      	movs	r3, #48	@ 0x30
 800e988:	18e4      	adds	r4, r4, r3
 800e98a:	70ab      	strb	r3, [r5, #2]
 800e98c:	1d28      	adds	r0, r5, #4
 800e98e:	70ec      	strb	r4, [r5, #3]
 800e990:	e7f1      	b.n	800e976 <__exponent+0x64>
	...

0800e994 <_printf_float>:
 800e994:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e996:	b097      	sub	sp, #92	@ 0x5c
 800e998:	000d      	movs	r5, r1
 800e99a:	920a      	str	r2, [sp, #40]	@ 0x28
 800e99c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800e99e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e9a0:	9009      	str	r0, [sp, #36]	@ 0x24
 800e9a2:	f000 fd5d 	bl	800f460 <_localeconv_r>
 800e9a6:	6803      	ldr	r3, [r0, #0]
 800e9a8:	0018      	movs	r0, r3
 800e9aa:	930d      	str	r3, [sp, #52]	@ 0x34
 800e9ac:	f7f1 fbac 	bl	8000108 <strlen>
 800e9b0:	2300      	movs	r3, #0
 800e9b2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800e9b4:	9314      	str	r3, [sp, #80]	@ 0x50
 800e9b6:	7e2b      	ldrb	r3, [r5, #24]
 800e9b8:	2207      	movs	r2, #7
 800e9ba:	930c      	str	r3, [sp, #48]	@ 0x30
 800e9bc:	682b      	ldr	r3, [r5, #0]
 800e9be:	930e      	str	r3, [sp, #56]	@ 0x38
 800e9c0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800e9c2:	6823      	ldr	r3, [r4, #0]
 800e9c4:	05c9      	lsls	r1, r1, #23
 800e9c6:	d545      	bpl.n	800ea54 <_printf_float+0xc0>
 800e9c8:	189b      	adds	r3, r3, r2
 800e9ca:	4393      	bics	r3, r2
 800e9cc:	001a      	movs	r2, r3
 800e9ce:	3208      	adds	r2, #8
 800e9d0:	6022      	str	r2, [r4, #0]
 800e9d2:	2201      	movs	r2, #1
 800e9d4:	681e      	ldr	r6, [r3, #0]
 800e9d6:	685f      	ldr	r7, [r3, #4]
 800e9d8:	007b      	lsls	r3, r7, #1
 800e9da:	085b      	lsrs	r3, r3, #1
 800e9dc:	9311      	str	r3, [sp, #68]	@ 0x44
 800e9de:	9610      	str	r6, [sp, #64]	@ 0x40
 800e9e0:	64ae      	str	r6, [r5, #72]	@ 0x48
 800e9e2:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800e9e4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e9e6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e9e8:	4ba7      	ldr	r3, [pc, #668]	@ (800ec88 <_printf_float+0x2f4>)
 800e9ea:	4252      	negs	r2, r2
 800e9ec:	f7f4 fc08 	bl	8003200 <__aeabi_dcmpun>
 800e9f0:	2800      	cmp	r0, #0
 800e9f2:	d131      	bne.n	800ea58 <_printf_float+0xc4>
 800e9f4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800e9f6:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800e9f8:	2201      	movs	r2, #1
 800e9fa:	4ba3      	ldr	r3, [pc, #652]	@ (800ec88 <_printf_float+0x2f4>)
 800e9fc:	4252      	negs	r2, r2
 800e9fe:	f7f1 fd35 	bl	800046c <__aeabi_dcmple>
 800ea02:	2800      	cmp	r0, #0
 800ea04:	d128      	bne.n	800ea58 <_printf_float+0xc4>
 800ea06:	2200      	movs	r2, #0
 800ea08:	2300      	movs	r3, #0
 800ea0a:	0030      	movs	r0, r6
 800ea0c:	0039      	movs	r1, r7
 800ea0e:	f7f1 fd23 	bl	8000458 <__aeabi_dcmplt>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d003      	beq.n	800ea1e <_printf_float+0x8a>
 800ea16:	002b      	movs	r3, r5
 800ea18:	222d      	movs	r2, #45	@ 0x2d
 800ea1a:	3343      	adds	r3, #67	@ 0x43
 800ea1c:	701a      	strb	r2, [r3, #0]
 800ea1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea20:	4f9a      	ldr	r7, [pc, #616]	@ (800ec8c <_printf_float+0x2f8>)
 800ea22:	2b47      	cmp	r3, #71	@ 0x47
 800ea24:	d900      	bls.n	800ea28 <_printf_float+0x94>
 800ea26:	4f9a      	ldr	r7, [pc, #616]	@ (800ec90 <_printf_float+0x2fc>)
 800ea28:	2303      	movs	r3, #3
 800ea2a:	2400      	movs	r4, #0
 800ea2c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea2e:	612b      	str	r3, [r5, #16]
 800ea30:	3301      	adds	r3, #1
 800ea32:	439a      	bics	r2, r3
 800ea34:	602a      	str	r2, [r5, #0]
 800ea36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800ea38:	0029      	movs	r1, r5
 800ea3a:	9300      	str	r3, [sp, #0]
 800ea3c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ea3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ea40:	aa15      	add	r2, sp, #84	@ 0x54
 800ea42:	f000 f9e5 	bl	800ee10 <_printf_common>
 800ea46:	3001      	adds	r0, #1
 800ea48:	d000      	beq.n	800ea4c <_printf_float+0xb8>
 800ea4a:	e09f      	b.n	800eb8c <_printf_float+0x1f8>
 800ea4c:	2001      	movs	r0, #1
 800ea4e:	4240      	negs	r0, r0
 800ea50:	b017      	add	sp, #92	@ 0x5c
 800ea52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea54:	3307      	adds	r3, #7
 800ea56:	e7b8      	b.n	800e9ca <_printf_float+0x36>
 800ea58:	0032      	movs	r2, r6
 800ea5a:	003b      	movs	r3, r7
 800ea5c:	0030      	movs	r0, r6
 800ea5e:	0039      	movs	r1, r7
 800ea60:	f7f4 fbce 	bl	8003200 <__aeabi_dcmpun>
 800ea64:	2800      	cmp	r0, #0
 800ea66:	d00b      	beq.n	800ea80 <_printf_float+0xec>
 800ea68:	2f00      	cmp	r7, #0
 800ea6a:	da03      	bge.n	800ea74 <_printf_float+0xe0>
 800ea6c:	002b      	movs	r3, r5
 800ea6e:	222d      	movs	r2, #45	@ 0x2d
 800ea70:	3343      	adds	r3, #67	@ 0x43
 800ea72:	701a      	strb	r2, [r3, #0]
 800ea74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ea76:	4f87      	ldr	r7, [pc, #540]	@ (800ec94 <_printf_float+0x300>)
 800ea78:	2b47      	cmp	r3, #71	@ 0x47
 800ea7a:	d9d5      	bls.n	800ea28 <_printf_float+0x94>
 800ea7c:	4f86      	ldr	r7, [pc, #536]	@ (800ec98 <_printf_float+0x304>)
 800ea7e:	e7d3      	b.n	800ea28 <_printf_float+0x94>
 800ea80:	2220      	movs	r2, #32
 800ea82:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800ea84:	686b      	ldr	r3, [r5, #4]
 800ea86:	4394      	bics	r4, r2
 800ea88:	1c5a      	adds	r2, r3, #1
 800ea8a:	d146      	bne.n	800eb1a <_printf_float+0x186>
 800ea8c:	3307      	adds	r3, #7
 800ea8e:	606b      	str	r3, [r5, #4]
 800ea90:	2380      	movs	r3, #128	@ 0x80
 800ea92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ea94:	00db      	lsls	r3, r3, #3
 800ea96:	4313      	orrs	r3, r2
 800ea98:	2200      	movs	r2, #0
 800ea9a:	602b      	str	r3, [r5, #0]
 800ea9c:	9206      	str	r2, [sp, #24]
 800ea9e:	aa14      	add	r2, sp, #80	@ 0x50
 800eaa0:	9205      	str	r2, [sp, #20]
 800eaa2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800eaa4:	a90a      	add	r1, sp, #40	@ 0x28
 800eaa6:	9204      	str	r2, [sp, #16]
 800eaa8:	aa13      	add	r2, sp, #76	@ 0x4c
 800eaaa:	9203      	str	r2, [sp, #12]
 800eaac:	2223      	movs	r2, #35	@ 0x23
 800eaae:	1852      	adds	r2, r2, r1
 800eab0:	9202      	str	r2, [sp, #8]
 800eab2:	9301      	str	r3, [sp, #4]
 800eab4:	686b      	ldr	r3, [r5, #4]
 800eab6:	0032      	movs	r2, r6
 800eab8:	9300      	str	r3, [sp, #0]
 800eaba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eabc:	003b      	movs	r3, r7
 800eabe:	f7ff fec2 	bl	800e846 <__cvt>
 800eac2:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800eac4:	0007      	movs	r7, r0
 800eac6:	2c47      	cmp	r4, #71	@ 0x47
 800eac8:	d12d      	bne.n	800eb26 <_printf_float+0x192>
 800eaca:	1cd3      	adds	r3, r2, #3
 800eacc:	db02      	blt.n	800ead4 <_printf_float+0x140>
 800eace:	686b      	ldr	r3, [r5, #4]
 800ead0:	429a      	cmp	r2, r3
 800ead2:	dd48      	ble.n	800eb66 <_printf_float+0x1d2>
 800ead4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ead6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800ead8:	3b02      	subs	r3, #2
 800eada:	b2db      	uxtb	r3, r3
 800eadc:	930c      	str	r3, [sp, #48]	@ 0x30
 800eade:	0028      	movs	r0, r5
 800eae0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800eae2:	3901      	subs	r1, #1
 800eae4:	3050      	adds	r0, #80	@ 0x50
 800eae6:	9113      	str	r1, [sp, #76]	@ 0x4c
 800eae8:	f7ff ff13 	bl	800e912 <__exponent>
 800eaec:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800eaee:	0004      	movs	r4, r0
 800eaf0:	1813      	adds	r3, r2, r0
 800eaf2:	612b      	str	r3, [r5, #16]
 800eaf4:	2a01      	cmp	r2, #1
 800eaf6:	dc02      	bgt.n	800eafe <_printf_float+0x16a>
 800eaf8:	682a      	ldr	r2, [r5, #0]
 800eafa:	07d2      	lsls	r2, r2, #31
 800eafc:	d501      	bpl.n	800eb02 <_printf_float+0x16e>
 800eafe:	3301      	adds	r3, #1
 800eb00:	612b      	str	r3, [r5, #16]
 800eb02:	2323      	movs	r3, #35	@ 0x23
 800eb04:	aa0a      	add	r2, sp, #40	@ 0x28
 800eb06:	189b      	adds	r3, r3, r2
 800eb08:	781b      	ldrb	r3, [r3, #0]
 800eb0a:	2b00      	cmp	r3, #0
 800eb0c:	d100      	bne.n	800eb10 <_printf_float+0x17c>
 800eb0e:	e792      	b.n	800ea36 <_printf_float+0xa2>
 800eb10:	002b      	movs	r3, r5
 800eb12:	222d      	movs	r2, #45	@ 0x2d
 800eb14:	3343      	adds	r3, #67	@ 0x43
 800eb16:	701a      	strb	r2, [r3, #0]
 800eb18:	e78d      	b.n	800ea36 <_printf_float+0xa2>
 800eb1a:	2c47      	cmp	r4, #71	@ 0x47
 800eb1c:	d1b8      	bne.n	800ea90 <_printf_float+0xfc>
 800eb1e:	2b00      	cmp	r3, #0
 800eb20:	d1b6      	bne.n	800ea90 <_printf_float+0xfc>
 800eb22:	3301      	adds	r3, #1
 800eb24:	e7b3      	b.n	800ea8e <_printf_float+0xfa>
 800eb26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb28:	0011      	movs	r1, r2
 800eb2a:	2b65      	cmp	r3, #101	@ 0x65
 800eb2c:	d9d7      	bls.n	800eade <_printf_float+0x14a>
 800eb2e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eb30:	2b66      	cmp	r3, #102	@ 0x66
 800eb32:	d11a      	bne.n	800eb6a <_printf_float+0x1d6>
 800eb34:	686b      	ldr	r3, [r5, #4]
 800eb36:	2a00      	cmp	r2, #0
 800eb38:	dd09      	ble.n	800eb4e <_printf_float+0x1ba>
 800eb3a:	612a      	str	r2, [r5, #16]
 800eb3c:	2b00      	cmp	r3, #0
 800eb3e:	d102      	bne.n	800eb46 <_printf_float+0x1b2>
 800eb40:	6829      	ldr	r1, [r5, #0]
 800eb42:	07c9      	lsls	r1, r1, #31
 800eb44:	d50b      	bpl.n	800eb5e <_printf_float+0x1ca>
 800eb46:	3301      	adds	r3, #1
 800eb48:	189b      	adds	r3, r3, r2
 800eb4a:	612b      	str	r3, [r5, #16]
 800eb4c:	e007      	b.n	800eb5e <_printf_float+0x1ca>
 800eb4e:	2b00      	cmp	r3, #0
 800eb50:	d103      	bne.n	800eb5a <_printf_float+0x1c6>
 800eb52:	2201      	movs	r2, #1
 800eb54:	6829      	ldr	r1, [r5, #0]
 800eb56:	4211      	tst	r1, r2
 800eb58:	d000      	beq.n	800eb5c <_printf_float+0x1c8>
 800eb5a:	1c9a      	adds	r2, r3, #2
 800eb5c:	612a      	str	r2, [r5, #16]
 800eb5e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800eb60:	2400      	movs	r4, #0
 800eb62:	65ab      	str	r3, [r5, #88]	@ 0x58
 800eb64:	e7cd      	b.n	800eb02 <_printf_float+0x16e>
 800eb66:	2367      	movs	r3, #103	@ 0x67
 800eb68:	930c      	str	r3, [sp, #48]	@ 0x30
 800eb6a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800eb6c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eb6e:	4299      	cmp	r1, r3
 800eb70:	db06      	blt.n	800eb80 <_printf_float+0x1ec>
 800eb72:	682b      	ldr	r3, [r5, #0]
 800eb74:	6129      	str	r1, [r5, #16]
 800eb76:	07db      	lsls	r3, r3, #31
 800eb78:	d5f1      	bpl.n	800eb5e <_printf_float+0x1ca>
 800eb7a:	3101      	adds	r1, #1
 800eb7c:	6129      	str	r1, [r5, #16]
 800eb7e:	e7ee      	b.n	800eb5e <_printf_float+0x1ca>
 800eb80:	2201      	movs	r2, #1
 800eb82:	2900      	cmp	r1, #0
 800eb84:	dce0      	bgt.n	800eb48 <_printf_float+0x1b4>
 800eb86:	1892      	adds	r2, r2, r2
 800eb88:	1a52      	subs	r2, r2, r1
 800eb8a:	e7dd      	b.n	800eb48 <_printf_float+0x1b4>
 800eb8c:	682a      	ldr	r2, [r5, #0]
 800eb8e:	0553      	lsls	r3, r2, #21
 800eb90:	d408      	bmi.n	800eba4 <_printf_float+0x210>
 800eb92:	692b      	ldr	r3, [r5, #16]
 800eb94:	003a      	movs	r2, r7
 800eb96:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800eb98:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eb9a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800eb9c:	47a0      	blx	r4
 800eb9e:	3001      	adds	r0, #1
 800eba0:	d129      	bne.n	800ebf6 <_printf_float+0x262>
 800eba2:	e753      	b.n	800ea4c <_printf_float+0xb8>
 800eba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eba6:	2b65      	cmp	r3, #101	@ 0x65
 800eba8:	d800      	bhi.n	800ebac <_printf_float+0x218>
 800ebaa:	e0da      	b.n	800ed62 <_printf_float+0x3ce>
 800ebac:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ebae:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ebb0:	2200      	movs	r2, #0
 800ebb2:	2300      	movs	r3, #0
 800ebb4:	f7f1 fc4a 	bl	800044c <__aeabi_dcmpeq>
 800ebb8:	2800      	cmp	r0, #0
 800ebba:	d033      	beq.n	800ec24 <_printf_float+0x290>
 800ebbc:	2301      	movs	r3, #1
 800ebbe:	4a37      	ldr	r2, [pc, #220]	@ (800ec9c <_printf_float+0x308>)
 800ebc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebc4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ebc6:	47a0      	blx	r4
 800ebc8:	3001      	adds	r0, #1
 800ebca:	d100      	bne.n	800ebce <_printf_float+0x23a>
 800ebcc:	e73e      	b.n	800ea4c <_printf_float+0xb8>
 800ebce:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ebd0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ebd2:	42b3      	cmp	r3, r6
 800ebd4:	db02      	blt.n	800ebdc <_printf_float+0x248>
 800ebd6:	682b      	ldr	r3, [r5, #0]
 800ebd8:	07db      	lsls	r3, r3, #31
 800ebda:	d50c      	bpl.n	800ebf6 <_printf_float+0x262>
 800ebdc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ebde:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ebe0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ebe2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ebe4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ebe6:	47a0      	blx	r4
 800ebe8:	2400      	movs	r4, #0
 800ebea:	3001      	adds	r0, #1
 800ebec:	d100      	bne.n	800ebf0 <_printf_float+0x25c>
 800ebee:	e72d      	b.n	800ea4c <_printf_float+0xb8>
 800ebf0:	1e73      	subs	r3, r6, #1
 800ebf2:	42a3      	cmp	r3, r4
 800ebf4:	dc0a      	bgt.n	800ec0c <_printf_float+0x278>
 800ebf6:	682b      	ldr	r3, [r5, #0]
 800ebf8:	079b      	lsls	r3, r3, #30
 800ebfa:	d500      	bpl.n	800ebfe <_printf_float+0x26a>
 800ebfc:	e105      	b.n	800ee0a <_printf_float+0x476>
 800ebfe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ec00:	68e8      	ldr	r0, [r5, #12]
 800ec02:	4298      	cmp	r0, r3
 800ec04:	db00      	blt.n	800ec08 <_printf_float+0x274>
 800ec06:	e723      	b.n	800ea50 <_printf_float+0xbc>
 800ec08:	0018      	movs	r0, r3
 800ec0a:	e721      	b.n	800ea50 <_printf_float+0xbc>
 800ec0c:	002a      	movs	r2, r5
 800ec0e:	2301      	movs	r3, #1
 800ec10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec14:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ec16:	321a      	adds	r2, #26
 800ec18:	47b8      	blx	r7
 800ec1a:	3001      	adds	r0, #1
 800ec1c:	d100      	bne.n	800ec20 <_printf_float+0x28c>
 800ec1e:	e715      	b.n	800ea4c <_printf_float+0xb8>
 800ec20:	3401      	adds	r4, #1
 800ec22:	e7e5      	b.n	800ebf0 <_printf_float+0x25c>
 800ec24:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	dc3a      	bgt.n	800eca0 <_printf_float+0x30c>
 800ec2a:	2301      	movs	r3, #1
 800ec2c:	4a1b      	ldr	r2, [pc, #108]	@ (800ec9c <_printf_float+0x308>)
 800ec2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ec34:	47a0      	blx	r4
 800ec36:	3001      	adds	r0, #1
 800ec38:	d100      	bne.n	800ec3c <_printf_float+0x2a8>
 800ec3a:	e707      	b.n	800ea4c <_printf_float+0xb8>
 800ec3c:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800ec3e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec40:	4333      	orrs	r3, r6
 800ec42:	d102      	bne.n	800ec4a <_printf_float+0x2b6>
 800ec44:	682b      	ldr	r3, [r5, #0]
 800ec46:	07db      	lsls	r3, r3, #31
 800ec48:	d5d5      	bpl.n	800ebf6 <_printf_float+0x262>
 800ec4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ec4c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ec4e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec50:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec52:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ec54:	47a0      	blx	r4
 800ec56:	2300      	movs	r3, #0
 800ec58:	3001      	adds	r0, #1
 800ec5a:	d100      	bne.n	800ec5e <_printf_float+0x2ca>
 800ec5c:	e6f6      	b.n	800ea4c <_printf_float+0xb8>
 800ec5e:	930c      	str	r3, [sp, #48]	@ 0x30
 800ec60:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ec62:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ec64:	425b      	negs	r3, r3
 800ec66:	4293      	cmp	r3, r2
 800ec68:	dc01      	bgt.n	800ec6e <_printf_float+0x2da>
 800ec6a:	0033      	movs	r3, r6
 800ec6c:	e792      	b.n	800eb94 <_printf_float+0x200>
 800ec6e:	002a      	movs	r2, r5
 800ec70:	2301      	movs	r3, #1
 800ec72:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ec74:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec76:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ec78:	321a      	adds	r2, #26
 800ec7a:	47a0      	blx	r4
 800ec7c:	3001      	adds	r0, #1
 800ec7e:	d100      	bne.n	800ec82 <_printf_float+0x2ee>
 800ec80:	e6e4      	b.n	800ea4c <_printf_float+0xb8>
 800ec82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ec84:	3301      	adds	r3, #1
 800ec86:	e7ea      	b.n	800ec5e <_printf_float+0x2ca>
 800ec88:	7fefffff 	.word	0x7fefffff
 800ec8c:	08012624 	.word	0x08012624
 800ec90:	08012628 	.word	0x08012628
 800ec94:	0801262c 	.word	0x0801262c
 800ec98:	08012630 	.word	0x08012630
 800ec9c:	08012634 	.word	0x08012634
 800eca0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800eca2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800eca4:	930c      	str	r3, [sp, #48]	@ 0x30
 800eca6:	429e      	cmp	r6, r3
 800eca8:	dd00      	ble.n	800ecac <_printf_float+0x318>
 800ecaa:	001e      	movs	r6, r3
 800ecac:	2e00      	cmp	r6, #0
 800ecae:	dc31      	bgt.n	800ed14 <_printf_float+0x380>
 800ecb0:	43f3      	mvns	r3, r6
 800ecb2:	2400      	movs	r4, #0
 800ecb4:	17db      	asrs	r3, r3, #31
 800ecb6:	4033      	ands	r3, r6
 800ecb8:	930e      	str	r3, [sp, #56]	@ 0x38
 800ecba:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ecbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ecbe:	1af3      	subs	r3, r6, r3
 800ecc0:	42a3      	cmp	r3, r4
 800ecc2:	dc30      	bgt.n	800ed26 <_printf_float+0x392>
 800ecc4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ecc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ecc8:	429a      	cmp	r2, r3
 800ecca:	dc38      	bgt.n	800ed3e <_printf_float+0x3aa>
 800eccc:	682b      	ldr	r3, [r5, #0]
 800ecce:	07db      	lsls	r3, r3, #31
 800ecd0:	d435      	bmi.n	800ed3e <_printf_float+0x3aa>
 800ecd2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800ecd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ecd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ecd8:	1b9b      	subs	r3, r3, r6
 800ecda:	1b14      	subs	r4, r2, r4
 800ecdc:	429c      	cmp	r4, r3
 800ecde:	dd00      	ble.n	800ece2 <_printf_float+0x34e>
 800ece0:	001c      	movs	r4, r3
 800ece2:	2c00      	cmp	r4, #0
 800ece4:	dc34      	bgt.n	800ed50 <_printf_float+0x3bc>
 800ece6:	43e3      	mvns	r3, r4
 800ece8:	2600      	movs	r6, #0
 800ecea:	17db      	asrs	r3, r3, #31
 800ecec:	401c      	ands	r4, r3
 800ecee:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ecf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800ecf2:	1ad3      	subs	r3, r2, r3
 800ecf4:	1b1b      	subs	r3, r3, r4
 800ecf6:	42b3      	cmp	r3, r6
 800ecf8:	dc00      	bgt.n	800ecfc <_printf_float+0x368>
 800ecfa:	e77c      	b.n	800ebf6 <_printf_float+0x262>
 800ecfc:	002a      	movs	r2, r5
 800ecfe:	2301      	movs	r3, #1
 800ed00:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed04:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800ed06:	321a      	adds	r2, #26
 800ed08:	47b8      	blx	r7
 800ed0a:	3001      	adds	r0, #1
 800ed0c:	d100      	bne.n	800ed10 <_printf_float+0x37c>
 800ed0e:	e69d      	b.n	800ea4c <_printf_float+0xb8>
 800ed10:	3601      	adds	r6, #1
 800ed12:	e7ec      	b.n	800ecee <_printf_float+0x35a>
 800ed14:	0033      	movs	r3, r6
 800ed16:	003a      	movs	r2, r7
 800ed18:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed1a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed1c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ed1e:	47a0      	blx	r4
 800ed20:	3001      	adds	r0, #1
 800ed22:	d1c5      	bne.n	800ecb0 <_printf_float+0x31c>
 800ed24:	e692      	b.n	800ea4c <_printf_float+0xb8>
 800ed26:	002a      	movs	r2, r5
 800ed28:	2301      	movs	r3, #1
 800ed2a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed2c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed2e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ed30:	321a      	adds	r2, #26
 800ed32:	47b0      	blx	r6
 800ed34:	3001      	adds	r0, #1
 800ed36:	d100      	bne.n	800ed3a <_printf_float+0x3a6>
 800ed38:	e688      	b.n	800ea4c <_printf_float+0xb8>
 800ed3a:	3401      	adds	r4, #1
 800ed3c:	e7bd      	b.n	800ecba <_printf_float+0x326>
 800ed3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed46:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800ed48:	47a0      	blx	r4
 800ed4a:	3001      	adds	r0, #1
 800ed4c:	d1c1      	bne.n	800ecd2 <_printf_float+0x33e>
 800ed4e:	e67d      	b.n	800ea4c <_printf_float+0xb8>
 800ed50:	19ba      	adds	r2, r7, r6
 800ed52:	0023      	movs	r3, r4
 800ed54:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed58:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ed5a:	47b0      	blx	r6
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	d1c2      	bne.n	800ece6 <_printf_float+0x352>
 800ed60:	e674      	b.n	800ea4c <_printf_float+0xb8>
 800ed62:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800ed64:	930c      	str	r3, [sp, #48]	@ 0x30
 800ed66:	2b01      	cmp	r3, #1
 800ed68:	dc02      	bgt.n	800ed70 <_printf_float+0x3dc>
 800ed6a:	2301      	movs	r3, #1
 800ed6c:	421a      	tst	r2, r3
 800ed6e:	d039      	beq.n	800ede4 <_printf_float+0x450>
 800ed70:	2301      	movs	r3, #1
 800ed72:	003a      	movs	r2, r7
 800ed74:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed78:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ed7a:	47b0      	blx	r6
 800ed7c:	3001      	adds	r0, #1
 800ed7e:	d100      	bne.n	800ed82 <_printf_float+0x3ee>
 800ed80:	e664      	b.n	800ea4c <_printf_float+0xb8>
 800ed82:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ed84:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ed86:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800ed88:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ed8a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800ed8c:	47b0      	blx	r6
 800ed8e:	3001      	adds	r0, #1
 800ed90:	d100      	bne.n	800ed94 <_printf_float+0x400>
 800ed92:	e65b      	b.n	800ea4c <_printf_float+0xb8>
 800ed94:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800ed96:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ed98:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ed9a:	2200      	movs	r2, #0
 800ed9c:	3b01      	subs	r3, #1
 800ed9e:	930c      	str	r3, [sp, #48]	@ 0x30
 800eda0:	2300      	movs	r3, #0
 800eda2:	f7f1 fb53 	bl	800044c <__aeabi_dcmpeq>
 800eda6:	2800      	cmp	r0, #0
 800eda8:	d11a      	bne.n	800ede0 <_printf_float+0x44c>
 800edaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800edac:	1c7a      	adds	r2, r7, #1
 800edae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800edb0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edb2:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800edb4:	47b0      	blx	r6
 800edb6:	3001      	adds	r0, #1
 800edb8:	d10e      	bne.n	800edd8 <_printf_float+0x444>
 800edba:	e647      	b.n	800ea4c <_printf_float+0xb8>
 800edbc:	002a      	movs	r2, r5
 800edbe:	2301      	movs	r3, #1
 800edc0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800edc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edc4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800edc6:	321a      	adds	r2, #26
 800edc8:	47b8      	blx	r7
 800edca:	3001      	adds	r0, #1
 800edcc:	d100      	bne.n	800edd0 <_printf_float+0x43c>
 800edce:	e63d      	b.n	800ea4c <_printf_float+0xb8>
 800edd0:	3601      	adds	r6, #1
 800edd2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800edd4:	429e      	cmp	r6, r3
 800edd6:	dbf1      	blt.n	800edbc <_printf_float+0x428>
 800edd8:	002a      	movs	r2, r5
 800edda:	0023      	movs	r3, r4
 800eddc:	3250      	adds	r2, #80	@ 0x50
 800edde:	e6da      	b.n	800eb96 <_printf_float+0x202>
 800ede0:	2600      	movs	r6, #0
 800ede2:	e7f6      	b.n	800edd2 <_printf_float+0x43e>
 800ede4:	003a      	movs	r2, r7
 800ede6:	e7e2      	b.n	800edae <_printf_float+0x41a>
 800ede8:	002a      	movs	r2, r5
 800edea:	2301      	movs	r3, #1
 800edec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800edee:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800edf0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800edf2:	3219      	adds	r2, #25
 800edf4:	47b0      	blx	r6
 800edf6:	3001      	adds	r0, #1
 800edf8:	d100      	bne.n	800edfc <_printf_float+0x468>
 800edfa:	e627      	b.n	800ea4c <_printf_float+0xb8>
 800edfc:	3401      	adds	r4, #1
 800edfe:	68eb      	ldr	r3, [r5, #12]
 800ee00:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800ee02:	1a9b      	subs	r3, r3, r2
 800ee04:	42a3      	cmp	r3, r4
 800ee06:	dcef      	bgt.n	800ede8 <_printf_float+0x454>
 800ee08:	e6f9      	b.n	800ebfe <_printf_float+0x26a>
 800ee0a:	2400      	movs	r4, #0
 800ee0c:	e7f7      	b.n	800edfe <_printf_float+0x46a>
 800ee0e:	46c0      	nop			@ (mov r8, r8)

0800ee10 <_printf_common>:
 800ee10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ee12:	0016      	movs	r6, r2
 800ee14:	9301      	str	r3, [sp, #4]
 800ee16:	688a      	ldr	r2, [r1, #8]
 800ee18:	690b      	ldr	r3, [r1, #16]
 800ee1a:	000c      	movs	r4, r1
 800ee1c:	9000      	str	r0, [sp, #0]
 800ee1e:	4293      	cmp	r3, r2
 800ee20:	da00      	bge.n	800ee24 <_printf_common+0x14>
 800ee22:	0013      	movs	r3, r2
 800ee24:	0022      	movs	r2, r4
 800ee26:	6033      	str	r3, [r6, #0]
 800ee28:	3243      	adds	r2, #67	@ 0x43
 800ee2a:	7812      	ldrb	r2, [r2, #0]
 800ee2c:	2a00      	cmp	r2, #0
 800ee2e:	d001      	beq.n	800ee34 <_printf_common+0x24>
 800ee30:	3301      	adds	r3, #1
 800ee32:	6033      	str	r3, [r6, #0]
 800ee34:	6823      	ldr	r3, [r4, #0]
 800ee36:	069b      	lsls	r3, r3, #26
 800ee38:	d502      	bpl.n	800ee40 <_printf_common+0x30>
 800ee3a:	6833      	ldr	r3, [r6, #0]
 800ee3c:	3302      	adds	r3, #2
 800ee3e:	6033      	str	r3, [r6, #0]
 800ee40:	6822      	ldr	r2, [r4, #0]
 800ee42:	2306      	movs	r3, #6
 800ee44:	0015      	movs	r5, r2
 800ee46:	401d      	ands	r5, r3
 800ee48:	421a      	tst	r2, r3
 800ee4a:	d027      	beq.n	800ee9c <_printf_common+0x8c>
 800ee4c:	0023      	movs	r3, r4
 800ee4e:	3343      	adds	r3, #67	@ 0x43
 800ee50:	781b      	ldrb	r3, [r3, #0]
 800ee52:	1e5a      	subs	r2, r3, #1
 800ee54:	4193      	sbcs	r3, r2
 800ee56:	6822      	ldr	r2, [r4, #0]
 800ee58:	0692      	lsls	r2, r2, #26
 800ee5a:	d430      	bmi.n	800eebe <_printf_common+0xae>
 800ee5c:	0022      	movs	r2, r4
 800ee5e:	9901      	ldr	r1, [sp, #4]
 800ee60:	9800      	ldr	r0, [sp, #0]
 800ee62:	9d08      	ldr	r5, [sp, #32]
 800ee64:	3243      	adds	r2, #67	@ 0x43
 800ee66:	47a8      	blx	r5
 800ee68:	3001      	adds	r0, #1
 800ee6a:	d025      	beq.n	800eeb8 <_printf_common+0xa8>
 800ee6c:	2206      	movs	r2, #6
 800ee6e:	6823      	ldr	r3, [r4, #0]
 800ee70:	2500      	movs	r5, #0
 800ee72:	4013      	ands	r3, r2
 800ee74:	2b04      	cmp	r3, #4
 800ee76:	d105      	bne.n	800ee84 <_printf_common+0x74>
 800ee78:	6833      	ldr	r3, [r6, #0]
 800ee7a:	68e5      	ldr	r5, [r4, #12]
 800ee7c:	1aed      	subs	r5, r5, r3
 800ee7e:	43eb      	mvns	r3, r5
 800ee80:	17db      	asrs	r3, r3, #31
 800ee82:	401d      	ands	r5, r3
 800ee84:	68a3      	ldr	r3, [r4, #8]
 800ee86:	6922      	ldr	r2, [r4, #16]
 800ee88:	4293      	cmp	r3, r2
 800ee8a:	dd01      	ble.n	800ee90 <_printf_common+0x80>
 800ee8c:	1a9b      	subs	r3, r3, r2
 800ee8e:	18ed      	adds	r5, r5, r3
 800ee90:	2600      	movs	r6, #0
 800ee92:	42b5      	cmp	r5, r6
 800ee94:	d120      	bne.n	800eed8 <_printf_common+0xc8>
 800ee96:	2000      	movs	r0, #0
 800ee98:	e010      	b.n	800eebc <_printf_common+0xac>
 800ee9a:	3501      	adds	r5, #1
 800ee9c:	68e3      	ldr	r3, [r4, #12]
 800ee9e:	6832      	ldr	r2, [r6, #0]
 800eea0:	1a9b      	subs	r3, r3, r2
 800eea2:	42ab      	cmp	r3, r5
 800eea4:	ddd2      	ble.n	800ee4c <_printf_common+0x3c>
 800eea6:	0022      	movs	r2, r4
 800eea8:	2301      	movs	r3, #1
 800eeaa:	9901      	ldr	r1, [sp, #4]
 800eeac:	9800      	ldr	r0, [sp, #0]
 800eeae:	9f08      	ldr	r7, [sp, #32]
 800eeb0:	3219      	adds	r2, #25
 800eeb2:	47b8      	blx	r7
 800eeb4:	3001      	adds	r0, #1
 800eeb6:	d1f0      	bne.n	800ee9a <_printf_common+0x8a>
 800eeb8:	2001      	movs	r0, #1
 800eeba:	4240      	negs	r0, r0
 800eebc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eebe:	2030      	movs	r0, #48	@ 0x30
 800eec0:	18e1      	adds	r1, r4, r3
 800eec2:	3143      	adds	r1, #67	@ 0x43
 800eec4:	7008      	strb	r0, [r1, #0]
 800eec6:	0021      	movs	r1, r4
 800eec8:	1c5a      	adds	r2, r3, #1
 800eeca:	3145      	adds	r1, #69	@ 0x45
 800eecc:	7809      	ldrb	r1, [r1, #0]
 800eece:	18a2      	adds	r2, r4, r2
 800eed0:	3243      	adds	r2, #67	@ 0x43
 800eed2:	3302      	adds	r3, #2
 800eed4:	7011      	strb	r1, [r2, #0]
 800eed6:	e7c1      	b.n	800ee5c <_printf_common+0x4c>
 800eed8:	0022      	movs	r2, r4
 800eeda:	2301      	movs	r3, #1
 800eedc:	9901      	ldr	r1, [sp, #4]
 800eede:	9800      	ldr	r0, [sp, #0]
 800eee0:	9f08      	ldr	r7, [sp, #32]
 800eee2:	321a      	adds	r2, #26
 800eee4:	47b8      	blx	r7
 800eee6:	3001      	adds	r0, #1
 800eee8:	d0e6      	beq.n	800eeb8 <_printf_common+0xa8>
 800eeea:	3601      	adds	r6, #1
 800eeec:	e7d1      	b.n	800ee92 <_printf_common+0x82>
	...

0800eef0 <_printf_i>:
 800eef0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eef2:	b08b      	sub	sp, #44	@ 0x2c
 800eef4:	9206      	str	r2, [sp, #24]
 800eef6:	000a      	movs	r2, r1
 800eef8:	3243      	adds	r2, #67	@ 0x43
 800eefa:	9307      	str	r3, [sp, #28]
 800eefc:	9005      	str	r0, [sp, #20]
 800eefe:	9203      	str	r2, [sp, #12]
 800ef00:	7e0a      	ldrb	r2, [r1, #24]
 800ef02:	000c      	movs	r4, r1
 800ef04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef06:	2a78      	cmp	r2, #120	@ 0x78
 800ef08:	d809      	bhi.n	800ef1e <_printf_i+0x2e>
 800ef0a:	2a62      	cmp	r2, #98	@ 0x62
 800ef0c:	d80b      	bhi.n	800ef26 <_printf_i+0x36>
 800ef0e:	2a00      	cmp	r2, #0
 800ef10:	d100      	bne.n	800ef14 <_printf_i+0x24>
 800ef12:	e0bc      	b.n	800f08e <_printf_i+0x19e>
 800ef14:	497b      	ldr	r1, [pc, #492]	@ (800f104 <_printf_i+0x214>)
 800ef16:	9104      	str	r1, [sp, #16]
 800ef18:	2a58      	cmp	r2, #88	@ 0x58
 800ef1a:	d100      	bne.n	800ef1e <_printf_i+0x2e>
 800ef1c:	e090      	b.n	800f040 <_printf_i+0x150>
 800ef1e:	0025      	movs	r5, r4
 800ef20:	3542      	adds	r5, #66	@ 0x42
 800ef22:	702a      	strb	r2, [r5, #0]
 800ef24:	e022      	b.n	800ef6c <_printf_i+0x7c>
 800ef26:	0010      	movs	r0, r2
 800ef28:	3863      	subs	r0, #99	@ 0x63
 800ef2a:	2815      	cmp	r0, #21
 800ef2c:	d8f7      	bhi.n	800ef1e <_printf_i+0x2e>
 800ef2e:	f7f1 f8fd 	bl	800012c <__gnu_thumb1_case_shi>
 800ef32:	0016      	.short	0x0016
 800ef34:	fff6001f 	.word	0xfff6001f
 800ef38:	fff6fff6 	.word	0xfff6fff6
 800ef3c:	001ffff6 	.word	0x001ffff6
 800ef40:	fff6fff6 	.word	0xfff6fff6
 800ef44:	fff6fff6 	.word	0xfff6fff6
 800ef48:	003600a1 	.word	0x003600a1
 800ef4c:	fff60080 	.word	0xfff60080
 800ef50:	00b2fff6 	.word	0x00b2fff6
 800ef54:	0036fff6 	.word	0x0036fff6
 800ef58:	fff6fff6 	.word	0xfff6fff6
 800ef5c:	0084      	.short	0x0084
 800ef5e:	0025      	movs	r5, r4
 800ef60:	681a      	ldr	r2, [r3, #0]
 800ef62:	3542      	adds	r5, #66	@ 0x42
 800ef64:	1d11      	adds	r1, r2, #4
 800ef66:	6019      	str	r1, [r3, #0]
 800ef68:	6813      	ldr	r3, [r2, #0]
 800ef6a:	702b      	strb	r3, [r5, #0]
 800ef6c:	2301      	movs	r3, #1
 800ef6e:	e0a0      	b.n	800f0b2 <_printf_i+0x1c2>
 800ef70:	6818      	ldr	r0, [r3, #0]
 800ef72:	6809      	ldr	r1, [r1, #0]
 800ef74:	1d02      	adds	r2, r0, #4
 800ef76:	060d      	lsls	r5, r1, #24
 800ef78:	d50b      	bpl.n	800ef92 <_printf_i+0xa2>
 800ef7a:	6806      	ldr	r6, [r0, #0]
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	2e00      	cmp	r6, #0
 800ef80:	da03      	bge.n	800ef8a <_printf_i+0x9a>
 800ef82:	232d      	movs	r3, #45	@ 0x2d
 800ef84:	9a03      	ldr	r2, [sp, #12]
 800ef86:	4276      	negs	r6, r6
 800ef88:	7013      	strb	r3, [r2, #0]
 800ef8a:	4b5e      	ldr	r3, [pc, #376]	@ (800f104 <_printf_i+0x214>)
 800ef8c:	270a      	movs	r7, #10
 800ef8e:	9304      	str	r3, [sp, #16]
 800ef90:	e018      	b.n	800efc4 <_printf_i+0xd4>
 800ef92:	6806      	ldr	r6, [r0, #0]
 800ef94:	601a      	str	r2, [r3, #0]
 800ef96:	0649      	lsls	r1, r1, #25
 800ef98:	d5f1      	bpl.n	800ef7e <_printf_i+0x8e>
 800ef9a:	b236      	sxth	r6, r6
 800ef9c:	e7ef      	b.n	800ef7e <_printf_i+0x8e>
 800ef9e:	6808      	ldr	r0, [r1, #0]
 800efa0:	6819      	ldr	r1, [r3, #0]
 800efa2:	c940      	ldmia	r1!, {r6}
 800efa4:	0605      	lsls	r5, r0, #24
 800efa6:	d402      	bmi.n	800efae <_printf_i+0xbe>
 800efa8:	0640      	lsls	r0, r0, #25
 800efaa:	d500      	bpl.n	800efae <_printf_i+0xbe>
 800efac:	b2b6      	uxth	r6, r6
 800efae:	6019      	str	r1, [r3, #0]
 800efb0:	4b54      	ldr	r3, [pc, #336]	@ (800f104 <_printf_i+0x214>)
 800efb2:	270a      	movs	r7, #10
 800efb4:	9304      	str	r3, [sp, #16]
 800efb6:	2a6f      	cmp	r2, #111	@ 0x6f
 800efb8:	d100      	bne.n	800efbc <_printf_i+0xcc>
 800efba:	3f02      	subs	r7, #2
 800efbc:	0023      	movs	r3, r4
 800efbe:	2200      	movs	r2, #0
 800efc0:	3343      	adds	r3, #67	@ 0x43
 800efc2:	701a      	strb	r2, [r3, #0]
 800efc4:	6863      	ldr	r3, [r4, #4]
 800efc6:	60a3      	str	r3, [r4, #8]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	db03      	blt.n	800efd4 <_printf_i+0xe4>
 800efcc:	2104      	movs	r1, #4
 800efce:	6822      	ldr	r2, [r4, #0]
 800efd0:	438a      	bics	r2, r1
 800efd2:	6022      	str	r2, [r4, #0]
 800efd4:	2e00      	cmp	r6, #0
 800efd6:	d102      	bne.n	800efde <_printf_i+0xee>
 800efd8:	9d03      	ldr	r5, [sp, #12]
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d00c      	beq.n	800eff8 <_printf_i+0x108>
 800efde:	9d03      	ldr	r5, [sp, #12]
 800efe0:	0030      	movs	r0, r6
 800efe2:	0039      	movs	r1, r7
 800efe4:	f7f1 f932 	bl	800024c <__aeabi_uidivmod>
 800efe8:	9b04      	ldr	r3, [sp, #16]
 800efea:	3d01      	subs	r5, #1
 800efec:	5c5b      	ldrb	r3, [r3, r1]
 800efee:	702b      	strb	r3, [r5, #0]
 800eff0:	0033      	movs	r3, r6
 800eff2:	0006      	movs	r6, r0
 800eff4:	429f      	cmp	r7, r3
 800eff6:	d9f3      	bls.n	800efe0 <_printf_i+0xf0>
 800eff8:	2f08      	cmp	r7, #8
 800effa:	d109      	bne.n	800f010 <_printf_i+0x120>
 800effc:	6823      	ldr	r3, [r4, #0]
 800effe:	07db      	lsls	r3, r3, #31
 800f000:	d506      	bpl.n	800f010 <_printf_i+0x120>
 800f002:	6862      	ldr	r2, [r4, #4]
 800f004:	6923      	ldr	r3, [r4, #16]
 800f006:	429a      	cmp	r2, r3
 800f008:	dc02      	bgt.n	800f010 <_printf_i+0x120>
 800f00a:	2330      	movs	r3, #48	@ 0x30
 800f00c:	3d01      	subs	r5, #1
 800f00e:	702b      	strb	r3, [r5, #0]
 800f010:	9b03      	ldr	r3, [sp, #12]
 800f012:	1b5b      	subs	r3, r3, r5
 800f014:	6123      	str	r3, [r4, #16]
 800f016:	9b07      	ldr	r3, [sp, #28]
 800f018:	0021      	movs	r1, r4
 800f01a:	9300      	str	r3, [sp, #0]
 800f01c:	9805      	ldr	r0, [sp, #20]
 800f01e:	9b06      	ldr	r3, [sp, #24]
 800f020:	aa09      	add	r2, sp, #36	@ 0x24
 800f022:	f7ff fef5 	bl	800ee10 <_printf_common>
 800f026:	3001      	adds	r0, #1
 800f028:	d148      	bne.n	800f0bc <_printf_i+0x1cc>
 800f02a:	2001      	movs	r0, #1
 800f02c:	4240      	negs	r0, r0
 800f02e:	b00b      	add	sp, #44	@ 0x2c
 800f030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f032:	2220      	movs	r2, #32
 800f034:	6809      	ldr	r1, [r1, #0]
 800f036:	430a      	orrs	r2, r1
 800f038:	6022      	str	r2, [r4, #0]
 800f03a:	2278      	movs	r2, #120	@ 0x78
 800f03c:	4932      	ldr	r1, [pc, #200]	@ (800f108 <_printf_i+0x218>)
 800f03e:	9104      	str	r1, [sp, #16]
 800f040:	0021      	movs	r1, r4
 800f042:	3145      	adds	r1, #69	@ 0x45
 800f044:	700a      	strb	r2, [r1, #0]
 800f046:	6819      	ldr	r1, [r3, #0]
 800f048:	6822      	ldr	r2, [r4, #0]
 800f04a:	c940      	ldmia	r1!, {r6}
 800f04c:	0610      	lsls	r0, r2, #24
 800f04e:	d402      	bmi.n	800f056 <_printf_i+0x166>
 800f050:	0650      	lsls	r0, r2, #25
 800f052:	d500      	bpl.n	800f056 <_printf_i+0x166>
 800f054:	b2b6      	uxth	r6, r6
 800f056:	6019      	str	r1, [r3, #0]
 800f058:	07d3      	lsls	r3, r2, #31
 800f05a:	d502      	bpl.n	800f062 <_printf_i+0x172>
 800f05c:	2320      	movs	r3, #32
 800f05e:	4313      	orrs	r3, r2
 800f060:	6023      	str	r3, [r4, #0]
 800f062:	2e00      	cmp	r6, #0
 800f064:	d001      	beq.n	800f06a <_printf_i+0x17a>
 800f066:	2710      	movs	r7, #16
 800f068:	e7a8      	b.n	800efbc <_printf_i+0xcc>
 800f06a:	2220      	movs	r2, #32
 800f06c:	6823      	ldr	r3, [r4, #0]
 800f06e:	4393      	bics	r3, r2
 800f070:	6023      	str	r3, [r4, #0]
 800f072:	e7f8      	b.n	800f066 <_printf_i+0x176>
 800f074:	681a      	ldr	r2, [r3, #0]
 800f076:	680d      	ldr	r5, [r1, #0]
 800f078:	1d10      	adds	r0, r2, #4
 800f07a:	6949      	ldr	r1, [r1, #20]
 800f07c:	6018      	str	r0, [r3, #0]
 800f07e:	6813      	ldr	r3, [r2, #0]
 800f080:	062e      	lsls	r6, r5, #24
 800f082:	d501      	bpl.n	800f088 <_printf_i+0x198>
 800f084:	6019      	str	r1, [r3, #0]
 800f086:	e002      	b.n	800f08e <_printf_i+0x19e>
 800f088:	066d      	lsls	r5, r5, #25
 800f08a:	d5fb      	bpl.n	800f084 <_printf_i+0x194>
 800f08c:	8019      	strh	r1, [r3, #0]
 800f08e:	2300      	movs	r3, #0
 800f090:	9d03      	ldr	r5, [sp, #12]
 800f092:	6123      	str	r3, [r4, #16]
 800f094:	e7bf      	b.n	800f016 <_printf_i+0x126>
 800f096:	681a      	ldr	r2, [r3, #0]
 800f098:	1d11      	adds	r1, r2, #4
 800f09a:	6019      	str	r1, [r3, #0]
 800f09c:	6815      	ldr	r5, [r2, #0]
 800f09e:	2100      	movs	r1, #0
 800f0a0:	0028      	movs	r0, r5
 800f0a2:	6862      	ldr	r2, [r4, #4]
 800f0a4:	f000 fa5b 	bl	800f55e <memchr>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d001      	beq.n	800f0b0 <_printf_i+0x1c0>
 800f0ac:	1b40      	subs	r0, r0, r5
 800f0ae:	6060      	str	r0, [r4, #4]
 800f0b0:	6863      	ldr	r3, [r4, #4]
 800f0b2:	6123      	str	r3, [r4, #16]
 800f0b4:	2300      	movs	r3, #0
 800f0b6:	9a03      	ldr	r2, [sp, #12]
 800f0b8:	7013      	strb	r3, [r2, #0]
 800f0ba:	e7ac      	b.n	800f016 <_printf_i+0x126>
 800f0bc:	002a      	movs	r2, r5
 800f0be:	6923      	ldr	r3, [r4, #16]
 800f0c0:	9906      	ldr	r1, [sp, #24]
 800f0c2:	9805      	ldr	r0, [sp, #20]
 800f0c4:	9d07      	ldr	r5, [sp, #28]
 800f0c6:	47a8      	blx	r5
 800f0c8:	3001      	adds	r0, #1
 800f0ca:	d0ae      	beq.n	800f02a <_printf_i+0x13a>
 800f0cc:	6823      	ldr	r3, [r4, #0]
 800f0ce:	079b      	lsls	r3, r3, #30
 800f0d0:	d415      	bmi.n	800f0fe <_printf_i+0x20e>
 800f0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0d4:	68e0      	ldr	r0, [r4, #12]
 800f0d6:	4298      	cmp	r0, r3
 800f0d8:	daa9      	bge.n	800f02e <_printf_i+0x13e>
 800f0da:	0018      	movs	r0, r3
 800f0dc:	e7a7      	b.n	800f02e <_printf_i+0x13e>
 800f0de:	0022      	movs	r2, r4
 800f0e0:	2301      	movs	r3, #1
 800f0e2:	9906      	ldr	r1, [sp, #24]
 800f0e4:	9805      	ldr	r0, [sp, #20]
 800f0e6:	9e07      	ldr	r6, [sp, #28]
 800f0e8:	3219      	adds	r2, #25
 800f0ea:	47b0      	blx	r6
 800f0ec:	3001      	adds	r0, #1
 800f0ee:	d09c      	beq.n	800f02a <_printf_i+0x13a>
 800f0f0:	3501      	adds	r5, #1
 800f0f2:	68e3      	ldr	r3, [r4, #12]
 800f0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f0f6:	1a9b      	subs	r3, r3, r2
 800f0f8:	42ab      	cmp	r3, r5
 800f0fa:	dcf0      	bgt.n	800f0de <_printf_i+0x1ee>
 800f0fc:	e7e9      	b.n	800f0d2 <_printf_i+0x1e2>
 800f0fe:	2500      	movs	r5, #0
 800f100:	e7f7      	b.n	800f0f2 <_printf_i+0x202>
 800f102:	46c0      	nop			@ (mov r8, r8)
 800f104:	08012636 	.word	0x08012636
 800f108:	08012647 	.word	0x08012647

0800f10c <std>:
 800f10c:	2300      	movs	r3, #0
 800f10e:	b510      	push	{r4, lr}
 800f110:	0004      	movs	r4, r0
 800f112:	6003      	str	r3, [r0, #0]
 800f114:	6043      	str	r3, [r0, #4]
 800f116:	6083      	str	r3, [r0, #8]
 800f118:	8181      	strh	r1, [r0, #12]
 800f11a:	6643      	str	r3, [r0, #100]	@ 0x64
 800f11c:	81c2      	strh	r2, [r0, #14]
 800f11e:	6103      	str	r3, [r0, #16]
 800f120:	6143      	str	r3, [r0, #20]
 800f122:	6183      	str	r3, [r0, #24]
 800f124:	0019      	movs	r1, r3
 800f126:	2208      	movs	r2, #8
 800f128:	305c      	adds	r0, #92	@ 0x5c
 800f12a:	f000 f967 	bl	800f3fc <memset>
 800f12e:	4b0b      	ldr	r3, [pc, #44]	@ (800f15c <std+0x50>)
 800f130:	6224      	str	r4, [r4, #32]
 800f132:	6263      	str	r3, [r4, #36]	@ 0x24
 800f134:	4b0a      	ldr	r3, [pc, #40]	@ (800f160 <std+0x54>)
 800f136:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f138:	4b0a      	ldr	r3, [pc, #40]	@ (800f164 <std+0x58>)
 800f13a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f13c:	4b0a      	ldr	r3, [pc, #40]	@ (800f168 <std+0x5c>)
 800f13e:	6323      	str	r3, [r4, #48]	@ 0x30
 800f140:	4b0a      	ldr	r3, [pc, #40]	@ (800f16c <std+0x60>)
 800f142:	429c      	cmp	r4, r3
 800f144:	d005      	beq.n	800f152 <std+0x46>
 800f146:	4b0a      	ldr	r3, [pc, #40]	@ (800f170 <std+0x64>)
 800f148:	429c      	cmp	r4, r3
 800f14a:	d002      	beq.n	800f152 <std+0x46>
 800f14c:	4b09      	ldr	r3, [pc, #36]	@ (800f174 <std+0x68>)
 800f14e:	429c      	cmp	r4, r3
 800f150:	d103      	bne.n	800f15a <std+0x4e>
 800f152:	0020      	movs	r0, r4
 800f154:	3058      	adds	r0, #88	@ 0x58
 800f156:	f000 f9ff 	bl	800f558 <__retarget_lock_init_recursive>
 800f15a:	bd10      	pop	{r4, pc}
 800f15c:	0800f2f5 	.word	0x0800f2f5
 800f160:	0800f31d 	.word	0x0800f31d
 800f164:	0800f355 	.word	0x0800f355
 800f168:	0800f381 	.word	0x0800f381
 800f16c:	20001d58 	.word	0x20001d58
 800f170:	20001dc0 	.word	0x20001dc0
 800f174:	20001e28 	.word	0x20001e28

0800f178 <stdio_exit_handler>:
 800f178:	b510      	push	{r4, lr}
 800f17a:	4a03      	ldr	r2, [pc, #12]	@ (800f188 <stdio_exit_handler+0x10>)
 800f17c:	4903      	ldr	r1, [pc, #12]	@ (800f18c <stdio_exit_handler+0x14>)
 800f17e:	4804      	ldr	r0, [pc, #16]	@ (800f190 <stdio_exit_handler+0x18>)
 800f180:	f000 f86c 	bl	800f25c <_fwalk_sglue>
 800f184:	bd10      	pop	{r4, pc}
 800f186:	46c0      	nop			@ (mov r8, r8)
 800f188:	20000148 	.word	0x20000148
 800f18c:	0801121d 	.word	0x0801121d
 800f190:	20000158 	.word	0x20000158

0800f194 <cleanup_stdio>:
 800f194:	6841      	ldr	r1, [r0, #4]
 800f196:	4b0b      	ldr	r3, [pc, #44]	@ (800f1c4 <cleanup_stdio+0x30>)
 800f198:	b510      	push	{r4, lr}
 800f19a:	0004      	movs	r4, r0
 800f19c:	4299      	cmp	r1, r3
 800f19e:	d001      	beq.n	800f1a4 <cleanup_stdio+0x10>
 800f1a0:	f002 f83c 	bl	801121c <_fflush_r>
 800f1a4:	68a1      	ldr	r1, [r4, #8]
 800f1a6:	4b08      	ldr	r3, [pc, #32]	@ (800f1c8 <cleanup_stdio+0x34>)
 800f1a8:	4299      	cmp	r1, r3
 800f1aa:	d002      	beq.n	800f1b2 <cleanup_stdio+0x1e>
 800f1ac:	0020      	movs	r0, r4
 800f1ae:	f002 f835 	bl	801121c <_fflush_r>
 800f1b2:	68e1      	ldr	r1, [r4, #12]
 800f1b4:	4b05      	ldr	r3, [pc, #20]	@ (800f1cc <cleanup_stdio+0x38>)
 800f1b6:	4299      	cmp	r1, r3
 800f1b8:	d002      	beq.n	800f1c0 <cleanup_stdio+0x2c>
 800f1ba:	0020      	movs	r0, r4
 800f1bc:	f002 f82e 	bl	801121c <_fflush_r>
 800f1c0:	bd10      	pop	{r4, pc}
 800f1c2:	46c0      	nop			@ (mov r8, r8)
 800f1c4:	20001d58 	.word	0x20001d58
 800f1c8:	20001dc0 	.word	0x20001dc0
 800f1cc:	20001e28 	.word	0x20001e28

0800f1d0 <global_stdio_init.part.0>:
 800f1d0:	b510      	push	{r4, lr}
 800f1d2:	4b09      	ldr	r3, [pc, #36]	@ (800f1f8 <global_stdio_init.part.0+0x28>)
 800f1d4:	4a09      	ldr	r2, [pc, #36]	@ (800f1fc <global_stdio_init.part.0+0x2c>)
 800f1d6:	2104      	movs	r1, #4
 800f1d8:	601a      	str	r2, [r3, #0]
 800f1da:	4809      	ldr	r0, [pc, #36]	@ (800f200 <global_stdio_init.part.0+0x30>)
 800f1dc:	2200      	movs	r2, #0
 800f1de:	f7ff ff95 	bl	800f10c <std>
 800f1e2:	2201      	movs	r2, #1
 800f1e4:	2109      	movs	r1, #9
 800f1e6:	4807      	ldr	r0, [pc, #28]	@ (800f204 <global_stdio_init.part.0+0x34>)
 800f1e8:	f7ff ff90 	bl	800f10c <std>
 800f1ec:	2202      	movs	r2, #2
 800f1ee:	2112      	movs	r1, #18
 800f1f0:	4805      	ldr	r0, [pc, #20]	@ (800f208 <global_stdio_init.part.0+0x38>)
 800f1f2:	f7ff ff8b 	bl	800f10c <std>
 800f1f6:	bd10      	pop	{r4, pc}
 800f1f8:	20001e90 	.word	0x20001e90
 800f1fc:	0800f179 	.word	0x0800f179
 800f200:	20001d58 	.word	0x20001d58
 800f204:	20001dc0 	.word	0x20001dc0
 800f208:	20001e28 	.word	0x20001e28

0800f20c <__sfp_lock_acquire>:
 800f20c:	b510      	push	{r4, lr}
 800f20e:	4802      	ldr	r0, [pc, #8]	@ (800f218 <__sfp_lock_acquire+0xc>)
 800f210:	f000 f9a3 	bl	800f55a <__retarget_lock_acquire_recursive>
 800f214:	bd10      	pop	{r4, pc}
 800f216:	46c0      	nop			@ (mov r8, r8)
 800f218:	20001e99 	.word	0x20001e99

0800f21c <__sfp_lock_release>:
 800f21c:	b510      	push	{r4, lr}
 800f21e:	4802      	ldr	r0, [pc, #8]	@ (800f228 <__sfp_lock_release+0xc>)
 800f220:	f000 f99c 	bl	800f55c <__retarget_lock_release_recursive>
 800f224:	bd10      	pop	{r4, pc}
 800f226:	46c0      	nop			@ (mov r8, r8)
 800f228:	20001e99 	.word	0x20001e99

0800f22c <__sinit>:
 800f22c:	b510      	push	{r4, lr}
 800f22e:	0004      	movs	r4, r0
 800f230:	f7ff ffec 	bl	800f20c <__sfp_lock_acquire>
 800f234:	6a23      	ldr	r3, [r4, #32]
 800f236:	2b00      	cmp	r3, #0
 800f238:	d002      	beq.n	800f240 <__sinit+0x14>
 800f23a:	f7ff ffef 	bl	800f21c <__sfp_lock_release>
 800f23e:	bd10      	pop	{r4, pc}
 800f240:	4b04      	ldr	r3, [pc, #16]	@ (800f254 <__sinit+0x28>)
 800f242:	6223      	str	r3, [r4, #32]
 800f244:	4b04      	ldr	r3, [pc, #16]	@ (800f258 <__sinit+0x2c>)
 800f246:	681b      	ldr	r3, [r3, #0]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d1f6      	bne.n	800f23a <__sinit+0xe>
 800f24c:	f7ff ffc0 	bl	800f1d0 <global_stdio_init.part.0>
 800f250:	e7f3      	b.n	800f23a <__sinit+0xe>
 800f252:	46c0      	nop			@ (mov r8, r8)
 800f254:	0800f195 	.word	0x0800f195
 800f258:	20001e90 	.word	0x20001e90

0800f25c <_fwalk_sglue>:
 800f25c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f25e:	0014      	movs	r4, r2
 800f260:	2600      	movs	r6, #0
 800f262:	9000      	str	r0, [sp, #0]
 800f264:	9101      	str	r1, [sp, #4]
 800f266:	68a5      	ldr	r5, [r4, #8]
 800f268:	6867      	ldr	r7, [r4, #4]
 800f26a:	3f01      	subs	r7, #1
 800f26c:	d504      	bpl.n	800f278 <_fwalk_sglue+0x1c>
 800f26e:	6824      	ldr	r4, [r4, #0]
 800f270:	2c00      	cmp	r4, #0
 800f272:	d1f8      	bne.n	800f266 <_fwalk_sglue+0xa>
 800f274:	0030      	movs	r0, r6
 800f276:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f278:	89ab      	ldrh	r3, [r5, #12]
 800f27a:	2b01      	cmp	r3, #1
 800f27c:	d908      	bls.n	800f290 <_fwalk_sglue+0x34>
 800f27e:	220e      	movs	r2, #14
 800f280:	5eab      	ldrsh	r3, [r5, r2]
 800f282:	3301      	adds	r3, #1
 800f284:	d004      	beq.n	800f290 <_fwalk_sglue+0x34>
 800f286:	0029      	movs	r1, r5
 800f288:	9800      	ldr	r0, [sp, #0]
 800f28a:	9b01      	ldr	r3, [sp, #4]
 800f28c:	4798      	blx	r3
 800f28e:	4306      	orrs	r6, r0
 800f290:	3568      	adds	r5, #104	@ 0x68
 800f292:	e7ea      	b.n	800f26a <_fwalk_sglue+0xe>

0800f294 <iprintf>:
 800f294:	b40f      	push	{r0, r1, r2, r3}
 800f296:	b507      	push	{r0, r1, r2, lr}
 800f298:	4905      	ldr	r1, [pc, #20]	@ (800f2b0 <iprintf+0x1c>)
 800f29a:	ab04      	add	r3, sp, #16
 800f29c:	6808      	ldr	r0, [r1, #0]
 800f29e:	cb04      	ldmia	r3!, {r2}
 800f2a0:	6881      	ldr	r1, [r0, #8]
 800f2a2:	9301      	str	r3, [sp, #4]
 800f2a4:	f001 fe18 	bl	8010ed8 <_vfiprintf_r>
 800f2a8:	b003      	add	sp, #12
 800f2aa:	bc08      	pop	{r3}
 800f2ac:	b004      	add	sp, #16
 800f2ae:	4718      	bx	r3
 800f2b0:	20000154 	.word	0x20000154

0800f2b4 <siprintf>:
 800f2b4:	b40e      	push	{r1, r2, r3}
 800f2b6:	b500      	push	{lr}
 800f2b8:	490b      	ldr	r1, [pc, #44]	@ (800f2e8 <siprintf+0x34>)
 800f2ba:	b09c      	sub	sp, #112	@ 0x70
 800f2bc:	ab1d      	add	r3, sp, #116	@ 0x74
 800f2be:	9002      	str	r0, [sp, #8]
 800f2c0:	9006      	str	r0, [sp, #24]
 800f2c2:	9107      	str	r1, [sp, #28]
 800f2c4:	9104      	str	r1, [sp, #16]
 800f2c6:	4809      	ldr	r0, [pc, #36]	@ (800f2ec <siprintf+0x38>)
 800f2c8:	4909      	ldr	r1, [pc, #36]	@ (800f2f0 <siprintf+0x3c>)
 800f2ca:	cb04      	ldmia	r3!, {r2}
 800f2cc:	9105      	str	r1, [sp, #20]
 800f2ce:	6800      	ldr	r0, [r0, #0]
 800f2d0:	a902      	add	r1, sp, #8
 800f2d2:	9301      	str	r3, [sp, #4]
 800f2d4:	f001 fcda 	bl	8010c8c <_svfiprintf_r>
 800f2d8:	2200      	movs	r2, #0
 800f2da:	9b02      	ldr	r3, [sp, #8]
 800f2dc:	701a      	strb	r2, [r3, #0]
 800f2de:	b01c      	add	sp, #112	@ 0x70
 800f2e0:	bc08      	pop	{r3}
 800f2e2:	b003      	add	sp, #12
 800f2e4:	4718      	bx	r3
 800f2e6:	46c0      	nop			@ (mov r8, r8)
 800f2e8:	7fffffff 	.word	0x7fffffff
 800f2ec:	20000154 	.word	0x20000154
 800f2f0:	ffff0208 	.word	0xffff0208

0800f2f4 <__sread>:
 800f2f4:	b570      	push	{r4, r5, r6, lr}
 800f2f6:	000c      	movs	r4, r1
 800f2f8:	250e      	movs	r5, #14
 800f2fa:	5f49      	ldrsh	r1, [r1, r5]
 800f2fc:	f000 f8da 	bl	800f4b4 <_read_r>
 800f300:	2800      	cmp	r0, #0
 800f302:	db03      	blt.n	800f30c <__sread+0x18>
 800f304:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800f306:	181b      	adds	r3, r3, r0
 800f308:	6563      	str	r3, [r4, #84]	@ 0x54
 800f30a:	bd70      	pop	{r4, r5, r6, pc}
 800f30c:	89a3      	ldrh	r3, [r4, #12]
 800f30e:	4a02      	ldr	r2, [pc, #8]	@ (800f318 <__sread+0x24>)
 800f310:	4013      	ands	r3, r2
 800f312:	81a3      	strh	r3, [r4, #12]
 800f314:	e7f9      	b.n	800f30a <__sread+0x16>
 800f316:	46c0      	nop			@ (mov r8, r8)
 800f318:	ffffefff 	.word	0xffffefff

0800f31c <__swrite>:
 800f31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f31e:	001f      	movs	r7, r3
 800f320:	898b      	ldrh	r3, [r1, #12]
 800f322:	0005      	movs	r5, r0
 800f324:	000c      	movs	r4, r1
 800f326:	0016      	movs	r6, r2
 800f328:	05db      	lsls	r3, r3, #23
 800f32a:	d505      	bpl.n	800f338 <__swrite+0x1c>
 800f32c:	230e      	movs	r3, #14
 800f32e:	5ec9      	ldrsh	r1, [r1, r3]
 800f330:	2200      	movs	r2, #0
 800f332:	2302      	movs	r3, #2
 800f334:	f000 f8aa 	bl	800f48c <_lseek_r>
 800f338:	89a3      	ldrh	r3, [r4, #12]
 800f33a:	4a05      	ldr	r2, [pc, #20]	@ (800f350 <__swrite+0x34>)
 800f33c:	0028      	movs	r0, r5
 800f33e:	4013      	ands	r3, r2
 800f340:	81a3      	strh	r3, [r4, #12]
 800f342:	0032      	movs	r2, r6
 800f344:	230e      	movs	r3, #14
 800f346:	5ee1      	ldrsh	r1, [r4, r3]
 800f348:	003b      	movs	r3, r7
 800f34a:	f000 f8c7 	bl	800f4dc <_write_r>
 800f34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f350:	ffffefff 	.word	0xffffefff

0800f354 <__sseek>:
 800f354:	b570      	push	{r4, r5, r6, lr}
 800f356:	000c      	movs	r4, r1
 800f358:	250e      	movs	r5, #14
 800f35a:	5f49      	ldrsh	r1, [r1, r5]
 800f35c:	f000 f896 	bl	800f48c <_lseek_r>
 800f360:	89a3      	ldrh	r3, [r4, #12]
 800f362:	1c42      	adds	r2, r0, #1
 800f364:	d103      	bne.n	800f36e <__sseek+0x1a>
 800f366:	4a05      	ldr	r2, [pc, #20]	@ (800f37c <__sseek+0x28>)
 800f368:	4013      	ands	r3, r2
 800f36a:	81a3      	strh	r3, [r4, #12]
 800f36c:	bd70      	pop	{r4, r5, r6, pc}
 800f36e:	2280      	movs	r2, #128	@ 0x80
 800f370:	0152      	lsls	r2, r2, #5
 800f372:	4313      	orrs	r3, r2
 800f374:	81a3      	strh	r3, [r4, #12]
 800f376:	6560      	str	r0, [r4, #84]	@ 0x54
 800f378:	e7f8      	b.n	800f36c <__sseek+0x18>
 800f37a:	46c0      	nop			@ (mov r8, r8)
 800f37c:	ffffefff 	.word	0xffffefff

0800f380 <__sclose>:
 800f380:	b510      	push	{r4, lr}
 800f382:	230e      	movs	r3, #14
 800f384:	5ec9      	ldrsh	r1, [r1, r3]
 800f386:	f000 f86f 	bl	800f468 <_close_r>
 800f38a:	bd10      	pop	{r4, pc}

0800f38c <_vsniprintf_r>:
 800f38c:	b530      	push	{r4, r5, lr}
 800f38e:	0014      	movs	r4, r2
 800f390:	0005      	movs	r5, r0
 800f392:	001a      	movs	r2, r3
 800f394:	b09b      	sub	sp, #108	@ 0x6c
 800f396:	2c00      	cmp	r4, #0
 800f398:	da05      	bge.n	800f3a6 <_vsniprintf_r+0x1a>
 800f39a:	238b      	movs	r3, #139	@ 0x8b
 800f39c:	6003      	str	r3, [r0, #0]
 800f39e:	2001      	movs	r0, #1
 800f3a0:	4240      	negs	r0, r0
 800f3a2:	b01b      	add	sp, #108	@ 0x6c
 800f3a4:	bd30      	pop	{r4, r5, pc}
 800f3a6:	2382      	movs	r3, #130	@ 0x82
 800f3a8:	4668      	mov	r0, sp
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	8183      	strh	r3, [r0, #12]
 800f3ae:	2300      	movs	r3, #0
 800f3b0:	9100      	str	r1, [sp, #0]
 800f3b2:	9104      	str	r1, [sp, #16]
 800f3b4:	429c      	cmp	r4, r3
 800f3b6:	d000      	beq.n	800f3ba <_vsniprintf_r+0x2e>
 800f3b8:	1e63      	subs	r3, r4, #1
 800f3ba:	9302      	str	r3, [sp, #8]
 800f3bc:	9305      	str	r3, [sp, #20]
 800f3be:	2301      	movs	r3, #1
 800f3c0:	4669      	mov	r1, sp
 800f3c2:	425b      	negs	r3, r3
 800f3c4:	81cb      	strh	r3, [r1, #14]
 800f3c6:	0028      	movs	r0, r5
 800f3c8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800f3ca:	f001 fc5f 	bl	8010c8c <_svfiprintf_r>
 800f3ce:	1c43      	adds	r3, r0, #1
 800f3d0:	da01      	bge.n	800f3d6 <_vsniprintf_r+0x4a>
 800f3d2:	238b      	movs	r3, #139	@ 0x8b
 800f3d4:	602b      	str	r3, [r5, #0]
 800f3d6:	2c00      	cmp	r4, #0
 800f3d8:	d0e3      	beq.n	800f3a2 <_vsniprintf_r+0x16>
 800f3da:	2200      	movs	r2, #0
 800f3dc:	9b00      	ldr	r3, [sp, #0]
 800f3de:	701a      	strb	r2, [r3, #0]
 800f3e0:	e7df      	b.n	800f3a2 <_vsniprintf_r+0x16>
	...

0800f3e4 <vsniprintf>:
 800f3e4:	b513      	push	{r0, r1, r4, lr}
 800f3e6:	4c04      	ldr	r4, [pc, #16]	@ (800f3f8 <vsniprintf+0x14>)
 800f3e8:	9300      	str	r3, [sp, #0]
 800f3ea:	0013      	movs	r3, r2
 800f3ec:	000a      	movs	r2, r1
 800f3ee:	0001      	movs	r1, r0
 800f3f0:	6820      	ldr	r0, [r4, #0]
 800f3f2:	f7ff ffcb 	bl	800f38c <_vsniprintf_r>
 800f3f6:	bd16      	pop	{r1, r2, r4, pc}
 800f3f8:	20000154 	.word	0x20000154

0800f3fc <memset>:
 800f3fc:	0003      	movs	r3, r0
 800f3fe:	1882      	adds	r2, r0, r2
 800f400:	4293      	cmp	r3, r2
 800f402:	d100      	bne.n	800f406 <memset+0xa>
 800f404:	4770      	bx	lr
 800f406:	7019      	strb	r1, [r3, #0]
 800f408:	3301      	adds	r3, #1
 800f40a:	e7f9      	b.n	800f400 <memset+0x4>

0800f40c <strncpy>:
 800f40c:	0003      	movs	r3, r0
 800f40e:	b530      	push	{r4, r5, lr}
 800f410:	001d      	movs	r5, r3
 800f412:	2a00      	cmp	r2, #0
 800f414:	d006      	beq.n	800f424 <strncpy+0x18>
 800f416:	780c      	ldrb	r4, [r1, #0]
 800f418:	3a01      	subs	r2, #1
 800f41a:	3301      	adds	r3, #1
 800f41c:	702c      	strb	r4, [r5, #0]
 800f41e:	3101      	adds	r1, #1
 800f420:	2c00      	cmp	r4, #0
 800f422:	d1f5      	bne.n	800f410 <strncpy+0x4>
 800f424:	2100      	movs	r1, #0
 800f426:	189a      	adds	r2, r3, r2
 800f428:	4293      	cmp	r3, r2
 800f42a:	d100      	bne.n	800f42e <strncpy+0x22>
 800f42c:	bd30      	pop	{r4, r5, pc}
 800f42e:	7019      	strb	r1, [r3, #0]
 800f430:	3301      	adds	r3, #1
 800f432:	e7f9      	b.n	800f428 <strncpy+0x1c>

0800f434 <strstr>:
 800f434:	780a      	ldrb	r2, [r1, #0]
 800f436:	b530      	push	{r4, r5, lr}
 800f438:	2a00      	cmp	r2, #0
 800f43a:	d10c      	bne.n	800f456 <strstr+0x22>
 800f43c:	bd30      	pop	{r4, r5, pc}
 800f43e:	429a      	cmp	r2, r3
 800f440:	d108      	bne.n	800f454 <strstr+0x20>
 800f442:	2301      	movs	r3, #1
 800f444:	5ccc      	ldrb	r4, [r1, r3]
 800f446:	2c00      	cmp	r4, #0
 800f448:	d0f8      	beq.n	800f43c <strstr+0x8>
 800f44a:	5cc5      	ldrb	r5, [r0, r3]
 800f44c:	42a5      	cmp	r5, r4
 800f44e:	d101      	bne.n	800f454 <strstr+0x20>
 800f450:	3301      	adds	r3, #1
 800f452:	e7f7      	b.n	800f444 <strstr+0x10>
 800f454:	3001      	adds	r0, #1
 800f456:	7803      	ldrb	r3, [r0, #0]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d1f0      	bne.n	800f43e <strstr+0xa>
 800f45c:	0018      	movs	r0, r3
 800f45e:	e7ed      	b.n	800f43c <strstr+0x8>

0800f460 <_localeconv_r>:
 800f460:	4800      	ldr	r0, [pc, #0]	@ (800f464 <_localeconv_r+0x4>)
 800f462:	4770      	bx	lr
 800f464:	20000294 	.word	0x20000294

0800f468 <_close_r>:
 800f468:	2300      	movs	r3, #0
 800f46a:	b570      	push	{r4, r5, r6, lr}
 800f46c:	4d06      	ldr	r5, [pc, #24]	@ (800f488 <_close_r+0x20>)
 800f46e:	0004      	movs	r4, r0
 800f470:	0008      	movs	r0, r1
 800f472:	602b      	str	r3, [r5, #0]
 800f474:	f7f7 ff8a 	bl	800738c <_close>
 800f478:	1c43      	adds	r3, r0, #1
 800f47a:	d103      	bne.n	800f484 <_close_r+0x1c>
 800f47c:	682b      	ldr	r3, [r5, #0]
 800f47e:	2b00      	cmp	r3, #0
 800f480:	d000      	beq.n	800f484 <_close_r+0x1c>
 800f482:	6023      	str	r3, [r4, #0]
 800f484:	bd70      	pop	{r4, r5, r6, pc}
 800f486:	46c0      	nop			@ (mov r8, r8)
 800f488:	20001e94 	.word	0x20001e94

0800f48c <_lseek_r>:
 800f48c:	b570      	push	{r4, r5, r6, lr}
 800f48e:	0004      	movs	r4, r0
 800f490:	0008      	movs	r0, r1
 800f492:	0011      	movs	r1, r2
 800f494:	001a      	movs	r2, r3
 800f496:	2300      	movs	r3, #0
 800f498:	4d05      	ldr	r5, [pc, #20]	@ (800f4b0 <_lseek_r+0x24>)
 800f49a:	602b      	str	r3, [r5, #0]
 800f49c:	f7f7 ff97 	bl	80073ce <_lseek>
 800f4a0:	1c43      	adds	r3, r0, #1
 800f4a2:	d103      	bne.n	800f4ac <_lseek_r+0x20>
 800f4a4:	682b      	ldr	r3, [r5, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d000      	beq.n	800f4ac <_lseek_r+0x20>
 800f4aa:	6023      	str	r3, [r4, #0]
 800f4ac:	bd70      	pop	{r4, r5, r6, pc}
 800f4ae:	46c0      	nop			@ (mov r8, r8)
 800f4b0:	20001e94 	.word	0x20001e94

0800f4b4 <_read_r>:
 800f4b4:	b570      	push	{r4, r5, r6, lr}
 800f4b6:	0004      	movs	r4, r0
 800f4b8:	0008      	movs	r0, r1
 800f4ba:	0011      	movs	r1, r2
 800f4bc:	001a      	movs	r2, r3
 800f4be:	2300      	movs	r3, #0
 800f4c0:	4d05      	ldr	r5, [pc, #20]	@ (800f4d8 <_read_r+0x24>)
 800f4c2:	602b      	str	r3, [r5, #0]
 800f4c4:	f7f7 ff45 	bl	8007352 <_read>
 800f4c8:	1c43      	adds	r3, r0, #1
 800f4ca:	d103      	bne.n	800f4d4 <_read_r+0x20>
 800f4cc:	682b      	ldr	r3, [r5, #0]
 800f4ce:	2b00      	cmp	r3, #0
 800f4d0:	d000      	beq.n	800f4d4 <_read_r+0x20>
 800f4d2:	6023      	str	r3, [r4, #0]
 800f4d4:	bd70      	pop	{r4, r5, r6, pc}
 800f4d6:	46c0      	nop			@ (mov r8, r8)
 800f4d8:	20001e94 	.word	0x20001e94

0800f4dc <_write_r>:
 800f4dc:	b570      	push	{r4, r5, r6, lr}
 800f4de:	0004      	movs	r4, r0
 800f4e0:	0008      	movs	r0, r1
 800f4e2:	0011      	movs	r1, r2
 800f4e4:	001a      	movs	r2, r3
 800f4e6:	2300      	movs	r3, #0
 800f4e8:	4d05      	ldr	r5, [pc, #20]	@ (800f500 <_write_r+0x24>)
 800f4ea:	602b      	str	r3, [r5, #0]
 800f4ec:	f7f8 fb92 	bl	8007c14 <_write>
 800f4f0:	1c43      	adds	r3, r0, #1
 800f4f2:	d103      	bne.n	800f4fc <_write_r+0x20>
 800f4f4:	682b      	ldr	r3, [r5, #0]
 800f4f6:	2b00      	cmp	r3, #0
 800f4f8:	d000      	beq.n	800f4fc <_write_r+0x20>
 800f4fa:	6023      	str	r3, [r4, #0]
 800f4fc:	bd70      	pop	{r4, r5, r6, pc}
 800f4fe:	46c0      	nop			@ (mov r8, r8)
 800f500:	20001e94 	.word	0x20001e94

0800f504 <__errno>:
 800f504:	4b01      	ldr	r3, [pc, #4]	@ (800f50c <__errno+0x8>)
 800f506:	6818      	ldr	r0, [r3, #0]
 800f508:	4770      	bx	lr
 800f50a:	46c0      	nop			@ (mov r8, r8)
 800f50c:	20000154 	.word	0x20000154

0800f510 <__libc_init_array>:
 800f510:	b570      	push	{r4, r5, r6, lr}
 800f512:	2600      	movs	r6, #0
 800f514:	4c0c      	ldr	r4, [pc, #48]	@ (800f548 <__libc_init_array+0x38>)
 800f516:	4d0d      	ldr	r5, [pc, #52]	@ (800f54c <__libc_init_array+0x3c>)
 800f518:	1b64      	subs	r4, r4, r5
 800f51a:	10a4      	asrs	r4, r4, #2
 800f51c:	42a6      	cmp	r6, r4
 800f51e:	d109      	bne.n	800f534 <__libc_init_array+0x24>
 800f520:	2600      	movs	r6, #0
 800f522:	f002 fae1 	bl	8011ae8 <_init>
 800f526:	4c0a      	ldr	r4, [pc, #40]	@ (800f550 <__libc_init_array+0x40>)
 800f528:	4d0a      	ldr	r5, [pc, #40]	@ (800f554 <__libc_init_array+0x44>)
 800f52a:	1b64      	subs	r4, r4, r5
 800f52c:	10a4      	asrs	r4, r4, #2
 800f52e:	42a6      	cmp	r6, r4
 800f530:	d105      	bne.n	800f53e <__libc_init_array+0x2e>
 800f532:	bd70      	pop	{r4, r5, r6, pc}
 800f534:	00b3      	lsls	r3, r6, #2
 800f536:	58eb      	ldr	r3, [r5, r3]
 800f538:	4798      	blx	r3
 800f53a:	3601      	adds	r6, #1
 800f53c:	e7ee      	b.n	800f51c <__libc_init_array+0xc>
 800f53e:	00b3      	lsls	r3, r6, #2
 800f540:	58eb      	ldr	r3, [r5, r3]
 800f542:	4798      	blx	r3
 800f544:	3601      	adds	r6, #1
 800f546:	e7f2      	b.n	800f52e <__libc_init_array+0x1e>
 800f548:	080129b8 	.word	0x080129b8
 800f54c:	080129b8 	.word	0x080129b8
 800f550:	080129bc 	.word	0x080129bc
 800f554:	080129b8 	.word	0x080129b8

0800f558 <__retarget_lock_init_recursive>:
 800f558:	4770      	bx	lr

0800f55a <__retarget_lock_acquire_recursive>:
 800f55a:	4770      	bx	lr

0800f55c <__retarget_lock_release_recursive>:
 800f55c:	4770      	bx	lr

0800f55e <memchr>:
 800f55e:	b2c9      	uxtb	r1, r1
 800f560:	1882      	adds	r2, r0, r2
 800f562:	4290      	cmp	r0, r2
 800f564:	d101      	bne.n	800f56a <memchr+0xc>
 800f566:	2000      	movs	r0, #0
 800f568:	4770      	bx	lr
 800f56a:	7803      	ldrb	r3, [r0, #0]
 800f56c:	428b      	cmp	r3, r1
 800f56e:	d0fb      	beq.n	800f568 <memchr+0xa>
 800f570:	3001      	adds	r0, #1
 800f572:	e7f6      	b.n	800f562 <memchr+0x4>

0800f574 <quorem>:
 800f574:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f576:	6902      	ldr	r2, [r0, #16]
 800f578:	690f      	ldr	r7, [r1, #16]
 800f57a:	b087      	sub	sp, #28
 800f57c:	0006      	movs	r6, r0
 800f57e:	000b      	movs	r3, r1
 800f580:	2000      	movs	r0, #0
 800f582:	9102      	str	r1, [sp, #8]
 800f584:	42ba      	cmp	r2, r7
 800f586:	db6d      	blt.n	800f664 <quorem+0xf0>
 800f588:	3f01      	subs	r7, #1
 800f58a:	00bc      	lsls	r4, r7, #2
 800f58c:	3314      	adds	r3, #20
 800f58e:	9305      	str	r3, [sp, #20]
 800f590:	191b      	adds	r3, r3, r4
 800f592:	9303      	str	r3, [sp, #12]
 800f594:	0033      	movs	r3, r6
 800f596:	3314      	adds	r3, #20
 800f598:	191c      	adds	r4, r3, r4
 800f59a:	9301      	str	r3, [sp, #4]
 800f59c:	6823      	ldr	r3, [r4, #0]
 800f59e:	9304      	str	r3, [sp, #16]
 800f5a0:	9b03      	ldr	r3, [sp, #12]
 800f5a2:	9804      	ldr	r0, [sp, #16]
 800f5a4:	681d      	ldr	r5, [r3, #0]
 800f5a6:	3501      	adds	r5, #1
 800f5a8:	0029      	movs	r1, r5
 800f5aa:	f7f0 fdc9 	bl	8000140 <__udivsi3>
 800f5ae:	9b04      	ldr	r3, [sp, #16]
 800f5b0:	9000      	str	r0, [sp, #0]
 800f5b2:	42ab      	cmp	r3, r5
 800f5b4:	d32b      	bcc.n	800f60e <quorem+0x9a>
 800f5b6:	9b05      	ldr	r3, [sp, #20]
 800f5b8:	9d01      	ldr	r5, [sp, #4]
 800f5ba:	469c      	mov	ip, r3
 800f5bc:	2300      	movs	r3, #0
 800f5be:	9305      	str	r3, [sp, #20]
 800f5c0:	9304      	str	r3, [sp, #16]
 800f5c2:	4662      	mov	r2, ip
 800f5c4:	ca08      	ldmia	r2!, {r3}
 800f5c6:	6828      	ldr	r0, [r5, #0]
 800f5c8:	4694      	mov	ip, r2
 800f5ca:	9a00      	ldr	r2, [sp, #0]
 800f5cc:	b299      	uxth	r1, r3
 800f5ce:	4351      	muls	r1, r2
 800f5d0:	9a05      	ldr	r2, [sp, #20]
 800f5d2:	0c1b      	lsrs	r3, r3, #16
 800f5d4:	1889      	adds	r1, r1, r2
 800f5d6:	9a00      	ldr	r2, [sp, #0]
 800f5d8:	4353      	muls	r3, r2
 800f5da:	0c0a      	lsrs	r2, r1, #16
 800f5dc:	189b      	adds	r3, r3, r2
 800f5de:	0c1a      	lsrs	r2, r3, #16
 800f5e0:	b289      	uxth	r1, r1
 800f5e2:	9205      	str	r2, [sp, #20]
 800f5e4:	b282      	uxth	r2, r0
 800f5e6:	1a52      	subs	r2, r2, r1
 800f5e8:	9904      	ldr	r1, [sp, #16]
 800f5ea:	0c00      	lsrs	r0, r0, #16
 800f5ec:	1852      	adds	r2, r2, r1
 800f5ee:	b29b      	uxth	r3, r3
 800f5f0:	1411      	asrs	r1, r2, #16
 800f5f2:	1ac3      	subs	r3, r0, r3
 800f5f4:	185b      	adds	r3, r3, r1
 800f5f6:	1419      	asrs	r1, r3, #16
 800f5f8:	b292      	uxth	r2, r2
 800f5fa:	041b      	lsls	r3, r3, #16
 800f5fc:	431a      	orrs	r2, r3
 800f5fe:	9b03      	ldr	r3, [sp, #12]
 800f600:	9104      	str	r1, [sp, #16]
 800f602:	c504      	stmia	r5!, {r2}
 800f604:	4563      	cmp	r3, ip
 800f606:	d2dc      	bcs.n	800f5c2 <quorem+0x4e>
 800f608:	6823      	ldr	r3, [r4, #0]
 800f60a:	2b00      	cmp	r3, #0
 800f60c:	d030      	beq.n	800f670 <quorem+0xfc>
 800f60e:	0030      	movs	r0, r6
 800f610:	9902      	ldr	r1, [sp, #8]
 800f612:	f001 f9c5 	bl	80109a0 <__mcmp>
 800f616:	2800      	cmp	r0, #0
 800f618:	db23      	blt.n	800f662 <quorem+0xee>
 800f61a:	0034      	movs	r4, r6
 800f61c:	2500      	movs	r5, #0
 800f61e:	9902      	ldr	r1, [sp, #8]
 800f620:	3414      	adds	r4, #20
 800f622:	3114      	adds	r1, #20
 800f624:	6823      	ldr	r3, [r4, #0]
 800f626:	c901      	ldmia	r1!, {r0}
 800f628:	9302      	str	r3, [sp, #8]
 800f62a:	466b      	mov	r3, sp
 800f62c:	891b      	ldrh	r3, [r3, #8]
 800f62e:	b282      	uxth	r2, r0
 800f630:	1a9a      	subs	r2, r3, r2
 800f632:	9b02      	ldr	r3, [sp, #8]
 800f634:	1952      	adds	r2, r2, r5
 800f636:	0c00      	lsrs	r0, r0, #16
 800f638:	0c1b      	lsrs	r3, r3, #16
 800f63a:	1a1b      	subs	r3, r3, r0
 800f63c:	1410      	asrs	r0, r2, #16
 800f63e:	181b      	adds	r3, r3, r0
 800f640:	141d      	asrs	r5, r3, #16
 800f642:	b292      	uxth	r2, r2
 800f644:	041b      	lsls	r3, r3, #16
 800f646:	431a      	orrs	r2, r3
 800f648:	9b03      	ldr	r3, [sp, #12]
 800f64a:	c404      	stmia	r4!, {r2}
 800f64c:	428b      	cmp	r3, r1
 800f64e:	d2e9      	bcs.n	800f624 <quorem+0xb0>
 800f650:	9a01      	ldr	r2, [sp, #4]
 800f652:	00bb      	lsls	r3, r7, #2
 800f654:	18d3      	adds	r3, r2, r3
 800f656:	681a      	ldr	r2, [r3, #0]
 800f658:	2a00      	cmp	r2, #0
 800f65a:	d013      	beq.n	800f684 <quorem+0x110>
 800f65c:	9b00      	ldr	r3, [sp, #0]
 800f65e:	3301      	adds	r3, #1
 800f660:	9300      	str	r3, [sp, #0]
 800f662:	9800      	ldr	r0, [sp, #0]
 800f664:	b007      	add	sp, #28
 800f666:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f668:	6823      	ldr	r3, [r4, #0]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d104      	bne.n	800f678 <quorem+0x104>
 800f66e:	3f01      	subs	r7, #1
 800f670:	9b01      	ldr	r3, [sp, #4]
 800f672:	3c04      	subs	r4, #4
 800f674:	42a3      	cmp	r3, r4
 800f676:	d3f7      	bcc.n	800f668 <quorem+0xf4>
 800f678:	6137      	str	r7, [r6, #16]
 800f67a:	e7c8      	b.n	800f60e <quorem+0x9a>
 800f67c:	681a      	ldr	r2, [r3, #0]
 800f67e:	2a00      	cmp	r2, #0
 800f680:	d104      	bne.n	800f68c <quorem+0x118>
 800f682:	3f01      	subs	r7, #1
 800f684:	9a01      	ldr	r2, [sp, #4]
 800f686:	3b04      	subs	r3, #4
 800f688:	429a      	cmp	r2, r3
 800f68a:	d3f7      	bcc.n	800f67c <quorem+0x108>
 800f68c:	6137      	str	r7, [r6, #16]
 800f68e:	e7e5      	b.n	800f65c <quorem+0xe8>

0800f690 <_dtoa_r>:
 800f690:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f692:	0014      	movs	r4, r2
 800f694:	001d      	movs	r5, r3
 800f696:	69c6      	ldr	r6, [r0, #28]
 800f698:	b09d      	sub	sp, #116	@ 0x74
 800f69a:	940a      	str	r4, [sp, #40]	@ 0x28
 800f69c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800f69e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800f6a0:	9003      	str	r0, [sp, #12]
 800f6a2:	2e00      	cmp	r6, #0
 800f6a4:	d10f      	bne.n	800f6c6 <_dtoa_r+0x36>
 800f6a6:	2010      	movs	r0, #16
 800f6a8:	f000 fe30 	bl	801030c <malloc>
 800f6ac:	9b03      	ldr	r3, [sp, #12]
 800f6ae:	1e02      	subs	r2, r0, #0
 800f6b0:	61d8      	str	r0, [r3, #28]
 800f6b2:	d104      	bne.n	800f6be <_dtoa_r+0x2e>
 800f6b4:	21ef      	movs	r1, #239	@ 0xef
 800f6b6:	4bc7      	ldr	r3, [pc, #796]	@ (800f9d4 <_dtoa_r+0x344>)
 800f6b8:	48c7      	ldr	r0, [pc, #796]	@ (800f9d8 <_dtoa_r+0x348>)
 800f6ba:	f001 feab 	bl	8011414 <__assert_func>
 800f6be:	6046      	str	r6, [r0, #4]
 800f6c0:	6086      	str	r6, [r0, #8]
 800f6c2:	6006      	str	r6, [r0, #0]
 800f6c4:	60c6      	str	r6, [r0, #12]
 800f6c6:	9b03      	ldr	r3, [sp, #12]
 800f6c8:	69db      	ldr	r3, [r3, #28]
 800f6ca:	6819      	ldr	r1, [r3, #0]
 800f6cc:	2900      	cmp	r1, #0
 800f6ce:	d00b      	beq.n	800f6e8 <_dtoa_r+0x58>
 800f6d0:	685a      	ldr	r2, [r3, #4]
 800f6d2:	2301      	movs	r3, #1
 800f6d4:	4093      	lsls	r3, r2
 800f6d6:	604a      	str	r2, [r1, #4]
 800f6d8:	608b      	str	r3, [r1, #8]
 800f6da:	9803      	ldr	r0, [sp, #12]
 800f6dc:	f000 ff16 	bl	801050c <_Bfree>
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	9b03      	ldr	r3, [sp, #12]
 800f6e4:	69db      	ldr	r3, [r3, #28]
 800f6e6:	601a      	str	r2, [r3, #0]
 800f6e8:	2d00      	cmp	r5, #0
 800f6ea:	da1e      	bge.n	800f72a <_dtoa_r+0x9a>
 800f6ec:	2301      	movs	r3, #1
 800f6ee:	603b      	str	r3, [r7, #0]
 800f6f0:	006b      	lsls	r3, r5, #1
 800f6f2:	085b      	lsrs	r3, r3, #1
 800f6f4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f6f6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800f6f8:	4bb8      	ldr	r3, [pc, #736]	@ (800f9dc <_dtoa_r+0x34c>)
 800f6fa:	4ab8      	ldr	r2, [pc, #736]	@ (800f9dc <_dtoa_r+0x34c>)
 800f6fc:	403b      	ands	r3, r7
 800f6fe:	4293      	cmp	r3, r2
 800f700:	d116      	bne.n	800f730 <_dtoa_r+0xa0>
 800f702:	4bb7      	ldr	r3, [pc, #732]	@ (800f9e0 <_dtoa_r+0x350>)
 800f704:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f706:	6013      	str	r3, [r2, #0]
 800f708:	033b      	lsls	r3, r7, #12
 800f70a:	0b1b      	lsrs	r3, r3, #12
 800f70c:	4323      	orrs	r3, r4
 800f70e:	d101      	bne.n	800f714 <_dtoa_r+0x84>
 800f710:	f000 fd83 	bl	801021a <_dtoa_r+0xb8a>
 800f714:	4bb3      	ldr	r3, [pc, #716]	@ (800f9e4 <_dtoa_r+0x354>)
 800f716:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f718:	9308      	str	r3, [sp, #32]
 800f71a:	2a00      	cmp	r2, #0
 800f71c:	d002      	beq.n	800f724 <_dtoa_r+0x94>
 800f71e:	4bb2      	ldr	r3, [pc, #712]	@ (800f9e8 <_dtoa_r+0x358>)
 800f720:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f722:	6013      	str	r3, [r2, #0]
 800f724:	9808      	ldr	r0, [sp, #32]
 800f726:	b01d      	add	sp, #116	@ 0x74
 800f728:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f72a:	2300      	movs	r3, #0
 800f72c:	603b      	str	r3, [r7, #0]
 800f72e:	e7e2      	b.n	800f6f6 <_dtoa_r+0x66>
 800f730:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800f732:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800f734:	9212      	str	r2, [sp, #72]	@ 0x48
 800f736:	9313      	str	r3, [sp, #76]	@ 0x4c
 800f738:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f73a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f73c:	2200      	movs	r2, #0
 800f73e:	2300      	movs	r3, #0
 800f740:	f7f0 fe84 	bl	800044c <__aeabi_dcmpeq>
 800f744:	1e06      	subs	r6, r0, #0
 800f746:	d00b      	beq.n	800f760 <_dtoa_r+0xd0>
 800f748:	2301      	movs	r3, #1
 800f74a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800f74c:	6013      	str	r3, [r2, #0]
 800f74e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800f750:	2b00      	cmp	r3, #0
 800f752:	d002      	beq.n	800f75a <_dtoa_r+0xca>
 800f754:	4ba5      	ldr	r3, [pc, #660]	@ (800f9ec <_dtoa_r+0x35c>)
 800f756:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800f758:	6013      	str	r3, [r2, #0]
 800f75a:	4ba5      	ldr	r3, [pc, #660]	@ (800f9f0 <_dtoa_r+0x360>)
 800f75c:	9308      	str	r3, [sp, #32]
 800f75e:	e7e1      	b.n	800f724 <_dtoa_r+0x94>
 800f760:	ab1a      	add	r3, sp, #104	@ 0x68
 800f762:	9301      	str	r3, [sp, #4]
 800f764:	ab1b      	add	r3, sp, #108	@ 0x6c
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	9803      	ldr	r0, [sp, #12]
 800f76a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800f76c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f76e:	f001 f9cd 	bl	8010b0c <__d2b>
 800f772:	007a      	lsls	r2, r7, #1
 800f774:	9005      	str	r0, [sp, #20]
 800f776:	0d52      	lsrs	r2, r2, #21
 800f778:	d100      	bne.n	800f77c <_dtoa_r+0xec>
 800f77a:	e07b      	b.n	800f874 <_dtoa_r+0x1e4>
 800f77c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800f77e:	9618      	str	r6, [sp, #96]	@ 0x60
 800f780:	0319      	lsls	r1, r3, #12
 800f782:	4b9c      	ldr	r3, [pc, #624]	@ (800f9f4 <_dtoa_r+0x364>)
 800f784:	0b09      	lsrs	r1, r1, #12
 800f786:	430b      	orrs	r3, r1
 800f788:	499b      	ldr	r1, [pc, #620]	@ (800f9f8 <_dtoa_r+0x368>)
 800f78a:	1857      	adds	r7, r2, r1
 800f78c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f78e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f790:	0019      	movs	r1, r3
 800f792:	2200      	movs	r2, #0
 800f794:	4b99      	ldr	r3, [pc, #612]	@ (800f9fc <_dtoa_r+0x36c>)
 800f796:	f7f3 f997 	bl	8002ac8 <__aeabi_dsub>
 800f79a:	4a99      	ldr	r2, [pc, #612]	@ (800fa00 <_dtoa_r+0x370>)
 800f79c:	4b99      	ldr	r3, [pc, #612]	@ (800fa04 <_dtoa_r+0x374>)
 800f79e:	f7f2 fecb 	bl	8002538 <__aeabi_dmul>
 800f7a2:	4a99      	ldr	r2, [pc, #612]	@ (800fa08 <_dtoa_r+0x378>)
 800f7a4:	4b99      	ldr	r3, [pc, #612]	@ (800fa0c <_dtoa_r+0x37c>)
 800f7a6:	f7f1 ff1f 	bl	80015e8 <__aeabi_dadd>
 800f7aa:	0004      	movs	r4, r0
 800f7ac:	0038      	movs	r0, r7
 800f7ae:	000d      	movs	r5, r1
 800f7b0:	f7f3 fd84 	bl	80032bc <__aeabi_i2d>
 800f7b4:	4a96      	ldr	r2, [pc, #600]	@ (800fa10 <_dtoa_r+0x380>)
 800f7b6:	4b97      	ldr	r3, [pc, #604]	@ (800fa14 <_dtoa_r+0x384>)
 800f7b8:	f7f2 febe 	bl	8002538 <__aeabi_dmul>
 800f7bc:	0002      	movs	r2, r0
 800f7be:	000b      	movs	r3, r1
 800f7c0:	0020      	movs	r0, r4
 800f7c2:	0029      	movs	r1, r5
 800f7c4:	f7f1 ff10 	bl	80015e8 <__aeabi_dadd>
 800f7c8:	0004      	movs	r4, r0
 800f7ca:	000d      	movs	r5, r1
 800f7cc:	f7f3 fd3a 	bl	8003244 <__aeabi_d2iz>
 800f7d0:	2200      	movs	r2, #0
 800f7d2:	9004      	str	r0, [sp, #16]
 800f7d4:	2300      	movs	r3, #0
 800f7d6:	0020      	movs	r0, r4
 800f7d8:	0029      	movs	r1, r5
 800f7da:	f7f0 fe3d 	bl	8000458 <__aeabi_dcmplt>
 800f7de:	2800      	cmp	r0, #0
 800f7e0:	d00b      	beq.n	800f7fa <_dtoa_r+0x16a>
 800f7e2:	9804      	ldr	r0, [sp, #16]
 800f7e4:	f7f3 fd6a 	bl	80032bc <__aeabi_i2d>
 800f7e8:	002b      	movs	r3, r5
 800f7ea:	0022      	movs	r2, r4
 800f7ec:	f7f0 fe2e 	bl	800044c <__aeabi_dcmpeq>
 800f7f0:	4243      	negs	r3, r0
 800f7f2:	4158      	adcs	r0, r3
 800f7f4:	9b04      	ldr	r3, [sp, #16]
 800f7f6:	1a1b      	subs	r3, r3, r0
 800f7f8:	9304      	str	r3, [sp, #16]
 800f7fa:	2301      	movs	r3, #1
 800f7fc:	9315      	str	r3, [sp, #84]	@ 0x54
 800f7fe:	9b04      	ldr	r3, [sp, #16]
 800f800:	2b16      	cmp	r3, #22
 800f802:	d810      	bhi.n	800f826 <_dtoa_r+0x196>
 800f804:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f806:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f808:	9a04      	ldr	r2, [sp, #16]
 800f80a:	4b83      	ldr	r3, [pc, #524]	@ (800fa18 <_dtoa_r+0x388>)
 800f80c:	00d2      	lsls	r2, r2, #3
 800f80e:	189b      	adds	r3, r3, r2
 800f810:	681a      	ldr	r2, [r3, #0]
 800f812:	685b      	ldr	r3, [r3, #4]
 800f814:	f7f0 fe20 	bl	8000458 <__aeabi_dcmplt>
 800f818:	2800      	cmp	r0, #0
 800f81a:	d047      	beq.n	800f8ac <_dtoa_r+0x21c>
 800f81c:	9b04      	ldr	r3, [sp, #16]
 800f81e:	3b01      	subs	r3, #1
 800f820:	9304      	str	r3, [sp, #16]
 800f822:	2300      	movs	r3, #0
 800f824:	9315      	str	r3, [sp, #84]	@ 0x54
 800f826:	2200      	movs	r2, #0
 800f828:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800f82a:	9206      	str	r2, [sp, #24]
 800f82c:	1bdb      	subs	r3, r3, r7
 800f82e:	1e5a      	subs	r2, r3, #1
 800f830:	d53e      	bpl.n	800f8b0 <_dtoa_r+0x220>
 800f832:	2201      	movs	r2, #1
 800f834:	1ad3      	subs	r3, r2, r3
 800f836:	9306      	str	r3, [sp, #24]
 800f838:	2300      	movs	r3, #0
 800f83a:	930d      	str	r3, [sp, #52]	@ 0x34
 800f83c:	9b04      	ldr	r3, [sp, #16]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	db38      	blt.n	800f8b4 <_dtoa_r+0x224>
 800f842:	9a04      	ldr	r2, [sp, #16]
 800f844:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f846:	4694      	mov	ip, r2
 800f848:	4463      	add	r3, ip
 800f84a:	930d      	str	r3, [sp, #52]	@ 0x34
 800f84c:	2300      	movs	r3, #0
 800f84e:	9214      	str	r2, [sp, #80]	@ 0x50
 800f850:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f852:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f854:	2401      	movs	r4, #1
 800f856:	2b09      	cmp	r3, #9
 800f858:	d867      	bhi.n	800f92a <_dtoa_r+0x29a>
 800f85a:	2b05      	cmp	r3, #5
 800f85c:	dd02      	ble.n	800f864 <_dtoa_r+0x1d4>
 800f85e:	2400      	movs	r4, #0
 800f860:	3b04      	subs	r3, #4
 800f862:	9322      	str	r3, [sp, #136]	@ 0x88
 800f864:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800f866:	1e98      	subs	r0, r3, #2
 800f868:	2803      	cmp	r0, #3
 800f86a:	d867      	bhi.n	800f93c <_dtoa_r+0x2ac>
 800f86c:	f7f0 fc54 	bl	8000118 <__gnu_thumb1_case_uqi>
 800f870:	5b383a2b 	.word	0x5b383a2b
 800f874:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800f876:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800f878:	18f6      	adds	r6, r6, r3
 800f87a:	4b68      	ldr	r3, [pc, #416]	@ (800fa1c <_dtoa_r+0x38c>)
 800f87c:	18f2      	adds	r2, r6, r3
 800f87e:	2a20      	cmp	r2, #32
 800f880:	dd0f      	ble.n	800f8a2 <_dtoa_r+0x212>
 800f882:	2340      	movs	r3, #64	@ 0x40
 800f884:	1a9b      	subs	r3, r3, r2
 800f886:	409f      	lsls	r7, r3
 800f888:	4b65      	ldr	r3, [pc, #404]	@ (800fa20 <_dtoa_r+0x390>)
 800f88a:	0038      	movs	r0, r7
 800f88c:	18f3      	adds	r3, r6, r3
 800f88e:	40dc      	lsrs	r4, r3
 800f890:	4320      	orrs	r0, r4
 800f892:	f7f3 fd41 	bl	8003318 <__aeabi_ui2d>
 800f896:	2201      	movs	r2, #1
 800f898:	4b62      	ldr	r3, [pc, #392]	@ (800fa24 <_dtoa_r+0x394>)
 800f89a:	1e77      	subs	r7, r6, #1
 800f89c:	18cb      	adds	r3, r1, r3
 800f89e:	9218      	str	r2, [sp, #96]	@ 0x60
 800f8a0:	e776      	b.n	800f790 <_dtoa_r+0x100>
 800f8a2:	2320      	movs	r3, #32
 800f8a4:	0020      	movs	r0, r4
 800f8a6:	1a9b      	subs	r3, r3, r2
 800f8a8:	4098      	lsls	r0, r3
 800f8aa:	e7f2      	b.n	800f892 <_dtoa_r+0x202>
 800f8ac:	9015      	str	r0, [sp, #84]	@ 0x54
 800f8ae:	e7ba      	b.n	800f826 <_dtoa_r+0x196>
 800f8b0:	920d      	str	r2, [sp, #52]	@ 0x34
 800f8b2:	e7c3      	b.n	800f83c <_dtoa_r+0x1ac>
 800f8b4:	9b06      	ldr	r3, [sp, #24]
 800f8b6:	9a04      	ldr	r2, [sp, #16]
 800f8b8:	1a9b      	subs	r3, r3, r2
 800f8ba:	9306      	str	r3, [sp, #24]
 800f8bc:	4253      	negs	r3, r2
 800f8be:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	9314      	str	r3, [sp, #80]	@ 0x50
 800f8c4:	e7c5      	b.n	800f852 <_dtoa_r+0x1c2>
 800f8c6:	2300      	movs	r3, #0
 800f8c8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f8ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800f8cc:	930e      	str	r3, [sp, #56]	@ 0x38
 800f8ce:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	dc13      	bgt.n	800f8fc <_dtoa_r+0x26c>
 800f8d4:	2301      	movs	r3, #1
 800f8d6:	001a      	movs	r2, r3
 800f8d8:	930e      	str	r3, [sp, #56]	@ 0x38
 800f8da:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8dc:	9223      	str	r2, [sp, #140]	@ 0x8c
 800f8de:	e00d      	b.n	800f8fc <_dtoa_r+0x26c>
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e7f1      	b.n	800f8c8 <_dtoa_r+0x238>
 800f8e4:	2300      	movs	r3, #0
 800f8e6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800f8e8:	9310      	str	r3, [sp, #64]	@ 0x40
 800f8ea:	4694      	mov	ip, r2
 800f8ec:	9b04      	ldr	r3, [sp, #16]
 800f8ee:	4463      	add	r3, ip
 800f8f0:	930e      	str	r3, [sp, #56]	@ 0x38
 800f8f2:	3301      	adds	r3, #1
 800f8f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	dc00      	bgt.n	800f8fc <_dtoa_r+0x26c>
 800f8fa:	2301      	movs	r3, #1
 800f8fc:	9a03      	ldr	r2, [sp, #12]
 800f8fe:	2100      	movs	r1, #0
 800f900:	69d0      	ldr	r0, [r2, #28]
 800f902:	2204      	movs	r2, #4
 800f904:	0015      	movs	r5, r2
 800f906:	3514      	adds	r5, #20
 800f908:	429d      	cmp	r5, r3
 800f90a:	d91b      	bls.n	800f944 <_dtoa_r+0x2b4>
 800f90c:	6041      	str	r1, [r0, #4]
 800f90e:	9803      	ldr	r0, [sp, #12]
 800f910:	f000 fdb8 	bl	8010484 <_Balloc>
 800f914:	9008      	str	r0, [sp, #32]
 800f916:	2800      	cmp	r0, #0
 800f918:	d117      	bne.n	800f94a <_dtoa_r+0x2ba>
 800f91a:	21b0      	movs	r1, #176	@ 0xb0
 800f91c:	4b42      	ldr	r3, [pc, #264]	@ (800fa28 <_dtoa_r+0x398>)
 800f91e:	482e      	ldr	r0, [pc, #184]	@ (800f9d8 <_dtoa_r+0x348>)
 800f920:	9a08      	ldr	r2, [sp, #32]
 800f922:	31ff      	adds	r1, #255	@ 0xff
 800f924:	e6c9      	b.n	800f6ba <_dtoa_r+0x2a>
 800f926:	2301      	movs	r3, #1
 800f928:	e7dd      	b.n	800f8e6 <_dtoa_r+0x256>
 800f92a:	2300      	movs	r3, #0
 800f92c:	9410      	str	r4, [sp, #64]	@ 0x40
 800f92e:	9322      	str	r3, [sp, #136]	@ 0x88
 800f930:	3b01      	subs	r3, #1
 800f932:	930e      	str	r3, [sp, #56]	@ 0x38
 800f934:	9309      	str	r3, [sp, #36]	@ 0x24
 800f936:	2200      	movs	r2, #0
 800f938:	3313      	adds	r3, #19
 800f93a:	e7cf      	b.n	800f8dc <_dtoa_r+0x24c>
 800f93c:	2301      	movs	r3, #1
 800f93e:	9310      	str	r3, [sp, #64]	@ 0x40
 800f940:	3b02      	subs	r3, #2
 800f942:	e7f6      	b.n	800f932 <_dtoa_r+0x2a2>
 800f944:	3101      	adds	r1, #1
 800f946:	0052      	lsls	r2, r2, #1
 800f948:	e7dc      	b.n	800f904 <_dtoa_r+0x274>
 800f94a:	9b03      	ldr	r3, [sp, #12]
 800f94c:	9a08      	ldr	r2, [sp, #32]
 800f94e:	69db      	ldr	r3, [r3, #28]
 800f950:	601a      	str	r2, [r3, #0]
 800f952:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f954:	2b0e      	cmp	r3, #14
 800f956:	d900      	bls.n	800f95a <_dtoa_r+0x2ca>
 800f958:	e0d9      	b.n	800fb0e <_dtoa_r+0x47e>
 800f95a:	2c00      	cmp	r4, #0
 800f95c:	d100      	bne.n	800f960 <_dtoa_r+0x2d0>
 800f95e:	e0d6      	b.n	800fb0e <_dtoa_r+0x47e>
 800f960:	9b04      	ldr	r3, [sp, #16]
 800f962:	2b00      	cmp	r3, #0
 800f964:	dd64      	ble.n	800fa30 <_dtoa_r+0x3a0>
 800f966:	210f      	movs	r1, #15
 800f968:	9a04      	ldr	r2, [sp, #16]
 800f96a:	4b2b      	ldr	r3, [pc, #172]	@ (800fa18 <_dtoa_r+0x388>)
 800f96c:	400a      	ands	r2, r1
 800f96e:	00d2      	lsls	r2, r2, #3
 800f970:	189b      	adds	r3, r3, r2
 800f972:	681e      	ldr	r6, [r3, #0]
 800f974:	685f      	ldr	r7, [r3, #4]
 800f976:	9b04      	ldr	r3, [sp, #16]
 800f978:	2402      	movs	r4, #2
 800f97a:	111d      	asrs	r5, r3, #4
 800f97c:	05db      	lsls	r3, r3, #23
 800f97e:	d50a      	bpl.n	800f996 <_dtoa_r+0x306>
 800f980:	4b2a      	ldr	r3, [pc, #168]	@ (800fa2c <_dtoa_r+0x39c>)
 800f982:	400d      	ands	r5, r1
 800f984:	6a1a      	ldr	r2, [r3, #32]
 800f986:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f988:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800f98a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800f98c:	f7f2 f990 	bl	8001cb0 <__aeabi_ddiv>
 800f990:	900a      	str	r0, [sp, #40]	@ 0x28
 800f992:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f994:	3401      	adds	r4, #1
 800f996:	4b25      	ldr	r3, [pc, #148]	@ (800fa2c <_dtoa_r+0x39c>)
 800f998:	930c      	str	r3, [sp, #48]	@ 0x30
 800f99a:	2d00      	cmp	r5, #0
 800f99c:	d108      	bne.n	800f9b0 <_dtoa_r+0x320>
 800f99e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f9a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800f9a2:	0032      	movs	r2, r6
 800f9a4:	003b      	movs	r3, r7
 800f9a6:	f7f2 f983 	bl	8001cb0 <__aeabi_ddiv>
 800f9aa:	900a      	str	r0, [sp, #40]	@ 0x28
 800f9ac:	910b      	str	r1, [sp, #44]	@ 0x2c
 800f9ae:	e05a      	b.n	800fa66 <_dtoa_r+0x3d6>
 800f9b0:	2301      	movs	r3, #1
 800f9b2:	421d      	tst	r5, r3
 800f9b4:	d009      	beq.n	800f9ca <_dtoa_r+0x33a>
 800f9b6:	18e4      	adds	r4, r4, r3
 800f9b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9ba:	0030      	movs	r0, r6
 800f9bc:	681a      	ldr	r2, [r3, #0]
 800f9be:	685b      	ldr	r3, [r3, #4]
 800f9c0:	0039      	movs	r1, r7
 800f9c2:	f7f2 fdb9 	bl	8002538 <__aeabi_dmul>
 800f9c6:	0006      	movs	r6, r0
 800f9c8:	000f      	movs	r7, r1
 800f9ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f9cc:	106d      	asrs	r5, r5, #1
 800f9ce:	3308      	adds	r3, #8
 800f9d0:	e7e2      	b.n	800f998 <_dtoa_r+0x308>
 800f9d2:	46c0      	nop			@ (mov r8, r8)
 800f9d4:	08012665 	.word	0x08012665
 800f9d8:	0801267c 	.word	0x0801267c
 800f9dc:	7ff00000 	.word	0x7ff00000
 800f9e0:	0000270f 	.word	0x0000270f
 800f9e4:	08012661 	.word	0x08012661
 800f9e8:	08012664 	.word	0x08012664
 800f9ec:	08012635 	.word	0x08012635
 800f9f0:	08012634 	.word	0x08012634
 800f9f4:	3ff00000 	.word	0x3ff00000
 800f9f8:	fffffc01 	.word	0xfffffc01
 800f9fc:	3ff80000 	.word	0x3ff80000
 800fa00:	636f4361 	.word	0x636f4361
 800fa04:	3fd287a7 	.word	0x3fd287a7
 800fa08:	8b60c8b3 	.word	0x8b60c8b3
 800fa0c:	3fc68a28 	.word	0x3fc68a28
 800fa10:	509f79fb 	.word	0x509f79fb
 800fa14:	3fd34413 	.word	0x3fd34413
 800fa18:	08012778 	.word	0x08012778
 800fa1c:	00000432 	.word	0x00000432
 800fa20:	00000412 	.word	0x00000412
 800fa24:	fe100000 	.word	0xfe100000
 800fa28:	080126d4 	.word	0x080126d4
 800fa2c:	08012750 	.word	0x08012750
 800fa30:	9b04      	ldr	r3, [sp, #16]
 800fa32:	2402      	movs	r4, #2
 800fa34:	2b00      	cmp	r3, #0
 800fa36:	d016      	beq.n	800fa66 <_dtoa_r+0x3d6>
 800fa38:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800fa3a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800fa3c:	220f      	movs	r2, #15
 800fa3e:	425d      	negs	r5, r3
 800fa40:	402a      	ands	r2, r5
 800fa42:	4bd7      	ldr	r3, [pc, #860]	@ (800fda0 <_dtoa_r+0x710>)
 800fa44:	00d2      	lsls	r2, r2, #3
 800fa46:	189b      	adds	r3, r3, r2
 800fa48:	681a      	ldr	r2, [r3, #0]
 800fa4a:	685b      	ldr	r3, [r3, #4]
 800fa4c:	f7f2 fd74 	bl	8002538 <__aeabi_dmul>
 800fa50:	2701      	movs	r7, #1
 800fa52:	2300      	movs	r3, #0
 800fa54:	900a      	str	r0, [sp, #40]	@ 0x28
 800fa56:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fa58:	4ed2      	ldr	r6, [pc, #840]	@ (800fda4 <_dtoa_r+0x714>)
 800fa5a:	112d      	asrs	r5, r5, #4
 800fa5c:	2d00      	cmp	r5, #0
 800fa5e:	d000      	beq.n	800fa62 <_dtoa_r+0x3d2>
 800fa60:	e0ba      	b.n	800fbd8 <_dtoa_r+0x548>
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d1a1      	bne.n	800f9aa <_dtoa_r+0x31a>
 800fa66:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fa68:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fa6a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800fa6c:	2b00      	cmp	r3, #0
 800fa6e:	d100      	bne.n	800fa72 <_dtoa_r+0x3e2>
 800fa70:	e0bd      	b.n	800fbee <_dtoa_r+0x55e>
 800fa72:	2200      	movs	r2, #0
 800fa74:	0030      	movs	r0, r6
 800fa76:	0039      	movs	r1, r7
 800fa78:	4bcb      	ldr	r3, [pc, #812]	@ (800fda8 <_dtoa_r+0x718>)
 800fa7a:	f7f0 fced 	bl	8000458 <__aeabi_dcmplt>
 800fa7e:	2800      	cmp	r0, #0
 800fa80:	d100      	bne.n	800fa84 <_dtoa_r+0x3f4>
 800fa82:	e0b4      	b.n	800fbee <_dtoa_r+0x55e>
 800fa84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d100      	bne.n	800fa8c <_dtoa_r+0x3fc>
 800fa8a:	e0b0      	b.n	800fbee <_dtoa_r+0x55e>
 800fa8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fa8e:	2b00      	cmp	r3, #0
 800fa90:	dd39      	ble.n	800fb06 <_dtoa_r+0x476>
 800fa92:	9b04      	ldr	r3, [sp, #16]
 800fa94:	2200      	movs	r2, #0
 800fa96:	3b01      	subs	r3, #1
 800fa98:	930c      	str	r3, [sp, #48]	@ 0x30
 800fa9a:	0030      	movs	r0, r6
 800fa9c:	4bc3      	ldr	r3, [pc, #780]	@ (800fdac <_dtoa_r+0x71c>)
 800fa9e:	0039      	movs	r1, r7
 800faa0:	f7f2 fd4a 	bl	8002538 <__aeabi_dmul>
 800faa4:	900a      	str	r0, [sp, #40]	@ 0x28
 800faa6:	910b      	str	r1, [sp, #44]	@ 0x2c
 800faa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800faaa:	3401      	adds	r4, #1
 800faac:	0020      	movs	r0, r4
 800faae:	9311      	str	r3, [sp, #68]	@ 0x44
 800fab0:	f7f3 fc04 	bl	80032bc <__aeabi_i2d>
 800fab4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fab6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fab8:	f7f2 fd3e 	bl	8002538 <__aeabi_dmul>
 800fabc:	4bbc      	ldr	r3, [pc, #752]	@ (800fdb0 <_dtoa_r+0x720>)
 800fabe:	2200      	movs	r2, #0
 800fac0:	f7f1 fd92 	bl	80015e8 <__aeabi_dadd>
 800fac4:	4bbb      	ldr	r3, [pc, #748]	@ (800fdb4 <_dtoa_r+0x724>)
 800fac6:	0006      	movs	r6, r0
 800fac8:	18cf      	adds	r7, r1, r3
 800faca:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800facc:	2b00      	cmp	r3, #0
 800face:	d000      	beq.n	800fad2 <_dtoa_r+0x442>
 800fad0:	e091      	b.n	800fbf6 <_dtoa_r+0x566>
 800fad2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fad4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fad6:	2200      	movs	r2, #0
 800fad8:	4bb7      	ldr	r3, [pc, #732]	@ (800fdb8 <_dtoa_r+0x728>)
 800fada:	f7f2 fff5 	bl	8002ac8 <__aeabi_dsub>
 800fade:	0032      	movs	r2, r6
 800fae0:	003b      	movs	r3, r7
 800fae2:	0004      	movs	r4, r0
 800fae4:	000d      	movs	r5, r1
 800fae6:	f7f0 fccb 	bl	8000480 <__aeabi_dcmpgt>
 800faea:	2800      	cmp	r0, #0
 800faec:	d000      	beq.n	800faf0 <_dtoa_r+0x460>
 800faee:	e29d      	b.n	801002c <_dtoa_r+0x99c>
 800faf0:	2180      	movs	r1, #128	@ 0x80
 800faf2:	0609      	lsls	r1, r1, #24
 800faf4:	187b      	adds	r3, r7, r1
 800faf6:	0032      	movs	r2, r6
 800faf8:	0020      	movs	r0, r4
 800fafa:	0029      	movs	r1, r5
 800fafc:	f7f0 fcac 	bl	8000458 <__aeabi_dcmplt>
 800fb00:	2800      	cmp	r0, #0
 800fb02:	d000      	beq.n	800fb06 <_dtoa_r+0x476>
 800fb04:	e130      	b.n	800fd68 <_dtoa_r+0x6d8>
 800fb06:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fb08:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800fb0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb0c:	940b      	str	r4, [sp, #44]	@ 0x2c
 800fb0e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	da00      	bge.n	800fb16 <_dtoa_r+0x486>
 800fb14:	e177      	b.n	800fe06 <_dtoa_r+0x776>
 800fb16:	9a04      	ldr	r2, [sp, #16]
 800fb18:	2a0e      	cmp	r2, #14
 800fb1a:	dd00      	ble.n	800fb1e <_dtoa_r+0x48e>
 800fb1c:	e173      	b.n	800fe06 <_dtoa_r+0x776>
 800fb1e:	4ba0      	ldr	r3, [pc, #640]	@ (800fda0 <_dtoa_r+0x710>)
 800fb20:	00d2      	lsls	r2, r2, #3
 800fb22:	189b      	adds	r3, r3, r2
 800fb24:	685c      	ldr	r4, [r3, #4]
 800fb26:	681b      	ldr	r3, [r3, #0]
 800fb28:	9306      	str	r3, [sp, #24]
 800fb2a:	9407      	str	r4, [sp, #28]
 800fb2c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	da03      	bge.n	800fb3a <_dtoa_r+0x4aa>
 800fb32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	dc00      	bgt.n	800fb3a <_dtoa_r+0x4aa>
 800fb38:	e106      	b.n	800fd48 <_dtoa_r+0x6b8>
 800fb3a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800fb3c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800fb3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fb40:	9d08      	ldr	r5, [sp, #32]
 800fb42:	3b01      	subs	r3, #1
 800fb44:	195b      	adds	r3, r3, r5
 800fb46:	930a      	str	r3, [sp, #40]	@ 0x28
 800fb48:	9a06      	ldr	r2, [sp, #24]
 800fb4a:	9b07      	ldr	r3, [sp, #28]
 800fb4c:	0030      	movs	r0, r6
 800fb4e:	0039      	movs	r1, r7
 800fb50:	f7f2 f8ae 	bl	8001cb0 <__aeabi_ddiv>
 800fb54:	f7f3 fb76 	bl	8003244 <__aeabi_d2iz>
 800fb58:	9009      	str	r0, [sp, #36]	@ 0x24
 800fb5a:	f7f3 fbaf 	bl	80032bc <__aeabi_i2d>
 800fb5e:	9a06      	ldr	r2, [sp, #24]
 800fb60:	9b07      	ldr	r3, [sp, #28]
 800fb62:	f7f2 fce9 	bl	8002538 <__aeabi_dmul>
 800fb66:	0002      	movs	r2, r0
 800fb68:	000b      	movs	r3, r1
 800fb6a:	0030      	movs	r0, r6
 800fb6c:	0039      	movs	r1, r7
 800fb6e:	f7f2 ffab 	bl	8002ac8 <__aeabi_dsub>
 800fb72:	002b      	movs	r3, r5
 800fb74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fb76:	3501      	adds	r5, #1
 800fb78:	3230      	adds	r2, #48	@ 0x30
 800fb7a:	701a      	strb	r2, [r3, #0]
 800fb7c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fb7e:	002c      	movs	r4, r5
 800fb80:	429a      	cmp	r2, r3
 800fb82:	d000      	beq.n	800fb86 <_dtoa_r+0x4f6>
 800fb84:	e131      	b.n	800fdea <_dtoa_r+0x75a>
 800fb86:	0002      	movs	r2, r0
 800fb88:	000b      	movs	r3, r1
 800fb8a:	f7f1 fd2d 	bl	80015e8 <__aeabi_dadd>
 800fb8e:	9a06      	ldr	r2, [sp, #24]
 800fb90:	9b07      	ldr	r3, [sp, #28]
 800fb92:	0006      	movs	r6, r0
 800fb94:	000f      	movs	r7, r1
 800fb96:	f7f0 fc73 	bl	8000480 <__aeabi_dcmpgt>
 800fb9a:	2800      	cmp	r0, #0
 800fb9c:	d000      	beq.n	800fba0 <_dtoa_r+0x510>
 800fb9e:	e10f      	b.n	800fdc0 <_dtoa_r+0x730>
 800fba0:	9a06      	ldr	r2, [sp, #24]
 800fba2:	9b07      	ldr	r3, [sp, #28]
 800fba4:	0030      	movs	r0, r6
 800fba6:	0039      	movs	r1, r7
 800fba8:	f7f0 fc50 	bl	800044c <__aeabi_dcmpeq>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d003      	beq.n	800fbb8 <_dtoa_r+0x528>
 800fbb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbb2:	07dd      	lsls	r5, r3, #31
 800fbb4:	d500      	bpl.n	800fbb8 <_dtoa_r+0x528>
 800fbb6:	e103      	b.n	800fdc0 <_dtoa_r+0x730>
 800fbb8:	9905      	ldr	r1, [sp, #20]
 800fbba:	9803      	ldr	r0, [sp, #12]
 800fbbc:	f000 fca6 	bl	801050c <_Bfree>
 800fbc0:	2300      	movs	r3, #0
 800fbc2:	7023      	strb	r3, [r4, #0]
 800fbc4:	9b04      	ldr	r3, [sp, #16]
 800fbc6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800fbc8:	3301      	adds	r3, #1
 800fbca:	6013      	str	r3, [r2, #0]
 800fbcc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800fbce:	2b00      	cmp	r3, #0
 800fbd0:	d100      	bne.n	800fbd4 <_dtoa_r+0x544>
 800fbd2:	e5a7      	b.n	800f724 <_dtoa_r+0x94>
 800fbd4:	601c      	str	r4, [r3, #0]
 800fbd6:	e5a5      	b.n	800f724 <_dtoa_r+0x94>
 800fbd8:	423d      	tst	r5, r7
 800fbda:	d005      	beq.n	800fbe8 <_dtoa_r+0x558>
 800fbdc:	6832      	ldr	r2, [r6, #0]
 800fbde:	6873      	ldr	r3, [r6, #4]
 800fbe0:	f7f2 fcaa 	bl	8002538 <__aeabi_dmul>
 800fbe4:	003b      	movs	r3, r7
 800fbe6:	3401      	adds	r4, #1
 800fbe8:	106d      	asrs	r5, r5, #1
 800fbea:	3608      	adds	r6, #8
 800fbec:	e736      	b.n	800fa5c <_dtoa_r+0x3cc>
 800fbee:	9b04      	ldr	r3, [sp, #16]
 800fbf0:	930c      	str	r3, [sp, #48]	@ 0x30
 800fbf2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fbf4:	e75a      	b.n	800faac <_dtoa_r+0x41c>
 800fbf6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fbf8:	4b69      	ldr	r3, [pc, #420]	@ (800fda0 <_dtoa_r+0x710>)
 800fbfa:	3a01      	subs	r2, #1
 800fbfc:	00d2      	lsls	r2, r2, #3
 800fbfe:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800fc00:	189b      	adds	r3, r3, r2
 800fc02:	681a      	ldr	r2, [r3, #0]
 800fc04:	685b      	ldr	r3, [r3, #4]
 800fc06:	2900      	cmp	r1, #0
 800fc08:	d04c      	beq.n	800fca4 <_dtoa_r+0x614>
 800fc0a:	2000      	movs	r0, #0
 800fc0c:	496b      	ldr	r1, [pc, #428]	@ (800fdbc <_dtoa_r+0x72c>)
 800fc0e:	f7f2 f84f 	bl	8001cb0 <__aeabi_ddiv>
 800fc12:	0032      	movs	r2, r6
 800fc14:	003b      	movs	r3, r7
 800fc16:	f7f2 ff57 	bl	8002ac8 <__aeabi_dsub>
 800fc1a:	9a08      	ldr	r2, [sp, #32]
 800fc1c:	0006      	movs	r6, r0
 800fc1e:	4694      	mov	ip, r2
 800fc20:	000f      	movs	r7, r1
 800fc22:	9b08      	ldr	r3, [sp, #32]
 800fc24:	9316      	str	r3, [sp, #88]	@ 0x58
 800fc26:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fc28:	4463      	add	r3, ip
 800fc2a:	9311      	str	r3, [sp, #68]	@ 0x44
 800fc2c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc2e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fc30:	f7f3 fb08 	bl	8003244 <__aeabi_d2iz>
 800fc34:	0005      	movs	r5, r0
 800fc36:	f7f3 fb41 	bl	80032bc <__aeabi_i2d>
 800fc3a:	0002      	movs	r2, r0
 800fc3c:	000b      	movs	r3, r1
 800fc3e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc40:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fc42:	f7f2 ff41 	bl	8002ac8 <__aeabi_dsub>
 800fc46:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800fc48:	3530      	adds	r5, #48	@ 0x30
 800fc4a:	1c5c      	adds	r4, r3, #1
 800fc4c:	701d      	strb	r5, [r3, #0]
 800fc4e:	0032      	movs	r2, r6
 800fc50:	003b      	movs	r3, r7
 800fc52:	900a      	str	r0, [sp, #40]	@ 0x28
 800fc54:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fc56:	f7f0 fbff 	bl	8000458 <__aeabi_dcmplt>
 800fc5a:	2800      	cmp	r0, #0
 800fc5c:	d16a      	bne.n	800fd34 <_dtoa_r+0x6a4>
 800fc5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fc60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fc62:	2000      	movs	r0, #0
 800fc64:	4950      	ldr	r1, [pc, #320]	@ (800fda8 <_dtoa_r+0x718>)
 800fc66:	f7f2 ff2f 	bl	8002ac8 <__aeabi_dsub>
 800fc6a:	0032      	movs	r2, r6
 800fc6c:	003b      	movs	r3, r7
 800fc6e:	f7f0 fbf3 	bl	8000458 <__aeabi_dcmplt>
 800fc72:	2800      	cmp	r0, #0
 800fc74:	d000      	beq.n	800fc78 <_dtoa_r+0x5e8>
 800fc76:	e0a5      	b.n	800fdc4 <_dtoa_r+0x734>
 800fc78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800fc7a:	42a3      	cmp	r3, r4
 800fc7c:	d100      	bne.n	800fc80 <_dtoa_r+0x5f0>
 800fc7e:	e742      	b.n	800fb06 <_dtoa_r+0x476>
 800fc80:	2200      	movs	r2, #0
 800fc82:	0030      	movs	r0, r6
 800fc84:	0039      	movs	r1, r7
 800fc86:	4b49      	ldr	r3, [pc, #292]	@ (800fdac <_dtoa_r+0x71c>)
 800fc88:	f7f2 fc56 	bl	8002538 <__aeabi_dmul>
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	0006      	movs	r6, r0
 800fc90:	000f      	movs	r7, r1
 800fc92:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fc94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fc96:	4b45      	ldr	r3, [pc, #276]	@ (800fdac <_dtoa_r+0x71c>)
 800fc98:	f7f2 fc4e 	bl	8002538 <__aeabi_dmul>
 800fc9c:	9416      	str	r4, [sp, #88]	@ 0x58
 800fc9e:	900a      	str	r0, [sp, #40]	@ 0x28
 800fca0:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fca2:	e7c3      	b.n	800fc2c <_dtoa_r+0x59c>
 800fca4:	0030      	movs	r0, r6
 800fca6:	0039      	movs	r1, r7
 800fca8:	f7f2 fc46 	bl	8002538 <__aeabi_dmul>
 800fcac:	9d08      	ldr	r5, [sp, #32]
 800fcae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800fcb0:	002b      	movs	r3, r5
 800fcb2:	4694      	mov	ip, r2
 800fcb4:	9016      	str	r0, [sp, #88]	@ 0x58
 800fcb6:	9117      	str	r1, [sp, #92]	@ 0x5c
 800fcb8:	4463      	add	r3, ip
 800fcba:	9319      	str	r3, [sp, #100]	@ 0x64
 800fcbc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fcbe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcc0:	f7f3 fac0 	bl	8003244 <__aeabi_d2iz>
 800fcc4:	0004      	movs	r4, r0
 800fcc6:	f7f3 faf9 	bl	80032bc <__aeabi_i2d>
 800fcca:	000b      	movs	r3, r1
 800fccc:	0002      	movs	r2, r0
 800fcce:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800fcd0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fcd2:	f7f2 fef9 	bl	8002ac8 <__aeabi_dsub>
 800fcd6:	3430      	adds	r4, #48	@ 0x30
 800fcd8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800fcda:	702c      	strb	r4, [r5, #0]
 800fcdc:	3501      	adds	r5, #1
 800fcde:	0006      	movs	r6, r0
 800fce0:	000f      	movs	r7, r1
 800fce2:	42ab      	cmp	r3, r5
 800fce4:	d129      	bne.n	800fd3a <_dtoa_r+0x6aa>
 800fce6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800fce8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800fcea:	9b08      	ldr	r3, [sp, #32]
 800fcec:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800fcee:	469c      	mov	ip, r3
 800fcf0:	2200      	movs	r2, #0
 800fcf2:	4b32      	ldr	r3, [pc, #200]	@ (800fdbc <_dtoa_r+0x72c>)
 800fcf4:	4464      	add	r4, ip
 800fcf6:	f7f1 fc77 	bl	80015e8 <__aeabi_dadd>
 800fcfa:	0002      	movs	r2, r0
 800fcfc:	000b      	movs	r3, r1
 800fcfe:	0030      	movs	r0, r6
 800fd00:	0039      	movs	r1, r7
 800fd02:	f7f0 fbbd 	bl	8000480 <__aeabi_dcmpgt>
 800fd06:	2800      	cmp	r0, #0
 800fd08:	d15c      	bne.n	800fdc4 <_dtoa_r+0x734>
 800fd0a:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800fd0c:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800fd0e:	2000      	movs	r0, #0
 800fd10:	492a      	ldr	r1, [pc, #168]	@ (800fdbc <_dtoa_r+0x72c>)
 800fd12:	f7f2 fed9 	bl	8002ac8 <__aeabi_dsub>
 800fd16:	0002      	movs	r2, r0
 800fd18:	000b      	movs	r3, r1
 800fd1a:	0030      	movs	r0, r6
 800fd1c:	0039      	movs	r1, r7
 800fd1e:	f7f0 fb9b 	bl	8000458 <__aeabi_dcmplt>
 800fd22:	2800      	cmp	r0, #0
 800fd24:	d100      	bne.n	800fd28 <_dtoa_r+0x698>
 800fd26:	e6ee      	b.n	800fb06 <_dtoa_r+0x476>
 800fd28:	0023      	movs	r3, r4
 800fd2a:	3c01      	subs	r4, #1
 800fd2c:	7822      	ldrb	r2, [r4, #0]
 800fd2e:	2a30      	cmp	r2, #48	@ 0x30
 800fd30:	d0fa      	beq.n	800fd28 <_dtoa_r+0x698>
 800fd32:	001c      	movs	r4, r3
 800fd34:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800fd36:	9304      	str	r3, [sp, #16]
 800fd38:	e73e      	b.n	800fbb8 <_dtoa_r+0x528>
 800fd3a:	2200      	movs	r2, #0
 800fd3c:	4b1b      	ldr	r3, [pc, #108]	@ (800fdac <_dtoa_r+0x71c>)
 800fd3e:	f7f2 fbfb 	bl	8002538 <__aeabi_dmul>
 800fd42:	900a      	str	r0, [sp, #40]	@ 0x28
 800fd44:	910b      	str	r1, [sp, #44]	@ 0x2c
 800fd46:	e7b9      	b.n	800fcbc <_dtoa_r+0x62c>
 800fd48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800fd4a:	2b00      	cmp	r3, #0
 800fd4c:	d10c      	bne.n	800fd68 <_dtoa_r+0x6d8>
 800fd4e:	9806      	ldr	r0, [sp, #24]
 800fd50:	9907      	ldr	r1, [sp, #28]
 800fd52:	2200      	movs	r2, #0
 800fd54:	4b18      	ldr	r3, [pc, #96]	@ (800fdb8 <_dtoa_r+0x728>)
 800fd56:	f7f2 fbef 	bl	8002538 <__aeabi_dmul>
 800fd5a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800fd5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fd5e:	f7f0 fb99 	bl	8000494 <__aeabi_dcmpge>
 800fd62:	2800      	cmp	r0, #0
 800fd64:	d100      	bne.n	800fd68 <_dtoa_r+0x6d8>
 800fd66:	e164      	b.n	8010032 <_dtoa_r+0x9a2>
 800fd68:	2600      	movs	r6, #0
 800fd6a:	0037      	movs	r7, r6
 800fd6c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800fd6e:	9c08      	ldr	r4, [sp, #32]
 800fd70:	43db      	mvns	r3, r3
 800fd72:	930c      	str	r3, [sp, #48]	@ 0x30
 800fd74:	2300      	movs	r3, #0
 800fd76:	9304      	str	r3, [sp, #16]
 800fd78:	0031      	movs	r1, r6
 800fd7a:	9803      	ldr	r0, [sp, #12]
 800fd7c:	f000 fbc6 	bl	801050c <_Bfree>
 800fd80:	2f00      	cmp	r7, #0
 800fd82:	d0d7      	beq.n	800fd34 <_dtoa_r+0x6a4>
 800fd84:	9b04      	ldr	r3, [sp, #16]
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d005      	beq.n	800fd96 <_dtoa_r+0x706>
 800fd8a:	42bb      	cmp	r3, r7
 800fd8c:	d003      	beq.n	800fd96 <_dtoa_r+0x706>
 800fd8e:	0019      	movs	r1, r3
 800fd90:	9803      	ldr	r0, [sp, #12]
 800fd92:	f000 fbbb 	bl	801050c <_Bfree>
 800fd96:	0039      	movs	r1, r7
 800fd98:	9803      	ldr	r0, [sp, #12]
 800fd9a:	f000 fbb7 	bl	801050c <_Bfree>
 800fd9e:	e7c9      	b.n	800fd34 <_dtoa_r+0x6a4>
 800fda0:	08012778 	.word	0x08012778
 800fda4:	08012750 	.word	0x08012750
 800fda8:	3ff00000 	.word	0x3ff00000
 800fdac:	40240000 	.word	0x40240000
 800fdb0:	401c0000 	.word	0x401c0000
 800fdb4:	fcc00000 	.word	0xfcc00000
 800fdb8:	40140000 	.word	0x40140000
 800fdbc:	3fe00000 	.word	0x3fe00000
 800fdc0:	9b04      	ldr	r3, [sp, #16]
 800fdc2:	930c      	str	r3, [sp, #48]	@ 0x30
 800fdc4:	0023      	movs	r3, r4
 800fdc6:	001c      	movs	r4, r3
 800fdc8:	3b01      	subs	r3, #1
 800fdca:	781a      	ldrb	r2, [r3, #0]
 800fdcc:	2a39      	cmp	r2, #57	@ 0x39
 800fdce:	d108      	bne.n	800fde2 <_dtoa_r+0x752>
 800fdd0:	9a08      	ldr	r2, [sp, #32]
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d1f7      	bne.n	800fdc6 <_dtoa_r+0x736>
 800fdd6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800fdd8:	9908      	ldr	r1, [sp, #32]
 800fdda:	3201      	adds	r2, #1
 800fddc:	920c      	str	r2, [sp, #48]	@ 0x30
 800fdde:	2230      	movs	r2, #48	@ 0x30
 800fde0:	700a      	strb	r2, [r1, #0]
 800fde2:	781a      	ldrb	r2, [r3, #0]
 800fde4:	3201      	adds	r2, #1
 800fde6:	701a      	strb	r2, [r3, #0]
 800fde8:	e7a4      	b.n	800fd34 <_dtoa_r+0x6a4>
 800fdea:	2200      	movs	r2, #0
 800fdec:	4bc6      	ldr	r3, [pc, #792]	@ (8010108 <_dtoa_r+0xa78>)
 800fdee:	f7f2 fba3 	bl	8002538 <__aeabi_dmul>
 800fdf2:	2200      	movs	r2, #0
 800fdf4:	2300      	movs	r3, #0
 800fdf6:	0006      	movs	r6, r0
 800fdf8:	000f      	movs	r7, r1
 800fdfa:	f7f0 fb27 	bl	800044c <__aeabi_dcmpeq>
 800fdfe:	2800      	cmp	r0, #0
 800fe00:	d100      	bne.n	800fe04 <_dtoa_r+0x774>
 800fe02:	e6a1      	b.n	800fb48 <_dtoa_r+0x4b8>
 800fe04:	e6d8      	b.n	800fbb8 <_dtoa_r+0x528>
 800fe06:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800fe08:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800fe0a:	9c06      	ldr	r4, [sp, #24]
 800fe0c:	2f00      	cmp	r7, #0
 800fe0e:	d014      	beq.n	800fe3a <_dtoa_r+0x7aa>
 800fe10:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800fe12:	2a01      	cmp	r2, #1
 800fe14:	dd00      	ble.n	800fe18 <_dtoa_r+0x788>
 800fe16:	e0c8      	b.n	800ffaa <_dtoa_r+0x91a>
 800fe18:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800fe1a:	2a00      	cmp	r2, #0
 800fe1c:	d100      	bne.n	800fe20 <_dtoa_r+0x790>
 800fe1e:	e0be      	b.n	800ff9e <_dtoa_r+0x90e>
 800fe20:	4aba      	ldr	r2, [pc, #744]	@ (801010c <_dtoa_r+0xa7c>)
 800fe22:	189b      	adds	r3, r3, r2
 800fe24:	9a06      	ldr	r2, [sp, #24]
 800fe26:	2101      	movs	r1, #1
 800fe28:	18d2      	adds	r2, r2, r3
 800fe2a:	9206      	str	r2, [sp, #24]
 800fe2c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fe2e:	9803      	ldr	r0, [sp, #12]
 800fe30:	18d3      	adds	r3, r2, r3
 800fe32:	930d      	str	r3, [sp, #52]	@ 0x34
 800fe34:	f000 fc22 	bl	801067c <__i2b>
 800fe38:	0007      	movs	r7, r0
 800fe3a:	2c00      	cmp	r4, #0
 800fe3c:	d00e      	beq.n	800fe5c <_dtoa_r+0x7cc>
 800fe3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800fe40:	2b00      	cmp	r3, #0
 800fe42:	dd0b      	ble.n	800fe5c <_dtoa_r+0x7cc>
 800fe44:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fe46:	0023      	movs	r3, r4
 800fe48:	4294      	cmp	r4, r2
 800fe4a:	dd00      	ble.n	800fe4e <_dtoa_r+0x7be>
 800fe4c:	0013      	movs	r3, r2
 800fe4e:	9a06      	ldr	r2, [sp, #24]
 800fe50:	1ae4      	subs	r4, r4, r3
 800fe52:	1ad2      	subs	r2, r2, r3
 800fe54:	9206      	str	r2, [sp, #24]
 800fe56:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800fe58:	1ad3      	subs	r3, r2, r3
 800fe5a:	930d      	str	r3, [sp, #52]	@ 0x34
 800fe5c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d01f      	beq.n	800fea2 <_dtoa_r+0x812>
 800fe62:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d100      	bne.n	800fe6a <_dtoa_r+0x7da>
 800fe68:	e0b5      	b.n	800ffd6 <_dtoa_r+0x946>
 800fe6a:	2d00      	cmp	r5, #0
 800fe6c:	d010      	beq.n	800fe90 <_dtoa_r+0x800>
 800fe6e:	0039      	movs	r1, r7
 800fe70:	002a      	movs	r2, r5
 800fe72:	9803      	ldr	r0, [sp, #12]
 800fe74:	f000 fccc 	bl	8010810 <__pow5mult>
 800fe78:	9a05      	ldr	r2, [sp, #20]
 800fe7a:	0001      	movs	r1, r0
 800fe7c:	0007      	movs	r7, r0
 800fe7e:	9803      	ldr	r0, [sp, #12]
 800fe80:	f000 fc14 	bl	80106ac <__multiply>
 800fe84:	0006      	movs	r6, r0
 800fe86:	9905      	ldr	r1, [sp, #20]
 800fe88:	9803      	ldr	r0, [sp, #12]
 800fe8a:	f000 fb3f 	bl	801050c <_Bfree>
 800fe8e:	9605      	str	r6, [sp, #20]
 800fe90:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800fe92:	1b5a      	subs	r2, r3, r5
 800fe94:	42ab      	cmp	r3, r5
 800fe96:	d004      	beq.n	800fea2 <_dtoa_r+0x812>
 800fe98:	9905      	ldr	r1, [sp, #20]
 800fe9a:	9803      	ldr	r0, [sp, #12]
 800fe9c:	f000 fcb8 	bl	8010810 <__pow5mult>
 800fea0:	9005      	str	r0, [sp, #20]
 800fea2:	2101      	movs	r1, #1
 800fea4:	9803      	ldr	r0, [sp, #12]
 800fea6:	f000 fbe9 	bl	801067c <__i2b>
 800feaa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800feac:	0006      	movs	r6, r0
 800feae:	2b00      	cmp	r3, #0
 800feb0:	d100      	bne.n	800feb4 <_dtoa_r+0x824>
 800feb2:	e1bc      	b.n	801022e <_dtoa_r+0xb9e>
 800feb4:	001a      	movs	r2, r3
 800feb6:	0001      	movs	r1, r0
 800feb8:	9803      	ldr	r0, [sp, #12]
 800feba:	f000 fca9 	bl	8010810 <__pow5mult>
 800febe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fec0:	0006      	movs	r6, r0
 800fec2:	2500      	movs	r5, #0
 800fec4:	2b01      	cmp	r3, #1
 800fec6:	dc16      	bgt.n	800fef6 <_dtoa_r+0x866>
 800fec8:	2500      	movs	r5, #0
 800feca:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800fecc:	42ab      	cmp	r3, r5
 800fece:	d10e      	bne.n	800feee <_dtoa_r+0x85e>
 800fed0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800fed2:	031b      	lsls	r3, r3, #12
 800fed4:	42ab      	cmp	r3, r5
 800fed6:	d10a      	bne.n	800feee <_dtoa_r+0x85e>
 800fed8:	4b8d      	ldr	r3, [pc, #564]	@ (8010110 <_dtoa_r+0xa80>)
 800feda:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fedc:	4213      	tst	r3, r2
 800fede:	d006      	beq.n	800feee <_dtoa_r+0x85e>
 800fee0:	9b06      	ldr	r3, [sp, #24]
 800fee2:	3501      	adds	r5, #1
 800fee4:	3301      	adds	r3, #1
 800fee6:	9306      	str	r3, [sp, #24]
 800fee8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800feea:	3301      	adds	r3, #1
 800feec:	930d      	str	r3, [sp, #52]	@ 0x34
 800feee:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800fef0:	2001      	movs	r0, #1
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	d008      	beq.n	800ff08 <_dtoa_r+0x878>
 800fef6:	6933      	ldr	r3, [r6, #16]
 800fef8:	3303      	adds	r3, #3
 800fefa:	009b      	lsls	r3, r3, #2
 800fefc:	18f3      	adds	r3, r6, r3
 800fefe:	6858      	ldr	r0, [r3, #4]
 800ff00:	f000 fb6c 	bl	80105dc <__hi0bits>
 800ff04:	2320      	movs	r3, #32
 800ff06:	1a18      	subs	r0, r3, r0
 800ff08:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff0a:	1818      	adds	r0, r3, r0
 800ff0c:	0002      	movs	r2, r0
 800ff0e:	231f      	movs	r3, #31
 800ff10:	401a      	ands	r2, r3
 800ff12:	4218      	tst	r0, r3
 800ff14:	d065      	beq.n	800ffe2 <_dtoa_r+0x952>
 800ff16:	3301      	adds	r3, #1
 800ff18:	1a9b      	subs	r3, r3, r2
 800ff1a:	2b04      	cmp	r3, #4
 800ff1c:	dd5d      	ble.n	800ffda <_dtoa_r+0x94a>
 800ff1e:	231c      	movs	r3, #28
 800ff20:	1a9b      	subs	r3, r3, r2
 800ff22:	9a06      	ldr	r2, [sp, #24]
 800ff24:	18e4      	adds	r4, r4, r3
 800ff26:	18d2      	adds	r2, r2, r3
 800ff28:	9206      	str	r2, [sp, #24]
 800ff2a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ff2c:	18d3      	adds	r3, r2, r3
 800ff2e:	930d      	str	r3, [sp, #52]	@ 0x34
 800ff30:	9b06      	ldr	r3, [sp, #24]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	dd05      	ble.n	800ff42 <_dtoa_r+0x8b2>
 800ff36:	001a      	movs	r2, r3
 800ff38:	9905      	ldr	r1, [sp, #20]
 800ff3a:	9803      	ldr	r0, [sp, #12]
 800ff3c:	f000 fcc4 	bl	80108c8 <__lshift>
 800ff40:	9005      	str	r0, [sp, #20]
 800ff42:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	dd05      	ble.n	800ff54 <_dtoa_r+0x8c4>
 800ff48:	0031      	movs	r1, r6
 800ff4a:	001a      	movs	r2, r3
 800ff4c:	9803      	ldr	r0, [sp, #12]
 800ff4e:	f000 fcbb 	bl	80108c8 <__lshift>
 800ff52:	0006      	movs	r6, r0
 800ff54:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800ff56:	2b00      	cmp	r3, #0
 800ff58:	d045      	beq.n	800ffe6 <_dtoa_r+0x956>
 800ff5a:	0031      	movs	r1, r6
 800ff5c:	9805      	ldr	r0, [sp, #20]
 800ff5e:	f000 fd1f 	bl	80109a0 <__mcmp>
 800ff62:	2800      	cmp	r0, #0
 800ff64:	da3f      	bge.n	800ffe6 <_dtoa_r+0x956>
 800ff66:	9b04      	ldr	r3, [sp, #16]
 800ff68:	220a      	movs	r2, #10
 800ff6a:	3b01      	subs	r3, #1
 800ff6c:	930c      	str	r3, [sp, #48]	@ 0x30
 800ff6e:	9905      	ldr	r1, [sp, #20]
 800ff70:	2300      	movs	r3, #0
 800ff72:	9803      	ldr	r0, [sp, #12]
 800ff74:	f000 faee 	bl	8010554 <__multadd>
 800ff78:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ff7a:	9005      	str	r0, [sp, #20]
 800ff7c:	2b00      	cmp	r3, #0
 800ff7e:	d100      	bne.n	800ff82 <_dtoa_r+0x8f2>
 800ff80:	e15c      	b.n	801023c <_dtoa_r+0xbac>
 800ff82:	2300      	movs	r3, #0
 800ff84:	0039      	movs	r1, r7
 800ff86:	220a      	movs	r2, #10
 800ff88:	9803      	ldr	r0, [sp, #12]
 800ff8a:	f000 fae3 	bl	8010554 <__multadd>
 800ff8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ff90:	0007      	movs	r7, r0
 800ff92:	2b00      	cmp	r3, #0
 800ff94:	dc55      	bgt.n	8010042 <_dtoa_r+0x9b2>
 800ff96:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ff98:	2b02      	cmp	r3, #2
 800ff9a:	dc2d      	bgt.n	800fff8 <_dtoa_r+0x968>
 800ff9c:	e051      	b.n	8010042 <_dtoa_r+0x9b2>
 800ff9e:	2336      	movs	r3, #54	@ 0x36
 800ffa0:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ffa2:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800ffa4:	9c06      	ldr	r4, [sp, #24]
 800ffa6:	1a9b      	subs	r3, r3, r2
 800ffa8:	e73c      	b.n	800fe24 <_dtoa_r+0x794>
 800ffaa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffac:	1e5d      	subs	r5, r3, #1
 800ffae:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffb0:	42ab      	cmp	r3, r5
 800ffb2:	db08      	blt.n	800ffc6 <_dtoa_r+0x936>
 800ffb4:	1b5d      	subs	r5, r3, r5
 800ffb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffb8:	9c06      	ldr	r4, [sp, #24]
 800ffba:	2b00      	cmp	r3, #0
 800ffbc:	db00      	blt.n	800ffc0 <_dtoa_r+0x930>
 800ffbe:	e731      	b.n	800fe24 <_dtoa_r+0x794>
 800ffc0:	1ae4      	subs	r4, r4, r3
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	e72e      	b.n	800fe24 <_dtoa_r+0x794>
 800ffc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ffc8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800ffca:	1aeb      	subs	r3, r5, r3
 800ffcc:	18d3      	adds	r3, r2, r3
 800ffce:	950f      	str	r5, [sp, #60]	@ 0x3c
 800ffd0:	9314      	str	r3, [sp, #80]	@ 0x50
 800ffd2:	2500      	movs	r5, #0
 800ffd4:	e7ef      	b.n	800ffb6 <_dtoa_r+0x926>
 800ffd6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800ffd8:	e75e      	b.n	800fe98 <_dtoa_r+0x808>
 800ffda:	2b04      	cmp	r3, #4
 800ffdc:	d0a8      	beq.n	800ff30 <_dtoa_r+0x8a0>
 800ffde:	331c      	adds	r3, #28
 800ffe0:	e79f      	b.n	800ff22 <_dtoa_r+0x892>
 800ffe2:	0013      	movs	r3, r2
 800ffe4:	e7fb      	b.n	800ffde <_dtoa_r+0x94e>
 800ffe6:	9b04      	ldr	r3, [sp, #16]
 800ffe8:	930c      	str	r3, [sp, #48]	@ 0x30
 800ffea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ffec:	930e      	str	r3, [sp, #56]	@ 0x38
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	dc23      	bgt.n	801003a <_dtoa_r+0x9aa>
 800fff2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800fff4:	2b02      	cmp	r3, #2
 800fff6:	dd20      	ble.n	801003a <_dtoa_r+0x9aa>
 800fff8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800fffa:	2b00      	cmp	r3, #0
 800fffc:	d000      	beq.n	8010000 <_dtoa_r+0x970>
 800fffe:	e6b5      	b.n	800fd6c <_dtoa_r+0x6dc>
 8010000:	0031      	movs	r1, r6
 8010002:	2205      	movs	r2, #5
 8010004:	9803      	ldr	r0, [sp, #12]
 8010006:	f000 faa5 	bl	8010554 <__multadd>
 801000a:	0006      	movs	r6, r0
 801000c:	0001      	movs	r1, r0
 801000e:	9805      	ldr	r0, [sp, #20]
 8010010:	f000 fcc6 	bl	80109a0 <__mcmp>
 8010014:	2800      	cmp	r0, #0
 8010016:	dc00      	bgt.n	801001a <_dtoa_r+0x98a>
 8010018:	e6a8      	b.n	800fd6c <_dtoa_r+0x6dc>
 801001a:	9b08      	ldr	r3, [sp, #32]
 801001c:	9a08      	ldr	r2, [sp, #32]
 801001e:	1c5c      	adds	r4, r3, #1
 8010020:	2331      	movs	r3, #49	@ 0x31
 8010022:	7013      	strb	r3, [r2, #0]
 8010024:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010026:	3301      	adds	r3, #1
 8010028:	930c      	str	r3, [sp, #48]	@ 0x30
 801002a:	e6a3      	b.n	800fd74 <_dtoa_r+0x6e4>
 801002c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801002e:	0037      	movs	r7, r6
 8010030:	e7f3      	b.n	801001a <_dtoa_r+0x98a>
 8010032:	9b04      	ldr	r3, [sp, #16]
 8010034:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8010036:	930c      	str	r3, [sp, #48]	@ 0x30
 8010038:	e7f9      	b.n	801002e <_dtoa_r+0x99e>
 801003a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801003c:	2b00      	cmp	r3, #0
 801003e:	d100      	bne.n	8010042 <_dtoa_r+0x9b2>
 8010040:	e100      	b.n	8010244 <_dtoa_r+0xbb4>
 8010042:	2c00      	cmp	r4, #0
 8010044:	dd05      	ble.n	8010052 <_dtoa_r+0x9c2>
 8010046:	0039      	movs	r1, r7
 8010048:	0022      	movs	r2, r4
 801004a:	9803      	ldr	r0, [sp, #12]
 801004c:	f000 fc3c 	bl	80108c8 <__lshift>
 8010050:	0007      	movs	r7, r0
 8010052:	0038      	movs	r0, r7
 8010054:	2d00      	cmp	r5, #0
 8010056:	d018      	beq.n	801008a <_dtoa_r+0x9fa>
 8010058:	6879      	ldr	r1, [r7, #4]
 801005a:	9803      	ldr	r0, [sp, #12]
 801005c:	f000 fa12 	bl	8010484 <_Balloc>
 8010060:	1e04      	subs	r4, r0, #0
 8010062:	d105      	bne.n	8010070 <_dtoa_r+0x9e0>
 8010064:	0022      	movs	r2, r4
 8010066:	4b2b      	ldr	r3, [pc, #172]	@ (8010114 <_dtoa_r+0xa84>)
 8010068:	482b      	ldr	r0, [pc, #172]	@ (8010118 <_dtoa_r+0xa88>)
 801006a:	492c      	ldr	r1, [pc, #176]	@ (801011c <_dtoa_r+0xa8c>)
 801006c:	f7ff fb25 	bl	800f6ba <_dtoa_r+0x2a>
 8010070:	0039      	movs	r1, r7
 8010072:	693a      	ldr	r2, [r7, #16]
 8010074:	310c      	adds	r1, #12
 8010076:	3202      	adds	r2, #2
 8010078:	0092      	lsls	r2, r2, #2
 801007a:	300c      	adds	r0, #12
 801007c:	f001 f9c0 	bl	8011400 <memcpy>
 8010080:	2201      	movs	r2, #1
 8010082:	0021      	movs	r1, r4
 8010084:	9803      	ldr	r0, [sp, #12]
 8010086:	f000 fc1f 	bl	80108c8 <__lshift>
 801008a:	9b08      	ldr	r3, [sp, #32]
 801008c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801008e:	9306      	str	r3, [sp, #24]
 8010090:	3b01      	subs	r3, #1
 8010092:	189b      	adds	r3, r3, r2
 8010094:	2201      	movs	r2, #1
 8010096:	9704      	str	r7, [sp, #16]
 8010098:	0007      	movs	r7, r0
 801009a:	930f      	str	r3, [sp, #60]	@ 0x3c
 801009c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801009e:	4013      	ands	r3, r2
 80100a0:	930e      	str	r3, [sp, #56]	@ 0x38
 80100a2:	0031      	movs	r1, r6
 80100a4:	9805      	ldr	r0, [sp, #20]
 80100a6:	f7ff fa65 	bl	800f574 <quorem>
 80100aa:	9904      	ldr	r1, [sp, #16]
 80100ac:	0005      	movs	r5, r0
 80100ae:	900a      	str	r0, [sp, #40]	@ 0x28
 80100b0:	9805      	ldr	r0, [sp, #20]
 80100b2:	f000 fc75 	bl	80109a0 <__mcmp>
 80100b6:	003a      	movs	r2, r7
 80100b8:	900d      	str	r0, [sp, #52]	@ 0x34
 80100ba:	0031      	movs	r1, r6
 80100bc:	9803      	ldr	r0, [sp, #12]
 80100be:	f000 fc8b 	bl	80109d8 <__mdiff>
 80100c2:	2201      	movs	r2, #1
 80100c4:	68c3      	ldr	r3, [r0, #12]
 80100c6:	0004      	movs	r4, r0
 80100c8:	3530      	adds	r5, #48	@ 0x30
 80100ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d104      	bne.n	80100da <_dtoa_r+0xa4a>
 80100d0:	0001      	movs	r1, r0
 80100d2:	9805      	ldr	r0, [sp, #20]
 80100d4:	f000 fc64 	bl	80109a0 <__mcmp>
 80100d8:	9009      	str	r0, [sp, #36]	@ 0x24
 80100da:	0021      	movs	r1, r4
 80100dc:	9803      	ldr	r0, [sp, #12]
 80100de:	f000 fa15 	bl	801050c <_Bfree>
 80100e2:	9b06      	ldr	r3, [sp, #24]
 80100e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80100e6:	1c5c      	adds	r4, r3, #1
 80100e8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80100ea:	4313      	orrs	r3, r2
 80100ec:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80100ee:	4313      	orrs	r3, r2
 80100f0:	d116      	bne.n	8010120 <_dtoa_r+0xa90>
 80100f2:	2d39      	cmp	r5, #57	@ 0x39
 80100f4:	d02f      	beq.n	8010156 <_dtoa_r+0xac6>
 80100f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80100f8:	2b00      	cmp	r3, #0
 80100fa:	dd01      	ble.n	8010100 <_dtoa_r+0xa70>
 80100fc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 80100fe:	3531      	adds	r5, #49	@ 0x31
 8010100:	9b06      	ldr	r3, [sp, #24]
 8010102:	701d      	strb	r5, [r3, #0]
 8010104:	e638      	b.n	800fd78 <_dtoa_r+0x6e8>
 8010106:	46c0      	nop			@ (mov r8, r8)
 8010108:	40240000 	.word	0x40240000
 801010c:	00000433 	.word	0x00000433
 8010110:	7ff00000 	.word	0x7ff00000
 8010114:	080126d4 	.word	0x080126d4
 8010118:	0801267c 	.word	0x0801267c
 801011c:	000002ef 	.word	0x000002ef
 8010120:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010122:	2b00      	cmp	r3, #0
 8010124:	db04      	blt.n	8010130 <_dtoa_r+0xaa0>
 8010126:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8010128:	4313      	orrs	r3, r2
 801012a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801012c:	4313      	orrs	r3, r2
 801012e:	d11e      	bne.n	801016e <_dtoa_r+0xade>
 8010130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010132:	2b00      	cmp	r3, #0
 8010134:	dde4      	ble.n	8010100 <_dtoa_r+0xa70>
 8010136:	9905      	ldr	r1, [sp, #20]
 8010138:	2201      	movs	r2, #1
 801013a:	9803      	ldr	r0, [sp, #12]
 801013c:	f000 fbc4 	bl	80108c8 <__lshift>
 8010140:	0031      	movs	r1, r6
 8010142:	9005      	str	r0, [sp, #20]
 8010144:	f000 fc2c 	bl	80109a0 <__mcmp>
 8010148:	2800      	cmp	r0, #0
 801014a:	dc02      	bgt.n	8010152 <_dtoa_r+0xac2>
 801014c:	d1d8      	bne.n	8010100 <_dtoa_r+0xa70>
 801014e:	07eb      	lsls	r3, r5, #31
 8010150:	d5d6      	bpl.n	8010100 <_dtoa_r+0xa70>
 8010152:	2d39      	cmp	r5, #57	@ 0x39
 8010154:	d1d2      	bne.n	80100fc <_dtoa_r+0xa6c>
 8010156:	2339      	movs	r3, #57	@ 0x39
 8010158:	9a06      	ldr	r2, [sp, #24]
 801015a:	7013      	strb	r3, [r2, #0]
 801015c:	0023      	movs	r3, r4
 801015e:	001c      	movs	r4, r3
 8010160:	3b01      	subs	r3, #1
 8010162:	781a      	ldrb	r2, [r3, #0]
 8010164:	2a39      	cmp	r2, #57	@ 0x39
 8010166:	d04f      	beq.n	8010208 <_dtoa_r+0xb78>
 8010168:	3201      	adds	r2, #1
 801016a:	701a      	strb	r2, [r3, #0]
 801016c:	e604      	b.n	800fd78 <_dtoa_r+0x6e8>
 801016e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010170:	2b00      	cmp	r3, #0
 8010172:	dd03      	ble.n	801017c <_dtoa_r+0xaec>
 8010174:	2d39      	cmp	r5, #57	@ 0x39
 8010176:	d0ee      	beq.n	8010156 <_dtoa_r+0xac6>
 8010178:	3501      	adds	r5, #1
 801017a:	e7c1      	b.n	8010100 <_dtoa_r+0xa70>
 801017c:	9b06      	ldr	r3, [sp, #24]
 801017e:	9a06      	ldr	r2, [sp, #24]
 8010180:	701d      	strb	r5, [r3, #0]
 8010182:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010184:	4293      	cmp	r3, r2
 8010186:	d02a      	beq.n	80101de <_dtoa_r+0xb4e>
 8010188:	2300      	movs	r3, #0
 801018a:	220a      	movs	r2, #10
 801018c:	9905      	ldr	r1, [sp, #20]
 801018e:	9803      	ldr	r0, [sp, #12]
 8010190:	f000 f9e0 	bl	8010554 <__multadd>
 8010194:	9b04      	ldr	r3, [sp, #16]
 8010196:	9005      	str	r0, [sp, #20]
 8010198:	42bb      	cmp	r3, r7
 801019a:	d109      	bne.n	80101b0 <_dtoa_r+0xb20>
 801019c:	2300      	movs	r3, #0
 801019e:	220a      	movs	r2, #10
 80101a0:	9904      	ldr	r1, [sp, #16]
 80101a2:	9803      	ldr	r0, [sp, #12]
 80101a4:	f000 f9d6 	bl	8010554 <__multadd>
 80101a8:	9004      	str	r0, [sp, #16]
 80101aa:	0007      	movs	r7, r0
 80101ac:	9406      	str	r4, [sp, #24]
 80101ae:	e778      	b.n	80100a2 <_dtoa_r+0xa12>
 80101b0:	9904      	ldr	r1, [sp, #16]
 80101b2:	2300      	movs	r3, #0
 80101b4:	220a      	movs	r2, #10
 80101b6:	9803      	ldr	r0, [sp, #12]
 80101b8:	f000 f9cc 	bl	8010554 <__multadd>
 80101bc:	2300      	movs	r3, #0
 80101be:	9004      	str	r0, [sp, #16]
 80101c0:	220a      	movs	r2, #10
 80101c2:	0039      	movs	r1, r7
 80101c4:	9803      	ldr	r0, [sp, #12]
 80101c6:	f000 f9c5 	bl	8010554 <__multadd>
 80101ca:	e7ee      	b.n	80101aa <_dtoa_r+0xb1a>
 80101cc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80101ce:	2401      	movs	r4, #1
 80101d0:	2b00      	cmp	r3, #0
 80101d2:	dd00      	ble.n	80101d6 <_dtoa_r+0xb46>
 80101d4:	001c      	movs	r4, r3
 80101d6:	9b08      	ldr	r3, [sp, #32]
 80101d8:	191c      	adds	r4, r3, r4
 80101da:	2300      	movs	r3, #0
 80101dc:	9304      	str	r3, [sp, #16]
 80101de:	9905      	ldr	r1, [sp, #20]
 80101e0:	2201      	movs	r2, #1
 80101e2:	9803      	ldr	r0, [sp, #12]
 80101e4:	f000 fb70 	bl	80108c8 <__lshift>
 80101e8:	0031      	movs	r1, r6
 80101ea:	9005      	str	r0, [sp, #20]
 80101ec:	f000 fbd8 	bl	80109a0 <__mcmp>
 80101f0:	2800      	cmp	r0, #0
 80101f2:	dcb3      	bgt.n	801015c <_dtoa_r+0xacc>
 80101f4:	d101      	bne.n	80101fa <_dtoa_r+0xb6a>
 80101f6:	07ed      	lsls	r5, r5, #31
 80101f8:	d4b0      	bmi.n	801015c <_dtoa_r+0xacc>
 80101fa:	0023      	movs	r3, r4
 80101fc:	001c      	movs	r4, r3
 80101fe:	3b01      	subs	r3, #1
 8010200:	781a      	ldrb	r2, [r3, #0]
 8010202:	2a30      	cmp	r2, #48	@ 0x30
 8010204:	d0fa      	beq.n	80101fc <_dtoa_r+0xb6c>
 8010206:	e5b7      	b.n	800fd78 <_dtoa_r+0x6e8>
 8010208:	9a08      	ldr	r2, [sp, #32]
 801020a:	429a      	cmp	r2, r3
 801020c:	d1a7      	bne.n	801015e <_dtoa_r+0xace>
 801020e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010210:	3301      	adds	r3, #1
 8010212:	930c      	str	r3, [sp, #48]	@ 0x30
 8010214:	2331      	movs	r3, #49	@ 0x31
 8010216:	7013      	strb	r3, [r2, #0]
 8010218:	e5ae      	b.n	800fd78 <_dtoa_r+0x6e8>
 801021a:	4b15      	ldr	r3, [pc, #84]	@ (8010270 <_dtoa_r+0xbe0>)
 801021c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801021e:	9308      	str	r3, [sp, #32]
 8010220:	4b14      	ldr	r3, [pc, #80]	@ (8010274 <_dtoa_r+0xbe4>)
 8010222:	2a00      	cmp	r2, #0
 8010224:	d001      	beq.n	801022a <_dtoa_r+0xb9a>
 8010226:	f7ff fa7b 	bl	800f720 <_dtoa_r+0x90>
 801022a:	f7ff fa7b 	bl	800f724 <_dtoa_r+0x94>
 801022e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8010230:	2b01      	cmp	r3, #1
 8010232:	dc00      	bgt.n	8010236 <_dtoa_r+0xba6>
 8010234:	e648      	b.n	800fec8 <_dtoa_r+0x838>
 8010236:	2001      	movs	r0, #1
 8010238:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801023a:	e665      	b.n	800ff08 <_dtoa_r+0x878>
 801023c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801023e:	2b00      	cmp	r3, #0
 8010240:	dc00      	bgt.n	8010244 <_dtoa_r+0xbb4>
 8010242:	e6d6      	b.n	800fff2 <_dtoa_r+0x962>
 8010244:	2400      	movs	r4, #0
 8010246:	0031      	movs	r1, r6
 8010248:	9805      	ldr	r0, [sp, #20]
 801024a:	f7ff f993 	bl	800f574 <quorem>
 801024e:	9b08      	ldr	r3, [sp, #32]
 8010250:	3030      	adds	r0, #48	@ 0x30
 8010252:	5518      	strb	r0, [r3, r4]
 8010254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010256:	3401      	adds	r4, #1
 8010258:	0005      	movs	r5, r0
 801025a:	429c      	cmp	r4, r3
 801025c:	dab6      	bge.n	80101cc <_dtoa_r+0xb3c>
 801025e:	2300      	movs	r3, #0
 8010260:	220a      	movs	r2, #10
 8010262:	9905      	ldr	r1, [sp, #20]
 8010264:	9803      	ldr	r0, [sp, #12]
 8010266:	f000 f975 	bl	8010554 <__multadd>
 801026a:	9005      	str	r0, [sp, #20]
 801026c:	e7eb      	b.n	8010246 <_dtoa_r+0xbb6>
 801026e:	46c0      	nop			@ (mov r8, r8)
 8010270:	08012658 	.word	0x08012658
 8010274:	08012660 	.word	0x08012660

08010278 <_free_r>:
 8010278:	b570      	push	{r4, r5, r6, lr}
 801027a:	0005      	movs	r5, r0
 801027c:	1e0c      	subs	r4, r1, #0
 801027e:	d010      	beq.n	80102a2 <_free_r+0x2a>
 8010280:	3c04      	subs	r4, #4
 8010282:	6823      	ldr	r3, [r4, #0]
 8010284:	2b00      	cmp	r3, #0
 8010286:	da00      	bge.n	801028a <_free_r+0x12>
 8010288:	18e4      	adds	r4, r4, r3
 801028a:	0028      	movs	r0, r5
 801028c:	f000 f8ea 	bl	8010464 <__malloc_lock>
 8010290:	4a1d      	ldr	r2, [pc, #116]	@ (8010308 <_free_r+0x90>)
 8010292:	6813      	ldr	r3, [r2, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d105      	bne.n	80102a4 <_free_r+0x2c>
 8010298:	6063      	str	r3, [r4, #4]
 801029a:	6014      	str	r4, [r2, #0]
 801029c:	0028      	movs	r0, r5
 801029e:	f000 f8e9 	bl	8010474 <__malloc_unlock>
 80102a2:	bd70      	pop	{r4, r5, r6, pc}
 80102a4:	42a3      	cmp	r3, r4
 80102a6:	d908      	bls.n	80102ba <_free_r+0x42>
 80102a8:	6820      	ldr	r0, [r4, #0]
 80102aa:	1821      	adds	r1, r4, r0
 80102ac:	428b      	cmp	r3, r1
 80102ae:	d1f3      	bne.n	8010298 <_free_r+0x20>
 80102b0:	6819      	ldr	r1, [r3, #0]
 80102b2:	685b      	ldr	r3, [r3, #4]
 80102b4:	1809      	adds	r1, r1, r0
 80102b6:	6021      	str	r1, [r4, #0]
 80102b8:	e7ee      	b.n	8010298 <_free_r+0x20>
 80102ba:	001a      	movs	r2, r3
 80102bc:	685b      	ldr	r3, [r3, #4]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d001      	beq.n	80102c6 <_free_r+0x4e>
 80102c2:	42a3      	cmp	r3, r4
 80102c4:	d9f9      	bls.n	80102ba <_free_r+0x42>
 80102c6:	6811      	ldr	r1, [r2, #0]
 80102c8:	1850      	adds	r0, r2, r1
 80102ca:	42a0      	cmp	r0, r4
 80102cc:	d10b      	bne.n	80102e6 <_free_r+0x6e>
 80102ce:	6820      	ldr	r0, [r4, #0]
 80102d0:	1809      	adds	r1, r1, r0
 80102d2:	1850      	adds	r0, r2, r1
 80102d4:	6011      	str	r1, [r2, #0]
 80102d6:	4283      	cmp	r3, r0
 80102d8:	d1e0      	bne.n	801029c <_free_r+0x24>
 80102da:	6818      	ldr	r0, [r3, #0]
 80102dc:	685b      	ldr	r3, [r3, #4]
 80102de:	1841      	adds	r1, r0, r1
 80102e0:	6011      	str	r1, [r2, #0]
 80102e2:	6053      	str	r3, [r2, #4]
 80102e4:	e7da      	b.n	801029c <_free_r+0x24>
 80102e6:	42a0      	cmp	r0, r4
 80102e8:	d902      	bls.n	80102f0 <_free_r+0x78>
 80102ea:	230c      	movs	r3, #12
 80102ec:	602b      	str	r3, [r5, #0]
 80102ee:	e7d5      	b.n	801029c <_free_r+0x24>
 80102f0:	6820      	ldr	r0, [r4, #0]
 80102f2:	1821      	adds	r1, r4, r0
 80102f4:	428b      	cmp	r3, r1
 80102f6:	d103      	bne.n	8010300 <_free_r+0x88>
 80102f8:	6819      	ldr	r1, [r3, #0]
 80102fa:	685b      	ldr	r3, [r3, #4]
 80102fc:	1809      	adds	r1, r1, r0
 80102fe:	6021      	str	r1, [r4, #0]
 8010300:	6063      	str	r3, [r4, #4]
 8010302:	6054      	str	r4, [r2, #4]
 8010304:	e7ca      	b.n	801029c <_free_r+0x24>
 8010306:	46c0      	nop			@ (mov r8, r8)
 8010308:	20001ea0 	.word	0x20001ea0

0801030c <malloc>:
 801030c:	b510      	push	{r4, lr}
 801030e:	4b03      	ldr	r3, [pc, #12]	@ (801031c <malloc+0x10>)
 8010310:	0001      	movs	r1, r0
 8010312:	6818      	ldr	r0, [r3, #0]
 8010314:	f000 f826 	bl	8010364 <_malloc_r>
 8010318:	bd10      	pop	{r4, pc}
 801031a:	46c0      	nop			@ (mov r8, r8)
 801031c:	20000154 	.word	0x20000154

08010320 <sbrk_aligned>:
 8010320:	b570      	push	{r4, r5, r6, lr}
 8010322:	4e0f      	ldr	r6, [pc, #60]	@ (8010360 <sbrk_aligned+0x40>)
 8010324:	000d      	movs	r5, r1
 8010326:	6831      	ldr	r1, [r6, #0]
 8010328:	0004      	movs	r4, r0
 801032a:	2900      	cmp	r1, #0
 801032c:	d102      	bne.n	8010334 <sbrk_aligned+0x14>
 801032e:	f001 f855 	bl	80113dc <_sbrk_r>
 8010332:	6030      	str	r0, [r6, #0]
 8010334:	0029      	movs	r1, r5
 8010336:	0020      	movs	r0, r4
 8010338:	f001 f850 	bl	80113dc <_sbrk_r>
 801033c:	1c43      	adds	r3, r0, #1
 801033e:	d103      	bne.n	8010348 <sbrk_aligned+0x28>
 8010340:	2501      	movs	r5, #1
 8010342:	426d      	negs	r5, r5
 8010344:	0028      	movs	r0, r5
 8010346:	bd70      	pop	{r4, r5, r6, pc}
 8010348:	2303      	movs	r3, #3
 801034a:	1cc5      	adds	r5, r0, #3
 801034c:	439d      	bics	r5, r3
 801034e:	42a8      	cmp	r0, r5
 8010350:	d0f8      	beq.n	8010344 <sbrk_aligned+0x24>
 8010352:	1a29      	subs	r1, r5, r0
 8010354:	0020      	movs	r0, r4
 8010356:	f001 f841 	bl	80113dc <_sbrk_r>
 801035a:	3001      	adds	r0, #1
 801035c:	d1f2      	bne.n	8010344 <sbrk_aligned+0x24>
 801035e:	e7ef      	b.n	8010340 <sbrk_aligned+0x20>
 8010360:	20001e9c 	.word	0x20001e9c

08010364 <_malloc_r>:
 8010364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010366:	2203      	movs	r2, #3
 8010368:	1ccb      	adds	r3, r1, #3
 801036a:	4393      	bics	r3, r2
 801036c:	3308      	adds	r3, #8
 801036e:	0005      	movs	r5, r0
 8010370:	001f      	movs	r7, r3
 8010372:	2b0c      	cmp	r3, #12
 8010374:	d234      	bcs.n	80103e0 <_malloc_r+0x7c>
 8010376:	270c      	movs	r7, #12
 8010378:	42b9      	cmp	r1, r7
 801037a:	d833      	bhi.n	80103e4 <_malloc_r+0x80>
 801037c:	0028      	movs	r0, r5
 801037e:	f000 f871 	bl	8010464 <__malloc_lock>
 8010382:	4e37      	ldr	r6, [pc, #220]	@ (8010460 <_malloc_r+0xfc>)
 8010384:	6833      	ldr	r3, [r6, #0]
 8010386:	001c      	movs	r4, r3
 8010388:	2c00      	cmp	r4, #0
 801038a:	d12f      	bne.n	80103ec <_malloc_r+0x88>
 801038c:	0039      	movs	r1, r7
 801038e:	0028      	movs	r0, r5
 8010390:	f7ff ffc6 	bl	8010320 <sbrk_aligned>
 8010394:	0004      	movs	r4, r0
 8010396:	1c43      	adds	r3, r0, #1
 8010398:	d15f      	bne.n	801045a <_malloc_r+0xf6>
 801039a:	6834      	ldr	r4, [r6, #0]
 801039c:	9400      	str	r4, [sp, #0]
 801039e:	9b00      	ldr	r3, [sp, #0]
 80103a0:	2b00      	cmp	r3, #0
 80103a2:	d14a      	bne.n	801043a <_malloc_r+0xd6>
 80103a4:	2c00      	cmp	r4, #0
 80103a6:	d052      	beq.n	801044e <_malloc_r+0xea>
 80103a8:	6823      	ldr	r3, [r4, #0]
 80103aa:	0028      	movs	r0, r5
 80103ac:	18e3      	adds	r3, r4, r3
 80103ae:	9900      	ldr	r1, [sp, #0]
 80103b0:	9301      	str	r3, [sp, #4]
 80103b2:	f001 f813 	bl	80113dc <_sbrk_r>
 80103b6:	9b01      	ldr	r3, [sp, #4]
 80103b8:	4283      	cmp	r3, r0
 80103ba:	d148      	bne.n	801044e <_malloc_r+0xea>
 80103bc:	6823      	ldr	r3, [r4, #0]
 80103be:	0028      	movs	r0, r5
 80103c0:	1aff      	subs	r7, r7, r3
 80103c2:	0039      	movs	r1, r7
 80103c4:	f7ff ffac 	bl	8010320 <sbrk_aligned>
 80103c8:	3001      	adds	r0, #1
 80103ca:	d040      	beq.n	801044e <_malloc_r+0xea>
 80103cc:	6823      	ldr	r3, [r4, #0]
 80103ce:	19db      	adds	r3, r3, r7
 80103d0:	6023      	str	r3, [r4, #0]
 80103d2:	6833      	ldr	r3, [r6, #0]
 80103d4:	685a      	ldr	r2, [r3, #4]
 80103d6:	2a00      	cmp	r2, #0
 80103d8:	d133      	bne.n	8010442 <_malloc_r+0xde>
 80103da:	9b00      	ldr	r3, [sp, #0]
 80103dc:	6033      	str	r3, [r6, #0]
 80103de:	e019      	b.n	8010414 <_malloc_r+0xb0>
 80103e0:	2b00      	cmp	r3, #0
 80103e2:	dac9      	bge.n	8010378 <_malloc_r+0x14>
 80103e4:	230c      	movs	r3, #12
 80103e6:	602b      	str	r3, [r5, #0]
 80103e8:	2000      	movs	r0, #0
 80103ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80103ec:	6821      	ldr	r1, [r4, #0]
 80103ee:	1bc9      	subs	r1, r1, r7
 80103f0:	d420      	bmi.n	8010434 <_malloc_r+0xd0>
 80103f2:	290b      	cmp	r1, #11
 80103f4:	d90a      	bls.n	801040c <_malloc_r+0xa8>
 80103f6:	19e2      	adds	r2, r4, r7
 80103f8:	6027      	str	r7, [r4, #0]
 80103fa:	42a3      	cmp	r3, r4
 80103fc:	d104      	bne.n	8010408 <_malloc_r+0xa4>
 80103fe:	6032      	str	r2, [r6, #0]
 8010400:	6863      	ldr	r3, [r4, #4]
 8010402:	6011      	str	r1, [r2, #0]
 8010404:	6053      	str	r3, [r2, #4]
 8010406:	e005      	b.n	8010414 <_malloc_r+0xb0>
 8010408:	605a      	str	r2, [r3, #4]
 801040a:	e7f9      	b.n	8010400 <_malloc_r+0x9c>
 801040c:	6862      	ldr	r2, [r4, #4]
 801040e:	42a3      	cmp	r3, r4
 8010410:	d10e      	bne.n	8010430 <_malloc_r+0xcc>
 8010412:	6032      	str	r2, [r6, #0]
 8010414:	0028      	movs	r0, r5
 8010416:	f000 f82d 	bl	8010474 <__malloc_unlock>
 801041a:	0020      	movs	r0, r4
 801041c:	2207      	movs	r2, #7
 801041e:	300b      	adds	r0, #11
 8010420:	1d23      	adds	r3, r4, #4
 8010422:	4390      	bics	r0, r2
 8010424:	1ac2      	subs	r2, r0, r3
 8010426:	4298      	cmp	r0, r3
 8010428:	d0df      	beq.n	80103ea <_malloc_r+0x86>
 801042a:	1a1b      	subs	r3, r3, r0
 801042c:	50a3      	str	r3, [r4, r2]
 801042e:	e7dc      	b.n	80103ea <_malloc_r+0x86>
 8010430:	605a      	str	r2, [r3, #4]
 8010432:	e7ef      	b.n	8010414 <_malloc_r+0xb0>
 8010434:	0023      	movs	r3, r4
 8010436:	6864      	ldr	r4, [r4, #4]
 8010438:	e7a6      	b.n	8010388 <_malloc_r+0x24>
 801043a:	9c00      	ldr	r4, [sp, #0]
 801043c:	6863      	ldr	r3, [r4, #4]
 801043e:	9300      	str	r3, [sp, #0]
 8010440:	e7ad      	b.n	801039e <_malloc_r+0x3a>
 8010442:	001a      	movs	r2, r3
 8010444:	685b      	ldr	r3, [r3, #4]
 8010446:	42a3      	cmp	r3, r4
 8010448:	d1fb      	bne.n	8010442 <_malloc_r+0xde>
 801044a:	2300      	movs	r3, #0
 801044c:	e7da      	b.n	8010404 <_malloc_r+0xa0>
 801044e:	230c      	movs	r3, #12
 8010450:	0028      	movs	r0, r5
 8010452:	602b      	str	r3, [r5, #0]
 8010454:	f000 f80e 	bl	8010474 <__malloc_unlock>
 8010458:	e7c6      	b.n	80103e8 <_malloc_r+0x84>
 801045a:	6007      	str	r7, [r0, #0]
 801045c:	e7da      	b.n	8010414 <_malloc_r+0xb0>
 801045e:	46c0      	nop			@ (mov r8, r8)
 8010460:	20001ea0 	.word	0x20001ea0

08010464 <__malloc_lock>:
 8010464:	b510      	push	{r4, lr}
 8010466:	4802      	ldr	r0, [pc, #8]	@ (8010470 <__malloc_lock+0xc>)
 8010468:	f7ff f877 	bl	800f55a <__retarget_lock_acquire_recursive>
 801046c:	bd10      	pop	{r4, pc}
 801046e:	46c0      	nop			@ (mov r8, r8)
 8010470:	20001e98 	.word	0x20001e98

08010474 <__malloc_unlock>:
 8010474:	b510      	push	{r4, lr}
 8010476:	4802      	ldr	r0, [pc, #8]	@ (8010480 <__malloc_unlock+0xc>)
 8010478:	f7ff f870 	bl	800f55c <__retarget_lock_release_recursive>
 801047c:	bd10      	pop	{r4, pc}
 801047e:	46c0      	nop			@ (mov r8, r8)
 8010480:	20001e98 	.word	0x20001e98

08010484 <_Balloc>:
 8010484:	b570      	push	{r4, r5, r6, lr}
 8010486:	69c5      	ldr	r5, [r0, #28]
 8010488:	0006      	movs	r6, r0
 801048a:	000c      	movs	r4, r1
 801048c:	2d00      	cmp	r5, #0
 801048e:	d10e      	bne.n	80104ae <_Balloc+0x2a>
 8010490:	2010      	movs	r0, #16
 8010492:	f7ff ff3b 	bl	801030c <malloc>
 8010496:	1e02      	subs	r2, r0, #0
 8010498:	61f0      	str	r0, [r6, #28]
 801049a:	d104      	bne.n	80104a6 <_Balloc+0x22>
 801049c:	216b      	movs	r1, #107	@ 0x6b
 801049e:	4b19      	ldr	r3, [pc, #100]	@ (8010504 <_Balloc+0x80>)
 80104a0:	4819      	ldr	r0, [pc, #100]	@ (8010508 <_Balloc+0x84>)
 80104a2:	f000 ffb7 	bl	8011414 <__assert_func>
 80104a6:	6045      	str	r5, [r0, #4]
 80104a8:	6085      	str	r5, [r0, #8]
 80104aa:	6005      	str	r5, [r0, #0]
 80104ac:	60c5      	str	r5, [r0, #12]
 80104ae:	69f5      	ldr	r5, [r6, #28]
 80104b0:	68eb      	ldr	r3, [r5, #12]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d013      	beq.n	80104de <_Balloc+0x5a>
 80104b6:	69f3      	ldr	r3, [r6, #28]
 80104b8:	00a2      	lsls	r2, r4, #2
 80104ba:	68db      	ldr	r3, [r3, #12]
 80104bc:	189b      	adds	r3, r3, r2
 80104be:	6818      	ldr	r0, [r3, #0]
 80104c0:	2800      	cmp	r0, #0
 80104c2:	d118      	bne.n	80104f6 <_Balloc+0x72>
 80104c4:	2101      	movs	r1, #1
 80104c6:	000d      	movs	r5, r1
 80104c8:	40a5      	lsls	r5, r4
 80104ca:	1d6a      	adds	r2, r5, #5
 80104cc:	0030      	movs	r0, r6
 80104ce:	0092      	lsls	r2, r2, #2
 80104d0:	f000 ffbe 	bl	8011450 <_calloc_r>
 80104d4:	2800      	cmp	r0, #0
 80104d6:	d00c      	beq.n	80104f2 <_Balloc+0x6e>
 80104d8:	6044      	str	r4, [r0, #4]
 80104da:	6085      	str	r5, [r0, #8]
 80104dc:	e00d      	b.n	80104fa <_Balloc+0x76>
 80104de:	2221      	movs	r2, #33	@ 0x21
 80104e0:	2104      	movs	r1, #4
 80104e2:	0030      	movs	r0, r6
 80104e4:	f000 ffb4 	bl	8011450 <_calloc_r>
 80104e8:	69f3      	ldr	r3, [r6, #28]
 80104ea:	60e8      	str	r0, [r5, #12]
 80104ec:	68db      	ldr	r3, [r3, #12]
 80104ee:	2b00      	cmp	r3, #0
 80104f0:	d1e1      	bne.n	80104b6 <_Balloc+0x32>
 80104f2:	2000      	movs	r0, #0
 80104f4:	bd70      	pop	{r4, r5, r6, pc}
 80104f6:	6802      	ldr	r2, [r0, #0]
 80104f8:	601a      	str	r2, [r3, #0]
 80104fa:	2300      	movs	r3, #0
 80104fc:	6103      	str	r3, [r0, #16]
 80104fe:	60c3      	str	r3, [r0, #12]
 8010500:	e7f8      	b.n	80104f4 <_Balloc+0x70>
 8010502:	46c0      	nop			@ (mov r8, r8)
 8010504:	08012665 	.word	0x08012665
 8010508:	080126e5 	.word	0x080126e5

0801050c <_Bfree>:
 801050c:	b570      	push	{r4, r5, r6, lr}
 801050e:	69c6      	ldr	r6, [r0, #28]
 8010510:	0005      	movs	r5, r0
 8010512:	000c      	movs	r4, r1
 8010514:	2e00      	cmp	r6, #0
 8010516:	d10e      	bne.n	8010536 <_Bfree+0x2a>
 8010518:	2010      	movs	r0, #16
 801051a:	f7ff fef7 	bl	801030c <malloc>
 801051e:	1e02      	subs	r2, r0, #0
 8010520:	61e8      	str	r0, [r5, #28]
 8010522:	d104      	bne.n	801052e <_Bfree+0x22>
 8010524:	218f      	movs	r1, #143	@ 0x8f
 8010526:	4b09      	ldr	r3, [pc, #36]	@ (801054c <_Bfree+0x40>)
 8010528:	4809      	ldr	r0, [pc, #36]	@ (8010550 <_Bfree+0x44>)
 801052a:	f000 ff73 	bl	8011414 <__assert_func>
 801052e:	6046      	str	r6, [r0, #4]
 8010530:	6086      	str	r6, [r0, #8]
 8010532:	6006      	str	r6, [r0, #0]
 8010534:	60c6      	str	r6, [r0, #12]
 8010536:	2c00      	cmp	r4, #0
 8010538:	d007      	beq.n	801054a <_Bfree+0x3e>
 801053a:	69eb      	ldr	r3, [r5, #28]
 801053c:	6862      	ldr	r2, [r4, #4]
 801053e:	68db      	ldr	r3, [r3, #12]
 8010540:	0092      	lsls	r2, r2, #2
 8010542:	189b      	adds	r3, r3, r2
 8010544:	681a      	ldr	r2, [r3, #0]
 8010546:	6022      	str	r2, [r4, #0]
 8010548:	601c      	str	r4, [r3, #0]
 801054a:	bd70      	pop	{r4, r5, r6, pc}
 801054c:	08012665 	.word	0x08012665
 8010550:	080126e5 	.word	0x080126e5

08010554 <__multadd>:
 8010554:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010556:	000f      	movs	r7, r1
 8010558:	9001      	str	r0, [sp, #4]
 801055a:	000c      	movs	r4, r1
 801055c:	001e      	movs	r6, r3
 801055e:	2000      	movs	r0, #0
 8010560:	690d      	ldr	r5, [r1, #16]
 8010562:	3714      	adds	r7, #20
 8010564:	683b      	ldr	r3, [r7, #0]
 8010566:	3001      	adds	r0, #1
 8010568:	b299      	uxth	r1, r3
 801056a:	4351      	muls	r1, r2
 801056c:	0c1b      	lsrs	r3, r3, #16
 801056e:	4353      	muls	r3, r2
 8010570:	1989      	adds	r1, r1, r6
 8010572:	0c0e      	lsrs	r6, r1, #16
 8010574:	199b      	adds	r3, r3, r6
 8010576:	0c1e      	lsrs	r6, r3, #16
 8010578:	b289      	uxth	r1, r1
 801057a:	041b      	lsls	r3, r3, #16
 801057c:	185b      	adds	r3, r3, r1
 801057e:	c708      	stmia	r7!, {r3}
 8010580:	4285      	cmp	r5, r0
 8010582:	dcef      	bgt.n	8010564 <__multadd+0x10>
 8010584:	2e00      	cmp	r6, #0
 8010586:	d022      	beq.n	80105ce <__multadd+0x7a>
 8010588:	68a3      	ldr	r3, [r4, #8]
 801058a:	42ab      	cmp	r3, r5
 801058c:	dc19      	bgt.n	80105c2 <__multadd+0x6e>
 801058e:	6861      	ldr	r1, [r4, #4]
 8010590:	9801      	ldr	r0, [sp, #4]
 8010592:	3101      	adds	r1, #1
 8010594:	f7ff ff76 	bl	8010484 <_Balloc>
 8010598:	1e07      	subs	r7, r0, #0
 801059a:	d105      	bne.n	80105a8 <__multadd+0x54>
 801059c:	003a      	movs	r2, r7
 801059e:	21ba      	movs	r1, #186	@ 0xba
 80105a0:	4b0c      	ldr	r3, [pc, #48]	@ (80105d4 <__multadd+0x80>)
 80105a2:	480d      	ldr	r0, [pc, #52]	@ (80105d8 <__multadd+0x84>)
 80105a4:	f000 ff36 	bl	8011414 <__assert_func>
 80105a8:	0021      	movs	r1, r4
 80105aa:	6922      	ldr	r2, [r4, #16]
 80105ac:	310c      	adds	r1, #12
 80105ae:	3202      	adds	r2, #2
 80105b0:	0092      	lsls	r2, r2, #2
 80105b2:	300c      	adds	r0, #12
 80105b4:	f000 ff24 	bl	8011400 <memcpy>
 80105b8:	0021      	movs	r1, r4
 80105ba:	9801      	ldr	r0, [sp, #4]
 80105bc:	f7ff ffa6 	bl	801050c <_Bfree>
 80105c0:	003c      	movs	r4, r7
 80105c2:	1d2b      	adds	r3, r5, #4
 80105c4:	009b      	lsls	r3, r3, #2
 80105c6:	18e3      	adds	r3, r4, r3
 80105c8:	3501      	adds	r5, #1
 80105ca:	605e      	str	r6, [r3, #4]
 80105cc:	6125      	str	r5, [r4, #16]
 80105ce:	0020      	movs	r0, r4
 80105d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80105d2:	46c0      	nop			@ (mov r8, r8)
 80105d4:	080126d4 	.word	0x080126d4
 80105d8:	080126e5 	.word	0x080126e5

080105dc <__hi0bits>:
 80105dc:	2280      	movs	r2, #128	@ 0x80
 80105de:	0003      	movs	r3, r0
 80105e0:	0252      	lsls	r2, r2, #9
 80105e2:	2000      	movs	r0, #0
 80105e4:	4293      	cmp	r3, r2
 80105e6:	d201      	bcs.n	80105ec <__hi0bits+0x10>
 80105e8:	041b      	lsls	r3, r3, #16
 80105ea:	3010      	adds	r0, #16
 80105ec:	2280      	movs	r2, #128	@ 0x80
 80105ee:	0452      	lsls	r2, r2, #17
 80105f0:	4293      	cmp	r3, r2
 80105f2:	d201      	bcs.n	80105f8 <__hi0bits+0x1c>
 80105f4:	3008      	adds	r0, #8
 80105f6:	021b      	lsls	r3, r3, #8
 80105f8:	2280      	movs	r2, #128	@ 0x80
 80105fa:	0552      	lsls	r2, r2, #21
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d201      	bcs.n	8010604 <__hi0bits+0x28>
 8010600:	3004      	adds	r0, #4
 8010602:	011b      	lsls	r3, r3, #4
 8010604:	2280      	movs	r2, #128	@ 0x80
 8010606:	05d2      	lsls	r2, r2, #23
 8010608:	4293      	cmp	r3, r2
 801060a:	d201      	bcs.n	8010610 <__hi0bits+0x34>
 801060c:	3002      	adds	r0, #2
 801060e:	009b      	lsls	r3, r3, #2
 8010610:	2b00      	cmp	r3, #0
 8010612:	db03      	blt.n	801061c <__hi0bits+0x40>
 8010614:	3001      	adds	r0, #1
 8010616:	4213      	tst	r3, r2
 8010618:	d100      	bne.n	801061c <__hi0bits+0x40>
 801061a:	2020      	movs	r0, #32
 801061c:	4770      	bx	lr

0801061e <__lo0bits>:
 801061e:	6803      	ldr	r3, [r0, #0]
 8010620:	0001      	movs	r1, r0
 8010622:	2207      	movs	r2, #7
 8010624:	0018      	movs	r0, r3
 8010626:	4010      	ands	r0, r2
 8010628:	4213      	tst	r3, r2
 801062a:	d00d      	beq.n	8010648 <__lo0bits+0x2a>
 801062c:	3a06      	subs	r2, #6
 801062e:	2000      	movs	r0, #0
 8010630:	4213      	tst	r3, r2
 8010632:	d105      	bne.n	8010640 <__lo0bits+0x22>
 8010634:	3002      	adds	r0, #2
 8010636:	4203      	tst	r3, r0
 8010638:	d003      	beq.n	8010642 <__lo0bits+0x24>
 801063a:	40d3      	lsrs	r3, r2
 801063c:	0010      	movs	r0, r2
 801063e:	600b      	str	r3, [r1, #0]
 8010640:	4770      	bx	lr
 8010642:	089b      	lsrs	r3, r3, #2
 8010644:	600b      	str	r3, [r1, #0]
 8010646:	e7fb      	b.n	8010640 <__lo0bits+0x22>
 8010648:	b29a      	uxth	r2, r3
 801064a:	2a00      	cmp	r2, #0
 801064c:	d101      	bne.n	8010652 <__lo0bits+0x34>
 801064e:	2010      	movs	r0, #16
 8010650:	0c1b      	lsrs	r3, r3, #16
 8010652:	b2da      	uxtb	r2, r3
 8010654:	2a00      	cmp	r2, #0
 8010656:	d101      	bne.n	801065c <__lo0bits+0x3e>
 8010658:	3008      	adds	r0, #8
 801065a:	0a1b      	lsrs	r3, r3, #8
 801065c:	071a      	lsls	r2, r3, #28
 801065e:	d101      	bne.n	8010664 <__lo0bits+0x46>
 8010660:	3004      	adds	r0, #4
 8010662:	091b      	lsrs	r3, r3, #4
 8010664:	079a      	lsls	r2, r3, #30
 8010666:	d101      	bne.n	801066c <__lo0bits+0x4e>
 8010668:	3002      	adds	r0, #2
 801066a:	089b      	lsrs	r3, r3, #2
 801066c:	07da      	lsls	r2, r3, #31
 801066e:	d4e9      	bmi.n	8010644 <__lo0bits+0x26>
 8010670:	3001      	adds	r0, #1
 8010672:	085b      	lsrs	r3, r3, #1
 8010674:	d1e6      	bne.n	8010644 <__lo0bits+0x26>
 8010676:	2020      	movs	r0, #32
 8010678:	e7e2      	b.n	8010640 <__lo0bits+0x22>
	...

0801067c <__i2b>:
 801067c:	b510      	push	{r4, lr}
 801067e:	000c      	movs	r4, r1
 8010680:	2101      	movs	r1, #1
 8010682:	f7ff feff 	bl	8010484 <_Balloc>
 8010686:	2800      	cmp	r0, #0
 8010688:	d107      	bne.n	801069a <__i2b+0x1e>
 801068a:	2146      	movs	r1, #70	@ 0x46
 801068c:	4c05      	ldr	r4, [pc, #20]	@ (80106a4 <__i2b+0x28>)
 801068e:	0002      	movs	r2, r0
 8010690:	4b05      	ldr	r3, [pc, #20]	@ (80106a8 <__i2b+0x2c>)
 8010692:	0020      	movs	r0, r4
 8010694:	31ff      	adds	r1, #255	@ 0xff
 8010696:	f000 febd 	bl	8011414 <__assert_func>
 801069a:	2301      	movs	r3, #1
 801069c:	6144      	str	r4, [r0, #20]
 801069e:	6103      	str	r3, [r0, #16]
 80106a0:	bd10      	pop	{r4, pc}
 80106a2:	46c0      	nop			@ (mov r8, r8)
 80106a4:	080126e5 	.word	0x080126e5
 80106a8:	080126d4 	.word	0x080126d4

080106ac <__multiply>:
 80106ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80106ae:	0014      	movs	r4, r2
 80106b0:	690a      	ldr	r2, [r1, #16]
 80106b2:	6923      	ldr	r3, [r4, #16]
 80106b4:	000d      	movs	r5, r1
 80106b6:	b08b      	sub	sp, #44	@ 0x2c
 80106b8:	429a      	cmp	r2, r3
 80106ba:	db02      	blt.n	80106c2 <__multiply+0x16>
 80106bc:	0023      	movs	r3, r4
 80106be:	000c      	movs	r4, r1
 80106c0:	001d      	movs	r5, r3
 80106c2:	6927      	ldr	r7, [r4, #16]
 80106c4:	692e      	ldr	r6, [r5, #16]
 80106c6:	6861      	ldr	r1, [r4, #4]
 80106c8:	19bb      	adds	r3, r7, r6
 80106ca:	9303      	str	r3, [sp, #12]
 80106cc:	68a3      	ldr	r3, [r4, #8]
 80106ce:	19ba      	adds	r2, r7, r6
 80106d0:	4293      	cmp	r3, r2
 80106d2:	da00      	bge.n	80106d6 <__multiply+0x2a>
 80106d4:	3101      	adds	r1, #1
 80106d6:	f7ff fed5 	bl	8010484 <_Balloc>
 80106da:	9002      	str	r0, [sp, #8]
 80106dc:	2800      	cmp	r0, #0
 80106de:	d106      	bne.n	80106ee <__multiply+0x42>
 80106e0:	21b1      	movs	r1, #177	@ 0xb1
 80106e2:	4b49      	ldr	r3, [pc, #292]	@ (8010808 <__multiply+0x15c>)
 80106e4:	4849      	ldr	r0, [pc, #292]	@ (801080c <__multiply+0x160>)
 80106e6:	9a02      	ldr	r2, [sp, #8]
 80106e8:	0049      	lsls	r1, r1, #1
 80106ea:	f000 fe93 	bl	8011414 <__assert_func>
 80106ee:	9b02      	ldr	r3, [sp, #8]
 80106f0:	2200      	movs	r2, #0
 80106f2:	3314      	adds	r3, #20
 80106f4:	469c      	mov	ip, r3
 80106f6:	19bb      	adds	r3, r7, r6
 80106f8:	009b      	lsls	r3, r3, #2
 80106fa:	4463      	add	r3, ip
 80106fc:	9304      	str	r3, [sp, #16]
 80106fe:	4663      	mov	r3, ip
 8010700:	9904      	ldr	r1, [sp, #16]
 8010702:	428b      	cmp	r3, r1
 8010704:	d32a      	bcc.n	801075c <__multiply+0xb0>
 8010706:	0023      	movs	r3, r4
 8010708:	00bf      	lsls	r7, r7, #2
 801070a:	3314      	adds	r3, #20
 801070c:	3514      	adds	r5, #20
 801070e:	9308      	str	r3, [sp, #32]
 8010710:	00b6      	lsls	r6, r6, #2
 8010712:	19db      	adds	r3, r3, r7
 8010714:	9305      	str	r3, [sp, #20]
 8010716:	19ab      	adds	r3, r5, r6
 8010718:	9309      	str	r3, [sp, #36]	@ 0x24
 801071a:	2304      	movs	r3, #4
 801071c:	9306      	str	r3, [sp, #24]
 801071e:	0023      	movs	r3, r4
 8010720:	9a05      	ldr	r2, [sp, #20]
 8010722:	3315      	adds	r3, #21
 8010724:	9501      	str	r5, [sp, #4]
 8010726:	429a      	cmp	r2, r3
 8010728:	d305      	bcc.n	8010736 <__multiply+0x8a>
 801072a:	1b13      	subs	r3, r2, r4
 801072c:	3b15      	subs	r3, #21
 801072e:	089b      	lsrs	r3, r3, #2
 8010730:	3301      	adds	r3, #1
 8010732:	009b      	lsls	r3, r3, #2
 8010734:	9306      	str	r3, [sp, #24]
 8010736:	9b01      	ldr	r3, [sp, #4]
 8010738:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801073a:	4293      	cmp	r3, r2
 801073c:	d310      	bcc.n	8010760 <__multiply+0xb4>
 801073e:	9b03      	ldr	r3, [sp, #12]
 8010740:	2b00      	cmp	r3, #0
 8010742:	dd05      	ble.n	8010750 <__multiply+0xa4>
 8010744:	9b04      	ldr	r3, [sp, #16]
 8010746:	3b04      	subs	r3, #4
 8010748:	9304      	str	r3, [sp, #16]
 801074a:	681b      	ldr	r3, [r3, #0]
 801074c:	2b00      	cmp	r3, #0
 801074e:	d056      	beq.n	80107fe <__multiply+0x152>
 8010750:	9b02      	ldr	r3, [sp, #8]
 8010752:	9a03      	ldr	r2, [sp, #12]
 8010754:	0018      	movs	r0, r3
 8010756:	611a      	str	r2, [r3, #16]
 8010758:	b00b      	add	sp, #44	@ 0x2c
 801075a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801075c:	c304      	stmia	r3!, {r2}
 801075e:	e7cf      	b.n	8010700 <__multiply+0x54>
 8010760:	9b01      	ldr	r3, [sp, #4]
 8010762:	6818      	ldr	r0, [r3, #0]
 8010764:	b280      	uxth	r0, r0
 8010766:	2800      	cmp	r0, #0
 8010768:	d01e      	beq.n	80107a8 <__multiply+0xfc>
 801076a:	4667      	mov	r7, ip
 801076c:	2500      	movs	r5, #0
 801076e:	9e08      	ldr	r6, [sp, #32]
 8010770:	ce02      	ldmia	r6!, {r1}
 8010772:	683b      	ldr	r3, [r7, #0]
 8010774:	9307      	str	r3, [sp, #28]
 8010776:	b28b      	uxth	r3, r1
 8010778:	4343      	muls	r3, r0
 801077a:	001a      	movs	r2, r3
 801077c:	466b      	mov	r3, sp
 801077e:	0c09      	lsrs	r1, r1, #16
 8010780:	8b9b      	ldrh	r3, [r3, #28]
 8010782:	4341      	muls	r1, r0
 8010784:	18d3      	adds	r3, r2, r3
 8010786:	9a07      	ldr	r2, [sp, #28]
 8010788:	195b      	adds	r3, r3, r5
 801078a:	0c12      	lsrs	r2, r2, #16
 801078c:	1889      	adds	r1, r1, r2
 801078e:	0c1a      	lsrs	r2, r3, #16
 8010790:	188a      	adds	r2, r1, r2
 8010792:	b29b      	uxth	r3, r3
 8010794:	0c15      	lsrs	r5, r2, #16
 8010796:	0412      	lsls	r2, r2, #16
 8010798:	431a      	orrs	r2, r3
 801079a:	9b05      	ldr	r3, [sp, #20]
 801079c:	c704      	stmia	r7!, {r2}
 801079e:	42b3      	cmp	r3, r6
 80107a0:	d8e6      	bhi.n	8010770 <__multiply+0xc4>
 80107a2:	4663      	mov	r3, ip
 80107a4:	9a06      	ldr	r2, [sp, #24]
 80107a6:	509d      	str	r5, [r3, r2]
 80107a8:	9b01      	ldr	r3, [sp, #4]
 80107aa:	6818      	ldr	r0, [r3, #0]
 80107ac:	0c00      	lsrs	r0, r0, #16
 80107ae:	d020      	beq.n	80107f2 <__multiply+0x146>
 80107b0:	4663      	mov	r3, ip
 80107b2:	0025      	movs	r5, r4
 80107b4:	4661      	mov	r1, ip
 80107b6:	2700      	movs	r7, #0
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	3514      	adds	r5, #20
 80107bc:	682a      	ldr	r2, [r5, #0]
 80107be:	680e      	ldr	r6, [r1, #0]
 80107c0:	b292      	uxth	r2, r2
 80107c2:	4342      	muls	r2, r0
 80107c4:	0c36      	lsrs	r6, r6, #16
 80107c6:	1992      	adds	r2, r2, r6
 80107c8:	19d2      	adds	r2, r2, r7
 80107ca:	0416      	lsls	r6, r2, #16
 80107cc:	b29b      	uxth	r3, r3
 80107ce:	431e      	orrs	r6, r3
 80107d0:	600e      	str	r6, [r1, #0]
 80107d2:	cd40      	ldmia	r5!, {r6}
 80107d4:	684b      	ldr	r3, [r1, #4]
 80107d6:	0c36      	lsrs	r6, r6, #16
 80107d8:	4346      	muls	r6, r0
 80107da:	b29b      	uxth	r3, r3
 80107dc:	0c12      	lsrs	r2, r2, #16
 80107de:	18f3      	adds	r3, r6, r3
 80107e0:	189b      	adds	r3, r3, r2
 80107e2:	9a05      	ldr	r2, [sp, #20]
 80107e4:	0c1f      	lsrs	r7, r3, #16
 80107e6:	3104      	adds	r1, #4
 80107e8:	42aa      	cmp	r2, r5
 80107ea:	d8e7      	bhi.n	80107bc <__multiply+0x110>
 80107ec:	4662      	mov	r2, ip
 80107ee:	9906      	ldr	r1, [sp, #24]
 80107f0:	5053      	str	r3, [r2, r1]
 80107f2:	9b01      	ldr	r3, [sp, #4]
 80107f4:	3304      	adds	r3, #4
 80107f6:	9301      	str	r3, [sp, #4]
 80107f8:	2304      	movs	r3, #4
 80107fa:	449c      	add	ip, r3
 80107fc:	e79b      	b.n	8010736 <__multiply+0x8a>
 80107fe:	9b03      	ldr	r3, [sp, #12]
 8010800:	3b01      	subs	r3, #1
 8010802:	9303      	str	r3, [sp, #12]
 8010804:	e79b      	b.n	801073e <__multiply+0x92>
 8010806:	46c0      	nop			@ (mov r8, r8)
 8010808:	080126d4 	.word	0x080126d4
 801080c:	080126e5 	.word	0x080126e5

08010810 <__pow5mult>:
 8010810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010812:	2303      	movs	r3, #3
 8010814:	0015      	movs	r5, r2
 8010816:	0007      	movs	r7, r0
 8010818:	000e      	movs	r6, r1
 801081a:	401a      	ands	r2, r3
 801081c:	421d      	tst	r5, r3
 801081e:	d008      	beq.n	8010832 <__pow5mult+0x22>
 8010820:	4925      	ldr	r1, [pc, #148]	@ (80108b8 <__pow5mult+0xa8>)
 8010822:	3a01      	subs	r2, #1
 8010824:	0092      	lsls	r2, r2, #2
 8010826:	5852      	ldr	r2, [r2, r1]
 8010828:	2300      	movs	r3, #0
 801082a:	0031      	movs	r1, r6
 801082c:	f7ff fe92 	bl	8010554 <__multadd>
 8010830:	0006      	movs	r6, r0
 8010832:	10ad      	asrs	r5, r5, #2
 8010834:	d03d      	beq.n	80108b2 <__pow5mult+0xa2>
 8010836:	69fc      	ldr	r4, [r7, #28]
 8010838:	2c00      	cmp	r4, #0
 801083a:	d10f      	bne.n	801085c <__pow5mult+0x4c>
 801083c:	2010      	movs	r0, #16
 801083e:	f7ff fd65 	bl	801030c <malloc>
 8010842:	1e02      	subs	r2, r0, #0
 8010844:	61f8      	str	r0, [r7, #28]
 8010846:	d105      	bne.n	8010854 <__pow5mult+0x44>
 8010848:	21b4      	movs	r1, #180	@ 0xb4
 801084a:	4b1c      	ldr	r3, [pc, #112]	@ (80108bc <__pow5mult+0xac>)
 801084c:	481c      	ldr	r0, [pc, #112]	@ (80108c0 <__pow5mult+0xb0>)
 801084e:	31ff      	adds	r1, #255	@ 0xff
 8010850:	f000 fde0 	bl	8011414 <__assert_func>
 8010854:	6044      	str	r4, [r0, #4]
 8010856:	6084      	str	r4, [r0, #8]
 8010858:	6004      	str	r4, [r0, #0]
 801085a:	60c4      	str	r4, [r0, #12]
 801085c:	69fb      	ldr	r3, [r7, #28]
 801085e:	689c      	ldr	r4, [r3, #8]
 8010860:	9301      	str	r3, [sp, #4]
 8010862:	2c00      	cmp	r4, #0
 8010864:	d108      	bne.n	8010878 <__pow5mult+0x68>
 8010866:	0038      	movs	r0, r7
 8010868:	4916      	ldr	r1, [pc, #88]	@ (80108c4 <__pow5mult+0xb4>)
 801086a:	f7ff ff07 	bl	801067c <__i2b>
 801086e:	9b01      	ldr	r3, [sp, #4]
 8010870:	0004      	movs	r4, r0
 8010872:	6098      	str	r0, [r3, #8]
 8010874:	2300      	movs	r3, #0
 8010876:	6003      	str	r3, [r0, #0]
 8010878:	2301      	movs	r3, #1
 801087a:	421d      	tst	r5, r3
 801087c:	d00a      	beq.n	8010894 <__pow5mult+0x84>
 801087e:	0031      	movs	r1, r6
 8010880:	0022      	movs	r2, r4
 8010882:	0038      	movs	r0, r7
 8010884:	f7ff ff12 	bl	80106ac <__multiply>
 8010888:	0031      	movs	r1, r6
 801088a:	9001      	str	r0, [sp, #4]
 801088c:	0038      	movs	r0, r7
 801088e:	f7ff fe3d 	bl	801050c <_Bfree>
 8010892:	9e01      	ldr	r6, [sp, #4]
 8010894:	106d      	asrs	r5, r5, #1
 8010896:	d00c      	beq.n	80108b2 <__pow5mult+0xa2>
 8010898:	6820      	ldr	r0, [r4, #0]
 801089a:	2800      	cmp	r0, #0
 801089c:	d107      	bne.n	80108ae <__pow5mult+0x9e>
 801089e:	0022      	movs	r2, r4
 80108a0:	0021      	movs	r1, r4
 80108a2:	0038      	movs	r0, r7
 80108a4:	f7ff ff02 	bl	80106ac <__multiply>
 80108a8:	2300      	movs	r3, #0
 80108aa:	6020      	str	r0, [r4, #0]
 80108ac:	6003      	str	r3, [r0, #0]
 80108ae:	0004      	movs	r4, r0
 80108b0:	e7e2      	b.n	8010878 <__pow5mult+0x68>
 80108b2:	0030      	movs	r0, r6
 80108b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80108b6:	46c0      	nop			@ (mov r8, r8)
 80108b8:	08012740 	.word	0x08012740
 80108bc:	08012665 	.word	0x08012665
 80108c0:	080126e5 	.word	0x080126e5
 80108c4:	00000271 	.word	0x00000271

080108c8 <__lshift>:
 80108c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80108ca:	000c      	movs	r4, r1
 80108cc:	0016      	movs	r6, r2
 80108ce:	6923      	ldr	r3, [r4, #16]
 80108d0:	1157      	asrs	r7, r2, #5
 80108d2:	b085      	sub	sp, #20
 80108d4:	18fb      	adds	r3, r7, r3
 80108d6:	9301      	str	r3, [sp, #4]
 80108d8:	3301      	adds	r3, #1
 80108da:	9300      	str	r3, [sp, #0]
 80108dc:	6849      	ldr	r1, [r1, #4]
 80108de:	68a3      	ldr	r3, [r4, #8]
 80108e0:	9002      	str	r0, [sp, #8]
 80108e2:	9a00      	ldr	r2, [sp, #0]
 80108e4:	4293      	cmp	r3, r2
 80108e6:	db10      	blt.n	801090a <__lshift+0x42>
 80108e8:	9802      	ldr	r0, [sp, #8]
 80108ea:	f7ff fdcb 	bl	8010484 <_Balloc>
 80108ee:	2300      	movs	r3, #0
 80108f0:	0001      	movs	r1, r0
 80108f2:	0005      	movs	r5, r0
 80108f4:	001a      	movs	r2, r3
 80108f6:	3114      	adds	r1, #20
 80108f8:	4298      	cmp	r0, r3
 80108fa:	d10c      	bne.n	8010916 <__lshift+0x4e>
 80108fc:	21ef      	movs	r1, #239	@ 0xef
 80108fe:	002a      	movs	r2, r5
 8010900:	4b25      	ldr	r3, [pc, #148]	@ (8010998 <__lshift+0xd0>)
 8010902:	4826      	ldr	r0, [pc, #152]	@ (801099c <__lshift+0xd4>)
 8010904:	0049      	lsls	r1, r1, #1
 8010906:	f000 fd85 	bl	8011414 <__assert_func>
 801090a:	3101      	adds	r1, #1
 801090c:	005b      	lsls	r3, r3, #1
 801090e:	e7e8      	b.n	80108e2 <__lshift+0x1a>
 8010910:	0098      	lsls	r0, r3, #2
 8010912:	500a      	str	r2, [r1, r0]
 8010914:	3301      	adds	r3, #1
 8010916:	42bb      	cmp	r3, r7
 8010918:	dbfa      	blt.n	8010910 <__lshift+0x48>
 801091a:	43fb      	mvns	r3, r7
 801091c:	17db      	asrs	r3, r3, #31
 801091e:	401f      	ands	r7, r3
 8010920:	00bf      	lsls	r7, r7, #2
 8010922:	0023      	movs	r3, r4
 8010924:	201f      	movs	r0, #31
 8010926:	19c9      	adds	r1, r1, r7
 8010928:	0037      	movs	r7, r6
 801092a:	6922      	ldr	r2, [r4, #16]
 801092c:	3314      	adds	r3, #20
 801092e:	0092      	lsls	r2, r2, #2
 8010930:	189a      	adds	r2, r3, r2
 8010932:	4007      	ands	r7, r0
 8010934:	4206      	tst	r6, r0
 8010936:	d029      	beq.n	801098c <__lshift+0xc4>
 8010938:	3001      	adds	r0, #1
 801093a:	1bc0      	subs	r0, r0, r7
 801093c:	9003      	str	r0, [sp, #12]
 801093e:	468c      	mov	ip, r1
 8010940:	2000      	movs	r0, #0
 8010942:	681e      	ldr	r6, [r3, #0]
 8010944:	40be      	lsls	r6, r7
 8010946:	4306      	orrs	r6, r0
 8010948:	4660      	mov	r0, ip
 801094a:	c040      	stmia	r0!, {r6}
 801094c:	4684      	mov	ip, r0
 801094e:	9e03      	ldr	r6, [sp, #12]
 8010950:	cb01      	ldmia	r3!, {r0}
 8010952:	40f0      	lsrs	r0, r6
 8010954:	429a      	cmp	r2, r3
 8010956:	d8f4      	bhi.n	8010942 <__lshift+0x7a>
 8010958:	0026      	movs	r6, r4
 801095a:	3615      	adds	r6, #21
 801095c:	2304      	movs	r3, #4
 801095e:	42b2      	cmp	r2, r6
 8010960:	d304      	bcc.n	801096c <__lshift+0xa4>
 8010962:	1b13      	subs	r3, r2, r4
 8010964:	3b15      	subs	r3, #21
 8010966:	089b      	lsrs	r3, r3, #2
 8010968:	3301      	adds	r3, #1
 801096a:	009b      	lsls	r3, r3, #2
 801096c:	50c8      	str	r0, [r1, r3]
 801096e:	2800      	cmp	r0, #0
 8010970:	d002      	beq.n	8010978 <__lshift+0xb0>
 8010972:	9b01      	ldr	r3, [sp, #4]
 8010974:	3302      	adds	r3, #2
 8010976:	9300      	str	r3, [sp, #0]
 8010978:	9b00      	ldr	r3, [sp, #0]
 801097a:	9802      	ldr	r0, [sp, #8]
 801097c:	3b01      	subs	r3, #1
 801097e:	0021      	movs	r1, r4
 8010980:	612b      	str	r3, [r5, #16]
 8010982:	f7ff fdc3 	bl	801050c <_Bfree>
 8010986:	0028      	movs	r0, r5
 8010988:	b005      	add	sp, #20
 801098a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801098c:	cb01      	ldmia	r3!, {r0}
 801098e:	c101      	stmia	r1!, {r0}
 8010990:	429a      	cmp	r2, r3
 8010992:	d8fb      	bhi.n	801098c <__lshift+0xc4>
 8010994:	e7f0      	b.n	8010978 <__lshift+0xb0>
 8010996:	46c0      	nop			@ (mov r8, r8)
 8010998:	080126d4 	.word	0x080126d4
 801099c:	080126e5 	.word	0x080126e5

080109a0 <__mcmp>:
 80109a0:	b530      	push	{r4, r5, lr}
 80109a2:	690b      	ldr	r3, [r1, #16]
 80109a4:	6904      	ldr	r4, [r0, #16]
 80109a6:	0002      	movs	r2, r0
 80109a8:	1ae0      	subs	r0, r4, r3
 80109aa:	429c      	cmp	r4, r3
 80109ac:	d10f      	bne.n	80109ce <__mcmp+0x2e>
 80109ae:	3214      	adds	r2, #20
 80109b0:	009b      	lsls	r3, r3, #2
 80109b2:	3114      	adds	r1, #20
 80109b4:	0014      	movs	r4, r2
 80109b6:	18c9      	adds	r1, r1, r3
 80109b8:	18d2      	adds	r2, r2, r3
 80109ba:	3a04      	subs	r2, #4
 80109bc:	3904      	subs	r1, #4
 80109be:	6815      	ldr	r5, [r2, #0]
 80109c0:	680b      	ldr	r3, [r1, #0]
 80109c2:	429d      	cmp	r5, r3
 80109c4:	d004      	beq.n	80109d0 <__mcmp+0x30>
 80109c6:	2001      	movs	r0, #1
 80109c8:	429d      	cmp	r5, r3
 80109ca:	d200      	bcs.n	80109ce <__mcmp+0x2e>
 80109cc:	3802      	subs	r0, #2
 80109ce:	bd30      	pop	{r4, r5, pc}
 80109d0:	4294      	cmp	r4, r2
 80109d2:	d3f2      	bcc.n	80109ba <__mcmp+0x1a>
 80109d4:	e7fb      	b.n	80109ce <__mcmp+0x2e>
	...

080109d8 <__mdiff>:
 80109d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80109da:	000c      	movs	r4, r1
 80109dc:	b087      	sub	sp, #28
 80109de:	9000      	str	r0, [sp, #0]
 80109e0:	0011      	movs	r1, r2
 80109e2:	0020      	movs	r0, r4
 80109e4:	0017      	movs	r7, r2
 80109e6:	f7ff ffdb 	bl	80109a0 <__mcmp>
 80109ea:	1e05      	subs	r5, r0, #0
 80109ec:	d110      	bne.n	8010a10 <__mdiff+0x38>
 80109ee:	0001      	movs	r1, r0
 80109f0:	9800      	ldr	r0, [sp, #0]
 80109f2:	f7ff fd47 	bl	8010484 <_Balloc>
 80109f6:	1e02      	subs	r2, r0, #0
 80109f8:	d104      	bne.n	8010a04 <__mdiff+0x2c>
 80109fa:	4b40      	ldr	r3, [pc, #256]	@ (8010afc <__mdiff+0x124>)
 80109fc:	4840      	ldr	r0, [pc, #256]	@ (8010b00 <__mdiff+0x128>)
 80109fe:	4941      	ldr	r1, [pc, #260]	@ (8010b04 <__mdiff+0x12c>)
 8010a00:	f000 fd08 	bl	8011414 <__assert_func>
 8010a04:	2301      	movs	r3, #1
 8010a06:	6145      	str	r5, [r0, #20]
 8010a08:	6103      	str	r3, [r0, #16]
 8010a0a:	0010      	movs	r0, r2
 8010a0c:	b007      	add	sp, #28
 8010a0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010a10:	2600      	movs	r6, #0
 8010a12:	42b0      	cmp	r0, r6
 8010a14:	da03      	bge.n	8010a1e <__mdiff+0x46>
 8010a16:	0023      	movs	r3, r4
 8010a18:	003c      	movs	r4, r7
 8010a1a:	001f      	movs	r7, r3
 8010a1c:	3601      	adds	r6, #1
 8010a1e:	6861      	ldr	r1, [r4, #4]
 8010a20:	9800      	ldr	r0, [sp, #0]
 8010a22:	f7ff fd2f 	bl	8010484 <_Balloc>
 8010a26:	1e02      	subs	r2, r0, #0
 8010a28:	d103      	bne.n	8010a32 <__mdiff+0x5a>
 8010a2a:	4b34      	ldr	r3, [pc, #208]	@ (8010afc <__mdiff+0x124>)
 8010a2c:	4834      	ldr	r0, [pc, #208]	@ (8010b00 <__mdiff+0x128>)
 8010a2e:	4936      	ldr	r1, [pc, #216]	@ (8010b08 <__mdiff+0x130>)
 8010a30:	e7e6      	b.n	8010a00 <__mdiff+0x28>
 8010a32:	6923      	ldr	r3, [r4, #16]
 8010a34:	3414      	adds	r4, #20
 8010a36:	9300      	str	r3, [sp, #0]
 8010a38:	009b      	lsls	r3, r3, #2
 8010a3a:	18e3      	adds	r3, r4, r3
 8010a3c:	0021      	movs	r1, r4
 8010a3e:	9401      	str	r4, [sp, #4]
 8010a40:	003c      	movs	r4, r7
 8010a42:	9302      	str	r3, [sp, #8]
 8010a44:	693b      	ldr	r3, [r7, #16]
 8010a46:	3414      	adds	r4, #20
 8010a48:	009b      	lsls	r3, r3, #2
 8010a4a:	18e3      	adds	r3, r4, r3
 8010a4c:	9303      	str	r3, [sp, #12]
 8010a4e:	0003      	movs	r3, r0
 8010a50:	60c6      	str	r6, [r0, #12]
 8010a52:	468c      	mov	ip, r1
 8010a54:	2000      	movs	r0, #0
 8010a56:	3314      	adds	r3, #20
 8010a58:	9304      	str	r3, [sp, #16]
 8010a5a:	9305      	str	r3, [sp, #20]
 8010a5c:	4663      	mov	r3, ip
 8010a5e:	cb20      	ldmia	r3!, {r5}
 8010a60:	b2a9      	uxth	r1, r5
 8010a62:	000e      	movs	r6, r1
 8010a64:	469c      	mov	ip, r3
 8010a66:	cc08      	ldmia	r4!, {r3}
 8010a68:	0c2d      	lsrs	r5, r5, #16
 8010a6a:	b299      	uxth	r1, r3
 8010a6c:	1a71      	subs	r1, r6, r1
 8010a6e:	1809      	adds	r1, r1, r0
 8010a70:	0c1b      	lsrs	r3, r3, #16
 8010a72:	1408      	asrs	r0, r1, #16
 8010a74:	1aeb      	subs	r3, r5, r3
 8010a76:	181b      	adds	r3, r3, r0
 8010a78:	1418      	asrs	r0, r3, #16
 8010a7a:	b289      	uxth	r1, r1
 8010a7c:	041b      	lsls	r3, r3, #16
 8010a7e:	4319      	orrs	r1, r3
 8010a80:	9b05      	ldr	r3, [sp, #20]
 8010a82:	c302      	stmia	r3!, {r1}
 8010a84:	9305      	str	r3, [sp, #20]
 8010a86:	9b03      	ldr	r3, [sp, #12]
 8010a88:	42a3      	cmp	r3, r4
 8010a8a:	d8e7      	bhi.n	8010a5c <__mdiff+0x84>
 8010a8c:	0039      	movs	r1, r7
 8010a8e:	9c03      	ldr	r4, [sp, #12]
 8010a90:	3115      	adds	r1, #21
 8010a92:	2304      	movs	r3, #4
 8010a94:	428c      	cmp	r4, r1
 8010a96:	d304      	bcc.n	8010aa2 <__mdiff+0xca>
 8010a98:	1be3      	subs	r3, r4, r7
 8010a9a:	3b15      	subs	r3, #21
 8010a9c:	089b      	lsrs	r3, r3, #2
 8010a9e:	3301      	adds	r3, #1
 8010aa0:	009b      	lsls	r3, r3, #2
 8010aa2:	9901      	ldr	r1, [sp, #4]
 8010aa4:	18cd      	adds	r5, r1, r3
 8010aa6:	9904      	ldr	r1, [sp, #16]
 8010aa8:	002e      	movs	r6, r5
 8010aaa:	18cb      	adds	r3, r1, r3
 8010aac:	001f      	movs	r7, r3
 8010aae:	9902      	ldr	r1, [sp, #8]
 8010ab0:	428e      	cmp	r6, r1
 8010ab2:	d311      	bcc.n	8010ad8 <__mdiff+0x100>
 8010ab4:	9c02      	ldr	r4, [sp, #8]
 8010ab6:	1ee9      	subs	r1, r5, #3
 8010ab8:	2000      	movs	r0, #0
 8010aba:	428c      	cmp	r4, r1
 8010abc:	d304      	bcc.n	8010ac8 <__mdiff+0xf0>
 8010abe:	0021      	movs	r1, r4
 8010ac0:	3103      	adds	r1, #3
 8010ac2:	1b49      	subs	r1, r1, r5
 8010ac4:	0889      	lsrs	r1, r1, #2
 8010ac6:	0088      	lsls	r0, r1, #2
 8010ac8:	181b      	adds	r3, r3, r0
 8010aca:	3b04      	subs	r3, #4
 8010acc:	6819      	ldr	r1, [r3, #0]
 8010ace:	2900      	cmp	r1, #0
 8010ad0:	d010      	beq.n	8010af4 <__mdiff+0x11c>
 8010ad2:	9b00      	ldr	r3, [sp, #0]
 8010ad4:	6113      	str	r3, [r2, #16]
 8010ad6:	e798      	b.n	8010a0a <__mdiff+0x32>
 8010ad8:	4684      	mov	ip, r0
 8010ada:	ce02      	ldmia	r6!, {r1}
 8010adc:	b288      	uxth	r0, r1
 8010ade:	4460      	add	r0, ip
 8010ae0:	1400      	asrs	r0, r0, #16
 8010ae2:	0c0c      	lsrs	r4, r1, #16
 8010ae4:	1904      	adds	r4, r0, r4
 8010ae6:	4461      	add	r1, ip
 8010ae8:	1420      	asrs	r0, r4, #16
 8010aea:	b289      	uxth	r1, r1
 8010aec:	0424      	lsls	r4, r4, #16
 8010aee:	4321      	orrs	r1, r4
 8010af0:	c702      	stmia	r7!, {r1}
 8010af2:	e7dc      	b.n	8010aae <__mdiff+0xd6>
 8010af4:	9900      	ldr	r1, [sp, #0]
 8010af6:	3901      	subs	r1, #1
 8010af8:	9100      	str	r1, [sp, #0]
 8010afa:	e7e6      	b.n	8010aca <__mdiff+0xf2>
 8010afc:	080126d4 	.word	0x080126d4
 8010b00:	080126e5 	.word	0x080126e5
 8010b04:	00000237 	.word	0x00000237
 8010b08:	00000245 	.word	0x00000245

08010b0c <__d2b>:
 8010b0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010b0e:	2101      	movs	r1, #1
 8010b10:	0016      	movs	r6, r2
 8010b12:	001f      	movs	r7, r3
 8010b14:	f7ff fcb6 	bl	8010484 <_Balloc>
 8010b18:	1e04      	subs	r4, r0, #0
 8010b1a:	d105      	bne.n	8010b28 <__d2b+0x1c>
 8010b1c:	0022      	movs	r2, r4
 8010b1e:	4b25      	ldr	r3, [pc, #148]	@ (8010bb4 <__d2b+0xa8>)
 8010b20:	4825      	ldr	r0, [pc, #148]	@ (8010bb8 <__d2b+0xac>)
 8010b22:	4926      	ldr	r1, [pc, #152]	@ (8010bbc <__d2b+0xb0>)
 8010b24:	f000 fc76 	bl	8011414 <__assert_func>
 8010b28:	033b      	lsls	r3, r7, #12
 8010b2a:	007d      	lsls	r5, r7, #1
 8010b2c:	0b1b      	lsrs	r3, r3, #12
 8010b2e:	0d6d      	lsrs	r5, r5, #21
 8010b30:	d002      	beq.n	8010b38 <__d2b+0x2c>
 8010b32:	2280      	movs	r2, #128	@ 0x80
 8010b34:	0352      	lsls	r2, r2, #13
 8010b36:	4313      	orrs	r3, r2
 8010b38:	9301      	str	r3, [sp, #4]
 8010b3a:	2e00      	cmp	r6, #0
 8010b3c:	d025      	beq.n	8010b8a <__d2b+0x7e>
 8010b3e:	4668      	mov	r0, sp
 8010b40:	9600      	str	r6, [sp, #0]
 8010b42:	f7ff fd6c 	bl	801061e <__lo0bits>
 8010b46:	9b01      	ldr	r3, [sp, #4]
 8010b48:	9900      	ldr	r1, [sp, #0]
 8010b4a:	2800      	cmp	r0, #0
 8010b4c:	d01b      	beq.n	8010b86 <__d2b+0x7a>
 8010b4e:	2220      	movs	r2, #32
 8010b50:	001e      	movs	r6, r3
 8010b52:	1a12      	subs	r2, r2, r0
 8010b54:	4096      	lsls	r6, r2
 8010b56:	0032      	movs	r2, r6
 8010b58:	40c3      	lsrs	r3, r0
 8010b5a:	430a      	orrs	r2, r1
 8010b5c:	6162      	str	r2, [r4, #20]
 8010b5e:	9301      	str	r3, [sp, #4]
 8010b60:	9e01      	ldr	r6, [sp, #4]
 8010b62:	61a6      	str	r6, [r4, #24]
 8010b64:	1e73      	subs	r3, r6, #1
 8010b66:	419e      	sbcs	r6, r3
 8010b68:	3601      	adds	r6, #1
 8010b6a:	6126      	str	r6, [r4, #16]
 8010b6c:	2d00      	cmp	r5, #0
 8010b6e:	d014      	beq.n	8010b9a <__d2b+0x8e>
 8010b70:	2635      	movs	r6, #53	@ 0x35
 8010b72:	4b13      	ldr	r3, [pc, #76]	@ (8010bc0 <__d2b+0xb4>)
 8010b74:	18ed      	adds	r5, r5, r3
 8010b76:	9b08      	ldr	r3, [sp, #32]
 8010b78:	182d      	adds	r5, r5, r0
 8010b7a:	601d      	str	r5, [r3, #0]
 8010b7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b7e:	1a36      	subs	r6, r6, r0
 8010b80:	601e      	str	r6, [r3, #0]
 8010b82:	0020      	movs	r0, r4
 8010b84:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010b86:	6161      	str	r1, [r4, #20]
 8010b88:	e7ea      	b.n	8010b60 <__d2b+0x54>
 8010b8a:	a801      	add	r0, sp, #4
 8010b8c:	f7ff fd47 	bl	801061e <__lo0bits>
 8010b90:	9b01      	ldr	r3, [sp, #4]
 8010b92:	2601      	movs	r6, #1
 8010b94:	6163      	str	r3, [r4, #20]
 8010b96:	3020      	adds	r0, #32
 8010b98:	e7e7      	b.n	8010b6a <__d2b+0x5e>
 8010b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8010bc4 <__d2b+0xb8>)
 8010b9c:	18c0      	adds	r0, r0, r3
 8010b9e:	9b08      	ldr	r3, [sp, #32]
 8010ba0:	6018      	str	r0, [r3, #0]
 8010ba2:	4b09      	ldr	r3, [pc, #36]	@ (8010bc8 <__d2b+0xbc>)
 8010ba4:	18f3      	adds	r3, r6, r3
 8010ba6:	009b      	lsls	r3, r3, #2
 8010ba8:	18e3      	adds	r3, r4, r3
 8010baa:	6958      	ldr	r0, [r3, #20]
 8010bac:	f7ff fd16 	bl	80105dc <__hi0bits>
 8010bb0:	0176      	lsls	r6, r6, #5
 8010bb2:	e7e3      	b.n	8010b7c <__d2b+0x70>
 8010bb4:	080126d4 	.word	0x080126d4
 8010bb8:	080126e5 	.word	0x080126e5
 8010bbc:	0000030f 	.word	0x0000030f
 8010bc0:	fffffbcd 	.word	0xfffffbcd
 8010bc4:	fffffbce 	.word	0xfffffbce
 8010bc8:	3fffffff 	.word	0x3fffffff

08010bcc <__ssputs_r>:
 8010bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010bce:	688e      	ldr	r6, [r1, #8]
 8010bd0:	b085      	sub	sp, #20
 8010bd2:	001f      	movs	r7, r3
 8010bd4:	000c      	movs	r4, r1
 8010bd6:	680b      	ldr	r3, [r1, #0]
 8010bd8:	9002      	str	r0, [sp, #8]
 8010bda:	9203      	str	r2, [sp, #12]
 8010bdc:	42be      	cmp	r6, r7
 8010bde:	d830      	bhi.n	8010c42 <__ssputs_r+0x76>
 8010be0:	210c      	movs	r1, #12
 8010be2:	5e62      	ldrsh	r2, [r4, r1]
 8010be4:	2190      	movs	r1, #144	@ 0x90
 8010be6:	00c9      	lsls	r1, r1, #3
 8010be8:	420a      	tst	r2, r1
 8010bea:	d028      	beq.n	8010c3e <__ssputs_r+0x72>
 8010bec:	2003      	movs	r0, #3
 8010bee:	6921      	ldr	r1, [r4, #16]
 8010bf0:	1a5b      	subs	r3, r3, r1
 8010bf2:	9301      	str	r3, [sp, #4]
 8010bf4:	6963      	ldr	r3, [r4, #20]
 8010bf6:	4343      	muls	r3, r0
 8010bf8:	9801      	ldr	r0, [sp, #4]
 8010bfa:	0fdd      	lsrs	r5, r3, #31
 8010bfc:	18ed      	adds	r5, r5, r3
 8010bfe:	1c7b      	adds	r3, r7, #1
 8010c00:	181b      	adds	r3, r3, r0
 8010c02:	106d      	asrs	r5, r5, #1
 8010c04:	42ab      	cmp	r3, r5
 8010c06:	d900      	bls.n	8010c0a <__ssputs_r+0x3e>
 8010c08:	001d      	movs	r5, r3
 8010c0a:	0552      	lsls	r2, r2, #21
 8010c0c:	d528      	bpl.n	8010c60 <__ssputs_r+0x94>
 8010c0e:	0029      	movs	r1, r5
 8010c10:	9802      	ldr	r0, [sp, #8]
 8010c12:	f7ff fba7 	bl	8010364 <_malloc_r>
 8010c16:	1e06      	subs	r6, r0, #0
 8010c18:	d02c      	beq.n	8010c74 <__ssputs_r+0xa8>
 8010c1a:	9a01      	ldr	r2, [sp, #4]
 8010c1c:	6921      	ldr	r1, [r4, #16]
 8010c1e:	f000 fbef 	bl	8011400 <memcpy>
 8010c22:	89a2      	ldrh	r2, [r4, #12]
 8010c24:	4b18      	ldr	r3, [pc, #96]	@ (8010c88 <__ssputs_r+0xbc>)
 8010c26:	401a      	ands	r2, r3
 8010c28:	2380      	movs	r3, #128	@ 0x80
 8010c2a:	4313      	orrs	r3, r2
 8010c2c:	81a3      	strh	r3, [r4, #12]
 8010c2e:	9b01      	ldr	r3, [sp, #4]
 8010c30:	6126      	str	r6, [r4, #16]
 8010c32:	18f6      	adds	r6, r6, r3
 8010c34:	6026      	str	r6, [r4, #0]
 8010c36:	003e      	movs	r6, r7
 8010c38:	6165      	str	r5, [r4, #20]
 8010c3a:	1aed      	subs	r5, r5, r3
 8010c3c:	60a5      	str	r5, [r4, #8]
 8010c3e:	42be      	cmp	r6, r7
 8010c40:	d900      	bls.n	8010c44 <__ssputs_r+0x78>
 8010c42:	003e      	movs	r6, r7
 8010c44:	0032      	movs	r2, r6
 8010c46:	9903      	ldr	r1, [sp, #12]
 8010c48:	6820      	ldr	r0, [r4, #0]
 8010c4a:	f000 fbb3 	bl	80113b4 <memmove>
 8010c4e:	2000      	movs	r0, #0
 8010c50:	68a3      	ldr	r3, [r4, #8]
 8010c52:	1b9b      	subs	r3, r3, r6
 8010c54:	60a3      	str	r3, [r4, #8]
 8010c56:	6823      	ldr	r3, [r4, #0]
 8010c58:	199b      	adds	r3, r3, r6
 8010c5a:	6023      	str	r3, [r4, #0]
 8010c5c:	b005      	add	sp, #20
 8010c5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c60:	002a      	movs	r2, r5
 8010c62:	9802      	ldr	r0, [sp, #8]
 8010c64:	f000 fc33 	bl	80114ce <_realloc_r>
 8010c68:	1e06      	subs	r6, r0, #0
 8010c6a:	d1e0      	bne.n	8010c2e <__ssputs_r+0x62>
 8010c6c:	6921      	ldr	r1, [r4, #16]
 8010c6e:	9802      	ldr	r0, [sp, #8]
 8010c70:	f7ff fb02 	bl	8010278 <_free_r>
 8010c74:	230c      	movs	r3, #12
 8010c76:	2001      	movs	r0, #1
 8010c78:	9a02      	ldr	r2, [sp, #8]
 8010c7a:	4240      	negs	r0, r0
 8010c7c:	6013      	str	r3, [r2, #0]
 8010c7e:	89a2      	ldrh	r2, [r4, #12]
 8010c80:	3334      	adds	r3, #52	@ 0x34
 8010c82:	4313      	orrs	r3, r2
 8010c84:	81a3      	strh	r3, [r4, #12]
 8010c86:	e7e9      	b.n	8010c5c <__ssputs_r+0x90>
 8010c88:	fffffb7f 	.word	0xfffffb7f

08010c8c <_svfiprintf_r>:
 8010c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c8e:	b0a1      	sub	sp, #132	@ 0x84
 8010c90:	9003      	str	r0, [sp, #12]
 8010c92:	001d      	movs	r5, r3
 8010c94:	898b      	ldrh	r3, [r1, #12]
 8010c96:	000f      	movs	r7, r1
 8010c98:	0016      	movs	r6, r2
 8010c9a:	061b      	lsls	r3, r3, #24
 8010c9c:	d511      	bpl.n	8010cc2 <_svfiprintf_r+0x36>
 8010c9e:	690b      	ldr	r3, [r1, #16]
 8010ca0:	2b00      	cmp	r3, #0
 8010ca2:	d10e      	bne.n	8010cc2 <_svfiprintf_r+0x36>
 8010ca4:	2140      	movs	r1, #64	@ 0x40
 8010ca6:	f7ff fb5d 	bl	8010364 <_malloc_r>
 8010caa:	6038      	str	r0, [r7, #0]
 8010cac:	6138      	str	r0, [r7, #16]
 8010cae:	2800      	cmp	r0, #0
 8010cb0:	d105      	bne.n	8010cbe <_svfiprintf_r+0x32>
 8010cb2:	230c      	movs	r3, #12
 8010cb4:	9a03      	ldr	r2, [sp, #12]
 8010cb6:	6013      	str	r3, [r2, #0]
 8010cb8:	2001      	movs	r0, #1
 8010cba:	4240      	negs	r0, r0
 8010cbc:	e0cf      	b.n	8010e5e <_svfiprintf_r+0x1d2>
 8010cbe:	2340      	movs	r3, #64	@ 0x40
 8010cc0:	617b      	str	r3, [r7, #20]
 8010cc2:	2300      	movs	r3, #0
 8010cc4:	ac08      	add	r4, sp, #32
 8010cc6:	6163      	str	r3, [r4, #20]
 8010cc8:	3320      	adds	r3, #32
 8010cca:	7663      	strb	r3, [r4, #25]
 8010ccc:	3310      	adds	r3, #16
 8010cce:	76a3      	strb	r3, [r4, #26]
 8010cd0:	9507      	str	r5, [sp, #28]
 8010cd2:	0035      	movs	r5, r6
 8010cd4:	782b      	ldrb	r3, [r5, #0]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d001      	beq.n	8010cde <_svfiprintf_r+0x52>
 8010cda:	2b25      	cmp	r3, #37	@ 0x25
 8010cdc:	d148      	bne.n	8010d70 <_svfiprintf_r+0xe4>
 8010cde:	1bab      	subs	r3, r5, r6
 8010ce0:	9305      	str	r3, [sp, #20]
 8010ce2:	42b5      	cmp	r5, r6
 8010ce4:	d00b      	beq.n	8010cfe <_svfiprintf_r+0x72>
 8010ce6:	0032      	movs	r2, r6
 8010ce8:	0039      	movs	r1, r7
 8010cea:	9803      	ldr	r0, [sp, #12]
 8010cec:	f7ff ff6e 	bl	8010bcc <__ssputs_r>
 8010cf0:	3001      	adds	r0, #1
 8010cf2:	d100      	bne.n	8010cf6 <_svfiprintf_r+0x6a>
 8010cf4:	e0ae      	b.n	8010e54 <_svfiprintf_r+0x1c8>
 8010cf6:	6963      	ldr	r3, [r4, #20]
 8010cf8:	9a05      	ldr	r2, [sp, #20]
 8010cfa:	189b      	adds	r3, r3, r2
 8010cfc:	6163      	str	r3, [r4, #20]
 8010cfe:	782b      	ldrb	r3, [r5, #0]
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d100      	bne.n	8010d06 <_svfiprintf_r+0x7a>
 8010d04:	e0a6      	b.n	8010e54 <_svfiprintf_r+0x1c8>
 8010d06:	2201      	movs	r2, #1
 8010d08:	2300      	movs	r3, #0
 8010d0a:	4252      	negs	r2, r2
 8010d0c:	6062      	str	r2, [r4, #4]
 8010d0e:	a904      	add	r1, sp, #16
 8010d10:	3254      	adds	r2, #84	@ 0x54
 8010d12:	1852      	adds	r2, r2, r1
 8010d14:	1c6e      	adds	r6, r5, #1
 8010d16:	6023      	str	r3, [r4, #0]
 8010d18:	60e3      	str	r3, [r4, #12]
 8010d1a:	60a3      	str	r3, [r4, #8]
 8010d1c:	7013      	strb	r3, [r2, #0]
 8010d1e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010d20:	4b54      	ldr	r3, [pc, #336]	@ (8010e74 <_svfiprintf_r+0x1e8>)
 8010d22:	2205      	movs	r2, #5
 8010d24:	0018      	movs	r0, r3
 8010d26:	7831      	ldrb	r1, [r6, #0]
 8010d28:	9305      	str	r3, [sp, #20]
 8010d2a:	f7fe fc18 	bl	800f55e <memchr>
 8010d2e:	1c75      	adds	r5, r6, #1
 8010d30:	2800      	cmp	r0, #0
 8010d32:	d11f      	bne.n	8010d74 <_svfiprintf_r+0xe8>
 8010d34:	6822      	ldr	r2, [r4, #0]
 8010d36:	06d3      	lsls	r3, r2, #27
 8010d38:	d504      	bpl.n	8010d44 <_svfiprintf_r+0xb8>
 8010d3a:	2353      	movs	r3, #83	@ 0x53
 8010d3c:	a904      	add	r1, sp, #16
 8010d3e:	185b      	adds	r3, r3, r1
 8010d40:	2120      	movs	r1, #32
 8010d42:	7019      	strb	r1, [r3, #0]
 8010d44:	0713      	lsls	r3, r2, #28
 8010d46:	d504      	bpl.n	8010d52 <_svfiprintf_r+0xc6>
 8010d48:	2353      	movs	r3, #83	@ 0x53
 8010d4a:	a904      	add	r1, sp, #16
 8010d4c:	185b      	adds	r3, r3, r1
 8010d4e:	212b      	movs	r1, #43	@ 0x2b
 8010d50:	7019      	strb	r1, [r3, #0]
 8010d52:	7833      	ldrb	r3, [r6, #0]
 8010d54:	2b2a      	cmp	r3, #42	@ 0x2a
 8010d56:	d016      	beq.n	8010d86 <_svfiprintf_r+0xfa>
 8010d58:	0035      	movs	r5, r6
 8010d5a:	2100      	movs	r1, #0
 8010d5c:	200a      	movs	r0, #10
 8010d5e:	68e3      	ldr	r3, [r4, #12]
 8010d60:	782a      	ldrb	r2, [r5, #0]
 8010d62:	1c6e      	adds	r6, r5, #1
 8010d64:	3a30      	subs	r2, #48	@ 0x30
 8010d66:	2a09      	cmp	r2, #9
 8010d68:	d950      	bls.n	8010e0c <_svfiprintf_r+0x180>
 8010d6a:	2900      	cmp	r1, #0
 8010d6c:	d111      	bne.n	8010d92 <_svfiprintf_r+0x106>
 8010d6e:	e017      	b.n	8010da0 <_svfiprintf_r+0x114>
 8010d70:	3501      	adds	r5, #1
 8010d72:	e7af      	b.n	8010cd4 <_svfiprintf_r+0x48>
 8010d74:	9b05      	ldr	r3, [sp, #20]
 8010d76:	6822      	ldr	r2, [r4, #0]
 8010d78:	1ac0      	subs	r0, r0, r3
 8010d7a:	2301      	movs	r3, #1
 8010d7c:	4083      	lsls	r3, r0
 8010d7e:	4313      	orrs	r3, r2
 8010d80:	002e      	movs	r6, r5
 8010d82:	6023      	str	r3, [r4, #0]
 8010d84:	e7cc      	b.n	8010d20 <_svfiprintf_r+0x94>
 8010d86:	9b07      	ldr	r3, [sp, #28]
 8010d88:	1d19      	adds	r1, r3, #4
 8010d8a:	681b      	ldr	r3, [r3, #0]
 8010d8c:	9107      	str	r1, [sp, #28]
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	db01      	blt.n	8010d96 <_svfiprintf_r+0x10a>
 8010d92:	930b      	str	r3, [sp, #44]	@ 0x2c
 8010d94:	e004      	b.n	8010da0 <_svfiprintf_r+0x114>
 8010d96:	425b      	negs	r3, r3
 8010d98:	60e3      	str	r3, [r4, #12]
 8010d9a:	2302      	movs	r3, #2
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	6023      	str	r3, [r4, #0]
 8010da0:	782b      	ldrb	r3, [r5, #0]
 8010da2:	2b2e      	cmp	r3, #46	@ 0x2e
 8010da4:	d10c      	bne.n	8010dc0 <_svfiprintf_r+0x134>
 8010da6:	786b      	ldrb	r3, [r5, #1]
 8010da8:	2b2a      	cmp	r3, #42	@ 0x2a
 8010daa:	d134      	bne.n	8010e16 <_svfiprintf_r+0x18a>
 8010dac:	9b07      	ldr	r3, [sp, #28]
 8010dae:	3502      	adds	r5, #2
 8010db0:	1d1a      	adds	r2, r3, #4
 8010db2:	681b      	ldr	r3, [r3, #0]
 8010db4:	9207      	str	r2, [sp, #28]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	da01      	bge.n	8010dbe <_svfiprintf_r+0x132>
 8010dba:	2301      	movs	r3, #1
 8010dbc:	425b      	negs	r3, r3
 8010dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8010dc0:	4e2d      	ldr	r6, [pc, #180]	@ (8010e78 <_svfiprintf_r+0x1ec>)
 8010dc2:	2203      	movs	r2, #3
 8010dc4:	0030      	movs	r0, r6
 8010dc6:	7829      	ldrb	r1, [r5, #0]
 8010dc8:	f7fe fbc9 	bl	800f55e <memchr>
 8010dcc:	2800      	cmp	r0, #0
 8010dce:	d006      	beq.n	8010dde <_svfiprintf_r+0x152>
 8010dd0:	2340      	movs	r3, #64	@ 0x40
 8010dd2:	1b80      	subs	r0, r0, r6
 8010dd4:	4083      	lsls	r3, r0
 8010dd6:	6822      	ldr	r2, [r4, #0]
 8010dd8:	3501      	adds	r5, #1
 8010dda:	4313      	orrs	r3, r2
 8010ddc:	6023      	str	r3, [r4, #0]
 8010dde:	7829      	ldrb	r1, [r5, #0]
 8010de0:	2206      	movs	r2, #6
 8010de2:	4826      	ldr	r0, [pc, #152]	@ (8010e7c <_svfiprintf_r+0x1f0>)
 8010de4:	1c6e      	adds	r6, r5, #1
 8010de6:	7621      	strb	r1, [r4, #24]
 8010de8:	f7fe fbb9 	bl	800f55e <memchr>
 8010dec:	2800      	cmp	r0, #0
 8010dee:	d038      	beq.n	8010e62 <_svfiprintf_r+0x1d6>
 8010df0:	4b23      	ldr	r3, [pc, #140]	@ (8010e80 <_svfiprintf_r+0x1f4>)
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d122      	bne.n	8010e3c <_svfiprintf_r+0x1b0>
 8010df6:	2207      	movs	r2, #7
 8010df8:	9b07      	ldr	r3, [sp, #28]
 8010dfa:	3307      	adds	r3, #7
 8010dfc:	4393      	bics	r3, r2
 8010dfe:	3308      	adds	r3, #8
 8010e00:	9307      	str	r3, [sp, #28]
 8010e02:	6963      	ldr	r3, [r4, #20]
 8010e04:	9a04      	ldr	r2, [sp, #16]
 8010e06:	189b      	adds	r3, r3, r2
 8010e08:	6163      	str	r3, [r4, #20]
 8010e0a:	e762      	b.n	8010cd2 <_svfiprintf_r+0x46>
 8010e0c:	4343      	muls	r3, r0
 8010e0e:	0035      	movs	r5, r6
 8010e10:	2101      	movs	r1, #1
 8010e12:	189b      	adds	r3, r3, r2
 8010e14:	e7a4      	b.n	8010d60 <_svfiprintf_r+0xd4>
 8010e16:	2300      	movs	r3, #0
 8010e18:	200a      	movs	r0, #10
 8010e1a:	0019      	movs	r1, r3
 8010e1c:	3501      	adds	r5, #1
 8010e1e:	6063      	str	r3, [r4, #4]
 8010e20:	782a      	ldrb	r2, [r5, #0]
 8010e22:	1c6e      	adds	r6, r5, #1
 8010e24:	3a30      	subs	r2, #48	@ 0x30
 8010e26:	2a09      	cmp	r2, #9
 8010e28:	d903      	bls.n	8010e32 <_svfiprintf_r+0x1a6>
 8010e2a:	2b00      	cmp	r3, #0
 8010e2c:	d0c8      	beq.n	8010dc0 <_svfiprintf_r+0x134>
 8010e2e:	9109      	str	r1, [sp, #36]	@ 0x24
 8010e30:	e7c6      	b.n	8010dc0 <_svfiprintf_r+0x134>
 8010e32:	4341      	muls	r1, r0
 8010e34:	0035      	movs	r5, r6
 8010e36:	2301      	movs	r3, #1
 8010e38:	1889      	adds	r1, r1, r2
 8010e3a:	e7f1      	b.n	8010e20 <_svfiprintf_r+0x194>
 8010e3c:	aa07      	add	r2, sp, #28
 8010e3e:	9200      	str	r2, [sp, #0]
 8010e40:	0021      	movs	r1, r4
 8010e42:	003a      	movs	r2, r7
 8010e44:	4b0f      	ldr	r3, [pc, #60]	@ (8010e84 <_svfiprintf_r+0x1f8>)
 8010e46:	9803      	ldr	r0, [sp, #12]
 8010e48:	f7fd fda4 	bl	800e994 <_printf_float>
 8010e4c:	9004      	str	r0, [sp, #16]
 8010e4e:	9b04      	ldr	r3, [sp, #16]
 8010e50:	3301      	adds	r3, #1
 8010e52:	d1d6      	bne.n	8010e02 <_svfiprintf_r+0x176>
 8010e54:	89bb      	ldrh	r3, [r7, #12]
 8010e56:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8010e58:	065b      	lsls	r3, r3, #25
 8010e5a:	d500      	bpl.n	8010e5e <_svfiprintf_r+0x1d2>
 8010e5c:	e72c      	b.n	8010cb8 <_svfiprintf_r+0x2c>
 8010e5e:	b021      	add	sp, #132	@ 0x84
 8010e60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010e62:	aa07      	add	r2, sp, #28
 8010e64:	9200      	str	r2, [sp, #0]
 8010e66:	0021      	movs	r1, r4
 8010e68:	003a      	movs	r2, r7
 8010e6a:	4b06      	ldr	r3, [pc, #24]	@ (8010e84 <_svfiprintf_r+0x1f8>)
 8010e6c:	9803      	ldr	r0, [sp, #12]
 8010e6e:	f7fe f83f 	bl	800eef0 <_printf_i>
 8010e72:	e7eb      	b.n	8010e4c <_svfiprintf_r+0x1c0>
 8010e74:	08012840 	.word	0x08012840
 8010e78:	08012846 	.word	0x08012846
 8010e7c:	0801284a 	.word	0x0801284a
 8010e80:	0800e995 	.word	0x0800e995
 8010e84:	08010bcd 	.word	0x08010bcd

08010e88 <__sfputc_r>:
 8010e88:	6893      	ldr	r3, [r2, #8]
 8010e8a:	b510      	push	{r4, lr}
 8010e8c:	3b01      	subs	r3, #1
 8010e8e:	6093      	str	r3, [r2, #8]
 8010e90:	2b00      	cmp	r3, #0
 8010e92:	da04      	bge.n	8010e9e <__sfputc_r+0x16>
 8010e94:	6994      	ldr	r4, [r2, #24]
 8010e96:	42a3      	cmp	r3, r4
 8010e98:	db07      	blt.n	8010eaa <__sfputc_r+0x22>
 8010e9a:	290a      	cmp	r1, #10
 8010e9c:	d005      	beq.n	8010eaa <__sfputc_r+0x22>
 8010e9e:	6813      	ldr	r3, [r2, #0]
 8010ea0:	1c58      	adds	r0, r3, #1
 8010ea2:	6010      	str	r0, [r2, #0]
 8010ea4:	7019      	strb	r1, [r3, #0]
 8010ea6:	0008      	movs	r0, r1
 8010ea8:	bd10      	pop	{r4, pc}
 8010eaa:	f000 f9e2 	bl	8011272 <__swbuf_r>
 8010eae:	0001      	movs	r1, r0
 8010eb0:	e7f9      	b.n	8010ea6 <__sfputc_r+0x1e>

08010eb2 <__sfputs_r>:
 8010eb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010eb4:	0006      	movs	r6, r0
 8010eb6:	000f      	movs	r7, r1
 8010eb8:	0014      	movs	r4, r2
 8010eba:	18d5      	adds	r5, r2, r3
 8010ebc:	42ac      	cmp	r4, r5
 8010ebe:	d101      	bne.n	8010ec4 <__sfputs_r+0x12>
 8010ec0:	2000      	movs	r0, #0
 8010ec2:	e007      	b.n	8010ed4 <__sfputs_r+0x22>
 8010ec4:	7821      	ldrb	r1, [r4, #0]
 8010ec6:	003a      	movs	r2, r7
 8010ec8:	0030      	movs	r0, r6
 8010eca:	f7ff ffdd 	bl	8010e88 <__sfputc_r>
 8010ece:	3401      	adds	r4, #1
 8010ed0:	1c43      	adds	r3, r0, #1
 8010ed2:	d1f3      	bne.n	8010ebc <__sfputs_r+0xa>
 8010ed4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010ed8 <_vfiprintf_r>:
 8010ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010eda:	b0a1      	sub	sp, #132	@ 0x84
 8010edc:	000f      	movs	r7, r1
 8010ede:	0015      	movs	r5, r2
 8010ee0:	001e      	movs	r6, r3
 8010ee2:	9003      	str	r0, [sp, #12]
 8010ee4:	2800      	cmp	r0, #0
 8010ee6:	d004      	beq.n	8010ef2 <_vfiprintf_r+0x1a>
 8010ee8:	6a03      	ldr	r3, [r0, #32]
 8010eea:	2b00      	cmp	r3, #0
 8010eec:	d101      	bne.n	8010ef2 <_vfiprintf_r+0x1a>
 8010eee:	f7fe f99d 	bl	800f22c <__sinit>
 8010ef2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010ef4:	07db      	lsls	r3, r3, #31
 8010ef6:	d405      	bmi.n	8010f04 <_vfiprintf_r+0x2c>
 8010ef8:	89bb      	ldrh	r3, [r7, #12]
 8010efa:	059b      	lsls	r3, r3, #22
 8010efc:	d402      	bmi.n	8010f04 <_vfiprintf_r+0x2c>
 8010efe:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010f00:	f7fe fb2b 	bl	800f55a <__retarget_lock_acquire_recursive>
 8010f04:	89bb      	ldrh	r3, [r7, #12]
 8010f06:	071b      	lsls	r3, r3, #28
 8010f08:	d502      	bpl.n	8010f10 <_vfiprintf_r+0x38>
 8010f0a:	693b      	ldr	r3, [r7, #16]
 8010f0c:	2b00      	cmp	r3, #0
 8010f0e:	d113      	bne.n	8010f38 <_vfiprintf_r+0x60>
 8010f10:	0039      	movs	r1, r7
 8010f12:	9803      	ldr	r0, [sp, #12]
 8010f14:	f000 f9f0 	bl	80112f8 <__swsetup_r>
 8010f18:	2800      	cmp	r0, #0
 8010f1a:	d00d      	beq.n	8010f38 <_vfiprintf_r+0x60>
 8010f1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010f1e:	07db      	lsls	r3, r3, #31
 8010f20:	d503      	bpl.n	8010f2a <_vfiprintf_r+0x52>
 8010f22:	2001      	movs	r0, #1
 8010f24:	4240      	negs	r0, r0
 8010f26:	b021      	add	sp, #132	@ 0x84
 8010f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f2a:	89bb      	ldrh	r3, [r7, #12]
 8010f2c:	059b      	lsls	r3, r3, #22
 8010f2e:	d4f8      	bmi.n	8010f22 <_vfiprintf_r+0x4a>
 8010f30:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8010f32:	f7fe fb13 	bl	800f55c <__retarget_lock_release_recursive>
 8010f36:	e7f4      	b.n	8010f22 <_vfiprintf_r+0x4a>
 8010f38:	2300      	movs	r3, #0
 8010f3a:	ac08      	add	r4, sp, #32
 8010f3c:	6163      	str	r3, [r4, #20]
 8010f3e:	3320      	adds	r3, #32
 8010f40:	7663      	strb	r3, [r4, #25]
 8010f42:	3310      	adds	r3, #16
 8010f44:	76a3      	strb	r3, [r4, #26]
 8010f46:	9607      	str	r6, [sp, #28]
 8010f48:	002e      	movs	r6, r5
 8010f4a:	7833      	ldrb	r3, [r6, #0]
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d001      	beq.n	8010f54 <_vfiprintf_r+0x7c>
 8010f50:	2b25      	cmp	r3, #37	@ 0x25
 8010f52:	d148      	bne.n	8010fe6 <_vfiprintf_r+0x10e>
 8010f54:	1b73      	subs	r3, r6, r5
 8010f56:	9305      	str	r3, [sp, #20]
 8010f58:	42ae      	cmp	r6, r5
 8010f5a:	d00b      	beq.n	8010f74 <_vfiprintf_r+0x9c>
 8010f5c:	002a      	movs	r2, r5
 8010f5e:	0039      	movs	r1, r7
 8010f60:	9803      	ldr	r0, [sp, #12]
 8010f62:	f7ff ffa6 	bl	8010eb2 <__sfputs_r>
 8010f66:	3001      	adds	r0, #1
 8010f68:	d100      	bne.n	8010f6c <_vfiprintf_r+0x94>
 8010f6a:	e0ae      	b.n	80110ca <_vfiprintf_r+0x1f2>
 8010f6c:	6963      	ldr	r3, [r4, #20]
 8010f6e:	9a05      	ldr	r2, [sp, #20]
 8010f70:	189b      	adds	r3, r3, r2
 8010f72:	6163      	str	r3, [r4, #20]
 8010f74:	7833      	ldrb	r3, [r6, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d100      	bne.n	8010f7c <_vfiprintf_r+0xa4>
 8010f7a:	e0a6      	b.n	80110ca <_vfiprintf_r+0x1f2>
 8010f7c:	2201      	movs	r2, #1
 8010f7e:	2300      	movs	r3, #0
 8010f80:	4252      	negs	r2, r2
 8010f82:	6062      	str	r2, [r4, #4]
 8010f84:	a904      	add	r1, sp, #16
 8010f86:	3254      	adds	r2, #84	@ 0x54
 8010f88:	1852      	adds	r2, r2, r1
 8010f8a:	1c75      	adds	r5, r6, #1
 8010f8c:	6023      	str	r3, [r4, #0]
 8010f8e:	60e3      	str	r3, [r4, #12]
 8010f90:	60a3      	str	r3, [r4, #8]
 8010f92:	7013      	strb	r3, [r2, #0]
 8010f94:	65a3      	str	r3, [r4, #88]	@ 0x58
 8010f96:	4b59      	ldr	r3, [pc, #356]	@ (80110fc <_vfiprintf_r+0x224>)
 8010f98:	2205      	movs	r2, #5
 8010f9a:	0018      	movs	r0, r3
 8010f9c:	7829      	ldrb	r1, [r5, #0]
 8010f9e:	9305      	str	r3, [sp, #20]
 8010fa0:	f7fe fadd 	bl	800f55e <memchr>
 8010fa4:	1c6e      	adds	r6, r5, #1
 8010fa6:	2800      	cmp	r0, #0
 8010fa8:	d11f      	bne.n	8010fea <_vfiprintf_r+0x112>
 8010faa:	6822      	ldr	r2, [r4, #0]
 8010fac:	06d3      	lsls	r3, r2, #27
 8010fae:	d504      	bpl.n	8010fba <_vfiprintf_r+0xe2>
 8010fb0:	2353      	movs	r3, #83	@ 0x53
 8010fb2:	a904      	add	r1, sp, #16
 8010fb4:	185b      	adds	r3, r3, r1
 8010fb6:	2120      	movs	r1, #32
 8010fb8:	7019      	strb	r1, [r3, #0]
 8010fba:	0713      	lsls	r3, r2, #28
 8010fbc:	d504      	bpl.n	8010fc8 <_vfiprintf_r+0xf0>
 8010fbe:	2353      	movs	r3, #83	@ 0x53
 8010fc0:	a904      	add	r1, sp, #16
 8010fc2:	185b      	adds	r3, r3, r1
 8010fc4:	212b      	movs	r1, #43	@ 0x2b
 8010fc6:	7019      	strb	r1, [r3, #0]
 8010fc8:	782b      	ldrb	r3, [r5, #0]
 8010fca:	2b2a      	cmp	r3, #42	@ 0x2a
 8010fcc:	d016      	beq.n	8010ffc <_vfiprintf_r+0x124>
 8010fce:	002e      	movs	r6, r5
 8010fd0:	2100      	movs	r1, #0
 8010fd2:	200a      	movs	r0, #10
 8010fd4:	68e3      	ldr	r3, [r4, #12]
 8010fd6:	7832      	ldrb	r2, [r6, #0]
 8010fd8:	1c75      	adds	r5, r6, #1
 8010fda:	3a30      	subs	r2, #48	@ 0x30
 8010fdc:	2a09      	cmp	r2, #9
 8010fde:	d950      	bls.n	8011082 <_vfiprintf_r+0x1aa>
 8010fe0:	2900      	cmp	r1, #0
 8010fe2:	d111      	bne.n	8011008 <_vfiprintf_r+0x130>
 8010fe4:	e017      	b.n	8011016 <_vfiprintf_r+0x13e>
 8010fe6:	3601      	adds	r6, #1
 8010fe8:	e7af      	b.n	8010f4a <_vfiprintf_r+0x72>
 8010fea:	9b05      	ldr	r3, [sp, #20]
 8010fec:	6822      	ldr	r2, [r4, #0]
 8010fee:	1ac0      	subs	r0, r0, r3
 8010ff0:	2301      	movs	r3, #1
 8010ff2:	4083      	lsls	r3, r0
 8010ff4:	4313      	orrs	r3, r2
 8010ff6:	0035      	movs	r5, r6
 8010ff8:	6023      	str	r3, [r4, #0]
 8010ffa:	e7cc      	b.n	8010f96 <_vfiprintf_r+0xbe>
 8010ffc:	9b07      	ldr	r3, [sp, #28]
 8010ffe:	1d19      	adds	r1, r3, #4
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	9107      	str	r1, [sp, #28]
 8011004:	2b00      	cmp	r3, #0
 8011006:	db01      	blt.n	801100c <_vfiprintf_r+0x134>
 8011008:	930b      	str	r3, [sp, #44]	@ 0x2c
 801100a:	e004      	b.n	8011016 <_vfiprintf_r+0x13e>
 801100c:	425b      	negs	r3, r3
 801100e:	60e3      	str	r3, [r4, #12]
 8011010:	2302      	movs	r3, #2
 8011012:	4313      	orrs	r3, r2
 8011014:	6023      	str	r3, [r4, #0]
 8011016:	7833      	ldrb	r3, [r6, #0]
 8011018:	2b2e      	cmp	r3, #46	@ 0x2e
 801101a:	d10c      	bne.n	8011036 <_vfiprintf_r+0x15e>
 801101c:	7873      	ldrb	r3, [r6, #1]
 801101e:	2b2a      	cmp	r3, #42	@ 0x2a
 8011020:	d134      	bne.n	801108c <_vfiprintf_r+0x1b4>
 8011022:	9b07      	ldr	r3, [sp, #28]
 8011024:	3602      	adds	r6, #2
 8011026:	1d1a      	adds	r2, r3, #4
 8011028:	681b      	ldr	r3, [r3, #0]
 801102a:	9207      	str	r2, [sp, #28]
 801102c:	2b00      	cmp	r3, #0
 801102e:	da01      	bge.n	8011034 <_vfiprintf_r+0x15c>
 8011030:	2301      	movs	r3, #1
 8011032:	425b      	negs	r3, r3
 8011034:	9309      	str	r3, [sp, #36]	@ 0x24
 8011036:	4d32      	ldr	r5, [pc, #200]	@ (8011100 <_vfiprintf_r+0x228>)
 8011038:	2203      	movs	r2, #3
 801103a:	0028      	movs	r0, r5
 801103c:	7831      	ldrb	r1, [r6, #0]
 801103e:	f7fe fa8e 	bl	800f55e <memchr>
 8011042:	2800      	cmp	r0, #0
 8011044:	d006      	beq.n	8011054 <_vfiprintf_r+0x17c>
 8011046:	2340      	movs	r3, #64	@ 0x40
 8011048:	1b40      	subs	r0, r0, r5
 801104a:	4083      	lsls	r3, r0
 801104c:	6822      	ldr	r2, [r4, #0]
 801104e:	3601      	adds	r6, #1
 8011050:	4313      	orrs	r3, r2
 8011052:	6023      	str	r3, [r4, #0]
 8011054:	7831      	ldrb	r1, [r6, #0]
 8011056:	2206      	movs	r2, #6
 8011058:	482a      	ldr	r0, [pc, #168]	@ (8011104 <_vfiprintf_r+0x22c>)
 801105a:	1c75      	adds	r5, r6, #1
 801105c:	7621      	strb	r1, [r4, #24]
 801105e:	f7fe fa7e 	bl	800f55e <memchr>
 8011062:	2800      	cmp	r0, #0
 8011064:	d040      	beq.n	80110e8 <_vfiprintf_r+0x210>
 8011066:	4b28      	ldr	r3, [pc, #160]	@ (8011108 <_vfiprintf_r+0x230>)
 8011068:	2b00      	cmp	r3, #0
 801106a:	d122      	bne.n	80110b2 <_vfiprintf_r+0x1da>
 801106c:	2207      	movs	r2, #7
 801106e:	9b07      	ldr	r3, [sp, #28]
 8011070:	3307      	adds	r3, #7
 8011072:	4393      	bics	r3, r2
 8011074:	3308      	adds	r3, #8
 8011076:	9307      	str	r3, [sp, #28]
 8011078:	6963      	ldr	r3, [r4, #20]
 801107a:	9a04      	ldr	r2, [sp, #16]
 801107c:	189b      	adds	r3, r3, r2
 801107e:	6163      	str	r3, [r4, #20]
 8011080:	e762      	b.n	8010f48 <_vfiprintf_r+0x70>
 8011082:	4343      	muls	r3, r0
 8011084:	002e      	movs	r6, r5
 8011086:	2101      	movs	r1, #1
 8011088:	189b      	adds	r3, r3, r2
 801108a:	e7a4      	b.n	8010fd6 <_vfiprintf_r+0xfe>
 801108c:	2300      	movs	r3, #0
 801108e:	200a      	movs	r0, #10
 8011090:	0019      	movs	r1, r3
 8011092:	3601      	adds	r6, #1
 8011094:	6063      	str	r3, [r4, #4]
 8011096:	7832      	ldrb	r2, [r6, #0]
 8011098:	1c75      	adds	r5, r6, #1
 801109a:	3a30      	subs	r2, #48	@ 0x30
 801109c:	2a09      	cmp	r2, #9
 801109e:	d903      	bls.n	80110a8 <_vfiprintf_r+0x1d0>
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d0c8      	beq.n	8011036 <_vfiprintf_r+0x15e>
 80110a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80110a6:	e7c6      	b.n	8011036 <_vfiprintf_r+0x15e>
 80110a8:	4341      	muls	r1, r0
 80110aa:	002e      	movs	r6, r5
 80110ac:	2301      	movs	r3, #1
 80110ae:	1889      	adds	r1, r1, r2
 80110b0:	e7f1      	b.n	8011096 <_vfiprintf_r+0x1be>
 80110b2:	aa07      	add	r2, sp, #28
 80110b4:	9200      	str	r2, [sp, #0]
 80110b6:	0021      	movs	r1, r4
 80110b8:	003a      	movs	r2, r7
 80110ba:	4b14      	ldr	r3, [pc, #80]	@ (801110c <_vfiprintf_r+0x234>)
 80110bc:	9803      	ldr	r0, [sp, #12]
 80110be:	f7fd fc69 	bl	800e994 <_printf_float>
 80110c2:	9004      	str	r0, [sp, #16]
 80110c4:	9b04      	ldr	r3, [sp, #16]
 80110c6:	3301      	adds	r3, #1
 80110c8:	d1d6      	bne.n	8011078 <_vfiprintf_r+0x1a0>
 80110ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80110cc:	07db      	lsls	r3, r3, #31
 80110ce:	d405      	bmi.n	80110dc <_vfiprintf_r+0x204>
 80110d0:	89bb      	ldrh	r3, [r7, #12]
 80110d2:	059b      	lsls	r3, r3, #22
 80110d4:	d402      	bmi.n	80110dc <_vfiprintf_r+0x204>
 80110d6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80110d8:	f7fe fa40 	bl	800f55c <__retarget_lock_release_recursive>
 80110dc:	89bb      	ldrh	r3, [r7, #12]
 80110de:	065b      	lsls	r3, r3, #25
 80110e0:	d500      	bpl.n	80110e4 <_vfiprintf_r+0x20c>
 80110e2:	e71e      	b.n	8010f22 <_vfiprintf_r+0x4a>
 80110e4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80110e6:	e71e      	b.n	8010f26 <_vfiprintf_r+0x4e>
 80110e8:	aa07      	add	r2, sp, #28
 80110ea:	9200      	str	r2, [sp, #0]
 80110ec:	0021      	movs	r1, r4
 80110ee:	003a      	movs	r2, r7
 80110f0:	4b06      	ldr	r3, [pc, #24]	@ (801110c <_vfiprintf_r+0x234>)
 80110f2:	9803      	ldr	r0, [sp, #12]
 80110f4:	f7fd fefc 	bl	800eef0 <_printf_i>
 80110f8:	e7e3      	b.n	80110c2 <_vfiprintf_r+0x1ea>
 80110fa:	46c0      	nop			@ (mov r8, r8)
 80110fc:	08012840 	.word	0x08012840
 8011100:	08012846 	.word	0x08012846
 8011104:	0801284a 	.word	0x0801284a
 8011108:	0800e995 	.word	0x0800e995
 801110c:	08010eb3 	.word	0x08010eb3

08011110 <__sflush_r>:
 8011110:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011112:	220c      	movs	r2, #12
 8011114:	5e8b      	ldrsh	r3, [r1, r2]
 8011116:	0005      	movs	r5, r0
 8011118:	000c      	movs	r4, r1
 801111a:	071a      	lsls	r2, r3, #28
 801111c:	d456      	bmi.n	80111cc <__sflush_r+0xbc>
 801111e:	684a      	ldr	r2, [r1, #4]
 8011120:	2a00      	cmp	r2, #0
 8011122:	dc02      	bgt.n	801112a <__sflush_r+0x1a>
 8011124:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8011126:	2a00      	cmp	r2, #0
 8011128:	dd4e      	ble.n	80111c8 <__sflush_r+0xb8>
 801112a:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801112c:	2f00      	cmp	r7, #0
 801112e:	d04b      	beq.n	80111c8 <__sflush_r+0xb8>
 8011130:	2200      	movs	r2, #0
 8011132:	2080      	movs	r0, #128	@ 0x80
 8011134:	682e      	ldr	r6, [r5, #0]
 8011136:	602a      	str	r2, [r5, #0]
 8011138:	001a      	movs	r2, r3
 801113a:	0140      	lsls	r0, r0, #5
 801113c:	6a21      	ldr	r1, [r4, #32]
 801113e:	4002      	ands	r2, r0
 8011140:	4203      	tst	r3, r0
 8011142:	d033      	beq.n	80111ac <__sflush_r+0x9c>
 8011144:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8011146:	89a3      	ldrh	r3, [r4, #12]
 8011148:	075b      	lsls	r3, r3, #29
 801114a:	d506      	bpl.n	801115a <__sflush_r+0x4a>
 801114c:	6863      	ldr	r3, [r4, #4]
 801114e:	1ad2      	subs	r2, r2, r3
 8011150:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8011152:	2b00      	cmp	r3, #0
 8011154:	d001      	beq.n	801115a <__sflush_r+0x4a>
 8011156:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8011158:	1ad2      	subs	r2, r2, r3
 801115a:	2300      	movs	r3, #0
 801115c:	0028      	movs	r0, r5
 801115e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8011160:	6a21      	ldr	r1, [r4, #32]
 8011162:	47b8      	blx	r7
 8011164:	89a2      	ldrh	r2, [r4, #12]
 8011166:	1c43      	adds	r3, r0, #1
 8011168:	d106      	bne.n	8011178 <__sflush_r+0x68>
 801116a:	6829      	ldr	r1, [r5, #0]
 801116c:	291d      	cmp	r1, #29
 801116e:	d846      	bhi.n	80111fe <__sflush_r+0xee>
 8011170:	4b29      	ldr	r3, [pc, #164]	@ (8011218 <__sflush_r+0x108>)
 8011172:	410b      	asrs	r3, r1
 8011174:	07db      	lsls	r3, r3, #31
 8011176:	d442      	bmi.n	80111fe <__sflush_r+0xee>
 8011178:	2300      	movs	r3, #0
 801117a:	6063      	str	r3, [r4, #4]
 801117c:	6923      	ldr	r3, [r4, #16]
 801117e:	6023      	str	r3, [r4, #0]
 8011180:	04d2      	lsls	r2, r2, #19
 8011182:	d505      	bpl.n	8011190 <__sflush_r+0x80>
 8011184:	1c43      	adds	r3, r0, #1
 8011186:	d102      	bne.n	801118e <__sflush_r+0x7e>
 8011188:	682b      	ldr	r3, [r5, #0]
 801118a:	2b00      	cmp	r3, #0
 801118c:	d100      	bne.n	8011190 <__sflush_r+0x80>
 801118e:	6560      	str	r0, [r4, #84]	@ 0x54
 8011190:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011192:	602e      	str	r6, [r5, #0]
 8011194:	2900      	cmp	r1, #0
 8011196:	d017      	beq.n	80111c8 <__sflush_r+0xb8>
 8011198:	0023      	movs	r3, r4
 801119a:	3344      	adds	r3, #68	@ 0x44
 801119c:	4299      	cmp	r1, r3
 801119e:	d002      	beq.n	80111a6 <__sflush_r+0x96>
 80111a0:	0028      	movs	r0, r5
 80111a2:	f7ff f869 	bl	8010278 <_free_r>
 80111a6:	2300      	movs	r3, #0
 80111a8:	6363      	str	r3, [r4, #52]	@ 0x34
 80111aa:	e00d      	b.n	80111c8 <__sflush_r+0xb8>
 80111ac:	2301      	movs	r3, #1
 80111ae:	0028      	movs	r0, r5
 80111b0:	47b8      	blx	r7
 80111b2:	0002      	movs	r2, r0
 80111b4:	1c43      	adds	r3, r0, #1
 80111b6:	d1c6      	bne.n	8011146 <__sflush_r+0x36>
 80111b8:	682b      	ldr	r3, [r5, #0]
 80111ba:	2b00      	cmp	r3, #0
 80111bc:	d0c3      	beq.n	8011146 <__sflush_r+0x36>
 80111be:	2b1d      	cmp	r3, #29
 80111c0:	d001      	beq.n	80111c6 <__sflush_r+0xb6>
 80111c2:	2b16      	cmp	r3, #22
 80111c4:	d11a      	bne.n	80111fc <__sflush_r+0xec>
 80111c6:	602e      	str	r6, [r5, #0]
 80111c8:	2000      	movs	r0, #0
 80111ca:	e01e      	b.n	801120a <__sflush_r+0xfa>
 80111cc:	690e      	ldr	r6, [r1, #16]
 80111ce:	2e00      	cmp	r6, #0
 80111d0:	d0fa      	beq.n	80111c8 <__sflush_r+0xb8>
 80111d2:	680f      	ldr	r7, [r1, #0]
 80111d4:	600e      	str	r6, [r1, #0]
 80111d6:	1bba      	subs	r2, r7, r6
 80111d8:	9201      	str	r2, [sp, #4]
 80111da:	2200      	movs	r2, #0
 80111dc:	079b      	lsls	r3, r3, #30
 80111de:	d100      	bne.n	80111e2 <__sflush_r+0xd2>
 80111e0:	694a      	ldr	r2, [r1, #20]
 80111e2:	60a2      	str	r2, [r4, #8]
 80111e4:	9b01      	ldr	r3, [sp, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	ddee      	ble.n	80111c8 <__sflush_r+0xb8>
 80111ea:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80111ec:	0032      	movs	r2, r6
 80111ee:	001f      	movs	r7, r3
 80111f0:	0028      	movs	r0, r5
 80111f2:	9b01      	ldr	r3, [sp, #4]
 80111f4:	6a21      	ldr	r1, [r4, #32]
 80111f6:	47b8      	blx	r7
 80111f8:	2800      	cmp	r0, #0
 80111fa:	dc07      	bgt.n	801120c <__sflush_r+0xfc>
 80111fc:	89a2      	ldrh	r2, [r4, #12]
 80111fe:	2340      	movs	r3, #64	@ 0x40
 8011200:	2001      	movs	r0, #1
 8011202:	4313      	orrs	r3, r2
 8011204:	b21b      	sxth	r3, r3
 8011206:	81a3      	strh	r3, [r4, #12]
 8011208:	4240      	negs	r0, r0
 801120a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801120c:	9b01      	ldr	r3, [sp, #4]
 801120e:	1836      	adds	r6, r6, r0
 8011210:	1a1b      	subs	r3, r3, r0
 8011212:	9301      	str	r3, [sp, #4]
 8011214:	e7e6      	b.n	80111e4 <__sflush_r+0xd4>
 8011216:	46c0      	nop			@ (mov r8, r8)
 8011218:	dfbffffe 	.word	0xdfbffffe

0801121c <_fflush_r>:
 801121c:	690b      	ldr	r3, [r1, #16]
 801121e:	b570      	push	{r4, r5, r6, lr}
 8011220:	0005      	movs	r5, r0
 8011222:	000c      	movs	r4, r1
 8011224:	2b00      	cmp	r3, #0
 8011226:	d102      	bne.n	801122e <_fflush_r+0x12>
 8011228:	2500      	movs	r5, #0
 801122a:	0028      	movs	r0, r5
 801122c:	bd70      	pop	{r4, r5, r6, pc}
 801122e:	2800      	cmp	r0, #0
 8011230:	d004      	beq.n	801123c <_fflush_r+0x20>
 8011232:	6a03      	ldr	r3, [r0, #32]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d101      	bne.n	801123c <_fflush_r+0x20>
 8011238:	f7fd fff8 	bl	800f22c <__sinit>
 801123c:	220c      	movs	r2, #12
 801123e:	5ea3      	ldrsh	r3, [r4, r2]
 8011240:	2b00      	cmp	r3, #0
 8011242:	d0f1      	beq.n	8011228 <_fflush_r+0xc>
 8011244:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8011246:	07d2      	lsls	r2, r2, #31
 8011248:	d404      	bmi.n	8011254 <_fflush_r+0x38>
 801124a:	059b      	lsls	r3, r3, #22
 801124c:	d402      	bmi.n	8011254 <_fflush_r+0x38>
 801124e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8011250:	f7fe f983 	bl	800f55a <__retarget_lock_acquire_recursive>
 8011254:	0028      	movs	r0, r5
 8011256:	0021      	movs	r1, r4
 8011258:	f7ff ff5a 	bl	8011110 <__sflush_r>
 801125c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801125e:	0005      	movs	r5, r0
 8011260:	07db      	lsls	r3, r3, #31
 8011262:	d4e2      	bmi.n	801122a <_fflush_r+0xe>
 8011264:	89a3      	ldrh	r3, [r4, #12]
 8011266:	059b      	lsls	r3, r3, #22
 8011268:	d4df      	bmi.n	801122a <_fflush_r+0xe>
 801126a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801126c:	f7fe f976 	bl	800f55c <__retarget_lock_release_recursive>
 8011270:	e7db      	b.n	801122a <_fflush_r+0xe>

08011272 <__swbuf_r>:
 8011272:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011274:	0006      	movs	r6, r0
 8011276:	000d      	movs	r5, r1
 8011278:	0014      	movs	r4, r2
 801127a:	2800      	cmp	r0, #0
 801127c:	d004      	beq.n	8011288 <__swbuf_r+0x16>
 801127e:	6a03      	ldr	r3, [r0, #32]
 8011280:	2b00      	cmp	r3, #0
 8011282:	d101      	bne.n	8011288 <__swbuf_r+0x16>
 8011284:	f7fd ffd2 	bl	800f22c <__sinit>
 8011288:	69a3      	ldr	r3, [r4, #24]
 801128a:	60a3      	str	r3, [r4, #8]
 801128c:	89a3      	ldrh	r3, [r4, #12]
 801128e:	071b      	lsls	r3, r3, #28
 8011290:	d502      	bpl.n	8011298 <__swbuf_r+0x26>
 8011292:	6923      	ldr	r3, [r4, #16]
 8011294:	2b00      	cmp	r3, #0
 8011296:	d109      	bne.n	80112ac <__swbuf_r+0x3a>
 8011298:	0021      	movs	r1, r4
 801129a:	0030      	movs	r0, r6
 801129c:	f000 f82c 	bl	80112f8 <__swsetup_r>
 80112a0:	2800      	cmp	r0, #0
 80112a2:	d003      	beq.n	80112ac <__swbuf_r+0x3a>
 80112a4:	2501      	movs	r5, #1
 80112a6:	426d      	negs	r5, r5
 80112a8:	0028      	movs	r0, r5
 80112aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80112ac:	6923      	ldr	r3, [r4, #16]
 80112ae:	6820      	ldr	r0, [r4, #0]
 80112b0:	b2ef      	uxtb	r7, r5
 80112b2:	1ac0      	subs	r0, r0, r3
 80112b4:	6963      	ldr	r3, [r4, #20]
 80112b6:	b2ed      	uxtb	r5, r5
 80112b8:	4283      	cmp	r3, r0
 80112ba:	dc05      	bgt.n	80112c8 <__swbuf_r+0x56>
 80112bc:	0021      	movs	r1, r4
 80112be:	0030      	movs	r0, r6
 80112c0:	f7ff ffac 	bl	801121c <_fflush_r>
 80112c4:	2800      	cmp	r0, #0
 80112c6:	d1ed      	bne.n	80112a4 <__swbuf_r+0x32>
 80112c8:	68a3      	ldr	r3, [r4, #8]
 80112ca:	3001      	adds	r0, #1
 80112cc:	3b01      	subs	r3, #1
 80112ce:	60a3      	str	r3, [r4, #8]
 80112d0:	6823      	ldr	r3, [r4, #0]
 80112d2:	1c5a      	adds	r2, r3, #1
 80112d4:	6022      	str	r2, [r4, #0]
 80112d6:	701f      	strb	r7, [r3, #0]
 80112d8:	6963      	ldr	r3, [r4, #20]
 80112da:	4283      	cmp	r3, r0
 80112dc:	d004      	beq.n	80112e8 <__swbuf_r+0x76>
 80112de:	89a3      	ldrh	r3, [r4, #12]
 80112e0:	07db      	lsls	r3, r3, #31
 80112e2:	d5e1      	bpl.n	80112a8 <__swbuf_r+0x36>
 80112e4:	2d0a      	cmp	r5, #10
 80112e6:	d1df      	bne.n	80112a8 <__swbuf_r+0x36>
 80112e8:	0021      	movs	r1, r4
 80112ea:	0030      	movs	r0, r6
 80112ec:	f7ff ff96 	bl	801121c <_fflush_r>
 80112f0:	2800      	cmp	r0, #0
 80112f2:	d0d9      	beq.n	80112a8 <__swbuf_r+0x36>
 80112f4:	e7d6      	b.n	80112a4 <__swbuf_r+0x32>
	...

080112f8 <__swsetup_r>:
 80112f8:	4b2d      	ldr	r3, [pc, #180]	@ (80113b0 <__swsetup_r+0xb8>)
 80112fa:	b570      	push	{r4, r5, r6, lr}
 80112fc:	0005      	movs	r5, r0
 80112fe:	6818      	ldr	r0, [r3, #0]
 8011300:	000c      	movs	r4, r1
 8011302:	2800      	cmp	r0, #0
 8011304:	d004      	beq.n	8011310 <__swsetup_r+0x18>
 8011306:	6a03      	ldr	r3, [r0, #32]
 8011308:	2b00      	cmp	r3, #0
 801130a:	d101      	bne.n	8011310 <__swsetup_r+0x18>
 801130c:	f7fd ff8e 	bl	800f22c <__sinit>
 8011310:	230c      	movs	r3, #12
 8011312:	5ee2      	ldrsh	r2, [r4, r3]
 8011314:	0713      	lsls	r3, r2, #28
 8011316:	d423      	bmi.n	8011360 <__swsetup_r+0x68>
 8011318:	06d3      	lsls	r3, r2, #27
 801131a:	d407      	bmi.n	801132c <__swsetup_r+0x34>
 801131c:	2309      	movs	r3, #9
 801131e:	602b      	str	r3, [r5, #0]
 8011320:	2340      	movs	r3, #64	@ 0x40
 8011322:	2001      	movs	r0, #1
 8011324:	4313      	orrs	r3, r2
 8011326:	81a3      	strh	r3, [r4, #12]
 8011328:	4240      	negs	r0, r0
 801132a:	e03a      	b.n	80113a2 <__swsetup_r+0xaa>
 801132c:	0752      	lsls	r2, r2, #29
 801132e:	d513      	bpl.n	8011358 <__swsetup_r+0x60>
 8011330:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8011332:	2900      	cmp	r1, #0
 8011334:	d008      	beq.n	8011348 <__swsetup_r+0x50>
 8011336:	0023      	movs	r3, r4
 8011338:	3344      	adds	r3, #68	@ 0x44
 801133a:	4299      	cmp	r1, r3
 801133c:	d002      	beq.n	8011344 <__swsetup_r+0x4c>
 801133e:	0028      	movs	r0, r5
 8011340:	f7fe ff9a 	bl	8010278 <_free_r>
 8011344:	2300      	movs	r3, #0
 8011346:	6363      	str	r3, [r4, #52]	@ 0x34
 8011348:	2224      	movs	r2, #36	@ 0x24
 801134a:	89a3      	ldrh	r3, [r4, #12]
 801134c:	4393      	bics	r3, r2
 801134e:	81a3      	strh	r3, [r4, #12]
 8011350:	2300      	movs	r3, #0
 8011352:	6063      	str	r3, [r4, #4]
 8011354:	6923      	ldr	r3, [r4, #16]
 8011356:	6023      	str	r3, [r4, #0]
 8011358:	2308      	movs	r3, #8
 801135a:	89a2      	ldrh	r2, [r4, #12]
 801135c:	4313      	orrs	r3, r2
 801135e:	81a3      	strh	r3, [r4, #12]
 8011360:	6923      	ldr	r3, [r4, #16]
 8011362:	2b00      	cmp	r3, #0
 8011364:	d10b      	bne.n	801137e <__swsetup_r+0x86>
 8011366:	21a0      	movs	r1, #160	@ 0xa0
 8011368:	2280      	movs	r2, #128	@ 0x80
 801136a:	89a3      	ldrh	r3, [r4, #12]
 801136c:	0089      	lsls	r1, r1, #2
 801136e:	0092      	lsls	r2, r2, #2
 8011370:	400b      	ands	r3, r1
 8011372:	4293      	cmp	r3, r2
 8011374:	d003      	beq.n	801137e <__swsetup_r+0x86>
 8011376:	0021      	movs	r1, r4
 8011378:	0028      	movs	r0, r5
 801137a:	f000 f91f 	bl	80115bc <__smakebuf_r>
 801137e:	230c      	movs	r3, #12
 8011380:	5ee2      	ldrsh	r2, [r4, r3]
 8011382:	2101      	movs	r1, #1
 8011384:	0013      	movs	r3, r2
 8011386:	400b      	ands	r3, r1
 8011388:	420a      	tst	r2, r1
 801138a:	d00b      	beq.n	80113a4 <__swsetup_r+0xac>
 801138c:	2300      	movs	r3, #0
 801138e:	60a3      	str	r3, [r4, #8]
 8011390:	6963      	ldr	r3, [r4, #20]
 8011392:	425b      	negs	r3, r3
 8011394:	61a3      	str	r3, [r4, #24]
 8011396:	2000      	movs	r0, #0
 8011398:	6923      	ldr	r3, [r4, #16]
 801139a:	4283      	cmp	r3, r0
 801139c:	d101      	bne.n	80113a2 <__swsetup_r+0xaa>
 801139e:	0613      	lsls	r3, r2, #24
 80113a0:	d4be      	bmi.n	8011320 <__swsetup_r+0x28>
 80113a2:	bd70      	pop	{r4, r5, r6, pc}
 80113a4:	0791      	lsls	r1, r2, #30
 80113a6:	d400      	bmi.n	80113aa <__swsetup_r+0xb2>
 80113a8:	6963      	ldr	r3, [r4, #20]
 80113aa:	60a3      	str	r3, [r4, #8]
 80113ac:	e7f3      	b.n	8011396 <__swsetup_r+0x9e>
 80113ae:	46c0      	nop			@ (mov r8, r8)
 80113b0:	20000154 	.word	0x20000154

080113b4 <memmove>:
 80113b4:	b510      	push	{r4, lr}
 80113b6:	4288      	cmp	r0, r1
 80113b8:	d806      	bhi.n	80113c8 <memmove+0x14>
 80113ba:	2300      	movs	r3, #0
 80113bc:	429a      	cmp	r2, r3
 80113be:	d008      	beq.n	80113d2 <memmove+0x1e>
 80113c0:	5ccc      	ldrb	r4, [r1, r3]
 80113c2:	54c4      	strb	r4, [r0, r3]
 80113c4:	3301      	adds	r3, #1
 80113c6:	e7f9      	b.n	80113bc <memmove+0x8>
 80113c8:	188b      	adds	r3, r1, r2
 80113ca:	4298      	cmp	r0, r3
 80113cc:	d2f5      	bcs.n	80113ba <memmove+0x6>
 80113ce:	3a01      	subs	r2, #1
 80113d0:	d200      	bcs.n	80113d4 <memmove+0x20>
 80113d2:	bd10      	pop	{r4, pc}
 80113d4:	5c8b      	ldrb	r3, [r1, r2]
 80113d6:	5483      	strb	r3, [r0, r2]
 80113d8:	e7f9      	b.n	80113ce <memmove+0x1a>
	...

080113dc <_sbrk_r>:
 80113dc:	2300      	movs	r3, #0
 80113de:	b570      	push	{r4, r5, r6, lr}
 80113e0:	4d06      	ldr	r5, [pc, #24]	@ (80113fc <_sbrk_r+0x20>)
 80113e2:	0004      	movs	r4, r0
 80113e4:	0008      	movs	r0, r1
 80113e6:	602b      	str	r3, [r5, #0]
 80113e8:	f7f5 fffc 	bl	80073e4 <_sbrk>
 80113ec:	1c43      	adds	r3, r0, #1
 80113ee:	d103      	bne.n	80113f8 <_sbrk_r+0x1c>
 80113f0:	682b      	ldr	r3, [r5, #0]
 80113f2:	2b00      	cmp	r3, #0
 80113f4:	d000      	beq.n	80113f8 <_sbrk_r+0x1c>
 80113f6:	6023      	str	r3, [r4, #0]
 80113f8:	bd70      	pop	{r4, r5, r6, pc}
 80113fa:	46c0      	nop			@ (mov r8, r8)
 80113fc:	20001e94 	.word	0x20001e94

08011400 <memcpy>:
 8011400:	2300      	movs	r3, #0
 8011402:	b510      	push	{r4, lr}
 8011404:	429a      	cmp	r2, r3
 8011406:	d100      	bne.n	801140a <memcpy+0xa>
 8011408:	bd10      	pop	{r4, pc}
 801140a:	5ccc      	ldrb	r4, [r1, r3]
 801140c:	54c4      	strb	r4, [r0, r3]
 801140e:	3301      	adds	r3, #1
 8011410:	e7f8      	b.n	8011404 <memcpy+0x4>
	...

08011414 <__assert_func>:
 8011414:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8011416:	0014      	movs	r4, r2
 8011418:	001a      	movs	r2, r3
 801141a:	4b09      	ldr	r3, [pc, #36]	@ (8011440 <__assert_func+0x2c>)
 801141c:	0005      	movs	r5, r0
 801141e:	681b      	ldr	r3, [r3, #0]
 8011420:	000e      	movs	r6, r1
 8011422:	68d8      	ldr	r0, [r3, #12]
 8011424:	4b07      	ldr	r3, [pc, #28]	@ (8011444 <__assert_func+0x30>)
 8011426:	2c00      	cmp	r4, #0
 8011428:	d101      	bne.n	801142e <__assert_func+0x1a>
 801142a:	4b07      	ldr	r3, [pc, #28]	@ (8011448 <__assert_func+0x34>)
 801142c:	001c      	movs	r4, r3
 801142e:	4907      	ldr	r1, [pc, #28]	@ (801144c <__assert_func+0x38>)
 8011430:	9301      	str	r3, [sp, #4]
 8011432:	9402      	str	r4, [sp, #8]
 8011434:	002b      	movs	r3, r5
 8011436:	9600      	str	r6, [sp, #0]
 8011438:	f000 f886 	bl	8011548 <fiprintf>
 801143c:	f000 f924 	bl	8011688 <abort>
 8011440:	20000154 	.word	0x20000154
 8011444:	0801285b 	.word	0x0801285b
 8011448:	08012896 	.word	0x08012896
 801144c:	08012868 	.word	0x08012868

08011450 <_calloc_r>:
 8011450:	b570      	push	{r4, r5, r6, lr}
 8011452:	0c0b      	lsrs	r3, r1, #16
 8011454:	0c15      	lsrs	r5, r2, #16
 8011456:	2b00      	cmp	r3, #0
 8011458:	d11e      	bne.n	8011498 <_calloc_r+0x48>
 801145a:	2d00      	cmp	r5, #0
 801145c:	d10c      	bne.n	8011478 <_calloc_r+0x28>
 801145e:	b289      	uxth	r1, r1
 8011460:	b294      	uxth	r4, r2
 8011462:	434c      	muls	r4, r1
 8011464:	0021      	movs	r1, r4
 8011466:	f7fe ff7d 	bl	8010364 <_malloc_r>
 801146a:	1e05      	subs	r5, r0, #0
 801146c:	d01a      	beq.n	80114a4 <_calloc_r+0x54>
 801146e:	0022      	movs	r2, r4
 8011470:	2100      	movs	r1, #0
 8011472:	f7fd ffc3 	bl	800f3fc <memset>
 8011476:	e016      	b.n	80114a6 <_calloc_r+0x56>
 8011478:	1c2b      	adds	r3, r5, #0
 801147a:	1c0c      	adds	r4, r1, #0
 801147c:	b289      	uxth	r1, r1
 801147e:	b292      	uxth	r2, r2
 8011480:	434a      	muls	r2, r1
 8011482:	b29b      	uxth	r3, r3
 8011484:	b2a1      	uxth	r1, r4
 8011486:	4359      	muls	r1, r3
 8011488:	0c14      	lsrs	r4, r2, #16
 801148a:	190c      	adds	r4, r1, r4
 801148c:	0c23      	lsrs	r3, r4, #16
 801148e:	d107      	bne.n	80114a0 <_calloc_r+0x50>
 8011490:	0424      	lsls	r4, r4, #16
 8011492:	b292      	uxth	r2, r2
 8011494:	4314      	orrs	r4, r2
 8011496:	e7e5      	b.n	8011464 <_calloc_r+0x14>
 8011498:	2d00      	cmp	r5, #0
 801149a:	d101      	bne.n	80114a0 <_calloc_r+0x50>
 801149c:	1c14      	adds	r4, r2, #0
 801149e:	e7ed      	b.n	801147c <_calloc_r+0x2c>
 80114a0:	230c      	movs	r3, #12
 80114a2:	6003      	str	r3, [r0, #0]
 80114a4:	2500      	movs	r5, #0
 80114a6:	0028      	movs	r0, r5
 80114a8:	bd70      	pop	{r4, r5, r6, pc}

080114aa <__ascii_mbtowc>:
 80114aa:	b082      	sub	sp, #8
 80114ac:	2900      	cmp	r1, #0
 80114ae:	d100      	bne.n	80114b2 <__ascii_mbtowc+0x8>
 80114b0:	a901      	add	r1, sp, #4
 80114b2:	1e10      	subs	r0, r2, #0
 80114b4:	d006      	beq.n	80114c4 <__ascii_mbtowc+0x1a>
 80114b6:	2b00      	cmp	r3, #0
 80114b8:	d006      	beq.n	80114c8 <__ascii_mbtowc+0x1e>
 80114ba:	7813      	ldrb	r3, [r2, #0]
 80114bc:	600b      	str	r3, [r1, #0]
 80114be:	7810      	ldrb	r0, [r2, #0]
 80114c0:	1e43      	subs	r3, r0, #1
 80114c2:	4198      	sbcs	r0, r3
 80114c4:	b002      	add	sp, #8
 80114c6:	4770      	bx	lr
 80114c8:	2002      	movs	r0, #2
 80114ca:	4240      	negs	r0, r0
 80114cc:	e7fa      	b.n	80114c4 <__ascii_mbtowc+0x1a>

080114ce <_realloc_r>:
 80114ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80114d0:	0006      	movs	r6, r0
 80114d2:	000c      	movs	r4, r1
 80114d4:	0015      	movs	r5, r2
 80114d6:	2900      	cmp	r1, #0
 80114d8:	d105      	bne.n	80114e6 <_realloc_r+0x18>
 80114da:	0011      	movs	r1, r2
 80114dc:	f7fe ff42 	bl	8010364 <_malloc_r>
 80114e0:	0004      	movs	r4, r0
 80114e2:	0020      	movs	r0, r4
 80114e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80114e6:	2a00      	cmp	r2, #0
 80114e8:	d103      	bne.n	80114f2 <_realloc_r+0x24>
 80114ea:	f7fe fec5 	bl	8010278 <_free_r>
 80114ee:	2400      	movs	r4, #0
 80114f0:	e7f7      	b.n	80114e2 <_realloc_r+0x14>
 80114f2:	f000 f8d0 	bl	8011696 <_malloc_usable_size_r>
 80114f6:	0007      	movs	r7, r0
 80114f8:	4285      	cmp	r5, r0
 80114fa:	d802      	bhi.n	8011502 <_realloc_r+0x34>
 80114fc:	0843      	lsrs	r3, r0, #1
 80114fe:	42ab      	cmp	r3, r5
 8011500:	d3ef      	bcc.n	80114e2 <_realloc_r+0x14>
 8011502:	0029      	movs	r1, r5
 8011504:	0030      	movs	r0, r6
 8011506:	f7fe ff2d 	bl	8010364 <_malloc_r>
 801150a:	9001      	str	r0, [sp, #4]
 801150c:	2800      	cmp	r0, #0
 801150e:	d0ee      	beq.n	80114ee <_realloc_r+0x20>
 8011510:	002a      	movs	r2, r5
 8011512:	42bd      	cmp	r5, r7
 8011514:	d900      	bls.n	8011518 <_realloc_r+0x4a>
 8011516:	003a      	movs	r2, r7
 8011518:	0021      	movs	r1, r4
 801151a:	9801      	ldr	r0, [sp, #4]
 801151c:	f7ff ff70 	bl	8011400 <memcpy>
 8011520:	0021      	movs	r1, r4
 8011522:	0030      	movs	r0, r6
 8011524:	f7fe fea8 	bl	8010278 <_free_r>
 8011528:	9c01      	ldr	r4, [sp, #4]
 801152a:	e7da      	b.n	80114e2 <_realloc_r+0x14>

0801152c <__ascii_wctomb>:
 801152c:	0003      	movs	r3, r0
 801152e:	1e08      	subs	r0, r1, #0
 8011530:	d005      	beq.n	801153e <__ascii_wctomb+0x12>
 8011532:	2aff      	cmp	r2, #255	@ 0xff
 8011534:	d904      	bls.n	8011540 <__ascii_wctomb+0x14>
 8011536:	228a      	movs	r2, #138	@ 0x8a
 8011538:	2001      	movs	r0, #1
 801153a:	601a      	str	r2, [r3, #0]
 801153c:	4240      	negs	r0, r0
 801153e:	4770      	bx	lr
 8011540:	2001      	movs	r0, #1
 8011542:	700a      	strb	r2, [r1, #0]
 8011544:	e7fb      	b.n	801153e <__ascii_wctomb+0x12>
	...

08011548 <fiprintf>:
 8011548:	b40e      	push	{r1, r2, r3}
 801154a:	b517      	push	{r0, r1, r2, r4, lr}
 801154c:	4c05      	ldr	r4, [pc, #20]	@ (8011564 <fiprintf+0x1c>)
 801154e:	ab05      	add	r3, sp, #20
 8011550:	cb04      	ldmia	r3!, {r2}
 8011552:	0001      	movs	r1, r0
 8011554:	6820      	ldr	r0, [r4, #0]
 8011556:	9301      	str	r3, [sp, #4]
 8011558:	f7ff fcbe 	bl	8010ed8 <_vfiprintf_r>
 801155c:	bc1e      	pop	{r1, r2, r3, r4}
 801155e:	bc08      	pop	{r3}
 8011560:	b003      	add	sp, #12
 8011562:	4718      	bx	r3
 8011564:	20000154 	.word	0x20000154

08011568 <__swhatbuf_r>:
 8011568:	b570      	push	{r4, r5, r6, lr}
 801156a:	000e      	movs	r6, r1
 801156c:	001d      	movs	r5, r3
 801156e:	230e      	movs	r3, #14
 8011570:	5ec9      	ldrsh	r1, [r1, r3]
 8011572:	0014      	movs	r4, r2
 8011574:	b096      	sub	sp, #88	@ 0x58
 8011576:	2900      	cmp	r1, #0
 8011578:	da0c      	bge.n	8011594 <__swhatbuf_r+0x2c>
 801157a:	89b2      	ldrh	r2, [r6, #12]
 801157c:	2380      	movs	r3, #128	@ 0x80
 801157e:	0011      	movs	r1, r2
 8011580:	4019      	ands	r1, r3
 8011582:	421a      	tst	r2, r3
 8011584:	d114      	bne.n	80115b0 <__swhatbuf_r+0x48>
 8011586:	2380      	movs	r3, #128	@ 0x80
 8011588:	00db      	lsls	r3, r3, #3
 801158a:	2000      	movs	r0, #0
 801158c:	6029      	str	r1, [r5, #0]
 801158e:	6023      	str	r3, [r4, #0]
 8011590:	b016      	add	sp, #88	@ 0x58
 8011592:	bd70      	pop	{r4, r5, r6, pc}
 8011594:	466a      	mov	r2, sp
 8011596:	f000 f853 	bl	8011640 <_fstat_r>
 801159a:	2800      	cmp	r0, #0
 801159c:	dbed      	blt.n	801157a <__swhatbuf_r+0x12>
 801159e:	23f0      	movs	r3, #240	@ 0xf0
 80115a0:	9901      	ldr	r1, [sp, #4]
 80115a2:	021b      	lsls	r3, r3, #8
 80115a4:	4019      	ands	r1, r3
 80115a6:	4b04      	ldr	r3, [pc, #16]	@ (80115b8 <__swhatbuf_r+0x50>)
 80115a8:	18c9      	adds	r1, r1, r3
 80115aa:	424b      	negs	r3, r1
 80115ac:	4159      	adcs	r1, r3
 80115ae:	e7ea      	b.n	8011586 <__swhatbuf_r+0x1e>
 80115b0:	2100      	movs	r1, #0
 80115b2:	2340      	movs	r3, #64	@ 0x40
 80115b4:	e7e9      	b.n	801158a <__swhatbuf_r+0x22>
 80115b6:	46c0      	nop			@ (mov r8, r8)
 80115b8:	ffffe000 	.word	0xffffe000

080115bc <__smakebuf_r>:
 80115bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80115be:	2602      	movs	r6, #2
 80115c0:	898b      	ldrh	r3, [r1, #12]
 80115c2:	0005      	movs	r5, r0
 80115c4:	000c      	movs	r4, r1
 80115c6:	b085      	sub	sp, #20
 80115c8:	4233      	tst	r3, r6
 80115ca:	d007      	beq.n	80115dc <__smakebuf_r+0x20>
 80115cc:	0023      	movs	r3, r4
 80115ce:	3347      	adds	r3, #71	@ 0x47
 80115d0:	6023      	str	r3, [r4, #0]
 80115d2:	6123      	str	r3, [r4, #16]
 80115d4:	2301      	movs	r3, #1
 80115d6:	6163      	str	r3, [r4, #20]
 80115d8:	b005      	add	sp, #20
 80115da:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80115dc:	ab03      	add	r3, sp, #12
 80115de:	aa02      	add	r2, sp, #8
 80115e0:	f7ff ffc2 	bl	8011568 <__swhatbuf_r>
 80115e4:	9f02      	ldr	r7, [sp, #8]
 80115e6:	9001      	str	r0, [sp, #4]
 80115e8:	0039      	movs	r1, r7
 80115ea:	0028      	movs	r0, r5
 80115ec:	f7fe feba 	bl	8010364 <_malloc_r>
 80115f0:	2800      	cmp	r0, #0
 80115f2:	d108      	bne.n	8011606 <__smakebuf_r+0x4a>
 80115f4:	220c      	movs	r2, #12
 80115f6:	5ea3      	ldrsh	r3, [r4, r2]
 80115f8:	059a      	lsls	r2, r3, #22
 80115fa:	d4ed      	bmi.n	80115d8 <__smakebuf_r+0x1c>
 80115fc:	2203      	movs	r2, #3
 80115fe:	4393      	bics	r3, r2
 8011600:	431e      	orrs	r6, r3
 8011602:	81a6      	strh	r6, [r4, #12]
 8011604:	e7e2      	b.n	80115cc <__smakebuf_r+0x10>
 8011606:	2380      	movs	r3, #128	@ 0x80
 8011608:	89a2      	ldrh	r2, [r4, #12]
 801160a:	6020      	str	r0, [r4, #0]
 801160c:	4313      	orrs	r3, r2
 801160e:	81a3      	strh	r3, [r4, #12]
 8011610:	9b03      	ldr	r3, [sp, #12]
 8011612:	6120      	str	r0, [r4, #16]
 8011614:	6167      	str	r7, [r4, #20]
 8011616:	2b00      	cmp	r3, #0
 8011618:	d00c      	beq.n	8011634 <__smakebuf_r+0x78>
 801161a:	0028      	movs	r0, r5
 801161c:	230e      	movs	r3, #14
 801161e:	5ee1      	ldrsh	r1, [r4, r3]
 8011620:	f000 f820 	bl	8011664 <_isatty_r>
 8011624:	2800      	cmp	r0, #0
 8011626:	d005      	beq.n	8011634 <__smakebuf_r+0x78>
 8011628:	2303      	movs	r3, #3
 801162a:	89a2      	ldrh	r2, [r4, #12]
 801162c:	439a      	bics	r2, r3
 801162e:	3b02      	subs	r3, #2
 8011630:	4313      	orrs	r3, r2
 8011632:	81a3      	strh	r3, [r4, #12]
 8011634:	89a3      	ldrh	r3, [r4, #12]
 8011636:	9a01      	ldr	r2, [sp, #4]
 8011638:	4313      	orrs	r3, r2
 801163a:	81a3      	strh	r3, [r4, #12]
 801163c:	e7cc      	b.n	80115d8 <__smakebuf_r+0x1c>
	...

08011640 <_fstat_r>:
 8011640:	2300      	movs	r3, #0
 8011642:	b570      	push	{r4, r5, r6, lr}
 8011644:	4d06      	ldr	r5, [pc, #24]	@ (8011660 <_fstat_r+0x20>)
 8011646:	0004      	movs	r4, r0
 8011648:	0008      	movs	r0, r1
 801164a:	0011      	movs	r1, r2
 801164c:	602b      	str	r3, [r5, #0]
 801164e:	f7f5 fea7 	bl	80073a0 <_fstat>
 8011652:	1c43      	adds	r3, r0, #1
 8011654:	d103      	bne.n	801165e <_fstat_r+0x1e>
 8011656:	682b      	ldr	r3, [r5, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d000      	beq.n	801165e <_fstat_r+0x1e>
 801165c:	6023      	str	r3, [r4, #0]
 801165e:	bd70      	pop	{r4, r5, r6, pc}
 8011660:	20001e94 	.word	0x20001e94

08011664 <_isatty_r>:
 8011664:	2300      	movs	r3, #0
 8011666:	b570      	push	{r4, r5, r6, lr}
 8011668:	4d06      	ldr	r5, [pc, #24]	@ (8011684 <_isatty_r+0x20>)
 801166a:	0004      	movs	r4, r0
 801166c:	0008      	movs	r0, r1
 801166e:	602b      	str	r3, [r5, #0]
 8011670:	f7f5 fea4 	bl	80073bc <_isatty>
 8011674:	1c43      	adds	r3, r0, #1
 8011676:	d103      	bne.n	8011680 <_isatty_r+0x1c>
 8011678:	682b      	ldr	r3, [r5, #0]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d000      	beq.n	8011680 <_isatty_r+0x1c>
 801167e:	6023      	str	r3, [r4, #0]
 8011680:	bd70      	pop	{r4, r5, r6, pc}
 8011682:	46c0      	nop			@ (mov r8, r8)
 8011684:	20001e94 	.word	0x20001e94

08011688 <abort>:
 8011688:	2006      	movs	r0, #6
 801168a:	b510      	push	{r4, lr}
 801168c:	f000 f834 	bl	80116f8 <raise>
 8011690:	2001      	movs	r0, #1
 8011692:	f7f5 fe51 	bl	8007338 <_exit>

08011696 <_malloc_usable_size_r>:
 8011696:	1f0b      	subs	r3, r1, #4
 8011698:	681b      	ldr	r3, [r3, #0]
 801169a:	1f18      	subs	r0, r3, #4
 801169c:	2b00      	cmp	r3, #0
 801169e:	da01      	bge.n	80116a4 <_malloc_usable_size_r+0xe>
 80116a0:	580b      	ldr	r3, [r1, r0]
 80116a2:	18c0      	adds	r0, r0, r3
 80116a4:	4770      	bx	lr

080116a6 <_raise_r>:
 80116a6:	b570      	push	{r4, r5, r6, lr}
 80116a8:	0004      	movs	r4, r0
 80116aa:	000d      	movs	r5, r1
 80116ac:	291f      	cmp	r1, #31
 80116ae:	d904      	bls.n	80116ba <_raise_r+0x14>
 80116b0:	2316      	movs	r3, #22
 80116b2:	6003      	str	r3, [r0, #0]
 80116b4:	2001      	movs	r0, #1
 80116b6:	4240      	negs	r0, r0
 80116b8:	bd70      	pop	{r4, r5, r6, pc}
 80116ba:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d004      	beq.n	80116ca <_raise_r+0x24>
 80116c0:	008a      	lsls	r2, r1, #2
 80116c2:	189b      	adds	r3, r3, r2
 80116c4:	681a      	ldr	r2, [r3, #0]
 80116c6:	2a00      	cmp	r2, #0
 80116c8:	d108      	bne.n	80116dc <_raise_r+0x36>
 80116ca:	0020      	movs	r0, r4
 80116cc:	f000 f830 	bl	8011730 <_getpid_r>
 80116d0:	002a      	movs	r2, r5
 80116d2:	0001      	movs	r1, r0
 80116d4:	0020      	movs	r0, r4
 80116d6:	f000 f819 	bl	801170c <_kill_r>
 80116da:	e7ed      	b.n	80116b8 <_raise_r+0x12>
 80116dc:	2a01      	cmp	r2, #1
 80116de:	d009      	beq.n	80116f4 <_raise_r+0x4e>
 80116e0:	1c51      	adds	r1, r2, #1
 80116e2:	d103      	bne.n	80116ec <_raise_r+0x46>
 80116e4:	2316      	movs	r3, #22
 80116e6:	6003      	str	r3, [r0, #0]
 80116e8:	2001      	movs	r0, #1
 80116ea:	e7e5      	b.n	80116b8 <_raise_r+0x12>
 80116ec:	2100      	movs	r1, #0
 80116ee:	0028      	movs	r0, r5
 80116f0:	6019      	str	r1, [r3, #0]
 80116f2:	4790      	blx	r2
 80116f4:	2000      	movs	r0, #0
 80116f6:	e7df      	b.n	80116b8 <_raise_r+0x12>

080116f8 <raise>:
 80116f8:	b510      	push	{r4, lr}
 80116fa:	4b03      	ldr	r3, [pc, #12]	@ (8011708 <raise+0x10>)
 80116fc:	0001      	movs	r1, r0
 80116fe:	6818      	ldr	r0, [r3, #0]
 8011700:	f7ff ffd1 	bl	80116a6 <_raise_r>
 8011704:	bd10      	pop	{r4, pc}
 8011706:	46c0      	nop			@ (mov r8, r8)
 8011708:	20000154 	.word	0x20000154

0801170c <_kill_r>:
 801170c:	2300      	movs	r3, #0
 801170e:	b570      	push	{r4, r5, r6, lr}
 8011710:	4d06      	ldr	r5, [pc, #24]	@ (801172c <_kill_r+0x20>)
 8011712:	0004      	movs	r4, r0
 8011714:	0008      	movs	r0, r1
 8011716:	0011      	movs	r1, r2
 8011718:	602b      	str	r3, [r5, #0]
 801171a:	f7f5 fdfd 	bl	8007318 <_kill>
 801171e:	1c43      	adds	r3, r0, #1
 8011720:	d103      	bne.n	801172a <_kill_r+0x1e>
 8011722:	682b      	ldr	r3, [r5, #0]
 8011724:	2b00      	cmp	r3, #0
 8011726:	d000      	beq.n	801172a <_kill_r+0x1e>
 8011728:	6023      	str	r3, [r4, #0]
 801172a:	bd70      	pop	{r4, r5, r6, pc}
 801172c:	20001e94 	.word	0x20001e94

08011730 <_getpid_r>:
 8011730:	b510      	push	{r4, lr}
 8011732:	f7f5 fdeb 	bl	800730c <_getpid>
 8011736:	bd10      	pop	{r4, pc}

08011738 <expf>:
 8011738:	b570      	push	{r4, r5, r6, lr}
 801173a:	1c04      	adds	r4, r0, #0
 801173c:	f000 f8c2 	bl	80118c4 <__ieee754_expf>
 8011740:	1c05      	adds	r5, r0, #0
 8011742:	1c20      	adds	r0, r4, #0
 8011744:	f000 f83c 	bl	80117c0 <finitef>
 8011748:	2800      	cmp	r0, #0
 801174a:	d00b      	beq.n	8011764 <expf+0x2c>
 801174c:	490c      	ldr	r1, [pc, #48]	@ (8011780 <expf+0x48>)
 801174e:	1c20      	adds	r0, r4, #0
 8011750:	f7ee fed0 	bl	80004f4 <__aeabi_fcmpgt>
 8011754:	2800      	cmp	r0, #0
 8011756:	d007      	beq.n	8011768 <expf+0x30>
 8011758:	f7fd fed4 	bl	800f504 <__errno>
 801175c:	25ff      	movs	r5, #255	@ 0xff
 801175e:	2322      	movs	r3, #34	@ 0x22
 8011760:	05ed      	lsls	r5, r5, #23
 8011762:	6003      	str	r3, [r0, #0]
 8011764:	1c28      	adds	r0, r5, #0
 8011766:	bd70      	pop	{r4, r5, r6, pc}
 8011768:	4906      	ldr	r1, [pc, #24]	@ (8011784 <expf+0x4c>)
 801176a:	1c20      	adds	r0, r4, #0
 801176c:	f7ee feae 	bl	80004cc <__aeabi_fcmplt>
 8011770:	2800      	cmp	r0, #0
 8011772:	d0f7      	beq.n	8011764 <expf+0x2c>
 8011774:	f7fd fec6 	bl	800f504 <__errno>
 8011778:	2322      	movs	r3, #34	@ 0x22
 801177a:	2500      	movs	r5, #0
 801177c:	6003      	str	r3, [r0, #0]
 801177e:	e7f1      	b.n	8011764 <expf+0x2c>
 8011780:	42b17217 	.word	0x42b17217
 8011784:	c2cff1b5 	.word	0xc2cff1b5

08011788 <sqrtf>:
 8011788:	b570      	push	{r4, r5, r6, lr}
 801178a:	1c05      	adds	r5, r0, #0
 801178c:	f000 f822 	bl	80117d4 <__ieee754_sqrtf>
 8011790:	1c29      	adds	r1, r5, #0
 8011792:	1c04      	adds	r4, r0, #0
 8011794:	1c28      	adds	r0, r5, #0
 8011796:	f7ef fe63 	bl	8001460 <__aeabi_fcmpun>
 801179a:	2800      	cmp	r0, #0
 801179c:	d10e      	bne.n	80117bc <sqrtf+0x34>
 801179e:	2100      	movs	r1, #0
 80117a0:	1c28      	adds	r0, r5, #0
 80117a2:	f7ee fe93 	bl	80004cc <__aeabi_fcmplt>
 80117a6:	2800      	cmp	r0, #0
 80117a8:	d008      	beq.n	80117bc <sqrtf+0x34>
 80117aa:	f7fd feab 	bl	800f504 <__errno>
 80117ae:	2321      	movs	r3, #33	@ 0x21
 80117b0:	2100      	movs	r1, #0
 80117b2:	6003      	str	r3, [r0, #0]
 80117b4:	1c08      	adds	r0, r1, #0
 80117b6:	f7ef f98b 	bl	8000ad0 <__aeabi_fdiv>
 80117ba:	1c04      	adds	r4, r0, #0
 80117bc:	1c20      	adds	r0, r4, #0
 80117be:	bd70      	pop	{r4, r5, r6, pc}

080117c0 <finitef>:
 80117c0:	22ff      	movs	r2, #255	@ 0xff
 80117c2:	0043      	lsls	r3, r0, #1
 80117c4:	085b      	lsrs	r3, r3, #1
 80117c6:	2001      	movs	r0, #1
 80117c8:	05d2      	lsls	r2, r2, #23
 80117ca:	4293      	cmp	r3, r2
 80117cc:	db00      	blt.n	80117d0 <finitef+0x10>
 80117ce:	2000      	movs	r0, #0
 80117d0:	4770      	bx	lr
	...

080117d4 <__ieee754_sqrtf>:
 80117d4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80117d6:	0003      	movs	r3, r0
 80117d8:	0042      	lsls	r2, r0, #1
 80117da:	1c04      	adds	r4, r0, #0
 80117dc:	20ff      	movs	r0, #255	@ 0xff
 80117de:	0852      	lsrs	r2, r2, #1
 80117e0:	05c0      	lsls	r0, r0, #23
 80117e2:	4282      	cmp	r2, r0
 80117e4:	d30a      	bcc.n	80117fc <__ieee754_sqrtf+0x28>
 80117e6:	1c21      	adds	r1, r4, #0
 80117e8:	1c20      	adds	r0, r4, #0
 80117ea:	f7ef fb57 	bl	8000e9c <__aeabi_fmul>
 80117ee:	1c01      	adds	r1, r0, #0
 80117f0:	1c20      	adds	r0, r4, #0
 80117f2:	f7ee ffe3 	bl	80007bc <__aeabi_fadd>
 80117f6:	1c04      	adds	r4, r0, #0
 80117f8:	1c20      	adds	r0, r4, #0
 80117fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80117fc:	2a00      	cmp	r2, #0
 80117fe:	d0fb      	beq.n	80117f8 <__ieee754_sqrtf+0x24>
 8011800:	2c00      	cmp	r4, #0
 8011802:	da07      	bge.n	8011814 <__ieee754_sqrtf+0x40>
 8011804:	1c21      	adds	r1, r4, #0
 8011806:	1c20      	adds	r0, r4, #0
 8011808:	f7ef fc86 	bl	8001118 <__aeabi_fsub>
 801180c:	1c01      	adds	r1, r0, #0
 801180e:	f7ef f95f 	bl	8000ad0 <__aeabi_fdiv>
 8011812:	e7f0      	b.n	80117f6 <__ieee754_sqrtf+0x22>
 8011814:	0022      	movs	r2, r4
 8011816:	15e1      	asrs	r1, r4, #23
 8011818:	4002      	ands	r2, r0
 801181a:	4204      	tst	r4, r0
 801181c:	d046      	beq.n	80118ac <__ieee754_sqrtf+0xd8>
 801181e:	2280      	movs	r2, #128	@ 0x80
 8011820:	000f      	movs	r7, r1
 8011822:	025b      	lsls	r3, r3, #9
 8011824:	0a5b      	lsrs	r3, r3, #9
 8011826:	0412      	lsls	r2, r2, #16
 8011828:	3f7f      	subs	r7, #127	@ 0x7f
 801182a:	4313      	orrs	r3, r2
 801182c:	07c9      	lsls	r1, r1, #31
 801182e:	d400      	bmi.n	8011832 <__ieee754_sqrtf+0x5e>
 8011830:	005b      	lsls	r3, r3, #1
 8011832:	2400      	movs	r4, #0
 8011834:	2180      	movs	r1, #128	@ 0x80
 8011836:	2019      	movs	r0, #25
 8011838:	0026      	movs	r6, r4
 801183a:	107f      	asrs	r7, r7, #1
 801183c:	005b      	lsls	r3, r3, #1
 801183e:	0449      	lsls	r1, r1, #17
 8011840:	1875      	adds	r5, r6, r1
 8011842:	001a      	movs	r2, r3
 8011844:	429d      	cmp	r5, r3
 8011846:	dc02      	bgt.n	801184e <__ieee754_sqrtf+0x7a>
 8011848:	186e      	adds	r6, r5, r1
 801184a:	1b5a      	subs	r2, r3, r5
 801184c:	1864      	adds	r4, r4, r1
 801184e:	3801      	subs	r0, #1
 8011850:	0053      	lsls	r3, r2, #1
 8011852:	0849      	lsrs	r1, r1, #1
 8011854:	2800      	cmp	r0, #0
 8011856:	d1f3      	bne.n	8011840 <__ieee754_sqrtf+0x6c>
 8011858:	2a00      	cmp	r2, #0
 801185a:	d019      	beq.n	8011890 <__ieee754_sqrtf+0xbc>
 801185c:	4d17      	ldr	r5, [pc, #92]	@ (80118bc <__ieee754_sqrtf+0xe8>)
 801185e:	4e18      	ldr	r6, [pc, #96]	@ (80118c0 <__ieee754_sqrtf+0xec>)
 8011860:	6828      	ldr	r0, [r5, #0]
 8011862:	6831      	ldr	r1, [r6, #0]
 8011864:	682b      	ldr	r3, [r5, #0]
 8011866:	9301      	str	r3, [sp, #4]
 8011868:	f7ef fc56 	bl	8001118 <__aeabi_fsub>
 801186c:	1c01      	adds	r1, r0, #0
 801186e:	9801      	ldr	r0, [sp, #4]
 8011870:	f7ee fe36 	bl	80004e0 <__aeabi_fcmple>
 8011874:	2800      	cmp	r0, #0
 8011876:	d00b      	beq.n	8011890 <__ieee754_sqrtf+0xbc>
 8011878:	6828      	ldr	r0, [r5, #0]
 801187a:	6831      	ldr	r1, [r6, #0]
 801187c:	f7ee ff9e 	bl	80007bc <__aeabi_fadd>
 8011880:	682d      	ldr	r5, [r5, #0]
 8011882:	1c01      	adds	r1, r0, #0
 8011884:	1c28      	adds	r0, r5, #0
 8011886:	f7ee fe21 	bl	80004cc <__aeabi_fcmplt>
 801188a:	2800      	cmp	r0, #0
 801188c:	d011      	beq.n	80118b2 <__ieee754_sqrtf+0xde>
 801188e:	3402      	adds	r4, #2
 8011890:	23fc      	movs	r3, #252	@ 0xfc
 8011892:	1064      	asrs	r4, r4, #1
 8011894:	059b      	lsls	r3, r3, #22
 8011896:	18e3      	adds	r3, r4, r3
 8011898:	05fc      	lsls	r4, r7, #23
 801189a:	18e4      	adds	r4, r4, r3
 801189c:	e7ac      	b.n	80117f8 <__ieee754_sqrtf+0x24>
 801189e:	005b      	lsls	r3, r3, #1
 80118a0:	3201      	adds	r2, #1
 80118a2:	4203      	tst	r3, r0
 80118a4:	d0fb      	beq.n	801189e <__ieee754_sqrtf+0xca>
 80118a6:	3a01      	subs	r2, #1
 80118a8:	1a89      	subs	r1, r1, r2
 80118aa:	e7b8      	b.n	801181e <__ieee754_sqrtf+0x4a>
 80118ac:	2080      	movs	r0, #128	@ 0x80
 80118ae:	0400      	lsls	r0, r0, #16
 80118b0:	e7f7      	b.n	80118a2 <__ieee754_sqrtf+0xce>
 80118b2:	2301      	movs	r3, #1
 80118b4:	3401      	adds	r4, #1
 80118b6:	439c      	bics	r4, r3
 80118b8:	e7ea      	b.n	8011890 <__ieee754_sqrtf+0xbc>
 80118ba:	46c0      	nop			@ (mov r8, r8)
 80118bc:	20000314 	.word	0x20000314
 80118c0:	20000310 	.word	0x20000310

080118c4 <__ieee754_expf>:
 80118c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80118c6:	21ff      	movs	r1, #255	@ 0xff
 80118c8:	0043      	lsls	r3, r0, #1
 80118ca:	1c04      	adds	r4, r0, #0
 80118cc:	085b      	lsrs	r3, r3, #1
 80118ce:	05c9      	lsls	r1, r1, #23
 80118d0:	428b      	cmp	r3, r1
 80118d2:	d904      	bls.n	80118de <__ieee754_expf+0x1a>
 80118d4:	1c01      	adds	r1, r0, #0
 80118d6:	1c20      	adds	r0, r4, #0
 80118d8:	f7ee ff70 	bl	80007bc <__aeabi_fadd>
 80118dc:	e00d      	b.n	80118fa <__ieee754_expf+0x36>
 80118de:	0fc6      	lsrs	r6, r0, #31
 80118e0:	428b      	cmp	r3, r1
 80118e2:	d104      	bne.n	80118ee <__ieee754_expf+0x2a>
 80118e4:	2e00      	cmp	r6, #0
 80118e6:	d000      	beq.n	80118ea <__ieee754_expf+0x26>
 80118e8:	e0ba      	b.n	8011a60 <__ieee754_expf+0x19c>
 80118ea:	1c20      	adds	r0, r4, #0
 80118ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80118ee:	495d      	ldr	r1, [pc, #372]	@ (8011a64 <__ieee754_expf+0x1a0>)
 80118f0:	4288      	cmp	r0, r1
 80118f2:	dd04      	ble.n	80118fe <__ieee754_expf+0x3a>
 80118f4:	2000      	movs	r0, #0
 80118f6:	f000 f8f1 	bl	8011adc <__math_oflowf>
 80118fa:	1c04      	adds	r4, r0, #0
 80118fc:	e7f5      	b.n	80118ea <__ieee754_expf+0x26>
 80118fe:	2800      	cmp	r0, #0
 8011900:	da06      	bge.n	8011910 <__ieee754_expf+0x4c>
 8011902:	4a59      	ldr	r2, [pc, #356]	@ (8011a68 <__ieee754_expf+0x1a4>)
 8011904:	4293      	cmp	r3, r2
 8011906:	d903      	bls.n	8011910 <__ieee754_expf+0x4c>
 8011908:	2000      	movs	r0, #0
 801190a:	f000 f8e1 	bl	8011ad0 <__math_uflowf>
 801190e:	e7f4      	b.n	80118fa <__ieee754_expf+0x36>
 8011910:	4a56      	ldr	r2, [pc, #344]	@ (8011a6c <__ieee754_expf+0x1a8>)
 8011912:	4293      	cmp	r3, r2
 8011914:	d96e      	bls.n	80119f4 <__ieee754_expf+0x130>
 8011916:	4a56      	ldr	r2, [pc, #344]	@ (8011a70 <__ieee754_expf+0x1ac>)
 8011918:	00b5      	lsls	r5, r6, #2
 801191a:	4293      	cmp	r3, r2
 801191c:	d84e      	bhi.n	80119bc <__ieee754_expf+0xf8>
 801191e:	4b55      	ldr	r3, [pc, #340]	@ (8011a74 <__ieee754_expf+0x1b0>)
 8011920:	1c20      	adds	r0, r4, #0
 8011922:	5959      	ldr	r1, [r3, r5]
 8011924:	f7ef fbf8 	bl	8001118 <__aeabi_fsub>
 8011928:	4b53      	ldr	r3, [pc, #332]	@ (8011a78 <__ieee754_expf+0x1b4>)
 801192a:	1c07      	adds	r7, r0, #0
 801192c:	595b      	ldr	r3, [r3, r5]
 801192e:	2501      	movs	r5, #1
 8011930:	1bad      	subs	r5, r5, r6
 8011932:	9300      	str	r3, [sp, #0]
 8011934:	1bad      	subs	r5, r5, r6
 8011936:	9900      	ldr	r1, [sp, #0]
 8011938:	1c38      	adds	r0, r7, #0
 801193a:	f7ef fbed 	bl	8001118 <__aeabi_fsub>
 801193e:	1c04      	adds	r4, r0, #0
 8011940:	1c21      	adds	r1, r4, #0
 8011942:	1c20      	adds	r0, r4, #0
 8011944:	f7ef faaa 	bl	8000e9c <__aeabi_fmul>
 8011948:	494c      	ldr	r1, [pc, #304]	@ (8011a7c <__ieee754_expf+0x1b8>)
 801194a:	1c06      	adds	r6, r0, #0
 801194c:	f7ef faa6 	bl	8000e9c <__aeabi_fmul>
 8011950:	494b      	ldr	r1, [pc, #300]	@ (8011a80 <__ieee754_expf+0x1bc>)
 8011952:	f7ef fbe1 	bl	8001118 <__aeabi_fsub>
 8011956:	1c31      	adds	r1, r6, #0
 8011958:	f7ef faa0 	bl	8000e9c <__aeabi_fmul>
 801195c:	4949      	ldr	r1, [pc, #292]	@ (8011a84 <__ieee754_expf+0x1c0>)
 801195e:	f7ee ff2d 	bl	80007bc <__aeabi_fadd>
 8011962:	1c31      	adds	r1, r6, #0
 8011964:	f7ef fa9a 	bl	8000e9c <__aeabi_fmul>
 8011968:	4947      	ldr	r1, [pc, #284]	@ (8011a88 <__ieee754_expf+0x1c4>)
 801196a:	f7ef fbd5 	bl	8001118 <__aeabi_fsub>
 801196e:	1c31      	adds	r1, r6, #0
 8011970:	f7ef fa94 	bl	8000e9c <__aeabi_fmul>
 8011974:	4945      	ldr	r1, [pc, #276]	@ (8011a8c <__ieee754_expf+0x1c8>)
 8011976:	f7ee ff21 	bl	80007bc <__aeabi_fadd>
 801197a:	1c31      	adds	r1, r6, #0
 801197c:	f7ef fa8e 	bl	8000e9c <__aeabi_fmul>
 8011980:	1c01      	adds	r1, r0, #0
 8011982:	1c20      	adds	r0, r4, #0
 8011984:	f7ef fbc8 	bl	8001118 <__aeabi_fsub>
 8011988:	1c01      	adds	r1, r0, #0
 801198a:	1c06      	adds	r6, r0, #0
 801198c:	1c20      	adds	r0, r4, #0
 801198e:	f7ef fa85 	bl	8000e9c <__aeabi_fmul>
 8011992:	9001      	str	r0, [sp, #4]
 8011994:	2d00      	cmp	r5, #0
 8011996:	d140      	bne.n	8011a1a <__ieee754_expf+0x156>
 8011998:	2180      	movs	r1, #128	@ 0x80
 801199a:	1c30      	adds	r0, r6, #0
 801199c:	05c9      	lsls	r1, r1, #23
 801199e:	f7ef fbbb 	bl	8001118 <__aeabi_fsub>
 80119a2:	1c01      	adds	r1, r0, #0
 80119a4:	9801      	ldr	r0, [sp, #4]
 80119a6:	f7ef f893 	bl	8000ad0 <__aeabi_fdiv>
 80119aa:	1c21      	adds	r1, r4, #0
 80119ac:	f7ef fbb4 	bl	8001118 <__aeabi_fsub>
 80119b0:	1c01      	adds	r1, r0, #0
 80119b2:	20fe      	movs	r0, #254	@ 0xfe
 80119b4:	0580      	lsls	r0, r0, #22
 80119b6:	f7ef fbaf 	bl	8001118 <__aeabi_fsub>
 80119ba:	e79e      	b.n	80118fa <__ieee754_expf+0x36>
 80119bc:	4934      	ldr	r1, [pc, #208]	@ (8011a90 <__ieee754_expf+0x1cc>)
 80119be:	1c20      	adds	r0, r4, #0
 80119c0:	f7ef fa6c 	bl	8000e9c <__aeabi_fmul>
 80119c4:	4b33      	ldr	r3, [pc, #204]	@ (8011a94 <__ieee754_expf+0x1d0>)
 80119c6:	5959      	ldr	r1, [r3, r5]
 80119c8:	f7ee fef8 	bl	80007bc <__aeabi_fadd>
 80119cc:	f7ef fd5e 	bl	800148c <__aeabi_f2iz>
 80119d0:	0005      	movs	r5, r0
 80119d2:	f7ef fd7b 	bl	80014cc <__aeabi_i2f>
 80119d6:	4930      	ldr	r1, [pc, #192]	@ (8011a98 <__ieee754_expf+0x1d4>)
 80119d8:	1c06      	adds	r6, r0, #0
 80119da:	f7ef fa5f 	bl	8000e9c <__aeabi_fmul>
 80119de:	1c01      	adds	r1, r0, #0
 80119e0:	1c20      	adds	r0, r4, #0
 80119e2:	f7ef fb99 	bl	8001118 <__aeabi_fsub>
 80119e6:	492d      	ldr	r1, [pc, #180]	@ (8011a9c <__ieee754_expf+0x1d8>)
 80119e8:	1c07      	adds	r7, r0, #0
 80119ea:	1c30      	adds	r0, r6, #0
 80119ec:	f7ef fa56 	bl	8000e9c <__aeabi_fmul>
 80119f0:	9000      	str	r0, [sp, #0]
 80119f2:	e7a0      	b.n	8011936 <__ieee754_expf+0x72>
 80119f4:	22d0      	movs	r2, #208	@ 0xd0
 80119f6:	0592      	lsls	r2, r2, #22
 80119f8:	4293      	cmp	r3, r2
 80119fa:	d20c      	bcs.n	8011a16 <__ieee754_expf+0x152>
 80119fc:	4928      	ldr	r1, [pc, #160]	@ (8011aa0 <__ieee754_expf+0x1dc>)
 80119fe:	1c20      	adds	r0, r4, #0
 8011a00:	f7ee fedc 	bl	80007bc <__aeabi_fadd>
 8011a04:	21fe      	movs	r1, #254	@ 0xfe
 8011a06:	0589      	lsls	r1, r1, #22
 8011a08:	f7ee fd74 	bl	80004f4 <__aeabi_fcmpgt>
 8011a0c:	1e05      	subs	r5, r0, #0
 8011a0e:	d097      	beq.n	8011940 <__ieee754_expf+0x7c>
 8011a10:	21fe      	movs	r1, #254	@ 0xfe
 8011a12:	0589      	lsls	r1, r1, #22
 8011a14:	e75f      	b.n	80118d6 <__ieee754_expf+0x12>
 8011a16:	2500      	movs	r5, #0
 8011a18:	e792      	b.n	8011940 <__ieee754_expf+0x7c>
 8011a1a:	2080      	movs	r0, #128	@ 0x80
 8011a1c:	1c31      	adds	r1, r6, #0
 8011a1e:	05c0      	lsls	r0, r0, #23
 8011a20:	f7ef fb7a 	bl	8001118 <__aeabi_fsub>
 8011a24:	1c01      	adds	r1, r0, #0
 8011a26:	9801      	ldr	r0, [sp, #4]
 8011a28:	f7ef f852 	bl	8000ad0 <__aeabi_fdiv>
 8011a2c:	1c01      	adds	r1, r0, #0
 8011a2e:	9800      	ldr	r0, [sp, #0]
 8011a30:	f7ef fb72 	bl	8001118 <__aeabi_fsub>
 8011a34:	1c39      	adds	r1, r7, #0
 8011a36:	f7ef fb6f 	bl	8001118 <__aeabi_fsub>
 8011a3a:	1c01      	adds	r1, r0, #0
 8011a3c:	20fe      	movs	r0, #254	@ 0xfe
 8011a3e:	0580      	lsls	r0, r0, #22
 8011a40:	f7ef fb6a 	bl	8001118 <__aeabi_fsub>
 8011a44:	002b      	movs	r3, r5
 8011a46:	337d      	adds	r3, #125	@ 0x7d
 8011a48:	db02      	blt.n	8011a50 <__ieee754_expf+0x18c>
 8011a4a:	05ec      	lsls	r4, r5, #23
 8011a4c:	1824      	adds	r4, r4, r0
 8011a4e:	e74c      	b.n	80118ea <__ieee754_expf+0x26>
 8011a50:	21d8      	movs	r1, #216	@ 0xd8
 8011a52:	3564      	adds	r5, #100	@ 0x64
 8011a54:	05ed      	lsls	r5, r5, #23
 8011a56:	1828      	adds	r0, r5, r0
 8011a58:	0509      	lsls	r1, r1, #20
 8011a5a:	f7ef fa1f 	bl	8000e9c <__aeabi_fmul>
 8011a5e:	e74c      	b.n	80118fa <__ieee754_expf+0x36>
 8011a60:	2400      	movs	r4, #0
 8011a62:	e742      	b.n	80118ea <__ieee754_expf+0x26>
 8011a64:	42b17217 	.word	0x42b17217
 8011a68:	42cff1b5 	.word	0x42cff1b5
 8011a6c:	3eb17218 	.word	0x3eb17218
 8011a70:	3f851591 	.word	0x3f851591
 8011a74:	080129a0 	.word	0x080129a0
 8011a78:	08012998 	.word	0x08012998
 8011a7c:	3331bb4c 	.word	0x3331bb4c
 8011a80:	35ddea0e 	.word	0x35ddea0e
 8011a84:	388ab355 	.word	0x388ab355
 8011a88:	3b360b61 	.word	0x3b360b61
 8011a8c:	3e2aaaab 	.word	0x3e2aaaab
 8011a90:	3fb8aa3b 	.word	0x3fb8aa3b
 8011a94:	080129a8 	.word	0x080129a8
 8011a98:	3f317180 	.word	0x3f317180
 8011a9c:	3717f7d1 	.word	0x3717f7d1
 8011aa0:	7149f2ca 	.word	0x7149f2ca

08011aa4 <with_errnof>:
 8011aa4:	b570      	push	{r4, r5, r6, lr}
 8011aa6:	000d      	movs	r5, r1
 8011aa8:	1c04      	adds	r4, r0, #0
 8011aaa:	f7fd fd2b 	bl	800f504 <__errno>
 8011aae:	6005      	str	r5, [r0, #0]
 8011ab0:	1c20      	adds	r0, r4, #0
 8011ab2:	bd70      	pop	{r4, r5, r6, pc}

08011ab4 <xflowf>:
 8011ab4:	b510      	push	{r4, lr}
 8011ab6:	1c0b      	adds	r3, r1, #0
 8011ab8:	2800      	cmp	r0, #0
 8011aba:	d002      	beq.n	8011ac2 <xflowf+0xe>
 8011abc:	2380      	movs	r3, #128	@ 0x80
 8011abe:	061b      	lsls	r3, r3, #24
 8011ac0:	18cb      	adds	r3, r1, r3
 8011ac2:	1c18      	adds	r0, r3, #0
 8011ac4:	f7ef f9ea 	bl	8000e9c <__aeabi_fmul>
 8011ac8:	2122      	movs	r1, #34	@ 0x22
 8011aca:	f7ff ffeb 	bl	8011aa4 <with_errnof>
 8011ace:	bd10      	pop	{r4, pc}

08011ad0 <__math_uflowf>:
 8011ad0:	2180      	movs	r1, #128	@ 0x80
 8011ad2:	b510      	push	{r4, lr}
 8011ad4:	0549      	lsls	r1, r1, #21
 8011ad6:	f7ff ffed 	bl	8011ab4 <xflowf>
 8011ada:	bd10      	pop	{r4, pc}

08011adc <__math_oflowf>:
 8011adc:	21e0      	movs	r1, #224	@ 0xe0
 8011ade:	b510      	push	{r4, lr}
 8011ae0:	05c9      	lsls	r1, r1, #23
 8011ae2:	f7ff ffe7 	bl	8011ab4 <xflowf>
 8011ae6:	bd10      	pop	{r4, pc}

08011ae8 <_init>:
 8011ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011aea:	46c0      	nop			@ (mov r8, r8)
 8011aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011aee:	bc08      	pop	{r3}
 8011af0:	469e      	mov	lr, r3
 8011af2:	4770      	bx	lr

08011af4 <_fini>:
 8011af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011af6:	46c0      	nop			@ (mov r8, r8)
 8011af8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011afa:	bc08      	pop	{r3}
 8011afc:	469e      	mov	lr, r3
 8011afe:	4770      	bx	lr
