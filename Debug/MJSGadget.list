
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001a890  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00012e50  0801a950  0801a950  0001b950  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802d7a0  0802d7a0  0002f4a0  2**0
                  CONTENTS
  4 .ARM          00000008  0802d7a0  0802d7a0  0002e7a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802d7a8  0802d7a8  0002f4a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802d7a8  0802d7a8  0002e7a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802d7ac  0802d7ac  0002e7ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000004a0  20000000  0802d7b0  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003540  200004a0  0802dc50  0002f4a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200039e0  0802dc50  0002f9e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002f4a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000299c3  00000000  00000000  0002f4c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000743c  00000000  00000000  00058e8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002050  00000000  00000000  000602c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000017a0  00000000  00000000  00062318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001deac  00000000  00000000  00063ab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00031801  00000000  00000000  00081964  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00096abf  00000000  00000000  000b3165  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  00149c24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000858c  00000000  00000000  00149cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  00152264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    00002742  00000000  00000000  001522bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 000000a8  00000000  00000000  001549fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200004a0 	.word	0x200004a0
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801a938 	.word	0x0801a938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200004a4 	.word	0x200004a4
 8000104:	0801a938 	.word	0x0801a938

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strlen>:
 8000158:	2300      	movs	r3, #0
 800015a:	5cc2      	ldrb	r2, [r0, r3]
 800015c:	3301      	adds	r3, #1
 800015e:	2a00      	cmp	r2, #0
 8000160:	d1fb      	bne.n	800015a <strlen+0x2>
 8000162:	1e58      	subs	r0, r3, #1
 8000164:	4770      	bx	lr
	...

08000168 <__gnu_thumb1_case_uqi>:
 8000168:	b402      	push	{r1}
 800016a:	4671      	mov	r1, lr
 800016c:	0849      	lsrs	r1, r1, #1
 800016e:	0049      	lsls	r1, r1, #1
 8000170:	5c09      	ldrb	r1, [r1, r0]
 8000172:	0049      	lsls	r1, r1, #1
 8000174:	448e      	add	lr, r1
 8000176:	bc02      	pop	{r1}
 8000178:	4770      	bx	lr
 800017a:	46c0      	nop			@ (mov r8, r8)

0800017c <__gnu_thumb1_case_shi>:
 800017c:	b403      	push	{r0, r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0040      	lsls	r0, r0, #1
 8000184:	0049      	lsls	r1, r1, #1
 8000186:	5e09      	ldrsh	r1, [r1, r0]
 8000188:	0049      	lsls	r1, r1, #1
 800018a:	448e      	add	lr, r1
 800018c:	bc03      	pop	{r0, r1}
 800018e:	4770      	bx	lr

08000190 <__udivsi3>:
 8000190:	2200      	movs	r2, #0
 8000192:	0843      	lsrs	r3, r0, #1
 8000194:	428b      	cmp	r3, r1
 8000196:	d374      	bcc.n	8000282 <__udivsi3+0xf2>
 8000198:	0903      	lsrs	r3, r0, #4
 800019a:	428b      	cmp	r3, r1
 800019c:	d35f      	bcc.n	800025e <__udivsi3+0xce>
 800019e:	0a03      	lsrs	r3, r0, #8
 80001a0:	428b      	cmp	r3, r1
 80001a2:	d344      	bcc.n	800022e <__udivsi3+0x9e>
 80001a4:	0b03      	lsrs	r3, r0, #12
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d328      	bcc.n	80001fc <__udivsi3+0x6c>
 80001aa:	0c03      	lsrs	r3, r0, #16
 80001ac:	428b      	cmp	r3, r1
 80001ae:	d30d      	bcc.n	80001cc <__udivsi3+0x3c>
 80001b0:	22ff      	movs	r2, #255	@ 0xff
 80001b2:	0209      	lsls	r1, r1, #8
 80001b4:	ba12      	rev	r2, r2
 80001b6:	0c03      	lsrs	r3, r0, #16
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d302      	bcc.n	80001c2 <__udivsi3+0x32>
 80001bc:	1212      	asrs	r2, r2, #8
 80001be:	0209      	lsls	r1, r1, #8
 80001c0:	d065      	beq.n	800028e <__udivsi3+0xfe>
 80001c2:	0b03      	lsrs	r3, r0, #12
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d319      	bcc.n	80001fc <__udivsi3+0x6c>
 80001c8:	e000      	b.n	80001cc <__udivsi3+0x3c>
 80001ca:	0a09      	lsrs	r1, r1, #8
 80001cc:	0bc3      	lsrs	r3, r0, #15
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x46>
 80001d2:	03cb      	lsls	r3, r1, #15
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0b83      	lsrs	r3, r0, #14
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x52>
 80001de:	038b      	lsls	r3, r1, #14
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0b43      	lsrs	r3, r0, #13
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x5e>
 80001ea:	034b      	lsls	r3, r1, #13
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	0b03      	lsrs	r3, r0, #12
 80001f2:	428b      	cmp	r3, r1
 80001f4:	d301      	bcc.n	80001fa <__udivsi3+0x6a>
 80001f6:	030b      	lsls	r3, r1, #12
 80001f8:	1ac0      	subs	r0, r0, r3
 80001fa:	4152      	adcs	r2, r2
 80001fc:	0ac3      	lsrs	r3, r0, #11
 80001fe:	428b      	cmp	r3, r1
 8000200:	d301      	bcc.n	8000206 <__udivsi3+0x76>
 8000202:	02cb      	lsls	r3, r1, #11
 8000204:	1ac0      	subs	r0, r0, r3
 8000206:	4152      	adcs	r2, r2
 8000208:	0a83      	lsrs	r3, r0, #10
 800020a:	428b      	cmp	r3, r1
 800020c:	d301      	bcc.n	8000212 <__udivsi3+0x82>
 800020e:	028b      	lsls	r3, r1, #10
 8000210:	1ac0      	subs	r0, r0, r3
 8000212:	4152      	adcs	r2, r2
 8000214:	0a43      	lsrs	r3, r0, #9
 8000216:	428b      	cmp	r3, r1
 8000218:	d301      	bcc.n	800021e <__udivsi3+0x8e>
 800021a:	024b      	lsls	r3, r1, #9
 800021c:	1ac0      	subs	r0, r0, r3
 800021e:	4152      	adcs	r2, r2
 8000220:	0a03      	lsrs	r3, r0, #8
 8000222:	428b      	cmp	r3, r1
 8000224:	d301      	bcc.n	800022a <__udivsi3+0x9a>
 8000226:	020b      	lsls	r3, r1, #8
 8000228:	1ac0      	subs	r0, r0, r3
 800022a:	4152      	adcs	r2, r2
 800022c:	d2cd      	bcs.n	80001ca <__udivsi3+0x3a>
 800022e:	09c3      	lsrs	r3, r0, #7
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xa8>
 8000234:	01cb      	lsls	r3, r1, #7
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0983      	lsrs	r3, r0, #6
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xb4>
 8000240:	018b      	lsls	r3, r1, #6
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	0943      	lsrs	r3, r0, #5
 8000248:	428b      	cmp	r3, r1
 800024a:	d301      	bcc.n	8000250 <__udivsi3+0xc0>
 800024c:	014b      	lsls	r3, r1, #5
 800024e:	1ac0      	subs	r0, r0, r3
 8000250:	4152      	adcs	r2, r2
 8000252:	0903      	lsrs	r3, r0, #4
 8000254:	428b      	cmp	r3, r1
 8000256:	d301      	bcc.n	800025c <__udivsi3+0xcc>
 8000258:	010b      	lsls	r3, r1, #4
 800025a:	1ac0      	subs	r0, r0, r3
 800025c:	4152      	adcs	r2, r2
 800025e:	08c3      	lsrs	r3, r0, #3
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__udivsi3+0xd8>
 8000264:	00cb      	lsls	r3, r1, #3
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0883      	lsrs	r3, r0, #2
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__udivsi3+0xe4>
 8000270:	008b      	lsls	r3, r1, #2
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0843      	lsrs	r3, r0, #1
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__udivsi3+0xf0>
 800027c:	004b      	lsls	r3, r1, #1
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	1a41      	subs	r1, r0, r1
 8000284:	d200      	bcs.n	8000288 <__udivsi3+0xf8>
 8000286:	4601      	mov	r1, r0
 8000288:	4152      	adcs	r2, r2
 800028a:	4610      	mov	r0, r2
 800028c:	4770      	bx	lr
 800028e:	e7ff      	b.n	8000290 <__udivsi3+0x100>
 8000290:	b501      	push	{r0, lr}
 8000292:	2000      	movs	r0, #0
 8000294:	f000 f8f0 	bl	8000478 <__aeabi_idiv0>
 8000298:	bd02      	pop	{r1, pc}
 800029a:	46c0      	nop			@ (mov r8, r8)

0800029c <__aeabi_uidivmod>:
 800029c:	2900      	cmp	r1, #0
 800029e:	d0f7      	beq.n	8000290 <__udivsi3+0x100>
 80002a0:	e776      	b.n	8000190 <__udivsi3>
 80002a2:	4770      	bx	lr

080002a4 <__divsi3>:
 80002a4:	4603      	mov	r3, r0
 80002a6:	430b      	orrs	r3, r1
 80002a8:	d47f      	bmi.n	80003aa <__divsi3+0x106>
 80002aa:	2200      	movs	r2, #0
 80002ac:	0843      	lsrs	r3, r0, #1
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d374      	bcc.n	800039c <__divsi3+0xf8>
 80002b2:	0903      	lsrs	r3, r0, #4
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d35f      	bcc.n	8000378 <__divsi3+0xd4>
 80002b8:	0a03      	lsrs	r3, r0, #8
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d344      	bcc.n	8000348 <__divsi3+0xa4>
 80002be:	0b03      	lsrs	r3, r0, #12
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d328      	bcc.n	8000316 <__divsi3+0x72>
 80002c4:	0c03      	lsrs	r3, r0, #16
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d30d      	bcc.n	80002e6 <__divsi3+0x42>
 80002ca:	22ff      	movs	r2, #255	@ 0xff
 80002cc:	0209      	lsls	r1, r1, #8
 80002ce:	ba12      	rev	r2, r2
 80002d0:	0c03      	lsrs	r3, r0, #16
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__divsi3+0x38>
 80002d6:	1212      	asrs	r2, r2, #8
 80002d8:	0209      	lsls	r1, r1, #8
 80002da:	d065      	beq.n	80003a8 <__divsi3+0x104>
 80002dc:	0b03      	lsrs	r3, r0, #12
 80002de:	428b      	cmp	r3, r1
 80002e0:	d319      	bcc.n	8000316 <__divsi3+0x72>
 80002e2:	e000      	b.n	80002e6 <__divsi3+0x42>
 80002e4:	0a09      	lsrs	r1, r1, #8
 80002e6:	0bc3      	lsrs	r3, r0, #15
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x4c>
 80002ec:	03cb      	lsls	r3, r1, #15
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0b83      	lsrs	r3, r0, #14
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x58>
 80002f8:	038b      	lsls	r3, r1, #14
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0b43      	lsrs	r3, r0, #13
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0x64>
 8000304:	034b      	lsls	r3, r1, #13
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	0b03      	lsrs	r3, r0, #12
 800030c:	428b      	cmp	r3, r1
 800030e:	d301      	bcc.n	8000314 <__divsi3+0x70>
 8000310:	030b      	lsls	r3, r1, #12
 8000312:	1ac0      	subs	r0, r0, r3
 8000314:	4152      	adcs	r2, r2
 8000316:	0ac3      	lsrs	r3, r0, #11
 8000318:	428b      	cmp	r3, r1
 800031a:	d301      	bcc.n	8000320 <__divsi3+0x7c>
 800031c:	02cb      	lsls	r3, r1, #11
 800031e:	1ac0      	subs	r0, r0, r3
 8000320:	4152      	adcs	r2, r2
 8000322:	0a83      	lsrs	r3, r0, #10
 8000324:	428b      	cmp	r3, r1
 8000326:	d301      	bcc.n	800032c <__divsi3+0x88>
 8000328:	028b      	lsls	r3, r1, #10
 800032a:	1ac0      	subs	r0, r0, r3
 800032c:	4152      	adcs	r2, r2
 800032e:	0a43      	lsrs	r3, r0, #9
 8000330:	428b      	cmp	r3, r1
 8000332:	d301      	bcc.n	8000338 <__divsi3+0x94>
 8000334:	024b      	lsls	r3, r1, #9
 8000336:	1ac0      	subs	r0, r0, r3
 8000338:	4152      	adcs	r2, r2
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d301      	bcc.n	8000344 <__divsi3+0xa0>
 8000340:	020b      	lsls	r3, r1, #8
 8000342:	1ac0      	subs	r0, r0, r3
 8000344:	4152      	adcs	r2, r2
 8000346:	d2cd      	bcs.n	80002e4 <__divsi3+0x40>
 8000348:	09c3      	lsrs	r3, r0, #7
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xae>
 800034e:	01cb      	lsls	r3, r1, #7
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0983      	lsrs	r3, r0, #6
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xba>
 800035a:	018b      	lsls	r3, r1, #6
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	0943      	lsrs	r3, r0, #5
 8000362:	428b      	cmp	r3, r1
 8000364:	d301      	bcc.n	800036a <__divsi3+0xc6>
 8000366:	014b      	lsls	r3, r1, #5
 8000368:	1ac0      	subs	r0, r0, r3
 800036a:	4152      	adcs	r2, r2
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d301      	bcc.n	8000376 <__divsi3+0xd2>
 8000372:	010b      	lsls	r3, r1, #4
 8000374:	1ac0      	subs	r0, r0, r3
 8000376:	4152      	adcs	r2, r2
 8000378:	08c3      	lsrs	r3, r0, #3
 800037a:	428b      	cmp	r3, r1
 800037c:	d301      	bcc.n	8000382 <__divsi3+0xde>
 800037e:	00cb      	lsls	r3, r1, #3
 8000380:	1ac0      	subs	r0, r0, r3
 8000382:	4152      	adcs	r2, r2
 8000384:	0883      	lsrs	r3, r0, #2
 8000386:	428b      	cmp	r3, r1
 8000388:	d301      	bcc.n	800038e <__divsi3+0xea>
 800038a:	008b      	lsls	r3, r1, #2
 800038c:	1ac0      	subs	r0, r0, r3
 800038e:	4152      	adcs	r2, r2
 8000390:	0843      	lsrs	r3, r0, #1
 8000392:	428b      	cmp	r3, r1
 8000394:	d301      	bcc.n	800039a <__divsi3+0xf6>
 8000396:	004b      	lsls	r3, r1, #1
 8000398:	1ac0      	subs	r0, r0, r3
 800039a:	4152      	adcs	r2, r2
 800039c:	1a41      	subs	r1, r0, r1
 800039e:	d200      	bcs.n	80003a2 <__divsi3+0xfe>
 80003a0:	4601      	mov	r1, r0
 80003a2:	4152      	adcs	r2, r2
 80003a4:	4610      	mov	r0, r2
 80003a6:	4770      	bx	lr
 80003a8:	e05d      	b.n	8000466 <__divsi3+0x1c2>
 80003aa:	0fca      	lsrs	r2, r1, #31
 80003ac:	d000      	beq.n	80003b0 <__divsi3+0x10c>
 80003ae:	4249      	negs	r1, r1
 80003b0:	1003      	asrs	r3, r0, #32
 80003b2:	d300      	bcc.n	80003b6 <__divsi3+0x112>
 80003b4:	4240      	negs	r0, r0
 80003b6:	4053      	eors	r3, r2
 80003b8:	2200      	movs	r2, #0
 80003ba:	469c      	mov	ip, r3
 80003bc:	0903      	lsrs	r3, r0, #4
 80003be:	428b      	cmp	r3, r1
 80003c0:	d32d      	bcc.n	800041e <__divsi3+0x17a>
 80003c2:	0a03      	lsrs	r3, r0, #8
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d312      	bcc.n	80003ee <__divsi3+0x14a>
 80003c8:	22fc      	movs	r2, #252	@ 0xfc
 80003ca:	0189      	lsls	r1, r1, #6
 80003cc:	ba12      	rev	r2, r2
 80003ce:	0a03      	lsrs	r3, r0, #8
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d30c      	bcc.n	80003ee <__divsi3+0x14a>
 80003d4:	0189      	lsls	r1, r1, #6
 80003d6:	1192      	asrs	r2, r2, #6
 80003d8:	428b      	cmp	r3, r1
 80003da:	d308      	bcc.n	80003ee <__divsi3+0x14a>
 80003dc:	0189      	lsls	r1, r1, #6
 80003de:	1192      	asrs	r2, r2, #6
 80003e0:	428b      	cmp	r3, r1
 80003e2:	d304      	bcc.n	80003ee <__divsi3+0x14a>
 80003e4:	0189      	lsls	r1, r1, #6
 80003e6:	d03a      	beq.n	800045e <__divsi3+0x1ba>
 80003e8:	1192      	asrs	r2, r2, #6
 80003ea:	e000      	b.n	80003ee <__divsi3+0x14a>
 80003ec:	0989      	lsrs	r1, r1, #6
 80003ee:	09c3      	lsrs	r3, r0, #7
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x154>
 80003f4:	01cb      	lsls	r3, r1, #7
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	0983      	lsrs	r3, r0, #6
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d301      	bcc.n	8000404 <__divsi3+0x160>
 8000400:	018b      	lsls	r3, r1, #6
 8000402:	1ac0      	subs	r0, r0, r3
 8000404:	4152      	adcs	r2, r2
 8000406:	0943      	lsrs	r3, r0, #5
 8000408:	428b      	cmp	r3, r1
 800040a:	d301      	bcc.n	8000410 <__divsi3+0x16c>
 800040c:	014b      	lsls	r3, r1, #5
 800040e:	1ac0      	subs	r0, r0, r3
 8000410:	4152      	adcs	r2, r2
 8000412:	0903      	lsrs	r3, r0, #4
 8000414:	428b      	cmp	r3, r1
 8000416:	d301      	bcc.n	800041c <__divsi3+0x178>
 8000418:	010b      	lsls	r3, r1, #4
 800041a:	1ac0      	subs	r0, r0, r3
 800041c:	4152      	adcs	r2, r2
 800041e:	08c3      	lsrs	r3, r0, #3
 8000420:	428b      	cmp	r3, r1
 8000422:	d301      	bcc.n	8000428 <__divsi3+0x184>
 8000424:	00cb      	lsls	r3, r1, #3
 8000426:	1ac0      	subs	r0, r0, r3
 8000428:	4152      	adcs	r2, r2
 800042a:	0883      	lsrs	r3, r0, #2
 800042c:	428b      	cmp	r3, r1
 800042e:	d301      	bcc.n	8000434 <__divsi3+0x190>
 8000430:	008b      	lsls	r3, r1, #2
 8000432:	1ac0      	subs	r0, r0, r3
 8000434:	4152      	adcs	r2, r2
 8000436:	d2d9      	bcs.n	80003ec <__divsi3+0x148>
 8000438:	0843      	lsrs	r3, r0, #1
 800043a:	428b      	cmp	r3, r1
 800043c:	d301      	bcc.n	8000442 <__divsi3+0x19e>
 800043e:	004b      	lsls	r3, r1, #1
 8000440:	1ac0      	subs	r0, r0, r3
 8000442:	4152      	adcs	r2, r2
 8000444:	1a41      	subs	r1, r0, r1
 8000446:	d200      	bcs.n	800044a <__divsi3+0x1a6>
 8000448:	4601      	mov	r1, r0
 800044a:	4663      	mov	r3, ip
 800044c:	4152      	adcs	r2, r2
 800044e:	105b      	asrs	r3, r3, #1
 8000450:	4610      	mov	r0, r2
 8000452:	d301      	bcc.n	8000458 <__divsi3+0x1b4>
 8000454:	4240      	negs	r0, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d500      	bpl.n	800045c <__divsi3+0x1b8>
 800045a:	4249      	negs	r1, r1
 800045c:	4770      	bx	lr
 800045e:	4663      	mov	r3, ip
 8000460:	105b      	asrs	r3, r3, #1
 8000462:	d300      	bcc.n	8000466 <__divsi3+0x1c2>
 8000464:	4240      	negs	r0, r0
 8000466:	b501      	push	{r0, lr}
 8000468:	2000      	movs	r0, #0
 800046a:	f000 f805 	bl	8000478 <__aeabi_idiv0>
 800046e:	bd02      	pop	{r1, pc}

08000470 <__aeabi_idivmod>:
 8000470:	2900      	cmp	r1, #0
 8000472:	d0f8      	beq.n	8000466 <__divsi3+0x1c2>
 8000474:	e716      	b.n	80002a4 <__divsi3>
 8000476:	4770      	bx	lr

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	46c0      	nop			@ (mov r8, r8)

0800047c <__aeabi_cdrcmple>:
 800047c:	4684      	mov	ip, r0
 800047e:	0010      	movs	r0, r2
 8000480:	4662      	mov	r2, ip
 8000482:	468c      	mov	ip, r1
 8000484:	0019      	movs	r1, r3
 8000486:	4663      	mov	r3, ip
 8000488:	e000      	b.n	800048c <__aeabi_cdcmpeq>
 800048a:	46c0      	nop			@ (mov r8, r8)

0800048c <__aeabi_cdcmpeq>:
 800048c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800048e:	f002 f827 	bl	80024e0 <__ledf2>
 8000492:	2800      	cmp	r0, #0
 8000494:	d401      	bmi.n	800049a <__aeabi_cdcmpeq+0xe>
 8000496:	2100      	movs	r1, #0
 8000498:	42c8      	cmn	r0, r1
 800049a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800049c <__aeabi_dcmpeq>:
 800049c:	b510      	push	{r4, lr}
 800049e:	f001 ff67 	bl	8002370 <__eqdf2>
 80004a2:	4240      	negs	r0, r0
 80004a4:	3001      	adds	r0, #1
 80004a6:	bd10      	pop	{r4, pc}

080004a8 <__aeabi_dcmplt>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f002 f819 	bl	80024e0 <__ledf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	db01      	blt.n	80004b6 <__aeabi_dcmplt+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			@ (mov r8, r8)

080004bc <__aeabi_dcmple>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f80f 	bl	80024e0 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	dd01      	ble.n	80004ca <__aeabi_dcmple+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmpgt>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f001 ff91 	bl	80023f8 <__gedf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dc01      	bgt.n	80004de <__aeabi_dcmpgt+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpge>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ff87 	bl	80023f8 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	da01      	bge.n	80004f2 <__aeabi_dcmpge+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_cfrcmple>:
 80004f8:	4684      	mov	ip, r0
 80004fa:	0008      	movs	r0, r1
 80004fc:	4661      	mov	r1, ip
 80004fe:	e7ff      	b.n	8000500 <__aeabi_cfcmpeq>

08000500 <__aeabi_cfcmpeq>:
 8000500:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000502:	f000 fcc3 	bl	8000e8c <__lesf2>
 8000506:	2800      	cmp	r0, #0
 8000508:	d401      	bmi.n	800050e <__aeabi_cfcmpeq+0xe>
 800050a:	2100      	movs	r1, #0
 800050c:	42c8      	cmn	r0, r1
 800050e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000510 <__aeabi_fcmpeq>:
 8000510:	b510      	push	{r4, lr}
 8000512:	f000 fc43 	bl	8000d9c <__eqsf2>
 8000516:	4240      	negs	r0, r0
 8000518:	3001      	adds	r0, #1
 800051a:	bd10      	pop	{r4, pc}

0800051c <__aeabi_fcmplt>:
 800051c:	b510      	push	{r4, lr}
 800051e:	f000 fcb5 	bl	8000e8c <__lesf2>
 8000522:	2800      	cmp	r0, #0
 8000524:	db01      	blt.n	800052a <__aeabi_fcmplt+0xe>
 8000526:	2000      	movs	r0, #0
 8000528:	bd10      	pop	{r4, pc}
 800052a:	2001      	movs	r0, #1
 800052c:	bd10      	pop	{r4, pc}
 800052e:	46c0      	nop			@ (mov r8, r8)

08000530 <__aeabi_fcmple>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fcab 	bl	8000e8c <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	dd01      	ble.n	800053e <__aeabi_fcmple+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmpgt>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fc51 	bl	8000dec <__gesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dc01      	bgt.n	8000552 <__aeabi_fcmpgt+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpge>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc47 	bl	8000dec <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	da01      	bge.n	8000566 <__aeabi_fcmpge+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__clzsi2>:
 800056c:	211c      	movs	r1, #28
 800056e:	2301      	movs	r3, #1
 8000570:	041b      	lsls	r3, r3, #16
 8000572:	4298      	cmp	r0, r3
 8000574:	d301      	bcc.n	800057a <__clzsi2+0xe>
 8000576:	0c00      	lsrs	r0, r0, #16
 8000578:	3910      	subs	r1, #16
 800057a:	0a1b      	lsrs	r3, r3, #8
 800057c:	4298      	cmp	r0, r3
 800057e:	d301      	bcc.n	8000584 <__clzsi2+0x18>
 8000580:	0a00      	lsrs	r0, r0, #8
 8000582:	3908      	subs	r1, #8
 8000584:	091b      	lsrs	r3, r3, #4
 8000586:	4298      	cmp	r0, r3
 8000588:	d301      	bcc.n	800058e <__clzsi2+0x22>
 800058a:	0900      	lsrs	r0, r0, #4
 800058c:	3904      	subs	r1, #4
 800058e:	a202      	add	r2, pc, #8	@ (adr r2, 8000598 <__clzsi2+0x2c>)
 8000590:	5c10      	ldrb	r0, [r2, r0]
 8000592:	1840      	adds	r0, r0, r1
 8000594:	4770      	bx	lr
 8000596:	46c0      	nop			@ (mov r8, r8)
 8000598:	02020304 	.word	0x02020304
 800059c:	01010101 	.word	0x01010101
	...

080005a8 <__aeabi_uldivmod>:
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d111      	bne.n	80005d0 <__aeabi_uldivmod+0x28>
 80005ac:	2a00      	cmp	r2, #0
 80005ae:	d10f      	bne.n	80005d0 <__aeabi_uldivmod+0x28>
 80005b0:	2900      	cmp	r1, #0
 80005b2:	d100      	bne.n	80005b6 <__aeabi_uldivmod+0xe>
 80005b4:	2800      	cmp	r0, #0
 80005b6:	d002      	beq.n	80005be <__aeabi_uldivmod+0x16>
 80005b8:	2100      	movs	r1, #0
 80005ba:	43c9      	mvns	r1, r1
 80005bc:	0008      	movs	r0, r1
 80005be:	b407      	push	{r0, r1, r2}
 80005c0:	4802      	ldr	r0, [pc, #8]	@ (80005cc <__aeabi_uldivmod+0x24>)
 80005c2:	a102      	add	r1, pc, #8	@ (adr r1, 80005cc <__aeabi_uldivmod+0x24>)
 80005c4:	1840      	adds	r0, r0, r1
 80005c6:	9002      	str	r0, [sp, #8]
 80005c8:	bd03      	pop	{r0, r1, pc}
 80005ca:	46c0      	nop			@ (mov r8, r8)
 80005cc:	fffffead 	.word	0xfffffead
 80005d0:	b403      	push	{r0, r1}
 80005d2:	4668      	mov	r0, sp
 80005d4:	b501      	push	{r0, lr}
 80005d6:	9802      	ldr	r0, [sp, #8]
 80005d8:	f000 f86a 	bl	80006b0 <__udivmoddi4>
 80005dc:	9b01      	ldr	r3, [sp, #4]
 80005de:	469e      	mov	lr, r3
 80005e0:	b002      	add	sp, #8
 80005e2:	bc0c      	pop	{r2, r3}
 80005e4:	4770      	bx	lr
 80005e6:	46c0      	nop			@ (mov r8, r8)

080005e8 <__aeabi_lmul>:
 80005e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ea:	46ce      	mov	lr, r9
 80005ec:	4699      	mov	r9, r3
 80005ee:	0c03      	lsrs	r3, r0, #16
 80005f0:	469c      	mov	ip, r3
 80005f2:	0413      	lsls	r3, r2, #16
 80005f4:	4647      	mov	r7, r8
 80005f6:	0c1b      	lsrs	r3, r3, #16
 80005f8:	001d      	movs	r5, r3
 80005fa:	000e      	movs	r6, r1
 80005fc:	4661      	mov	r1, ip
 80005fe:	0404      	lsls	r4, r0, #16
 8000600:	0c24      	lsrs	r4, r4, #16
 8000602:	b580      	push	{r7, lr}
 8000604:	0007      	movs	r7, r0
 8000606:	0c10      	lsrs	r0, r2, #16
 8000608:	434b      	muls	r3, r1
 800060a:	4365      	muls	r5, r4
 800060c:	4341      	muls	r1, r0
 800060e:	4360      	muls	r0, r4
 8000610:	0c2c      	lsrs	r4, r5, #16
 8000612:	18c0      	adds	r0, r0, r3
 8000614:	1824      	adds	r4, r4, r0
 8000616:	468c      	mov	ip, r1
 8000618:	42a3      	cmp	r3, r4
 800061a:	d903      	bls.n	8000624 <__aeabi_lmul+0x3c>
 800061c:	2380      	movs	r3, #128	@ 0x80
 800061e:	025b      	lsls	r3, r3, #9
 8000620:	4698      	mov	r8, r3
 8000622:	44c4      	add	ip, r8
 8000624:	4649      	mov	r1, r9
 8000626:	4379      	muls	r1, r7
 8000628:	4356      	muls	r6, r2
 800062a:	0c23      	lsrs	r3, r4, #16
 800062c:	042d      	lsls	r5, r5, #16
 800062e:	0c2d      	lsrs	r5, r5, #16
 8000630:	1989      	adds	r1, r1, r6
 8000632:	4463      	add	r3, ip
 8000634:	0424      	lsls	r4, r4, #16
 8000636:	1960      	adds	r0, r4, r5
 8000638:	18c9      	adds	r1, r1, r3
 800063a:	bcc0      	pop	{r6, r7}
 800063c:	46b9      	mov	r9, r7
 800063e:	46b0      	mov	r8, r6
 8000640:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000642:	46c0      	nop			@ (mov r8, r8)

08000644 <__aeabi_f2uiz>:
 8000644:	219e      	movs	r1, #158	@ 0x9e
 8000646:	b510      	push	{r4, lr}
 8000648:	05c9      	lsls	r1, r1, #23
 800064a:	1c04      	adds	r4, r0, #0
 800064c:	f7ff ff84 	bl	8000558 <__aeabi_fcmpge>
 8000650:	2800      	cmp	r0, #0
 8000652:	d103      	bne.n	800065c <__aeabi_f2uiz+0x18>
 8000654:	1c20      	adds	r0, r4, #0
 8000656:	f000 ff5f 	bl	8001518 <__aeabi_f2iz>
 800065a:	bd10      	pop	{r4, pc}
 800065c:	219e      	movs	r1, #158	@ 0x9e
 800065e:	1c20      	adds	r0, r4, #0
 8000660:	05c9      	lsls	r1, r1, #23
 8000662:	f000 fd9f 	bl	80011a4 <__aeabi_fsub>
 8000666:	f000 ff57 	bl	8001518 <__aeabi_f2iz>
 800066a:	2380      	movs	r3, #128	@ 0x80
 800066c:	061b      	lsls	r3, r3, #24
 800066e:	469c      	mov	ip, r3
 8000670:	4460      	add	r0, ip
 8000672:	e7f2      	b.n	800065a <__aeabi_f2uiz+0x16>

08000674 <__aeabi_d2uiz>:
 8000674:	b570      	push	{r4, r5, r6, lr}
 8000676:	2200      	movs	r2, #0
 8000678:	4b0c      	ldr	r3, [pc, #48]	@ (80006ac <__aeabi_d2uiz+0x38>)
 800067a:	0004      	movs	r4, r0
 800067c:	000d      	movs	r5, r1
 800067e:	f7ff ff31 	bl	80004e4 <__aeabi_dcmpge>
 8000682:	2800      	cmp	r0, #0
 8000684:	d104      	bne.n	8000690 <__aeabi_d2uiz+0x1c>
 8000686:	0020      	movs	r0, r4
 8000688:	0029      	movs	r1, r5
 800068a:	f002 fe21 	bl	80032d0 <__aeabi_d2iz>
 800068e:	bd70      	pop	{r4, r5, r6, pc}
 8000690:	4b06      	ldr	r3, [pc, #24]	@ (80006ac <__aeabi_d2uiz+0x38>)
 8000692:	2200      	movs	r2, #0
 8000694:	0020      	movs	r0, r4
 8000696:	0029      	movs	r1, r5
 8000698:	f002 fa5c 	bl	8002b54 <__aeabi_dsub>
 800069c:	f002 fe18 	bl	80032d0 <__aeabi_d2iz>
 80006a0:	2380      	movs	r3, #128	@ 0x80
 80006a2:	061b      	lsls	r3, r3, #24
 80006a4:	469c      	mov	ip, r3
 80006a6:	4460      	add	r0, ip
 80006a8:	e7f1      	b.n	800068e <__aeabi_d2uiz+0x1a>
 80006aa:	46c0      	nop			@ (mov r8, r8)
 80006ac:	41e00000 	.word	0x41e00000

080006b0 <__udivmoddi4>:
 80006b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80006b2:	4657      	mov	r7, sl
 80006b4:	464e      	mov	r6, r9
 80006b6:	4645      	mov	r5, r8
 80006b8:	46de      	mov	lr, fp
 80006ba:	b5e0      	push	{r5, r6, r7, lr}
 80006bc:	0004      	movs	r4, r0
 80006be:	000d      	movs	r5, r1
 80006c0:	4692      	mov	sl, r2
 80006c2:	4699      	mov	r9, r3
 80006c4:	b083      	sub	sp, #12
 80006c6:	428b      	cmp	r3, r1
 80006c8:	d830      	bhi.n	800072c <__udivmoddi4+0x7c>
 80006ca:	d02d      	beq.n	8000728 <__udivmoddi4+0x78>
 80006cc:	4649      	mov	r1, r9
 80006ce:	4650      	mov	r0, sl
 80006d0:	f002 ff58 	bl	8003584 <__clzdi2>
 80006d4:	0029      	movs	r1, r5
 80006d6:	0006      	movs	r6, r0
 80006d8:	0020      	movs	r0, r4
 80006da:	f002 ff53 	bl	8003584 <__clzdi2>
 80006de:	1a33      	subs	r3, r6, r0
 80006e0:	4698      	mov	r8, r3
 80006e2:	3b20      	subs	r3, #32
 80006e4:	d434      	bmi.n	8000750 <__udivmoddi4+0xa0>
 80006e6:	469b      	mov	fp, r3
 80006e8:	4653      	mov	r3, sl
 80006ea:	465a      	mov	r2, fp
 80006ec:	4093      	lsls	r3, r2
 80006ee:	4642      	mov	r2, r8
 80006f0:	001f      	movs	r7, r3
 80006f2:	4653      	mov	r3, sl
 80006f4:	4093      	lsls	r3, r2
 80006f6:	001e      	movs	r6, r3
 80006f8:	42af      	cmp	r7, r5
 80006fa:	d83b      	bhi.n	8000774 <__udivmoddi4+0xc4>
 80006fc:	42af      	cmp	r7, r5
 80006fe:	d100      	bne.n	8000702 <__udivmoddi4+0x52>
 8000700:	e079      	b.n	80007f6 <__udivmoddi4+0x146>
 8000702:	465b      	mov	r3, fp
 8000704:	1ba4      	subs	r4, r4, r6
 8000706:	41bd      	sbcs	r5, r7
 8000708:	2b00      	cmp	r3, #0
 800070a:	da00      	bge.n	800070e <__udivmoddi4+0x5e>
 800070c:	e076      	b.n	80007fc <__udivmoddi4+0x14c>
 800070e:	2200      	movs	r2, #0
 8000710:	2300      	movs	r3, #0
 8000712:	9200      	str	r2, [sp, #0]
 8000714:	9301      	str	r3, [sp, #4]
 8000716:	2301      	movs	r3, #1
 8000718:	465a      	mov	r2, fp
 800071a:	4093      	lsls	r3, r2
 800071c:	9301      	str	r3, [sp, #4]
 800071e:	2301      	movs	r3, #1
 8000720:	4642      	mov	r2, r8
 8000722:	4093      	lsls	r3, r2
 8000724:	9300      	str	r3, [sp, #0]
 8000726:	e029      	b.n	800077c <__udivmoddi4+0xcc>
 8000728:	4282      	cmp	r2, r0
 800072a:	d9cf      	bls.n	80006cc <__udivmoddi4+0x1c>
 800072c:	2200      	movs	r2, #0
 800072e:	2300      	movs	r3, #0
 8000730:	9200      	str	r2, [sp, #0]
 8000732:	9301      	str	r3, [sp, #4]
 8000734:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <__udivmoddi4+0x8e>
 800073a:	601c      	str	r4, [r3, #0]
 800073c:	605d      	str	r5, [r3, #4]
 800073e:	9800      	ldr	r0, [sp, #0]
 8000740:	9901      	ldr	r1, [sp, #4]
 8000742:	b003      	add	sp, #12
 8000744:	bcf0      	pop	{r4, r5, r6, r7}
 8000746:	46bb      	mov	fp, r7
 8000748:	46b2      	mov	sl, r6
 800074a:	46a9      	mov	r9, r5
 800074c:	46a0      	mov	r8, r4
 800074e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000750:	4642      	mov	r2, r8
 8000752:	469b      	mov	fp, r3
 8000754:	2320      	movs	r3, #32
 8000756:	1a9b      	subs	r3, r3, r2
 8000758:	4652      	mov	r2, sl
 800075a:	40da      	lsrs	r2, r3
 800075c:	4641      	mov	r1, r8
 800075e:	0013      	movs	r3, r2
 8000760:	464a      	mov	r2, r9
 8000762:	408a      	lsls	r2, r1
 8000764:	0017      	movs	r7, r2
 8000766:	4642      	mov	r2, r8
 8000768:	431f      	orrs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d9c3      	bls.n	80006fc <__udivmoddi4+0x4c>
 8000774:	2200      	movs	r2, #0
 8000776:	2300      	movs	r3, #0
 8000778:	9200      	str	r2, [sp, #0]
 800077a:	9301      	str	r3, [sp, #4]
 800077c:	4643      	mov	r3, r8
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0d8      	beq.n	8000734 <__udivmoddi4+0x84>
 8000782:	07fb      	lsls	r3, r7, #31
 8000784:	0872      	lsrs	r2, r6, #1
 8000786:	431a      	orrs	r2, r3
 8000788:	4646      	mov	r6, r8
 800078a:	087b      	lsrs	r3, r7, #1
 800078c:	e00e      	b.n	80007ac <__udivmoddi4+0xfc>
 800078e:	42ab      	cmp	r3, r5
 8000790:	d101      	bne.n	8000796 <__udivmoddi4+0xe6>
 8000792:	42a2      	cmp	r2, r4
 8000794:	d80c      	bhi.n	80007b0 <__udivmoddi4+0x100>
 8000796:	1aa4      	subs	r4, r4, r2
 8000798:	419d      	sbcs	r5, r3
 800079a:	2001      	movs	r0, #1
 800079c:	1924      	adds	r4, r4, r4
 800079e:	416d      	adcs	r5, r5
 80007a0:	2100      	movs	r1, #0
 80007a2:	3e01      	subs	r6, #1
 80007a4:	1824      	adds	r4, r4, r0
 80007a6:	414d      	adcs	r5, r1
 80007a8:	2e00      	cmp	r6, #0
 80007aa:	d006      	beq.n	80007ba <__udivmoddi4+0x10a>
 80007ac:	42ab      	cmp	r3, r5
 80007ae:	d9ee      	bls.n	800078e <__udivmoddi4+0xde>
 80007b0:	3e01      	subs	r6, #1
 80007b2:	1924      	adds	r4, r4, r4
 80007b4:	416d      	adcs	r5, r5
 80007b6:	2e00      	cmp	r6, #0
 80007b8:	d1f8      	bne.n	80007ac <__udivmoddi4+0xfc>
 80007ba:	9800      	ldr	r0, [sp, #0]
 80007bc:	9901      	ldr	r1, [sp, #4]
 80007be:	465b      	mov	r3, fp
 80007c0:	1900      	adds	r0, r0, r4
 80007c2:	4169      	adcs	r1, r5
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	db24      	blt.n	8000812 <__udivmoddi4+0x162>
 80007c8:	002b      	movs	r3, r5
 80007ca:	465a      	mov	r2, fp
 80007cc:	4644      	mov	r4, r8
 80007ce:	40d3      	lsrs	r3, r2
 80007d0:	002a      	movs	r2, r5
 80007d2:	40e2      	lsrs	r2, r4
 80007d4:	001c      	movs	r4, r3
 80007d6:	465b      	mov	r3, fp
 80007d8:	0015      	movs	r5, r2
 80007da:	2b00      	cmp	r3, #0
 80007dc:	db2a      	blt.n	8000834 <__udivmoddi4+0x184>
 80007de:	0026      	movs	r6, r4
 80007e0:	409e      	lsls	r6, r3
 80007e2:	0033      	movs	r3, r6
 80007e4:	0026      	movs	r6, r4
 80007e6:	4647      	mov	r7, r8
 80007e8:	40be      	lsls	r6, r7
 80007ea:	0032      	movs	r2, r6
 80007ec:	1a80      	subs	r0, r0, r2
 80007ee:	4199      	sbcs	r1, r3
 80007f0:	9000      	str	r0, [sp, #0]
 80007f2:	9101      	str	r1, [sp, #4]
 80007f4:	e79e      	b.n	8000734 <__udivmoddi4+0x84>
 80007f6:	42a3      	cmp	r3, r4
 80007f8:	d8bc      	bhi.n	8000774 <__udivmoddi4+0xc4>
 80007fa:	e782      	b.n	8000702 <__udivmoddi4+0x52>
 80007fc:	4642      	mov	r2, r8
 80007fe:	2320      	movs	r3, #32
 8000800:	2100      	movs	r1, #0
 8000802:	1a9b      	subs	r3, r3, r2
 8000804:	2200      	movs	r2, #0
 8000806:	9100      	str	r1, [sp, #0]
 8000808:	9201      	str	r2, [sp, #4]
 800080a:	2201      	movs	r2, #1
 800080c:	40da      	lsrs	r2, r3
 800080e:	9201      	str	r2, [sp, #4]
 8000810:	e785      	b.n	800071e <__udivmoddi4+0x6e>
 8000812:	4642      	mov	r2, r8
 8000814:	2320      	movs	r3, #32
 8000816:	1a9b      	subs	r3, r3, r2
 8000818:	002a      	movs	r2, r5
 800081a:	4646      	mov	r6, r8
 800081c:	409a      	lsls	r2, r3
 800081e:	0023      	movs	r3, r4
 8000820:	40f3      	lsrs	r3, r6
 8000822:	4644      	mov	r4, r8
 8000824:	4313      	orrs	r3, r2
 8000826:	002a      	movs	r2, r5
 8000828:	40e2      	lsrs	r2, r4
 800082a:	001c      	movs	r4, r3
 800082c:	465b      	mov	r3, fp
 800082e:	0015      	movs	r5, r2
 8000830:	2b00      	cmp	r3, #0
 8000832:	dad4      	bge.n	80007de <__udivmoddi4+0x12e>
 8000834:	4642      	mov	r2, r8
 8000836:	002f      	movs	r7, r5
 8000838:	2320      	movs	r3, #32
 800083a:	0026      	movs	r6, r4
 800083c:	4097      	lsls	r7, r2
 800083e:	1a9b      	subs	r3, r3, r2
 8000840:	40de      	lsrs	r6, r3
 8000842:	003b      	movs	r3, r7
 8000844:	4333      	orrs	r3, r6
 8000846:	e7cd      	b.n	80007e4 <__udivmoddi4+0x134>

08000848 <__aeabi_fadd>:
 8000848:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800084a:	46ce      	mov	lr, r9
 800084c:	4647      	mov	r7, r8
 800084e:	0243      	lsls	r3, r0, #9
 8000850:	0a5a      	lsrs	r2, r3, #9
 8000852:	024e      	lsls	r6, r1, #9
 8000854:	0045      	lsls	r5, r0, #1
 8000856:	0fc4      	lsrs	r4, r0, #31
 8000858:	0048      	lsls	r0, r1, #1
 800085a:	4691      	mov	r9, r2
 800085c:	0e2d      	lsrs	r5, r5, #24
 800085e:	0a72      	lsrs	r2, r6, #9
 8000860:	0e00      	lsrs	r0, r0, #24
 8000862:	4694      	mov	ip, r2
 8000864:	b580      	push	{r7, lr}
 8000866:	099b      	lsrs	r3, r3, #6
 8000868:	0fc9      	lsrs	r1, r1, #31
 800086a:	09b6      	lsrs	r6, r6, #6
 800086c:	1a2a      	subs	r2, r5, r0
 800086e:	428c      	cmp	r4, r1
 8000870:	d021      	beq.n	80008b6 <__aeabi_fadd+0x6e>
 8000872:	2a00      	cmp	r2, #0
 8000874:	dd0d      	ble.n	8000892 <__aeabi_fadd+0x4a>
 8000876:	2800      	cmp	r0, #0
 8000878:	d12d      	bne.n	80008d6 <__aeabi_fadd+0x8e>
 800087a:	2e00      	cmp	r6, #0
 800087c:	d100      	bne.n	8000880 <__aeabi_fadd+0x38>
 800087e:	e08d      	b.n	800099c <__aeabi_fadd+0x154>
 8000880:	1e51      	subs	r1, r2, #1
 8000882:	2a01      	cmp	r2, #1
 8000884:	d100      	bne.n	8000888 <__aeabi_fadd+0x40>
 8000886:	e11d      	b.n	8000ac4 <__aeabi_fadd+0x27c>
 8000888:	2aff      	cmp	r2, #255	@ 0xff
 800088a:	d100      	bne.n	800088e <__aeabi_fadd+0x46>
 800088c:	e0ab      	b.n	80009e6 <__aeabi_fadd+0x19e>
 800088e:	000a      	movs	r2, r1
 8000890:	e027      	b.n	80008e2 <__aeabi_fadd+0x9a>
 8000892:	2a00      	cmp	r2, #0
 8000894:	d04d      	beq.n	8000932 <__aeabi_fadd+0xea>
 8000896:	1b42      	subs	r2, r0, r5
 8000898:	2d00      	cmp	r5, #0
 800089a:	d000      	beq.n	800089e <__aeabi_fadd+0x56>
 800089c:	e0cc      	b.n	8000a38 <__aeabi_fadd+0x1f0>
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d100      	bne.n	80008a4 <__aeabi_fadd+0x5c>
 80008a2:	e079      	b.n	8000998 <__aeabi_fadd+0x150>
 80008a4:	1e54      	subs	r4, r2, #1
 80008a6:	2a01      	cmp	r2, #1
 80008a8:	d100      	bne.n	80008ac <__aeabi_fadd+0x64>
 80008aa:	e128      	b.n	8000afe <__aeabi_fadd+0x2b6>
 80008ac:	2aff      	cmp	r2, #255	@ 0xff
 80008ae:	d100      	bne.n	80008b2 <__aeabi_fadd+0x6a>
 80008b0:	e097      	b.n	80009e2 <__aeabi_fadd+0x19a>
 80008b2:	0022      	movs	r2, r4
 80008b4:	e0c5      	b.n	8000a42 <__aeabi_fadd+0x1fa>
 80008b6:	2a00      	cmp	r2, #0
 80008b8:	dc00      	bgt.n	80008bc <__aeabi_fadd+0x74>
 80008ba:	e096      	b.n	80009ea <__aeabi_fadd+0x1a2>
 80008bc:	2800      	cmp	r0, #0
 80008be:	d04f      	beq.n	8000960 <__aeabi_fadd+0x118>
 80008c0:	2dff      	cmp	r5, #255	@ 0xff
 80008c2:	d100      	bne.n	80008c6 <__aeabi_fadd+0x7e>
 80008c4:	e08f      	b.n	80009e6 <__aeabi_fadd+0x19e>
 80008c6:	2180      	movs	r1, #128	@ 0x80
 80008c8:	04c9      	lsls	r1, r1, #19
 80008ca:	430e      	orrs	r6, r1
 80008cc:	2a1b      	cmp	r2, #27
 80008ce:	dd51      	ble.n	8000974 <__aeabi_fadd+0x12c>
 80008d0:	002a      	movs	r2, r5
 80008d2:	3301      	adds	r3, #1
 80008d4:	e018      	b.n	8000908 <__aeabi_fadd+0xc0>
 80008d6:	2dff      	cmp	r5, #255	@ 0xff
 80008d8:	d100      	bne.n	80008dc <__aeabi_fadd+0x94>
 80008da:	e084      	b.n	80009e6 <__aeabi_fadd+0x19e>
 80008dc:	2180      	movs	r1, #128	@ 0x80
 80008de:	04c9      	lsls	r1, r1, #19
 80008e0:	430e      	orrs	r6, r1
 80008e2:	2101      	movs	r1, #1
 80008e4:	2a1b      	cmp	r2, #27
 80008e6:	dc08      	bgt.n	80008fa <__aeabi_fadd+0xb2>
 80008e8:	0031      	movs	r1, r6
 80008ea:	2020      	movs	r0, #32
 80008ec:	40d1      	lsrs	r1, r2
 80008ee:	1a82      	subs	r2, r0, r2
 80008f0:	4096      	lsls	r6, r2
 80008f2:	0032      	movs	r2, r6
 80008f4:	1e50      	subs	r0, r2, #1
 80008f6:	4182      	sbcs	r2, r0
 80008f8:	4311      	orrs	r1, r2
 80008fa:	1a5b      	subs	r3, r3, r1
 80008fc:	015a      	lsls	r2, r3, #5
 80008fe:	d459      	bmi.n	80009b4 <__aeabi_fadd+0x16c>
 8000900:	2107      	movs	r1, #7
 8000902:	002a      	movs	r2, r5
 8000904:	4019      	ands	r1, r3
 8000906:	d049      	beq.n	800099c <__aeabi_fadd+0x154>
 8000908:	210f      	movs	r1, #15
 800090a:	4019      	ands	r1, r3
 800090c:	2904      	cmp	r1, #4
 800090e:	d000      	beq.n	8000912 <__aeabi_fadd+0xca>
 8000910:	3304      	adds	r3, #4
 8000912:	0159      	lsls	r1, r3, #5
 8000914:	d542      	bpl.n	800099c <__aeabi_fadd+0x154>
 8000916:	1c50      	adds	r0, r2, #1
 8000918:	2afe      	cmp	r2, #254	@ 0xfe
 800091a:	d03a      	beq.n	8000992 <__aeabi_fadd+0x14a>
 800091c:	019b      	lsls	r3, r3, #6
 800091e:	b2c0      	uxtb	r0, r0
 8000920:	0a5b      	lsrs	r3, r3, #9
 8000922:	05c0      	lsls	r0, r0, #23
 8000924:	4318      	orrs	r0, r3
 8000926:	07e4      	lsls	r4, r4, #31
 8000928:	4320      	orrs	r0, r4
 800092a:	bcc0      	pop	{r6, r7}
 800092c:	46b9      	mov	r9, r7
 800092e:	46b0      	mov	r8, r6
 8000930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000932:	20fe      	movs	r0, #254	@ 0xfe
 8000934:	4680      	mov	r8, r0
 8000936:	1c6f      	adds	r7, r5, #1
 8000938:	0038      	movs	r0, r7
 800093a:	4647      	mov	r7, r8
 800093c:	4207      	tst	r7, r0
 800093e:	d000      	beq.n	8000942 <__aeabi_fadd+0xfa>
 8000940:	e08e      	b.n	8000a60 <__aeabi_fadd+0x218>
 8000942:	2d00      	cmp	r5, #0
 8000944:	d000      	beq.n	8000948 <__aeabi_fadd+0x100>
 8000946:	e0b4      	b.n	8000ab2 <__aeabi_fadd+0x26a>
 8000948:	2b00      	cmp	r3, #0
 800094a:	d100      	bne.n	800094e <__aeabi_fadd+0x106>
 800094c:	e0db      	b.n	8000b06 <__aeabi_fadd+0x2be>
 800094e:	2e00      	cmp	r6, #0
 8000950:	d06c      	beq.n	8000a2c <__aeabi_fadd+0x1e4>
 8000952:	1b98      	subs	r0, r3, r6
 8000954:	0145      	lsls	r5, r0, #5
 8000956:	d400      	bmi.n	800095a <__aeabi_fadd+0x112>
 8000958:	e0f7      	b.n	8000b4a <__aeabi_fadd+0x302>
 800095a:	000c      	movs	r4, r1
 800095c:	1af3      	subs	r3, r6, r3
 800095e:	e03d      	b.n	80009dc <__aeabi_fadd+0x194>
 8000960:	2e00      	cmp	r6, #0
 8000962:	d01b      	beq.n	800099c <__aeabi_fadd+0x154>
 8000964:	1e51      	subs	r1, r2, #1
 8000966:	2a01      	cmp	r2, #1
 8000968:	d100      	bne.n	800096c <__aeabi_fadd+0x124>
 800096a:	e082      	b.n	8000a72 <__aeabi_fadd+0x22a>
 800096c:	2aff      	cmp	r2, #255	@ 0xff
 800096e:	d03a      	beq.n	80009e6 <__aeabi_fadd+0x19e>
 8000970:	000a      	movs	r2, r1
 8000972:	e7ab      	b.n	80008cc <__aeabi_fadd+0x84>
 8000974:	0031      	movs	r1, r6
 8000976:	2020      	movs	r0, #32
 8000978:	40d1      	lsrs	r1, r2
 800097a:	1a82      	subs	r2, r0, r2
 800097c:	4096      	lsls	r6, r2
 800097e:	0032      	movs	r2, r6
 8000980:	1e50      	subs	r0, r2, #1
 8000982:	4182      	sbcs	r2, r0
 8000984:	430a      	orrs	r2, r1
 8000986:	189b      	adds	r3, r3, r2
 8000988:	015a      	lsls	r2, r3, #5
 800098a:	d5b9      	bpl.n	8000900 <__aeabi_fadd+0xb8>
 800098c:	1c6a      	adds	r2, r5, #1
 800098e:	2dfe      	cmp	r5, #254	@ 0xfe
 8000990:	d175      	bne.n	8000a7e <__aeabi_fadd+0x236>
 8000992:	20ff      	movs	r0, #255	@ 0xff
 8000994:	2300      	movs	r3, #0
 8000996:	e7c4      	b.n	8000922 <__aeabi_fadd+0xda>
 8000998:	000c      	movs	r4, r1
 800099a:	0033      	movs	r3, r6
 800099c:	08db      	lsrs	r3, r3, #3
 800099e:	2aff      	cmp	r2, #255	@ 0xff
 80009a0:	d146      	bne.n	8000a30 <__aeabi_fadd+0x1e8>
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d0f5      	beq.n	8000992 <__aeabi_fadd+0x14a>
 80009a6:	2280      	movs	r2, #128	@ 0x80
 80009a8:	03d2      	lsls	r2, r2, #15
 80009aa:	4313      	orrs	r3, r2
 80009ac:	025b      	lsls	r3, r3, #9
 80009ae:	20ff      	movs	r0, #255	@ 0xff
 80009b0:	0a5b      	lsrs	r3, r3, #9
 80009b2:	e7b6      	b.n	8000922 <__aeabi_fadd+0xda>
 80009b4:	019f      	lsls	r7, r3, #6
 80009b6:	09bf      	lsrs	r7, r7, #6
 80009b8:	0038      	movs	r0, r7
 80009ba:	f7ff fdd7 	bl	800056c <__clzsi2>
 80009be:	3805      	subs	r0, #5
 80009c0:	4087      	lsls	r7, r0
 80009c2:	4285      	cmp	r5, r0
 80009c4:	dc24      	bgt.n	8000a10 <__aeabi_fadd+0x1c8>
 80009c6:	003b      	movs	r3, r7
 80009c8:	2120      	movs	r1, #32
 80009ca:	1b42      	subs	r2, r0, r5
 80009cc:	3201      	adds	r2, #1
 80009ce:	40d3      	lsrs	r3, r2
 80009d0:	1a8a      	subs	r2, r1, r2
 80009d2:	4097      	lsls	r7, r2
 80009d4:	1e7a      	subs	r2, r7, #1
 80009d6:	4197      	sbcs	r7, r2
 80009d8:	2200      	movs	r2, #0
 80009da:	433b      	orrs	r3, r7
 80009dc:	0759      	lsls	r1, r3, #29
 80009de:	d193      	bne.n	8000908 <__aeabi_fadd+0xc0>
 80009e0:	e797      	b.n	8000912 <__aeabi_fadd+0xca>
 80009e2:	000c      	movs	r4, r1
 80009e4:	0033      	movs	r3, r6
 80009e6:	08db      	lsrs	r3, r3, #3
 80009e8:	e7db      	b.n	80009a2 <__aeabi_fadd+0x15a>
 80009ea:	2a00      	cmp	r2, #0
 80009ec:	d014      	beq.n	8000a18 <__aeabi_fadd+0x1d0>
 80009ee:	1b42      	subs	r2, r0, r5
 80009f0:	2d00      	cmp	r5, #0
 80009f2:	d14b      	bne.n	8000a8c <__aeabi_fadd+0x244>
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d0d0      	beq.n	800099a <__aeabi_fadd+0x152>
 80009f8:	1e51      	subs	r1, r2, #1
 80009fa:	2a01      	cmp	r2, #1
 80009fc:	d100      	bne.n	8000a00 <__aeabi_fadd+0x1b8>
 80009fe:	e09e      	b.n	8000b3e <__aeabi_fadd+0x2f6>
 8000a00:	2aff      	cmp	r2, #255	@ 0xff
 8000a02:	d0ef      	beq.n	80009e4 <__aeabi_fadd+0x19c>
 8000a04:	000a      	movs	r2, r1
 8000a06:	2a1b      	cmp	r2, #27
 8000a08:	dd5f      	ble.n	8000aca <__aeabi_fadd+0x282>
 8000a0a:	0002      	movs	r2, r0
 8000a0c:	1c73      	adds	r3, r6, #1
 8000a0e:	e77b      	b.n	8000908 <__aeabi_fadd+0xc0>
 8000a10:	4b50      	ldr	r3, [pc, #320]	@ (8000b54 <__aeabi_fadd+0x30c>)
 8000a12:	1a2a      	subs	r2, r5, r0
 8000a14:	403b      	ands	r3, r7
 8000a16:	e7e1      	b.n	80009dc <__aeabi_fadd+0x194>
 8000a18:	21fe      	movs	r1, #254	@ 0xfe
 8000a1a:	1c6a      	adds	r2, r5, #1
 8000a1c:	4211      	tst	r1, r2
 8000a1e:	d13b      	bne.n	8000a98 <__aeabi_fadd+0x250>
 8000a20:	2d00      	cmp	r5, #0
 8000a22:	d15d      	bne.n	8000ae0 <__aeabi_fadd+0x298>
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d07f      	beq.n	8000b28 <__aeabi_fadd+0x2e0>
 8000a28:	2e00      	cmp	r6, #0
 8000a2a:	d17f      	bne.n	8000b2c <__aeabi_fadd+0x2e4>
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	08db      	lsrs	r3, r3, #3
 8000a30:	025b      	lsls	r3, r3, #9
 8000a32:	0a5b      	lsrs	r3, r3, #9
 8000a34:	b2d0      	uxtb	r0, r2
 8000a36:	e774      	b.n	8000922 <__aeabi_fadd+0xda>
 8000a38:	28ff      	cmp	r0, #255	@ 0xff
 8000a3a:	d0d2      	beq.n	80009e2 <__aeabi_fadd+0x19a>
 8000a3c:	2480      	movs	r4, #128	@ 0x80
 8000a3e:	04e4      	lsls	r4, r4, #19
 8000a40:	4323      	orrs	r3, r4
 8000a42:	2401      	movs	r4, #1
 8000a44:	2a1b      	cmp	r2, #27
 8000a46:	dc07      	bgt.n	8000a58 <__aeabi_fadd+0x210>
 8000a48:	001c      	movs	r4, r3
 8000a4a:	2520      	movs	r5, #32
 8000a4c:	40d4      	lsrs	r4, r2
 8000a4e:	1aaa      	subs	r2, r5, r2
 8000a50:	4093      	lsls	r3, r2
 8000a52:	1e5a      	subs	r2, r3, #1
 8000a54:	4193      	sbcs	r3, r2
 8000a56:	431c      	orrs	r4, r3
 8000a58:	1b33      	subs	r3, r6, r4
 8000a5a:	0005      	movs	r5, r0
 8000a5c:	000c      	movs	r4, r1
 8000a5e:	e74d      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000a60:	1b9f      	subs	r7, r3, r6
 8000a62:	017a      	lsls	r2, r7, #5
 8000a64:	d422      	bmi.n	8000aac <__aeabi_fadd+0x264>
 8000a66:	2f00      	cmp	r7, #0
 8000a68:	d1a6      	bne.n	80009b8 <__aeabi_fadd+0x170>
 8000a6a:	2400      	movs	r4, #0
 8000a6c:	2000      	movs	r0, #0
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e757      	b.n	8000922 <__aeabi_fadd+0xda>
 8000a72:	199b      	adds	r3, r3, r6
 8000a74:	2501      	movs	r5, #1
 8000a76:	3201      	adds	r2, #1
 8000a78:	0159      	lsls	r1, r3, #5
 8000a7a:	d400      	bmi.n	8000a7e <__aeabi_fadd+0x236>
 8000a7c:	e740      	b.n	8000900 <__aeabi_fadd+0xb8>
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4835      	ldr	r0, [pc, #212]	@ (8000b58 <__aeabi_fadd+0x310>)
 8000a82:	4019      	ands	r1, r3
 8000a84:	085b      	lsrs	r3, r3, #1
 8000a86:	4003      	ands	r3, r0
 8000a88:	430b      	orrs	r3, r1
 8000a8a:	e7a7      	b.n	80009dc <__aeabi_fadd+0x194>
 8000a8c:	28ff      	cmp	r0, #255	@ 0xff
 8000a8e:	d0a9      	beq.n	80009e4 <__aeabi_fadd+0x19c>
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	04c9      	lsls	r1, r1, #19
 8000a94:	430b      	orrs	r3, r1
 8000a96:	e7b6      	b.n	8000a06 <__aeabi_fadd+0x1be>
 8000a98:	2aff      	cmp	r2, #255	@ 0xff
 8000a9a:	d100      	bne.n	8000a9e <__aeabi_fadd+0x256>
 8000a9c:	e779      	b.n	8000992 <__aeabi_fadd+0x14a>
 8000a9e:	199b      	adds	r3, r3, r6
 8000aa0:	085b      	lsrs	r3, r3, #1
 8000aa2:	0759      	lsls	r1, r3, #29
 8000aa4:	d000      	beq.n	8000aa8 <__aeabi_fadd+0x260>
 8000aa6:	e72f      	b.n	8000908 <__aeabi_fadd+0xc0>
 8000aa8:	08db      	lsrs	r3, r3, #3
 8000aaa:	e7c1      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000aac:	000c      	movs	r4, r1
 8000aae:	1af7      	subs	r7, r6, r3
 8000ab0:	e782      	b.n	80009b8 <__aeabi_fadd+0x170>
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d12c      	bne.n	8000b10 <__aeabi_fadd+0x2c8>
 8000ab6:	2e00      	cmp	r6, #0
 8000ab8:	d193      	bne.n	80009e2 <__aeabi_fadd+0x19a>
 8000aba:	2380      	movs	r3, #128	@ 0x80
 8000abc:	2400      	movs	r4, #0
 8000abe:	20ff      	movs	r0, #255	@ 0xff
 8000ac0:	03db      	lsls	r3, r3, #15
 8000ac2:	e72e      	b.n	8000922 <__aeabi_fadd+0xda>
 8000ac4:	2501      	movs	r5, #1
 8000ac6:	1b9b      	subs	r3, r3, r6
 8000ac8:	e718      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000aca:	0019      	movs	r1, r3
 8000acc:	2520      	movs	r5, #32
 8000ace:	40d1      	lsrs	r1, r2
 8000ad0:	1aaa      	subs	r2, r5, r2
 8000ad2:	4093      	lsls	r3, r2
 8000ad4:	1e5a      	subs	r2, r3, #1
 8000ad6:	4193      	sbcs	r3, r2
 8000ad8:	430b      	orrs	r3, r1
 8000ada:	0005      	movs	r5, r0
 8000adc:	199b      	adds	r3, r3, r6
 8000ade:	e753      	b.n	8000988 <__aeabi_fadd+0x140>
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d100      	bne.n	8000ae6 <__aeabi_fadd+0x29e>
 8000ae4:	e77e      	b.n	80009e4 <__aeabi_fadd+0x19c>
 8000ae6:	2e00      	cmp	r6, #0
 8000ae8:	d100      	bne.n	8000aec <__aeabi_fadd+0x2a4>
 8000aea:	e77c      	b.n	80009e6 <__aeabi_fadd+0x19e>
 8000aec:	2280      	movs	r2, #128	@ 0x80
 8000aee:	03d2      	lsls	r2, r2, #15
 8000af0:	4591      	cmp	r9, r2
 8000af2:	d302      	bcc.n	8000afa <__aeabi_fadd+0x2b2>
 8000af4:	4594      	cmp	ip, r2
 8000af6:	d200      	bcs.n	8000afa <__aeabi_fadd+0x2b2>
 8000af8:	0033      	movs	r3, r6
 8000afa:	08db      	lsrs	r3, r3, #3
 8000afc:	e753      	b.n	80009a6 <__aeabi_fadd+0x15e>
 8000afe:	000c      	movs	r4, r1
 8000b00:	1af3      	subs	r3, r6, r3
 8000b02:	3501      	adds	r5, #1
 8000b04:	e6fa      	b.n	80008fc <__aeabi_fadd+0xb4>
 8000b06:	2e00      	cmp	r6, #0
 8000b08:	d0af      	beq.n	8000a6a <__aeabi_fadd+0x222>
 8000b0a:	000c      	movs	r4, r1
 8000b0c:	0033      	movs	r3, r6
 8000b0e:	e78d      	b.n	8000a2c <__aeabi_fadd+0x1e4>
 8000b10:	2e00      	cmp	r6, #0
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x2ce>
 8000b14:	e767      	b.n	80009e6 <__aeabi_fadd+0x19e>
 8000b16:	2280      	movs	r2, #128	@ 0x80
 8000b18:	03d2      	lsls	r2, r2, #15
 8000b1a:	4591      	cmp	r9, r2
 8000b1c:	d3ed      	bcc.n	8000afa <__aeabi_fadd+0x2b2>
 8000b1e:	4594      	cmp	ip, r2
 8000b20:	d2eb      	bcs.n	8000afa <__aeabi_fadd+0x2b2>
 8000b22:	000c      	movs	r4, r1
 8000b24:	0033      	movs	r3, r6
 8000b26:	e7e8      	b.n	8000afa <__aeabi_fadd+0x2b2>
 8000b28:	0033      	movs	r3, r6
 8000b2a:	e77f      	b.n	8000a2c <__aeabi_fadd+0x1e4>
 8000b2c:	199b      	adds	r3, r3, r6
 8000b2e:	2200      	movs	r2, #0
 8000b30:	0159      	lsls	r1, r3, #5
 8000b32:	d5b9      	bpl.n	8000aa8 <__aeabi_fadd+0x260>
 8000b34:	4a07      	ldr	r2, [pc, #28]	@ (8000b54 <__aeabi_fadd+0x30c>)
 8000b36:	4013      	ands	r3, r2
 8000b38:	08db      	lsrs	r3, r3, #3
 8000b3a:	2201      	movs	r2, #1
 8000b3c:	e778      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000b3e:	199b      	adds	r3, r3, r6
 8000b40:	3201      	adds	r2, #1
 8000b42:	3501      	adds	r5, #1
 8000b44:	0159      	lsls	r1, r3, #5
 8000b46:	d49a      	bmi.n	8000a7e <__aeabi_fadd+0x236>
 8000b48:	e6da      	b.n	8000900 <__aeabi_fadd+0xb8>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d08d      	beq.n	8000a6a <__aeabi_fadd+0x222>
 8000b4e:	08db      	lsrs	r3, r3, #3
 8000b50:	e76e      	b.n	8000a30 <__aeabi_fadd+0x1e8>
 8000b52:	46c0      	nop			@ (mov r8, r8)
 8000b54:	fbffffff 	.word	0xfbffffff
 8000b58:	7dffffff 	.word	0x7dffffff

08000b5c <__aeabi_fdiv>:
 8000b5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b5e:	464f      	mov	r7, r9
 8000b60:	4646      	mov	r6, r8
 8000b62:	46d6      	mov	lr, sl
 8000b64:	0244      	lsls	r4, r0, #9
 8000b66:	b5c0      	push	{r6, r7, lr}
 8000b68:	0047      	lsls	r7, r0, #1
 8000b6a:	1c0e      	adds	r6, r1, #0
 8000b6c:	0a64      	lsrs	r4, r4, #9
 8000b6e:	0e3f      	lsrs	r7, r7, #24
 8000b70:	0fc5      	lsrs	r5, r0, #31
 8000b72:	2f00      	cmp	r7, #0
 8000b74:	d03c      	beq.n	8000bf0 <__aeabi_fdiv+0x94>
 8000b76:	2fff      	cmp	r7, #255	@ 0xff
 8000b78:	d042      	beq.n	8000c00 <__aeabi_fdiv+0xa4>
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	2280      	movs	r2, #128	@ 0x80
 8000b7e:	4699      	mov	r9, r3
 8000b80:	469a      	mov	sl, r3
 8000b82:	00e4      	lsls	r4, r4, #3
 8000b84:	04d2      	lsls	r2, r2, #19
 8000b86:	4314      	orrs	r4, r2
 8000b88:	3f7f      	subs	r7, #127	@ 0x7f
 8000b8a:	0273      	lsls	r3, r6, #9
 8000b8c:	0a5b      	lsrs	r3, r3, #9
 8000b8e:	4698      	mov	r8, r3
 8000b90:	0073      	lsls	r3, r6, #1
 8000b92:	0e1b      	lsrs	r3, r3, #24
 8000b94:	0ff6      	lsrs	r6, r6, #31
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d01b      	beq.n	8000bd2 <__aeabi_fdiv+0x76>
 8000b9a:	2bff      	cmp	r3, #255	@ 0xff
 8000b9c:	d013      	beq.n	8000bc6 <__aeabi_fdiv+0x6a>
 8000b9e:	4642      	mov	r2, r8
 8000ba0:	2180      	movs	r1, #128	@ 0x80
 8000ba2:	00d2      	lsls	r2, r2, #3
 8000ba4:	04c9      	lsls	r1, r1, #19
 8000ba6:	4311      	orrs	r1, r2
 8000ba8:	4688      	mov	r8, r1
 8000baa:	2000      	movs	r0, #0
 8000bac:	3b7f      	subs	r3, #127	@ 0x7f
 8000bae:	0029      	movs	r1, r5
 8000bb0:	1aff      	subs	r7, r7, r3
 8000bb2:	464b      	mov	r3, r9
 8000bb4:	4071      	eors	r1, r6
 8000bb6:	b2c9      	uxtb	r1, r1
 8000bb8:	2b0f      	cmp	r3, #15
 8000bba:	d900      	bls.n	8000bbe <__aeabi_fdiv+0x62>
 8000bbc:	e0b5      	b.n	8000d2a <__aeabi_fdiv+0x1ce>
 8000bbe:	4a74      	ldr	r2, [pc, #464]	@ (8000d90 <__aeabi_fdiv+0x234>)
 8000bc0:	009b      	lsls	r3, r3, #2
 8000bc2:	58d3      	ldr	r3, [r2, r3]
 8000bc4:	469f      	mov	pc, r3
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d13f      	bne.n	8000c4c <__aeabi_fdiv+0xf0>
 8000bcc:	3fff      	subs	r7, #255	@ 0xff
 8000bce:	3302      	adds	r3, #2
 8000bd0:	e003      	b.n	8000bda <__aeabi_fdiv+0x7e>
 8000bd2:	4643      	mov	r3, r8
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d12d      	bne.n	8000c34 <__aeabi_fdiv+0xd8>
 8000bd8:	2301      	movs	r3, #1
 8000bda:	0029      	movs	r1, r5
 8000bdc:	464a      	mov	r2, r9
 8000bde:	4071      	eors	r1, r6
 8000be0:	b2c9      	uxtb	r1, r1
 8000be2:	431a      	orrs	r2, r3
 8000be4:	2a0e      	cmp	r2, #14
 8000be6:	d838      	bhi.n	8000c5a <__aeabi_fdiv+0xfe>
 8000be8:	486a      	ldr	r0, [pc, #424]	@ (8000d94 <__aeabi_fdiv+0x238>)
 8000bea:	0092      	lsls	r2, r2, #2
 8000bec:	5882      	ldr	r2, [r0, r2]
 8000bee:	4697      	mov	pc, r2
 8000bf0:	2c00      	cmp	r4, #0
 8000bf2:	d113      	bne.n	8000c1c <__aeabi_fdiv+0xc0>
 8000bf4:	2304      	movs	r3, #4
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	3b03      	subs	r3, #3
 8000bfa:	2700      	movs	r7, #0
 8000bfc:	469a      	mov	sl, r3
 8000bfe:	e7c4      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c00:	2c00      	cmp	r4, #0
 8000c02:	d105      	bne.n	8000c10 <__aeabi_fdiv+0xb4>
 8000c04:	2308      	movs	r3, #8
 8000c06:	4699      	mov	r9, r3
 8000c08:	3b06      	subs	r3, #6
 8000c0a:	27ff      	movs	r7, #255	@ 0xff
 8000c0c:	469a      	mov	sl, r3
 8000c0e:	e7bc      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c10:	230c      	movs	r3, #12
 8000c12:	4699      	mov	r9, r3
 8000c14:	3b09      	subs	r3, #9
 8000c16:	27ff      	movs	r7, #255	@ 0xff
 8000c18:	469a      	mov	sl, r3
 8000c1a:	e7b6      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c1c:	0020      	movs	r0, r4
 8000c1e:	f7ff fca5 	bl	800056c <__clzsi2>
 8000c22:	2776      	movs	r7, #118	@ 0x76
 8000c24:	1f43      	subs	r3, r0, #5
 8000c26:	409c      	lsls	r4, r3
 8000c28:	2300      	movs	r3, #0
 8000c2a:	427f      	negs	r7, r7
 8000c2c:	4699      	mov	r9, r3
 8000c2e:	469a      	mov	sl, r3
 8000c30:	1a3f      	subs	r7, r7, r0
 8000c32:	e7aa      	b.n	8000b8a <__aeabi_fdiv+0x2e>
 8000c34:	4640      	mov	r0, r8
 8000c36:	f7ff fc99 	bl	800056c <__clzsi2>
 8000c3a:	4642      	mov	r2, r8
 8000c3c:	1f43      	subs	r3, r0, #5
 8000c3e:	409a      	lsls	r2, r3
 8000c40:	2376      	movs	r3, #118	@ 0x76
 8000c42:	425b      	negs	r3, r3
 8000c44:	1a1b      	subs	r3, r3, r0
 8000c46:	4690      	mov	r8, r2
 8000c48:	2000      	movs	r0, #0
 8000c4a:	e7b0      	b.n	8000bae <__aeabi_fdiv+0x52>
 8000c4c:	2303      	movs	r3, #3
 8000c4e:	464a      	mov	r2, r9
 8000c50:	431a      	orrs	r2, r3
 8000c52:	4691      	mov	r9, r2
 8000c54:	2003      	movs	r0, #3
 8000c56:	33fc      	adds	r3, #252	@ 0xfc
 8000c58:	e7a9      	b.n	8000bae <__aeabi_fdiv+0x52>
 8000c5a:	000d      	movs	r5, r1
 8000c5c:	20ff      	movs	r0, #255	@ 0xff
 8000c5e:	2200      	movs	r2, #0
 8000c60:	05c0      	lsls	r0, r0, #23
 8000c62:	07ed      	lsls	r5, r5, #31
 8000c64:	4310      	orrs	r0, r2
 8000c66:	4328      	orrs	r0, r5
 8000c68:	bce0      	pop	{r5, r6, r7}
 8000c6a:	46ba      	mov	sl, r7
 8000c6c:	46b1      	mov	r9, r6
 8000c6e:	46a8      	mov	r8, r5
 8000c70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c72:	000d      	movs	r5, r1
 8000c74:	2000      	movs	r0, #0
 8000c76:	2200      	movs	r2, #0
 8000c78:	e7f2      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000c7a:	4653      	mov	r3, sl
 8000c7c:	2b02      	cmp	r3, #2
 8000c7e:	d0ed      	beq.n	8000c5c <__aeabi_fdiv+0x100>
 8000c80:	2b03      	cmp	r3, #3
 8000c82:	d033      	beq.n	8000cec <__aeabi_fdiv+0x190>
 8000c84:	46a0      	mov	r8, r4
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d105      	bne.n	8000c96 <__aeabi_fdiv+0x13a>
 8000c8a:	2000      	movs	r0, #0
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	e7e7      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000c90:	0035      	movs	r5, r6
 8000c92:	2803      	cmp	r0, #3
 8000c94:	d07a      	beq.n	8000d8c <__aeabi_fdiv+0x230>
 8000c96:	003b      	movs	r3, r7
 8000c98:	337f      	adds	r3, #127	@ 0x7f
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	dd2d      	ble.n	8000cfa <__aeabi_fdiv+0x19e>
 8000c9e:	4642      	mov	r2, r8
 8000ca0:	0752      	lsls	r2, r2, #29
 8000ca2:	d007      	beq.n	8000cb4 <__aeabi_fdiv+0x158>
 8000ca4:	220f      	movs	r2, #15
 8000ca6:	4641      	mov	r1, r8
 8000ca8:	400a      	ands	r2, r1
 8000caa:	2a04      	cmp	r2, #4
 8000cac:	d002      	beq.n	8000cb4 <__aeabi_fdiv+0x158>
 8000cae:	2204      	movs	r2, #4
 8000cb0:	4694      	mov	ip, r2
 8000cb2:	44e0      	add	r8, ip
 8000cb4:	4642      	mov	r2, r8
 8000cb6:	0112      	lsls	r2, r2, #4
 8000cb8:	d505      	bpl.n	8000cc6 <__aeabi_fdiv+0x16a>
 8000cba:	4642      	mov	r2, r8
 8000cbc:	4b36      	ldr	r3, [pc, #216]	@ (8000d98 <__aeabi_fdiv+0x23c>)
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	003b      	movs	r3, r7
 8000cc2:	4690      	mov	r8, r2
 8000cc4:	3380      	adds	r3, #128	@ 0x80
 8000cc6:	2bfe      	cmp	r3, #254	@ 0xfe
 8000cc8:	dcc8      	bgt.n	8000c5c <__aeabi_fdiv+0x100>
 8000cca:	4642      	mov	r2, r8
 8000ccc:	0192      	lsls	r2, r2, #6
 8000cce:	0a52      	lsrs	r2, r2, #9
 8000cd0:	b2d8      	uxtb	r0, r3
 8000cd2:	e7c5      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cd4:	2280      	movs	r2, #128	@ 0x80
 8000cd6:	2500      	movs	r5, #0
 8000cd8:	20ff      	movs	r0, #255	@ 0xff
 8000cda:	03d2      	lsls	r2, r2, #15
 8000cdc:	e7c0      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cde:	2280      	movs	r2, #128	@ 0x80
 8000ce0:	03d2      	lsls	r2, r2, #15
 8000ce2:	4214      	tst	r4, r2
 8000ce4:	d002      	beq.n	8000cec <__aeabi_fdiv+0x190>
 8000ce6:	4643      	mov	r3, r8
 8000ce8:	4213      	tst	r3, r2
 8000cea:	d049      	beq.n	8000d80 <__aeabi_fdiv+0x224>
 8000cec:	2280      	movs	r2, #128	@ 0x80
 8000cee:	03d2      	lsls	r2, r2, #15
 8000cf0:	4322      	orrs	r2, r4
 8000cf2:	0252      	lsls	r2, r2, #9
 8000cf4:	20ff      	movs	r0, #255	@ 0xff
 8000cf6:	0a52      	lsrs	r2, r2, #9
 8000cf8:	e7b2      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	1ad3      	subs	r3, r2, r3
 8000cfe:	2b1b      	cmp	r3, #27
 8000d00:	dcc3      	bgt.n	8000c8a <__aeabi_fdiv+0x12e>
 8000d02:	4642      	mov	r2, r8
 8000d04:	40da      	lsrs	r2, r3
 8000d06:	4643      	mov	r3, r8
 8000d08:	379e      	adds	r7, #158	@ 0x9e
 8000d0a:	40bb      	lsls	r3, r7
 8000d0c:	1e59      	subs	r1, r3, #1
 8000d0e:	418b      	sbcs	r3, r1
 8000d10:	431a      	orrs	r2, r3
 8000d12:	0753      	lsls	r3, r2, #29
 8000d14:	d004      	beq.n	8000d20 <__aeabi_fdiv+0x1c4>
 8000d16:	230f      	movs	r3, #15
 8000d18:	4013      	ands	r3, r2
 8000d1a:	2b04      	cmp	r3, #4
 8000d1c:	d000      	beq.n	8000d20 <__aeabi_fdiv+0x1c4>
 8000d1e:	3204      	adds	r2, #4
 8000d20:	0153      	lsls	r3, r2, #5
 8000d22:	d529      	bpl.n	8000d78 <__aeabi_fdiv+0x21c>
 8000d24:	2001      	movs	r0, #1
 8000d26:	2200      	movs	r2, #0
 8000d28:	e79a      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d2a:	4642      	mov	r2, r8
 8000d2c:	0163      	lsls	r3, r4, #5
 8000d2e:	0155      	lsls	r5, r2, #5
 8000d30:	42ab      	cmp	r3, r5
 8000d32:	d215      	bcs.n	8000d60 <__aeabi_fdiv+0x204>
 8000d34:	201b      	movs	r0, #27
 8000d36:	2200      	movs	r2, #0
 8000d38:	3f01      	subs	r7, #1
 8000d3a:	2601      	movs	r6, #1
 8000d3c:	001c      	movs	r4, r3
 8000d3e:	0052      	lsls	r2, r2, #1
 8000d40:	005b      	lsls	r3, r3, #1
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	db01      	blt.n	8000d4a <__aeabi_fdiv+0x1ee>
 8000d46:	429d      	cmp	r5, r3
 8000d48:	d801      	bhi.n	8000d4e <__aeabi_fdiv+0x1f2>
 8000d4a:	1b5b      	subs	r3, r3, r5
 8000d4c:	4332      	orrs	r2, r6
 8000d4e:	3801      	subs	r0, #1
 8000d50:	2800      	cmp	r0, #0
 8000d52:	d1f3      	bne.n	8000d3c <__aeabi_fdiv+0x1e0>
 8000d54:	1e58      	subs	r0, r3, #1
 8000d56:	4183      	sbcs	r3, r0
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	4698      	mov	r8, r3
 8000d5c:	000d      	movs	r5, r1
 8000d5e:	e79a      	b.n	8000c96 <__aeabi_fdiv+0x13a>
 8000d60:	201a      	movs	r0, #26
 8000d62:	2201      	movs	r2, #1
 8000d64:	1b5b      	subs	r3, r3, r5
 8000d66:	e7e8      	b.n	8000d3a <__aeabi_fdiv+0x1de>
 8000d68:	3b02      	subs	r3, #2
 8000d6a:	425a      	negs	r2, r3
 8000d6c:	4153      	adcs	r3, r2
 8000d6e:	425b      	negs	r3, r3
 8000d70:	0035      	movs	r5, r6
 8000d72:	2200      	movs	r2, #0
 8000d74:	b2d8      	uxtb	r0, r3
 8000d76:	e773      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d78:	0192      	lsls	r2, r2, #6
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	0a52      	lsrs	r2, r2, #9
 8000d7e:	e76f      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d80:	431a      	orrs	r2, r3
 8000d82:	0252      	lsls	r2, r2, #9
 8000d84:	0035      	movs	r5, r6
 8000d86:	20ff      	movs	r0, #255	@ 0xff
 8000d88:	0a52      	lsrs	r2, r2, #9
 8000d8a:	e769      	b.n	8000c60 <__aeabi_fdiv+0x104>
 8000d8c:	4644      	mov	r4, r8
 8000d8e:	e7ad      	b.n	8000cec <__aeabi_fdiv+0x190>
 8000d90:	0801b30c 	.word	0x0801b30c
 8000d94:	0801b34c 	.word	0x0801b34c
 8000d98:	f7ffffff 	.word	0xf7ffffff

08000d9c <__eqsf2>:
 8000d9c:	b570      	push	{r4, r5, r6, lr}
 8000d9e:	0042      	lsls	r2, r0, #1
 8000da0:	024e      	lsls	r6, r1, #9
 8000da2:	004c      	lsls	r4, r1, #1
 8000da4:	0245      	lsls	r5, r0, #9
 8000da6:	0a6d      	lsrs	r5, r5, #9
 8000da8:	0e12      	lsrs	r2, r2, #24
 8000daa:	0fc3      	lsrs	r3, r0, #31
 8000dac:	0a76      	lsrs	r6, r6, #9
 8000dae:	0e24      	lsrs	r4, r4, #24
 8000db0:	0fc9      	lsrs	r1, r1, #31
 8000db2:	2aff      	cmp	r2, #255	@ 0xff
 8000db4:	d010      	beq.n	8000dd8 <__eqsf2+0x3c>
 8000db6:	2cff      	cmp	r4, #255	@ 0xff
 8000db8:	d00c      	beq.n	8000dd4 <__eqsf2+0x38>
 8000dba:	2001      	movs	r0, #1
 8000dbc:	42a2      	cmp	r2, r4
 8000dbe:	d10a      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dc0:	42b5      	cmp	r5, r6
 8000dc2:	d108      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dc4:	428b      	cmp	r3, r1
 8000dc6:	d00f      	beq.n	8000de8 <__eqsf2+0x4c>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d104      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dcc:	0028      	movs	r0, r5
 8000dce:	1e43      	subs	r3, r0, #1
 8000dd0:	4198      	sbcs	r0, r3
 8000dd2:	e000      	b.n	8000dd6 <__eqsf2+0x3a>
 8000dd4:	2001      	movs	r0, #1
 8000dd6:	bd70      	pop	{r4, r5, r6, pc}
 8000dd8:	2001      	movs	r0, #1
 8000dda:	2cff      	cmp	r4, #255	@ 0xff
 8000ddc:	d1fb      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000dde:	4335      	orrs	r5, r6
 8000de0:	d1f9      	bne.n	8000dd6 <__eqsf2+0x3a>
 8000de2:	404b      	eors	r3, r1
 8000de4:	0018      	movs	r0, r3
 8000de6:	e7f6      	b.n	8000dd6 <__eqsf2+0x3a>
 8000de8:	2000      	movs	r0, #0
 8000dea:	e7f4      	b.n	8000dd6 <__eqsf2+0x3a>

08000dec <__gesf2>:
 8000dec:	b530      	push	{r4, r5, lr}
 8000dee:	0042      	lsls	r2, r0, #1
 8000df0:	0244      	lsls	r4, r0, #9
 8000df2:	024d      	lsls	r5, r1, #9
 8000df4:	0fc3      	lsrs	r3, r0, #31
 8000df6:	0048      	lsls	r0, r1, #1
 8000df8:	0a64      	lsrs	r4, r4, #9
 8000dfa:	0e12      	lsrs	r2, r2, #24
 8000dfc:	0a6d      	lsrs	r5, r5, #9
 8000dfe:	0e00      	lsrs	r0, r0, #24
 8000e00:	0fc9      	lsrs	r1, r1, #31
 8000e02:	2aff      	cmp	r2, #255	@ 0xff
 8000e04:	d019      	beq.n	8000e3a <__gesf2+0x4e>
 8000e06:	28ff      	cmp	r0, #255	@ 0xff
 8000e08:	d00b      	beq.n	8000e22 <__gesf2+0x36>
 8000e0a:	2a00      	cmp	r2, #0
 8000e0c:	d11e      	bne.n	8000e4c <__gesf2+0x60>
 8000e0e:	2800      	cmp	r0, #0
 8000e10:	d10b      	bne.n	8000e2a <__gesf2+0x3e>
 8000e12:	2d00      	cmp	r5, #0
 8000e14:	d027      	beq.n	8000e66 <__gesf2+0x7a>
 8000e16:	2c00      	cmp	r4, #0
 8000e18:	d134      	bne.n	8000e84 <__gesf2+0x98>
 8000e1a:	2900      	cmp	r1, #0
 8000e1c:	d02f      	beq.n	8000e7e <__gesf2+0x92>
 8000e1e:	0008      	movs	r0, r1
 8000e20:	bd30      	pop	{r4, r5, pc}
 8000e22:	2d00      	cmp	r5, #0
 8000e24:	d128      	bne.n	8000e78 <__gesf2+0x8c>
 8000e26:	2a00      	cmp	r2, #0
 8000e28:	d101      	bne.n	8000e2e <__gesf2+0x42>
 8000e2a:	2c00      	cmp	r4, #0
 8000e2c:	d0f5      	beq.n	8000e1a <__gesf2+0x2e>
 8000e2e:	428b      	cmp	r3, r1
 8000e30:	d107      	bne.n	8000e42 <__gesf2+0x56>
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d023      	beq.n	8000e7e <__gesf2+0x92>
 8000e36:	0018      	movs	r0, r3
 8000e38:	e7f2      	b.n	8000e20 <__gesf2+0x34>
 8000e3a:	2c00      	cmp	r4, #0
 8000e3c:	d11c      	bne.n	8000e78 <__gesf2+0x8c>
 8000e3e:	28ff      	cmp	r0, #255	@ 0xff
 8000e40:	d014      	beq.n	8000e6c <__gesf2+0x80>
 8000e42:	1e58      	subs	r0, r3, #1
 8000e44:	2302      	movs	r3, #2
 8000e46:	4018      	ands	r0, r3
 8000e48:	3801      	subs	r0, #1
 8000e4a:	e7e9      	b.n	8000e20 <__gesf2+0x34>
 8000e4c:	2800      	cmp	r0, #0
 8000e4e:	d0f8      	beq.n	8000e42 <__gesf2+0x56>
 8000e50:	428b      	cmp	r3, r1
 8000e52:	d1f6      	bne.n	8000e42 <__gesf2+0x56>
 8000e54:	4282      	cmp	r2, r0
 8000e56:	dcf4      	bgt.n	8000e42 <__gesf2+0x56>
 8000e58:	dbeb      	blt.n	8000e32 <__gesf2+0x46>
 8000e5a:	42ac      	cmp	r4, r5
 8000e5c:	d8f1      	bhi.n	8000e42 <__gesf2+0x56>
 8000e5e:	2000      	movs	r0, #0
 8000e60:	42ac      	cmp	r4, r5
 8000e62:	d2dd      	bcs.n	8000e20 <__gesf2+0x34>
 8000e64:	e7e5      	b.n	8000e32 <__gesf2+0x46>
 8000e66:	2c00      	cmp	r4, #0
 8000e68:	d0da      	beq.n	8000e20 <__gesf2+0x34>
 8000e6a:	e7ea      	b.n	8000e42 <__gesf2+0x56>
 8000e6c:	2d00      	cmp	r5, #0
 8000e6e:	d103      	bne.n	8000e78 <__gesf2+0x8c>
 8000e70:	428b      	cmp	r3, r1
 8000e72:	d1e6      	bne.n	8000e42 <__gesf2+0x56>
 8000e74:	2000      	movs	r0, #0
 8000e76:	e7d3      	b.n	8000e20 <__gesf2+0x34>
 8000e78:	2002      	movs	r0, #2
 8000e7a:	4240      	negs	r0, r0
 8000e7c:	e7d0      	b.n	8000e20 <__gesf2+0x34>
 8000e7e:	2001      	movs	r0, #1
 8000e80:	4240      	negs	r0, r0
 8000e82:	e7cd      	b.n	8000e20 <__gesf2+0x34>
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d0e8      	beq.n	8000e5a <__gesf2+0x6e>
 8000e88:	e7db      	b.n	8000e42 <__gesf2+0x56>
 8000e8a:	46c0      	nop			@ (mov r8, r8)

08000e8c <__lesf2>:
 8000e8c:	b530      	push	{r4, r5, lr}
 8000e8e:	0042      	lsls	r2, r0, #1
 8000e90:	0244      	lsls	r4, r0, #9
 8000e92:	024d      	lsls	r5, r1, #9
 8000e94:	0fc3      	lsrs	r3, r0, #31
 8000e96:	0048      	lsls	r0, r1, #1
 8000e98:	0a64      	lsrs	r4, r4, #9
 8000e9a:	0e12      	lsrs	r2, r2, #24
 8000e9c:	0a6d      	lsrs	r5, r5, #9
 8000e9e:	0e00      	lsrs	r0, r0, #24
 8000ea0:	0fc9      	lsrs	r1, r1, #31
 8000ea2:	2aff      	cmp	r2, #255	@ 0xff
 8000ea4:	d01a      	beq.n	8000edc <__lesf2+0x50>
 8000ea6:	28ff      	cmp	r0, #255	@ 0xff
 8000ea8:	d00e      	beq.n	8000ec8 <__lesf2+0x3c>
 8000eaa:	2a00      	cmp	r2, #0
 8000eac:	d11e      	bne.n	8000eec <__lesf2+0x60>
 8000eae:	2800      	cmp	r0, #0
 8000eb0:	d10e      	bne.n	8000ed0 <__lesf2+0x44>
 8000eb2:	2d00      	cmp	r5, #0
 8000eb4:	d02a      	beq.n	8000f0c <__lesf2+0x80>
 8000eb6:	2c00      	cmp	r4, #0
 8000eb8:	d00c      	beq.n	8000ed4 <__lesf2+0x48>
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	d01d      	beq.n	8000efa <__lesf2+0x6e>
 8000ebe:	1e58      	subs	r0, r3, #1
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	4018      	ands	r0, r3
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e010      	b.n	8000eea <__lesf2+0x5e>
 8000ec8:	2d00      	cmp	r5, #0
 8000eca:	d10d      	bne.n	8000ee8 <__lesf2+0x5c>
 8000ecc:	2a00      	cmp	r2, #0
 8000ece:	d120      	bne.n	8000f12 <__lesf2+0x86>
 8000ed0:	2c00      	cmp	r4, #0
 8000ed2:	d11e      	bne.n	8000f12 <__lesf2+0x86>
 8000ed4:	2900      	cmp	r1, #0
 8000ed6:	d023      	beq.n	8000f20 <__lesf2+0x94>
 8000ed8:	0008      	movs	r0, r1
 8000eda:	e006      	b.n	8000eea <__lesf2+0x5e>
 8000edc:	2c00      	cmp	r4, #0
 8000ede:	d103      	bne.n	8000ee8 <__lesf2+0x5c>
 8000ee0:	28ff      	cmp	r0, #255	@ 0xff
 8000ee2:	d1ec      	bne.n	8000ebe <__lesf2+0x32>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d017      	beq.n	8000f18 <__lesf2+0x8c>
 8000ee8:	2002      	movs	r0, #2
 8000eea:	bd30      	pop	{r4, r5, pc}
 8000eec:	2800      	cmp	r0, #0
 8000eee:	d0e6      	beq.n	8000ebe <__lesf2+0x32>
 8000ef0:	428b      	cmp	r3, r1
 8000ef2:	d1e4      	bne.n	8000ebe <__lesf2+0x32>
 8000ef4:	4282      	cmp	r2, r0
 8000ef6:	dce2      	bgt.n	8000ebe <__lesf2+0x32>
 8000ef8:	db04      	blt.n	8000f04 <__lesf2+0x78>
 8000efa:	42ac      	cmp	r4, r5
 8000efc:	d8df      	bhi.n	8000ebe <__lesf2+0x32>
 8000efe:	2000      	movs	r0, #0
 8000f00:	42ac      	cmp	r4, r5
 8000f02:	d2f2      	bcs.n	8000eea <__lesf2+0x5e>
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d00b      	beq.n	8000f20 <__lesf2+0x94>
 8000f08:	0018      	movs	r0, r3
 8000f0a:	e7ee      	b.n	8000eea <__lesf2+0x5e>
 8000f0c:	2c00      	cmp	r4, #0
 8000f0e:	d0ec      	beq.n	8000eea <__lesf2+0x5e>
 8000f10:	e7d5      	b.n	8000ebe <__lesf2+0x32>
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d1d3      	bne.n	8000ebe <__lesf2+0x32>
 8000f16:	e7f5      	b.n	8000f04 <__lesf2+0x78>
 8000f18:	2000      	movs	r0, #0
 8000f1a:	428b      	cmp	r3, r1
 8000f1c:	d0e5      	beq.n	8000eea <__lesf2+0x5e>
 8000f1e:	e7ce      	b.n	8000ebe <__lesf2+0x32>
 8000f20:	2001      	movs	r0, #1
 8000f22:	4240      	negs	r0, r0
 8000f24:	e7e1      	b.n	8000eea <__lesf2+0x5e>
 8000f26:	46c0      	nop			@ (mov r8, r8)

08000f28 <__aeabi_fmul>:
 8000f28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f2a:	464f      	mov	r7, r9
 8000f2c:	4646      	mov	r6, r8
 8000f2e:	46d6      	mov	lr, sl
 8000f30:	0243      	lsls	r3, r0, #9
 8000f32:	0a5b      	lsrs	r3, r3, #9
 8000f34:	0045      	lsls	r5, r0, #1
 8000f36:	b5c0      	push	{r6, r7, lr}
 8000f38:	4699      	mov	r9, r3
 8000f3a:	1c0f      	adds	r7, r1, #0
 8000f3c:	0e2d      	lsrs	r5, r5, #24
 8000f3e:	0fc6      	lsrs	r6, r0, #31
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d100      	bne.n	8000f46 <__aeabi_fmul+0x1e>
 8000f44:	e088      	b.n	8001058 <__aeabi_fmul+0x130>
 8000f46:	2dff      	cmp	r5, #255	@ 0xff
 8000f48:	d100      	bne.n	8000f4c <__aeabi_fmul+0x24>
 8000f4a:	e08d      	b.n	8001068 <__aeabi_fmul+0x140>
 8000f4c:	2280      	movs	r2, #128	@ 0x80
 8000f4e:	00db      	lsls	r3, r3, #3
 8000f50:	04d2      	lsls	r2, r2, #19
 8000f52:	431a      	orrs	r2, r3
 8000f54:	2300      	movs	r3, #0
 8000f56:	4691      	mov	r9, r2
 8000f58:	4698      	mov	r8, r3
 8000f5a:	469a      	mov	sl, r3
 8000f5c:	3d7f      	subs	r5, #127	@ 0x7f
 8000f5e:	027c      	lsls	r4, r7, #9
 8000f60:	007b      	lsls	r3, r7, #1
 8000f62:	0a64      	lsrs	r4, r4, #9
 8000f64:	0e1b      	lsrs	r3, r3, #24
 8000f66:	0fff      	lsrs	r7, r7, #31
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d068      	beq.n	800103e <__aeabi_fmul+0x116>
 8000f6c:	2bff      	cmp	r3, #255	@ 0xff
 8000f6e:	d021      	beq.n	8000fb4 <__aeabi_fmul+0x8c>
 8000f70:	2280      	movs	r2, #128	@ 0x80
 8000f72:	00e4      	lsls	r4, r4, #3
 8000f74:	04d2      	lsls	r2, r2, #19
 8000f76:	4314      	orrs	r4, r2
 8000f78:	4642      	mov	r2, r8
 8000f7a:	3b7f      	subs	r3, #127	@ 0x7f
 8000f7c:	195b      	adds	r3, r3, r5
 8000f7e:	2100      	movs	r1, #0
 8000f80:	1c5d      	adds	r5, r3, #1
 8000f82:	2a0a      	cmp	r2, #10
 8000f84:	dc2e      	bgt.n	8000fe4 <__aeabi_fmul+0xbc>
 8000f86:	407e      	eors	r6, r7
 8000f88:	4642      	mov	r2, r8
 8000f8a:	2a02      	cmp	r2, #2
 8000f8c:	dc23      	bgt.n	8000fd6 <__aeabi_fmul+0xae>
 8000f8e:	3a01      	subs	r2, #1
 8000f90:	2a01      	cmp	r2, #1
 8000f92:	d900      	bls.n	8000f96 <__aeabi_fmul+0x6e>
 8000f94:	e0bd      	b.n	8001112 <__aeabi_fmul+0x1ea>
 8000f96:	2902      	cmp	r1, #2
 8000f98:	d06e      	beq.n	8001078 <__aeabi_fmul+0x150>
 8000f9a:	2901      	cmp	r1, #1
 8000f9c:	d12c      	bne.n	8000ff8 <__aeabi_fmul+0xd0>
 8000f9e:	2000      	movs	r0, #0
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	05c0      	lsls	r0, r0, #23
 8000fa4:	07f6      	lsls	r6, r6, #31
 8000fa6:	4310      	orrs	r0, r2
 8000fa8:	4330      	orrs	r0, r6
 8000faa:	bce0      	pop	{r5, r6, r7}
 8000fac:	46ba      	mov	sl, r7
 8000fae:	46b1      	mov	r9, r6
 8000fb0:	46a8      	mov	r8, r5
 8000fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000fb4:	002b      	movs	r3, r5
 8000fb6:	33ff      	adds	r3, #255	@ 0xff
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d065      	beq.n	8001088 <__aeabi_fmul+0x160>
 8000fbc:	2203      	movs	r2, #3
 8000fbe:	4641      	mov	r1, r8
 8000fc0:	4311      	orrs	r1, r2
 8000fc2:	0032      	movs	r2, r6
 8000fc4:	3501      	adds	r5, #1
 8000fc6:	4688      	mov	r8, r1
 8000fc8:	407a      	eors	r2, r7
 8000fca:	35ff      	adds	r5, #255	@ 0xff
 8000fcc:	290a      	cmp	r1, #10
 8000fce:	dd00      	ble.n	8000fd2 <__aeabi_fmul+0xaa>
 8000fd0:	e0d8      	b.n	8001184 <__aeabi_fmul+0x25c>
 8000fd2:	0016      	movs	r6, r2
 8000fd4:	2103      	movs	r1, #3
 8000fd6:	4640      	mov	r0, r8
 8000fd8:	2201      	movs	r2, #1
 8000fda:	4082      	lsls	r2, r0
 8000fdc:	20a6      	movs	r0, #166	@ 0xa6
 8000fde:	00c0      	lsls	r0, r0, #3
 8000fe0:	4202      	tst	r2, r0
 8000fe2:	d020      	beq.n	8001026 <__aeabi_fmul+0xfe>
 8000fe4:	4653      	mov	r3, sl
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d046      	beq.n	8001078 <__aeabi_fmul+0x150>
 8000fea:	2b03      	cmp	r3, #3
 8000fec:	d100      	bne.n	8000ff0 <__aeabi_fmul+0xc8>
 8000fee:	e0bb      	b.n	8001168 <__aeabi_fmul+0x240>
 8000ff0:	4651      	mov	r1, sl
 8000ff2:	464c      	mov	r4, r9
 8000ff4:	2901      	cmp	r1, #1
 8000ff6:	d0d2      	beq.n	8000f9e <__aeabi_fmul+0x76>
 8000ff8:	002b      	movs	r3, r5
 8000ffa:	337f      	adds	r3, #127	@ 0x7f
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	dd70      	ble.n	80010e2 <__aeabi_fmul+0x1ba>
 8001000:	0762      	lsls	r2, r4, #29
 8001002:	d004      	beq.n	800100e <__aeabi_fmul+0xe6>
 8001004:	220f      	movs	r2, #15
 8001006:	4022      	ands	r2, r4
 8001008:	2a04      	cmp	r2, #4
 800100a:	d000      	beq.n	800100e <__aeabi_fmul+0xe6>
 800100c:	3404      	adds	r4, #4
 800100e:	0122      	lsls	r2, r4, #4
 8001010:	d503      	bpl.n	800101a <__aeabi_fmul+0xf2>
 8001012:	4b63      	ldr	r3, [pc, #396]	@ (80011a0 <__aeabi_fmul+0x278>)
 8001014:	401c      	ands	r4, r3
 8001016:	002b      	movs	r3, r5
 8001018:	3380      	adds	r3, #128	@ 0x80
 800101a:	2bfe      	cmp	r3, #254	@ 0xfe
 800101c:	dc2c      	bgt.n	8001078 <__aeabi_fmul+0x150>
 800101e:	01a2      	lsls	r2, r4, #6
 8001020:	0a52      	lsrs	r2, r2, #9
 8001022:	b2d8      	uxtb	r0, r3
 8001024:	e7bd      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001026:	2090      	movs	r0, #144	@ 0x90
 8001028:	0080      	lsls	r0, r0, #2
 800102a:	4202      	tst	r2, r0
 800102c:	d127      	bne.n	800107e <__aeabi_fmul+0x156>
 800102e:	38b9      	subs	r0, #185	@ 0xb9
 8001030:	38ff      	subs	r0, #255	@ 0xff
 8001032:	4210      	tst	r0, r2
 8001034:	d06d      	beq.n	8001112 <__aeabi_fmul+0x1ea>
 8001036:	003e      	movs	r6, r7
 8001038:	46a1      	mov	r9, r4
 800103a:	468a      	mov	sl, r1
 800103c:	e7d2      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 800103e:	2c00      	cmp	r4, #0
 8001040:	d141      	bne.n	80010c6 <__aeabi_fmul+0x19e>
 8001042:	2301      	movs	r3, #1
 8001044:	4642      	mov	r2, r8
 8001046:	431a      	orrs	r2, r3
 8001048:	4690      	mov	r8, r2
 800104a:	002b      	movs	r3, r5
 800104c:	4642      	mov	r2, r8
 800104e:	2101      	movs	r1, #1
 8001050:	1c5d      	adds	r5, r3, #1
 8001052:	2a0a      	cmp	r2, #10
 8001054:	dd97      	ble.n	8000f86 <__aeabi_fmul+0x5e>
 8001056:	e7c5      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 8001058:	2b00      	cmp	r3, #0
 800105a:	d126      	bne.n	80010aa <__aeabi_fmul+0x182>
 800105c:	2304      	movs	r3, #4
 800105e:	4698      	mov	r8, r3
 8001060:	3b03      	subs	r3, #3
 8001062:	2500      	movs	r5, #0
 8001064:	469a      	mov	sl, r3
 8001066:	e77a      	b.n	8000f5e <__aeabi_fmul+0x36>
 8001068:	2b00      	cmp	r3, #0
 800106a:	d118      	bne.n	800109e <__aeabi_fmul+0x176>
 800106c:	2308      	movs	r3, #8
 800106e:	4698      	mov	r8, r3
 8001070:	3b06      	subs	r3, #6
 8001072:	25ff      	movs	r5, #255	@ 0xff
 8001074:	469a      	mov	sl, r3
 8001076:	e772      	b.n	8000f5e <__aeabi_fmul+0x36>
 8001078:	20ff      	movs	r0, #255	@ 0xff
 800107a:	2200      	movs	r2, #0
 800107c:	e791      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 800107e:	2280      	movs	r2, #128	@ 0x80
 8001080:	2600      	movs	r6, #0
 8001082:	20ff      	movs	r0, #255	@ 0xff
 8001084:	03d2      	lsls	r2, r2, #15
 8001086:	e78c      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001088:	4641      	mov	r1, r8
 800108a:	2202      	movs	r2, #2
 800108c:	3501      	adds	r5, #1
 800108e:	4311      	orrs	r1, r2
 8001090:	4688      	mov	r8, r1
 8001092:	35ff      	adds	r5, #255	@ 0xff
 8001094:	290a      	cmp	r1, #10
 8001096:	dca5      	bgt.n	8000fe4 <__aeabi_fmul+0xbc>
 8001098:	2102      	movs	r1, #2
 800109a:	407e      	eors	r6, r7
 800109c:	e774      	b.n	8000f88 <__aeabi_fmul+0x60>
 800109e:	230c      	movs	r3, #12
 80010a0:	4698      	mov	r8, r3
 80010a2:	3b09      	subs	r3, #9
 80010a4:	25ff      	movs	r5, #255	@ 0xff
 80010a6:	469a      	mov	sl, r3
 80010a8:	e759      	b.n	8000f5e <__aeabi_fmul+0x36>
 80010aa:	0018      	movs	r0, r3
 80010ac:	f7ff fa5e 	bl	800056c <__clzsi2>
 80010b0:	464a      	mov	r2, r9
 80010b2:	1f43      	subs	r3, r0, #5
 80010b4:	2576      	movs	r5, #118	@ 0x76
 80010b6:	409a      	lsls	r2, r3
 80010b8:	2300      	movs	r3, #0
 80010ba:	426d      	negs	r5, r5
 80010bc:	4691      	mov	r9, r2
 80010be:	4698      	mov	r8, r3
 80010c0:	469a      	mov	sl, r3
 80010c2:	1a2d      	subs	r5, r5, r0
 80010c4:	e74b      	b.n	8000f5e <__aeabi_fmul+0x36>
 80010c6:	0020      	movs	r0, r4
 80010c8:	f7ff fa50 	bl	800056c <__clzsi2>
 80010cc:	4642      	mov	r2, r8
 80010ce:	1f43      	subs	r3, r0, #5
 80010d0:	409c      	lsls	r4, r3
 80010d2:	1a2b      	subs	r3, r5, r0
 80010d4:	3b76      	subs	r3, #118	@ 0x76
 80010d6:	2100      	movs	r1, #0
 80010d8:	1c5d      	adds	r5, r3, #1
 80010da:	2a0a      	cmp	r2, #10
 80010dc:	dc00      	bgt.n	80010e0 <__aeabi_fmul+0x1b8>
 80010de:	e752      	b.n	8000f86 <__aeabi_fmul+0x5e>
 80010e0:	e780      	b.n	8000fe4 <__aeabi_fmul+0xbc>
 80010e2:	2201      	movs	r2, #1
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b1b      	cmp	r3, #27
 80010e8:	dd00      	ble.n	80010ec <__aeabi_fmul+0x1c4>
 80010ea:	e758      	b.n	8000f9e <__aeabi_fmul+0x76>
 80010ec:	359e      	adds	r5, #158	@ 0x9e
 80010ee:	0022      	movs	r2, r4
 80010f0:	40ac      	lsls	r4, r5
 80010f2:	40da      	lsrs	r2, r3
 80010f4:	1e63      	subs	r3, r4, #1
 80010f6:	419c      	sbcs	r4, r3
 80010f8:	4322      	orrs	r2, r4
 80010fa:	0753      	lsls	r3, r2, #29
 80010fc:	d004      	beq.n	8001108 <__aeabi_fmul+0x1e0>
 80010fe:	230f      	movs	r3, #15
 8001100:	4013      	ands	r3, r2
 8001102:	2b04      	cmp	r3, #4
 8001104:	d000      	beq.n	8001108 <__aeabi_fmul+0x1e0>
 8001106:	3204      	adds	r2, #4
 8001108:	0153      	lsls	r3, r2, #5
 800110a:	d537      	bpl.n	800117c <__aeabi_fmul+0x254>
 800110c:	2001      	movs	r0, #1
 800110e:	2200      	movs	r2, #0
 8001110:	e747      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001112:	0c21      	lsrs	r1, r4, #16
 8001114:	464a      	mov	r2, r9
 8001116:	0424      	lsls	r4, r4, #16
 8001118:	0c24      	lsrs	r4, r4, #16
 800111a:	0027      	movs	r7, r4
 800111c:	0c10      	lsrs	r0, r2, #16
 800111e:	0412      	lsls	r2, r2, #16
 8001120:	0c12      	lsrs	r2, r2, #16
 8001122:	4344      	muls	r4, r0
 8001124:	4357      	muls	r7, r2
 8001126:	4348      	muls	r0, r1
 8001128:	4351      	muls	r1, r2
 800112a:	0c3a      	lsrs	r2, r7, #16
 800112c:	1909      	adds	r1, r1, r4
 800112e:	1852      	adds	r2, r2, r1
 8001130:	4294      	cmp	r4, r2
 8001132:	d903      	bls.n	800113c <__aeabi_fmul+0x214>
 8001134:	2180      	movs	r1, #128	@ 0x80
 8001136:	0249      	lsls	r1, r1, #9
 8001138:	468c      	mov	ip, r1
 800113a:	4460      	add	r0, ip
 800113c:	043f      	lsls	r7, r7, #16
 800113e:	0411      	lsls	r1, r2, #16
 8001140:	0c3f      	lsrs	r7, r7, #16
 8001142:	19c9      	adds	r1, r1, r7
 8001144:	018c      	lsls	r4, r1, #6
 8001146:	1e67      	subs	r7, r4, #1
 8001148:	41bc      	sbcs	r4, r7
 800114a:	0c12      	lsrs	r2, r2, #16
 800114c:	0e89      	lsrs	r1, r1, #26
 800114e:	1812      	adds	r2, r2, r0
 8001150:	430c      	orrs	r4, r1
 8001152:	0192      	lsls	r2, r2, #6
 8001154:	4314      	orrs	r4, r2
 8001156:	0112      	lsls	r2, r2, #4
 8001158:	d50e      	bpl.n	8001178 <__aeabi_fmul+0x250>
 800115a:	2301      	movs	r3, #1
 800115c:	0862      	lsrs	r2, r4, #1
 800115e:	401c      	ands	r4, r3
 8001160:	4314      	orrs	r4, r2
 8001162:	e749      	b.n	8000ff8 <__aeabi_fmul+0xd0>
 8001164:	003e      	movs	r6, r7
 8001166:	46a1      	mov	r9, r4
 8001168:	2280      	movs	r2, #128	@ 0x80
 800116a:	464b      	mov	r3, r9
 800116c:	03d2      	lsls	r2, r2, #15
 800116e:	431a      	orrs	r2, r3
 8001170:	0252      	lsls	r2, r2, #9
 8001172:	20ff      	movs	r0, #255	@ 0xff
 8001174:	0a52      	lsrs	r2, r2, #9
 8001176:	e714      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001178:	001d      	movs	r5, r3
 800117a:	e73d      	b.n	8000ff8 <__aeabi_fmul+0xd0>
 800117c:	0192      	lsls	r2, r2, #6
 800117e:	2000      	movs	r0, #0
 8001180:	0a52      	lsrs	r2, r2, #9
 8001182:	e70e      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 8001184:	290f      	cmp	r1, #15
 8001186:	d1ed      	bne.n	8001164 <__aeabi_fmul+0x23c>
 8001188:	2280      	movs	r2, #128	@ 0x80
 800118a:	464b      	mov	r3, r9
 800118c:	03d2      	lsls	r2, r2, #15
 800118e:	4213      	tst	r3, r2
 8001190:	d0ea      	beq.n	8001168 <__aeabi_fmul+0x240>
 8001192:	4214      	tst	r4, r2
 8001194:	d1e8      	bne.n	8001168 <__aeabi_fmul+0x240>
 8001196:	003e      	movs	r6, r7
 8001198:	20ff      	movs	r0, #255	@ 0xff
 800119a:	4322      	orrs	r2, r4
 800119c:	e701      	b.n	8000fa2 <__aeabi_fmul+0x7a>
 800119e:	46c0      	nop			@ (mov r8, r8)
 80011a0:	f7ffffff 	.word	0xf7ffffff

080011a4 <__aeabi_fsub>:
 80011a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011a6:	4647      	mov	r7, r8
 80011a8:	46ce      	mov	lr, r9
 80011aa:	024e      	lsls	r6, r1, #9
 80011ac:	0243      	lsls	r3, r0, #9
 80011ae:	0045      	lsls	r5, r0, #1
 80011b0:	0a72      	lsrs	r2, r6, #9
 80011b2:	0fc4      	lsrs	r4, r0, #31
 80011b4:	0048      	lsls	r0, r1, #1
 80011b6:	b580      	push	{r7, lr}
 80011b8:	4694      	mov	ip, r2
 80011ba:	0a5f      	lsrs	r7, r3, #9
 80011bc:	0e2d      	lsrs	r5, r5, #24
 80011be:	099b      	lsrs	r3, r3, #6
 80011c0:	0e00      	lsrs	r0, r0, #24
 80011c2:	0fc9      	lsrs	r1, r1, #31
 80011c4:	09b6      	lsrs	r6, r6, #6
 80011c6:	28ff      	cmp	r0, #255	@ 0xff
 80011c8:	d024      	beq.n	8001214 <__aeabi_fsub+0x70>
 80011ca:	2201      	movs	r2, #1
 80011cc:	4051      	eors	r1, r2
 80011ce:	1a2a      	subs	r2, r5, r0
 80011d0:	428c      	cmp	r4, r1
 80011d2:	d00f      	beq.n	80011f4 <__aeabi_fsub+0x50>
 80011d4:	2a00      	cmp	r2, #0
 80011d6:	dc00      	bgt.n	80011da <__aeabi_fsub+0x36>
 80011d8:	e16a      	b.n	80014b0 <__aeabi_fsub+0x30c>
 80011da:	2800      	cmp	r0, #0
 80011dc:	d135      	bne.n	800124a <__aeabi_fsub+0xa6>
 80011de:	2e00      	cmp	r6, #0
 80011e0:	d100      	bne.n	80011e4 <__aeabi_fsub+0x40>
 80011e2:	e0a2      	b.n	800132a <__aeabi_fsub+0x186>
 80011e4:	1e51      	subs	r1, r2, #1
 80011e6:	2a01      	cmp	r2, #1
 80011e8:	d100      	bne.n	80011ec <__aeabi_fsub+0x48>
 80011ea:	e124      	b.n	8001436 <__aeabi_fsub+0x292>
 80011ec:	2aff      	cmp	r2, #255	@ 0xff
 80011ee:	d021      	beq.n	8001234 <__aeabi_fsub+0x90>
 80011f0:	000a      	movs	r2, r1
 80011f2:	e02f      	b.n	8001254 <__aeabi_fsub+0xb0>
 80011f4:	2a00      	cmp	r2, #0
 80011f6:	dc00      	bgt.n	80011fa <__aeabi_fsub+0x56>
 80011f8:	e167      	b.n	80014ca <__aeabi_fsub+0x326>
 80011fa:	2800      	cmp	r0, #0
 80011fc:	d05e      	beq.n	80012bc <__aeabi_fsub+0x118>
 80011fe:	2dff      	cmp	r5, #255	@ 0xff
 8001200:	d018      	beq.n	8001234 <__aeabi_fsub+0x90>
 8001202:	2180      	movs	r1, #128	@ 0x80
 8001204:	04c9      	lsls	r1, r1, #19
 8001206:	430e      	orrs	r6, r1
 8001208:	2a1b      	cmp	r2, #27
 800120a:	dc00      	bgt.n	800120e <__aeabi_fsub+0x6a>
 800120c:	e076      	b.n	80012fc <__aeabi_fsub+0x158>
 800120e:	002a      	movs	r2, r5
 8001210:	3301      	adds	r3, #1
 8001212:	e032      	b.n	800127a <__aeabi_fsub+0xd6>
 8001214:	002a      	movs	r2, r5
 8001216:	3aff      	subs	r2, #255	@ 0xff
 8001218:	4691      	mov	r9, r2
 800121a:	2e00      	cmp	r6, #0
 800121c:	d042      	beq.n	80012a4 <__aeabi_fsub+0x100>
 800121e:	428c      	cmp	r4, r1
 8001220:	d055      	beq.n	80012ce <__aeabi_fsub+0x12a>
 8001222:	464a      	mov	r2, r9
 8001224:	2a00      	cmp	r2, #0
 8001226:	d100      	bne.n	800122a <__aeabi_fsub+0x86>
 8001228:	e09c      	b.n	8001364 <__aeabi_fsub+0x1c0>
 800122a:	2d00      	cmp	r5, #0
 800122c:	d100      	bne.n	8001230 <__aeabi_fsub+0x8c>
 800122e:	e077      	b.n	8001320 <__aeabi_fsub+0x17c>
 8001230:	000c      	movs	r4, r1
 8001232:	0033      	movs	r3, r6
 8001234:	08db      	lsrs	r3, r3, #3
 8001236:	2b00      	cmp	r3, #0
 8001238:	d100      	bne.n	800123c <__aeabi_fsub+0x98>
 800123a:	e06e      	b.n	800131a <__aeabi_fsub+0x176>
 800123c:	2280      	movs	r2, #128	@ 0x80
 800123e:	03d2      	lsls	r2, r2, #15
 8001240:	4313      	orrs	r3, r2
 8001242:	025b      	lsls	r3, r3, #9
 8001244:	20ff      	movs	r0, #255	@ 0xff
 8001246:	0a5b      	lsrs	r3, r3, #9
 8001248:	e024      	b.n	8001294 <__aeabi_fsub+0xf0>
 800124a:	2dff      	cmp	r5, #255	@ 0xff
 800124c:	d0f2      	beq.n	8001234 <__aeabi_fsub+0x90>
 800124e:	2180      	movs	r1, #128	@ 0x80
 8001250:	04c9      	lsls	r1, r1, #19
 8001252:	430e      	orrs	r6, r1
 8001254:	2101      	movs	r1, #1
 8001256:	2a1b      	cmp	r2, #27
 8001258:	dc08      	bgt.n	800126c <__aeabi_fsub+0xc8>
 800125a:	0031      	movs	r1, r6
 800125c:	2020      	movs	r0, #32
 800125e:	40d1      	lsrs	r1, r2
 8001260:	1a82      	subs	r2, r0, r2
 8001262:	4096      	lsls	r6, r2
 8001264:	0032      	movs	r2, r6
 8001266:	1e50      	subs	r0, r2, #1
 8001268:	4182      	sbcs	r2, r0
 800126a:	4311      	orrs	r1, r2
 800126c:	1a5b      	subs	r3, r3, r1
 800126e:	015a      	lsls	r2, r3, #5
 8001270:	d460      	bmi.n	8001334 <__aeabi_fsub+0x190>
 8001272:	2107      	movs	r1, #7
 8001274:	002a      	movs	r2, r5
 8001276:	4019      	ands	r1, r3
 8001278:	d057      	beq.n	800132a <__aeabi_fsub+0x186>
 800127a:	210f      	movs	r1, #15
 800127c:	4019      	ands	r1, r3
 800127e:	2904      	cmp	r1, #4
 8001280:	d000      	beq.n	8001284 <__aeabi_fsub+0xe0>
 8001282:	3304      	adds	r3, #4
 8001284:	0159      	lsls	r1, r3, #5
 8001286:	d550      	bpl.n	800132a <__aeabi_fsub+0x186>
 8001288:	1c50      	adds	r0, r2, #1
 800128a:	2afe      	cmp	r2, #254	@ 0xfe
 800128c:	d045      	beq.n	800131a <__aeabi_fsub+0x176>
 800128e:	019b      	lsls	r3, r3, #6
 8001290:	b2c0      	uxtb	r0, r0
 8001292:	0a5b      	lsrs	r3, r3, #9
 8001294:	05c0      	lsls	r0, r0, #23
 8001296:	4318      	orrs	r0, r3
 8001298:	07e4      	lsls	r4, r4, #31
 800129a:	4320      	orrs	r0, r4
 800129c:	bcc0      	pop	{r6, r7}
 800129e:	46b9      	mov	r9, r7
 80012a0:	46b0      	mov	r8, r6
 80012a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80012a4:	2201      	movs	r2, #1
 80012a6:	4051      	eors	r1, r2
 80012a8:	428c      	cmp	r4, r1
 80012aa:	d1ba      	bne.n	8001222 <__aeabi_fsub+0x7e>
 80012ac:	464a      	mov	r2, r9
 80012ae:	2a00      	cmp	r2, #0
 80012b0:	d010      	beq.n	80012d4 <__aeabi_fsub+0x130>
 80012b2:	2d00      	cmp	r5, #0
 80012b4:	d100      	bne.n	80012b8 <__aeabi_fsub+0x114>
 80012b6:	e098      	b.n	80013ea <__aeabi_fsub+0x246>
 80012b8:	2300      	movs	r3, #0
 80012ba:	e7bb      	b.n	8001234 <__aeabi_fsub+0x90>
 80012bc:	2e00      	cmp	r6, #0
 80012be:	d034      	beq.n	800132a <__aeabi_fsub+0x186>
 80012c0:	1e51      	subs	r1, r2, #1
 80012c2:	2a01      	cmp	r2, #1
 80012c4:	d06e      	beq.n	80013a4 <__aeabi_fsub+0x200>
 80012c6:	2aff      	cmp	r2, #255	@ 0xff
 80012c8:	d0b4      	beq.n	8001234 <__aeabi_fsub+0x90>
 80012ca:	000a      	movs	r2, r1
 80012cc:	e79c      	b.n	8001208 <__aeabi_fsub+0x64>
 80012ce:	2a00      	cmp	r2, #0
 80012d0:	d000      	beq.n	80012d4 <__aeabi_fsub+0x130>
 80012d2:	e088      	b.n	80013e6 <__aeabi_fsub+0x242>
 80012d4:	20fe      	movs	r0, #254	@ 0xfe
 80012d6:	1c6a      	adds	r2, r5, #1
 80012d8:	4210      	tst	r0, r2
 80012da:	d000      	beq.n	80012de <__aeabi_fsub+0x13a>
 80012dc:	e092      	b.n	8001404 <__aeabi_fsub+0x260>
 80012de:	2d00      	cmp	r5, #0
 80012e0:	d000      	beq.n	80012e4 <__aeabi_fsub+0x140>
 80012e2:	e0a4      	b.n	800142e <__aeabi_fsub+0x28a>
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d100      	bne.n	80012ea <__aeabi_fsub+0x146>
 80012e8:	e0cb      	b.n	8001482 <__aeabi_fsub+0x2de>
 80012ea:	2e00      	cmp	r6, #0
 80012ec:	d000      	beq.n	80012f0 <__aeabi_fsub+0x14c>
 80012ee:	e0ca      	b.n	8001486 <__aeabi_fsub+0x2e2>
 80012f0:	2200      	movs	r2, #0
 80012f2:	08db      	lsrs	r3, r3, #3
 80012f4:	025b      	lsls	r3, r3, #9
 80012f6:	0a5b      	lsrs	r3, r3, #9
 80012f8:	b2d0      	uxtb	r0, r2
 80012fa:	e7cb      	b.n	8001294 <__aeabi_fsub+0xf0>
 80012fc:	0031      	movs	r1, r6
 80012fe:	2020      	movs	r0, #32
 8001300:	40d1      	lsrs	r1, r2
 8001302:	1a82      	subs	r2, r0, r2
 8001304:	4096      	lsls	r6, r2
 8001306:	0032      	movs	r2, r6
 8001308:	1e50      	subs	r0, r2, #1
 800130a:	4182      	sbcs	r2, r0
 800130c:	430a      	orrs	r2, r1
 800130e:	189b      	adds	r3, r3, r2
 8001310:	015a      	lsls	r2, r3, #5
 8001312:	d5ae      	bpl.n	8001272 <__aeabi_fsub+0xce>
 8001314:	1c6a      	adds	r2, r5, #1
 8001316:	2dfe      	cmp	r5, #254	@ 0xfe
 8001318:	d14a      	bne.n	80013b0 <__aeabi_fsub+0x20c>
 800131a:	20ff      	movs	r0, #255	@ 0xff
 800131c:	2300      	movs	r3, #0
 800131e:	e7b9      	b.n	8001294 <__aeabi_fsub+0xf0>
 8001320:	22ff      	movs	r2, #255	@ 0xff
 8001322:	2b00      	cmp	r3, #0
 8001324:	d14b      	bne.n	80013be <__aeabi_fsub+0x21a>
 8001326:	000c      	movs	r4, r1
 8001328:	0033      	movs	r3, r6
 800132a:	08db      	lsrs	r3, r3, #3
 800132c:	2aff      	cmp	r2, #255	@ 0xff
 800132e:	d100      	bne.n	8001332 <__aeabi_fsub+0x18e>
 8001330:	e781      	b.n	8001236 <__aeabi_fsub+0x92>
 8001332:	e7df      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001334:	019f      	lsls	r7, r3, #6
 8001336:	09bf      	lsrs	r7, r7, #6
 8001338:	0038      	movs	r0, r7
 800133a:	f7ff f917 	bl	800056c <__clzsi2>
 800133e:	3805      	subs	r0, #5
 8001340:	4087      	lsls	r7, r0
 8001342:	4285      	cmp	r5, r0
 8001344:	dc21      	bgt.n	800138a <__aeabi_fsub+0x1e6>
 8001346:	003b      	movs	r3, r7
 8001348:	2120      	movs	r1, #32
 800134a:	1b42      	subs	r2, r0, r5
 800134c:	3201      	adds	r2, #1
 800134e:	40d3      	lsrs	r3, r2
 8001350:	1a8a      	subs	r2, r1, r2
 8001352:	4097      	lsls	r7, r2
 8001354:	1e7a      	subs	r2, r7, #1
 8001356:	4197      	sbcs	r7, r2
 8001358:	2200      	movs	r2, #0
 800135a:	433b      	orrs	r3, r7
 800135c:	0759      	lsls	r1, r3, #29
 800135e:	d000      	beq.n	8001362 <__aeabi_fsub+0x1be>
 8001360:	e78b      	b.n	800127a <__aeabi_fsub+0xd6>
 8001362:	e78f      	b.n	8001284 <__aeabi_fsub+0xe0>
 8001364:	20fe      	movs	r0, #254	@ 0xfe
 8001366:	1c6a      	adds	r2, r5, #1
 8001368:	4210      	tst	r0, r2
 800136a:	d112      	bne.n	8001392 <__aeabi_fsub+0x1ee>
 800136c:	2d00      	cmp	r5, #0
 800136e:	d152      	bne.n	8001416 <__aeabi_fsub+0x272>
 8001370:	2b00      	cmp	r3, #0
 8001372:	d07c      	beq.n	800146e <__aeabi_fsub+0x2ca>
 8001374:	2e00      	cmp	r6, #0
 8001376:	d0bb      	beq.n	80012f0 <__aeabi_fsub+0x14c>
 8001378:	1b9a      	subs	r2, r3, r6
 800137a:	0150      	lsls	r0, r2, #5
 800137c:	d400      	bmi.n	8001380 <__aeabi_fsub+0x1dc>
 800137e:	e08b      	b.n	8001498 <__aeabi_fsub+0x2f4>
 8001380:	2401      	movs	r4, #1
 8001382:	2200      	movs	r2, #0
 8001384:	1af3      	subs	r3, r6, r3
 8001386:	400c      	ands	r4, r1
 8001388:	e7e8      	b.n	800135c <__aeabi_fsub+0x1b8>
 800138a:	4b56      	ldr	r3, [pc, #344]	@ (80014e4 <__aeabi_fsub+0x340>)
 800138c:	1a2a      	subs	r2, r5, r0
 800138e:	403b      	ands	r3, r7
 8001390:	e7e4      	b.n	800135c <__aeabi_fsub+0x1b8>
 8001392:	1b9f      	subs	r7, r3, r6
 8001394:	017a      	lsls	r2, r7, #5
 8001396:	d446      	bmi.n	8001426 <__aeabi_fsub+0x282>
 8001398:	2f00      	cmp	r7, #0
 800139a:	d1cd      	bne.n	8001338 <__aeabi_fsub+0x194>
 800139c:	2400      	movs	r4, #0
 800139e:	2000      	movs	r0, #0
 80013a0:	2300      	movs	r3, #0
 80013a2:	e777      	b.n	8001294 <__aeabi_fsub+0xf0>
 80013a4:	199b      	adds	r3, r3, r6
 80013a6:	2501      	movs	r5, #1
 80013a8:	3201      	adds	r2, #1
 80013aa:	0159      	lsls	r1, r3, #5
 80013ac:	d400      	bmi.n	80013b0 <__aeabi_fsub+0x20c>
 80013ae:	e760      	b.n	8001272 <__aeabi_fsub+0xce>
 80013b0:	2101      	movs	r1, #1
 80013b2:	484d      	ldr	r0, [pc, #308]	@ (80014e8 <__aeabi_fsub+0x344>)
 80013b4:	4019      	ands	r1, r3
 80013b6:	085b      	lsrs	r3, r3, #1
 80013b8:	4003      	ands	r3, r0
 80013ba:	430b      	orrs	r3, r1
 80013bc:	e7ce      	b.n	800135c <__aeabi_fsub+0x1b8>
 80013be:	1e57      	subs	r7, r2, #1
 80013c0:	2a01      	cmp	r2, #1
 80013c2:	d05a      	beq.n	800147a <__aeabi_fsub+0x2d6>
 80013c4:	000c      	movs	r4, r1
 80013c6:	2aff      	cmp	r2, #255	@ 0xff
 80013c8:	d033      	beq.n	8001432 <__aeabi_fsub+0x28e>
 80013ca:	2201      	movs	r2, #1
 80013cc:	2f1b      	cmp	r7, #27
 80013ce:	dc07      	bgt.n	80013e0 <__aeabi_fsub+0x23c>
 80013d0:	2120      	movs	r1, #32
 80013d2:	1bc9      	subs	r1, r1, r7
 80013d4:	001a      	movs	r2, r3
 80013d6:	408b      	lsls	r3, r1
 80013d8:	40fa      	lsrs	r2, r7
 80013da:	1e59      	subs	r1, r3, #1
 80013dc:	418b      	sbcs	r3, r1
 80013de:	431a      	orrs	r2, r3
 80013e0:	0005      	movs	r5, r0
 80013e2:	1ab3      	subs	r3, r6, r2
 80013e4:	e743      	b.n	800126e <__aeabi_fsub+0xca>
 80013e6:	2d00      	cmp	r5, #0
 80013e8:	d123      	bne.n	8001432 <__aeabi_fsub+0x28e>
 80013ea:	22ff      	movs	r2, #255	@ 0xff
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d09b      	beq.n	8001328 <__aeabi_fsub+0x184>
 80013f0:	1e51      	subs	r1, r2, #1
 80013f2:	2a01      	cmp	r2, #1
 80013f4:	d0d6      	beq.n	80013a4 <__aeabi_fsub+0x200>
 80013f6:	2aff      	cmp	r2, #255	@ 0xff
 80013f8:	d01b      	beq.n	8001432 <__aeabi_fsub+0x28e>
 80013fa:	291b      	cmp	r1, #27
 80013fc:	dd2c      	ble.n	8001458 <__aeabi_fsub+0x2b4>
 80013fe:	0002      	movs	r2, r0
 8001400:	1c73      	adds	r3, r6, #1
 8001402:	e73a      	b.n	800127a <__aeabi_fsub+0xd6>
 8001404:	2aff      	cmp	r2, #255	@ 0xff
 8001406:	d088      	beq.n	800131a <__aeabi_fsub+0x176>
 8001408:	199b      	adds	r3, r3, r6
 800140a:	085b      	lsrs	r3, r3, #1
 800140c:	0759      	lsls	r1, r3, #29
 800140e:	d000      	beq.n	8001412 <__aeabi_fsub+0x26e>
 8001410:	e733      	b.n	800127a <__aeabi_fsub+0xd6>
 8001412:	08db      	lsrs	r3, r3, #3
 8001414:	e76e      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001416:	2b00      	cmp	r3, #0
 8001418:	d110      	bne.n	800143c <__aeabi_fsub+0x298>
 800141a:	2e00      	cmp	r6, #0
 800141c:	d043      	beq.n	80014a6 <__aeabi_fsub+0x302>
 800141e:	2401      	movs	r4, #1
 8001420:	0033      	movs	r3, r6
 8001422:	400c      	ands	r4, r1
 8001424:	e706      	b.n	8001234 <__aeabi_fsub+0x90>
 8001426:	2401      	movs	r4, #1
 8001428:	1af7      	subs	r7, r6, r3
 800142a:	400c      	ands	r4, r1
 800142c:	e784      	b.n	8001338 <__aeabi_fsub+0x194>
 800142e:	2b00      	cmp	r3, #0
 8001430:	d104      	bne.n	800143c <__aeabi_fsub+0x298>
 8001432:	0033      	movs	r3, r6
 8001434:	e6fe      	b.n	8001234 <__aeabi_fsub+0x90>
 8001436:	2501      	movs	r5, #1
 8001438:	1b9b      	subs	r3, r3, r6
 800143a:	e718      	b.n	800126e <__aeabi_fsub+0xca>
 800143c:	2e00      	cmp	r6, #0
 800143e:	d100      	bne.n	8001442 <__aeabi_fsub+0x29e>
 8001440:	e6f8      	b.n	8001234 <__aeabi_fsub+0x90>
 8001442:	2280      	movs	r2, #128	@ 0x80
 8001444:	03d2      	lsls	r2, r2, #15
 8001446:	4297      	cmp	r7, r2
 8001448:	d304      	bcc.n	8001454 <__aeabi_fsub+0x2b0>
 800144a:	4594      	cmp	ip, r2
 800144c:	d202      	bcs.n	8001454 <__aeabi_fsub+0x2b0>
 800144e:	2401      	movs	r4, #1
 8001450:	0033      	movs	r3, r6
 8001452:	400c      	ands	r4, r1
 8001454:	08db      	lsrs	r3, r3, #3
 8001456:	e6f1      	b.n	800123c <__aeabi_fsub+0x98>
 8001458:	001a      	movs	r2, r3
 800145a:	2520      	movs	r5, #32
 800145c:	40ca      	lsrs	r2, r1
 800145e:	1a69      	subs	r1, r5, r1
 8001460:	408b      	lsls	r3, r1
 8001462:	1e59      	subs	r1, r3, #1
 8001464:	418b      	sbcs	r3, r1
 8001466:	4313      	orrs	r3, r2
 8001468:	0005      	movs	r5, r0
 800146a:	199b      	adds	r3, r3, r6
 800146c:	e750      	b.n	8001310 <__aeabi_fsub+0x16c>
 800146e:	2e00      	cmp	r6, #0
 8001470:	d094      	beq.n	800139c <__aeabi_fsub+0x1f8>
 8001472:	2401      	movs	r4, #1
 8001474:	0033      	movs	r3, r6
 8001476:	400c      	ands	r4, r1
 8001478:	e73a      	b.n	80012f0 <__aeabi_fsub+0x14c>
 800147a:	000c      	movs	r4, r1
 800147c:	2501      	movs	r5, #1
 800147e:	1af3      	subs	r3, r6, r3
 8001480:	e6f5      	b.n	800126e <__aeabi_fsub+0xca>
 8001482:	0033      	movs	r3, r6
 8001484:	e734      	b.n	80012f0 <__aeabi_fsub+0x14c>
 8001486:	199b      	adds	r3, r3, r6
 8001488:	2200      	movs	r2, #0
 800148a:	0159      	lsls	r1, r3, #5
 800148c:	d5c1      	bpl.n	8001412 <__aeabi_fsub+0x26e>
 800148e:	4a15      	ldr	r2, [pc, #84]	@ (80014e4 <__aeabi_fsub+0x340>)
 8001490:	4013      	ands	r3, r2
 8001492:	08db      	lsrs	r3, r3, #3
 8001494:	2201      	movs	r2, #1
 8001496:	e72d      	b.n	80012f4 <__aeabi_fsub+0x150>
 8001498:	2a00      	cmp	r2, #0
 800149a:	d100      	bne.n	800149e <__aeabi_fsub+0x2fa>
 800149c:	e77e      	b.n	800139c <__aeabi_fsub+0x1f8>
 800149e:	0013      	movs	r3, r2
 80014a0:	2200      	movs	r2, #0
 80014a2:	08db      	lsrs	r3, r3, #3
 80014a4:	e726      	b.n	80012f4 <__aeabi_fsub+0x150>
 80014a6:	2380      	movs	r3, #128	@ 0x80
 80014a8:	2400      	movs	r4, #0
 80014aa:	20ff      	movs	r0, #255	@ 0xff
 80014ac:	03db      	lsls	r3, r3, #15
 80014ae:	e6f1      	b.n	8001294 <__aeabi_fsub+0xf0>
 80014b0:	2a00      	cmp	r2, #0
 80014b2:	d100      	bne.n	80014b6 <__aeabi_fsub+0x312>
 80014b4:	e756      	b.n	8001364 <__aeabi_fsub+0x1c0>
 80014b6:	1b47      	subs	r7, r0, r5
 80014b8:	003a      	movs	r2, r7
 80014ba:	2d00      	cmp	r5, #0
 80014bc:	d100      	bne.n	80014c0 <__aeabi_fsub+0x31c>
 80014be:	e730      	b.n	8001322 <__aeabi_fsub+0x17e>
 80014c0:	2280      	movs	r2, #128	@ 0x80
 80014c2:	04d2      	lsls	r2, r2, #19
 80014c4:	000c      	movs	r4, r1
 80014c6:	4313      	orrs	r3, r2
 80014c8:	e77f      	b.n	80013ca <__aeabi_fsub+0x226>
 80014ca:	2a00      	cmp	r2, #0
 80014cc:	d100      	bne.n	80014d0 <__aeabi_fsub+0x32c>
 80014ce:	e701      	b.n	80012d4 <__aeabi_fsub+0x130>
 80014d0:	1b41      	subs	r1, r0, r5
 80014d2:	2d00      	cmp	r5, #0
 80014d4:	d101      	bne.n	80014da <__aeabi_fsub+0x336>
 80014d6:	000a      	movs	r2, r1
 80014d8:	e788      	b.n	80013ec <__aeabi_fsub+0x248>
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	04d2      	lsls	r2, r2, #19
 80014de:	4313      	orrs	r3, r2
 80014e0:	e78b      	b.n	80013fa <__aeabi_fsub+0x256>
 80014e2:	46c0      	nop			@ (mov r8, r8)
 80014e4:	fbffffff 	.word	0xfbffffff
 80014e8:	7dffffff 	.word	0x7dffffff

080014ec <__aeabi_fcmpun>:
 80014ec:	0243      	lsls	r3, r0, #9
 80014ee:	024a      	lsls	r2, r1, #9
 80014f0:	0040      	lsls	r0, r0, #1
 80014f2:	0049      	lsls	r1, r1, #1
 80014f4:	0a5b      	lsrs	r3, r3, #9
 80014f6:	0a52      	lsrs	r2, r2, #9
 80014f8:	0e09      	lsrs	r1, r1, #24
 80014fa:	0e00      	lsrs	r0, r0, #24
 80014fc:	28ff      	cmp	r0, #255	@ 0xff
 80014fe:	d006      	beq.n	800150e <__aeabi_fcmpun+0x22>
 8001500:	2000      	movs	r0, #0
 8001502:	29ff      	cmp	r1, #255	@ 0xff
 8001504:	d102      	bne.n	800150c <__aeabi_fcmpun+0x20>
 8001506:	1e53      	subs	r3, r2, #1
 8001508:	419a      	sbcs	r2, r3
 800150a:	0010      	movs	r0, r2
 800150c:	4770      	bx	lr
 800150e:	38fe      	subs	r0, #254	@ 0xfe
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1fb      	bne.n	800150c <__aeabi_fcmpun+0x20>
 8001514:	e7f4      	b.n	8001500 <__aeabi_fcmpun+0x14>
 8001516:	46c0      	nop			@ (mov r8, r8)

08001518 <__aeabi_f2iz>:
 8001518:	0241      	lsls	r1, r0, #9
 800151a:	0042      	lsls	r2, r0, #1
 800151c:	0fc3      	lsrs	r3, r0, #31
 800151e:	0a49      	lsrs	r1, r1, #9
 8001520:	2000      	movs	r0, #0
 8001522:	0e12      	lsrs	r2, r2, #24
 8001524:	2a7e      	cmp	r2, #126	@ 0x7e
 8001526:	dd03      	ble.n	8001530 <__aeabi_f2iz+0x18>
 8001528:	2a9d      	cmp	r2, #157	@ 0x9d
 800152a:	dd02      	ble.n	8001532 <__aeabi_f2iz+0x1a>
 800152c:	4a09      	ldr	r2, [pc, #36]	@ (8001554 <__aeabi_f2iz+0x3c>)
 800152e:	1898      	adds	r0, r3, r2
 8001530:	4770      	bx	lr
 8001532:	2080      	movs	r0, #128	@ 0x80
 8001534:	0400      	lsls	r0, r0, #16
 8001536:	4301      	orrs	r1, r0
 8001538:	2a95      	cmp	r2, #149	@ 0x95
 800153a:	dc07      	bgt.n	800154c <__aeabi_f2iz+0x34>
 800153c:	2096      	movs	r0, #150	@ 0x96
 800153e:	1a82      	subs	r2, r0, r2
 8001540:	40d1      	lsrs	r1, r2
 8001542:	4248      	negs	r0, r1
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f3      	bne.n	8001530 <__aeabi_f2iz+0x18>
 8001548:	0008      	movs	r0, r1
 800154a:	e7f1      	b.n	8001530 <__aeabi_f2iz+0x18>
 800154c:	3a96      	subs	r2, #150	@ 0x96
 800154e:	4091      	lsls	r1, r2
 8001550:	e7f7      	b.n	8001542 <__aeabi_f2iz+0x2a>
 8001552:	46c0      	nop			@ (mov r8, r8)
 8001554:	7fffffff 	.word	0x7fffffff

08001558 <__aeabi_i2f>:
 8001558:	b570      	push	{r4, r5, r6, lr}
 800155a:	2800      	cmp	r0, #0
 800155c:	d013      	beq.n	8001586 <__aeabi_i2f+0x2e>
 800155e:	17c3      	asrs	r3, r0, #31
 8001560:	18c5      	adds	r5, r0, r3
 8001562:	405d      	eors	r5, r3
 8001564:	0fc4      	lsrs	r4, r0, #31
 8001566:	0028      	movs	r0, r5
 8001568:	f7ff f800 	bl	800056c <__clzsi2>
 800156c:	239e      	movs	r3, #158	@ 0x9e
 800156e:	0001      	movs	r1, r0
 8001570:	1a1b      	subs	r3, r3, r0
 8001572:	2b96      	cmp	r3, #150	@ 0x96
 8001574:	dc0f      	bgt.n	8001596 <__aeabi_i2f+0x3e>
 8001576:	2808      	cmp	r0, #8
 8001578:	d034      	beq.n	80015e4 <__aeabi_i2f+0x8c>
 800157a:	3908      	subs	r1, #8
 800157c:	408d      	lsls	r5, r1
 800157e:	026d      	lsls	r5, r5, #9
 8001580:	0a6d      	lsrs	r5, r5, #9
 8001582:	b2d8      	uxtb	r0, r3
 8001584:	e002      	b.n	800158c <__aeabi_i2f+0x34>
 8001586:	2400      	movs	r4, #0
 8001588:	2000      	movs	r0, #0
 800158a:	2500      	movs	r5, #0
 800158c:	05c0      	lsls	r0, r0, #23
 800158e:	4328      	orrs	r0, r5
 8001590:	07e4      	lsls	r4, r4, #31
 8001592:	4320      	orrs	r0, r4
 8001594:	bd70      	pop	{r4, r5, r6, pc}
 8001596:	2b99      	cmp	r3, #153	@ 0x99
 8001598:	dc16      	bgt.n	80015c8 <__aeabi_i2f+0x70>
 800159a:	1f42      	subs	r2, r0, #5
 800159c:	2805      	cmp	r0, #5
 800159e:	d000      	beq.n	80015a2 <__aeabi_i2f+0x4a>
 80015a0:	4095      	lsls	r5, r2
 80015a2:	002a      	movs	r2, r5
 80015a4:	4811      	ldr	r0, [pc, #68]	@ (80015ec <__aeabi_i2f+0x94>)
 80015a6:	4002      	ands	r2, r0
 80015a8:	076e      	lsls	r6, r5, #29
 80015aa:	d009      	beq.n	80015c0 <__aeabi_i2f+0x68>
 80015ac:	260f      	movs	r6, #15
 80015ae:	4035      	ands	r5, r6
 80015b0:	2d04      	cmp	r5, #4
 80015b2:	d005      	beq.n	80015c0 <__aeabi_i2f+0x68>
 80015b4:	3204      	adds	r2, #4
 80015b6:	0155      	lsls	r5, r2, #5
 80015b8:	d502      	bpl.n	80015c0 <__aeabi_i2f+0x68>
 80015ba:	239f      	movs	r3, #159	@ 0x9f
 80015bc:	4002      	ands	r2, r0
 80015be:	1a5b      	subs	r3, r3, r1
 80015c0:	0192      	lsls	r2, r2, #6
 80015c2:	0a55      	lsrs	r5, r2, #9
 80015c4:	b2d8      	uxtb	r0, r3
 80015c6:	e7e1      	b.n	800158c <__aeabi_i2f+0x34>
 80015c8:	2205      	movs	r2, #5
 80015ca:	1a12      	subs	r2, r2, r0
 80015cc:	0028      	movs	r0, r5
 80015ce:	40d0      	lsrs	r0, r2
 80015d0:	0002      	movs	r2, r0
 80015d2:	0008      	movs	r0, r1
 80015d4:	301b      	adds	r0, #27
 80015d6:	4085      	lsls	r5, r0
 80015d8:	0028      	movs	r0, r5
 80015da:	1e45      	subs	r5, r0, #1
 80015dc:	41a8      	sbcs	r0, r5
 80015de:	4302      	orrs	r2, r0
 80015e0:	0015      	movs	r5, r2
 80015e2:	e7de      	b.n	80015a2 <__aeabi_i2f+0x4a>
 80015e4:	026d      	lsls	r5, r5, #9
 80015e6:	2096      	movs	r0, #150	@ 0x96
 80015e8:	0a6d      	lsrs	r5, r5, #9
 80015ea:	e7cf      	b.n	800158c <__aeabi_i2f+0x34>
 80015ec:	fbffffff 	.word	0xfbffffff

080015f0 <__aeabi_ui2f>:
 80015f0:	b570      	push	{r4, r5, r6, lr}
 80015f2:	1e04      	subs	r4, r0, #0
 80015f4:	d00e      	beq.n	8001614 <__aeabi_ui2f+0x24>
 80015f6:	f7fe ffb9 	bl	800056c <__clzsi2>
 80015fa:	239e      	movs	r3, #158	@ 0x9e
 80015fc:	0001      	movs	r1, r0
 80015fe:	1a1b      	subs	r3, r3, r0
 8001600:	2b96      	cmp	r3, #150	@ 0x96
 8001602:	dc0c      	bgt.n	800161e <__aeabi_ui2f+0x2e>
 8001604:	2808      	cmp	r0, #8
 8001606:	d02f      	beq.n	8001668 <__aeabi_ui2f+0x78>
 8001608:	3908      	subs	r1, #8
 800160a:	408c      	lsls	r4, r1
 800160c:	0264      	lsls	r4, r4, #9
 800160e:	0a64      	lsrs	r4, r4, #9
 8001610:	b2d8      	uxtb	r0, r3
 8001612:	e001      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001614:	2000      	movs	r0, #0
 8001616:	2400      	movs	r4, #0
 8001618:	05c0      	lsls	r0, r0, #23
 800161a:	4320      	orrs	r0, r4
 800161c:	bd70      	pop	{r4, r5, r6, pc}
 800161e:	2b99      	cmp	r3, #153	@ 0x99
 8001620:	dc16      	bgt.n	8001650 <__aeabi_ui2f+0x60>
 8001622:	1f42      	subs	r2, r0, #5
 8001624:	2805      	cmp	r0, #5
 8001626:	d000      	beq.n	800162a <__aeabi_ui2f+0x3a>
 8001628:	4094      	lsls	r4, r2
 800162a:	0022      	movs	r2, r4
 800162c:	4810      	ldr	r0, [pc, #64]	@ (8001670 <__aeabi_ui2f+0x80>)
 800162e:	4002      	ands	r2, r0
 8001630:	0765      	lsls	r5, r4, #29
 8001632:	d009      	beq.n	8001648 <__aeabi_ui2f+0x58>
 8001634:	250f      	movs	r5, #15
 8001636:	402c      	ands	r4, r5
 8001638:	2c04      	cmp	r4, #4
 800163a:	d005      	beq.n	8001648 <__aeabi_ui2f+0x58>
 800163c:	3204      	adds	r2, #4
 800163e:	0154      	lsls	r4, r2, #5
 8001640:	d502      	bpl.n	8001648 <__aeabi_ui2f+0x58>
 8001642:	239f      	movs	r3, #159	@ 0x9f
 8001644:	4002      	ands	r2, r0
 8001646:	1a5b      	subs	r3, r3, r1
 8001648:	0192      	lsls	r2, r2, #6
 800164a:	0a54      	lsrs	r4, r2, #9
 800164c:	b2d8      	uxtb	r0, r3
 800164e:	e7e3      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001650:	0002      	movs	r2, r0
 8001652:	0020      	movs	r0, r4
 8001654:	321b      	adds	r2, #27
 8001656:	4090      	lsls	r0, r2
 8001658:	0002      	movs	r2, r0
 800165a:	1e50      	subs	r0, r2, #1
 800165c:	4182      	sbcs	r2, r0
 800165e:	2005      	movs	r0, #5
 8001660:	1a40      	subs	r0, r0, r1
 8001662:	40c4      	lsrs	r4, r0
 8001664:	4314      	orrs	r4, r2
 8001666:	e7e0      	b.n	800162a <__aeabi_ui2f+0x3a>
 8001668:	0264      	lsls	r4, r4, #9
 800166a:	2096      	movs	r0, #150	@ 0x96
 800166c:	0a64      	lsrs	r4, r4, #9
 800166e:	e7d3      	b.n	8001618 <__aeabi_ui2f+0x28>
 8001670:	fbffffff 	.word	0xfbffffff

08001674 <__aeabi_dadd>:
 8001674:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001676:	4657      	mov	r7, sl
 8001678:	464e      	mov	r6, r9
 800167a:	4645      	mov	r5, r8
 800167c:	46de      	mov	lr, fp
 800167e:	b5e0      	push	{r5, r6, r7, lr}
 8001680:	b083      	sub	sp, #12
 8001682:	9000      	str	r0, [sp, #0]
 8001684:	9101      	str	r1, [sp, #4]
 8001686:	030c      	lsls	r4, r1, #12
 8001688:	004f      	lsls	r7, r1, #1
 800168a:	0fce      	lsrs	r6, r1, #31
 800168c:	0a61      	lsrs	r1, r4, #9
 800168e:	9c00      	ldr	r4, [sp, #0]
 8001690:	031d      	lsls	r5, r3, #12
 8001692:	0f64      	lsrs	r4, r4, #29
 8001694:	430c      	orrs	r4, r1
 8001696:	9900      	ldr	r1, [sp, #0]
 8001698:	9200      	str	r2, [sp, #0]
 800169a:	9301      	str	r3, [sp, #4]
 800169c:	00c8      	lsls	r0, r1, #3
 800169e:	0059      	lsls	r1, r3, #1
 80016a0:	0d4b      	lsrs	r3, r1, #21
 80016a2:	4699      	mov	r9, r3
 80016a4:	9a00      	ldr	r2, [sp, #0]
 80016a6:	9b01      	ldr	r3, [sp, #4]
 80016a8:	0a6d      	lsrs	r5, r5, #9
 80016aa:	0fd9      	lsrs	r1, r3, #31
 80016ac:	0f53      	lsrs	r3, r2, #29
 80016ae:	432b      	orrs	r3, r5
 80016b0:	469a      	mov	sl, r3
 80016b2:	9b00      	ldr	r3, [sp, #0]
 80016b4:	0d7f      	lsrs	r7, r7, #21
 80016b6:	00da      	lsls	r2, r3, #3
 80016b8:	4694      	mov	ip, r2
 80016ba:	464a      	mov	r2, r9
 80016bc:	46b0      	mov	r8, r6
 80016be:	1aba      	subs	r2, r7, r2
 80016c0:	428e      	cmp	r6, r1
 80016c2:	d100      	bne.n	80016c6 <__aeabi_dadd+0x52>
 80016c4:	e0b0      	b.n	8001828 <__aeabi_dadd+0x1b4>
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	dc00      	bgt.n	80016cc <__aeabi_dadd+0x58>
 80016ca:	e078      	b.n	80017be <__aeabi_dadd+0x14a>
 80016cc:	4649      	mov	r1, r9
 80016ce:	2900      	cmp	r1, #0
 80016d0:	d100      	bne.n	80016d4 <__aeabi_dadd+0x60>
 80016d2:	e0e9      	b.n	80018a8 <__aeabi_dadd+0x234>
 80016d4:	49c9      	ldr	r1, [pc, #804]	@ (80019fc <__aeabi_dadd+0x388>)
 80016d6:	428f      	cmp	r7, r1
 80016d8:	d100      	bne.n	80016dc <__aeabi_dadd+0x68>
 80016da:	e195      	b.n	8001a08 <__aeabi_dadd+0x394>
 80016dc:	2501      	movs	r5, #1
 80016de:	2a38      	cmp	r2, #56	@ 0x38
 80016e0:	dc16      	bgt.n	8001710 <__aeabi_dadd+0x9c>
 80016e2:	2180      	movs	r1, #128	@ 0x80
 80016e4:	4653      	mov	r3, sl
 80016e6:	0409      	lsls	r1, r1, #16
 80016e8:	430b      	orrs	r3, r1
 80016ea:	469a      	mov	sl, r3
 80016ec:	2a1f      	cmp	r2, #31
 80016ee:	dd00      	ble.n	80016f2 <__aeabi_dadd+0x7e>
 80016f0:	e1e7      	b.n	8001ac2 <__aeabi_dadd+0x44e>
 80016f2:	2120      	movs	r1, #32
 80016f4:	4655      	mov	r5, sl
 80016f6:	1a8b      	subs	r3, r1, r2
 80016f8:	4661      	mov	r1, ip
 80016fa:	409d      	lsls	r5, r3
 80016fc:	40d1      	lsrs	r1, r2
 80016fe:	430d      	orrs	r5, r1
 8001700:	4661      	mov	r1, ip
 8001702:	4099      	lsls	r1, r3
 8001704:	1e4b      	subs	r3, r1, #1
 8001706:	4199      	sbcs	r1, r3
 8001708:	4653      	mov	r3, sl
 800170a:	40d3      	lsrs	r3, r2
 800170c:	430d      	orrs	r5, r1
 800170e:	1ae4      	subs	r4, r4, r3
 8001710:	1b45      	subs	r5, r0, r5
 8001712:	42a8      	cmp	r0, r5
 8001714:	4180      	sbcs	r0, r0
 8001716:	4240      	negs	r0, r0
 8001718:	1a24      	subs	r4, r4, r0
 800171a:	0223      	lsls	r3, r4, #8
 800171c:	d400      	bmi.n	8001720 <__aeabi_dadd+0xac>
 800171e:	e10f      	b.n	8001940 <__aeabi_dadd+0x2cc>
 8001720:	0264      	lsls	r4, r4, #9
 8001722:	0a64      	lsrs	r4, r4, #9
 8001724:	2c00      	cmp	r4, #0
 8001726:	d100      	bne.n	800172a <__aeabi_dadd+0xb6>
 8001728:	e139      	b.n	800199e <__aeabi_dadd+0x32a>
 800172a:	0020      	movs	r0, r4
 800172c:	f7fe ff1e 	bl	800056c <__clzsi2>
 8001730:	0003      	movs	r3, r0
 8001732:	3b08      	subs	r3, #8
 8001734:	2120      	movs	r1, #32
 8001736:	0028      	movs	r0, r5
 8001738:	1aca      	subs	r2, r1, r3
 800173a:	40d0      	lsrs	r0, r2
 800173c:	409c      	lsls	r4, r3
 800173e:	0002      	movs	r2, r0
 8001740:	409d      	lsls	r5, r3
 8001742:	4322      	orrs	r2, r4
 8001744:	429f      	cmp	r7, r3
 8001746:	dd00      	ble.n	800174a <__aeabi_dadd+0xd6>
 8001748:	e173      	b.n	8001a32 <__aeabi_dadd+0x3be>
 800174a:	1bd8      	subs	r0, r3, r7
 800174c:	3001      	adds	r0, #1
 800174e:	1a09      	subs	r1, r1, r0
 8001750:	002c      	movs	r4, r5
 8001752:	408d      	lsls	r5, r1
 8001754:	40c4      	lsrs	r4, r0
 8001756:	1e6b      	subs	r3, r5, #1
 8001758:	419d      	sbcs	r5, r3
 800175a:	0013      	movs	r3, r2
 800175c:	40c2      	lsrs	r2, r0
 800175e:	408b      	lsls	r3, r1
 8001760:	4325      	orrs	r5, r4
 8001762:	2700      	movs	r7, #0
 8001764:	0014      	movs	r4, r2
 8001766:	431d      	orrs	r5, r3
 8001768:	076b      	lsls	r3, r5, #29
 800176a:	d009      	beq.n	8001780 <__aeabi_dadd+0x10c>
 800176c:	230f      	movs	r3, #15
 800176e:	402b      	ands	r3, r5
 8001770:	2b04      	cmp	r3, #4
 8001772:	d005      	beq.n	8001780 <__aeabi_dadd+0x10c>
 8001774:	1d2b      	adds	r3, r5, #4
 8001776:	42ab      	cmp	r3, r5
 8001778:	41ad      	sbcs	r5, r5
 800177a:	426d      	negs	r5, r5
 800177c:	1964      	adds	r4, r4, r5
 800177e:	001d      	movs	r5, r3
 8001780:	0223      	lsls	r3, r4, #8
 8001782:	d400      	bmi.n	8001786 <__aeabi_dadd+0x112>
 8001784:	e12d      	b.n	80019e2 <__aeabi_dadd+0x36e>
 8001786:	4a9d      	ldr	r2, [pc, #628]	@ (80019fc <__aeabi_dadd+0x388>)
 8001788:	3701      	adds	r7, #1
 800178a:	4297      	cmp	r7, r2
 800178c:	d100      	bne.n	8001790 <__aeabi_dadd+0x11c>
 800178e:	e0d3      	b.n	8001938 <__aeabi_dadd+0x2c4>
 8001790:	4646      	mov	r6, r8
 8001792:	499b      	ldr	r1, [pc, #620]	@ (8001a00 <__aeabi_dadd+0x38c>)
 8001794:	08ed      	lsrs	r5, r5, #3
 8001796:	4021      	ands	r1, r4
 8001798:	074a      	lsls	r2, r1, #29
 800179a:	432a      	orrs	r2, r5
 800179c:	057c      	lsls	r4, r7, #21
 800179e:	024d      	lsls	r5, r1, #9
 80017a0:	0b2d      	lsrs	r5, r5, #12
 80017a2:	0d64      	lsrs	r4, r4, #21
 80017a4:	0524      	lsls	r4, r4, #20
 80017a6:	432c      	orrs	r4, r5
 80017a8:	07f6      	lsls	r6, r6, #31
 80017aa:	4334      	orrs	r4, r6
 80017ac:	0010      	movs	r0, r2
 80017ae:	0021      	movs	r1, r4
 80017b0:	b003      	add	sp, #12
 80017b2:	bcf0      	pop	{r4, r5, r6, r7}
 80017b4:	46bb      	mov	fp, r7
 80017b6:	46b2      	mov	sl, r6
 80017b8:	46a9      	mov	r9, r5
 80017ba:	46a0      	mov	r8, r4
 80017bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017be:	2a00      	cmp	r2, #0
 80017c0:	d100      	bne.n	80017c4 <__aeabi_dadd+0x150>
 80017c2:	e084      	b.n	80018ce <__aeabi_dadd+0x25a>
 80017c4:	464a      	mov	r2, r9
 80017c6:	1bd2      	subs	r2, r2, r7
 80017c8:	2f00      	cmp	r7, #0
 80017ca:	d000      	beq.n	80017ce <__aeabi_dadd+0x15a>
 80017cc:	e16d      	b.n	8001aaa <__aeabi_dadd+0x436>
 80017ce:	0025      	movs	r5, r4
 80017d0:	4305      	orrs	r5, r0
 80017d2:	d100      	bne.n	80017d6 <__aeabi_dadd+0x162>
 80017d4:	e127      	b.n	8001a26 <__aeabi_dadd+0x3b2>
 80017d6:	1e56      	subs	r6, r2, #1
 80017d8:	2a01      	cmp	r2, #1
 80017da:	d100      	bne.n	80017de <__aeabi_dadd+0x16a>
 80017dc:	e23b      	b.n	8001c56 <__aeabi_dadd+0x5e2>
 80017de:	4d87      	ldr	r5, [pc, #540]	@ (80019fc <__aeabi_dadd+0x388>)
 80017e0:	42aa      	cmp	r2, r5
 80017e2:	d100      	bne.n	80017e6 <__aeabi_dadd+0x172>
 80017e4:	e26a      	b.n	8001cbc <__aeabi_dadd+0x648>
 80017e6:	2501      	movs	r5, #1
 80017e8:	2e38      	cmp	r6, #56	@ 0x38
 80017ea:	dc12      	bgt.n	8001812 <__aeabi_dadd+0x19e>
 80017ec:	0032      	movs	r2, r6
 80017ee:	2a1f      	cmp	r2, #31
 80017f0:	dd00      	ble.n	80017f4 <__aeabi_dadd+0x180>
 80017f2:	e1f8      	b.n	8001be6 <__aeabi_dadd+0x572>
 80017f4:	2620      	movs	r6, #32
 80017f6:	0025      	movs	r5, r4
 80017f8:	1ab6      	subs	r6, r6, r2
 80017fa:	0007      	movs	r7, r0
 80017fc:	4653      	mov	r3, sl
 80017fe:	40b0      	lsls	r0, r6
 8001800:	40d4      	lsrs	r4, r2
 8001802:	40b5      	lsls	r5, r6
 8001804:	40d7      	lsrs	r7, r2
 8001806:	1e46      	subs	r6, r0, #1
 8001808:	41b0      	sbcs	r0, r6
 800180a:	1b1b      	subs	r3, r3, r4
 800180c:	469a      	mov	sl, r3
 800180e:	433d      	orrs	r5, r7
 8001810:	4305      	orrs	r5, r0
 8001812:	4662      	mov	r2, ip
 8001814:	1b55      	subs	r5, r2, r5
 8001816:	45ac      	cmp	ip, r5
 8001818:	4192      	sbcs	r2, r2
 800181a:	4653      	mov	r3, sl
 800181c:	4252      	negs	r2, r2
 800181e:	000e      	movs	r6, r1
 8001820:	464f      	mov	r7, r9
 8001822:	4688      	mov	r8, r1
 8001824:	1a9c      	subs	r4, r3, r2
 8001826:	e778      	b.n	800171a <__aeabi_dadd+0xa6>
 8001828:	2a00      	cmp	r2, #0
 800182a:	dc00      	bgt.n	800182e <__aeabi_dadd+0x1ba>
 800182c:	e08e      	b.n	800194c <__aeabi_dadd+0x2d8>
 800182e:	4649      	mov	r1, r9
 8001830:	2900      	cmp	r1, #0
 8001832:	d175      	bne.n	8001920 <__aeabi_dadd+0x2ac>
 8001834:	4661      	mov	r1, ip
 8001836:	4653      	mov	r3, sl
 8001838:	4319      	orrs	r1, r3
 800183a:	d100      	bne.n	800183e <__aeabi_dadd+0x1ca>
 800183c:	e0f6      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 800183e:	1e51      	subs	r1, r2, #1
 8001840:	2a01      	cmp	r2, #1
 8001842:	d100      	bne.n	8001846 <__aeabi_dadd+0x1d2>
 8001844:	e191      	b.n	8001b6a <__aeabi_dadd+0x4f6>
 8001846:	4d6d      	ldr	r5, [pc, #436]	@ (80019fc <__aeabi_dadd+0x388>)
 8001848:	42aa      	cmp	r2, r5
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x1da>
 800184c:	e0dc      	b.n	8001a08 <__aeabi_dadd+0x394>
 800184e:	2501      	movs	r5, #1
 8001850:	2938      	cmp	r1, #56	@ 0x38
 8001852:	dc14      	bgt.n	800187e <__aeabi_dadd+0x20a>
 8001854:	000a      	movs	r2, r1
 8001856:	2a1f      	cmp	r2, #31
 8001858:	dd00      	ble.n	800185c <__aeabi_dadd+0x1e8>
 800185a:	e1a2      	b.n	8001ba2 <__aeabi_dadd+0x52e>
 800185c:	2120      	movs	r1, #32
 800185e:	4653      	mov	r3, sl
 8001860:	1a89      	subs	r1, r1, r2
 8001862:	408b      	lsls	r3, r1
 8001864:	001d      	movs	r5, r3
 8001866:	4663      	mov	r3, ip
 8001868:	40d3      	lsrs	r3, r2
 800186a:	431d      	orrs	r5, r3
 800186c:	4663      	mov	r3, ip
 800186e:	408b      	lsls	r3, r1
 8001870:	0019      	movs	r1, r3
 8001872:	1e4b      	subs	r3, r1, #1
 8001874:	4199      	sbcs	r1, r3
 8001876:	4653      	mov	r3, sl
 8001878:	40d3      	lsrs	r3, r2
 800187a:	430d      	orrs	r5, r1
 800187c:	18e4      	adds	r4, r4, r3
 800187e:	182d      	adds	r5, r5, r0
 8001880:	4285      	cmp	r5, r0
 8001882:	4180      	sbcs	r0, r0
 8001884:	4240      	negs	r0, r0
 8001886:	1824      	adds	r4, r4, r0
 8001888:	0223      	lsls	r3, r4, #8
 800188a:	d559      	bpl.n	8001940 <__aeabi_dadd+0x2cc>
 800188c:	4b5b      	ldr	r3, [pc, #364]	@ (80019fc <__aeabi_dadd+0x388>)
 800188e:	3701      	adds	r7, #1
 8001890:	429f      	cmp	r7, r3
 8001892:	d051      	beq.n	8001938 <__aeabi_dadd+0x2c4>
 8001894:	2101      	movs	r1, #1
 8001896:	4b5a      	ldr	r3, [pc, #360]	@ (8001a00 <__aeabi_dadd+0x38c>)
 8001898:	086a      	lsrs	r2, r5, #1
 800189a:	401c      	ands	r4, r3
 800189c:	4029      	ands	r1, r5
 800189e:	430a      	orrs	r2, r1
 80018a0:	07e5      	lsls	r5, r4, #31
 80018a2:	4315      	orrs	r5, r2
 80018a4:	0864      	lsrs	r4, r4, #1
 80018a6:	e75f      	b.n	8001768 <__aeabi_dadd+0xf4>
 80018a8:	4661      	mov	r1, ip
 80018aa:	4653      	mov	r3, sl
 80018ac:	4319      	orrs	r1, r3
 80018ae:	d100      	bne.n	80018b2 <__aeabi_dadd+0x23e>
 80018b0:	e0bc      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 80018b2:	1e51      	subs	r1, r2, #1
 80018b4:	2a01      	cmp	r2, #1
 80018b6:	d100      	bne.n	80018ba <__aeabi_dadd+0x246>
 80018b8:	e164      	b.n	8001b84 <__aeabi_dadd+0x510>
 80018ba:	4d50      	ldr	r5, [pc, #320]	@ (80019fc <__aeabi_dadd+0x388>)
 80018bc:	42aa      	cmp	r2, r5
 80018be:	d100      	bne.n	80018c2 <__aeabi_dadd+0x24e>
 80018c0:	e16a      	b.n	8001b98 <__aeabi_dadd+0x524>
 80018c2:	2501      	movs	r5, #1
 80018c4:	2938      	cmp	r1, #56	@ 0x38
 80018c6:	dd00      	ble.n	80018ca <__aeabi_dadd+0x256>
 80018c8:	e722      	b.n	8001710 <__aeabi_dadd+0x9c>
 80018ca:	000a      	movs	r2, r1
 80018cc:	e70e      	b.n	80016ec <__aeabi_dadd+0x78>
 80018ce:	4a4d      	ldr	r2, [pc, #308]	@ (8001a04 <__aeabi_dadd+0x390>)
 80018d0:	1c7d      	adds	r5, r7, #1
 80018d2:	4215      	tst	r5, r2
 80018d4:	d000      	beq.n	80018d8 <__aeabi_dadd+0x264>
 80018d6:	e0d0      	b.n	8001a7a <__aeabi_dadd+0x406>
 80018d8:	0025      	movs	r5, r4
 80018da:	4662      	mov	r2, ip
 80018dc:	4653      	mov	r3, sl
 80018de:	4305      	orrs	r5, r0
 80018e0:	431a      	orrs	r2, r3
 80018e2:	2f00      	cmp	r7, #0
 80018e4:	d000      	beq.n	80018e8 <__aeabi_dadd+0x274>
 80018e6:	e137      	b.n	8001b58 <__aeabi_dadd+0x4e4>
 80018e8:	2d00      	cmp	r5, #0
 80018ea:	d100      	bne.n	80018ee <__aeabi_dadd+0x27a>
 80018ec:	e1a8      	b.n	8001c40 <__aeabi_dadd+0x5cc>
 80018ee:	2a00      	cmp	r2, #0
 80018f0:	d100      	bne.n	80018f4 <__aeabi_dadd+0x280>
 80018f2:	e16a      	b.n	8001bca <__aeabi_dadd+0x556>
 80018f4:	4663      	mov	r3, ip
 80018f6:	1ac5      	subs	r5, r0, r3
 80018f8:	4653      	mov	r3, sl
 80018fa:	1ae2      	subs	r2, r4, r3
 80018fc:	42a8      	cmp	r0, r5
 80018fe:	419b      	sbcs	r3, r3
 8001900:	425b      	negs	r3, r3
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	021a      	lsls	r2, r3, #8
 8001906:	d400      	bmi.n	800190a <__aeabi_dadd+0x296>
 8001908:	e203      	b.n	8001d12 <__aeabi_dadd+0x69e>
 800190a:	4663      	mov	r3, ip
 800190c:	1a1d      	subs	r5, r3, r0
 800190e:	45ac      	cmp	ip, r5
 8001910:	4192      	sbcs	r2, r2
 8001912:	4653      	mov	r3, sl
 8001914:	4252      	negs	r2, r2
 8001916:	1b1c      	subs	r4, r3, r4
 8001918:	000e      	movs	r6, r1
 800191a:	4688      	mov	r8, r1
 800191c:	1aa4      	subs	r4, r4, r2
 800191e:	e723      	b.n	8001768 <__aeabi_dadd+0xf4>
 8001920:	4936      	ldr	r1, [pc, #216]	@ (80019fc <__aeabi_dadd+0x388>)
 8001922:	428f      	cmp	r7, r1
 8001924:	d070      	beq.n	8001a08 <__aeabi_dadd+0x394>
 8001926:	2501      	movs	r5, #1
 8001928:	2a38      	cmp	r2, #56	@ 0x38
 800192a:	dca8      	bgt.n	800187e <__aeabi_dadd+0x20a>
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	4653      	mov	r3, sl
 8001930:	0409      	lsls	r1, r1, #16
 8001932:	430b      	orrs	r3, r1
 8001934:	469a      	mov	sl, r3
 8001936:	e78e      	b.n	8001856 <__aeabi_dadd+0x1e2>
 8001938:	003c      	movs	r4, r7
 800193a:	2500      	movs	r5, #0
 800193c:	2200      	movs	r2, #0
 800193e:	e731      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001940:	2307      	movs	r3, #7
 8001942:	402b      	ands	r3, r5
 8001944:	2b00      	cmp	r3, #0
 8001946:	d000      	beq.n	800194a <__aeabi_dadd+0x2d6>
 8001948:	e710      	b.n	800176c <__aeabi_dadd+0xf8>
 800194a:	e093      	b.n	8001a74 <__aeabi_dadd+0x400>
 800194c:	2a00      	cmp	r2, #0
 800194e:	d074      	beq.n	8001a3a <__aeabi_dadd+0x3c6>
 8001950:	464a      	mov	r2, r9
 8001952:	1bd2      	subs	r2, r2, r7
 8001954:	2f00      	cmp	r7, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x2e6>
 8001958:	e0c7      	b.n	8001aea <__aeabi_dadd+0x476>
 800195a:	4928      	ldr	r1, [pc, #160]	@ (80019fc <__aeabi_dadd+0x388>)
 800195c:	4589      	cmp	r9, r1
 800195e:	d100      	bne.n	8001962 <__aeabi_dadd+0x2ee>
 8001960:	e185      	b.n	8001c6e <__aeabi_dadd+0x5fa>
 8001962:	2501      	movs	r5, #1
 8001964:	2a38      	cmp	r2, #56	@ 0x38
 8001966:	dc12      	bgt.n	800198e <__aeabi_dadd+0x31a>
 8001968:	2180      	movs	r1, #128	@ 0x80
 800196a:	0409      	lsls	r1, r1, #16
 800196c:	430c      	orrs	r4, r1
 800196e:	2a1f      	cmp	r2, #31
 8001970:	dd00      	ble.n	8001974 <__aeabi_dadd+0x300>
 8001972:	e1ab      	b.n	8001ccc <__aeabi_dadd+0x658>
 8001974:	2120      	movs	r1, #32
 8001976:	0025      	movs	r5, r4
 8001978:	1a89      	subs	r1, r1, r2
 800197a:	0007      	movs	r7, r0
 800197c:	4088      	lsls	r0, r1
 800197e:	408d      	lsls	r5, r1
 8001980:	40d7      	lsrs	r7, r2
 8001982:	1e41      	subs	r1, r0, #1
 8001984:	4188      	sbcs	r0, r1
 8001986:	40d4      	lsrs	r4, r2
 8001988:	433d      	orrs	r5, r7
 800198a:	4305      	orrs	r5, r0
 800198c:	44a2      	add	sl, r4
 800198e:	4465      	add	r5, ip
 8001990:	4565      	cmp	r5, ip
 8001992:	4192      	sbcs	r2, r2
 8001994:	4252      	negs	r2, r2
 8001996:	4452      	add	r2, sl
 8001998:	0014      	movs	r4, r2
 800199a:	464f      	mov	r7, r9
 800199c:	e774      	b.n	8001888 <__aeabi_dadd+0x214>
 800199e:	0028      	movs	r0, r5
 80019a0:	f7fe fde4 	bl	800056c <__clzsi2>
 80019a4:	0003      	movs	r3, r0
 80019a6:	3318      	adds	r3, #24
 80019a8:	2b1f      	cmp	r3, #31
 80019aa:	dc00      	bgt.n	80019ae <__aeabi_dadd+0x33a>
 80019ac:	e6c2      	b.n	8001734 <__aeabi_dadd+0xc0>
 80019ae:	002a      	movs	r2, r5
 80019b0:	3808      	subs	r0, #8
 80019b2:	4082      	lsls	r2, r0
 80019b4:	429f      	cmp	r7, r3
 80019b6:	dd00      	ble.n	80019ba <__aeabi_dadd+0x346>
 80019b8:	e0a9      	b.n	8001b0e <__aeabi_dadd+0x49a>
 80019ba:	1bdb      	subs	r3, r3, r7
 80019bc:	1c58      	adds	r0, r3, #1
 80019be:	281f      	cmp	r0, #31
 80019c0:	dc00      	bgt.n	80019c4 <__aeabi_dadd+0x350>
 80019c2:	e1ac      	b.n	8001d1e <__aeabi_dadd+0x6aa>
 80019c4:	0015      	movs	r5, r2
 80019c6:	3b1f      	subs	r3, #31
 80019c8:	40dd      	lsrs	r5, r3
 80019ca:	2820      	cmp	r0, #32
 80019cc:	d005      	beq.n	80019da <__aeabi_dadd+0x366>
 80019ce:	2340      	movs	r3, #64	@ 0x40
 80019d0:	1a1b      	subs	r3, r3, r0
 80019d2:	409a      	lsls	r2, r3
 80019d4:	1e53      	subs	r3, r2, #1
 80019d6:	419a      	sbcs	r2, r3
 80019d8:	4315      	orrs	r5, r2
 80019da:	2307      	movs	r3, #7
 80019dc:	2700      	movs	r7, #0
 80019de:	402b      	ands	r3, r5
 80019e0:	e7b0      	b.n	8001944 <__aeabi_dadd+0x2d0>
 80019e2:	08ed      	lsrs	r5, r5, #3
 80019e4:	4b05      	ldr	r3, [pc, #20]	@ (80019fc <__aeabi_dadd+0x388>)
 80019e6:	0762      	lsls	r2, r4, #29
 80019e8:	432a      	orrs	r2, r5
 80019ea:	08e4      	lsrs	r4, r4, #3
 80019ec:	429f      	cmp	r7, r3
 80019ee:	d00f      	beq.n	8001a10 <__aeabi_dadd+0x39c>
 80019f0:	0324      	lsls	r4, r4, #12
 80019f2:	0b25      	lsrs	r5, r4, #12
 80019f4:	057c      	lsls	r4, r7, #21
 80019f6:	0d64      	lsrs	r4, r4, #21
 80019f8:	e6d4      	b.n	80017a4 <__aeabi_dadd+0x130>
 80019fa:	46c0      	nop			@ (mov r8, r8)
 80019fc:	000007ff 	.word	0x000007ff
 8001a00:	ff7fffff 	.word	0xff7fffff
 8001a04:	000007fe 	.word	0x000007fe
 8001a08:	08c0      	lsrs	r0, r0, #3
 8001a0a:	0762      	lsls	r2, r4, #29
 8001a0c:	4302      	orrs	r2, r0
 8001a0e:	08e4      	lsrs	r4, r4, #3
 8001a10:	0013      	movs	r3, r2
 8001a12:	4323      	orrs	r3, r4
 8001a14:	d100      	bne.n	8001a18 <__aeabi_dadd+0x3a4>
 8001a16:	e186      	b.n	8001d26 <__aeabi_dadd+0x6b2>
 8001a18:	2580      	movs	r5, #128	@ 0x80
 8001a1a:	032d      	lsls	r5, r5, #12
 8001a1c:	4325      	orrs	r5, r4
 8001a1e:	032d      	lsls	r5, r5, #12
 8001a20:	4cc3      	ldr	r4, [pc, #780]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001a22:	0b2d      	lsrs	r5, r5, #12
 8001a24:	e6be      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001a26:	4660      	mov	r0, ip
 8001a28:	4654      	mov	r4, sl
 8001a2a:	000e      	movs	r6, r1
 8001a2c:	0017      	movs	r7, r2
 8001a2e:	08c5      	lsrs	r5, r0, #3
 8001a30:	e7d8      	b.n	80019e4 <__aeabi_dadd+0x370>
 8001a32:	4cc0      	ldr	r4, [pc, #768]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001a34:	1aff      	subs	r7, r7, r3
 8001a36:	4014      	ands	r4, r2
 8001a38:	e696      	b.n	8001768 <__aeabi_dadd+0xf4>
 8001a3a:	4abf      	ldr	r2, [pc, #764]	@ (8001d38 <__aeabi_dadd+0x6c4>)
 8001a3c:	1c79      	adds	r1, r7, #1
 8001a3e:	4211      	tst	r1, r2
 8001a40:	d16b      	bne.n	8001b1a <__aeabi_dadd+0x4a6>
 8001a42:	0022      	movs	r2, r4
 8001a44:	4302      	orrs	r2, r0
 8001a46:	2f00      	cmp	r7, #0
 8001a48:	d000      	beq.n	8001a4c <__aeabi_dadd+0x3d8>
 8001a4a:	e0db      	b.n	8001c04 <__aeabi_dadd+0x590>
 8001a4c:	2a00      	cmp	r2, #0
 8001a4e:	d100      	bne.n	8001a52 <__aeabi_dadd+0x3de>
 8001a50:	e12d      	b.n	8001cae <__aeabi_dadd+0x63a>
 8001a52:	4662      	mov	r2, ip
 8001a54:	4653      	mov	r3, sl
 8001a56:	431a      	orrs	r2, r3
 8001a58:	d100      	bne.n	8001a5c <__aeabi_dadd+0x3e8>
 8001a5a:	e0b6      	b.n	8001bca <__aeabi_dadd+0x556>
 8001a5c:	4663      	mov	r3, ip
 8001a5e:	18c5      	adds	r5, r0, r3
 8001a60:	4285      	cmp	r5, r0
 8001a62:	4180      	sbcs	r0, r0
 8001a64:	4454      	add	r4, sl
 8001a66:	4240      	negs	r0, r0
 8001a68:	1824      	adds	r4, r4, r0
 8001a6a:	0223      	lsls	r3, r4, #8
 8001a6c:	d502      	bpl.n	8001a74 <__aeabi_dadd+0x400>
 8001a6e:	000f      	movs	r7, r1
 8001a70:	4bb0      	ldr	r3, [pc, #704]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001a72:	401c      	ands	r4, r3
 8001a74:	003a      	movs	r2, r7
 8001a76:	0028      	movs	r0, r5
 8001a78:	e7d8      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 8001a7a:	4662      	mov	r2, ip
 8001a7c:	1a85      	subs	r5, r0, r2
 8001a7e:	42a8      	cmp	r0, r5
 8001a80:	4192      	sbcs	r2, r2
 8001a82:	4653      	mov	r3, sl
 8001a84:	4252      	negs	r2, r2
 8001a86:	4691      	mov	r9, r2
 8001a88:	1ae3      	subs	r3, r4, r3
 8001a8a:	001a      	movs	r2, r3
 8001a8c:	464b      	mov	r3, r9
 8001a8e:	1ad2      	subs	r2, r2, r3
 8001a90:	0013      	movs	r3, r2
 8001a92:	4691      	mov	r9, r2
 8001a94:	021a      	lsls	r2, r3, #8
 8001a96:	d454      	bmi.n	8001b42 <__aeabi_dadd+0x4ce>
 8001a98:	464a      	mov	r2, r9
 8001a9a:	464c      	mov	r4, r9
 8001a9c:	432a      	orrs	r2, r5
 8001a9e:	d000      	beq.n	8001aa2 <__aeabi_dadd+0x42e>
 8001aa0:	e640      	b.n	8001724 <__aeabi_dadd+0xb0>
 8001aa2:	2600      	movs	r6, #0
 8001aa4:	2400      	movs	r4, #0
 8001aa6:	2500      	movs	r5, #0
 8001aa8:	e67c      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001aaa:	4da1      	ldr	r5, [pc, #644]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001aac:	45a9      	cmp	r9, r5
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dadd+0x43e>
 8001ab0:	e090      	b.n	8001bd4 <__aeabi_dadd+0x560>
 8001ab2:	2501      	movs	r5, #1
 8001ab4:	2a38      	cmp	r2, #56	@ 0x38
 8001ab6:	dd00      	ble.n	8001aba <__aeabi_dadd+0x446>
 8001ab8:	e6ab      	b.n	8001812 <__aeabi_dadd+0x19e>
 8001aba:	2580      	movs	r5, #128	@ 0x80
 8001abc:	042d      	lsls	r5, r5, #16
 8001abe:	432c      	orrs	r4, r5
 8001ac0:	e695      	b.n	80017ee <__aeabi_dadd+0x17a>
 8001ac2:	0011      	movs	r1, r2
 8001ac4:	4655      	mov	r5, sl
 8001ac6:	3920      	subs	r1, #32
 8001ac8:	40cd      	lsrs	r5, r1
 8001aca:	46a9      	mov	r9, r5
 8001acc:	2a20      	cmp	r2, #32
 8001ace:	d006      	beq.n	8001ade <__aeabi_dadd+0x46a>
 8001ad0:	2140      	movs	r1, #64	@ 0x40
 8001ad2:	4653      	mov	r3, sl
 8001ad4:	1a8a      	subs	r2, r1, r2
 8001ad6:	4093      	lsls	r3, r2
 8001ad8:	4662      	mov	r2, ip
 8001ada:	431a      	orrs	r2, r3
 8001adc:	4694      	mov	ip, r2
 8001ade:	4665      	mov	r5, ip
 8001ae0:	1e6b      	subs	r3, r5, #1
 8001ae2:	419d      	sbcs	r5, r3
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	431d      	orrs	r5, r3
 8001ae8:	e612      	b.n	8001710 <__aeabi_dadd+0x9c>
 8001aea:	0021      	movs	r1, r4
 8001aec:	4301      	orrs	r1, r0
 8001aee:	d100      	bne.n	8001af2 <__aeabi_dadd+0x47e>
 8001af0:	e0c4      	b.n	8001c7c <__aeabi_dadd+0x608>
 8001af2:	1e51      	subs	r1, r2, #1
 8001af4:	2a01      	cmp	r2, #1
 8001af6:	d100      	bne.n	8001afa <__aeabi_dadd+0x486>
 8001af8:	e0fb      	b.n	8001cf2 <__aeabi_dadd+0x67e>
 8001afa:	4d8d      	ldr	r5, [pc, #564]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001afc:	42aa      	cmp	r2, r5
 8001afe:	d100      	bne.n	8001b02 <__aeabi_dadd+0x48e>
 8001b00:	e0b5      	b.n	8001c6e <__aeabi_dadd+0x5fa>
 8001b02:	2501      	movs	r5, #1
 8001b04:	2938      	cmp	r1, #56	@ 0x38
 8001b06:	dd00      	ble.n	8001b0a <__aeabi_dadd+0x496>
 8001b08:	e741      	b.n	800198e <__aeabi_dadd+0x31a>
 8001b0a:	000a      	movs	r2, r1
 8001b0c:	e72f      	b.n	800196e <__aeabi_dadd+0x2fa>
 8001b0e:	4c89      	ldr	r4, [pc, #548]	@ (8001d34 <__aeabi_dadd+0x6c0>)
 8001b10:	1aff      	subs	r7, r7, r3
 8001b12:	4014      	ands	r4, r2
 8001b14:	0762      	lsls	r2, r4, #29
 8001b16:	08e4      	lsrs	r4, r4, #3
 8001b18:	e76a      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001b1a:	4a85      	ldr	r2, [pc, #532]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001b1c:	4291      	cmp	r1, r2
 8001b1e:	d100      	bne.n	8001b22 <__aeabi_dadd+0x4ae>
 8001b20:	e0e3      	b.n	8001cea <__aeabi_dadd+0x676>
 8001b22:	4663      	mov	r3, ip
 8001b24:	18c2      	adds	r2, r0, r3
 8001b26:	4282      	cmp	r2, r0
 8001b28:	4180      	sbcs	r0, r0
 8001b2a:	0023      	movs	r3, r4
 8001b2c:	4240      	negs	r0, r0
 8001b2e:	4453      	add	r3, sl
 8001b30:	181b      	adds	r3, r3, r0
 8001b32:	07dd      	lsls	r5, r3, #31
 8001b34:	085c      	lsrs	r4, r3, #1
 8001b36:	2307      	movs	r3, #7
 8001b38:	0852      	lsrs	r2, r2, #1
 8001b3a:	4315      	orrs	r5, r2
 8001b3c:	000f      	movs	r7, r1
 8001b3e:	402b      	ands	r3, r5
 8001b40:	e700      	b.n	8001944 <__aeabi_dadd+0x2d0>
 8001b42:	4663      	mov	r3, ip
 8001b44:	1a1d      	subs	r5, r3, r0
 8001b46:	45ac      	cmp	ip, r5
 8001b48:	4192      	sbcs	r2, r2
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	4252      	negs	r2, r2
 8001b4e:	1b1c      	subs	r4, r3, r4
 8001b50:	000e      	movs	r6, r1
 8001b52:	4688      	mov	r8, r1
 8001b54:	1aa4      	subs	r4, r4, r2
 8001b56:	e5e5      	b.n	8001724 <__aeabi_dadd+0xb0>
 8001b58:	2d00      	cmp	r5, #0
 8001b5a:	d000      	beq.n	8001b5e <__aeabi_dadd+0x4ea>
 8001b5c:	e091      	b.n	8001c82 <__aeabi_dadd+0x60e>
 8001b5e:	2a00      	cmp	r2, #0
 8001b60:	d138      	bne.n	8001bd4 <__aeabi_dadd+0x560>
 8001b62:	2480      	movs	r4, #128	@ 0x80
 8001b64:	2600      	movs	r6, #0
 8001b66:	0324      	lsls	r4, r4, #12
 8001b68:	e756      	b.n	8001a18 <__aeabi_dadd+0x3a4>
 8001b6a:	4663      	mov	r3, ip
 8001b6c:	18c5      	adds	r5, r0, r3
 8001b6e:	4285      	cmp	r5, r0
 8001b70:	4180      	sbcs	r0, r0
 8001b72:	4454      	add	r4, sl
 8001b74:	4240      	negs	r0, r0
 8001b76:	1824      	adds	r4, r4, r0
 8001b78:	2701      	movs	r7, #1
 8001b7a:	0223      	lsls	r3, r4, #8
 8001b7c:	d400      	bmi.n	8001b80 <__aeabi_dadd+0x50c>
 8001b7e:	e6df      	b.n	8001940 <__aeabi_dadd+0x2cc>
 8001b80:	2702      	movs	r7, #2
 8001b82:	e687      	b.n	8001894 <__aeabi_dadd+0x220>
 8001b84:	4663      	mov	r3, ip
 8001b86:	1ac5      	subs	r5, r0, r3
 8001b88:	42a8      	cmp	r0, r5
 8001b8a:	4180      	sbcs	r0, r0
 8001b8c:	4653      	mov	r3, sl
 8001b8e:	4240      	negs	r0, r0
 8001b90:	1ae4      	subs	r4, r4, r3
 8001b92:	2701      	movs	r7, #1
 8001b94:	1a24      	subs	r4, r4, r0
 8001b96:	e5c0      	b.n	800171a <__aeabi_dadd+0xa6>
 8001b98:	0762      	lsls	r2, r4, #29
 8001b9a:	08c0      	lsrs	r0, r0, #3
 8001b9c:	4302      	orrs	r2, r0
 8001b9e:	08e4      	lsrs	r4, r4, #3
 8001ba0:	e736      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001ba2:	0011      	movs	r1, r2
 8001ba4:	4653      	mov	r3, sl
 8001ba6:	3920      	subs	r1, #32
 8001ba8:	40cb      	lsrs	r3, r1
 8001baa:	4699      	mov	r9, r3
 8001bac:	2a20      	cmp	r2, #32
 8001bae:	d006      	beq.n	8001bbe <__aeabi_dadd+0x54a>
 8001bb0:	2140      	movs	r1, #64	@ 0x40
 8001bb2:	4653      	mov	r3, sl
 8001bb4:	1a8a      	subs	r2, r1, r2
 8001bb6:	4093      	lsls	r3, r2
 8001bb8:	4662      	mov	r2, ip
 8001bba:	431a      	orrs	r2, r3
 8001bbc:	4694      	mov	ip, r2
 8001bbe:	4665      	mov	r5, ip
 8001bc0:	1e6b      	subs	r3, r5, #1
 8001bc2:	419d      	sbcs	r5, r3
 8001bc4:	464b      	mov	r3, r9
 8001bc6:	431d      	orrs	r5, r3
 8001bc8:	e659      	b.n	800187e <__aeabi_dadd+0x20a>
 8001bca:	0762      	lsls	r2, r4, #29
 8001bcc:	08c0      	lsrs	r0, r0, #3
 8001bce:	4302      	orrs	r2, r0
 8001bd0:	08e4      	lsrs	r4, r4, #3
 8001bd2:	e70d      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001bd4:	4653      	mov	r3, sl
 8001bd6:	075a      	lsls	r2, r3, #29
 8001bd8:	4663      	mov	r3, ip
 8001bda:	08d8      	lsrs	r0, r3, #3
 8001bdc:	4653      	mov	r3, sl
 8001bde:	000e      	movs	r6, r1
 8001be0:	4302      	orrs	r2, r0
 8001be2:	08dc      	lsrs	r4, r3, #3
 8001be4:	e714      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001be6:	0015      	movs	r5, r2
 8001be8:	0026      	movs	r6, r4
 8001bea:	3d20      	subs	r5, #32
 8001bec:	40ee      	lsrs	r6, r5
 8001bee:	2a20      	cmp	r2, #32
 8001bf0:	d003      	beq.n	8001bfa <__aeabi_dadd+0x586>
 8001bf2:	2540      	movs	r5, #64	@ 0x40
 8001bf4:	1aaa      	subs	r2, r5, r2
 8001bf6:	4094      	lsls	r4, r2
 8001bf8:	4320      	orrs	r0, r4
 8001bfa:	1e42      	subs	r2, r0, #1
 8001bfc:	4190      	sbcs	r0, r2
 8001bfe:	0005      	movs	r5, r0
 8001c00:	4335      	orrs	r5, r6
 8001c02:	e606      	b.n	8001812 <__aeabi_dadd+0x19e>
 8001c04:	2a00      	cmp	r2, #0
 8001c06:	d07c      	beq.n	8001d02 <__aeabi_dadd+0x68e>
 8001c08:	4662      	mov	r2, ip
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	08c0      	lsrs	r0, r0, #3
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dadd+0x5a0>
 8001c12:	e6fa      	b.n	8001a0a <__aeabi_dadd+0x396>
 8001c14:	0762      	lsls	r2, r4, #29
 8001c16:	4310      	orrs	r0, r2
 8001c18:	2280      	movs	r2, #128	@ 0x80
 8001c1a:	08e4      	lsrs	r4, r4, #3
 8001c1c:	0312      	lsls	r2, r2, #12
 8001c1e:	4214      	tst	r4, r2
 8001c20:	d008      	beq.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c22:	08d9      	lsrs	r1, r3, #3
 8001c24:	4211      	tst	r1, r2
 8001c26:	d105      	bne.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c28:	4663      	mov	r3, ip
 8001c2a:	08d8      	lsrs	r0, r3, #3
 8001c2c:	4653      	mov	r3, sl
 8001c2e:	000c      	movs	r4, r1
 8001c30:	075b      	lsls	r3, r3, #29
 8001c32:	4318      	orrs	r0, r3
 8001c34:	0f42      	lsrs	r2, r0, #29
 8001c36:	00c0      	lsls	r0, r0, #3
 8001c38:	08c0      	lsrs	r0, r0, #3
 8001c3a:	0752      	lsls	r2, r2, #29
 8001c3c:	4302      	orrs	r2, r0
 8001c3e:	e6e7      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001c40:	2a00      	cmp	r2, #0
 8001c42:	d100      	bne.n	8001c46 <__aeabi_dadd+0x5d2>
 8001c44:	e72d      	b.n	8001aa2 <__aeabi_dadd+0x42e>
 8001c46:	4663      	mov	r3, ip
 8001c48:	08d8      	lsrs	r0, r3, #3
 8001c4a:	4653      	mov	r3, sl
 8001c4c:	075a      	lsls	r2, r3, #29
 8001c4e:	000e      	movs	r6, r1
 8001c50:	4302      	orrs	r2, r0
 8001c52:	08dc      	lsrs	r4, r3, #3
 8001c54:	e6cc      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001c56:	4663      	mov	r3, ip
 8001c58:	1a1d      	subs	r5, r3, r0
 8001c5a:	45ac      	cmp	ip, r5
 8001c5c:	4192      	sbcs	r2, r2
 8001c5e:	4653      	mov	r3, sl
 8001c60:	4252      	negs	r2, r2
 8001c62:	1b1c      	subs	r4, r3, r4
 8001c64:	000e      	movs	r6, r1
 8001c66:	4688      	mov	r8, r1
 8001c68:	1aa4      	subs	r4, r4, r2
 8001c6a:	3701      	adds	r7, #1
 8001c6c:	e555      	b.n	800171a <__aeabi_dadd+0xa6>
 8001c6e:	4663      	mov	r3, ip
 8001c70:	08d9      	lsrs	r1, r3, #3
 8001c72:	4653      	mov	r3, sl
 8001c74:	075a      	lsls	r2, r3, #29
 8001c76:	430a      	orrs	r2, r1
 8001c78:	08dc      	lsrs	r4, r3, #3
 8001c7a:	e6c9      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001c7c:	4660      	mov	r0, ip
 8001c7e:	4654      	mov	r4, sl
 8001c80:	e6d4      	b.n	8001a2c <__aeabi_dadd+0x3b8>
 8001c82:	08c0      	lsrs	r0, r0, #3
 8001c84:	2a00      	cmp	r2, #0
 8001c86:	d100      	bne.n	8001c8a <__aeabi_dadd+0x616>
 8001c88:	e6bf      	b.n	8001a0a <__aeabi_dadd+0x396>
 8001c8a:	0762      	lsls	r2, r4, #29
 8001c8c:	4310      	orrs	r0, r2
 8001c8e:	2280      	movs	r2, #128	@ 0x80
 8001c90:	08e4      	lsrs	r4, r4, #3
 8001c92:	0312      	lsls	r2, r2, #12
 8001c94:	4214      	tst	r4, r2
 8001c96:	d0cd      	beq.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c98:	08dd      	lsrs	r5, r3, #3
 8001c9a:	4215      	tst	r5, r2
 8001c9c:	d1ca      	bne.n	8001c34 <__aeabi_dadd+0x5c0>
 8001c9e:	4663      	mov	r3, ip
 8001ca0:	08d8      	lsrs	r0, r3, #3
 8001ca2:	4653      	mov	r3, sl
 8001ca4:	075b      	lsls	r3, r3, #29
 8001ca6:	000e      	movs	r6, r1
 8001ca8:	002c      	movs	r4, r5
 8001caa:	4318      	orrs	r0, r3
 8001cac:	e7c2      	b.n	8001c34 <__aeabi_dadd+0x5c0>
 8001cae:	4663      	mov	r3, ip
 8001cb0:	08d9      	lsrs	r1, r3, #3
 8001cb2:	4653      	mov	r3, sl
 8001cb4:	075a      	lsls	r2, r3, #29
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	08dc      	lsrs	r4, r3, #3
 8001cba:	e699      	b.n	80019f0 <__aeabi_dadd+0x37c>
 8001cbc:	4663      	mov	r3, ip
 8001cbe:	08d8      	lsrs	r0, r3, #3
 8001cc0:	4653      	mov	r3, sl
 8001cc2:	075a      	lsls	r2, r3, #29
 8001cc4:	000e      	movs	r6, r1
 8001cc6:	4302      	orrs	r2, r0
 8001cc8:	08dc      	lsrs	r4, r3, #3
 8001cca:	e6a1      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001ccc:	0011      	movs	r1, r2
 8001cce:	0027      	movs	r7, r4
 8001cd0:	3920      	subs	r1, #32
 8001cd2:	40cf      	lsrs	r7, r1
 8001cd4:	2a20      	cmp	r2, #32
 8001cd6:	d003      	beq.n	8001ce0 <__aeabi_dadd+0x66c>
 8001cd8:	2140      	movs	r1, #64	@ 0x40
 8001cda:	1a8a      	subs	r2, r1, r2
 8001cdc:	4094      	lsls	r4, r2
 8001cde:	4320      	orrs	r0, r4
 8001ce0:	1e42      	subs	r2, r0, #1
 8001ce2:	4190      	sbcs	r0, r2
 8001ce4:	0005      	movs	r5, r0
 8001ce6:	433d      	orrs	r5, r7
 8001ce8:	e651      	b.n	800198e <__aeabi_dadd+0x31a>
 8001cea:	000c      	movs	r4, r1
 8001cec:	2500      	movs	r5, #0
 8001cee:	2200      	movs	r2, #0
 8001cf0:	e558      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001cf2:	4460      	add	r0, ip
 8001cf4:	4560      	cmp	r0, ip
 8001cf6:	4192      	sbcs	r2, r2
 8001cf8:	4454      	add	r4, sl
 8001cfa:	4252      	negs	r2, r2
 8001cfc:	0005      	movs	r5, r0
 8001cfe:	18a4      	adds	r4, r4, r2
 8001d00:	e73a      	b.n	8001b78 <__aeabi_dadd+0x504>
 8001d02:	4653      	mov	r3, sl
 8001d04:	075a      	lsls	r2, r3, #29
 8001d06:	4663      	mov	r3, ip
 8001d08:	08d9      	lsrs	r1, r3, #3
 8001d0a:	4653      	mov	r3, sl
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	08dc      	lsrs	r4, r3, #3
 8001d10:	e67e      	b.n	8001a10 <__aeabi_dadd+0x39c>
 8001d12:	001a      	movs	r2, r3
 8001d14:	001c      	movs	r4, r3
 8001d16:	432a      	orrs	r2, r5
 8001d18:	d000      	beq.n	8001d1c <__aeabi_dadd+0x6a8>
 8001d1a:	e6ab      	b.n	8001a74 <__aeabi_dadd+0x400>
 8001d1c:	e6c1      	b.n	8001aa2 <__aeabi_dadd+0x42e>
 8001d1e:	2120      	movs	r1, #32
 8001d20:	2500      	movs	r5, #0
 8001d22:	1a09      	subs	r1, r1, r0
 8001d24:	e519      	b.n	800175a <__aeabi_dadd+0xe6>
 8001d26:	2200      	movs	r2, #0
 8001d28:	2500      	movs	r5, #0
 8001d2a:	4c01      	ldr	r4, [pc, #4]	@ (8001d30 <__aeabi_dadd+0x6bc>)
 8001d2c:	e53a      	b.n	80017a4 <__aeabi_dadd+0x130>
 8001d2e:	46c0      	nop			@ (mov r8, r8)
 8001d30:	000007ff 	.word	0x000007ff
 8001d34:	ff7fffff 	.word	0xff7fffff
 8001d38:	000007fe 	.word	0x000007fe

08001d3c <__aeabi_ddiv>:
 8001d3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001d3e:	46de      	mov	lr, fp
 8001d40:	4645      	mov	r5, r8
 8001d42:	4657      	mov	r7, sl
 8001d44:	464e      	mov	r6, r9
 8001d46:	b5e0      	push	{r5, r6, r7, lr}
 8001d48:	b087      	sub	sp, #28
 8001d4a:	9200      	str	r2, [sp, #0]
 8001d4c:	9301      	str	r3, [sp, #4]
 8001d4e:	030b      	lsls	r3, r1, #12
 8001d50:	0b1b      	lsrs	r3, r3, #12
 8001d52:	469b      	mov	fp, r3
 8001d54:	0fca      	lsrs	r2, r1, #31
 8001d56:	004b      	lsls	r3, r1, #1
 8001d58:	0004      	movs	r4, r0
 8001d5a:	4680      	mov	r8, r0
 8001d5c:	0d5b      	lsrs	r3, r3, #21
 8001d5e:	9202      	str	r2, [sp, #8]
 8001d60:	d100      	bne.n	8001d64 <__aeabi_ddiv+0x28>
 8001d62:	e16a      	b.n	800203a <__aeabi_ddiv+0x2fe>
 8001d64:	4ad4      	ldr	r2, [pc, #848]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d100      	bne.n	8001d6c <__aeabi_ddiv+0x30>
 8001d6a:	e18c      	b.n	8002086 <__aeabi_ddiv+0x34a>
 8001d6c:	4659      	mov	r1, fp
 8001d6e:	0f42      	lsrs	r2, r0, #29
 8001d70:	00c9      	lsls	r1, r1, #3
 8001d72:	430a      	orrs	r2, r1
 8001d74:	2180      	movs	r1, #128	@ 0x80
 8001d76:	0409      	lsls	r1, r1, #16
 8001d78:	4311      	orrs	r1, r2
 8001d7a:	00c2      	lsls	r2, r0, #3
 8001d7c:	4690      	mov	r8, r2
 8001d7e:	4acf      	ldr	r2, [pc, #828]	@ (80020bc <__aeabi_ddiv+0x380>)
 8001d80:	4689      	mov	r9, r1
 8001d82:	4692      	mov	sl, r2
 8001d84:	449a      	add	sl, r3
 8001d86:	2300      	movs	r3, #0
 8001d88:	2400      	movs	r4, #0
 8001d8a:	9303      	str	r3, [sp, #12]
 8001d8c:	9e00      	ldr	r6, [sp, #0]
 8001d8e:	9f01      	ldr	r7, [sp, #4]
 8001d90:	033b      	lsls	r3, r7, #12
 8001d92:	0b1b      	lsrs	r3, r3, #12
 8001d94:	469b      	mov	fp, r3
 8001d96:	007b      	lsls	r3, r7, #1
 8001d98:	0030      	movs	r0, r6
 8001d9a:	0d5b      	lsrs	r3, r3, #21
 8001d9c:	0ffd      	lsrs	r5, r7, #31
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d100      	bne.n	8001da4 <__aeabi_ddiv+0x68>
 8001da2:	e128      	b.n	8001ff6 <__aeabi_ddiv+0x2ba>
 8001da4:	4ac4      	ldr	r2, [pc, #784]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d100      	bne.n	8001dac <__aeabi_ddiv+0x70>
 8001daa:	e177      	b.n	800209c <__aeabi_ddiv+0x360>
 8001dac:	4659      	mov	r1, fp
 8001dae:	0f72      	lsrs	r2, r6, #29
 8001db0:	00c9      	lsls	r1, r1, #3
 8001db2:	430a      	orrs	r2, r1
 8001db4:	2180      	movs	r1, #128	@ 0x80
 8001db6:	0409      	lsls	r1, r1, #16
 8001db8:	4311      	orrs	r1, r2
 8001dba:	468b      	mov	fp, r1
 8001dbc:	49bf      	ldr	r1, [pc, #764]	@ (80020bc <__aeabi_ddiv+0x380>)
 8001dbe:	00f2      	lsls	r2, r6, #3
 8001dc0:	468c      	mov	ip, r1
 8001dc2:	4651      	mov	r1, sl
 8001dc4:	4463      	add	r3, ip
 8001dc6:	1acb      	subs	r3, r1, r3
 8001dc8:	469a      	mov	sl, r3
 8001dca:	2300      	movs	r3, #0
 8001dcc:	9e02      	ldr	r6, [sp, #8]
 8001dce:	406e      	eors	r6, r5
 8001dd0:	2c0f      	cmp	r4, #15
 8001dd2:	d827      	bhi.n	8001e24 <__aeabi_ddiv+0xe8>
 8001dd4:	49ba      	ldr	r1, [pc, #744]	@ (80020c0 <__aeabi_ddiv+0x384>)
 8001dd6:	00a4      	lsls	r4, r4, #2
 8001dd8:	5909      	ldr	r1, [r1, r4]
 8001dda:	468f      	mov	pc, r1
 8001ddc:	46cb      	mov	fp, r9
 8001dde:	4642      	mov	r2, r8
 8001de0:	9e02      	ldr	r6, [sp, #8]
 8001de2:	9b03      	ldr	r3, [sp, #12]
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d016      	beq.n	8001e16 <__aeabi_ddiv+0xda>
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d100      	bne.n	8001dee <__aeabi_ddiv+0xb2>
 8001dec:	e2a6      	b.n	800233c <__aeabi_ddiv+0x600>
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d000      	beq.n	8001df4 <__aeabi_ddiv+0xb8>
 8001df2:	e0df      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 8001df4:	2200      	movs	r2, #0
 8001df6:	2300      	movs	r3, #0
 8001df8:	2400      	movs	r4, #0
 8001dfa:	4690      	mov	r8, r2
 8001dfc:	051b      	lsls	r3, r3, #20
 8001dfe:	4323      	orrs	r3, r4
 8001e00:	07f6      	lsls	r6, r6, #31
 8001e02:	4333      	orrs	r3, r6
 8001e04:	4640      	mov	r0, r8
 8001e06:	0019      	movs	r1, r3
 8001e08:	b007      	add	sp, #28
 8001e0a:	bcf0      	pop	{r4, r5, r6, r7}
 8001e0c:	46bb      	mov	fp, r7
 8001e0e:	46b2      	mov	sl, r6
 8001e10:	46a9      	mov	r9, r5
 8001e12:	46a0      	mov	r8, r4
 8001e14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e16:	2200      	movs	r2, #0
 8001e18:	2400      	movs	r4, #0
 8001e1a:	4690      	mov	r8, r2
 8001e1c:	4ba6      	ldr	r3, [pc, #664]	@ (80020b8 <__aeabi_ddiv+0x37c>)
 8001e1e:	e7ed      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8001e20:	002e      	movs	r6, r5
 8001e22:	e7df      	b.n	8001de4 <__aeabi_ddiv+0xa8>
 8001e24:	45cb      	cmp	fp, r9
 8001e26:	d200      	bcs.n	8001e2a <__aeabi_ddiv+0xee>
 8001e28:	e1d4      	b.n	80021d4 <__aeabi_ddiv+0x498>
 8001e2a:	d100      	bne.n	8001e2e <__aeabi_ddiv+0xf2>
 8001e2c:	e1cf      	b.n	80021ce <__aeabi_ddiv+0x492>
 8001e2e:	2301      	movs	r3, #1
 8001e30:	425b      	negs	r3, r3
 8001e32:	469c      	mov	ip, r3
 8001e34:	4644      	mov	r4, r8
 8001e36:	4648      	mov	r0, r9
 8001e38:	2700      	movs	r7, #0
 8001e3a:	44e2      	add	sl, ip
 8001e3c:	465b      	mov	r3, fp
 8001e3e:	0e15      	lsrs	r5, r2, #24
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	431d      	orrs	r5, r3
 8001e44:	0c19      	lsrs	r1, r3, #16
 8001e46:	042b      	lsls	r3, r5, #16
 8001e48:	0212      	lsls	r2, r2, #8
 8001e4a:	9500      	str	r5, [sp, #0]
 8001e4c:	0c1d      	lsrs	r5, r3, #16
 8001e4e:	4691      	mov	r9, r2
 8001e50:	9102      	str	r1, [sp, #8]
 8001e52:	9503      	str	r5, [sp, #12]
 8001e54:	f7fe fa22 	bl	800029c <__aeabi_uidivmod>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	436a      	muls	r2, r5
 8001e5c:	040b      	lsls	r3, r1, #16
 8001e5e:	0c21      	lsrs	r1, r4, #16
 8001e60:	4680      	mov	r8, r0
 8001e62:	4319      	orrs	r1, r3
 8001e64:	428a      	cmp	r2, r1
 8001e66:	d909      	bls.n	8001e7c <__aeabi_ddiv+0x140>
 8001e68:	9d00      	ldr	r5, [sp, #0]
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	46ac      	mov	ip, r5
 8001e6e:	425b      	negs	r3, r3
 8001e70:	4461      	add	r1, ip
 8001e72:	469c      	mov	ip, r3
 8001e74:	44e0      	add	r8, ip
 8001e76:	428d      	cmp	r5, r1
 8001e78:	d800      	bhi.n	8001e7c <__aeabi_ddiv+0x140>
 8001e7a:	e1fb      	b.n	8002274 <__aeabi_ddiv+0x538>
 8001e7c:	1a88      	subs	r0, r1, r2
 8001e7e:	9902      	ldr	r1, [sp, #8]
 8001e80:	f7fe fa0c 	bl	800029c <__aeabi_uidivmod>
 8001e84:	9a03      	ldr	r2, [sp, #12]
 8001e86:	0424      	lsls	r4, r4, #16
 8001e88:	4342      	muls	r2, r0
 8001e8a:	0409      	lsls	r1, r1, #16
 8001e8c:	0c24      	lsrs	r4, r4, #16
 8001e8e:	0003      	movs	r3, r0
 8001e90:	430c      	orrs	r4, r1
 8001e92:	42a2      	cmp	r2, r4
 8001e94:	d906      	bls.n	8001ea4 <__aeabi_ddiv+0x168>
 8001e96:	9900      	ldr	r1, [sp, #0]
 8001e98:	3b01      	subs	r3, #1
 8001e9a:	468c      	mov	ip, r1
 8001e9c:	4464      	add	r4, ip
 8001e9e:	42a1      	cmp	r1, r4
 8001ea0:	d800      	bhi.n	8001ea4 <__aeabi_ddiv+0x168>
 8001ea2:	e1e1      	b.n	8002268 <__aeabi_ddiv+0x52c>
 8001ea4:	1aa0      	subs	r0, r4, r2
 8001ea6:	4642      	mov	r2, r8
 8001ea8:	0412      	lsls	r2, r2, #16
 8001eaa:	431a      	orrs	r2, r3
 8001eac:	4693      	mov	fp, r2
 8001eae:	464b      	mov	r3, r9
 8001eb0:	4659      	mov	r1, fp
 8001eb2:	0c1b      	lsrs	r3, r3, #16
 8001eb4:	001d      	movs	r5, r3
 8001eb6:	9304      	str	r3, [sp, #16]
 8001eb8:	040b      	lsls	r3, r1, #16
 8001eba:	4649      	mov	r1, r9
 8001ebc:	0409      	lsls	r1, r1, #16
 8001ebe:	0c09      	lsrs	r1, r1, #16
 8001ec0:	000c      	movs	r4, r1
 8001ec2:	0c1b      	lsrs	r3, r3, #16
 8001ec4:	435c      	muls	r4, r3
 8001ec6:	0c12      	lsrs	r2, r2, #16
 8001ec8:	436b      	muls	r3, r5
 8001eca:	4688      	mov	r8, r1
 8001ecc:	4351      	muls	r1, r2
 8001ece:	436a      	muls	r2, r5
 8001ed0:	0c25      	lsrs	r5, r4, #16
 8001ed2:	46ac      	mov	ip, r5
 8001ed4:	185b      	adds	r3, r3, r1
 8001ed6:	4463      	add	r3, ip
 8001ed8:	4299      	cmp	r1, r3
 8001eda:	d903      	bls.n	8001ee4 <__aeabi_ddiv+0x1a8>
 8001edc:	2180      	movs	r1, #128	@ 0x80
 8001ede:	0249      	lsls	r1, r1, #9
 8001ee0:	468c      	mov	ip, r1
 8001ee2:	4462      	add	r2, ip
 8001ee4:	0c19      	lsrs	r1, r3, #16
 8001ee6:	0424      	lsls	r4, r4, #16
 8001ee8:	041b      	lsls	r3, r3, #16
 8001eea:	0c24      	lsrs	r4, r4, #16
 8001eec:	188a      	adds	r2, r1, r2
 8001eee:	191c      	adds	r4, r3, r4
 8001ef0:	4290      	cmp	r0, r2
 8001ef2:	d302      	bcc.n	8001efa <__aeabi_ddiv+0x1be>
 8001ef4:	d116      	bne.n	8001f24 <__aeabi_ddiv+0x1e8>
 8001ef6:	42a7      	cmp	r7, r4
 8001ef8:	d214      	bcs.n	8001f24 <__aeabi_ddiv+0x1e8>
 8001efa:	465b      	mov	r3, fp
 8001efc:	9d00      	ldr	r5, [sp, #0]
 8001efe:	3b01      	subs	r3, #1
 8001f00:	444f      	add	r7, r9
 8001f02:	9305      	str	r3, [sp, #20]
 8001f04:	454f      	cmp	r7, r9
 8001f06:	419b      	sbcs	r3, r3
 8001f08:	46ac      	mov	ip, r5
 8001f0a:	425b      	negs	r3, r3
 8001f0c:	4463      	add	r3, ip
 8001f0e:	18c0      	adds	r0, r0, r3
 8001f10:	4285      	cmp	r5, r0
 8001f12:	d300      	bcc.n	8001f16 <__aeabi_ddiv+0x1da>
 8001f14:	e1a1      	b.n	800225a <__aeabi_ddiv+0x51e>
 8001f16:	4282      	cmp	r2, r0
 8001f18:	d900      	bls.n	8001f1c <__aeabi_ddiv+0x1e0>
 8001f1a:	e1f6      	b.n	800230a <__aeabi_ddiv+0x5ce>
 8001f1c:	d100      	bne.n	8001f20 <__aeabi_ddiv+0x1e4>
 8001f1e:	e1f1      	b.n	8002304 <__aeabi_ddiv+0x5c8>
 8001f20:	9b05      	ldr	r3, [sp, #20]
 8001f22:	469b      	mov	fp, r3
 8001f24:	1b3c      	subs	r4, r7, r4
 8001f26:	42a7      	cmp	r7, r4
 8001f28:	41bf      	sbcs	r7, r7
 8001f2a:	9d00      	ldr	r5, [sp, #0]
 8001f2c:	1a80      	subs	r0, r0, r2
 8001f2e:	427f      	negs	r7, r7
 8001f30:	1bc0      	subs	r0, r0, r7
 8001f32:	4285      	cmp	r5, r0
 8001f34:	d100      	bne.n	8001f38 <__aeabi_ddiv+0x1fc>
 8001f36:	e1d0      	b.n	80022da <__aeabi_ddiv+0x59e>
 8001f38:	9902      	ldr	r1, [sp, #8]
 8001f3a:	f7fe f9af 	bl	800029c <__aeabi_uidivmod>
 8001f3e:	9a03      	ldr	r2, [sp, #12]
 8001f40:	040b      	lsls	r3, r1, #16
 8001f42:	4342      	muls	r2, r0
 8001f44:	0c21      	lsrs	r1, r4, #16
 8001f46:	0007      	movs	r7, r0
 8001f48:	4319      	orrs	r1, r3
 8001f4a:	428a      	cmp	r2, r1
 8001f4c:	d900      	bls.n	8001f50 <__aeabi_ddiv+0x214>
 8001f4e:	e178      	b.n	8002242 <__aeabi_ddiv+0x506>
 8001f50:	1a88      	subs	r0, r1, r2
 8001f52:	9902      	ldr	r1, [sp, #8]
 8001f54:	f7fe f9a2 	bl	800029c <__aeabi_uidivmod>
 8001f58:	9a03      	ldr	r2, [sp, #12]
 8001f5a:	0424      	lsls	r4, r4, #16
 8001f5c:	4342      	muls	r2, r0
 8001f5e:	0409      	lsls	r1, r1, #16
 8001f60:	0c24      	lsrs	r4, r4, #16
 8001f62:	0003      	movs	r3, r0
 8001f64:	430c      	orrs	r4, r1
 8001f66:	42a2      	cmp	r2, r4
 8001f68:	d900      	bls.n	8001f6c <__aeabi_ddiv+0x230>
 8001f6a:	e15d      	b.n	8002228 <__aeabi_ddiv+0x4ec>
 8001f6c:	4641      	mov	r1, r8
 8001f6e:	1aa4      	subs	r4, r4, r2
 8001f70:	043a      	lsls	r2, r7, #16
 8001f72:	431a      	orrs	r2, r3
 8001f74:	9d04      	ldr	r5, [sp, #16]
 8001f76:	0413      	lsls	r3, r2, #16
 8001f78:	0c1b      	lsrs	r3, r3, #16
 8001f7a:	4359      	muls	r1, r3
 8001f7c:	4647      	mov	r7, r8
 8001f7e:	436b      	muls	r3, r5
 8001f80:	469c      	mov	ip, r3
 8001f82:	0c10      	lsrs	r0, r2, #16
 8001f84:	4347      	muls	r7, r0
 8001f86:	0c0b      	lsrs	r3, r1, #16
 8001f88:	44bc      	add	ip, r7
 8001f8a:	4463      	add	r3, ip
 8001f8c:	4368      	muls	r0, r5
 8001f8e:	429f      	cmp	r7, r3
 8001f90:	d903      	bls.n	8001f9a <__aeabi_ddiv+0x25e>
 8001f92:	2580      	movs	r5, #128	@ 0x80
 8001f94:	026d      	lsls	r5, r5, #9
 8001f96:	46ac      	mov	ip, r5
 8001f98:	4460      	add	r0, ip
 8001f9a:	0c1f      	lsrs	r7, r3, #16
 8001f9c:	0409      	lsls	r1, r1, #16
 8001f9e:	041b      	lsls	r3, r3, #16
 8001fa0:	0c09      	lsrs	r1, r1, #16
 8001fa2:	183f      	adds	r7, r7, r0
 8001fa4:	185b      	adds	r3, r3, r1
 8001fa6:	42bc      	cmp	r4, r7
 8001fa8:	d200      	bcs.n	8001fac <__aeabi_ddiv+0x270>
 8001faa:	e102      	b.n	80021b2 <__aeabi_ddiv+0x476>
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x274>
 8001fae:	e0fd      	b.n	80021ac <__aeabi_ddiv+0x470>
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	431a      	orrs	r2, r3
 8001fb4:	4b43      	ldr	r3, [pc, #268]	@ (80020c4 <__aeabi_ddiv+0x388>)
 8001fb6:	4453      	add	r3, sl
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	dc00      	bgt.n	8001fbe <__aeabi_ddiv+0x282>
 8001fbc:	e0ae      	b.n	800211c <__aeabi_ddiv+0x3e0>
 8001fbe:	0751      	lsls	r1, r2, #29
 8001fc0:	d000      	beq.n	8001fc4 <__aeabi_ddiv+0x288>
 8001fc2:	e198      	b.n	80022f6 <__aeabi_ddiv+0x5ba>
 8001fc4:	4659      	mov	r1, fp
 8001fc6:	01c9      	lsls	r1, r1, #7
 8001fc8:	d506      	bpl.n	8001fd8 <__aeabi_ddiv+0x29c>
 8001fca:	4659      	mov	r1, fp
 8001fcc:	4b3e      	ldr	r3, [pc, #248]	@ (80020c8 <__aeabi_ddiv+0x38c>)
 8001fce:	4019      	ands	r1, r3
 8001fd0:	2380      	movs	r3, #128	@ 0x80
 8001fd2:	468b      	mov	fp, r1
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4453      	add	r3, sl
 8001fd8:	493c      	ldr	r1, [pc, #240]	@ (80020cc <__aeabi_ddiv+0x390>)
 8001fda:	428b      	cmp	r3, r1
 8001fdc:	dd00      	ble.n	8001fe0 <__aeabi_ddiv+0x2a4>
 8001fde:	e71a      	b.n	8001e16 <__aeabi_ddiv+0xda>
 8001fe0:	4659      	mov	r1, fp
 8001fe2:	08d2      	lsrs	r2, r2, #3
 8001fe4:	0749      	lsls	r1, r1, #29
 8001fe6:	4311      	orrs	r1, r2
 8001fe8:	465a      	mov	r2, fp
 8001fea:	055b      	lsls	r3, r3, #21
 8001fec:	0254      	lsls	r4, r2, #9
 8001fee:	4688      	mov	r8, r1
 8001ff0:	0b24      	lsrs	r4, r4, #12
 8001ff2:	0d5b      	lsrs	r3, r3, #21
 8001ff4:	e702      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8001ff6:	465a      	mov	r2, fp
 8001ff8:	9b00      	ldr	r3, [sp, #0]
 8001ffa:	431a      	orrs	r2, r3
 8001ffc:	d100      	bne.n	8002000 <__aeabi_ddiv+0x2c4>
 8001ffe:	e07e      	b.n	80020fe <__aeabi_ddiv+0x3c2>
 8002000:	465b      	mov	r3, fp
 8002002:	2b00      	cmp	r3, #0
 8002004:	d100      	bne.n	8002008 <__aeabi_ddiv+0x2cc>
 8002006:	e100      	b.n	800220a <__aeabi_ddiv+0x4ce>
 8002008:	4658      	mov	r0, fp
 800200a:	f7fe faaf 	bl	800056c <__clzsi2>
 800200e:	0002      	movs	r2, r0
 8002010:	0003      	movs	r3, r0
 8002012:	3a0b      	subs	r2, #11
 8002014:	271d      	movs	r7, #29
 8002016:	9e00      	ldr	r6, [sp, #0]
 8002018:	1aba      	subs	r2, r7, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4658      	mov	r0, fp
 800201e:	40d6      	lsrs	r6, r2
 8002020:	3908      	subs	r1, #8
 8002022:	4088      	lsls	r0, r1
 8002024:	0032      	movs	r2, r6
 8002026:	4302      	orrs	r2, r0
 8002028:	4693      	mov	fp, r2
 800202a:	9a00      	ldr	r2, [sp, #0]
 800202c:	408a      	lsls	r2, r1
 800202e:	4928      	ldr	r1, [pc, #160]	@ (80020d0 <__aeabi_ddiv+0x394>)
 8002030:	4453      	add	r3, sl
 8002032:	468a      	mov	sl, r1
 8002034:	449a      	add	sl, r3
 8002036:	2300      	movs	r3, #0
 8002038:	e6c8      	b.n	8001dcc <__aeabi_ddiv+0x90>
 800203a:	465b      	mov	r3, fp
 800203c:	4303      	orrs	r3, r0
 800203e:	4699      	mov	r9, r3
 8002040:	d056      	beq.n	80020f0 <__aeabi_ddiv+0x3b4>
 8002042:	465b      	mov	r3, fp
 8002044:	2b00      	cmp	r3, #0
 8002046:	d100      	bne.n	800204a <__aeabi_ddiv+0x30e>
 8002048:	e0cd      	b.n	80021e6 <__aeabi_ddiv+0x4aa>
 800204a:	4658      	mov	r0, fp
 800204c:	f7fe fa8e 	bl	800056c <__clzsi2>
 8002050:	230b      	movs	r3, #11
 8002052:	425b      	negs	r3, r3
 8002054:	469c      	mov	ip, r3
 8002056:	0002      	movs	r2, r0
 8002058:	4484      	add	ip, r0
 800205a:	4666      	mov	r6, ip
 800205c:	231d      	movs	r3, #29
 800205e:	1b9b      	subs	r3, r3, r6
 8002060:	0026      	movs	r6, r4
 8002062:	0011      	movs	r1, r2
 8002064:	4658      	mov	r0, fp
 8002066:	40de      	lsrs	r6, r3
 8002068:	3908      	subs	r1, #8
 800206a:	4088      	lsls	r0, r1
 800206c:	0033      	movs	r3, r6
 800206e:	4303      	orrs	r3, r0
 8002070:	4699      	mov	r9, r3
 8002072:	0023      	movs	r3, r4
 8002074:	408b      	lsls	r3, r1
 8002076:	4698      	mov	r8, r3
 8002078:	4b16      	ldr	r3, [pc, #88]	@ (80020d4 <__aeabi_ddiv+0x398>)
 800207a:	2400      	movs	r4, #0
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	469a      	mov	sl, r3
 8002080:	2300      	movs	r3, #0
 8002082:	9303      	str	r3, [sp, #12]
 8002084:	e682      	b.n	8001d8c <__aeabi_ddiv+0x50>
 8002086:	465a      	mov	r2, fp
 8002088:	4302      	orrs	r2, r0
 800208a:	4691      	mov	r9, r2
 800208c:	d12a      	bne.n	80020e4 <__aeabi_ddiv+0x3a8>
 800208e:	2200      	movs	r2, #0
 8002090:	469a      	mov	sl, r3
 8002092:	2302      	movs	r3, #2
 8002094:	4690      	mov	r8, r2
 8002096:	2408      	movs	r4, #8
 8002098:	9303      	str	r3, [sp, #12]
 800209a:	e677      	b.n	8001d8c <__aeabi_ddiv+0x50>
 800209c:	465a      	mov	r2, fp
 800209e:	9b00      	ldr	r3, [sp, #0]
 80020a0:	431a      	orrs	r2, r3
 80020a2:	4b0d      	ldr	r3, [pc, #52]	@ (80020d8 <__aeabi_ddiv+0x39c>)
 80020a4:	469c      	mov	ip, r3
 80020a6:	44e2      	add	sl, ip
 80020a8:	2a00      	cmp	r2, #0
 80020aa:	d117      	bne.n	80020dc <__aeabi_ddiv+0x3a0>
 80020ac:	2302      	movs	r3, #2
 80020ae:	431c      	orrs	r4, r3
 80020b0:	2300      	movs	r3, #0
 80020b2:	469b      	mov	fp, r3
 80020b4:	3302      	adds	r3, #2
 80020b6:	e689      	b.n	8001dcc <__aeabi_ddiv+0x90>
 80020b8:	000007ff 	.word	0x000007ff
 80020bc:	fffffc01 	.word	0xfffffc01
 80020c0:	0801b388 	.word	0x0801b388
 80020c4:	000003ff 	.word	0x000003ff
 80020c8:	feffffff 	.word	0xfeffffff
 80020cc:	000007fe 	.word	0x000007fe
 80020d0:	000003f3 	.word	0x000003f3
 80020d4:	fffffc0d 	.word	0xfffffc0d
 80020d8:	fffff801 	.word	0xfffff801
 80020dc:	2303      	movs	r3, #3
 80020de:	0032      	movs	r2, r6
 80020e0:	431c      	orrs	r4, r3
 80020e2:	e673      	b.n	8001dcc <__aeabi_ddiv+0x90>
 80020e4:	469a      	mov	sl, r3
 80020e6:	2303      	movs	r3, #3
 80020e8:	46d9      	mov	r9, fp
 80020ea:	240c      	movs	r4, #12
 80020ec:	9303      	str	r3, [sp, #12]
 80020ee:	e64d      	b.n	8001d8c <__aeabi_ddiv+0x50>
 80020f0:	2300      	movs	r3, #0
 80020f2:	4698      	mov	r8, r3
 80020f4:	469a      	mov	sl, r3
 80020f6:	3301      	adds	r3, #1
 80020f8:	2404      	movs	r4, #4
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e646      	b.n	8001d8c <__aeabi_ddiv+0x50>
 80020fe:	2301      	movs	r3, #1
 8002100:	431c      	orrs	r4, r3
 8002102:	2300      	movs	r3, #0
 8002104:	469b      	mov	fp, r3
 8002106:	3301      	adds	r3, #1
 8002108:	e660      	b.n	8001dcc <__aeabi_ddiv+0x90>
 800210a:	2300      	movs	r3, #0
 800210c:	2480      	movs	r4, #128	@ 0x80
 800210e:	4698      	mov	r8, r3
 8002110:	2600      	movs	r6, #0
 8002112:	4b92      	ldr	r3, [pc, #584]	@ (800235c <__aeabi_ddiv+0x620>)
 8002114:	0324      	lsls	r4, r4, #12
 8002116:	e671      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 8002118:	2201      	movs	r2, #1
 800211a:	4252      	negs	r2, r2
 800211c:	2101      	movs	r1, #1
 800211e:	1ac9      	subs	r1, r1, r3
 8002120:	2938      	cmp	r1, #56	@ 0x38
 8002122:	dd00      	ble.n	8002126 <__aeabi_ddiv+0x3ea>
 8002124:	e666      	b.n	8001df4 <__aeabi_ddiv+0xb8>
 8002126:	291f      	cmp	r1, #31
 8002128:	dc00      	bgt.n	800212c <__aeabi_ddiv+0x3f0>
 800212a:	e0ab      	b.n	8002284 <__aeabi_ddiv+0x548>
 800212c:	201f      	movs	r0, #31
 800212e:	4240      	negs	r0, r0
 8002130:	1ac3      	subs	r3, r0, r3
 8002132:	4658      	mov	r0, fp
 8002134:	40d8      	lsrs	r0, r3
 8002136:	0003      	movs	r3, r0
 8002138:	2920      	cmp	r1, #32
 800213a:	d004      	beq.n	8002146 <__aeabi_ddiv+0x40a>
 800213c:	4658      	mov	r0, fp
 800213e:	4988      	ldr	r1, [pc, #544]	@ (8002360 <__aeabi_ddiv+0x624>)
 8002140:	4451      	add	r1, sl
 8002142:	4088      	lsls	r0, r1
 8002144:	4302      	orrs	r2, r0
 8002146:	1e51      	subs	r1, r2, #1
 8002148:	418a      	sbcs	r2, r1
 800214a:	431a      	orrs	r2, r3
 800214c:	2307      	movs	r3, #7
 800214e:	0019      	movs	r1, r3
 8002150:	2400      	movs	r4, #0
 8002152:	4011      	ands	r1, r2
 8002154:	4213      	tst	r3, r2
 8002156:	d00c      	beq.n	8002172 <__aeabi_ddiv+0x436>
 8002158:	230f      	movs	r3, #15
 800215a:	4013      	ands	r3, r2
 800215c:	2b04      	cmp	r3, #4
 800215e:	d100      	bne.n	8002162 <__aeabi_ddiv+0x426>
 8002160:	e0f9      	b.n	8002356 <__aeabi_ddiv+0x61a>
 8002162:	1d11      	adds	r1, r2, #4
 8002164:	4291      	cmp	r1, r2
 8002166:	419b      	sbcs	r3, r3
 8002168:	000a      	movs	r2, r1
 800216a:	425b      	negs	r3, r3
 800216c:	0759      	lsls	r1, r3, #29
 800216e:	025b      	lsls	r3, r3, #9
 8002170:	0b1c      	lsrs	r4, r3, #12
 8002172:	08d2      	lsrs	r2, r2, #3
 8002174:	430a      	orrs	r2, r1
 8002176:	4690      	mov	r8, r2
 8002178:	2300      	movs	r3, #0
 800217a:	e63f      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800217c:	2480      	movs	r4, #128	@ 0x80
 800217e:	464b      	mov	r3, r9
 8002180:	0324      	lsls	r4, r4, #12
 8002182:	4223      	tst	r3, r4
 8002184:	d009      	beq.n	800219a <__aeabi_ddiv+0x45e>
 8002186:	465b      	mov	r3, fp
 8002188:	4223      	tst	r3, r4
 800218a:	d106      	bne.n	800219a <__aeabi_ddiv+0x45e>
 800218c:	431c      	orrs	r4, r3
 800218e:	0324      	lsls	r4, r4, #12
 8002190:	002e      	movs	r6, r5
 8002192:	4690      	mov	r8, r2
 8002194:	4b71      	ldr	r3, [pc, #452]	@ (800235c <__aeabi_ddiv+0x620>)
 8002196:	0b24      	lsrs	r4, r4, #12
 8002198:	e630      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800219a:	2480      	movs	r4, #128	@ 0x80
 800219c:	464b      	mov	r3, r9
 800219e:	0324      	lsls	r4, r4, #12
 80021a0:	431c      	orrs	r4, r3
 80021a2:	0324      	lsls	r4, r4, #12
 80021a4:	9e02      	ldr	r6, [sp, #8]
 80021a6:	4b6d      	ldr	r3, [pc, #436]	@ (800235c <__aeabi_ddiv+0x620>)
 80021a8:	0b24      	lsrs	r4, r4, #12
 80021aa:	e627      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d100      	bne.n	80021b2 <__aeabi_ddiv+0x476>
 80021b0:	e700      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 80021b2:	9800      	ldr	r0, [sp, #0]
 80021b4:	1e51      	subs	r1, r2, #1
 80021b6:	4684      	mov	ip, r0
 80021b8:	4464      	add	r4, ip
 80021ba:	4284      	cmp	r4, r0
 80021bc:	d200      	bcs.n	80021c0 <__aeabi_ddiv+0x484>
 80021be:	e084      	b.n	80022ca <__aeabi_ddiv+0x58e>
 80021c0:	42bc      	cmp	r4, r7
 80021c2:	d200      	bcs.n	80021c6 <__aeabi_ddiv+0x48a>
 80021c4:	e0ae      	b.n	8002324 <__aeabi_ddiv+0x5e8>
 80021c6:	d100      	bne.n	80021ca <__aeabi_ddiv+0x48e>
 80021c8:	e0c1      	b.n	800234e <__aeabi_ddiv+0x612>
 80021ca:	000a      	movs	r2, r1
 80021cc:	e6f0      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80021ce:	4542      	cmp	r2, r8
 80021d0:	d900      	bls.n	80021d4 <__aeabi_ddiv+0x498>
 80021d2:	e62c      	b.n	8001e2e <__aeabi_ddiv+0xf2>
 80021d4:	464b      	mov	r3, r9
 80021d6:	07dc      	lsls	r4, r3, #31
 80021d8:	0858      	lsrs	r0, r3, #1
 80021da:	4643      	mov	r3, r8
 80021dc:	085b      	lsrs	r3, r3, #1
 80021de:	431c      	orrs	r4, r3
 80021e0:	4643      	mov	r3, r8
 80021e2:	07df      	lsls	r7, r3, #31
 80021e4:	e62a      	b.n	8001e3c <__aeabi_ddiv+0x100>
 80021e6:	f7fe f9c1 	bl	800056c <__clzsi2>
 80021ea:	2315      	movs	r3, #21
 80021ec:	469c      	mov	ip, r3
 80021ee:	4484      	add	ip, r0
 80021f0:	0002      	movs	r2, r0
 80021f2:	4663      	mov	r3, ip
 80021f4:	3220      	adds	r2, #32
 80021f6:	2b1c      	cmp	r3, #28
 80021f8:	dc00      	bgt.n	80021fc <__aeabi_ddiv+0x4c0>
 80021fa:	e72e      	b.n	800205a <__aeabi_ddiv+0x31e>
 80021fc:	0023      	movs	r3, r4
 80021fe:	3808      	subs	r0, #8
 8002200:	4083      	lsls	r3, r0
 8002202:	4699      	mov	r9, r3
 8002204:	2300      	movs	r3, #0
 8002206:	4698      	mov	r8, r3
 8002208:	e736      	b.n	8002078 <__aeabi_ddiv+0x33c>
 800220a:	f7fe f9af 	bl	800056c <__clzsi2>
 800220e:	0002      	movs	r2, r0
 8002210:	0003      	movs	r3, r0
 8002212:	3215      	adds	r2, #21
 8002214:	3320      	adds	r3, #32
 8002216:	2a1c      	cmp	r2, #28
 8002218:	dc00      	bgt.n	800221c <__aeabi_ddiv+0x4e0>
 800221a:	e6fb      	b.n	8002014 <__aeabi_ddiv+0x2d8>
 800221c:	9900      	ldr	r1, [sp, #0]
 800221e:	3808      	subs	r0, #8
 8002220:	4081      	lsls	r1, r0
 8002222:	2200      	movs	r2, #0
 8002224:	468b      	mov	fp, r1
 8002226:	e702      	b.n	800202e <__aeabi_ddiv+0x2f2>
 8002228:	9900      	ldr	r1, [sp, #0]
 800222a:	3b01      	subs	r3, #1
 800222c:	468c      	mov	ip, r1
 800222e:	4464      	add	r4, ip
 8002230:	42a1      	cmp	r1, r4
 8002232:	d900      	bls.n	8002236 <__aeabi_ddiv+0x4fa>
 8002234:	e69a      	b.n	8001f6c <__aeabi_ddiv+0x230>
 8002236:	42a2      	cmp	r2, r4
 8002238:	d800      	bhi.n	800223c <__aeabi_ddiv+0x500>
 800223a:	e697      	b.n	8001f6c <__aeabi_ddiv+0x230>
 800223c:	1e83      	subs	r3, r0, #2
 800223e:	4464      	add	r4, ip
 8002240:	e694      	b.n	8001f6c <__aeabi_ddiv+0x230>
 8002242:	46ac      	mov	ip, r5
 8002244:	4461      	add	r1, ip
 8002246:	3f01      	subs	r7, #1
 8002248:	428d      	cmp	r5, r1
 800224a:	d900      	bls.n	800224e <__aeabi_ddiv+0x512>
 800224c:	e680      	b.n	8001f50 <__aeabi_ddiv+0x214>
 800224e:	428a      	cmp	r2, r1
 8002250:	d800      	bhi.n	8002254 <__aeabi_ddiv+0x518>
 8002252:	e67d      	b.n	8001f50 <__aeabi_ddiv+0x214>
 8002254:	1e87      	subs	r7, r0, #2
 8002256:	4461      	add	r1, ip
 8002258:	e67a      	b.n	8001f50 <__aeabi_ddiv+0x214>
 800225a:	4285      	cmp	r5, r0
 800225c:	d000      	beq.n	8002260 <__aeabi_ddiv+0x524>
 800225e:	e65f      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 8002260:	45b9      	cmp	r9, r7
 8002262:	d900      	bls.n	8002266 <__aeabi_ddiv+0x52a>
 8002264:	e65c      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 8002266:	e656      	b.n	8001f16 <__aeabi_ddiv+0x1da>
 8002268:	42a2      	cmp	r2, r4
 800226a:	d800      	bhi.n	800226e <__aeabi_ddiv+0x532>
 800226c:	e61a      	b.n	8001ea4 <__aeabi_ddiv+0x168>
 800226e:	1e83      	subs	r3, r0, #2
 8002270:	4464      	add	r4, ip
 8002272:	e617      	b.n	8001ea4 <__aeabi_ddiv+0x168>
 8002274:	428a      	cmp	r2, r1
 8002276:	d800      	bhi.n	800227a <__aeabi_ddiv+0x53e>
 8002278:	e600      	b.n	8001e7c <__aeabi_ddiv+0x140>
 800227a:	46ac      	mov	ip, r5
 800227c:	1e83      	subs	r3, r0, #2
 800227e:	4698      	mov	r8, r3
 8002280:	4461      	add	r1, ip
 8002282:	e5fb      	b.n	8001e7c <__aeabi_ddiv+0x140>
 8002284:	4837      	ldr	r0, [pc, #220]	@ (8002364 <__aeabi_ddiv+0x628>)
 8002286:	0014      	movs	r4, r2
 8002288:	4450      	add	r0, sl
 800228a:	4082      	lsls	r2, r0
 800228c:	465b      	mov	r3, fp
 800228e:	0017      	movs	r7, r2
 8002290:	4083      	lsls	r3, r0
 8002292:	40cc      	lsrs	r4, r1
 8002294:	1e7a      	subs	r2, r7, #1
 8002296:	4197      	sbcs	r7, r2
 8002298:	4323      	orrs	r3, r4
 800229a:	433b      	orrs	r3, r7
 800229c:	001a      	movs	r2, r3
 800229e:	465b      	mov	r3, fp
 80022a0:	40cb      	lsrs	r3, r1
 80022a2:	0751      	lsls	r1, r2, #29
 80022a4:	d009      	beq.n	80022ba <__aeabi_ddiv+0x57e>
 80022a6:	210f      	movs	r1, #15
 80022a8:	4011      	ands	r1, r2
 80022aa:	2904      	cmp	r1, #4
 80022ac:	d005      	beq.n	80022ba <__aeabi_ddiv+0x57e>
 80022ae:	1d11      	adds	r1, r2, #4
 80022b0:	4291      	cmp	r1, r2
 80022b2:	4192      	sbcs	r2, r2
 80022b4:	4252      	negs	r2, r2
 80022b6:	189b      	adds	r3, r3, r2
 80022b8:	000a      	movs	r2, r1
 80022ba:	0219      	lsls	r1, r3, #8
 80022bc:	d400      	bmi.n	80022c0 <__aeabi_ddiv+0x584>
 80022be:	e755      	b.n	800216c <__aeabi_ddiv+0x430>
 80022c0:	2200      	movs	r2, #0
 80022c2:	2301      	movs	r3, #1
 80022c4:	2400      	movs	r4, #0
 80022c6:	4690      	mov	r8, r2
 80022c8:	e598      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 80022ca:	000a      	movs	r2, r1
 80022cc:	42bc      	cmp	r4, r7
 80022ce:	d000      	beq.n	80022d2 <__aeabi_ddiv+0x596>
 80022d0:	e66e      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80022d2:	454b      	cmp	r3, r9
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x59c>
 80022d6:	e66b      	b.n	8001fb0 <__aeabi_ddiv+0x274>
 80022d8:	e66c      	b.n	8001fb4 <__aeabi_ddiv+0x278>
 80022da:	4b23      	ldr	r3, [pc, #140]	@ (8002368 <__aeabi_ddiv+0x62c>)
 80022dc:	4a23      	ldr	r2, [pc, #140]	@ (800236c <__aeabi_ddiv+0x630>)
 80022de:	4453      	add	r3, sl
 80022e0:	4592      	cmp	sl, r2
 80022e2:	da00      	bge.n	80022e6 <__aeabi_ddiv+0x5aa>
 80022e4:	e718      	b.n	8002118 <__aeabi_ddiv+0x3dc>
 80022e6:	2101      	movs	r1, #1
 80022e8:	4249      	negs	r1, r1
 80022ea:	1d0a      	adds	r2, r1, #4
 80022ec:	428a      	cmp	r2, r1
 80022ee:	4189      	sbcs	r1, r1
 80022f0:	4249      	negs	r1, r1
 80022f2:	448b      	add	fp, r1
 80022f4:	e666      	b.n	8001fc4 <__aeabi_ddiv+0x288>
 80022f6:	210f      	movs	r1, #15
 80022f8:	4011      	ands	r1, r2
 80022fa:	2904      	cmp	r1, #4
 80022fc:	d100      	bne.n	8002300 <__aeabi_ddiv+0x5c4>
 80022fe:	e661      	b.n	8001fc4 <__aeabi_ddiv+0x288>
 8002300:	0011      	movs	r1, r2
 8002302:	e7f2      	b.n	80022ea <__aeabi_ddiv+0x5ae>
 8002304:	42bc      	cmp	r4, r7
 8002306:	d800      	bhi.n	800230a <__aeabi_ddiv+0x5ce>
 8002308:	e60a      	b.n	8001f20 <__aeabi_ddiv+0x1e4>
 800230a:	2302      	movs	r3, #2
 800230c:	425b      	negs	r3, r3
 800230e:	469c      	mov	ip, r3
 8002310:	9900      	ldr	r1, [sp, #0]
 8002312:	444f      	add	r7, r9
 8002314:	454f      	cmp	r7, r9
 8002316:	419b      	sbcs	r3, r3
 8002318:	44e3      	add	fp, ip
 800231a:	468c      	mov	ip, r1
 800231c:	425b      	negs	r3, r3
 800231e:	4463      	add	r3, ip
 8002320:	18c0      	adds	r0, r0, r3
 8002322:	e5ff      	b.n	8001f24 <__aeabi_ddiv+0x1e8>
 8002324:	4649      	mov	r1, r9
 8002326:	9d00      	ldr	r5, [sp, #0]
 8002328:	0048      	lsls	r0, r1, #1
 800232a:	4548      	cmp	r0, r9
 800232c:	4189      	sbcs	r1, r1
 800232e:	46ac      	mov	ip, r5
 8002330:	4249      	negs	r1, r1
 8002332:	4461      	add	r1, ip
 8002334:	4681      	mov	r9, r0
 8002336:	3a02      	subs	r2, #2
 8002338:	1864      	adds	r4, r4, r1
 800233a:	e7c7      	b.n	80022cc <__aeabi_ddiv+0x590>
 800233c:	2480      	movs	r4, #128	@ 0x80
 800233e:	465b      	mov	r3, fp
 8002340:	0324      	lsls	r4, r4, #12
 8002342:	431c      	orrs	r4, r3
 8002344:	0324      	lsls	r4, r4, #12
 8002346:	4690      	mov	r8, r2
 8002348:	4b04      	ldr	r3, [pc, #16]	@ (800235c <__aeabi_ddiv+0x620>)
 800234a:	0b24      	lsrs	r4, r4, #12
 800234c:	e556      	b.n	8001dfc <__aeabi_ddiv+0xc0>
 800234e:	4599      	cmp	r9, r3
 8002350:	d3e8      	bcc.n	8002324 <__aeabi_ddiv+0x5e8>
 8002352:	000a      	movs	r2, r1
 8002354:	e7bd      	b.n	80022d2 <__aeabi_ddiv+0x596>
 8002356:	2300      	movs	r3, #0
 8002358:	e708      	b.n	800216c <__aeabi_ddiv+0x430>
 800235a:	46c0      	nop			@ (mov r8, r8)
 800235c:	000007ff 	.word	0x000007ff
 8002360:	0000043e 	.word	0x0000043e
 8002364:	0000041e 	.word	0x0000041e
 8002368:	000003ff 	.word	0x000003ff
 800236c:	fffffc02 	.word	0xfffffc02

08002370 <__eqdf2>:
 8002370:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002372:	4657      	mov	r7, sl
 8002374:	46de      	mov	lr, fp
 8002376:	464e      	mov	r6, r9
 8002378:	4645      	mov	r5, r8
 800237a:	b5e0      	push	{r5, r6, r7, lr}
 800237c:	000d      	movs	r5, r1
 800237e:	0004      	movs	r4, r0
 8002380:	0fe8      	lsrs	r0, r5, #31
 8002382:	4683      	mov	fp, r0
 8002384:	0309      	lsls	r1, r1, #12
 8002386:	0fd8      	lsrs	r0, r3, #31
 8002388:	0b09      	lsrs	r1, r1, #12
 800238a:	4682      	mov	sl, r0
 800238c:	4819      	ldr	r0, [pc, #100]	@ (80023f4 <__eqdf2+0x84>)
 800238e:	468c      	mov	ip, r1
 8002390:	031f      	lsls	r7, r3, #12
 8002392:	0069      	lsls	r1, r5, #1
 8002394:	005e      	lsls	r6, r3, #1
 8002396:	0d49      	lsrs	r1, r1, #21
 8002398:	0b3f      	lsrs	r7, r7, #12
 800239a:	0d76      	lsrs	r6, r6, #21
 800239c:	4281      	cmp	r1, r0
 800239e:	d018      	beq.n	80023d2 <__eqdf2+0x62>
 80023a0:	4286      	cmp	r6, r0
 80023a2:	d00f      	beq.n	80023c4 <__eqdf2+0x54>
 80023a4:	2001      	movs	r0, #1
 80023a6:	42b1      	cmp	r1, r6
 80023a8:	d10d      	bne.n	80023c6 <__eqdf2+0x56>
 80023aa:	45bc      	cmp	ip, r7
 80023ac:	d10b      	bne.n	80023c6 <__eqdf2+0x56>
 80023ae:	4294      	cmp	r4, r2
 80023b0:	d109      	bne.n	80023c6 <__eqdf2+0x56>
 80023b2:	45d3      	cmp	fp, sl
 80023b4:	d01c      	beq.n	80023f0 <__eqdf2+0x80>
 80023b6:	2900      	cmp	r1, #0
 80023b8:	d105      	bne.n	80023c6 <__eqdf2+0x56>
 80023ba:	4660      	mov	r0, ip
 80023bc:	4320      	orrs	r0, r4
 80023be:	1e43      	subs	r3, r0, #1
 80023c0:	4198      	sbcs	r0, r3
 80023c2:	e000      	b.n	80023c6 <__eqdf2+0x56>
 80023c4:	2001      	movs	r0, #1
 80023c6:	bcf0      	pop	{r4, r5, r6, r7}
 80023c8:	46bb      	mov	fp, r7
 80023ca:	46b2      	mov	sl, r6
 80023cc:	46a9      	mov	r9, r5
 80023ce:	46a0      	mov	r8, r4
 80023d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80023d2:	2001      	movs	r0, #1
 80023d4:	428e      	cmp	r6, r1
 80023d6:	d1f6      	bne.n	80023c6 <__eqdf2+0x56>
 80023d8:	4661      	mov	r1, ip
 80023da:	4339      	orrs	r1, r7
 80023dc:	000f      	movs	r7, r1
 80023de:	4317      	orrs	r7, r2
 80023e0:	4327      	orrs	r7, r4
 80023e2:	d1f0      	bne.n	80023c6 <__eqdf2+0x56>
 80023e4:	465b      	mov	r3, fp
 80023e6:	4652      	mov	r2, sl
 80023e8:	1a98      	subs	r0, r3, r2
 80023ea:	1e43      	subs	r3, r0, #1
 80023ec:	4198      	sbcs	r0, r3
 80023ee:	e7ea      	b.n	80023c6 <__eqdf2+0x56>
 80023f0:	2000      	movs	r0, #0
 80023f2:	e7e8      	b.n	80023c6 <__eqdf2+0x56>
 80023f4:	000007ff 	.word	0x000007ff

080023f8 <__gedf2>:
 80023f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023fa:	4657      	mov	r7, sl
 80023fc:	464e      	mov	r6, r9
 80023fe:	4645      	mov	r5, r8
 8002400:	46de      	mov	lr, fp
 8002402:	b5e0      	push	{r5, r6, r7, lr}
 8002404:	000d      	movs	r5, r1
 8002406:	030f      	lsls	r7, r1, #12
 8002408:	0b39      	lsrs	r1, r7, #12
 800240a:	b083      	sub	sp, #12
 800240c:	0004      	movs	r4, r0
 800240e:	4680      	mov	r8, r0
 8002410:	9101      	str	r1, [sp, #4]
 8002412:	0058      	lsls	r0, r3, #1
 8002414:	0fe9      	lsrs	r1, r5, #31
 8002416:	4f31      	ldr	r7, [pc, #196]	@ (80024dc <__gedf2+0xe4>)
 8002418:	0d40      	lsrs	r0, r0, #21
 800241a:	468c      	mov	ip, r1
 800241c:	006e      	lsls	r6, r5, #1
 800241e:	0319      	lsls	r1, r3, #12
 8002420:	4682      	mov	sl, r0
 8002422:	4691      	mov	r9, r2
 8002424:	0d76      	lsrs	r6, r6, #21
 8002426:	0b09      	lsrs	r1, r1, #12
 8002428:	0fd8      	lsrs	r0, r3, #31
 800242a:	42be      	cmp	r6, r7
 800242c:	d01f      	beq.n	800246e <__gedf2+0x76>
 800242e:	45ba      	cmp	sl, r7
 8002430:	d00f      	beq.n	8002452 <__gedf2+0x5a>
 8002432:	2e00      	cmp	r6, #0
 8002434:	d12f      	bne.n	8002496 <__gedf2+0x9e>
 8002436:	4655      	mov	r5, sl
 8002438:	9e01      	ldr	r6, [sp, #4]
 800243a:	4334      	orrs	r4, r6
 800243c:	2d00      	cmp	r5, #0
 800243e:	d127      	bne.n	8002490 <__gedf2+0x98>
 8002440:	430a      	orrs	r2, r1
 8002442:	d03a      	beq.n	80024ba <__gedf2+0xc2>
 8002444:	2c00      	cmp	r4, #0
 8002446:	d145      	bne.n	80024d4 <__gedf2+0xdc>
 8002448:	2800      	cmp	r0, #0
 800244a:	d11a      	bne.n	8002482 <__gedf2+0x8a>
 800244c:	2001      	movs	r0, #1
 800244e:	4240      	negs	r0, r0
 8002450:	e017      	b.n	8002482 <__gedf2+0x8a>
 8002452:	4311      	orrs	r1, r2
 8002454:	d13b      	bne.n	80024ce <__gedf2+0xd6>
 8002456:	2e00      	cmp	r6, #0
 8002458:	d102      	bne.n	8002460 <__gedf2+0x68>
 800245a:	9f01      	ldr	r7, [sp, #4]
 800245c:	4327      	orrs	r7, r4
 800245e:	d0f3      	beq.n	8002448 <__gedf2+0x50>
 8002460:	4584      	cmp	ip, r0
 8002462:	d109      	bne.n	8002478 <__gedf2+0x80>
 8002464:	4663      	mov	r3, ip
 8002466:	2b00      	cmp	r3, #0
 8002468:	d0f0      	beq.n	800244c <__gedf2+0x54>
 800246a:	4660      	mov	r0, ip
 800246c:	e009      	b.n	8002482 <__gedf2+0x8a>
 800246e:	9f01      	ldr	r7, [sp, #4]
 8002470:	4327      	orrs	r7, r4
 8002472:	d12c      	bne.n	80024ce <__gedf2+0xd6>
 8002474:	45b2      	cmp	sl, r6
 8002476:	d024      	beq.n	80024c2 <__gedf2+0xca>
 8002478:	4663      	mov	r3, ip
 800247a:	2002      	movs	r0, #2
 800247c:	3b01      	subs	r3, #1
 800247e:	4018      	ands	r0, r3
 8002480:	3801      	subs	r0, #1
 8002482:	b003      	add	sp, #12
 8002484:	bcf0      	pop	{r4, r5, r6, r7}
 8002486:	46bb      	mov	fp, r7
 8002488:	46b2      	mov	sl, r6
 800248a:	46a9      	mov	r9, r5
 800248c:	46a0      	mov	r8, r4
 800248e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002490:	2c00      	cmp	r4, #0
 8002492:	d0d9      	beq.n	8002448 <__gedf2+0x50>
 8002494:	e7e4      	b.n	8002460 <__gedf2+0x68>
 8002496:	4654      	mov	r4, sl
 8002498:	2c00      	cmp	r4, #0
 800249a:	d0ed      	beq.n	8002478 <__gedf2+0x80>
 800249c:	4584      	cmp	ip, r0
 800249e:	d1eb      	bne.n	8002478 <__gedf2+0x80>
 80024a0:	4556      	cmp	r6, sl
 80024a2:	dce9      	bgt.n	8002478 <__gedf2+0x80>
 80024a4:	dbde      	blt.n	8002464 <__gedf2+0x6c>
 80024a6:	9b01      	ldr	r3, [sp, #4]
 80024a8:	428b      	cmp	r3, r1
 80024aa:	d8e5      	bhi.n	8002478 <__gedf2+0x80>
 80024ac:	d1da      	bne.n	8002464 <__gedf2+0x6c>
 80024ae:	45c8      	cmp	r8, r9
 80024b0:	d8e2      	bhi.n	8002478 <__gedf2+0x80>
 80024b2:	2000      	movs	r0, #0
 80024b4:	45c8      	cmp	r8, r9
 80024b6:	d2e4      	bcs.n	8002482 <__gedf2+0x8a>
 80024b8:	e7d4      	b.n	8002464 <__gedf2+0x6c>
 80024ba:	2000      	movs	r0, #0
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d0e0      	beq.n	8002482 <__gedf2+0x8a>
 80024c0:	e7da      	b.n	8002478 <__gedf2+0x80>
 80024c2:	4311      	orrs	r1, r2
 80024c4:	d103      	bne.n	80024ce <__gedf2+0xd6>
 80024c6:	4584      	cmp	ip, r0
 80024c8:	d1d6      	bne.n	8002478 <__gedf2+0x80>
 80024ca:	2000      	movs	r0, #0
 80024cc:	e7d9      	b.n	8002482 <__gedf2+0x8a>
 80024ce:	2002      	movs	r0, #2
 80024d0:	4240      	negs	r0, r0
 80024d2:	e7d6      	b.n	8002482 <__gedf2+0x8a>
 80024d4:	4584      	cmp	ip, r0
 80024d6:	d0e6      	beq.n	80024a6 <__gedf2+0xae>
 80024d8:	e7ce      	b.n	8002478 <__gedf2+0x80>
 80024da:	46c0      	nop			@ (mov r8, r8)
 80024dc:	000007ff 	.word	0x000007ff

080024e0 <__ledf2>:
 80024e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024e2:	4657      	mov	r7, sl
 80024e4:	464e      	mov	r6, r9
 80024e6:	4645      	mov	r5, r8
 80024e8:	46de      	mov	lr, fp
 80024ea:	b5e0      	push	{r5, r6, r7, lr}
 80024ec:	000d      	movs	r5, r1
 80024ee:	030f      	lsls	r7, r1, #12
 80024f0:	0004      	movs	r4, r0
 80024f2:	4680      	mov	r8, r0
 80024f4:	0fe8      	lsrs	r0, r5, #31
 80024f6:	0b39      	lsrs	r1, r7, #12
 80024f8:	4684      	mov	ip, r0
 80024fa:	b083      	sub	sp, #12
 80024fc:	0058      	lsls	r0, r3, #1
 80024fe:	4f30      	ldr	r7, [pc, #192]	@ (80025c0 <__ledf2+0xe0>)
 8002500:	0d40      	lsrs	r0, r0, #21
 8002502:	9101      	str	r1, [sp, #4]
 8002504:	031e      	lsls	r6, r3, #12
 8002506:	0069      	lsls	r1, r5, #1
 8002508:	4682      	mov	sl, r0
 800250a:	4691      	mov	r9, r2
 800250c:	0d49      	lsrs	r1, r1, #21
 800250e:	0b36      	lsrs	r6, r6, #12
 8002510:	0fd8      	lsrs	r0, r3, #31
 8002512:	42b9      	cmp	r1, r7
 8002514:	d020      	beq.n	8002558 <__ledf2+0x78>
 8002516:	45ba      	cmp	sl, r7
 8002518:	d00f      	beq.n	800253a <__ledf2+0x5a>
 800251a:	2900      	cmp	r1, #0
 800251c:	d12b      	bne.n	8002576 <__ledf2+0x96>
 800251e:	9901      	ldr	r1, [sp, #4]
 8002520:	430c      	orrs	r4, r1
 8002522:	4651      	mov	r1, sl
 8002524:	2900      	cmp	r1, #0
 8002526:	d137      	bne.n	8002598 <__ledf2+0xb8>
 8002528:	4332      	orrs	r2, r6
 800252a:	d038      	beq.n	800259e <__ledf2+0xbe>
 800252c:	2c00      	cmp	r4, #0
 800252e:	d144      	bne.n	80025ba <__ledf2+0xda>
 8002530:	2800      	cmp	r0, #0
 8002532:	d119      	bne.n	8002568 <__ledf2+0x88>
 8002534:	2001      	movs	r0, #1
 8002536:	4240      	negs	r0, r0
 8002538:	e016      	b.n	8002568 <__ledf2+0x88>
 800253a:	4316      	orrs	r6, r2
 800253c:	d113      	bne.n	8002566 <__ledf2+0x86>
 800253e:	2900      	cmp	r1, #0
 8002540:	d102      	bne.n	8002548 <__ledf2+0x68>
 8002542:	9f01      	ldr	r7, [sp, #4]
 8002544:	4327      	orrs	r7, r4
 8002546:	d0f3      	beq.n	8002530 <__ledf2+0x50>
 8002548:	4584      	cmp	ip, r0
 800254a:	d020      	beq.n	800258e <__ledf2+0xae>
 800254c:	4663      	mov	r3, ip
 800254e:	2002      	movs	r0, #2
 8002550:	3b01      	subs	r3, #1
 8002552:	4018      	ands	r0, r3
 8002554:	3801      	subs	r0, #1
 8002556:	e007      	b.n	8002568 <__ledf2+0x88>
 8002558:	9f01      	ldr	r7, [sp, #4]
 800255a:	4327      	orrs	r7, r4
 800255c:	d103      	bne.n	8002566 <__ledf2+0x86>
 800255e:	458a      	cmp	sl, r1
 8002560:	d1f4      	bne.n	800254c <__ledf2+0x6c>
 8002562:	4316      	orrs	r6, r2
 8002564:	d01f      	beq.n	80025a6 <__ledf2+0xc6>
 8002566:	2002      	movs	r0, #2
 8002568:	b003      	add	sp, #12
 800256a:	bcf0      	pop	{r4, r5, r6, r7}
 800256c:	46bb      	mov	fp, r7
 800256e:	46b2      	mov	sl, r6
 8002570:	46a9      	mov	r9, r5
 8002572:	46a0      	mov	r8, r4
 8002574:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002576:	4654      	mov	r4, sl
 8002578:	2c00      	cmp	r4, #0
 800257a:	d0e7      	beq.n	800254c <__ledf2+0x6c>
 800257c:	4584      	cmp	ip, r0
 800257e:	d1e5      	bne.n	800254c <__ledf2+0x6c>
 8002580:	4551      	cmp	r1, sl
 8002582:	dce3      	bgt.n	800254c <__ledf2+0x6c>
 8002584:	db03      	blt.n	800258e <__ledf2+0xae>
 8002586:	9b01      	ldr	r3, [sp, #4]
 8002588:	42b3      	cmp	r3, r6
 800258a:	d8df      	bhi.n	800254c <__ledf2+0x6c>
 800258c:	d00f      	beq.n	80025ae <__ledf2+0xce>
 800258e:	4663      	mov	r3, ip
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0cf      	beq.n	8002534 <__ledf2+0x54>
 8002594:	4660      	mov	r0, ip
 8002596:	e7e7      	b.n	8002568 <__ledf2+0x88>
 8002598:	2c00      	cmp	r4, #0
 800259a:	d0c9      	beq.n	8002530 <__ledf2+0x50>
 800259c:	e7d4      	b.n	8002548 <__ledf2+0x68>
 800259e:	2000      	movs	r0, #0
 80025a0:	2c00      	cmp	r4, #0
 80025a2:	d0e1      	beq.n	8002568 <__ledf2+0x88>
 80025a4:	e7d2      	b.n	800254c <__ledf2+0x6c>
 80025a6:	4584      	cmp	ip, r0
 80025a8:	d1d0      	bne.n	800254c <__ledf2+0x6c>
 80025aa:	2000      	movs	r0, #0
 80025ac:	e7dc      	b.n	8002568 <__ledf2+0x88>
 80025ae:	45c8      	cmp	r8, r9
 80025b0:	d8cc      	bhi.n	800254c <__ledf2+0x6c>
 80025b2:	2000      	movs	r0, #0
 80025b4:	45c8      	cmp	r8, r9
 80025b6:	d2d7      	bcs.n	8002568 <__ledf2+0x88>
 80025b8:	e7e9      	b.n	800258e <__ledf2+0xae>
 80025ba:	4584      	cmp	ip, r0
 80025bc:	d0e3      	beq.n	8002586 <__ledf2+0xa6>
 80025be:	e7c5      	b.n	800254c <__ledf2+0x6c>
 80025c0:	000007ff 	.word	0x000007ff

080025c4 <__aeabi_dmul>:
 80025c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025c6:	4657      	mov	r7, sl
 80025c8:	46de      	mov	lr, fp
 80025ca:	464e      	mov	r6, r9
 80025cc:	4645      	mov	r5, r8
 80025ce:	b5e0      	push	{r5, r6, r7, lr}
 80025d0:	001f      	movs	r7, r3
 80025d2:	030b      	lsls	r3, r1, #12
 80025d4:	0b1b      	lsrs	r3, r3, #12
 80025d6:	0016      	movs	r6, r2
 80025d8:	469a      	mov	sl, r3
 80025da:	0fca      	lsrs	r2, r1, #31
 80025dc:	004b      	lsls	r3, r1, #1
 80025de:	0004      	movs	r4, r0
 80025e0:	4693      	mov	fp, r2
 80025e2:	b087      	sub	sp, #28
 80025e4:	0d5b      	lsrs	r3, r3, #21
 80025e6:	d100      	bne.n	80025ea <__aeabi_dmul+0x26>
 80025e8:	e0d5      	b.n	8002796 <__aeabi_dmul+0x1d2>
 80025ea:	4abb      	ldr	r2, [pc, #748]	@ (80028d8 <__aeabi_dmul+0x314>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d100      	bne.n	80025f2 <__aeabi_dmul+0x2e>
 80025f0:	e0f8      	b.n	80027e4 <__aeabi_dmul+0x220>
 80025f2:	4651      	mov	r1, sl
 80025f4:	0f42      	lsrs	r2, r0, #29
 80025f6:	00c9      	lsls	r1, r1, #3
 80025f8:	430a      	orrs	r2, r1
 80025fa:	2180      	movs	r1, #128	@ 0x80
 80025fc:	0409      	lsls	r1, r1, #16
 80025fe:	4311      	orrs	r1, r2
 8002600:	00c2      	lsls	r2, r0, #3
 8002602:	4691      	mov	r9, r2
 8002604:	4ab5      	ldr	r2, [pc, #724]	@ (80028dc <__aeabi_dmul+0x318>)
 8002606:	468a      	mov	sl, r1
 8002608:	189d      	adds	r5, r3, r2
 800260a:	2300      	movs	r3, #0
 800260c:	4698      	mov	r8, r3
 800260e:	9302      	str	r3, [sp, #8]
 8002610:	033c      	lsls	r4, r7, #12
 8002612:	007b      	lsls	r3, r7, #1
 8002614:	0ffa      	lsrs	r2, r7, #31
 8002616:	0030      	movs	r0, r6
 8002618:	0b24      	lsrs	r4, r4, #12
 800261a:	0d5b      	lsrs	r3, r3, #21
 800261c:	9200      	str	r2, [sp, #0]
 800261e:	d100      	bne.n	8002622 <__aeabi_dmul+0x5e>
 8002620:	e096      	b.n	8002750 <__aeabi_dmul+0x18c>
 8002622:	4aad      	ldr	r2, [pc, #692]	@ (80028d8 <__aeabi_dmul+0x314>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d031      	beq.n	800268c <__aeabi_dmul+0xc8>
 8002628:	0f72      	lsrs	r2, r6, #29
 800262a:	00e4      	lsls	r4, r4, #3
 800262c:	4322      	orrs	r2, r4
 800262e:	2480      	movs	r4, #128	@ 0x80
 8002630:	0424      	lsls	r4, r4, #16
 8002632:	4314      	orrs	r4, r2
 8002634:	4aa9      	ldr	r2, [pc, #676]	@ (80028dc <__aeabi_dmul+0x318>)
 8002636:	00f0      	lsls	r0, r6, #3
 8002638:	4694      	mov	ip, r2
 800263a:	4463      	add	r3, ip
 800263c:	195b      	adds	r3, r3, r5
 800263e:	1c5a      	adds	r2, r3, #1
 8002640:	9201      	str	r2, [sp, #4]
 8002642:	4642      	mov	r2, r8
 8002644:	2600      	movs	r6, #0
 8002646:	2a0a      	cmp	r2, #10
 8002648:	dc42      	bgt.n	80026d0 <__aeabi_dmul+0x10c>
 800264a:	465a      	mov	r2, fp
 800264c:	9900      	ldr	r1, [sp, #0]
 800264e:	404a      	eors	r2, r1
 8002650:	4693      	mov	fp, r2
 8002652:	4642      	mov	r2, r8
 8002654:	2a02      	cmp	r2, #2
 8002656:	dc32      	bgt.n	80026be <__aeabi_dmul+0xfa>
 8002658:	3a01      	subs	r2, #1
 800265a:	2a01      	cmp	r2, #1
 800265c:	d900      	bls.n	8002660 <__aeabi_dmul+0x9c>
 800265e:	e149      	b.n	80028f4 <__aeabi_dmul+0x330>
 8002660:	2e02      	cmp	r6, #2
 8002662:	d100      	bne.n	8002666 <__aeabi_dmul+0xa2>
 8002664:	e0ca      	b.n	80027fc <__aeabi_dmul+0x238>
 8002666:	2e01      	cmp	r6, #1
 8002668:	d13d      	bne.n	80026e6 <__aeabi_dmul+0x122>
 800266a:	2300      	movs	r3, #0
 800266c:	2400      	movs	r4, #0
 800266e:	2200      	movs	r2, #0
 8002670:	0010      	movs	r0, r2
 8002672:	465a      	mov	r2, fp
 8002674:	051b      	lsls	r3, r3, #20
 8002676:	4323      	orrs	r3, r4
 8002678:	07d2      	lsls	r2, r2, #31
 800267a:	4313      	orrs	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	b007      	add	sp, #28
 8002680:	bcf0      	pop	{r4, r5, r6, r7}
 8002682:	46bb      	mov	fp, r7
 8002684:	46b2      	mov	sl, r6
 8002686:	46a9      	mov	r9, r5
 8002688:	46a0      	mov	r8, r4
 800268a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800268c:	4b92      	ldr	r3, [pc, #584]	@ (80028d8 <__aeabi_dmul+0x314>)
 800268e:	4326      	orrs	r6, r4
 8002690:	18eb      	adds	r3, r5, r3
 8002692:	2e00      	cmp	r6, #0
 8002694:	d100      	bne.n	8002698 <__aeabi_dmul+0xd4>
 8002696:	e0bb      	b.n	8002810 <__aeabi_dmul+0x24c>
 8002698:	2203      	movs	r2, #3
 800269a:	4641      	mov	r1, r8
 800269c:	4311      	orrs	r1, r2
 800269e:	465a      	mov	r2, fp
 80026a0:	4688      	mov	r8, r1
 80026a2:	9900      	ldr	r1, [sp, #0]
 80026a4:	404a      	eors	r2, r1
 80026a6:	2180      	movs	r1, #128	@ 0x80
 80026a8:	0109      	lsls	r1, r1, #4
 80026aa:	468c      	mov	ip, r1
 80026ac:	0029      	movs	r1, r5
 80026ae:	4461      	add	r1, ip
 80026b0:	9101      	str	r1, [sp, #4]
 80026b2:	4641      	mov	r1, r8
 80026b4:	290a      	cmp	r1, #10
 80026b6:	dd00      	ble.n	80026ba <__aeabi_dmul+0xf6>
 80026b8:	e233      	b.n	8002b22 <__aeabi_dmul+0x55e>
 80026ba:	4693      	mov	fp, r2
 80026bc:	2603      	movs	r6, #3
 80026be:	4642      	mov	r2, r8
 80026c0:	2701      	movs	r7, #1
 80026c2:	4097      	lsls	r7, r2
 80026c4:	21a6      	movs	r1, #166	@ 0xa6
 80026c6:	003a      	movs	r2, r7
 80026c8:	00c9      	lsls	r1, r1, #3
 80026ca:	400a      	ands	r2, r1
 80026cc:	420f      	tst	r7, r1
 80026ce:	d031      	beq.n	8002734 <__aeabi_dmul+0x170>
 80026d0:	9e02      	ldr	r6, [sp, #8]
 80026d2:	2e02      	cmp	r6, #2
 80026d4:	d100      	bne.n	80026d8 <__aeabi_dmul+0x114>
 80026d6:	e235      	b.n	8002b44 <__aeabi_dmul+0x580>
 80026d8:	2e03      	cmp	r6, #3
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0x11a>
 80026dc:	e1d2      	b.n	8002a84 <__aeabi_dmul+0x4c0>
 80026de:	4654      	mov	r4, sl
 80026e0:	4648      	mov	r0, r9
 80026e2:	2e01      	cmp	r6, #1
 80026e4:	d0c1      	beq.n	800266a <__aeabi_dmul+0xa6>
 80026e6:	9a01      	ldr	r2, [sp, #4]
 80026e8:	4b7d      	ldr	r3, [pc, #500]	@ (80028e0 <__aeabi_dmul+0x31c>)
 80026ea:	4694      	mov	ip, r2
 80026ec:	4463      	add	r3, ip
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	dc00      	bgt.n	80026f4 <__aeabi_dmul+0x130>
 80026f2:	e0c0      	b.n	8002876 <__aeabi_dmul+0x2b2>
 80026f4:	0742      	lsls	r2, r0, #29
 80026f6:	d009      	beq.n	800270c <__aeabi_dmul+0x148>
 80026f8:	220f      	movs	r2, #15
 80026fa:	4002      	ands	r2, r0
 80026fc:	2a04      	cmp	r2, #4
 80026fe:	d005      	beq.n	800270c <__aeabi_dmul+0x148>
 8002700:	1d02      	adds	r2, r0, #4
 8002702:	4282      	cmp	r2, r0
 8002704:	4180      	sbcs	r0, r0
 8002706:	4240      	negs	r0, r0
 8002708:	1824      	adds	r4, r4, r0
 800270a:	0010      	movs	r0, r2
 800270c:	01e2      	lsls	r2, r4, #7
 800270e:	d506      	bpl.n	800271e <__aeabi_dmul+0x15a>
 8002710:	4b74      	ldr	r3, [pc, #464]	@ (80028e4 <__aeabi_dmul+0x320>)
 8002712:	9a01      	ldr	r2, [sp, #4]
 8002714:	401c      	ands	r4, r3
 8002716:	2380      	movs	r3, #128	@ 0x80
 8002718:	4694      	mov	ip, r2
 800271a:	00db      	lsls	r3, r3, #3
 800271c:	4463      	add	r3, ip
 800271e:	4a72      	ldr	r2, [pc, #456]	@ (80028e8 <__aeabi_dmul+0x324>)
 8002720:	4293      	cmp	r3, r2
 8002722:	dc6b      	bgt.n	80027fc <__aeabi_dmul+0x238>
 8002724:	0762      	lsls	r2, r4, #29
 8002726:	08c0      	lsrs	r0, r0, #3
 8002728:	0264      	lsls	r4, r4, #9
 800272a:	055b      	lsls	r3, r3, #21
 800272c:	4302      	orrs	r2, r0
 800272e:	0b24      	lsrs	r4, r4, #12
 8002730:	0d5b      	lsrs	r3, r3, #21
 8002732:	e79d      	b.n	8002670 <__aeabi_dmul+0xac>
 8002734:	2190      	movs	r1, #144	@ 0x90
 8002736:	0089      	lsls	r1, r1, #2
 8002738:	420f      	tst	r7, r1
 800273a:	d163      	bne.n	8002804 <__aeabi_dmul+0x240>
 800273c:	2288      	movs	r2, #136	@ 0x88
 800273e:	423a      	tst	r2, r7
 8002740:	d100      	bne.n	8002744 <__aeabi_dmul+0x180>
 8002742:	e0d7      	b.n	80028f4 <__aeabi_dmul+0x330>
 8002744:	9b00      	ldr	r3, [sp, #0]
 8002746:	46a2      	mov	sl, r4
 8002748:	469b      	mov	fp, r3
 800274a:	4681      	mov	r9, r0
 800274c:	9602      	str	r6, [sp, #8]
 800274e:	e7bf      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002750:	0023      	movs	r3, r4
 8002752:	4333      	orrs	r3, r6
 8002754:	d100      	bne.n	8002758 <__aeabi_dmul+0x194>
 8002756:	e07f      	b.n	8002858 <__aeabi_dmul+0x294>
 8002758:	2c00      	cmp	r4, #0
 800275a:	d100      	bne.n	800275e <__aeabi_dmul+0x19a>
 800275c:	e1ad      	b.n	8002aba <__aeabi_dmul+0x4f6>
 800275e:	0020      	movs	r0, r4
 8002760:	f7fd ff04 	bl	800056c <__clzsi2>
 8002764:	0002      	movs	r2, r0
 8002766:	0003      	movs	r3, r0
 8002768:	3a0b      	subs	r2, #11
 800276a:	201d      	movs	r0, #29
 800276c:	0019      	movs	r1, r3
 800276e:	1a82      	subs	r2, r0, r2
 8002770:	0030      	movs	r0, r6
 8002772:	3908      	subs	r1, #8
 8002774:	40d0      	lsrs	r0, r2
 8002776:	408c      	lsls	r4, r1
 8002778:	4304      	orrs	r4, r0
 800277a:	0030      	movs	r0, r6
 800277c:	4088      	lsls	r0, r1
 800277e:	4a5b      	ldr	r2, [pc, #364]	@ (80028ec <__aeabi_dmul+0x328>)
 8002780:	1aeb      	subs	r3, r5, r3
 8002782:	4694      	mov	ip, r2
 8002784:	4463      	add	r3, ip
 8002786:	1c5a      	adds	r2, r3, #1
 8002788:	9201      	str	r2, [sp, #4]
 800278a:	4642      	mov	r2, r8
 800278c:	2600      	movs	r6, #0
 800278e:	2a0a      	cmp	r2, #10
 8002790:	dc00      	bgt.n	8002794 <__aeabi_dmul+0x1d0>
 8002792:	e75a      	b.n	800264a <__aeabi_dmul+0x86>
 8002794:	e79c      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002796:	4653      	mov	r3, sl
 8002798:	4303      	orrs	r3, r0
 800279a:	4699      	mov	r9, r3
 800279c:	d054      	beq.n	8002848 <__aeabi_dmul+0x284>
 800279e:	4653      	mov	r3, sl
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d100      	bne.n	80027a6 <__aeabi_dmul+0x1e2>
 80027a4:	e177      	b.n	8002a96 <__aeabi_dmul+0x4d2>
 80027a6:	4650      	mov	r0, sl
 80027a8:	f7fd fee0 	bl	800056c <__clzsi2>
 80027ac:	230b      	movs	r3, #11
 80027ae:	425b      	negs	r3, r3
 80027b0:	469c      	mov	ip, r3
 80027b2:	0002      	movs	r2, r0
 80027b4:	4484      	add	ip, r0
 80027b6:	0011      	movs	r1, r2
 80027b8:	4650      	mov	r0, sl
 80027ba:	3908      	subs	r1, #8
 80027bc:	4088      	lsls	r0, r1
 80027be:	231d      	movs	r3, #29
 80027c0:	4680      	mov	r8, r0
 80027c2:	4660      	mov	r0, ip
 80027c4:	1a1b      	subs	r3, r3, r0
 80027c6:	0020      	movs	r0, r4
 80027c8:	40d8      	lsrs	r0, r3
 80027ca:	0003      	movs	r3, r0
 80027cc:	4640      	mov	r0, r8
 80027ce:	4303      	orrs	r3, r0
 80027d0:	469a      	mov	sl, r3
 80027d2:	0023      	movs	r3, r4
 80027d4:	408b      	lsls	r3, r1
 80027d6:	4699      	mov	r9, r3
 80027d8:	2300      	movs	r3, #0
 80027da:	4d44      	ldr	r5, [pc, #272]	@ (80028ec <__aeabi_dmul+0x328>)
 80027dc:	4698      	mov	r8, r3
 80027de:	1aad      	subs	r5, r5, r2
 80027e0:	9302      	str	r3, [sp, #8]
 80027e2:	e715      	b.n	8002610 <__aeabi_dmul+0x4c>
 80027e4:	4652      	mov	r2, sl
 80027e6:	4302      	orrs	r2, r0
 80027e8:	4691      	mov	r9, r2
 80027ea:	d126      	bne.n	800283a <__aeabi_dmul+0x276>
 80027ec:	2200      	movs	r2, #0
 80027ee:	001d      	movs	r5, r3
 80027f0:	2302      	movs	r3, #2
 80027f2:	4692      	mov	sl, r2
 80027f4:	3208      	adds	r2, #8
 80027f6:	4690      	mov	r8, r2
 80027f8:	9302      	str	r3, [sp, #8]
 80027fa:	e709      	b.n	8002610 <__aeabi_dmul+0x4c>
 80027fc:	2400      	movs	r4, #0
 80027fe:	2200      	movs	r2, #0
 8002800:	4b35      	ldr	r3, [pc, #212]	@ (80028d8 <__aeabi_dmul+0x314>)
 8002802:	e735      	b.n	8002670 <__aeabi_dmul+0xac>
 8002804:	2300      	movs	r3, #0
 8002806:	2480      	movs	r4, #128	@ 0x80
 8002808:	469b      	mov	fp, r3
 800280a:	0324      	lsls	r4, r4, #12
 800280c:	4b32      	ldr	r3, [pc, #200]	@ (80028d8 <__aeabi_dmul+0x314>)
 800280e:	e72f      	b.n	8002670 <__aeabi_dmul+0xac>
 8002810:	2202      	movs	r2, #2
 8002812:	4641      	mov	r1, r8
 8002814:	4311      	orrs	r1, r2
 8002816:	2280      	movs	r2, #128	@ 0x80
 8002818:	0112      	lsls	r2, r2, #4
 800281a:	4694      	mov	ip, r2
 800281c:	002a      	movs	r2, r5
 800281e:	4462      	add	r2, ip
 8002820:	4688      	mov	r8, r1
 8002822:	9201      	str	r2, [sp, #4]
 8002824:	290a      	cmp	r1, #10
 8002826:	dd00      	ble.n	800282a <__aeabi_dmul+0x266>
 8002828:	e752      	b.n	80026d0 <__aeabi_dmul+0x10c>
 800282a:	465a      	mov	r2, fp
 800282c:	2000      	movs	r0, #0
 800282e:	9900      	ldr	r1, [sp, #0]
 8002830:	0004      	movs	r4, r0
 8002832:	404a      	eors	r2, r1
 8002834:	4693      	mov	fp, r2
 8002836:	2602      	movs	r6, #2
 8002838:	e70b      	b.n	8002652 <__aeabi_dmul+0x8e>
 800283a:	220c      	movs	r2, #12
 800283c:	001d      	movs	r5, r3
 800283e:	2303      	movs	r3, #3
 8002840:	4681      	mov	r9, r0
 8002842:	4690      	mov	r8, r2
 8002844:	9302      	str	r3, [sp, #8]
 8002846:	e6e3      	b.n	8002610 <__aeabi_dmul+0x4c>
 8002848:	2300      	movs	r3, #0
 800284a:	469a      	mov	sl, r3
 800284c:	3304      	adds	r3, #4
 800284e:	4698      	mov	r8, r3
 8002850:	3b03      	subs	r3, #3
 8002852:	2500      	movs	r5, #0
 8002854:	9302      	str	r3, [sp, #8]
 8002856:	e6db      	b.n	8002610 <__aeabi_dmul+0x4c>
 8002858:	4642      	mov	r2, r8
 800285a:	3301      	adds	r3, #1
 800285c:	431a      	orrs	r2, r3
 800285e:	002b      	movs	r3, r5
 8002860:	4690      	mov	r8, r2
 8002862:	1c5a      	adds	r2, r3, #1
 8002864:	9201      	str	r2, [sp, #4]
 8002866:	4642      	mov	r2, r8
 8002868:	2400      	movs	r4, #0
 800286a:	2000      	movs	r0, #0
 800286c:	2601      	movs	r6, #1
 800286e:	2a0a      	cmp	r2, #10
 8002870:	dc00      	bgt.n	8002874 <__aeabi_dmul+0x2b0>
 8002872:	e6ea      	b.n	800264a <__aeabi_dmul+0x86>
 8002874:	e72c      	b.n	80026d0 <__aeabi_dmul+0x10c>
 8002876:	2201      	movs	r2, #1
 8002878:	1ad2      	subs	r2, r2, r3
 800287a:	2a38      	cmp	r2, #56	@ 0x38
 800287c:	dd00      	ble.n	8002880 <__aeabi_dmul+0x2bc>
 800287e:	e6f4      	b.n	800266a <__aeabi_dmul+0xa6>
 8002880:	2a1f      	cmp	r2, #31
 8002882:	dc00      	bgt.n	8002886 <__aeabi_dmul+0x2c2>
 8002884:	e12a      	b.n	8002adc <__aeabi_dmul+0x518>
 8002886:	211f      	movs	r1, #31
 8002888:	4249      	negs	r1, r1
 800288a:	1acb      	subs	r3, r1, r3
 800288c:	0021      	movs	r1, r4
 800288e:	40d9      	lsrs	r1, r3
 8002890:	000b      	movs	r3, r1
 8002892:	2a20      	cmp	r2, #32
 8002894:	d005      	beq.n	80028a2 <__aeabi_dmul+0x2de>
 8002896:	4a16      	ldr	r2, [pc, #88]	@ (80028f0 <__aeabi_dmul+0x32c>)
 8002898:	9d01      	ldr	r5, [sp, #4]
 800289a:	4694      	mov	ip, r2
 800289c:	4465      	add	r5, ip
 800289e:	40ac      	lsls	r4, r5
 80028a0:	4320      	orrs	r0, r4
 80028a2:	1e42      	subs	r2, r0, #1
 80028a4:	4190      	sbcs	r0, r2
 80028a6:	4318      	orrs	r0, r3
 80028a8:	2307      	movs	r3, #7
 80028aa:	0019      	movs	r1, r3
 80028ac:	2400      	movs	r4, #0
 80028ae:	4001      	ands	r1, r0
 80028b0:	4203      	tst	r3, r0
 80028b2:	d00c      	beq.n	80028ce <__aeabi_dmul+0x30a>
 80028b4:	230f      	movs	r3, #15
 80028b6:	4003      	ands	r3, r0
 80028b8:	2b04      	cmp	r3, #4
 80028ba:	d100      	bne.n	80028be <__aeabi_dmul+0x2fa>
 80028bc:	e140      	b.n	8002b40 <__aeabi_dmul+0x57c>
 80028be:	1d03      	adds	r3, r0, #4
 80028c0:	4283      	cmp	r3, r0
 80028c2:	41a4      	sbcs	r4, r4
 80028c4:	0018      	movs	r0, r3
 80028c6:	4264      	negs	r4, r4
 80028c8:	0761      	lsls	r1, r4, #29
 80028ca:	0264      	lsls	r4, r4, #9
 80028cc:	0b24      	lsrs	r4, r4, #12
 80028ce:	08c2      	lsrs	r2, r0, #3
 80028d0:	2300      	movs	r3, #0
 80028d2:	430a      	orrs	r2, r1
 80028d4:	e6cc      	b.n	8002670 <__aeabi_dmul+0xac>
 80028d6:	46c0      	nop			@ (mov r8, r8)
 80028d8:	000007ff 	.word	0x000007ff
 80028dc:	fffffc01 	.word	0xfffffc01
 80028e0:	000003ff 	.word	0x000003ff
 80028e4:	feffffff 	.word	0xfeffffff
 80028e8:	000007fe 	.word	0x000007fe
 80028ec:	fffffc0d 	.word	0xfffffc0d
 80028f0:	0000043e 	.word	0x0000043e
 80028f4:	4649      	mov	r1, r9
 80028f6:	464a      	mov	r2, r9
 80028f8:	0409      	lsls	r1, r1, #16
 80028fa:	0c09      	lsrs	r1, r1, #16
 80028fc:	000d      	movs	r5, r1
 80028fe:	0c16      	lsrs	r6, r2, #16
 8002900:	0c02      	lsrs	r2, r0, #16
 8002902:	0400      	lsls	r0, r0, #16
 8002904:	0c00      	lsrs	r0, r0, #16
 8002906:	4345      	muls	r5, r0
 8002908:	46ac      	mov	ip, r5
 800290a:	0005      	movs	r5, r0
 800290c:	4375      	muls	r5, r6
 800290e:	46a8      	mov	r8, r5
 8002910:	0015      	movs	r5, r2
 8002912:	000f      	movs	r7, r1
 8002914:	4375      	muls	r5, r6
 8002916:	9200      	str	r2, [sp, #0]
 8002918:	9502      	str	r5, [sp, #8]
 800291a:	002a      	movs	r2, r5
 800291c:	9d00      	ldr	r5, [sp, #0]
 800291e:	436f      	muls	r7, r5
 8002920:	4665      	mov	r5, ip
 8002922:	0c2d      	lsrs	r5, r5, #16
 8002924:	46a9      	mov	r9, r5
 8002926:	4447      	add	r7, r8
 8002928:	444f      	add	r7, r9
 800292a:	45b8      	cmp	r8, r7
 800292c:	d905      	bls.n	800293a <__aeabi_dmul+0x376>
 800292e:	0015      	movs	r5, r2
 8002930:	2280      	movs	r2, #128	@ 0x80
 8002932:	0252      	lsls	r2, r2, #9
 8002934:	4690      	mov	r8, r2
 8002936:	4445      	add	r5, r8
 8002938:	9502      	str	r5, [sp, #8]
 800293a:	0c3d      	lsrs	r5, r7, #16
 800293c:	9503      	str	r5, [sp, #12]
 800293e:	4665      	mov	r5, ip
 8002940:	042d      	lsls	r5, r5, #16
 8002942:	043f      	lsls	r7, r7, #16
 8002944:	0c2d      	lsrs	r5, r5, #16
 8002946:	46ac      	mov	ip, r5
 8002948:	003d      	movs	r5, r7
 800294a:	4465      	add	r5, ip
 800294c:	9504      	str	r5, [sp, #16]
 800294e:	0c25      	lsrs	r5, r4, #16
 8002950:	0424      	lsls	r4, r4, #16
 8002952:	0c24      	lsrs	r4, r4, #16
 8002954:	46ac      	mov	ip, r5
 8002956:	0025      	movs	r5, r4
 8002958:	4375      	muls	r5, r6
 800295a:	46a8      	mov	r8, r5
 800295c:	4665      	mov	r5, ip
 800295e:	000f      	movs	r7, r1
 8002960:	4369      	muls	r1, r5
 8002962:	4441      	add	r1, r8
 8002964:	4689      	mov	r9, r1
 8002966:	4367      	muls	r7, r4
 8002968:	0c39      	lsrs	r1, r7, #16
 800296a:	4449      	add	r1, r9
 800296c:	436e      	muls	r6, r5
 800296e:	4588      	cmp	r8, r1
 8002970:	d903      	bls.n	800297a <__aeabi_dmul+0x3b6>
 8002972:	2280      	movs	r2, #128	@ 0x80
 8002974:	0252      	lsls	r2, r2, #9
 8002976:	4690      	mov	r8, r2
 8002978:	4446      	add	r6, r8
 800297a:	0c0d      	lsrs	r5, r1, #16
 800297c:	46a8      	mov	r8, r5
 800297e:	0035      	movs	r5, r6
 8002980:	4445      	add	r5, r8
 8002982:	9505      	str	r5, [sp, #20]
 8002984:	9d03      	ldr	r5, [sp, #12]
 8002986:	043f      	lsls	r7, r7, #16
 8002988:	46a8      	mov	r8, r5
 800298a:	0c3f      	lsrs	r7, r7, #16
 800298c:	0409      	lsls	r1, r1, #16
 800298e:	19c9      	adds	r1, r1, r7
 8002990:	4488      	add	r8, r1
 8002992:	4645      	mov	r5, r8
 8002994:	9503      	str	r5, [sp, #12]
 8002996:	4655      	mov	r5, sl
 8002998:	042e      	lsls	r6, r5, #16
 800299a:	0c36      	lsrs	r6, r6, #16
 800299c:	0c2f      	lsrs	r7, r5, #16
 800299e:	0035      	movs	r5, r6
 80029a0:	4345      	muls	r5, r0
 80029a2:	4378      	muls	r0, r7
 80029a4:	4681      	mov	r9, r0
 80029a6:	0038      	movs	r0, r7
 80029a8:	46a8      	mov	r8, r5
 80029aa:	0c2d      	lsrs	r5, r5, #16
 80029ac:	46aa      	mov	sl, r5
 80029ae:	9a00      	ldr	r2, [sp, #0]
 80029b0:	4350      	muls	r0, r2
 80029b2:	4372      	muls	r2, r6
 80029b4:	444a      	add	r2, r9
 80029b6:	4452      	add	r2, sl
 80029b8:	4591      	cmp	r9, r2
 80029ba:	d903      	bls.n	80029c4 <__aeabi_dmul+0x400>
 80029bc:	2580      	movs	r5, #128	@ 0x80
 80029be:	026d      	lsls	r5, r5, #9
 80029c0:	46a9      	mov	r9, r5
 80029c2:	4448      	add	r0, r9
 80029c4:	0c15      	lsrs	r5, r2, #16
 80029c6:	46a9      	mov	r9, r5
 80029c8:	4645      	mov	r5, r8
 80029ca:	042d      	lsls	r5, r5, #16
 80029cc:	0c2d      	lsrs	r5, r5, #16
 80029ce:	46a8      	mov	r8, r5
 80029d0:	4665      	mov	r5, ip
 80029d2:	437d      	muls	r5, r7
 80029d4:	0412      	lsls	r2, r2, #16
 80029d6:	4448      	add	r0, r9
 80029d8:	4490      	add	r8, r2
 80029da:	46a9      	mov	r9, r5
 80029dc:	0032      	movs	r2, r6
 80029de:	4665      	mov	r5, ip
 80029e0:	4362      	muls	r2, r4
 80029e2:	436e      	muls	r6, r5
 80029e4:	437c      	muls	r4, r7
 80029e6:	0c17      	lsrs	r7, r2, #16
 80029e8:	1936      	adds	r6, r6, r4
 80029ea:	19bf      	adds	r7, r7, r6
 80029ec:	42bc      	cmp	r4, r7
 80029ee:	d903      	bls.n	80029f8 <__aeabi_dmul+0x434>
 80029f0:	2480      	movs	r4, #128	@ 0x80
 80029f2:	0264      	lsls	r4, r4, #9
 80029f4:	46a4      	mov	ip, r4
 80029f6:	44e1      	add	r9, ip
 80029f8:	9c02      	ldr	r4, [sp, #8]
 80029fa:	9e03      	ldr	r6, [sp, #12]
 80029fc:	46a4      	mov	ip, r4
 80029fe:	9d05      	ldr	r5, [sp, #20]
 8002a00:	4466      	add	r6, ip
 8002a02:	428e      	cmp	r6, r1
 8002a04:	4189      	sbcs	r1, r1
 8002a06:	46ac      	mov	ip, r5
 8002a08:	0412      	lsls	r2, r2, #16
 8002a0a:	043c      	lsls	r4, r7, #16
 8002a0c:	0c12      	lsrs	r2, r2, #16
 8002a0e:	18a2      	adds	r2, r4, r2
 8002a10:	4462      	add	r2, ip
 8002a12:	4249      	negs	r1, r1
 8002a14:	1854      	adds	r4, r2, r1
 8002a16:	4446      	add	r6, r8
 8002a18:	46a4      	mov	ip, r4
 8002a1a:	4546      	cmp	r6, r8
 8002a1c:	41a4      	sbcs	r4, r4
 8002a1e:	4682      	mov	sl, r0
 8002a20:	4264      	negs	r4, r4
 8002a22:	46a0      	mov	r8, r4
 8002a24:	42aa      	cmp	r2, r5
 8002a26:	4192      	sbcs	r2, r2
 8002a28:	458c      	cmp	ip, r1
 8002a2a:	4189      	sbcs	r1, r1
 8002a2c:	44e2      	add	sl, ip
 8002a2e:	44d0      	add	r8, sl
 8002a30:	4249      	negs	r1, r1
 8002a32:	4252      	negs	r2, r2
 8002a34:	430a      	orrs	r2, r1
 8002a36:	45a0      	cmp	r8, r4
 8002a38:	41a4      	sbcs	r4, r4
 8002a3a:	4582      	cmp	sl, r0
 8002a3c:	4189      	sbcs	r1, r1
 8002a3e:	4264      	negs	r4, r4
 8002a40:	4249      	negs	r1, r1
 8002a42:	430c      	orrs	r4, r1
 8002a44:	4641      	mov	r1, r8
 8002a46:	0c3f      	lsrs	r7, r7, #16
 8002a48:	19d2      	adds	r2, r2, r7
 8002a4a:	1912      	adds	r2, r2, r4
 8002a4c:	0dcc      	lsrs	r4, r1, #23
 8002a4e:	9904      	ldr	r1, [sp, #16]
 8002a50:	0270      	lsls	r0, r6, #9
 8002a52:	4308      	orrs	r0, r1
 8002a54:	1e41      	subs	r1, r0, #1
 8002a56:	4188      	sbcs	r0, r1
 8002a58:	4641      	mov	r1, r8
 8002a5a:	444a      	add	r2, r9
 8002a5c:	0df6      	lsrs	r6, r6, #23
 8002a5e:	0252      	lsls	r2, r2, #9
 8002a60:	4330      	orrs	r0, r6
 8002a62:	0249      	lsls	r1, r1, #9
 8002a64:	4314      	orrs	r4, r2
 8002a66:	4308      	orrs	r0, r1
 8002a68:	01d2      	lsls	r2, r2, #7
 8002a6a:	d535      	bpl.n	8002ad8 <__aeabi_dmul+0x514>
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	0843      	lsrs	r3, r0, #1
 8002a70:	4002      	ands	r2, r0
 8002a72:	4313      	orrs	r3, r2
 8002a74:	07e0      	lsls	r0, r4, #31
 8002a76:	4318      	orrs	r0, r3
 8002a78:	0864      	lsrs	r4, r4, #1
 8002a7a:	e634      	b.n	80026e6 <__aeabi_dmul+0x122>
 8002a7c:	9b00      	ldr	r3, [sp, #0]
 8002a7e:	46a2      	mov	sl, r4
 8002a80:	469b      	mov	fp, r3
 8002a82:	4681      	mov	r9, r0
 8002a84:	2480      	movs	r4, #128	@ 0x80
 8002a86:	4653      	mov	r3, sl
 8002a88:	0324      	lsls	r4, r4, #12
 8002a8a:	431c      	orrs	r4, r3
 8002a8c:	0324      	lsls	r4, r4, #12
 8002a8e:	464a      	mov	r2, r9
 8002a90:	4b2e      	ldr	r3, [pc, #184]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002a92:	0b24      	lsrs	r4, r4, #12
 8002a94:	e5ec      	b.n	8002670 <__aeabi_dmul+0xac>
 8002a96:	f7fd fd69 	bl	800056c <__clzsi2>
 8002a9a:	2315      	movs	r3, #21
 8002a9c:	469c      	mov	ip, r3
 8002a9e:	4484      	add	ip, r0
 8002aa0:	0002      	movs	r2, r0
 8002aa2:	4663      	mov	r3, ip
 8002aa4:	3220      	adds	r2, #32
 8002aa6:	2b1c      	cmp	r3, #28
 8002aa8:	dc00      	bgt.n	8002aac <__aeabi_dmul+0x4e8>
 8002aaa:	e684      	b.n	80027b6 <__aeabi_dmul+0x1f2>
 8002aac:	2300      	movs	r3, #0
 8002aae:	4699      	mov	r9, r3
 8002ab0:	0023      	movs	r3, r4
 8002ab2:	3808      	subs	r0, #8
 8002ab4:	4083      	lsls	r3, r0
 8002ab6:	469a      	mov	sl, r3
 8002ab8:	e68e      	b.n	80027d8 <__aeabi_dmul+0x214>
 8002aba:	f7fd fd57 	bl	800056c <__clzsi2>
 8002abe:	0002      	movs	r2, r0
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	3215      	adds	r2, #21
 8002ac4:	3320      	adds	r3, #32
 8002ac6:	2a1c      	cmp	r2, #28
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dmul+0x508>
 8002aca:	e64e      	b.n	800276a <__aeabi_dmul+0x1a6>
 8002acc:	0002      	movs	r2, r0
 8002ace:	0034      	movs	r4, r6
 8002ad0:	3a08      	subs	r2, #8
 8002ad2:	2000      	movs	r0, #0
 8002ad4:	4094      	lsls	r4, r2
 8002ad6:	e652      	b.n	800277e <__aeabi_dmul+0x1ba>
 8002ad8:	9301      	str	r3, [sp, #4]
 8002ada:	e604      	b.n	80026e6 <__aeabi_dmul+0x122>
 8002adc:	4b1c      	ldr	r3, [pc, #112]	@ (8002b50 <__aeabi_dmul+0x58c>)
 8002ade:	0021      	movs	r1, r4
 8002ae0:	469c      	mov	ip, r3
 8002ae2:	0003      	movs	r3, r0
 8002ae4:	9d01      	ldr	r5, [sp, #4]
 8002ae6:	40d3      	lsrs	r3, r2
 8002ae8:	4465      	add	r5, ip
 8002aea:	40a9      	lsls	r1, r5
 8002aec:	4319      	orrs	r1, r3
 8002aee:	0003      	movs	r3, r0
 8002af0:	40ab      	lsls	r3, r5
 8002af2:	1e58      	subs	r0, r3, #1
 8002af4:	4183      	sbcs	r3, r0
 8002af6:	4319      	orrs	r1, r3
 8002af8:	0008      	movs	r0, r1
 8002afa:	40d4      	lsrs	r4, r2
 8002afc:	074b      	lsls	r3, r1, #29
 8002afe:	d009      	beq.n	8002b14 <__aeabi_dmul+0x550>
 8002b00:	230f      	movs	r3, #15
 8002b02:	400b      	ands	r3, r1
 8002b04:	2b04      	cmp	r3, #4
 8002b06:	d005      	beq.n	8002b14 <__aeabi_dmul+0x550>
 8002b08:	1d0b      	adds	r3, r1, #4
 8002b0a:	428b      	cmp	r3, r1
 8002b0c:	4180      	sbcs	r0, r0
 8002b0e:	4240      	negs	r0, r0
 8002b10:	1824      	adds	r4, r4, r0
 8002b12:	0018      	movs	r0, r3
 8002b14:	0223      	lsls	r3, r4, #8
 8002b16:	d400      	bmi.n	8002b1a <__aeabi_dmul+0x556>
 8002b18:	e6d6      	b.n	80028c8 <__aeabi_dmul+0x304>
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	2400      	movs	r4, #0
 8002b1e:	2200      	movs	r2, #0
 8002b20:	e5a6      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b22:	290f      	cmp	r1, #15
 8002b24:	d1aa      	bne.n	8002a7c <__aeabi_dmul+0x4b8>
 8002b26:	2380      	movs	r3, #128	@ 0x80
 8002b28:	4652      	mov	r2, sl
 8002b2a:	031b      	lsls	r3, r3, #12
 8002b2c:	421a      	tst	r2, r3
 8002b2e:	d0a9      	beq.n	8002a84 <__aeabi_dmul+0x4c0>
 8002b30:	421c      	tst	r4, r3
 8002b32:	d1a7      	bne.n	8002a84 <__aeabi_dmul+0x4c0>
 8002b34:	431c      	orrs	r4, r3
 8002b36:	9b00      	ldr	r3, [sp, #0]
 8002b38:	0002      	movs	r2, r0
 8002b3a:	469b      	mov	fp, r3
 8002b3c:	4b03      	ldr	r3, [pc, #12]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002b3e:	e597      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b40:	2400      	movs	r4, #0
 8002b42:	e6c1      	b.n	80028c8 <__aeabi_dmul+0x304>
 8002b44:	2400      	movs	r4, #0
 8002b46:	4b01      	ldr	r3, [pc, #4]	@ (8002b4c <__aeabi_dmul+0x588>)
 8002b48:	0022      	movs	r2, r4
 8002b4a:	e591      	b.n	8002670 <__aeabi_dmul+0xac>
 8002b4c:	000007ff 	.word	0x000007ff
 8002b50:	0000041e 	.word	0x0000041e

08002b54 <__aeabi_dsub>:
 8002b54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002b56:	464e      	mov	r6, r9
 8002b58:	4645      	mov	r5, r8
 8002b5a:	46de      	mov	lr, fp
 8002b5c:	4657      	mov	r7, sl
 8002b5e:	b5e0      	push	{r5, r6, r7, lr}
 8002b60:	b085      	sub	sp, #20
 8002b62:	9000      	str	r0, [sp, #0]
 8002b64:	9101      	str	r1, [sp, #4]
 8002b66:	030c      	lsls	r4, r1, #12
 8002b68:	004f      	lsls	r7, r1, #1
 8002b6a:	0fce      	lsrs	r6, r1, #31
 8002b6c:	0a61      	lsrs	r1, r4, #9
 8002b6e:	9c00      	ldr	r4, [sp, #0]
 8002b70:	46b0      	mov	r8, r6
 8002b72:	0f64      	lsrs	r4, r4, #29
 8002b74:	430c      	orrs	r4, r1
 8002b76:	9900      	ldr	r1, [sp, #0]
 8002b78:	0d7f      	lsrs	r7, r7, #21
 8002b7a:	00c8      	lsls	r0, r1, #3
 8002b7c:	0011      	movs	r1, r2
 8002b7e:	001a      	movs	r2, r3
 8002b80:	031b      	lsls	r3, r3, #12
 8002b82:	469c      	mov	ip, r3
 8002b84:	9100      	str	r1, [sp, #0]
 8002b86:	9201      	str	r2, [sp, #4]
 8002b88:	0051      	lsls	r1, r2, #1
 8002b8a:	0d4b      	lsrs	r3, r1, #21
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	9b01      	ldr	r3, [sp, #4]
 8002b90:	9d00      	ldr	r5, [sp, #0]
 8002b92:	0fd9      	lsrs	r1, r3, #31
 8002b94:	4663      	mov	r3, ip
 8002b96:	0f6a      	lsrs	r2, r5, #29
 8002b98:	0a5b      	lsrs	r3, r3, #9
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	00ea      	lsls	r2, r5, #3
 8002b9e:	4694      	mov	ip, r2
 8002ba0:	4693      	mov	fp, r2
 8002ba2:	4ac1      	ldr	r2, [pc, #772]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002ba4:	9003      	str	r0, [sp, #12]
 8002ba6:	9302      	str	r3, [sp, #8]
 8002ba8:	4591      	cmp	r9, r2
 8002baa:	d100      	bne.n	8002bae <__aeabi_dsub+0x5a>
 8002bac:	e0cd      	b.n	8002d4a <__aeabi_dsub+0x1f6>
 8002bae:	2501      	movs	r5, #1
 8002bb0:	4069      	eors	r1, r5
 8002bb2:	464d      	mov	r5, r9
 8002bb4:	1b7d      	subs	r5, r7, r5
 8002bb6:	46aa      	mov	sl, r5
 8002bb8:	428e      	cmp	r6, r1
 8002bba:	d100      	bne.n	8002bbe <__aeabi_dsub+0x6a>
 8002bbc:	e080      	b.n	8002cc0 <__aeabi_dsub+0x16c>
 8002bbe:	2d00      	cmp	r5, #0
 8002bc0:	dc00      	bgt.n	8002bc4 <__aeabi_dsub+0x70>
 8002bc2:	e335      	b.n	8003230 <__aeabi_dsub+0x6dc>
 8002bc4:	4649      	mov	r1, r9
 8002bc6:	2900      	cmp	r1, #0
 8002bc8:	d100      	bne.n	8002bcc <__aeabi_dsub+0x78>
 8002bca:	e0df      	b.n	8002d8c <__aeabi_dsub+0x238>
 8002bcc:	4297      	cmp	r7, r2
 8002bce:	d100      	bne.n	8002bd2 <__aeabi_dsub+0x7e>
 8002bd0:	e194      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002bd2:	4652      	mov	r2, sl
 8002bd4:	2501      	movs	r5, #1
 8002bd6:	2a38      	cmp	r2, #56	@ 0x38
 8002bd8:	dc19      	bgt.n	8002c0e <__aeabi_dsub+0xba>
 8002bda:	2280      	movs	r2, #128	@ 0x80
 8002bdc:	9b02      	ldr	r3, [sp, #8]
 8002bde:	0412      	lsls	r2, r2, #16
 8002be0:	4313      	orrs	r3, r2
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	4652      	mov	r2, sl
 8002be6:	2a1f      	cmp	r2, #31
 8002be8:	dd00      	ble.n	8002bec <__aeabi_dsub+0x98>
 8002bea:	e1e3      	b.n	8002fb4 <__aeabi_dsub+0x460>
 8002bec:	4653      	mov	r3, sl
 8002bee:	2220      	movs	r2, #32
 8002bf0:	4661      	mov	r1, ip
 8002bf2:	9d02      	ldr	r5, [sp, #8]
 8002bf4:	1ad2      	subs	r2, r2, r3
 8002bf6:	4095      	lsls	r5, r2
 8002bf8:	40d9      	lsrs	r1, r3
 8002bfa:	430d      	orrs	r5, r1
 8002bfc:	4661      	mov	r1, ip
 8002bfe:	4091      	lsls	r1, r2
 8002c00:	000a      	movs	r2, r1
 8002c02:	1e51      	subs	r1, r2, #1
 8002c04:	418a      	sbcs	r2, r1
 8002c06:	4315      	orrs	r5, r2
 8002c08:	9a02      	ldr	r2, [sp, #8]
 8002c0a:	40da      	lsrs	r2, r3
 8002c0c:	1aa4      	subs	r4, r4, r2
 8002c0e:	1b45      	subs	r5, r0, r5
 8002c10:	42a8      	cmp	r0, r5
 8002c12:	4180      	sbcs	r0, r0
 8002c14:	4240      	negs	r0, r0
 8002c16:	1a24      	subs	r4, r4, r0
 8002c18:	0223      	lsls	r3, r4, #8
 8002c1a:	d400      	bmi.n	8002c1e <__aeabi_dsub+0xca>
 8002c1c:	e13d      	b.n	8002e9a <__aeabi_dsub+0x346>
 8002c1e:	0264      	lsls	r4, r4, #9
 8002c20:	0a64      	lsrs	r4, r4, #9
 8002c22:	2c00      	cmp	r4, #0
 8002c24:	d100      	bne.n	8002c28 <__aeabi_dsub+0xd4>
 8002c26:	e147      	b.n	8002eb8 <__aeabi_dsub+0x364>
 8002c28:	0020      	movs	r0, r4
 8002c2a:	f7fd fc9f 	bl	800056c <__clzsi2>
 8002c2e:	0003      	movs	r3, r0
 8002c30:	3b08      	subs	r3, #8
 8002c32:	2120      	movs	r1, #32
 8002c34:	0028      	movs	r0, r5
 8002c36:	1aca      	subs	r2, r1, r3
 8002c38:	40d0      	lsrs	r0, r2
 8002c3a:	409c      	lsls	r4, r3
 8002c3c:	0002      	movs	r2, r0
 8002c3e:	409d      	lsls	r5, r3
 8002c40:	4322      	orrs	r2, r4
 8002c42:	429f      	cmp	r7, r3
 8002c44:	dd00      	ble.n	8002c48 <__aeabi_dsub+0xf4>
 8002c46:	e177      	b.n	8002f38 <__aeabi_dsub+0x3e4>
 8002c48:	1bd8      	subs	r0, r3, r7
 8002c4a:	3001      	adds	r0, #1
 8002c4c:	1a09      	subs	r1, r1, r0
 8002c4e:	002c      	movs	r4, r5
 8002c50:	408d      	lsls	r5, r1
 8002c52:	40c4      	lsrs	r4, r0
 8002c54:	1e6b      	subs	r3, r5, #1
 8002c56:	419d      	sbcs	r5, r3
 8002c58:	0013      	movs	r3, r2
 8002c5a:	40c2      	lsrs	r2, r0
 8002c5c:	408b      	lsls	r3, r1
 8002c5e:	4325      	orrs	r5, r4
 8002c60:	2700      	movs	r7, #0
 8002c62:	0014      	movs	r4, r2
 8002c64:	431d      	orrs	r5, r3
 8002c66:	076b      	lsls	r3, r5, #29
 8002c68:	d009      	beq.n	8002c7e <__aeabi_dsub+0x12a>
 8002c6a:	230f      	movs	r3, #15
 8002c6c:	402b      	ands	r3, r5
 8002c6e:	2b04      	cmp	r3, #4
 8002c70:	d005      	beq.n	8002c7e <__aeabi_dsub+0x12a>
 8002c72:	1d2b      	adds	r3, r5, #4
 8002c74:	42ab      	cmp	r3, r5
 8002c76:	41ad      	sbcs	r5, r5
 8002c78:	426d      	negs	r5, r5
 8002c7a:	1964      	adds	r4, r4, r5
 8002c7c:	001d      	movs	r5, r3
 8002c7e:	0223      	lsls	r3, r4, #8
 8002c80:	d400      	bmi.n	8002c84 <__aeabi_dsub+0x130>
 8002c82:	e140      	b.n	8002f06 <__aeabi_dsub+0x3b2>
 8002c84:	4a88      	ldr	r2, [pc, #544]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002c86:	3701      	adds	r7, #1
 8002c88:	4297      	cmp	r7, r2
 8002c8a:	d100      	bne.n	8002c8e <__aeabi_dsub+0x13a>
 8002c8c:	e101      	b.n	8002e92 <__aeabi_dsub+0x33e>
 8002c8e:	2601      	movs	r6, #1
 8002c90:	4643      	mov	r3, r8
 8002c92:	4986      	ldr	r1, [pc, #536]	@ (8002eac <__aeabi_dsub+0x358>)
 8002c94:	08ed      	lsrs	r5, r5, #3
 8002c96:	4021      	ands	r1, r4
 8002c98:	074a      	lsls	r2, r1, #29
 8002c9a:	432a      	orrs	r2, r5
 8002c9c:	057c      	lsls	r4, r7, #21
 8002c9e:	024d      	lsls	r5, r1, #9
 8002ca0:	0b2d      	lsrs	r5, r5, #12
 8002ca2:	0d64      	lsrs	r4, r4, #21
 8002ca4:	401e      	ands	r6, r3
 8002ca6:	0524      	lsls	r4, r4, #20
 8002ca8:	432c      	orrs	r4, r5
 8002caa:	07f6      	lsls	r6, r6, #31
 8002cac:	4334      	orrs	r4, r6
 8002cae:	0010      	movs	r0, r2
 8002cb0:	0021      	movs	r1, r4
 8002cb2:	b005      	add	sp, #20
 8002cb4:	bcf0      	pop	{r4, r5, r6, r7}
 8002cb6:	46bb      	mov	fp, r7
 8002cb8:	46b2      	mov	sl, r6
 8002cba:	46a9      	mov	r9, r5
 8002cbc:	46a0      	mov	r8, r4
 8002cbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002cc0:	2d00      	cmp	r5, #0
 8002cc2:	dc00      	bgt.n	8002cc6 <__aeabi_dsub+0x172>
 8002cc4:	e2d0      	b.n	8003268 <__aeabi_dsub+0x714>
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	2900      	cmp	r1, #0
 8002cca:	d000      	beq.n	8002cce <__aeabi_dsub+0x17a>
 8002ccc:	e0d4      	b.n	8002e78 <__aeabi_dsub+0x324>
 8002cce:	4661      	mov	r1, ip
 8002cd0:	9b02      	ldr	r3, [sp, #8]
 8002cd2:	4319      	orrs	r1, r3
 8002cd4:	d100      	bne.n	8002cd8 <__aeabi_dsub+0x184>
 8002cd6:	e12b      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002cd8:	1e69      	subs	r1, r5, #1
 8002cda:	2d01      	cmp	r5, #1
 8002cdc:	d100      	bne.n	8002ce0 <__aeabi_dsub+0x18c>
 8002cde:	e1d9      	b.n	8003094 <__aeabi_dsub+0x540>
 8002ce0:	4295      	cmp	r5, r2
 8002ce2:	d100      	bne.n	8002ce6 <__aeabi_dsub+0x192>
 8002ce4:	e10a      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002ce6:	2501      	movs	r5, #1
 8002ce8:	2938      	cmp	r1, #56	@ 0x38
 8002cea:	dc17      	bgt.n	8002d1c <__aeabi_dsub+0x1c8>
 8002cec:	468a      	mov	sl, r1
 8002cee:	4653      	mov	r3, sl
 8002cf0:	2b1f      	cmp	r3, #31
 8002cf2:	dd00      	ble.n	8002cf6 <__aeabi_dsub+0x1a2>
 8002cf4:	e1e7      	b.n	80030c6 <__aeabi_dsub+0x572>
 8002cf6:	2220      	movs	r2, #32
 8002cf8:	1ad2      	subs	r2, r2, r3
 8002cfa:	9b02      	ldr	r3, [sp, #8]
 8002cfc:	4661      	mov	r1, ip
 8002cfe:	4093      	lsls	r3, r2
 8002d00:	001d      	movs	r5, r3
 8002d02:	4653      	mov	r3, sl
 8002d04:	40d9      	lsrs	r1, r3
 8002d06:	4663      	mov	r3, ip
 8002d08:	4093      	lsls	r3, r2
 8002d0a:	001a      	movs	r2, r3
 8002d0c:	430d      	orrs	r5, r1
 8002d0e:	1e51      	subs	r1, r2, #1
 8002d10:	418a      	sbcs	r2, r1
 8002d12:	4653      	mov	r3, sl
 8002d14:	4315      	orrs	r5, r2
 8002d16:	9a02      	ldr	r2, [sp, #8]
 8002d18:	40da      	lsrs	r2, r3
 8002d1a:	18a4      	adds	r4, r4, r2
 8002d1c:	182d      	adds	r5, r5, r0
 8002d1e:	4285      	cmp	r5, r0
 8002d20:	4180      	sbcs	r0, r0
 8002d22:	4240      	negs	r0, r0
 8002d24:	1824      	adds	r4, r4, r0
 8002d26:	0223      	lsls	r3, r4, #8
 8002d28:	d400      	bmi.n	8002d2c <__aeabi_dsub+0x1d8>
 8002d2a:	e0b6      	b.n	8002e9a <__aeabi_dsub+0x346>
 8002d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002d2e:	3701      	adds	r7, #1
 8002d30:	429f      	cmp	r7, r3
 8002d32:	d100      	bne.n	8002d36 <__aeabi_dsub+0x1e2>
 8002d34:	e0ad      	b.n	8002e92 <__aeabi_dsub+0x33e>
 8002d36:	2101      	movs	r1, #1
 8002d38:	4b5c      	ldr	r3, [pc, #368]	@ (8002eac <__aeabi_dsub+0x358>)
 8002d3a:	086a      	lsrs	r2, r5, #1
 8002d3c:	401c      	ands	r4, r3
 8002d3e:	4029      	ands	r1, r5
 8002d40:	430a      	orrs	r2, r1
 8002d42:	07e5      	lsls	r5, r4, #31
 8002d44:	4315      	orrs	r5, r2
 8002d46:	0864      	lsrs	r4, r4, #1
 8002d48:	e78d      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002d4a:	4a59      	ldr	r2, [pc, #356]	@ (8002eb0 <__aeabi_dsub+0x35c>)
 8002d4c:	9b02      	ldr	r3, [sp, #8]
 8002d4e:	4692      	mov	sl, r2
 8002d50:	4662      	mov	r2, ip
 8002d52:	44ba      	add	sl, r7
 8002d54:	431a      	orrs	r2, r3
 8002d56:	d02c      	beq.n	8002db2 <__aeabi_dsub+0x25e>
 8002d58:	428e      	cmp	r6, r1
 8002d5a:	d02e      	beq.n	8002dba <__aeabi_dsub+0x266>
 8002d5c:	4652      	mov	r2, sl
 8002d5e:	2a00      	cmp	r2, #0
 8002d60:	d060      	beq.n	8002e24 <__aeabi_dsub+0x2d0>
 8002d62:	2f00      	cmp	r7, #0
 8002d64:	d100      	bne.n	8002d68 <__aeabi_dsub+0x214>
 8002d66:	e0db      	b.n	8002f20 <__aeabi_dsub+0x3cc>
 8002d68:	4663      	mov	r3, ip
 8002d6a:	000e      	movs	r6, r1
 8002d6c:	9c02      	ldr	r4, [sp, #8]
 8002d6e:	08d8      	lsrs	r0, r3, #3
 8002d70:	0762      	lsls	r2, r4, #29
 8002d72:	4302      	orrs	r2, r0
 8002d74:	08e4      	lsrs	r4, r4, #3
 8002d76:	0013      	movs	r3, r2
 8002d78:	4323      	orrs	r3, r4
 8002d7a:	d100      	bne.n	8002d7e <__aeabi_dsub+0x22a>
 8002d7c:	e254      	b.n	8003228 <__aeabi_dsub+0x6d4>
 8002d7e:	2580      	movs	r5, #128	@ 0x80
 8002d80:	032d      	lsls	r5, r5, #12
 8002d82:	4325      	orrs	r5, r4
 8002d84:	032d      	lsls	r5, r5, #12
 8002d86:	4c48      	ldr	r4, [pc, #288]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002d88:	0b2d      	lsrs	r5, r5, #12
 8002d8a:	e78c      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002d8c:	4661      	mov	r1, ip
 8002d8e:	9b02      	ldr	r3, [sp, #8]
 8002d90:	4319      	orrs	r1, r3
 8002d92:	d100      	bne.n	8002d96 <__aeabi_dsub+0x242>
 8002d94:	e0cc      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002d96:	0029      	movs	r1, r5
 8002d98:	3901      	subs	r1, #1
 8002d9a:	2d01      	cmp	r5, #1
 8002d9c:	d100      	bne.n	8002da0 <__aeabi_dsub+0x24c>
 8002d9e:	e188      	b.n	80030b2 <__aeabi_dsub+0x55e>
 8002da0:	4295      	cmp	r5, r2
 8002da2:	d100      	bne.n	8002da6 <__aeabi_dsub+0x252>
 8002da4:	e0aa      	b.n	8002efc <__aeabi_dsub+0x3a8>
 8002da6:	2501      	movs	r5, #1
 8002da8:	2938      	cmp	r1, #56	@ 0x38
 8002daa:	dd00      	ble.n	8002dae <__aeabi_dsub+0x25a>
 8002dac:	e72f      	b.n	8002c0e <__aeabi_dsub+0xba>
 8002dae:	468a      	mov	sl, r1
 8002db0:	e718      	b.n	8002be4 <__aeabi_dsub+0x90>
 8002db2:	2201      	movs	r2, #1
 8002db4:	4051      	eors	r1, r2
 8002db6:	428e      	cmp	r6, r1
 8002db8:	d1d0      	bne.n	8002d5c <__aeabi_dsub+0x208>
 8002dba:	4653      	mov	r3, sl
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d100      	bne.n	8002dc2 <__aeabi_dsub+0x26e>
 8002dc0:	e0be      	b.n	8002f40 <__aeabi_dsub+0x3ec>
 8002dc2:	2f00      	cmp	r7, #0
 8002dc4:	d000      	beq.n	8002dc8 <__aeabi_dsub+0x274>
 8002dc6:	e138      	b.n	800303a <__aeabi_dsub+0x4e6>
 8002dc8:	46ca      	mov	sl, r9
 8002dca:	0022      	movs	r2, r4
 8002dcc:	4302      	orrs	r2, r0
 8002dce:	d100      	bne.n	8002dd2 <__aeabi_dsub+0x27e>
 8002dd0:	e1e2      	b.n	8003198 <__aeabi_dsub+0x644>
 8002dd2:	4653      	mov	r3, sl
 8002dd4:	1e59      	subs	r1, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d100      	bne.n	8002ddc <__aeabi_dsub+0x288>
 8002dda:	e20d      	b.n	80031f8 <__aeabi_dsub+0x6a4>
 8002ddc:	4a32      	ldr	r2, [pc, #200]	@ (8002ea8 <__aeabi_dsub+0x354>)
 8002dde:	4592      	cmp	sl, r2
 8002de0:	d100      	bne.n	8002de4 <__aeabi_dsub+0x290>
 8002de2:	e1d2      	b.n	800318a <__aeabi_dsub+0x636>
 8002de4:	2701      	movs	r7, #1
 8002de6:	2938      	cmp	r1, #56	@ 0x38
 8002de8:	dc13      	bgt.n	8002e12 <__aeabi_dsub+0x2be>
 8002dea:	291f      	cmp	r1, #31
 8002dec:	dd00      	ble.n	8002df0 <__aeabi_dsub+0x29c>
 8002dee:	e1ee      	b.n	80031ce <__aeabi_dsub+0x67a>
 8002df0:	2220      	movs	r2, #32
 8002df2:	9b02      	ldr	r3, [sp, #8]
 8002df4:	1a52      	subs	r2, r2, r1
 8002df6:	0025      	movs	r5, r4
 8002df8:	0007      	movs	r7, r0
 8002dfa:	469a      	mov	sl, r3
 8002dfc:	40cc      	lsrs	r4, r1
 8002dfe:	4090      	lsls	r0, r2
 8002e00:	4095      	lsls	r5, r2
 8002e02:	40cf      	lsrs	r7, r1
 8002e04:	44a2      	add	sl, r4
 8002e06:	1e42      	subs	r2, r0, #1
 8002e08:	4190      	sbcs	r0, r2
 8002e0a:	4653      	mov	r3, sl
 8002e0c:	432f      	orrs	r7, r5
 8002e0e:	4307      	orrs	r7, r0
 8002e10:	9302      	str	r3, [sp, #8]
 8002e12:	003d      	movs	r5, r7
 8002e14:	4465      	add	r5, ip
 8002e16:	4565      	cmp	r5, ip
 8002e18:	4192      	sbcs	r2, r2
 8002e1a:	9b02      	ldr	r3, [sp, #8]
 8002e1c:	4252      	negs	r2, r2
 8002e1e:	464f      	mov	r7, r9
 8002e20:	18d4      	adds	r4, r2, r3
 8002e22:	e780      	b.n	8002d26 <__aeabi_dsub+0x1d2>
 8002e24:	4a23      	ldr	r2, [pc, #140]	@ (8002eb4 <__aeabi_dsub+0x360>)
 8002e26:	1c7d      	adds	r5, r7, #1
 8002e28:	4215      	tst	r5, r2
 8002e2a:	d000      	beq.n	8002e2e <__aeabi_dsub+0x2da>
 8002e2c:	e0aa      	b.n	8002f84 <__aeabi_dsub+0x430>
 8002e2e:	4662      	mov	r2, ip
 8002e30:	0025      	movs	r5, r4
 8002e32:	9b02      	ldr	r3, [sp, #8]
 8002e34:	4305      	orrs	r5, r0
 8002e36:	431a      	orrs	r2, r3
 8002e38:	2f00      	cmp	r7, #0
 8002e3a:	d000      	beq.n	8002e3e <__aeabi_dsub+0x2ea>
 8002e3c:	e0f5      	b.n	800302a <__aeabi_dsub+0x4d6>
 8002e3e:	2d00      	cmp	r5, #0
 8002e40:	d100      	bne.n	8002e44 <__aeabi_dsub+0x2f0>
 8002e42:	e16b      	b.n	800311c <__aeabi_dsub+0x5c8>
 8002e44:	2a00      	cmp	r2, #0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x2f6>
 8002e48:	e152      	b.n	80030f0 <__aeabi_dsub+0x59c>
 8002e4a:	4663      	mov	r3, ip
 8002e4c:	1ac5      	subs	r5, r0, r3
 8002e4e:	9b02      	ldr	r3, [sp, #8]
 8002e50:	1ae2      	subs	r2, r4, r3
 8002e52:	42a8      	cmp	r0, r5
 8002e54:	419b      	sbcs	r3, r3
 8002e56:	425b      	negs	r3, r3
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	021a      	lsls	r2, r3, #8
 8002e5c:	d400      	bmi.n	8002e60 <__aeabi_dsub+0x30c>
 8002e5e:	e1d5      	b.n	800320c <__aeabi_dsub+0x6b8>
 8002e60:	4663      	mov	r3, ip
 8002e62:	1a1d      	subs	r5, r3, r0
 8002e64:	45ac      	cmp	ip, r5
 8002e66:	4192      	sbcs	r2, r2
 8002e68:	2601      	movs	r6, #1
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	4252      	negs	r2, r2
 8002e6e:	1b1c      	subs	r4, r3, r4
 8002e70:	4688      	mov	r8, r1
 8002e72:	1aa4      	subs	r4, r4, r2
 8002e74:	400e      	ands	r6, r1
 8002e76:	e6f6      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002e78:	4297      	cmp	r7, r2
 8002e7a:	d03f      	beq.n	8002efc <__aeabi_dsub+0x3a8>
 8002e7c:	4652      	mov	r2, sl
 8002e7e:	2501      	movs	r5, #1
 8002e80:	2a38      	cmp	r2, #56	@ 0x38
 8002e82:	dd00      	ble.n	8002e86 <__aeabi_dsub+0x332>
 8002e84:	e74a      	b.n	8002d1c <__aeabi_dsub+0x1c8>
 8002e86:	2280      	movs	r2, #128	@ 0x80
 8002e88:	9b02      	ldr	r3, [sp, #8]
 8002e8a:	0412      	lsls	r2, r2, #16
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	9302      	str	r3, [sp, #8]
 8002e90:	e72d      	b.n	8002cee <__aeabi_dsub+0x19a>
 8002e92:	003c      	movs	r4, r7
 8002e94:	2500      	movs	r5, #0
 8002e96:	2200      	movs	r2, #0
 8002e98:	e705      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002e9a:	2307      	movs	r3, #7
 8002e9c:	402b      	ands	r3, r5
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d000      	beq.n	8002ea4 <__aeabi_dsub+0x350>
 8002ea2:	e6e2      	b.n	8002c6a <__aeabi_dsub+0x116>
 8002ea4:	e06b      	b.n	8002f7e <__aeabi_dsub+0x42a>
 8002ea6:	46c0      	nop			@ (mov r8, r8)
 8002ea8:	000007ff 	.word	0x000007ff
 8002eac:	ff7fffff 	.word	0xff7fffff
 8002eb0:	fffff801 	.word	0xfffff801
 8002eb4:	000007fe 	.word	0x000007fe
 8002eb8:	0028      	movs	r0, r5
 8002eba:	f7fd fb57 	bl	800056c <__clzsi2>
 8002ebe:	0003      	movs	r3, r0
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	2b1f      	cmp	r3, #31
 8002ec4:	dc00      	bgt.n	8002ec8 <__aeabi_dsub+0x374>
 8002ec6:	e6b4      	b.n	8002c32 <__aeabi_dsub+0xde>
 8002ec8:	002a      	movs	r2, r5
 8002eca:	3808      	subs	r0, #8
 8002ecc:	4082      	lsls	r2, r0
 8002ece:	429f      	cmp	r7, r3
 8002ed0:	dd00      	ble.n	8002ed4 <__aeabi_dsub+0x380>
 8002ed2:	e0b9      	b.n	8003048 <__aeabi_dsub+0x4f4>
 8002ed4:	1bdb      	subs	r3, r3, r7
 8002ed6:	1c58      	adds	r0, r3, #1
 8002ed8:	281f      	cmp	r0, #31
 8002eda:	dc00      	bgt.n	8002ede <__aeabi_dsub+0x38a>
 8002edc:	e1a0      	b.n	8003220 <__aeabi_dsub+0x6cc>
 8002ede:	0015      	movs	r5, r2
 8002ee0:	3b1f      	subs	r3, #31
 8002ee2:	40dd      	lsrs	r5, r3
 8002ee4:	2820      	cmp	r0, #32
 8002ee6:	d005      	beq.n	8002ef4 <__aeabi_dsub+0x3a0>
 8002ee8:	2340      	movs	r3, #64	@ 0x40
 8002eea:	1a1b      	subs	r3, r3, r0
 8002eec:	409a      	lsls	r2, r3
 8002eee:	1e53      	subs	r3, r2, #1
 8002ef0:	419a      	sbcs	r2, r3
 8002ef2:	4315      	orrs	r5, r2
 8002ef4:	2307      	movs	r3, #7
 8002ef6:	2700      	movs	r7, #0
 8002ef8:	402b      	ands	r3, r5
 8002efa:	e7d0      	b.n	8002e9e <__aeabi_dsub+0x34a>
 8002efc:	08c0      	lsrs	r0, r0, #3
 8002efe:	0762      	lsls	r2, r4, #29
 8002f00:	4302      	orrs	r2, r0
 8002f02:	08e4      	lsrs	r4, r4, #3
 8002f04:	e737      	b.n	8002d76 <__aeabi_dsub+0x222>
 8002f06:	08ea      	lsrs	r2, r5, #3
 8002f08:	0763      	lsls	r3, r4, #29
 8002f0a:	431a      	orrs	r2, r3
 8002f0c:	4bd3      	ldr	r3, [pc, #844]	@ (800325c <__aeabi_dsub+0x708>)
 8002f0e:	08e4      	lsrs	r4, r4, #3
 8002f10:	429f      	cmp	r7, r3
 8002f12:	d100      	bne.n	8002f16 <__aeabi_dsub+0x3c2>
 8002f14:	e72f      	b.n	8002d76 <__aeabi_dsub+0x222>
 8002f16:	0324      	lsls	r4, r4, #12
 8002f18:	0b25      	lsrs	r5, r4, #12
 8002f1a:	057c      	lsls	r4, r7, #21
 8002f1c:	0d64      	lsrs	r4, r4, #21
 8002f1e:	e6c2      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002f20:	46ca      	mov	sl, r9
 8002f22:	0022      	movs	r2, r4
 8002f24:	4302      	orrs	r2, r0
 8002f26:	d158      	bne.n	8002fda <__aeabi_dsub+0x486>
 8002f28:	4663      	mov	r3, ip
 8002f2a:	000e      	movs	r6, r1
 8002f2c:	9c02      	ldr	r4, [sp, #8]
 8002f2e:	9303      	str	r3, [sp, #12]
 8002f30:	9b03      	ldr	r3, [sp, #12]
 8002f32:	4657      	mov	r7, sl
 8002f34:	08da      	lsrs	r2, r3, #3
 8002f36:	e7e7      	b.n	8002f08 <__aeabi_dsub+0x3b4>
 8002f38:	4cc9      	ldr	r4, [pc, #804]	@ (8003260 <__aeabi_dsub+0x70c>)
 8002f3a:	1aff      	subs	r7, r7, r3
 8002f3c:	4014      	ands	r4, r2
 8002f3e:	e692      	b.n	8002c66 <__aeabi_dsub+0x112>
 8002f40:	4dc8      	ldr	r5, [pc, #800]	@ (8003264 <__aeabi_dsub+0x710>)
 8002f42:	1c7a      	adds	r2, r7, #1
 8002f44:	422a      	tst	r2, r5
 8002f46:	d000      	beq.n	8002f4a <__aeabi_dsub+0x3f6>
 8002f48:	e084      	b.n	8003054 <__aeabi_dsub+0x500>
 8002f4a:	0022      	movs	r2, r4
 8002f4c:	4302      	orrs	r2, r0
 8002f4e:	2f00      	cmp	r7, #0
 8002f50:	d000      	beq.n	8002f54 <__aeabi_dsub+0x400>
 8002f52:	e0ef      	b.n	8003134 <__aeabi_dsub+0x5e0>
 8002f54:	2a00      	cmp	r2, #0
 8002f56:	d100      	bne.n	8002f5a <__aeabi_dsub+0x406>
 8002f58:	e0e5      	b.n	8003126 <__aeabi_dsub+0x5d2>
 8002f5a:	4662      	mov	r2, ip
 8002f5c:	9902      	ldr	r1, [sp, #8]
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	d100      	bne.n	8002f64 <__aeabi_dsub+0x410>
 8002f62:	e0c5      	b.n	80030f0 <__aeabi_dsub+0x59c>
 8002f64:	4663      	mov	r3, ip
 8002f66:	18c5      	adds	r5, r0, r3
 8002f68:	468c      	mov	ip, r1
 8002f6a:	4285      	cmp	r5, r0
 8002f6c:	4180      	sbcs	r0, r0
 8002f6e:	4464      	add	r4, ip
 8002f70:	4240      	negs	r0, r0
 8002f72:	1824      	adds	r4, r4, r0
 8002f74:	0223      	lsls	r3, r4, #8
 8002f76:	d502      	bpl.n	8002f7e <__aeabi_dsub+0x42a>
 8002f78:	4bb9      	ldr	r3, [pc, #740]	@ (8003260 <__aeabi_dsub+0x70c>)
 8002f7a:	3701      	adds	r7, #1
 8002f7c:	401c      	ands	r4, r3
 8002f7e:	46ba      	mov	sl, r7
 8002f80:	9503      	str	r5, [sp, #12]
 8002f82:	e7d5      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 8002f84:	4662      	mov	r2, ip
 8002f86:	1a85      	subs	r5, r0, r2
 8002f88:	42a8      	cmp	r0, r5
 8002f8a:	4192      	sbcs	r2, r2
 8002f8c:	4252      	negs	r2, r2
 8002f8e:	4691      	mov	r9, r2
 8002f90:	9b02      	ldr	r3, [sp, #8]
 8002f92:	1ae3      	subs	r3, r4, r3
 8002f94:	001a      	movs	r2, r3
 8002f96:	464b      	mov	r3, r9
 8002f98:	1ad2      	subs	r2, r2, r3
 8002f9a:	0013      	movs	r3, r2
 8002f9c:	4691      	mov	r9, r2
 8002f9e:	021a      	lsls	r2, r3, #8
 8002fa0:	d46c      	bmi.n	800307c <__aeabi_dsub+0x528>
 8002fa2:	464a      	mov	r2, r9
 8002fa4:	464c      	mov	r4, r9
 8002fa6:	432a      	orrs	r2, r5
 8002fa8:	d000      	beq.n	8002fac <__aeabi_dsub+0x458>
 8002faa:	e63a      	b.n	8002c22 <__aeabi_dsub+0xce>
 8002fac:	2600      	movs	r6, #0
 8002fae:	2400      	movs	r4, #0
 8002fb0:	2500      	movs	r5, #0
 8002fb2:	e678      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8002fb4:	9902      	ldr	r1, [sp, #8]
 8002fb6:	4653      	mov	r3, sl
 8002fb8:	000d      	movs	r5, r1
 8002fba:	3a20      	subs	r2, #32
 8002fbc:	40d5      	lsrs	r5, r2
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d006      	beq.n	8002fd0 <__aeabi_dsub+0x47c>
 8002fc2:	2240      	movs	r2, #64	@ 0x40
 8002fc4:	1ad2      	subs	r2, r2, r3
 8002fc6:	000b      	movs	r3, r1
 8002fc8:	4093      	lsls	r3, r2
 8002fca:	4662      	mov	r2, ip
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	4693      	mov	fp, r2
 8002fd0:	465b      	mov	r3, fp
 8002fd2:	1e5a      	subs	r2, r3, #1
 8002fd4:	4193      	sbcs	r3, r2
 8002fd6:	431d      	orrs	r5, r3
 8002fd8:	e619      	b.n	8002c0e <__aeabi_dsub+0xba>
 8002fda:	4653      	mov	r3, sl
 8002fdc:	1e5a      	subs	r2, r3, #1
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d100      	bne.n	8002fe4 <__aeabi_dsub+0x490>
 8002fe2:	e0c6      	b.n	8003172 <__aeabi_dsub+0x61e>
 8002fe4:	4e9d      	ldr	r6, [pc, #628]	@ (800325c <__aeabi_dsub+0x708>)
 8002fe6:	45b2      	cmp	sl, r6
 8002fe8:	d100      	bne.n	8002fec <__aeabi_dsub+0x498>
 8002fea:	e6bd      	b.n	8002d68 <__aeabi_dsub+0x214>
 8002fec:	4688      	mov	r8, r1
 8002fee:	000e      	movs	r6, r1
 8002ff0:	2501      	movs	r5, #1
 8002ff2:	2a38      	cmp	r2, #56	@ 0x38
 8002ff4:	dc10      	bgt.n	8003018 <__aeabi_dsub+0x4c4>
 8002ff6:	2a1f      	cmp	r2, #31
 8002ff8:	dc7f      	bgt.n	80030fa <__aeabi_dsub+0x5a6>
 8002ffa:	2120      	movs	r1, #32
 8002ffc:	0025      	movs	r5, r4
 8002ffe:	1a89      	subs	r1, r1, r2
 8003000:	0007      	movs	r7, r0
 8003002:	4088      	lsls	r0, r1
 8003004:	408d      	lsls	r5, r1
 8003006:	40d7      	lsrs	r7, r2
 8003008:	40d4      	lsrs	r4, r2
 800300a:	1e41      	subs	r1, r0, #1
 800300c:	4188      	sbcs	r0, r1
 800300e:	9b02      	ldr	r3, [sp, #8]
 8003010:	433d      	orrs	r5, r7
 8003012:	1b1b      	subs	r3, r3, r4
 8003014:	4305      	orrs	r5, r0
 8003016:	9302      	str	r3, [sp, #8]
 8003018:	4662      	mov	r2, ip
 800301a:	1b55      	subs	r5, r2, r5
 800301c:	45ac      	cmp	ip, r5
 800301e:	4192      	sbcs	r2, r2
 8003020:	9b02      	ldr	r3, [sp, #8]
 8003022:	4252      	negs	r2, r2
 8003024:	464f      	mov	r7, r9
 8003026:	1a9c      	subs	r4, r3, r2
 8003028:	e5f6      	b.n	8002c18 <__aeabi_dsub+0xc4>
 800302a:	2d00      	cmp	r5, #0
 800302c:	d000      	beq.n	8003030 <__aeabi_dsub+0x4dc>
 800302e:	e0b7      	b.n	80031a0 <__aeabi_dsub+0x64c>
 8003030:	2a00      	cmp	r2, #0
 8003032:	d100      	bne.n	8003036 <__aeabi_dsub+0x4e2>
 8003034:	e0f0      	b.n	8003218 <__aeabi_dsub+0x6c4>
 8003036:	2601      	movs	r6, #1
 8003038:	400e      	ands	r6, r1
 800303a:	4663      	mov	r3, ip
 800303c:	9802      	ldr	r0, [sp, #8]
 800303e:	08d9      	lsrs	r1, r3, #3
 8003040:	0742      	lsls	r2, r0, #29
 8003042:	430a      	orrs	r2, r1
 8003044:	08c4      	lsrs	r4, r0, #3
 8003046:	e696      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003048:	4c85      	ldr	r4, [pc, #532]	@ (8003260 <__aeabi_dsub+0x70c>)
 800304a:	1aff      	subs	r7, r7, r3
 800304c:	4014      	ands	r4, r2
 800304e:	0762      	lsls	r2, r4, #29
 8003050:	08e4      	lsrs	r4, r4, #3
 8003052:	e760      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 8003054:	4981      	ldr	r1, [pc, #516]	@ (800325c <__aeabi_dsub+0x708>)
 8003056:	428a      	cmp	r2, r1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x508>
 800305a:	e0c9      	b.n	80031f0 <__aeabi_dsub+0x69c>
 800305c:	4663      	mov	r3, ip
 800305e:	18c1      	adds	r1, r0, r3
 8003060:	4281      	cmp	r1, r0
 8003062:	4180      	sbcs	r0, r0
 8003064:	9b02      	ldr	r3, [sp, #8]
 8003066:	4240      	negs	r0, r0
 8003068:	18e3      	adds	r3, r4, r3
 800306a:	181b      	adds	r3, r3, r0
 800306c:	07dd      	lsls	r5, r3, #31
 800306e:	085c      	lsrs	r4, r3, #1
 8003070:	2307      	movs	r3, #7
 8003072:	0849      	lsrs	r1, r1, #1
 8003074:	430d      	orrs	r5, r1
 8003076:	0017      	movs	r7, r2
 8003078:	402b      	ands	r3, r5
 800307a:	e710      	b.n	8002e9e <__aeabi_dsub+0x34a>
 800307c:	4663      	mov	r3, ip
 800307e:	1a1d      	subs	r5, r3, r0
 8003080:	45ac      	cmp	ip, r5
 8003082:	4192      	sbcs	r2, r2
 8003084:	2601      	movs	r6, #1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	4252      	negs	r2, r2
 800308a:	1b1c      	subs	r4, r3, r4
 800308c:	4688      	mov	r8, r1
 800308e:	1aa4      	subs	r4, r4, r2
 8003090:	400e      	ands	r6, r1
 8003092:	e5c6      	b.n	8002c22 <__aeabi_dsub+0xce>
 8003094:	4663      	mov	r3, ip
 8003096:	18c5      	adds	r5, r0, r3
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4285      	cmp	r5, r0
 800309c:	4180      	sbcs	r0, r0
 800309e:	469c      	mov	ip, r3
 80030a0:	4240      	negs	r0, r0
 80030a2:	4464      	add	r4, ip
 80030a4:	1824      	adds	r4, r4, r0
 80030a6:	2701      	movs	r7, #1
 80030a8:	0223      	lsls	r3, r4, #8
 80030aa:	d400      	bmi.n	80030ae <__aeabi_dsub+0x55a>
 80030ac:	e6f5      	b.n	8002e9a <__aeabi_dsub+0x346>
 80030ae:	2702      	movs	r7, #2
 80030b0:	e641      	b.n	8002d36 <__aeabi_dsub+0x1e2>
 80030b2:	4663      	mov	r3, ip
 80030b4:	1ac5      	subs	r5, r0, r3
 80030b6:	42a8      	cmp	r0, r5
 80030b8:	4180      	sbcs	r0, r0
 80030ba:	9b02      	ldr	r3, [sp, #8]
 80030bc:	4240      	negs	r0, r0
 80030be:	1ae4      	subs	r4, r4, r3
 80030c0:	2701      	movs	r7, #1
 80030c2:	1a24      	subs	r4, r4, r0
 80030c4:	e5a8      	b.n	8002c18 <__aeabi_dsub+0xc4>
 80030c6:	9d02      	ldr	r5, [sp, #8]
 80030c8:	4652      	mov	r2, sl
 80030ca:	002b      	movs	r3, r5
 80030cc:	3a20      	subs	r2, #32
 80030ce:	40d3      	lsrs	r3, r2
 80030d0:	0019      	movs	r1, r3
 80030d2:	4653      	mov	r3, sl
 80030d4:	2b20      	cmp	r3, #32
 80030d6:	d006      	beq.n	80030e6 <__aeabi_dsub+0x592>
 80030d8:	2240      	movs	r2, #64	@ 0x40
 80030da:	1ad2      	subs	r2, r2, r3
 80030dc:	002b      	movs	r3, r5
 80030de:	4093      	lsls	r3, r2
 80030e0:	4662      	mov	r2, ip
 80030e2:	431a      	orrs	r2, r3
 80030e4:	4693      	mov	fp, r2
 80030e6:	465d      	mov	r5, fp
 80030e8:	1e6b      	subs	r3, r5, #1
 80030ea:	419d      	sbcs	r5, r3
 80030ec:	430d      	orrs	r5, r1
 80030ee:	e615      	b.n	8002d1c <__aeabi_dsub+0x1c8>
 80030f0:	0762      	lsls	r2, r4, #29
 80030f2:	08c0      	lsrs	r0, r0, #3
 80030f4:	4302      	orrs	r2, r0
 80030f6:	08e4      	lsrs	r4, r4, #3
 80030f8:	e70d      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 80030fa:	0011      	movs	r1, r2
 80030fc:	0027      	movs	r7, r4
 80030fe:	3920      	subs	r1, #32
 8003100:	40cf      	lsrs	r7, r1
 8003102:	2a20      	cmp	r2, #32
 8003104:	d005      	beq.n	8003112 <__aeabi_dsub+0x5be>
 8003106:	2140      	movs	r1, #64	@ 0x40
 8003108:	1a8a      	subs	r2, r1, r2
 800310a:	4094      	lsls	r4, r2
 800310c:	0025      	movs	r5, r4
 800310e:	4305      	orrs	r5, r0
 8003110:	9503      	str	r5, [sp, #12]
 8003112:	9d03      	ldr	r5, [sp, #12]
 8003114:	1e6a      	subs	r2, r5, #1
 8003116:	4195      	sbcs	r5, r2
 8003118:	433d      	orrs	r5, r7
 800311a:	e77d      	b.n	8003018 <__aeabi_dsub+0x4c4>
 800311c:	2a00      	cmp	r2, #0
 800311e:	d100      	bne.n	8003122 <__aeabi_dsub+0x5ce>
 8003120:	e744      	b.n	8002fac <__aeabi_dsub+0x458>
 8003122:	2601      	movs	r6, #1
 8003124:	400e      	ands	r6, r1
 8003126:	4663      	mov	r3, ip
 8003128:	08d9      	lsrs	r1, r3, #3
 800312a:	9b02      	ldr	r3, [sp, #8]
 800312c:	075a      	lsls	r2, r3, #29
 800312e:	430a      	orrs	r2, r1
 8003130:	08dc      	lsrs	r4, r3, #3
 8003132:	e6f0      	b.n	8002f16 <__aeabi_dsub+0x3c2>
 8003134:	2a00      	cmp	r2, #0
 8003136:	d028      	beq.n	800318a <__aeabi_dsub+0x636>
 8003138:	4662      	mov	r2, ip
 800313a:	9f02      	ldr	r7, [sp, #8]
 800313c:	08c0      	lsrs	r0, r0, #3
 800313e:	433a      	orrs	r2, r7
 8003140:	d100      	bne.n	8003144 <__aeabi_dsub+0x5f0>
 8003142:	e6dc      	b.n	8002efe <__aeabi_dsub+0x3aa>
 8003144:	0762      	lsls	r2, r4, #29
 8003146:	4310      	orrs	r0, r2
 8003148:	2280      	movs	r2, #128	@ 0x80
 800314a:	08e4      	lsrs	r4, r4, #3
 800314c:	0312      	lsls	r2, r2, #12
 800314e:	4214      	tst	r4, r2
 8003150:	d009      	beq.n	8003166 <__aeabi_dsub+0x612>
 8003152:	08fd      	lsrs	r5, r7, #3
 8003154:	4215      	tst	r5, r2
 8003156:	d106      	bne.n	8003166 <__aeabi_dsub+0x612>
 8003158:	4663      	mov	r3, ip
 800315a:	2601      	movs	r6, #1
 800315c:	002c      	movs	r4, r5
 800315e:	08d8      	lsrs	r0, r3, #3
 8003160:	077b      	lsls	r3, r7, #29
 8003162:	4318      	orrs	r0, r3
 8003164:	400e      	ands	r6, r1
 8003166:	0f42      	lsrs	r2, r0, #29
 8003168:	00c0      	lsls	r0, r0, #3
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	0752      	lsls	r2, r2, #29
 800316e:	4302      	orrs	r2, r0
 8003170:	e601      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003172:	4663      	mov	r3, ip
 8003174:	1a1d      	subs	r5, r3, r0
 8003176:	45ac      	cmp	ip, r5
 8003178:	4192      	sbcs	r2, r2
 800317a:	9b02      	ldr	r3, [sp, #8]
 800317c:	4252      	negs	r2, r2
 800317e:	1b1c      	subs	r4, r3, r4
 8003180:	000e      	movs	r6, r1
 8003182:	4688      	mov	r8, r1
 8003184:	2701      	movs	r7, #1
 8003186:	1aa4      	subs	r4, r4, r2
 8003188:	e546      	b.n	8002c18 <__aeabi_dsub+0xc4>
 800318a:	4663      	mov	r3, ip
 800318c:	08d9      	lsrs	r1, r3, #3
 800318e:	9b02      	ldr	r3, [sp, #8]
 8003190:	075a      	lsls	r2, r3, #29
 8003192:	430a      	orrs	r2, r1
 8003194:	08dc      	lsrs	r4, r3, #3
 8003196:	e5ee      	b.n	8002d76 <__aeabi_dsub+0x222>
 8003198:	4663      	mov	r3, ip
 800319a:	9c02      	ldr	r4, [sp, #8]
 800319c:	9303      	str	r3, [sp, #12]
 800319e:	e6c7      	b.n	8002f30 <__aeabi_dsub+0x3dc>
 80031a0:	08c0      	lsrs	r0, r0, #3
 80031a2:	2a00      	cmp	r2, #0
 80031a4:	d100      	bne.n	80031a8 <__aeabi_dsub+0x654>
 80031a6:	e6aa      	b.n	8002efe <__aeabi_dsub+0x3aa>
 80031a8:	0762      	lsls	r2, r4, #29
 80031aa:	4310      	orrs	r0, r2
 80031ac:	2280      	movs	r2, #128	@ 0x80
 80031ae:	08e4      	lsrs	r4, r4, #3
 80031b0:	0312      	lsls	r2, r2, #12
 80031b2:	4214      	tst	r4, r2
 80031b4:	d0d7      	beq.n	8003166 <__aeabi_dsub+0x612>
 80031b6:	9f02      	ldr	r7, [sp, #8]
 80031b8:	08fd      	lsrs	r5, r7, #3
 80031ba:	4215      	tst	r5, r2
 80031bc:	d1d3      	bne.n	8003166 <__aeabi_dsub+0x612>
 80031be:	4663      	mov	r3, ip
 80031c0:	2601      	movs	r6, #1
 80031c2:	08d8      	lsrs	r0, r3, #3
 80031c4:	077b      	lsls	r3, r7, #29
 80031c6:	002c      	movs	r4, r5
 80031c8:	4318      	orrs	r0, r3
 80031ca:	400e      	ands	r6, r1
 80031cc:	e7cb      	b.n	8003166 <__aeabi_dsub+0x612>
 80031ce:	000a      	movs	r2, r1
 80031d0:	0027      	movs	r7, r4
 80031d2:	3a20      	subs	r2, #32
 80031d4:	40d7      	lsrs	r7, r2
 80031d6:	2920      	cmp	r1, #32
 80031d8:	d005      	beq.n	80031e6 <__aeabi_dsub+0x692>
 80031da:	2240      	movs	r2, #64	@ 0x40
 80031dc:	1a52      	subs	r2, r2, r1
 80031de:	4094      	lsls	r4, r2
 80031e0:	0025      	movs	r5, r4
 80031e2:	4305      	orrs	r5, r0
 80031e4:	9503      	str	r5, [sp, #12]
 80031e6:	9d03      	ldr	r5, [sp, #12]
 80031e8:	1e6a      	subs	r2, r5, #1
 80031ea:	4195      	sbcs	r5, r2
 80031ec:	432f      	orrs	r7, r5
 80031ee:	e610      	b.n	8002e12 <__aeabi_dsub+0x2be>
 80031f0:	0014      	movs	r4, r2
 80031f2:	2500      	movs	r5, #0
 80031f4:	2200      	movs	r2, #0
 80031f6:	e556      	b.n	8002ca6 <__aeabi_dsub+0x152>
 80031f8:	9b02      	ldr	r3, [sp, #8]
 80031fa:	4460      	add	r0, ip
 80031fc:	4699      	mov	r9, r3
 80031fe:	4560      	cmp	r0, ip
 8003200:	4192      	sbcs	r2, r2
 8003202:	444c      	add	r4, r9
 8003204:	4252      	negs	r2, r2
 8003206:	0005      	movs	r5, r0
 8003208:	18a4      	adds	r4, r4, r2
 800320a:	e74c      	b.n	80030a6 <__aeabi_dsub+0x552>
 800320c:	001a      	movs	r2, r3
 800320e:	001c      	movs	r4, r3
 8003210:	432a      	orrs	r2, r5
 8003212:	d000      	beq.n	8003216 <__aeabi_dsub+0x6c2>
 8003214:	e6b3      	b.n	8002f7e <__aeabi_dsub+0x42a>
 8003216:	e6c9      	b.n	8002fac <__aeabi_dsub+0x458>
 8003218:	2480      	movs	r4, #128	@ 0x80
 800321a:	2600      	movs	r6, #0
 800321c:	0324      	lsls	r4, r4, #12
 800321e:	e5ae      	b.n	8002d7e <__aeabi_dsub+0x22a>
 8003220:	2120      	movs	r1, #32
 8003222:	2500      	movs	r5, #0
 8003224:	1a09      	subs	r1, r1, r0
 8003226:	e517      	b.n	8002c58 <__aeabi_dsub+0x104>
 8003228:	2200      	movs	r2, #0
 800322a:	2500      	movs	r5, #0
 800322c:	4c0b      	ldr	r4, [pc, #44]	@ (800325c <__aeabi_dsub+0x708>)
 800322e:	e53a      	b.n	8002ca6 <__aeabi_dsub+0x152>
 8003230:	2d00      	cmp	r5, #0
 8003232:	d100      	bne.n	8003236 <__aeabi_dsub+0x6e2>
 8003234:	e5f6      	b.n	8002e24 <__aeabi_dsub+0x2d0>
 8003236:	464b      	mov	r3, r9
 8003238:	1bda      	subs	r2, r3, r7
 800323a:	4692      	mov	sl, r2
 800323c:	2f00      	cmp	r7, #0
 800323e:	d100      	bne.n	8003242 <__aeabi_dsub+0x6ee>
 8003240:	e66f      	b.n	8002f22 <__aeabi_dsub+0x3ce>
 8003242:	2a38      	cmp	r2, #56	@ 0x38
 8003244:	dc05      	bgt.n	8003252 <__aeabi_dsub+0x6fe>
 8003246:	2680      	movs	r6, #128	@ 0x80
 8003248:	0436      	lsls	r6, r6, #16
 800324a:	4334      	orrs	r4, r6
 800324c:	4688      	mov	r8, r1
 800324e:	000e      	movs	r6, r1
 8003250:	e6d1      	b.n	8002ff6 <__aeabi_dsub+0x4a2>
 8003252:	4688      	mov	r8, r1
 8003254:	000e      	movs	r6, r1
 8003256:	2501      	movs	r5, #1
 8003258:	e6de      	b.n	8003018 <__aeabi_dsub+0x4c4>
 800325a:	46c0      	nop			@ (mov r8, r8)
 800325c:	000007ff 	.word	0x000007ff
 8003260:	ff7fffff 	.word	0xff7fffff
 8003264:	000007fe 	.word	0x000007fe
 8003268:	2d00      	cmp	r5, #0
 800326a:	d100      	bne.n	800326e <__aeabi_dsub+0x71a>
 800326c:	e668      	b.n	8002f40 <__aeabi_dsub+0x3ec>
 800326e:	464b      	mov	r3, r9
 8003270:	1bd9      	subs	r1, r3, r7
 8003272:	2f00      	cmp	r7, #0
 8003274:	d101      	bne.n	800327a <__aeabi_dsub+0x726>
 8003276:	468a      	mov	sl, r1
 8003278:	e5a7      	b.n	8002dca <__aeabi_dsub+0x276>
 800327a:	2701      	movs	r7, #1
 800327c:	2938      	cmp	r1, #56	@ 0x38
 800327e:	dd00      	ble.n	8003282 <__aeabi_dsub+0x72e>
 8003280:	e5c7      	b.n	8002e12 <__aeabi_dsub+0x2be>
 8003282:	2280      	movs	r2, #128	@ 0x80
 8003284:	0412      	lsls	r2, r2, #16
 8003286:	4314      	orrs	r4, r2
 8003288:	e5af      	b.n	8002dea <__aeabi_dsub+0x296>
 800328a:	46c0      	nop			@ (mov r8, r8)

0800328c <__aeabi_dcmpun>:
 800328c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800328e:	46c6      	mov	lr, r8
 8003290:	031e      	lsls	r6, r3, #12
 8003292:	0b36      	lsrs	r6, r6, #12
 8003294:	46b0      	mov	r8, r6
 8003296:	4e0d      	ldr	r6, [pc, #52]	@ (80032cc <__aeabi_dcmpun+0x40>)
 8003298:	030c      	lsls	r4, r1, #12
 800329a:	004d      	lsls	r5, r1, #1
 800329c:	005f      	lsls	r7, r3, #1
 800329e:	b500      	push	{lr}
 80032a0:	0b24      	lsrs	r4, r4, #12
 80032a2:	0d6d      	lsrs	r5, r5, #21
 80032a4:	0d7f      	lsrs	r7, r7, #21
 80032a6:	42b5      	cmp	r5, r6
 80032a8:	d00b      	beq.n	80032c2 <__aeabi_dcmpun+0x36>
 80032aa:	4908      	ldr	r1, [pc, #32]	@ (80032cc <__aeabi_dcmpun+0x40>)
 80032ac:	2000      	movs	r0, #0
 80032ae:	428f      	cmp	r7, r1
 80032b0:	d104      	bne.n	80032bc <__aeabi_dcmpun+0x30>
 80032b2:	4646      	mov	r6, r8
 80032b4:	4316      	orrs	r6, r2
 80032b6:	0030      	movs	r0, r6
 80032b8:	1e43      	subs	r3, r0, #1
 80032ba:	4198      	sbcs	r0, r3
 80032bc:	bc80      	pop	{r7}
 80032be:	46b8      	mov	r8, r7
 80032c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032c2:	4304      	orrs	r4, r0
 80032c4:	2001      	movs	r0, #1
 80032c6:	2c00      	cmp	r4, #0
 80032c8:	d1f8      	bne.n	80032bc <__aeabi_dcmpun+0x30>
 80032ca:	e7ee      	b.n	80032aa <__aeabi_dcmpun+0x1e>
 80032cc:	000007ff 	.word	0x000007ff

080032d0 <__aeabi_d2iz>:
 80032d0:	000b      	movs	r3, r1
 80032d2:	0002      	movs	r2, r0
 80032d4:	b570      	push	{r4, r5, r6, lr}
 80032d6:	4d16      	ldr	r5, [pc, #88]	@ (8003330 <__aeabi_d2iz+0x60>)
 80032d8:	030c      	lsls	r4, r1, #12
 80032da:	b082      	sub	sp, #8
 80032dc:	0049      	lsls	r1, r1, #1
 80032de:	2000      	movs	r0, #0
 80032e0:	9200      	str	r2, [sp, #0]
 80032e2:	9301      	str	r3, [sp, #4]
 80032e4:	0b24      	lsrs	r4, r4, #12
 80032e6:	0d49      	lsrs	r1, r1, #21
 80032e8:	0fde      	lsrs	r6, r3, #31
 80032ea:	42a9      	cmp	r1, r5
 80032ec:	dd04      	ble.n	80032f8 <__aeabi_d2iz+0x28>
 80032ee:	4811      	ldr	r0, [pc, #68]	@ (8003334 <__aeabi_d2iz+0x64>)
 80032f0:	4281      	cmp	r1, r0
 80032f2:	dd03      	ble.n	80032fc <__aeabi_d2iz+0x2c>
 80032f4:	4b10      	ldr	r3, [pc, #64]	@ (8003338 <__aeabi_d2iz+0x68>)
 80032f6:	18f0      	adds	r0, r6, r3
 80032f8:	b002      	add	sp, #8
 80032fa:	bd70      	pop	{r4, r5, r6, pc}
 80032fc:	2080      	movs	r0, #128	@ 0x80
 80032fe:	0340      	lsls	r0, r0, #13
 8003300:	4320      	orrs	r0, r4
 8003302:	4c0e      	ldr	r4, [pc, #56]	@ (800333c <__aeabi_d2iz+0x6c>)
 8003304:	1a64      	subs	r4, r4, r1
 8003306:	2c1f      	cmp	r4, #31
 8003308:	dd08      	ble.n	800331c <__aeabi_d2iz+0x4c>
 800330a:	4b0d      	ldr	r3, [pc, #52]	@ (8003340 <__aeabi_d2iz+0x70>)
 800330c:	1a5b      	subs	r3, r3, r1
 800330e:	40d8      	lsrs	r0, r3
 8003310:	0003      	movs	r3, r0
 8003312:	4258      	negs	r0, r3
 8003314:	2e00      	cmp	r6, #0
 8003316:	d1ef      	bne.n	80032f8 <__aeabi_d2iz+0x28>
 8003318:	0018      	movs	r0, r3
 800331a:	e7ed      	b.n	80032f8 <__aeabi_d2iz+0x28>
 800331c:	4b09      	ldr	r3, [pc, #36]	@ (8003344 <__aeabi_d2iz+0x74>)
 800331e:	9a00      	ldr	r2, [sp, #0]
 8003320:	469c      	mov	ip, r3
 8003322:	0003      	movs	r3, r0
 8003324:	4461      	add	r1, ip
 8003326:	408b      	lsls	r3, r1
 8003328:	40e2      	lsrs	r2, r4
 800332a:	4313      	orrs	r3, r2
 800332c:	e7f1      	b.n	8003312 <__aeabi_d2iz+0x42>
 800332e:	46c0      	nop			@ (mov r8, r8)
 8003330:	000003fe 	.word	0x000003fe
 8003334:	0000041d 	.word	0x0000041d
 8003338:	7fffffff 	.word	0x7fffffff
 800333c:	00000433 	.word	0x00000433
 8003340:	00000413 	.word	0x00000413
 8003344:	fffffbed 	.word	0xfffffbed

08003348 <__aeabi_i2d>:
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	2800      	cmp	r0, #0
 800334c:	d016      	beq.n	800337c <__aeabi_i2d+0x34>
 800334e:	17c3      	asrs	r3, r0, #31
 8003350:	18c5      	adds	r5, r0, r3
 8003352:	405d      	eors	r5, r3
 8003354:	0fc4      	lsrs	r4, r0, #31
 8003356:	0028      	movs	r0, r5
 8003358:	f7fd f908 	bl	800056c <__clzsi2>
 800335c:	4b10      	ldr	r3, [pc, #64]	@ (80033a0 <__aeabi_i2d+0x58>)
 800335e:	1a1b      	subs	r3, r3, r0
 8003360:	055b      	lsls	r3, r3, #21
 8003362:	0d5b      	lsrs	r3, r3, #21
 8003364:	280a      	cmp	r0, #10
 8003366:	dc14      	bgt.n	8003392 <__aeabi_i2d+0x4a>
 8003368:	0002      	movs	r2, r0
 800336a:	002e      	movs	r6, r5
 800336c:	3215      	adds	r2, #21
 800336e:	4096      	lsls	r6, r2
 8003370:	220b      	movs	r2, #11
 8003372:	1a12      	subs	r2, r2, r0
 8003374:	40d5      	lsrs	r5, r2
 8003376:	032d      	lsls	r5, r5, #12
 8003378:	0b2d      	lsrs	r5, r5, #12
 800337a:	e003      	b.n	8003384 <__aeabi_i2d+0x3c>
 800337c:	2400      	movs	r4, #0
 800337e:	2300      	movs	r3, #0
 8003380:	2500      	movs	r5, #0
 8003382:	2600      	movs	r6, #0
 8003384:	051b      	lsls	r3, r3, #20
 8003386:	432b      	orrs	r3, r5
 8003388:	07e4      	lsls	r4, r4, #31
 800338a:	4323      	orrs	r3, r4
 800338c:	0030      	movs	r0, r6
 800338e:	0019      	movs	r1, r3
 8003390:	bd70      	pop	{r4, r5, r6, pc}
 8003392:	380b      	subs	r0, #11
 8003394:	4085      	lsls	r5, r0
 8003396:	032d      	lsls	r5, r5, #12
 8003398:	2600      	movs	r6, #0
 800339a:	0b2d      	lsrs	r5, r5, #12
 800339c:	e7f2      	b.n	8003384 <__aeabi_i2d+0x3c>
 800339e:	46c0      	nop			@ (mov r8, r8)
 80033a0:	0000041e 	.word	0x0000041e

080033a4 <__aeabi_ui2d>:
 80033a4:	b510      	push	{r4, lr}
 80033a6:	1e04      	subs	r4, r0, #0
 80033a8:	d010      	beq.n	80033cc <__aeabi_ui2d+0x28>
 80033aa:	f7fd f8df 	bl	800056c <__clzsi2>
 80033ae:	4b0e      	ldr	r3, [pc, #56]	@ (80033e8 <__aeabi_ui2d+0x44>)
 80033b0:	1a1b      	subs	r3, r3, r0
 80033b2:	055b      	lsls	r3, r3, #21
 80033b4:	0d5b      	lsrs	r3, r3, #21
 80033b6:	280a      	cmp	r0, #10
 80033b8:	dc0f      	bgt.n	80033da <__aeabi_ui2d+0x36>
 80033ba:	220b      	movs	r2, #11
 80033bc:	0021      	movs	r1, r4
 80033be:	1a12      	subs	r2, r2, r0
 80033c0:	40d1      	lsrs	r1, r2
 80033c2:	3015      	adds	r0, #21
 80033c4:	030a      	lsls	r2, r1, #12
 80033c6:	4084      	lsls	r4, r0
 80033c8:	0b12      	lsrs	r2, r2, #12
 80033ca:	e001      	b.n	80033d0 <__aeabi_ui2d+0x2c>
 80033cc:	2300      	movs	r3, #0
 80033ce:	2200      	movs	r2, #0
 80033d0:	051b      	lsls	r3, r3, #20
 80033d2:	4313      	orrs	r3, r2
 80033d4:	0020      	movs	r0, r4
 80033d6:	0019      	movs	r1, r3
 80033d8:	bd10      	pop	{r4, pc}
 80033da:	0022      	movs	r2, r4
 80033dc:	380b      	subs	r0, #11
 80033de:	4082      	lsls	r2, r0
 80033e0:	0312      	lsls	r2, r2, #12
 80033e2:	2400      	movs	r4, #0
 80033e4:	0b12      	lsrs	r2, r2, #12
 80033e6:	e7f3      	b.n	80033d0 <__aeabi_ui2d+0x2c>
 80033e8:	0000041e 	.word	0x0000041e

080033ec <__aeabi_f2d>:
 80033ec:	b570      	push	{r4, r5, r6, lr}
 80033ee:	0242      	lsls	r2, r0, #9
 80033f0:	0043      	lsls	r3, r0, #1
 80033f2:	0fc4      	lsrs	r4, r0, #31
 80033f4:	20fe      	movs	r0, #254	@ 0xfe
 80033f6:	0e1b      	lsrs	r3, r3, #24
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	0a55      	lsrs	r5, r2, #9
 80033fc:	4208      	tst	r0, r1
 80033fe:	d00c      	beq.n	800341a <__aeabi_f2d+0x2e>
 8003400:	21e0      	movs	r1, #224	@ 0xe0
 8003402:	0089      	lsls	r1, r1, #2
 8003404:	468c      	mov	ip, r1
 8003406:	076d      	lsls	r5, r5, #29
 8003408:	0b12      	lsrs	r2, r2, #12
 800340a:	4463      	add	r3, ip
 800340c:	051b      	lsls	r3, r3, #20
 800340e:	4313      	orrs	r3, r2
 8003410:	07e4      	lsls	r4, r4, #31
 8003412:	4323      	orrs	r3, r4
 8003414:	0028      	movs	r0, r5
 8003416:	0019      	movs	r1, r3
 8003418:	bd70      	pop	{r4, r5, r6, pc}
 800341a:	2b00      	cmp	r3, #0
 800341c:	d114      	bne.n	8003448 <__aeabi_f2d+0x5c>
 800341e:	2d00      	cmp	r5, #0
 8003420:	d01b      	beq.n	800345a <__aeabi_f2d+0x6e>
 8003422:	0028      	movs	r0, r5
 8003424:	f7fd f8a2 	bl	800056c <__clzsi2>
 8003428:	280a      	cmp	r0, #10
 800342a:	dc1c      	bgt.n	8003466 <__aeabi_f2d+0x7a>
 800342c:	230b      	movs	r3, #11
 800342e:	002a      	movs	r2, r5
 8003430:	1a1b      	subs	r3, r3, r0
 8003432:	40da      	lsrs	r2, r3
 8003434:	0003      	movs	r3, r0
 8003436:	3315      	adds	r3, #21
 8003438:	409d      	lsls	r5, r3
 800343a:	4b0e      	ldr	r3, [pc, #56]	@ (8003474 <__aeabi_f2d+0x88>)
 800343c:	0312      	lsls	r2, r2, #12
 800343e:	1a1b      	subs	r3, r3, r0
 8003440:	055b      	lsls	r3, r3, #21
 8003442:	0b12      	lsrs	r2, r2, #12
 8003444:	0d5b      	lsrs	r3, r3, #21
 8003446:	e7e1      	b.n	800340c <__aeabi_f2d+0x20>
 8003448:	2d00      	cmp	r5, #0
 800344a:	d009      	beq.n	8003460 <__aeabi_f2d+0x74>
 800344c:	0b13      	lsrs	r3, r2, #12
 800344e:	2280      	movs	r2, #128	@ 0x80
 8003450:	0312      	lsls	r2, r2, #12
 8003452:	431a      	orrs	r2, r3
 8003454:	076d      	lsls	r5, r5, #29
 8003456:	4b08      	ldr	r3, [pc, #32]	@ (8003478 <__aeabi_f2d+0x8c>)
 8003458:	e7d8      	b.n	800340c <__aeabi_f2d+0x20>
 800345a:	2300      	movs	r3, #0
 800345c:	2200      	movs	r2, #0
 800345e:	e7d5      	b.n	800340c <__aeabi_f2d+0x20>
 8003460:	2200      	movs	r2, #0
 8003462:	4b05      	ldr	r3, [pc, #20]	@ (8003478 <__aeabi_f2d+0x8c>)
 8003464:	e7d2      	b.n	800340c <__aeabi_f2d+0x20>
 8003466:	0003      	movs	r3, r0
 8003468:	002a      	movs	r2, r5
 800346a:	3b0b      	subs	r3, #11
 800346c:	409a      	lsls	r2, r3
 800346e:	2500      	movs	r5, #0
 8003470:	e7e3      	b.n	800343a <__aeabi_f2d+0x4e>
 8003472:	46c0      	nop			@ (mov r8, r8)
 8003474:	00000389 	.word	0x00000389
 8003478:	000007ff 	.word	0x000007ff

0800347c <__aeabi_d2f>:
 800347c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800347e:	004b      	lsls	r3, r1, #1
 8003480:	030f      	lsls	r7, r1, #12
 8003482:	0d5b      	lsrs	r3, r3, #21
 8003484:	4c3b      	ldr	r4, [pc, #236]	@ (8003574 <__aeabi_d2f+0xf8>)
 8003486:	0f45      	lsrs	r5, r0, #29
 8003488:	b083      	sub	sp, #12
 800348a:	0a7f      	lsrs	r7, r7, #9
 800348c:	1c5e      	adds	r6, r3, #1
 800348e:	432f      	orrs	r7, r5
 8003490:	9000      	str	r0, [sp, #0]
 8003492:	9101      	str	r1, [sp, #4]
 8003494:	0fca      	lsrs	r2, r1, #31
 8003496:	00c5      	lsls	r5, r0, #3
 8003498:	4226      	tst	r6, r4
 800349a:	d00b      	beq.n	80034b4 <__aeabi_d2f+0x38>
 800349c:	4936      	ldr	r1, [pc, #216]	@ (8003578 <__aeabi_d2f+0xfc>)
 800349e:	185c      	adds	r4, r3, r1
 80034a0:	2cfe      	cmp	r4, #254	@ 0xfe
 80034a2:	dd13      	ble.n	80034cc <__aeabi_d2f+0x50>
 80034a4:	20ff      	movs	r0, #255	@ 0xff
 80034a6:	2300      	movs	r3, #0
 80034a8:	05c0      	lsls	r0, r0, #23
 80034aa:	4318      	orrs	r0, r3
 80034ac:	07d2      	lsls	r2, r2, #31
 80034ae:	4310      	orrs	r0, r2
 80034b0:	b003      	add	sp, #12
 80034b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d102      	bne.n	80034be <__aeabi_d2f+0x42>
 80034b8:	2000      	movs	r0, #0
 80034ba:	2300      	movs	r3, #0
 80034bc:	e7f4      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034be:	433d      	orrs	r5, r7
 80034c0:	d0f0      	beq.n	80034a4 <__aeabi_d2f+0x28>
 80034c2:	2380      	movs	r3, #128	@ 0x80
 80034c4:	03db      	lsls	r3, r3, #15
 80034c6:	20ff      	movs	r0, #255	@ 0xff
 80034c8:	433b      	orrs	r3, r7
 80034ca:	e7ed      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034cc:	2c00      	cmp	r4, #0
 80034ce:	dd14      	ble.n	80034fa <__aeabi_d2f+0x7e>
 80034d0:	9b00      	ldr	r3, [sp, #0]
 80034d2:	00ff      	lsls	r7, r7, #3
 80034d4:	019b      	lsls	r3, r3, #6
 80034d6:	1e58      	subs	r0, r3, #1
 80034d8:	4183      	sbcs	r3, r0
 80034da:	0f69      	lsrs	r1, r5, #29
 80034dc:	433b      	orrs	r3, r7
 80034de:	430b      	orrs	r3, r1
 80034e0:	0759      	lsls	r1, r3, #29
 80034e2:	d041      	beq.n	8003568 <__aeabi_d2f+0xec>
 80034e4:	210f      	movs	r1, #15
 80034e6:	4019      	ands	r1, r3
 80034e8:	2904      	cmp	r1, #4
 80034ea:	d028      	beq.n	800353e <__aeabi_d2f+0xc2>
 80034ec:	3304      	adds	r3, #4
 80034ee:	0159      	lsls	r1, r3, #5
 80034f0:	d525      	bpl.n	800353e <__aeabi_d2f+0xc2>
 80034f2:	3401      	adds	r4, #1
 80034f4:	2300      	movs	r3, #0
 80034f6:	b2e0      	uxtb	r0, r4
 80034f8:	e7d6      	b.n	80034a8 <__aeabi_d2f+0x2c>
 80034fa:	0021      	movs	r1, r4
 80034fc:	3117      	adds	r1, #23
 80034fe:	dbdb      	blt.n	80034b8 <__aeabi_d2f+0x3c>
 8003500:	2180      	movs	r1, #128	@ 0x80
 8003502:	201e      	movs	r0, #30
 8003504:	0409      	lsls	r1, r1, #16
 8003506:	4339      	orrs	r1, r7
 8003508:	1b00      	subs	r0, r0, r4
 800350a:	281f      	cmp	r0, #31
 800350c:	dd1b      	ble.n	8003546 <__aeabi_d2f+0xca>
 800350e:	2602      	movs	r6, #2
 8003510:	4276      	negs	r6, r6
 8003512:	1b34      	subs	r4, r6, r4
 8003514:	000e      	movs	r6, r1
 8003516:	40e6      	lsrs	r6, r4
 8003518:	0034      	movs	r4, r6
 800351a:	2820      	cmp	r0, #32
 800351c:	d004      	beq.n	8003528 <__aeabi_d2f+0xac>
 800351e:	4817      	ldr	r0, [pc, #92]	@ (800357c <__aeabi_d2f+0x100>)
 8003520:	4684      	mov	ip, r0
 8003522:	4463      	add	r3, ip
 8003524:	4099      	lsls	r1, r3
 8003526:	430d      	orrs	r5, r1
 8003528:	002b      	movs	r3, r5
 800352a:	1e59      	subs	r1, r3, #1
 800352c:	418b      	sbcs	r3, r1
 800352e:	4323      	orrs	r3, r4
 8003530:	0759      	lsls	r1, r3, #29
 8003532:	d015      	beq.n	8003560 <__aeabi_d2f+0xe4>
 8003534:	210f      	movs	r1, #15
 8003536:	2400      	movs	r4, #0
 8003538:	4019      	ands	r1, r3
 800353a:	2904      	cmp	r1, #4
 800353c:	d117      	bne.n	800356e <__aeabi_d2f+0xf2>
 800353e:	019b      	lsls	r3, r3, #6
 8003540:	0a5b      	lsrs	r3, r3, #9
 8003542:	b2e0      	uxtb	r0, r4
 8003544:	e7b0      	b.n	80034a8 <__aeabi_d2f+0x2c>
 8003546:	4c0e      	ldr	r4, [pc, #56]	@ (8003580 <__aeabi_d2f+0x104>)
 8003548:	191c      	adds	r4, r3, r4
 800354a:	002b      	movs	r3, r5
 800354c:	40a5      	lsls	r5, r4
 800354e:	40c3      	lsrs	r3, r0
 8003550:	40a1      	lsls	r1, r4
 8003552:	1e68      	subs	r0, r5, #1
 8003554:	4185      	sbcs	r5, r0
 8003556:	4329      	orrs	r1, r5
 8003558:	430b      	orrs	r3, r1
 800355a:	2400      	movs	r4, #0
 800355c:	0759      	lsls	r1, r3, #29
 800355e:	d1c1      	bne.n	80034e4 <__aeabi_d2f+0x68>
 8003560:	019b      	lsls	r3, r3, #6
 8003562:	2000      	movs	r0, #0
 8003564:	0a5b      	lsrs	r3, r3, #9
 8003566:	e79f      	b.n	80034a8 <__aeabi_d2f+0x2c>
 8003568:	08db      	lsrs	r3, r3, #3
 800356a:	b2e0      	uxtb	r0, r4
 800356c:	e79c      	b.n	80034a8 <__aeabi_d2f+0x2c>
 800356e:	3304      	adds	r3, #4
 8003570:	e7e5      	b.n	800353e <__aeabi_d2f+0xc2>
 8003572:	46c0      	nop			@ (mov r8, r8)
 8003574:	000007fe 	.word	0x000007fe
 8003578:	fffffc80 	.word	0xfffffc80
 800357c:	fffffca2 	.word	0xfffffca2
 8003580:	fffffc82 	.word	0xfffffc82

08003584 <__clzdi2>:
 8003584:	b510      	push	{r4, lr}
 8003586:	2900      	cmp	r1, #0
 8003588:	d103      	bne.n	8003592 <__clzdi2+0xe>
 800358a:	f7fc ffef 	bl	800056c <__clzsi2>
 800358e:	3020      	adds	r0, #32
 8003590:	e002      	b.n	8003598 <__clzdi2+0x14>
 8003592:	0008      	movs	r0, r1
 8003594:	f7fc ffea 	bl	800056c <__clzsi2>
 8003598:	bd10      	pop	{r4, pc}
 800359a:	46c0      	nop			@ (mov r8, r8)

0800359c <batteryInit>:
static ADC_HandleTypeDef* ADC_Handler = NULL;
float Charge = 0;
float Solar = 0;
uint16_t Vref = 3;

void batteryInit(ADC_HandleTypeDef* ADC_HANDLER){
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	6078      	str	r0, [r7, #4]
  ADC_Handler = ADC_HANDLER;
 80035a4:	4b03      	ldr	r3, [pc, #12]	@ (80035b4 <batteryInit+0x18>)
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	601a      	str	r2, [r3, #0]
}
 80035aa:	46c0      	nop			@ (mov r8, r8)
 80035ac:	46bd      	mov	sp, r7
 80035ae:	b002      	add	sp, #8
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	46c0      	nop			@ (mov r8, r8)
 80035b4:	200004bc 	.word	0x200004bc

080035b8 <checkCharges>:

void checkCharges(){
 80035b8:	b5b0      	push	{r4, r5, r7, lr}
 80035ba:	af00      	add	r7, sp, #0
  HAL_ADC_Start(ADC_Handler);
 80035bc:	4b41      	ldr	r3, [pc, #260]	@ (80036c4 <checkCharges+0x10c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	0018      	movs	r0, r3
 80035c2:	f005 fef3 	bl	80093ac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 80035c6:	4b3f      	ldr	r3, [pc, #252]	@ (80036c4 <checkCharges+0x10c>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	2101      	movs	r1, #1
 80035cc:	0018      	movs	r0, r3
 80035ce:	f005 ff41 	bl	8009454 <HAL_ADC_PollForConversion>
  Charge = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 80035d2:	4b3c      	ldr	r3, [pc, #240]	@ (80036c4 <checkCharges+0x10c>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	0018      	movs	r0, r3
 80035d8:	f005 ffd8 	bl	800958c <HAL_ADC_GetValue>
 80035dc:	0003      	movs	r3, r0
 80035de:	0018      	movs	r0, r3
 80035e0:	f7fe f806 	bl	80015f0 <__aeabi_ui2f>
 80035e4:	1c03      	adds	r3, r0, #0
 80035e6:	1c18      	adds	r0, r3, #0
 80035e8:	f7ff ff00 	bl	80033ec <__aeabi_f2d>
 80035ec:	2200      	movs	r2, #0
 80035ee:	4b36      	ldr	r3, [pc, #216]	@ (80036c8 <checkCharges+0x110>)
 80035f0:	f7fe fba4 	bl	8001d3c <__aeabi_ddiv>
 80035f4:	0002      	movs	r2, r0
 80035f6:	000b      	movs	r3, r1
 80035f8:	0014      	movs	r4, r2
 80035fa:	001d      	movs	r5, r3
 80035fc:	4b33      	ldr	r3, [pc, #204]	@ (80036cc <checkCharges+0x114>)
 80035fe:	881b      	ldrh	r3, [r3, #0]
 8003600:	0018      	movs	r0, r3
 8003602:	f7ff fea1 	bl	8003348 <__aeabi_i2d>
 8003606:	0002      	movs	r2, r0
 8003608:	000b      	movs	r3, r1
 800360a:	0020      	movs	r0, r4
 800360c:	0029      	movs	r1, r5
 800360e:	f7fe ffd9 	bl	80025c4 <__aeabi_dmul>
 8003612:	0002      	movs	r2, r0
 8003614:	000b      	movs	r3, r1
 8003616:	0010      	movs	r0, r2
 8003618:	0019      	movs	r1, r3
 800361a:	0002      	movs	r2, r0
 800361c:	000b      	movs	r3, r1
 800361e:	f7fe f829 	bl	8001674 <__aeabi_dadd>
 8003622:	0002      	movs	r2, r0
 8003624:	000b      	movs	r3, r1
 8003626:	0010      	movs	r0, r2
 8003628:	0019      	movs	r1, r3
 800362a:	f7ff ff27 	bl	800347c <__aeabi_d2f>
 800362e:	1c02      	adds	r2, r0, #0
 8003630:	4b27      	ldr	r3, [pc, #156]	@ (80036d0 <checkCharges+0x118>)
 8003632:	601a      	str	r2, [r3, #0]
  HAL_ADC_Start(ADC_Handler);
 8003634:	4b23      	ldr	r3, [pc, #140]	@ (80036c4 <checkCharges+0x10c>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	0018      	movs	r0, r3
 800363a:	f005 feb7 	bl	80093ac <HAL_ADC_Start>
  HAL_ADC_PollForConversion(ADC_Handler, 1);
 800363e:	4b21      	ldr	r3, [pc, #132]	@ (80036c4 <checkCharges+0x10c>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	2101      	movs	r1, #1
 8003644:	0018      	movs	r0, r3
 8003646:	f005 ff05 	bl	8009454 <HAL_ADC_PollForConversion>
  Solar = ((float)HAL_ADC_GetValue(ADC_Handler)/4095.0)*Vref*2;
 800364a:	4b1e      	ldr	r3, [pc, #120]	@ (80036c4 <checkCharges+0x10c>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	0018      	movs	r0, r3
 8003650:	f005 ff9c 	bl	800958c <HAL_ADC_GetValue>
 8003654:	0003      	movs	r3, r0
 8003656:	0018      	movs	r0, r3
 8003658:	f7fd ffca 	bl	80015f0 <__aeabi_ui2f>
 800365c:	1c03      	adds	r3, r0, #0
 800365e:	1c18      	adds	r0, r3, #0
 8003660:	f7ff fec4 	bl	80033ec <__aeabi_f2d>
 8003664:	2200      	movs	r2, #0
 8003666:	4b18      	ldr	r3, [pc, #96]	@ (80036c8 <checkCharges+0x110>)
 8003668:	f7fe fb68 	bl	8001d3c <__aeabi_ddiv>
 800366c:	0002      	movs	r2, r0
 800366e:	000b      	movs	r3, r1
 8003670:	0014      	movs	r4, r2
 8003672:	001d      	movs	r5, r3
 8003674:	4b15      	ldr	r3, [pc, #84]	@ (80036cc <checkCharges+0x114>)
 8003676:	881b      	ldrh	r3, [r3, #0]
 8003678:	0018      	movs	r0, r3
 800367a:	f7ff fe65 	bl	8003348 <__aeabi_i2d>
 800367e:	0002      	movs	r2, r0
 8003680:	000b      	movs	r3, r1
 8003682:	0020      	movs	r0, r4
 8003684:	0029      	movs	r1, r5
 8003686:	f7fe ff9d 	bl	80025c4 <__aeabi_dmul>
 800368a:	0002      	movs	r2, r0
 800368c:	000b      	movs	r3, r1
 800368e:	0010      	movs	r0, r2
 8003690:	0019      	movs	r1, r3
 8003692:	0002      	movs	r2, r0
 8003694:	000b      	movs	r3, r1
 8003696:	f7fd ffed 	bl	8001674 <__aeabi_dadd>
 800369a:	0002      	movs	r2, r0
 800369c:	000b      	movs	r3, r1
 800369e:	0010      	movs	r0, r2
 80036a0:	0019      	movs	r1, r3
 80036a2:	f7ff feeb 	bl	800347c <__aeabi_d2f>
 80036a6:	1c02      	adds	r2, r0, #0
 80036a8:	4b0a      	ldr	r3, [pc, #40]	@ (80036d4 <checkCharges+0x11c>)
 80036aa:	601a      	str	r2, [r3, #0]
  setCharges(Charge, Solar);
 80036ac:	4b08      	ldr	r3, [pc, #32]	@ (80036d0 <checkCharges+0x118>)
 80036ae:	681a      	ldr	r2, [r3, #0]
 80036b0:	4b08      	ldr	r3, [pc, #32]	@ (80036d4 <checkCharges+0x11c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	1c19      	adds	r1, r3, #0
 80036b6:	1c10      	adds	r0, r2, #0
 80036b8:	f000 f80e 	bl	80036d8 <setCharges>
}
 80036bc:	46c0      	nop			@ (mov r8, r8)
 80036be:	46bd      	mov	sp, r7
 80036c0:	bdb0      	pop	{r4, r5, r7, pc}
 80036c2:	46c0      	nop			@ (mov r8, r8)
 80036c4:	200004bc 	.word	0x200004bc
 80036c8:	40affe00 	.word	0x40affe00
 80036cc:	20000000 	.word	0x20000000
 80036d0:	200004c0 	.word	0x200004c0
 80036d4:	200004c4 	.word	0x200004c4

080036d8 <setCharges>:

typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;
void setCharges(float battery, float solar){
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  batteryCharge = battery;
 80036e2:	4b05      	ldr	r3, [pc, #20]	@ (80036f8 <setCharges+0x20>)
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	601a      	str	r2, [r3, #0]
  solarCharge = solar;
 80036e8:	4b04      	ldr	r3, [pc, #16]	@ (80036fc <setCharges+0x24>)
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	601a      	str	r2, [r3, #0]
}
 80036ee:	46c0      	nop			@ (mov r8, r8)
 80036f0:	46bd      	mov	sp, r7
 80036f2:	b002      	add	sp, #8
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	46c0      	nop			@ (mov r8, r8)
 80036f8:	200005dc 	.word	0x200005dc
 80036fc:	200005e0 	.word	0x200005e0

08003700 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 8003700:	b580      	push	{r7, lr}
 8003702:	b084      	sub	sp, #16
 8003704:	af00      	add	r7, sp, #0
 8003706:	60f8      	str	r0, [r7, #12]
 8003708:	60b9      	str	r1, [r7, #8]
 800370a:	1dbb      	adds	r3, r7, #6
 800370c:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 800370e:	4b07      	ldr	r3, [pc, #28]	@ (800372c <setMeasurement+0x2c>)
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 8003714:	4b06      	ldr	r3, [pc, #24]	@ (8003730 <setMeasurement+0x30>)
 8003716:	68ba      	ldr	r2, [r7, #8]
 8003718:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 800371a:	4b06      	ldr	r3, [pc, #24]	@ (8003734 <setMeasurement+0x34>)
 800371c:	1dba      	adds	r2, r7, #6
 800371e:	8812      	ldrh	r2, [r2, #0]
 8003720:	801a      	strh	r2, [r3, #0]
}
 8003722:	46c0      	nop			@ (mov r8, r8)
 8003724:	46bd      	mov	sp, r7
 8003726:	b004      	add	sp, #16
 8003728:	bd80      	pop	{r7, pc}
 800372a:	46c0      	nop			@ (mov r8, r8)
 800372c:	200005d4 	.word	0x200005d4
 8003730:	200005d8 	.word	0x200005d8
 8003734:	200005e4 	.word	0x200005e4

08003738 <ESP_Init>:
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003740:	4b04      	ldr	r3, [pc, #16]	@ (8003754 <ESP_Init+0x1c>)
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 8003746:	4b04      	ldr	r3, [pc, #16]	@ (8003758 <ESP_Init+0x20>)
 8003748:	2202      	movs	r2, #2
 800374a:	701a      	strb	r2, [r3, #0]
}
 800374c:	46c0      	nop			@ (mov r8, r8)
 800374e:	46bd      	mov	sp, r7
 8003750:	b002      	add	sp, #8
 8003752:	bd80      	pop	{r7, pc}
 8003754:	200004c8 	.word	0x200004c8
 8003758:	2000010a 	.word	0x2000010a

0800375c <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 800375c:	b5b0      	push	{r4, r5, r7, lr}
 800375e:	b084      	sub	sp, #16
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
 8003764:	000a      	movs	r2, r1
 8003766:	1cbb      	adds	r3, r7, #2
 8003768:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 800376a:	4b0e      	ldr	r3, [pc, #56]	@ (80037a4 <ESP_Send+0x48>)
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	250f      	movs	r5, #15
 8003770:	197c      	adds	r4, r7, r5
 8003772:	1cbb      	adds	r3, r7, #2
 8003774:	881a      	ldrh	r2, [r3, #0]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	0019      	movs	r1, r3
 800377a:	f00c fbcd 	bl	800ff18 <HAL_UART_Transmit_DMA>
 800377e:	0003      	movs	r3, r0
 8003780:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003782:	197b      	adds	r3, r7, r5
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d007      	beq.n	800379a <ESP_Send+0x3e>
    Debug("Error in HAL_UART_Transmit_DMA");
 800378a:	4a07      	ldr	r2, [pc, #28]	@ (80037a8 <ESP_Send+0x4c>)
 800378c:	4b07      	ldr	r3, [pc, #28]	@ (80037ac <ESP_Send+0x50>)
 800378e:	0019      	movs	r1, r3
 8003790:	2003      	movs	r0, #3
 8003792:	f005 f871 	bl	8008878 <CreateLine>
    return false;
 8003796:	2300      	movs	r3, #0
 8003798:	e000      	b.n	800379c <ESP_Send+0x40>
  }
  return true;
 800379a:	2301      	movs	r3, #1
}
 800379c:	0018      	movs	r0, r3
 800379e:	46bd      	mov	sp, r7
 80037a0:	b004      	add	sp, #16
 80037a2:	bdb0      	pop	{r4, r5, r7, pc}
 80037a4:	200004c8 	.word	0x200004c8
 80037a8:	0801a950 	.word	0x0801a950
 80037ac:	0801a970 	.word	0x0801a970

080037b0 <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80037b0:	b5b0      	push	{r4, r5, r7, lr}
 80037b2:	b084      	sub	sp, #16
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
 80037b8:	000a      	movs	r2, r1
 80037ba:	1cfb      	adds	r3, r7, #3
 80037bc:	701a      	strb	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 80037be:	4b12      	ldr	r3, [pc, #72]	@ (8003808 <ESP_Receive+0x58>)
 80037c0:	2200      	movs	r2, #0
 80037c2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80037c4:	4b11      	ldr	r3, [pc, #68]	@ (800380c <ESP_Receive+0x5c>)
 80037c6:	6818      	ldr	r0, [r3, #0]
 80037c8:	1cfb      	adds	r3, r7, #3
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	b29a      	uxth	r2, r3
 80037ce:	250f      	movs	r5, #15
 80037d0:	197c      	adds	r4, r7, r5
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	0019      	movs	r1, r3
 80037d6:	f00c fc2f 	bl	8010038 <HAL_UART_Receive_DMA>
 80037da:	0003      	movs	r3, r0
 80037dc:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80037de:	197b      	adds	r3, r7, r5
 80037e0:	781b      	ldrb	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d00a      	beq.n	80037fc <ESP_Receive+0x4c>
    Debug("Error in HAL_UART_Receive_DMA.");
 80037e6:	4a0a      	ldr	r2, [pc, #40]	@ (8003810 <ESP_Receive+0x60>)
 80037e8:	4b0a      	ldr	r3, [pc, #40]	@ (8003814 <ESP_Receive+0x64>)
 80037ea:	0019      	movs	r1, r3
 80037ec:	2003      	movs	r0, #3
 80037ee:	f005 f843 	bl	8008878 <CreateLine>
    RxComplete = true;
 80037f2:	4b05      	ldr	r3, [pc, #20]	@ (8003808 <ESP_Receive+0x58>)
 80037f4:	2201      	movs	r2, #1
 80037f6:	701a      	strb	r2, [r3, #0]
    return false;
 80037f8:	2300      	movs	r3, #0
 80037fa:	e000      	b.n	80037fe <ESP_Receive+0x4e>
  }
  return true;
 80037fc:	2301      	movs	r3, #1
}
 80037fe:	0018      	movs	r0, r3
 8003800:	46bd      	mov	sp, r7
 8003802:	b004      	add	sp, #16
 8003804:	bdb0      	pop	{r4, r5, r7, pc}
 8003806:	46c0      	nop			@ (mov r8, r8)
 8003808:	200004cc 	.word	0x200004cc
 800380c:	200004c8 	.word	0x200004c8
 8003810:	0801a974 	.word	0x0801a974
 8003814:	0801a970 	.word	0x0801a970

08003818 <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003820:	4b08      	ldr	r3, [pc, #32]	@ (8003844 <HAL_UART_RxCpltCallback+0x2c>)
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	687a      	ldr	r2, [r7, #4]
 8003826:	429a      	cmp	r2, r3
 8003828:	d108      	bne.n	800383c <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800382a:	4b07      	ldr	r3, [pc, #28]	@ (8003848 <HAL_UART_RxCpltCallback+0x30>)
 800382c:	2201      	movs	r2, #1
 800382e:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003830:	4a06      	ldr	r2, [pc, #24]	@ (800384c <HAL_UART_RxCpltCallback+0x34>)
 8003832:	4b07      	ldr	r3, [pc, #28]	@ (8003850 <HAL_UART_RxCpltCallback+0x38>)
 8003834:	0019      	movs	r1, r3
 8003836:	2003      	movs	r0, #3
 8003838:	f005 f81e 	bl	8008878 <CreateLine>
  }
}
 800383c:	46c0      	nop			@ (mov r8, r8)
 800383e:	46bd      	mov	sp, r7
 8003840:	b002      	add	sp, #8
 8003842:	bd80      	pop	{r7, pc}
 8003844:	200004c8 	.word	0x200004c8
 8003848:	200004cc 	.word	0x200004cc
 800384c:	0801a994 	.word	0x0801a994
 8003850:	0801a970 	.word	0x0801a970

08003854 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 800385c:	4b05      	ldr	r3, [pc, #20]	@ (8003874 <HAL_UART_ErrorCallback+0x20>)
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	687a      	ldr	r2, [r7, #4]
 8003862:	429a      	cmp	r2, r3
 8003864:	d102      	bne.n	800386c <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 8003866:	4b04      	ldr	r3, [pc, #16]	@ (8003878 <HAL_UART_ErrorCallback+0x24>)
 8003868:	2207      	movs	r2, #7
 800386a:	701a      	strb	r2, [r3, #0]
  }
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b002      	add	sp, #8
 8003872:	bd80      	pop	{r7, pc}
 8003874:	200004c8 	.word	0x200004c8
 8003878:	2000010a 	.word	0x2000010a

0800387c <CreateMessage>:
uint16_t CreateMessage(){
 800387c:	b590      	push	{r4, r7, lr}
 800387e:	b085      	sub	sp, #20
 8003880:	af02      	add	r7, sp, #8
  uint16_t messageLength = 0;
 8003882:	1dbb      	adds	r3, r7, #6
 8003884:	2200      	movs	r2, #0
 8003886:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart1, "\"name\":\"temp\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID1, Temperature);
 8003888:	4b3d      	ldr	r3, [pc, #244]	@ (8003980 <CreateMessage+0x104>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	1c18      	adds	r0, r3, #0
 800388e:	f7ff fdad 	bl	80033ec <__aeabi_f2d>
 8003892:	0002      	movs	r2, r0
 8003894:	000b      	movs	r3, r1
 8003896:	4c3b      	ldr	r4, [pc, #236]	@ (8003984 <CreateMessage+0x108>)
 8003898:	493b      	ldr	r1, [pc, #236]	@ (8003988 <CreateMessage+0x10c>)
 800389a:	483c      	ldr	r0, [pc, #240]	@ (800398c <CreateMessage+0x110>)
 800389c:	9200      	str	r2, [sp, #0]
 800389e:	9301      	str	r3, [sp, #4]
 80038a0:	0022      	movs	r2, r4
 80038a2:	f014 f9c7 	bl	8017c34 <siprintf>
  messageLength += strlen(messagePart1);
 80038a6:	4b39      	ldr	r3, [pc, #228]	@ (800398c <CreateMessage+0x110>)
 80038a8:	0018      	movs	r0, r3
 80038aa:	f7fc fc55 	bl	8000158 <strlen>
 80038ae:	0003      	movs	r3, r0
 80038b0:	b299      	uxth	r1, r3
 80038b2:	1dbb      	adds	r3, r7, #6
 80038b4:	1dba      	adds	r2, r7, #6
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	188a      	adds	r2, r1, r2
 80038ba:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart2, "\"name\":\"humid\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID2, Humidity);
 80038bc:	4b34      	ldr	r3, [pc, #208]	@ (8003990 <CreateMessage+0x114>)
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	1c18      	adds	r0, r3, #0
 80038c2:	f7ff fd93 	bl	80033ec <__aeabi_f2d>
 80038c6:	0002      	movs	r2, r0
 80038c8:	000b      	movs	r3, r1
 80038ca:	4c32      	ldr	r4, [pc, #200]	@ (8003994 <CreateMessage+0x118>)
 80038cc:	4932      	ldr	r1, [pc, #200]	@ (8003998 <CreateMessage+0x11c>)
 80038ce:	4833      	ldr	r0, [pc, #204]	@ (800399c <CreateMessage+0x120>)
 80038d0:	9200      	str	r2, [sp, #0]
 80038d2:	9301      	str	r3, [sp, #4]
 80038d4:	0022      	movs	r2, r4
 80038d6:	f014 f9ad 	bl	8017c34 <siprintf>
  messageLength += strlen(messagePart2);
 80038da:	4b30      	ldr	r3, [pc, #192]	@ (800399c <CreateMessage+0x120>)
 80038dc:	0018      	movs	r0, r3
 80038de:	f7fc fc3b 	bl	8000158 <strlen>
 80038e2:	0003      	movs	r3, r0
 80038e4:	b299      	uxth	r1, r3
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	1dba      	adds	r2, r7, #6
 80038ea:	8812      	ldrh	r2, [r2, #0]
 80038ec:	188a      	adds	r2, r1, r2
 80038ee:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart3, "\"name\":\"Sound\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":77", sensorID3);
 80038f0:	4a2b      	ldr	r2, [pc, #172]	@ (80039a0 <CreateMessage+0x124>)
 80038f2:	492c      	ldr	r1, [pc, #176]	@ (80039a4 <CreateMessage+0x128>)
 80038f4:	4b2c      	ldr	r3, [pc, #176]	@ (80039a8 <CreateMessage+0x12c>)
 80038f6:	0018      	movs	r0, r3
 80038f8:	f014 f99c 	bl	8017c34 <siprintf>
  messageLength += strlen(messagePart3);
 80038fc:	4b2a      	ldr	r3, [pc, #168]	@ (80039a8 <CreateMessage+0x12c>)
 80038fe:	0018      	movs	r0, r3
 8003900:	f7fc fc2a 	bl	8000158 <strlen>
 8003904:	0003      	movs	r3, r0
 8003906:	b299      	uxth	r1, r3
 8003908:	1dbb      	adds	r3, r7, #6
 800390a:	1dba      	adds	r2, r7, #6
 800390c:	8812      	ldrh	r2, [r2, #0]
 800390e:	188a      	adds	r2, r1, r2
 8003910:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart4, "\"name\":\"voc\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%d", sensorID4, VOCIndex);
 8003912:	4b26      	ldr	r3, [pc, #152]	@ (80039ac <CreateMessage+0x130>)
 8003914:	881b      	ldrh	r3, [r3, #0]
 8003916:	4a26      	ldr	r2, [pc, #152]	@ (80039b0 <CreateMessage+0x134>)
 8003918:	4926      	ldr	r1, [pc, #152]	@ (80039b4 <CreateMessage+0x138>)
 800391a:	4827      	ldr	r0, [pc, #156]	@ (80039b8 <CreateMessage+0x13c>)
 800391c:	f014 f98a 	bl	8017c34 <siprintf>
  messageLength += strlen(messagePart4);
 8003920:	4b25      	ldr	r3, [pc, #148]	@ (80039b8 <CreateMessage+0x13c>)
 8003922:	0018      	movs	r0, r3
 8003924:	f7fc fc18 	bl	8000158 <strlen>
 8003928:	0003      	movs	r3, r0
 800392a:	b299      	uxth	r1, r3
 800392c:	1dbb      	adds	r3, r7, #6
 800392e:	1dba      	adds	r2, r7, #6
 8003930:	8812      	ldrh	r2, [r2, #0]
 8003932:	188a      	adds	r2, r1, r2
 8003934:	801a      	strh	r2, [r3, #0]
  sprintf(messagePart5, "\"name\":\"battery\", \"id\":\"55\", \"user\":\"piet\", \"sensor\": %s, \"value\":%f", sensorID5, batteryCharge);
 8003936:	4b21      	ldr	r3, [pc, #132]	@ (80039bc <CreateMessage+0x140>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1c18      	adds	r0, r3, #0
 800393c:	f7ff fd56 	bl	80033ec <__aeabi_f2d>
 8003940:	0002      	movs	r2, r0
 8003942:	000b      	movs	r3, r1
 8003944:	4c1e      	ldr	r4, [pc, #120]	@ (80039c0 <CreateMessage+0x144>)
 8003946:	491f      	ldr	r1, [pc, #124]	@ (80039c4 <CreateMessage+0x148>)
 8003948:	481f      	ldr	r0, [pc, #124]	@ (80039c8 <CreateMessage+0x14c>)
 800394a:	9200      	str	r2, [sp, #0]
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	0022      	movs	r2, r4
 8003950:	f014 f970 	bl	8017c34 <siprintf>
  messageLength += strlen(messagePart5);
 8003954:	4b1c      	ldr	r3, [pc, #112]	@ (80039c8 <CreateMessage+0x14c>)
 8003956:	0018      	movs	r0, r3
 8003958:	f7fc fbfe 	bl	8000158 <strlen>
 800395c:	0003      	movs	r3, r0
 800395e:	b299      	uxth	r1, r3
 8003960:	1dbb      	adds	r3, r7, #6
 8003962:	1dba      	adds	r2, r7, #6
 8003964:	8812      	ldrh	r2, [r2, #0]
 8003966:	188a      	adds	r2, r1, r2
 8003968:	801a      	strh	r2, [r3, #0]
  messageLength += 20;
 800396a:	1dbb      	adds	r3, r7, #6
 800396c:	1dba      	adds	r2, r7, #6
 800396e:	8812      	ldrh	r2, [r2, #0]
 8003970:	3214      	adds	r2, #20
 8003972:	801a      	strh	r2, [r3, #0]
  return(messageLength);
 8003974:	1dbb      	adds	r3, r7, #6
 8003976:	881b      	ldrh	r3, [r3, #0]
}
 8003978:	0018      	movs	r0, r3
 800397a:	46bd      	mov	sp, r7
 800397c:	b003      	add	sp, #12
 800397e:	bd90      	pop	{r4, r7, pc}
 8003980:	200005d4 	.word	0x200005d4
 8003984:	2000006c 	.word	0x2000006c
 8003988:	0801a9a0 	.word	0x0801a9a0
 800398c:	200005e8 	.word	0x200005e8
 8003990:	200005d8 	.word	0x200005d8
 8003994:	20000088 	.word	0x20000088
 8003998:	0801a9e4 	.word	0x0801a9e4
 800399c:	20000668 	.word	0x20000668
 80039a0:	200000a4 	.word	0x200000a4
 80039a4:	0801aa28 	.word	0x0801aa28
 80039a8:	200006e8 	.word	0x200006e8
 80039ac:	200005e4 	.word	0x200005e4
 80039b0:	200000c0 	.word	0x200000c0
 80039b4:	0801aa6c 	.word	0x0801aa6c
 80039b8:	20000768 	.word	0x20000768
 80039bc:	200005dc 	.word	0x200005dc
 80039c0:	200000dc 	.word	0x200000dc
 80039c4:	0801aab0 	.word	0x0801aab0
 80039c8:	200007e8 	.word	0x200007e8

080039cc <SetCommandBuffer>:

void SetCommandBuffer(const char* command) {
 80039cc:	b580      	push	{r7, lr}
 80039ce:	b082      	sub	sp, #8
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
 80039d4:	2380      	movs	r3, #128	@ 0x80
 80039d6:	009a      	lsls	r2, r3, #2
 80039d8:	6879      	ldr	r1, [r7, #4]
 80039da:	4b05      	ldr	r3, [pc, #20]	@ (80039f0 <SetCommandBuffer+0x24>)
 80039dc:	0018      	movs	r0, r3
 80039de:	f014 f9d5 	bl	8017d8c <strncpy>
    CommandEchoed = false; // Reset the flag when a new command is sent
 80039e2:	4b04      	ldr	r3, [pc, #16]	@ (80039f4 <SetCommandBuffer+0x28>)
 80039e4:	2200      	movs	r2, #0
 80039e6:	701a      	strb	r2, [r3, #0]
}
 80039e8:	46c0      	nop			@ (mov r8, r8)
 80039ea:	46bd      	mov	sp, r7
 80039ec:	b002      	add	sp, #8
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	2000087c 	.word	0x2000087c
 80039f4:	20000a7c 	.word	0x20000a7c

080039f8 <StartProg>:
void StartProg(){
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0
  HAL_Delay(1000);
 80039fc:	23fa      	movs	r3, #250	@ 0xfa
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	0018      	movs	r0, r3
 8003a02:	f005 fb3b 	bl	800907c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003a06:	4b15      	ldr	r3, [pc, #84]	@ (8003a5c <StartProg+0x64>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	2101      	movs	r1, #1
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f006 fcc1 	bl	800a394 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003a12:	2064      	movs	r0, #100	@ 0x64
 8003a14:	f005 fb32 	bl	800907c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003a18:	4b10      	ldr	r3, [pc, #64]	@ (8003a5c <StartProg+0x64>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	0018      	movs	r0, r3
 8003a20:	f006 fcb8 	bl	800a394 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a24:	23fa      	movs	r3, #250	@ 0xfa
 8003a26:	005b      	lsls	r3, r3, #1
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f005 fb27 	bl	800907c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003a2e:	4b0b      	ldr	r3, [pc, #44]	@ (8003a5c <StartProg+0x64>)
 8003a30:	2201      	movs	r2, #1
 8003a32:	2101      	movs	r1, #1
 8003a34:	0018      	movs	r0, r3
 8003a36:	f006 fcad 	bl	800a394 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003a3a:	23fa      	movs	r3, #250	@ 0xfa
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	0018      	movs	r0, r3
 8003a40:	f005 fb1c 	bl	800907c <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003a44:	4b05      	ldr	r3, [pc, #20]	@ (8003a5c <StartProg+0x64>)
 8003a46:	2201      	movs	r2, #1
 8003a48:	2102      	movs	r1, #2
 8003a4a:	0018      	movs	r0, r3
 8003a4c:	f006 fca2 	bl	800a394 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003a50:	2028      	movs	r0, #40	@ 0x28
 8003a52:	f005 fb13 	bl	800907c <HAL_Delay>
}
 8003a56:	46c0      	nop			@ (mov r8, r8)
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	50001c00 	.word	0x50001c00

08003a60 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003a60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a62:	46c6      	mov	lr, r8
 8003a64:	b500      	push	{lr}
 8003a66:	b09a      	sub	sp, #104	@ 0x68
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	61f8      	str	r0, [r7, #28]
 8003a6c:	0008      	movs	r0, r1
 8003a6e:	0011      	movs	r1, r2
 8003a70:	261a      	movs	r6, #26
 8003a72:	19bb      	adds	r3, r7, r6
 8003a74:	1c02      	adds	r2, r0, #0
 8003a76:	801a      	strh	r2, [r3, #0]
 8003a78:	2319      	movs	r3, #25
 8003a7a:	18fb      	adds	r3, r7, r3
 8003a7c:	1c0a      	adds	r2, r1, #0
 8003a7e:	701a      	strb	r2, [r3, #0]
 8003a80:	466b      	mov	r3, sp
 8003a82:	4698      	mov	r8, r3
  char tempBuf[len+1];
 8003a84:	19bb      	adds	r3, r7, r6
 8003a86:	881b      	ldrh	r3, [r3, #0]
 8003a88:	3301      	adds	r3, #1
 8003a8a:	1e5a      	subs	r2, r3, #1
 8003a8c:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8003a8e:	001a      	movs	r2, r3
 8003a90:	60ba      	str	r2, [r7, #8]
 8003a92:	2200      	movs	r2, #0
 8003a94:	60fa      	str	r2, [r7, #12]
 8003a96:	68b8      	ldr	r0, [r7, #8]
 8003a98:	68f9      	ldr	r1, [r7, #12]
 8003a9a:	0002      	movs	r2, r0
 8003a9c:	0f52      	lsrs	r2, r2, #29
 8003a9e:	000e      	movs	r6, r1
 8003aa0:	00f6      	lsls	r6, r6, #3
 8003aa2:	617e      	str	r6, [r7, #20]
 8003aa4:	697e      	ldr	r6, [r7, #20]
 8003aa6:	4316      	orrs	r6, r2
 8003aa8:	617e      	str	r6, [r7, #20]
 8003aaa:	0002      	movs	r2, r0
 8003aac:	00d2      	lsls	r2, r2, #3
 8003aae:	613a      	str	r2, [r7, #16]
 8003ab0:	001a      	movs	r2, r3
 8003ab2:	603a      	str	r2, [r7, #0]
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	6838      	ldr	r0, [r7, #0]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	0002      	movs	r2, r0
 8003abe:	0f52      	lsrs	r2, r2, #29
 8003ac0:	000e      	movs	r6, r1
 8003ac2:	00f5      	lsls	r5, r6, #3
 8003ac4:	4315      	orrs	r5, r2
 8003ac6:	0002      	movs	r2, r0
 8003ac8:	00d4      	lsls	r4, r2, #3
 8003aca:	3307      	adds	r3, #7
 8003acc:	08db      	lsrs	r3, r3, #3
 8003ace:	00db      	lsls	r3, r3, #3
 8003ad0:	466a      	mov	r2, sp
 8003ad2:	1ad3      	subs	r3, r2, r3
 8003ad4:	469d      	mov	sp, r3
 8003ad6:	466b      	mov	r3, sp
 8003ad8:	3300      	adds	r3, #0
 8003ada:	65bb      	str	r3, [r7, #88]	@ 0x58
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003adc:	234f      	movs	r3, #79	@ 0x4f
 8003ade:	2118      	movs	r1, #24
 8003ae0:	185b      	adds	r3, r3, r1
 8003ae2:	19db      	adds	r3, r3, r7
 8003ae4:	2203      	movs	r2, #3
 8003ae6:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003ae8:	234c      	movs	r3, #76	@ 0x4c
 8003aea:	185b      	adds	r3, r3, r1
 8003aec:	19db      	adds	r3, r3, r7
 8003aee:	2200      	movs	r2, #0
 8003af0:	801a      	strh	r2, [r3, #0]
 8003af2:	e013      	b.n	8003b1c <ParseBuffer+0xbc>
    tempBuf[i] = (char)buffer[i];
 8003af4:	204c      	movs	r0, #76	@ 0x4c
 8003af6:	2418      	movs	r4, #24
 8003af8:	1903      	adds	r3, r0, r4
 8003afa:	19db      	adds	r3, r3, r7
 8003afc:	881b      	ldrh	r3, [r3, #0]
 8003afe:	69fa      	ldr	r2, [r7, #28]
 8003b00:	18d2      	adds	r2, r2, r3
 8003b02:	1903      	adds	r3, r0, r4
 8003b04:	19db      	adds	r3, r3, r7
 8003b06:	881b      	ldrh	r3, [r3, #0]
 8003b08:	7811      	ldrb	r1, [r2, #0]
 8003b0a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b0c:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003b0e:	1903      	adds	r3, r0, r4
 8003b10:	19db      	adds	r3, r3, r7
 8003b12:	881a      	ldrh	r2, [r3, #0]
 8003b14:	1903      	adds	r3, r0, r4
 8003b16:	19db      	adds	r3, r3, r7
 8003b18:	3201      	adds	r2, #1
 8003b1a:	801a      	strh	r2, [r3, #0]
 8003b1c:	234c      	movs	r3, #76	@ 0x4c
 8003b1e:	2018      	movs	r0, #24
 8003b20:	181b      	adds	r3, r3, r0
 8003b22:	19da      	adds	r2, r3, r7
 8003b24:	211a      	movs	r1, #26
 8003b26:	187b      	adds	r3, r7, r1
 8003b28:	8812      	ldrh	r2, [r2, #0]
 8003b2a:	881b      	ldrh	r3, [r3, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d3e1      	bcc.n	8003af4 <ParseBuffer+0x94>
  }
  tempBuf[len] = '\0';
 8003b30:	187b      	adds	r3, r7, r1
 8003b32:	881b      	ldrh	r3, [r3, #0]
 8003b34:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003b36:	2100      	movs	r1, #0
 8003b38:	54d1      	strb	r1, [r2, r3]
  char TestChar = 'N';
 8003b3a:	233f      	movs	r3, #63	@ 0x3f
 8003b3c:	0006      	movs	r6, r0
 8003b3e:	199b      	adds	r3, r3, r6
 8003b40:	19db      	adds	r3, r3, r7
 8003b42:	224e      	movs	r2, #78	@ 0x4e
 8003b44:	701a      	strb	r2, [r3, #0]
  char * ParsePoint;
  char * ParsePoint2;
  char * ParsePoint3;
  const char OK[] = AT_RESPONSE_OK;
 8003b46:	2530      	movs	r5, #48	@ 0x30
 8003b48:	19ab      	adds	r3, r5, r6
 8003b4a:	19db      	adds	r3, r3, r7
 8003b4c:	4a60      	ldr	r2, [pc, #384]	@ (8003cd0 <ParseBuffer+0x270>)
 8003b4e:	8811      	ldrh	r1, [r2, #0]
 8003b50:	8019      	strh	r1, [r3, #0]
 8003b52:	7892      	ldrb	r2, [r2, #2]
 8003b54:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003b56:	2328      	movs	r3, #40	@ 0x28
 8003b58:	199b      	adds	r3, r3, r6
 8003b5a:	19db      	adds	r3, r3, r7
 8003b5c:	4a5d      	ldr	r2, [pc, #372]	@ (8003cd4 <ParseBuffer+0x274>)
 8003b5e:	6811      	ldr	r1, [r2, #0]
 8003b60:	6019      	str	r1, [r3, #0]
 8003b62:	8892      	ldrh	r2, [r2, #4]
 8003b64:	809a      	strh	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003b66:	2320      	movs	r3, #32
 8003b68:	199b      	adds	r3, r3, r6
 8003b6a:	19db      	adds	r3, r3, r7
 8003b6c:	4a5a      	ldr	r2, [pc, #360]	@ (8003cd8 <ParseBuffer+0x278>)
 8003b6e:	6811      	ldr	r1, [r2, #0]
 8003b70:	6019      	str	r1, [r3, #0]
 8003b72:	8892      	ldrh	r2, [r2, #4]
 8003b74:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003b76:	231c      	movs	r3, #28
 8003b78:	199b      	adds	r3, r3, r6
 8003b7a:	19db      	adds	r3, r3, r7
 8003b7c:	223e      	movs	r2, #62	@ 0x3e
 8003b7e:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003b80:	230c      	movs	r3, #12
 8003b82:	199b      	adds	r3, r3, r6
 8003b84:	19db      	adds	r3, r3, r7
 8003b86:	4a55      	ldr	r2, [pc, #340]	@ (8003cdc <ParseBuffer+0x27c>)
 8003b88:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003b8a:	c313      	stmia	r3!, {r0, r1, r4}
 8003b8c:	8811      	ldrh	r1, [r2, #0]
 8003b8e:	8019      	strh	r1, [r3, #0]
 8003b90:	7892      	ldrb	r2, [r2, #2]
 8003b92:	709a      	strb	r2, [r3, #2]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003b94:	2319      	movs	r3, #25
 8003b96:	18fb      	adds	r3, r7, r3
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d108      	bne.n	8003bb0 <ParseBuffer+0x150>
    ParsePoint = strstr(tempBuf, OK);
 8003b9e:	19ab      	adds	r3, r5, r6
 8003ba0:	19da      	adds	r2, r3, r7
 8003ba2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003ba4:	0011      	movs	r1, r2
 8003ba6:	0018      	movs	r0, r3
 8003ba8:	f014 f904 	bl	8017db4 <strstr>
 8003bac:	0003      	movs	r3, r0
 8003bae:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8003bb0:	2319      	movs	r3, #25
 8003bb2:	18fb      	adds	r3, r7, r3
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d10a      	bne.n	8003bd0 <ParseBuffer+0x170>
    ParsePoint = strstr(tempBuf, ready);
 8003bba:	2320      	movs	r3, #32
 8003bbc:	2218      	movs	r2, #24
 8003bbe:	189b      	adds	r3, r3, r2
 8003bc0:	19da      	adds	r2, r3, r7
 8003bc2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bc4:	0011      	movs	r1, r2
 8003bc6:	0018      	movs	r0, r3
 8003bc8:	f014 f8f4 	bl	8017db4 <strstr>
 8003bcc:	0003      	movs	r3, r0
 8003bce:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 8003bd0:	2319      	movs	r3, #25
 8003bd2:	18fb      	adds	r3, r7, r3
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d10a      	bne.n	8003bf0 <ParseBuffer+0x190>
    ParsePoint = strstr(tempBuf, start);
 8003bda:	231c      	movs	r3, #28
 8003bdc:	2218      	movs	r2, #24
 8003bde:	189b      	adds	r3, r3, r2
 8003be0:	19da      	adds	r2, r3, r7
 8003be2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003be4:	0011      	movs	r1, r2
 8003be6:	0018      	movs	r0, r3
 8003be8:	f014 f8e4 	bl	8017db4 <strstr>
 8003bec:	0003      	movs	r3, r0
 8003bee:	663b      	str	r3, [r7, #96]	@ 0x60
  }
  ParsePoint2 = strstr(tempBuf, ERROR);
 8003bf0:	2328      	movs	r3, #40	@ 0x28
 8003bf2:	2418      	movs	r4, #24
 8003bf4:	191b      	adds	r3, r3, r4
 8003bf6:	19da      	adds	r2, r3, r7
 8003bf8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003bfa:	0011      	movs	r1, r2
 8003bfc:	0018      	movs	r0, r3
 8003bfe:	f014 f8d9 	bl	8017db4 <strstr>
 8003c02:	0003      	movs	r3, r0
 8003c04:	653b      	str	r3, [r7, #80]	@ 0x50
  ParsePoint3 = strstr(tempBuf, WIFI);
 8003c06:	230c      	movs	r3, #12
 8003c08:	191b      	adds	r3, r3, r4
 8003c0a:	19da      	adds	r2, r3, r7
 8003c0c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003c0e:	0011      	movs	r1, r2
 8003c10:	0018      	movs	r0, r3
 8003c12:	f014 f8cf 	bl	8017db4 <strstr>
 8003c16:	0003      	movs	r3, r0
 8003c18:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if(len > 1 ){
 8003c1a:	231a      	movs	r3, #26
 8003c1c:	18fb      	adds	r3, r7, r3
 8003c1e:	881b      	ldrh	r3, [r3, #0]
 8003c20:	2b01      	cmp	r3, #1
 8003c22:	d948      	bls.n	8003cb6 <ParseBuffer+0x256>
    TestChar = *ParsePoint;
 8003c24:	213f      	movs	r1, #63	@ 0x3f
 8003c26:	190b      	adds	r3, r1, r4
 8003c28:	19db      	adds	r3, r3, r7
 8003c2a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003c2c:	7812      	ldrb	r2, [r2, #0]
 8003c2e:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'O'){
 8003c30:	190b      	adds	r3, r1, r4
 8003c32:	19db      	adds	r3, r3, r7
 8003c34:	781b      	ldrb	r3, [r3, #0]
 8003c36:	2b4f      	cmp	r3, #79	@ 0x4f
 8003c38:	d104      	bne.n	8003c44 <ParseBuffer+0x1e4>
      status = RECEIVE_STATUS_OK;
 8003c3a:	234f      	movs	r3, #79	@ 0x4f
 8003c3c:	191b      	adds	r3, r3, r4
 8003c3e:	19db      	adds	r3, r3, r7
 8003c40:	2200      	movs	r2, #0
 8003c42:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == 'r'){
 8003c44:	233f      	movs	r3, #63	@ 0x3f
 8003c46:	2218      	movs	r2, #24
 8003c48:	189b      	adds	r3, r3, r2
 8003c4a:	19db      	adds	r3, r3, r7
 8003c4c:	781b      	ldrb	r3, [r3, #0]
 8003c4e:	2b72      	cmp	r3, #114	@ 0x72
 8003c50:	d104      	bne.n	8003c5c <ParseBuffer+0x1fc>
      status = RECEIVE_STATUS_READY;
 8003c52:	234f      	movs	r3, #79	@ 0x4f
 8003c54:	189b      	adds	r3, r3, r2
 8003c56:	19db      	adds	r3, r3, r7
 8003c58:	2202      	movs	r2, #2
 8003c5a:	701a      	strb	r2, [r3, #0]
    }
    if(TestChar == '>'){
 8003c5c:	233f      	movs	r3, #63	@ 0x3f
 8003c5e:	2218      	movs	r2, #24
 8003c60:	189b      	adds	r3, r3, r2
 8003c62:	19db      	adds	r3, r3, r7
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b3e      	cmp	r3, #62	@ 0x3e
 8003c68:	d104      	bne.n	8003c74 <ParseBuffer+0x214>
      status = RECEIVE_STATUS_START;
 8003c6a:	234f      	movs	r3, #79	@ 0x4f
 8003c6c:	189b      	adds	r3, r3, r2
 8003c6e:	19db      	adds	r3, r3, r7
 8003c70:	2205      	movs	r2, #5
 8003c72:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint2;
 8003c74:	213f      	movs	r1, #63	@ 0x3f
 8003c76:	2018      	movs	r0, #24
 8003c78:	180b      	adds	r3, r1, r0
 8003c7a:	19db      	adds	r3, r3, r7
 8003c7c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8003c7e:	7812      	ldrb	r2, [r2, #0]
 8003c80:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'E'){
 8003c82:	0002      	movs	r2, r0
 8003c84:	188b      	adds	r3, r1, r2
 8003c86:	19db      	adds	r3, r3, r7
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	2b45      	cmp	r3, #69	@ 0x45
 8003c8c:	d104      	bne.n	8003c98 <ParseBuffer+0x238>
      status = RECEIVE_STATUS_ERROR;
 8003c8e:	234f      	movs	r3, #79	@ 0x4f
 8003c90:	189b      	adds	r3, r3, r2
 8003c92:	19db      	adds	r3, r3, r7
 8003c94:	2201      	movs	r2, #1
 8003c96:	701a      	strb	r2, [r3, #0]
    }
    TestChar = *ParsePoint3;
 8003c98:	213f      	movs	r1, #63	@ 0x3f
 8003c9a:	2018      	movs	r0, #24
 8003c9c:	180b      	adds	r3, r1, r0
 8003c9e:	19db      	adds	r3, r3, r7
 8003ca0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003ca2:	7812      	ldrb	r2, [r2, #0]
 8003ca4:	701a      	strb	r2, [r3, #0]
    if(TestChar == 'W'){
 8003ca6:	180b      	adds	r3, r1, r0
 8003ca8:	19db      	adds	r3, r3, r7
 8003caa:	781b      	ldrb	r3, [r3, #0]
 8003cac:	2b57      	cmp	r3, #87	@ 0x57
 8003cae:	d102      	bne.n	8003cb6 <ParseBuffer+0x256>
      ConnectionMade = true;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <ParseBuffer+0x280>)
 8003cb2:	2201      	movs	r2, #1
 8003cb4:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 8003cb6:	234f      	movs	r3, #79	@ 0x4f
 8003cb8:	2218      	movs	r2, #24
 8003cba:	189b      	adds	r3, r3, r2
 8003cbc:	19db      	adds	r3, r3, r7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	46c5      	mov	sp, r8

}
 8003cc2:	0018      	movs	r0, r3
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	b01a      	add	sp, #104	@ 0x68
 8003cc8:	bc80      	pop	{r7}
 8003cca:	46b8      	mov	r8, r7
 8003ccc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cce:	46c0      	nop			@ (mov r8, r8)
 8003cd0:	0801aaf8 	.word	0x0801aaf8
 8003cd4:	0801aafc 	.word	0x0801aafc
 8003cd8:	0801ab04 	.word	0x0801ab04
 8003cdc:	0801ab0c 	.word	0x0801ab0c
 8003ce0:	200005d2 	.word	0x200005d2

08003ce4 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 8003cea:	4b0d      	ldr	r3, [pc, #52]	@ (8003d20 <PollAwake+0x3c>)
 8003cec:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	f7ff fe6b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	0018      	movs	r0, r3
 8003cfa:	f7fc fa2d 	bl	8000158 <strlen>
 8003cfe:	0003      	movs	r3, r0
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	0011      	movs	r1, r2
 8003d06:	0018      	movs	r0, r3
 8003d08:	f7ff fd28 	bl	800375c <ESP_Send>
 8003d0c:	1e03      	subs	r3, r0, #0
 8003d0e:	d001      	beq.n	8003d14 <PollAwake+0x30>
    return true;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e000      	b.n	8003d16 <PollAwake+0x32>
  }
  else{
    return false;
 8003d14:	2300      	movs	r3, #0
  }
}
 8003d16:	0018      	movs	r0, r3
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	b002      	add	sp, #8
 8003d1c:	bd80      	pop	{r7, pc}
 8003d1e:	46c0      	nop			@ (mov r8, r8)
 8003d20:	0801ab1c 	.word	0x0801ab1c

08003d24 <RFPower>:
bool RFPower(){
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b082      	sub	sp, #8
 8003d28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <RFPower+0x3c>)
 8003d2c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	0018      	movs	r0, r3
 8003d32:	f7ff fe4b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	0018      	movs	r0, r3
 8003d3a:	f7fc fa0d 	bl	8000158 <strlen>
 8003d3e:	0003      	movs	r3, r0
 8003d40:	b29a      	uxth	r2, r3
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	0011      	movs	r1, r2
 8003d46:	0018      	movs	r0, r3
 8003d48:	f7ff fd08 	bl	800375c <ESP_Send>
 8003d4c:	1e03      	subs	r3, r0, #0
 8003d4e:	d001      	beq.n	8003d54 <RFPower+0x30>
    return true;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e000      	b.n	8003d56 <RFPower+0x32>
  }
  else{
    return false;
 8003d54:	2300      	movs	r3, #0
  }
}
 8003d56:	0018      	movs	r0, r3
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	b002      	add	sp, #8
 8003d5c:	bd80      	pop	{r7, pc}
 8003d5e:	46c0      	nop			@ (mov r8, r8)
 8003d60:	0801ab24 	.word	0x0801ab24

08003d64 <CheckRFPower>:
bool CheckRFPower(){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 8003d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003da0 <CheckRFPower+0x3c>)
 8003d6c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	0018      	movs	r0, r3
 8003d72:	f7ff fe2b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7fc f9ed 	bl	8000158 <strlen>
 8003d7e:	0003      	movs	r3, r0
 8003d80:	b29a      	uxth	r2, r3
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	0011      	movs	r1, r2
 8003d86:	0018      	movs	r0, r3
 8003d88:	f7ff fce8 	bl	800375c <ESP_Send>
 8003d8c:	1e03      	subs	r3, r0, #0
 8003d8e:	d001      	beq.n	8003d94 <CheckRFPower+0x30>
    return true;
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <CheckRFPower+0x32>
  }
  else{
    return false;
 8003d94:	2300      	movs	r3, #0
  }
}
 8003d96:	0018      	movs	r0, r3
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	b002      	add	sp, #8
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	46c0      	nop			@ (mov r8, r8)
 8003da0:	0801ab34 	.word	0x0801ab34

08003da4 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8003da4:	b580      	push	{r7, lr}
 8003da6:	b082      	sub	sp, #8
 8003da8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8003daa:	4b0d      	ldr	r3, [pc, #52]	@ (8003de0 <ATRestore+0x3c>)
 8003dac:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f7ff fe0b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	0018      	movs	r0, r3
 8003dba:	f7fc f9cd 	bl	8000158 <strlen>
 8003dbe:	0003      	movs	r3, r0
 8003dc0:	b29a      	uxth	r2, r3
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0011      	movs	r1, r2
 8003dc6:	0018      	movs	r0, r3
 8003dc8:	f7ff fcc8 	bl	800375c <ESP_Send>
 8003dcc:	1e03      	subs	r3, r0, #0
 8003dce:	d001      	beq.n	8003dd4 <ATRestore+0x30>
    return true;
 8003dd0:	2301      	movs	r3, #1
 8003dd2:	e000      	b.n	8003dd6 <ATRestore+0x32>
  }
  else{
    return false;
 8003dd4:	2300      	movs	r3, #0
  }
}
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	b002      	add	sp, #8
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	46c0      	nop			@ (mov r8, r8)
 8003de0:	0801ab44 	.word	0x0801ab44

08003de4 <CWINIT>:
bool CWINIT(){
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 8003dea:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <CWINIT+0x3c>)
 8003dec:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	0018      	movs	r0, r3
 8003df2:	f7ff fdeb 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	0018      	movs	r0, r3
 8003dfa:	f7fc f9ad 	bl	8000158 <strlen>
 8003dfe:	0003      	movs	r3, r0
 8003e00:	b29a      	uxth	r2, r3
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	0011      	movs	r1, r2
 8003e06:	0018      	movs	r0, r3
 8003e08:	f7ff fca8 	bl	800375c <ESP_Send>
 8003e0c:	1e03      	subs	r3, r0, #0
 8003e0e:	d001      	beq.n	8003e14 <CWINIT+0x30>
    return true;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e000      	b.n	8003e16 <CWINIT+0x32>
  }
  else{
    return false;
 8003e14:	2300      	movs	r3, #0
  }
}
 8003e16:	0018      	movs	r0, r3
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	b002      	add	sp, #8
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	46c0      	nop			@ (mov r8, r8)
 8003e20:	0801ab54 	.word	0x0801ab54

08003e24 <CWMODE1>:
bool CWMODE1(){
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b082      	sub	sp, #8
 8003e28:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 8003e2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e60 <CWMODE1+0x3c>)
 8003e2c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	0018      	movs	r0, r3
 8003e32:	f7ff fdcb 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7fc f98d 	bl	8000158 <strlen>
 8003e3e:	0003      	movs	r3, r0
 8003e40:	b29a      	uxth	r2, r3
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7ff fc88 	bl	800375c <ESP_Send>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d001      	beq.n	8003e54 <CWMODE1+0x30>
    return true;
 8003e50:	2301      	movs	r3, #1
 8003e52:	e000      	b.n	8003e56 <CWMODE1+0x32>
  }
  else{
    return false;
 8003e54:	2300      	movs	r3, #0
  }
}
 8003e56:	0018      	movs	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	b002      	add	sp, #8
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	46c0      	nop			@ (mov r8, r8)
 8003e60:	0801ab64 	.word	0x0801ab64

08003e64 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8003e6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ea0 <CWAUTOCONN+0x3c>)
 8003e6c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	0018      	movs	r0, r3
 8003e72:	f7ff fdab 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	0018      	movs	r0, r3
 8003e7a:	f7fc f96d 	bl	8000158 <strlen>
 8003e7e:	0003      	movs	r3, r0
 8003e80:	b29a      	uxth	r2, r3
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	0011      	movs	r1, r2
 8003e86:	0018      	movs	r0, r3
 8003e88:	f7ff fc68 	bl	800375c <ESP_Send>
 8003e8c:	1e03      	subs	r3, r0, #0
 8003e8e:	d001      	beq.n	8003e94 <CWAUTOCONN+0x30>
    return true;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <CWAUTOCONN+0x32>
  }
  else{
    return false;
 8003e94:	2300      	movs	r3, #0
  }
}
 8003e96:	0018      	movs	r0, r3
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	b002      	add	sp, #8
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	46c0      	nop			@ (mov r8, r8)
 8003ea0:	0801ab74 	.word	0x0801ab74

08003ea4 <CWJAP>:
bool CWJAP(){
 8003ea4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ea6:	46c6      	mov	lr, r8
 8003ea8:	b500      	push	{lr}
 8003eaa:	b0a2      	sub	sp, #136	@ 0x88
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	466b      	mov	r3, sp
 8003eb0:	4698      	mov	r8, r3
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 8003eb2:	2618      	movs	r6, #24
 8003eb4:	19bb      	adds	r3, r7, r6
 8003eb6:	2264      	movs	r2, #100	@ 0x64
 8003eb8:	2100      	movs	r1, #0
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f013 ff5e 	bl	8017d7c <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 8003ec0:	4b35      	ldr	r3, [pc, #212]	@ (8003f98 <CWJAP+0xf4>)
 8003ec2:	4a36      	ldr	r2, [pc, #216]	@ (8003f9c <CWJAP+0xf8>)
 8003ec4:	4936      	ldr	r1, [pc, #216]	@ (8003fa0 <CWJAP+0xfc>)
 8003ec6:	19b8      	adds	r0, r7, r6
 8003ec8:	f013 feb4 	bl	8017c34 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8003ecc:	19bb      	adds	r3, r7, r6
 8003ece:	0018      	movs	r0, r3
 8003ed0:	f7fc f942 	bl	8000158 <strlen>
 8003ed4:	0002      	movs	r2, r0
 8003ed6:	216f      	movs	r1, #111	@ 0x6f
 8003ed8:	0030      	movs	r0, r6
 8003eda:	180b      	adds	r3, r1, r0
 8003edc:	19db      	adds	r3, r3, r7
 8003ede:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 8003ee0:	180b      	adds	r3, r1, r0
 8003ee2:	19db      	adds	r3, r3, r7
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	3301      	adds	r3, #1
 8003ee8:	1e5a      	subs	r2, r3, #1
 8003eea:	2180      	movs	r1, #128	@ 0x80
 8003eec:	1879      	adds	r1, r7, r1
 8003eee:	600a      	str	r2, [r1, #0]
 8003ef0:	001a      	movs	r2, r3
 8003ef2:	60ba      	str	r2, [r7, #8]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	60fa      	str	r2, [r7, #12]
 8003ef8:	68b8      	ldr	r0, [r7, #8]
 8003efa:	68f9      	ldr	r1, [r7, #12]
 8003efc:	0002      	movs	r2, r0
 8003efe:	0f52      	lsrs	r2, r2, #29
 8003f00:	000e      	movs	r6, r1
 8003f02:	00f6      	lsls	r6, r6, #3
 8003f04:	617e      	str	r6, [r7, #20]
 8003f06:	697e      	ldr	r6, [r7, #20]
 8003f08:	4316      	orrs	r6, r2
 8003f0a:	617e      	str	r6, [r7, #20]
 8003f0c:	0002      	movs	r2, r0
 8003f0e:	00d2      	lsls	r2, r2, #3
 8003f10:	613a      	str	r2, [r7, #16]
 8003f12:	001a      	movs	r2, r3
 8003f14:	603a      	str	r2, [r7, #0]
 8003f16:	2200      	movs	r2, #0
 8003f18:	607a      	str	r2, [r7, #4]
 8003f1a:	6838      	ldr	r0, [r7, #0]
 8003f1c:	6879      	ldr	r1, [r7, #4]
 8003f1e:	0002      	movs	r2, r0
 8003f20:	0f52      	lsrs	r2, r2, #29
 8003f22:	000e      	movs	r6, r1
 8003f24:	00f5      	lsls	r5, r6, #3
 8003f26:	4315      	orrs	r5, r2
 8003f28:	0002      	movs	r2, r0
 8003f2a:	00d4      	lsls	r4, r2, #3
 8003f2c:	3307      	adds	r3, #7
 8003f2e:	08db      	lsrs	r3, r3, #3
 8003f30:	00db      	lsls	r3, r3, #3
 8003f32:	466a      	mov	r2, sp
 8003f34:	1ad3      	subs	r3, r2, r3
 8003f36:	469d      	mov	sp, r3
 8003f38:	466b      	mov	r3, sp
 8003f3a:	3300      	adds	r3, #0
 8003f3c:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8003f3e:	246f      	movs	r4, #111	@ 0x6f
 8003f40:	2518      	movs	r5, #24
 8003f42:	1963      	adds	r3, r4, r5
 8003f44:	19db      	adds	r3, r3, r7
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	3301      	adds	r3, #1
 8003f4a:	001a      	movs	r2, r3
 8003f4c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f4e:	2100      	movs	r1, #0
 8003f50:	0018      	movs	r0, r3
 8003f52:	f013 ff13 	bl	8017d7c <memset>
  strncpy(atCommand, atCommandBuff, len);
 8003f56:	1963      	adds	r3, r4, r5
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	781a      	ldrb	r2, [r3, #0]
 8003f5c:	1979      	adds	r1, r7, r5
 8003f5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f60:	0018      	movs	r0, r3
 8003f62:	f013 ff13 	bl	8017d8c <strncpy>
  SetCommandBuffer(atCommand);
 8003f66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f7ff fd2f 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8003f6e:	1963      	adds	r3, r4, r5
 8003f70:	19db      	adds	r3, r3, r7
 8003f72:	781b      	ldrb	r3, [r3, #0]
 8003f74:	b29a      	uxth	r2, r3
 8003f76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f78:	0011      	movs	r1, r2
 8003f7a:	0018      	movs	r0, r3
 8003f7c:	f7ff fbee 	bl	800375c <ESP_Send>
 8003f80:	1e03      	subs	r3, r0, #0
 8003f82:	d001      	beq.n	8003f88 <CWJAP+0xe4>
    return true;
 8003f84:	2301      	movs	r3, #1
 8003f86:	e000      	b.n	8003f8a <CWJAP+0xe6>
  }
  else{
    return false;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	46c5      	mov	sp, r8
  }
}
 8003f8c:	0018      	movs	r0, r3
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	b022      	add	sp, #136	@ 0x88
 8003f92:	bc80      	pop	{r7}
 8003f94:	46b8      	mov	r8, r7
 8003f96:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f98:	20000010 	.word	0x20000010
 8003f9c:	20000004 	.word	0x20000004
 8003fa0:	0801ab88 	.word	0x0801ab88

08003fa4 <CWMODE3>:
bool CWMODE3(){
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8003faa:	4b0d      	ldr	r3, [pc, #52]	@ (8003fe0 <CWMODE3+0x3c>)
 8003fac:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	f7ff fd0b 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	0018      	movs	r0, r3
 8003fba:	f7fc f8cd 	bl	8000158 <strlen>
 8003fbe:	0003      	movs	r3, r0
 8003fc0:	b29a      	uxth	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	0011      	movs	r1, r2
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	f7ff fbc8 	bl	800375c <ESP_Send>
 8003fcc:	1e03      	subs	r3, r0, #0
 8003fce:	d001      	beq.n	8003fd4 <CWMODE3+0x30>
    return true;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	e000      	b.n	8003fd6 <CWMODE3+0x32>
  }
  else{
    return false;
 8003fd4:	2300      	movs	r3, #0
  }
}
 8003fd6:	0018      	movs	r0, r3
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	b002      	add	sp, #8
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	46c0      	nop			@ (mov r8, r8)
 8003fe0:	0801aba0 	.word	0x0801aba0

08003fe4 <CWSAP>:
bool CWSAP(){
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 8003fea:	4b0d      	ldr	r3, [pc, #52]	@ (8004020 <CWSAP+0x3c>)
 8003fec:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0018      	movs	r0, r3
 8003ff2:	f7ff fceb 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f7fc f8ad 	bl	8000158 <strlen>
 8003ffe:	0003      	movs	r3, r0
 8004000:	b29a      	uxth	r2, r3
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	0011      	movs	r1, r2
 8004006:	0018      	movs	r0, r3
 8004008:	f7ff fba8 	bl	800375c <ESP_Send>
 800400c:	1e03      	subs	r3, r0, #0
 800400e:	d001      	beq.n	8004014 <CWSAP+0x30>
    return true;
 8004010:	2301      	movs	r3, #1
 8004012:	e000      	b.n	8004016 <CWSAP+0x32>
  }
  else{
    return false;
 8004014:	2300      	movs	r3, #0
  }
}
 8004016:	0018      	movs	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	b002      	add	sp, #8
 800401c:	bd80      	pop	{r7, pc}
 800401e:	46c0      	nop			@ (mov r8, r8)
 8004020:	0801abb0 	.word	0x0801abb0

08004024 <CIPMUX>:
bool CIPMUX(){
 8004024:	b580      	push	{r7, lr}
 8004026:	b082      	sub	sp, #8
 8004028:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800402a:	4b0d      	ldr	r3, [pc, #52]	@ (8004060 <CIPMUX+0x3c>)
 800402c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	0018      	movs	r0, r3
 8004032:	f7ff fccb 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	0018      	movs	r0, r3
 800403a:	f7fc f88d 	bl	8000158 <strlen>
 800403e:	0003      	movs	r3, r0
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	0011      	movs	r1, r2
 8004046:	0018      	movs	r0, r3
 8004048:	f7ff fb88 	bl	800375c <ESP_Send>
 800404c:	1e03      	subs	r3, r0, #0
 800404e:	d001      	beq.n	8004054 <CIPMUX+0x30>
    return true;
 8004050:	2301      	movs	r3, #1
 8004052:	e000      	b.n	8004056 <CIPMUX+0x32>
  }
  else{
    return false;
 8004054:	2300      	movs	r3, #0
  }
}
 8004056:	0018      	movs	r0, r3
 8004058:	46bd      	mov	sp, r7
 800405a:	b002      	add	sp, #8
 800405c:	bd80      	pop	{r7, pc}
 800405e:	46c0      	nop			@ (mov r8, r8)
 8004060:	0801abd4 	.word	0x0801abd4

08004064 <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 8004064:	b580      	push	{r7, lr}
 8004066:	b082      	sub	sp, #8
 8004068:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 800406a:	4b0d      	ldr	r3, [pc, #52]	@ (80040a0 <WEBSERVER+0x3c>)
 800406c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	0018      	movs	r0, r3
 8004072:	f7ff fcab 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	0018      	movs	r0, r3
 800407a:	f7fc f86d 	bl	8000158 <strlen>
 800407e:	0003      	movs	r3, r0
 8004080:	b29a      	uxth	r2, r3
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	0011      	movs	r1, r2
 8004086:	0018      	movs	r0, r3
 8004088:	f7ff fb68 	bl	800375c <ESP_Send>
 800408c:	1e03      	subs	r3, r0, #0
 800408e:	d001      	beq.n	8004094 <WEBSERVER+0x30>
    return true;
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <WEBSERVER+0x32>
  }
  else{
    return false;
 8004094:	2300      	movs	r3, #0
  }
}
 8004096:	0018      	movs	r0, r3
 8004098:	46bd      	mov	sp, r7
 800409a:	b002      	add	sp, #8
 800409c:	bd80      	pop	{r7, pc}
 800409e:	46c0      	nop			@ (mov r8, r8)
 80040a0:	0801abe4 	.word	0x0801abe4

080040a4 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 80040a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040a6:	46c6      	mov	lr, r8
 80040a8:	b500      	push	{lr}
 80040aa:	4c47      	ldr	r4, [pc, #284]	@ (80041c8 <HTTPCPOST+0x124>)
 80040ac:	44a5      	add	sp, r4
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	466b      	mov	r3, sp
 80040b2:	4698      	mov	r8, r3
  char atCommandBuff[600];
  uint16_t length = CreateMessage();
 80040b4:	4b45      	ldr	r3, [pc, #276]	@ (80041cc <HTTPCPOST+0x128>)
 80040b6:	2218      	movs	r2, #24
 80040b8:	189b      	adds	r3, r3, r2
 80040ba:	19dc      	adds	r4, r3, r7
 80040bc:	f7ff fbde 	bl	800387c <CreateMessage>
 80040c0:	0003      	movs	r3, r0
 80040c2:	8023      	strh	r3, [r4, #0]
  sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", API, length);
 80040c4:	4b41      	ldr	r3, [pc, #260]	@ (80041cc <HTTPCPOST+0x128>)
 80040c6:	2218      	movs	r2, #24
 80040c8:	189b      	adds	r3, r3, r2
 80040ca:	19db      	adds	r3, r3, r7
 80040cc:	881b      	ldrh	r3, [r3, #0]
 80040ce:	4a40      	ldr	r2, [pc, #256]	@ (80041d0 <HTTPCPOST+0x12c>)
 80040d0:	4940      	ldr	r1, [pc, #256]	@ (80041d4 <HTTPCPOST+0x130>)
 80040d2:	201c      	movs	r0, #28
 80040d4:	1838      	adds	r0, r7, r0
 80040d6:	f013 fdad 	bl	8017c34 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 80040da:	231c      	movs	r3, #28
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	0018      	movs	r0, r3
 80040e0:	f7fc f83a 	bl	8000158 <strlen>
 80040e4:	0002      	movs	r2, r0
 80040e6:	4c3c      	ldr	r4, [pc, #240]	@ (80041d8 <HTTPCPOST+0x134>)
 80040e8:	2318      	movs	r3, #24
 80040ea:	18e3      	adds	r3, r4, r3
 80040ec:	19db      	adds	r3, r3, r7
 80040ee:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80040f0:	2318      	movs	r3, #24
 80040f2:	18e3      	adds	r3, r4, r3
 80040f4:	19db      	adds	r3, r3, r7
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	3301      	adds	r3, #1
 80040fa:	1e5a      	subs	r2, r3, #1
 80040fc:	2198      	movs	r1, #152	@ 0x98
 80040fe:	0089      	lsls	r1, r1, #2
 8004100:	2018      	movs	r0, #24
 8004102:	1809      	adds	r1, r1, r0
 8004104:	19c9      	adds	r1, r1, r7
 8004106:	600a      	str	r2, [r1, #0]
 8004108:	001a      	movs	r2, r3
 800410a:	0015      	movs	r5, r2
 800410c:	2200      	movs	r2, #0
 800410e:	0016      	movs	r6, r2
 8004110:	0028      	movs	r0, r5
 8004112:	0031      	movs	r1, r6
 8004114:	0002      	movs	r2, r0
 8004116:	0f52      	lsrs	r2, r2, #29
 8004118:	000d      	movs	r5, r1
 800411a:	00ed      	lsls	r5, r5, #3
 800411c:	617d      	str	r5, [r7, #20]
 800411e:	697d      	ldr	r5, [r7, #20]
 8004120:	4315      	orrs	r5, r2
 8004122:	617d      	str	r5, [r7, #20]
 8004124:	0002      	movs	r2, r0
 8004126:	00d2      	lsls	r2, r2, #3
 8004128:	613a      	str	r2, [r7, #16]
 800412a:	001a      	movs	r2, r3
 800412c:	603a      	str	r2, [r7, #0]
 800412e:	2200      	movs	r2, #0
 8004130:	607a      	str	r2, [r7, #4]
 8004132:	6838      	ldr	r0, [r7, #0]
 8004134:	6879      	ldr	r1, [r7, #4]
 8004136:	0002      	movs	r2, r0
 8004138:	0f52      	lsrs	r2, r2, #29
 800413a:	000d      	movs	r5, r1
 800413c:	00ed      	lsls	r5, r5, #3
 800413e:	60fd      	str	r5, [r7, #12]
 8004140:	68fd      	ldr	r5, [r7, #12]
 8004142:	4315      	orrs	r5, r2
 8004144:	60fd      	str	r5, [r7, #12]
 8004146:	0002      	movs	r2, r0
 8004148:	00d2      	lsls	r2, r2, #3
 800414a:	60ba      	str	r2, [r7, #8]
 800414c:	3307      	adds	r3, #7
 800414e:	08db      	lsrs	r3, r3, #3
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	466a      	mov	r2, sp
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	469d      	mov	sp, r3
 8004158:	466b      	mov	r3, sp
 800415a:	3300      	adds	r3, #0
 800415c:	2597      	movs	r5, #151	@ 0x97
 800415e:	00ad      	lsls	r5, r5, #2
 8004160:	2218      	movs	r2, #24
 8004162:	18aa      	adds	r2, r5, r2
 8004164:	19d2      	adds	r2, r2, r7
 8004166:	6013      	str	r3, [r2, #0]
  strncpy(atCommand, atCommandBuff, len);
 8004168:	2318      	movs	r3, #24
 800416a:	18e3      	adds	r3, r4, r3
 800416c:	19db      	adds	r3, r3, r7
 800416e:	781a      	ldrb	r2, [r3, #0]
 8004170:	231c      	movs	r3, #28
 8004172:	18f9      	adds	r1, r7, r3
 8004174:	2318      	movs	r3, #24
 8004176:	18eb      	adds	r3, r5, r3
 8004178:	19db      	adds	r3, r3, r7
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	0018      	movs	r0, r3
 800417e:	f013 fe05 	bl	8017d8c <strncpy>
  SetCommandBuffer(atCommand);
 8004182:	2318      	movs	r3, #24
 8004184:	18eb      	adds	r3, r5, r3
 8004186:	19db      	adds	r3, r3, r7
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	0018      	movs	r0, r3
 800418c:	f7ff fc1e 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)){
 8004190:	2318      	movs	r3, #24
 8004192:	18e3      	adds	r3, r4, r3
 8004194:	19db      	adds	r3, r3, r7
 8004196:	781b      	ldrb	r3, [r3, #0]
 8004198:	b29a      	uxth	r2, r3
 800419a:	2318      	movs	r3, #24
 800419c:	18eb      	adds	r3, r5, r3
 800419e:	19db      	adds	r3, r3, r7
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7ff fad9 	bl	800375c <ESP_Send>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d001      	beq.n	80041b2 <HTTPCPOST+0x10e>
    return true;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e000      	b.n	80041b4 <HTTPCPOST+0x110>
  }
  else{
    return false;
 80041b2:	2300      	movs	r3, #0
 80041b4:	46c5      	mov	sp, r8
  }
}
 80041b6:	0018      	movs	r0, r3
 80041b8:	46bd      	mov	sp, r7
 80041ba:	23a0      	movs	r3, #160	@ 0xa0
 80041bc:	009b      	lsls	r3, r3, #2
 80041be:	449d      	add	sp, r3
 80041c0:	bc80      	pop	{r7}
 80041c2:	46b8      	mov	r8, r7
 80041c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80041c6:	46c0      	nop			@ (mov r8, r8)
 80041c8:	fffffd80 	.word	0xfffffd80
 80041cc:	00000266 	.word	0x00000266
 80041d0:	20000028 	.word	0x20000028
 80041d4:	0801abfc 	.word	0x0801abfc
 80041d8:	00000265 	.word	0x00000265

080041dc <SENDDATA>:
bool SENDDATA(){
 80041dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041de:	46c6      	mov	lr, r8
 80041e0:	b500      	push	{lr}
 80041e2:	4c4c      	ldr	r4, [pc, #304]	@ (8004314 <SENDDATA+0x138>)
 80041e4:	44a5      	add	sp, r4
 80041e6:	af04      	add	r7, sp, #16
 80041e8:	466b      	mov	r3, sp
 80041ea:	4698      	mov	r8, r3
  char atCommandBuff[656];
  memset(atCommandBuff, '\0', 656);
 80041ec:	23a4      	movs	r3, #164	@ 0xa4
 80041ee:	009a      	lsls	r2, r3, #2
 80041f0:	261c      	movs	r6, #28
 80041f2:	19bb      	adds	r3, r7, r6
 80041f4:	2100      	movs	r1, #0
 80041f6:	0018      	movs	r0, r3
 80041f8:	f013 fdc0 	bl	8017d7c <memset>
  sprintf(atCommandBuff,"[{%s}, {%s}, {%s}, {%s}, {%s}]", messagePart1, messagePart2, messagePart3, messagePart4, messagePart5);
 80041fc:	4a46      	ldr	r2, [pc, #280]	@ (8004318 <SENDDATA+0x13c>)
 80041fe:	4947      	ldr	r1, [pc, #284]	@ (800431c <SENDDATA+0x140>)
 8004200:	4847      	ldr	r0, [pc, #284]	@ (8004320 <SENDDATA+0x144>)
 8004202:	19be      	adds	r6, r7, r6
 8004204:	4b47      	ldr	r3, [pc, #284]	@ (8004324 <SENDDATA+0x148>)
 8004206:	9302      	str	r3, [sp, #8]
 8004208:	4b47      	ldr	r3, [pc, #284]	@ (8004328 <SENDDATA+0x14c>)
 800420a:	9301      	str	r3, [sp, #4]
 800420c:	4b47      	ldr	r3, [pc, #284]	@ (800432c <SENDDATA+0x150>)
 800420e:	9300      	str	r3, [sp, #0]
 8004210:	0013      	movs	r3, r2
 8004212:	000a      	movs	r2, r1
 8004214:	0001      	movs	r1, r0
 8004216:	0030      	movs	r0, r6
 8004218:	f013 fd0c 	bl	8017c34 <siprintf>
  uint16_t len = strlen(atCommandBuff);
 800421c:	231c      	movs	r3, #28
 800421e:	18fb      	adds	r3, r7, r3
 8004220:	0018      	movs	r0, r3
 8004222:	f7fb ff99 	bl	8000158 <strlen>
 8004226:	0002      	movs	r2, r0
 8004228:	4e41      	ldr	r6, [pc, #260]	@ (8004330 <SENDDATA+0x154>)
 800422a:	2018      	movs	r0, #24
 800422c:	1831      	adds	r1, r6, r0
 800422e:	19cb      	adds	r3, r1, r7
 8004230:	801a      	strh	r2, [r3, #0]
  char atCommand[len+1];
 8004232:	1832      	adds	r2, r6, r0
 8004234:	19d3      	adds	r3, r2, r7
 8004236:	881b      	ldrh	r3, [r3, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	1e5a      	subs	r2, r3, #1
 800423c:	21a6      	movs	r1, #166	@ 0xa6
 800423e:	0089      	lsls	r1, r1, #2
 8004240:	1809      	adds	r1, r1, r0
 8004242:	19c9      	adds	r1, r1, r7
 8004244:	600a      	str	r2, [r1, #0]
 8004246:	001a      	movs	r2, r3
 8004248:	60ba      	str	r2, [r7, #8]
 800424a:	2200      	movs	r2, #0
 800424c:	60fa      	str	r2, [r7, #12]
 800424e:	68b8      	ldr	r0, [r7, #8]
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	0002      	movs	r2, r0
 8004254:	0f52      	lsrs	r2, r2, #29
 8004256:	000e      	movs	r6, r1
 8004258:	00f6      	lsls	r6, r6, #3
 800425a:	617e      	str	r6, [r7, #20]
 800425c:	697e      	ldr	r6, [r7, #20]
 800425e:	4316      	orrs	r6, r2
 8004260:	617e      	str	r6, [r7, #20]
 8004262:	0002      	movs	r2, r0
 8004264:	00d2      	lsls	r2, r2, #3
 8004266:	613a      	str	r2, [r7, #16]
 8004268:	001a      	movs	r2, r3
 800426a:	603a      	str	r2, [r7, #0]
 800426c:	2200      	movs	r2, #0
 800426e:	607a      	str	r2, [r7, #4]
 8004270:	6838      	ldr	r0, [r7, #0]
 8004272:	6879      	ldr	r1, [r7, #4]
 8004274:	0002      	movs	r2, r0
 8004276:	0f52      	lsrs	r2, r2, #29
 8004278:	000e      	movs	r6, r1
 800427a:	00f5      	lsls	r5, r6, #3
 800427c:	4315      	orrs	r5, r2
 800427e:	0002      	movs	r2, r0
 8004280:	00d4      	lsls	r4, r2, #3
 8004282:	3307      	adds	r3, #7
 8004284:	08db      	lsrs	r3, r3, #3
 8004286:	00db      	lsls	r3, r3, #3
 8004288:	466a      	mov	r2, sp
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	469d      	mov	sp, r3
 800428e:	ab04      	add	r3, sp, #16
 8004290:	3300      	adds	r3, #0
 8004292:	21a5      	movs	r1, #165	@ 0xa5
 8004294:	0089      	lsls	r1, r1, #2
 8004296:	2018      	movs	r0, #24
 8004298:	180a      	adds	r2, r1, r0
 800429a:	19d2      	adds	r2, r2, r7
 800429c:	6013      	str	r3, [r2, #0]
  memset(atCommand, '\0', len+1);
 800429e:	4e24      	ldr	r6, [pc, #144]	@ (8004330 <SENDDATA+0x154>)
 80042a0:	1832      	adds	r2, r6, r0
 80042a2:	19d3      	adds	r3, r2, r7
 80042a4:	881b      	ldrh	r3, [r3, #0]
 80042a6:	3301      	adds	r3, #1
 80042a8:	001a      	movs	r2, r3
 80042aa:	000c      	movs	r4, r1
 80042ac:	0005      	movs	r5, r0
 80042ae:	1821      	adds	r1, r4, r0
 80042b0:	19cb      	adds	r3, r1, r7
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2100      	movs	r1, #0
 80042b6:	0018      	movs	r0, r3
 80042b8:	f013 fd60 	bl	8017d7c <memset>
  strncpy(atCommand, atCommandBuff, len);
 80042bc:	0028      	movs	r0, r5
 80042be:	1832      	adds	r2, r6, r0
 80042c0:	19d3      	adds	r3, r2, r7
 80042c2:	881a      	ldrh	r2, [r3, #0]
 80042c4:	231c      	movs	r3, #28
 80042c6:	18f9      	adds	r1, r7, r3
 80042c8:	0005      	movs	r5, r0
 80042ca:	1963      	adds	r3, r4, r5
 80042cc:	19db      	adds	r3, r3, r7
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	0018      	movs	r0, r3
 80042d2:	f013 fd5b 	bl	8017d8c <strncpy>
  SetCommandBuffer(atCommand);
 80042d6:	1963      	adds	r3, r4, r5
 80042d8:	19db      	adds	r3, r3, r7
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	0018      	movs	r0, r3
 80042de:	f7ff fb75 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, len)) {
 80042e2:	0028      	movs	r0, r5
 80042e4:	1833      	adds	r3, r6, r0
 80042e6:	19db      	adds	r3, r3, r7
 80042e8:	881a      	ldrh	r2, [r3, #0]
 80042ea:	1823      	adds	r3, r4, r0
 80042ec:	19db      	adds	r3, r3, r7
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	0011      	movs	r1, r2
 80042f2:	0018      	movs	r0, r3
 80042f4:	f7ff fa32 	bl	800375c <ESP_Send>
 80042f8:	1e03      	subs	r3, r0, #0
 80042fa:	d001      	beq.n	8004300 <SENDDATA+0x124>
    return true;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <SENDDATA+0x126>
  }
  else{
    return false;
 8004300:	2300      	movs	r3, #0
 8004302:	46c5      	mov	sp, r8
  }
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	23ae      	movs	r3, #174	@ 0xae
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	449d      	add	sp, r3
 800430e:	bc80      	pop	{r7}
 8004310:	46b8      	mov	r8, r7
 8004312:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004314:	fffffd38 	.word	0xfffffd38
 8004318:	20000668 	.word	0x20000668
 800431c:	200005e8 	.word	0x200005e8
 8004320:	0801ac34 	.word	0x0801ac34
 8004324:	200007e8 	.word	0x200007e8
 8004328:	20000768 	.word	0x20000768
 800432c:	200006e8 	.word	0x200006e8
 8004330:	0000029e 	.word	0x0000029e

08004334 <SLEEP>:
bool SLEEP(){
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 800433a:	4b0d      	ldr	r3, [pc, #52]	@ (8004370 <SLEEP+0x3c>)
 800433c:	607b      	str	r3, [r7, #4]
  SetCommandBuffer(atCommand);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	0018      	movs	r0, r3
 8004342:	f7ff fb43 	bl	80039cc <SetCommandBuffer>
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	0018      	movs	r0, r3
 800434a:	f7fb ff05 	bl	8000158 <strlen>
 800434e:	0003      	movs	r3, r0
 8004350:	b29a      	uxth	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	0011      	movs	r1, r2
 8004356:	0018      	movs	r0, r3
 8004358:	f7ff fa00 	bl	800375c <ESP_Send>
 800435c:	1e03      	subs	r3, r0, #0
 800435e:	d001      	beq.n	8004364 <SLEEP+0x30>
    return true;
 8004360:	2301      	movs	r3, #1
 8004362:	e000      	b.n	8004366 <SLEEP+0x32>
  }
  else{
    return false;
 8004364:	2300      	movs	r3, #0
  }
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b002      	add	sp, #8
 800436c:	bd80      	pop	{r7, pc}
 800436e:	46c0      	nop			@ (mov r8, r8)
 8004370:	0801ac54 	.word	0x0801ac54

08004374 <DMA_ProcessBuffer>:

uint8_t DMA_ProcessBuffer(uint8_t expectation) {
 8004374:	b5b0      	push	{r4, r5, r7, lr}
 8004376:	b084      	sub	sp, #16
 8004378:	af00      	add	r7, sp, #0
 800437a:	0002      	movs	r2, r0
 800437c:	1dfb      	adds	r3, r7, #7
 800437e:	701a      	strb	r2, [r3, #0]
    uint8_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004380:	4b4c      	ldr	r3, [pc, #304]	@ (80044b4 <DMA_ProcessBuffer+0x140>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	b2da      	uxtb	r2, r3
 8004388:	210e      	movs	r1, #14
 800438a:	187b      	adds	r3, r7, r1
 800438c:	43d2      	mvns	r2, r2
 800438e:	701a      	strb	r2, [r3, #0]
    uint8_t status = RECEIVE_STATUS_INCOMPLETE;
 8004390:	200f      	movs	r0, #15
 8004392:	183b      	adds	r3, r7, r0
 8004394:	2203      	movs	r2, #3
 8004396:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
      pos = ESP_MAX_BUFFER_SIZE;
    }
    if(pos == OldPos){
 8004398:	4b47      	ldr	r3, [pc, #284]	@ (80044b8 <DMA_ProcessBuffer+0x144>)
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	b2db      	uxtb	r3, r3
 800439e:	187a      	adds	r2, r7, r1
 80043a0:	7812      	ldrb	r2, [r2, #0]
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d129      	bne.n	80043fa <DMA_ProcessBuffer+0x86>
      if(retry >4){
 80043a6:	4b45      	ldr	r3, [pc, #276]	@ (80044bc <DMA_ProcessBuffer+0x148>)
 80043a8:	781b      	ldrb	r3, [r3, #0]
 80043aa:	2b04      	cmp	r3, #4
 80043ac:	d913      	bls.n	80043d6 <DMA_ProcessBuffer+0x62>
        retry = 0;
 80043ae:	4b43      	ldr	r3, [pc, #268]	@ (80044bc <DMA_ProcessBuffer+0x148>)
 80043b0:	2200      	movs	r2, #0
 80043b2:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80043b4:	4b42      	ldr	r3, [pc, #264]	@ (80044c0 <DMA_ProcessBuffer+0x14c>)
 80043b6:	781b      	ldrb	r3, [r3, #0]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <DMA_ProcessBuffer+0x58>
 80043bc:	4b41      	ldr	r3, [pc, #260]	@ (80044c4 <DMA_ProcessBuffer+0x150>)
 80043be:	781b      	ldrb	r3, [r3, #0]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d003      	beq.n	80043cc <DMA_ProcessBuffer+0x58>
          status = RECEIVE_STATUS_UNPROGGED;
 80043c4:	183b      	adds	r3, r7, r0
 80043c6:	2207      	movs	r2, #7
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e016      	b.n	80043fa <DMA_ProcessBuffer+0x86>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80043cc:	230f      	movs	r3, #15
 80043ce:	18fb      	adds	r3, r7, r3
 80043d0:	2206      	movs	r2, #6
 80043d2:	701a      	strb	r2, [r3, #0]
 80043d4:	e011      	b.n	80043fa <DMA_ProcessBuffer+0x86>
        }
      }
     else{
       retry ++;
 80043d6:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <DMA_ProcessBuffer+0x148>)
 80043d8:	781b      	ldrb	r3, [r3, #0]
 80043da:	3301      	adds	r3, #1
 80043dc:	b2da      	uxtb	r2, r3
 80043de:	4b37      	ldr	r3, [pc, #220]	@ (80044bc <DMA_ProcessBuffer+0x148>)
 80043e0:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 80043e2:	f004 fe41 	bl	8009068 <HAL_GetTick>
 80043e6:	0003      	movs	r3, r0
 80043e8:	33f5      	adds	r3, #245	@ 0xf5
 80043ea:	33ff      	adds	r3, #255	@ 0xff
 80043ec:	001a      	movs	r2, r3
 80043ee:	4b36      	ldr	r3, [pc, #216]	@ (80044c8 <DMA_ProcessBuffer+0x154>)
 80043f0:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 80043f2:	230f      	movs	r3, #15
 80043f4:	18fb      	adds	r3, r7, r3
 80043f6:	2204      	movs	r2, #4
 80043f8:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 80043fa:	4b2f      	ldr	r3, [pc, #188]	@ (80044b8 <DMA_ProcessBuffer+0x144>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	210e      	movs	r1, #14
 8004402:	187a      	adds	r2, r7, r1
 8004404:	7812      	ldrb	r2, [r2, #0]
 8004406:	429a      	cmp	r2, r3
 8004408:	d048      	beq.n	800449c <DMA_ProcessBuffer+0x128>
      retry = 0;
 800440a:	4b2c      	ldr	r3, [pc, #176]	@ (80044bc <DMA_ProcessBuffer+0x148>)
 800440c:	2200      	movs	r2, #0
 800440e:	701a      	strb	r2, [r3, #0]
        if (pos > OldPos) {
 8004410:	4b29      	ldr	r3, [pc, #164]	@ (80044b8 <DMA_ProcessBuffer+0x144>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	187a      	adds	r2, r7, r1
 8004418:	7812      	ldrb	r2, [r2, #0]
 800441a:	429a      	cmp	r2, r3
 800441c:	d917      	bls.n	800444e <DMA_ProcessBuffer+0xda>
            // Direct parsing
            status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800441e:	4b26      	ldr	r3, [pc, #152]	@ (80044b8 <DMA_ProcessBuffer+0x144>)
 8004420:	781b      	ldrb	r3, [r3, #0]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	001a      	movs	r2, r3
 8004426:	4b29      	ldr	r3, [pc, #164]	@ (80044cc <DMA_ProcessBuffer+0x158>)
 8004428:	18d0      	adds	r0, r2, r3
 800442a:	187b      	adds	r3, r7, r1
 800442c:	781b      	ldrb	r3, [r3, #0]
 800442e:	b29b      	uxth	r3, r3
 8004430:	4a21      	ldr	r2, [pc, #132]	@ (80044b8 <DMA_ProcessBuffer+0x144>)
 8004432:	7812      	ldrb	r2, [r2, #0]
 8004434:	b2d2      	uxtb	r2, r2
 8004436:	1a9b      	subs	r3, r3, r2
 8004438:	b299      	uxth	r1, r3
 800443a:	230f      	movs	r3, #15
 800443c:	18fc      	adds	r4, r7, r3
 800443e:	1dfb      	adds	r3, r7, #7
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	001a      	movs	r2, r3
 8004444:	f7ff fb0c 	bl	8003a60 <ParseBuffer>
 8004448:	0003      	movs	r3, r0
 800444a:	7023      	strb	r3, [r4, #0]
 800444c:	e026      	b.n	800449c <DMA_ProcessBuffer+0x128>
              //memset(RxBuffer, 0, ESP_MAX_BUFFER_SIZE);
              //pos = 0;
            }
        } else {
            // Buffer wrap-around
            status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 800444e:	4b1a      	ldr	r3, [pc, #104]	@ (80044b8 <DMA_ProcessBuffer+0x144>)
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	b2db      	uxtb	r3, r3
 8004454:	001a      	movs	r2, r3
 8004456:	4b1d      	ldr	r3, [pc, #116]	@ (80044cc <DMA_ProcessBuffer+0x158>)
 8004458:	18d0      	adds	r0, r2, r3
 800445a:	4b17      	ldr	r3, [pc, #92]	@ (80044b8 <DMA_ProcessBuffer+0x144>)
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	b2db      	uxtb	r3, r3
 8004460:	001a      	movs	r2, r3
 8004462:	23ff      	movs	r3, #255	@ 0xff
 8004464:	1a9b      	subs	r3, r3, r2
 8004466:	b299      	uxth	r1, r3
 8004468:	250f      	movs	r5, #15
 800446a:	197c      	adds	r4, r7, r5
 800446c:	1dfb      	adds	r3, r7, #7
 800446e:	781b      	ldrb	r3, [r3, #0]
 8004470:	001a      	movs	r2, r3
 8004472:	f7ff faf5 	bl	8003a60 <ParseBuffer>
 8004476:	0003      	movs	r3, r0
 8004478:	7023      	strb	r3, [r4, #0]
            if (pos > 0) {
 800447a:	220e      	movs	r2, #14
 800447c:	18bb      	adds	r3, r7, r2
 800447e:	781b      	ldrb	r3, [r3, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00b      	beq.n	800449c <DMA_ProcessBuffer+0x128>
                status = ParseBuffer(&RxBuffer[0], pos, expectation);
 8004484:	18bb      	adds	r3, r7, r2
 8004486:	781b      	ldrb	r3, [r3, #0]
 8004488:	b299      	uxth	r1, r3
 800448a:	197c      	adds	r4, r7, r5
 800448c:	1dfb      	adds	r3, r7, #7
 800448e:	781a      	ldrb	r2, [r3, #0]
 8004490:	4b0e      	ldr	r3, [pc, #56]	@ (80044cc <DMA_ProcessBuffer+0x158>)
 8004492:	0018      	movs	r0, r3
 8004494:	f7ff fae4 	bl	8003a60 <ParseBuffer>
 8004498:	0003      	movs	r3, r0
 800449a:	7023      	strb	r3, [r4, #0]
            }
        }
    }
    OldPos = pos;
 800449c:	4b06      	ldr	r3, [pc, #24]	@ (80044b8 <DMA_ProcessBuffer+0x144>)
 800449e:	220e      	movs	r2, #14
 80044a0:	18ba      	adds	r2, r7, r2
 80044a2:	7812      	ldrb	r2, [r2, #0]
 80044a4:	701a      	strb	r2, [r3, #0]
    return status;
 80044a6:	230f      	movs	r3, #15
 80044a8:	18fb      	adds	r3, r7, r3
 80044aa:	781b      	ldrb	r3, [r3, #0]
}
 80044ac:	0018      	movs	r0, r3
 80044ae:	46bd      	mov	sp, r7
 80044b0:	b004      	add	sp, #16
 80044b2:	bdb0      	pop	{r4, r5, r7, pc}
 80044b4:	20001e08 	.word	0x20001e08
 80044b8:	20000873 	.word	0x20000873
 80044bc:	20000878 	.word	0x20000878
 80044c0:	20000a7e 	.word	0x20000a7e
 80044c4:	20000002 	.word	0x20000002
 80044c8:	20000874 	.word	0x20000874
 80044cc:	200004d0 	.word	0x200004d0

080044d0 <ATCompare>:

//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b084      	sub	sp, #16
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	0002      	movs	r2, r0
 80044d8:	1dfb      	adds	r3, r7, #7
 80044da:	701a      	strb	r2, [r3, #0]
 80044dc:	1dbb      	adds	r3, r7, #6
 80044de:	1c0a      	adds	r2, r1, #0
 80044e0:	701a      	strb	r2, [r3, #0]
  bool value = false;
 80044e2:	210f      	movs	r1, #15
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	2200      	movs	r2, #0
 80044e8:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 80044ea:	1dbb      	adds	r3, r7, #6
 80044ec:	781b      	ldrb	r3, [r3, #0]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d105      	bne.n	80044fe <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 80044f2:	187b      	adds	r3, r7, r1
 80044f4:	1dfa      	adds	r2, r7, #7
 80044f6:	7812      	ldrb	r2, [r2, #0]
 80044f8:	4251      	negs	r1, r2
 80044fa:	414a      	adcs	r2, r1
 80044fc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 80044fe:	1dbb      	adds	r3, r7, #6
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	2b01      	cmp	r3, #1
 8004504:	d107      	bne.n	8004516 <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004506:	230f      	movs	r3, #15
 8004508:	18fb      	adds	r3, r7, r3
 800450a:	1dfa      	adds	r2, r7, #7
 800450c:	7812      	ldrb	r2, [r2, #0]
 800450e:	3a02      	subs	r2, #2
 8004510:	4251      	negs	r1, r2
 8004512:	414a      	adcs	r2, r1
 8004514:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004516:	1dbb      	adds	r3, r7, #6
 8004518:	781b      	ldrb	r3, [r3, #0]
 800451a:	2b02      	cmp	r3, #2
 800451c:	d107      	bne.n	800452e <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 800451e:	230f      	movs	r3, #15
 8004520:	18fb      	adds	r3, r7, r3
 8004522:	1dfa      	adds	r2, r7, #7
 8004524:	7812      	ldrb	r2, [r2, #0]
 8004526:	3a05      	subs	r2, #5
 8004528:	4251      	negs	r1, r2
 800452a:	414a      	adcs	r2, r1
 800452c:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 800452e:	230f      	movs	r3, #15
 8004530:	18fb      	adds	r3, r7, r3
 8004532:	781b      	ldrb	r3, [r3, #0]
}
 8004534:	0018      	movs	r0, r3
 8004536:	46bd      	mov	sp, r7
 8004538:	b004      	add	sp, #16
 800453a:	bd80      	pop	{r7, pc}

0800453c <AT_Send>:

bool AT_Send(AT_Commands state){
 800453c:	b590      	push	{r4, r7, lr}
 800453e:	b085      	sub	sp, #20
 8004540:	af00      	add	r7, sp, #0
 8004542:	0002      	movs	r2, r0
 8004544:	1dfb      	adds	r3, r7, #7
 8004546:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004548:	230f      	movs	r3, #15
 800454a:	18fb      	adds	r3, r7, r3
 800454c:	2200      	movs	r2, #0
 800454e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004550:	1dfb      	adds	r3, r7, #7
 8004552:	781b      	ldrb	r3, [r3, #0]
 8004554:	2b0e      	cmp	r3, #14
 8004556:	d900      	bls.n	800455a <AT_Send+0x1e>
 8004558:	e136      	b.n	80047c8 <AT_Send+0x28c>
 800455a:	009a      	lsls	r2, r3, #2
 800455c:	4b9e      	ldr	r3, [pc, #632]	@ (80047d8 <AT_Send+0x29c>)
 800455e:	18d3      	adds	r3, r2, r3
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004564:	4b9d      	ldr	r3, [pc, #628]	@ (80047dc <AT_Send+0x2a0>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	0018      	movs	r0, r3
 800456a:	f004 f92f 	bl	80087cc <TimestampIsReached>
 800456e:	1e03      	subs	r3, r0, #0
 8004570:	d100      	bne.n	8004574 <AT_Send+0x38>
 8004572:	e128      	b.n	80047c6 <AT_Send+0x28a>
    ATCommandSend = PollAwake();
 8004574:	230f      	movs	r3, #15
 8004576:	18fc      	adds	r4, r7, r3
 8004578:	f7ff fbb4 	bl	8003ce4 <PollAwake>
 800457c:	0003      	movs	r3, r0
 800457e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004580:	f004 fd72 	bl	8009068 <HAL_GetTick>
 8004584:	0003      	movs	r3, r0
 8004586:	3332      	adds	r3, #50	@ 0x32
 8004588:	001a      	movs	r2, r3
 800458a:	4b94      	ldr	r3, [pc, #592]	@ (80047dc <AT_Send+0x2a0>)
 800458c:	601a      	str	r2, [r3, #0]
  }
  break;
 800458e:	e11a      	b.n	80047c6 <AT_Send+0x28a>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004590:	4a93      	ldr	r2, [pc, #588]	@ (80047e0 <AT_Send+0x2a4>)
 8004592:	4b94      	ldr	r3, [pc, #592]	@ (80047e4 <AT_Send+0x2a8>)
 8004594:	0019      	movs	r1, r3
 8004596:	2003      	movs	r0, #3
 8004598:	f004 f96e 	bl	8008878 <CreateLine>
    ATCommandSend = RFPower();
 800459c:	230f      	movs	r3, #15
 800459e:	18fc      	adds	r4, r7, r3
 80045a0:	f7ff fbc0 	bl	8003d24 <RFPower>
 80045a4:	0003      	movs	r3, r0
 80045a6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045a8:	f004 fd5e 	bl	8009068 <HAL_GetTick>
 80045ac:	0003      	movs	r3, r0
 80045ae:	330a      	adds	r3, #10
 80045b0:	001a      	movs	r2, r3
 80045b2:	4b8a      	ldr	r3, [pc, #552]	@ (80047dc <AT_Send+0x2a0>)
 80045b4:	601a      	str	r2, [r3, #0]
    break;
 80045b6:	e107      	b.n	80047c8 <AT_Send+0x28c>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 80045b8:	4a8b      	ldr	r2, [pc, #556]	@ (80047e8 <AT_Send+0x2ac>)
 80045ba:	4b8a      	ldr	r3, [pc, #552]	@ (80047e4 <AT_Send+0x2a8>)
 80045bc:	0019      	movs	r1, r3
 80045be:	2003      	movs	r0, #3
 80045c0:	f004 f95a 	bl	8008878 <CreateLine>
    ATCommandSend = CheckRFPower();
 80045c4:	230f      	movs	r3, #15
 80045c6:	18fc      	adds	r4, r7, r3
 80045c8:	f7ff fbcc 	bl	8003d64 <CheckRFPower>
 80045cc:	0003      	movs	r3, r0
 80045ce:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80045d0:	f004 fd4a 	bl	8009068 <HAL_GetTick>
 80045d4:	0003      	movs	r3, r0
 80045d6:	330a      	adds	r3, #10
 80045d8:	001a      	movs	r2, r3
 80045da:	4b80      	ldr	r3, [pc, #512]	@ (80047dc <AT_Send+0x2a0>)
 80045dc:	601a      	str	r2, [r3, #0]
    break;
 80045de:	e0f3      	b.n	80047c8 <AT_Send+0x28c>

  case AT_RESTORE:
    Debug("Restoring ESP");
 80045e0:	4a82      	ldr	r2, [pc, #520]	@ (80047ec <AT_Send+0x2b0>)
 80045e2:	4b80      	ldr	r3, [pc, #512]	@ (80047e4 <AT_Send+0x2a8>)
 80045e4:	0019      	movs	r1, r3
 80045e6:	2003      	movs	r0, #3
 80045e8:	f004 f946 	bl	8008878 <CreateLine>
    ATCommandSend = ATRestore();
 80045ec:	230f      	movs	r3, #15
 80045ee:	18fc      	adds	r4, r7, r3
 80045f0:	f7ff fbd8 	bl	8003da4 <ATRestore>
 80045f4:	0003      	movs	r3, r0
 80045f6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 80045f8:	f004 fd36 	bl	8009068 <HAL_GetTick>
 80045fc:	0003      	movs	r3, r0
 80045fe:	3332      	adds	r3, #50	@ 0x32
 8004600:	001a      	movs	r2, r3
 8004602:	4b76      	ldr	r3, [pc, #472]	@ (80047dc <AT_Send+0x2a0>)
 8004604:	601a      	str	r2, [r3, #0]
    break;
 8004606:	e0df      	b.n	80047c8 <AT_Send+0x28c>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004608:	4a79      	ldr	r2, [pc, #484]	@ (80047f0 <AT_Send+0x2b4>)
 800460a:	4b76      	ldr	r3, [pc, #472]	@ (80047e4 <AT_Send+0x2a8>)
 800460c:	0019      	movs	r1, r3
 800460e:	2003      	movs	r0, #3
 8004610:	f004 f932 	bl	8008878 <CreateLine>
    ATCommandSend = CWINIT();
 8004614:	230f      	movs	r3, #15
 8004616:	18fc      	adds	r4, r7, r3
 8004618:	f7ff fbe4 	bl	8003de4 <CWINIT>
 800461c:	0003      	movs	r3, r0
 800461e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004620:	f004 fd22 	bl	8009068 <HAL_GetTick>
 8004624:	0003      	movs	r3, r0
 8004626:	33f5      	adds	r3, #245	@ 0xf5
 8004628:	33ff      	adds	r3, #255	@ 0xff
 800462a:	001a      	movs	r2, r3
 800462c:	4b6b      	ldr	r3, [pc, #428]	@ (80047dc <AT_Send+0x2a0>)
 800462e:	601a      	str	r2, [r3, #0]
    break;
 8004630:	e0ca      	b.n	80047c8 <AT_Send+0x28c>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004632:	4a70      	ldr	r2, [pc, #448]	@ (80047f4 <AT_Send+0x2b8>)
 8004634:	4b6b      	ldr	r3, [pc, #428]	@ (80047e4 <AT_Send+0x2a8>)
 8004636:	0019      	movs	r1, r3
 8004638:	2003      	movs	r0, #3
 800463a:	f004 f91d 	bl	8008878 <CreateLine>
    ATCommandSend = CWMODE1();
 800463e:	230f      	movs	r3, #15
 8004640:	18fc      	adds	r4, r7, r3
 8004642:	f7ff fbef 	bl	8003e24 <CWMODE1>
 8004646:	0003      	movs	r3, r0
 8004648:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800464a:	f004 fd0d 	bl	8009068 <HAL_GetTick>
 800464e:	0003      	movs	r3, r0
 8004650:	330a      	adds	r3, #10
 8004652:	001a      	movs	r2, r3
 8004654:	4b61      	ldr	r3, [pc, #388]	@ (80047dc <AT_Send+0x2a0>)
 8004656:	601a      	str	r2, [r3, #0]
    break;
 8004658:	e0b6      	b.n	80047c8 <AT_Send+0x28c>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 800465a:	4a67      	ldr	r2, [pc, #412]	@ (80047f8 <AT_Send+0x2bc>)
 800465c:	4b61      	ldr	r3, [pc, #388]	@ (80047e4 <AT_Send+0x2a8>)
 800465e:	0019      	movs	r1, r3
 8004660:	2003      	movs	r0, #3
 8004662:	f004 f909 	bl	8008878 <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004666:	230f      	movs	r3, #15
 8004668:	18fc      	adds	r4, r7, r3
 800466a:	f7ff fbfb 	bl	8003e64 <CWAUTOCONN>
 800466e:	0003      	movs	r3, r0
 8004670:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004672:	f004 fcf9 	bl	8009068 <HAL_GetTick>
 8004676:	0003      	movs	r3, r0
 8004678:	330a      	adds	r3, #10
 800467a:	001a      	movs	r2, r3
 800467c:	4b57      	ldr	r3, [pc, #348]	@ (80047dc <AT_Send+0x2a0>)
 800467e:	601a      	str	r2, [r3, #0]
    break;
 8004680:	e0a2      	b.n	80047c8 <AT_Send+0x28c>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004682:	4a5e      	ldr	r2, [pc, #376]	@ (80047fc <AT_Send+0x2c0>)
 8004684:	4b57      	ldr	r3, [pc, #348]	@ (80047e4 <AT_Send+0x2a8>)
 8004686:	0019      	movs	r1, r3
 8004688:	2003      	movs	r0, #3
 800468a:	f004 f8f5 	bl	8008878 <CreateLine>
    ATCommandSend = CWJAP();
 800468e:	230f      	movs	r3, #15
 8004690:	18fc      	adds	r4, r7, r3
 8004692:	f7ff fc07 	bl	8003ea4 <CWJAP>
 8004696:	0003      	movs	r3, r0
 8004698:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 800469a:	f004 fce5 	bl	8009068 <HAL_GetTick>
 800469e:	0003      	movs	r3, r0
 80046a0:	3332      	adds	r3, #50	@ 0x32
 80046a2:	001a      	movs	r2, r3
 80046a4:	4b4d      	ldr	r3, [pc, #308]	@ (80047dc <AT_Send+0x2a0>)
 80046a6:	601a      	str	r2, [r3, #0]
    break;
 80046a8:	e08e      	b.n	80047c8 <AT_Send+0x28c>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 80046aa:	4a55      	ldr	r2, [pc, #340]	@ (8004800 <AT_Send+0x2c4>)
 80046ac:	4b4d      	ldr	r3, [pc, #308]	@ (80047e4 <AT_Send+0x2a8>)
 80046ae:	0019      	movs	r1, r3
 80046b0:	2003      	movs	r0, #3
 80046b2:	f004 f8e1 	bl	8008878 <CreateLine>
    ATCommandSend = CWMODE3();
 80046b6:	230f      	movs	r3, #15
 80046b8:	18fc      	adds	r4, r7, r3
 80046ba:	f7ff fc73 	bl	8003fa4 <CWMODE3>
 80046be:	0003      	movs	r3, r0
 80046c0:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046c2:	f004 fcd1 	bl	8009068 <HAL_GetTick>
 80046c6:	0003      	movs	r3, r0
 80046c8:	330a      	adds	r3, #10
 80046ca:	001a      	movs	r2, r3
 80046cc:	4b43      	ldr	r3, [pc, #268]	@ (80047dc <AT_Send+0x2a0>)
 80046ce:	601a      	str	r2, [r3, #0]
    break;
 80046d0:	e07a      	b.n	80047c8 <AT_Send+0x28c>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 80046d2:	4a4c      	ldr	r2, [pc, #304]	@ (8004804 <AT_Send+0x2c8>)
 80046d4:	4b43      	ldr	r3, [pc, #268]	@ (80047e4 <AT_Send+0x2a8>)
 80046d6:	0019      	movs	r1, r3
 80046d8:	2003      	movs	r0, #3
 80046da:	f004 f8cd 	bl	8008878 <CreateLine>
    ATCommandSend = CWSAP();
 80046de:	230f      	movs	r3, #15
 80046e0:	18fc      	adds	r4, r7, r3
 80046e2:	f7ff fc7f 	bl	8003fe4 <CWSAP>
 80046e6:	0003      	movs	r3, r0
 80046e8:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80046ea:	f004 fcbd 	bl	8009068 <HAL_GetTick>
 80046ee:	0003      	movs	r3, r0
 80046f0:	330a      	adds	r3, #10
 80046f2:	001a      	movs	r2, r3
 80046f4:	4b39      	ldr	r3, [pc, #228]	@ (80047dc <AT_Send+0x2a0>)
 80046f6:	601a      	str	r2, [r3, #0]
    break;
 80046f8:	e066      	b.n	80047c8 <AT_Send+0x28c>

  case AT_CIPMUX:
    Debug("SET multiple communication channels");
 80046fa:	4a43      	ldr	r2, [pc, #268]	@ (8004808 <AT_Send+0x2cc>)
 80046fc:	4b39      	ldr	r3, [pc, #228]	@ (80047e4 <AT_Send+0x2a8>)
 80046fe:	0019      	movs	r1, r3
 8004700:	2003      	movs	r0, #3
 8004702:	f004 f8b9 	bl	8008878 <CreateLine>
    ATCommandSend = CIPMUX();
 8004706:	230f      	movs	r3, #15
 8004708:	18fc      	adds	r4, r7, r3
 800470a:	f7ff fc8b 	bl	8004024 <CIPMUX>
 800470e:	0003      	movs	r3, r0
 8004710:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004712:	f004 fca9 	bl	8009068 <HAL_GetTick>
 8004716:	0003      	movs	r3, r0
 8004718:	330a      	adds	r3, #10
 800471a:	001a      	movs	r2, r3
 800471c:	4b2f      	ldr	r3, [pc, #188]	@ (80047dc <AT_Send+0x2a0>)
 800471e:	601a      	str	r2, [r3, #0]
    break;
 8004720:	e052      	b.n	80047c8 <AT_Send+0x28c>

  case AT_WEBSERVER:
    Debug("SET in station/soft-ap mode");
 8004722:	4a37      	ldr	r2, [pc, #220]	@ (8004800 <AT_Send+0x2c4>)
 8004724:	4b2f      	ldr	r3, [pc, #188]	@ (80047e4 <AT_Send+0x2a8>)
 8004726:	0019      	movs	r1, r3
 8004728:	2003      	movs	r0, #3
 800472a:	f004 f8a5 	bl	8008878 <CreateLine>
    ATCommandSend = WEBSERVER();
 800472e:	230f      	movs	r3, #15
 8004730:	18fc      	adds	r4, r7, r3
 8004732:	f7ff fc97 	bl	8004064 <WEBSERVER>
 8004736:	0003      	movs	r3, r0
 8004738:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 800473a:	f004 fc95 	bl	8009068 <HAL_GetTick>
 800473e:	0003      	movs	r3, r0
 8004740:	330a      	adds	r3, #10
 8004742:	001a      	movs	r2, r3
 8004744:	4b25      	ldr	r3, [pc, #148]	@ (80047dc <AT_Send+0x2a0>)
 8004746:	601a      	str	r2, [r3, #0]
    break;
 8004748:	e03e      	b.n	80047c8 <AT_Send+0x28c>

  case AT_HTTPCPOST:
    Debug("SET in station/soft-ap mode");
 800474a:	4a2d      	ldr	r2, [pc, #180]	@ (8004800 <AT_Send+0x2c4>)
 800474c:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <AT_Send+0x2a8>)
 800474e:	0019      	movs	r1, r3
 8004750:	2003      	movs	r0, #3
 8004752:	f004 f891 	bl	8008878 <CreateLine>
    ATCommandSend = HTTPCPOST();
 8004756:	230f      	movs	r3, #15
 8004758:	18fc      	adds	r4, r7, r3
 800475a:	f7ff fca3 	bl	80040a4 <HTTPCPOST>
 800475e:	0003      	movs	r3, r0
 8004760:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004762:	f004 fc81 	bl	8009068 <HAL_GetTick>
 8004766:	0003      	movs	r3, r0
 8004768:	33f5      	adds	r3, #245	@ 0xf5
 800476a:	33ff      	adds	r3, #255	@ 0xff
 800476c:	001a      	movs	r2, r3
 800476e:	4b1b      	ldr	r3, [pc, #108]	@ (80047dc <AT_Send+0x2a0>)
 8004770:	601a      	str	r2, [r3, #0]
    break;
 8004772:	e029      	b.n	80047c8 <AT_Send+0x28c>

  case AT_SENDDATA:
    Debug("Send the data");
 8004774:	4a25      	ldr	r2, [pc, #148]	@ (800480c <AT_Send+0x2d0>)
 8004776:	4b1b      	ldr	r3, [pc, #108]	@ (80047e4 <AT_Send+0x2a8>)
 8004778:	0019      	movs	r1, r3
 800477a:	2003      	movs	r0, #3
 800477c:	f004 f87c 	bl	8008878 <CreateLine>
    ATCommandSend = SENDDATA();
 8004780:	230f      	movs	r3, #15
 8004782:	18fc      	adds	r4, r7, r3
 8004784:	f7ff fd2a 	bl	80041dc <SENDDATA>
 8004788:	0003      	movs	r3, r0
 800478a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 800478c:	f004 fc6c 	bl	8009068 <HAL_GetTick>
 8004790:	0003      	movs	r3, r0
 8004792:	33f5      	adds	r3, #245	@ 0xf5
 8004794:	33ff      	adds	r3, #255	@ 0xff
 8004796:	001a      	movs	r2, r3
 8004798:	4b10      	ldr	r3, [pc, #64]	@ (80047dc <AT_Send+0x2a0>)
 800479a:	601a      	str	r2, [r3, #0]
    break;
 800479c:	e014      	b.n	80047c8 <AT_Send+0x28c>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 800479e:	4a1c      	ldr	r2, [pc, #112]	@ (8004810 <AT_Send+0x2d4>)
 80047a0:	4b10      	ldr	r3, [pc, #64]	@ (80047e4 <AT_Send+0x2a8>)
 80047a2:	0019      	movs	r1, r3
 80047a4:	2003      	movs	r0, #3
 80047a6:	f004 f867 	bl	8008878 <CreateLine>
    ATCommandSend = SLEEP();
 80047aa:	230f      	movs	r3, #15
 80047ac:	18fc      	adds	r4, r7, r3
 80047ae:	f7ff fdc1 	bl	8004334 <SLEEP>
 80047b2:	0003      	movs	r3, r0
 80047b4:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 80047b6:	f004 fc57 	bl	8009068 <HAL_GetTick>
 80047ba:	0003      	movs	r3, r0
 80047bc:	330a      	adds	r3, #10
 80047be:	001a      	movs	r2, r3
 80047c0:	4b06      	ldr	r3, [pc, #24]	@ (80047dc <AT_Send+0x2a0>)
 80047c2:	601a      	str	r2, [r3, #0]
    break;
 80047c4:	e000      	b.n	80047c8 <AT_Send+0x28c>
  break;
 80047c6:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 80047c8:	230f      	movs	r3, #15
 80047ca:	18fb      	adds	r3, r7, r3
 80047cc:	781b      	ldrb	r3, [r3, #0]
}
 80047ce:	0018      	movs	r0, r3
 80047d0:	46bd      	mov	sp, r7
 80047d2:	b005      	add	sp, #20
 80047d4:	bd90      	pop	{r4, r7, pc}
 80047d6:	46c0      	nop			@ (mov r8, r8)
 80047d8:	0801b3c8 	.word	0x0801b3c8
 80047dc:	20000874 	.word	0x20000874
 80047e0:	0801ac64 	.word	0x0801ac64
 80047e4:	0801a970 	.word	0x0801a970
 80047e8:	0801ac78 	.word	0x0801ac78
 80047ec:	0801ac8c 	.word	0x0801ac8c
 80047f0:	0801ac9c 	.word	0x0801ac9c
 80047f4:	0801acb0 	.word	0x0801acb0
 80047f8:	0801acc8 	.word	0x0801acc8
 80047fc:	0801ace0 	.word	0x0801ace0
 8004800:	0801acf4 	.word	0x0801acf4
 8004804:	0801ad10 	.word	0x0801ad10
 8004808:	0801ad2c 	.word	0x0801ad2c
 800480c:	0801ad50 	.word	0x0801ad50
 8004810:	0801ad60 	.word	0x0801ad60

08004814 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
  bool ATSend = false;
 800481a:	1dfb      	adds	r3, r7, #7
 800481c:	2200      	movs	r2, #0
 800481e:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004820:	4b79      	ldr	r3, [pc, #484]	@ (8004a08 <ESP_WakeTest+0x1f4>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b05      	cmp	r3, #5
 8004826:	d900      	bls.n	800482a <ESP_WakeTest+0x16>
 8004828:	e0e9      	b.n	80049fe <ESP_WakeTest+0x1ea>
 800482a:	009a      	lsls	r2, r3, #2
 800482c:	4b77      	ldr	r3, [pc, #476]	@ (8004a0c <ESP_WakeTest+0x1f8>)
 800482e:	18d3      	adds	r3, r2, r3
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004834:	4b76      	ldr	r3, [pc, #472]	@ (8004a10 <ESP_WakeTest+0x1fc>)
 8004836:	781b      	ldrb	r3, [r3, #0]
 8004838:	2201      	movs	r2, #1
 800483a:	4053      	eors	r3, r2
 800483c:	b2db      	uxtb	r3, r3
 800483e:	2b00      	cmp	r3, #0
 8004840:	d03a      	beq.n	80048b8 <ESP_WakeTest+0xa4>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004842:	2380      	movs	r3, #128	@ 0x80
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	4873      	ldr	r0, [pc, #460]	@ (8004a14 <ESP_WakeTest+0x200>)
 8004848:	2200      	movs	r2, #0
 800484a:	0019      	movs	r1, r3
 800484c:	f005 fda2 	bl	800a394 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004850:	23fa      	movs	r3, #250	@ 0xfa
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	0018      	movs	r0, r3
 8004856:	f004 fc11 	bl	800907c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800485a:	2380      	movs	r3, #128	@ 0x80
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	486d      	ldr	r0, [pc, #436]	@ (8004a14 <ESP_WakeTest+0x200>)
 8004860:	2201      	movs	r2, #1
 8004862:	0019      	movs	r1, r3
 8004864:	f005 fd96 	bl	800a394 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8004868:	23fa      	movs	r3, #250	@ 0xfa
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	0018      	movs	r0, r3
 800486e:	f004 fc05 	bl	800907c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004872:	4b69      	ldr	r3, [pc, #420]	@ (8004a18 <ESP_WakeTest+0x204>)
 8004874:	2200      	movs	r2, #0
 8004876:	2101      	movs	r1, #1
 8004878:	0018      	movs	r0, r3
 800487a:	f005 fd8b 	bl	800a394 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800487e:	2064      	movs	r0, #100	@ 0x64
 8004880:	f004 fbfc 	bl	800907c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004884:	4b64      	ldr	r3, [pc, #400]	@ (8004a18 <ESP_WakeTest+0x204>)
 8004886:	2201      	movs	r2, #1
 8004888:	2102      	movs	r1, #2
 800488a:	0018      	movs	r0, r3
 800488c:	f005 fd82 	bl	800a394 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004890:	2064      	movs	r0, #100	@ 0x64
 8004892:	f004 fbf3 	bl	800907c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004896:	4b60      	ldr	r3, [pc, #384]	@ (8004a18 <ESP_WakeTest+0x204>)
 8004898:	2201      	movs	r2, #1
 800489a:	2101      	movs	r1, #1
 800489c:	0018      	movs	r0, r3
 800489e:	f005 fd79 	bl	800a394 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80048a2:	f004 fbe1 	bl	8009068 <HAL_GetTick>
 80048a6:	0003      	movs	r3, r0
 80048a8:	22af      	movs	r2, #175	@ 0xaf
 80048aa:	0092      	lsls	r2, r2, #2
 80048ac:	189a      	adds	r2, r3, r2
 80048ae:	4b5b      	ldr	r3, [pc, #364]	@ (8004a1c <ESP_WakeTest+0x208>)
 80048b0:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80048b2:	4b57      	ldr	r3, [pc, #348]	@ (8004a10 <ESP_WakeTest+0x1fc>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80048b8:	4b59      	ldr	r3, [pc, #356]	@ (8004a20 <ESP_WakeTest+0x20c>)
 80048ba:	21ff      	movs	r1, #255	@ 0xff
 80048bc:	0018      	movs	r0, r3
 80048be:	f7fe ff77 	bl	80037b0 <ESP_Receive>
 80048c2:	1e03      	subs	r3, r0, #0
 80048c4:	d100      	bne.n	80048c8 <ESP_WakeTest+0xb4>
 80048c6:	e095      	b.n	80049f4 <ESP_WakeTest+0x1e0>
        TestState = ESP_TEST_SEND;
 80048c8:	4b4f      	ldr	r3, [pc, #316]	@ (8004a08 <ESP_WakeTest+0x1f4>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
      }
      break;
 80048ce:	e091      	b.n	80049f4 <ESP_WakeTest+0x1e0>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 80048d0:	4b52      	ldr	r3, [pc, #328]	@ (8004a1c <ESP_WakeTest+0x208>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	0018      	movs	r0, r3
 80048d6:	f003 ff79 	bl	80087cc <TimestampIsReached>
 80048da:	1e03      	subs	r3, r0, #0
 80048dc:	d100      	bne.n	80048e0 <ESP_WakeTest+0xcc>
 80048de:	e08b      	b.n	80049f8 <ESP_WakeTest+0x1e4>
        ATSend = AT_Send(ATCommand);
 80048e0:	4b50      	ldr	r3, [pc, #320]	@ (8004a24 <ESP_WakeTest+0x210>)
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	1dfc      	adds	r4, r7, #7
 80048e6:	0018      	movs	r0, r3
 80048e8:	f7ff fe28 	bl	800453c <AT_Send>
 80048ec:	0003      	movs	r3, r0
 80048ee:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 80048f0:	1dfb      	adds	r3, r7, #7
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d100      	bne.n	80048fa <ESP_WakeTest+0xe6>
 80048f8:	e07e      	b.n	80049f8 <ESP_WakeTest+0x1e4>
          TestState = ESP_TEST_RECEIVE;
 80048fa:	4b43      	ldr	r3, [pc, #268]	@ (8004a08 <ESP_WakeTest+0x1f4>)
 80048fc:	2202      	movs	r2, #2
 80048fe:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004900:	e07a      	b.n	80049f8 <ESP_WakeTest+0x1e4>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004902:	4b46      	ldr	r3, [pc, #280]	@ (8004a1c <ESP_WakeTest+0x208>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	0018      	movs	r0, r3
 8004908:	f003 ff60 	bl	80087cc <TimestampIsReached>
 800490c:	1e03      	subs	r3, r0, #0
 800490e:	d100      	bne.n	8004912 <ESP_WakeTest+0xfe>
 8004910:	e074      	b.n	80049fc <ESP_WakeTest+0x1e8>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004912:	4b45      	ldr	r3, [pc, #276]	@ (8004a28 <ESP_WakeTest+0x214>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	0018      	movs	r0, r3
 8004918:	f7ff fd2c 	bl	8004374 <DMA_ProcessBuffer>
 800491c:	0003      	movs	r3, r0
 800491e:	001a      	movs	r2, r3
 8004920:	4b42      	ldr	r3, [pc, #264]	@ (8004a2c <ESP_WakeTest+0x218>)
 8004922:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004924:	4b41      	ldr	r3, [pc, #260]	@ (8004a2c <ESP_WakeTest+0x218>)
 8004926:	781a      	ldrb	r2, [r3, #0]
 8004928:	4b3f      	ldr	r3, [pc, #252]	@ (8004a28 <ESP_WakeTest+0x214>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	1dbc      	adds	r4, r7, #6
 800492e:	0019      	movs	r1, r3
 8004930:	0010      	movs	r0, r2
 8004932:	f7ff fdcd 	bl	80044d0 <ATCompare>
 8004936:	0003      	movs	r3, r0
 8004938:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 800493a:	4b3c      	ldr	r3, [pc, #240]	@ (8004a2c <ESP_WakeTest+0x218>)
 800493c:	781b      	ldrb	r3, [r3, #0]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d102      	bne.n	8004948 <ESP_WakeTest+0x134>
          TestState = ESP_TEST_SEND;
 8004942:	4b31      	ldr	r3, [pc, #196]	@ (8004a08 <ESP_WakeTest+0x1f4>)
 8004944:	2201      	movs	r2, #1
 8004946:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004948:	4b38      	ldr	r3, [pc, #224]	@ (8004a2c <ESP_WakeTest+0x218>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b07      	cmp	r3, #7
 800494e:	d104      	bne.n	800495a <ESP_WakeTest+0x146>
          StartProg();
 8004950:	f7ff f852 	bl	80039f8 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004954:	4b2c      	ldr	r3, [pc, #176]	@ (8004a08 <ESP_WakeTest+0x1f4>)
 8004956:	2205      	movs	r2, #5
 8004958:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 800495a:	4b34      	ldr	r3, [pc, #208]	@ (8004a2c <ESP_WakeTest+0x218>)
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	2b03      	cmp	r3, #3
 8004960:	d109      	bne.n	8004976 <ESP_WakeTest+0x162>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004962:	f004 fb81 	bl	8009068 <HAL_GetTick>
 8004966:	0003      	movs	r3, r0
 8004968:	3332      	adds	r3, #50	@ 0x32
 800496a:	001a      	movs	r2, r3
 800496c:	4b2b      	ldr	r3, [pc, #172]	@ (8004a1c <ESP_WakeTest+0x208>)
 800496e:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004970:	4b25      	ldr	r3, [pc, #148]	@ (8004a08 <ESP_WakeTest+0x1f4>)
 8004972:	2201      	movs	r2, #1
 8004974:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004976:	1dbb      	adds	r3, r7, #6
 8004978:	781b      	ldrb	r3, [r3, #0]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d03e      	beq.n	80049fc <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_VALIDATE;
 800497e:	4b22      	ldr	r3, [pc, #136]	@ (8004a08 <ESP_WakeTest+0x1f4>)
 8004980:	2203      	movs	r2, #3
 8004982:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004984:	e03a      	b.n	80049fc <ESP_WakeTest+0x1e8>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = 4000;
 8004986:	4b2a      	ldr	r3, [pc, #168]	@ (8004a30 <ESP_WakeTest+0x21c>)
 8004988:	22fa      	movs	r2, #250	@ 0xfa
 800498a:	0112      	lsls	r2, r2, #4
 800498c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 0;
 800498e:	4b28      	ldr	r3, [pc, #160]	@ (8004a30 <ESP_WakeTest+0x21c>)
 8004990:	2200      	movs	r2, #0
 8004992:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 4000;
 8004994:	4b26      	ldr	r3, [pc, #152]	@ (8004a30 <ESP_WakeTest+0x21c>)
 8004996:	22fa      	movs	r2, #250	@ 0xfa
 8004998:	0112      	lsls	r2, r2, #4
 800499a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800499c:	4b1a      	ldr	r3, [pc, #104]	@ (8004a08 <ESP_WakeTest+0x1f4>)
 800499e:	2204      	movs	r2, #4
 80049a0:	701a      	strb	r2, [r3, #0]

      break;
 80049a2:	e02c      	b.n	80049fe <ESP_WakeTest+0x1ea>

    case ESP_TEST_DEINIT:
      testRound = false;
 80049a4:	4b23      	ldr	r3, [pc, #140]	@ (8004a34 <ESP_WakeTest+0x220>)
 80049a6:	2200      	movs	r2, #0
 80049a8:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 80049aa:	4b19      	ldr	r3, [pc, #100]	@ (8004a10 <ESP_WakeTest+0x1fc>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80049b0:	4b19      	ldr	r3, [pc, #100]	@ (8004a18 <ESP_WakeTest+0x204>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	2101      	movs	r1, #1
 80049b6:	0018      	movs	r0, r3
 80049b8:	f005 fcec 	bl	800a394 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80049bc:	2380      	movs	r3, #128	@ 0x80
 80049be:	011b      	lsls	r3, r3, #4
 80049c0:	4814      	ldr	r0, [pc, #80]	@ (8004a14 <ESP_WakeTest+0x200>)
 80049c2:	2200      	movs	r2, #0
 80049c4:	0019      	movs	r1, r3
 80049c6:	f005 fce5 	bl	800a394 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80049ca:	4b13      	ldr	r3, [pc, #76]	@ (8004a18 <ESP_WakeTest+0x204>)
 80049cc:	2200      	movs	r2, #0
 80049ce:	2102      	movs	r1, #2
 80049d0:	0018      	movs	r0, r3
 80049d2:	f005 fcdf 	bl	800a394 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 80049d6:	f001 fbe3 	bl	80061a0 <SetESPMeasurementDone>

      break;
 80049da:	e010      	b.n	80049fe <ESP_WakeTest+0x1ea>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 80049dc:	4b14      	ldr	r3, [pc, #80]	@ (8004a30 <ESP_WakeTest+0x21c>)
 80049de:	22fa      	movs	r2, #250	@ 0xfa
 80049e0:	0112      	lsls	r2, r2, #4
 80049e2:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 80049e4:	4b12      	ldr	r3, [pc, #72]	@ (8004a30 <ESP_WakeTest+0x21c>)
 80049e6:	22fa      	movs	r2, #250	@ 0xfa
 80049e8:	0112      	lsls	r2, r2, #4
 80049ea:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 80049ec:	4b10      	ldr	r3, [pc, #64]	@ (8004a30 <ESP_WakeTest+0x21c>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 80049f2:	e004      	b.n	80049fe <ESP_WakeTest+0x1ea>
      break;
 80049f4:	46c0      	nop			@ (mov r8, r8)
 80049f6:	e002      	b.n	80049fe <ESP_WakeTest+0x1ea>
      break;
 80049f8:	46c0      	nop			@ (mov r8, r8)
 80049fa:	e000      	b.n	80049fe <ESP_WakeTest+0x1ea>
      break;
 80049fc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80049fe:	46c0      	nop			@ (mov r8, r8)
 8004a00:	46bd      	mov	sp, r7
 8004a02:	b003      	add	sp, #12
 8004a04:	bd90      	pop	{r4, r7, pc}
 8004a06:	46c0      	nop			@ (mov r8, r8)
 8004a08:	20000a80 	.word	0x20000a80
 8004a0c:	0801b404 	.word	0x0801b404
 8004a10:	200005cf 	.word	0x200005cf
 8004a14:	50000800 	.word	0x50000800
 8004a18:	50001c00 	.word	0x50001c00
 8004a1c:	20000874 	.word	0x20000874
 8004a20:	200004d0 	.word	0x200004d0
 8004a24:	20000a7e 	.word	0x20000a7e
 8004a28:	20000a7d 	.word	0x20000a7d
 8004a2c:	2000010b 	.word	0x2000010b
 8004a30:	40000400 	.word	0x40000400
 8004a34:	20000002 	.word	0x20000002

08004a38 <ESP_Upkeep>:

void ESP_Upkeep(void) {
 8004a38:	b590      	push	{r4, r7, lr}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004a3e:	1dfb      	adds	r3, r7, #7
 8004a40:	2200      	movs	r2, #0
 8004a42:	701a      	strb	r2, [r3, #0]
  static RECEIVE_STATUS ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (EspState) {
 8004a44:	4be0      	ldr	r3, [pc, #896]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	2b0b      	cmp	r3, #11
 8004a4a:	d900      	bls.n	8004a4e <ESP_Upkeep+0x16>
 8004a4c:	e1b5      	b.n	8004dba <ESP_Upkeep+0x382>
 8004a4e:	009a      	lsls	r2, r3, #2
 8004a50:	4bde      	ldr	r3, [pc, #888]	@ (8004dcc <ESP_Upkeep+0x394>)
 8004a52:	18d3      	adds	r3, r2, r3
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8004a58:	4bdb      	ldr	r3, [pc, #876]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	701a      	strb	r2, [r3, #0]
      break;
 8004a5e:	e1ee      	b.n	8004e3e <ESP_Upkeep+0x406>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 8004a60:	4bdb      	ldr	r3, [pc, #876]	@ (8004dd0 <ESP_Upkeep+0x398>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2201      	movs	r2, #1
 8004a66:	4053      	eors	r3, r2
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d03a      	beq.n	8004ae4 <ESP_Upkeep+0xac>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004a6e:	2380      	movs	r3, #128	@ 0x80
 8004a70:	011b      	lsls	r3, r3, #4
 8004a72:	48d8      	ldr	r0, [pc, #864]	@ (8004dd4 <ESP_Upkeep+0x39c>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	0019      	movs	r1, r3
 8004a78:	f005 fc8c 	bl	800a394 <HAL_GPIO_WritePin>
        HAL_Delay(500);
 8004a7c:	23fa      	movs	r3, #250	@ 0xfa
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	0018      	movs	r0, r3
 8004a82:	f004 fafb 	bl	800907c <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004a86:	2380      	movs	r3, #128	@ 0x80
 8004a88:	011b      	lsls	r3, r3, #4
 8004a8a:	48d2      	ldr	r0, [pc, #840]	@ (8004dd4 <ESP_Upkeep+0x39c>)
 8004a8c:	2201      	movs	r2, #1
 8004a8e:	0019      	movs	r1, r3
 8004a90:	f005 fc80 	bl	800a394 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8004a94:	23fa      	movs	r3, #250	@ 0xfa
 8004a96:	009b      	lsls	r3, r3, #2
 8004a98:	0018      	movs	r0, r3
 8004a9a:	f004 faef 	bl	800907c <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004a9e:	4bce      	ldr	r3, [pc, #824]	@ (8004dd8 <ESP_Upkeep+0x3a0>)
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	2101      	movs	r1, #1
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f005 fc75 	bl	800a394 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004aaa:	2064      	movs	r0, #100	@ 0x64
 8004aac:	f004 fae6 	bl	800907c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004ab0:	4bc9      	ldr	r3, [pc, #804]	@ (8004dd8 <ESP_Upkeep+0x3a0>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	2102      	movs	r1, #2
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f005 fc6c 	bl	800a394 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 8004abc:	2064      	movs	r0, #100	@ 0x64
 8004abe:	f004 fadd 	bl	800907c <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004ac2:	4bc5      	ldr	r3, [pc, #788]	@ (8004dd8 <ESP_Upkeep+0x3a0>)
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	0018      	movs	r0, r3
 8004aca:	f005 fc63 	bl	800a394 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004ace:	f004 facb 	bl	8009068 <HAL_GetTick>
 8004ad2:	0003      	movs	r3, r0
 8004ad4:	22af      	movs	r2, #175	@ 0xaf
 8004ad6:	0092      	lsls	r2, r2, #2
 8004ad8:	189a      	adds	r2, r3, r2
 8004ada:	4bc0      	ldr	r3, [pc, #768]	@ (8004ddc <ESP_Upkeep+0x3a4>)
 8004adc:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004ade:	4bbc      	ldr	r3, [pc, #752]	@ (8004dd0 <ESP_Upkeep+0x398>)
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004ae4:	4bbe      	ldr	r3, [pc, #760]	@ (8004de0 <ESP_Upkeep+0x3a8>)
 8004ae6:	21ff      	movs	r1, #255	@ 0xff
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f7fe fe61 	bl	80037b0 <ESP_Receive>
 8004aee:	1e03      	subs	r3, r0, #0
 8004af0:	d100      	bne.n	8004af4 <ESP_Upkeep+0xbc>
 8004af2:	e199      	b.n	8004e28 <ESP_Upkeep+0x3f0>
        EspState = ESP_STATE_MODE_SELECT;
 8004af4:	4bb4      	ldr	r3, [pc, #720]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004af6:	220b      	movs	r2, #11
 8004af8:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004afa:	e195      	b.n	8004e28 <ESP_Upkeep+0x3f0>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 10);
 8004afc:	4bb9      	ldr	r3, [pc, #740]	@ (8004de4 <ESP_Upkeep+0x3ac>)
 8004afe:	220a      	movs	r2, #10
 8004b00:	210f      	movs	r1, #15
 8004b02:	0018      	movs	r0, r3
 8004b04:	f013 f93a 	bl	8017d7c <memset>
      if(!InitIsDone || WifiReset){
 8004b08:	4bb7      	ldr	r3, [pc, #732]	@ (8004de8 <ESP_Upkeep+0x3b0>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	2201      	movs	r2, #1
 8004b0e:	4053      	eors	r3, r2
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d103      	bne.n	8004b1e <ESP_Upkeep+0xe6>
 8004b16:	4bb5      	ldr	r3, [pc, #724]	@ (8004dec <ESP_Upkeep+0x3b4>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d016      	beq.n	8004b4c <ESP_Upkeep+0x114>
        memcpy(ATCommandArray, AT_INIT, 8);
 8004b1e:	4bb1      	ldr	r3, [pc, #708]	@ (8004de4 <ESP_Upkeep+0x3ac>)
 8004b20:	4ab3      	ldr	r2, [pc, #716]	@ (8004df0 <ESP_Upkeep+0x3b8>)
 8004b22:	ca03      	ldmia	r2!, {r0, r1}
 8004b24:	c303      	stmia	r3!, {r0, r1}
        EspState = ESP_STATE_SEND;
 8004b26:	4ba8      	ldr	r3, [pc, #672]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004b28:	2204      	movs	r2, #4
 8004b2a:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b2c:	4bb1      	ldr	r3, [pc, #708]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004b2e:	2200      	movs	r2, #0
 8004b30:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8004b32:	4bb1      	ldr	r3, [pc, #708]	@ (8004df8 <ESP_Upkeep+0x3c0>)
 8004b34:	2200      	movs	r2, #0
 8004b36:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004b38:	4bae      	ldr	r3, [pc, #696]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004b3a:	781b      	ldrb	r3, [r3, #0]
 8004b3c:	001a      	movs	r2, r3
 8004b3e:	4ba9      	ldr	r3, [pc, #676]	@ (8004de4 <ESP_Upkeep+0x3ac>)
 8004b40:	5c9a      	ldrb	r2, [r3, r2]
 8004b42:	4bae      	ldr	r3, [pc, #696]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004b44:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004b46:	4bae      	ldr	r3, [pc, #696]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 8004b4c:	4ba6      	ldr	r3, [pc, #664]	@ (8004de8 <ESP_Upkeep+0x3b0>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d01f      	beq.n	8004b94 <ESP_Upkeep+0x15c>
 8004b54:	4bab      	ldr	r3, [pc, #684]	@ (8004e04 <ESP_Upkeep+0x3cc>)
 8004b56:	781b      	ldrb	r3, [r3, #0]
 8004b58:	2201      	movs	r2, #1
 8004b5a:	4053      	eors	r3, r2
 8004b5c:	b2db      	uxtb	r3, r3
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d018      	beq.n	8004b94 <ESP_Upkeep+0x15c>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8004b62:	4ba0      	ldr	r3, [pc, #640]	@ (8004de4 <ESP_Upkeep+0x3ac>)
 8004b64:	4aa8      	ldr	r2, [pc, #672]	@ (8004e08 <ESP_Upkeep+0x3d0>)
 8004b66:	6811      	ldr	r1, [r2, #0]
 8004b68:	6019      	str	r1, [r3, #0]
 8004b6a:	8892      	ldrh	r2, [r2, #4]
 8004b6c:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8004b6e:	4b96      	ldr	r3, [pc, #600]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004b70:	2204      	movs	r2, #4
 8004b72:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004b74:	4b9f      	ldr	r3, [pc, #636]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 8004b7a:	4b9f      	ldr	r3, [pc, #636]	@ (8004df8 <ESP_Upkeep+0x3c0>)
 8004b7c:	2201      	movs	r2, #1
 8004b7e:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8004b80:	4b9c      	ldr	r3, [pc, #624]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	001a      	movs	r2, r3
 8004b86:	4b97      	ldr	r3, [pc, #604]	@ (8004de4 <ESP_Upkeep+0x3ac>)
 8004b88:	5c9a      	ldrb	r2, [r3, r2]
 8004b8a:	4b9c      	ldr	r3, [pc, #624]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004b8c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004b8e:	4b9c      	ldr	r3, [pc, #624]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !WifiReset){
 8004b94:	4b94      	ldr	r3, [pc, #592]	@ (8004de8 <ESP_Upkeep+0x3b0>)
 8004b96:	781b      	ldrb	r3, [r3, #0]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d100      	bne.n	8004b9e <ESP_Upkeep+0x166>
 8004b9c:	e146      	b.n	8004e2c <ESP_Upkeep+0x3f4>
 8004b9e:	4b99      	ldr	r3, [pc, #612]	@ (8004e04 <ESP_Upkeep+0x3cc>)
 8004ba0:	781b      	ldrb	r3, [r3, #0]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d100      	bne.n	8004ba8 <ESP_Upkeep+0x170>
 8004ba6:	e141      	b.n	8004e2c <ESP_Upkeep+0x3f4>
 8004ba8:	4b90      	ldr	r3, [pc, #576]	@ (8004dec <ESP_Upkeep+0x3b4>)
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	2201      	movs	r2, #1
 8004bae:	4053      	eors	r3, r2
 8004bb0:	b2db      	uxtb	r3, r3
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d100      	bne.n	8004bb8 <ESP_Upkeep+0x180>
 8004bb6:	e139      	b.n	8004e2c <ESP_Upkeep+0x3f4>
        memcpy(ATCommandArray, AT_SEND, 3);
 8004bb8:	4b8a      	ldr	r3, [pc, #552]	@ (8004de4 <ESP_Upkeep+0x3ac>)
 8004bba:	4a94      	ldr	r2, [pc, #592]	@ (8004e0c <ESP_Upkeep+0x3d4>)
 8004bbc:	8811      	ldrh	r1, [r2, #0]
 8004bbe:	8019      	strh	r1, [r3, #0]
 8004bc0:	7892      	ldrb	r2, [r2, #2]
 8004bc2:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8004bc4:	4b80      	ldr	r3, [pc, #512]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004bc6:	2204      	movs	r2, #4
 8004bc8:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8004bca:	4b8a      	ldr	r3, [pc, #552]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004bcc:	2200      	movs	r2, #0
 8004bce:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 8004bd0:	4b89      	ldr	r3, [pc, #548]	@ (8004df8 <ESP_Upkeep+0x3c0>)
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	701a      	strb	r2, [r3, #0]
        TIM2 -> CCR1 = 40000;
 8004bd6:	2380      	movs	r3, #128	@ 0x80
 8004bd8:	05db      	lsls	r3, r3, #23
 8004bda:	4a8d      	ldr	r2, [pc, #564]	@ (8004e10 <ESP_Upkeep+0x3d8>)
 8004bdc:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004bde:	2380      	movs	r3, #128	@ 0x80
 8004be0:	05db      	lsls	r3, r3, #23
 8004be2:	4a8b      	ldr	r2, [pc, #556]	@ (8004e10 <ESP_Upkeep+0x3d8>)
 8004be4:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 20000;
 8004be6:	2380      	movs	r3, #128	@ 0x80
 8004be8:	05db      	lsls	r3, r3, #23
 8004bea:	4a8a      	ldr	r2, [pc, #552]	@ (8004e14 <ESP_Upkeep+0x3dc>)
 8004bec:	641a      	str	r2, [r3, #64]	@ 0x40
        ATCommand = ATCommandArray[ATCounter];
 8004bee:	4b81      	ldr	r3, [pc, #516]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004bf0:	781b      	ldrb	r3, [r3, #0]
 8004bf2:	001a      	movs	r2, r3
 8004bf4:	4b7b      	ldr	r3, [pc, #492]	@ (8004de4 <ESP_Upkeep+0x3ac>)
 8004bf6:	5c9a      	ldrb	r2, [r3, r2]
 8004bf8:	4b80      	ldr	r3, [pc, #512]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004bfa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004bfc:	4b80      	ldr	r3, [pc, #512]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	701a      	strb	r2, [r3, #0]
      }

    break;
 8004c02:	e113      	b.n	8004e2c <ESP_Upkeep+0x3f4>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8004c04:	4b7d      	ldr	r3, [pc, #500]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004c06:	781b      	ldrb	r3, [r3, #0]
 8004c08:	1dfc      	adds	r4, r7, #7
 8004c0a:	0018      	movs	r0, r3
 8004c0c:	f7ff fc96 	bl	800453c <AT_Send>
 8004c10:	0003      	movs	r3, r0
 8004c12:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004c14:	1dfb      	adds	r3, r7, #7
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d100      	bne.n	8004c1e <ESP_Upkeep+0x1e6>
 8004c1c:	e108      	b.n	8004e30 <ESP_Upkeep+0x3f8>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8004c1e:	4b6a      	ldr	r3, [pc, #424]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004c20:	2203      	movs	r2, #3
 8004c22:	701a      	strb	r2, [r3, #0]
        }
         break;
 8004c24:	e104      	b.n	8004e30 <ESP_Upkeep+0x3f8>


    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 8004c26:	4b6d      	ldr	r3, [pc, #436]	@ (8004ddc <ESP_Upkeep+0x3a4>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	f003 fdce 	bl	80087cc <TimestampIsReached>
 8004c30:	1e03      	subs	r3, r0, #0
 8004c32:	d100      	bne.n	8004c36 <ESP_Upkeep+0x1fe>
 8004c34:	e0fe      	b.n	8004e34 <ESP_Upkeep+0x3fc>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004c36:	4b72      	ldr	r3, [pc, #456]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004c38:	781b      	ldrb	r3, [r3, #0]
 8004c3a:	0018      	movs	r0, r3
 8004c3c:	f7ff fb9a 	bl	8004374 <DMA_ProcessBuffer>
 8004c40:	0003      	movs	r3, r0
 8004c42:	001a      	movs	r2, r3
 8004c44:	4b74      	ldr	r3, [pc, #464]	@ (8004e18 <ESP_Upkeep+0x3e0>)
 8004c46:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004c48:	4b73      	ldr	r3, [pc, #460]	@ (8004e18 <ESP_Upkeep+0x3e0>)
 8004c4a:	781a      	ldrb	r2, [r3, #0]
 8004c4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	1dbc      	adds	r4, r7, #6
 8004c52:	0019      	movs	r1, r3
 8004c54:	0010      	movs	r0, r2
 8004c56:	f7ff fc3b 	bl	80044d0 <ATCompare>
 8004c5a:	0003      	movs	r3, r0
 8004c5c:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004c5e:	4b6e      	ldr	r3, [pc, #440]	@ (8004e18 <ESP_Upkeep+0x3e0>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d102      	bne.n	8004c6c <ESP_Upkeep+0x234>
          EspState = ESP_STATE_SEND;
 8004c66:	4b58      	ldr	r3, [pc, #352]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004c68:	2204      	movs	r2, #4
 8004c6a:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004c6c:	4b6a      	ldr	r3, [pc, #424]	@ (8004e18 <ESP_Upkeep+0x3e0>)
 8004c6e:	781b      	ldrb	r3, [r3, #0]
 8004c70:	2b03      	cmp	r3, #3
 8004c72:	d106      	bne.n	8004c82 <ESP_Upkeep+0x24a>
          ESPTimeStamp = HAL_GetTick() + 10;
 8004c74:	f004 f9f8 	bl	8009068 <HAL_GetTick>
 8004c78:	0003      	movs	r3, r0
 8004c7a:	330a      	adds	r3, #10
 8004c7c:	001a      	movs	r2, r3
 8004c7e:	4b57      	ldr	r3, [pc, #348]	@ (8004ddc <ESP_Upkeep+0x3a4>)
 8004c80:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8004c82:	4b65      	ldr	r3, [pc, #404]	@ (8004e18 <ESP_Upkeep+0x3e0>)
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	2b06      	cmp	r3, #6
 8004c88:	d116      	bne.n	8004cb8 <ESP_Upkeep+0x280>
          if(ATCommand != AT_SENDDATA){
 8004c8a:	4b5c      	ldr	r3, [pc, #368]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b0d      	cmp	r3, #13
 8004c90:	d003      	beq.n	8004c9a <ESP_Upkeep+0x262>
            EspState = ESP_STATE_SEND;
 8004c92:	4b4d      	ldr	r3, [pc, #308]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004c94:	2204      	movs	r2, #4
 8004c96:	701a      	strb	r2, [r3, #0]
 8004c98:	e00e      	b.n	8004cb8 <ESP_Upkeep+0x280>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8004c9a:	4b58      	ldr	r3, [pc, #352]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004c9c:	220c      	movs	r2, #12
 8004c9e:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 8004ca0:	4b54      	ldr	r3, [pc, #336]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004ca2:	781b      	ldrb	r3, [r3, #0]
 8004ca4:	3b01      	subs	r3, #1
 8004ca6:	b2da      	uxtb	r2, r3
 8004ca8:	4b52      	ldr	r3, [pc, #328]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004caa:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8004cac:	4b54      	ldr	r3, [pc, #336]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004cae:	2202      	movs	r2, #2
 8004cb0:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8004cb2:	4b45      	ldr	r3, [pc, #276]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004cb4:	2204      	movs	r2, #4
 8004cb6:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8004cb8:	1dbb      	adds	r3, r7, #6
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d100      	bne.n	8004cc2 <ESP_Upkeep+0x28a>
 8004cc0:	e0b8      	b.n	8004e34 <ESP_Upkeep+0x3fc>
          EspState = ESP_STATE_NEXT_AT;
 8004cc2:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004cc4:	2205      	movs	r2, #5
 8004cc6:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004cc8:	e0b4      	b.n	8004e34 <ESP_Upkeep+0x3fc>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8004cca:	4b4a      	ldr	r3, [pc, #296]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	3301      	adds	r3, #1
 8004cd0:	b2da      	uxtb	r2, r3
 8004cd2:	4b48      	ldr	r3, [pc, #288]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004cd4:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8004cd6:	4b47      	ldr	r3, [pc, #284]	@ (8004df4 <ESP_Upkeep+0x3bc>)
 8004cd8:	781b      	ldrb	r3, [r3, #0]
 8004cda:	001a      	movs	r2, r3
 8004cdc:	4b41      	ldr	r3, [pc, #260]	@ (8004de4 <ESP_Upkeep+0x3ac>)
 8004cde:	5c9a      	ldrb	r2, [r3, r2]
 8004ce0:	4b46      	ldr	r3, [pc, #280]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004ce2:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 8004ce4:	4b45      	ldr	r3, [pc, #276]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004ce6:	781b      	ldrb	r3, [r3, #0]
 8004ce8:	2b03      	cmp	r3, #3
 8004cea:	d102      	bne.n	8004cf2 <ESP_Upkeep+0x2ba>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 8004cec:	4b44      	ldr	r3, [pc, #272]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004cee:	2201      	movs	r2, #1
 8004cf0:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 8004cf2:	4b42      	ldr	r3, [pc, #264]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004cf4:	781b      	ldrb	r3, [r3, #0]
 8004cf6:	2b0c      	cmp	r3, #12
 8004cf8:	d102      	bne.n	8004d00 <ESP_Upkeep+0x2c8>
        ATExpectation = RECEIVE_EXPECTATION_START;
 8004cfa:	4b41      	ldr	r3, [pc, #260]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004cfc:	2202      	movs	r2, #2
 8004cfe:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 8004d00:	4b3e      	ldr	r3, [pc, #248]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004d02:	781b      	ldrb	r3, [r3, #0]
 8004d04:	2b0c      	cmp	r3, #12
 8004d06:	d006      	beq.n	8004d16 <ESP_Upkeep+0x2de>
 8004d08:	4b3c      	ldr	r3, [pc, #240]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	2b03      	cmp	r3, #3
 8004d0e:	d002      	beq.n	8004d16 <ESP_Upkeep+0x2de>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8004d10:	4b3b      	ldr	r3, [pc, #236]	@ (8004e00 <ESP_Upkeep+0x3c8>)
 8004d12:	2200      	movs	r2, #0
 8004d14:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 8004d16:	4b2c      	ldr	r3, [pc, #176]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004d18:	2204      	movs	r2, #4
 8004d1a:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 8004d1c:	4b37      	ldr	r3, [pc, #220]	@ (8004dfc <ESP_Upkeep+0x3c4>)
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	2b0f      	cmp	r3, #15
 8004d22:	d000      	beq.n	8004d26 <ESP_Upkeep+0x2ee>
 8004d24:	e088      	b.n	8004e38 <ESP_Upkeep+0x400>
        if(Mode == AT_MODE_SEND){
 8004d26:	4b34      	ldr	r3, [pc, #208]	@ (8004df8 <ESP_Upkeep+0x3c0>)
 8004d28:	781b      	ldrb	r3, [r3, #0]
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d112      	bne.n	8004d54 <ESP_Upkeep+0x31c>
          ESPTimeStamp = HAL_GetTick() + 300000;
 8004d2e:	f004 f99b 	bl	8009068 <HAL_GetTick>
 8004d32:	0003      	movs	r3, r0
 8004d34:	4a39      	ldr	r2, [pc, #228]	@ (8004e1c <ESP_Upkeep+0x3e4>)
 8004d36:	189a      	adds	r2, r3, r2
 8004d38:	4b28      	ldr	r3, [pc, #160]	@ (8004ddc <ESP_Upkeep+0x3a4>)
 8004d3a:	601a      	str	r2, [r3, #0]
          TIM2 -> CCR1 = 40000;
 8004d3c:	2380      	movs	r3, #128	@ 0x80
 8004d3e:	05db      	lsls	r3, r3, #23
 8004d40:	4a33      	ldr	r2, [pc, #204]	@ (8004e10 <ESP_Upkeep+0x3d8>)
 8004d42:	635a      	str	r2, [r3, #52]	@ 0x34
          TIM2 -> CCR3 = 0;
 8004d44:	2380      	movs	r3, #128	@ 0x80
 8004d46:	05db      	lsls	r3, r3, #23
 8004d48:	2200      	movs	r2, #0
 8004d4a:	63da      	str	r2, [r3, #60]	@ 0x3c
          TIM2 -> CCR4 = 40000;
 8004d4c:	2380      	movs	r3, #128	@ 0x80
 8004d4e:	05db      	lsls	r3, r3, #23
 8004d50:	4a2f      	ldr	r2, [pc, #188]	@ (8004e10 <ESP_Upkeep+0x3d8>)
 8004d52:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        EspState = ESP_STATE_RESET;
 8004d54:	4b1c      	ldr	r3, [pc, #112]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004d56:	2209      	movs	r2, #9
 8004d58:	701a      	strb	r2, [r3, #0]
      }
    break;
 8004d5a:	e06d      	b.n	8004e38 <ESP_Upkeep+0x400>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp)){
 8004d5c:	4b1f      	ldr	r3, [pc, #124]	@ (8004ddc <ESP_Upkeep+0x3a4>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	0018      	movs	r0, r3
 8004d62:	f003 fd33 	bl	80087cc <TimestampIsReached>
 8004d66:	1e03      	subs	r3, r0, #0
 8004d68:	d068      	beq.n	8004e3c <ESP_Upkeep+0x404>
        if(Mode == AT_MODE_INIT){
 8004d6a:	4b23      	ldr	r3, [pc, #140]	@ (8004df8 <ESP_Upkeep+0x3c0>)
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d102      	bne.n	8004d78 <ESP_Upkeep+0x340>
          InitIsDone = true;
 8004d72:	4b1d      	ldr	r3, [pc, #116]	@ (8004de8 <ESP_Upkeep+0x3b0>)
 8004d74:	2201      	movs	r2, #1
 8004d76:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8004d78:	4b1f      	ldr	r3, [pc, #124]	@ (8004df8 <ESP_Upkeep+0x3c0>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d102      	bne.n	8004d86 <ESP_Upkeep+0x34e>
          ConnectionMade = true;
 8004d80:	4b20      	ldr	r3, [pc, #128]	@ (8004e04 <ESP_Upkeep+0x3cc>)
 8004d82:	2201      	movs	r2, #1
 8004d84:	701a      	strb	r2, [r3, #0]
        }
        TIM2 -> CCR1 = 40000;
 8004d86:	2380      	movs	r3, #128	@ 0x80
 8004d88:	05db      	lsls	r3, r3, #23
 8004d8a:	4a21      	ldr	r2, [pc, #132]	@ (8004e10 <ESP_Upkeep+0x3d8>)
 8004d8c:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM2 -> CCR3 = 40000;
 8004d8e:	2380      	movs	r3, #128	@ 0x80
 8004d90:	05db      	lsls	r3, r3, #23
 8004d92:	4a1f      	ldr	r2, [pc, #124]	@ (8004e10 <ESP_Upkeep+0x3d8>)
 8004d94:	63da      	str	r2, [r3, #60]	@ 0x3c
        TIM2 -> CCR4 = 40000;
 8004d96:	2380      	movs	r3, #128	@ 0x80
 8004d98:	05db      	lsls	r3, r3, #23
 8004d9a:	4a1d      	ldr	r2, [pc, #116]	@ (8004e10 <ESP_Upkeep+0x3d8>)
 8004d9c:	641a      	str	r2, [r3, #64]	@ 0x40
        EspState = ESP_STATE_MODE_SELECT;
 8004d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004da0:	220b      	movs	r2, #11
 8004da2:	701a      	strb	r2, [r3, #0]
      }

      break;
 8004da4:	e04a      	b.n	8004e3c <ESP_Upkeep+0x404>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 8004da6:	4a1e      	ldr	r2, [pc, #120]	@ (8004e20 <ESP_Upkeep+0x3e8>)
 8004da8:	4b1e      	ldr	r3, [pc, #120]	@ (8004e24 <ESP_Upkeep+0x3ec>)
 8004daa:	0019      	movs	r1, r3
 8004dac:	2003      	movs	r0, #3
 8004dae:	f003 fd63 	bl	8008878 <CreateLine>
      EspState = ESP_STATE_INIT;
 8004db2:	4b05      	ldr	r3, [pc, #20]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004db4:	2202      	movs	r2, #2
 8004db6:	701a      	strb	r2, [r3, #0]
      break;
 8004db8:	e041      	b.n	8004e3e <ESP_Upkeep+0x406>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 8004dba:	4b03      	ldr	r3, [pc, #12]	@ (8004dc8 <ESP_Upkeep+0x390>)
 8004dbc:	2207      	movs	r2, #7
 8004dbe:	701a      	strb	r2, [r3, #0]
      break;
 8004dc0:	e03d      	b.n	8004e3e <ESP_Upkeep+0x406>
      break;
 8004dc2:	46c0      	nop			@ (mov r8, r8)
 8004dc4:	e03b      	b.n	8004e3e <ESP_Upkeep+0x406>
 8004dc6:	46c0      	nop			@ (mov r8, r8)
 8004dc8:	2000010a 	.word	0x2000010a
 8004dcc:	0801b41c 	.word	0x0801b41c
 8004dd0:	200005cf 	.word	0x200005cf
 8004dd4:	50000800 	.word	0x50000800
 8004dd8:	50001c00 	.word	0x50001c00
 8004ddc:	20000874 	.word	0x20000874
 8004de0:	200004d0 	.word	0x200004d0
 8004de4:	20000868 	.word	0x20000868
 8004de8:	200005d0 	.word	0x200005d0
 8004dec:	200005d1 	.word	0x200005d1
 8004df0:	200000f8 	.word	0x200000f8
 8004df4:	20000872 	.word	0x20000872
 8004df8:	20000a7f 	.word	0x20000a7f
 8004dfc:	20000a7e 	.word	0x20000a7e
 8004e00:	20000a7d 	.word	0x20000a7d
 8004e04:	200005d2 	.word	0x200005d2
 8004e08:	20000104 	.word	0x20000104
 8004e0c:	20000100 	.word	0x20000100
 8004e10:	00009c40 	.word	0x00009c40
 8004e14:	00004e20 	.word	0x00004e20
 8004e18:	2000010c 	.word	0x2000010c
 8004e1c:	000493e0 	.word	0x000493e0
 8004e20:	0801ad84 	.word	0x0801ad84
 8004e24:	0801a970 	.word	0x0801a970
      break;
 8004e28:	46c0      	nop			@ (mov r8, r8)
 8004e2a:	e008      	b.n	8004e3e <ESP_Upkeep+0x406>
    break;
 8004e2c:	46c0      	nop			@ (mov r8, r8)
 8004e2e:	e006      	b.n	8004e3e <ESP_Upkeep+0x406>
         break;
 8004e30:	46c0      	nop			@ (mov r8, r8)
 8004e32:	e004      	b.n	8004e3e <ESP_Upkeep+0x406>
      break;
 8004e34:	46c0      	nop			@ (mov r8, r8)
 8004e36:	e002      	b.n	8004e3e <ESP_Upkeep+0x406>
    break;
 8004e38:	46c0      	nop			@ (mov r8, r8)
 8004e3a:	e000      	b.n	8004e3e <ESP_Upkeep+0x406>
      break;
 8004e3c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8004e3e:	46c0      	nop			@ (mov r8, r8)
 8004e40:	46bd      	mov	sp, r7
 8004e42:	b003      	add	sp, #12
 8004e44:	bd90      	pop	{r4, r7, pc}
 8004e46:	46c0      	nop			@ (mov r8, r8)

08004e48 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b082      	sub	sp, #8
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8004e50:	4b09      	ldr	r3, [pc, #36]	@ (8004e78 <I2CSensors_Init+0x30>)
 8004e52:	687a      	ldr	r2, [r7, #4]
 8004e54:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8004e56:	4a09      	ldr	r2, [pc, #36]	@ (8004e7c <I2CSensors_Init+0x34>)
 8004e58:	4b09      	ldr	r3, [pc, #36]	@ (8004e80 <I2CSensors_Init+0x38>)
 8004e5a:	0011      	movs	r1, r2
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	f000 fae7 	bl	8005430 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8004e62:	4a06      	ldr	r2, [pc, #24]	@ (8004e7c <I2CSensors_Init+0x34>)
 8004e64:	4b06      	ldr	r3, [pc, #24]	@ (8004e80 <I2CSensors_Init+0x38>)
 8004e66:	0011      	movs	r1, r2
 8004e68:	0018      	movs	r0, r3
 8004e6a:	f000 f96b 	bl	8005144 <Gas_Init>
}
 8004e6e:	46c0      	nop			@ (mov r8, r8)
 8004e70:	46bd      	mov	sp, r7
 8004e72:	b002      	add	sp, #8
 8004e74:	bd80      	pop	{r7, pc}
 8004e76:	46c0      	nop			@ (mov r8, r8)
 8004e78:	20000a84 	.word	0x20000a84
 8004e7c:	08004ed9 	.word	0x08004ed9
 8004e80:	08004e85 	.word	0x08004e85

08004e84 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004e84:	b5b0      	push	{r4, r5, r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6039      	str	r1, [r7, #0]
 8004e8c:	0011      	movs	r1, r2
 8004e8e:	1dfb      	adds	r3, r7, #7
 8004e90:	1c02      	adds	r2, r0, #0
 8004e92:	701a      	strb	r2, [r3, #0]
 8004e94:	1dbb      	adds	r3, r7, #6
 8004e96:	1c0a      	adds	r2, r1, #0
 8004e98:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004e9a:	4b0e      	ldr	r3, [pc, #56]	@ (8004ed4 <ReadI2C+0x50>)
 8004e9c:	6818      	ldr	r0, [r3, #0]
 8004e9e:	1dfb      	adds	r3, r7, #7
 8004ea0:	781b      	ldrb	r3, [r3, #0]
 8004ea2:	b29b      	uxth	r3, r3
 8004ea4:	18db      	adds	r3, r3, r3
 8004ea6:	b299      	uxth	r1, r3
 8004ea8:	1dbb      	adds	r3, r7, #6
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	250f      	movs	r5, #15
 8004eb0:	197c      	adds	r4, r7, r5
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	f005 fc28 	bl	800a708 <HAL_I2C_Master_Receive_DMA>
 8004eb8:	0003      	movs	r3, r0
 8004eba:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004ebc:	197b      	adds	r3, r7, r5
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d001      	beq.n	8004ec8 <ReadI2C+0x44>
        return false;
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	e000      	b.n	8004eca <ReadI2C+0x46>
    }
    return true;
 8004ec8:	2301      	movs	r3, #1
}
 8004eca:	0018      	movs	r0, r3
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	b004      	add	sp, #16
 8004ed0:	bdb0      	pop	{r4, r5, r7, pc}
 8004ed2:	46c0      	nop			@ (mov r8, r8)
 8004ed4:	20000a84 	.word	0x20000a84

08004ed8 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8004ed8:	b5b0      	push	{r4, r5, r7, lr}
 8004eda:	b084      	sub	sp, #16
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6039      	str	r1, [r7, #0]
 8004ee0:	0011      	movs	r1, r2
 8004ee2:	1dfb      	adds	r3, r7, #7
 8004ee4:	1c02      	adds	r2, r0, #0
 8004ee6:	701a      	strb	r2, [r3, #0]
 8004ee8:	1dbb      	adds	r3, r7, #6
 8004eea:	1c0a      	adds	r2, r1, #0
 8004eec:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 8004eee:	4b0e      	ldr	r3, [pc, #56]	@ (8004f28 <WriteI2C+0x50>)
 8004ef0:	6818      	ldr	r0, [r3, #0]
 8004ef2:	1dfb      	adds	r3, r7, #7
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b29b      	uxth	r3, r3
 8004ef8:	18db      	adds	r3, r3, r3
 8004efa:	b299      	uxth	r1, r3
 8004efc:	1dbb      	adds	r3, r7, #6
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	250f      	movs	r5, #15
 8004f04:	197c      	adds	r4, r7, r5
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	f005 faf8 	bl	800a4fc <HAL_I2C_Master_Transmit_DMA>
 8004f0c:	0003      	movs	r3, r0
 8004f0e:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8004f10:	197b      	adds	r3, r7, r5
 8004f12:	781b      	ldrb	r3, [r3, #0]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d001      	beq.n	8004f1c <WriteI2C+0x44>
        return false;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	e000      	b.n	8004f1e <WriteI2C+0x46>
    }
    return true;
 8004f1c:	2301      	movs	r3, #1
}
 8004f1e:	0018      	movs	r0, r3
 8004f20:	46bd      	mov	sp, r7
 8004f22:	b004      	add	sp, #16
 8004f24:	bdb0      	pop	{r4, r5, r7, pc}
 8004f26:	46c0      	nop			@ (mov r8, r8)
 8004f28:	20000a84 	.word	0x20000a84

08004f2c <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8004f2c:	b580      	push	{r7, lr}
 8004f2e:	b082      	sub	sp, #8
 8004f30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8004f32:	003b      	movs	r3, r7
 8004f34:	0018      	movs	r0, r3
 8004f36:	2308      	movs	r3, #8
 8004f38:	001a      	movs	r2, r3
 8004f3a:	2100      	movs	r1, #0
 8004f3c:	f012 ff1e 	bl	8017d7c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8004f40:	4b30      	ldr	r3, [pc, #192]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f42:	4a31      	ldr	r2, [pc, #196]	@ (8005008 <MX_ADC_Init+0xdc>)
 8004f44:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 8004f46:	4b2f      	ldr	r3, [pc, #188]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f48:	2200      	movs	r2, #0
 8004f4a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8004f4c:	4b2d      	ldr	r3, [pc, #180]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f4e:	22c0      	movs	r2, #192	@ 0xc0
 8004f50:	0612      	lsls	r2, r2, #24
 8004f52:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8004f54:	4b2b      	ldr	r3, [pc, #172]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f56:	2200      	movs	r2, #0
 8004f58:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8004f5a:	4b2a      	ldr	r3, [pc, #168]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8004f60:	4b28      	ldr	r3, [pc, #160]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f62:	2201      	movs	r2, #1
 8004f64:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8004f66:	4b27      	ldr	r3, [pc, #156]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f68:	2200      	movs	r2, #0
 8004f6a:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8004f6c:	4b25      	ldr	r3, [pc, #148]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f6e:	2220      	movs	r2, #32
 8004f70:	2100      	movs	r1, #0
 8004f72:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 8004f74:	4b23      	ldr	r3, [pc, #140]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f76:	2221      	movs	r2, #33	@ 0x21
 8004f78:	2101      	movs	r1, #1
 8004f7a:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8004f7c:	4b21      	ldr	r3, [pc, #132]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f7e:	2200      	movs	r2, #0
 8004f80:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8004f82:	4b20      	ldr	r3, [pc, #128]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f84:	22c2      	movs	r2, #194	@ 0xc2
 8004f86:	32ff      	adds	r2, #255	@ 0xff
 8004f88:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8004f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f8c:	222c      	movs	r2, #44	@ 0x2c
 8004f8e:	2100      	movs	r1, #0
 8004f90:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004f92:	4b1c      	ldr	r3, [pc, #112]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f94:	2204      	movs	r2, #4
 8004f96:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8004f98:	4b1a      	ldr	r3, [pc, #104]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8004f9e:	4b19      	ldr	r3, [pc, #100]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 8004fa4:	4b17      	ldr	r3, [pc, #92]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8004faa:	4b16      	ldr	r3, [pc, #88]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004fac:	2200      	movs	r2, #0
 8004fae:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8004fb0:	4b14      	ldr	r3, [pc, #80]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f004 f886 	bl	80090c4 <HAL_ADC_Init>
 8004fb8:	1e03      	subs	r3, r0, #0
 8004fba:	d001      	beq.n	8004fc0 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 8004fbc:	f000 fdb8 	bl	8005b30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 8004fc0:	003b      	movs	r3, r7
 8004fc2:	4a12      	ldr	r2, [pc, #72]	@ (800500c <MX_ADC_Init+0xe0>)
 8004fc4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8004fc6:	003b      	movs	r3, r7
 8004fc8:	2280      	movs	r2, #128	@ 0x80
 8004fca:	0152      	lsls	r2, r2, #5
 8004fcc:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fce:	003a      	movs	r2, r7
 8004fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004fd2:	0011      	movs	r1, r2
 8004fd4:	0018      	movs	r0, r3
 8004fd6:	f004 fae5 	bl	80095a4 <HAL_ADC_ConfigChannel>
 8004fda:	1e03      	subs	r3, r0, #0
 8004fdc:	d001      	beq.n	8004fe2 <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 8004fde:	f000 fda7 	bl	8005b30 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8004fe2:	003b      	movs	r3, r7
 8004fe4:	4a0a      	ldr	r2, [pc, #40]	@ (8005010 <MX_ADC_Init+0xe4>)
 8004fe6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8004fe8:	003a      	movs	r2, r7
 8004fea:	4b06      	ldr	r3, [pc, #24]	@ (8005004 <MX_ADC_Init+0xd8>)
 8004fec:	0011      	movs	r1, r2
 8004fee:	0018      	movs	r0, r3
 8004ff0:	f004 fad8 	bl	80095a4 <HAL_ADC_ConfigChannel>
 8004ff4:	1e03      	subs	r3, r0, #0
 8004ff6:	d001      	beq.n	8004ffc <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 8004ff8:	f000 fd9a 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8004ffc:	46c0      	nop			@ (mov r8, r8)
 8004ffe:	46bd      	mov	sp, r7
 8005000:	b002      	add	sp, #8
 8005002:	bd80      	pop	{r7, pc}
 8005004:	20000a88 	.word	0x20000a88
 8005008:	40012400 	.word	0x40012400
 800500c:	38004000 	.word	0x38004000
 8005010:	3c008000 	.word	0x3c008000

08005014 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8005014:	b590      	push	{r4, r7, lr}
 8005016:	b089      	sub	sp, #36	@ 0x24
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800501c:	240c      	movs	r4, #12
 800501e:	193b      	adds	r3, r7, r4
 8005020:	0018      	movs	r0, r3
 8005022:	2314      	movs	r3, #20
 8005024:	001a      	movs	r2, r3
 8005026:	2100      	movs	r1, #0
 8005028:	f012 fea8 	bl	8017d7c <memset>
  if(adcHandle->Instance==ADC1)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a14      	ldr	r2, [pc, #80]	@ (8005084 <HAL_ADC_MspInit+0x70>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d121      	bne.n	800507a <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8005036:	4b14      	ldr	r3, [pc, #80]	@ (8005088 <HAL_ADC_MspInit+0x74>)
 8005038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800503a:	4b13      	ldr	r3, [pc, #76]	@ (8005088 <HAL_ADC_MspInit+0x74>)
 800503c:	2180      	movs	r1, #128	@ 0x80
 800503e:	0089      	lsls	r1, r1, #2
 8005040:	430a      	orrs	r2, r1
 8005042:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005044:	4b10      	ldr	r3, [pc, #64]	@ (8005088 <HAL_ADC_MspInit+0x74>)
 8005046:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005048:	4b0f      	ldr	r3, [pc, #60]	@ (8005088 <HAL_ADC_MspInit+0x74>)
 800504a:	2104      	movs	r1, #4
 800504c:	430a      	orrs	r2, r1
 800504e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005050:	4b0d      	ldr	r3, [pc, #52]	@ (8005088 <HAL_ADC_MspInit+0x74>)
 8005052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005054:	2204      	movs	r2, #4
 8005056:	4013      	ands	r3, r2
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 800505c:	193b      	adds	r3, r7, r4
 800505e:	2230      	movs	r2, #48	@ 0x30
 8005060:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005062:	193b      	adds	r3, r7, r4
 8005064:	2203      	movs	r2, #3
 8005066:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005068:	193b      	adds	r3, r7, r4
 800506a:	2200      	movs	r2, #0
 800506c:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800506e:	193b      	adds	r3, r7, r4
 8005070:	4a06      	ldr	r2, [pc, #24]	@ (800508c <HAL_ADC_MspInit+0x78>)
 8005072:	0019      	movs	r1, r3
 8005074:	0010      	movs	r0, r2
 8005076:	f004 ff2d 	bl	8009ed4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800507a:	46c0      	nop			@ (mov r8, r8)
 800507c:	46bd      	mov	sp, r7
 800507e:	b009      	add	sp, #36	@ 0x24
 8005080:	bd90      	pop	{r4, r7, pc}
 8005082:	46c0      	nop			@ (mov r8, r8)
 8005084:	40012400 	.word	0x40012400
 8005088:	40021000 	.word	0x40021000
 800508c:	50000800 	.word	0x50000800

08005090 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b082      	sub	sp, #8
 8005094:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8005096:	4b10      	ldr	r3, [pc, #64]	@ (80050d8 <MX_DMA_Init+0x48>)
 8005098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800509a:	4b0f      	ldr	r3, [pc, #60]	@ (80050d8 <MX_DMA_Init+0x48>)
 800509c:	2101      	movs	r1, #1
 800509e:	430a      	orrs	r2, r1
 80050a0:	631a      	str	r2, [r3, #48]	@ 0x30
 80050a2:	4b0d      	ldr	r3, [pc, #52]	@ (80050d8 <MX_DMA_Init+0x48>)
 80050a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050a6:	2201      	movs	r2, #1
 80050a8:	4013      	ands	r3, r2
 80050aa:	607b      	str	r3, [r7, #4]
 80050ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80050ae:	2200      	movs	r2, #0
 80050b0:	2100      	movs	r1, #0
 80050b2:	200a      	movs	r0, #10
 80050b4:	f004 fc30 	bl	8009918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80050b8:	200a      	movs	r0, #10
 80050ba:	f004 fc42 	bl	8009942 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80050be:	2200      	movs	r2, #0
 80050c0:	2103      	movs	r1, #3
 80050c2:	200b      	movs	r0, #11
 80050c4:	f004 fc28 	bl	8009918 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80050c8:	200b      	movs	r0, #11
 80050ca:	f004 fc3a 	bl	8009942 <HAL_NVIC_EnableIRQ>

}
 80050ce:	46c0      	nop			@ (mov r8, r8)
 80050d0:	46bd      	mov	sp, r7
 80050d2:	b002      	add	sp, #8
 80050d4:	bd80      	pop	{r7, pc}
 80050d6:	46c0      	nop			@ (mov r8, r8)
 80050d8:	40021000 	.word	0x40021000

080050dc <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80050dc:	b580      	push	{r7, lr}
 80050de:	b084      	sub	sp, #16
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	60f8      	str	r0, [r7, #12]
 80050e4:	60b9      	str	r1, [r7, #8]
 80050e6:	607a      	str	r2, [r7, #4]
 80050e8:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80050ea:	4b0c      	ldr	r3, [pc, #48]	@ (800511c <Gadget_Init+0x40>)
 80050ec:	6818      	ldr	r0, [r3, #0]
 80050ee:	f000 ffc1 	bl	8006074 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80050f2:	683a      	ldr	r2, [r7, #0]
 80050f4:	68b9      	ldr	r1, [r7, #8]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	0018      	movs	r0, r3
 80050fa:	f000 fd8d 	bl	8005c18 <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	0018      	movs	r0, r3
 8005102:	f7fe fb19 	bl	8003738 <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8005106:	4a06      	ldr	r2, [pc, #24]	@ (8005120 <Gadget_Init+0x44>)
 8005108:	4b06      	ldr	r3, [pc, #24]	@ (8005124 <Gadget_Init+0x48>)
 800510a:	0019      	movs	r1, r3
 800510c:	2003      	movs	r0, #3
 800510e:	f003 fbb3 	bl	8008878 <CreateLine>
}
 8005112:	46c0      	nop			@ (mov r8, r8)
 8005114:	46bd      	mov	sp, r7
 8005116:	b004      	add	sp, #16
 8005118:	bd80      	pop	{r7, pc}
 800511a:	46c0      	nop			@ (mov r8, r8)
 800511c:	20000110 	.word	0x20000110
 8005120:	0801ad98 	.word	0x0801ad98
 8005124:	0801adac 	.word	0x0801adac

08005128 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8005128:	b580      	push	{r7, lr}
 800512a:	af00      	add	r7, sp, #0
  Meas_Test();
 800512c:	f000 fff0 	bl	8006110 <Meas_Test>
}
 8005130:	46c0      	nop			@ (mov r8, r8)
 8005132:	46bd      	mov	sp, r7
 8005134:	bd80      	pop	{r7, pc}

08005136 <UpkeepGadget>:

void UpkeepGadget() {
 8005136:	b580      	push	{r7, lr}
 8005138:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  Meas_Upkeep();
 800513a:	f000 ff27 	bl	8005f8c <Meas_Upkeep>
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 800513e:	46c0      	nop			@ (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005144:	b580      	push	{r7, lr}
 8005146:	b082      	sub	sp, #8
 8005148:	af00      	add	r7, sp, #0
 800514a:	6078      	str	r0, [r7, #4]
 800514c:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 800514e:	683a      	ldr	r2, [r7, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	0011      	movs	r1, r2
 8005154:	0018      	movs	r0, r3
 8005156:	f002 fa9d 	bl	8007694 <SGP_Init>
}
 800515a:	46c0      	nop			@ (mov r8, r8)
 800515c:	46bd      	mov	sp, r7
 800515e:	b002      	add	sp, #8
 8005160:	bd80      	pop	{r7, pc}

08005162 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 8005162:	b580      	push	{r7, lr}
 8005164:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 8005166:	f002 faaf 	bl	80076c8 <SGP_StartMeasurement>
}
 800516a:	46c0      	nop			@ (mov r8, r8)
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b082      	sub	sp, #8
 8005174:	af00      	add	r7, sp, #0
 8005176:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	0018      	movs	r0, r3
 800517c:	f002 fb14 	bl	80077a8 <SGP_GetMeasurementValues>
 8005180:	0003      	movs	r3, r0
}
 8005182:	0018      	movs	r0, r3
 8005184:	46bd      	mov	sp, r7
 8005186:	b002      	add	sp, #8
 8005188:	bd80      	pop	{r7, pc}

0800518a <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 800518a:	b580      	push	{r7, lr}
 800518c:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 800518e:	f002 fd29 	bl	8007be4 <SGP_DeviceConnected>
 8005192:	0003      	movs	r3, r0
}
 8005194:	0018      	movs	r0, r3
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
	...

0800519c <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 800519c:	b590      	push	{r4, r7, lr}
 800519e:	b08b      	sub	sp, #44	@ 0x2c
 80051a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80051a2:	2414      	movs	r4, #20
 80051a4:	193b      	adds	r3, r7, r4
 80051a6:	0018      	movs	r0, r3
 80051a8:	2314      	movs	r3, #20
 80051aa:	001a      	movs	r2, r3
 80051ac:	2100      	movs	r1, #0
 80051ae:	f012 fde5 	bl	8017d7c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80051b2:	4b70      	ldr	r3, [pc, #448]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051b4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051b6:	4b6f      	ldr	r3, [pc, #444]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051b8:	2104      	movs	r1, #4
 80051ba:	430a      	orrs	r2, r1
 80051bc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051be:	4b6d      	ldr	r3, [pc, #436]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051c2:	2204      	movs	r2, #4
 80051c4:	4013      	ands	r3, r2
 80051c6:	613b      	str	r3, [r7, #16]
 80051c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80051ca:	4b6a      	ldr	r3, [pc, #424]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051cc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051ce:	4b69      	ldr	r3, [pc, #420]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051d0:	2180      	movs	r1, #128	@ 0x80
 80051d2:	430a      	orrs	r2, r1
 80051d4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051d6:	4b67      	ldr	r3, [pc, #412]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051da:	2280      	movs	r2, #128	@ 0x80
 80051dc:	4013      	ands	r3, r2
 80051de:	60fb      	str	r3, [r7, #12]
 80051e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80051e2:	4b64      	ldr	r3, [pc, #400]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051e6:	4b63      	ldr	r3, [pc, #396]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051e8:	2101      	movs	r1, #1
 80051ea:	430a      	orrs	r2, r1
 80051ec:	62da      	str	r2, [r3, #44]	@ 0x2c
 80051ee:	4b61      	ldr	r3, [pc, #388]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051f2:	2201      	movs	r2, #1
 80051f4:	4013      	ands	r3, r2
 80051f6:	60bb      	str	r3, [r7, #8]
 80051f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80051fa:	4b5e      	ldr	r3, [pc, #376]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 80051fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80051fe:	4b5d      	ldr	r3, [pc, #372]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 8005200:	2102      	movs	r1, #2
 8005202:	430a      	orrs	r2, r1
 8005204:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005206:	4b5b      	ldr	r3, [pc, #364]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 8005208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800520a:	2202      	movs	r2, #2
 800520c:	4013      	ands	r3, r2
 800520e:	607b      	str	r3, [r7, #4]
 8005210:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005212:	4b58      	ldr	r3, [pc, #352]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 8005214:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005216:	4b57      	ldr	r3, [pc, #348]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 8005218:	2108      	movs	r1, #8
 800521a:	430a      	orrs	r2, r1
 800521c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800521e:	4b55      	ldr	r3, [pc, #340]	@ (8005374 <MX_GPIO_Init+0x1d8>)
 8005220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005222:	2208      	movs	r2, #8
 8005224:	4013      	ands	r3, r2
 8005226:	603b      	str	r3, [r7, #0]
 8005228:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800522a:	4b53      	ldr	r3, [pc, #332]	@ (8005378 <MX_GPIO_Init+0x1dc>)
 800522c:	2201      	movs	r2, #1
 800522e:	2101      	movs	r1, #1
 8005230:	0018      	movs	r0, r3
 8005232:	f005 f8af 	bl	800a394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8005236:	4b50      	ldr	r3, [pc, #320]	@ (8005378 <MX_GPIO_Init+0x1dc>)
 8005238:	2200      	movs	r2, #0
 800523a:	2102      	movs	r1, #2
 800523c:	0018      	movs	r0, r3
 800523e:	f005 f8a9 	bl	800a394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8005242:	494e      	ldr	r1, [pc, #312]	@ (800537c <MX_GPIO_Init+0x1e0>)
 8005244:	4b4e      	ldr	r3, [pc, #312]	@ (8005380 <MX_GPIO_Init+0x1e4>)
 8005246:	2201      	movs	r2, #1
 8005248:	0018      	movs	r0, r3
 800524a:	f005 f8a3 	bl	800a394 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800524e:	2380      	movs	r3, #128	@ 0x80
 8005250:	011b      	lsls	r3, r3, #4
 8005252:	484c      	ldr	r0, [pc, #304]	@ (8005384 <MX_GPIO_Init+0x1e8>)
 8005254:	2201      	movs	r2, #1
 8005256:	0019      	movs	r1, r3
 8005258:	f005 f89c 	bl	800a394 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC9 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 800525c:	193b      	adds	r3, r7, r4
 800525e:	4a4a      	ldr	r2, [pc, #296]	@ (8005388 <MX_GPIO_Init+0x1ec>)
 8005260:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_9|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8005262:	193b      	adds	r3, r7, r4
 8005264:	2203      	movs	r2, #3
 8005266:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005268:	193b      	adds	r3, r7, r4
 800526a:	2200      	movs	r2, #0
 800526c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800526e:	193b      	adds	r3, r7, r4
 8005270:	4a44      	ldr	r2, [pc, #272]	@ (8005384 <MX_GPIO_Init+0x1e8>)
 8005272:	0019      	movs	r1, r3
 8005274:	0010      	movs	r0, r2
 8005276:	f004 fe2d 	bl	8009ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 800527a:	193b      	adds	r3, r7, r4
 800527c:	2203      	movs	r2, #3
 800527e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005280:	193b      	adds	r3, r7, r4
 8005282:	2201      	movs	r2, #1
 8005284:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005286:	193b      	adds	r3, r7, r4
 8005288:	2200      	movs	r2, #0
 800528a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800528c:	193b      	adds	r3, r7, r4
 800528e:	2200      	movs	r2, #0
 8005290:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005292:	193b      	adds	r3, r7, r4
 8005294:	4a38      	ldr	r2, [pc, #224]	@ (8005378 <MX_GPIO_Init+0x1dc>)
 8005296:	0019      	movs	r1, r3
 8005298:	0010      	movs	r0, r2
 800529a:	f004 fe1b 	bl	8009ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_15;
 800529e:	193b      	adds	r3, r7, r4
 80052a0:	4a3a      	ldr	r2, [pc, #232]	@ (800538c <MX_GPIO_Init+0x1f0>)
 80052a2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80052a4:	193b      	adds	r3, r7, r4
 80052a6:	2203      	movs	r2, #3
 80052a8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052aa:	193b      	adds	r3, r7, r4
 80052ac:	2200      	movs	r2, #0
 80052ae:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052b0:	193a      	adds	r2, r7, r4
 80052b2:	23a0      	movs	r3, #160	@ 0xa0
 80052b4:	05db      	lsls	r3, r3, #23
 80052b6:	0011      	movs	r1, r2
 80052b8:	0018      	movs	r0, r3
 80052ba:	f004 fe0b 	bl	8009ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin;
 80052be:	193b      	adds	r3, r7, r4
 80052c0:	22c0      	movs	r2, #192	@ 0xc0
 80052c2:	0052      	lsls	r2, r2, #1
 80052c4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80052c6:	193b      	adds	r3, r7, r4
 80052c8:	2200      	movs	r2, #0
 80052ca:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	193b      	adds	r3, r7, r4
 80052ce:	2200      	movs	r2, #0
 80052d0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80052d2:	193a      	adds	r2, r7, r4
 80052d4:	23a0      	movs	r3, #160	@ 0xa0
 80052d6:	05db      	lsls	r3, r3, #23
 80052d8:	0011      	movs	r1, r2
 80052da:	0018      	movs	r0, r3
 80052dc:	f004 fdfa 	bl	8009ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 80052e0:	193b      	adds	r3, r7, r4
 80052e2:	4a26      	ldr	r2, [pc, #152]	@ (800537c <MX_GPIO_Init+0x1e0>)
 80052e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80052e6:	193b      	adds	r3, r7, r4
 80052e8:	2201      	movs	r2, #1
 80052ea:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ec:	193b      	adds	r3, r7, r4
 80052ee:	2200      	movs	r2, #0
 80052f0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f2:	193b      	adds	r3, r7, r4
 80052f4:	2200      	movs	r2, #0
 80052f6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80052f8:	193b      	adds	r3, r7, r4
 80052fa:	4a21      	ldr	r2, [pc, #132]	@ (8005380 <MX_GPIO_Init+0x1e4>)
 80052fc:	0019      	movs	r1, r3
 80052fe:	0010      	movs	r0, r2
 8005300:	f004 fde8 	bl	8009ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8005304:	193b      	adds	r3, r7, r4
 8005306:	4a22      	ldr	r2, [pc, #136]	@ (8005390 <MX_GPIO_Init+0x1f4>)
 8005308:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800530a:	193b      	adds	r3, r7, r4
 800530c:	2203      	movs	r2, #3
 800530e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005310:	193b      	adds	r3, r7, r4
 8005312:	2200      	movs	r2, #0
 8005314:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005316:	193b      	adds	r3, r7, r4
 8005318:	4a19      	ldr	r2, [pc, #100]	@ (8005380 <MX_GPIO_Init+0x1e4>)
 800531a:	0019      	movs	r1, r3
 800531c:	0010      	movs	r0, r2
 800531e:	f004 fdd9 	bl	8009ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin;
 8005322:	0021      	movs	r1, r4
 8005324:	187b      	adds	r3, r7, r1
 8005326:	2280      	movs	r2, #128	@ 0x80
 8005328:	0112      	lsls	r2, r2, #4
 800532a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800532c:	000c      	movs	r4, r1
 800532e:	193b      	adds	r3, r7, r4
 8005330:	2201      	movs	r2, #1
 8005332:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005334:	193b      	adds	r3, r7, r4
 8005336:	2200      	movs	r2, #0
 8005338:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800533a:	193b      	adds	r3, r7, r4
 800533c:	2200      	movs	r2, #0
 800533e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_PSU_EN_GPIO_Port, &GPIO_InitStruct);
 8005340:	193b      	adds	r3, r7, r4
 8005342:	4a10      	ldr	r2, [pc, #64]	@ (8005384 <MX_GPIO_Init+0x1e8>)
 8005344:	0019      	movs	r1, r3
 8005346:	0010      	movs	r0, r2
 8005348:	f004 fdc4 	bl	8009ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 800534c:	0021      	movs	r1, r4
 800534e:	187b      	adds	r3, r7, r1
 8005350:	2204      	movs	r2, #4
 8005352:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005354:	187b      	adds	r3, r7, r1
 8005356:	2200      	movs	r2, #0
 8005358:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800535a:	187b      	adds	r3, r7, r1
 800535c:	2200      	movs	r2, #0
 800535e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8005360:	187b      	adds	r3, r7, r1
 8005362:	4a0c      	ldr	r2, [pc, #48]	@ (8005394 <MX_GPIO_Init+0x1f8>)
 8005364:	0019      	movs	r1, r3
 8005366:	0010      	movs	r0, r2
 8005368:	f004 fdb4 	bl	8009ed4 <HAL_GPIO_Init>

}
 800536c:	46c0      	nop			@ (mov r8, r8)
 800536e:	46bd      	mov	sp, r7
 8005370:	b00b      	add	sp, #44	@ 0x2c
 8005372:	bd90      	pop	{r4, r7, pc}
 8005374:	40021000 	.word	0x40021000
 8005378:	50001c00 	.word	0x50001c00
 800537c:	00000301 	.word	0x00000301
 8005380:	50000400 	.word	0x50000400
 8005384:	50000800 	.word	0x50000800
 8005388:	0000320f 	.word	0x0000320f
 800538c:	00008070 	.word	0x00008070
 8005390:	0000403e 	.word	0x0000403e
 8005394:	50000c00 	.word	0x50000c00

08005398 <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2100      	movs	r1, #0
 80053a6:	0018      	movs	r0, r3
 80053a8:	f00a f956 	bl	800f658 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2108      	movs	r1, #8
 80053b0:	0018      	movs	r0, r3
 80053b2:	f00a f951 	bl	800f658 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	210c      	movs	r1, #12
 80053ba:	0018      	movs	r0, r3
 80053bc:	f00a f94c 	bl	800f658 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 40000;
 80053c0:	2380      	movs	r3, #128	@ 0x80
 80053c2:	05db      	lsls	r3, r3, #23
 80053c4:	4a18      	ldr	r2, [pc, #96]	@ (8005428 <GPIO_InitPWMLEDs+0x90>)
 80053c6:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 40000;
 80053c8:	2380      	movs	r3, #128	@ 0x80
 80053ca:	05db      	lsls	r3, r3, #23
 80053cc:	4a16      	ldr	r2, [pc, #88]	@ (8005428 <GPIO_InitPWMLEDs+0x90>)
 80053ce:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 80053d0:	2380      	movs	r3, #128	@ 0x80
 80053d2:	05db      	lsls	r3, r3, #23
 80053d4:	4a14      	ldr	r2, [pc, #80]	@ (8005428 <GPIO_InitPWMLEDs+0x90>)
 80053d6:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 40000;
 80053d8:	2380      	movs	r3, #128	@ 0x80
 80053da:	05db      	lsls	r3, r3, #23
 80053dc:	4a12      	ldr	r2, [pc, #72]	@ (8005428 <GPIO_InitPWMLEDs+0x90>)
 80053de:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	2100      	movs	r1, #0
 80053e4:	0018      	movs	r0, r3
 80053e6:	f00a f937 	bl	800f658 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	2104      	movs	r1, #4
 80053ee:	0018      	movs	r0, r3
 80053f0:	f00a f932 	bl	800f658 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	2108      	movs	r1, #8
 80053f8:	0018      	movs	r0, r3
 80053fa:	f00a f92d 	bl	800f658 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 80053fe:	4b0b      	ldr	r3, [pc, #44]	@ (800542c <GPIO_InitPWMLEDs+0x94>)
 8005400:	22fa      	movs	r2, #250	@ 0xfa
 8005402:	0112      	lsls	r2, r2, #4
 8005404:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8005406:	4b09      	ldr	r3, [pc, #36]	@ (800542c <GPIO_InitPWMLEDs+0x94>)
 8005408:	22fa      	movs	r2, #250	@ 0xfa
 800540a:	0112      	lsls	r2, r2, #4
 800540c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 800540e:	4b07      	ldr	r3, [pc, #28]	@ (800542c <GPIO_InitPWMLEDs+0x94>)
 8005410:	22fa      	movs	r2, #250	@ 0xfa
 8005412:	0112      	lsls	r2, r2, #4
 8005414:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8005416:	4b05      	ldr	r3, [pc, #20]	@ (800542c <GPIO_InitPWMLEDs+0x94>)
 8005418:	22fa      	movs	r2, #250	@ 0xfa
 800541a:	0112      	lsls	r2, r2, #4
 800541c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800541e:	46c0      	nop			@ (mov r8, r8)
 8005420:	46bd      	mov	sp, r7
 8005422:	b002      	add	sp, #8
 8005424:	bd80      	pop	{r7, pc}
 8005426:	46c0      	nop			@ (mov r8, r8)
 8005428:	00009c40 	.word	0x00009c40
 800542c:	40000400 	.word	0x40000400

08005430 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
 8005438:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	0011      	movs	r1, r2
 8005440:	0018      	movs	r0, r3
 8005442:	f003 fb71 	bl	8008b28 <HIDS_Init>
}
 8005446:	46c0      	nop			@ (mov r8, r8)
 8005448:	46bd      	mov	sp, r7
 800544a:	b002      	add	sp, #8
 800544c:	bd80      	pop	{r7, pc}

0800544e <HT_StartMeasurement>:

void HT_StartMeasurement() {
 800544e:	b580      	push	{r7, lr}
 8005450:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8005452:	f003 fb8b 	bl	8008b6c <HIDS_StartMeasurement>
}
 8005456:	46c0      	nop			@ (mov r8, r8)
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 800545c:	b580      	push	{r7, lr}
 800545e:	b082      	sub	sp, #8
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8005466:	683a      	ldr	r2, [r7, #0]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	0011      	movs	r1, r2
 800546c:	0018      	movs	r0, r3
 800546e:	f003 fc59 	bl	8008d24 <HIDS_GetMeasurementValues>
 8005472:	0003      	movs	r3, r0
}
 8005474:	0018      	movs	r0, r3
 8005476:	46bd      	mov	sp, r7
 8005478:	b002      	add	sp, #8
 800547a:	bd80      	pop	{r7, pc}

0800547c <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 800547c:	b580      	push	{r7, lr}
 800547e:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8005480:	f003 fbf4 	bl	8008c6c <HIDS_DeviceConnected>
 8005484:	0003      	movs	r3, r0
}
 8005486:	0018      	movs	r0, r3
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}

0800548c <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800548c:	b580      	push	{r7, lr}
 800548e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8005490:	4b1b      	ldr	r3, [pc, #108]	@ (8005500 <MX_I2C1_Init+0x74>)
 8005492:	4a1c      	ldr	r2, [pc, #112]	@ (8005504 <MX_I2C1_Init+0x78>)
 8005494:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8005496:	4b1a      	ldr	r3, [pc, #104]	@ (8005500 <MX_I2C1_Init+0x74>)
 8005498:	4a1b      	ldr	r2, [pc, #108]	@ (8005508 <MX_I2C1_Init+0x7c>)
 800549a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800549c:	4b18      	ldr	r3, [pc, #96]	@ (8005500 <MX_I2C1_Init+0x74>)
 800549e:	2200      	movs	r2, #0
 80054a0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80054a2:	4b17      	ldr	r3, [pc, #92]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054a4:	2201      	movs	r2, #1
 80054a6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80054a8:	4b15      	ldr	r3, [pc, #84]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80054ae:	4b14      	ldr	r3, [pc, #80]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054b0:	2200      	movs	r2, #0
 80054b2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80054b4:	4b12      	ldr	r3, [pc, #72]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80054ba:	4b11      	ldr	r3, [pc, #68]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054bc:	2200      	movs	r2, #0
 80054be:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80054c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054c2:	2200      	movs	r2, #0
 80054c4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80054c6:	4b0e      	ldr	r3, [pc, #56]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054c8:	0018      	movs	r0, r3
 80054ca:	f004 ff81 	bl	800a3d0 <HAL_I2C_Init>
 80054ce:	1e03      	subs	r3, r0, #0
 80054d0:	d001      	beq.n	80054d6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80054d2:	f000 fb2d 	bl	8005b30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80054d6:	4b0a      	ldr	r3, [pc, #40]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054d8:	2100      	movs	r1, #0
 80054da:	0018      	movs	r0, r3
 80054dc:	f006 fef0 	bl	800c2c0 <HAL_I2CEx_ConfigAnalogFilter>
 80054e0:	1e03      	subs	r3, r0, #0
 80054e2:	d001      	beq.n	80054e8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80054e4:	f000 fb24 	bl	8005b30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80054e8:	4b05      	ldr	r3, [pc, #20]	@ (8005500 <MX_I2C1_Init+0x74>)
 80054ea:	2100      	movs	r1, #0
 80054ec:	0018      	movs	r0, r3
 80054ee:	f006 ff33 	bl	800c358 <HAL_I2CEx_ConfigDigitalFilter>
 80054f2:	1e03      	subs	r3, r0, #0
 80054f4:	d001      	beq.n	80054fa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80054f6:	f000 fb1b 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80054fa:	46c0      	nop			@ (mov r8, r8)
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bd80      	pop	{r7, pc}
 8005500:	20000ae4 	.word	0x20000ae4
 8005504:	40005400 	.word	0x40005400
 8005508:	00503d58 	.word	0x00503d58

0800550c <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8005510:	4b1b      	ldr	r3, [pc, #108]	@ (8005580 <MX_I2C2_Init+0x74>)
 8005512:	4a1c      	ldr	r2, [pc, #112]	@ (8005584 <MX_I2C2_Init+0x78>)
 8005514:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8005516:	4b1a      	ldr	r3, [pc, #104]	@ (8005580 <MX_I2C2_Init+0x74>)
 8005518:	4a1b      	ldr	r2, [pc, #108]	@ (8005588 <MX_I2C2_Init+0x7c>)
 800551a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800551c:	4b18      	ldr	r3, [pc, #96]	@ (8005580 <MX_I2C2_Init+0x74>)
 800551e:	2200      	movs	r2, #0
 8005520:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8005522:	4b17      	ldr	r3, [pc, #92]	@ (8005580 <MX_I2C2_Init+0x74>)
 8005524:	2201      	movs	r2, #1
 8005526:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8005528:	4b15      	ldr	r3, [pc, #84]	@ (8005580 <MX_I2C2_Init+0x74>)
 800552a:	2200      	movs	r2, #0
 800552c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800552e:	4b14      	ldr	r3, [pc, #80]	@ (8005580 <MX_I2C2_Init+0x74>)
 8005530:	2200      	movs	r2, #0
 8005532:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8005534:	4b12      	ldr	r3, [pc, #72]	@ (8005580 <MX_I2C2_Init+0x74>)
 8005536:	2200      	movs	r2, #0
 8005538:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800553a:	4b11      	ldr	r3, [pc, #68]	@ (8005580 <MX_I2C2_Init+0x74>)
 800553c:	2200      	movs	r2, #0
 800553e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8005540:	4b0f      	ldr	r3, [pc, #60]	@ (8005580 <MX_I2C2_Init+0x74>)
 8005542:	2200      	movs	r2, #0
 8005544:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8005546:	4b0e      	ldr	r3, [pc, #56]	@ (8005580 <MX_I2C2_Init+0x74>)
 8005548:	0018      	movs	r0, r3
 800554a:	f004 ff41 	bl	800a3d0 <HAL_I2C_Init>
 800554e:	1e03      	subs	r3, r0, #0
 8005550:	d001      	beq.n	8005556 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8005552:	f000 faed 	bl	8005b30 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8005556:	4b0a      	ldr	r3, [pc, #40]	@ (8005580 <MX_I2C2_Init+0x74>)
 8005558:	2100      	movs	r1, #0
 800555a:	0018      	movs	r0, r3
 800555c:	f006 feb0 	bl	800c2c0 <HAL_I2CEx_ConfigAnalogFilter>
 8005560:	1e03      	subs	r3, r0, #0
 8005562:	d001      	beq.n	8005568 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8005564:	f000 fae4 	bl	8005b30 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8005568:	4b05      	ldr	r3, [pc, #20]	@ (8005580 <MX_I2C2_Init+0x74>)
 800556a:	2100      	movs	r1, #0
 800556c:	0018      	movs	r0, r3
 800556e:	f006 fef3 	bl	800c358 <HAL_I2CEx_ConfigDigitalFilter>
 8005572:	1e03      	subs	r3, r0, #0
 8005574:	d001      	beq.n	800557a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8005576:	f000 fadb 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800557a:	46c0      	nop			@ (mov r8, r8)
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}
 8005580:	20000b38 	.word	0x20000b38
 8005584:	40005800 	.word	0x40005800
 8005588:	00503d58 	.word	0x00503d58

0800558c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800558c:	b590      	push	{r4, r7, lr}
 800558e:	b08b      	sub	sp, #44	@ 0x2c
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005594:	2414      	movs	r4, #20
 8005596:	193b      	adds	r3, r7, r4
 8005598:	0018      	movs	r0, r3
 800559a:	2314      	movs	r3, #20
 800559c:	001a      	movs	r2, r3
 800559e:	2100      	movs	r1, #0
 80055a0:	f012 fbec 	bl	8017d7c <memset>
  if(i2cHandle->Instance==I2C1)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4a5d      	ldr	r2, [pc, #372]	@ (8005720 <HAL_I2C_MspInit+0x194>)
 80055aa:	4293      	cmp	r3, r2
 80055ac:	d000      	beq.n	80055b0 <HAL_I2C_MspInit+0x24>
 80055ae:	e083      	b.n	80056b8 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80055b0:	4b5c      	ldr	r3, [pc, #368]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 80055b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b4:	4b5b      	ldr	r3, [pc, #364]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 80055b6:	2102      	movs	r1, #2
 80055b8:	430a      	orrs	r2, r1
 80055ba:	62da      	str	r2, [r3, #44]	@ 0x2c
 80055bc:	4b59      	ldr	r3, [pc, #356]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 80055be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055c0:	2202      	movs	r2, #2
 80055c2:	4013      	ands	r3, r2
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80055c8:	0021      	movs	r1, r4
 80055ca:	187b      	adds	r3, r7, r1
 80055cc:	22c0      	movs	r2, #192	@ 0xc0
 80055ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80055d0:	187b      	adds	r3, r7, r1
 80055d2:	2212      	movs	r2, #18
 80055d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d6:	187b      	adds	r3, r7, r1
 80055d8:	2200      	movs	r2, #0
 80055da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055dc:	187b      	adds	r3, r7, r1
 80055de:	2203      	movs	r2, #3
 80055e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80055e2:	187b      	adds	r3, r7, r1
 80055e4:	2201      	movs	r2, #1
 80055e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80055e8:	187b      	adds	r3, r7, r1
 80055ea:	4a4f      	ldr	r2, [pc, #316]	@ (8005728 <HAL_I2C_MspInit+0x19c>)
 80055ec:	0019      	movs	r1, r3
 80055ee:	0010      	movs	r0, r2
 80055f0:	f004 fc70 	bl	8009ed4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80055f4:	4b4b      	ldr	r3, [pc, #300]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 80055f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80055f8:	4b4a      	ldr	r3, [pc, #296]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 80055fa:	2180      	movs	r1, #128	@ 0x80
 80055fc:	0389      	lsls	r1, r1, #14
 80055fe:	430a      	orrs	r2, r1
 8005600:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8005602:	4b4a      	ldr	r3, [pc, #296]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 8005604:	4a4a      	ldr	r2, [pc, #296]	@ (8005730 <HAL_I2C_MspInit+0x1a4>)
 8005606:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8005608:	4b48      	ldr	r3, [pc, #288]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 800560a:	2206      	movs	r2, #6
 800560c:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800560e:	4b47      	ldr	r3, [pc, #284]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 8005610:	2200      	movs	r2, #0
 8005612:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005614:	4b45      	ldr	r3, [pc, #276]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 8005616:	2200      	movs	r2, #0
 8005618:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800561a:	4b44      	ldr	r3, [pc, #272]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 800561c:	2280      	movs	r2, #128	@ 0x80
 800561e:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005620:	4b42      	ldr	r3, [pc, #264]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 8005622:	2200      	movs	r2, #0
 8005624:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005626:	4b41      	ldr	r3, [pc, #260]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 8005628:	2200      	movs	r2, #0
 800562a:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 800562c:	4b3f      	ldr	r3, [pc, #252]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 800562e:	2200      	movs	r2, #0
 8005630:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005632:	4b3e      	ldr	r3, [pc, #248]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 8005634:	2200      	movs	r2, #0
 8005636:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005638:	4b3c      	ldr	r3, [pc, #240]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 800563a:	0018      	movs	r0, r3
 800563c:	f004 f99e 	bl	800997c <HAL_DMA_Init>
 8005640:	1e03      	subs	r3, r0, #0
 8005642:	d001      	beq.n	8005648 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8005644:	f000 fa74 	bl	8005b30 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a38      	ldr	r2, [pc, #224]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 800564c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800564e:	4b37      	ldr	r3, [pc, #220]	@ (800572c <HAL_I2C_MspInit+0x1a0>)
 8005650:	687a      	ldr	r2, [r7, #4]
 8005652:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8005654:	4b37      	ldr	r3, [pc, #220]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 8005656:	4a38      	ldr	r2, [pc, #224]	@ (8005738 <HAL_I2C_MspInit+0x1ac>)
 8005658:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 800565a:	4b36      	ldr	r3, [pc, #216]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 800565c:	2206      	movs	r2, #6
 800565e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005660:	4b34      	ldr	r3, [pc, #208]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 8005662:	2210      	movs	r2, #16
 8005664:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005666:	4b33      	ldr	r3, [pc, #204]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 8005668:	2200      	movs	r2, #0
 800566a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800566c:	4b31      	ldr	r3, [pc, #196]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 800566e:	2280      	movs	r2, #128	@ 0x80
 8005670:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005672:	4b30      	ldr	r3, [pc, #192]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 8005674:	2200      	movs	r2, #0
 8005676:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005678:	4b2e      	ldr	r3, [pc, #184]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 800567a:	2200      	movs	r2, #0
 800567c:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 800567e:	4b2d      	ldr	r3, [pc, #180]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 8005680:	2200      	movs	r2, #0
 8005682:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005684:	4b2b      	ldr	r3, [pc, #172]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 8005686:	2200      	movs	r2, #0
 8005688:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 800568a:	4b2a      	ldr	r3, [pc, #168]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 800568c:	0018      	movs	r0, r3
 800568e:	f004 f975 	bl	800997c <HAL_DMA_Init>
 8005692:	1e03      	subs	r3, r0, #0
 8005694:	d001      	beq.n	800569a <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8005696:	f000 fa4b 	bl	8005b30 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	4a25      	ldr	r2, [pc, #148]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 800569e:	639a      	str	r2, [r3, #56]	@ 0x38
 80056a0:	4b24      	ldr	r3, [pc, #144]	@ (8005734 <HAL_I2C_MspInit+0x1a8>)
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 80056a6:	2200      	movs	r2, #0
 80056a8:	2100      	movs	r1, #0
 80056aa:	2017      	movs	r0, #23
 80056ac:	f004 f934 	bl	8009918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 80056b0:	2017      	movs	r0, #23
 80056b2:	f004 f946 	bl	8009942 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 80056b6:	e02e      	b.n	8005716 <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	4a1f      	ldr	r2, [pc, #124]	@ (800573c <HAL_I2C_MspInit+0x1b0>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d129      	bne.n	8005716 <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056c2:	4b18      	ldr	r3, [pc, #96]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 80056c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80056c6:	4b17      	ldr	r3, [pc, #92]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 80056c8:	2102      	movs	r1, #2
 80056ca:	430a      	orrs	r2, r1
 80056cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80056ce:	4b15      	ldr	r3, [pc, #84]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 80056d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d2:	2202      	movs	r2, #2
 80056d4:	4013      	ands	r3, r2
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80056da:	2114      	movs	r1, #20
 80056dc:	187b      	adds	r3, r7, r1
 80056de:	22c0      	movs	r2, #192	@ 0xc0
 80056e0:	0112      	lsls	r2, r2, #4
 80056e2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80056e4:	187b      	adds	r3, r7, r1
 80056e6:	2212      	movs	r2, #18
 80056e8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056ea:	187b      	adds	r3, r7, r1
 80056ec:	2200      	movs	r2, #0
 80056ee:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f0:	187b      	adds	r3, r7, r1
 80056f2:	2203      	movs	r2, #3
 80056f4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 80056f6:	187b      	adds	r3, r7, r1
 80056f8:	2206      	movs	r2, #6
 80056fa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80056fc:	187b      	adds	r3, r7, r1
 80056fe:	4a0a      	ldr	r2, [pc, #40]	@ (8005728 <HAL_I2C_MspInit+0x19c>)
 8005700:	0019      	movs	r1, r3
 8005702:	0010      	movs	r0, r2
 8005704:	f004 fbe6 	bl	8009ed4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8005708:	4b06      	ldr	r3, [pc, #24]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 800570a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800570c:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <HAL_I2C_MspInit+0x198>)
 800570e:	2180      	movs	r1, #128	@ 0x80
 8005710:	03c9      	lsls	r1, r1, #15
 8005712:	430a      	orrs	r2, r1
 8005714:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8005716:	46c0      	nop			@ (mov r8, r8)
 8005718:	46bd      	mov	sp, r7
 800571a:	b00b      	add	sp, #44	@ 0x2c
 800571c:	bd90      	pop	{r4, r7, pc}
 800571e:	46c0      	nop			@ (mov r8, r8)
 8005720:	40005400 	.word	0x40005400
 8005724:	40021000 	.word	0x40021000
 8005728:	50000400 	.word	0x50000400
 800572c:	20000b8c 	.word	0x20000b8c
 8005730:	40020030 	.word	0x40020030
 8005734:	20000bd4 	.word	0x20000bd4
 8005738:	4002001c 	.word	0x4002001c
 800573c:	40005800 	.word	0x40005800

08005740 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8005740:	b580      	push	{r7, lr}
 8005742:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8005744:	4b10      	ldr	r3, [pc, #64]	@ (8005788 <MX_I2S2_Init+0x48>)
 8005746:	4a11      	ldr	r2, [pc, #68]	@ (800578c <MX_I2S2_Init+0x4c>)
 8005748:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 800574a:	4b0f      	ldr	r3, [pc, #60]	@ (8005788 <MX_I2S2_Init+0x48>)
 800574c:	22c0      	movs	r2, #192	@ 0xc0
 800574e:	0092      	lsls	r2, r2, #2
 8005750:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8005752:	4b0d      	ldr	r3, [pc, #52]	@ (8005788 <MX_I2S2_Init+0x48>)
 8005754:	2210      	movs	r2, #16
 8005756:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8005758:	4b0b      	ldr	r3, [pc, #44]	@ (8005788 <MX_I2S2_Init+0x48>)
 800575a:	2205      	movs	r2, #5
 800575c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800575e:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <MX_I2S2_Init+0x48>)
 8005760:	2200      	movs	r2, #0
 8005762:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8005764:	4b08      	ldr	r3, [pc, #32]	@ (8005788 <MX_I2S2_Init+0x48>)
 8005766:	22fa      	movs	r2, #250	@ 0xfa
 8005768:	0152      	lsls	r2, r2, #5
 800576a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 800576c:	4b06      	ldr	r3, [pc, #24]	@ (8005788 <MX_I2S2_Init+0x48>)
 800576e:	2208      	movs	r2, #8
 8005770:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8005772:	4b05      	ldr	r3, [pc, #20]	@ (8005788 <MX_I2S2_Init+0x48>)
 8005774:	0018      	movs	r0, r3
 8005776:	f006 fe3b 	bl	800c3f0 <HAL_I2S_Init>
 800577a:	1e03      	subs	r3, r0, #0
 800577c:	d001      	beq.n	8005782 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 800577e:	f000 f9d7 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8005782:	46c0      	nop			@ (mov r8, r8)
 8005784:	46bd      	mov	sp, r7
 8005786:	bd80      	pop	{r7, pc}
 8005788:	20000c1c 	.word	0x20000c1c
 800578c:	40003800 	.word	0x40003800

08005790 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8005790:	b590      	push	{r4, r7, lr}
 8005792:	b089      	sub	sp, #36	@ 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005798:	240c      	movs	r4, #12
 800579a:	193b      	adds	r3, r7, r4
 800579c:	0018      	movs	r0, r3
 800579e:	2314      	movs	r3, #20
 80057a0:	001a      	movs	r2, r3
 80057a2:	2100      	movs	r1, #0
 80057a4:	f012 faea 	bl	8017d7c <memset>
  if(i2sHandle->Instance==SPI2)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4a2d      	ldr	r2, [pc, #180]	@ (8005864 <HAL_I2S_MspInit+0xd4>)
 80057ae:	4293      	cmp	r3, r2
 80057b0:	d154      	bne.n	800585c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80057b2:	4b2d      	ldr	r3, [pc, #180]	@ (8005868 <HAL_I2S_MspInit+0xd8>)
 80057b4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80057b6:	4b2c      	ldr	r3, [pc, #176]	@ (8005868 <HAL_I2S_MspInit+0xd8>)
 80057b8:	2180      	movs	r1, #128	@ 0x80
 80057ba:	01c9      	lsls	r1, r1, #7
 80057bc:	430a      	orrs	r2, r1
 80057be:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80057c0:	4b29      	ldr	r3, [pc, #164]	@ (8005868 <HAL_I2S_MspInit+0xd8>)
 80057c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80057c4:	4b28      	ldr	r3, [pc, #160]	@ (8005868 <HAL_I2S_MspInit+0xd8>)
 80057c6:	2102      	movs	r1, #2
 80057c8:	430a      	orrs	r2, r1
 80057ca:	62da      	str	r2, [r3, #44]	@ 0x2c
 80057cc:	4b26      	ldr	r3, [pc, #152]	@ (8005868 <HAL_I2S_MspInit+0xd8>)
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	2202      	movs	r2, #2
 80057d2:	4013      	ands	r3, r2
 80057d4:	60bb      	str	r3, [r7, #8]
 80057d6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80057d8:	193b      	adds	r3, r7, r4
 80057da:	22b0      	movs	r2, #176	@ 0xb0
 80057dc:	0212      	lsls	r2, r2, #8
 80057de:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057e0:	0021      	movs	r1, r4
 80057e2:	187b      	adds	r3, r7, r1
 80057e4:	2202      	movs	r2, #2
 80057e6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057e8:	187b      	adds	r3, r7, r1
 80057ea:	2200      	movs	r2, #0
 80057ec:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80057ee:	187b      	adds	r3, r7, r1
 80057f0:	2200      	movs	r2, #0
 80057f2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 80057f4:	187b      	adds	r3, r7, r1
 80057f6:	2200      	movs	r2, #0
 80057f8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80057fa:	187b      	adds	r3, r7, r1
 80057fc:	4a1b      	ldr	r2, [pc, #108]	@ (800586c <HAL_I2S_MspInit+0xdc>)
 80057fe:	0019      	movs	r1, r3
 8005800:	0010      	movs	r0, r2
 8005802:	f004 fb67 	bl	8009ed4 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8005806:	4b1a      	ldr	r3, [pc, #104]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 8005808:	4a1a      	ldr	r2, [pc, #104]	@ (8005874 <HAL_I2S_MspInit+0xe4>)
 800580a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 800580c:	4b18      	ldr	r3, [pc, #96]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 800580e:	2202      	movs	r2, #2
 8005810:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005812:	4b17      	ldr	r3, [pc, #92]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 8005814:	2200      	movs	r2, #0
 8005816:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005818:	4b15      	ldr	r3, [pc, #84]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 800581a:	2200      	movs	r2, #0
 800581c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800581e:	4b14      	ldr	r3, [pc, #80]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 8005820:	2280      	movs	r2, #128	@ 0x80
 8005822:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8005824:	4b12      	ldr	r3, [pc, #72]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 8005826:	2280      	movs	r2, #128	@ 0x80
 8005828:	0052      	lsls	r2, r2, #1
 800582a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800582c:	4b10      	ldr	r3, [pc, #64]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 800582e:	2280      	movs	r2, #128	@ 0x80
 8005830:	00d2      	lsls	r2, r2, #3
 8005832:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8005834:	4b0e      	ldr	r3, [pc, #56]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 8005836:	2220      	movs	r2, #32
 8005838:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800583a:	4b0d      	ldr	r3, [pc, #52]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 800583c:	2200      	movs	r2, #0
 800583e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8005840:	4b0b      	ldr	r3, [pc, #44]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 8005842:	0018      	movs	r0, r3
 8005844:	f004 f89a 	bl	800997c <HAL_DMA_Init>
 8005848:	1e03      	subs	r3, r0, #0
 800584a:	d001      	beq.n	8005850 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 800584c:	f000 f970 	bl	8005b30 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a07      	ldr	r2, [pc, #28]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 8005854:	631a      	str	r2, [r3, #48]	@ 0x30
 8005856:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <HAL_I2S_MspInit+0xe0>)
 8005858:	687a      	ldr	r2, [r7, #4]
 800585a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800585c:	46c0      	nop			@ (mov r8, r8)
 800585e:	46bd      	mov	sp, r7
 8005860:	b009      	add	sp, #36	@ 0x24
 8005862:	bd90      	pop	{r4, r7, pc}
 8005864:	40003800 	.word	0x40003800
 8005868:	40021000 	.word	0x40021000
 800586c:	50000400 	.word	0x50000400
 8005870:	20000c58 	.word	0x20000c58
 8005874:	40020044 	.word	0x40020044

08005878 <HAL_I2S_MspDeInit>:

void HAL_I2S_MspDeInit(I2S_HandleTypeDef* i2sHandle)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]

  if(i2sHandle->Instance==SPI2)
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a0c      	ldr	r2, [pc, #48]	@ (80058b8 <HAL_I2S_MspDeInit+0x40>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d111      	bne.n	80058ae <HAL_I2S_MspDeInit+0x36>
  {
  /* USER CODE BEGIN SPI2_MspDeInit 0 */

  /* USER CODE END SPI2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI2_CLK_DISABLE();
 800588a:	4b0c      	ldr	r3, [pc, #48]	@ (80058bc <HAL_I2S_MspDeInit+0x44>)
 800588c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800588e:	4b0b      	ldr	r3, [pc, #44]	@ (80058bc <HAL_I2S_MspDeInit+0x44>)
 8005890:	490b      	ldr	r1, [pc, #44]	@ (80058c0 <HAL_I2S_MspDeInit+0x48>)
 8005892:	400a      	ands	r2, r1
 8005894:	639a      	str	r2, [r3, #56]	@ 0x38
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15);
 8005896:	23b0      	movs	r3, #176	@ 0xb0
 8005898:	021b      	lsls	r3, r3, #8
 800589a:	4a0a      	ldr	r2, [pc, #40]	@ (80058c4 <HAL_I2S_MspDeInit+0x4c>)
 800589c:	0019      	movs	r1, r3
 800589e:	0010      	movs	r0, r2
 80058a0:	f004 fc96 	bl	800a1d0 <HAL_GPIO_DeInit>

    /* I2S2 DMA DeInit */
    HAL_DMA_DeInit(i2sHandle->hdmarx);
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058a8:	0018      	movs	r0, r3
 80058aa:	f004 f8df 	bl	8009a6c <HAL_DMA_DeInit>
  /* USER CODE BEGIN SPI2_MspDeInit 1 */

  /* USER CODE END SPI2_MspDeInit 1 */
  }
}
 80058ae:	46c0      	nop			@ (mov r8, r8)
 80058b0:	46bd      	mov	sp, r7
 80058b2:	b002      	add	sp, #8
 80058b4:	bd80      	pop	{r7, pc}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	40003800 	.word	0x40003800
 80058bc:	40021000 	.word	0x40021000
 80058c0:	ffffbfff 	.word	0xffffbfff
 80058c4:	50000400 	.word	0x50000400

080058c8 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  testDone = true;
 80058cc:	4b33      	ldr	r3, [pc, #204]	@ (800599c <SetTestDone+0xd4>)
 80058ce:	2201      	movs	r2, #1
 80058d0:	701a      	strb	r2, [r3, #0]
  HAL_Delay(1000);
 80058d2:	23fa      	movs	r3, #250	@ 0xfa
 80058d4:	009b      	lsls	r3, r3, #2
 80058d6:	0018      	movs	r0, r3
 80058d8:	f003 fbd0 	bl	800907c <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 80058dc:	4b30      	ldr	r3, [pc, #192]	@ (80059a0 <SetTestDone+0xd8>)
 80058de:	2201      	movs	r2, #1
 80058e0:	2101      	movs	r1, #1
 80058e2:	0018      	movs	r0, r3
 80058e4:	f004 fd56 	bl	800a394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80058e8:	2380      	movs	r3, #128	@ 0x80
 80058ea:	005b      	lsls	r3, r3, #1
 80058ec:	482c      	ldr	r0, [pc, #176]	@ (80059a0 <SetTestDone+0xd8>)
 80058ee:	2201      	movs	r2, #1
 80058f0:	0019      	movs	r1, r3
 80058f2:	f004 fd4f 	bl	800a394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
 80058f6:	2380      	movs	r3, #128	@ 0x80
 80058f8:	009b      	lsls	r3, r3, #2
 80058fa:	4829      	ldr	r0, [pc, #164]	@ (80059a0 <SetTestDone+0xd8>)
 80058fc:	2200      	movs	r2, #0
 80058fe:	0019      	movs	r1, r3
 8005900:	f004 fd48 	bl	800a394 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 40000;
 8005904:	2380      	movs	r3, #128	@ 0x80
 8005906:	05db      	lsls	r3, r3, #23
 8005908:	4a26      	ldr	r2, [pc, #152]	@ (80059a4 <SetTestDone+0xdc>)
 800590a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 800590c:	2380      	movs	r3, #128	@ 0x80
 800590e:	05db      	lsls	r3, r3, #23
 8005910:	4a24      	ldr	r2, [pc, #144]	@ (80059a4 <SetTestDone+0xdc>)
 8005912:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 0;
 8005914:	2380      	movs	r3, #128	@ 0x80
 8005916:	05db      	lsls	r3, r3, #23
 8005918:	2200      	movs	r2, #0
 800591a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 800591c:	4b22      	ldr	r3, [pc, #136]	@ (80059a8 <SetTestDone+0xe0>)
 800591e:	22fa      	movs	r2, #250	@ 0xfa
 8005920:	0112      	lsls	r2, r2, #4
 8005922:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005924:	4b20      	ldr	r3, [pc, #128]	@ (80059a8 <SetTestDone+0xe0>)
 8005926:	22fa      	movs	r2, #250	@ 0xfa
 8005928:	0112      	lsls	r2, r2, #4
 800592a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 0;
 800592c:	4b1e      	ldr	r3, [pc, #120]	@ (80059a8 <SetTestDone+0xe0>)
 800592e:	2200      	movs	r2, #0
 8005930:	63da      	str	r2, [r3, #60]	@ 0x3c
  HAL_Delay(1000);
 8005932:	23fa      	movs	r3, #250	@ 0xfa
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	0018      	movs	r0, r3
 8005938:	f003 fba0 	bl	800907c <HAL_Delay>
  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 800593c:	4b18      	ldr	r3, [pc, #96]	@ (80059a0 <SetTestDone+0xd8>)
 800593e:	2201      	movs	r2, #1
 8005940:	2101      	movs	r1, #1
 8005942:	0018      	movs	r0, r3
 8005944:	f004 fd26 	bl	800a394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005948:	2380      	movs	r3, #128	@ 0x80
 800594a:	005b      	lsls	r3, r3, #1
 800594c:	4814      	ldr	r0, [pc, #80]	@ (80059a0 <SetTestDone+0xd8>)
 800594e:	2201      	movs	r2, #1
 8005950:	0019      	movs	r1, r3
 8005952:	f004 fd1f 	bl	800a394 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005956:	2380      	movs	r3, #128	@ 0x80
 8005958:	009b      	lsls	r3, r3, #2
 800595a:	4811      	ldr	r0, [pc, #68]	@ (80059a0 <SetTestDone+0xd8>)
 800595c:	2201      	movs	r2, #1
 800595e:	0019      	movs	r1, r3
 8005960:	f004 fd18 	bl	800a394 <HAL_GPIO_WritePin>
  TIM2 -> CCR1 = 40000;
 8005964:	2380      	movs	r3, #128	@ 0x80
 8005966:	05db      	lsls	r3, r3, #23
 8005968:	4a0e      	ldr	r2, [pc, #56]	@ (80059a4 <SetTestDone+0xdc>)
 800596a:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 40000;
 800596c:	2380      	movs	r3, #128	@ 0x80
 800596e:	05db      	lsls	r3, r3, #23
 8005970:	4a0c      	ldr	r2, [pc, #48]	@ (80059a4 <SetTestDone+0xdc>)
 8005972:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 40000;
 8005974:	2380      	movs	r3, #128	@ 0x80
 8005976:	05db      	lsls	r3, r3, #23
 8005978:	4a0a      	ldr	r2, [pc, #40]	@ (80059a4 <SetTestDone+0xdc>)
 800597a:	641a      	str	r2, [r3, #64]	@ 0x40
  TIM3 -> CCR1 = 4000;
 800597c:	4b0a      	ldr	r3, [pc, #40]	@ (80059a8 <SetTestDone+0xe0>)
 800597e:	22fa      	movs	r2, #250	@ 0xfa
 8005980:	0112      	lsls	r2, r2, #4
 8005982:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8005984:	4b08      	ldr	r3, [pc, #32]	@ (80059a8 <SetTestDone+0xe0>)
 8005986:	22fa      	movs	r2, #250	@ 0xfa
 8005988:	0112      	lsls	r2, r2, #4
 800598a:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 800598c:	4b06      	ldr	r3, [pc, #24]	@ (80059a8 <SetTestDone+0xe0>)
 800598e:	22fa      	movs	r2, #250	@ 0xfa
 8005990:	0112      	lsls	r2, r2, #4
 8005992:	63da      	str	r2, [r3, #60]	@ 0x3c

}
 8005994:	46c0      	nop			@ (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	46c0      	nop			@ (mov r8, r8)
 800599c:	20000ca0 	.word	0x20000ca0
 80059a0:	50000400 	.word	0x50000400
 80059a4:	00009c40 	.word	0x00009c40
 80059a8:	40000400 	.word	0x40000400

080059ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80059b2:	f003 faf3 	bl	8008f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80059b6:	f000 f849 	bl	8005a4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80059ba:	f7ff fbef 	bl	800519c <MX_GPIO_Init>
  MX_DMA_Init();
 80059be:	f7ff fb67 	bl	8005090 <MX_DMA_Init>
  MX_I2C1_Init();
 80059c2:	f7ff fd63 	bl	800548c <MX_I2C1_Init>
  MX_I2S2_Init();
 80059c6:	f7ff febb 	bl	8005740 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80059ca:	f002 fd9d 	bl	8008508 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80059ce:	f7ff fd9d 	bl	800550c <MX_I2C2_Init>
  MX_TIM2_Init();
 80059d2:	f002 fc1b 	bl	800820c <MX_TIM2_Init>
  MX_TIM3_Init();
 80059d6:	f002 fc8d 	bl	80082f4 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80059da:	f002 fdc9 	bl	8008570 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80059de:	f7ff faa5 	bl	8004f2c <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80059e2:	f00f fc09 	bl	80151f8 <MX_USB_DEVICE_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80059e6:	4a12      	ldr	r2, [pc, #72]	@ (8005a30 <main+0x84>)
 80059e8:	4b12      	ldr	r3, [pc, #72]	@ (8005a34 <main+0x88>)
 80059ea:	0011      	movs	r1, r2
 80059ec:	0018      	movs	r0, r3
 80059ee:	f7ff fcd3 	bl	8005398 <GPIO_InitPWMLEDs>
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 80059f2:	f003 fb39 	bl	8009068 <HAL_GetTick>
 80059f6:	0003      	movs	r3, r0
 80059f8:	22fa      	movs	r2, #250	@ 0xfa
 80059fa:	0092      	lsls	r2, r2, #2
 80059fc:	4694      	mov	ip, r2
 80059fe:	4463      	add	r3, ip
 8005a00:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8005a02:	2003      	movs	r0, #3
 8005a04:	f002 ffb4 	bl	8008970 <SetVerboseLevel>
  BinaryReleaseInfo();
 8005a08:	f002 ffca 	bl	80089a0 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 8005a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8005a38 <main+0x8c>)
 8005a0e:	4a0b      	ldr	r2, [pc, #44]	@ (8005a3c <main+0x90>)
 8005a10:	490b      	ldr	r1, [pc, #44]	@ (8005a40 <main+0x94>)
 8005a12:	480c      	ldr	r0, [pc, #48]	@ (8005a44 <main+0x98>)
 8005a14:	f7ff fb62 	bl	80050dc <Gadget_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone){
 8005a18:	4b0b      	ldr	r3, [pc, #44]	@ (8005a48 <main+0x9c>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d004      	beq.n	8005a2a <main+0x7e>
      UpkeepGadget();
 8005a20:	f7ff fb89 	bl	8005136 <UpkeepGadget>
      ESP_Upkeep();
 8005a24:	f7ff f808 	bl	8004a38 <ESP_Upkeep>
 8005a28:	e7f6      	b.n	8005a18 <main+0x6c>
    }
    else{
      Gadget_Test();
 8005a2a:	f7ff fb7d 	bl	8005128 <Gadget_Test>
    if(testDone){
 8005a2e:	e7f3      	b.n	8005a18 <main+0x6c>
 8005a30:	20001c58 	.word	0x20001c58
 8005a34:	20001c18 	.word	0x20001c18
 8005a38:	20000a88 	.word	0x20000a88
 8005a3c:	20001d50 	.word	0x20001d50
 8005a40:	20000c1c 	.word	0x20000c1c
 8005a44:	20000ae4 	.word	0x20000ae4
 8005a48:	20000ca0 	.word	0x20000ca0

08005a4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b09d      	sub	sp, #116	@ 0x74
 8005a50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005a52:	2438      	movs	r4, #56	@ 0x38
 8005a54:	193b      	adds	r3, r7, r4
 8005a56:	0018      	movs	r0, r3
 8005a58:	2338      	movs	r3, #56	@ 0x38
 8005a5a:	001a      	movs	r2, r3
 8005a5c:	2100      	movs	r1, #0
 8005a5e:	f012 f98d 	bl	8017d7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005a62:	2324      	movs	r3, #36	@ 0x24
 8005a64:	18fb      	adds	r3, r7, r3
 8005a66:	0018      	movs	r0, r3
 8005a68:	2314      	movs	r3, #20
 8005a6a:	001a      	movs	r2, r3
 8005a6c:	2100      	movs	r1, #0
 8005a6e:	f012 f985 	bl	8017d7c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a72:	003b      	movs	r3, r7
 8005a74:	0018      	movs	r0, r3
 8005a76:	2324      	movs	r3, #36	@ 0x24
 8005a78:	001a      	movs	r2, r3
 8005a7a:	2100      	movs	r1, #0
 8005a7c:	f012 f97e 	bl	8017d7c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a80:	4b29      	ldr	r3, [pc, #164]	@ (8005b28 <SystemClock_Config+0xdc>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a29      	ldr	r2, [pc, #164]	@ (8005b2c <SystemClock_Config+0xe0>)
 8005a86:	401a      	ands	r2, r3
 8005a88:	4b27      	ldr	r3, [pc, #156]	@ (8005b28 <SystemClock_Config+0xdc>)
 8005a8a:	2180      	movs	r1, #128	@ 0x80
 8005a8c:	0109      	lsls	r1, r1, #4
 8005a8e:	430a      	orrs	r2, r1
 8005a90:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 8005a92:	0021      	movs	r1, r4
 8005a94:	187b      	adds	r3, r7, r1
 8005a96:	2222      	movs	r2, #34	@ 0x22
 8005a98:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005a9a:	187b      	adds	r3, r7, r1
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005aa0:	187b      	adds	r3, r7, r1
 8005aa2:	2210      	movs	r2, #16
 8005aa4:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8005aa6:	187b      	adds	r3, r7, r1
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8005aac:	187b      	adds	r3, r7, r1
 8005aae:	2200      	movs	r2, #0
 8005ab0:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005ab2:	187b      	adds	r3, r7, r1
 8005ab4:	0018      	movs	r0, r3
 8005ab6:	f008 fe3b 	bl	800e730 <HAL_RCC_OscConfig>
 8005aba:	1e03      	subs	r3, r0, #0
 8005abc:	d001      	beq.n	8005ac2 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8005abe:	f000 f837 	bl	8005b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005ac2:	2124      	movs	r1, #36	@ 0x24
 8005ac4:	187b      	adds	r3, r7, r1
 8005ac6:	220f      	movs	r2, #15
 8005ac8:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8005aca:	187b      	adds	r3, r7, r1
 8005acc:	2201      	movs	r2, #1
 8005ace:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005ad0:	187b      	adds	r3, r7, r1
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8005ad6:	187b      	adds	r3, r7, r1
 8005ad8:	2200      	movs	r2, #0
 8005ada:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	2200      	movs	r2, #0
 8005ae0:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	2100      	movs	r1, #0
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f009 f9f6 	bl	800eed8 <HAL_RCC_ClockConfig>
 8005aec:	1e03      	subs	r3, r0, #0
 8005aee:	d001      	beq.n	8005af4 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8005af0:	f000 f81e 	bl	8005b30 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8005af4:	003b      	movs	r3, r7
 8005af6:	2249      	movs	r2, #73	@ 0x49
 8005af8:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8005afa:	003b      	movs	r3, r7
 8005afc:	2200      	movs	r2, #0
 8005afe:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005b00:	003b      	movs	r3, r7
 8005b02:	2200      	movs	r2, #0
 8005b04:	615a      	str	r2, [r3, #20]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8005b06:	003b      	movs	r3, r7
 8005b08:	2280      	movs	r2, #128	@ 0x80
 8005b0a:	04d2      	lsls	r2, r2, #19
 8005b0c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b0e:	003b      	movs	r3, r7
 8005b10:	0018      	movs	r0, r3
 8005b12:	f009 fc05 	bl	800f320 <HAL_RCCEx_PeriphCLKConfig>
 8005b16:	1e03      	subs	r3, r0, #0
 8005b18:	d001      	beq.n	8005b1e <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8005b1a:	f000 f809 	bl	8005b30 <Error_Handler>
  }
}
 8005b1e:	46c0      	nop			@ (mov r8, r8)
 8005b20:	46bd      	mov	sp, r7
 8005b22:	b01d      	add	sp, #116	@ 0x74
 8005b24:	bd90      	pop	{r4, r7, pc}
 8005b26:	46c0      	nop			@ (mov r8, r8)
 8005b28:	40007000 	.word	0x40007000
 8005b2c:	ffffe7ff 	.word	0xffffe7ff

08005b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005b34:	b672      	cpsid	i
}
 8005b36:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005b38:	46c0      	nop			@ (mov r8, r8)
 8005b3a:	e7fd      	b.n	8005b38 <Error_Handler+0x8>

08005b3c <HT_StartMeasurementWrapper>:
static EnabledMeasurements MeasEnabled;
static MeasurementTested MeasTest;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 8005b3c:	b580      	push	{r7, lr}
 8005b3e:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8005b40:	f7ff fc85 	bl	800544e <HT_StartMeasurement>
}
 8005b44:	46c0      	nop			@ (mov r8, r8)
 8005b46:	46bd      	mov	sp, r7
 8005b48:	bd80      	pop	{r7, pc}
	...

08005b4c <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8005b50:	4a04      	ldr	r2, [pc, #16]	@ (8005b64 <HT_IsMeasurementDoneWrapper+0x18>)
 8005b52:	4b05      	ldr	r3, [pc, #20]	@ (8005b68 <HT_IsMeasurementDoneWrapper+0x1c>)
 8005b54:	0011      	movs	r1, r2
 8005b56:	0018      	movs	r0, r3
 8005b58:	f7ff fc80 	bl	800545c <HT_GetMeasurementValues>
 8005b5c:	0003      	movs	r3, r0
}
 8005b5e:	0018      	movs	r0, r3
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	20000ca8 	.word	0x20000ca8
 8005b68:	20000ca4 	.word	0x20000ca4

08005b6c <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8005b70:	f7ff faf7 	bl	8005162 <Gas_StartMeasurement>
}
 8005b74:	46c0      	nop			@ (mov r8, r8)
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
	...

08005b7c <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8005b80:	4b03      	ldr	r3, [pc, #12]	@ (8005b90 <VOC_IsMeasurementDoneWrapper+0x14>)
 8005b82:	0018      	movs	r0, r3
 8005b84:	f7ff faf4 	bl	8005170 <Gas_GetMeasurementValues>
 8005b88:	0003      	movs	r3, r0
}
 8005b8a:	0018      	movs	r0, r3
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}
 8005b90:	20000cac 	.word	0x20000cac

08005b94 <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 8005b94:	b580      	push	{r7, lr}
 8005b96:	af00      	add	r7, sp, #0
}
 8005b98:	46c0      	nop			@ (mov r8, r8)
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	af00      	add	r7, sp, #0
  return true;
 8005ba2:	2301      	movs	r3, #1
}
 8005ba4:	0018      	movs	r0, r3
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}

08005baa <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8005baa:	b580      	push	{r7, lr}
 8005bac:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_8K, NR_SAMPLES_128); // Dont init like this.
 8005bae:	23fa      	movs	r3, #250	@ 0xfa
 8005bb0:	015b      	lsls	r3, r3, #5
 8005bb2:	2180      	movs	r1, #128	@ 0x80
 8005bb4:	0018      	movs	r0, r3
 8005bb6:	f000 fc53 	bl	8006460 <MIC_Start>
}
 8005bba:	46c0      	nop			@ (mov r8, r8)
 8005bbc:	46bd      	mov	sp, r7
 8005bbe:	bd80      	pop	{r7, pc}

08005bc0 <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	af00      	add	r7, sp, #0
  return MIC_MeasurementDone();
 8005bc4:	f000 fddc 	bl	8006780 <MIC_MeasurementDone>
 8005bc8:	0003      	movs	r3, r0
}
 8005bca:	0018      	movs	r0, r3
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	bd80      	pop	{r7, pc}

08005bd0 <Meas_TestStart>:
void Meas_TestStart(){
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	af00      	add	r7, sp, #0
  MIC_StartMeasurementWrapper();
 8005bd4:	f7ff ffe9 	bl	8005baa <MIC_StartMeasurementWrapper>
}
 8005bd8:	46c0      	nop			@ (mov r8, r8)
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	bd80      	pop	{r7, pc}

08005bde <MIC_IsTestMeasurementDoneWrapper>:
static bool MIC_IsTestMeasurementDoneWrapper(void) {
 8005bde:	b580      	push	{r7, lr}
 8005be0:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 8005be2:	f000 fdeb 	bl	80067bc <MIC_TestMeasurementDone>
 8005be6:	0003      	movs	r3, r0
}
 8005be8:	0018      	movs	r0, r3
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}
	...

08005bf0 <testInit>:
void testInit(){
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 8005bf4:	4b07      	ldr	r3, [pc, #28]	@ (8005c14 <testInit+0x24>)
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 8005bfa:	4b06      	ldr	r3, [pc, #24]	@ (8005c14 <testInit+0x24>)
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	709a      	strb	r2, [r3, #2]
  MeasTest.HT_Tested = false;
 8005c00:	4b04      	ldr	r3, [pc, #16]	@ (8005c14 <testInit+0x24>)
 8005c02:	2200      	movs	r2, #0
 8005c04:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 8005c06:	4b03      	ldr	r3, [pc, #12]	@ (8005c14 <testInit+0x24>)
 8005c08:	2200      	movs	r2, #0
 8005c0a:	705a      	strb	r2, [r3, #1]
}
 8005c0c:	46c0      	nop			@ (mov r8, r8)
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			@ (mov r8, r8)
 8005c14:	20000cf8 	.word	0x20000cf8

08005c18 <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 8005c18:	b5b0      	push	{r4, r5, r7, lr}
 8005c1a:	b096      	sub	sp, #88	@ 0x58
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  MeasState = MEAS_STATE_INIT;
 8005c24:	4b84      	ldr	r3, [pc, #528]	@ (8005e38 <Meas_Init+0x220>)
 8005c26:	2200      	movs	r2, #0
 8005c28:	701a      	strb	r2, [r3, #0]
  testInit();
 8005c2a:	f7ff ffe1 	bl	8005bf0 <testInit>
  batteryInit(ADC_HANDLER);
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	0018      	movs	r0, r3
 8005c32:	f7fd fcb3 	bl	800359c <batteryInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8005c36:	4b81      	ldr	r3, [pc, #516]	@ (8005e3c <Meas_Init+0x224>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d103      	bne.n	8005c46 <Meas_Init+0x2e>
 8005c3e:	4b7f      	ldr	r3, [pc, #508]	@ (8005e3c <Meas_Init+0x224>)
 8005c40:	785b      	ldrb	r3, [r3, #1]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d072      	beq.n	8005d2c <Meas_Init+0x114>
    I2CSensors_Init(sensorI2C);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	0018      	movs	r0, r3
 8005c4a:	f7ff f8fd 	bl	8004e48 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8005c4e:	f7ff fc15 	bl	800547c <HT_DeviceConnected>
 8005c52:	0003      	movs	r3, r0
 8005c54:	001a      	movs	r2, r3
 8005c56:	2301      	movs	r3, #1
 8005c58:	4053      	eors	r3, r2
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d00c      	beq.n	8005c7a <Meas_Init+0x62>
       Error("Humidity / Temperature sensor NOT connected!");
 8005c60:	4a77      	ldr	r2, [pc, #476]	@ (8005e40 <Meas_Init+0x228>)
 8005c62:	4b78      	ldr	r3, [pc, #480]	@ (8005e44 <Meas_Init+0x22c>)
 8005c64:	0019      	movs	r1, r3
 8005c66:	2001      	movs	r0, #1
 8005c68:	f002 fe06 	bl	8008878 <CreateLine>
       MeasTest.HT_Tested = false;
 8005c6c:	4b76      	ldr	r3, [pc, #472]	@ (8005e48 <Meas_Init+0x230>)
 8005c6e:	2200      	movs	r2, #0
 8005c70:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8005c72:	4b72      	ldr	r3, [pc, #456]	@ (8005e3c <Meas_Init+0x224>)
 8005c74:	2200      	movs	r2, #0
 8005c76:	701a      	strb	r2, [r3, #0]
 8005c78:	e008      	b.n	8005c8c <Meas_Init+0x74>
//       TIM2 -> CCR3 = 4000;
//       TIM2 -> CCR4 = 4000;
    }else {
      // HT Device is connected, turning led on GREEN.
      // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
      MeasTest.HT_Tested = true;
 8005c7a:	4b73      	ldr	r3, [pc, #460]	@ (8005e48 <Meas_Init+0x230>)
 8005c7c:	2201      	movs	r2, #1
 8005c7e:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8005c80:	4a72      	ldr	r2, [pc, #456]	@ (8005e4c <Meas_Init+0x234>)
 8005c82:	4b73      	ldr	r3, [pc, #460]	@ (8005e50 <Meas_Init+0x238>)
 8005c84:	0019      	movs	r1, r3
 8005c86:	2003      	movs	r0, #3
 8005c88:	f002 fdf6 	bl	8008878 <CreateLine>
//      TIM2 -> CCR1 = 4000;
//      TIM2 -> CCR3 = 0;
//      TIM2 -> CCR4 = 4000;
    }
    if(!Gas_DeviceConnected()) {
 8005c8c:	f7ff fa7d 	bl	800518a <Gas_DeviceConnected>
 8005c90:	0003      	movs	r3, r0
 8005c92:	001a      	movs	r2, r3
 8005c94:	2301      	movs	r3, #1
 8005c96:	4053      	eors	r3, r2
 8005c98:	b2db      	uxtb	r3, r3
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d00c      	beq.n	8005cb8 <Meas_Init+0xa0>
      MeasTest.VOC_Tested = false;
 8005c9e:	4b6a      	ldr	r3, [pc, #424]	@ (8005e48 <Meas_Init+0x230>)
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 8005ca4:	4a6b      	ldr	r2, [pc, #428]	@ (8005e54 <Meas_Init+0x23c>)
 8005ca6:	4b67      	ldr	r3, [pc, #412]	@ (8005e44 <Meas_Init+0x22c>)
 8005ca8:	0019      	movs	r1, r3
 8005caa:	2001      	movs	r0, #1
 8005cac:	f002 fde4 	bl	8008878 <CreateLine>
       // SGP Device is NOT connected, turning led on RED.
//       HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
//       HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//       HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
       MeasEnabled.VOC_measurementEnabled = false;
 8005cb0:	4b62      	ldr	r3, [pc, #392]	@ (8005e3c <Meas_Init+0x224>)
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	705a      	strb	r2, [r3, #1]
 8005cb6:	e008      	b.n	8005cca <Meas_Init+0xb2>
    }else{
      MeasTest.VOC_Tested = true;
 8005cb8:	4b63      	ldr	r3, [pc, #396]	@ (8005e48 <Meas_Init+0x230>)
 8005cba:	2201      	movs	r2, #1
 8005cbc:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8005cbe:	4a66      	ldr	r2, [pc, #408]	@ (8005e58 <Meas_Init+0x240>)
 8005cc0:	4b63      	ldr	r3, [pc, #396]	@ (8005e50 <Meas_Init+0x238>)
 8005cc2:	0019      	movs	r1, r3
 8005cc4:	2003      	movs	r0, #3
 8005cc6:	f002 fdd7 	bl	8008878 <CreateLine>
      // HT Device is connected, turning led on GREEN.
//      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8005cca:	4b5f      	ldr	r3, [pc, #380]	@ (8005e48 <Meas_Init+0x230>)
 8005ccc:	785b      	ldrb	r3, [r3, #1]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d018      	beq.n	8005d04 <Meas_Init+0xec>
 8005cd2:	4b5d      	ldr	r3, [pc, #372]	@ (8005e48 <Meas_Init+0x230>)
 8005cd4:	781b      	ldrb	r3, [r3, #0]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d014      	beq.n	8005d04 <Meas_Init+0xec>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
 8005cda:	4b60      	ldr	r3, [pc, #384]	@ (8005e5c <Meas_Init+0x244>)
 8005cdc:	2201      	movs	r2, #1
 8005cde:	2101      	movs	r1, #1
 8005ce0:	0018      	movs	r0, r3
 8005ce2:	f004 fb57 	bl	800a394 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
 8005ce6:	2380      	movs	r3, #128	@ 0x80
 8005ce8:	005b      	lsls	r3, r3, #1
 8005cea:	485c      	ldr	r0, [pc, #368]	@ (8005e5c <Meas_Init+0x244>)
 8005cec:	2200      	movs	r2, #0
 8005cee:	0019      	movs	r1, r3
 8005cf0:	f004 fb50 	bl	800a394 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005cf4:	2380      	movs	r3, #128	@ 0x80
 8005cf6:	009b      	lsls	r3, r3, #2
 8005cf8:	4858      	ldr	r0, [pc, #352]	@ (8005e5c <Meas_Init+0x244>)
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	0019      	movs	r1, r3
 8005cfe:	f004 fb49 	bl	800a394 <HAL_GPIO_WritePin>
 8005d02:	e013      	b.n	8005d2c <Meas_Init+0x114>
    }
    else{
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 8005d04:	4b55      	ldr	r3, [pc, #340]	@ (8005e5c <Meas_Init+0x244>)
 8005d06:	2200      	movs	r2, #0
 8005d08:	2101      	movs	r1, #1
 8005d0a:	0018      	movs	r0, r3
 8005d0c:	f004 fb42 	bl	800a394 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 8005d10:	2380      	movs	r3, #128	@ 0x80
 8005d12:	005b      	lsls	r3, r3, #1
 8005d14:	4851      	ldr	r0, [pc, #324]	@ (8005e5c <Meas_Init+0x244>)
 8005d16:	2201      	movs	r2, #1
 8005d18:	0019      	movs	r1, r3
 8005d1a:	f004 fb3b 	bl	800a394 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 8005d1e:	2380      	movs	r3, #128	@ 0x80
 8005d20:	009b      	lsls	r3, r3, #2
 8005d22:	484e      	ldr	r0, [pc, #312]	@ (8005e5c <Meas_Init+0x244>)
 8005d24:	2201      	movs	r2, #1
 8005d26:	0019      	movs	r1, r3
 8005d28:	f004 fb34 	bl	800a394 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 8005d2c:	4b43      	ldr	r3, [pc, #268]	@ (8005e3c <Meas_Init+0x224>)
 8005d2e:	78db      	ldrb	r3, [r3, #3]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d005      	beq.n	8005d40 <Meas_Init+0x128>
    MIC_Init(micI2s);
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 fa3c 	bl	80061b4 <MIC_Init>
    Meas_TestStart();
 8005d3c:	f7ff ff48 	bl	8005bd0 <Meas_TestStart>
  }
  uint8_t offset = 0;
 8005d40:	2557      	movs	r5, #87	@ 0x57
 8005d42:	197b      	adds	r3, r7, r5
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8005d48:	197b      	adds	r3, r7, r5
 8005d4a:	781b      	ldrb	r3, [r3, #0]
 8005d4c:	197a      	adds	r2, r7, r5
 8005d4e:	1c59      	adds	r1, r3, #1
 8005d50:	7011      	strb	r1, [r2, #0]
 8005d52:	4a3a      	ldr	r2, [pc, #232]	@ (8005e3c <Meas_Init+0x224>)
 8005d54:	7814      	ldrb	r4, [r2, #0]
 8005d56:	4a42      	ldr	r2, [pc, #264]	@ (8005e60 <Meas_Init+0x248>)
 8005d58:	0119      	lsls	r1, r3, #4
 8005d5a:	4842      	ldr	r0, [pc, #264]	@ (8005e64 <Meas_Init+0x24c>)
 8005d5c:	5088      	str	r0, [r1, r2]
 8005d5e:	4940      	ldr	r1, [pc, #256]	@ (8005e60 <Meas_Init+0x248>)
 8005d60:	011a      	lsls	r2, r3, #4
 8005d62:	188a      	adds	r2, r1, r2
 8005d64:	3204      	adds	r2, #4
 8005d66:	4940      	ldr	r1, [pc, #256]	@ (8005e68 <Meas_Init+0x250>)
 8005d68:	6011      	str	r1, [r2, #0]
 8005d6a:	493d      	ldr	r1, [pc, #244]	@ (8005e60 <Meas_Init+0x248>)
 8005d6c:	011a      	lsls	r2, r3, #4
 8005d6e:	188a      	adds	r2, r1, r2
 8005d70:	3208      	adds	r2, #8
 8005d72:	493e      	ldr	r1, [pc, #248]	@ (8005e6c <Meas_Init+0x254>)
 8005d74:	6011      	str	r1, [r2, #0]
 8005d76:	4a3a      	ldr	r2, [pc, #232]	@ (8005e60 <Meas_Init+0x248>)
 8005d78:	011b      	lsls	r3, r3, #4
 8005d7a:	18d3      	adds	r3, r2, r3
 8005d7c:	330c      	adds	r3, #12
 8005d7e:	1c22      	adds	r2, r4, #0
 8005d80:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 8005d82:	197b      	adds	r3, r7, r5
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	197a      	adds	r2, r7, r5
 8005d88:	1c59      	adds	r1, r3, #1
 8005d8a:	7011      	strb	r1, [r2, #0]
 8005d8c:	4a2b      	ldr	r2, [pc, #172]	@ (8005e3c <Meas_Init+0x224>)
 8005d8e:	7854      	ldrb	r4, [r2, #1]
 8005d90:	4a33      	ldr	r2, [pc, #204]	@ (8005e60 <Meas_Init+0x248>)
 8005d92:	0119      	lsls	r1, r3, #4
 8005d94:	4836      	ldr	r0, [pc, #216]	@ (8005e70 <Meas_Init+0x258>)
 8005d96:	5088      	str	r0, [r1, r2]
 8005d98:	4931      	ldr	r1, [pc, #196]	@ (8005e60 <Meas_Init+0x248>)
 8005d9a:	011a      	lsls	r2, r3, #4
 8005d9c:	188a      	adds	r2, r1, r2
 8005d9e:	3204      	adds	r2, #4
 8005da0:	4934      	ldr	r1, [pc, #208]	@ (8005e74 <Meas_Init+0x25c>)
 8005da2:	6011      	str	r1, [r2, #0]
 8005da4:	492e      	ldr	r1, [pc, #184]	@ (8005e60 <Meas_Init+0x248>)
 8005da6:	011a      	lsls	r2, r3, #4
 8005da8:	188a      	adds	r2, r1, r2
 8005daa:	3208      	adds	r2, #8
 8005dac:	4932      	ldr	r1, [pc, #200]	@ (8005e78 <Meas_Init+0x260>)
 8005dae:	6011      	str	r1, [r2, #0]
 8005db0:	4a2b      	ldr	r2, [pc, #172]	@ (8005e60 <Meas_Init+0x248>)
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	18d3      	adds	r3, r2, r3
 8005db6:	330c      	adds	r3, #12
 8005db8:	1c22      	adds	r2, r4, #0
 8005dba:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8005dbc:	197b      	adds	r3, r7, r5
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	197a      	adds	r2, r7, r5
 8005dc2:	1c59      	adds	r1, r3, #1
 8005dc4:	7011      	strb	r1, [r2, #0]
 8005dc6:	4a1d      	ldr	r2, [pc, #116]	@ (8005e3c <Meas_Init+0x224>)
 8005dc8:	7894      	ldrb	r4, [r2, #2]
 8005dca:	4a25      	ldr	r2, [pc, #148]	@ (8005e60 <Meas_Init+0x248>)
 8005dcc:	0119      	lsls	r1, r3, #4
 8005dce:	482b      	ldr	r0, [pc, #172]	@ (8005e7c <Meas_Init+0x264>)
 8005dd0:	5088      	str	r0, [r1, r2]
 8005dd2:	4923      	ldr	r1, [pc, #140]	@ (8005e60 <Meas_Init+0x248>)
 8005dd4:	011a      	lsls	r2, r3, #4
 8005dd6:	188a      	adds	r2, r1, r2
 8005dd8:	3204      	adds	r2, #4
 8005dda:	4929      	ldr	r1, [pc, #164]	@ (8005e80 <Meas_Init+0x268>)
 8005ddc:	6011      	str	r1, [r2, #0]
 8005dde:	4920      	ldr	r1, [pc, #128]	@ (8005e60 <Meas_Init+0x248>)
 8005de0:	011a      	lsls	r2, r3, #4
 8005de2:	188a      	adds	r2, r1, r2
 8005de4:	3208      	adds	r2, #8
 8005de6:	4927      	ldr	r1, [pc, #156]	@ (8005e84 <Meas_Init+0x26c>)
 8005de8:	6011      	str	r1, [r2, #0]
 8005dea:	4a1d      	ldr	r2, [pc, #116]	@ (8005e60 <Meas_Init+0x248>)
 8005dec:	011b      	lsls	r3, r3, #4
 8005dee:	18d3      	adds	r3, r2, r3
 8005df0:	330c      	adds	r3, #12
 8005df2:	1c22      	adds	r2, r4, #0
 8005df4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 8005df6:	197b      	adds	r3, r7, r5
 8005df8:	781b      	ldrb	r3, [r3, #0]
 8005dfa:	197a      	adds	r2, r7, r5
 8005dfc:	1c59      	adds	r1, r3, #1
 8005dfe:	7011      	strb	r1, [r2, #0]
 8005e00:	4a0e      	ldr	r2, [pc, #56]	@ (8005e3c <Meas_Init+0x224>)
 8005e02:	78d4      	ldrb	r4, [r2, #3]
 8005e04:	4a16      	ldr	r2, [pc, #88]	@ (8005e60 <Meas_Init+0x248>)
 8005e06:	0119      	lsls	r1, r3, #4
 8005e08:	481f      	ldr	r0, [pc, #124]	@ (8005e88 <Meas_Init+0x270>)
 8005e0a:	5088      	str	r0, [r1, r2]
 8005e0c:	4914      	ldr	r1, [pc, #80]	@ (8005e60 <Meas_Init+0x248>)
 8005e0e:	011a      	lsls	r2, r3, #4
 8005e10:	188a      	adds	r2, r1, r2
 8005e12:	3204      	adds	r2, #4
 8005e14:	491d      	ldr	r1, [pc, #116]	@ (8005e8c <Meas_Init+0x274>)
 8005e16:	6011      	str	r1, [r2, #0]
 8005e18:	4911      	ldr	r1, [pc, #68]	@ (8005e60 <Meas_Init+0x248>)
 8005e1a:	011a      	lsls	r2, r3, #4
 8005e1c:	188a      	adds	r2, r1, r2
 8005e1e:	3208      	adds	r2, #8
 8005e20:	491b      	ldr	r1, [pc, #108]	@ (8005e90 <Meas_Init+0x278>)
 8005e22:	6011      	str	r1, [r2, #0]
 8005e24:	4a0e      	ldr	r2, [pc, #56]	@ (8005e60 <Meas_Init+0x248>)
 8005e26:	011b      	lsls	r3, r3, #4
 8005e28:	18d3      	adds	r3, r2, r3
 8005e2a:	330c      	adds	r3, #12
 8005e2c:	1c22      	adds	r2, r4, #0
 8005e2e:	701a      	strb	r2, [r3, #0]
}
 8005e30:	46c0      	nop			@ (mov r8, r8)
 8005e32:	46bd      	mov	sp, r7
 8005e34:	b016      	add	sp, #88	@ 0x58
 8005e36:	bdb0      	pop	{r4, r5, r7, pc}
 8005e38:	20000cfc 	.word	0x20000cfc
 8005e3c:	20000cf4 	.word	0x20000cf4
 8005e40:	0801adb0 	.word	0x0801adb0
 8005e44:	0801ade0 	.word	0x0801ade0
 8005e48:	20000cf8 	.word	0x20000cf8
 8005e4c:	0801ade4 	.word	0x0801ade4
 8005e50:	0801ae10 	.word	0x0801ae10
 8005e54:	0801ae14 	.word	0x0801ae14
 8005e58:	0801ae30 	.word	0x0801ae30
 8005e5c:	50000400 	.word	0x50000400
 8005e60:	20000cb4 	.word	0x20000cb4
 8005e64:	08005b3d 	.word	0x08005b3d
 8005e68:	08005b4d 	.word	0x08005b4d
 8005e6c:	20000cb0 	.word	0x20000cb0
 8005e70:	08005b6d 	.word	0x08005b6d
 8005e74:	08005b7d 	.word	0x08005b7d
 8005e78:	20000cb1 	.word	0x20000cb1
 8005e7c:	08005b95 	.word	0x08005b95
 8005e80:	08005b9f 	.word	0x08005b9f
 8005e84:	20000cb2 	.word	0x20000cb2
 8005e88:	08005bab 	.word	0x08005bab
 8005e8c:	08005bc1 	.word	0x08005bc1
 8005e90:	20000cb3 	.word	0x20000cb3

08005e94 <StartMeasurements>:

void StartMeasurements(void) {
 8005e94:	b580      	push	{r7, lr}
 8005e96:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005e98:	4b10      	ldr	r3, [pc, #64]	@ (8005edc <StartMeasurements+0x48>)
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	701a      	strb	r2, [r3, #0]
 8005e9e:	e015      	b.n	8005ecc <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005ea0:	4b0e      	ldr	r3, [pc, #56]	@ (8005edc <StartMeasurements+0x48>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	4a0e      	ldr	r2, [pc, #56]	@ (8005ee0 <StartMeasurements+0x4c>)
 8005ea6:	011b      	lsls	r3, r3, #4
 8005ea8:	18d3      	adds	r3, r2, r3
 8005eaa:	330c      	adds	r3, #12
 8005eac:	781b      	ldrb	r3, [r3, #0]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d006      	beq.n	8005ec0 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 8005eb2:	4b0a      	ldr	r3, [pc, #40]	@ (8005edc <StartMeasurements+0x48>)
 8005eb4:	781b      	ldrb	r3, [r3, #0]
 8005eb6:	001a      	movs	r2, r3
 8005eb8:	4b09      	ldr	r3, [pc, #36]	@ (8005ee0 <StartMeasurements+0x4c>)
 8005eba:	0112      	lsls	r2, r2, #4
 8005ebc:	58d3      	ldr	r3, [r2, r3]
 8005ebe:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005ec0:	4b06      	ldr	r3, [pc, #24]	@ (8005edc <StartMeasurements+0x48>)
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	3301      	adds	r3, #1
 8005ec6:	b2da      	uxtb	r2, r3
 8005ec8:	4b04      	ldr	r3, [pc, #16]	@ (8005edc <StartMeasurements+0x48>)
 8005eca:	701a      	strb	r2, [r3, #0]
 8005ecc:	4b03      	ldr	r3, [pc, #12]	@ (8005edc <StartMeasurements+0x48>)
 8005ece:	781b      	ldrb	r3, [r3, #0]
 8005ed0:	2b03      	cmp	r3, #3
 8005ed2:	d9e5      	bls.n	8005ea0 <StartMeasurements+0xc>
    }
  }
}
 8005ed4:	46c0      	nop			@ (mov r8, r8)
 8005ed6:	46c0      	nop			@ (mov r8, r8)
 8005ed8:	46bd      	mov	sp, r7
 8005eda:	bd80      	pop	{r7, pc}
 8005edc:	20000cfd 	.word	0x20000cfd
 8005ee0:	20000cb4 	.word	0x20000cb4

08005ee4 <ResetMeasurements>:

void ResetMeasurements(void) {
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8005ee8:	4b0b      	ldr	r3, [pc, #44]	@ (8005f18 <ResetMeasurements+0x34>)
 8005eea:	2200      	movs	r2, #0
 8005eec:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 8005eee:	4b0a      	ldr	r3, [pc, #40]	@ (8005f18 <ResetMeasurements+0x34>)
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8005ef4:	4b08      	ldr	r3, [pc, #32]	@ (8005f18 <ResetMeasurements+0x34>)
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8005efa:	4b07      	ldr	r3, [pc, #28]	@ (8005f18 <ResetMeasurements+0x34>)
 8005efc:	2200      	movs	r2, #0
 8005efe:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 8005f00:	4b05      	ldr	r3, [pc, #20]	@ (8005f18 <ResetMeasurements+0x34>)
 8005f02:	2200      	movs	r2, #0
 8005f04:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8005f06:	4b04      	ldr	r3, [pc, #16]	@ (8005f18 <ResetMeasurements+0x34>)
 8005f08:	2200      	movs	r2, #0
 8005f0a:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8005f0c:	4b02      	ldr	r3, [pc, #8]	@ (8005f18 <ResetMeasurements+0x34>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	73da      	strb	r2, [r3, #15]
}
 8005f12:	46c0      	nop			@ (mov r8, r8)
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	20000ca4 	.word	0x20000ca4

08005f1c <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f20:	4b18      	ldr	r3, [pc, #96]	@ (8005f84 <MeasurementsCompleted+0x68>)
 8005f22:	2200      	movs	r2, #0
 8005f24:	701a      	strb	r2, [r3, #0]
 8005f26:	e024      	b.n	8005f72 <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8005f28:	4b16      	ldr	r3, [pc, #88]	@ (8005f84 <MeasurementsCompleted+0x68>)
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	4a16      	ldr	r2, [pc, #88]	@ (8005f88 <MeasurementsCompleted+0x6c>)
 8005f2e:	011b      	lsls	r3, r3, #4
 8005f30:	18d3      	adds	r3, r2, r3
 8005f32:	330c      	adds	r3, #12
 8005f34:	781b      	ldrb	r3, [r3, #0]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d015      	beq.n	8005f66 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8005f3a:	4b12      	ldr	r3, [pc, #72]	@ (8005f84 <MeasurementsCompleted+0x68>)
 8005f3c:	781b      	ldrb	r3, [r3, #0]
 8005f3e:	4a12      	ldr	r2, [pc, #72]	@ (8005f88 <MeasurementsCompleted+0x6c>)
 8005f40:	011b      	lsls	r3, r3, #4
 8005f42:	18d3      	adds	r3, r2, r3
 8005f44:	3304      	adds	r3, #4
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4798      	blx	r3
 8005f4a:	1e03      	subs	r3, r0, #0
 8005f4c:	d009      	beq.n	8005f62 <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 8005f4e:	4b0d      	ldr	r3, [pc, #52]	@ (8005f84 <MeasurementsCompleted+0x68>)
 8005f50:	781b      	ldrb	r3, [r3, #0]
 8005f52:	4a0d      	ldr	r2, [pc, #52]	@ (8005f88 <MeasurementsCompleted+0x6c>)
 8005f54:	011b      	lsls	r3, r3, #4
 8005f56:	18d3      	adds	r3, r2, r3
 8005f58:	3308      	adds	r3, #8
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	701a      	strb	r2, [r3, #0]
 8005f60:	e001      	b.n	8005f66 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 8005f62:	2300      	movs	r3, #0
 8005f64:	e00a      	b.n	8005f7c <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8005f66:	4b07      	ldr	r3, [pc, #28]	@ (8005f84 <MeasurementsCompleted+0x68>)
 8005f68:	781b      	ldrb	r3, [r3, #0]
 8005f6a:	3301      	adds	r3, #1
 8005f6c:	b2da      	uxtb	r2, r3
 8005f6e:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <MeasurementsCompleted+0x68>)
 8005f70:	701a      	strb	r2, [r3, #0]
 8005f72:	4b04      	ldr	r3, [pc, #16]	@ (8005f84 <MeasurementsCompleted+0x68>)
 8005f74:	781b      	ldrb	r3, [r3, #0]
 8005f76:	2b03      	cmp	r3, #3
 8005f78:	d9d6      	bls.n	8005f28 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8005f7a:	2301      	movs	r3, #1
}
 8005f7c:	0018      	movs	r0, r3
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	46c0      	nop			@ (mov r8, r8)
 8005f84:	20000cfd 	.word	0x20000cfd
 8005f88:	20000cb4 	.word	0x20000cb4

08005f8c <Meas_Upkeep>:

void Meas_Upkeep(void) {
 8005f8c:	b5b0      	push	{r4, r5, r7, lr}
 8005f8e:	b084      	sub	sp, #16
 8005f90:	af04      	add	r7, sp, #16
  switch(MeasState) {
 8005f92:	4b30      	ldr	r3, [pc, #192]	@ (8006054 <Meas_Upkeep+0xc8>)
 8005f94:	781b      	ldrb	r3, [r3, #0]
 8005f96:	2b05      	cmp	r3, #5
 8005f98:	d854      	bhi.n	8006044 <Meas_Upkeep+0xb8>
 8005f9a:	009a      	lsls	r2, r3, #2
 8005f9c:	4b2e      	ldr	r3, [pc, #184]	@ (8006058 <Meas_Upkeep+0xcc>)
 8005f9e:	18d3      	adds	r3, r2, r3
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:
    Debug("Measurements are turned off.");
 8005fa4:	4a2d      	ldr	r2, [pc, #180]	@ (800605c <Meas_Upkeep+0xd0>)
 8005fa6:	4b2e      	ldr	r3, [pc, #184]	@ (8006060 <Meas_Upkeep+0xd4>)
 8005fa8:	0019      	movs	r1, r3
 8005faa:	2003      	movs	r0, #3
 8005fac:	f002 fc64 	bl	8008878 <CreateLine>
    break;
 8005fb0:	e04d      	b.n	800604e <Meas_Upkeep+0xc2>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8005fb2:	f7ff ff97 	bl	8005ee4 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8005fb6:	4b27      	ldr	r3, [pc, #156]	@ (8006054 <Meas_Upkeep+0xc8>)
 8005fb8:	2201      	movs	r2, #1
 8005fba:	701a      	strb	r2, [r3, #0]
    break;
 8005fbc:	e047      	b.n	800604e <Meas_Upkeep+0xc2>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8005fbe:	f7ff ff69 	bl	8005e94 <StartMeasurements>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8005fc2:	4b24      	ldr	r3, [pc, #144]	@ (8006054 <Meas_Upkeep+0xc8>)
 8005fc4:	2202      	movs	r2, #2
 8005fc6:	701a      	strb	r2, [r3, #0]
   break;
 8005fc8:	e041      	b.n	800604e <Meas_Upkeep+0xc2>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8005fca:	f7ff ffa7 	bl	8005f1c <MeasurementsCompleted>
 8005fce:	1e03      	subs	r3, r0, #0
 8005fd0:	d03c      	beq.n	800604c <Meas_Upkeep+0xc0>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8005fd2:	4b20      	ldr	r3, [pc, #128]	@ (8006054 <Meas_Upkeep+0xc8>)
 8005fd4:	2203      	movs	r2, #3
 8005fd6:	701a      	strb	r2, [r3, #0]
    }
    break;
 8005fd8:	e038      	b.n	800604c <Meas_Upkeep+0xc0>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8005fda:	4a22      	ldr	r2, [pc, #136]	@ (8006064 <Meas_Upkeep+0xd8>)
 8005fdc:	4b20      	ldr	r3, [pc, #128]	@ (8006060 <Meas_Upkeep+0xd4>)
 8005fde:	0019      	movs	r1, r3
 8005fe0:	2003      	movs	r0, #3
 8005fe2:	f002 fc49 	bl	8008878 <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8005fe6:	4b20      	ldr	r3, [pc, #128]	@ (8006068 <Meas_Upkeep+0xdc>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	4a20      	ldr	r2, [pc, #128]	@ (800606c <Meas_Upkeep+0xe0>)
 8005fec:	491c      	ldr	r1, [pc, #112]	@ (8006060 <Meas_Upkeep+0xd4>)
 8005fee:	2003      	movs	r0, #3
 8005ff0:	f002 fc42 	bl	8008878 <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8005ff4:	4b1c      	ldr	r3, [pc, #112]	@ (8006068 <Meas_Upkeep+0xdc>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	1c18      	adds	r0, r3, #0
 8005ffa:	f7fd f9f7 	bl	80033ec <__aeabi_f2d>
 8005ffe:	0004      	movs	r4, r0
 8006000:	000d      	movs	r5, r1
 8006002:	4b19      	ldr	r3, [pc, #100]	@ (8006068 <Meas_Upkeep+0xdc>)
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	1c18      	adds	r0, r3, #0
 8006008:	f7fd f9f0 	bl	80033ec <__aeabi_f2d>
 800600c:	0002      	movs	r2, r0
 800600e:	000b      	movs	r3, r1
 8006010:	4817      	ldr	r0, [pc, #92]	@ (8006070 <Meas_Upkeep+0xe4>)
 8006012:	4913      	ldr	r1, [pc, #76]	@ (8006060 <Meas_Upkeep+0xd4>)
 8006014:	9202      	str	r2, [sp, #8]
 8006016:	9303      	str	r3, [sp, #12]
 8006018:	9400      	str	r4, [sp, #0]
 800601a:	9501      	str	r5, [sp, #4]
 800601c:	0002      	movs	r2, r0
 800601e:	2003      	movs	r0, #3
 8006020:	f002 fc2a 	bl	8008878 <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8006024:	4b10      	ldr	r3, [pc, #64]	@ (8006068 <Meas_Upkeep+0xdc>)
 8006026:	6858      	ldr	r0, [r3, #4]
 8006028:	4b0f      	ldr	r3, [pc, #60]	@ (8006068 <Meas_Upkeep+0xdc>)
 800602a:	6819      	ldr	r1, [r3, #0]
 800602c:	4b0e      	ldr	r3, [pc, #56]	@ (8006068 <Meas_Upkeep+0xdc>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	b29b      	uxth	r3, r3
 8006032:	001a      	movs	r2, r3
 8006034:	f7fd fb64 	bl	8003700 <setMeasurement>
    checkCharges();
 8006038:	f7fd fabe 	bl	80035b8 <checkCharges>
    MeasState = MEAS_STATE_INIT;
 800603c:	4b05      	ldr	r3, [pc, #20]	@ (8006054 <Meas_Upkeep+0xc8>)
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
    break;
 8006042:	e004      	b.n	800604e <Meas_Upkeep+0xc2>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8006044:	4b03      	ldr	r3, [pc, #12]	@ (8006054 <Meas_Upkeep+0xc8>)
 8006046:	2200      	movs	r2, #0
 8006048:	701a      	strb	r2, [r3, #0]
    break;
 800604a:	e000      	b.n	800604e <Meas_Upkeep+0xc2>
    break;
 800604c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800604e:	46c0      	nop			@ (mov r8, r8)
 8006050:	46bd      	mov	sp, r7
 8006052:	bdb0      	pop	{r4, r5, r7, pc}
 8006054:	20000cfc 	.word	0x20000cfc
 8006058:	0801b44c 	.word	0x0801b44c
 800605c:	0801ae48 	.word	0x0801ae48
 8006060:	0801ae10 	.word	0x0801ae10
 8006064:	0801ae68 	.word	0x0801ae68
 8006068:	20000ca4 	.word	0x20000ca4
 800606c:	0801ae7c 	.word	0x0801ae7c
 8006070:	0801ae94 	.word	0x0801ae94

08006074 <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8006074:	b590      	push	{r4, r7, lr}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	1d3b      	adds	r3, r7, #4
 800607c:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 800607e:	240f      	movs	r4, #15
 8006080:	193b      	adds	r3, r7, r4
 8006082:	2200      	movs	r2, #0
 8006084:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8006086:	4b20      	ldr	r3, [pc, #128]	@ (8006108 <Meas_SetEnabledSensors+0x94>)
 8006088:	1d3a      	adds	r2, r7, #4
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 800608e:	193b      	adds	r3, r7, r4
 8006090:	781b      	ldrb	r3, [r3, #0]
 8006092:	193a      	adds	r2, r7, r4
 8006094:	1c59      	adds	r1, r3, #1
 8006096:	7011      	strb	r1, [r2, #0]
 8006098:	0018      	movs	r0, r3
 800609a:	1d3b      	adds	r3, r7, #4
 800609c:	7819      	ldrb	r1, [r3, #0]
 800609e:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <Meas_SetEnabledSensors+0x98>)
 80060a0:	0103      	lsls	r3, r0, #4
 80060a2:	18d3      	adds	r3, r2, r3
 80060a4:	330c      	adds	r3, #12
 80060a6:	1c0a      	adds	r2, r1, #0
 80060a8:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 80060aa:	193b      	adds	r3, r7, r4
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	193a      	adds	r2, r7, r4
 80060b0:	1c59      	adds	r1, r3, #1
 80060b2:	7011      	strb	r1, [r2, #0]
 80060b4:	0018      	movs	r0, r3
 80060b6:	1d3b      	adds	r3, r7, #4
 80060b8:	7859      	ldrb	r1, [r3, #1]
 80060ba:	4a14      	ldr	r2, [pc, #80]	@ (800610c <Meas_SetEnabledSensors+0x98>)
 80060bc:	0103      	lsls	r3, r0, #4
 80060be:	18d3      	adds	r3, r2, r3
 80060c0:	330c      	adds	r3, #12
 80060c2:	1c0a      	adds	r2, r1, #0
 80060c4:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 80060c6:	193b      	adds	r3, r7, r4
 80060c8:	781b      	ldrb	r3, [r3, #0]
 80060ca:	193a      	adds	r2, r7, r4
 80060cc:	1c59      	adds	r1, r3, #1
 80060ce:	7011      	strb	r1, [r2, #0]
 80060d0:	0018      	movs	r0, r3
 80060d2:	1d3b      	adds	r3, r7, #4
 80060d4:	7899      	ldrb	r1, [r3, #2]
 80060d6:	4a0d      	ldr	r2, [pc, #52]	@ (800610c <Meas_SetEnabledSensors+0x98>)
 80060d8:	0103      	lsls	r3, r0, #4
 80060da:	18d3      	adds	r3, r2, r3
 80060dc:	330c      	adds	r3, #12
 80060de:	1c0a      	adds	r2, r1, #0
 80060e0:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 80060e2:	193b      	adds	r3, r7, r4
 80060e4:	781b      	ldrb	r3, [r3, #0]
 80060e6:	193a      	adds	r2, r7, r4
 80060e8:	1c59      	adds	r1, r3, #1
 80060ea:	7011      	strb	r1, [r2, #0]
 80060ec:	0018      	movs	r0, r3
 80060ee:	1d3b      	adds	r3, r7, #4
 80060f0:	78d9      	ldrb	r1, [r3, #3]
 80060f2:	4a06      	ldr	r2, [pc, #24]	@ (800610c <Meas_SetEnabledSensors+0x98>)
 80060f4:	0103      	lsls	r3, r0, #4
 80060f6:	18d3      	adds	r3, r2, r3
 80060f8:	330c      	adds	r3, #12
 80060fa:	1c0a      	adds	r2, r1, #0
 80060fc:	701a      	strb	r2, [r3, #0]
}
 80060fe:	46c0      	nop			@ (mov r8, r8)
 8006100:	46bd      	mov	sp, r7
 8006102:	b005      	add	sp, #20
 8006104:	bd90      	pop	{r4, r7, pc}
 8006106:	46c0      	nop			@ (mov r8, r8)
 8006108:	20000cf4 	.word	0x20000cf4
 800610c:	20000cb4 	.word	0x20000cb4

08006110 <Meas_Test>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}


void Meas_Test(){
 8006110:	b580      	push	{r7, lr}
 8006112:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8006114:	4b1e      	ldr	r3, [pc, #120]	@ (8006190 <Meas_Test+0x80>)
 8006116:	78db      	ldrb	r3, [r3, #3]
 8006118:	2201      	movs	r2, #1
 800611a:	4053      	eors	r3, r2
 800611c:	b2db      	uxtb	r3, r3
 800611e:	2b00      	cmp	r3, #0
 8006120:	d001      	beq.n	8006126 <Meas_Test+0x16>
    ESP_WakeTest();
 8006122:	f7fe fb77 	bl	8004814 <ESP_WakeTest>
  }
  if(!MeasTest.MIC_Tested){
 8006126:	4b1a      	ldr	r3, [pc, #104]	@ (8006190 <Meas_Test+0x80>)
 8006128:	789b      	ldrb	r3, [r3, #2]
 800612a:	2201      	movs	r2, #1
 800612c:	4053      	eors	r3, r2
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b00      	cmp	r3, #0
 8006132:	d012      	beq.n	800615a <Meas_Test+0x4a>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8006134:	f7ff fd53 	bl	8005bde <MIC_IsTestMeasurementDoneWrapper>
 8006138:	1e03      	subs	r3, r0, #0
 800613a:	d00e      	beq.n	800615a <Meas_Test+0x4a>
      MeasTest.MIC_Tested = true;
 800613c:	4b14      	ldr	r3, [pc, #80]	@ (8006190 <Meas_Test+0x80>)
 800613e:	2201      	movs	r2, #1
 8006140:	709a      	strb	r2, [r3, #2]
      TIM2 -> CCR1 = 40000;
 8006142:	2380      	movs	r3, #128	@ 0x80
 8006144:	05db      	lsls	r3, r3, #23
 8006146:	4a13      	ldr	r2, [pc, #76]	@ (8006194 <Meas_Test+0x84>)
 8006148:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM2 -> CCR3 = 0;
 800614a:	2380      	movs	r3, #128	@ 0x80
 800614c:	05db      	lsls	r3, r3, #23
 800614e:	2200      	movs	r2, #0
 8006150:	63da      	str	r2, [r3, #60]	@ 0x3c
      TIM2 -> CCR4 = 40000;
 8006152:	2380      	movs	r3, #128	@ 0x80
 8006154:	05db      	lsls	r3, r3, #23
 8006156:	4a0f      	ldr	r2, [pc, #60]	@ (8006194 <Meas_Test+0x84>)
 8006158:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 800615a:	4b0d      	ldr	r3, [pc, #52]	@ (8006190 <Meas_Test+0x80>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d013      	beq.n	800618a <Meas_Test+0x7a>
 8006162:	4b0b      	ldr	r3, [pc, #44]	@ (8006190 <Meas_Test+0x80>)
 8006164:	785b      	ldrb	r3, [r3, #1]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d00f      	beq.n	800618a <Meas_Test+0x7a>
 800616a:	4b09      	ldr	r3, [pc, #36]	@ (8006190 <Meas_Test+0x80>)
 800616c:	78db      	ldrb	r3, [r3, #3]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d00b      	beq.n	800618a <Meas_Test+0x7a>
 8006172:	4b07      	ldr	r3, [pc, #28]	@ (8006190 <Meas_Test+0x80>)
 8006174:	789b      	ldrb	r3, [r3, #2]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d007      	beq.n	800618a <Meas_Test+0x7a>
    Debug("Test completed");
 800617a:	4a07      	ldr	r2, [pc, #28]	@ (8006198 <Meas_Test+0x88>)
 800617c:	4b07      	ldr	r3, [pc, #28]	@ (800619c <Meas_Test+0x8c>)
 800617e:	0019      	movs	r1, r3
 8006180:	2003      	movs	r0, #3
 8006182:	f002 fb79 	bl	8008878 <CreateLine>
    SetTestDone();
 8006186:	f7ff fb9f 	bl	80058c8 <SetTestDone>
  }
}
 800618a:	46c0      	nop			@ (mov r8, r8)
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	20000cf8 	.word	0x20000cf8
 8006194:	00009c40 	.word	0x00009c40
 8006198:	0801aec8 	.word	0x0801aec8
 800619c:	0801ae10 	.word	0x0801ae10

080061a0 <SetESPMeasurementDone>:

void SetESPMeasurementDone(){
 80061a0:	b580      	push	{r7, lr}
 80061a2:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 80061a4:	4b02      	ldr	r3, [pc, #8]	@ (80061b0 <SetESPMeasurementDone+0x10>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	70da      	strb	r2, [r3, #3]
}
 80061aa:	46c0      	nop			@ (mov r8, r8)
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}
 80061b0:	20000cf8 	.word	0x20000cf8

080061b4 <MIC_Init>:
q15_t sample[NUMBER_OF_SAMPLES];




void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b082      	sub	sp, #8
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	4b03      	ldr	r3, [pc, #12]	@ (80061cc <MIC_Init+0x18>)
 80061be:	687a      	ldr	r2, [r7, #4]
 80061c0:	601a      	str	r2, [r3, #0]
 80061c2:	46c0      	nop			@ (mov r8, r8)
 80061c4:	46bd      	mov	sp, r7
 80061c6:	b002      	add	sp, #8
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	46c0      	nop			@ (mov r8, r8)
 80061cc:	20000d00 	.word	0x20000d00

080061d0 <UpdateSampleRate>:
//  for(uint8_t i = 0;i < NR_SAMPLES_128; i++) {
//    FFTResult[i] *= energyCorrectionFactor;
//  }
//}

static void UpdateSampleRate(uint32_t sampleRate) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  if (I2SHandle->Init.AudioFreq == sampleRate) {
 80061d8:	4b0c      	ldr	r3, [pc, #48]	@ (800620c <UpdateSampleRate+0x3c>)
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	695b      	ldr	r3, [r3, #20]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	429a      	cmp	r2, r3
 80061e2:	d00e      	beq.n	8006202 <UpdateSampleRate+0x32>
    return;
  }

  HAL_I2S_DeInit(I2SHandle);
 80061e4:	4b09      	ldr	r3, [pc, #36]	@ (800620c <UpdateSampleRate+0x3c>)
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	0018      	movs	r0, r3
 80061ea:	f006 f9f3 	bl	800c5d4 <HAL_I2S_DeInit>
  I2SHandle->Init.AudioFreq = sampleRate;
 80061ee:	4b07      	ldr	r3, [pc, #28]	@ (800620c <UpdateSampleRate+0x3c>)
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	687a      	ldr	r2, [r7, #4]
 80061f4:	615a      	str	r2, [r3, #20]
  HAL_I2S_Init(I2SHandle);
 80061f6:	4b05      	ldr	r3, [pc, #20]	@ (800620c <UpdateSampleRate+0x3c>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	0018      	movs	r0, r3
 80061fc:	f006 f8f8 	bl	800c3f0 <HAL_I2S_Init>
 8006200:	e000      	b.n	8006204 <UpdateSampleRate+0x34>
    return;
 8006202:	46c0      	nop			@ (mov r8, r8)
}
 8006204:	46bd      	mov	sp, r7
 8006206:	b002      	add	sp, #8
 8006208:	bd80      	pop	{r7, pc}
 800620a:	46c0      	nop			@ (mov r8, r8)
 800620c:	20000d00 	.word	0x20000d00

08006210 <ConvertAudio>:

static q15_t ConvertAudio(uint16_t* data) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  //bool Sign = 0;
  //float dBc = 0;
  float Division = 2147483647.0; //Reference?
 8006218:	239e      	movs	r3, #158	@ 0x9e
 800621a:	05db      	lsls	r3, r3, #23
 800621c:	60fb      	str	r3, [r7, #12]
  int32_t audioValue = 0;
 800621e:	2300      	movs	r3, #0
 8006220:	60bb      	str	r3, [r7, #8]
  //Sign = data[0] >> 14;
  audioValue = (data[0]<<17)|(data[1]<<1);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	881b      	ldrh	r3, [r3, #0]
 8006226:	045a      	lsls	r2, r3, #17
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	3302      	adds	r3, #2
 800622c:	881b      	ldrh	r3, [r3, #0]
 800622e:	005b      	lsls	r3, r3, #1
 8006230:	4313      	orrs	r3, r2
 8006232:	60bb      	str	r3, [r7, #8]
  audioValue = (audioValue/Division)*0x7FFF;
 8006234:	68b8      	ldr	r0, [r7, #8]
 8006236:	f7fb f98f 	bl	8001558 <__aeabi_i2f>
 800623a:	1c03      	adds	r3, r0, #0
 800623c:	68f9      	ldr	r1, [r7, #12]
 800623e:	1c18      	adds	r0, r3, #0
 8006240:	f7fa fc8c 	bl	8000b5c <__aeabi_fdiv>
 8006244:	1c03      	adds	r3, r0, #0
 8006246:	4908      	ldr	r1, [pc, #32]	@ (8006268 <ConvertAudio+0x58>)
 8006248:	1c18      	adds	r0, r3, #0
 800624a:	f7fa fe6d 	bl	8000f28 <__aeabi_fmul>
 800624e:	1c03      	adds	r3, r0, #0
 8006250:	1c18      	adds	r0, r3, #0
 8006252:	f7fb f961 	bl	8001518 <__aeabi_f2iz>
 8006256:	0003      	movs	r3, r0
 8006258:	60bb      	str	r3, [r7, #8]
//  if(audioValue < 0){
//    audioValue = 0xFFFFFFFF-audioValue;
//  }
//  dB = 20 * log10(audioValue / Division);

  return audioValue;
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	b21b      	sxth	r3, r3
}
 800625e:	0018      	movs	r0, r3
 8006260:	46bd      	mov	sp, r7
 8006262:	b004      	add	sp, #16
 8006264:	bd80      	pop	{r7, pc}
 8006266:	46c0      	nop			@ (mov r8, r8)
 8006268:	46fffe00 	.word	0x46fffe00

0800626c <X2>:

q15_t X2(q15_t num){
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	0002      	movs	r2, r0
 8006274:	1dbb      	adds	r3, r7, #6
 8006276:	801a      	strh	r2, [r3, #0]
  q15_t result = num*num;
 8006278:	1dbb      	adds	r3, r7, #6
 800627a:	881b      	ldrh	r3, [r3, #0]
 800627c:	1dba      	adds	r2, r7, #6
 800627e:	8812      	ldrh	r2, [r2, #0]
 8006280:	4353      	muls	r3, r2
 8006282:	b29a      	uxth	r2, r3
 8006284:	210e      	movs	r1, #14
 8006286:	187b      	adds	r3, r7, r1
 8006288:	801a      	strh	r2, [r3, #0]
  return(result);
 800628a:	187b      	adds	r3, r7, r1
 800628c:	2200      	movs	r2, #0
 800628e:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006290:	0018      	movs	r0, r3
 8006292:	46bd      	mov	sp, r7
 8006294:	b004      	add	sp, #16
 8006296:	bd80      	pop	{r7, pc}

08006298 <GetOctave>:

q15_t GetOctave(uint16_t width, uint16_t minFreq){
 8006298:	b590      	push	{r4, r7, lr}
 800629a:	b087      	sub	sp, #28
 800629c:	af00      	add	r7, sp, #0
 800629e:	0002      	movs	r2, r0
 80062a0:	1dbb      	adds	r3, r7, #6
 80062a2:	801a      	strh	r2, [r3, #0]
 80062a4:	1d3b      	adds	r3, r7, #4
 80062a6:	1c0a      	adds	r2, r1, #0
 80062a8:	801a      	strh	r2, [r3, #0]
  q15_t retVal = 0;
 80062aa:	230a      	movs	r3, #10
 80062ac:	18fb      	adds	r3, r7, r3
 80062ae:	2200      	movs	r2, #0
 80062b0:	801a      	strh	r2, [r3, #0]
  q15_t buffer = 0;
 80062b2:	2316      	movs	r3, #22
 80062b4:	18fb      	adds	r3, r7, r3
 80062b6:	2200      	movs	r2, #0
 80062b8:	801a      	strh	r2, [r3, #0]
  float dB;
  float Division = (32768.0)-1; //Reference?
 80062ba:	4b2e      	ldr	r3, [pc, #184]	@ (8006374 <GetOctave+0xdc>)
 80062bc:	613b      	str	r3, [r7, #16]
  for(uint16_t i = minFreq; i < minFreq+width; i++){
 80062be:	2314      	movs	r3, #20
 80062c0:	18fb      	adds	r3, r7, r3
 80062c2:	1d3a      	adds	r2, r7, #4
 80062c4:	8812      	ldrh	r2, [r2, #0]
 80062c6:	801a      	strh	r2, [r3, #0]
 80062c8:	e016      	b.n	80062f8 <GetOctave+0x60>
    buffer += X2(output[i]);
 80062ca:	2414      	movs	r4, #20
 80062cc:	193b      	adds	r3, r7, r4
 80062ce:	881a      	ldrh	r2, [r3, #0]
 80062d0:	4b29      	ldr	r3, [pc, #164]	@ (8006378 <GetOctave+0xe0>)
 80062d2:	0052      	lsls	r2, r2, #1
 80062d4:	5ed3      	ldrsh	r3, [r2, r3]
 80062d6:	0018      	movs	r0, r3
 80062d8:	f7ff ffc8 	bl	800626c <X2>
 80062dc:	0003      	movs	r3, r0
 80062de:	b29a      	uxth	r2, r3
 80062e0:	2116      	movs	r1, #22
 80062e2:	187b      	adds	r3, r7, r1
 80062e4:	881b      	ldrh	r3, [r3, #0]
 80062e6:	18d3      	adds	r3, r2, r3
 80062e8:	b29a      	uxth	r2, r3
 80062ea:	187b      	adds	r3, r7, r1
 80062ec:	801a      	strh	r2, [r3, #0]
  for(uint16_t i = minFreq; i < minFreq+width; i++){
 80062ee:	193b      	adds	r3, r7, r4
 80062f0:	881a      	ldrh	r2, [r3, #0]
 80062f2:	193b      	adds	r3, r7, r4
 80062f4:	3201      	adds	r2, #1
 80062f6:	801a      	strh	r2, [r3, #0]
 80062f8:	2314      	movs	r3, #20
 80062fa:	18fb      	adds	r3, r7, r3
 80062fc:	881a      	ldrh	r2, [r3, #0]
 80062fe:	1d3b      	adds	r3, r7, #4
 8006300:	8819      	ldrh	r1, [r3, #0]
 8006302:	1dbb      	adds	r3, r7, #6
 8006304:	881b      	ldrh	r3, [r3, #0]
 8006306:	18cb      	adds	r3, r1, r3
 8006308:	429a      	cmp	r2, r3
 800630a:	dbde      	blt.n	80062ca <GetOctave+0x32>
  }
  arm_sqrt_q15(buffer, &retVal);
 800630c:	240a      	movs	r4, #10
 800630e:	193a      	adds	r2, r7, r4
 8006310:	2316      	movs	r3, #22
 8006312:	18fb      	adds	r3, r7, r3
 8006314:	2100      	movs	r1, #0
 8006316:	5e5b      	ldrsh	r3, [r3, r1]
 8006318:	0011      	movs	r1, r2
 800631a:	0018      	movs	r0, r3
 800631c:	f00f fe22 	bl	8015f64 <arm_sqrt_q15>
  dB = 10*log10(retVal/Division);
 8006320:	193b      	adds	r3, r7, r4
 8006322:	2200      	movs	r2, #0
 8006324:	5e9b      	ldrsh	r3, [r3, r2]
 8006326:	0018      	movs	r0, r3
 8006328:	f7fb f916 	bl	8001558 <__aeabi_i2f>
 800632c:	1c03      	adds	r3, r0, #0
 800632e:	6939      	ldr	r1, [r7, #16]
 8006330:	1c18      	adds	r0, r3, #0
 8006332:	f7fa fc13 	bl	8000b5c <__aeabi_fdiv>
 8006336:	1c03      	adds	r3, r0, #0
 8006338:	1c18      	adds	r0, r3, #0
 800633a:	f7fd f857 	bl	80033ec <__aeabi_f2d>
 800633e:	0002      	movs	r2, r0
 8006340:	000b      	movs	r3, r1
 8006342:	0010      	movs	r0, r2
 8006344:	0019      	movs	r1, r3
 8006346:	f013 feb7 	bl	801a0b8 <log10>
 800634a:	2200      	movs	r2, #0
 800634c:	4b0b      	ldr	r3, [pc, #44]	@ (800637c <GetOctave+0xe4>)
 800634e:	f7fc f939 	bl	80025c4 <__aeabi_dmul>
 8006352:	0002      	movs	r2, r0
 8006354:	000b      	movs	r3, r1
 8006356:	0010      	movs	r0, r2
 8006358:	0019      	movs	r1, r3
 800635a:	f7fd f88f 	bl	800347c <__aeabi_d2f>
 800635e:	1c03      	adds	r3, r0, #0
 8006360:	60fb      	str	r3, [r7, #12]
  return(dB);
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7fb f8d8 	bl	8001518 <__aeabi_f2iz>
 8006368:	0003      	movs	r3, r0
 800636a:	b21b      	sxth	r3, r3
}
 800636c:	0018      	movs	r0, r3
 800636e:	46bd      	mov	sp, r7
 8006370:	b007      	add	sp, #28
 8006372:	bd90      	pop	{r4, r7, pc}
 8006374:	46fffe00 	.word	0x46fffe00
 8006378:	20001504 	.word	0x20001504
 800637c:	40240000 	.word	0x40240000

08006380 <GetAllOctaves>:

void GetAllOctaves(){
 8006380:	b580      	push	{r7, lr}
 8006382:	af00      	add	r7, sp, #0
  OCT[0] = GetOctave(2, 3); // 31.5 centre should be at 4
 8006384:	2103      	movs	r1, #3
 8006386:	2002      	movs	r0, #2
 8006388:	f7ff ff86 	bl	8006298 <GetOctave>
 800638c:	0003      	movs	r3, r0
 800638e:	0018      	movs	r0, r3
 8006390:	f7fb f8e2 	bl	8001558 <__aeabi_i2f>
 8006394:	1c02      	adds	r2, r0, #0
 8006396:	4b1e      	ldr	r3, [pc, #120]	@ (8006410 <GetAllOctaves+0x90>)
 8006398:	601a      	str	r2, [r3, #0]
  OCT[1] = GetOctave(4, 6); // 63 centre should be at 8
 800639a:	2106      	movs	r1, #6
 800639c:	2004      	movs	r0, #4
 800639e:	f7ff ff7b 	bl	8006298 <GetOctave>
 80063a2:	0003      	movs	r3, r0
 80063a4:	0018      	movs	r0, r3
 80063a6:	f7fb f8d7 	bl	8001558 <__aeabi_i2f>
 80063aa:	1c02      	adds	r2, r0, #0
 80063ac:	4b18      	ldr	r3, [pc, #96]	@ (8006410 <GetAllOctaves+0x90>)
 80063ae:	605a      	str	r2, [r3, #4]
  OCT[2] = GetOctave(6, 13); // 125 centre should be at 16
 80063b0:	210d      	movs	r1, #13
 80063b2:	2006      	movs	r0, #6
 80063b4:	f7ff ff70 	bl	8006298 <GetOctave>
 80063b8:	0003      	movs	r3, r0
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7fb f8cc 	bl	8001558 <__aeabi_i2f>
 80063c0:	1c02      	adds	r2, r0, #0
 80063c2:	4b13      	ldr	r3, [pc, #76]	@ (8006410 <GetAllOctaves+0x90>)
 80063c4:	609a      	str	r2, [r3, #8]
  OCT[3] = GetOctave(13, 27); // 250 centre should be at 33
 80063c6:	211b      	movs	r1, #27
 80063c8:	200d      	movs	r0, #13
 80063ca:	f7ff ff65 	bl	8006298 <GetOctave>
 80063ce:	0003      	movs	r3, r0
 80063d0:	0018      	movs	r0, r3
 80063d2:	f7fb f8c1 	bl	8001558 <__aeabi_i2f>
 80063d6:	1c02      	adds	r2, r0, #0
 80063d8:	4b0d      	ldr	r3, [pc, #52]	@ (8006410 <GetAllOctaves+0x90>)
 80063da:	60da      	str	r2, [r3, #12]
  OCT[4] = GetOctave(22 ,55); // 500 centre should be at 66
 80063dc:	2137      	movs	r1, #55	@ 0x37
 80063de:	2016      	movs	r0, #22
 80063e0:	f7ff ff5a 	bl	8006298 <GetOctave>
 80063e4:	0003      	movs	r3, r0
 80063e6:	0018      	movs	r0, r3
 80063e8:	f7fb f8b6 	bl	8001558 <__aeabi_i2f>
 80063ec:	1c02      	adds	r2, r0, #0
 80063ee:	4b08      	ldr	r3, [pc, #32]	@ (8006410 <GetAllOctaves+0x90>)
 80063f0:	611a      	str	r2, [r3, #16]
  OCT[5] = GetOctave(46 , 109); // 1000 centre should be at 132
 80063f2:	216d      	movs	r1, #109	@ 0x6d
 80063f4:	202e      	movs	r0, #46	@ 0x2e
 80063f6:	f7ff ff4f 	bl	8006298 <GetOctave>
 80063fa:	0003      	movs	r3, r0
 80063fc:	0018      	movs	r0, r3
 80063fe:	f7fb f8ab 	bl	8001558 <__aeabi_i2f>
 8006402:	1c02      	adds	r2, r0, #0
 8006404:	4b02      	ldr	r3, [pc, #8]	@ (8006410 <GetAllOctaves+0x90>)
 8006406:	615a      	str	r2, [r3, #20]
  //OCT[6] = output[64]*0; //2000

}
 8006408:	46c0      	nop			@ (mov r8, r8)
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
 800640e:	46c0      	nop			@ (mov r8, r8)
 8006410:	20001910 	.word	0x20001910

08006414 <FFT>:
  for(uint16_t i = 0; i <NUMBER_OF_SAMPLES; i++){
    output[i] = output[i] / downscaleFactor;
  }
}

void FFT(){
 8006414:	b590      	push	{r4, r7, lr}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
  static arm_rfft_instance_q15 fft_instance;
  arm_status status;
  status = arm_rfft_init_q15(&fft_instance, NUMBER_OF_SAMPLES, 1, 1);
 800641a:	1dfc      	adds	r4, r7, #7
 800641c:	2380      	movs	r3, #128	@ 0x80
 800641e:	0059      	lsls	r1, r3, #1
 8006420:	480c      	ldr	r0, [pc, #48]	@ (8006454 <FFT+0x40>)
 8006422:	2301      	movs	r3, #1
 8006424:	2201      	movs	r2, #1
 8006426:	f00f fd21 	bl	8015e6c <arm_rfft_init_q15>
 800642a:	0003      	movs	r3, r0
 800642c:	7023      	strb	r3, [r4, #0]
  arm_rfft_q15(&fft_instance, sample, output);
 800642e:	4a0a      	ldr	r2, [pc, #40]	@ (8006458 <FFT+0x44>)
 8006430:	490a      	ldr	r1, [pc, #40]	@ (800645c <FFT+0x48>)
 8006432:	4b08      	ldr	r3, [pc, #32]	@ (8006454 <FFT+0x40>)
 8006434:	0018      	movs	r0, r3
 8006436:	f00f fc85 	bl	8015d44 <arm_rfft_q15>
  arm_abs_q15(output, output, NUMBER_OF_SAMPLES);
 800643a:	2380      	movs	r3, #128	@ 0x80
 800643c:	005a      	lsls	r2, r3, #1
 800643e:	4906      	ldr	r1, [pc, #24]	@ (8006458 <FFT+0x44>)
 8006440:	4b05      	ldr	r3, [pc, #20]	@ (8006458 <FFT+0x44>)
 8006442:	0018      	movs	r0, r3
 8006444:	f00f fdf2 	bl	801602c <arm_abs_q15>
  GetAllOctaves();
 8006448:	f7ff ff9a 	bl	8006380 <GetAllOctaves>
}
 800644c:	46c0      	nop			@ (mov r8, r8)
 800644e:	46bd      	mov	sp, r7
 8006450:	b003      	add	sp, #12
 8006452:	bd90      	pop	{r4, r7, pc}
 8006454:	20001b38 	.word	0x20001b38
 8006458:	20001504 	.word	0x20001504
 800645c:	20001938 	.word	0x20001938

08006460 <MIC_Start>:

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 8006460:	b5b0      	push	{r4, r5, r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
 8006468:	000a      	movs	r2, r1
 800646a:	1cbb      	adds	r3, r7, #2
 800646c:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 800646e:	4b20      	ldr	r3, [pc, #128]	@ (80064f0 <MIC_Start+0x90>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d106      	bne.n	8006484 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 8006476:	4a1f      	ldr	r2, [pc, #124]	@ (80064f4 <MIC_Start+0x94>)
 8006478:	4b1f      	ldr	r3, [pc, #124]	@ (80064f8 <MIC_Start+0x98>)
 800647a:	0019      	movs	r1, r3
 800647c:	2001      	movs	r0, #1
 800647e:	f002 f9fb 	bl	8008878 <CreateLine>
    return;
 8006482:	e031      	b.n	80064e8 <MIC_Start+0x88>
  }
  Debug("In mic start");
 8006484:	4a1d      	ldr	r2, [pc, #116]	@ (80064fc <MIC_Start+0x9c>)
 8006486:	4b1e      	ldr	r3, [pc, #120]	@ (8006500 <MIC_Start+0xa0>)
 8006488:	0019      	movs	r1, r3
 800648a:	2003      	movs	r0, #3
 800648c:	f002 f9f4 	bl	8008878 <CreateLine>
  UpdateSampleRate(sampleRate);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	0018      	movs	r0, r3
 8006494:	f7ff fe9c 	bl	80061d0 <UpdateSampleRate>
  Samples = (NrOfSamples)nrSamples;
 8006498:	4b1a      	ldr	r3, [pc, #104]	@ (8006504 <MIC_Start+0xa4>)
 800649a:	1cba      	adds	r2, r7, #2
 800649c:	8812      	ldrh	r2, [r2, #0]
 800649e:	801a      	strh	r2, [r3, #0]

  StartTime = GetCurrentHalTicks();
 80064a0:	f002 fa76 	bl	8008990 <GetCurrentHalTicks>
 80064a4:	0002      	movs	r2, r0
 80064a6:	4b18      	ldr	r3, [pc, #96]	@ (8006508 <MIC_Start+0xa8>)
 80064a8:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 80064aa:	4b17      	ldr	r3, [pc, #92]	@ (8006508 <MIC_Start+0xa8>)
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	3314      	adds	r3, #20
 80064b0:	001a      	movs	r2, r3
 80064b2:	4b16      	ldr	r3, [pc, #88]	@ (800650c <MIC_Start+0xac>)
 80064b4:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 80064b6:	4b16      	ldr	r3, [pc, #88]	@ (8006510 <MIC_Start+0xb0>)
 80064b8:	2200      	movs	r2, #0
 80064ba:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 80064bc:	4b15      	ldr	r3, [pc, #84]	@ (8006514 <MIC_Start+0xb4>)
 80064be:	2200      	movs	r2, #0
 80064c0:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, NUMBER_OF_SAMPLES*2);
 80064c2:	4b0b      	ldr	r3, [pc, #44]	@ (80064f0 <MIC_Start+0x90>)
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	250f      	movs	r5, #15
 80064c8:	197c      	adds	r4, r7, r5
 80064ca:	2280      	movs	r2, #128	@ 0x80
 80064cc:	0092      	lsls	r2, r2, #2
 80064ce:	4912      	ldr	r1, [pc, #72]	@ (8006518 <MIC_Start+0xb8>)
 80064d0:	0018      	movs	r0, r3
 80064d2:	f006 f8ab 	bl	800c62c <HAL_I2S_Receive_DMA>
 80064d6:	0003      	movs	r3, r0
 80064d8:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//          Samples >> 1); //>>1 because reading half word

  Info("Status %d", status);
 80064da:	197b      	adds	r3, r7, r5
 80064dc:	781b      	ldrb	r3, [r3, #0]
 80064de:	4a0f      	ldr	r2, [pc, #60]	@ (800651c <MIC_Start+0xbc>)
 80064e0:	490f      	ldr	r1, [pc, #60]	@ (8006520 <MIC_Start+0xc0>)
 80064e2:	2002      	movs	r0, #2
 80064e4:	f002 f9c8 	bl	8008878 <CreateLine>
}
 80064e8:	46bd      	mov	sp, r7
 80064ea:	b004      	add	sp, #16
 80064ec:	bdb0      	pop	{r4, r5, r7, pc}
 80064ee:	46c0      	nop			@ (mov r8, r8)
 80064f0:	20000d00 	.word	0x20000d00
 80064f4:	0801aed8 	.word	0x0801aed8
 80064f8:	0801aef8 	.word	0x0801aef8
 80064fc:	0801aefc 	.word	0x0801aefc
 8006500:	0801af0c 	.word	0x0801af0c
 8006504:	20000114 	.word	0x20000114
 8006508:	20001904 	.word	0x20001904
 800650c:	20001908 	.word	0x20001908
 8006510:	2000190c 	.word	0x2000190c
 8006514:	2000190d 	.word	0x2000190d
 8006518:	20000d04 	.word	0x20000d04
 800651c:	0801af10 	.word	0x0801af10
 8006520:	0801af1c 	.word	0x0801af1c

08006524 <MinimalValue>:

//static void MIC_ProcessFFT() {
  CalculateFFT();
//}
int16_t MinimalValue(uint16_t length){
 8006524:	b590      	push	{r4, r7, lr}
 8006526:	b085      	sub	sp, #20
 8006528:	af00      	add	r7, sp, #0
 800652a:	0002      	movs	r2, r0
 800652c:	1dbb      	adds	r3, r7, #6
 800652e:	801a      	strh	r2, [r3, #0]
  int16_t MinVal = 32767;
 8006530:	230e      	movs	r3, #14
 8006532:	18fb      	adds	r3, r7, r3
 8006534:	4a1a      	ldr	r2, [pc, #104]	@ (80065a0 <MinimalValue+0x7c>)
 8006536:	801a      	strh	r2, [r3, #0]
  int16_t i;
  for(i =0; i<length;i++){
 8006538:	230c      	movs	r3, #12
 800653a:	18fb      	adds	r3, r7, r3
 800653c:	2200      	movs	r2, #0
 800653e:	801a      	strh	r2, [r3, #0]
 8006540:	e01d      	b.n	800657e <MinimalValue+0x5a>
    if(sample[i] < MinVal){
 8006542:	210c      	movs	r1, #12
 8006544:	187b      	adds	r3, r7, r1
 8006546:	2200      	movs	r2, #0
 8006548:	5e9a      	ldrsh	r2, [r3, r2]
 800654a:	4b16      	ldr	r3, [pc, #88]	@ (80065a4 <MinimalValue+0x80>)
 800654c:	0052      	lsls	r2, r2, #1
 800654e:	5ed3      	ldrsh	r3, [r2, r3]
 8006550:	200e      	movs	r0, #14
 8006552:	183a      	adds	r2, r7, r0
 8006554:	2400      	movs	r4, #0
 8006556:	5f12      	ldrsh	r2, [r2, r4]
 8006558:	429a      	cmp	r2, r3
 800655a:	dd07      	ble.n	800656c <MinimalValue+0x48>
      MinVal = sample[i];
 800655c:	187b      	adds	r3, r7, r1
 800655e:	2100      	movs	r1, #0
 8006560:	5e59      	ldrsh	r1, [r3, r1]
 8006562:	183b      	adds	r3, r7, r0
 8006564:	4a0f      	ldr	r2, [pc, #60]	@ (80065a4 <MinimalValue+0x80>)
 8006566:	0049      	lsls	r1, r1, #1
 8006568:	5a8a      	ldrh	r2, [r1, r2]
 800656a:	801a      	strh	r2, [r3, #0]
  for(i =0; i<length;i++){
 800656c:	210c      	movs	r1, #12
 800656e:	187b      	adds	r3, r7, r1
 8006570:	2200      	movs	r2, #0
 8006572:	5e9b      	ldrsh	r3, [r3, r2]
 8006574:	b29b      	uxth	r3, r3
 8006576:	3301      	adds	r3, #1
 8006578:	b29a      	uxth	r2, r3
 800657a:	187b      	adds	r3, r7, r1
 800657c:	801a      	strh	r2, [r3, #0]
 800657e:	230c      	movs	r3, #12
 8006580:	18fb      	adds	r3, r7, r3
 8006582:	2200      	movs	r2, #0
 8006584:	5e9a      	ldrsh	r2, [r3, r2]
 8006586:	1dbb      	adds	r3, r7, #6
 8006588:	881b      	ldrh	r3, [r3, #0]
 800658a:	429a      	cmp	r2, r3
 800658c:	dbd9      	blt.n	8006542 <MinimalValue+0x1e>
    }
  }
  return(MinVal);
 800658e:	230e      	movs	r3, #14
 8006590:	18fb      	adds	r3, r7, r3
 8006592:	2200      	movs	r2, #0
 8006594:	5e9b      	ldrsh	r3, [r3, r2]
}
 8006596:	0018      	movs	r0, r3
 8006598:	46bd      	mov	sp, r7
 800659a:	b005      	add	sp, #20
 800659c:	bd90      	pop	{r4, r7, pc}
 800659e:	46c0      	nop			@ (mov r8, r8)
 80065a0:	00007fff 	.word	0x00007fff
 80065a4:	20001938 	.word	0x20001938

080065a8 <MaximalValue>:

int16_t MaximalValue(uint16_t length){
 80065a8:	b590      	push	{r4, r7, lr}
 80065aa:	b085      	sub	sp, #20
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	0002      	movs	r2, r0
 80065b0:	1dbb      	adds	r3, r7, #6
 80065b2:	801a      	strh	r2, [r3, #0]
  int16_t MaxVal = -32768;
 80065b4:	230e      	movs	r3, #14
 80065b6:	18fb      	adds	r3, r7, r3
 80065b8:	4a1a      	ldr	r2, [pc, #104]	@ (8006624 <MaximalValue+0x7c>)
 80065ba:	801a      	strh	r2, [r3, #0]
  int16_t i;
  for(i =0; i<length;i++){
 80065bc:	230c      	movs	r3, #12
 80065be:	18fb      	adds	r3, r7, r3
 80065c0:	2200      	movs	r2, #0
 80065c2:	801a      	strh	r2, [r3, #0]
 80065c4:	e01d      	b.n	8006602 <MaximalValue+0x5a>
    if(sample[i] > MaxVal){
 80065c6:	210c      	movs	r1, #12
 80065c8:	187b      	adds	r3, r7, r1
 80065ca:	2200      	movs	r2, #0
 80065cc:	5e9a      	ldrsh	r2, [r3, r2]
 80065ce:	4b16      	ldr	r3, [pc, #88]	@ (8006628 <MaximalValue+0x80>)
 80065d0:	0052      	lsls	r2, r2, #1
 80065d2:	5ed3      	ldrsh	r3, [r2, r3]
 80065d4:	200e      	movs	r0, #14
 80065d6:	183a      	adds	r2, r7, r0
 80065d8:	2400      	movs	r4, #0
 80065da:	5f12      	ldrsh	r2, [r2, r4]
 80065dc:	429a      	cmp	r2, r3
 80065de:	da07      	bge.n	80065f0 <MaximalValue+0x48>
      MaxVal = sample[i];
 80065e0:	187b      	adds	r3, r7, r1
 80065e2:	2100      	movs	r1, #0
 80065e4:	5e59      	ldrsh	r1, [r3, r1]
 80065e6:	183b      	adds	r3, r7, r0
 80065e8:	4a0f      	ldr	r2, [pc, #60]	@ (8006628 <MaximalValue+0x80>)
 80065ea:	0049      	lsls	r1, r1, #1
 80065ec:	5a8a      	ldrh	r2, [r1, r2]
 80065ee:	801a      	strh	r2, [r3, #0]
  for(i =0; i<length;i++){
 80065f0:	210c      	movs	r1, #12
 80065f2:	187b      	adds	r3, r7, r1
 80065f4:	2200      	movs	r2, #0
 80065f6:	5e9b      	ldrsh	r3, [r3, r2]
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	3301      	adds	r3, #1
 80065fc:	b29a      	uxth	r2, r3
 80065fe:	187b      	adds	r3, r7, r1
 8006600:	801a      	strh	r2, [r3, #0]
 8006602:	230c      	movs	r3, #12
 8006604:	18fb      	adds	r3, r7, r3
 8006606:	2200      	movs	r2, #0
 8006608:	5e9a      	ldrsh	r2, [r3, r2]
 800660a:	1dbb      	adds	r3, r7, #6
 800660c:	881b      	ldrh	r3, [r3, #0]
 800660e:	429a      	cmp	r2, r3
 8006610:	dbd9      	blt.n	80065c6 <MaximalValue+0x1e>
    }
  }
  return(MaxVal);
 8006612:	230e      	movs	r3, #14
 8006614:	18fb      	adds	r3, r7, r3
 8006616:	2200      	movs	r2, #0
 8006618:	5e9b      	ldrsh	r3, [r3, r2]
}
 800661a:	0018      	movs	r0, r3
 800661c:	46bd      	mov	sp, r7
 800661e:	b005      	add	sp, #20
 8006620:	bd90      	pop	{r4, r7, pc}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	ffff8000 	.word	0xffff8000
 8006628:	20001938 	.word	0x20001938

0800662c <MIC_Check>:
bool MIC_Check(void) {
 800662c:	b5b0      	push	{r4, r5, r7, lr}
 800662e:	b084      	sub	sp, #16
 8006630:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 8006632:	4a28      	ldr	r2, [pc, #160]	@ (80066d4 <MIC_Check+0xa8>)
 8006634:	4b28      	ldr	r3, [pc, #160]	@ (80066d8 <MIC_Check+0xac>)
 8006636:	0019      	movs	r1, r3
 8006638:	2002      	movs	r0, #2
 800663a:	f002 f91d 	bl	8008878 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800663e:	230e      	movs	r3, #14
 8006640:	18fb      	adds	r3, r7, r3
 8006642:	2200      	movs	r2, #0
 8006644:	801a      	strh	r2, [r3, #0]
 8006646:	e016      	b.n	8006676 <MIC_Check+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006648:	250e      	movs	r5, #14
 800664a:	197b      	adds	r3, r7, r5
 800664c:	881b      	ldrh	r3, [r3, #0]
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	3302      	adds	r3, #2
 8006652:	005a      	lsls	r2, r3, #1
 8006654:	4b21      	ldr	r3, [pc, #132]	@ (80066dc <MIC_Check+0xb0>)
 8006656:	18d2      	adds	r2, r2, r3
 8006658:	197b      	adds	r3, r7, r5
 800665a:	881c      	ldrh	r4, [r3, #0]
 800665c:	0010      	movs	r0, r2
 800665e:	f7ff fdd7 	bl	8006210 <ConvertAudio>
 8006662:	0003      	movs	r3, r0
 8006664:	0019      	movs	r1, r3
 8006666:	4b1e      	ldr	r3, [pc, #120]	@ (80066e0 <MIC_Check+0xb4>)
 8006668:	0062      	lsls	r2, r4, #1
 800666a:	52d1      	strh	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 800666c:	197b      	adds	r3, r7, r5
 800666e:	197a      	adds	r2, r7, r5
 8006670:	8812      	ldrh	r2, [r2, #0]
 8006672:	3201      	adds	r2, #1
 8006674:	801a      	strh	r2, [r3, #0]
 8006676:	230e      	movs	r3, #14
 8006678:	18fb      	adds	r3, r7, r3
 800667a:	881b      	ldrh	r3, [r3, #0]
 800667c:	2bff      	cmp	r3, #255	@ 0xff
 800667e:	d9e3      	bls.n	8006648 <MIC_Check+0x1c>
    //Info("0x%08x", sample);
  }
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006680:	2380      	movs	r3, #128	@ 0x80
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	0018      	movs	r0, r3
 8006686:	f7ff ff4d 	bl	8006524 <MinimalValue>
 800668a:	0003      	movs	r3, r0
 800668c:	0018      	movs	r0, r3
 800668e:	f7fa ff63 	bl	8001558 <__aeabi_i2f>
 8006692:	1c03      	adds	r3, r0, #0
 8006694:	60bb      	str	r3, [r7, #8]
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 8006696:	2380      	movs	r3, #128	@ 0x80
 8006698:	005b      	lsls	r3, r3, #1
 800669a:	0018      	movs	r0, r3
 800669c:	f7ff ff84 	bl	80065a8 <MaximalValue>
 80066a0:	0003      	movs	r3, r0
 80066a2:	0018      	movs	r0, r3
 80066a4:	f7fa ff58 	bl	8001558 <__aeabi_i2f>
 80066a8:	1c03      	adds	r3, r0, #0
 80066aa:	607b      	str	r3, [r7, #4]
  if(Max > 0 || Min < 0){
 80066ac:	2100      	movs	r1, #0
 80066ae:	6878      	ldr	r0, [r7, #4]
 80066b0:	f7f9 ff48 	bl	8000544 <__aeabi_fcmpgt>
 80066b4:	1e03      	subs	r3, r0, #0
 80066b6:	d105      	bne.n	80066c4 <MIC_Check+0x98>
 80066b8:	2100      	movs	r1, #0
 80066ba:	68b8      	ldr	r0, [r7, #8]
 80066bc:	f7f9 ff2e 	bl	800051c <__aeabi_fcmplt>
 80066c0:	1e03      	subs	r3, r0, #0
 80066c2:	d001      	beq.n	80066c8 <MIC_Check+0x9c>
    return(true);
 80066c4:	2301      	movs	r3, #1
 80066c6:	e000      	b.n	80066ca <MIC_Check+0x9e>
  }
  return(false);
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	0018      	movs	r0, r3
 80066cc:	46bd      	mov	sp, r7
 80066ce:	b004      	add	sp, #16
 80066d0:	bdb0      	pop	{r4, r5, r7, pc}
 80066d2:	46c0      	nop			@ (mov r8, r8)
 80066d4:	0801af20 	.word	0x0801af20
 80066d8:	0801af1c 	.word	0x0801af1c
 80066dc:	20000d04 	.word	0x20000d04
 80066e0:	20001938 	.word	0x20001938

080066e4 <MIC_Print>:
void MIC_Print(void) {
 80066e4:	b5b0      	push	{r4, r5, r7, lr}
 80066e6:	b084      	sub	sp, #16
 80066e8:	af00      	add	r7, sp, #0
  float Max;
  float Min;
  Info("New samples");
 80066ea:	4a21      	ldr	r2, [pc, #132]	@ (8006770 <MIC_Print+0x8c>)
 80066ec:	4b21      	ldr	r3, [pc, #132]	@ (8006774 <MIC_Print+0x90>)
 80066ee:	0019      	movs	r1, r3
 80066f0:	2002      	movs	r0, #2
 80066f2:	f002 f8c1 	bl	8008878 <CreateLine>
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 80066f6:	230e      	movs	r3, #14
 80066f8:	18fb      	adds	r3, r7, r3
 80066fa:	2200      	movs	r2, #0
 80066fc:	801a      	strh	r2, [r3, #0]
 80066fe:	e016      	b.n	800672e <MIC_Print+0x4a>
    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
 8006700:	250e      	movs	r5, #14
 8006702:	197b      	adds	r3, r7, r5
 8006704:	881b      	ldrh	r3, [r3, #0]
 8006706:	009b      	lsls	r3, r3, #2
 8006708:	3302      	adds	r3, #2
 800670a:	005a      	lsls	r2, r3, #1
 800670c:	4b1a      	ldr	r3, [pc, #104]	@ (8006778 <MIC_Print+0x94>)
 800670e:	18d2      	adds	r2, r2, r3
 8006710:	197b      	adds	r3, r7, r5
 8006712:	881c      	ldrh	r4, [r3, #0]
 8006714:	0010      	movs	r0, r2
 8006716:	f7ff fd7b 	bl	8006210 <ConvertAudio>
 800671a:	0003      	movs	r3, r0
 800671c:	0019      	movs	r1, r3
 800671e:	4b17      	ldr	r3, [pc, #92]	@ (800677c <MIC_Print+0x98>)
 8006720:	0062      	lsls	r2, r4, #1
 8006722:	52d1      	strh	r1, [r2, r3]
  for (uint16_t i = 0; i < NUMBER_OF_SAMPLES; i += 1) {
 8006724:	197b      	adds	r3, r7, r5
 8006726:	197a      	adds	r2, r7, r5
 8006728:	8812      	ldrh	r2, [r2, #0]
 800672a:	3201      	adds	r2, #1
 800672c:	801a      	strh	r2, [r3, #0]
 800672e:	230e      	movs	r3, #14
 8006730:	18fb      	adds	r3, r7, r3
 8006732:	881b      	ldrh	r3, [r3, #0]
 8006734:	2bff      	cmp	r3, #255	@ 0xff
 8006736:	d9e3      	bls.n	8006700 <MIC_Print+0x1c>
    //Info("0x%08x", sample);
  }
  //filter();
  Min = MinimalValue(NUMBER_OF_SAMPLES);
 8006738:	2380      	movs	r3, #128	@ 0x80
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	0018      	movs	r0, r3
 800673e:	f7ff fef1 	bl	8006524 <MinimalValue>
 8006742:	0003      	movs	r3, r0
 8006744:	0018      	movs	r0, r3
 8006746:	f7fa ff07 	bl	8001558 <__aeabi_i2f>
 800674a:	1c03      	adds	r3, r0, #0
 800674c:	60bb      	str	r3, [r7, #8]
  Max = MaximalValue(NUMBER_OF_SAMPLES);
 800674e:	2380      	movs	r3, #128	@ 0x80
 8006750:	005b      	lsls	r3, r3, #1
 8006752:	0018      	movs	r0, r3
 8006754:	f7ff ff28 	bl	80065a8 <MaximalValue>
 8006758:	0003      	movs	r3, r0
 800675a:	0018      	movs	r0, r3
 800675c:	f7fa fefc 	bl	8001558 <__aeabi_i2f>
 8006760:	1c03      	adds	r3, r0, #0
 8006762:	607b      	str	r3, [r7, #4]
//    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 0);
//    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 0);
//  }

  FFT();
 8006764:	f7ff fe56 	bl	8006414 <FFT>
}
 8006768:	46c0      	nop			@ (mov r8, r8)
 800676a:	46bd      	mov	sp, r7
 800676c:	b004      	add	sp, #16
 800676e:	bdb0      	pop	{r4, r5, r7, pc}
 8006770:	0801af20 	.word	0x0801af20
 8006774:	0801af1c 	.word	0x0801af1c
 8006778:	20000d04 	.word	0x20000d04
 800677c:	20001938 	.word	0x20001938

08006780 <MIC_MeasurementDone>:

bool MIC_MeasurementDone(void) {
 8006780:	b580      	push	{r7, lr}
 8006782:	af00      	add	r7, sp, #0
  if(DataReady) {
 8006784:	4b09      	ldr	r3, [pc, #36]	@ (80067ac <MIC_MeasurementDone+0x2c>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b2db      	uxtb	r3, r3
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <MIC_MeasurementDone+0x24>
    MIC_Print();
 800678e:	f7ff ffa9 	bl	80066e4 <MIC_Print>
    Debug("MIC measurement is done with %i samples.", Samples);
 8006792:	4b07      	ldr	r3, [pc, #28]	@ (80067b0 <MIC_MeasurementDone+0x30>)
 8006794:	881b      	ldrh	r3, [r3, #0]
 8006796:	4a07      	ldr	r2, [pc, #28]	@ (80067b4 <MIC_MeasurementDone+0x34>)
 8006798:	4907      	ldr	r1, [pc, #28]	@ (80067b8 <MIC_MeasurementDone+0x38>)
 800679a:	2003      	movs	r0, #3
 800679c:	f002 f86c 	bl	8008878 <CreateLine>
    return true;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e000      	b.n	80067a6 <MIC_MeasurementDone+0x26>
  }
  return false;
 80067a4:	2300      	movs	r3, #0
}
 80067a6:	0018      	movs	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	2000190d 	.word	0x2000190d
 80067b0:	20000114 	.word	0x20000114
 80067b4:	0801af2c 	.word	0x0801af2c
 80067b8:	0801af0c 	.word	0x0801af0c

080067bc <MIC_TestMeasurementDone>:
bool MIC_TestMeasurementDone(void) {
 80067bc:	b590      	push	{r4, r7, lr}
 80067be:	b083      	sub	sp, #12
 80067c0:	af00      	add	r7, sp, #0
  bool Check;
  if(DataReady) {
 80067c2:	4b09      	ldr	r3, [pc, #36]	@ (80067e8 <MIC_TestMeasurementDone+0x2c>)
 80067c4:	781b      	ldrb	r3, [r3, #0]
 80067c6:	b2db      	uxtb	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d007      	beq.n	80067dc <MIC_TestMeasurementDone+0x20>
    Check = MIC_Check();
 80067cc:	1dfc      	adds	r4, r7, #7
 80067ce:	f7ff ff2d 	bl	800662c <MIC_Check>
 80067d2:	0003      	movs	r3, r0
 80067d4:	7023      	strb	r3, [r4, #0]
    return Check;
 80067d6:	1dfb      	adds	r3, r7, #7
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	e000      	b.n	80067de <MIC_TestMeasurementDone+0x22>
  }
  return false;
 80067dc:	2300      	movs	r3, #0
}
 80067de:	0018      	movs	r0, r3
 80067e0:	46bd      	mov	sp, r7
 80067e2:	b003      	add	sp, #12
 80067e4:	bd90      	pop	{r4, r7, pc}
 80067e6:	46c0      	nop			@ (mov r8, r8)
 80067e8:	2000190d 	.word	0x2000190d

080067ec <HAL_I2S_RxCpltCallback>:


// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b082      	sub	sp, #8
 80067f0:	af00      	add	r7, sp, #0
 80067f2:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 80067f4:	4b10      	ldr	r3, [pc, #64]	@ (8006838 <HAL_I2S_RxCpltCallback+0x4c>)
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	687a      	ldr	r2, [r7, #4]
 80067fa:	429a      	cmp	r2, r3
 80067fc:	d118      	bne.n	8006830 <HAL_I2S_RxCpltCallback+0x44>
    return;

  if (StartUpDone) {
 80067fe:	4b0f      	ldr	r3, [pc, #60]	@ (800683c <HAL_I2S_RxCpltCallback+0x50>)
 8006800:	781b      	ldrb	r3, [r3, #0]
 8006802:	b2db      	uxtb	r3, r3
 8006804:	2b00      	cmp	r3, #0
 8006806:	d008      	beq.n	800681a <HAL_I2S_RxCpltCallback+0x2e>
    HAL_I2S_DMAStop(I2SHandle);
 8006808:	4b0b      	ldr	r3, [pc, #44]	@ (8006838 <HAL_I2S_RxCpltCallback+0x4c>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	0018      	movs	r0, r3
 800680e:	f005 ffcf 	bl	800c7b0 <HAL_I2S_DMAStop>
    DataReady = true;
 8006812:	4b0b      	ldr	r3, [pc, #44]	@ (8006840 <HAL_I2S_RxCpltCallback+0x54>)
 8006814:	2201      	movs	r2, #1
 8006816:	701a      	strb	r2, [r3, #0]
 8006818:	e00b      	b.n	8006832 <HAL_I2S_RxCpltCallback+0x46>
    // MIC trigger pin is used to debug when the measurement has started.
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
    // TODO: Use different pin for MIC_Trigger.
  } else if (TimestampIsReached(StartupDoneTime)) {
 800681a:	4b0a      	ldr	r3, [pc, #40]	@ (8006844 <HAL_I2S_RxCpltCallback+0x58>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	0018      	movs	r0, r3
 8006820:	f001 ffd4 	bl	80087cc <TimestampIsReached>
 8006824:	1e03      	subs	r3, r0, #0
 8006826:	d004      	beq.n	8006832 <HAL_I2S_RxCpltCallback+0x46>
    StartUpDone = true;
 8006828:	4b04      	ldr	r3, [pc, #16]	@ (800683c <HAL_I2S_RxCpltCallback+0x50>)
 800682a:	2201      	movs	r2, #1
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e000      	b.n	8006832 <HAL_I2S_RxCpltCallback+0x46>
    return;
 8006830:	46c0      	nop			@ (mov r8, r8)
//    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
  }
}
 8006832:	46bd      	mov	sp, r7
 8006834:	b002      	add	sp, #8
 8006836:	bd80      	pop	{r7, pc}
 8006838:	20000d00 	.word	0x20000d00
 800683c:	2000190c 	.word	0x2000190c
 8006840:	2000190d 	.word	0x2000190d
 8006844:	20001908 	.word	0x20001908

08006848 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b084      	sub	sp, #16
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	68ba      	ldr	r2, [r7, #8]
 8006858:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	687a      	ldr	r2, [r7, #4]
 800685e:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2b01      	cmp	r3, #1
 8006864:	d113      	bne.n	800688e <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	22fe      	movs	r2, #254	@ 0xfe
 800686a:	0592      	lsls	r2, r2, #22
 800686c:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	4a1a      	ldr	r2, [pc, #104]	@ (80068dc <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8006872:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	4a1a      	ldr	r2, [pc, #104]	@ (80068e0 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 8006878:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	4a19      	ldr	r2, [pc, #100]	@ (80068e4 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 800687e:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	4a19      	ldr	r2, [pc, #100]	@ (80068e8 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 8006884:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	4a18      	ldr	r2, [pc, #96]	@ (80068ec <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 800688a:	61da      	str	r2, [r3, #28]
 800688c:	e011      	b.n	80068b2 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	4a17      	ldr	r2, [pc, #92]	@ (80068f0 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 8006892:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	4a17      	ldr	r2, [pc, #92]	@ (80068f4 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 8006898:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	4a16      	ldr	r2, [pc, #88]	@ (80068f8 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 800689e:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	4a16      	ldr	r2, [pc, #88]	@ (80068fc <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80068a4:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	4a15      	ldr	r2, [pc, #84]	@ (8006900 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80068aa:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4a15      	ldr	r2, [pc, #84]	@ (8006904 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80068b0:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	4a14      	ldr	r2, [pc, #80]	@ (8006908 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80068b6:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	4a14      	ldr	r2, [pc, #80]	@ (800690c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80068bc:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	4a12      	ldr	r2, [pc, #72]	@ (800690c <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80068c2:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	4a12      	ldr	r2, [pc, #72]	@ (8006910 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80068c8:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	0018      	movs	r0, r3
 80068ce:	f000 f831 	bl	8006934 <GasIndexAlgorithm_reset>
}
 80068d2:	46c0      	nop			@ (mov r8, r8)
 80068d4:	46bd      	mov	sp, r7
 80068d6:	b004      	add	sp, #16
 80068d8:	bd80      	pop	{r7, pc}
 80068da:	46c0      	nop			@ (mov r8, r8)
 80068dc:	00002710 	.word	0x00002710
 80068e0:	44340000 	.word	0x44340000
 80068e4:	46859800 	.word	0x46859800
 80068e8:	46a05000 	.word	0x46a05000
 80068ec:	41f00000 	.word	0x41f00000
 80068f0:	42c80000 	.word	0x42c80000
 80068f4:	00004e20 	.word	0x00004e20
 80068f8:	43340000 	.word	0x43340000
 80068fc:	4528c000 	.word	0x4528c000
 8006900:	45a32000 	.word	0x45a32000
 8006904:	43aa0000 	.word	0x43aa0000
 8006908:	43660000 	.word	0x43660000
 800690c:	41400000 	.word	0x41400000
 8006910:	42480000 	.word	0x42480000

08006914 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8006914:	b580      	push	{r7, lr}
 8006916:	b082      	sub	sp, #8
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 800691e:	22fe      	movs	r2, #254	@ 0xfe
 8006920:	0592      	lsls	r2, r2, #22
 8006922:	6839      	ldr	r1, [r7, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	0018      	movs	r0, r3
 8006928:	f7ff ff8e 	bl	8006848 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 800692c:	46c0      	nop			@ (mov r8, r8)
 800692e:	46bd      	mov	sp, r7
 8006930:	b002      	add	sp, #8
 8006932:	bd80      	pop	{r7, pc}

08006934 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8006934:	b580      	push	{r7, lr}
 8006936:	b082      	sub	sp, #8
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2200      	movs	r2, #0
 8006940:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2200      	movs	r2, #0
 8006946:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2200      	movs	r2, #0
 800694c:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	0018      	movs	r0, r3
 8006952:	f000 f805 	bl	8006960 <GasIndexAlgorithm__init_instances>
}
 8006956:	46c0      	nop			@ (mov r8, r8)
 8006958:	46bd      	mov	sp, r7
 800695a:	b002      	add	sp, #8
 800695c:	bd80      	pop	{r7, pc}
	...

08006960 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8006960:	b590      	push	{r4, r7, lr}
 8006962:	b083      	sub	sp, #12
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	0018      	movs	r0, r3
 800696c:	f000 f8e8 	bl	8006b40 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	0018      	movs	r0, r3
 8006974:	f000 f9a6 	bl	8006cc4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006978:	1c04      	adds	r4, r0, #0
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	0018      	movs	r0, r3
 800697e:	f000 f9ab 	bl	8006cd8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006982:	1c02      	adds	r2, r0, #0
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	1c21      	adds	r1, r4, #0
 8006988:	0018      	movs	r0, r3
 800698a:	f000 fc3b 	bl	8007204 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	2b01      	cmp	r3, #1
 8006994:	d107      	bne.n	80069a6 <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 8006996:	23fe      	movs	r3, #254	@ 0xfe
 8006998:	059b      	lsls	r3, r3, #22
 800699a:	4a0a      	ldr	r2, [pc, #40]	@ (80069c4 <GasIndexAlgorithm__init_instances+0x64>)
 800699c:	490a      	ldr	r1, [pc, #40]	@ (80069c8 <GasIndexAlgorithm__init_instances+0x68>)
 800699e:	6878      	ldr	r0, [r7, #4]
 80069a0:	f000 fc86 	bl	80072b0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80069a4:	e005      	b.n	80069b2 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80069a6:	4b09      	ldr	r3, [pc, #36]	@ (80069cc <GasIndexAlgorithm__init_instances+0x6c>)
 80069a8:	4a09      	ldr	r2, [pc, #36]	@ (80069d0 <GasIndexAlgorithm__init_instances+0x70>)
 80069aa:	490a      	ldr	r1, [pc, #40]	@ (80069d4 <GasIndexAlgorithm__init_instances+0x74>)
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f000 fc7f 	bl	80072b0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f000 fd35 	bl	8007424 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80069ba:	46c0      	nop			@ (mov r8, r8)
 80069bc:	46bd      	mov	sp, r7
 80069be:	b003      	add	sp, #12
 80069c0:	bd90      	pop	{r4, r7, pc}
 80069c2:	46c0      	nop			@ (mov r8, r8)
 80069c4:	bc257a78 	.word	0xbc257a78
 80069c8:	44198000 	.word	0x44198000
 80069cc:	42c80000 	.word	0x42c80000
 80069d0:	bbd4fdf4 	.word	0xbbd4fdf4
 80069d4:	43550000 	.word	0x43550000

080069d8 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80069d8:	b590      	push	{r4, r7, lr}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
 80069de:	60f8      	str	r0, [r7, #12]
 80069e0:	60b9      	str	r1, [r7, #8]
 80069e2:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069e8:	4952      	ldr	r1, [pc, #328]	@ (8006b34 <GasIndexAlgorithm_process+0x15c>)
 80069ea:	1c18      	adds	r0, r3, #0
 80069ec:	f7f9 fda0 	bl	8000530 <__aeabi_fcmple>
 80069f0:	1e03      	subs	r3, r0, #0
 80069f2:	d00c      	beq.n	8006a0e <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	685b      	ldr	r3, [r3, #4]
 80069fc:	1c19      	adds	r1, r3, #0
 80069fe:	1c10      	adds	r0, r2, #0
 8006a00:	f7f9 ff22 	bl	8000848 <__aeabi_fadd>
 8006a04:	1c03      	adds	r3, r0, #0
 8006a06:	1c1a      	adds	r2, r3, #0
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a0c:	e080      	b.n	8006b10 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	dd25      	ble.n	8006a60 <GasIndexAlgorithm_process+0x88>
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	4a48      	ldr	r2, [pc, #288]	@ (8006b38 <GasIndexAlgorithm_process+0x160>)
 8006a18:	4293      	cmp	r3, r2
 8006a1a:	dc21      	bgt.n	8006a60 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	68ba      	ldr	r2, [r7, #8]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	dc04      	bgt.n	8006a30 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 8006a26:	68fb      	ldr	r3, [r7, #12]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	3301      	adds	r3, #1
 8006a2c:	60bb      	str	r3, [r7, #8]
 8006a2e:	e00d      	b.n	8006a4c <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68db      	ldr	r3, [r3, #12]
 8006a34:	4a41      	ldr	r2, [pc, #260]	@ (8006b3c <GasIndexAlgorithm_process+0x164>)
 8006a36:	4694      	mov	ip, r2
 8006a38:	4463      	add	r3, ip
 8006a3a:	68ba      	ldr	r2, [r7, #8]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	dd05      	ble.n	8006a4c <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	68db      	ldr	r3, [r3, #12]
 8006a44:	4a3d      	ldr	r2, [pc, #244]	@ (8006b3c <GasIndexAlgorithm_process+0x164>)
 8006a46:	4694      	mov	ip, r2
 8006a48:	4463      	add	r3, ip
 8006a4a:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	68ba      	ldr	r2, [r7, #8]
 8006a52:	1ad3      	subs	r3, r2, r3
 8006a54:	0018      	movs	r0, r3
 8006a56:	f7fa fd7f 	bl	8001558 <__aeabi_i2f>
 8006a5a:	1c02      	adds	r2, r0, #0
 8006a5c:	68fb      	ldr	r3, [r7, #12]
 8006a5e:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d005      	beq.n	8006a74 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	0018      	movs	r0, r3
 8006a6c:	f000 f945 	bl	8006cfa <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8006a70:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8006a72:	d014      	beq.n	8006a9e <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	1c11      	adds	r1, r2, #0
 8006a7c:	0018      	movs	r0, r3
 8006a7e:	f000 fbd1 	bl	8007224 <GasIndexAlgorithm__mox_model__process>
 8006a82:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	1c11      	adds	r1, r2, #0
 8006a90:	0018      	movs	r0, r3
 8006a92:	f000 fc25 	bl	80072e0 <GasIndexAlgorithm__sigmoid_scaled__process>
 8006a96:	1c02      	adds	r2, r0, #0
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006a9c:	e003      	b.n	8006aa6 <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	1c11      	adds	r1, r2, #0
 8006aae:	0018      	movs	r0, r3
 8006ab0:	f000 fcec 	bl	800748c <GasIndexAlgorithm__adaptive_lowpass__process>
 8006ab4:	1c02      	adds	r2, r0, #0
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006abe:	21fc      	movs	r1, #252	@ 0xfc
 8006ac0:	0589      	lsls	r1, r1, #22
 8006ac2:	1c18      	adds	r0, r3, #0
 8006ac4:	f7f9 fd2a 	bl	800051c <__aeabi_fcmplt>
 8006ac8:	1e03      	subs	r3, r0, #0
 8006aca:	d003      	beq.n	8006ad4 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	22fc      	movs	r2, #252	@ 0xfc
 8006ad0:	0592      	lsls	r2, r2, #22
 8006ad2:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ad8:	2100      	movs	r1, #0
 8006ada:	1c18      	adds	r0, r3, #0
 8006adc:	f7f9 fd32 	bl	8000544 <__aeabi_fcmpgt>
 8006ae0:	1e03      	subs	r3, r0, #0
 8006ae2:	d015      	beq.n	8006b10 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	1c11      	adds	r1, r2, #0
 8006aec:	0018      	movs	r0, r3
 8006aee:	f000 fa4f 	bl	8006f90 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	0018      	movs	r0, r3
 8006af6:	f000 f8e5 	bl	8006cc4 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8006afa:	1c04      	adds	r4, r0, #0
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	0018      	movs	r0, r3
 8006b00:	f000 f8ea 	bl	8006cd8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8006b04:	1c02      	adds	r2, r0, #0
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	1c21      	adds	r1, r4, #0
 8006b0a:	0018      	movs	r0, r3
 8006b0c:	f000 fb7a 	bl	8007204 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b14:	21fc      	movs	r1, #252	@ 0xfc
 8006b16:	0589      	lsls	r1, r1, #22
 8006b18:	1c18      	adds	r0, r3, #0
 8006b1a:	f7f9 fe95 	bl	8000848 <__aeabi_fadd>
 8006b1e:	1c03      	adds	r3, r0, #0
 8006b20:	1c18      	adds	r0, r3, #0
 8006b22:	f7fa fcf9 	bl	8001518 <__aeabi_f2iz>
 8006b26:	0002      	movs	r2, r0
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	601a      	str	r2, [r3, #0]
    return;
 8006b2c:	46c0      	nop			@ (mov r8, r8)
}
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b005      	add	sp, #20
 8006b32:	bd90      	pop	{r4, r7, pc}
 8006b34:	42340000 	.word	0x42340000
 8006b38:	0000fde7 	.word	0x0000fde7
 8006b3c:	00007fff 	.word	0x00007fff

08006b40 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8006b40:	b5b0      	push	{r4, r5, r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	223c      	movs	r2, #60	@ 0x3c
 8006b4c:	2100      	movs	r1, #0
 8006b4e:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2200      	movs	r2, #0
 8006b54:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	4952      	ldr	r1, [pc, #328]	@ (8006cb4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006b6a:	1c18      	adds	r0, r3, #0
 8006b6c:	f7f9 fff6 	bl	8000b5c <__aeabi_fdiv>
 8006b70:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006b72:	2188      	movs	r1, #136	@ 0x88
 8006b74:	05c9      	lsls	r1, r1, #23
 8006b76:	1c18      	adds	r0, r3, #0
 8006b78:	f7fa f9d6 	bl	8000f28 <__aeabi_fmul>
 8006b7c:	1c03      	adds	r3, r0, #0
 8006b7e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	494a      	ldr	r1, [pc, #296]	@ (8006cb4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006b8a:	1c18      	adds	r0, r3, #0
 8006b8c:	f7f9 ffe6 	bl	8000b5c <__aeabi_fdiv>
 8006b90:	1c03      	adds	r3, r0, #0
 8006b92:	1c19      	adds	r1, r3, #0
 8006b94:	1c20      	adds	r0, r4, #0
 8006b96:	f7f9 fe57 	bl	8000848 <__aeabi_fadd>
 8006b9a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006b9c:	1c19      	adds	r1, r3, #0
 8006b9e:	1c28      	adds	r0, r5, #0
 8006ba0:	f7f9 ffdc 	bl	8000b5c <__aeabi_fdiv>
 8006ba4:	1c03      	adds	r3, r0, #0
 8006ba6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	685b      	ldr	r3, [r3, #4]
 8006bb0:	4940      	ldr	r1, [pc, #256]	@ (8006cb4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006bb2:	1c18      	adds	r0, r3, #0
 8006bb4:	f7f9 ffd2 	bl	8000b5c <__aeabi_fdiv>
 8006bb8:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006bba:	2185      	movs	r1, #133	@ 0x85
 8006bbc:	05c9      	lsls	r1, r1, #23
 8006bbe:	1c18      	adds	r0, r3, #0
 8006bc0:	f7fa f9b2 	bl	8000f28 <__aeabi_fmul>
 8006bc4:	1c03      	adds	r3, r0, #0
 8006bc6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	4938      	ldr	r1, [pc, #224]	@ (8006cb4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 8006bd2:	1c18      	adds	r0, r3, #0
 8006bd4:	f7f9 ffc2 	bl	8000b5c <__aeabi_fdiv>
 8006bd8:	1c03      	adds	r3, r0, #0
 8006bda:	1c19      	adds	r1, r3, #0
 8006bdc:	1c20      	adds	r0, r4, #0
 8006bde:	f7f9 fe33 	bl	8000848 <__aeabi_fadd>
 8006be2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8006be4:	1c19      	adds	r1, r3, #0
 8006be6:	1c28      	adds	r0, r5, #0
 8006be8:	f7f9 ffb8 	bl	8000b5c <__aeabi_fdiv>
 8006bec:	1c03      	adds	r3, r0, #0
 8006bee:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2b01      	cmp	r3, #1
 8006bfa:	d118      	bne.n	8006c2e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006c00:	2188      	movs	r1, #136	@ 0x88
 8006c02:	05c9      	lsls	r1, r1, #23
 8006c04:	1c18      	adds	r0, r3, #0
 8006c06:	f7fa f98f 	bl	8000f28 <__aeabi_fmul>
 8006c0a:	1c03      	adds	r3, r0, #0
 8006c0c:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8006c12:	4929      	ldr	r1, [pc, #164]	@ (8006cb8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8006c14:	1c18      	adds	r0, r3, #0
 8006c16:	f7f9 fe17 	bl	8000848 <__aeabi_fadd>
 8006c1a:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006c1c:	1c19      	adds	r1, r3, #0
 8006c1e:	1c20      	adds	r0, r4, #0
 8006c20:	f7f9 ff9c 	bl	8000b5c <__aeabi_fdiv>
 8006c24:	1c03      	adds	r3, r0, #0
 8006c26:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006c2c:	e017      	b.n	8006c5e <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8006c32:	2188      	movs	r1, #136	@ 0x88
 8006c34:	05c9      	lsls	r1, r1, #23
 8006c36:	1c18      	adds	r0, r3, #0
 8006c38:	f7fa f976 	bl	8000f28 <__aeabi_fmul>
 8006c3c:	1c03      	adds	r3, r0, #0
 8006c3e:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8006c44:	491d      	ldr	r1, [pc, #116]	@ (8006cbc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 8006c46:	1c18      	adds	r0, r3, #0
 8006c48:	f7f9 fdfe 	bl	8000848 <__aeabi_fadd>
 8006c4c:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8006c4e:	1c19      	adds	r1, r3, #0
 8006c50:	1c20      	adds	r0, r4, #0
 8006c52:	f7f9 ff83 	bl	8000b5c <__aeabi_fdiv>
 8006c56:	1c03      	adds	r3, r0, #0
 8006c58:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8006c62:	2185      	movs	r1, #133	@ 0x85
 8006c64:	05c9      	lsls	r1, r1, #23
 8006c66:	1c18      	adds	r0, r3, #0
 8006c68:	f7fa f95e 	bl	8000f28 <__aeabi_fmul>
 8006c6c:	1c03      	adds	r3, r0, #0
 8006c6e:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	685b      	ldr	r3, [r3, #4]
 8006c74:	4912      	ldr	r1, [pc, #72]	@ (8006cc0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 8006c76:	1c18      	adds	r0, r3, #0
 8006c78:	f7f9 fde6 	bl	8000848 <__aeabi_fadd>
 8006c7c:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 8006c7e:	1c19      	adds	r1, r3, #0
 8006c80:	1c20      	adds	r0, r4, #0
 8006c82:	f7f9 ff6b 	bl	8000b5c <__aeabi_fdiv>
 8006c86:	1c03      	adds	r3, r0, #0
 8006c88:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2200      	movs	r2, #0
 8006c92:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	2200      	movs	r2, #0
 8006c98:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8006cac:	46c0      	nop			@ (mov r8, r8)
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	b002      	add	sp, #8
 8006cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8006cb4:	45610000 	.word	0x45610000
 8006cb8:	44960000 	.word	0x44960000
 8006cbc:	41a00000 	.word	0x41a00000
 8006cc0:	451c4000 	.word	0x451c4000

08006cc4 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8006cd0:	1c18      	adds	r0, r3, #0
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	b002      	add	sp, #8
 8006cd6:	bd80      	pop	{r7, pc}

08006cd8 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8006cd8:	b580      	push	{r7, lr}
 8006cda:	b082      	sub	sp, #8
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8006ce8:	1c19      	adds	r1, r3, #0
 8006cea:	1c10      	adds	r0, r2, #0
 8006cec:	f7f9 fdac 	bl	8000848 <__aeabi_fadd>
 8006cf0:	1c03      	adds	r3, r0, #0
}
 8006cf2:	1c18      	adds	r0, r3, #0
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	b002      	add	sp, #8
 8006cf8:	bd80      	pop	{r7, pc}

08006cfa <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	223c      	movs	r2, #60	@ 0x3c
 8006d06:	5c9b      	ldrb	r3, [r3, r2]
}
 8006d08:	0018      	movs	r0, r3
 8006d0a:	46bd      	mov	sp, r7
 8006d0c:	b002      	add	sp, #8
 8006d0e:	bd80      	pop	{r7, pc}

08006d10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8006d10:	b5b0      	push	{r4, r5, r7, lr}
 8006d12:	b08c      	sub	sp, #48	@ 0x30
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8006d1c:	1c19      	adds	r1, r3, #0
 8006d1e:	4895      	ldr	r0, [pc, #596]	@ (8006f74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8006d20:	f7fa fa40 	bl	80011a4 <__aeabi_fsub>
 8006d24:	1c03      	adds	r3, r0, #0
 8006d26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006d2c:	1c19      	adds	r1, r3, #0
 8006d2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d30:	f7f9 fc08 	bl	8000544 <__aeabi_fcmpgt>
 8006d34:	1e03      	subs	r3, r0, #0
 8006d36:	d00b      	beq.n	8006d50 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8006d40:	1c19      	adds	r1, r3, #0
 8006d42:	1c10      	adds	r0, r2, #0
 8006d44:	f7f9 fd80 	bl	8000848 <__aeabi_fadd>
 8006d48:	1c03      	adds	r3, r0, #0
 8006d4a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006d54:	1c19      	adds	r1, r3, #0
 8006d56:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8006d58:	f7f9 fbf4 	bl	8000544 <__aeabi_fcmpgt>
 8006d5c:	1e03      	subs	r3, r0, #0
 8006d5e:	d00b      	beq.n	8006d78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8006d68:	1c19      	adds	r1, r3, #0
 8006d6a:	1c10      	adds	r0, r2, #0
 8006d6c:	f7f9 fd6c 	bl	8000848 <__aeabi_fadd>
 8006d70:	1c03      	adds	r3, r0, #0
 8006d72:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6959      	ldr	r1, [r3, #20]
 8006d7c:	4a7e      	ldr	r2, [pc, #504]	@ (8006f78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	0018      	movs	r0, r3
 8006d82:	f000 f9f1 	bl	8007168 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	1c11      	adds	r1, r2, #0
 8006d8e:	0018      	movs	r0, r3
 8006d90:	f000 f9fa 	bl	8007188 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006d94:	1c03      	adds	r3, r0, #0
 8006d96:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 8006da4:	1c19      	adds	r1, r3, #0
 8006da6:	1c10      	adds	r0, r2, #0
 8006da8:	f7fa f9fc 	bl	80011a4 <__aeabi_fsub>
 8006dac:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8006dae:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006db0:	1c18      	adds	r0, r3, #0
 8006db2:	f7fa f8b9 	bl	8000f28 <__aeabi_fmul>
 8006db6:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8006db8:	1c19      	adds	r1, r3, #0
 8006dba:	1c20      	adds	r0, r4, #0
 8006dbc:	f7f9 fd44 	bl	8000848 <__aeabi_fadd>
 8006dc0:	1c03      	adds	r3, r0, #0
 8006dc2:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006dcc:	1c19      	adds	r1, r3, #0
 8006dce:	486b      	ldr	r0, [pc, #428]	@ (8006f7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006dd0:	f7fa f9e8 	bl	80011a4 <__aeabi_fsub>
 8006dd4:	1c03      	adds	r3, r0, #0
 8006dd6:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	1c11      	adds	r1, r2, #0
 8006de0:	0018      	movs	r0, r3
 8006de2:	f000 f9d1 	bl	8007188 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006de6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006de8:	1c19      	adds	r1, r3, #0
 8006dea:	1c28      	adds	r0, r5, #0
 8006dec:	f7fa f89c 	bl	8000f28 <__aeabi_fmul>
 8006df0:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8006df2:	1c19      	adds	r1, r3, #0
 8006df4:	1c20      	adds	r0, r4, #0
 8006df6:	f7f9 fd27 	bl	8000848 <__aeabi_fadd>
 8006dfa:	1c03      	adds	r3, r0, #0
 8006dfc:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006dfe:	4a60      	ldr	r2, [pc, #384]	@ (8006f80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006e00:	6a39      	ldr	r1, [r7, #32]
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	0018      	movs	r0, r3
 8006e06:	f000 f9af 	bl	8007168 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	1c11      	adds	r1, r2, #0
 8006e12:	0018      	movs	r0, r3
 8006e14:	f000 f9b8 	bl	8007188 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006e18:	1c03      	adds	r3, r0, #0
 8006e1a:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8006e1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8006e1e:	69f8      	ldr	r0, [r7, #28]
 8006e20:	f7fa f882 	bl	8000f28 <__aeabi_fmul>
 8006e24:	1c03      	adds	r3, r0, #0
 8006e26:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	6999      	ldr	r1, [r3, #24]
 8006e30:	4a51      	ldr	r2, [pc, #324]	@ (8006f78 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	0018      	movs	r0, r3
 8006e36:	f000 f997 	bl	8007168 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	1c11      	adds	r1, r2, #0
 8006e42:	0018      	movs	r0, r3
 8006e44:	f000 f9a0 	bl	8007188 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006e48:	1c03      	adds	r3, r0, #0
 8006e4a:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8006e58:	1c19      	adds	r1, r3, #0
 8006e5a:	1c10      	adds	r0, r2, #0
 8006e5c:	f7fa f9a2 	bl	80011a4 <__aeabi_fsub>
 8006e60:	1c03      	adds	r3, r0, #0
 8006e62:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8006e64:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006e66:	69b8      	ldr	r0, [r7, #24]
 8006e68:	f7fa f99c 	bl	80011a4 <__aeabi_fsub>
 8006e6c:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8006e6e:	1c19      	adds	r1, r3, #0
 8006e70:	1c28      	adds	r0, r5, #0
 8006e72:	f7fa f859 	bl	8000f28 <__aeabi_fmul>
 8006e76:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8006e78:	1c19      	adds	r1, r3, #0
 8006e7a:	1c20      	adds	r0, r4, #0
 8006e7c:	f7f9 fce4 	bl	8000848 <__aeabi_fadd>
 8006e80:	1c03      	adds	r3, r0, #0
 8006e82:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8006e8c:	1c19      	adds	r1, r3, #0
 8006e8e:	483b      	ldr	r0, [pc, #236]	@ (8006f7c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8006e90:	f7fa f988 	bl	80011a4 <__aeabi_fsub>
 8006e94:	1c03      	adds	r3, r0, #0
 8006e96:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	1c11      	adds	r1, r2, #0
 8006ea0:	0018      	movs	r0, r3
 8006ea2:	f000 f971 	bl	8007188 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006ea6:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8006ea8:	1c19      	adds	r1, r3, #0
 8006eaa:	1c28      	adds	r0, r5, #0
 8006eac:	f7fa f83c 	bl	8000f28 <__aeabi_fmul>
 8006eb0:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8006eb2:	1c19      	adds	r1, r3, #0
 8006eb4:	1c20      	adds	r0, r4, #0
 8006eb6:	f7f9 fcc7 	bl	8000848 <__aeabi_fadd>
 8006eba:	1c03      	adds	r3, r0, #0
 8006ebc:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8006ebe:	4a30      	ldr	r2, [pc, #192]	@ (8006f80 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8006ec0:	6939      	ldr	r1, [r7, #16]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	0018      	movs	r0, r3
 8006ec6:	f000 f94f 	bl	8007168 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	1c11      	adds	r1, r2, #0
 8006ed2:	0018      	movs	r0, r3
 8006ed4:	f000 f958 	bl	8007188 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8006ed8:	1c03      	adds	r3, r0, #0
 8006eda:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8006edc:	6979      	ldr	r1, [r7, #20]
 8006ede:	68f8      	ldr	r0, [r7, #12]
 8006ee0:	f7fa f822 	bl	8000f28 <__aeabi_fmul>
 8006ee4:	1c03      	adds	r3, r0, #0
 8006ee6:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	685b      	ldr	r3, [r3, #4]
 8006ef4:	4923      	ldr	r1, [pc, #140]	@ (8006f84 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8006ef6:	1c18      	adds	r0, r3, #0
 8006ef8:	f7f9 fe30 	bl	8000b5c <__aeabi_fdiv>
 8006efc:	1c03      	adds	r3, r0, #0
 8006efe:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8006f00:	69f9      	ldr	r1, [r7, #28]
 8006f02:	20fe      	movs	r0, #254	@ 0xfe
 8006f04:	0580      	lsls	r0, r0, #22
 8006f06:	f7fa f94d 	bl	80011a4 <__aeabi_fsub>
 8006f0a:	1c03      	adds	r3, r0, #0
 8006f0c:	491e      	ldr	r1, [pc, #120]	@ (8006f88 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8006f0e:	1c18      	adds	r0, r3, #0
 8006f10:	f7fa f80a 	bl	8000f28 <__aeabi_fmul>
 8006f14:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8006f16:	491d      	ldr	r1, [pc, #116]	@ (8006f8c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8006f18:	1c18      	adds	r0, r3, #0
 8006f1a:	f7fa f943 	bl	80011a4 <__aeabi_fsub>
 8006f1e:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8006f20:	1c19      	adds	r1, r3, #0
 8006f22:	1c28      	adds	r0, r5, #0
 8006f24:	f7fa f800 	bl	8000f28 <__aeabi_fmul>
 8006f28:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8006f2a:	1c19      	adds	r1, r3, #0
 8006f2c:	1c20      	adds	r0, r4, #0
 8006f2e:	f7f9 fc8b 	bl	8000848 <__aeabi_fadd>
 8006f32:	1c03      	adds	r3, r0, #0
 8006f34:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006f3e:	2100      	movs	r1, #0
 8006f40:	1c18      	adds	r0, r3, #0
 8006f42:	f7f9 faeb 	bl	800051c <__aeabi_fcmplt>
 8006f46:	1e03      	subs	r3, r0, #0
 8006f48:	d002      	beq.n	8006f50 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8006f58:	1c19      	adds	r1, r3, #0
 8006f5a:	1c10      	adds	r0, r2, #0
 8006f5c:	f7f9 faf2 	bl	8000544 <__aeabi_fcmpgt>
 8006f60:	1e03      	subs	r3, r0, #0
 8006f62:	d100      	bne.n	8006f66 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8006f64:	e002      	b.n	8006f6c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2200      	movs	r2, #0
 8006f6a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f6c:	46c0      	nop			@ (mov r8, r8)
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	b00c      	add	sp, #48	@ 0x30
 8006f72:	bdb0      	pop	{r4, r5, r7, pc}
 8006f74:	46fffe00 	.word	0x46fffe00
 8006f78:	3c23d70a 	.word	0x3c23d70a
 8006f7c:	43ff0000 	.word	0x43ff0000
 8006f80:	3db851ec 	.word	0x3db851ec
 8006f84:	42700000 	.word	0x42700000
 8006f88:	3fa66666 	.word	0x3fa66666
 8006f8c:	3e99999a 	.word	0x3e99999a

08006f90 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8006f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006f92:	b087      	sub	sp, #28
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	223c      	movs	r2, #60	@ 0x3c
 8006f9e:	5c9b      	ldrb	r3, [r3, r2]
 8006fa0:	2201      	movs	r2, #1
 8006fa2:	4053      	eors	r3, r2
 8006fa4:	b2db      	uxtb	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d00a      	beq.n	8006fc0 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	223c      	movs	r2, #60	@ 0x3c
 8006fae:	2101      	movs	r1, #1
 8006fb0:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8006fbe:	e0c8      	b.n	8007152 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006fc4:	4965      	ldr	r1, [pc, #404]	@ (800715c <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8006fc6:	1c18      	adds	r0, r3, #0
 8006fc8:	f7f9 fac6 	bl	8000558 <__aeabi_fcmpge>
 8006fcc:	1e03      	subs	r3, r0, #0
 8006fce:	d107      	bne.n	8006fe0 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8006fd4:	4962      	ldr	r1, [pc, #392]	@ (8007160 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8006fd6:	1c18      	adds	r0, r3, #0
 8006fd8:	f7f9 faaa 	bl	8000530 <__aeabi_fcmple>
 8006fdc:	1e03      	subs	r3, r0, #0
 8006fde:	d00e      	beq.n	8006ffe <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8006fe8:	1c19      	adds	r1, r3, #0
 8006fea:	1c10      	adds	r0, r2, #0
 8006fec:	f7f9 fc2c 	bl	8000848 <__aeabi_fadd>
 8006ff0:	1c03      	adds	r3, r0, #0
 8006ff2:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007002:	1c19      	adds	r1, r3, #0
 8007004:	6838      	ldr	r0, [r7, #0]
 8007006:	f7fa f8cd 	bl	80011a4 <__aeabi_fsub>
 800700a:	1c03      	adds	r3, r0, #0
 800700c:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	0018      	movs	r0, r3
 8007012:	f7ff fe7d 	bl	8006d10 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800701a:	1c19      	adds	r1, r3, #0
 800701c:	6838      	ldr	r0, [r7, #0]
 800701e:	f7fa f8c1 	bl	80011a4 <__aeabi_fsub>
 8007022:	1c03      	adds	r3, r0, #0
 8007024:	2185      	movs	r1, #133	@ 0x85
 8007026:	05c9      	lsls	r1, r1, #23
 8007028:	1c18      	adds	r0, r3, #0
 800702a:	f7f9 fd97 	bl	8000b5c <__aeabi_fdiv>
 800702e:	1c03      	adds	r3, r0, #0
 8007030:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8007032:	2100      	movs	r1, #0
 8007034:	68f8      	ldr	r0, [r7, #12]
 8007036:	f7f9 fa71 	bl	800051c <__aeabi_fcmplt>
 800703a:	1e03      	subs	r3, r0, #0
 800703c:	d008      	beq.n	8007050 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007042:	68f9      	ldr	r1, [r7, #12]
 8007044:	1c18      	adds	r0, r3, #0
 8007046:	f7fa f8ad 	bl	80011a4 <__aeabi_fsub>
 800704a:	1c03      	adds	r3, r0, #0
 800704c:	617b      	str	r3, [r7, #20]
 800704e:	e007      	b.n	8007060 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007054:	1c19      	adds	r1, r3, #0
 8007056:	68f8      	ldr	r0, [r7, #12]
 8007058:	f7f9 fbf6 	bl	8000848 <__aeabi_fadd>
 800705c:	1c03      	adds	r3, r0, #0
 800705e:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8007060:	23fe      	movs	r3, #254	@ 0xfe
 8007062:	059b      	lsls	r3, r3, #22
 8007064:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8007066:	493f      	ldr	r1, [pc, #252]	@ (8007164 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007068:	6978      	ldr	r0, [r7, #20]
 800706a:	f7f9 fa6b 	bl	8000544 <__aeabi_fcmpgt>
 800706e:	1e03      	subs	r3, r0, #0
 8007070:	d010      	beq.n	8007094 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8007072:	493c      	ldr	r1, [pc, #240]	@ (8007164 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007074:	6978      	ldr	r0, [r7, #20]
 8007076:	f7f9 fd71 	bl	8000b5c <__aeabi_fdiv>
 800707a:	1c03      	adds	r3, r0, #0
 800707c:	1c1c      	adds	r4, r3, #0
 800707e:	4939      	ldr	r1, [pc, #228]	@ (8007164 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8007080:	6978      	ldr	r0, [r7, #20]
 8007082:	f7f9 fd6b 	bl	8000b5c <__aeabi_fdiv>
 8007086:	1c03      	adds	r3, r0, #0
 8007088:	1c19      	adds	r1, r3, #0
 800708a:	1c20      	adds	r0, r4, #0
 800708c:	f7f9 ff4c 	bl	8000f28 <__aeabi_fmul>
 8007090:	1c03      	adds	r3, r0, #0
 8007092:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8007098:	1c19      	adds	r1, r3, #0
 800709a:	2085      	movs	r0, #133	@ 0x85
 800709c:	05c0      	lsls	r0, r0, #23
 800709e:	f7fa f881 	bl	80011a4 <__aeabi_fsub>
 80070a2:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 80070a4:	6939      	ldr	r1, [r7, #16]
 80070a6:	1c18      	adds	r0, r3, #0
 80070a8:	f7f9 ff3e 	bl	8000f28 <__aeabi_fmul>
 80070ac:	1c03      	adds	r3, r0, #0
 80070ae:	1c18      	adds	r0, r3, #0
 80070b0:	f013 f860 	bl	801a174 <sqrtf>
 80070b4:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80070be:	2185      	movs	r1, #133	@ 0x85
 80070c0:	05c9      	lsls	r1, r1, #23
 80070c2:	6938      	ldr	r0, [r7, #16]
 80070c4:	f7f9 ff30 	bl	8000f28 <__aeabi_fmul>
 80070c8:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 80070ca:	1c19      	adds	r1, r3, #0
 80070cc:	1c28      	adds	r0, r5, #0
 80070ce:	f7f9 fd45 	bl	8000b5c <__aeabi_fdiv>
 80070d2:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 80070d4:	1c19      	adds	r1, r3, #0
 80070d6:	1c20      	adds	r0, r4, #0
 80070d8:	f7f9 ff26 	bl	8000f28 <__aeabi_fmul>
 80070dc:	1c03      	adds	r3, r0, #0
 80070de:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070e4:	68f9      	ldr	r1, [r7, #12]
 80070e6:	1c18      	adds	r0, r3, #0
 80070e8:	f7f9 ff1e 	bl	8000f28 <__aeabi_fmul>
 80070ec:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 80070ee:	6939      	ldr	r1, [r7, #16]
 80070f0:	1c18      	adds	r0, r3, #0
 80070f2:	f7f9 fd33 	bl	8000b5c <__aeabi_fdiv>
 80070f6:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 80070f8:	68f9      	ldr	r1, [r7, #12]
 80070fa:	1c18      	adds	r0, r3, #0
 80070fc:	f7f9 ff14 	bl	8000f28 <__aeabi_fmul>
 8007100:	1c03      	adds	r3, r0, #0
             sqrtf(
 8007102:	1c19      	adds	r1, r3, #0
 8007104:	1c20      	adds	r0, r4, #0
 8007106:	f7f9 fb9f 	bl	8000848 <__aeabi_fadd>
 800710a:	1c03      	adds	r3, r0, #0
 800710c:	1c18      	adds	r0, r3, #0
 800710e:	f013 f831 	bl	801a174 <sqrtf>
 8007112:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8007114:	1c19      	adds	r1, r3, #0
 8007116:	1c30      	adds	r0, r6, #0
 8007118:	f7f9 ff06 	bl	8000f28 <__aeabi_fmul>
 800711c:	1c03      	adds	r3, r0, #0
 800711e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800712c:	68f9      	ldr	r1, [r7, #12]
 800712e:	1c18      	adds	r0, r3, #0
 8007130:	f7f9 fefa 	bl	8000f28 <__aeabi_fmul>
 8007134:	1c03      	adds	r3, r0, #0
 8007136:	2182      	movs	r1, #130	@ 0x82
 8007138:	05c9      	lsls	r1, r1, #23
 800713a:	1c18      	adds	r0, r3, #0
 800713c:	f7f9 fd0e 	bl	8000b5c <__aeabi_fdiv>
 8007140:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8007142:	1c19      	adds	r1, r3, #0
 8007144:	1c20      	adds	r0, r4, #0
 8007146:	f7f9 fb7f 	bl	8000848 <__aeabi_fadd>
 800714a:	1c03      	adds	r3, r0, #0
 800714c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8007152:	46c0      	nop			@ (mov r8, r8)
 8007154:	46bd      	mov	sp, r7
 8007156:	b007      	add	sp, #28
 8007158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800715a:	46c0      	nop			@ (mov r8, r8)
 800715c:	42c80000 	.word	0x42c80000
 8007160:	c2c80000 	.word	0xc2c80000
 8007164:	44b40000 	.word	0x44b40000

08007168 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b084      	sub	sp, #16
 800716c:	af00      	add	r7, sp, #0
 800716e:	60f8      	str	r0, [r7, #12]
 8007170:	60b9      	str	r1, [r7, #8]
 8007172:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	687a      	ldr	r2, [r7, #4]
 8007178:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	68ba      	ldr	r2, [r7, #8]
 800717e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8007180:	46c0      	nop			@ (mov r8, r8)
 8007182:	46bd      	mov	sp, r7
 8007184:	b004      	add	sp, #16
 8007186:	bd80      	pop	{r7, pc}

08007188 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8007188:	b590      	push	{r4, r7, lr}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800719a:	1c19      	adds	r1, r3, #0
 800719c:	6838      	ldr	r0, [r7, #0]
 800719e:	f7fa f801 	bl	80011a4 <__aeabi_fsub>
 80071a2:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80071a4:	1c19      	adds	r1, r3, #0
 80071a6:	1c20      	adds	r0, r4, #0
 80071a8:	f7f9 febe 	bl	8000f28 <__aeabi_fmul>
 80071ac:	1c03      	adds	r3, r0, #0
 80071ae:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 80071b0:	4912      	ldr	r1, [pc, #72]	@ (80071fc <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 80071b2:	68f8      	ldr	r0, [r7, #12]
 80071b4:	f7f9 f9b2 	bl	800051c <__aeabi_fcmplt>
 80071b8:	1e03      	subs	r3, r0, #0
 80071ba:	d002      	beq.n	80071c2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 80071bc:	23fe      	movs	r3, #254	@ 0xfe
 80071be:	059b      	lsls	r3, r3, #22
 80071c0:	e018      	b.n	80071f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 80071c2:	490f      	ldr	r1, [pc, #60]	@ (8007200 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 80071c4:	68f8      	ldr	r0, [r7, #12]
 80071c6:	f7f9 f9bd 	bl	8000544 <__aeabi_fcmpgt>
 80071ca:	1e03      	subs	r3, r0, #0
 80071cc:	d001      	beq.n	80071d2 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 80071ce:	2300      	movs	r3, #0
 80071d0:	e010      	b.n	80071f4 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	1c18      	adds	r0, r3, #0
 80071d6:	f012 ffa5 	bl	801a124 <expf>
 80071da:	1c03      	adds	r3, r0, #0
 80071dc:	21fe      	movs	r1, #254	@ 0xfe
 80071de:	0589      	lsls	r1, r1, #22
 80071e0:	1c18      	adds	r0, r3, #0
 80071e2:	f7f9 fb31 	bl	8000848 <__aeabi_fadd>
 80071e6:	1c03      	adds	r3, r0, #0
 80071e8:	1c19      	adds	r1, r3, #0
 80071ea:	20fe      	movs	r0, #254	@ 0xfe
 80071ec:	0580      	lsls	r0, r0, #22
 80071ee:	f7f9 fcb5 	bl	8000b5c <__aeabi_fdiv>
 80071f2:	1c03      	adds	r3, r0, #0
    }
}
 80071f4:	1c18      	adds	r0, r3, #0
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b005      	add	sp, #20
 80071fa:	bd90      	pop	{r4, r7, pc}
 80071fc:	c2480000 	.word	0xc2480000
 8007200:	42480000 	.word	0x42480000

08007204 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8007204:	b580      	push	{r7, lr}
 8007206:	b084      	sub	sp, #16
 8007208:	af00      	add	r7, sp, #0
 800720a:	60f8      	str	r0, [r7, #12]
 800720c:	60b9      	str	r1, [r7, #8]
 800720e:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	68ba      	ldr	r2, [r7, #8]
 8007214:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	687a      	ldr	r2, [r7, #4]
 800721a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800721c:	46c0      	nop			@ (mov r8, r8)
 800721e:	46bd      	mov	sp, r7
 8007220:	b004      	add	sp, #16
 8007222:	bd80      	pop	{r7, pc}

08007224 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8007224:	b590      	push	{r4, r7, lr}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
 800722c:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	2b01      	cmp	r3, #1
 8007234:	d114      	bne.n	8007260 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800723a:	1c19      	adds	r1, r3, #0
 800723c:	6838      	ldr	r0, [r7, #0]
 800723e:	f7f9 ffb1 	bl	80011a4 <__aeabi_fsub>
 8007242:	1c03      	adds	r3, r0, #0
 8007244:	4918      	ldr	r1, [pc, #96]	@ (80072a8 <GasIndexAlgorithm__mox_model__process+0x84>)
 8007246:	1c18      	adds	r0, r3, #0
 8007248:	f7f9 fc88 	bl	8000b5c <__aeabi_fdiv>
 800724c:	1c03      	adds	r3, r0, #0
 800724e:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8007254:	1c19      	adds	r1, r3, #0
 8007256:	1c10      	adds	r0, r2, #0
 8007258:	f7f9 fe66 	bl	8000f28 <__aeabi_fmul>
 800725c:	1c03      	adds	r3, r0, #0
 800725e:	e01f      	b.n	80072a0 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007264:	1c19      	adds	r1, r3, #0
 8007266:	6838      	ldr	r0, [r7, #0]
 8007268:	f7f9 ff9c 	bl	80011a4 <__aeabi_fsub>
 800726c:	1c03      	adds	r3, r0, #0
 800726e:	1c1a      	adds	r2, r3, #0
 8007270:	2380      	movs	r3, #128	@ 0x80
 8007272:	061b      	lsls	r3, r3, #24
 8007274:	4053      	eors	r3, r2
 8007276:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800727c:	490b      	ldr	r1, [pc, #44]	@ (80072ac <GasIndexAlgorithm__mox_model__process+0x88>)
 800727e:	1c18      	adds	r0, r3, #0
 8007280:	f7f9 fae2 	bl	8000848 <__aeabi_fadd>
 8007284:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8007286:	1c19      	adds	r1, r3, #0
 8007288:	1c20      	adds	r0, r4, #0
 800728a:	f7f9 fc67 	bl	8000b5c <__aeabi_fdiv>
 800728e:	1c03      	adds	r3, r0, #0
 8007290:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8007296:	1c19      	adds	r1, r3, #0
 8007298:	1c10      	adds	r0, r2, #0
 800729a:	f7f9 fe45 	bl	8000f28 <__aeabi_fmul>
 800729e:	1c03      	adds	r3, r0, #0
    }
}
 80072a0:	1c18      	adds	r0, r3, #0
 80072a2:	46bd      	mov	sp, r7
 80072a4:	b003      	add	sp, #12
 80072a6:	bd90      	pop	{r4, r7, pc}
 80072a8:	44fa0000 	.word	0x44fa0000
 80072ac:	435c0000 	.word	0x435c0000

080072b0 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	60f8      	str	r0, [r7, #12]
 80072b8:	60b9      	str	r1, [r7, #8]
 80072ba:	607a      	str	r2, [r7, #4]
 80072bc:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2180      	movs	r1, #128	@ 0x80
 80072c2:	687a      	ldr	r2, [r7, #4]
 80072c4:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2184      	movs	r1, #132	@ 0x84
 80072ca:	68ba      	ldr	r2, [r7, #8]
 80072cc:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2188      	movs	r1, #136	@ 0x88
 80072d2:	683a      	ldr	r2, [r7, #0]
 80072d4:	505a      	str	r2, [r3, r1]
}
 80072d6:	46c0      	nop			@ (mov r8, r8)
 80072d8:	46bd      	mov	sp, r7
 80072da:	b004      	add	sp, #16
 80072dc:	bd80      	pop	{r7, pc}
	...

080072e0 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 80072e0:	b590      	push	{r4, r7, lr}
 80072e2:	b085      	sub	sp, #20
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
 80072e8:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2280      	movs	r2, #128	@ 0x80
 80072ee:	589c      	ldr	r4, [r3, r2]
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2284      	movs	r2, #132	@ 0x84
 80072f4:	589b      	ldr	r3, [r3, r2]
 80072f6:	1c19      	adds	r1, r3, #0
 80072f8:	6838      	ldr	r0, [r7, #0]
 80072fa:	f7f9 ff53 	bl	80011a4 <__aeabi_fsub>
 80072fe:	1c03      	adds	r3, r0, #0
 8007300:	1c19      	adds	r1, r3, #0
 8007302:	1c20      	adds	r0, r4, #0
 8007304:	f7f9 fe10 	bl	8000f28 <__aeabi_fmul>
 8007308:	1c03      	adds	r3, r0, #0
 800730a:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 800730c:	4940      	ldr	r1, [pc, #256]	@ (8007410 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 800730e:	68b8      	ldr	r0, [r7, #8]
 8007310:	f7f9 f904 	bl	800051c <__aeabi_fcmplt>
 8007314:	1e03      	subs	r3, r0, #0
 8007316:	d001      	beq.n	800731c <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8007318:	4b3e      	ldr	r3, [pc, #248]	@ (8007414 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800731a:	e075      	b.n	8007408 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 800731c:	493e      	ldr	r1, [pc, #248]	@ (8007418 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 800731e:	68b8      	ldr	r0, [r7, #8]
 8007320:	f7f9 f910 	bl	8000544 <__aeabi_fcmpgt>
 8007324:	1e03      	subs	r3, r0, #0
 8007326:	d001      	beq.n	800732c <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8007328:	2300      	movs	r3, #0
 800732a:	e06d      	b.n	8007408 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 800732c:	2100      	movs	r1, #0
 800732e:	6838      	ldr	r0, [r7, #0]
 8007330:	f7f9 f912 	bl	8000558 <__aeabi_fcmpge>
 8007334:	1e03      	subs	r3, r0, #0
 8007336:	d047      	beq.n	80073c8 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	2288      	movs	r2, #136	@ 0x88
 800733c:	589b      	ldr	r3, [r3, r2]
 800733e:	21fe      	movs	r1, #254	@ 0xfe
 8007340:	0589      	lsls	r1, r1, #22
 8007342:	1c18      	adds	r0, r3, #0
 8007344:	f7f9 f8e4 	bl	8000510 <__aeabi_fcmpeq>
 8007348:	1e03      	subs	r3, r0, #0
 800734a:	d00e      	beq.n	800736a <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	689b      	ldr	r3, [r3, #8]
 8007350:	1c19      	adds	r1, r3, #0
 8007352:	20fe      	movs	r0, #254	@ 0xfe
 8007354:	0580      	lsls	r0, r0, #22
 8007356:	f7f9 ff25 	bl	80011a4 <__aeabi_fsub>
 800735a:	1c03      	adds	r3, r0, #0
 800735c:	492f      	ldr	r1, [pc, #188]	@ (800741c <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 800735e:	1c18      	adds	r0, r3, #0
 8007360:	f7f9 fde2 	bl	8000f28 <__aeabi_fmul>
 8007364:	1c03      	adds	r3, r0, #0
 8007366:	60fb      	str	r3, [r7, #12]
 8007368:	e012      	b.n	8007390 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	492c      	ldr	r1, [pc, #176]	@ (8007420 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8007370:	1c18      	adds	r0, r3, #0
 8007372:	f7f9 fdd9 	bl	8000f28 <__aeabi_fmul>
 8007376:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8007378:	1c19      	adds	r1, r3, #0
 800737a:	4826      	ldr	r0, [pc, #152]	@ (8007414 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800737c:	f7f9 ff12 	bl	80011a4 <__aeabi_fsub>
 8007380:	1c03      	adds	r3, r0, #0
 8007382:	2181      	movs	r1, #129	@ 0x81
 8007384:	05c9      	lsls	r1, r1, #23
 8007386:	1c18      	adds	r0, r3, #0
 8007388:	f7f9 fbe8 	bl	8000b5c <__aeabi_fdiv>
 800738c:	1c03      	adds	r3, r0, #0
 800738e:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8007390:	4920      	ldr	r1, [pc, #128]	@ (8007414 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8007392:	68f8      	ldr	r0, [r7, #12]
 8007394:	f7f9 fa58 	bl	8000848 <__aeabi_fadd>
 8007398:	1c03      	adds	r3, r0, #0
 800739a:	1c1c      	adds	r4, r3, #0
 800739c:	68bb      	ldr	r3, [r7, #8]
 800739e:	1c18      	adds	r0, r3, #0
 80073a0:	f012 fec0 	bl	801a124 <expf>
 80073a4:	1c03      	adds	r3, r0, #0
 80073a6:	21fe      	movs	r1, #254	@ 0xfe
 80073a8:	0589      	lsls	r1, r1, #22
 80073aa:	1c18      	adds	r0, r3, #0
 80073ac:	f7f9 fa4c 	bl	8000848 <__aeabi_fadd>
 80073b0:	1c03      	adds	r3, r0, #0
 80073b2:	1c19      	adds	r1, r3, #0
 80073b4:	1c20      	adds	r0, r4, #0
 80073b6:	f7f9 fbd1 	bl	8000b5c <__aeabi_fdiv>
 80073ba:	1c03      	adds	r3, r0, #0
 80073bc:	68f9      	ldr	r1, [r7, #12]
 80073be:	1c18      	adds	r0, r3, #0
 80073c0:	f7f9 fef0 	bl	80011a4 <__aeabi_fsub>
 80073c4:	1c03      	adds	r3, r0, #0
 80073c6:	e01f      	b.n	8007408 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2188      	movs	r1, #136	@ 0x88
 80073d0:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 80073d2:	1c19      	adds	r1, r3, #0
 80073d4:	1c10      	adds	r0, r2, #0
 80073d6:	f7f9 fbc1 	bl	8000b5c <__aeabi_fdiv>
 80073da:	1c03      	adds	r3, r0, #0
 80073dc:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 80073de:	68bb      	ldr	r3, [r7, #8]
 80073e0:	1c18      	adds	r0, r3, #0
 80073e2:	f012 fe9f 	bl	801a124 <expf>
 80073e6:	1c03      	adds	r3, r0, #0
 80073e8:	21fe      	movs	r1, #254	@ 0xfe
 80073ea:	0589      	lsls	r1, r1, #22
 80073ec:	1c18      	adds	r0, r3, #0
 80073ee:	f7f9 fa2b 	bl	8000848 <__aeabi_fadd>
 80073f2:	1c03      	adds	r3, r0, #0
 80073f4:	1c19      	adds	r1, r3, #0
 80073f6:	4807      	ldr	r0, [pc, #28]	@ (8007414 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 80073f8:	f7f9 fbb0 	bl	8000b5c <__aeabi_fdiv>
 80073fc:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 80073fe:	1c19      	adds	r1, r3, #0
 8007400:	1c20      	adds	r0, r4, #0
 8007402:	f7f9 fd91 	bl	8000f28 <__aeabi_fmul>
 8007406:	1c03      	adds	r3, r0, #0
        }
    }
}
 8007408:	1c18      	adds	r0, r3, #0
 800740a:	46bd      	mov	sp, r7
 800740c:	b005      	add	sp, #20
 800740e:	bd90      	pop	{r4, r7, pc}
 8007410:	c2480000 	.word	0xc2480000
 8007414:	43fa0000 	.word	0x43fa0000
 8007418:	42480000 	.word	0x42480000
 800741c:	3f8041ab 	.word	0x3f8041ab
 8007420:	40a00000 	.word	0x40a00000

08007424 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8007424:	b590      	push	{r4, r7, lr}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4913      	ldr	r1, [pc, #76]	@ (8007484 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8007436:	1c18      	adds	r0, r3, #0
 8007438:	f7f9 fa06 	bl	8000848 <__aeabi_fadd>
 800743c:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 800743e:	1c19      	adds	r1, r3, #0
 8007440:	1c20      	adds	r0, r4, #0
 8007442:	f7f9 fb8b 	bl	8000b5c <__aeabi_fdiv>
 8007446:	1c03      	adds	r3, r0, #0
 8007448:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	228c      	movs	r2, #140	@ 0x8c
 800744e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	490b      	ldr	r1, [pc, #44]	@ (8007488 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800745a:	1c18      	adds	r0, r3, #0
 800745c:	f7f9 f9f4 	bl	8000848 <__aeabi_fadd>
 8007460:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8007462:	1c19      	adds	r1, r3, #0
 8007464:	1c20      	adds	r0, r4, #0
 8007466:	f7f9 fb79 	bl	8000b5c <__aeabi_fdiv>
 800746a:	1c03      	adds	r3, r0, #0
 800746c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	2290      	movs	r2, #144	@ 0x90
 8007472:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2294      	movs	r2, #148	@ 0x94
 8007478:	2100      	movs	r1, #0
 800747a:	5499      	strb	r1, [r3, r2]
}
 800747c:	46c0      	nop			@ (mov r8, r8)
 800747e:	46bd      	mov	sp, r7
 8007480:	b003      	add	sp, #12
 8007482:	bd90      	pop	{r4, r7, pc}
 8007484:	41a00000 	.word	0x41a00000
 8007488:	43fa0000 	.word	0x43fa0000

0800748c <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 800748c:	b590      	push	{r4, r7, lr}
 800748e:	b087      	sub	sp, #28
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2294      	movs	r2, #148	@ 0x94
 800749a:	5c9b      	ldrb	r3, [r3, r2]
 800749c:	2201      	movs	r2, #1
 800749e:	4053      	eors	r3, r2
 80074a0:	b2db      	uxtb	r3, r3
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00f      	beq.n	80074c6 <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2198      	movs	r1, #152	@ 0x98
 80074aa:	683a      	ldr	r2, [r7, #0]
 80074ac:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	219c      	movs	r1, #156	@ 0x9c
 80074b2:	683a      	ldr	r2, [r7, #0]
 80074b4:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	21a0      	movs	r1, #160	@ 0xa0
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2294      	movs	r2, #148	@ 0x94
 80074c2:	2101      	movs	r1, #1
 80074c4:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	228c      	movs	r2, #140	@ 0x8c
 80074ca:	589b      	ldr	r3, [r3, r2]
 80074cc:	1c19      	adds	r1, r3, #0
 80074ce:	20fe      	movs	r0, #254	@ 0xfe
 80074d0:	0580      	lsls	r0, r0, #22
 80074d2:	f7f9 fe67 	bl	80011a4 <__aeabi_fsub>
 80074d6:	1c03      	adds	r3, r0, #0
 80074d8:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	2298      	movs	r2, #152	@ 0x98
 80074de:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80074e0:	1c19      	adds	r1, r3, #0
 80074e2:	f7f9 fd21 	bl	8000f28 <__aeabi_fmul>
 80074e6:	1c03      	adds	r3, r0, #0
 80074e8:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	228c      	movs	r2, #140	@ 0x8c
 80074ee:	589b      	ldr	r3, [r3, r2]
 80074f0:	6839      	ldr	r1, [r7, #0]
 80074f2:	1c18      	adds	r0, r3, #0
 80074f4:	f7f9 fd18 	bl	8000f28 <__aeabi_fmul>
 80074f8:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 80074fa:	1c19      	adds	r1, r3, #0
 80074fc:	1c20      	adds	r0, r4, #0
 80074fe:	f7f9 f9a3 	bl	8000848 <__aeabi_fadd>
 8007502:	1c03      	adds	r3, r0, #0
 8007504:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2298      	movs	r2, #152	@ 0x98
 800750a:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2290      	movs	r2, #144	@ 0x90
 8007510:	589b      	ldr	r3, [r3, r2]
 8007512:	1c19      	adds	r1, r3, #0
 8007514:	20fe      	movs	r0, #254	@ 0xfe
 8007516:	0580      	lsls	r0, r0, #22
 8007518:	f7f9 fe44 	bl	80011a4 <__aeabi_fsub>
 800751c:	1c03      	adds	r3, r0, #0
 800751e:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	229c      	movs	r2, #156	@ 0x9c
 8007524:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8007526:	1c19      	adds	r1, r3, #0
 8007528:	f7f9 fcfe 	bl	8000f28 <__aeabi_fmul>
 800752c:	1c03      	adds	r3, r0, #0
 800752e:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	2290      	movs	r2, #144	@ 0x90
 8007534:	589b      	ldr	r3, [r3, r2]
 8007536:	6839      	ldr	r1, [r7, #0]
 8007538:	1c18      	adds	r0, r3, #0
 800753a:	f7f9 fcf5 	bl	8000f28 <__aeabi_fmul>
 800753e:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8007540:	1c19      	adds	r1, r3, #0
 8007542:	1c20      	adds	r0, r4, #0
 8007544:	f7f9 f980 	bl	8000848 <__aeabi_fadd>
 8007548:	1c03      	adds	r3, r0, #0
 800754a:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	229c      	movs	r2, #156	@ 0x9c
 8007550:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2298      	movs	r2, #152	@ 0x98
 8007556:	589a      	ldr	r2, [r3, r2]
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	219c      	movs	r1, #156	@ 0x9c
 800755c:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 800755e:	1c19      	adds	r1, r3, #0
 8007560:	1c10      	adds	r0, r2, #0
 8007562:	f7f9 fe1f 	bl	80011a4 <__aeabi_fsub>
 8007566:	1c03      	adds	r3, r0, #0
 8007568:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800756a:	2100      	movs	r1, #0
 800756c:	6978      	ldr	r0, [r7, #20]
 800756e:	f7f8 ffd5 	bl	800051c <__aeabi_fcmplt>
 8007572:	1e03      	subs	r3, r0, #0
 8007574:	d004      	beq.n	8007580 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	2280      	movs	r2, #128	@ 0x80
 800757a:	0612      	lsls	r2, r2, #24
 800757c:	4053      	eors	r3, r2
 800757e:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8007580:	4923      	ldr	r1, [pc, #140]	@ (8007610 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8007582:	6978      	ldr	r0, [r7, #20]
 8007584:	f7f9 fcd0 	bl	8000f28 <__aeabi_fmul>
 8007588:	1c03      	adds	r3, r0, #0
 800758a:	1c18      	adds	r0, r3, #0
 800758c:	f012 fdca 	bl	801a124 <expf>
 8007590:	1c03      	adds	r3, r0, #0
 8007592:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8007594:	491f      	ldr	r1, [pc, #124]	@ (8007614 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8007596:	6938      	ldr	r0, [r7, #16]
 8007598:	f7f9 fcc6 	bl	8000f28 <__aeabi_fmul>
 800759c:	1c03      	adds	r3, r0, #0
 800759e:	491e      	ldr	r1, [pc, #120]	@ (8007618 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80075a0:	1c18      	adds	r0, r3, #0
 80075a2:	f7f9 f951 	bl	8000848 <__aeabi_fadd>
 80075a6:	1c03      	adds	r3, r0, #0
 80075a8:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	685c      	ldr	r4, [r3, #4]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	68f9      	ldr	r1, [r7, #12]
 80075b4:	1c18      	adds	r0, r3, #0
 80075b6:	f7f9 f947 	bl	8000848 <__aeabi_fadd>
 80075ba:	1c03      	adds	r3, r0, #0
 80075bc:	1c19      	adds	r1, r3, #0
 80075be:	1c20      	adds	r0, r4, #0
 80075c0:	f7f9 facc 	bl	8000b5c <__aeabi_fdiv>
 80075c4:	1c03      	adds	r3, r0, #0
 80075c6:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	20fe      	movs	r0, #254	@ 0xfe
 80075cc:	0580      	lsls	r0, r0, #22
 80075ce:	f7f9 fde9 	bl	80011a4 <__aeabi_fsub>
 80075d2:	1c03      	adds	r3, r0, #0
 80075d4:	1c18      	adds	r0, r3, #0
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	22a0      	movs	r2, #160	@ 0xa0
 80075da:	589b      	ldr	r3, [r3, r2]
 80075dc:	1c19      	adds	r1, r3, #0
 80075de:	f7f9 fca3 	bl	8000f28 <__aeabi_fmul>
 80075e2:	1c03      	adds	r3, r0, #0
 80075e4:	1c1c      	adds	r4, r3, #0
 80075e6:	6839      	ldr	r1, [r7, #0]
 80075e8:	68b8      	ldr	r0, [r7, #8]
 80075ea:	f7f9 fc9d 	bl	8000f28 <__aeabi_fmul>
 80075ee:	1c03      	adds	r3, r0, #0
 80075f0:	1c19      	adds	r1, r3, #0
 80075f2:	1c20      	adds	r0, r4, #0
 80075f4:	f7f9 f928 	bl	8000848 <__aeabi_fadd>
 80075f8:	1c03      	adds	r3, r0, #0
 80075fa:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	22a0      	movs	r2, #160	@ 0xa0
 8007600:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	22a0      	movs	r2, #160	@ 0xa0
 8007606:	589b      	ldr	r3, [r3, r2]
}
 8007608:	1c18      	adds	r0, r3, #0
 800760a:	46bd      	mov	sp, r7
 800760c:	b007      	add	sp, #28
 800760e:	bd90      	pop	{r4, r7, pc}
 8007610:	be4ccccd 	.word	0xbe4ccccd
 8007614:	43f00000 	.word	0x43f00000
 8007618:	41a00000 	.word	0x41a00000

0800761c <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800761c:	b590      	push	{r4, r7, lr}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6039      	str	r1, [r7, #0]
 8007624:	0011      	movs	r1, r2
 8007626:	1dfb      	adds	r3, r7, #7
 8007628:	1c02      	adds	r2, r0, #0
 800762a:	701a      	strb	r2, [r3, #0]
 800762c:	1dbb      	adds	r3, r7, #6
 800762e:	1c0a      	adds	r2, r1, #0
 8007630:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8007632:	4b08      	ldr	r3, [pc, #32]	@ (8007654 <ReadRegister+0x38>)
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d008      	beq.n	800764c <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800763a:	4b06      	ldr	r3, [pc, #24]	@ (8007654 <ReadRegister+0x38>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	1dba      	adds	r2, r7, #6
 8007640:	7814      	ldrb	r4, [r2, #0]
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	1dfa      	adds	r2, r7, #7
 8007646:	7810      	ldrb	r0, [r2, #0]
 8007648:	0022      	movs	r2, r4
 800764a:	4798      	blx	r3
  }
}
 800764c:	46c0      	nop			@ (mov r8, r8)
 800764e:	46bd      	mov	sp, r7
 8007650:	b003      	add	sp, #12
 8007652:	bd90      	pop	{r4, r7, pc}
 8007654:	20001b50 	.word	0x20001b50

08007658 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8007658:	b590      	push	{r4, r7, lr}
 800765a:	b083      	sub	sp, #12
 800765c:	af00      	add	r7, sp, #0
 800765e:	6039      	str	r1, [r7, #0]
 8007660:	0011      	movs	r1, r2
 8007662:	1dfb      	adds	r3, r7, #7
 8007664:	1c02      	adds	r2, r0, #0
 8007666:	701a      	strb	r2, [r3, #0]
 8007668:	1dbb      	adds	r3, r7, #6
 800766a:	1c0a      	adds	r2, r1, #0
 800766c:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800766e:	4b08      	ldr	r3, [pc, #32]	@ (8007690 <WriteRegister+0x38>)
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d008      	beq.n	8007688 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8007676:	4b06      	ldr	r3, [pc, #24]	@ (8007690 <WriteRegister+0x38>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	1dba      	adds	r2, r7, #6
 800767c:	7814      	ldrb	r4, [r2, #0]
 800767e:	6839      	ldr	r1, [r7, #0]
 8007680:	1dfa      	adds	r2, r7, #7
 8007682:	7810      	ldrb	r0, [r2, #0]
 8007684:	0022      	movs	r2, r4
 8007686:	4798      	blx	r3
  }
}
 8007688:	46c0      	nop			@ (mov r8, r8)
 800768a:	46bd      	mov	sp, r7
 800768c:	b003      	add	sp, #12
 800768e:	bd90      	pop	{r4, r7, pc}
 8007690:	20001b54 	.word	0x20001b54

08007694 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8007694:	b580      	push	{r7, lr}
 8007696:	b082      	sub	sp, #8
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 800769e:	4b07      	ldr	r3, [pc, #28]	@ (80076bc <SGP_Init+0x28>)
 80076a0:	687a      	ldr	r2, [r7, #4]
 80076a2:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80076a4:	4b06      	ldr	r3, [pc, #24]	@ (80076c0 <SGP_Init+0x2c>)
 80076a6:	683a      	ldr	r2, [r7, #0]
 80076a8:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80076aa:	4b06      	ldr	r3, [pc, #24]	@ (80076c4 <SGP_Init+0x30>)
 80076ac:	2100      	movs	r1, #0
 80076ae:	0018      	movs	r0, r3
 80076b0:	f7ff f930 	bl	8006914 <GasIndexAlgorithm_init>
}
 80076b4:	46c0      	nop			@ (mov r8, r8)
 80076b6:	46bd      	mov	sp, r7
 80076b8:	b002      	add	sp, #8
 80076ba:	bd80      	pop	{r7, pc}
 80076bc:	20001b50 	.word	0x20001b50
 80076c0:	20001b54 	.word	0x20001b54
 80076c4:	20001b64 	.word	0x20001b64

080076c8 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80076c8:	b580      	push	{r7, lr}
 80076ca:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 80076cc:	4b13      	ldr	r3, [pc, #76]	@ (800771c <SGP_StartMeasurement+0x54>)
 80076ce:	781b      	ldrb	r3, [r3, #0]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d00d      	beq.n	80076f0 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80076d4:	4b12      	ldr	r3, [pc, #72]	@ (8007720 <SGP_StartMeasurement+0x58>)
 80076d6:	2208      	movs	r2, #8
 80076d8:	0019      	movs	r1, r3
 80076da:	2059      	movs	r0, #89	@ 0x59
 80076dc:	f7ff ffbc 	bl	8007658 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80076e0:	f001 f956 	bl	8008990 <GetCurrentHalTicks>
 80076e4:	0003      	movs	r3, r0
 80076e6:	331e      	adds	r3, #30
 80076e8:	001a      	movs	r2, r3
 80076ea:	4b0e      	ldr	r3, [pc, #56]	@ (8007724 <SGP_StartMeasurement+0x5c>)
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e00c      	b.n	800770a <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80076f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007728 <SGP_StartMeasurement+0x60>)
 80076f2:	2208      	movs	r2, #8
 80076f4:	0019      	movs	r1, r3
 80076f6:	2059      	movs	r0, #89	@ 0x59
 80076f8:	f7ff ffae 	bl	8007658 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80076fc:	f001 f948 	bl	8008990 <GetCurrentHalTicks>
 8007700:	0003      	movs	r3, r0
 8007702:	33aa      	adds	r3, #170	@ 0xaa
 8007704:	001a      	movs	r2, r3
 8007706:	4b09      	ldr	r3, [pc, #36]	@ (800772c <SGP_StartMeasurement+0x64>)
 8007708:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 800770a:	4b09      	ldr	r3, [pc, #36]	@ (8007730 <SGP_StartMeasurement+0x68>)
 800770c:	2200      	movs	r2, #0
 800770e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8007710:	4b08      	ldr	r3, [pc, #32]	@ (8007734 <SGP_StartMeasurement+0x6c>)
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
}
 8007716:	46c0      	nop			@ (mov r8, r8)
 8007718:	46bd      	mov	sp, r7
 800771a:	bd80      	pop	{r7, pc}
 800771c:	20001c0c 	.word	0x20001c0c
 8007720:	20000128 	.word	0x20000128
 8007724:	2000013c 	.word	0x2000013c
 8007728:	20000120 	.word	0x20000120
 800772c:	20000134 	.word	0x20000134
 8007730:	20001b62 	.word	0x20001b62
 8007734:	20001b63 	.word	0x20001b63

08007738 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8007738:	b580      	push	{r7, lr}
 800773a:	af00      	add	r7, sp, #0
 800773c:	4b04      	ldr	r3, [pc, #16]	@ (8007750 <SGP_HeatedUp+0x18>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	0018      	movs	r0, r3
 8007742:	f001 f843 	bl	80087cc <TimestampIsReached>
 8007746:	0003      	movs	r3, r0
 8007748:	0018      	movs	r0, r3
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	46c0      	nop			@ (mov r8, r8)
 8007750:	20000134 	.word	0x20000134

08007754 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8007754:	b580      	push	{r7, lr}
 8007756:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8007758:	4b04      	ldr	r3, [pc, #16]	@ (800776c <SGP_MeasurementReady+0x18>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	0018      	movs	r0, r3
 800775e:	f001 f835 	bl	80087cc <TimestampIsReached>
 8007762:	0003      	movs	r3, r0
}
 8007764:	0018      	movs	r0, r3
 8007766:	46bd      	mov	sp, r7
 8007768:	bd80      	pop	{r7, pc}
 800776a:	46c0      	nop			@ (mov r8, r8)
 800776c:	2000013c 	.word	0x2000013c

08007770 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8007770:	b580      	push	{r7, lr}
 8007772:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8007774:	4b04      	ldr	r3, [pc, #16]	@ (8007788 <SGP_MeasurementDone+0x18>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	0018      	movs	r0, r3
 800777a:	f001 f827 	bl	80087cc <TimestampIsReached>
 800777e:	0003      	movs	r3, r0
}
 8007780:	0018      	movs	r0, r3
 8007782:	46bd      	mov	sp, r7
 8007784:	bd80      	pop	{r7, pc}
 8007786:	46c0      	nop			@ (mov r8, r8)
 8007788:	20000138 	.word	0x20000138

0800778c <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 800778c:	b580      	push	{r7, lr}
 800778e:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007790:	4b04      	ldr	r3, [pc, #16]	@ (80077a4 <SGP_TurnHeaterOff+0x18>)
 8007792:	2202      	movs	r2, #2
 8007794:	0019      	movs	r1, r3
 8007796:	2059      	movs	r0, #89	@ 0x59
 8007798:	f7ff ff5e 	bl	8007658 <WriteRegister>
}
 800779c:	46c0      	nop			@ (mov r8, r8)
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	46c0      	nop			@ (mov r8, r8)
 80077a4:	20000118 	.word	0x20000118

080077a8 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 80077a8:	b5b0      	push	{r4, r5, r7, lr}
 80077aa:	b086      	sub	sp, #24
 80077ac:	af02      	add	r7, sp, #8
 80077ae:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 80077b0:	f7ff ffc2 	bl	8007738 <SGP_HeatedUp>
 80077b4:	1e03      	subs	r3, r0, #0
 80077b6:	d038      	beq.n	800782a <SGP_GetMeasurementValues+0x82>
 80077b8:	4bd8      	ldr	r3, [pc, #864]	@ (8007b1c <SGP_GetMeasurementValues+0x374>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2201      	movs	r2, #1
 80077be:	4053      	eors	r3, r2
 80077c0:	b2db      	uxtb	r3, r3
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d031      	beq.n	800782a <SGP_GetMeasurementValues+0x82>
 80077c6:	4bd6      	ldr	r3, [pc, #856]	@ (8007b20 <SGP_GetMeasurementValues+0x378>)
 80077c8:	781b      	ldrb	r3, [r3, #0]
 80077ca:	2201      	movs	r2, #1
 80077cc:	4053      	eors	r3, r2
 80077ce:	b2db      	uxtb	r3, r3
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d02a      	beq.n	800782a <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 80077d4:	4ad3      	ldr	r2, [pc, #844]	@ (8007b24 <SGP_GetMeasurementValues+0x37c>)
 80077d6:	4bd4      	ldr	r3, [pc, #848]	@ (8007b28 <SGP_GetMeasurementValues+0x380>)
 80077d8:	0019      	movs	r1, r3
 80077da:	2003      	movs	r0, #3
 80077dc:	f001 f84c 	bl	8008878 <CreateLine>
    HeatUpIsDone = true;
 80077e0:	4bce      	ldr	r3, [pc, #824]	@ (8007b1c <SGP_GetMeasurementValues+0x374>)
 80077e2:	2201      	movs	r2, #1
 80077e4:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 80077e6:	4bd1      	ldr	r3, [pc, #836]	@ (8007b2c <SGP_GetMeasurementValues+0x384>)
 80077e8:	781b      	ldrb	r3, [r3, #0]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d00d      	beq.n	800780a <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80077ee:	4bd0      	ldr	r3, [pc, #832]	@ (8007b30 <SGP_GetMeasurementValues+0x388>)
 80077f0:	2208      	movs	r2, #8
 80077f2:	0019      	movs	r1, r3
 80077f4:	2059      	movs	r0, #89	@ 0x59
 80077f6:	f7ff ff2f 	bl	8007658 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80077fa:	f001 f8c9 	bl	8008990 <GetCurrentHalTicks>
 80077fe:	0003      	movs	r3, r0
 8007800:	331e      	adds	r3, #30
 8007802:	001a      	movs	r2, r3
 8007804:	4bcb      	ldr	r3, [pc, #812]	@ (8007b34 <SGP_GetMeasurementValues+0x38c>)
 8007806:	601a      	str	r2, [r3, #0]
 8007808:	e00c      	b.n	8007824 <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 800780a:	4bcb      	ldr	r3, [pc, #812]	@ (8007b38 <SGP_GetMeasurementValues+0x390>)
 800780c:	2208      	movs	r2, #8
 800780e:	0019      	movs	r1, r3
 8007810:	2059      	movs	r0, #89	@ 0x59
 8007812:	f7ff ff21 	bl	8007658 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8007816:	f001 f8bb 	bl	8008990 <GetCurrentHalTicks>
 800781a:	0003      	movs	r3, r0
 800781c:	331e      	adds	r3, #30
 800781e:	001a      	movs	r2, r3
 8007820:	4bc4      	ldr	r3, [pc, #784]	@ (8007b34 <SGP_GetMeasurementValues+0x38c>)
 8007822:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 8007824:	4bbe      	ldr	r3, [pc, #760]	@ (8007b20 <SGP_GetMeasurementValues+0x378>)
 8007826:	2201      	movs	r2, #1
 8007828:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 800782a:	4bbc      	ldr	r3, [pc, #752]	@ (8007b1c <SGP_GetMeasurementValues+0x374>)
 800782c:	781b      	ldrb	r3, [r3, #0]
 800782e:	2b00      	cmp	r3, #0
 8007830:	d100      	bne.n	8007834 <SGP_GetMeasurementValues+0x8c>
 8007832:	e1b1      	b.n	8007b98 <SGP_GetMeasurementValues+0x3f0>
 8007834:	f7ff ff8e 	bl	8007754 <SGP_MeasurementReady>
 8007838:	1e03      	subs	r3, r0, #0
 800783a:	d100      	bne.n	800783e <SGP_GetMeasurementValues+0x96>
 800783c:	e1ac      	b.n	8007b98 <SGP_GetMeasurementValues+0x3f0>
 800783e:	4bbf      	ldr	r3, [pc, #764]	@ (8007b3c <SGP_GetMeasurementValues+0x394>)
 8007840:	781b      	ldrb	r3, [r3, #0]
 8007842:	2201      	movs	r2, #1
 8007844:	4053      	eors	r3, r2
 8007846:	b2db      	uxtb	r3, r3
 8007848:	2b00      	cmp	r3, #0
 800784a:	d100      	bne.n	800784e <SGP_GetMeasurementValues+0xa6>
 800784c:	e1a4      	b.n	8007b98 <SGP_GetMeasurementValues+0x3f0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800784e:	4bbc      	ldr	r3, [pc, #752]	@ (8007b40 <SGP_GetMeasurementValues+0x398>)
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	3301      	adds	r3, #1
 8007854:	4abb      	ldr	r2, [pc, #748]	@ (8007b44 <SGP_GetMeasurementValues+0x39c>)
 8007856:	49b4      	ldr	r1, [pc, #720]	@ (8007b28 <SGP_GetMeasurementValues+0x380>)
 8007858:	2003      	movs	r0, #3
 800785a:	f001 f80d 	bl	8008878 <CreateLine>
    MeasurementIsReady = true;
 800785e:	4bb7      	ldr	r3, [pc, #732]	@ (8007b3c <SGP_GetMeasurementValues+0x394>)
 8007860:	2201      	movs	r2, #1
 8007862:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8007864:	4bb8      	ldr	r3, [pc, #736]	@ (8007b48 <SGP_GetMeasurementValues+0x3a0>)
 8007866:	2203      	movs	r2, #3
 8007868:	0019      	movs	r1, r3
 800786a:	2059      	movs	r0, #89	@ 0x59
 800786c:	f7ff fed6 	bl	800761c <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 8007870:	4bb5      	ldr	r3, [pc, #724]	@ (8007b48 <SGP_GetMeasurementValues+0x3a0>)
 8007872:	2203      	movs	r2, #3
 8007874:	2103      	movs	r1, #3
 8007876:	0018      	movs	r0, r3
 8007878:	f000 f9f4 	bl	8007c64 <CheckCRC>
 800787c:	0003      	movs	r3, r0
 800787e:	001a      	movs	r2, r3
 8007880:	2301      	movs	r3, #1
 8007882:	4053      	eors	r3, r2
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b00      	cmp	r3, #0
 8007888:	d02a      	beq.n	80078e0 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 800788a:	4ab0      	ldr	r2, [pc, #704]	@ (8007b4c <SGP_GetMeasurementValues+0x3a4>)
 800788c:	4bb0      	ldr	r3, [pc, #704]	@ (8007b50 <SGP_GetMeasurementValues+0x3a8>)
 800788e:	0019      	movs	r1, r3
 8007890:	2001      	movs	r0, #1
 8007892:	f000 fff1 	bl	8008878 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8007896:	4aaf      	ldr	r2, [pc, #700]	@ (8007b54 <SGP_GetMeasurementValues+0x3ac>)
 8007898:	4baf      	ldr	r3, [pc, #700]	@ (8007b58 <SGP_GetMeasurementValues+0x3b0>)
 800789a:	0019      	movs	r1, r3
 800789c:	2002      	movs	r0, #2
 800789e:	f000 ffeb 	bl	8008878 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80078a2:	230f      	movs	r3, #15
 80078a4:	18fb      	adds	r3, r7, r3
 80078a6:	2200      	movs	r2, #0
 80078a8:	701a      	strb	r2, [r3, #0]
 80078aa:	e012      	b.n	80078d2 <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 80078ac:	240f      	movs	r4, #15
 80078ae:	193b      	adds	r3, r7, r4
 80078b0:	7818      	ldrb	r0, [r3, #0]
 80078b2:	193b      	adds	r3, r7, r4
 80078b4:	781b      	ldrb	r3, [r3, #0]
 80078b6:	4aa4      	ldr	r2, [pc, #656]	@ (8007b48 <SGP_GetMeasurementValues+0x3a0>)
 80078b8:	5cd3      	ldrb	r3, [r2, r3]
 80078ba:	4aa8      	ldr	r2, [pc, #672]	@ (8007b5c <SGP_GetMeasurementValues+0x3b4>)
 80078bc:	499a      	ldr	r1, [pc, #616]	@ (8007b28 <SGP_GetMeasurementValues+0x380>)
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	0003      	movs	r3, r0
 80078c2:	2003      	movs	r0, #3
 80078c4:	f000 ffd8 	bl	8008878 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80078c8:	193b      	adds	r3, r7, r4
 80078ca:	781a      	ldrb	r2, [r3, #0]
 80078cc:	193b      	adds	r3, r7, r4
 80078ce:	3201      	adds	r2, #1
 80078d0:	701a      	strb	r2, [r3, #0]
 80078d2:	230f      	movs	r3, #15
 80078d4:	18fb      	adds	r3, r7, r3
 80078d6:	781b      	ldrb	r3, [r3, #0]
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d9e7      	bls.n	80078ac <SGP_GetMeasurementValues+0x104>
      }
      return false;
 80078dc:	2300      	movs	r3, #0
 80078de:	e173      	b.n	8007bc8 <SGP_GetMeasurementValues+0x420>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 80078e0:	f001 f856 	bl	8008990 <GetCurrentHalTicks>
 80078e4:	0003      	movs	r3, r0
 80078e6:	22fa      	movs	r2, #250	@ 0xfa
 80078e8:	0092      	lsls	r2, r2, #2
 80078ea:	189a      	adds	r2, r3, r2
 80078ec:	4b9c      	ldr	r3, [pc, #624]	@ (8007b60 <SGP_GetMeasurementValues+0x3b8>)
 80078ee:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80078f0:	f7ff ff4c 	bl	800778c <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80078f4:	4b92      	ldr	r3, [pc, #584]	@ (8007b40 <SGP_GetMeasurementValues+0x398>)
 80078f6:	781b      	ldrb	r3, [r3, #0]
 80078f8:	3301      	adds	r3, #1
 80078fa:	b2da      	uxtb	r2, r3
 80078fc:	4b90      	ldr	r3, [pc, #576]	@ (8007b40 <SGP_GetMeasurementValues+0x398>)
 80078fe:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8007900:	4b8f      	ldr	r3, [pc, #572]	@ (8007b40 <SGP_GetMeasurementValues+0x398>)
 8007902:	781a      	ldrb	r2, [r3, #0]
 8007904:	4b97      	ldr	r3, [pc, #604]	@ (8007b64 <SGP_GetMeasurementValues+0x3bc>)
 8007906:	781b      	ldrb	r3, [r3, #0]
 8007908:	429a      	cmp	r2, r3
 800790a:	d200      	bcs.n	800790e <SGP_GetMeasurementValues+0x166>
 800790c:	e144      	b.n	8007b98 <SGP_GetMeasurementValues+0x3f0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 800790e:	4b8e      	ldr	r3, [pc, #568]	@ (8007b48 <SGP_GetMeasurementValues+0x3a0>)
 8007910:	785b      	ldrb	r3, [r3, #1]
 8007912:	021b      	lsls	r3, r3, #8
 8007914:	b21a      	sxth	r2, r3
 8007916:	4b8c      	ldr	r3, [pc, #560]	@ (8007b48 <SGP_GetMeasurementValues+0x3a0>)
 8007918:	781b      	ldrb	r3, [r3, #0]
 800791a:	b21b      	sxth	r3, r3
 800791c:	4313      	orrs	r3, r2
 800791e:	b21a      	sxth	r2, r3
 8007920:	240c      	movs	r4, #12
 8007922:	193b      	adds	r3, r7, r4
 8007924:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 8007926:	193b      	adds	r3, r7, r4
 8007928:	881b      	ldrh	r3, [r3, #0]
 800792a:	4a8f      	ldr	r2, [pc, #572]	@ (8007b68 <SGP_GetMeasurementValues+0x3c0>)
 800792c:	497e      	ldr	r1, [pc, #504]	@ (8007b28 <SGP_GetMeasurementValues+0x380>)
 800792e:	2003      	movs	r0, #3
 8007930:	f000 ffa2 	bl	8008878 <CreateLine>
      int32_t tempVocIndex = 0;
 8007934:	2300      	movs	r3, #0
 8007936:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8007938:	193b      	adds	r3, r7, r4
 800793a:	8819      	ldrh	r1, [r3, #0]
 800793c:	2308      	movs	r3, #8
 800793e:	18fa      	adds	r2, r7, r3
 8007940:	4b8a      	ldr	r3, [pc, #552]	@ (8007b6c <SGP_GetMeasurementValues+0x3c4>)
 8007942:	0018      	movs	r0, r3
 8007944:	f7ff f848 	bl	80069d8 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	4a89      	ldr	r2, [pc, #548]	@ (8007b70 <SGP_GetMeasurementValues+0x3c8>)
 800794c:	4976      	ldr	r1, [pc, #472]	@ (8007b28 <SGP_GetMeasurementValues+0x380>)
 800794e:	2003      	movs	r0, #3
 8007950:	f000 ff92 	bl	8008878 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 8007954:	68ba      	ldr	r2, [r7, #8]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2b00      	cmp	r3, #0
 8007960:	dd5d      	ble.n	8007a1e <SGP_GetMeasurementValues+0x276>
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	2b64      	cmp	r3, #100	@ 0x64
 8007968:	dc59      	bgt.n	8007a1e <SGP_GetMeasurementValues+0x276>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	0018      	movs	r0, r3
 8007970:	f7fb fcea 	bl	8003348 <__aeabi_i2d>
 8007974:	2200      	movs	r2, #0
 8007976:	4b7f      	ldr	r3, [pc, #508]	@ (8007b74 <SGP_GetMeasurementValues+0x3cc>)
 8007978:	f7fa f9e0 	bl	8001d3c <__aeabi_ddiv>
 800797c:	0002      	movs	r2, r0
 800797e:	000b      	movs	r3, r1
 8007980:	2000      	movs	r0, #0
 8007982:	497d      	ldr	r1, [pc, #500]	@ (8007b78 <SGP_GetMeasurementValues+0x3d0>)
 8007984:	f7fb f8e6 	bl	8002b54 <__aeabi_dsub>
 8007988:	0002      	movs	r2, r0
 800798a:	000b      	movs	r3, r1
 800798c:	0014      	movs	r4, r2
 800798e:	001d      	movs	r5, r3
 8007990:	4b7a      	ldr	r3, [pc, #488]	@ (8007b7c <SGP_GetMeasurementValues+0x3d4>)
 8007992:	881b      	ldrh	r3, [r3, #0]
 8007994:	0018      	movs	r0, r3
 8007996:	f7fb fcd7 	bl	8003348 <__aeabi_i2d>
 800799a:	0002      	movs	r2, r0
 800799c:	000b      	movs	r3, r1
 800799e:	0020      	movs	r0, r4
 80079a0:	0029      	movs	r1, r5
 80079a2:	f7fa fe0f 	bl	80025c4 <__aeabi_dmul>
 80079a6:	0002      	movs	r2, r0
 80079a8:	000b      	movs	r3, r1
 80079aa:	0010      	movs	r0, r2
 80079ac:	0019      	movs	r1, r3
 80079ae:	f7f8 fe61 	bl	8000674 <__aeabi_d2uiz>
 80079b2:	0003      	movs	r3, r0
 80079b4:	b29a      	uxth	r2, r3
 80079b6:	4b72      	ldr	r3, [pc, #456]	@ (8007b80 <SGP_GetMeasurementValues+0x3d8>)
 80079b8:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	0018      	movs	r0, r3
 80079c0:	f7fb fcc2 	bl	8003348 <__aeabi_i2d>
 80079c4:	2200      	movs	r2, #0
 80079c6:	4b6b      	ldr	r3, [pc, #428]	@ (8007b74 <SGP_GetMeasurementValues+0x3cc>)
 80079c8:	f7fa f9b8 	bl	8001d3c <__aeabi_ddiv>
 80079cc:	0002      	movs	r2, r0
 80079ce:	000b      	movs	r3, r1
 80079d0:	0014      	movs	r4, r2
 80079d2:	001d      	movs	r5, r3
 80079d4:	4b69      	ldr	r3, [pc, #420]	@ (8007b7c <SGP_GetMeasurementValues+0x3d4>)
 80079d6:	881b      	ldrh	r3, [r3, #0]
 80079d8:	0018      	movs	r0, r3
 80079da:	f7fb fcb5 	bl	8003348 <__aeabi_i2d>
 80079de:	0002      	movs	r2, r0
 80079e0:	000b      	movs	r3, r1
 80079e2:	0020      	movs	r0, r4
 80079e4:	0029      	movs	r1, r5
 80079e6:	f7fa fded 	bl	80025c4 <__aeabi_dmul>
 80079ea:	0002      	movs	r2, r0
 80079ec:	000b      	movs	r3, r1
 80079ee:	0010      	movs	r0, r2
 80079f0:	0019      	movs	r1, r3
 80079f2:	f7f8 fe3f 	bl	8000674 <__aeabi_d2uiz>
 80079f6:	0003      	movs	r3, r0
 80079f8:	b29a      	uxth	r2, r3
 80079fa:	4b62      	ldr	r3, [pc, #392]	@ (8007b84 <SGP_GetMeasurementValues+0x3dc>)
 80079fc:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 80079fe:	4b5f      	ldr	r3, [pc, #380]	@ (8007b7c <SGP_GetMeasurementValues+0x3d4>)
 8007a00:	881a      	ldrh	r2, [r3, #0]
 8007a02:	4b61      	ldr	r3, [pc, #388]	@ (8007b88 <SGP_GetMeasurementValues+0x3e0>)
 8007a04:	801a      	strh	r2, [r3, #0]
      TIM3->CCR1 = Red;
 8007a06:	4b60      	ldr	r3, [pc, #384]	@ (8007b88 <SGP_GetMeasurementValues+0x3e0>)
 8007a08:	881a      	ldrh	r2, [r3, #0]
 8007a0a:	4b60      	ldr	r3, [pc, #384]	@ (8007b8c <SGP_GetMeasurementValues+0x3e4>)
 8007a0c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3->CCR2 = Green;
 8007a0e:	4b5c      	ldr	r3, [pc, #368]	@ (8007b80 <SGP_GetMeasurementValues+0x3d8>)
 8007a10:	881a      	ldrh	r2, [r3, #0]
 8007a12:	4b5e      	ldr	r3, [pc, #376]	@ (8007b8c <SGP_GetMeasurementValues+0x3e4>)
 8007a14:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3->CCR3 = Blue;
 8007a16:	4b5b      	ldr	r3, [pc, #364]	@ (8007b84 <SGP_GetMeasurementValues+0x3dc>)
 8007a18:	881a      	ldrh	r2, [r3, #0]
 8007a1a:	4b5c      	ldr	r3, [pc, #368]	@ (8007b8c <SGP_GetMeasurementValues+0x3e4>)
 8007a1c:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      if(*vocIndex > 100){
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	2b64      	cmp	r3, #100	@ 0x64
 8007a24:	dd69      	ble.n	8007afa <SGP_GetMeasurementValues+0x352>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	0018      	movs	r0, r3
 8007a2c:	f7fb fc8c 	bl	8003348 <__aeabi_i2d>
 8007a30:	2200      	movs	r2, #0
 8007a32:	4b50      	ldr	r3, [pc, #320]	@ (8007b74 <SGP_GetMeasurementValues+0x3cc>)
 8007a34:	f7fb f88e 	bl	8002b54 <__aeabi_dsub>
 8007a38:	0002      	movs	r2, r0
 8007a3a:	000b      	movs	r3, r1
 8007a3c:	0010      	movs	r0, r2
 8007a3e:	0019      	movs	r1, r3
 8007a40:	2200      	movs	r2, #0
 8007a42:	4b53      	ldr	r3, [pc, #332]	@ (8007b90 <SGP_GetMeasurementValues+0x3e8>)
 8007a44:	f7fa f97a 	bl	8001d3c <__aeabi_ddiv>
 8007a48:	0002      	movs	r2, r0
 8007a4a:	000b      	movs	r3, r1
 8007a4c:	0014      	movs	r4, r2
 8007a4e:	001d      	movs	r5, r3
 8007a50:	4b4a      	ldr	r3, [pc, #296]	@ (8007b7c <SGP_GetMeasurementValues+0x3d4>)
 8007a52:	881b      	ldrh	r3, [r3, #0]
 8007a54:	0018      	movs	r0, r3
 8007a56:	f7fb fc77 	bl	8003348 <__aeabi_i2d>
 8007a5a:	0002      	movs	r2, r0
 8007a5c:	000b      	movs	r3, r1
 8007a5e:	0020      	movs	r0, r4
 8007a60:	0029      	movs	r1, r5
 8007a62:	f7fa fdaf 	bl	80025c4 <__aeabi_dmul>
 8007a66:	0002      	movs	r2, r0
 8007a68:	000b      	movs	r3, r1
 8007a6a:	0010      	movs	r0, r2
 8007a6c:	0019      	movs	r1, r3
 8007a6e:	f7f8 fe01 	bl	8000674 <__aeabi_d2uiz>
 8007a72:	0003      	movs	r3, r0
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	4b42      	ldr	r3, [pc, #264]	@ (8007b80 <SGP_GetMeasurementValues+0x3d8>)
 8007a78:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	0018      	movs	r0, r3
 8007a80:	f7fb fc62 	bl	8003348 <__aeabi_i2d>
 8007a84:	2200      	movs	r2, #0
 8007a86:	4b3b      	ldr	r3, [pc, #236]	@ (8007b74 <SGP_GetMeasurementValues+0x3cc>)
 8007a88:	f7fb f864 	bl	8002b54 <__aeabi_dsub>
 8007a8c:	0002      	movs	r2, r0
 8007a8e:	000b      	movs	r3, r1
 8007a90:	0010      	movs	r0, r2
 8007a92:	0019      	movs	r1, r3
 8007a94:	2200      	movs	r2, #0
 8007a96:	4b3e      	ldr	r3, [pc, #248]	@ (8007b90 <SGP_GetMeasurementValues+0x3e8>)
 8007a98:	f7fa f950 	bl	8001d3c <__aeabi_ddiv>
 8007a9c:	0002      	movs	r2, r0
 8007a9e:	000b      	movs	r3, r1
 8007aa0:	2000      	movs	r0, #0
 8007aa2:	4935      	ldr	r1, [pc, #212]	@ (8007b78 <SGP_GetMeasurementValues+0x3d0>)
 8007aa4:	f7fb f856 	bl	8002b54 <__aeabi_dsub>
 8007aa8:	0002      	movs	r2, r0
 8007aaa:	000b      	movs	r3, r1
 8007aac:	0014      	movs	r4, r2
 8007aae:	001d      	movs	r5, r3
 8007ab0:	4b32      	ldr	r3, [pc, #200]	@ (8007b7c <SGP_GetMeasurementValues+0x3d4>)
 8007ab2:	881b      	ldrh	r3, [r3, #0]
 8007ab4:	0018      	movs	r0, r3
 8007ab6:	f7fb fc47 	bl	8003348 <__aeabi_i2d>
 8007aba:	0002      	movs	r2, r0
 8007abc:	000b      	movs	r3, r1
 8007abe:	0020      	movs	r0, r4
 8007ac0:	0029      	movs	r1, r5
 8007ac2:	f7fa fd7f 	bl	80025c4 <__aeabi_dmul>
 8007ac6:	0002      	movs	r2, r0
 8007ac8:	000b      	movs	r3, r1
 8007aca:	0010      	movs	r0, r2
 8007acc:	0019      	movs	r1, r3
 8007ace:	f7f8 fdd1 	bl	8000674 <__aeabi_d2uiz>
 8007ad2:	0003      	movs	r3, r0
 8007ad4:	b29a      	uxth	r2, r3
 8007ad6:	4b2c      	ldr	r3, [pc, #176]	@ (8007b88 <SGP_GetMeasurementValues+0x3e0>)
 8007ad8:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 8007ada:	4b28      	ldr	r3, [pc, #160]	@ (8007b7c <SGP_GetMeasurementValues+0x3d4>)
 8007adc:	881a      	ldrh	r2, [r3, #0]
 8007ade:	4b29      	ldr	r3, [pc, #164]	@ (8007b84 <SGP_GetMeasurementValues+0x3dc>)
 8007ae0:	801a      	strh	r2, [r3, #0]
        TIM3->CCR1 = Red;
 8007ae2:	4b29      	ldr	r3, [pc, #164]	@ (8007b88 <SGP_GetMeasurementValues+0x3e0>)
 8007ae4:	881a      	ldrh	r2, [r3, #0]
 8007ae6:	4b29      	ldr	r3, [pc, #164]	@ (8007b8c <SGP_GetMeasurementValues+0x3e4>)
 8007ae8:	635a      	str	r2, [r3, #52]	@ 0x34
        TIM3->CCR2 = Green;
 8007aea:	4b25      	ldr	r3, [pc, #148]	@ (8007b80 <SGP_GetMeasurementValues+0x3d8>)
 8007aec:	881a      	ldrh	r2, [r3, #0]
 8007aee:	4b27      	ldr	r3, [pc, #156]	@ (8007b8c <SGP_GetMeasurementValues+0x3e4>)
 8007af0:	639a      	str	r2, [r3, #56]	@ 0x38
        TIM3->CCR3 = Blue;
 8007af2:	4b24      	ldr	r3, [pc, #144]	@ (8007b84 <SGP_GetMeasurementValues+0x3dc>)
 8007af4:	881a      	ldrh	r2, [r3, #0]
 8007af6:	4b25      	ldr	r3, [pc, #148]	@ (8007b8c <SGP_GetMeasurementValues+0x3e4>)
 8007af8:	63da      	str	r2, [r3, #60]	@ 0x3c
      }
      SGP_AmountOfSamplesDone = 0;
 8007afa:	4b11      	ldr	r3, [pc, #68]	@ (8007b40 <SGP_GetMeasurementValues+0x398>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 8007b00:	4a24      	ldr	r2, [pc, #144]	@ (8007b94 <SGP_GetMeasurementValues+0x3ec>)
 8007b02:	4b09      	ldr	r3, [pc, #36]	@ (8007b28 <SGP_GetMeasurementValues+0x380>)
 8007b04:	0019      	movs	r1, r3
 8007b06:	2003      	movs	r0, #3
 8007b08:	f000 feb6 	bl	8008878 <CreateLine>
      HT_MeasurementReceived = false;
 8007b0c:	4b07      	ldr	r3, [pc, #28]	@ (8007b2c <SGP_GetMeasurementValues+0x384>)
 8007b0e:	2200      	movs	r2, #0
 8007b10:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 8007b12:	4b03      	ldr	r3, [pc, #12]	@ (8007b20 <SGP_GetMeasurementValues+0x378>)
 8007b14:	2200      	movs	r2, #0
 8007b16:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8007b18:	2301      	movs	r3, #1
 8007b1a:	e055      	b.n	8007bc8 <SGP_GetMeasurementValues+0x420>
 8007b1c:	20001b62 	.word	0x20001b62
 8007b20:	20001c0d 	.word	0x20001c0d
 8007b24:	0801af58 	.word	0x0801af58
 8007b28:	0801af84 	.word	0x0801af84
 8007b2c:	20001c0c 	.word	0x20001c0c
 8007b30:	20000128 	.word	0x20000128
 8007b34:	2000013c 	.word	0x2000013c
 8007b38:	20000120 	.word	0x20000120
 8007b3c:	20001b63 	.word	0x20001b63
 8007b40:	20001b61 	.word	0x20001b61
 8007b44:	0801af88 	.word	0x0801af88
 8007b48:	20001b58 	.word	0x20001b58
 8007b4c:	0801afb8 	.word	0x0801afb8
 8007b50:	0801afdc 	.word	0x0801afdc
 8007b54:	0801afe0 	.word	0x0801afe0
 8007b58:	0801b000 	.word	0x0801b000
 8007b5c:	0801b004 	.word	0x0801b004
 8007b60:	20000138 	.word	0x20000138
 8007b64:	20000130 	.word	0x20000130
 8007b68:	0801b024 	.word	0x0801b024
 8007b6c:	20001b64 	.word	0x20001b64
 8007b70:	0801b038 	.word	0x0801b038
 8007b74:	40590000 	.word	0x40590000
 8007b78:	3ff00000 	.word	0x3ff00000
 8007b7c:	20000140 	.word	0x20000140
 8007b80:	20001c12 	.word	0x20001c12
 8007b84:	20001c10 	.word	0x20001c10
 8007b88:	20001c0e 	.word	0x20001c0e
 8007b8c:	40000400 	.word	0x40000400
 8007b90:	40790000 	.word	0x40790000
 8007b94:	0801b04c 	.word	0x0801b04c
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 8007b98:	f7ff fdea 	bl	8007770 <SGP_MeasurementDone>
 8007b9c:	1e03      	subs	r3, r0, #0
 8007b9e:	d012      	beq.n	8007bc6 <SGP_GetMeasurementValues+0x41e>
 8007ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8007bd0 <SGP_GetMeasurementValues+0x428>)
 8007ba2:	781b      	ldrb	r3, [r3, #0]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d00e      	beq.n	8007bc6 <SGP_GetMeasurementValues+0x41e>
 8007ba8:	4b0a      	ldr	r3, [pc, #40]	@ (8007bd4 <SGP_GetMeasurementValues+0x42c>)
 8007baa:	781b      	ldrb	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d00a      	beq.n	8007bc6 <SGP_GetMeasurementValues+0x41e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 8007bb0:	4a09      	ldr	r2, [pc, #36]	@ (8007bd8 <SGP_GetMeasurementValues+0x430>)
 8007bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8007bdc <SGP_GetMeasurementValues+0x434>)
 8007bb4:	0019      	movs	r1, r3
 8007bb6:	2003      	movs	r0, #3
 8007bb8:	f000 fe5e 	bl	8008878 <CreateLine>
    SGP_StartMeasurement();
 8007bbc:	f7ff fd84 	bl	80076c8 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8007bc0:	4b07      	ldr	r3, [pc, #28]	@ (8007be0 <SGP_GetMeasurementValues+0x438>)
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	701a      	strb	r2, [r3, #0]
  }
  return false;
 8007bc6:	2300      	movs	r3, #0
}
 8007bc8:	0018      	movs	r0, r3
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	b004      	add	sp, #16
 8007bce:	bdb0      	pop	{r4, r5, r7, pc}
 8007bd0:	20001b62 	.word	0x20001b62
 8007bd4:	20001b63 	.word	0x20001b63
 8007bd8:	0801b070 	.word	0x0801b070
 8007bdc:	0801af84 	.word	0x0801af84
 8007be0:	20001c0d 	.word	0x20001c0d

08007be4 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8007bea:	4b1a      	ldr	r3, [pc, #104]	@ (8007c54 <SGP_DeviceConnected+0x70>)
 8007bec:	2202      	movs	r2, #2
 8007bee:	0019      	movs	r1, r3
 8007bf0:	2059      	movs	r0, #89	@ 0x59
 8007bf2:	f7ff fd31 	bl	8007658 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 8007bf6:	2001      	movs	r0, #1
 8007bf8:	f001 fa40 	bl	800907c <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8007bfc:	4b16      	ldr	r3, [pc, #88]	@ (8007c58 <SGP_DeviceConnected+0x74>)
 8007bfe:	2209      	movs	r2, #9
 8007c00:	0019      	movs	r1, r3
 8007c02:	2059      	movs	r0, #89	@ 0x59
 8007c04:	f7ff fd0a 	bl	800761c <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007c08:	1dfb      	adds	r3, r7, #7
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	701a      	strb	r2, [r3, #0]
 8007c0e:	e011      	b.n	8007c34 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8007c10:	1dfb      	adds	r3, r7, #7
 8007c12:	7818      	ldrb	r0, [r3, #0]
 8007c14:	1dfb      	adds	r3, r7, #7
 8007c16:	781b      	ldrb	r3, [r3, #0]
 8007c18:	4a0f      	ldr	r2, [pc, #60]	@ (8007c58 <SGP_DeviceConnected+0x74>)
 8007c1a:	5cd3      	ldrb	r3, [r2, r3]
 8007c1c:	4a0f      	ldr	r2, [pc, #60]	@ (8007c5c <SGP_DeviceConnected+0x78>)
 8007c1e:	4910      	ldr	r1, [pc, #64]	@ (8007c60 <SGP_DeviceConnected+0x7c>)
 8007c20:	9300      	str	r3, [sp, #0]
 8007c22:	0003      	movs	r3, r0
 8007c24:	2002      	movs	r0, #2
 8007c26:	f000 fe27 	bl	8008878 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8007c2a:	1dfb      	adds	r3, r7, #7
 8007c2c:	781a      	ldrb	r2, [r3, #0]
 8007c2e:	1dfb      	adds	r3, r7, #7
 8007c30:	3201      	adds	r2, #1
 8007c32:	701a      	strb	r2, [r3, #0]
 8007c34:	1dfb      	adds	r3, r7, #7
 8007c36:	781b      	ldrb	r3, [r3, #0]
 8007c38:	2b08      	cmp	r3, #8
 8007c3a:	d9e9      	bls.n	8007c10 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8007c3c:	4b06      	ldr	r3, [pc, #24]	@ (8007c58 <SGP_DeviceConnected+0x74>)
 8007c3e:	2203      	movs	r2, #3
 8007c40:	2109      	movs	r1, #9
 8007c42:	0018      	movs	r0, r3
 8007c44:	f000 f80e 	bl	8007c64 <CheckCRC>
 8007c48:	0003      	movs	r3, r0
}
 8007c4a:	0018      	movs	r0, r3
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	b002      	add	sp, #8
 8007c50:	bd80      	pop	{r7, pc}
 8007c52:	46c0      	nop			@ (mov r8, r8)
 8007c54:	2000011c 	.word	0x2000011c
 8007c58:	20001b58 	.word	0x20001b58
 8007c5c:	0801b090 	.word	0x0801b090
 8007c60:	0801b000 	.word	0x0801b000

08007c64 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8007c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007c66:	b08f      	sub	sp, #60	@ 0x3c
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c6c:	0008      	movs	r0, r1
 8007c6e:	0011      	movs	r1, r2
 8007c70:	2323      	movs	r3, #35	@ 0x23
 8007c72:	18fb      	adds	r3, r7, r3
 8007c74:	1c02      	adds	r2, r0, #0
 8007c76:	701a      	strb	r2, [r3, #0]
 8007c78:	2322      	movs	r3, #34	@ 0x22
 8007c7a:	18fb      	adds	r3, r7, r3
 8007c7c:	1c0a      	adds	r2, r1, #0
 8007c7e:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007c80:	2317      	movs	r3, #23
 8007c82:	2220      	movs	r2, #32
 8007c84:	189b      	adds	r3, r3, r2
 8007c86:	19db      	adds	r3, r3, r7
 8007c88:	2200      	movs	r2, #0
 8007c8a:	701a      	strb	r2, [r3, #0]
 8007c8c:	e09f      	b.n	8007dce <CheckCRC+0x16a>
 8007c8e:	466b      	mov	r3, sp
 8007c90:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 8007c92:	2322      	movs	r3, #34	@ 0x22
 8007c94:	18fb      	adds	r3, r7, r3
 8007c96:	781b      	ldrb	r3, [r3, #0]
 8007c98:	001a      	movs	r2, r3
 8007c9a:	3a01      	subs	r2, #1
 8007c9c:	633a      	str	r2, [r7, #48]	@ 0x30
 8007c9e:	60bb      	str	r3, [r7, #8]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	60fa      	str	r2, [r7, #12]
 8007ca4:	68b8      	ldr	r0, [r7, #8]
 8007ca6:	68f9      	ldr	r1, [r7, #12]
 8007ca8:	0002      	movs	r2, r0
 8007caa:	0f52      	lsrs	r2, r2, #29
 8007cac:	000c      	movs	r4, r1
 8007cae:	00e4      	lsls	r4, r4, #3
 8007cb0:	61fc      	str	r4, [r7, #28]
 8007cb2:	69fc      	ldr	r4, [r7, #28]
 8007cb4:	4314      	orrs	r4, r2
 8007cb6:	61fc      	str	r4, [r7, #28]
 8007cb8:	0002      	movs	r2, r0
 8007cba:	00d2      	lsls	r2, r2, #3
 8007cbc:	61ba      	str	r2, [r7, #24]
 8007cbe:	603b      	str	r3, [r7, #0]
 8007cc0:	2200      	movs	r2, #0
 8007cc2:	607a      	str	r2, [r7, #4]
 8007cc4:	6838      	ldr	r0, [r7, #0]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	0002      	movs	r2, r0
 8007cca:	0f52      	lsrs	r2, r2, #29
 8007ccc:	000c      	movs	r4, r1
 8007cce:	00e4      	lsls	r4, r4, #3
 8007cd0:	617c      	str	r4, [r7, #20]
 8007cd2:	697c      	ldr	r4, [r7, #20]
 8007cd4:	4314      	orrs	r4, r2
 8007cd6:	617c      	str	r4, [r7, #20]
 8007cd8:	0002      	movs	r2, r0
 8007cda:	00d2      	lsls	r2, r2, #3
 8007cdc:	613a      	str	r2, [r7, #16]
 8007cde:	3307      	adds	r3, #7
 8007ce0:	08db      	lsrs	r3, r3, #3
 8007ce2:	00db      	lsls	r3, r3, #3
 8007ce4:	466a      	mov	r2, sp
 8007ce6:	1ad3      	subs	r3, r2, r3
 8007ce8:	469d      	mov	sp, r3
 8007cea:	466b      	mov	r3, sp
 8007cec:	3300      	adds	r3, #0
 8007cee:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8007cf0:	2316      	movs	r3, #22
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	189b      	adds	r3, r3, r2
 8007cf6:	19db      	adds	r3, r3, r7
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	e01e      	b.n	8007d3c <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8007cfe:	2317      	movs	r3, #23
 8007d00:	2220      	movs	r2, #32
 8007d02:	189b      	adds	r3, r3, r2
 8007d04:	19db      	adds	r3, r3, r7
 8007d06:	781a      	ldrb	r2, [r3, #0]
 8007d08:	2116      	movs	r1, #22
 8007d0a:	2320      	movs	r3, #32
 8007d0c:	18cb      	adds	r3, r1, r3
 8007d0e:	19db      	adds	r3, r3, r7
 8007d10:	781b      	ldrb	r3, [r3, #0]
 8007d12:	18d3      	adds	r3, r2, r3
 8007d14:	001a      	movs	r2, r3
 8007d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d18:	189a      	adds	r2, r3, r2
 8007d1a:	0008      	movs	r0, r1
 8007d1c:	2320      	movs	r3, #32
 8007d1e:	18cb      	adds	r3, r1, r3
 8007d20:	19db      	adds	r3, r3, r7
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	7811      	ldrb	r1, [r2, #0]
 8007d26:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d28:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8007d2a:	2320      	movs	r3, #32
 8007d2c:	18c3      	adds	r3, r0, r3
 8007d2e:	19db      	adds	r3, r3, r7
 8007d30:	781a      	ldrb	r2, [r3, #0]
 8007d32:	2320      	movs	r3, #32
 8007d34:	18c3      	adds	r3, r0, r3
 8007d36:	19db      	adds	r3, r3, r7
 8007d38:	3201      	adds	r2, #1
 8007d3a:	701a      	strb	r2, [r3, #0]
 8007d3c:	2316      	movs	r3, #22
 8007d3e:	2220      	movs	r2, #32
 8007d40:	189b      	adds	r3, r3, r2
 8007d42:	19da      	adds	r2, r3, r7
 8007d44:	2322      	movs	r3, #34	@ 0x22
 8007d46:	18fb      	adds	r3, r7, r3
 8007d48:	7812      	ldrb	r2, [r2, #0]
 8007d4a:	781b      	ldrb	r3, [r3, #0]
 8007d4c:	429a      	cmp	r2, r3
 8007d4e:	d3d6      	bcc.n	8007cfe <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8007d50:	2417      	movs	r4, #23
 8007d52:	2320      	movs	r3, #32
 8007d54:	18e3      	adds	r3, r4, r3
 8007d56:	19db      	adds	r3, r3, r7
 8007d58:	781a      	ldrb	r2, [r3, #0]
 8007d5a:	2322      	movs	r3, #34	@ 0x22
 8007d5c:	18fb      	adds	r3, r7, r3
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	18d3      	adds	r3, r2, r3
 8007d62:	3b01      	subs	r3, #1
 8007d64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d66:	18d2      	adds	r2, r2, r3
 8007d68:	250b      	movs	r5, #11
 8007d6a:	2320      	movs	r3, #32
 8007d6c:	18eb      	adds	r3, r5, r3
 8007d6e:	19db      	adds	r3, r3, r7
 8007d70:	7812      	ldrb	r2, [r2, #0]
 8007d72:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8007d74:	2322      	movs	r3, #34	@ 0x22
 8007d76:	18fb      	adds	r3, r7, r3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	3b01      	subs	r3, #1
 8007d7c:	b2da      	uxtb	r2, r3
 8007d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007d80:	0011      	movs	r1, r2
 8007d82:	0018      	movs	r0, r3
 8007d84:	f000 f838 	bl	8007df8 <CalculateCRC>
 8007d88:	0003      	movs	r3, r0
 8007d8a:	001a      	movs	r2, r3
 8007d8c:	2320      	movs	r3, #32
 8007d8e:	18eb      	adds	r3, r5, r3
 8007d90:	19db      	adds	r3, r3, r7
 8007d92:	781b      	ldrb	r3, [r3, #0]
 8007d94:	4293      	cmp	r3, r2
 8007d96:	d00c      	beq.n	8007db2 <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8007d98:	2320      	movs	r3, #32
 8007d9a:	18e3      	adds	r3, r4, r3
 8007d9c:	19db      	adds	r3, r3, r7
 8007d9e:	781b      	ldrb	r3, [r3, #0]
 8007da0:	3301      	adds	r3, #1
 8007da2:	4a13      	ldr	r2, [pc, #76]	@ (8007df0 <CheckCRC+0x18c>)
 8007da4:	4913      	ldr	r1, [pc, #76]	@ (8007df4 <CheckCRC+0x190>)
 8007da6:	2001      	movs	r0, #1
 8007da8:	f000 fd66 	bl	8008878 <CreateLine>
      return false;
 8007dac:	2300      	movs	r3, #0
 8007dae:	46b5      	mov	sp, r6
 8007db0:	e019      	b.n	8007de6 <CheckCRC+0x182>
 8007db2:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8007db4:	2217      	movs	r2, #23
 8007db6:	2320      	movs	r3, #32
 8007db8:	18d3      	adds	r3, r2, r3
 8007dba:	19db      	adds	r3, r3, r7
 8007dbc:	2120      	movs	r1, #32
 8007dbe:	1852      	adds	r2, r2, r1
 8007dc0:	19d1      	adds	r1, r2, r7
 8007dc2:	2222      	movs	r2, #34	@ 0x22
 8007dc4:	18ba      	adds	r2, r7, r2
 8007dc6:	7809      	ldrb	r1, [r1, #0]
 8007dc8:	7812      	ldrb	r2, [r2, #0]
 8007dca:	188a      	adds	r2, r1, r2
 8007dcc:	701a      	strb	r2, [r3, #0]
 8007dce:	2317      	movs	r3, #23
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	189b      	adds	r3, r3, r2
 8007dd4:	19da      	adds	r2, r3, r7
 8007dd6:	2323      	movs	r3, #35	@ 0x23
 8007dd8:	18fb      	adds	r3, r7, r3
 8007dda:	7812      	ldrb	r2, [r2, #0]
 8007ddc:	781b      	ldrb	r3, [r3, #0]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d200      	bcs.n	8007de4 <CheckCRC+0x180>
 8007de2:	e754      	b.n	8007c8e <CheckCRC+0x2a>
    }
  }
  return true;
 8007de4:	2301      	movs	r3, #1
}
 8007de6:	0018      	movs	r0, r3
 8007de8:	46bd      	mov	sp, r7
 8007dea:	b00f      	add	sp, #60	@ 0x3c
 8007dec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007dee:	46c0      	nop			@ (mov r8, r8)
 8007df0:	0801b0b0 	.word	0x0801b0b0
 8007df4:	0801afdc 	.word	0x0801afdc

08007df8 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
 8007e00:	000a      	movs	r2, r1
 8007e02:	1cfb      	adds	r3, r7, #3
 8007e04:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 8007e06:	230f      	movs	r3, #15
 8007e08:	18fb      	adds	r3, r7, r3
 8007e0a:	22ff      	movs	r2, #255	@ 0xff
 8007e0c:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8007e0e:	230e      	movs	r3, #14
 8007e10:	18fb      	adds	r3, r7, r3
 8007e12:	2200      	movs	r2, #0
 8007e14:	701a      	strb	r2, [r3, #0]
 8007e16:	e037      	b.n	8007e88 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8007e18:	230e      	movs	r3, #14
 8007e1a:	18fb      	adds	r3, r7, r3
 8007e1c:	781b      	ldrb	r3, [r3, #0]
 8007e1e:	687a      	ldr	r2, [r7, #4]
 8007e20:	18d3      	adds	r3, r2, r3
 8007e22:	7819      	ldrb	r1, [r3, #0]
 8007e24:	220f      	movs	r2, #15
 8007e26:	18bb      	adds	r3, r7, r2
 8007e28:	18ba      	adds	r2, r7, r2
 8007e2a:	7812      	ldrb	r2, [r2, #0]
 8007e2c:	404a      	eors	r2, r1
 8007e2e:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8007e30:	230d      	movs	r3, #13
 8007e32:	18fb      	adds	r3, r7, r3
 8007e34:	2200      	movs	r2, #0
 8007e36:	701a      	strb	r2, [r3, #0]
 8007e38:	e01b      	b.n	8007e72 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8007e3a:	210f      	movs	r1, #15
 8007e3c:	187b      	adds	r3, r7, r1
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	b25b      	sxtb	r3, r3
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	da09      	bge.n	8007e5a <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8007e46:	187b      	adds	r3, r7, r1
 8007e48:	781b      	ldrb	r3, [r3, #0]
 8007e4a:	005b      	lsls	r3, r3, #1
 8007e4c:	b25b      	sxtb	r3, r3
 8007e4e:	2231      	movs	r2, #49	@ 0x31
 8007e50:	4053      	eors	r3, r2
 8007e52:	b25a      	sxtb	r2, r3
 8007e54:	187b      	adds	r3, r7, r1
 8007e56:	701a      	strb	r2, [r3, #0]
 8007e58:	e005      	b.n	8007e66 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8007e5a:	230f      	movs	r3, #15
 8007e5c:	18fa      	adds	r2, r7, r3
 8007e5e:	18fb      	adds	r3, r7, r3
 8007e60:	781b      	ldrb	r3, [r3, #0]
 8007e62:	18db      	adds	r3, r3, r3
 8007e64:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8007e66:	210d      	movs	r1, #13
 8007e68:	187b      	adds	r3, r7, r1
 8007e6a:	781a      	ldrb	r2, [r3, #0]
 8007e6c:	187b      	adds	r3, r7, r1
 8007e6e:	3201      	adds	r2, #1
 8007e70:	701a      	strb	r2, [r3, #0]
 8007e72:	230d      	movs	r3, #13
 8007e74:	18fb      	adds	r3, r7, r3
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	2b07      	cmp	r3, #7
 8007e7a:	d9de      	bls.n	8007e3a <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8007e7c:	210e      	movs	r1, #14
 8007e7e:	187b      	adds	r3, r7, r1
 8007e80:	781a      	ldrb	r2, [r3, #0]
 8007e82:	187b      	adds	r3, r7, r1
 8007e84:	3201      	adds	r2, #1
 8007e86:	701a      	strb	r2, [r3, #0]
 8007e88:	230e      	movs	r3, #14
 8007e8a:	18fa      	adds	r2, r7, r3
 8007e8c:	1cfb      	adds	r3, r7, #3
 8007e8e:	7812      	ldrb	r2, [r2, #0]
 8007e90:	781b      	ldrb	r3, [r3, #0]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	d3c0      	bcc.n	8007e18 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8007e96:	230f      	movs	r3, #15
 8007e98:	18fb      	adds	r3, r7, r3
 8007e9a:	781b      	ldrb	r3, [r3, #0]
}
 8007e9c:	0018      	movs	r0, r3
 8007e9e:	46bd      	mov	sp, r7
 8007ea0:	b004      	add	sp, #16
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b084      	sub	sp, #16
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	6078      	str	r0, [r7, #4]
 8007eac:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	4936      	ldr	r1, [pc, #216]	@ (8007f8c <SGP_GetHT+0xe8>)
 8007eb4:	1c18      	adds	r0, r3, #0
 8007eb6:	f7f8 fcc7 	bl	8000848 <__aeabi_fadd>
 8007eba:	1c03      	adds	r3, r0, #0
 8007ebc:	4934      	ldr	r1, [pc, #208]	@ (8007f90 <SGP_GetHT+0xec>)
 8007ebe:	1c18      	adds	r0, r3, #0
 8007ec0:	f7f8 fe4c 	bl	8000b5c <__aeabi_fdiv>
 8007ec4:	1c03      	adds	r3, r0, #0
 8007ec6:	4933      	ldr	r1, [pc, #204]	@ (8007f94 <SGP_GetHT+0xf0>)
 8007ec8:	1c18      	adds	r0, r3, #0
 8007eca:	f7f9 f82d 	bl	8000f28 <__aeabi_fmul>
 8007ece:	1c03      	adds	r3, r0, #0
 8007ed0:	1c18      	adds	r0, r3, #0
 8007ed2:	f7f8 fbb7 	bl	8000644 <__aeabi_f2uiz>
 8007ed6:	0003      	movs	r3, r0
 8007ed8:	b29a      	uxth	r2, r3
 8007eda:	4b2f      	ldr	r3, [pc, #188]	@ (8007f98 <SGP_GetHT+0xf4>)
 8007edc:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	492e      	ldr	r1, [pc, #184]	@ (8007f9c <SGP_GetHT+0xf8>)
 8007ee4:	1c18      	adds	r0, r3, #0
 8007ee6:	f7f8 fe39 	bl	8000b5c <__aeabi_fdiv>
 8007eea:	1c03      	adds	r3, r0, #0
 8007eec:	4929      	ldr	r1, [pc, #164]	@ (8007f94 <SGP_GetHT+0xf0>)
 8007eee:	1c18      	adds	r0, r3, #0
 8007ef0:	f7f9 f81a 	bl	8000f28 <__aeabi_fmul>
 8007ef4:	1c03      	adds	r3, r0, #0
 8007ef6:	1c18      	adds	r0, r3, #0
 8007ef8:	f7f8 fba4 	bl	8000644 <__aeabi_f2uiz>
 8007efc:	0003      	movs	r3, r0
 8007efe:	b29a      	uxth	r2, r3
 8007f00:	4b27      	ldr	r3, [pc, #156]	@ (8007fa0 <SGP_GetHT+0xfc>)
 8007f02:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 8007f04:	4b26      	ldr	r3, [pc, #152]	@ (8007fa0 <SGP_GetHT+0xfc>)
 8007f06:	881b      	ldrh	r3, [r3, #0]
 8007f08:	0a1b      	lsrs	r3, r3, #8
 8007f0a:	b29b      	uxth	r3, r3
 8007f0c:	b2da      	uxtb	r2, r3
 8007f0e:	4b25      	ldr	r3, [pc, #148]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f10:	709a      	strb	r2, [r3, #2]
 8007f12:	4b24      	ldr	r3, [pc, #144]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f14:	789a      	ldrb	r2, [r3, #2]
 8007f16:	210c      	movs	r1, #12
 8007f18:	187b      	adds	r3, r7, r1
 8007f1a:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8007f1c:	4b20      	ldr	r3, [pc, #128]	@ (8007fa0 <SGP_GetHT+0xfc>)
 8007f1e:	881b      	ldrh	r3, [r3, #0]
 8007f20:	b2da      	uxtb	r2, r3
 8007f22:	4b20      	ldr	r3, [pc, #128]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f24:	70da      	strb	r2, [r3, #3]
 8007f26:	4b1f      	ldr	r3, [pc, #124]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f28:	78da      	ldrb	r2, [r3, #3]
 8007f2a:	187b      	adds	r3, r7, r1
 8007f2c:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8007f2e:	187b      	adds	r3, r7, r1
 8007f30:	2102      	movs	r1, #2
 8007f32:	0018      	movs	r0, r3
 8007f34:	f7ff ff60 	bl	8007df8 <CalculateCRC>
 8007f38:	0003      	movs	r3, r0
 8007f3a:	001a      	movs	r2, r3
 8007f3c:	4b19      	ldr	r3, [pc, #100]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f3e:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8007f40:	4b15      	ldr	r3, [pc, #84]	@ (8007f98 <SGP_GetHT+0xf4>)
 8007f42:	881b      	ldrh	r3, [r3, #0]
 8007f44:	0a1b      	lsrs	r3, r3, #8
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	b2da      	uxtb	r2, r3
 8007f4a:	4b16      	ldr	r3, [pc, #88]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f4c:	715a      	strb	r2, [r3, #5]
 8007f4e:	4b15      	ldr	r3, [pc, #84]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f50:	795a      	ldrb	r2, [r3, #5]
 8007f52:	2108      	movs	r1, #8
 8007f54:	187b      	adds	r3, r7, r1
 8007f56:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 8007f58:	4b0f      	ldr	r3, [pc, #60]	@ (8007f98 <SGP_GetHT+0xf4>)
 8007f5a:	881b      	ldrh	r3, [r3, #0]
 8007f5c:	b2da      	uxtb	r2, r3
 8007f5e:	4b11      	ldr	r3, [pc, #68]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f60:	719a      	strb	r2, [r3, #6]
 8007f62:	4b10      	ldr	r3, [pc, #64]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f64:	799a      	ldrb	r2, [r3, #6]
 8007f66:	187b      	adds	r3, r7, r1
 8007f68:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 8007f6a:	187b      	adds	r3, r7, r1
 8007f6c:	2102      	movs	r1, #2
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f7ff ff42 	bl	8007df8 <CalculateCRC>
 8007f74:	0003      	movs	r3, r0
 8007f76:	001a      	movs	r2, r3
 8007f78:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa4 <SGP_GetHT+0x100>)
 8007f7a:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 8007f7c:	4b0a      	ldr	r3, [pc, #40]	@ (8007fa8 <SGP_GetHT+0x104>)
 8007f7e:	2201      	movs	r2, #1
 8007f80:	701a      	strb	r2, [r3, #0]
}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	46bd      	mov	sp, r7
 8007f86:	b004      	add	sp, #16
 8007f88:	bd80      	pop	{r7, pc}
 8007f8a:	46c0      	nop			@ (mov r8, r8)
 8007f8c:	42340000 	.word	0x42340000
 8007f90:	432f0000 	.word	0x432f0000
 8007f94:	477fff00 	.word	0x477fff00
 8007f98:	20001c0a 	.word	0x20001c0a
 8007f9c:	42c80000 	.word	0x42c80000
 8007fa0:	20001c08 	.word	0x20001c08
 8007fa4:	20000128 	.word	0x20000128
 8007fa8:	20001c0c 	.word	0x20001c0c

08007fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007fac:	b580      	push	{r7, lr}
 8007fae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007fb0:	4b07      	ldr	r3, [pc, #28]	@ (8007fd0 <HAL_MspInit+0x24>)
 8007fb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8007fb4:	4b06      	ldr	r3, [pc, #24]	@ (8007fd0 <HAL_MspInit+0x24>)
 8007fb6:	2101      	movs	r1, #1
 8007fb8:	430a      	orrs	r2, r1
 8007fba:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8007fbc:	4b04      	ldr	r3, [pc, #16]	@ (8007fd0 <HAL_MspInit+0x24>)
 8007fbe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8007fc0:	4b03      	ldr	r3, [pc, #12]	@ (8007fd0 <HAL_MspInit+0x24>)
 8007fc2:	2180      	movs	r1, #128	@ 0x80
 8007fc4:	0549      	lsls	r1, r1, #21
 8007fc6:	430a      	orrs	r2, r1
 8007fc8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007fca:	46c0      	nop			@ (mov r8, r8)
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40021000 	.word	0x40021000

08007fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8007fd4:	b580      	push	{r7, lr}
 8007fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8007fd8:	46c0      	nop			@ (mov r8, r8)
 8007fda:	e7fd      	b.n	8007fd8 <NMI_Handler+0x4>

08007fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007fe0:	46c0      	nop			@ (mov r8, r8)
 8007fe2:	e7fd      	b.n	8007fe0 <HardFault_Handler+0x4>

08007fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007fe4:	b580      	push	{r7, lr}
 8007fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8007fe8:	46c0      	nop			@ (mov r8, r8)
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}

08007fee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007fee:	b580      	push	{r7, lr}
 8007ff0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ff2:	46c0      	nop			@ (mov r8, r8)
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}

08007ff8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007ffc:	f001 f822 	bl	8009044 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008000:	46c0      	nop			@ (mov r8, r8)
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
	...

08008008 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800800c:	4b05      	ldr	r3, [pc, #20]	@ (8008024 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800800e:	0018      	movs	r0, r3
 8008010:	f001 fe77 	bl	8009d02 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8008014:	4b04      	ldr	r3, [pc, #16]	@ (8008028 <DMA1_Channel2_3_IRQHandler+0x20>)
 8008016:	0018      	movs	r0, r3
 8008018:	f001 fe73 	bl	8009d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800801c:	46c0      	nop			@ (mov r8, r8)
 800801e:	46bd      	mov	sp, r7
 8008020:	bd80      	pop	{r7, pc}
 8008022:	46c0      	nop			@ (mov r8, r8)
 8008024:	20000bd4 	.word	0x20000bd4
 8008028:	20000b8c 	.word	0x20000b8c

0800802c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800802c:	b580      	push	{r7, lr}
 800802e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8008030:	4b07      	ldr	r3, [pc, #28]	@ (8008050 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 8008032:	0018      	movs	r0, r3
 8008034:	f001 fe65 	bl	8009d02 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 8008038:	4b06      	ldr	r3, [pc, #24]	@ (8008054 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800803a:	0018      	movs	r0, r3
 800803c:	f001 fe61 	bl	8009d02 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8008040:	4b05      	ldr	r3, [pc, #20]	@ (8008058 <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8008042:	0018      	movs	r0, r3
 8008044:	f001 fe5d 	bl	8009d02 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8008048:	46c0      	nop			@ (mov r8, r8)
 800804a:	46bd      	mov	sp, r7
 800804c:	bd80      	pop	{r7, pc}
 800804e:	46c0      	nop			@ (mov r8, r8)
 8008050:	20000c58 	.word	0x20000c58
 8008054:	20001e08 	.word	0x20001e08
 8008058:	20001e50 	.word	0x20001e50

0800805c <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800805c:	b580      	push	{r7, lr}
 800805e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8008060:	4b03      	ldr	r3, [pc, #12]	@ (8008070 <USART4_5_IRQHandler+0x14>)
 8008062:	0018      	movs	r0, r3
 8008064:	f008 f846 	bl	80100f4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 8008068:	46c0      	nop			@ (mov r8, r8)
 800806a:	46bd      	mov	sp, r7
 800806c:	bd80      	pop	{r7, pc}
 800806e:	46c0      	nop			@ (mov r8, r8)
 8008070:	20001d50 	.word	0x20001d50

08008074 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 8008078:	4b09      	ldr	r3, [pc, #36]	@ (80080a0 <I2C1_IRQHandler+0x2c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	699a      	ldr	r2, [r3, #24]
 800807e:	23e0      	movs	r3, #224	@ 0xe0
 8008080:	00db      	lsls	r3, r3, #3
 8008082:	4013      	ands	r3, r2
 8008084:	d004      	beq.n	8008090 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 8008086:	4b06      	ldr	r3, [pc, #24]	@ (80080a0 <I2C1_IRQHandler+0x2c>)
 8008088:	0018      	movs	r0, r3
 800808a:	f002 fc5d 	bl	800a948 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800808e:	e003      	b.n	8008098 <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8008090:	4b03      	ldr	r3, [pc, #12]	@ (80080a0 <I2C1_IRQHandler+0x2c>)
 8008092:	0018      	movs	r0, r3
 8008094:	f002 fc3e 	bl	800a914 <HAL_I2C_EV_IRQHandler>
}
 8008098:	46c0      	nop			@ (mov r8, r8)
 800809a:	46bd      	mov	sp, r7
 800809c:	bd80      	pop	{r7, pc}
 800809e:	46c0      	nop			@ (mov r8, r8)
 80080a0:	20000ae4 	.word	0x20000ae4

080080a4 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 80080a4:	b580      	push	{r7, lr}
 80080a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80080a8:	4b03      	ldr	r3, [pc, #12]	@ (80080b8 <USB_IRQHandler+0x14>)
 80080aa:	0018      	movs	r0, r3
 80080ac:	f004 fe14 	bl	800ccd8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 80080b0:	46c0      	nop			@ (mov r8, r8)
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	46c0      	nop			@ (mov r8, r8)
 80080b8:	20003380 	.word	0x20003380

080080bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80080bc:	b580      	push	{r7, lr}
 80080be:	af00      	add	r7, sp, #0
  return 1;
 80080c0:	2301      	movs	r3, #1
}
 80080c2:	0018      	movs	r0, r3
 80080c4:	46bd      	mov	sp, r7
 80080c6:	bd80      	pop	{r7, pc}

080080c8 <_kill>:

int _kill(int pid, int sig)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80080d2:	f00f fed7 	bl	8017e84 <__errno>
 80080d6:	0003      	movs	r3, r0
 80080d8:	2216      	movs	r2, #22
 80080da:	601a      	str	r2, [r3, #0]
  return -1;
 80080dc:	2301      	movs	r3, #1
 80080de:	425b      	negs	r3, r3
}
 80080e0:	0018      	movs	r0, r3
 80080e2:	46bd      	mov	sp, r7
 80080e4:	b002      	add	sp, #8
 80080e6:	bd80      	pop	{r7, pc}

080080e8 <_exit>:

void _exit (int status)
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80080f0:	2301      	movs	r3, #1
 80080f2:	425a      	negs	r2, r3
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	0011      	movs	r1, r2
 80080f8:	0018      	movs	r0, r3
 80080fa:	f7ff ffe5 	bl	80080c8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80080fe:	46c0      	nop			@ (mov r8, r8)
 8008100:	e7fd      	b.n	80080fe <_exit+0x16>

08008102 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008102:	b580      	push	{r7, lr}
 8008104:	b086      	sub	sp, #24
 8008106:	af00      	add	r7, sp, #0
 8008108:	60f8      	str	r0, [r7, #12]
 800810a:	60b9      	str	r1, [r7, #8]
 800810c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800810e:	2300      	movs	r3, #0
 8008110:	617b      	str	r3, [r7, #20]
 8008112:	e00a      	b.n	800812a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008114:	e000      	b.n	8008118 <_read+0x16>
 8008116:	bf00      	nop
 8008118:	0001      	movs	r1, r0
 800811a:	68bb      	ldr	r3, [r7, #8]
 800811c:	1c5a      	adds	r2, r3, #1
 800811e:	60ba      	str	r2, [r7, #8]
 8008120:	b2ca      	uxtb	r2, r1
 8008122:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	3301      	adds	r3, #1
 8008128:	617b      	str	r3, [r7, #20]
 800812a:	697a      	ldr	r2, [r7, #20]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	429a      	cmp	r2, r3
 8008130:	dbf0      	blt.n	8008114 <_read+0x12>
  }

  return len;
 8008132:	687b      	ldr	r3, [r7, #4]
}
 8008134:	0018      	movs	r0, r3
 8008136:	46bd      	mov	sp, r7
 8008138:	b006      	add	sp, #24
 800813a:	bd80      	pop	{r7, pc}

0800813c <_close>:
  }
  return len;
}

int _close(int file)
{
 800813c:	b580      	push	{r7, lr}
 800813e:	b082      	sub	sp, #8
 8008140:	af00      	add	r7, sp, #0
 8008142:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008144:	2301      	movs	r3, #1
 8008146:	425b      	negs	r3, r3
}
 8008148:	0018      	movs	r0, r3
 800814a:	46bd      	mov	sp, r7
 800814c:	b002      	add	sp, #8
 800814e:	bd80      	pop	{r7, pc}

08008150 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800815a:	683b      	ldr	r3, [r7, #0]
 800815c:	2280      	movs	r2, #128	@ 0x80
 800815e:	0192      	lsls	r2, r2, #6
 8008160:	605a      	str	r2, [r3, #4]
  return 0;
 8008162:	2300      	movs	r3, #0
}
 8008164:	0018      	movs	r0, r3
 8008166:	46bd      	mov	sp, r7
 8008168:	b002      	add	sp, #8
 800816a:	bd80      	pop	{r7, pc}

0800816c <_isatty>:

int _isatty(int file)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008174:	2301      	movs	r3, #1
}
 8008176:	0018      	movs	r0, r3
 8008178:	46bd      	mov	sp, r7
 800817a:	b002      	add	sp, #8
 800817c:	bd80      	pop	{r7, pc}

0800817e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	60f8      	str	r0, [r7, #12]
 8008186:	60b9      	str	r1, [r7, #8]
 8008188:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800818a:	2300      	movs	r3, #0
}
 800818c:	0018      	movs	r0, r3
 800818e:	46bd      	mov	sp, r7
 8008190:	b004      	add	sp, #16
 8008192:	bd80      	pop	{r7, pc}

08008194 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b086      	sub	sp, #24
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800819c:	4a14      	ldr	r2, [pc, #80]	@ (80081f0 <_sbrk+0x5c>)
 800819e:	4b15      	ldr	r3, [pc, #84]	@ (80081f4 <_sbrk+0x60>)
 80081a0:	1ad3      	subs	r3, r2, r3
 80081a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80081a4:	697b      	ldr	r3, [r7, #20]
 80081a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80081a8:	4b13      	ldr	r3, [pc, #76]	@ (80081f8 <_sbrk+0x64>)
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d102      	bne.n	80081b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80081b0:	4b11      	ldr	r3, [pc, #68]	@ (80081f8 <_sbrk+0x64>)
 80081b2:	4a12      	ldr	r2, [pc, #72]	@ (80081fc <_sbrk+0x68>)
 80081b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80081b6:	4b10      	ldr	r3, [pc, #64]	@ (80081f8 <_sbrk+0x64>)
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	18d3      	adds	r3, r2, r3
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	429a      	cmp	r2, r3
 80081c2:	d207      	bcs.n	80081d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80081c4:	f00f fe5e 	bl	8017e84 <__errno>
 80081c8:	0003      	movs	r3, r0
 80081ca:	220c      	movs	r2, #12
 80081cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80081ce:	2301      	movs	r3, #1
 80081d0:	425b      	negs	r3, r3
 80081d2:	e009      	b.n	80081e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80081d4:	4b08      	ldr	r3, [pc, #32]	@ (80081f8 <_sbrk+0x64>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80081da:	4b07      	ldr	r3, [pc, #28]	@ (80081f8 <_sbrk+0x64>)
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	18d2      	adds	r2, r2, r3
 80081e2:	4b05      	ldr	r3, [pc, #20]	@ (80081f8 <_sbrk+0x64>)
 80081e4:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80081e6:	68fb      	ldr	r3, [r7, #12]
}
 80081e8:	0018      	movs	r0, r3
 80081ea:	46bd      	mov	sp, r7
 80081ec:	b006      	add	sp, #24
 80081ee:	bd80      	pop	{r7, pc}
 80081f0:	20005000 	.word	0x20005000
 80081f4:	00000400 	.word	0x00000400
 80081f8:	20001c14 	.word	0x20001c14
 80081fc:	200039e0 	.word	0x200039e0

08008200 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8008204:	46c0      	nop			@ (mov r8, r8)
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}
	...

0800820c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800820c:	b580      	push	{r7, lr}
 800820e:	b086      	sub	sp, #24
 8008210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8008212:	2310      	movs	r3, #16
 8008214:	18fb      	adds	r3, r7, r3
 8008216:	0018      	movs	r0, r3
 8008218:	2308      	movs	r3, #8
 800821a:	001a      	movs	r2, r3
 800821c:	2100      	movs	r1, #0
 800821e:	f00f fdad 	bl	8017d7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8008222:	003b      	movs	r3, r7
 8008224:	0018      	movs	r0, r3
 8008226:	2310      	movs	r3, #16
 8008228:	001a      	movs	r2, r3
 800822a:	2100      	movs	r1, #0
 800822c:	f00f fda6 	bl	8017d7c <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8008230:	4b2e      	ldr	r3, [pc, #184]	@ (80082ec <MX_TIM2_Init+0xe0>)
 8008232:	2280      	movs	r2, #128	@ 0x80
 8008234:	05d2      	lsls	r2, r2, #23
 8008236:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8008238:	4b2c      	ldr	r3, [pc, #176]	@ (80082ec <MX_TIM2_Init+0xe0>)
 800823a:	2200      	movs	r2, #0
 800823c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800823e:	4b2b      	ldr	r3, [pc, #172]	@ (80082ec <MX_TIM2_Init+0xe0>)
 8008240:	2200      	movs	r2, #0
 8008242:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8008244:	4b29      	ldr	r3, [pc, #164]	@ (80082ec <MX_TIM2_Init+0xe0>)
 8008246:	4a2a      	ldr	r2, [pc, #168]	@ (80082f0 <MX_TIM2_Init+0xe4>)
 8008248:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800824a:	4b28      	ldr	r3, [pc, #160]	@ (80082ec <MX_TIM2_Init+0xe0>)
 800824c:	2200      	movs	r2, #0
 800824e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008250:	4b26      	ldr	r3, [pc, #152]	@ (80082ec <MX_TIM2_Init+0xe0>)
 8008252:	2200      	movs	r2, #0
 8008254:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8008256:	4b25      	ldr	r3, [pc, #148]	@ (80082ec <MX_TIM2_Init+0xe0>)
 8008258:	0018      	movs	r0, r3
 800825a:	f007 f9bd 	bl	800f5d8 <HAL_TIM_PWM_Init>
 800825e:	1e03      	subs	r3, r0, #0
 8008260:	d001      	beq.n	8008266 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8008262:	f7fd fc65 	bl	8005b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8008266:	2110      	movs	r1, #16
 8008268:	187b      	adds	r3, r7, r1
 800826a:	2200      	movs	r2, #0
 800826c:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800826e:	187b      	adds	r3, r7, r1
 8008270:	2200      	movs	r2, #0
 8008272:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8008274:	187a      	adds	r2, r7, r1
 8008276:	4b1d      	ldr	r3, [pc, #116]	@ (80082ec <MX_TIM2_Init+0xe0>)
 8008278:	0011      	movs	r1, r2
 800827a:	0018      	movs	r0, r3
 800827c:	f007 fcca 	bl	800fc14 <HAL_TIMEx_MasterConfigSynchronization>
 8008280:	1e03      	subs	r3, r0, #0
 8008282:	d001      	beq.n	8008288 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8008284:	f7fd fc54 	bl	8005b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8008288:	003b      	movs	r3, r7
 800828a:	2260      	movs	r2, #96	@ 0x60
 800828c:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800828e:	003b      	movs	r3, r7
 8008290:	2200      	movs	r2, #0
 8008292:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8008294:	003b      	movs	r3, r7
 8008296:	2200      	movs	r2, #0
 8008298:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800829a:	003b      	movs	r3, r7
 800829c:	2200      	movs	r2, #0
 800829e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80082a0:	0039      	movs	r1, r7
 80082a2:	4b12      	ldr	r3, [pc, #72]	@ (80082ec <MX_TIM2_Init+0xe0>)
 80082a4:	2200      	movs	r2, #0
 80082a6:	0018      	movs	r0, r3
 80082a8:	f007 fa68 	bl	800f77c <HAL_TIM_PWM_ConfigChannel>
 80082ac:	1e03      	subs	r3, r0, #0
 80082ae:	d001      	beq.n	80082b4 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 80082b0:	f7fd fc3e 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80082b4:	0039      	movs	r1, r7
 80082b6:	4b0d      	ldr	r3, [pc, #52]	@ (80082ec <MX_TIM2_Init+0xe0>)
 80082b8:	2208      	movs	r2, #8
 80082ba:	0018      	movs	r0, r3
 80082bc:	f007 fa5e 	bl	800f77c <HAL_TIM_PWM_ConfigChannel>
 80082c0:	1e03      	subs	r3, r0, #0
 80082c2:	d001      	beq.n	80082c8 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 80082c4:	f7fd fc34 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80082c8:	0039      	movs	r1, r7
 80082ca:	4b08      	ldr	r3, [pc, #32]	@ (80082ec <MX_TIM2_Init+0xe0>)
 80082cc:	220c      	movs	r2, #12
 80082ce:	0018      	movs	r0, r3
 80082d0:	f007 fa54 	bl	800f77c <HAL_TIM_PWM_ConfigChannel>
 80082d4:	1e03      	subs	r3, r0, #0
 80082d6:	d001      	beq.n	80082dc <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 80082d8:	f7fd fc2a 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80082dc:	4b03      	ldr	r3, [pc, #12]	@ (80082ec <MX_TIM2_Init+0xe0>)
 80082de:	0018      	movs	r0, r3
 80082e0:	f000 f8aa 	bl	8008438 <HAL_TIM_MspPostInit>

}
 80082e4:	46c0      	nop			@ (mov r8, r8)
 80082e6:	46bd      	mov	sp, r7
 80082e8:	b006      	add	sp, #24
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20001c18 	.word	0x20001c18
 80082f0:	0000ffff 	.word	0x0000ffff

080082f4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	b086      	sub	sp, #24
 80082f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80082fa:	2310      	movs	r3, #16
 80082fc:	18fb      	adds	r3, r7, r3
 80082fe:	0018      	movs	r0, r3
 8008300:	2308      	movs	r3, #8
 8008302:	001a      	movs	r2, r3
 8008304:	2100      	movs	r1, #0
 8008306:	f00f fd39 	bl	8017d7c <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800830a:	003b      	movs	r3, r7
 800830c:	0018      	movs	r0, r3
 800830e:	2310      	movs	r3, #16
 8008310:	001a      	movs	r2, r3
 8008312:	2100      	movs	r1, #0
 8008314:	f00f fd32 	bl	8017d7c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8008318:	4b32      	ldr	r3, [pc, #200]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 800831a:	4a33      	ldr	r2, [pc, #204]	@ (80083e8 <MX_TIM3_Init+0xf4>)
 800831c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800831e:	4b31      	ldr	r3, [pc, #196]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 8008320:	2200      	movs	r2, #0
 8008322:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008324:	4b2f      	ldr	r3, [pc, #188]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 8008326:	2200      	movs	r2, #0
 8008328:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800832a:	4b2e      	ldr	r3, [pc, #184]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 800832c:	4a2f      	ldr	r2, [pc, #188]	@ (80083ec <MX_TIM3_Init+0xf8>)
 800832e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008330:	4b2c      	ldr	r3, [pc, #176]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 8008332:	2200      	movs	r2, #0
 8008334:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8008336:	4b2b      	ldr	r3, [pc, #172]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 8008338:	2200      	movs	r2, #0
 800833a:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800833c:	4b29      	ldr	r3, [pc, #164]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 800833e:	0018      	movs	r0, r3
 8008340:	f007 f94a 	bl	800f5d8 <HAL_TIM_PWM_Init>
 8008344:	1e03      	subs	r3, r0, #0
 8008346:	d001      	beq.n	800834c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8008348:	f7fd fbf2 	bl	8005b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800834c:	2110      	movs	r1, #16
 800834e:	187b      	adds	r3, r7, r1
 8008350:	2200      	movs	r2, #0
 8008352:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8008354:	187b      	adds	r3, r7, r1
 8008356:	2200      	movs	r2, #0
 8008358:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800835a:	187a      	adds	r2, r7, r1
 800835c:	4b21      	ldr	r3, [pc, #132]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 800835e:	0011      	movs	r1, r2
 8008360:	0018      	movs	r0, r3
 8008362:	f007 fc57 	bl	800fc14 <HAL_TIMEx_MasterConfigSynchronization>
 8008366:	1e03      	subs	r3, r0, #0
 8008368:	d001      	beq.n	800836e <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800836a:	f7fd fbe1 	bl	8005b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800836e:	003b      	movs	r3, r7
 8008370:	2260      	movs	r2, #96	@ 0x60
 8008372:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8008374:	003b      	movs	r3, r7
 8008376:	2200      	movs	r2, #0
 8008378:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800837a:	003b      	movs	r3, r7
 800837c:	2200      	movs	r2, #0
 800837e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8008380:	003b      	movs	r3, r7
 8008382:	2200      	movs	r2, #0
 8008384:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8008386:	0039      	movs	r1, r7
 8008388:	4b16      	ldr	r3, [pc, #88]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 800838a:	2200      	movs	r2, #0
 800838c:	0018      	movs	r0, r3
 800838e:	f007 f9f5 	bl	800f77c <HAL_TIM_PWM_ConfigChannel>
 8008392:	1e03      	subs	r3, r0, #0
 8008394:	d001      	beq.n	800839a <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 8008396:	f7fd fbcb 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800839a:	4b12      	ldr	r3, [pc, #72]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 800839c:	2104      	movs	r1, #4
 800839e:	0018      	movs	r0, r3
 80083a0:	f007 fc96 	bl	800fcd0 <HAL_TIMEx_RemapConfig>
 80083a4:	1e03      	subs	r3, r0, #0
 80083a6:	d001      	beq.n	80083ac <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 80083a8:	f7fd fbc2 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80083ac:	0039      	movs	r1, r7
 80083ae:	4b0d      	ldr	r3, [pc, #52]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 80083b0:	2204      	movs	r2, #4
 80083b2:	0018      	movs	r0, r3
 80083b4:	f007 f9e2 	bl	800f77c <HAL_TIM_PWM_ConfigChannel>
 80083b8:	1e03      	subs	r3, r0, #0
 80083ba:	d001      	beq.n	80083c0 <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 80083bc:	f7fd fbb8 	bl	8005b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80083c0:	0039      	movs	r1, r7
 80083c2:	4b08      	ldr	r3, [pc, #32]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 80083c4:	2208      	movs	r2, #8
 80083c6:	0018      	movs	r0, r3
 80083c8:	f007 f9d8 	bl	800f77c <HAL_TIM_PWM_ConfigChannel>
 80083cc:	1e03      	subs	r3, r0, #0
 80083ce:	d001      	beq.n	80083d4 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 80083d0:	f7fd fbae 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80083d4:	4b03      	ldr	r3, [pc, #12]	@ (80083e4 <MX_TIM3_Init+0xf0>)
 80083d6:	0018      	movs	r0, r3
 80083d8:	f000 f82e 	bl	8008438 <HAL_TIM_MspPostInit>

}
 80083dc:	46c0      	nop			@ (mov r8, r8)
 80083de:	46bd      	mov	sp, r7
 80083e0:	b006      	add	sp, #24
 80083e2:	bd80      	pop	{r7, pc}
 80083e4:	20001c58 	.word	0x20001c58
 80083e8:	40000400 	.word	0x40000400
 80083ec:	0000ffff 	.word	0x0000ffff

080083f0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80083f0:	b580      	push	{r7, lr}
 80083f2:	b082      	sub	sp, #8
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	2380      	movs	r3, #128	@ 0x80
 80083fe:	05db      	lsls	r3, r3, #23
 8008400:	429a      	cmp	r2, r3
 8008402:	d106      	bne.n	8008412 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8008404:	4b0a      	ldr	r3, [pc, #40]	@ (8008430 <HAL_TIM_PWM_MspInit+0x40>)
 8008406:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008408:	4b09      	ldr	r3, [pc, #36]	@ (8008430 <HAL_TIM_PWM_MspInit+0x40>)
 800840a:	2101      	movs	r1, #1
 800840c:	430a      	orrs	r2, r1
 800840e:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8008410:	e00a      	b.n	8008428 <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	4a07      	ldr	r2, [pc, #28]	@ (8008434 <HAL_TIM_PWM_MspInit+0x44>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d105      	bne.n	8008428 <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800841c:	4b04      	ldr	r3, [pc, #16]	@ (8008430 <HAL_TIM_PWM_MspInit+0x40>)
 800841e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008420:	4b03      	ldr	r3, [pc, #12]	@ (8008430 <HAL_TIM_PWM_MspInit+0x40>)
 8008422:	2102      	movs	r1, #2
 8008424:	430a      	orrs	r2, r1
 8008426:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8008428:	46c0      	nop			@ (mov r8, r8)
 800842a:	46bd      	mov	sp, r7
 800842c:	b002      	add	sp, #8
 800842e:	bd80      	pop	{r7, pc}
 8008430:	40021000 	.word	0x40021000
 8008434:	40000400 	.word	0x40000400

08008438 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8008438:	b590      	push	{r4, r7, lr}
 800843a:	b08b      	sub	sp, #44	@ 0x2c
 800843c:	af00      	add	r7, sp, #0
 800843e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008440:	2414      	movs	r4, #20
 8008442:	193b      	adds	r3, r7, r4
 8008444:	0018      	movs	r0, r3
 8008446:	2314      	movs	r3, #20
 8008448:	001a      	movs	r2, r3
 800844a:	2100      	movs	r1, #0
 800844c:	f00f fc96 	bl	8017d7c <memset>
  if(timHandle->Instance==TIM2)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	681a      	ldr	r2, [r3, #0]
 8008454:	2380      	movs	r3, #128	@ 0x80
 8008456:	05db      	lsls	r3, r3, #23
 8008458:	429a      	cmp	r2, r3
 800845a:	d123      	bne.n	80084a4 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800845c:	4b27      	ldr	r3, [pc, #156]	@ (80084fc <HAL_TIM_MspPostInit+0xc4>)
 800845e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008460:	4b26      	ldr	r3, [pc, #152]	@ (80084fc <HAL_TIM_MspPostInit+0xc4>)
 8008462:	2101      	movs	r1, #1
 8008464:	430a      	orrs	r2, r1
 8008466:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008468:	4b24      	ldr	r3, [pc, #144]	@ (80084fc <HAL_TIM_MspPostInit+0xc4>)
 800846a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800846c:	2201      	movs	r2, #1
 800846e:	4013      	ands	r3, r2
 8008470:	613b      	str	r3, [r7, #16]
 8008472:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 8008474:	0021      	movs	r1, r4
 8008476:	187b      	adds	r3, r7, r1
 8008478:	220d      	movs	r2, #13
 800847a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800847c:	187b      	adds	r3, r7, r1
 800847e:	2202      	movs	r2, #2
 8008480:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008482:	187b      	adds	r3, r7, r1
 8008484:	2200      	movs	r2, #0
 8008486:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008488:	187b      	adds	r3, r7, r1
 800848a:	2200      	movs	r2, #0
 800848c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800848e:	187b      	adds	r3, r7, r1
 8008490:	2202      	movs	r2, #2
 8008492:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008494:	187a      	adds	r2, r7, r1
 8008496:	23a0      	movs	r3, #160	@ 0xa0
 8008498:	05db      	lsls	r3, r3, #23
 800849a:	0011      	movs	r1, r2
 800849c:	0018      	movs	r0, r3
 800849e:	f001 fd19 	bl	8009ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80084a2:	e027      	b.n	80084f4 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	4a15      	ldr	r2, [pc, #84]	@ (8008500 <HAL_TIM_MspPostInit+0xc8>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d122      	bne.n	80084f4 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80084ae:	4b13      	ldr	r3, [pc, #76]	@ (80084fc <HAL_TIM_MspPostInit+0xc4>)
 80084b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084b2:	4b12      	ldr	r3, [pc, #72]	@ (80084fc <HAL_TIM_MspPostInit+0xc4>)
 80084b4:	2104      	movs	r1, #4
 80084b6:	430a      	orrs	r2, r1
 80084b8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80084ba:	4b10      	ldr	r3, [pc, #64]	@ (80084fc <HAL_TIM_MspPostInit+0xc4>)
 80084bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80084be:	2204      	movs	r2, #4
 80084c0:	4013      	ands	r3, r2
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 80084c6:	2114      	movs	r1, #20
 80084c8:	187b      	adds	r3, r7, r1
 80084ca:	22e0      	movs	r2, #224	@ 0xe0
 80084cc:	0052      	lsls	r2, r2, #1
 80084ce:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80084d0:	187b      	adds	r3, r7, r1
 80084d2:	2202      	movs	r2, #2
 80084d4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80084d6:	187b      	adds	r3, r7, r1
 80084d8:	2200      	movs	r2, #0
 80084da:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80084dc:	187b      	adds	r3, r7, r1
 80084de:	2200      	movs	r2, #0
 80084e0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80084e2:	187b      	adds	r3, r7, r1
 80084e4:	2202      	movs	r2, #2
 80084e6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80084e8:	187b      	adds	r3, r7, r1
 80084ea:	4a06      	ldr	r2, [pc, #24]	@ (8008504 <HAL_TIM_MspPostInit+0xcc>)
 80084ec:	0019      	movs	r1, r3
 80084ee:	0010      	movs	r0, r2
 80084f0:	f001 fcf0 	bl	8009ed4 <HAL_GPIO_Init>
}
 80084f4:	46c0      	nop			@ (mov r8, r8)
 80084f6:	46bd      	mov	sp, r7
 80084f8:	b00b      	add	sp, #44	@ 0x2c
 80084fa:	bd90      	pop	{r4, r7, pc}
 80084fc:	40021000 	.word	0x40021000
 8008500:	40000400 	.word	0x40000400
 8008504:	50000800 	.word	0x50000800

08008508 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8008508:	b580      	push	{r7, lr}
 800850a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800850c:	4b16      	ldr	r3, [pc, #88]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 800850e:	4a17      	ldr	r2, [pc, #92]	@ (800856c <MX_USART1_UART_Init+0x64>)
 8008510:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8008512:	4b15      	ldr	r3, [pc, #84]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 8008514:	22e1      	movs	r2, #225	@ 0xe1
 8008516:	0252      	lsls	r2, r2, #9
 8008518:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800851a:	4b13      	ldr	r3, [pc, #76]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 800851c:	2200      	movs	r2, #0
 800851e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8008520:	4b11      	ldr	r3, [pc, #68]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 8008522:	2200      	movs	r2, #0
 8008524:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8008526:	4b10      	ldr	r3, [pc, #64]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 8008528:	2200      	movs	r2, #0
 800852a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800852c:	4b0e      	ldr	r3, [pc, #56]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 800852e:	220c      	movs	r2, #12
 8008530:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8008532:	4b0d      	ldr	r3, [pc, #52]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 8008534:	2200      	movs	r2, #0
 8008536:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8008538:	4b0b      	ldr	r3, [pc, #44]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 800853a:	2200      	movs	r2, #0
 800853c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800853e:	4b0a      	ldr	r3, [pc, #40]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 8008540:	2200      	movs	r2, #0
 8008542:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 8008544:	4b08      	ldr	r3, [pc, #32]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 8008546:	2208      	movs	r2, #8
 8008548:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800854a:	4b07      	ldr	r3, [pc, #28]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 800854c:	2280      	movs	r2, #128	@ 0x80
 800854e:	0212      	lsls	r2, r2, #8
 8008550:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8008552:	4b05      	ldr	r3, [pc, #20]	@ (8008568 <MX_USART1_UART_Init+0x60>)
 8008554:	0018      	movs	r0, r3
 8008556:	f007 fbd9 	bl	800fd0c <HAL_UART_Init>
 800855a:	1e03      	subs	r3, r0, #0
 800855c:	d001      	beq.n	8008562 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800855e:	f7fd fae7 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8008562:	46c0      	nop			@ (mov r8, r8)
 8008564:	46bd      	mov	sp, r7
 8008566:	bd80      	pop	{r7, pc}
 8008568:	20001c98 	.word	0x20001c98
 800856c:	40013800 	.word	0x40013800

08008570 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8008574:	4b14      	ldr	r3, [pc, #80]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 8008576:	4a15      	ldr	r2, [pc, #84]	@ (80085cc <MX_USART4_UART_Init+0x5c>)
 8008578:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800857a:	4b13      	ldr	r3, [pc, #76]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 800857c:	22e1      	movs	r2, #225	@ 0xe1
 800857e:	0252      	lsls	r2, r2, #9
 8008580:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8008582:	4b11      	ldr	r3, [pc, #68]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 8008584:	2200      	movs	r2, #0
 8008586:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8008588:	4b0f      	ldr	r3, [pc, #60]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 800858a:	2200      	movs	r2, #0
 800858c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800858e:	4b0e      	ldr	r3, [pc, #56]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 8008590:	2200      	movs	r2, #0
 8008592:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8008594:	4b0c      	ldr	r3, [pc, #48]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 8008596:	220c      	movs	r2, #12
 8008598:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800859a:	4b0b      	ldr	r3, [pc, #44]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 800859c:	2200      	movs	r2, #0
 800859e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80085a0:	4b09      	ldr	r3, [pc, #36]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 80085a2:	2200      	movs	r2, #0
 80085a4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80085a6:	4b08      	ldr	r3, [pc, #32]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80085ac:	4b06      	ldr	r3, [pc, #24]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 80085ae:	2200      	movs	r2, #0
 80085b0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80085b2:	4b05      	ldr	r3, [pc, #20]	@ (80085c8 <MX_USART4_UART_Init+0x58>)
 80085b4:	0018      	movs	r0, r3
 80085b6:	f007 fba9 	bl	800fd0c <HAL_UART_Init>
 80085ba:	1e03      	subs	r3, r0, #0
 80085bc:	d001      	beq.n	80085c2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 80085be:	f7fd fab7 	bl	8005b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 80085c2:	46c0      	nop			@ (mov r8, r8)
 80085c4:	46bd      	mov	sp, r7
 80085c6:	bd80      	pop	{r7, pc}
 80085c8:	20001d50 	.word	0x20001d50
 80085cc:	40004c00 	.word	0x40004c00

080085d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80085d0:	b590      	push	{r4, r7, lr}
 80085d2:	b08b      	sub	sp, #44	@ 0x2c
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085d8:	2414      	movs	r4, #20
 80085da:	193b      	adds	r3, r7, r4
 80085dc:	0018      	movs	r0, r3
 80085de:	2314      	movs	r3, #20
 80085e0:	001a      	movs	r2, r3
 80085e2:	2100      	movs	r1, #0
 80085e4:	f00f fbca 	bl	8017d7c <memset>
  if(uartHandle->Instance==USART1)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a6f      	ldr	r2, [pc, #444]	@ (80087ac <HAL_UART_MspInit+0x1dc>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d12b      	bne.n	800864a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80085f2:	4b6f      	ldr	r3, [pc, #444]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 80085f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80085f6:	4b6e      	ldr	r3, [pc, #440]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 80085f8:	2180      	movs	r1, #128	@ 0x80
 80085fa:	01c9      	lsls	r1, r1, #7
 80085fc:	430a      	orrs	r2, r1
 80085fe:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008600:	4b6b      	ldr	r3, [pc, #428]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 8008602:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008604:	4b6a      	ldr	r3, [pc, #424]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 8008606:	2101      	movs	r1, #1
 8008608:	430a      	orrs	r2, r1
 800860a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800860c:	4b68      	ldr	r3, [pc, #416]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 800860e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008610:	2201      	movs	r2, #1
 8008612:	4013      	ands	r3, r2
 8008614:	613b      	str	r3, [r7, #16]
 8008616:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008618:	193b      	adds	r3, r7, r4
 800861a:	22c0      	movs	r2, #192	@ 0xc0
 800861c:	00d2      	lsls	r2, r2, #3
 800861e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008620:	0021      	movs	r1, r4
 8008622:	187b      	adds	r3, r7, r1
 8008624:	2202      	movs	r2, #2
 8008626:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008628:	187b      	adds	r3, r7, r1
 800862a:	2200      	movs	r2, #0
 800862c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800862e:	187b      	adds	r3, r7, r1
 8008630:	2203      	movs	r2, #3
 8008632:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8008634:	187b      	adds	r3, r7, r1
 8008636:	2204      	movs	r2, #4
 8008638:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800863a:	187a      	adds	r2, r7, r1
 800863c:	23a0      	movs	r3, #160	@ 0xa0
 800863e:	05db      	lsls	r3, r3, #23
 8008640:	0011      	movs	r1, r2
 8008642:	0018      	movs	r0, r3
 8008644:	f001 fc46 	bl	8009ed4 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8008648:	e0ac      	b.n	80087a4 <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a59      	ldr	r2, [pc, #356]	@ (80087b4 <HAL_UART_MspInit+0x1e4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d000      	beq.n	8008656 <HAL_UART_MspInit+0x86>
 8008654:	e0a6      	b.n	80087a4 <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8008656:	4b56      	ldr	r3, [pc, #344]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 8008658:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800865a:	4b55      	ldr	r3, [pc, #340]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 800865c:	2180      	movs	r1, #128	@ 0x80
 800865e:	0309      	lsls	r1, r1, #12
 8008660:	430a      	orrs	r2, r1
 8008662:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008664:	4b52      	ldr	r3, [pc, #328]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 8008666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008668:	4b51      	ldr	r3, [pc, #324]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 800866a:	2101      	movs	r1, #1
 800866c:	430a      	orrs	r2, r1
 800866e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008670:	4b4f      	ldr	r3, [pc, #316]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 8008672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008674:	2201      	movs	r2, #1
 8008676:	4013      	ands	r3, r2
 8008678:	60fb      	str	r3, [r7, #12]
 800867a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800867c:	4b4c      	ldr	r3, [pc, #304]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 800867e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008680:	4b4b      	ldr	r3, [pc, #300]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 8008682:	2104      	movs	r1, #4
 8008684:	430a      	orrs	r2, r1
 8008686:	62da      	str	r2, [r3, #44]	@ 0x2c
 8008688:	4b49      	ldr	r3, [pc, #292]	@ (80087b0 <HAL_UART_MspInit+0x1e0>)
 800868a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800868c:	2204      	movs	r2, #4
 800868e:	4013      	ands	r3, r2
 8008690:	60bb      	str	r3, [r7, #8]
 8008692:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8008694:	2414      	movs	r4, #20
 8008696:	193b      	adds	r3, r7, r4
 8008698:	2202      	movs	r2, #2
 800869a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800869c:	193b      	adds	r3, r7, r4
 800869e:	2202      	movs	r2, #2
 80086a0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086a2:	193b      	adds	r3, r7, r4
 80086a4:	2200      	movs	r2, #0
 80086a6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086a8:	193b      	adds	r3, r7, r4
 80086aa:	2203      	movs	r2, #3
 80086ac:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80086ae:	193b      	adds	r3, r7, r4
 80086b0:	2206      	movs	r2, #6
 80086b2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80086b4:	193a      	adds	r2, r7, r4
 80086b6:	23a0      	movs	r3, #160	@ 0xa0
 80086b8:	05db      	lsls	r3, r3, #23
 80086ba:	0011      	movs	r1, r2
 80086bc:	0018      	movs	r0, r3
 80086be:	f001 fc09 	bl	8009ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80086c2:	0021      	movs	r1, r4
 80086c4:	187b      	adds	r3, r7, r1
 80086c6:	2280      	movs	r2, #128	@ 0x80
 80086c8:	00d2      	lsls	r2, r2, #3
 80086ca:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80086cc:	187b      	adds	r3, r7, r1
 80086ce:	2202      	movs	r2, #2
 80086d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80086d2:	187b      	adds	r3, r7, r1
 80086d4:	2200      	movs	r2, #0
 80086d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80086d8:	187b      	adds	r3, r7, r1
 80086da:	2203      	movs	r2, #3
 80086dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 80086de:	187b      	adds	r3, r7, r1
 80086e0:	2206      	movs	r2, #6
 80086e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80086e4:	187b      	adds	r3, r7, r1
 80086e6:	4a34      	ldr	r2, [pc, #208]	@ (80087b8 <HAL_UART_MspInit+0x1e8>)
 80086e8:	0019      	movs	r1, r3
 80086ea:	0010      	movs	r0, r2
 80086ec:	f001 fbf2 	bl	8009ed4 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 80086f0:	4b32      	ldr	r3, [pc, #200]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 80086f2:	4a33      	ldr	r2, [pc, #204]	@ (80087c0 <HAL_UART_MspInit+0x1f0>)
 80086f4:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 80086f6:	4b31      	ldr	r3, [pc, #196]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 80086f8:	220c      	movs	r2, #12
 80086fa:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80086fc:	4b2f      	ldr	r3, [pc, #188]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 80086fe:	2200      	movs	r2, #0
 8008700:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008702:	4b2e      	ldr	r3, [pc, #184]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 8008704:	2200      	movs	r2, #0
 8008706:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008708:	4b2c      	ldr	r3, [pc, #176]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 800870a:	2280      	movs	r2, #128	@ 0x80
 800870c:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800870e:	4b2b      	ldr	r3, [pc, #172]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 8008710:	2200      	movs	r2, #0
 8008712:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008714:	4b29      	ldr	r3, [pc, #164]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 8008716:	2200      	movs	r2, #0
 8008718:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800871a:	4b28      	ldr	r3, [pc, #160]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 800871c:	2220      	movs	r2, #32
 800871e:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8008720:	4b26      	ldr	r3, [pc, #152]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 8008722:	2200      	movs	r2, #0
 8008724:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8008726:	4b25      	ldr	r3, [pc, #148]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 8008728:	0018      	movs	r0, r3
 800872a:	f001 f927 	bl	800997c <HAL_DMA_Init>
 800872e:	1e03      	subs	r3, r0, #0
 8008730:	d001      	beq.n	8008736 <HAL_UART_MspInit+0x166>
      Error_Handler();
 8008732:	f7fd f9fd 	bl	8005b30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a20      	ldr	r2, [pc, #128]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 800873a:	675a      	str	r2, [r3, #116]	@ 0x74
 800873c:	4b1f      	ldr	r3, [pc, #124]	@ (80087bc <HAL_UART_MspInit+0x1ec>)
 800873e:	687a      	ldr	r2, [r7, #4]
 8008740:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8008742:	4b20      	ldr	r3, [pc, #128]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 8008744:	4a20      	ldr	r2, [pc, #128]	@ (80087c8 <HAL_UART_MspInit+0x1f8>)
 8008746:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8008748:	4b1e      	ldr	r3, [pc, #120]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 800874a:	220c      	movs	r2, #12
 800874c:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800874e:	4b1d      	ldr	r3, [pc, #116]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 8008750:	2210      	movs	r2, #16
 8008752:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8008754:	4b1b      	ldr	r3, [pc, #108]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 8008756:	2200      	movs	r2, #0
 8008758:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800875a:	4b1a      	ldr	r3, [pc, #104]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 800875c:	2280      	movs	r2, #128	@ 0x80
 800875e:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008760:	4b18      	ldr	r3, [pc, #96]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 8008762:	2200      	movs	r2, #0
 8008764:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8008766:	4b17      	ldr	r3, [pc, #92]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 8008768:	2200      	movs	r2, #0
 800876a:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800876c:	4b15      	ldr	r3, [pc, #84]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 800876e:	2200      	movs	r2, #0
 8008770:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8008772:	4b14      	ldr	r3, [pc, #80]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 8008774:	2200      	movs	r2, #0
 8008776:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8008778:	4b12      	ldr	r3, [pc, #72]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 800877a:	0018      	movs	r0, r3
 800877c:	f001 f8fe 	bl	800997c <HAL_DMA_Init>
 8008780:	1e03      	subs	r3, r0, #0
 8008782:	d001      	beq.n	8008788 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8008784:	f7fd f9d4 	bl	8005b30 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	4a0e      	ldr	r2, [pc, #56]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 800878c:	671a      	str	r2, [r3, #112]	@ 0x70
 800878e:	4b0d      	ldr	r3, [pc, #52]	@ (80087c4 <HAL_UART_MspInit+0x1f4>)
 8008790:	687a      	ldr	r2, [r7, #4]
 8008792:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8008794:	2200      	movs	r2, #0
 8008796:	2100      	movs	r1, #0
 8008798:	200e      	movs	r0, #14
 800879a:	f001 f8bd 	bl	8009918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800879e:	200e      	movs	r0, #14
 80087a0:	f001 f8cf 	bl	8009942 <HAL_NVIC_EnableIRQ>
}
 80087a4:	46c0      	nop			@ (mov r8, r8)
 80087a6:	46bd      	mov	sp, r7
 80087a8:	b00b      	add	sp, #44	@ 0x2c
 80087aa:	bd90      	pop	{r4, r7, pc}
 80087ac:	40013800 	.word	0x40013800
 80087b0:	40021000 	.word	0x40021000
 80087b4:	40004c00 	.word	0x40004c00
 80087b8:	50000800 	.word	0x50000800
 80087bc:	20001e08 	.word	0x20001e08
 80087c0:	4002006c 	.word	0x4002006c
 80087c4:	20001e50 	.word	0x20001e50
 80087c8:	40020080 	.word	0x40020080

080087cc <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 80087d4:	f000 fc48 	bl	8009068 <HAL_GetTick>
 80087d8:	0003      	movs	r3, r0
 80087da:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 80087dc:	4b1c      	ldr	r3, [pc, #112]	@ (8008850 <TimestampIsReached+0x84>)
 80087de:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 80087e0:	697a      	ldr	r2, [r7, #20]
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	429a      	cmp	r2, r3
 80087e6:	d307      	bcc.n	80087f8 <TimestampIsReached+0x2c>
 80087e8:	697a      	ldr	r2, [r7, #20]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	693a      	ldr	r2, [r7, #16]
 80087f0:	429a      	cmp	r2, r3
 80087f2:	d901      	bls.n	80087f8 <TimestampIsReached+0x2c>
 80087f4:	2201      	movs	r2, #1
 80087f6:	e000      	b.n	80087fa <TimestampIsReached+0x2e>
 80087f8:	2200      	movs	r2, #0
 80087fa:	230f      	movs	r3, #15
 80087fc:	18fb      	adds	r3, r7, r3
 80087fe:	701a      	strb	r2, [r3, #0]
 8008800:	781a      	ldrb	r2, [r3, #0]
 8008802:	2101      	movs	r1, #1
 8008804:	400a      	ands	r2, r1
 8008806:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	429a      	cmp	r2, r3
 800880e:	d207      	bcs.n	8008820 <TimestampIsReached+0x54>
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	1ad3      	subs	r3, r2, r3
 8008816:	693a      	ldr	r2, [r7, #16]
 8008818:	429a      	cmp	r2, r3
 800881a:	d201      	bcs.n	8008820 <TimestampIsReached+0x54>
 800881c:	2201      	movs	r2, #1
 800881e:	e000      	b.n	8008822 <TimestampIsReached+0x56>
 8008820:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8008822:	200e      	movs	r0, #14
 8008824:	183b      	adds	r3, r7, r0
 8008826:	701a      	strb	r2, [r3, #0]
 8008828:	781a      	ldrb	r2, [r3, #0]
 800882a:	2101      	movs	r1, #1
 800882c:	400a      	ands	r2, r1
 800882e:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8008830:	230f      	movs	r3, #15
 8008832:	18fb      	adds	r3, r7, r3
 8008834:	781b      	ldrb	r3, [r3, #0]
 8008836:	2b00      	cmp	r3, #0
 8008838:	d103      	bne.n	8008842 <TimestampIsReached+0x76>
 800883a:	183b      	adds	r3, r7, r0
 800883c:	781b      	ldrb	r3, [r3, #0]
 800883e:	2b00      	cmp	r3, #0
 8008840:	d001      	beq.n	8008846 <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8008842:	2301      	movs	r3, #1
 8008844:	e000      	b.n	8008848 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8008846:	2300      	movs	r3, #0
}
 8008848:	0018      	movs	r0, r3
 800884a:	46bd      	mov	sp, r7
 800884c:	b006      	add	sp, #24
 800884e:	bd80      	pop	{r7, pc}
 8008850:	7fffffff 	.word	0x7fffffff

08008854 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8008854:	b580      	push	{r7, lr}
 8008856:	b082      	sub	sp, #8
 8008858:	af00      	add	r7, sp, #0
 800885a:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800885c:	f000 fc04 	bl	8009068 <HAL_GetTick>
 8008860:	0002      	movs	r2, r0
 8008862:	4904      	ldr	r1, [pc, #16]	@ (8008874 <AddTimestamp+0x20>)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	0018      	movs	r0, r3
 8008868:	f00f f9e4 	bl	8017c34 <siprintf>
}
 800886c:	46c0      	nop			@ (mov r8, r8)
 800886e:	46bd      	mov	sp, r7
 8008870:	b002      	add	sp, #8
 8008872:	bd80      	pop	{r7, pc}
 8008874:	0801b158 	.word	0x0801b158

08008878 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8008878:	b40c      	push	{r2, r3}
 800887a:	b5b0      	push	{r4, r5, r7, lr}
 800887c:	4c2b      	ldr	r4, [pc, #172]	@ (800892c <CreateLine+0xb4>)
 800887e:	44a5      	add	sp, r4
 8008880:	af00      	add	r7, sp, #0
 8008882:	0002      	movs	r2, r0
 8008884:	6039      	str	r1, [r7, #0]
 8008886:	4b2a      	ldr	r3, [pc, #168]	@ (8008930 <CreateLine+0xb8>)
 8008888:	2182      	movs	r1, #130	@ 0x82
 800888a:	00c9      	lsls	r1, r1, #3
 800888c:	185b      	adds	r3, r3, r1
 800888e:	19db      	adds	r3, r3, r7
 8008890:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8008892:	4b28      	ldr	r3, [pc, #160]	@ (8008934 <CreateLine+0xbc>)
 8008894:	781b      	ldrb	r3, [r3, #0]
 8008896:	4a26      	ldr	r2, [pc, #152]	@ (8008930 <CreateLine+0xb8>)
 8008898:	1852      	adds	r2, r2, r1
 800889a:	19d2      	adds	r2, r2, r7
 800889c:	7812      	ldrb	r2, [r2, #0]
 800889e:	429a      	cmp	r2, r3
 80088a0:	d83b      	bhi.n	800891a <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 80088a2:	683a      	ldr	r2, [r7, #0]
 80088a4:	4924      	ldr	r1, [pc, #144]	@ (8008938 <CreateLine+0xc0>)
 80088a6:	240c      	movs	r4, #12
 80088a8:	193b      	adds	r3, r7, r4
 80088aa:	0018      	movs	r0, r3
 80088ac:	f00f f9c2 	bl	8017c34 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 80088b0:	4b20      	ldr	r3, [pc, #128]	@ (8008934 <CreateLine+0xbc>)
 80088b2:	781b      	ldrb	r3, [r3, #0]
 80088b4:	2b01      	cmp	r3, #1
 80088b6:	d909      	bls.n	80088cc <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 80088b8:	193b      	adds	r3, r7, r4
 80088ba:	0018      	movs	r0, r3
 80088bc:	f7f7 fc4c 	bl	8000158 <strlen>
 80088c0:	0002      	movs	r2, r0
 80088c2:	193b      	adds	r3, r7, r4
 80088c4:	189b      	adds	r3, r3, r2
 80088c6:	0018      	movs	r0, r3
 80088c8:	f7ff ffc4 	bl	8008854 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 80088cc:	240c      	movs	r4, #12
 80088ce:	193b      	adds	r3, r7, r4
 80088d0:	0018      	movs	r0, r3
 80088d2:	f7f7 fc41 	bl	8000158 <strlen>
 80088d6:	0003      	movs	r3, r0
 80088d8:	4918      	ldr	r1, [pc, #96]	@ (800893c <CreateLine+0xc4>)
 80088da:	187a      	adds	r2, r7, r1
 80088dc:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 80088de:	4b18      	ldr	r3, [pc, #96]	@ (8008940 <CreateLine+0xc8>)
 80088e0:	2508      	movs	r5, #8
 80088e2:	195b      	adds	r3, r3, r5
 80088e4:	19db      	adds	r3, r3, r7
 80088e6:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 80088e8:	193a      	adds	r2, r7, r4
 80088ea:	187b      	adds	r3, r7, r1
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	18d0      	adds	r0, r2, r3
 80088f0:	187b      	adds	r3, r7, r1
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	2280      	movs	r2, #128	@ 0x80
 80088f6:	00d2      	lsls	r2, r2, #3
 80088f8:	1ad3      	subs	r3, r2, r3
 80088fa:	0019      	movs	r1, r3
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	2283      	movs	r2, #131	@ 0x83
 8008900:	00d2      	lsls	r2, r2, #3
 8008902:	1952      	adds	r2, r2, r5
 8008904:	19d2      	adds	r2, r2, r7
 8008906:	6812      	ldr	r2, [r2, #0]
 8008908:	f00f fa2c 	bl	8017d64 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800890c:	193a      	adds	r2, r7, r4
 800890e:	4b0d      	ldr	r3, [pc, #52]	@ (8008944 <CreateLine+0xcc>)
 8008910:	0011      	movs	r1, r2
 8008912:	0018      	movs	r0, r3
 8008914:	f00f f97e 	bl	8017c14 <iprintf>
 8008918:	e000      	b.n	800891c <CreateLine+0xa4>
    return;
 800891a:	46c0      	nop			@ (mov r8, r8)
}
 800891c:	46bd      	mov	sp, r7
 800891e:	2382      	movs	r3, #130	@ 0x82
 8008920:	00db      	lsls	r3, r3, #3
 8008922:	449d      	add	sp, r3
 8008924:	bcb0      	pop	{r4, r5, r7}
 8008926:	bc08      	pop	{r3}
 8008928:	b002      	add	sp, #8
 800892a:	4718      	bx	r3
 800892c:	fffffbf0 	.word	0xfffffbf0
 8008930:	fffffbf7 	.word	0xfffffbf7
 8008934:	20000148 	.word	0x20000148
 8008938:	0801b164 	.word	0x0801b164
 800893c:	0000040c 	.word	0x0000040c
 8008940:	0000041c 	.word	0x0000041c
 8008944:	0801b168 	.word	0x0801b168

08008948 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8008948:	b580      	push	{r7, lr}
 800894a:	b084      	sub	sp, #16
 800894c:	af00      	add	r7, sp, #0
 800894e:	60f8      	str	r0, [r7, #12]
 8008950:	60b9      	str	r1, [r7, #8]
 8008952:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	b29a      	uxth	r2, r3
 8008958:	68b9      	ldr	r1, [r7, #8]
 800895a:	4804      	ldr	r0, [pc, #16]	@ (800896c <_write+0x24>)
 800895c:	2364      	movs	r3, #100	@ 0x64
 800895e:	f007 fa3b 	bl	800fdd8 <HAL_UART_Transmit>
  return count;
 8008962:	687b      	ldr	r3, [r7, #4]
}
 8008964:	0018      	movs	r0, r3
 8008966:	46bd      	mov	sp, r7
 8008968:	b004      	add	sp, #16
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20001c98 	.word	0x20001c98

08008970 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	0002      	movs	r2, r0
 8008978:	1dfb      	adds	r3, r7, #7
 800897a:	701a      	strb	r2, [r3, #0]
 800897c:	4b03      	ldr	r3, [pc, #12]	@ (800898c <SetVerboseLevel+0x1c>)
 800897e:	1dfa      	adds	r2, r7, #7
 8008980:	7812      	ldrb	r2, [r2, #0]
 8008982:	701a      	strb	r2, [r3, #0]
 8008984:	46c0      	nop			@ (mov r8, r8)
 8008986:	46bd      	mov	sp, r7
 8008988:	b002      	add	sp, #8
 800898a:	bd80      	pop	{r7, pc}
 800898c:	20000148 	.word	0x20000148

08008990 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8008990:	b580      	push	{r7, lr}
 8008992:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8008994:	f000 fb68 	bl	8009068 <HAL_GetTick>
 8008998:	0003      	movs	r3, r0
}
 800899a:	0018      	movs	r0, r3
 800899c:	46bd      	mov	sp, r7
 800899e:	bd80      	pop	{r7, pc}

080089a0 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 80089a0:	b580      	push	{r7, lr}
 80089a2:	b082      	sub	sp, #8
 80089a4:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 80089a6:	4a0f      	ldr	r2, [pc, #60]	@ (80089e4 <BinaryReleaseInfo+0x44>)
 80089a8:	4b0f      	ldr	r3, [pc, #60]	@ (80089e8 <BinaryReleaseInfo+0x48>)
 80089aa:	0019      	movs	r1, r3
 80089ac:	2002      	movs	r0, #2
 80089ae:	f7ff ff63 	bl	8008878 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 80089b2:	480e      	ldr	r0, [pc, #56]	@ (80089ec <BinaryReleaseInfo+0x4c>)
 80089b4:	4a0e      	ldr	r2, [pc, #56]	@ (80089f0 <BinaryReleaseInfo+0x50>)
 80089b6:	490c      	ldr	r1, [pc, #48]	@ (80089e8 <BinaryReleaseInfo+0x48>)
 80089b8:	4b0e      	ldr	r3, [pc, #56]	@ (80089f4 <BinaryReleaseInfo+0x54>)
 80089ba:	9300      	str	r3, [sp, #0]
 80089bc:	0003      	movs	r3, r0
 80089be:	2002      	movs	r0, #2
 80089c0:	f7ff ff5a 	bl	8008878 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w33a");
 80089c4:	4a0c      	ldr	r2, [pc, #48]	@ (80089f8 <BinaryReleaseInfo+0x58>)
 80089c6:	4b08      	ldr	r3, [pc, #32]	@ (80089e8 <BinaryReleaseInfo+0x48>)
 80089c8:	0019      	movs	r1, r3
 80089ca:	2002      	movs	r0, #2
 80089cc:	f7ff ff54 	bl	8008878 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 80089d0:	4b0a      	ldr	r3, [pc, #40]	@ (80089fc <BinaryReleaseInfo+0x5c>)
 80089d2:	4a0b      	ldr	r2, [pc, #44]	@ (8008a00 <BinaryReleaseInfo+0x60>)
 80089d4:	4904      	ldr	r1, [pc, #16]	@ (80089e8 <BinaryReleaseInfo+0x48>)
 80089d6:	2002      	movs	r0, #2
 80089d8:	f7ff ff4e 	bl	8008878 <CreateLine>
}
 80089dc:	46c0      	nop			@ (mov r8, r8)
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	46c0      	nop			@ (mov r8, r8)
 80089e4:	0801b170 	.word	0x0801b170
 80089e8:	0801b19c 	.word	0x0801b19c
 80089ec:	0801b1a0 	.word	0x0801b1a0
 80089f0:	0801b1ac 	.word	0x0801b1ac
 80089f4:	0801b1c0 	.word	0x0801b1c0
 80089f8:	0801b1cc 	.word	0x0801b1cc
 80089fc:	0801b1d8 	.word	0x0801b1d8
 8008a00:	0801b1e0 	.word	0x0801b1e0

08008a04 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008a04:	b590      	push	{r4, r7, lr}
 8008a06:	b083      	sub	sp, #12
 8008a08:	af00      	add	r7, sp, #0
 8008a0a:	6039      	str	r1, [r7, #0]
 8008a0c:	0011      	movs	r1, r2
 8008a0e:	1dfb      	adds	r3, r7, #7
 8008a10:	1c02      	adds	r2, r0, #0
 8008a12:	701a      	strb	r2, [r3, #0]
 8008a14:	1dbb      	adds	r3, r7, #6
 8008a16:	1c0a      	adds	r2, r1, #0
 8008a18:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8008a1a:	4b08      	ldr	r3, [pc, #32]	@ (8008a3c <ReadRegister+0x38>)
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d008      	beq.n	8008a34 <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8008a22:	4b06      	ldr	r3, [pc, #24]	@ (8008a3c <ReadRegister+0x38>)
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	1dba      	adds	r2, r7, #6
 8008a28:	7814      	ldrb	r4, [r2, #0]
 8008a2a:	6839      	ldr	r1, [r7, #0]
 8008a2c:	1dfa      	adds	r2, r7, #7
 8008a2e:	7810      	ldrb	r0, [r2, #0]
 8008a30:	0022      	movs	r2, r4
 8008a32:	4798      	blx	r3
	}
}
 8008a34:	46c0      	nop			@ (mov r8, r8)
 8008a36:	46bd      	mov	sp, r7
 8008a38:	b003      	add	sp, #12
 8008a3a:	bd90      	pop	{r4, r7, pc}
 8008a3c:	20001e98 	.word	0x20001e98

08008a40 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8008a40:	b590      	push	{r4, r7, lr}
 8008a42:	b083      	sub	sp, #12
 8008a44:	af00      	add	r7, sp, #0
 8008a46:	6039      	str	r1, [r7, #0]
 8008a48:	0011      	movs	r1, r2
 8008a4a:	1dfb      	adds	r3, r7, #7
 8008a4c:	1c02      	adds	r2, r0, #0
 8008a4e:	701a      	strb	r2, [r3, #0]
 8008a50:	1dbb      	adds	r3, r7, #6
 8008a52:	1c0a      	adds	r2, r1, #0
 8008a54:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008a56:	4b08      	ldr	r3, [pc, #32]	@ (8008a78 <WriteRegister+0x38>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d008      	beq.n	8008a70 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008a5e:	4b06      	ldr	r3, [pc, #24]	@ (8008a78 <WriteRegister+0x38>)
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	1dba      	adds	r2, r7, #6
 8008a64:	7814      	ldrb	r4, [r2, #0]
 8008a66:	6839      	ldr	r1, [r7, #0]
 8008a68:	1dfa      	adds	r2, r7, #7
 8008a6a:	7810      	ldrb	r0, [r2, #0]
 8008a6c:	0022      	movs	r2, r4
 8008a6e:	4798      	blx	r3
  }
}
 8008a70:	46c0      	nop			@ (mov r8, r8)
 8008a72:	46bd      	mov	sp, r7
 8008a74:	b003      	add	sp, #12
 8008a76:	bd90      	pop	{r4, r7, pc}
 8008a78:	20001e9c 	.word	0x20001e9c

08008a7c <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8008a7c:	b580      	push	{r7, lr}
 8008a7e:	b084      	sub	sp, #16
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	000a      	movs	r2, r1
 8008a86:	1cfb      	adds	r3, r7, #3
 8008a88:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8008a8a:	230f      	movs	r3, #15
 8008a8c:	18fb      	adds	r3, r7, r3
 8008a8e:	22ff      	movs	r2, #255	@ 0xff
 8008a90:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8008a92:	230e      	movs	r3, #14
 8008a94:	18fb      	adds	r3, r7, r3
 8008a96:	2200      	movs	r2, #0
 8008a98:	701a      	strb	r2, [r3, #0]
 8008a9a:	e037      	b.n	8008b0c <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8008a9c:	230e      	movs	r3, #14
 8008a9e:	18fb      	adds	r3, r7, r3
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	687a      	ldr	r2, [r7, #4]
 8008aa4:	18d3      	adds	r3, r2, r3
 8008aa6:	7819      	ldrb	r1, [r3, #0]
 8008aa8:	220f      	movs	r2, #15
 8008aaa:	18bb      	adds	r3, r7, r2
 8008aac:	18ba      	adds	r2, r7, r2
 8008aae:	7812      	ldrb	r2, [r2, #0]
 8008ab0:	404a      	eors	r2, r1
 8008ab2:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8008ab4:	230d      	movs	r3, #13
 8008ab6:	18fb      	adds	r3, r7, r3
 8008ab8:	2200      	movs	r2, #0
 8008aba:	701a      	strb	r2, [r3, #0]
 8008abc:	e01b      	b.n	8008af6 <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8008abe:	210f      	movs	r1, #15
 8008ac0:	187b      	adds	r3, r7, r1
 8008ac2:	781b      	ldrb	r3, [r3, #0]
 8008ac4:	b25b      	sxtb	r3, r3
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	da09      	bge.n	8008ade <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8008aca:	187b      	adds	r3, r7, r1
 8008acc:	781b      	ldrb	r3, [r3, #0]
 8008ace:	005b      	lsls	r3, r3, #1
 8008ad0:	b25b      	sxtb	r3, r3
 8008ad2:	2231      	movs	r2, #49	@ 0x31
 8008ad4:	4053      	eors	r3, r2
 8008ad6:	b25a      	sxtb	r2, r3
 8008ad8:	187b      	adds	r3, r7, r1
 8008ada:	701a      	strb	r2, [r3, #0]
 8008adc:	e005      	b.n	8008aea <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8008ade:	230f      	movs	r3, #15
 8008ae0:	18fa      	adds	r2, r7, r3
 8008ae2:	18fb      	adds	r3, r7, r3
 8008ae4:	781b      	ldrb	r3, [r3, #0]
 8008ae6:	18db      	adds	r3, r3, r3
 8008ae8:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8008aea:	210d      	movs	r1, #13
 8008aec:	187b      	adds	r3, r7, r1
 8008aee:	781a      	ldrb	r2, [r3, #0]
 8008af0:	187b      	adds	r3, r7, r1
 8008af2:	3201      	adds	r2, #1
 8008af4:	701a      	strb	r2, [r3, #0]
 8008af6:	230d      	movs	r3, #13
 8008af8:	18fb      	adds	r3, r7, r3
 8008afa:	781b      	ldrb	r3, [r3, #0]
 8008afc:	2b07      	cmp	r3, #7
 8008afe:	d9de      	bls.n	8008abe <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8008b00:	210e      	movs	r1, #14
 8008b02:	187b      	adds	r3, r7, r1
 8008b04:	781a      	ldrb	r2, [r3, #0]
 8008b06:	187b      	adds	r3, r7, r1
 8008b08:	3201      	adds	r2, #1
 8008b0a:	701a      	strb	r2, [r3, #0]
 8008b0c:	230e      	movs	r3, #14
 8008b0e:	18fa      	adds	r2, r7, r3
 8008b10:	1cfb      	adds	r3, r7, #3
 8008b12:	7812      	ldrb	r2, [r2, #0]
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	429a      	cmp	r2, r3
 8008b18:	d3c0      	bcc.n	8008a9c <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 8008b1a:	230f      	movs	r3, #15
 8008b1c:	18fb      	adds	r3, r7, r3
 8008b1e:	781b      	ldrb	r3, [r3, #0]
}
 8008b20:	0018      	movs	r0, r3
 8008b22:	46bd      	mov	sp, r7
 8008b24:	b004      	add	sp, #16
 8008b26:	bd80      	pop	{r7, pc}

08008b28 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008b28:	b580      	push	{r7, lr}
 8008b2a:	b082      	sub	sp, #8
 8008b2c:	af00      	add	r7, sp, #0
 8008b2e:	6078      	str	r0, [r7, #4]
 8008b30:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 8008b32:	4b0a      	ldr	r3, [pc, #40]	@ (8008b5c <HIDS_Init+0x34>)
 8008b34:	687a      	ldr	r2, [r7, #4]
 8008b36:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 8008b38:	4b09      	ldr	r3, [pc, #36]	@ (8008b60 <HIDS_Init+0x38>)
 8008b3a:	683a      	ldr	r2, [r7, #0]
 8008b3c:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 8008b3e:	4b09      	ldr	r3, [pc, #36]	@ (8008b64 <HIDS_Init+0x3c>)
 8008b40:	781b      	ldrb	r3, [r3, #0]
 8008b42:	0018      	movs	r0, r3
 8008b44:	f000 f8d0 	bl	8008ce8 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 8008b48:	4b07      	ldr	r3, [pc, #28]	@ (8008b68 <HIDS_Init+0x40>)
 8008b4a:	781b      	ldrb	r3, [r3, #0]
 8008b4c:	0018      	movs	r0, r3
 8008b4e:	f000 f82b 	bl	8008ba8 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 8008b52:	46c0      	nop			@ (mov r8, r8)
 8008b54:	46bd      	mov	sp, r7
 8008b56:	b002      	add	sp, #8
 8008b58:	bd80      	pop	{r7, pc}
 8008b5a:	46c0      	nop			@ (mov r8, r8)
 8008b5c:	20001e98 	.word	0x20001e98
 8008b60:	20001e9c 	.word	0x20001e9c
 8008b64:	2000014a 	.word	0x2000014a
 8008b68:	20000149 	.word	0x20000149

08008b6c <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8008b70:	f7ff ff0e 	bl	8008990 <GetCurrentHalTicks>
 8008b74:	0002      	movs	r2, r0
 8008b76:	4b08      	ldr	r3, [pc, #32]	@ (8008b98 <HIDS_StartMeasurement+0x2c>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	18d2      	adds	r2, r2, r3
 8008b7c:	4b07      	ldr	r3, [pc, #28]	@ (8008b9c <HIDS_StartMeasurement+0x30>)
 8008b7e:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8008b80:	4b07      	ldr	r3, [pc, #28]	@ (8008ba0 <HIDS_StartMeasurement+0x34>)
 8008b82:	2201      	movs	r2, #1
 8008b84:	0019      	movs	r1, r3
 8008b86:	2044      	movs	r0, #68	@ 0x44
 8008b88:	f7ff ff5a 	bl	8008a40 <WriteRegister>
  MeasurementDone = false;
 8008b8c:	4b05      	ldr	r3, [pc, #20]	@ (8008ba4 <HIDS_StartMeasurement+0x38>)
 8008b8e:	2200      	movs	r2, #0
 8008b90:	701a      	strb	r2, [r3, #0]
}
 8008b92:	46c0      	nop			@ (mov r8, r8)
 8008b94:	46bd      	mov	sp, r7
 8008b96:	bd80      	pop	{r7, pc}
 8008b98:	20000150 	.word	0x20000150
 8008b9c:	2000014c 	.word	0x2000014c
 8008ba0:	2000014a 	.word	0x2000014a
 8008ba4:	20001eae 	.word	0x20001eae

08008ba8 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b082      	sub	sp, #8
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	0002      	movs	r2, r0
 8008bb0:	1dfb      	adds	r3, r7, #7
 8008bb2:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 8008bb4:	4b03      	ldr	r3, [pc, #12]	@ (8008bc4 <HIDS_SetHeaterMode+0x1c>)
 8008bb6:	1dfa      	adds	r2, r7, #7
 8008bb8:	7812      	ldrb	r2, [r2, #0]
 8008bba:	701a      	strb	r2, [r3, #0]
}
 8008bbc:	46c0      	nop			@ (mov r8, r8)
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	b002      	add	sp, #8
 8008bc2:	bd80      	pop	{r7, pc}
 8008bc4:	20000149 	.word	0x20000149

08008bc8 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8008bc8:	b590      	push	{r4, r7, lr}
 8008bca:	b085      	sub	sp, #20
 8008bcc:	af00      	add	r7, sp, #0
 8008bce:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	781a      	ldrb	r2, [r3, #0]
 8008bd4:	210c      	movs	r1, #12
 8008bd6:	187b      	adds	r3, r7, r1
 8008bd8:	701a      	strb	r2, [r3, #0]
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	785a      	ldrb	r2, [r3, #1]
 8008bde:	187b      	adds	r3, r7, r1
 8008be0:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 8008be2:	240f      	movs	r4, #15
 8008be4:	193b      	adds	r3, r7, r4
 8008be6:	687a      	ldr	r2, [r7, #4]
 8008be8:	7892      	ldrb	r2, [r2, #2]
 8008bea:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8008bec:	187b      	adds	r3, r7, r1
 8008bee:	2102      	movs	r1, #2
 8008bf0:	0018      	movs	r0, r3
 8008bf2:	f7ff ff43 	bl	8008a7c <CalculateCRC>
 8008bf6:	0003      	movs	r3, r0
 8008bf8:	001a      	movs	r2, r3
 8008bfa:	193b      	adds	r3, r7, r4
 8008bfc:	781b      	ldrb	r3, [r3, #0]
 8008bfe:	4293      	cmp	r3, r2
 8008c00:	d007      	beq.n	8008c12 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 8008c02:	4a17      	ldr	r2, [pc, #92]	@ (8008c60 <CheckCRC+0x98>)
 8008c04:	4b17      	ldr	r3, [pc, #92]	@ (8008c64 <CheckCRC+0x9c>)
 8008c06:	0019      	movs	r1, r3
 8008c08:	2001      	movs	r0, #1
 8008c0a:	f7ff fe35 	bl	8008878 <CreateLine>
		return false;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e021      	b.n	8008c56 <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	78da      	ldrb	r2, [r3, #3]
 8008c16:	2108      	movs	r1, #8
 8008c18:	187b      	adds	r3, r7, r1
 8008c1a:	701a      	strb	r2, [r3, #0]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	791a      	ldrb	r2, [r3, #4]
 8008c20:	187b      	adds	r3, r7, r1
 8008c22:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 8008c24:	240e      	movs	r4, #14
 8008c26:	193b      	adds	r3, r7, r4
 8008c28:	687a      	ldr	r2, [r7, #4]
 8008c2a:	7952      	ldrb	r2, [r2, #5]
 8008c2c:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 8008c2e:	187b      	adds	r3, r7, r1
 8008c30:	2102      	movs	r1, #2
 8008c32:	0018      	movs	r0, r3
 8008c34:	f7ff ff22 	bl	8008a7c <CalculateCRC>
 8008c38:	0003      	movs	r3, r0
 8008c3a:	001a      	movs	r2, r3
 8008c3c:	193b      	adds	r3, r7, r4
 8008c3e:	781b      	ldrb	r3, [r3, #0]
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d007      	beq.n	8008c54 <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 8008c44:	4a08      	ldr	r2, [pc, #32]	@ (8008c68 <CheckCRC+0xa0>)
 8008c46:	4b07      	ldr	r3, [pc, #28]	@ (8008c64 <CheckCRC+0x9c>)
 8008c48:	0019      	movs	r1, r3
 8008c4a:	2001      	movs	r0, #1
 8008c4c:	f7ff fe14 	bl	8008878 <CreateLine>
		return false;
 8008c50:	2300      	movs	r3, #0
 8008c52:	e000      	b.n	8008c56 <CheckCRC+0x8e>
	}
	return true;
 8008c54:	2301      	movs	r3, #1
}
 8008c56:	0018      	movs	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b005      	add	sp, #20
 8008c5c:	bd90      	pop	{r4, r7, pc}
 8008c5e:	46c0      	nop			@ (mov r8, r8)
 8008c60:	0801b21c 	.word	0x0801b21c
 8008c64:	0801b244 	.word	0x0801b244
 8008c68:	0801b248 	.word	0x0801b248

08008c6c <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8008c6c:	b580      	push	{r7, lr}
 8008c6e:	b084      	sub	sp, #16
 8008c70:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 8008c72:	1dbb      	adds	r3, r7, #6
 8008c74:	2289      	movs	r2, #137	@ 0x89
 8008c76:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8008c78:	1dbb      	adds	r3, r7, #6
 8008c7a:	2201      	movs	r2, #1
 8008c7c:	0019      	movs	r1, r3
 8008c7e:	2044      	movs	r0, #68	@ 0x44
 8008c80:	f7ff fede 	bl	8008a40 <WriteRegister>
	HAL_Delay(30);
 8008c84:	201e      	movs	r0, #30
 8008c86:	f000 f9f9 	bl	800907c <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8008c8a:	4b14      	ldr	r3, [pc, #80]	@ (8008cdc <HIDS_DeviceConnected+0x70>)
 8008c8c:	2206      	movs	r2, #6
 8008c8e:	0019      	movs	r1, r3
 8008c90:	2044      	movs	r0, #68	@ 0x44
 8008c92:	f7ff feb7 	bl	8008a04 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008c96:	1dfb      	adds	r3, r7, #7
 8008c98:	2200      	movs	r2, #0
 8008c9a:	701a      	strb	r2, [r3, #0]
 8008c9c:	e011      	b.n	8008cc2 <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8008c9e:	1dfb      	adds	r3, r7, #7
 8008ca0:	7818      	ldrb	r0, [r3, #0]
 8008ca2:	1dfb      	adds	r3, r7, #7
 8008ca4:	781b      	ldrb	r3, [r3, #0]
 8008ca6:	4a0d      	ldr	r2, [pc, #52]	@ (8008cdc <HIDS_DeviceConnected+0x70>)
 8008ca8:	5cd3      	ldrb	r3, [r2, r3]
 8008caa:	4a0d      	ldr	r2, [pc, #52]	@ (8008ce0 <HIDS_DeviceConnected+0x74>)
 8008cac:	490d      	ldr	r1, [pc, #52]	@ (8008ce4 <HIDS_DeviceConnected+0x78>)
 8008cae:	9300      	str	r3, [sp, #0]
 8008cb0:	0003      	movs	r3, r0
 8008cb2:	2002      	movs	r0, #2
 8008cb4:	f7ff fde0 	bl	8008878 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8008cb8:	1dfb      	adds	r3, r7, #7
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	1dfb      	adds	r3, r7, #7
 8008cbe:	3201      	adds	r2, #1
 8008cc0:	701a      	strb	r2, [r3, #0]
 8008cc2:	1dfb      	adds	r3, r7, #7
 8008cc4:	781b      	ldrb	r3, [r3, #0]
 8008cc6:	2b05      	cmp	r3, #5
 8008cc8:	d9e9      	bls.n	8008c9e <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8008cca:	4b04      	ldr	r3, [pc, #16]	@ (8008cdc <HIDS_DeviceConnected+0x70>)
 8008ccc:	0018      	movs	r0, r3
 8008cce:	f7ff ff7b 	bl	8008bc8 <CheckCRC>
 8008cd2:	0003      	movs	r3, r0
}
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b002      	add	sp, #8
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	20001ea0 	.word	0x20001ea0
 8008ce0:	0801b274 	.word	0x0801b274
 8008ce4:	0801b218 	.word	0x0801b218

08008ce8 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b082      	sub	sp, #8
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	0002      	movs	r2, r0
 8008cf0:	1dfb      	adds	r3, r7, #7
 8008cf2:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 8008cf4:	4b03      	ldr	r3, [pc, #12]	@ (8008d04 <HIDS_SetMeasurementMode+0x1c>)
 8008cf6:	1dfa      	adds	r2, r7, #7
 8008cf8:	7812      	ldrb	r2, [r2, #0]
 8008cfa:	701a      	strb	r2, [r3, #0]
}
 8008cfc:	46c0      	nop			@ (mov r8, r8)
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	b002      	add	sp, #8
 8008d02:	bd80      	pop	{r7, pc}
 8008d04:	2000014a 	.word	0x2000014a

08008d08 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 8008d08:	b580      	push	{r7, lr}
 8008d0a:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 8008d0c:	4b04      	ldr	r3, [pc, #16]	@ (8008d20 <HIDS_MeasurementReady+0x18>)
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	0018      	movs	r0, r3
 8008d12:	f7ff fd5b 	bl	80087cc <TimestampIsReached>
 8008d16:	0003      	movs	r3, r0
}
 8008d18:	0018      	movs	r0, r3
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	bd80      	pop	{r7, pc}
 8008d1e:	46c0      	nop			@ (mov r8, r8)
 8008d20:	2000014c 	.word	0x2000014c

08008d24 <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b08c      	sub	sp, #48	@ 0x30
 8008d28:	af02      	add	r7, sp, #8
 8008d2a:	6078      	str	r0, [r7, #4]
 8008d2c:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 8008d2e:	4b7a      	ldr	r3, [pc, #488]	@ (8008f18 <HIDS_GetMeasurementValues+0x1f4>)
 8008d30:	781b      	ldrb	r3, [r3, #0]
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d001      	beq.n	8008d3a <HIDS_GetMeasurementValues+0x16>
 8008d36:	2301      	movs	r3, #1
 8008d38:	e0ea      	b.n	8008f10 <HIDS_GetMeasurementValues+0x1ec>
  if(!HIDS_MeasurementReady()) return false;
 8008d3a:	f7ff ffe5 	bl	8008d08 <HIDS_MeasurementReady>
 8008d3e:	0003      	movs	r3, r0
 8008d40:	001a      	movs	r2, r3
 8008d42:	2301      	movs	r3, #1
 8008d44:	4053      	eors	r3, r2
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	2b00      	cmp	r3, #0
 8008d4a:	d001      	beq.n	8008d50 <HIDS_GetMeasurementValues+0x2c>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e0df      	b.n	8008f10 <HIDS_GetMeasurementValues+0x1ec>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 8008d50:	4b72      	ldr	r3, [pc, #456]	@ (8008f1c <HIDS_GetMeasurementValues+0x1f8>)
 8008d52:	681a      	ldr	r2, [r3, #0]
 8008d54:	4b72      	ldr	r3, [pc, #456]	@ (8008f20 <HIDS_GetMeasurementValues+0x1fc>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	0019      	movs	r1, r3
 8008d5a:	0010      	movs	r0, r2
 8008d5c:	f7f7 fa18 	bl	8000190 <__udivsi3>
 8008d60:	0003      	movs	r3, r0
 8008d62:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 8008d64:	4b6f      	ldr	r3, [pc, #444]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	1c58      	adds	r0, r3, #1
 8008d6a:	4a6f      	ldr	r2, [pc, #444]	@ (8008f28 <HIDS_GetMeasurementValues+0x204>)
 8008d6c:	496f      	ldr	r1, [pc, #444]	@ (8008f2c <HIDS_GetMeasurementValues+0x208>)
 8008d6e:	697b      	ldr	r3, [r7, #20]
 8008d70:	9300      	str	r3, [sp, #0]
 8008d72:	0003      	movs	r3, r0
 8008d74:	2003      	movs	r0, #3
 8008d76:	f7ff fd7f 	bl	8008878 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8008d7a:	4b6d      	ldr	r3, [pc, #436]	@ (8008f30 <HIDS_GetMeasurementValues+0x20c>)
 8008d7c:	2206      	movs	r2, #6
 8008d7e:	0019      	movs	r1, r3
 8008d80:	2044      	movs	r0, #68	@ 0x44
 8008d82:	f7ff fe3f 	bl	8008a04 <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 8008d86:	4b6a      	ldr	r3, [pc, #424]	@ (8008f30 <HIDS_GetMeasurementValues+0x20c>)
 8008d88:	0018      	movs	r0, r3
 8008d8a:	f7ff ff1d 	bl	8008bc8 <CheckCRC>
 8008d8e:	0003      	movs	r3, r0
 8008d90:	001a      	movs	r2, r3
 8008d92:	2301      	movs	r3, #1
 8008d94:	4053      	eors	r3, r2
 8008d96:	b2db      	uxtb	r3, r3
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d011      	beq.n	8008dc0 <HIDS_GetMeasurementValues+0x9c>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8008d9c:	2327      	movs	r3, #39	@ 0x27
 8008d9e:	18fb      	adds	r3, r7, r3
 8008da0:	2200      	movs	r2, #0
 8008da2:	701a      	strb	r2, [r3, #0]
 8008da4:	e005      	b.n	8008db2 <HIDS_GetMeasurementValues+0x8e>
 8008da6:	2127      	movs	r1, #39	@ 0x27
 8008da8:	187b      	adds	r3, r7, r1
 8008daa:	781a      	ldrb	r2, [r3, #0]
 8008dac:	187b      	adds	r3, r7, r1
 8008dae:	3201      	adds	r2, #1
 8008db0:	701a      	strb	r2, [r3, #0]
 8008db2:	2327      	movs	r3, #39	@ 0x27
 8008db4:	18fb      	adds	r3, r7, r3
 8008db6:	781b      	ldrb	r3, [r3, #0]
 8008db8:	2b05      	cmp	r3, #5
 8008dba:	d9f4      	bls.n	8008da6 <HIDS_GetMeasurementValues+0x82>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	e0a7      	b.n	8008f10 <HIDS_GetMeasurementValues+0x1ec>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 8008dc0:	4b5b      	ldr	r3, [pc, #364]	@ (8008f30 <HIDS_GetMeasurementValues+0x20c>)
 8008dc2:	781b      	ldrb	r3, [r3, #0]
 8008dc4:	021b      	lsls	r3, r3, #8
 8008dc6:	22af      	movs	r2, #175	@ 0xaf
 8008dc8:	4353      	muls	r3, r2
 8008dca:	4a59      	ldr	r2, [pc, #356]	@ (8008f30 <HIDS_GetMeasurementValues+0x20c>)
 8008dcc:	7852      	ldrb	r2, [r2, #1]
 8008dce:	4313      	orrs	r3, r2
 8008dd0:	0018      	movs	r0, r3
 8008dd2:	f7fa fab9 	bl	8003348 <__aeabi_i2d>
 8008dd6:	2200      	movs	r2, #0
 8008dd8:	4b56      	ldr	r3, [pc, #344]	@ (8008f34 <HIDS_GetMeasurementValues+0x210>)
 8008dda:	f7f8 ffaf 	bl	8001d3c <__aeabi_ddiv>
 8008dde:	0002      	movs	r2, r0
 8008de0:	000b      	movs	r3, r1
 8008de2:	0010      	movs	r0, r2
 8008de4:	0019      	movs	r1, r3
 8008de6:	f7fa fb49 	bl	800347c <__aeabi_d2f>
 8008dea:	1c03      	adds	r3, r0, #0
 8008dec:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 8008dee:	4952      	ldr	r1, [pc, #328]	@ (8008f38 <HIDS_GetMeasurementValues+0x214>)
 8008df0:	6938      	ldr	r0, [r7, #16]
 8008df2:	f7f8 f9d7 	bl	80011a4 <__aeabi_fsub>
 8008df6:	1c03      	adds	r3, r0, #0
 8008df8:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 8008dfa:	4b4d      	ldr	r3, [pc, #308]	@ (8008f30 <HIDS_GetMeasurementValues+0x20c>)
 8008dfc:	78db      	ldrb	r3, [r3, #3]
 8008dfe:	021b      	lsls	r3, r3, #8
 8008e00:	4a4b      	ldr	r2, [pc, #300]	@ (8008f30 <HIDS_GetMeasurementValues+0x20c>)
 8008e02:	7912      	ldrb	r2, [r2, #4]
 8008e04:	431a      	orrs	r2, r3
 8008e06:	0013      	movs	r3, r2
 8008e08:	015b      	lsls	r3, r3, #5
 8008e0a:	1a9b      	subs	r3, r3, r2
 8008e0c:	009b      	lsls	r3, r3, #2
 8008e0e:	189b      	adds	r3, r3, r2
 8008e10:	0018      	movs	r0, r3
 8008e12:	f7fa fa99 	bl	8003348 <__aeabi_i2d>
 8008e16:	2200      	movs	r2, #0
 8008e18:	4b46      	ldr	r3, [pc, #280]	@ (8008f34 <HIDS_GetMeasurementValues+0x210>)
 8008e1a:	f7f8 ff8f 	bl	8001d3c <__aeabi_ddiv>
 8008e1e:	0002      	movs	r2, r0
 8008e20:	000b      	movs	r3, r1
 8008e22:	0010      	movs	r0, r2
 8008e24:	0019      	movs	r1, r3
 8008e26:	f7fa fb29 	bl	800347c <__aeabi_d2f>
 8008e2a:	1c03      	adds	r3, r0, #0
 8008e2c:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8008e2e:	4943      	ldr	r1, [pc, #268]	@ (8008f3c <HIDS_GetMeasurementValues+0x218>)
 8008e30:	68f8      	ldr	r0, [r7, #12]
 8008e32:	f7f8 f9b7 	bl	80011a4 <__aeabi_fsub>
 8008e36:	1c03      	adds	r3, r0, #0
 8008e38:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8008e3a:	4b3a      	ldr	r3, [pc, #232]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	697a      	ldr	r2, [r7, #20]
 8008e40:	429a      	cmp	r2, r3
 8008e42:	d910      	bls.n	8008e66 <HIDS_GetMeasurementValues+0x142>
	  temperatures[measurements] = currentTemperature;
 8008e44:	4b37      	ldr	r3, [pc, #220]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008e46:	681a      	ldr	r2, [r3, #0]
 8008e48:	4b3d      	ldr	r3, [pc, #244]	@ (8008f40 <HIDS_GetMeasurementValues+0x21c>)
 8008e4a:	0092      	lsls	r2, r2, #2
 8008e4c:	6939      	ldr	r1, [r7, #16]
 8008e4e:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 8008e50:	4b34      	ldr	r3, [pc, #208]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008e52:	681a      	ldr	r2, [r3, #0]
 8008e54:	4b3b      	ldr	r3, [pc, #236]	@ (8008f44 <HIDS_GetMeasurementValues+0x220>)
 8008e56:	0092      	lsls	r2, r2, #2
 8008e58:	68f9      	ldr	r1, [r7, #12]
 8008e5a:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8008e5c:	4b31      	ldr	r3, [pc, #196]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	1c5a      	adds	r2, r3, #1
 8008e62:	4b30      	ldr	r3, [pc, #192]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008e64:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8008e66:	4b2f      	ldr	r3, [pc, #188]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	697a      	ldr	r2, [r7, #20]
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d84c      	bhi.n	8008f0a <HIDS_GetMeasurementValues+0x1e6>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 8008e70:	2300      	movs	r3, #0
 8008e72:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 8008e74:	2300      	movs	r3, #0
 8008e76:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008e78:	2300      	movs	r3, #0
 8008e7a:	61bb      	str	r3, [r7, #24]
 8008e7c:	e016      	b.n	8008eac <HIDS_GetMeasurementValues+0x188>
        sumTemperature += temperatures[i];
 8008e7e:	4b30      	ldr	r3, [pc, #192]	@ (8008f40 <HIDS_GetMeasurementValues+0x21c>)
 8008e80:	69ba      	ldr	r2, [r7, #24]
 8008e82:	0092      	lsls	r2, r2, #2
 8008e84:	58d3      	ldr	r3, [r2, r3]
 8008e86:	1c19      	adds	r1, r3, #0
 8008e88:	6a38      	ldr	r0, [r7, #32]
 8008e8a:	f7f7 fcdd 	bl	8000848 <__aeabi_fadd>
 8008e8e:	1c03      	adds	r3, r0, #0
 8008e90:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 8008e92:	4b2c      	ldr	r3, [pc, #176]	@ (8008f44 <HIDS_GetMeasurementValues+0x220>)
 8008e94:	69ba      	ldr	r2, [r7, #24]
 8008e96:	0092      	lsls	r2, r2, #2
 8008e98:	58d3      	ldr	r3, [r2, r3]
 8008e9a:	1c19      	adds	r1, r3, #0
 8008e9c:	69f8      	ldr	r0, [r7, #28]
 8008e9e:	f7f7 fcd3 	bl	8000848 <__aeabi_fadd>
 8008ea2:	1c03      	adds	r3, r0, #0
 8008ea4:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8008ea6:	69bb      	ldr	r3, [r7, #24]
 8008ea8:	3301      	adds	r3, #1
 8008eaa:	61bb      	str	r3, [r7, #24]
 8008eac:	4b1d      	ldr	r3, [pc, #116]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	69ba      	ldr	r2, [r7, #24]
 8008eb2:	429a      	cmp	r2, r3
 8008eb4:	d3e3      	bcc.n	8008e7e <HIDS_GetMeasurementValues+0x15a>
    }

    *temperature = sumTemperature / measurements;
 8008eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	0018      	movs	r0, r3
 8008ebc:	f7f8 fb98 	bl	80015f0 <__aeabi_ui2f>
 8008ec0:	1c03      	adds	r3, r0, #0
 8008ec2:	1c19      	adds	r1, r3, #0
 8008ec4:	6a38      	ldr	r0, [r7, #32]
 8008ec6:	f7f7 fe49 	bl	8000b5c <__aeabi_fdiv>
 8008eca:	1c03      	adds	r3, r0, #0
 8008ecc:	1c1a      	adds	r2, r3, #0
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 8008ed2:	4b14      	ldr	r3, [pc, #80]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	0018      	movs	r0, r3
 8008ed8:	f7f8 fb8a 	bl	80015f0 <__aeabi_ui2f>
 8008edc:	1c03      	adds	r3, r0, #0
 8008ede:	1c19      	adds	r1, r3, #0
 8008ee0:	69f8      	ldr	r0, [r7, #28]
 8008ee2:	f7f7 fe3b 	bl	8000b5c <__aeabi_fdiv>
 8008ee6:	1c03      	adds	r3, r0, #0
 8008ee8:	1c1a      	adds	r2, r3, #0
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	601a      	str	r2, [r3, #0]

    SGP_GetHT(temperature, humidity);
 8008eee:	687a      	ldr	r2, [r7, #4]
 8008ef0:	683b      	ldr	r3, [r7, #0]
 8008ef2:	0011      	movs	r1, r2
 8008ef4:	0018      	movs	r0, r3
 8008ef6:	f7fe ffd5 	bl	8007ea4 <SGP_GetHT>

    measurements = 0;
 8008efa:	4b0a      	ldr	r3, [pc, #40]	@ (8008f24 <HIDS_GetMeasurementValues+0x200>)
 8008efc:	2200      	movs	r2, #0
 8008efe:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 8008f00:	4b05      	ldr	r3, [pc, #20]	@ (8008f18 <HIDS_GetMeasurementValues+0x1f4>)
 8008f02:	2201      	movs	r2, #1
 8008f04:	701a      	strb	r2, [r3, #0]
    //Debug("HIDS measurement is done.");
    return true;
 8008f06:	2301      	movs	r3, #1
 8008f08:	e002      	b.n	8008f10 <HIDS_GetMeasurementValues+0x1ec>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 8008f0a:	f7ff fe2f 	bl	8008b6c <HIDS_StartMeasurement>
	return false;
 8008f0e:	2300      	movs	r3, #0
}
 8008f10:	0018      	movs	r0, r3
 8008f12:	46bd      	mov	sp, r7
 8008f14:	b00a      	add	sp, #40	@ 0x28
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	20001eae 	.word	0x20001eae
 8008f1c:	20000154 	.word	0x20000154
 8008f20:	20000150 	.word	0x20000150
 8008f24:	20001eb0 	.word	0x20001eb0
 8008f28:	0801b294 	.word	0x0801b294
 8008f2c:	0801b2c0 	.word	0x0801b2c0
 8008f30:	20001ea8 	.word	0x20001ea8
 8008f34:	40efffe0 	.word	0x40efffe0
 8008f38:	42340000 	.word	0x42340000
 8008f3c:	40c00000 	.word	0x40c00000
 8008f40:	20001eb4 	.word	0x20001eb4
 8008f44:	200022b4 	.word	0x200022b4

08008f48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8008f48:	480d      	ldr	r0, [pc, #52]	@ (8008f80 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8008f4a:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8008f4c:	f7ff f958 	bl	8008200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008f50:	480c      	ldr	r0, [pc, #48]	@ (8008f84 <LoopForever+0x6>)
  ldr r1, =_edata
 8008f52:	490d      	ldr	r1, [pc, #52]	@ (8008f88 <LoopForever+0xa>)
  ldr r2, =_sidata
 8008f54:	4a0d      	ldr	r2, [pc, #52]	@ (8008f8c <LoopForever+0xe>)
  movs r3, #0
 8008f56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008f58:	e002      	b.n	8008f60 <LoopCopyDataInit>

08008f5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008f5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008f5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008f5e:	3304      	adds	r3, #4

08008f60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008f60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008f62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008f64:	d3f9      	bcc.n	8008f5a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008f66:	4a0a      	ldr	r2, [pc, #40]	@ (8008f90 <LoopForever+0x12>)
  ldr r4, =_ebss
 8008f68:	4c0a      	ldr	r4, [pc, #40]	@ (8008f94 <LoopForever+0x16>)
  movs r3, #0
 8008f6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008f6c:	e001      	b.n	8008f72 <LoopFillZerobss>

08008f6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008f6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008f70:	3204      	adds	r2, #4

08008f72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008f72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008f74:	d3fb      	bcc.n	8008f6e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008f76:	f00e ff8b 	bl	8017e90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008f7a:	f7fc fd17 	bl	80059ac <main>

08008f7e <LoopForever>:

LoopForever:
    b LoopForever
 8008f7e:	e7fe      	b.n	8008f7e <LoopForever>
   ldr   r0, =_estack
 8008f80:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8008f84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8008f88:	200004a0 	.word	0x200004a0
  ldr r2, =_sidata
 8008f8c:	0802d7b0 	.word	0x0802d7b0
  ldr r2, =_sbss
 8008f90:	200004a0 	.word	0x200004a0
  ldr r4, =_ebss
 8008f94:	200039e0 	.word	0x200039e0

08008f98 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008f98:	e7fe      	b.n	8008f98 <ADC1_COMP_IRQHandler>
	...

08008f9c <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8008fa2:	1dfb      	adds	r3, r7, #7
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8008fa8:	4b0b      	ldr	r3, [pc, #44]	@ (8008fd8 <HAL_Init+0x3c>)
 8008faa:	681a      	ldr	r2, [r3, #0]
 8008fac:	4b0a      	ldr	r3, [pc, #40]	@ (8008fd8 <HAL_Init+0x3c>)
 8008fae:	2140      	movs	r1, #64	@ 0x40
 8008fb0:	430a      	orrs	r2, r1
 8008fb2:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008fb4:	2003      	movs	r0, #3
 8008fb6:	f000 f811 	bl	8008fdc <HAL_InitTick>
 8008fba:	1e03      	subs	r3, r0, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8008fbe:	1dfb      	adds	r3, r7, #7
 8008fc0:	2201      	movs	r2, #1
 8008fc2:	701a      	strb	r2, [r3, #0]
 8008fc4:	e001      	b.n	8008fca <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8008fc6:	f7fe fff1 	bl	8007fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8008fca:	1dfb      	adds	r3, r7, #7
 8008fcc:	781b      	ldrb	r3, [r3, #0]
}
 8008fce:	0018      	movs	r0, r3
 8008fd0:	46bd      	mov	sp, r7
 8008fd2:	b002      	add	sp, #8
 8008fd4:	bd80      	pop	{r7, pc}
 8008fd6:	46c0      	nop			@ (mov r8, r8)
 8008fd8:	40022000 	.word	0x40022000

08008fdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008fdc:	b590      	push	{r4, r7, lr}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8008fe4:	4b14      	ldr	r3, [pc, #80]	@ (8009038 <HAL_InitTick+0x5c>)
 8008fe6:	681c      	ldr	r4, [r3, #0]
 8008fe8:	4b14      	ldr	r3, [pc, #80]	@ (800903c <HAL_InitTick+0x60>)
 8008fea:	781b      	ldrb	r3, [r3, #0]
 8008fec:	0019      	movs	r1, r3
 8008fee:	23fa      	movs	r3, #250	@ 0xfa
 8008ff0:	0098      	lsls	r0, r3, #2
 8008ff2:	f7f7 f8cd 	bl	8000190 <__udivsi3>
 8008ff6:	0003      	movs	r3, r0
 8008ff8:	0019      	movs	r1, r3
 8008ffa:	0020      	movs	r0, r4
 8008ffc:	f7f7 f8c8 	bl	8000190 <__udivsi3>
 8009000:	0003      	movs	r3, r0
 8009002:	0018      	movs	r0, r3
 8009004:	f000 fcad 	bl	8009962 <HAL_SYSTICK_Config>
 8009008:	1e03      	subs	r3, r0, #0
 800900a:	d001      	beq.n	8009010 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800900c:	2301      	movs	r3, #1
 800900e:	e00f      	b.n	8009030 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2b03      	cmp	r3, #3
 8009014:	d80b      	bhi.n	800902e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8009016:	6879      	ldr	r1, [r7, #4]
 8009018:	2301      	movs	r3, #1
 800901a:	425b      	negs	r3, r3
 800901c:	2200      	movs	r2, #0
 800901e:	0018      	movs	r0, r3
 8009020:	f000 fc7a 	bl	8009918 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8009024:	4b06      	ldr	r3, [pc, #24]	@ (8009040 <HAL_InitTick+0x64>)
 8009026:	687a      	ldr	r2, [r7, #4]
 8009028:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800902a:	2300      	movs	r3, #0
 800902c:	e000      	b.n	8009030 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800902e:	2301      	movs	r3, #1
}
 8009030:	0018      	movs	r0, r3
 8009032:	46bd      	mov	sp, r7
 8009034:	b003      	add	sp, #12
 8009036:	bd90      	pop	{r4, r7, pc}
 8009038:	20000144 	.word	0x20000144
 800903c:	2000015c 	.word	0x2000015c
 8009040:	20000158 	.word	0x20000158

08009044 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8009048:	4b05      	ldr	r3, [pc, #20]	@ (8009060 <HAL_IncTick+0x1c>)
 800904a:	781b      	ldrb	r3, [r3, #0]
 800904c:	001a      	movs	r2, r3
 800904e:	4b05      	ldr	r3, [pc, #20]	@ (8009064 <HAL_IncTick+0x20>)
 8009050:	681b      	ldr	r3, [r3, #0]
 8009052:	18d2      	adds	r2, r2, r3
 8009054:	4b03      	ldr	r3, [pc, #12]	@ (8009064 <HAL_IncTick+0x20>)
 8009056:	601a      	str	r2, [r3, #0]
}
 8009058:	46c0      	nop			@ (mov r8, r8)
 800905a:	46bd      	mov	sp, r7
 800905c:	bd80      	pop	{r7, pc}
 800905e:	46c0      	nop			@ (mov r8, r8)
 8009060:	2000015c 	.word	0x2000015c
 8009064:	200026b4 	.word	0x200026b4

08009068 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009068:	b580      	push	{r7, lr}
 800906a:	af00      	add	r7, sp, #0
  return uwTick;
 800906c:	4b02      	ldr	r3, [pc, #8]	@ (8009078 <HAL_GetTick+0x10>)
 800906e:	681b      	ldr	r3, [r3, #0]
}
 8009070:	0018      	movs	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	46c0      	nop			@ (mov r8, r8)
 8009078:	200026b4 	.word	0x200026b4

0800907c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b084      	sub	sp, #16
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009084:	f7ff fff0 	bl	8009068 <HAL_GetTick>
 8009088:	0003      	movs	r3, r0
 800908a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	3301      	adds	r3, #1
 8009094:	d005      	beq.n	80090a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009096:	4b0a      	ldr	r3, [pc, #40]	@ (80090c0 <HAL_Delay+0x44>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	001a      	movs	r2, r3
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	189b      	adds	r3, r3, r2
 80090a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80090a2:	46c0      	nop			@ (mov r8, r8)
 80090a4:	f7ff ffe0 	bl	8009068 <HAL_GetTick>
 80090a8:	0002      	movs	r2, r0
 80090aa:	68bb      	ldr	r3, [r7, #8]
 80090ac:	1ad3      	subs	r3, r2, r3
 80090ae:	68fa      	ldr	r2, [r7, #12]
 80090b0:	429a      	cmp	r2, r3
 80090b2:	d8f7      	bhi.n	80090a4 <HAL_Delay+0x28>
  {
  }
}
 80090b4:	46c0      	nop			@ (mov r8, r8)
 80090b6:	46c0      	nop			@ (mov r8, r8)
 80090b8:	46bd      	mov	sp, r7
 80090ba:	b004      	add	sp, #16
 80090bc:	bd80      	pop	{r7, pc}
 80090be:	46c0      	nop			@ (mov r8, r8)
 80090c0:	2000015c 	.word	0x2000015c

080090c4 <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	b082      	sub	sp, #8
 80090c8:	af00      	add	r7, sp, #0
 80090ca:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d101      	bne.n	80090d6 <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e159      	b.n	800938a <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d10a      	bne.n	80090f4 <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	2200      	movs	r2, #0
 80090e2:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	2250      	movs	r2, #80	@ 0x50
 80090e8:	2100      	movs	r1, #0
 80090ea:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	0018      	movs	r0, r3
 80090f0:	f7fb ff90 	bl	8005014 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80090f8:	2210      	movs	r2, #16
 80090fa:	4013      	ands	r3, r2
 80090fc:	2b10      	cmp	r3, #16
 80090fe:	d005      	beq.n	800910c <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	689b      	ldr	r3, [r3, #8]
 8009106:	2204      	movs	r2, #4
 8009108:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800910a:	d00b      	beq.n	8009124 <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009110:	2210      	movs	r2, #16
 8009112:	431a      	orrs	r2, r3
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2250      	movs	r2, #80	@ 0x50
 800911c:	2100      	movs	r1, #0
 800911e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009120:	2301      	movs	r3, #1
 8009122:	e132      	b.n	800938a <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009128:	4a9a      	ldr	r2, [pc, #616]	@ (8009394 <HAL_ADC_Init+0x2d0>)
 800912a:	4013      	ands	r3, r2
 800912c:	2202      	movs	r2, #2
 800912e:	431a      	orrs	r2, r3
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	689b      	ldr	r3, [r3, #8]
 800913a:	2203      	movs	r2, #3
 800913c:	4013      	ands	r3, r2
 800913e:	2b01      	cmp	r3, #1
 8009140:	d108      	bne.n	8009154 <HAL_ADC_Init+0x90>
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	2201      	movs	r2, #1
 800914a:	4013      	ands	r3, r2
 800914c:	2b01      	cmp	r3, #1
 800914e:	d101      	bne.n	8009154 <HAL_ADC_Init+0x90>
 8009150:	2301      	movs	r3, #1
 8009152:	e000      	b.n	8009156 <HAL_ADC_Init+0x92>
 8009154:	2300      	movs	r3, #0
 8009156:	2b00      	cmp	r3, #0
 8009158:	d149      	bne.n	80091ee <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	685a      	ldr	r2, [r3, #4]
 800915e:	23c0      	movs	r3, #192	@ 0xc0
 8009160:	061b      	lsls	r3, r3, #24
 8009162:	429a      	cmp	r2, r3
 8009164:	d00b      	beq.n	800917e <HAL_ADC_Init+0xba>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	685a      	ldr	r2, [r3, #4]
 800916a:	2380      	movs	r3, #128	@ 0x80
 800916c:	05db      	lsls	r3, r3, #23
 800916e:	429a      	cmp	r2, r3
 8009170:	d005      	beq.n	800917e <HAL_ADC_Init+0xba>
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	685a      	ldr	r2, [r3, #4]
 8009176:	2380      	movs	r3, #128	@ 0x80
 8009178:	061b      	lsls	r3, r3, #24
 800917a:	429a      	cmp	r2, r3
 800917c:	d111      	bne.n	80091a2 <HAL_ADC_Init+0xde>
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	691a      	ldr	r2, [r3, #16]
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	0092      	lsls	r2, r2, #2
 800918a:	0892      	lsrs	r2, r2, #2
 800918c:	611a      	str	r2, [r3, #16]
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	6919      	ldr	r1, [r3, #16]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685a      	ldr	r2, [r3, #4]
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	430a      	orrs	r2, r1
 800919e:	611a      	str	r2, [r3, #16]
 80091a0:	e014      	b.n	80091cc <HAL_ADC_Init+0x108>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	681b      	ldr	r3, [r3, #0]
 80091a6:	691a      	ldr	r2, [r3, #16]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	0092      	lsls	r2, r2, #2
 80091ae:	0892      	lsrs	r2, r2, #2
 80091b0:	611a      	str	r2, [r3, #16]
 80091b2:	4b79      	ldr	r3, [pc, #484]	@ (8009398 <HAL_ADC_Init+0x2d4>)
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	4b78      	ldr	r3, [pc, #480]	@ (8009398 <HAL_ADC_Init+0x2d4>)
 80091b8:	4978      	ldr	r1, [pc, #480]	@ (800939c <HAL_ADC_Init+0x2d8>)
 80091ba:	400a      	ands	r2, r1
 80091bc:	601a      	str	r2, [r3, #0]
 80091be:	4b76      	ldr	r3, [pc, #472]	@ (8009398 <HAL_ADC_Init+0x2d4>)
 80091c0:	6819      	ldr	r1, [r3, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	685a      	ldr	r2, [r3, #4]
 80091c6:	4b74      	ldr	r3, [pc, #464]	@ (8009398 <HAL_ADC_Init+0x2d4>)
 80091c8:	430a      	orrs	r2, r1
 80091ca:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	68da      	ldr	r2, [r3, #12]
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2118      	movs	r1, #24
 80091d8:	438a      	bics	r2, r1
 80091da:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	68d9      	ldr	r1, [r3, #12]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	689a      	ldr	r2, [r3, #8]
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	430a      	orrs	r2, r1
 80091ec:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 80091ee:	4b6a      	ldr	r3, [pc, #424]	@ (8009398 <HAL_ADC_Init+0x2d4>)
 80091f0:	681a      	ldr	r2, [r3, #0]
 80091f2:	4b69      	ldr	r3, [pc, #420]	@ (8009398 <HAL_ADC_Init+0x2d4>)
 80091f4:	496a      	ldr	r1, [pc, #424]	@ (80093a0 <HAL_ADC_Init+0x2dc>)
 80091f6:	400a      	ands	r2, r1
 80091f8:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 80091fa:	4b67      	ldr	r3, [pc, #412]	@ (8009398 <HAL_ADC_Init+0x2d4>)
 80091fc:	6819      	ldr	r1, [r3, #0]
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009202:	065a      	lsls	r2, r3, #25
 8009204:	4b64      	ldr	r3, [pc, #400]	@ (8009398 <HAL_ADC_Init+0x2d4>)
 8009206:	430a      	orrs	r2, r1
 8009208:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	689a      	ldr	r2, [r3, #8]
 8009210:	2380      	movs	r3, #128	@ 0x80
 8009212:	055b      	lsls	r3, r3, #21
 8009214:	4013      	ands	r3, r2
 8009216:	d108      	bne.n	800922a <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	689a      	ldr	r2, [r3, #8]
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2180      	movs	r1, #128	@ 0x80
 8009224:	0549      	lsls	r1, r1, #21
 8009226:	430a      	orrs	r2, r1
 8009228:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	68da      	ldr	r2, [r3, #12]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	495b      	ldr	r1, [pc, #364]	@ (80093a4 <HAL_ADC_Init+0x2e0>)
 8009236:	400a      	ands	r2, r1
 8009238:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	68d9      	ldr	r1, [r3, #12]
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	691b      	ldr	r3, [r3, #16]
 8009248:	2b02      	cmp	r3, #2
 800924a:	d101      	bne.n	8009250 <HAL_ADC_Init+0x18c>
 800924c:	2304      	movs	r3, #4
 800924e:	e000      	b.n	8009252 <HAL_ADC_Init+0x18e>
 8009250:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 8009252:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2020      	movs	r0, #32
 8009258:	5c1b      	ldrb	r3, [r3, r0]
 800925a:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800925c:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	202c      	movs	r0, #44	@ 0x2c
 8009262:	5c1b      	ldrb	r3, [r3, r0]
 8009264:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8009266:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800926c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	699b      	ldr	r3, [r3, #24]
 8009272:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 8009274:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800927c:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	430a      	orrs	r2, r1
 8009284:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800928a:	23c2      	movs	r3, #194	@ 0xc2
 800928c:	33ff      	adds	r3, #255	@ 0xff
 800928e:	429a      	cmp	r2, r3
 8009290:	d00b      	beq.n	80092aa <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	68d9      	ldr	r1, [r3, #12]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 80092a0:	431a      	orrs	r2, r3
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	430a      	orrs	r2, r1
 80092a8:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	2221      	movs	r2, #33	@ 0x21
 80092ae:	5c9b      	ldrb	r3, [r3, r2]
 80092b0:	2b01      	cmp	r3, #1
 80092b2:	d11a      	bne.n	80092ea <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2220      	movs	r2, #32
 80092b8:	5c9b      	ldrb	r3, [r3, r2]
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d109      	bne.n	80092d2 <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	68da      	ldr	r2, [r3, #12]
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2180      	movs	r1, #128	@ 0x80
 80092ca:	0249      	lsls	r1, r1, #9
 80092cc:	430a      	orrs	r2, r1
 80092ce:	60da      	str	r2, [r3, #12]
 80092d0:	e00b      	b.n	80092ea <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80092d6:	2220      	movs	r2, #32
 80092d8:	431a      	orrs	r2, r3
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80092e2:	2201      	movs	r2, #1
 80092e4:	431a      	orrs	r2, r3
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 80092ea:	687b      	ldr	r3, [r7, #4]
 80092ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80092ee:	2b01      	cmp	r3, #1
 80092f0:	d11f      	bne.n	8009332 <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691a      	ldr	r2, [r3, #16]
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	492a      	ldr	r1, [pc, #168]	@ (80093a8 <HAL_ADC_Init+0x2e4>)
 80092fe:	400a      	ands	r2, r1
 8009300:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	6919      	ldr	r1, [r3, #16]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009310:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 8009316:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	430a      	orrs	r2, r1
 800931e:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	691a      	ldr	r2, [r3, #16]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	2101      	movs	r1, #1
 800932c:	430a      	orrs	r2, r1
 800932e:	611a      	str	r2, [r3, #16]
 8009330:	e00e      	b.n	8009350 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	691b      	ldr	r3, [r3, #16]
 8009338:	2201      	movs	r2, #1
 800933a:	4013      	ands	r3, r2
 800933c:	2b01      	cmp	r3, #1
 800933e:	d107      	bne.n	8009350 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	691a      	ldr	r2, [r3, #16]
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2101      	movs	r1, #1
 800934c:	438a      	bics	r2, r1
 800934e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	681b      	ldr	r3, [r3, #0]
 8009354:	695a      	ldr	r2, [r3, #20]
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	681b      	ldr	r3, [r3, #0]
 800935a:	2107      	movs	r1, #7
 800935c:	438a      	bics	r2, r1
 800935e:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6959      	ldr	r1, [r3, #20]
 8009366:	687b      	ldr	r3, [r7, #4]
 8009368:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	430a      	orrs	r2, r1
 8009370:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2200      	movs	r2, #0
 8009376:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800937c:	2203      	movs	r2, #3
 800937e:	4393      	bics	r3, r2
 8009380:	2201      	movs	r2, #1
 8009382:	431a      	orrs	r2, r3
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 8009388:	2300      	movs	r3, #0
}
 800938a:	0018      	movs	r0, r3
 800938c:	46bd      	mov	sp, r7
 800938e:	b002      	add	sp, #8
 8009390:	bd80      	pop	{r7, pc}
 8009392:	46c0      	nop			@ (mov r8, r8)
 8009394:	fffffefd 	.word	0xfffffefd
 8009398:	40012708 	.word	0x40012708
 800939c:	ffc3ffff 	.word	0xffc3ffff
 80093a0:	fdffffff 	.word	0xfdffffff
 80093a4:	fffe0219 	.word	0xfffe0219
 80093a8:	fffffc03 	.word	0xfffffc03

080093ac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80093ac:	b590      	push	{r4, r7, lr}
 80093ae:	b085      	sub	sp, #20
 80093b0:	af00      	add	r7, sp, #0
 80093b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80093b4:	230f      	movs	r3, #15
 80093b6:	18fb      	adds	r3, r7, r3
 80093b8:	2200      	movs	r2, #0
 80093ba:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	681b      	ldr	r3, [r3, #0]
 80093c0:	689b      	ldr	r3, [r3, #8]
 80093c2:	2204      	movs	r2, #4
 80093c4:	4013      	ands	r3, r2
 80093c6:	d138      	bne.n	800943a <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	2250      	movs	r2, #80	@ 0x50
 80093cc:	5c9b      	ldrb	r3, [r3, r2]
 80093ce:	2b01      	cmp	r3, #1
 80093d0:	d101      	bne.n	80093d6 <HAL_ADC_Start+0x2a>
 80093d2:	2302      	movs	r3, #2
 80093d4:	e038      	b.n	8009448 <HAL_ADC_Start+0x9c>
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	2250      	movs	r2, #80	@ 0x50
 80093da:	2101      	movs	r1, #1
 80093dc:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	69db      	ldr	r3, [r3, #28]
 80093e2:	2b01      	cmp	r3, #1
 80093e4:	d007      	beq.n	80093f6 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 80093e6:	230f      	movs	r3, #15
 80093e8:	18fc      	adds	r4, r7, r3
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	0018      	movs	r0, r3
 80093ee:	f000 f95f 	bl	80096b0 <ADC_Enable>
 80093f2:	0003      	movs	r3, r0
 80093f4:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80093f6:	230f      	movs	r3, #15
 80093f8:	18fb      	adds	r3, r7, r3
 80093fa:	781b      	ldrb	r3, [r3, #0]
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d120      	bne.n	8009442 <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009404:	4a12      	ldr	r2, [pc, #72]	@ (8009450 <HAL_ADC_Start+0xa4>)
 8009406:	4013      	ands	r3, r2
 8009408:	2280      	movs	r2, #128	@ 0x80
 800940a:	0052      	lsls	r2, r2, #1
 800940c:	431a      	orrs	r2, r3
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2200      	movs	r2, #0
 8009416:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	2250      	movs	r2, #80	@ 0x50
 800941c:	2100      	movs	r1, #0
 800941e:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	681b      	ldr	r3, [r3, #0]
 8009424:	221c      	movs	r2, #28
 8009426:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	689a      	ldr	r2, [r3, #8]
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	2104      	movs	r1, #4
 8009434:	430a      	orrs	r2, r1
 8009436:	609a      	str	r2, [r3, #8]
 8009438:	e003      	b.n	8009442 <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800943a:	230f      	movs	r3, #15
 800943c:	18fb      	adds	r3, r7, r3
 800943e:	2202      	movs	r2, #2
 8009440:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8009442:	230f      	movs	r3, #15
 8009444:	18fb      	adds	r3, r7, r3
 8009446:	781b      	ldrb	r3, [r3, #0]
}
 8009448:	0018      	movs	r0, r3
 800944a:	46bd      	mov	sp, r7
 800944c:	b005      	add	sp, #20
 800944e:	bd90      	pop	{r4, r7, pc}
 8009450:	fffff0fe 	.word	0xfffff0fe

08009454 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
 800945c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800945e:	2300      	movs	r3, #0
 8009460:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 8009462:	2300      	movs	r3, #0
 8009464:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	695b      	ldr	r3, [r3, #20]
 800946a:	2b08      	cmp	r3, #8
 800946c:	d102      	bne.n	8009474 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800946e:	2308      	movs	r3, #8
 8009470:	60fb      	str	r3, [r7, #12]
 8009472:	e014      	b.n	800949e <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	68db      	ldr	r3, [r3, #12]
 800947a:	2201      	movs	r2, #1
 800947c:	4013      	ands	r3, r2
 800947e:	2b01      	cmp	r3, #1
 8009480:	d10b      	bne.n	800949a <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009486:	2220      	movs	r2, #32
 8009488:	431a      	orrs	r2, r3
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2250      	movs	r2, #80	@ 0x50
 8009492:	2100      	movs	r1, #0
 8009494:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8009496:	2301      	movs	r3, #1
 8009498:	e072      	b.n	8009580 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800949a:	230c      	movs	r3, #12
 800949c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800949e:	f7ff fde3 	bl	8009068 <HAL_GetTick>
 80094a2:	0003      	movs	r3, r0
 80094a4:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80094a6:	e01f      	b.n	80094e8 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	3301      	adds	r3, #1
 80094ac:	d01c      	beq.n	80094e8 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80094ae:	683b      	ldr	r3, [r7, #0]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d007      	beq.n	80094c4 <HAL_ADC_PollForConversion+0x70>
 80094b4:	f7ff fdd8 	bl	8009068 <HAL_GetTick>
 80094b8:	0002      	movs	r2, r0
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	1ad3      	subs	r3, r2, r3
 80094be:	683a      	ldr	r2, [r7, #0]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d211      	bcs.n	80094e8 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	68fa      	ldr	r2, [r7, #12]
 80094cc:	4013      	ands	r3, r2
 80094ce:	d10b      	bne.n	80094e8 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094d4:	2204      	movs	r2, #4
 80094d6:	431a      	orrs	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	2250      	movs	r2, #80	@ 0x50
 80094e0:	2100      	movs	r1, #0
 80094e2:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80094e4:	2303      	movs	r3, #3
 80094e6:	e04b      	b.n	8009580 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	681b      	ldr	r3, [r3, #0]
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68fa      	ldr	r2, [r7, #12]
 80094f0:	4013      	ands	r3, r2
 80094f2:	d0d9      	beq.n	80094a8 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094f8:	2280      	movs	r2, #128	@ 0x80
 80094fa:	0092      	lsls	r2, r2, #2
 80094fc:	431a      	orrs	r2, r3
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	68da      	ldr	r2, [r3, #12]
 8009508:	23c0      	movs	r3, #192	@ 0xc0
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	4013      	ands	r3, r2
 800950e:	d12e      	bne.n	800956e <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2220      	movs	r2, #32
 8009514:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8009516:	2b00      	cmp	r3, #0
 8009518:	d129      	bne.n	800956e <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	2208      	movs	r2, #8
 8009522:	4013      	ands	r3, r2
 8009524:	2b08      	cmp	r3, #8
 8009526:	d122      	bne.n	800956e <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	689b      	ldr	r3, [r3, #8]
 800952e:	2204      	movs	r2, #4
 8009530:	4013      	ands	r3, r2
 8009532:	d110      	bne.n	8009556 <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	685a      	ldr	r2, [r3, #4]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	210c      	movs	r1, #12
 8009540:	438a      	bics	r2, r1
 8009542:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009548:	4a0f      	ldr	r2, [pc, #60]	@ (8009588 <HAL_ADC_PollForConversion+0x134>)
 800954a:	4013      	ands	r3, r2
 800954c:	2201      	movs	r2, #1
 800954e:	431a      	orrs	r2, r3
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	655a      	str	r2, [r3, #84]	@ 0x54
 8009554:	e00b      	b.n	800956e <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800955a:	2220      	movs	r2, #32
 800955c:	431a      	orrs	r2, r3
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009566:	2201      	movs	r2, #1
 8009568:	431a      	orrs	r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	699b      	ldr	r3, [r3, #24]
 8009572:	2b00      	cmp	r3, #0
 8009574:	d103      	bne.n	800957e <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	220c      	movs	r2, #12
 800957c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800957e:	2300      	movs	r3, #0
}
 8009580:	0018      	movs	r0, r3
 8009582:	46bd      	mov	sp, r7
 8009584:	b004      	add	sp, #16
 8009586:	bd80      	pop	{r7, pc}
 8009588:	fffffefe 	.word	0xfffffefe

0800958c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800959a:	0018      	movs	r0, r3
 800959c:	46bd      	mov	sp, r7
 800959e:	b002      	add	sp, #8
 80095a0:	bd80      	pop	{r7, pc}
	...

080095a4 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2250      	movs	r2, #80	@ 0x50
 80095b2:	5c9b      	ldrb	r3, [r3, r2]
 80095b4:	2b01      	cmp	r3, #1
 80095b6:	d101      	bne.n	80095bc <HAL_ADC_ConfigChannel+0x18>
 80095b8:	2302      	movs	r3, #2
 80095ba:	e06c      	b.n	8009696 <HAL_ADC_ConfigChannel+0xf2>
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	2250      	movs	r2, #80	@ 0x50
 80095c0:	2101      	movs	r1, #1
 80095c2:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	689b      	ldr	r3, [r3, #8]
 80095ca:	2204      	movs	r2, #4
 80095cc:	4013      	ands	r3, r2
 80095ce:	d00b      	beq.n	80095e8 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80095d4:	2220      	movs	r2, #32
 80095d6:	431a      	orrs	r2, r3
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2250      	movs	r2, #80	@ 0x50
 80095e0:	2100      	movs	r1, #0
 80095e2:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 80095e4:	2301      	movs	r3, #1
 80095e6:	e056      	b.n	8009696 <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	685b      	ldr	r3, [r3, #4]
 80095ec:	4a2c      	ldr	r2, [pc, #176]	@ (80096a0 <HAL_ADC_ConfigChannel+0xfc>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d028      	beq.n	8009644 <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 80095f8:	683b      	ldr	r3, [r7, #0]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	035b      	lsls	r3, r3, #13
 80095fe:	0b5a      	lsrs	r2, r3, #13
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	430a      	orrs	r2, r1
 8009606:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	681a      	ldr	r2, [r3, #0]
 800960c:	2380      	movs	r3, #128	@ 0x80
 800960e:	02db      	lsls	r3, r3, #11
 8009610:	4013      	ands	r3, r2
 8009612:	d009      	beq.n	8009628 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 8009614:	4b23      	ldr	r3, [pc, #140]	@ (80096a4 <HAL_ADC_ConfigChannel+0x100>)
 8009616:	681a      	ldr	r2, [r3, #0]
 8009618:	4b22      	ldr	r3, [pc, #136]	@ (80096a4 <HAL_ADC_ConfigChannel+0x100>)
 800961a:	2180      	movs	r1, #128	@ 0x80
 800961c:	0409      	lsls	r1, r1, #16
 800961e:	430a      	orrs	r2, r1
 8009620:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 8009622:	200a      	movs	r0, #10
 8009624:	f000 f8ac 	bl	8009780 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	681a      	ldr	r2, [r3, #0]
 800962c:	2380      	movs	r3, #128	@ 0x80
 800962e:	029b      	lsls	r3, r3, #10
 8009630:	4013      	ands	r3, r2
 8009632:	d02b      	beq.n	800968c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 8009634:	4b1b      	ldr	r3, [pc, #108]	@ (80096a4 <HAL_ADC_ConfigChannel+0x100>)
 8009636:	681a      	ldr	r2, [r3, #0]
 8009638:	4b1a      	ldr	r3, [pc, #104]	@ (80096a4 <HAL_ADC_ConfigChannel+0x100>)
 800963a:	2180      	movs	r1, #128	@ 0x80
 800963c:	03c9      	lsls	r1, r1, #15
 800963e:	430a      	orrs	r2, r1
 8009640:	601a      	str	r2, [r3, #0]
 8009642:	e023      	b.n	800968c <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	035b      	lsls	r3, r3, #13
 8009650:	0b5b      	lsrs	r3, r3, #13
 8009652:	43d9      	mvns	r1, r3
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	400a      	ands	r2, r1
 800965a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	681a      	ldr	r2, [r3, #0]
 8009660:	2380      	movs	r3, #128	@ 0x80
 8009662:	02db      	lsls	r3, r3, #11
 8009664:	4013      	ands	r3, r2
 8009666:	d005      	beq.n	8009674 <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 8009668:	4b0e      	ldr	r3, [pc, #56]	@ (80096a4 <HAL_ADC_ConfigChannel+0x100>)
 800966a:	681a      	ldr	r2, [r3, #0]
 800966c:	4b0d      	ldr	r3, [pc, #52]	@ (80096a4 <HAL_ADC_ConfigChannel+0x100>)
 800966e:	490e      	ldr	r1, [pc, #56]	@ (80096a8 <HAL_ADC_ConfigChannel+0x104>)
 8009670:	400a      	ands	r2, r1
 8009672:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 8009674:	683b      	ldr	r3, [r7, #0]
 8009676:	681a      	ldr	r2, [r3, #0]
 8009678:	2380      	movs	r3, #128	@ 0x80
 800967a:	029b      	lsls	r3, r3, #10
 800967c:	4013      	ands	r3, r2
 800967e:	d005      	beq.n	800968c <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 8009680:	4b08      	ldr	r3, [pc, #32]	@ (80096a4 <HAL_ADC_ConfigChannel+0x100>)
 8009682:	681a      	ldr	r2, [r3, #0]
 8009684:	4b07      	ldr	r3, [pc, #28]	@ (80096a4 <HAL_ADC_ConfigChannel+0x100>)
 8009686:	4909      	ldr	r1, [pc, #36]	@ (80096ac <HAL_ADC_ConfigChannel+0x108>)
 8009688:	400a      	ands	r2, r1
 800968a:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2250      	movs	r2, #80	@ 0x50
 8009690:	2100      	movs	r1, #0
 8009692:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	0018      	movs	r0, r3
 8009698:	46bd      	mov	sp, r7
 800969a:	b002      	add	sp, #8
 800969c:	bd80      	pop	{r7, pc}
 800969e:	46c0      	nop			@ (mov r8, r8)
 80096a0:	00001001 	.word	0x00001001
 80096a4:	40012708 	.word	0x40012708
 80096a8:	ff7fffff 	.word	0xff7fffff
 80096ac:	ffbfffff 	.word	0xffbfffff

080096b0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80096b0:	b580      	push	{r7, lr}
 80096b2:	b084      	sub	sp, #16
 80096b4:	af00      	add	r7, sp, #0
 80096b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80096b8:	2300      	movs	r3, #0
 80096ba:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	689b      	ldr	r3, [r3, #8]
 80096c2:	2203      	movs	r2, #3
 80096c4:	4013      	ands	r3, r2
 80096c6:	2b01      	cmp	r3, #1
 80096c8:	d108      	bne.n	80096dc <ADC_Enable+0x2c>
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	2201      	movs	r2, #1
 80096d2:	4013      	ands	r3, r2
 80096d4:	2b01      	cmp	r3, #1
 80096d6:	d101      	bne.n	80096dc <ADC_Enable+0x2c>
 80096d8:	2301      	movs	r3, #1
 80096da:	e000      	b.n	80096de <ADC_Enable+0x2e>
 80096dc:	2300      	movs	r3, #0
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d146      	bne.n	8009770 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	4a24      	ldr	r2, [pc, #144]	@ (800977c <ADC_Enable+0xcc>)
 80096ea:	4013      	ands	r3, r2
 80096ec:	d00d      	beq.n	800970a <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80096f2:	2210      	movs	r2, #16
 80096f4:	431a      	orrs	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80096fe:	2201      	movs	r2, #1
 8009700:	431a      	orrs	r2, r3
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 8009706:	2301      	movs	r3, #1
 8009708:	e033      	b.n	8009772 <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	689a      	ldr	r2, [r3, #8]
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	2101      	movs	r1, #1
 8009716:	430a      	orrs	r2, r1
 8009718:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800971a:	2001      	movs	r0, #1
 800971c:	f000 f830 	bl	8009780 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 8009720:	f7ff fca2 	bl	8009068 <HAL_GetTick>
 8009724:	0003      	movs	r3, r0
 8009726:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009728:	e01b      	b.n	8009762 <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800972a:	f7ff fc9d 	bl	8009068 <HAL_GetTick>
 800972e:	0002      	movs	r2, r0
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	1ad3      	subs	r3, r2, r3
 8009734:	2b0a      	cmp	r3, #10
 8009736:	d914      	bls.n	8009762 <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2201      	movs	r2, #1
 8009740:	4013      	ands	r3, r2
 8009742:	2b01      	cmp	r3, #1
 8009744:	d00d      	beq.n	8009762 <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800974a:	2210      	movs	r2, #16
 800974c:	431a      	orrs	r2, r3
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009756:	2201      	movs	r2, #1
 8009758:	431a      	orrs	r2, r3
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800975e:	2301      	movs	r3, #1
 8009760:	e007      	b.n	8009772 <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	681b      	ldr	r3, [r3, #0]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	2201      	movs	r2, #1
 800976a:	4013      	ands	r3, r2
 800976c:	2b01      	cmp	r3, #1
 800976e:	d1dc      	bne.n	800972a <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8009770:	2300      	movs	r3, #0
}
 8009772:	0018      	movs	r0, r3
 8009774:	46bd      	mov	sp, r7
 8009776:	b004      	add	sp, #16
 8009778:	bd80      	pop	{r7, pc}
 800977a:	46c0      	nop			@ (mov r8, r8)
 800977c:	80000017 	.word	0x80000017

08009780 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 8009788:	4b0b      	ldr	r3, [pc, #44]	@ (80097b8 <ADC_DelayMicroSecond+0x38>)
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	490b      	ldr	r1, [pc, #44]	@ (80097bc <ADC_DelayMicroSecond+0x3c>)
 800978e:	0018      	movs	r0, r3
 8009790:	f7f6 fcfe 	bl	8000190 <__udivsi3>
 8009794:	0003      	movs	r3, r0
 8009796:	001a      	movs	r2, r3
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	4353      	muls	r3, r2
 800979c:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800979e:	e002      	b.n	80097a6 <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	3b01      	subs	r3, #1
 80097a4:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d1f9      	bne.n	80097a0 <ADC_DelayMicroSecond+0x20>
  }
}
 80097ac:	46c0      	nop			@ (mov r8, r8)
 80097ae:	46c0      	nop			@ (mov r8, r8)
 80097b0:	46bd      	mov	sp, r7
 80097b2:	b004      	add	sp, #16
 80097b4:	bd80      	pop	{r7, pc}
 80097b6:	46c0      	nop			@ (mov r8, r8)
 80097b8:	20000144 	.word	0x20000144
 80097bc:	000f4240 	.word	0x000f4240

080097c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	b082      	sub	sp, #8
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	0002      	movs	r2, r0
 80097c8:	1dfb      	adds	r3, r7, #7
 80097ca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80097cc:	1dfb      	adds	r3, r7, #7
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b7f      	cmp	r3, #127	@ 0x7f
 80097d2:	d809      	bhi.n	80097e8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80097d4:	1dfb      	adds	r3, r7, #7
 80097d6:	781b      	ldrb	r3, [r3, #0]
 80097d8:	001a      	movs	r2, r3
 80097da:	231f      	movs	r3, #31
 80097dc:	401a      	ands	r2, r3
 80097de:	4b04      	ldr	r3, [pc, #16]	@ (80097f0 <__NVIC_EnableIRQ+0x30>)
 80097e0:	2101      	movs	r1, #1
 80097e2:	4091      	lsls	r1, r2
 80097e4:	000a      	movs	r2, r1
 80097e6:	601a      	str	r2, [r3, #0]
  }
}
 80097e8:	46c0      	nop			@ (mov r8, r8)
 80097ea:	46bd      	mov	sp, r7
 80097ec:	b002      	add	sp, #8
 80097ee:	bd80      	pop	{r7, pc}
 80097f0:	e000e100 	.word	0xe000e100

080097f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80097f4:	b590      	push	{r4, r7, lr}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	0002      	movs	r2, r0
 80097fc:	6039      	str	r1, [r7, #0]
 80097fe:	1dfb      	adds	r3, r7, #7
 8009800:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009802:	1dfb      	adds	r3, r7, #7
 8009804:	781b      	ldrb	r3, [r3, #0]
 8009806:	2b7f      	cmp	r3, #127	@ 0x7f
 8009808:	d828      	bhi.n	800985c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800980a:	4a2f      	ldr	r2, [pc, #188]	@ (80098c8 <__NVIC_SetPriority+0xd4>)
 800980c:	1dfb      	adds	r3, r7, #7
 800980e:	781b      	ldrb	r3, [r3, #0]
 8009810:	b25b      	sxtb	r3, r3
 8009812:	089b      	lsrs	r3, r3, #2
 8009814:	33c0      	adds	r3, #192	@ 0xc0
 8009816:	009b      	lsls	r3, r3, #2
 8009818:	589b      	ldr	r3, [r3, r2]
 800981a:	1dfa      	adds	r2, r7, #7
 800981c:	7812      	ldrb	r2, [r2, #0]
 800981e:	0011      	movs	r1, r2
 8009820:	2203      	movs	r2, #3
 8009822:	400a      	ands	r2, r1
 8009824:	00d2      	lsls	r2, r2, #3
 8009826:	21ff      	movs	r1, #255	@ 0xff
 8009828:	4091      	lsls	r1, r2
 800982a:	000a      	movs	r2, r1
 800982c:	43d2      	mvns	r2, r2
 800982e:	401a      	ands	r2, r3
 8009830:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	019b      	lsls	r3, r3, #6
 8009836:	22ff      	movs	r2, #255	@ 0xff
 8009838:	401a      	ands	r2, r3
 800983a:	1dfb      	adds	r3, r7, #7
 800983c:	781b      	ldrb	r3, [r3, #0]
 800983e:	0018      	movs	r0, r3
 8009840:	2303      	movs	r3, #3
 8009842:	4003      	ands	r3, r0
 8009844:	00db      	lsls	r3, r3, #3
 8009846:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8009848:	481f      	ldr	r0, [pc, #124]	@ (80098c8 <__NVIC_SetPriority+0xd4>)
 800984a:	1dfb      	adds	r3, r7, #7
 800984c:	781b      	ldrb	r3, [r3, #0]
 800984e:	b25b      	sxtb	r3, r3
 8009850:	089b      	lsrs	r3, r3, #2
 8009852:	430a      	orrs	r2, r1
 8009854:	33c0      	adds	r3, #192	@ 0xc0
 8009856:	009b      	lsls	r3, r3, #2
 8009858:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800985a:	e031      	b.n	80098c0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800985c:	4a1b      	ldr	r2, [pc, #108]	@ (80098cc <__NVIC_SetPriority+0xd8>)
 800985e:	1dfb      	adds	r3, r7, #7
 8009860:	781b      	ldrb	r3, [r3, #0]
 8009862:	0019      	movs	r1, r3
 8009864:	230f      	movs	r3, #15
 8009866:	400b      	ands	r3, r1
 8009868:	3b08      	subs	r3, #8
 800986a:	089b      	lsrs	r3, r3, #2
 800986c:	3306      	adds	r3, #6
 800986e:	009b      	lsls	r3, r3, #2
 8009870:	18d3      	adds	r3, r2, r3
 8009872:	3304      	adds	r3, #4
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	1dfa      	adds	r2, r7, #7
 8009878:	7812      	ldrb	r2, [r2, #0]
 800987a:	0011      	movs	r1, r2
 800987c:	2203      	movs	r2, #3
 800987e:	400a      	ands	r2, r1
 8009880:	00d2      	lsls	r2, r2, #3
 8009882:	21ff      	movs	r1, #255	@ 0xff
 8009884:	4091      	lsls	r1, r2
 8009886:	000a      	movs	r2, r1
 8009888:	43d2      	mvns	r2, r2
 800988a:	401a      	ands	r2, r3
 800988c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800988e:	683b      	ldr	r3, [r7, #0]
 8009890:	019b      	lsls	r3, r3, #6
 8009892:	22ff      	movs	r2, #255	@ 0xff
 8009894:	401a      	ands	r2, r3
 8009896:	1dfb      	adds	r3, r7, #7
 8009898:	781b      	ldrb	r3, [r3, #0]
 800989a:	0018      	movs	r0, r3
 800989c:	2303      	movs	r3, #3
 800989e:	4003      	ands	r3, r0
 80098a0:	00db      	lsls	r3, r3, #3
 80098a2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80098a4:	4809      	ldr	r0, [pc, #36]	@ (80098cc <__NVIC_SetPriority+0xd8>)
 80098a6:	1dfb      	adds	r3, r7, #7
 80098a8:	781b      	ldrb	r3, [r3, #0]
 80098aa:	001c      	movs	r4, r3
 80098ac:	230f      	movs	r3, #15
 80098ae:	4023      	ands	r3, r4
 80098b0:	3b08      	subs	r3, #8
 80098b2:	089b      	lsrs	r3, r3, #2
 80098b4:	430a      	orrs	r2, r1
 80098b6:	3306      	adds	r3, #6
 80098b8:	009b      	lsls	r3, r3, #2
 80098ba:	18c3      	adds	r3, r0, r3
 80098bc:	3304      	adds	r3, #4
 80098be:	601a      	str	r2, [r3, #0]
}
 80098c0:	46c0      	nop			@ (mov r8, r8)
 80098c2:	46bd      	mov	sp, r7
 80098c4:	b003      	add	sp, #12
 80098c6:	bd90      	pop	{r4, r7, pc}
 80098c8:	e000e100 	.word	0xe000e100
 80098cc:	e000ed00 	.word	0xe000ed00

080098d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80098d0:	b580      	push	{r7, lr}
 80098d2:	b082      	sub	sp, #8
 80098d4:	af00      	add	r7, sp, #0
 80098d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	1e5a      	subs	r2, r3, #1
 80098dc:	2380      	movs	r3, #128	@ 0x80
 80098de:	045b      	lsls	r3, r3, #17
 80098e0:	429a      	cmp	r2, r3
 80098e2:	d301      	bcc.n	80098e8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80098e4:	2301      	movs	r3, #1
 80098e6:	e010      	b.n	800990a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80098e8:	4b0a      	ldr	r3, [pc, #40]	@ (8009914 <SysTick_Config+0x44>)
 80098ea:	687a      	ldr	r2, [r7, #4]
 80098ec:	3a01      	subs	r2, #1
 80098ee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80098f0:	2301      	movs	r3, #1
 80098f2:	425b      	negs	r3, r3
 80098f4:	2103      	movs	r1, #3
 80098f6:	0018      	movs	r0, r3
 80098f8:	f7ff ff7c 	bl	80097f4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80098fc:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <SysTick_Config+0x44>)
 80098fe:	2200      	movs	r2, #0
 8009900:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8009902:	4b04      	ldr	r3, [pc, #16]	@ (8009914 <SysTick_Config+0x44>)
 8009904:	2207      	movs	r2, #7
 8009906:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009908:	2300      	movs	r3, #0
}
 800990a:	0018      	movs	r0, r3
 800990c:	46bd      	mov	sp, r7
 800990e:	b002      	add	sp, #8
 8009910:	bd80      	pop	{r7, pc}
 8009912:	46c0      	nop			@ (mov r8, r8)
 8009914:	e000e010 	.word	0xe000e010

08009918 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8009918:	b580      	push	{r7, lr}
 800991a:	b084      	sub	sp, #16
 800991c:	af00      	add	r7, sp, #0
 800991e:	60b9      	str	r1, [r7, #8]
 8009920:	607a      	str	r2, [r7, #4]
 8009922:	210f      	movs	r1, #15
 8009924:	187b      	adds	r3, r7, r1
 8009926:	1c02      	adds	r2, r0, #0
 8009928:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800992a:	68ba      	ldr	r2, [r7, #8]
 800992c:	187b      	adds	r3, r7, r1
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	b25b      	sxtb	r3, r3
 8009932:	0011      	movs	r1, r2
 8009934:	0018      	movs	r0, r3
 8009936:	f7ff ff5d 	bl	80097f4 <__NVIC_SetPriority>
}
 800993a:	46c0      	nop			@ (mov r8, r8)
 800993c:	46bd      	mov	sp, r7
 800993e:	b004      	add	sp, #16
 8009940:	bd80      	pop	{r7, pc}

08009942 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b082      	sub	sp, #8
 8009946:	af00      	add	r7, sp, #0
 8009948:	0002      	movs	r2, r0
 800994a:	1dfb      	adds	r3, r7, #7
 800994c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800994e:	1dfb      	adds	r3, r7, #7
 8009950:	781b      	ldrb	r3, [r3, #0]
 8009952:	b25b      	sxtb	r3, r3
 8009954:	0018      	movs	r0, r3
 8009956:	f7ff ff33 	bl	80097c0 <__NVIC_EnableIRQ>
}
 800995a:	46c0      	nop			@ (mov r8, r8)
 800995c:	46bd      	mov	sp, r7
 800995e:	b002      	add	sp, #8
 8009960:	bd80      	pop	{r7, pc}

08009962 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8009962:	b580      	push	{r7, lr}
 8009964:	b082      	sub	sp, #8
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	0018      	movs	r0, r3
 800996e:	f7ff ffaf 	bl	80098d0 <SysTick_Config>
 8009972:	0003      	movs	r3, r0
}
 8009974:	0018      	movs	r0, r3
 8009976:	46bd      	mov	sp, r7
 8009978:	b002      	add	sp, #8
 800997a:	bd80      	pop	{r7, pc}

0800997c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800997c:	b580      	push	{r7, lr}
 800997e:	b084      	sub	sp, #16
 8009980:	af00      	add	r7, sp, #0
 8009982:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2b00      	cmp	r3, #0
 8009988:	d101      	bne.n	800998e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e061      	b.n	8009a52 <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	4a32      	ldr	r2, [pc, #200]	@ (8009a5c <HAL_DMA_Init+0xe0>)
 8009994:	4694      	mov	ip, r2
 8009996:	4463      	add	r3, ip
 8009998:	2114      	movs	r1, #20
 800999a:	0018      	movs	r0, r3
 800999c:	f7f6 fbf8 	bl	8000190 <__udivsi3>
 80099a0:	0003      	movs	r3, r0
 80099a2:	009a      	lsls	r2, r3, #2
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	4a2d      	ldr	r2, [pc, #180]	@ (8009a60 <HAL_DMA_Init+0xe4>)
 80099ac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	2225      	movs	r2, #37	@ 0x25
 80099b2:	2102      	movs	r1, #2
 80099b4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80099be:	68fb      	ldr	r3, [r7, #12]
 80099c0:	4a28      	ldr	r2, [pc, #160]	@ (8009a64 <HAL_DMA_Init+0xe8>)
 80099c2:	4013      	ands	r3, r2
 80099c4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80099ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	691b      	ldr	r3, [r3, #16]
 80099d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80099da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	699b      	ldr	r3, [r3, #24]
 80099e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80099e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6a1b      	ldr	r3, [r3, #32]
 80099ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80099ee:	68fa      	ldr	r2, [r7, #12]
 80099f0:	4313      	orrs	r3, r2
 80099f2:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	681b      	ldr	r3, [r3, #0]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	689a      	ldr	r2, [r3, #8]
 8009a00:	2380      	movs	r3, #128	@ 0x80
 8009a02:	01db      	lsls	r3, r3, #7
 8009a04:	429a      	cmp	r2, r3
 8009a06:	d018      	beq.n	8009a3a <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009a08:	4b17      	ldr	r3, [pc, #92]	@ (8009a68 <HAL_DMA_Init+0xec>)
 8009a0a:	681a      	ldr	r2, [r3, #0]
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a10:	211c      	movs	r1, #28
 8009a12:	400b      	ands	r3, r1
 8009a14:	210f      	movs	r1, #15
 8009a16:	4099      	lsls	r1, r3
 8009a18:	000b      	movs	r3, r1
 8009a1a:	43d9      	mvns	r1, r3
 8009a1c:	4b12      	ldr	r3, [pc, #72]	@ (8009a68 <HAL_DMA_Init+0xec>)
 8009a1e:	400a      	ands	r2, r1
 8009a20:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8009a22:	4b11      	ldr	r3, [pc, #68]	@ (8009a68 <HAL_DMA_Init+0xec>)
 8009a24:	6819      	ldr	r1, [r3, #0]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009a2e:	201c      	movs	r0, #28
 8009a30:	4003      	ands	r3, r0
 8009a32:	409a      	lsls	r2, r3
 8009a34:	4b0c      	ldr	r3, [pc, #48]	@ (8009a68 <HAL_DMA_Init+0xec>)
 8009a36:	430a      	orrs	r2, r1
 8009a38:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	2225      	movs	r2, #37	@ 0x25
 8009a44:	2101      	movs	r1, #1
 8009a46:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	2224      	movs	r2, #36	@ 0x24
 8009a4c:	2100      	movs	r1, #0
 8009a4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009a50:	2300      	movs	r3, #0
}
 8009a52:	0018      	movs	r0, r3
 8009a54:	46bd      	mov	sp, r7
 8009a56:	b004      	add	sp, #16
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	46c0      	nop			@ (mov r8, r8)
 8009a5c:	bffdfff8 	.word	0xbffdfff8
 8009a60:	40020000 	.word	0x40020000
 8009a64:	ffff800f 	.word	0xffff800f
 8009a68:	400200a8 	.word	0x400200a8

08009a6c <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009a6c:	b580      	push	{r7, lr}
 8009a6e:	b082      	sub	sp, #8
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]

  /* Check the DMA handle allocation */
  if (NULL == hdma )
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d101      	bne.n	8009a7e <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	e04a      	b.n	8009b14 <HAL_DMA_DeInit+0xa8>

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Channelx */
  __HAL_DMA_DISABLE(hdma);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	2101      	movs	r1, #1
 8009a8a:	438a      	bics	r2, r1
 8009a8c:	601a      	str	r2, [r3, #0]

  /* Compute the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	4a22      	ldr	r2, [pc, #136]	@ (8009b1c <HAL_DMA_DeInit+0xb0>)
 8009a94:	4694      	mov	ip, r2
 8009a96:	4463      	add	r3, ip
 8009a98:	2114      	movs	r1, #20
 8009a9a:	0018      	movs	r0, r3
 8009a9c:	f7f6 fb78 	bl	8000190 <__udivsi3>
 8009aa0:	0003      	movs	r3, r0
 8009aa2:	009a      	lsls	r2, r3, #2
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	4a1d      	ldr	r2, [pc, #116]	@ (8009b20 <HAL_DMA_DeInit+0xb4>)
 8009aac:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset DMA Channel control register */
  hdma->Instance->CCR  = 0U;
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	601a      	str	r2, [r3, #0]

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009aba:	221c      	movs	r2, #28
 8009abc:	401a      	ands	r2, r3
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009ac2:	2101      	movs	r1, #1
 8009ac4:	4091      	lsls	r1, r2
 8009ac6:	000a      	movs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]

  /* Reset DMA channel selection register */
  /* DMA1 */
  DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8009aca:	4b16      	ldr	r3, [pc, #88]	@ (8009b24 <HAL_DMA_DeInit+0xb8>)
 8009acc:	681a      	ldr	r2, [r3, #0]
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009ad2:	211c      	movs	r1, #28
 8009ad4:	400b      	ands	r3, r1
 8009ad6:	210f      	movs	r1, #15
 8009ad8:	4099      	lsls	r1, r3
 8009ada:	000b      	movs	r3, r1
 8009adc:	43d9      	mvns	r1, r3
 8009ade:	4b11      	ldr	r3, [pc, #68]	@ (8009b24 <HAL_DMA_DeInit+0xb8>)
 8009ae0:	400a      	ands	r2, r1
 8009ae2:	601a      	str	r2, [r3, #0]

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2200      	movs	r2, #0
 8009ae8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma->XferHalfCpltCallback = NULL;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2200      	movs	r2, #0
 8009aee:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma->XferErrorCallback = NULL;
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	2200      	movs	r2, #0
 8009af4:	635a      	str	r2, [r3, #52]	@ 0x34
  hdma->XferAbortCallback = NULL;
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	2200      	movs	r2, #0
 8009afa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2225      	movs	r2, #37	@ 0x25
 8009b06:	2100      	movs	r1, #0
 8009b08:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	2224      	movs	r2, #36	@ 0x24
 8009b0e:	2100      	movs	r1, #0
 8009b10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009b12:	2300      	movs	r3, #0
}
 8009b14:	0018      	movs	r0, r3
 8009b16:	46bd      	mov	sp, r7
 8009b18:	b002      	add	sp, #8
 8009b1a:	bd80      	pop	{r7, pc}
 8009b1c:	bffdfff8 	.word	0xbffdfff8
 8009b20:	40020000 	.word	0x40020000
 8009b24:	400200a8 	.word	0x400200a8

08009b28 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b28:	b580      	push	{r7, lr}
 8009b2a:	b086      	sub	sp, #24
 8009b2c:	af00      	add	r7, sp, #0
 8009b2e:	60f8      	str	r0, [r7, #12]
 8009b30:	60b9      	str	r1, [r7, #8]
 8009b32:	607a      	str	r2, [r7, #4]
 8009b34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009b36:	2317      	movs	r3, #23
 8009b38:	18fb      	adds	r3, r7, r3
 8009b3a:	2200      	movs	r2, #0
 8009b3c:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	2224      	movs	r2, #36	@ 0x24
 8009b42:	5c9b      	ldrb	r3, [r3, r2]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	d101      	bne.n	8009b4c <HAL_DMA_Start_IT+0x24>
 8009b48:	2302      	movs	r3, #2
 8009b4a:	e04f      	b.n	8009bec <HAL_DMA_Start_IT+0xc4>
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2224      	movs	r2, #36	@ 0x24
 8009b50:	2101      	movs	r1, #1
 8009b52:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2225      	movs	r2, #37	@ 0x25
 8009b58:	5c9b      	ldrb	r3, [r3, r2]
 8009b5a:	b2db      	uxtb	r3, r3
 8009b5c:	2b01      	cmp	r3, #1
 8009b5e:	d13a      	bne.n	8009bd6 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	2225      	movs	r2, #37	@ 0x25
 8009b64:	2102      	movs	r1, #2
 8009b66:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009b68:	68fb      	ldr	r3, [r7, #12]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009b6e:	68fb      	ldr	r3, [r7, #12]
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	681a      	ldr	r2, [r3, #0]
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	2101      	movs	r1, #1
 8009b7a:	438a      	bics	r2, r1
 8009b7c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8009b7e:	683b      	ldr	r3, [r7, #0]
 8009b80:	687a      	ldr	r2, [r7, #4]
 8009b82:	68b9      	ldr	r1, [r7, #8]
 8009b84:	68f8      	ldr	r0, [r7, #12]
 8009b86:	f000 f976 	bl	8009e76 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d008      	beq.n	8009ba4 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009b92:	68fb      	ldr	r3, [r7, #12]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	681a      	ldr	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	210e      	movs	r1, #14
 8009b9e:	430a      	orrs	r2, r1
 8009ba0:	601a      	str	r2, [r3, #0]
 8009ba2:	e00f      	b.n	8009bc4 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	681a      	ldr	r2, [r3, #0]
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2104      	movs	r1, #4
 8009bb0:	438a      	bics	r2, r1
 8009bb2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8009bb4:	68fb      	ldr	r3, [r7, #12]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	681a      	ldr	r2, [r3, #0]
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	210a      	movs	r1, #10
 8009bc0:	430a      	orrs	r2, r1
 8009bc2:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009bc4:	68fb      	ldr	r3, [r7, #12]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	681a      	ldr	r2, [r3, #0]
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	2101      	movs	r1, #1
 8009bd0:	430a      	orrs	r2, r1
 8009bd2:	601a      	str	r2, [r3, #0]
 8009bd4:	e007      	b.n	8009be6 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2224      	movs	r2, #36	@ 0x24
 8009bda:	2100      	movs	r1, #0
 8009bdc:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8009bde:	2317      	movs	r3, #23
 8009be0:	18fb      	adds	r3, r7, r3
 8009be2:	2202      	movs	r2, #2
 8009be4:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8009be6:	2317      	movs	r3, #23
 8009be8:	18fb      	adds	r3, r7, r3
 8009bea:	781b      	ldrb	r3, [r3, #0]
}
 8009bec:	0018      	movs	r0, r3
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	b006      	add	sp, #24
 8009bf2:	bd80      	pop	{r7, pc}

08009bf4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b084      	sub	sp, #16
 8009bf8:	af00      	add	r7, sp, #0
 8009bfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bfc:	230f      	movs	r3, #15
 8009bfe:	18fb      	adds	r3, r7, r3
 8009c00:	2200      	movs	r2, #0
 8009c02:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	2225      	movs	r2, #37	@ 0x25
 8009c08:	5c9b      	ldrb	r3, [r3, r2]
 8009c0a:	b2db      	uxtb	r3, r3
 8009c0c:	2b02      	cmp	r3, #2
 8009c0e:	d008      	beq.n	8009c22 <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2204      	movs	r2, #4
 8009c14:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2224      	movs	r2, #36	@ 0x24
 8009c1a:	2100      	movs	r1, #0
 8009c1c:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8009c1e:	2301      	movs	r3, #1
 8009c20:	e024      	b.n	8009c6c <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	681a      	ldr	r2, [r3, #0]
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	210e      	movs	r1, #14
 8009c2e:	438a      	bics	r2, r1
 8009c30:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	681a      	ldr	r2, [r3, #0]
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	2101      	movs	r1, #1
 8009c3e:	438a      	bics	r2, r1
 8009c40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009c46:	221c      	movs	r2, #28
 8009c48:	401a      	ands	r2, r3
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009c4e:	2101      	movs	r1, #1
 8009c50:	4091      	lsls	r1, r2
 8009c52:	000a      	movs	r2, r1
 8009c54:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	2225      	movs	r2, #37	@ 0x25
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2224      	movs	r2, #36	@ 0x24
 8009c62:	2100      	movs	r1, #0
 8009c64:	5499      	strb	r1, [r3, r2]

    return status;
 8009c66:	230f      	movs	r3, #15
 8009c68:	18fb      	adds	r3, r7, r3
 8009c6a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009c6c:	0018      	movs	r0, r3
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	b004      	add	sp, #16
 8009c72:	bd80      	pop	{r7, pc}

08009c74 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8009c74:	b580      	push	{r7, lr}
 8009c76:	b084      	sub	sp, #16
 8009c78:	af00      	add	r7, sp, #0
 8009c7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009c7c:	210f      	movs	r1, #15
 8009c7e:	187b      	adds	r3, r7, r1
 8009c80:	2200      	movs	r2, #0
 8009c82:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	2225      	movs	r2, #37	@ 0x25
 8009c88:	5c9b      	ldrb	r3, [r3, r2]
 8009c8a:	b2db      	uxtb	r3, r3
 8009c8c:	2b02      	cmp	r3, #2
 8009c8e:	d006      	beq.n	8009c9e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2204      	movs	r2, #4
 8009c94:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8009c96:	187b      	adds	r3, r7, r1
 8009c98:	2201      	movs	r2, #1
 8009c9a:	701a      	strb	r2, [r3, #0]
 8009c9c:	e02a      	b.n	8009cf4 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	210e      	movs	r1, #14
 8009caa:	438a      	bics	r2, r1
 8009cac:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2101      	movs	r1, #1
 8009cba:	438a      	bics	r2, r1
 8009cbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009cc2:	221c      	movs	r2, #28
 8009cc4:	401a      	ands	r2, r3
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cca:	2101      	movs	r1, #1
 8009ccc:	4091      	lsls	r1, r2
 8009cce:	000a      	movs	r2, r1
 8009cd0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	2225      	movs	r2, #37	@ 0x25
 8009cd6:	2101      	movs	r1, #1
 8009cd8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2224      	movs	r2, #36	@ 0x24
 8009cde:	2100      	movs	r1, #0
 8009ce0:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d004      	beq.n	8009cf4 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	0010      	movs	r0, r2
 8009cf2:	4798      	blx	r3
    }
  }
  return status;
 8009cf4:	230f      	movs	r3, #15
 8009cf6:	18fb      	adds	r3, r7, r3
 8009cf8:	781b      	ldrb	r3, [r3, #0]
}
 8009cfa:	0018      	movs	r0, r3
 8009cfc:	46bd      	mov	sp, r7
 8009cfe:	b004      	add	sp, #16
 8009d00:	bd80      	pop	{r7, pc}

08009d02 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009d02:	b580      	push	{r7, lr}
 8009d04:	b084      	sub	sp, #16
 8009d06:	af00      	add	r7, sp, #0
 8009d08:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d0e:	681b      	ldr	r3, [r3, #0]
 8009d10:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d1e:	221c      	movs	r2, #28
 8009d20:	4013      	ands	r3, r2
 8009d22:	2204      	movs	r2, #4
 8009d24:	409a      	lsls	r2, r3
 8009d26:	0013      	movs	r3, r2
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4013      	ands	r3, r2
 8009d2c:	d026      	beq.n	8009d7c <HAL_DMA_IRQHandler+0x7a>
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	2204      	movs	r2, #4
 8009d32:	4013      	ands	r3, r2
 8009d34:	d022      	beq.n	8009d7c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	2220      	movs	r2, #32
 8009d3e:	4013      	ands	r3, r2
 8009d40:	d107      	bne.n	8009d52 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	681a      	ldr	r2, [r3, #0]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	2104      	movs	r1, #4
 8009d4e:	438a      	bics	r2, r1
 8009d50:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d56:	221c      	movs	r2, #28
 8009d58:	401a      	ands	r2, r3
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009d5e:	2104      	movs	r1, #4
 8009d60:	4091      	lsls	r1, r2
 8009d62:	000a      	movs	r2, r1
 8009d64:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d100      	bne.n	8009d70 <HAL_DMA_IRQHandler+0x6e>
 8009d6e:	e071      	b.n	8009e54 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009d74:	687a      	ldr	r2, [r7, #4]
 8009d76:	0010      	movs	r0, r2
 8009d78:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8009d7a:	e06b      	b.n	8009e54 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d80:	221c      	movs	r2, #28
 8009d82:	4013      	ands	r3, r2
 8009d84:	2202      	movs	r2, #2
 8009d86:	409a      	lsls	r2, r3
 8009d88:	0013      	movs	r3, r2
 8009d8a:	68fa      	ldr	r2, [r7, #12]
 8009d8c:	4013      	ands	r3, r2
 8009d8e:	d02d      	beq.n	8009dec <HAL_DMA_IRQHandler+0xea>
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	2202      	movs	r2, #2
 8009d94:	4013      	ands	r3, r2
 8009d96:	d029      	beq.n	8009dec <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	2220      	movs	r2, #32
 8009da0:	4013      	ands	r3, r2
 8009da2:	d10b      	bne.n	8009dbc <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	681a      	ldr	r2, [r3, #0]
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	210a      	movs	r1, #10
 8009db0:	438a      	bics	r2, r1
 8009db2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009db4:	687b      	ldr	r3, [r7, #4]
 8009db6:	2225      	movs	r2, #37	@ 0x25
 8009db8:	2101      	movs	r1, #1
 8009dba:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009dc0:	221c      	movs	r2, #28
 8009dc2:	401a      	ands	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009dc8:	2102      	movs	r1, #2
 8009dca:	4091      	lsls	r1, r2
 8009dcc:	000a      	movs	r2, r1
 8009dce:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	2224      	movs	r2, #36	@ 0x24
 8009dd4:	2100      	movs	r1, #0
 8009dd6:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d039      	beq.n	8009e54 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009de4:	687a      	ldr	r2, [r7, #4]
 8009de6:	0010      	movs	r0, r2
 8009de8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8009dea:	e033      	b.n	8009e54 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009df0:	221c      	movs	r2, #28
 8009df2:	4013      	ands	r3, r2
 8009df4:	2208      	movs	r2, #8
 8009df6:	409a      	lsls	r2, r3
 8009df8:	0013      	movs	r3, r2
 8009dfa:	68fa      	ldr	r2, [r7, #12]
 8009dfc:	4013      	ands	r3, r2
 8009dfe:	d02a      	beq.n	8009e56 <HAL_DMA_IRQHandler+0x154>
 8009e00:	68bb      	ldr	r3, [r7, #8]
 8009e02:	2208      	movs	r2, #8
 8009e04:	4013      	ands	r3, r2
 8009e06:	d026      	beq.n	8009e56 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	681a      	ldr	r2, [r3, #0]
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	210e      	movs	r1, #14
 8009e14:	438a      	bics	r2, r1
 8009e16:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e1c:	221c      	movs	r2, #28
 8009e1e:	401a      	ands	r2, r3
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e24:	2101      	movs	r1, #1
 8009e26:	4091      	lsls	r1, r2
 8009e28:	000a      	movs	r2, r1
 8009e2a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2201      	movs	r2, #1
 8009e30:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	2225      	movs	r2, #37	@ 0x25
 8009e36:	2101      	movs	r1, #1
 8009e38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	2224      	movs	r2, #36	@ 0x24
 8009e3e:	2100      	movs	r1, #0
 8009e40:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d005      	beq.n	8009e56 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	0010      	movs	r0, r2
 8009e52:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8009e54:	46c0      	nop			@ (mov r8, r8)
 8009e56:	46c0      	nop			@ (mov r8, r8)
}
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	b004      	add	sp, #16
 8009e5c:	bd80      	pop	{r7, pc}

08009e5e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8009e5e:	b580      	push	{r7, lr}
 8009e60:	b082      	sub	sp, #8
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2225      	movs	r2, #37	@ 0x25
 8009e6a:	5c9b      	ldrb	r3, [r3, r2]
 8009e6c:	b2db      	uxtb	r3, r3
}
 8009e6e:	0018      	movs	r0, r3
 8009e70:	46bd      	mov	sp, r7
 8009e72:	b002      	add	sp, #8
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b084      	sub	sp, #16
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	60f8      	str	r0, [r7, #12]
 8009e7e:	60b9      	str	r1, [r7, #8]
 8009e80:	607a      	str	r2, [r7, #4]
 8009e82:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8009e84:	68fb      	ldr	r3, [r7, #12]
 8009e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009e88:	221c      	movs	r2, #28
 8009e8a:	401a      	ands	r2, r3
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009e90:	2101      	movs	r1, #1
 8009e92:	4091      	lsls	r1, r2
 8009e94:	000a      	movs	r2, r1
 8009e96:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	683a      	ldr	r2, [r7, #0]
 8009e9e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	2b10      	cmp	r3, #16
 8009ea6:	d108      	bne.n	8009eba <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	687a      	ldr	r2, [r7, #4]
 8009eae:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	68ba      	ldr	r2, [r7, #8]
 8009eb6:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8009eb8:	e007      	b.n	8009eca <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8009eba:	68fb      	ldr	r3, [r7, #12]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	687a      	ldr	r2, [r7, #4]
 8009ec8:	60da      	str	r2, [r3, #12]
}
 8009eca:	46c0      	nop			@ (mov r8, r8)
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	b004      	add	sp, #16
 8009ed0:	bd80      	pop	{r7, pc}
	...

08009ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b086      	sub	sp, #24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8009eea:	e155      	b.n	800a198 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	681b      	ldr	r3, [r3, #0]
 8009ef0:	2101      	movs	r1, #1
 8009ef2:	697a      	ldr	r2, [r7, #20]
 8009ef4:	4091      	lsls	r1, r2
 8009ef6:	000a      	movs	r2, r1
 8009ef8:	4013      	ands	r3, r2
 8009efa:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d100      	bne.n	8009f04 <HAL_GPIO_Init+0x30>
 8009f02:	e146      	b.n	800a192 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	685b      	ldr	r3, [r3, #4]
 8009f08:	2203      	movs	r2, #3
 8009f0a:	4013      	ands	r3, r2
 8009f0c:	2b01      	cmp	r3, #1
 8009f0e:	d005      	beq.n	8009f1c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8009f10:	683b      	ldr	r3, [r7, #0]
 8009f12:	685b      	ldr	r3, [r3, #4]
 8009f14:	2203      	movs	r2, #3
 8009f16:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8009f18:	2b02      	cmp	r3, #2
 8009f1a:	d130      	bne.n	8009f7e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	689b      	ldr	r3, [r3, #8]
 8009f20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8009f22:	697b      	ldr	r3, [r7, #20]
 8009f24:	005b      	lsls	r3, r3, #1
 8009f26:	2203      	movs	r2, #3
 8009f28:	409a      	lsls	r2, r3
 8009f2a:	0013      	movs	r3, r2
 8009f2c:	43da      	mvns	r2, r3
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	4013      	ands	r3, r2
 8009f32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	68da      	ldr	r2, [r3, #12]
 8009f38:	697b      	ldr	r3, [r7, #20]
 8009f3a:	005b      	lsls	r3, r3, #1
 8009f3c:	409a      	lsls	r2, r3
 8009f3e:	0013      	movs	r3, r2
 8009f40:	693a      	ldr	r2, [r7, #16]
 8009f42:	4313      	orrs	r3, r2
 8009f44:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	693a      	ldr	r2, [r7, #16]
 8009f4a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	685b      	ldr	r3, [r3, #4]
 8009f50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8009f52:	2201      	movs	r2, #1
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	409a      	lsls	r2, r3
 8009f58:	0013      	movs	r3, r2
 8009f5a:	43da      	mvns	r2, r3
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	4013      	ands	r3, r2
 8009f60:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8009f62:	683b      	ldr	r3, [r7, #0]
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	091b      	lsrs	r3, r3, #4
 8009f68:	2201      	movs	r2, #1
 8009f6a:	401a      	ands	r2, r3
 8009f6c:	697b      	ldr	r3, [r7, #20]
 8009f6e:	409a      	lsls	r2, r3
 8009f70:	0013      	movs	r3, r2
 8009f72:	693a      	ldr	r2, [r7, #16]
 8009f74:	4313      	orrs	r3, r2
 8009f76:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	693a      	ldr	r2, [r7, #16]
 8009f7c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	2203      	movs	r2, #3
 8009f84:	4013      	ands	r3, r2
 8009f86:	2b03      	cmp	r3, #3
 8009f88:	d017      	beq.n	8009fba <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	68db      	ldr	r3, [r3, #12]
 8009f8e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8009f90:	697b      	ldr	r3, [r7, #20]
 8009f92:	005b      	lsls	r3, r3, #1
 8009f94:	2203      	movs	r2, #3
 8009f96:	409a      	lsls	r2, r3
 8009f98:	0013      	movs	r3, r2
 8009f9a:	43da      	mvns	r2, r3
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	4013      	ands	r3, r2
 8009fa0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8009fa2:	683b      	ldr	r3, [r7, #0]
 8009fa4:	689a      	ldr	r2, [r3, #8]
 8009fa6:	697b      	ldr	r3, [r7, #20]
 8009fa8:	005b      	lsls	r3, r3, #1
 8009faa:	409a      	lsls	r2, r3
 8009fac:	0013      	movs	r3, r2
 8009fae:	693a      	ldr	r2, [r7, #16]
 8009fb0:	4313      	orrs	r3, r2
 8009fb2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	693a      	ldr	r2, [r7, #16]
 8009fb8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8009fba:	683b      	ldr	r3, [r7, #0]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	2203      	movs	r2, #3
 8009fc0:	4013      	ands	r3, r2
 8009fc2:	2b02      	cmp	r3, #2
 8009fc4:	d123      	bne.n	800a00e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	08da      	lsrs	r2, r3, #3
 8009fca:	687b      	ldr	r3, [r7, #4]
 8009fcc:	3208      	adds	r2, #8
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	58d3      	ldr	r3, [r2, r3]
 8009fd2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8009fd4:	697b      	ldr	r3, [r7, #20]
 8009fd6:	2207      	movs	r2, #7
 8009fd8:	4013      	ands	r3, r2
 8009fda:	009b      	lsls	r3, r3, #2
 8009fdc:	220f      	movs	r2, #15
 8009fde:	409a      	lsls	r2, r3
 8009fe0:	0013      	movs	r3, r2
 8009fe2:	43da      	mvns	r2, r3
 8009fe4:	693b      	ldr	r3, [r7, #16]
 8009fe6:	4013      	ands	r3, r2
 8009fe8:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8009fea:	683b      	ldr	r3, [r7, #0]
 8009fec:	691a      	ldr	r2, [r3, #16]
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	2107      	movs	r1, #7
 8009ff2:	400b      	ands	r3, r1
 8009ff4:	009b      	lsls	r3, r3, #2
 8009ff6:	409a      	lsls	r2, r3
 8009ff8:	0013      	movs	r3, r2
 8009ffa:	693a      	ldr	r2, [r7, #16]
 8009ffc:	4313      	orrs	r3, r2
 8009ffe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800a000:	697b      	ldr	r3, [r7, #20]
 800a002:	08da      	lsrs	r2, r3, #3
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	3208      	adds	r2, #8
 800a008:	0092      	lsls	r2, r2, #2
 800a00a:	6939      	ldr	r1, [r7, #16]
 800a00c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	005b      	lsls	r3, r3, #1
 800a018:	2203      	movs	r2, #3
 800a01a:	409a      	lsls	r2, r3
 800a01c:	0013      	movs	r3, r2
 800a01e:	43da      	mvns	r2, r3
 800a020:	693b      	ldr	r3, [r7, #16]
 800a022:	4013      	ands	r3, r2
 800a024:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a026:	683b      	ldr	r3, [r7, #0]
 800a028:	685b      	ldr	r3, [r3, #4]
 800a02a:	2203      	movs	r2, #3
 800a02c:	401a      	ands	r2, r3
 800a02e:	697b      	ldr	r3, [r7, #20]
 800a030:	005b      	lsls	r3, r3, #1
 800a032:	409a      	lsls	r2, r3
 800a034:	0013      	movs	r3, r2
 800a036:	693a      	ldr	r2, [r7, #16]
 800a038:	4313      	orrs	r3, r2
 800a03a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	693a      	ldr	r2, [r7, #16]
 800a040:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	685a      	ldr	r2, [r3, #4]
 800a046:	23c0      	movs	r3, #192	@ 0xc0
 800a048:	029b      	lsls	r3, r3, #10
 800a04a:	4013      	ands	r3, r2
 800a04c:	d100      	bne.n	800a050 <HAL_GPIO_Init+0x17c>
 800a04e:	e0a0      	b.n	800a192 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a050:	4b57      	ldr	r3, [pc, #348]	@ (800a1b0 <HAL_GPIO_Init+0x2dc>)
 800a052:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a054:	4b56      	ldr	r3, [pc, #344]	@ (800a1b0 <HAL_GPIO_Init+0x2dc>)
 800a056:	2101      	movs	r1, #1
 800a058:	430a      	orrs	r2, r1
 800a05a:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800a05c:	4a55      	ldr	r2, [pc, #340]	@ (800a1b4 <HAL_GPIO_Init+0x2e0>)
 800a05e:	697b      	ldr	r3, [r7, #20]
 800a060:	089b      	lsrs	r3, r3, #2
 800a062:	3302      	adds	r3, #2
 800a064:	009b      	lsls	r3, r3, #2
 800a066:	589b      	ldr	r3, [r3, r2]
 800a068:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800a06a:	697b      	ldr	r3, [r7, #20]
 800a06c:	2203      	movs	r2, #3
 800a06e:	4013      	ands	r3, r2
 800a070:	009b      	lsls	r3, r3, #2
 800a072:	220f      	movs	r2, #15
 800a074:	409a      	lsls	r2, r3
 800a076:	0013      	movs	r3, r2
 800a078:	43da      	mvns	r2, r3
 800a07a:	693b      	ldr	r3, [r7, #16]
 800a07c:	4013      	ands	r3, r2
 800a07e:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800a080:	687a      	ldr	r2, [r7, #4]
 800a082:	23a0      	movs	r3, #160	@ 0xa0
 800a084:	05db      	lsls	r3, r3, #23
 800a086:	429a      	cmp	r2, r3
 800a088:	d01f      	beq.n	800a0ca <HAL_GPIO_Init+0x1f6>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	4a4a      	ldr	r2, [pc, #296]	@ (800a1b8 <HAL_GPIO_Init+0x2e4>)
 800a08e:	4293      	cmp	r3, r2
 800a090:	d019      	beq.n	800a0c6 <HAL_GPIO_Init+0x1f2>
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	4a49      	ldr	r2, [pc, #292]	@ (800a1bc <HAL_GPIO_Init+0x2e8>)
 800a096:	4293      	cmp	r3, r2
 800a098:	d013      	beq.n	800a0c2 <HAL_GPIO_Init+0x1ee>
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a48      	ldr	r2, [pc, #288]	@ (800a1c0 <HAL_GPIO_Init+0x2ec>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d00d      	beq.n	800a0be <HAL_GPIO_Init+0x1ea>
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	4a47      	ldr	r2, [pc, #284]	@ (800a1c4 <HAL_GPIO_Init+0x2f0>)
 800a0a6:	4293      	cmp	r3, r2
 800a0a8:	d007      	beq.n	800a0ba <HAL_GPIO_Init+0x1e6>
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	4a46      	ldr	r2, [pc, #280]	@ (800a1c8 <HAL_GPIO_Init+0x2f4>)
 800a0ae:	4293      	cmp	r3, r2
 800a0b0:	d101      	bne.n	800a0b6 <HAL_GPIO_Init+0x1e2>
 800a0b2:	2305      	movs	r3, #5
 800a0b4:	e00a      	b.n	800a0cc <HAL_GPIO_Init+0x1f8>
 800a0b6:	2306      	movs	r3, #6
 800a0b8:	e008      	b.n	800a0cc <HAL_GPIO_Init+0x1f8>
 800a0ba:	2304      	movs	r3, #4
 800a0bc:	e006      	b.n	800a0cc <HAL_GPIO_Init+0x1f8>
 800a0be:	2303      	movs	r3, #3
 800a0c0:	e004      	b.n	800a0cc <HAL_GPIO_Init+0x1f8>
 800a0c2:	2302      	movs	r3, #2
 800a0c4:	e002      	b.n	800a0cc <HAL_GPIO_Init+0x1f8>
 800a0c6:	2301      	movs	r3, #1
 800a0c8:	e000      	b.n	800a0cc <HAL_GPIO_Init+0x1f8>
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	697a      	ldr	r2, [r7, #20]
 800a0ce:	2103      	movs	r1, #3
 800a0d0:	400a      	ands	r2, r1
 800a0d2:	0092      	lsls	r2, r2, #2
 800a0d4:	4093      	lsls	r3, r2
 800a0d6:	693a      	ldr	r2, [r7, #16]
 800a0d8:	4313      	orrs	r3, r2
 800a0da:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a0dc:	4935      	ldr	r1, [pc, #212]	@ (800a1b4 <HAL_GPIO_Init+0x2e0>)
 800a0de:	697b      	ldr	r3, [r7, #20]
 800a0e0:	089b      	lsrs	r3, r3, #2
 800a0e2:	3302      	adds	r3, #2
 800a0e4:	009b      	lsls	r3, r3, #2
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a0ea:	4b38      	ldr	r3, [pc, #224]	@ (800a1cc <HAL_GPIO_Init+0x2f8>)
 800a0ec:	689b      	ldr	r3, [r3, #8]
 800a0ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	43da      	mvns	r2, r3
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	4013      	ands	r3, r2
 800a0f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800a0fa:	683b      	ldr	r3, [r7, #0]
 800a0fc:	685a      	ldr	r2, [r3, #4]
 800a0fe:	2380      	movs	r3, #128	@ 0x80
 800a100:	035b      	lsls	r3, r3, #13
 800a102:	4013      	ands	r3, r2
 800a104:	d003      	beq.n	800a10e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800a106:	693a      	ldr	r2, [r7, #16]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	4313      	orrs	r3, r2
 800a10c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800a10e:	4b2f      	ldr	r3, [pc, #188]	@ (800a1cc <HAL_GPIO_Init+0x2f8>)
 800a110:	693a      	ldr	r2, [r7, #16]
 800a112:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800a114:	4b2d      	ldr	r3, [pc, #180]	@ (800a1cc <HAL_GPIO_Init+0x2f8>)
 800a116:	68db      	ldr	r3, [r3, #12]
 800a118:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	43da      	mvns	r2, r3
 800a11e:	693b      	ldr	r3, [r7, #16]
 800a120:	4013      	ands	r3, r2
 800a122:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800a124:	683b      	ldr	r3, [r7, #0]
 800a126:	685a      	ldr	r2, [r3, #4]
 800a128:	2380      	movs	r3, #128	@ 0x80
 800a12a:	039b      	lsls	r3, r3, #14
 800a12c:	4013      	ands	r3, r2
 800a12e:	d003      	beq.n	800a138 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800a130:	693a      	ldr	r2, [r7, #16]
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	4313      	orrs	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800a138:	4b24      	ldr	r3, [pc, #144]	@ (800a1cc <HAL_GPIO_Init+0x2f8>)
 800a13a:	693a      	ldr	r2, [r7, #16]
 800a13c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800a13e:	4b23      	ldr	r3, [pc, #140]	@ (800a1cc <HAL_GPIO_Init+0x2f8>)
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	43da      	mvns	r2, r3
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	4013      	ands	r3, r2
 800a14c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800a14e:	683b      	ldr	r3, [r7, #0]
 800a150:	685a      	ldr	r2, [r3, #4]
 800a152:	2380      	movs	r3, #128	@ 0x80
 800a154:	029b      	lsls	r3, r3, #10
 800a156:	4013      	ands	r3, r2
 800a158:	d003      	beq.n	800a162 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800a15a:	693a      	ldr	r2, [r7, #16]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	4313      	orrs	r3, r2
 800a160:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800a162:	4b1a      	ldr	r3, [pc, #104]	@ (800a1cc <HAL_GPIO_Init+0x2f8>)
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a168:	4b18      	ldr	r3, [pc, #96]	@ (800a1cc <HAL_GPIO_Init+0x2f8>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	43da      	mvns	r2, r3
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	4013      	ands	r3, r2
 800a176:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	685a      	ldr	r2, [r3, #4]
 800a17c:	2380      	movs	r3, #128	@ 0x80
 800a17e:	025b      	lsls	r3, r3, #9
 800a180:	4013      	ands	r3, r2
 800a182:	d003      	beq.n	800a18c <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800a184:	693a      	ldr	r2, [r7, #16]
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	4313      	orrs	r3, r2
 800a18a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800a18c:	4b0f      	ldr	r3, [pc, #60]	@ (800a1cc <HAL_GPIO_Init+0x2f8>)
 800a18e:	693a      	ldr	r2, [r7, #16]
 800a190:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	3301      	adds	r3, #1
 800a196:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	681a      	ldr	r2, [r3, #0]
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	40da      	lsrs	r2, r3
 800a1a0:	1e13      	subs	r3, r2, #0
 800a1a2:	d000      	beq.n	800a1a6 <HAL_GPIO_Init+0x2d2>
 800a1a4:	e6a2      	b.n	8009eec <HAL_GPIO_Init+0x18>
  }
}
 800a1a6:	46c0      	nop			@ (mov r8, r8)
 800a1a8:	46c0      	nop			@ (mov r8, r8)
 800a1aa:	46bd      	mov	sp, r7
 800a1ac:	b006      	add	sp, #24
 800a1ae:	bd80      	pop	{r7, pc}
 800a1b0:	40021000 	.word	0x40021000
 800a1b4:	40010000 	.word	0x40010000
 800a1b8:	50000400 	.word	0x50000400
 800a1bc:	50000800 	.word	0x50000800
 800a1c0:	50000c00 	.word	0x50000c00
 800a1c4:	50001000 	.word	0x50001000
 800a1c8:	50001c00 	.word	0x50001c00
 800a1cc:	40010400 	.word	0x40010400

0800a1d0 <HAL_GPIO_DeInit>:
  *                   This parameter can be one of GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b086      	sub	sp, #24
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
 800a1d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a1da:	2300      	movs	r3, #0
 800a1dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a1de:	2300      	movs	r3, #0
 800a1e0:	613b      	str	r3, [r7, #16]
  uint32_t tmp = 0x00U;
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0)
 800a1e6:	e0bc      	b.n	800a362 <HAL_GPIO_DeInit+0x192>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Pin) & (1U << position);
 800a1e8:	2201      	movs	r2, #1
 800a1ea:	697b      	ldr	r3, [r7, #20]
 800a1ec:	409a      	lsls	r2, r3
 800a1ee:	683b      	ldr	r3, [r7, #0]
 800a1f0:	4013      	ands	r3, r2
 800a1f2:	613b      	str	r3, [r7, #16]

    if (iocurrent)
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d100      	bne.n	800a1fc <HAL_GPIO_DeInit+0x2c>
 800a1fa:	e0af      	b.n	800a35c <HAL_GPIO_DeInit+0x18c>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = SYSCFG->EXTICR[position >> 2U];
 800a1fc:	4a5e      	ldr	r2, [pc, #376]	@ (800a378 <HAL_GPIO_DeInit+0x1a8>)
 800a1fe:	697b      	ldr	r3, [r7, #20]
 800a200:	089b      	lsrs	r3, r3, #2
 800a202:	3302      	adds	r3, #2
 800a204:	009b      	lsls	r3, r3, #2
 800a206:	589b      	ldr	r3, [r3, r2]
 800a208:	60fb      	str	r3, [r7, #12]
      tmp &= ((0x0FUL) << (4U * (position & 0x03U)));
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	2203      	movs	r2, #3
 800a20e:	4013      	ands	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	220f      	movs	r2, #15
 800a214:	409a      	lsls	r2, r3
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	4013      	ands	r3, r2
 800a21a:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800a21c:	687a      	ldr	r2, [r7, #4]
 800a21e:	23a0      	movs	r3, #160	@ 0xa0
 800a220:	05db      	lsls	r3, r3, #23
 800a222:	429a      	cmp	r2, r3
 800a224:	d01f      	beq.n	800a266 <HAL_GPIO_DeInit+0x96>
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	4a54      	ldr	r2, [pc, #336]	@ (800a37c <HAL_GPIO_DeInit+0x1ac>)
 800a22a:	4293      	cmp	r3, r2
 800a22c:	d019      	beq.n	800a262 <HAL_GPIO_DeInit+0x92>
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	4a53      	ldr	r2, [pc, #332]	@ (800a380 <HAL_GPIO_DeInit+0x1b0>)
 800a232:	4293      	cmp	r3, r2
 800a234:	d013      	beq.n	800a25e <HAL_GPIO_DeInit+0x8e>
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	4a52      	ldr	r2, [pc, #328]	@ (800a384 <HAL_GPIO_DeInit+0x1b4>)
 800a23a:	4293      	cmp	r3, r2
 800a23c:	d00d      	beq.n	800a25a <HAL_GPIO_DeInit+0x8a>
 800a23e:	687b      	ldr	r3, [r7, #4]
 800a240:	4a51      	ldr	r2, [pc, #324]	@ (800a388 <HAL_GPIO_DeInit+0x1b8>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d007      	beq.n	800a256 <HAL_GPIO_DeInit+0x86>
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	4a50      	ldr	r2, [pc, #320]	@ (800a38c <HAL_GPIO_DeInit+0x1bc>)
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d101      	bne.n	800a252 <HAL_GPIO_DeInit+0x82>
 800a24e:	2305      	movs	r3, #5
 800a250:	e00a      	b.n	800a268 <HAL_GPIO_DeInit+0x98>
 800a252:	2306      	movs	r3, #6
 800a254:	e008      	b.n	800a268 <HAL_GPIO_DeInit+0x98>
 800a256:	2304      	movs	r3, #4
 800a258:	e006      	b.n	800a268 <HAL_GPIO_DeInit+0x98>
 800a25a:	2303      	movs	r3, #3
 800a25c:	e004      	b.n	800a268 <HAL_GPIO_DeInit+0x98>
 800a25e:	2302      	movs	r3, #2
 800a260:	e002      	b.n	800a268 <HAL_GPIO_DeInit+0x98>
 800a262:	2301      	movs	r3, #1
 800a264:	e000      	b.n	800a268 <HAL_GPIO_DeInit+0x98>
 800a266:	2300      	movs	r3, #0
 800a268:	697a      	ldr	r2, [r7, #20]
 800a26a:	2103      	movs	r1, #3
 800a26c:	400a      	ands	r2, r1
 800a26e:	0092      	lsls	r2, r2, #2
 800a270:	4093      	lsls	r3, r2
 800a272:	68fa      	ldr	r2, [r7, #12]
 800a274:	429a      	cmp	r2, r3
 800a276:	d132      	bne.n	800a2de <HAL_GPIO_DeInit+0x10e>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800a278:	4b45      	ldr	r3, [pc, #276]	@ (800a390 <HAL_GPIO_DeInit+0x1c0>)
 800a27a:	681a      	ldr	r2, [r3, #0]
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	43d9      	mvns	r1, r3
 800a280:	4b43      	ldr	r3, [pc, #268]	@ (800a390 <HAL_GPIO_DeInit+0x1c0>)
 800a282:	400a      	ands	r2, r1
 800a284:	601a      	str	r2, [r3, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800a286:	4b42      	ldr	r3, [pc, #264]	@ (800a390 <HAL_GPIO_DeInit+0x1c0>)
 800a288:	685a      	ldr	r2, [r3, #4]
 800a28a:	693b      	ldr	r3, [r7, #16]
 800a28c:	43d9      	mvns	r1, r3
 800a28e:	4b40      	ldr	r3, [pc, #256]	@ (800a390 <HAL_GPIO_DeInit+0x1c0>)
 800a290:	400a      	ands	r2, r1
 800a292:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 800a294:	4b3e      	ldr	r3, [pc, #248]	@ (800a390 <HAL_GPIO_DeInit+0x1c0>)
 800a296:	68da      	ldr	r2, [r3, #12]
 800a298:	693b      	ldr	r3, [r7, #16]
 800a29a:	43d9      	mvns	r1, r3
 800a29c:	4b3c      	ldr	r3, [pc, #240]	@ (800a390 <HAL_GPIO_DeInit+0x1c0>)
 800a29e:	400a      	ands	r2, r1
 800a2a0:	60da      	str	r2, [r3, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800a2a2:	4b3b      	ldr	r3, [pc, #236]	@ (800a390 <HAL_GPIO_DeInit+0x1c0>)
 800a2a4:	689a      	ldr	r2, [r3, #8]
 800a2a6:	693b      	ldr	r3, [r7, #16]
 800a2a8:	43d9      	mvns	r1, r3
 800a2aa:	4b39      	ldr	r3, [pc, #228]	@ (800a390 <HAL_GPIO_DeInit+0x1c0>)
 800a2ac:	400a      	ands	r2, r1
 800a2ae:	609a      	str	r2, [r3, #8]

        tmp = (0x0FUL) << (4U * (position & 0x03U));
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	2203      	movs	r2, #3
 800a2b4:	4013      	ands	r3, r2
 800a2b6:	009b      	lsls	r3, r3, #2
 800a2b8:	220f      	movs	r2, #15
 800a2ba:	409a      	lsls	r2, r3
 800a2bc:	0013      	movs	r3, r2
 800a2be:	60fb      	str	r3, [r7, #12]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800a2c0:	4a2d      	ldr	r2, [pc, #180]	@ (800a378 <HAL_GPIO_DeInit+0x1a8>)
 800a2c2:	697b      	ldr	r3, [r7, #20]
 800a2c4:	089b      	lsrs	r3, r3, #2
 800a2c6:	3302      	adds	r3, #2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	589a      	ldr	r2, [r3, r2]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	43d9      	mvns	r1, r3
 800a2d0:	4829      	ldr	r0, [pc, #164]	@ (800a378 <HAL_GPIO_DeInit+0x1a8>)
 800a2d2:	697b      	ldr	r3, [r7, #20]
 800a2d4:	089b      	lsrs	r3, r3, #2
 800a2d6:	400a      	ands	r2, r1
 800a2d8:	3302      	adds	r3, #2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Analog Mode (reset state) */
      GPIOx->MODER |= (GPIO_MODE_ANALOG << (position * 2U));
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	005b      	lsls	r3, r3, #1
 800a2e6:	2103      	movs	r1, #3
 800a2e8:	4099      	lsls	r1, r3
 800a2ea:	000b      	movs	r3, r1
 800a2ec:	431a      	orrs	r2, r3
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	08da      	lsrs	r2, r3, #3
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	3208      	adds	r2, #8
 800a2fa:	0092      	lsls	r2, r2, #2
 800a2fc:	58d3      	ldr	r3, [r2, r3]
 800a2fe:	697a      	ldr	r2, [r7, #20]
 800a300:	2107      	movs	r1, #7
 800a302:	400a      	ands	r2, r1
 800a304:	0092      	lsls	r2, r2, #2
 800a306:	210f      	movs	r1, #15
 800a308:	4091      	lsls	r1, r2
 800a30a:	000a      	movs	r2, r1
 800a30c:	43d1      	mvns	r1, r2
 800a30e:	697a      	ldr	r2, [r7, #20]
 800a310:	08d2      	lsrs	r2, r2, #3
 800a312:	4019      	ands	r1, r3
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	3208      	adds	r2, #8
 800a318:	0092      	lsls	r2, r2, #2
 800a31a:	50d1      	str	r1, [r2, r3]

      /* Deactivate the Pull-up oand Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	68db      	ldr	r3, [r3, #12]
 800a320:	697a      	ldr	r2, [r7, #20]
 800a322:	0052      	lsls	r2, r2, #1
 800a324:	2103      	movs	r1, #3
 800a326:	4091      	lsls	r1, r2
 800a328:	000a      	movs	r2, r1
 800a32a:	43d2      	mvns	r2, r2
 800a32c:	401a      	ands	r2, r3
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position);
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	685b      	ldr	r3, [r3, #4]
 800a336:	2101      	movs	r1, #1
 800a338:	697a      	ldr	r2, [r7, #20]
 800a33a:	4091      	lsls	r1, r2
 800a33c:	000a      	movs	r2, r1
 800a33e:	43d2      	mvns	r2, r2
 800a340:	401a      	ands	r2, r3
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800a346:	687b      	ldr	r3, [r7, #4]
 800a348:	689b      	ldr	r3, [r3, #8]
 800a34a:	697a      	ldr	r2, [r7, #20]
 800a34c:	0052      	lsls	r2, r2, #1
 800a34e:	2103      	movs	r1, #3
 800a350:	4091      	lsls	r1, r2
 800a352:	000a      	movs	r2, r1
 800a354:	43d2      	mvns	r2, r2
 800a356:	401a      	ands	r2, r3
 800a358:	687b      	ldr	r3, [r7, #4]
 800a35a:	609a      	str	r2, [r3, #8]
    }
    position++;
 800a35c:	697b      	ldr	r3, [r7, #20]
 800a35e:	3301      	adds	r3, #1
 800a360:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0)
 800a362:	683a      	ldr	r2, [r7, #0]
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	40da      	lsrs	r2, r3
 800a368:	1e13      	subs	r3, r2, #0
 800a36a:	d000      	beq.n	800a36e <HAL_GPIO_DeInit+0x19e>
 800a36c:	e73c      	b.n	800a1e8 <HAL_GPIO_DeInit+0x18>
  }
}
 800a36e:	46c0      	nop			@ (mov r8, r8)
 800a370:	46c0      	nop			@ (mov r8, r8)
 800a372:	46bd      	mov	sp, r7
 800a374:	b006      	add	sp, #24
 800a376:	bd80      	pop	{r7, pc}
 800a378:	40010000 	.word	0x40010000
 800a37c:	50000400 	.word	0x50000400
 800a380:	50000800 	.word	0x50000800
 800a384:	50000c00 	.word	0x50000c00
 800a388:	50001000 	.word	0x50001000
 800a38c:	50001c00 	.word	0x50001c00
 800a390:	40010400 	.word	0x40010400

0800a394 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a394:	b580      	push	{r7, lr}
 800a396:	b082      	sub	sp, #8
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
 800a39c:	0008      	movs	r0, r1
 800a39e:	0011      	movs	r1, r2
 800a3a0:	1cbb      	adds	r3, r7, #2
 800a3a2:	1c02      	adds	r2, r0, #0
 800a3a4:	801a      	strh	r2, [r3, #0]
 800a3a6:	1c7b      	adds	r3, r7, #1
 800a3a8:	1c0a      	adds	r2, r1, #0
 800a3aa:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800a3ac:	1c7b      	adds	r3, r7, #1
 800a3ae:	781b      	ldrb	r3, [r3, #0]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d004      	beq.n	800a3be <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a3b4:	1cbb      	adds	r3, r7, #2
 800a3b6:	881a      	ldrh	r2, [r3, #0]
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800a3bc:	e003      	b.n	800a3c6 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800a3be:	1cbb      	adds	r3, r7, #2
 800a3c0:	881a      	ldrh	r2, [r3, #0]
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800a3c6:	46c0      	nop			@ (mov r8, r8)
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	b002      	add	sp, #8
 800a3cc:	bd80      	pop	{r7, pc}
	...

0800a3d0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800a3d0:	b580      	push	{r7, lr}
 800a3d2:	b082      	sub	sp, #8
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	d101      	bne.n	800a3e2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800a3de:	2301      	movs	r3, #1
 800a3e0:	e082      	b.n	800a4e8 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2241      	movs	r2, #65	@ 0x41
 800a3e6:	5c9b      	ldrb	r3, [r3, r2]
 800a3e8:	b2db      	uxtb	r3, r3
 800a3ea:	2b00      	cmp	r3, #0
 800a3ec:	d107      	bne.n	800a3fe <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	2240      	movs	r2, #64	@ 0x40
 800a3f2:	2100      	movs	r1, #0
 800a3f4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	0018      	movs	r0, r3
 800a3fa:	f7fb f8c7 	bl	800558c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2241      	movs	r2, #65	@ 0x41
 800a402:	2124      	movs	r1, #36	@ 0x24
 800a404:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	681a      	ldr	r2, [r3, #0]
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	2101      	movs	r1, #1
 800a412:	438a      	bics	r2, r1
 800a414:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	685a      	ldr	r2, [r3, #4]
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4934      	ldr	r1, [pc, #208]	@ (800a4f0 <HAL_I2C_Init+0x120>)
 800a420:	400a      	ands	r2, r1
 800a422:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	689a      	ldr	r2, [r3, #8]
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4931      	ldr	r1, [pc, #196]	@ (800a4f4 <HAL_I2C_Init+0x124>)
 800a430:	400a      	ands	r2, r1
 800a432:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	2b01      	cmp	r3, #1
 800a43a:	d108      	bne.n	800a44e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	2180      	movs	r1, #128	@ 0x80
 800a446:	0209      	lsls	r1, r1, #8
 800a448:	430a      	orrs	r2, r1
 800a44a:	609a      	str	r2, [r3, #8]
 800a44c:	e007      	b.n	800a45e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	689a      	ldr	r2, [r3, #8]
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	681b      	ldr	r3, [r3, #0]
 800a456:	2184      	movs	r1, #132	@ 0x84
 800a458:	0209      	lsls	r1, r1, #8
 800a45a:	430a      	orrs	r2, r1
 800a45c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	68db      	ldr	r3, [r3, #12]
 800a462:	2b02      	cmp	r3, #2
 800a464:	d104      	bne.n	800a470 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	2280      	movs	r2, #128	@ 0x80
 800a46c:	0112      	lsls	r2, r2, #4
 800a46e:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	685a      	ldr	r2, [r3, #4]
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	491f      	ldr	r1, [pc, #124]	@ (800a4f8 <HAL_I2C_Init+0x128>)
 800a47c:	430a      	orrs	r2, r1
 800a47e:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	68da      	ldr	r2, [r3, #12]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	491a      	ldr	r1, [pc, #104]	@ (800a4f4 <HAL_I2C_Init+0x124>)
 800a48c:	400a      	ands	r2, r1
 800a48e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	691a      	ldr	r2, [r3, #16]
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	695b      	ldr	r3, [r3, #20]
 800a498:	431a      	orrs	r2, r3
 800a49a:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	699b      	ldr	r3, [r3, #24]
 800a4a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	681b      	ldr	r3, [r3, #0]
 800a4a6:	430a      	orrs	r2, r1
 800a4a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	69d9      	ldr	r1, [r3, #28]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	6a1a      	ldr	r2, [r3, #32]
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	430a      	orrs	r2, r1
 800a4b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	681a      	ldr	r2, [r3, #0]
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	2101      	movs	r1, #1
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2200      	movs	r2, #0
 800a4ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	2241      	movs	r2, #65	@ 0x41
 800a4d4:	2120      	movs	r1, #32
 800a4d6:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	2200      	movs	r2, #0
 800a4dc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2242      	movs	r2, #66	@ 0x42
 800a4e2:	2100      	movs	r1, #0
 800a4e4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800a4e6:	2300      	movs	r3, #0
}
 800a4e8:	0018      	movs	r0, r3
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	b002      	add	sp, #8
 800a4ee:	bd80      	pop	{r7, pc}
 800a4f0:	f0ffffff 	.word	0xf0ffffff
 800a4f4:	ffff7fff 	.word	0xffff7fff
 800a4f8:	02008000 	.word	0x02008000

0800a4fc <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800a4fc:	b5b0      	push	{r4, r5, r7, lr}
 800a4fe:	b088      	sub	sp, #32
 800a500:	af02      	add	r7, sp, #8
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	0008      	movs	r0, r1
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	0019      	movs	r1, r3
 800a50a:	230a      	movs	r3, #10
 800a50c:	18fb      	adds	r3, r7, r3
 800a50e:	1c02      	adds	r2, r0, #0
 800a510:	801a      	strh	r2, [r3, #0]
 800a512:	2308      	movs	r3, #8
 800a514:	18fb      	adds	r3, r7, r3
 800a516:	1c0a      	adds	r2, r1, #0
 800a518:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	2241      	movs	r2, #65	@ 0x41
 800a51e:	5c9b      	ldrb	r3, [r3, r2]
 800a520:	b2db      	uxtb	r3, r3
 800a522:	2b20      	cmp	r3, #32
 800a524:	d000      	beq.n	800a528 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800a526:	e0dd      	b.n	800a6e4 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	699a      	ldr	r2, [r3, #24]
 800a52e:	2380      	movs	r3, #128	@ 0x80
 800a530:	021b      	lsls	r3, r3, #8
 800a532:	401a      	ands	r2, r3
 800a534:	2380      	movs	r3, #128	@ 0x80
 800a536:	021b      	lsls	r3, r3, #8
 800a538:	429a      	cmp	r2, r3
 800a53a:	d101      	bne.n	800a540 <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800a53c:	2302      	movs	r3, #2
 800a53e:	e0d2      	b.n	800a6e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2240      	movs	r2, #64	@ 0x40
 800a544:	5c9b      	ldrb	r3, [r3, r2]
 800a546:	2b01      	cmp	r3, #1
 800a548:	d101      	bne.n	800a54e <HAL_I2C_Master_Transmit_DMA+0x52>
 800a54a:	2302      	movs	r3, #2
 800a54c:	e0cb      	b.n	800a6e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	2240      	movs	r2, #64	@ 0x40
 800a552:	2101      	movs	r1, #1
 800a554:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	2241      	movs	r2, #65	@ 0x41
 800a55a:	2121      	movs	r1, #33	@ 0x21
 800a55c:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	2242      	movs	r2, #66	@ 0x42
 800a562:	2110      	movs	r1, #16
 800a564:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	2200      	movs	r2, #0
 800a56a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	2208      	movs	r2, #8
 800a576:	18ba      	adds	r2, r7, r2
 800a578:	8812      	ldrh	r2, [r2, #0]
 800a57a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	4a5c      	ldr	r2, [pc, #368]	@ (800a6f0 <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800a580:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	4a5b      	ldr	r2, [pc, #364]	@ (800a6f4 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800a586:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	2bff      	cmp	r3, #255	@ 0xff
 800a590:	d906      	bls.n	800a5a0 <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	22ff      	movs	r2, #255	@ 0xff
 800a596:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a598:	2380      	movs	r3, #128	@ 0x80
 800a59a:	045b      	lsls	r3, r3, #17
 800a59c:	617b      	str	r3, [r7, #20]
 800a59e:	e007      	b.n	800a5b0 <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	68fb      	ldr	r3, [r7, #12]
 800a5a8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a5aa:	2380      	movs	r3, #128	@ 0x80
 800a5ac:	049b      	lsls	r3, r3, #18
 800a5ae:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d100      	bne.n	800a5ba <HAL_I2C_Master_Transmit_DMA+0xbe>
 800a5b8:	e078      	b.n	800a6ac <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d023      	beq.n	800a60a <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5c6:	4a4c      	ldr	r2, [pc, #304]	@ (800a6f8 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800a5c8:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5ce:	4a4b      	ldr	r2, [pc, #300]	@ (800a6fc <HAL_I2C_Master_Transmit_DMA+0x200>)
 800a5d0:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a5de:	2200      	movs	r2, #0
 800a5e0:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	3328      	adds	r3, #40	@ 0x28
 800a5ee:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800a5f4:	2513      	movs	r5, #19
 800a5f6:	197c      	adds	r4, r7, r5
 800a5f8:	f7ff fa96 	bl	8009b28 <HAL_DMA_Start_IT>
 800a5fc:	0003      	movs	r3, r0
 800a5fe:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a600:	197b      	adds	r3, r7, r5
 800a602:	781b      	ldrb	r3, [r3, #0]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d13d      	bne.n	800a684 <HAL_I2C_Master_Transmit_DMA+0x188>
 800a608:	e013      	b.n	800a632 <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2241      	movs	r2, #65	@ 0x41
 800a60e:	2120      	movs	r1, #32
 800a610:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	2242      	movs	r2, #66	@ 0x42
 800a616:	2100      	movs	r1, #0
 800a618:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a61e:	2280      	movs	r2, #128	@ 0x80
 800a620:	431a      	orrs	r2, r3
 800a622:	68fb      	ldr	r3, [r7, #12]
 800a624:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	2240      	movs	r2, #64	@ 0x40
 800a62a:	2100      	movs	r1, #0
 800a62c:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a62e:	2301      	movs	r3, #1
 800a630:	e059      	b.n	800a6e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a636:	b2da      	uxtb	r2, r3
 800a638:	697c      	ldr	r4, [r7, #20]
 800a63a:	230a      	movs	r3, #10
 800a63c:	18fb      	adds	r3, r7, r3
 800a63e:	8819      	ldrh	r1, [r3, #0]
 800a640:	68f8      	ldr	r0, [r7, #12]
 800a642:	4b2f      	ldr	r3, [pc, #188]	@ (800a700 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a644:	9300      	str	r3, [sp, #0]
 800a646:	0023      	movs	r3, r4
 800a648:	f001 fd0e 	bl	800c068 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a64c:	68fb      	ldr	r3, [r7, #12]
 800a64e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a650:	b29a      	uxth	r2, r3
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a656:	1ad3      	subs	r3, r2, r3
 800a658:	b29a      	uxth	r2, r3
 800a65a:	68fb      	ldr	r3, [r7, #12]
 800a65c:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2240      	movs	r2, #64	@ 0x40
 800a662:	2100      	movs	r1, #0
 800a664:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	2110      	movs	r1, #16
 800a66a:	0018      	movs	r0, r3
 800a66c:	f001 fd36 	bl	800c0dc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800a670:	68fb      	ldr	r3, [r7, #12]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	681a      	ldr	r2, [r3, #0]
 800a676:	68fb      	ldr	r3, [r7, #12]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	2180      	movs	r1, #128	@ 0x80
 800a67c:	01c9      	lsls	r1, r1, #7
 800a67e:	430a      	orrs	r2, r1
 800a680:	601a      	str	r2, [r3, #0]
 800a682:	e02d      	b.n	800a6e0 <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a684:	68fb      	ldr	r3, [r7, #12]
 800a686:	2241      	movs	r2, #65	@ 0x41
 800a688:	2120      	movs	r1, #32
 800a68a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	2242      	movs	r2, #66	@ 0x42
 800a690:	2100      	movs	r1, #0
 800a692:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a698:	2210      	movs	r2, #16
 800a69a:	431a      	orrs	r2, r3
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	2240      	movs	r2, #64	@ 0x40
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a6a8:	2301      	movs	r3, #1
 800a6aa:	e01c      	b.n	800a6e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	4a15      	ldr	r2, [pc, #84]	@ (800a704 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800a6b0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a6b6:	b2da      	uxtb	r2, r3
 800a6b8:	2380      	movs	r3, #128	@ 0x80
 800a6ba:	049c      	lsls	r4, r3, #18
 800a6bc:	230a      	movs	r3, #10
 800a6be:	18fb      	adds	r3, r7, r3
 800a6c0:	8819      	ldrh	r1, [r3, #0]
 800a6c2:	68f8      	ldr	r0, [r7, #12]
 800a6c4:	4b0e      	ldr	r3, [pc, #56]	@ (800a700 <HAL_I2C_Master_Transmit_DMA+0x204>)
 800a6c6:	9300      	str	r3, [sp, #0]
 800a6c8:	0023      	movs	r3, r4
 800a6ca:	f001 fccd 	bl	800c068 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	2240      	movs	r2, #64	@ 0x40
 800a6d2:	2100      	movs	r1, #0
 800a6d4:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	2101      	movs	r1, #1
 800a6da:	0018      	movs	r0, r3
 800a6dc:	f001 fcfe 	bl	800c0dc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	e000      	b.n	800a6e6 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a6e4:	2302      	movs	r3, #2
  }
}
 800a6e6:	0018      	movs	r0, r3
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	b006      	add	sp, #24
 800a6ec:	bdb0      	pop	{r4, r5, r7, pc}
 800a6ee:	46c0      	nop			@ (mov r8, r8)
 800a6f0:	ffff0000 	.word	0xffff0000
 800a6f4:	0800af01 	.word	0x0800af01
 800a6f8:	0800beb9 	.word	0x0800beb9
 800a6fc:	0800bff9 	.word	0x0800bff9
 800a700:	80002000 	.word	0x80002000
 800a704:	0800aaad 	.word	0x0800aaad

0800a708 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800a708:	b5b0      	push	{r4, r5, r7, lr}
 800a70a:	b088      	sub	sp, #32
 800a70c:	af02      	add	r7, sp, #8
 800a70e:	60f8      	str	r0, [r7, #12]
 800a710:	0008      	movs	r0, r1
 800a712:	607a      	str	r2, [r7, #4]
 800a714:	0019      	movs	r1, r3
 800a716:	230a      	movs	r3, #10
 800a718:	18fb      	adds	r3, r7, r3
 800a71a:	1c02      	adds	r2, r0, #0
 800a71c:	801a      	strh	r2, [r3, #0]
 800a71e:	2308      	movs	r3, #8
 800a720:	18fb      	adds	r3, r7, r3
 800a722:	1c0a      	adds	r2, r1, #0
 800a724:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	2241      	movs	r2, #65	@ 0x41
 800a72a:	5c9b      	ldrb	r3, [r3, r2]
 800a72c:	b2db      	uxtb	r3, r3
 800a72e:	2b20      	cmp	r3, #32
 800a730:	d000      	beq.n	800a734 <HAL_I2C_Master_Receive_DMA+0x2c>
 800a732:	e0dd      	b.n	800a8f0 <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	699a      	ldr	r2, [r3, #24]
 800a73a:	2380      	movs	r3, #128	@ 0x80
 800a73c:	021b      	lsls	r3, r3, #8
 800a73e:	401a      	ands	r2, r3
 800a740:	2380      	movs	r3, #128	@ 0x80
 800a742:	021b      	lsls	r3, r3, #8
 800a744:	429a      	cmp	r2, r3
 800a746:	d101      	bne.n	800a74c <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800a748:	2302      	movs	r3, #2
 800a74a:	e0d2      	b.n	800a8f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	2240      	movs	r2, #64	@ 0x40
 800a750:	5c9b      	ldrb	r3, [r3, r2]
 800a752:	2b01      	cmp	r3, #1
 800a754:	d101      	bne.n	800a75a <HAL_I2C_Master_Receive_DMA+0x52>
 800a756:	2302      	movs	r3, #2
 800a758:	e0cb      	b.n	800a8f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	2240      	movs	r2, #64	@ 0x40
 800a75e:	2101      	movs	r1, #1
 800a760:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	2241      	movs	r2, #65	@ 0x41
 800a766:	2122      	movs	r1, #34	@ 0x22
 800a768:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800a76a:	68fb      	ldr	r3, [r7, #12]
 800a76c:	2242      	movs	r2, #66	@ 0x42
 800a76e:	2110      	movs	r1, #16
 800a770:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2200      	movs	r2, #0
 800a776:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800a77e:	68fb      	ldr	r3, [r7, #12]
 800a780:	2208      	movs	r2, #8
 800a782:	18ba      	adds	r2, r7, r2
 800a784:	8812      	ldrh	r2, [r2, #0]
 800a786:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	4a5c      	ldr	r2, [pc, #368]	@ (800a8fc <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800a78c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800a78e:	68fb      	ldr	r3, [r7, #12]
 800a790:	4a5b      	ldr	r2, [pc, #364]	@ (800a900 <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800a792:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a798:	b29b      	uxth	r3, r3
 800a79a:	2bff      	cmp	r3, #255	@ 0xff
 800a79c:	d906      	bls.n	800a7ac <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	22ff      	movs	r2, #255	@ 0xff
 800a7a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800a7a4:	2380      	movs	r3, #128	@ 0x80
 800a7a6:	045b      	lsls	r3, r3, #17
 800a7a8:	617b      	str	r3, [r7, #20]
 800a7aa:	e007      	b.n	800a7bc <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a7b0:	b29a      	uxth	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800a7b6:	2380      	movs	r3, #128	@ 0x80
 800a7b8:	049b      	lsls	r3, r3, #18
 800a7ba:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d100      	bne.n	800a7c6 <HAL_I2C_Master_Receive_DMA+0xbe>
 800a7c4:	e078      	b.n	800a8b8 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ca:	2b00      	cmp	r3, #0
 800a7cc:	d023      	beq.n	800a816 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7d2:	4a4c      	ldr	r2, [pc, #304]	@ (800a904 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800a7d4:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800a7d6:	68fb      	ldr	r3, [r7, #12]
 800a7d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7da:	4a4b      	ldr	r2, [pc, #300]	@ (800a908 <HAL_I2C_Master_Receive_DMA+0x200>)
 800a7dc:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800a7e6:	68fb      	ldr	r3, [r7, #12]
 800a7e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	3324      	adds	r3, #36	@ 0x24
 800a7f8:	0019      	movs	r1, r3
 800a7fa:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800a800:	2513      	movs	r5, #19
 800a802:	197c      	adds	r4, r7, r5
 800a804:	f7ff f990 	bl	8009b28 <HAL_DMA_Start_IT>
 800a808:	0003      	movs	r3, r0
 800a80a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800a80c:	197b      	adds	r3, r7, r5
 800a80e:	781b      	ldrb	r3, [r3, #0]
 800a810:	2b00      	cmp	r3, #0
 800a812:	d13d      	bne.n	800a890 <HAL_I2C_Master_Receive_DMA+0x188>
 800a814:	e013      	b.n	800a83e <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800a816:	68fb      	ldr	r3, [r7, #12]
 800a818:	2241      	movs	r2, #65	@ 0x41
 800a81a:	2120      	movs	r1, #32
 800a81c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	2242      	movs	r2, #66	@ 0x42
 800a822:	2100      	movs	r1, #0
 800a824:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a82a:	2280      	movs	r2, #128	@ 0x80
 800a82c:	431a      	orrs	r2, r3
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	2240      	movs	r2, #64	@ 0x40
 800a836:	2100      	movs	r1, #0
 800a838:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800a83a:	2301      	movs	r3, #1
 800a83c:	e059      	b.n	800a8f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a842:	b2da      	uxtb	r2, r3
 800a844:	697c      	ldr	r4, [r7, #20]
 800a846:	230a      	movs	r3, #10
 800a848:	18fb      	adds	r3, r7, r3
 800a84a:	8819      	ldrh	r1, [r3, #0]
 800a84c:	68f8      	ldr	r0, [r7, #12]
 800a84e:	4b2f      	ldr	r3, [pc, #188]	@ (800a90c <HAL_I2C_Master_Receive_DMA+0x204>)
 800a850:	9300      	str	r3, [sp, #0]
 800a852:	0023      	movs	r3, r4
 800a854:	f001 fc08 	bl	800c068 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800a858:	68fb      	ldr	r3, [r7, #12]
 800a85a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a85c:	b29a      	uxth	r2, r3
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a862:	1ad3      	subs	r3, r2, r3
 800a864:	b29a      	uxth	r2, r3
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	2240      	movs	r2, #64	@ 0x40
 800a86e:	2100      	movs	r1, #0
 800a870:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800a872:	68fb      	ldr	r3, [r7, #12]
 800a874:	2110      	movs	r1, #16
 800a876:	0018      	movs	r0, r3
 800a878:	f001 fc30 	bl	800c0dc <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	681a      	ldr	r2, [r3, #0]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2180      	movs	r1, #128	@ 0x80
 800a888:	0209      	lsls	r1, r1, #8
 800a88a:	430a      	orrs	r2, r1
 800a88c:	601a      	str	r2, [r3, #0]
 800a88e:	e02d      	b.n	800a8ec <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	2241      	movs	r2, #65	@ 0x41
 800a894:	2120      	movs	r1, #32
 800a896:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800a898:	68fb      	ldr	r3, [r7, #12]
 800a89a:	2242      	movs	r2, #66	@ 0x42
 800a89c:	2100      	movs	r1, #0
 800a89e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a8a4:	2210      	movs	r2, #16
 800a8a6:	431a      	orrs	r2, r3
 800a8a8:	68fb      	ldr	r3, [r7, #12]
 800a8aa:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2240      	movs	r2, #64	@ 0x40
 800a8b0:	2100      	movs	r1, #0
 800a8b2:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800a8b4:	2301      	movs	r3, #1
 800a8b6:	e01c      	b.n	800a8f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	4a15      	ldr	r2, [pc, #84]	@ (800a910 <HAL_I2C_Master_Receive_DMA+0x208>)
 800a8bc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	2380      	movs	r3, #128	@ 0x80
 800a8c6:	049c      	lsls	r4, r3, #18
 800a8c8:	230a      	movs	r3, #10
 800a8ca:	18fb      	adds	r3, r7, r3
 800a8cc:	8819      	ldrh	r1, [r3, #0]
 800a8ce:	68f8      	ldr	r0, [r7, #12]
 800a8d0:	4b0e      	ldr	r3, [pc, #56]	@ (800a90c <HAL_I2C_Master_Receive_DMA+0x204>)
 800a8d2:	9300      	str	r3, [sp, #0]
 800a8d4:	0023      	movs	r3, r4
 800a8d6:	f001 fbc7 	bl	800c068 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800a8da:	68fb      	ldr	r3, [r7, #12]
 800a8dc:	2240      	movs	r2, #64	@ 0x40
 800a8de:	2100      	movs	r1, #0
 800a8e0:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	2101      	movs	r1, #1
 800a8e6:	0018      	movs	r0, r3
 800a8e8:	f001 fbf8 	bl	800c0dc <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	e000      	b.n	800a8f2 <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800a8f0:	2302      	movs	r3, #2
  }
}
 800a8f2:	0018      	movs	r0, r3
 800a8f4:	46bd      	mov	sp, r7
 800a8f6:	b006      	add	sp, #24
 800a8f8:	bdb0      	pop	{r4, r5, r7, pc}
 800a8fa:	46c0      	nop			@ (mov r8, r8)
 800a8fc:	ffff0000 	.word	0xffff0000
 800a900:	0800af01 	.word	0x0800af01
 800a904:	0800bf59 	.word	0x0800bf59
 800a908:	0800bff9 	.word	0x0800bff9
 800a90c:	80002400 	.word	0x80002400
 800a910:	0800aaad 	.word	0x0800aaad

0800a914 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800a914:	b580      	push	{r7, lr}
 800a916:	b084      	sub	sp, #16
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	681b      	ldr	r3, [r3, #0]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a930:	2b00      	cmp	r3, #0
 800a932:	d005      	beq.n	800a940 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a938:	68ba      	ldr	r2, [r7, #8]
 800a93a:	68f9      	ldr	r1, [r7, #12]
 800a93c:	6878      	ldr	r0, [r7, #4]
 800a93e:	4798      	blx	r3
  }
}
 800a940:	46c0      	nop			@ (mov r8, r8)
 800a942:	46bd      	mov	sp, r7
 800a944:	b004      	add	sp, #16
 800a946:	bd80      	pop	{r7, pc}

0800a948 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
 800a94e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	681b      	ldr	r3, [r3, #0]
 800a954:	699b      	ldr	r3, [r3, #24]
 800a956:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a960:	697a      	ldr	r2, [r7, #20]
 800a962:	2380      	movs	r3, #128	@ 0x80
 800a964:	005b      	lsls	r3, r3, #1
 800a966:	4013      	ands	r3, r2
 800a968:	d00e      	beq.n	800a988 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2280      	movs	r2, #128	@ 0x80
 800a96e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800a970:	d00a      	beq.n	800a988 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a976:	2201      	movs	r2, #1
 800a978:	431a      	orrs	r2, r3
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a97e:	687b      	ldr	r3, [r7, #4]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	2280      	movs	r2, #128	@ 0x80
 800a984:	0052      	lsls	r2, r2, #1
 800a986:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a988:	697a      	ldr	r2, [r7, #20]
 800a98a:	2380      	movs	r3, #128	@ 0x80
 800a98c:	00db      	lsls	r3, r3, #3
 800a98e:	4013      	ands	r3, r2
 800a990:	d00e      	beq.n	800a9b0 <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a992:	693b      	ldr	r3, [r7, #16]
 800a994:	2280      	movs	r2, #128	@ 0x80
 800a996:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800a998:	d00a      	beq.n	800a9b0 <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a99e:	2208      	movs	r2, #8
 800a9a0:	431a      	orrs	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	2280      	movs	r2, #128	@ 0x80
 800a9ac:	00d2      	lsls	r2, r2, #3
 800a9ae:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a9b0:	697a      	ldr	r2, [r7, #20]
 800a9b2:	2380      	movs	r3, #128	@ 0x80
 800a9b4:	009b      	lsls	r3, r3, #2
 800a9b6:	4013      	ands	r3, r2
 800a9b8:	d00e      	beq.n	800a9d8 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800a9ba:	693b      	ldr	r3, [r7, #16]
 800a9bc:	2280      	movs	r2, #128	@ 0x80
 800a9be:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800a9c0:	d00a      	beq.n	800a9d8 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9c6:	2202      	movs	r2, #2
 800a9c8:	431a      	orrs	r2, r3
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	2280      	movs	r2, #128	@ 0x80
 800a9d4:	0092      	lsls	r2, r2, #2
 800a9d6:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9dc:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	220b      	movs	r2, #11
 800a9e2:	4013      	ands	r3, r2
 800a9e4:	d005      	beq.n	800a9f2 <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800a9e6:	68fa      	ldr	r2, [r7, #12]
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	0011      	movs	r1, r2
 800a9ec:	0018      	movs	r0, r3
 800a9ee:	f001 f915 	bl	800bc1c <I2C_ITError>
  }
}
 800a9f2:	46c0      	nop			@ (mov r8, r8)
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	b006      	add	sp, #24
 800a9f8:	bd80      	pop	{r7, pc}

0800a9fa <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a9fa:	b580      	push	{r7, lr}
 800a9fc:	b082      	sub	sp, #8
 800a9fe:	af00      	add	r7, sp, #0
 800aa00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800aa02:	46c0      	nop			@ (mov r8, r8)
 800aa04:	46bd      	mov	sp, r7
 800aa06:	b002      	add	sp, #8
 800aa08:	bd80      	pop	{r7, pc}

0800aa0a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa0a:	b580      	push	{r7, lr}
 800aa0c:	b082      	sub	sp, #8
 800aa0e:	af00      	add	r7, sp, #0
 800aa10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800aa12:	46c0      	nop			@ (mov r8, r8)
 800aa14:	46bd      	mov	sp, r7
 800aa16:	b002      	add	sp, #8
 800aa18:	bd80      	pop	{r7, pc}

0800aa1a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	b082      	sub	sp, #8
 800aa1e:	af00      	add	r7, sp, #0
 800aa20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800aa22:	46c0      	nop			@ (mov r8, r8)
 800aa24:	46bd      	mov	sp, r7
 800aa26:	b002      	add	sp, #8
 800aa28:	bd80      	pop	{r7, pc}

0800aa2a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa2a:	b580      	push	{r7, lr}
 800aa2c:	b082      	sub	sp, #8
 800aa2e:	af00      	add	r7, sp, #0
 800aa30:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800aa32:	46c0      	nop			@ (mov r8, r8)
 800aa34:	46bd      	mov	sp, r7
 800aa36:	b002      	add	sp, #8
 800aa38:	bd80      	pop	{r7, pc}

0800aa3a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800aa3a:	b580      	push	{r7, lr}
 800aa3c:	b082      	sub	sp, #8
 800aa3e:	af00      	add	r7, sp, #0
 800aa40:	6078      	str	r0, [r7, #4]
 800aa42:	0008      	movs	r0, r1
 800aa44:	0011      	movs	r1, r2
 800aa46:	1cfb      	adds	r3, r7, #3
 800aa48:	1c02      	adds	r2, r0, #0
 800aa4a:	701a      	strb	r2, [r3, #0]
 800aa4c:	003b      	movs	r3, r7
 800aa4e:	1c0a      	adds	r2, r1, #0
 800aa50:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800aa52:	46c0      	nop			@ (mov r8, r8)
 800aa54:	46bd      	mov	sp, r7
 800aa56:	b002      	add	sp, #8
 800aa58:	bd80      	pop	{r7, pc}

0800aa5a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa5a:	b580      	push	{r7, lr}
 800aa5c:	b082      	sub	sp, #8
 800aa5e:	af00      	add	r7, sp, #0
 800aa60:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800aa62:	46c0      	nop			@ (mov r8, r8)
 800aa64:	46bd      	mov	sp, r7
 800aa66:	b002      	add	sp, #8
 800aa68:	bd80      	pop	{r7, pc}

0800aa6a <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa6a:	b580      	push	{r7, lr}
 800aa6c:	b082      	sub	sp, #8
 800aa6e:	af00      	add	r7, sp, #0
 800aa70:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800aa72:	46c0      	nop			@ (mov r8, r8)
 800aa74:	46bd      	mov	sp, r7
 800aa76:	b002      	add	sp, #8
 800aa78:	bd80      	pop	{r7, pc}

0800aa7a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa7a:	b580      	push	{r7, lr}
 800aa7c:	b082      	sub	sp, #8
 800aa7e:	af00      	add	r7, sp, #0
 800aa80:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800aa82:	46c0      	nop			@ (mov r8, r8)
 800aa84:	46bd      	mov	sp, r7
 800aa86:	b002      	add	sp, #8
 800aa88:	bd80      	pop	{r7, pc}

0800aa8a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800aa8a:	b580      	push	{r7, lr}
 800aa8c:	b082      	sub	sp, #8
 800aa8e:	af00      	add	r7, sp, #0
 800aa90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800aa92:	46c0      	nop			@ (mov r8, r8)
 800aa94:	46bd      	mov	sp, r7
 800aa96:	b002      	add	sp, #8
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	b082      	sub	sp, #8
 800aa9e:	af00      	add	r7, sp, #0
 800aaa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800aaa2:	46c0      	nop			@ (mov r8, r8)
 800aaa4:	46bd      	mov	sp, r7
 800aaa6:	b002      	add	sp, #8
 800aaa8:	bd80      	pop	{r7, pc}
	...

0800aaac <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800aaac:	b590      	push	{r4, r7, lr}
 800aaae:	b089      	sub	sp, #36	@ 0x24
 800aab0:	af02      	add	r7, sp, #8
 800aab2:	60f8      	str	r0, [r7, #12]
 800aab4:	60b9      	str	r1, [r7, #8]
 800aab6:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800aab8:	68bb      	ldr	r3, [r7, #8]
 800aaba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	2240      	movs	r2, #64	@ 0x40
 800aac0:	5c9b      	ldrb	r3, [r3, r2]
 800aac2:	2b01      	cmp	r3, #1
 800aac4:	d101      	bne.n	800aaca <I2C_Master_ISR_IT+0x1e>
 800aac6:	2302      	movs	r3, #2
 800aac8:	e113      	b.n	800acf2 <I2C_Master_ISR_IT+0x246>
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	2240      	movs	r2, #64	@ 0x40
 800aace:	2101      	movs	r1, #1
 800aad0:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	2210      	movs	r2, #16
 800aad6:	4013      	ands	r3, r2
 800aad8:	d012      	beq.n	800ab00 <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	2210      	movs	r2, #16
 800aade:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800aae0:	d00e      	beq.n	800ab00 <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2210      	movs	r2, #16
 800aae8:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aaee:	2204      	movs	r2, #4
 800aaf0:	431a      	orrs	r2, r3
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	0018      	movs	r0, r3
 800aafa:	f001 f9ba 	bl	800be72 <I2C_Flush_TXDR>
 800aafe:	e0e5      	b.n	800accc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ab00:	697b      	ldr	r3, [r7, #20]
 800ab02:	2204      	movs	r2, #4
 800ab04:	4013      	ands	r3, r2
 800ab06:	d021      	beq.n	800ab4c <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	2204      	movs	r2, #4
 800ab0c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ab0e:	d01d      	beq.n	800ab4c <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	2204      	movs	r2, #4
 800ab14:	4393      	bics	r3, r2
 800ab16:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab22:	b2d2      	uxtb	r2, r2
 800ab24:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab2a:	1c5a      	adds	r2, r3, #1
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab34:	3b01      	subs	r3, #1
 800ab36:	b29a      	uxth	r2, r3
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab40:	b29b      	uxth	r3, r3
 800ab42:	3b01      	subs	r3, #1
 800ab44:	b29a      	uxth	r2, r3
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ab4a:	e0bf      	b.n	800accc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ab4c:	697b      	ldr	r3, [r7, #20]
 800ab4e:	2202      	movs	r2, #2
 800ab50:	4013      	ands	r3, r2
 800ab52:	d01c      	beq.n	800ab8e <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	2202      	movs	r2, #2
 800ab58:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ab5a:	d018      	beq.n	800ab8e <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab60:	781a      	ldrb	r2, [r3, #0]
 800ab62:	68fb      	ldr	r3, [r7, #12]
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab6c:	1c5a      	adds	r2, r3, #1
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800ab72:	68fb      	ldr	r3, [r7, #12]
 800ab74:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ab76:	3b01      	subs	r3, #1
 800ab78:	b29a      	uxth	r2, r3
 800ab7a:	68fb      	ldr	r3, [r7, #12]
 800ab7c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	3b01      	subs	r3, #1
 800ab86:	b29a      	uxth	r2, r3
 800ab88:	68fb      	ldr	r3, [r7, #12]
 800ab8a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800ab8c:	e09e      	b.n	800accc <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ab8e:	697b      	ldr	r3, [r7, #20]
 800ab90:	2280      	movs	r2, #128	@ 0x80
 800ab92:	4013      	ands	r3, r2
 800ab94:	d100      	bne.n	800ab98 <I2C_Master_ISR_IT+0xec>
 800ab96:	e069      	b.n	800ac6c <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2240      	movs	r2, #64	@ 0x40
 800ab9c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800ab9e:	d065      	beq.n	800ac6c <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800aba0:	68fb      	ldr	r3, [r7, #12]
 800aba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aba4:	b29b      	uxth	r3, r3
 800aba6:	2b00      	cmp	r3, #0
 800aba8:	d04a      	beq.n	800ac40 <I2C_Master_ISR_IT+0x194>
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abae:	2b00      	cmp	r3, #0
 800abb0:	d146      	bne.n	800ac40 <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800abb2:	68fb      	ldr	r3, [r7, #12]
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	685b      	ldr	r3, [r3, #4]
 800abb8:	b29a      	uxth	r2, r3
 800abba:	2112      	movs	r1, #18
 800abbc:	187b      	adds	r3, r7, r1
 800abbe:	0592      	lsls	r2, r2, #22
 800abc0:	0d92      	lsrs	r2, r2, #22
 800abc2:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abc4:	68fb      	ldr	r3, [r7, #12]
 800abc6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abc8:	b29b      	uxth	r3, r3
 800abca:	2bff      	cmp	r3, #255	@ 0xff
 800abcc:	d910      	bls.n	800abf0 <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800abce:	68fb      	ldr	r3, [r7, #12]
 800abd0:	22ff      	movs	r2, #255	@ 0xff
 800abd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800abd8:	b2da      	uxtb	r2, r3
 800abda:	2380      	movs	r3, #128	@ 0x80
 800abdc:	045c      	lsls	r4, r3, #17
 800abde:	187b      	adds	r3, r7, r1
 800abe0:	8819      	ldrh	r1, [r3, #0]
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	2300      	movs	r3, #0
 800abe6:	9300      	str	r3, [sp, #0]
 800abe8:	0023      	movs	r3, r4
 800abea:	f001 fa3d 	bl	800c068 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800abee:	e03c      	b.n	800ac6a <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800abf0:	68fb      	ldr	r3, [r7, #12]
 800abf2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abf4:	b29a      	uxth	r2, r3
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800abfa:	68fb      	ldr	r3, [r7, #12]
 800abfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800abfe:	4a3f      	ldr	r2, [pc, #252]	@ (800acfc <I2C_Master_ISR_IT+0x250>)
 800ac00:	4293      	cmp	r3, r2
 800ac02:	d00e      	beq.n	800ac22 <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ac04:	68fb      	ldr	r3, [r7, #12]
 800ac06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac08:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ac0e:	2312      	movs	r3, #18
 800ac10:	18fb      	adds	r3, r7, r3
 800ac12:	8819      	ldrh	r1, [r3, #0]
 800ac14:	68f8      	ldr	r0, [r7, #12]
 800ac16:	2300      	movs	r3, #0
 800ac18:	9300      	str	r3, [sp, #0]
 800ac1a:	0023      	movs	r3, r4
 800ac1c:	f001 fa24 	bl	800c068 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac20:	e023      	b.n	800ac6a <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ac26:	b2da      	uxtb	r2, r3
 800ac28:	2380      	movs	r3, #128	@ 0x80
 800ac2a:	049c      	lsls	r4, r3, #18
 800ac2c:	2312      	movs	r3, #18
 800ac2e:	18fb      	adds	r3, r7, r3
 800ac30:	8819      	ldrh	r1, [r3, #0]
 800ac32:	68f8      	ldr	r0, [r7, #12]
 800ac34:	2300      	movs	r3, #0
 800ac36:	9300      	str	r3, [sp, #0]
 800ac38:	0023      	movs	r3, r4
 800ac3a:	f001 fa15 	bl	800c068 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ac3e:	e014      	b.n	800ac6a <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	685a      	ldr	r2, [r3, #4]
 800ac46:	2380      	movs	r3, #128	@ 0x80
 800ac48:	049b      	lsls	r3, r3, #18
 800ac4a:	401a      	ands	r2, r3
 800ac4c:	2380      	movs	r3, #128	@ 0x80
 800ac4e:	049b      	lsls	r3, r3, #18
 800ac50:	429a      	cmp	r2, r3
 800ac52:	d004      	beq.n	800ac5e <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	0018      	movs	r0, r3
 800ac58:	f000 fcf4 	bl	800b644 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac5c:	e036      	b.n	800accc <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	2140      	movs	r1, #64	@ 0x40
 800ac62:	0018      	movs	r0, r3
 800ac64:	f000 ffda 	bl	800bc1c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800ac68:	e030      	b.n	800accc <I2C_Master_ISR_IT+0x220>
 800ac6a:	e02f      	b.n	800accc <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ac6c:	697b      	ldr	r3, [r7, #20]
 800ac6e:	2240      	movs	r2, #64	@ 0x40
 800ac70:	4013      	ands	r3, r2
 800ac72:	d02b      	beq.n	800accc <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800ac74:	687b      	ldr	r3, [r7, #4]
 800ac76:	2240      	movs	r2, #64	@ 0x40
 800ac78:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800ac7a:	d027      	beq.n	800accc <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d11d      	bne.n	800acc2 <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	685a      	ldr	r2, [r3, #4]
 800ac8c:	2380      	movs	r3, #128	@ 0x80
 800ac8e:	049b      	lsls	r3, r3, #18
 800ac90:	401a      	ands	r2, r3
 800ac92:	2380      	movs	r3, #128	@ 0x80
 800ac94:	049b      	lsls	r3, r3, #18
 800ac96:	429a      	cmp	r2, r3
 800ac98:	d018      	beq.n	800accc <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800ac9a:	68fb      	ldr	r3, [r7, #12]
 800ac9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac9e:	4a17      	ldr	r2, [pc, #92]	@ (800acfc <I2C_Master_ISR_IT+0x250>)
 800aca0:	4293      	cmp	r3, r2
 800aca2:	d109      	bne.n	800acb8 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	685a      	ldr	r2, [r3, #4]
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	681b      	ldr	r3, [r3, #0]
 800acae:	2180      	movs	r1, #128	@ 0x80
 800acb0:	01c9      	lsls	r1, r1, #7
 800acb2:	430a      	orrs	r2, r1
 800acb4:	605a      	str	r2, [r3, #4]
 800acb6:	e009      	b.n	800accc <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800acb8:	68fb      	ldr	r3, [r7, #12]
 800acba:	0018      	movs	r0, r3
 800acbc:	f000 fcc2 	bl	800b644 <I2C_ITMasterSeqCplt>
 800acc0:	e004      	b.n	800accc <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	2140      	movs	r1, #64	@ 0x40
 800acc6:	0018      	movs	r0, r3
 800acc8:	f000 ffa8 	bl	800bc1c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	2220      	movs	r2, #32
 800acd0:	4013      	ands	r3, r2
 800acd2:	d009      	beq.n	800ace8 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	2220      	movs	r2, #32
 800acd8:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800acda:	d005      	beq.n	800ace8 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800acdc:	697a      	ldr	r2, [r7, #20]
 800acde:	68fb      	ldr	r3, [r7, #12]
 800ace0:	0011      	movs	r1, r2
 800ace2:	0018      	movs	r0, r3
 800ace4:	f000 fd54 	bl	800b790 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	2240      	movs	r2, #64	@ 0x40
 800acec:	2100      	movs	r1, #0
 800acee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800acf0:	2300      	movs	r3, #0
}
 800acf2:	0018      	movs	r0, r3
 800acf4:	46bd      	mov	sp, r7
 800acf6:	b007      	add	sp, #28
 800acf8:	bd90      	pop	{r4, r7, pc}
 800acfa:	46c0      	nop			@ (mov r8, r8)
 800acfc:	ffff0000 	.word	0xffff0000

0800ad00 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b086      	sub	sp, #24
 800ad04:	af00      	add	r7, sp, #0
 800ad06:	60f8      	str	r0, [r7, #12]
 800ad08:	60b9      	str	r1, [r7, #8]
 800ad0a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800ad0c:	68fb      	ldr	r3, [r7, #12]
 800ad0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ad10:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800ad12:	68bb      	ldr	r3, [r7, #8]
 800ad14:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	2240      	movs	r2, #64	@ 0x40
 800ad1a:	5c9b      	ldrb	r3, [r3, r2]
 800ad1c:	2b01      	cmp	r3, #1
 800ad1e:	d101      	bne.n	800ad24 <I2C_Slave_ISR_IT+0x24>
 800ad20:	2302      	movs	r3, #2
 800ad22:	e0e6      	b.n	800aef2 <I2C_Slave_ISR_IT+0x1f2>
 800ad24:	68fb      	ldr	r3, [r7, #12]
 800ad26:	2240      	movs	r2, #64	@ 0x40
 800ad28:	2101      	movs	r1, #1
 800ad2a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	2220      	movs	r2, #32
 800ad30:	4013      	ands	r3, r2
 800ad32:	d009      	beq.n	800ad48 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	2220      	movs	r2, #32
 800ad38:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800ad3a:	d005      	beq.n	800ad48 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800ad3c:	693a      	ldr	r2, [r7, #16]
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	0011      	movs	r1, r2
 800ad42:	0018      	movs	r0, r3
 800ad44:	f000 fdf2 	bl	800b92c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad48:	693b      	ldr	r3, [r7, #16]
 800ad4a:	2210      	movs	r2, #16
 800ad4c:	4013      	ands	r3, r2
 800ad4e:	d052      	beq.n	800adf6 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	2210      	movs	r2, #16
 800ad54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800ad56:	d04e      	beq.n	800adf6 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad5c:	b29b      	uxth	r3, r3
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	d12d      	bne.n	800adbe <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800ad62:	68fb      	ldr	r3, [r7, #12]
 800ad64:	2241      	movs	r2, #65	@ 0x41
 800ad66:	5c9b      	ldrb	r3, [r3, r2]
 800ad68:	b2db      	uxtb	r3, r3
 800ad6a:	2b28      	cmp	r3, #40	@ 0x28
 800ad6c:	d10b      	bne.n	800ad86 <I2C_Slave_ISR_IT+0x86>
 800ad6e:	697a      	ldr	r2, [r7, #20]
 800ad70:	2380      	movs	r3, #128	@ 0x80
 800ad72:	049b      	lsls	r3, r3, #18
 800ad74:	429a      	cmp	r2, r3
 800ad76:	d106      	bne.n	800ad86 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800ad78:	693a      	ldr	r2, [r7, #16]
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	0011      	movs	r1, r2
 800ad7e:	0018      	movs	r0, r3
 800ad80:	f000 fef4 	bl	800bb6c <I2C_ITListenCplt>
 800ad84:	e036      	b.n	800adf4 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	2241      	movs	r2, #65	@ 0x41
 800ad8a:	5c9b      	ldrb	r3, [r3, r2]
 800ad8c:	b2db      	uxtb	r3, r3
 800ad8e:	2b29      	cmp	r3, #41	@ 0x29
 800ad90:	d110      	bne.n	800adb4 <I2C_Slave_ISR_IT+0xb4>
 800ad92:	697b      	ldr	r3, [r7, #20]
 800ad94:	4a59      	ldr	r2, [pc, #356]	@ (800aefc <I2C_Slave_ISR_IT+0x1fc>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d00c      	beq.n	800adb4 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	2210      	movs	r2, #16
 800ada0:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	0018      	movs	r0, r3
 800ada6:	f001 f864 	bl	800be72 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	0018      	movs	r0, r3
 800adae:	f000 fc8b 	bl	800b6c8 <I2C_ITSlaveSeqCplt>
 800adb2:	e01f      	b.n	800adf4 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adb4:	68fb      	ldr	r3, [r7, #12]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	2210      	movs	r2, #16
 800adba:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800adbc:	e091      	b.n	800aee2 <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2210      	movs	r2, #16
 800adc4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800adc6:	68fb      	ldr	r3, [r7, #12]
 800adc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800adca:	2204      	movs	r2, #4
 800adcc:	431a      	orrs	r2, r3
 800adce:	68fb      	ldr	r3, [r7, #12]
 800add0:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	2b00      	cmp	r3, #0
 800add6:	d005      	beq.n	800ade4 <I2C_Slave_ISR_IT+0xe4>
 800add8:	697a      	ldr	r2, [r7, #20]
 800adda:	2380      	movs	r3, #128	@ 0x80
 800addc:	045b      	lsls	r3, r3, #17
 800adde:	429a      	cmp	r2, r3
 800ade0:	d000      	beq.n	800ade4 <I2C_Slave_ISR_IT+0xe4>
 800ade2:	e07e      	b.n	800aee2 <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800ade4:	68fb      	ldr	r3, [r7, #12]
 800ade6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	0011      	movs	r1, r2
 800adec:	0018      	movs	r0, r3
 800adee:	f000 ff15 	bl	800bc1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800adf2:	e076      	b.n	800aee2 <I2C_Slave_ISR_IT+0x1e2>
 800adf4:	e075      	b.n	800aee2 <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800adf6:	693b      	ldr	r3, [r7, #16]
 800adf8:	2204      	movs	r2, #4
 800adfa:	4013      	ands	r3, r2
 800adfc:	d02f      	beq.n	800ae5e <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	2204      	movs	r2, #4
 800ae02:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800ae04:	d02b      	beq.n	800ae5e <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800ae06:	68fb      	ldr	r3, [r7, #12]
 800ae08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae0a:	b29b      	uxth	r3, r3
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d018      	beq.n	800ae42 <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ae16:	68fb      	ldr	r3, [r7, #12]
 800ae18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae1a:	b2d2      	uxtb	r2, r2
 800ae1c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae22:	1c5a      	adds	r2, r3, #1
 800ae24:	68fb      	ldr	r3, [r7, #12]
 800ae26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ae2c:	3b01      	subs	r3, #1
 800ae2e:	b29a      	uxth	r2, r3
 800ae30:	68fb      	ldr	r3, [r7, #12]
 800ae32:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ae34:	68fb      	ldr	r3, [r7, #12]
 800ae36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae38:	b29b      	uxth	r3, r3
 800ae3a:	3b01      	subs	r3, #1
 800ae3c:	b29a      	uxth	r2, r3
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae46:	b29b      	uxth	r3, r3
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d14c      	bne.n	800aee6 <I2C_Slave_ISR_IT+0x1e6>
 800ae4c:	697b      	ldr	r3, [r7, #20]
 800ae4e:	4a2b      	ldr	r2, [pc, #172]	@ (800aefc <I2C_Slave_ISR_IT+0x1fc>)
 800ae50:	4293      	cmp	r3, r2
 800ae52:	d048      	beq.n	800aee6 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	0018      	movs	r0, r3
 800ae58:	f000 fc36 	bl	800b6c8 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800ae5c:	e043      	b.n	800aee6 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ae5e:	693b      	ldr	r3, [r7, #16]
 800ae60:	2208      	movs	r2, #8
 800ae62:	4013      	ands	r3, r2
 800ae64:	d00a      	beq.n	800ae7c <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2208      	movs	r2, #8
 800ae6a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ae6c:	d006      	beq.n	800ae7c <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ae6e:	693a      	ldr	r2, [r7, #16]
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	0011      	movs	r1, r2
 800ae74:	0018      	movs	r0, r3
 800ae76:	f000 fb41 	bl	800b4fc <I2C_ITAddrCplt>
 800ae7a:	e035      	b.n	800aee8 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ae7c:	693b      	ldr	r3, [r7, #16]
 800ae7e:	2202      	movs	r2, #2
 800ae80:	4013      	ands	r3, r2
 800ae82:	d031      	beq.n	800aee8 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	2202      	movs	r2, #2
 800ae88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ae8a:	d02d      	beq.n	800aee8 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800ae8c:	68fb      	ldr	r3, [r7, #12]
 800ae8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ae90:	b29b      	uxth	r3, r3
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d018      	beq.n	800aec8 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae9a:	781a      	ldrb	r2, [r3, #0]
 800ae9c:	68fb      	ldr	r3, [r7, #12]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800aea2:	68fb      	ldr	r3, [r7, #12]
 800aea4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aea6:	1c5a      	adds	r2, r3, #1
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800aeac:	68fb      	ldr	r3, [r7, #12]
 800aeae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aeb0:	b29b      	uxth	r3, r3
 800aeb2:	3b01      	subs	r3, #1
 800aeb4:	b29a      	uxth	r2, r3
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800aeba:	68fb      	ldr	r3, [r7, #12]
 800aebc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aebe:	3b01      	subs	r3, #1
 800aec0:	b29a      	uxth	r2, r3
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	851a      	strh	r2, [r3, #40]	@ 0x28
 800aec6:	e00f      	b.n	800aee8 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800aec8:	697a      	ldr	r2, [r7, #20]
 800aeca:	2380      	movs	r3, #128	@ 0x80
 800aecc:	045b      	lsls	r3, r3, #17
 800aece:	429a      	cmp	r2, r3
 800aed0:	d002      	beq.n	800aed8 <I2C_Slave_ISR_IT+0x1d8>
 800aed2:	697b      	ldr	r3, [r7, #20]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d107      	bne.n	800aee8 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800aed8:	68fb      	ldr	r3, [r7, #12]
 800aeda:	0018      	movs	r0, r3
 800aedc:	f000 fbf4 	bl	800b6c8 <I2C_ITSlaveSeqCplt>
 800aee0:	e002      	b.n	800aee8 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800aee2:	46c0      	nop			@ (mov r8, r8)
 800aee4:	e000      	b.n	800aee8 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800aee6:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	2240      	movs	r2, #64	@ 0x40
 800aeec:	2100      	movs	r1, #0
 800aeee:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800aef0:	2300      	movs	r3, #0
}
 800aef2:	0018      	movs	r0, r3
 800aef4:	46bd      	mov	sp, r7
 800aef6:	b006      	add	sp, #24
 800aef8:	bd80      	pop	{r7, pc}
 800aefa:	46c0      	nop			@ (mov r8, r8)
 800aefc:	ffff0000 	.word	0xffff0000

0800af00 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800af00:	b590      	push	{r4, r7, lr}
 800af02:	b089      	sub	sp, #36	@ 0x24
 800af04:	af02      	add	r7, sp, #8
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	2240      	movs	r2, #64	@ 0x40
 800af10:	5c9b      	ldrb	r3, [r3, r2]
 800af12:	2b01      	cmp	r3, #1
 800af14:	d101      	bne.n	800af1a <I2C_Master_ISR_DMA+0x1a>
 800af16:	2302      	movs	r3, #2
 800af18:	e0e7      	b.n	800b0ea <I2C_Master_ISR_DMA+0x1ea>
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	2240      	movs	r2, #64	@ 0x40
 800af1e:	2101      	movs	r1, #1
 800af20:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800af22:	68bb      	ldr	r3, [r7, #8]
 800af24:	2210      	movs	r2, #16
 800af26:	4013      	ands	r3, r2
 800af28:	d017      	beq.n	800af5a <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	2210      	movs	r2, #16
 800af2e:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800af30:	d013      	beq.n	800af5a <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800af32:	68fb      	ldr	r3, [r7, #12]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	2210      	movs	r2, #16
 800af38:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800af3a:	68fb      	ldr	r3, [r7, #12]
 800af3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800af3e:	2204      	movs	r2, #4
 800af40:	431a      	orrs	r2, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800af46:	68fb      	ldr	r3, [r7, #12]
 800af48:	2120      	movs	r1, #32
 800af4a:	0018      	movs	r0, r3
 800af4c:	f001 f8c6 	bl	800c0dc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	0018      	movs	r0, r3
 800af54:	f000 ff8d 	bl	800be72 <I2C_Flush_TXDR>
 800af58:	e0c2      	b.n	800b0e0 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2280      	movs	r2, #128	@ 0x80
 800af5e:	4013      	ands	r3, r2
 800af60:	d100      	bne.n	800af64 <I2C_Master_ISR_DMA+0x64>
 800af62:	e07c      	b.n	800b05e <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	2240      	movs	r2, #64	@ 0x40
 800af68:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800af6a:	d100      	bne.n	800af6e <I2C_Master_ISR_DMA+0x6e>
 800af6c:	e077      	b.n	800b05e <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800af6e:	68fb      	ldr	r3, [r7, #12]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681a      	ldr	r2, [r3, #0]
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	2140      	movs	r1, #64	@ 0x40
 800af7a:	438a      	bics	r2, r1
 800af7c:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af82:	b29b      	uxth	r3, r3
 800af84:	2b00      	cmp	r3, #0
 800af86:	d055      	beq.n	800b034 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	681b      	ldr	r3, [r3, #0]
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	b29a      	uxth	r2, r3
 800af90:	2312      	movs	r3, #18
 800af92:	18fb      	adds	r3, r7, r3
 800af94:	0592      	lsls	r2, r2, #22
 800af96:	0d92      	lsrs	r2, r2, #22
 800af98:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800af9a:	68fb      	ldr	r3, [r7, #12]
 800af9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800af9e:	b29b      	uxth	r3, r3
 800afa0:	2bff      	cmp	r3, #255	@ 0xff
 800afa2:	d906      	bls.n	800afb2 <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	22ff      	movs	r2, #255	@ 0xff
 800afa8:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800afaa:	2380      	movs	r3, #128	@ 0x80
 800afac:	045b      	lsls	r3, r3, #17
 800afae:	617b      	str	r3, [r7, #20]
 800afb0:	e010      	b.n	800afd4 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800afb6:	b29a      	uxth	r2, r3
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800afbc:	68fb      	ldr	r3, [r7, #12]
 800afbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afc0:	4a4c      	ldr	r2, [pc, #304]	@ (800b0f4 <I2C_Master_ISR_DMA+0x1f4>)
 800afc2:	4293      	cmp	r3, r2
 800afc4:	d003      	beq.n	800afce <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	e002      	b.n	800afd4 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800afce:	2380      	movs	r3, #128	@ 0x80
 800afd0:	049b      	lsls	r3, r3, #18
 800afd2:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800afd8:	b2da      	uxtb	r2, r3
 800afda:	697c      	ldr	r4, [r7, #20]
 800afdc:	2312      	movs	r3, #18
 800afde:	18fb      	adds	r3, r7, r3
 800afe0:	8819      	ldrh	r1, [r3, #0]
 800afe2:	68f8      	ldr	r0, [r7, #12]
 800afe4:	2300      	movs	r3, #0
 800afe6:	9300      	str	r3, [sp, #0]
 800afe8:	0023      	movs	r3, r4
 800afea:	f001 f83d 	bl	800c068 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800aff2:	b29a      	uxth	r2, r3
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800aff8:	1ad3      	subs	r3, r2, r3
 800affa:	b29a      	uxth	r2, r3
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	2241      	movs	r2, #65	@ 0x41
 800b004:	5c9b      	ldrb	r3, [r3, r2]
 800b006:	b2db      	uxtb	r3, r3
 800b008:	2b22      	cmp	r3, #34	@ 0x22
 800b00a:	d109      	bne.n	800b020 <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	681b      	ldr	r3, [r3, #0]
 800b010:	681a      	ldr	r2, [r3, #0]
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	2180      	movs	r1, #128	@ 0x80
 800b018:	0209      	lsls	r1, r1, #8
 800b01a:	430a      	orrs	r2, r1
 800b01c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b01e:	e05f      	b.n	800b0e0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	681a      	ldr	r2, [r3, #0]
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	2180      	movs	r1, #128	@ 0x80
 800b02c:	01c9      	lsls	r1, r1, #7
 800b02e:	430a      	orrs	r2, r1
 800b030:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b032:	e055      	b.n	800b0e0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	685a      	ldr	r2, [r3, #4]
 800b03a:	2380      	movs	r3, #128	@ 0x80
 800b03c:	049b      	lsls	r3, r3, #18
 800b03e:	401a      	ands	r2, r3
 800b040:	2380      	movs	r3, #128	@ 0x80
 800b042:	049b      	lsls	r3, r3, #18
 800b044:	429a      	cmp	r2, r3
 800b046:	d004      	beq.n	800b052 <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	0018      	movs	r0, r3
 800b04c:	f000 fafa 	bl	800b644 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800b050:	e046      	b.n	800b0e0 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	2140      	movs	r1, #64	@ 0x40
 800b056:	0018      	movs	r0, r3
 800b058:	f000 fde0 	bl	800bc1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b05c:	e040      	b.n	800b0e0 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b05e:	68bb      	ldr	r3, [r7, #8]
 800b060:	2240      	movs	r2, #64	@ 0x40
 800b062:	4013      	ands	r3, r2
 800b064:	d02c      	beq.n	800b0c0 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	2240      	movs	r2, #64	@ 0x40
 800b06a:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b06c:	d028      	beq.n	800b0c0 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b072:	b29b      	uxth	r3, r3
 800b074:	2b00      	cmp	r3, #0
 800b076:	d11d      	bne.n	800b0b4 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	681b      	ldr	r3, [r3, #0]
 800b07c:	685a      	ldr	r2, [r3, #4]
 800b07e:	2380      	movs	r3, #128	@ 0x80
 800b080:	049b      	lsls	r3, r3, #18
 800b082:	401a      	ands	r2, r3
 800b084:	2380      	movs	r3, #128	@ 0x80
 800b086:	049b      	lsls	r3, r3, #18
 800b088:	429a      	cmp	r2, r3
 800b08a:	d028      	beq.n	800b0de <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b090:	4a18      	ldr	r2, [pc, #96]	@ (800b0f4 <I2C_Master_ISR_DMA+0x1f4>)
 800b092:	4293      	cmp	r3, r2
 800b094:	d109      	bne.n	800b0aa <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	685a      	ldr	r2, [r3, #4]
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	2180      	movs	r1, #128	@ 0x80
 800b0a2:	01c9      	lsls	r1, r1, #7
 800b0a4:	430a      	orrs	r2, r1
 800b0a6:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800b0a8:	e019      	b.n	800b0de <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	0018      	movs	r0, r3
 800b0ae:	f000 fac9 	bl	800b644 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800b0b2:	e014      	b.n	800b0de <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	2140      	movs	r1, #64	@ 0x40
 800b0b8:	0018      	movs	r0, r3
 800b0ba:	f000 fdaf 	bl	800bc1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800b0be:	e00e      	b.n	800b0de <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b0c0:	68bb      	ldr	r3, [r7, #8]
 800b0c2:	2220      	movs	r2, #32
 800b0c4:	4013      	ands	r3, r2
 800b0c6:	d00b      	beq.n	800b0e0 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	2220      	movs	r2, #32
 800b0cc:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b0ce:	d007      	beq.n	800b0e0 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b0d0:	68ba      	ldr	r2, [r7, #8]
 800b0d2:	68fb      	ldr	r3, [r7, #12]
 800b0d4:	0011      	movs	r1, r2
 800b0d6:	0018      	movs	r0, r3
 800b0d8:	f000 fb5a 	bl	800b790 <I2C_ITMasterCplt>
 800b0dc:	e000      	b.n	800b0e0 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800b0de:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2240      	movs	r2, #64	@ 0x40
 800b0e4:	2100      	movs	r1, #0
 800b0e6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b0e8:	2300      	movs	r3, #0
}
 800b0ea:	0018      	movs	r0, r3
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	b007      	add	sp, #28
 800b0f0:	bd90      	pop	{r4, r7, pc}
 800b0f2:	46c0      	nop			@ (mov r8, r8)
 800b0f4:	ffff0000 	.word	0xffff0000

0800b0f8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800b0f8:	b590      	push	{r4, r7, lr}
 800b0fa:	b089      	sub	sp, #36	@ 0x24
 800b0fc:	af02      	add	r7, sp, #8
 800b0fe:	60f8      	str	r0, [r7, #12]
 800b100:	60b9      	str	r1, [r7, #8]
 800b102:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800b104:	4b88      	ldr	r3, [pc, #544]	@ (800b328 <I2C_Mem_ISR_DMA+0x230>)
 800b106:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800b108:	68fb      	ldr	r3, [r7, #12]
 800b10a:	2240      	movs	r2, #64	@ 0x40
 800b10c:	5c9b      	ldrb	r3, [r3, r2]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <I2C_Mem_ISR_DMA+0x1e>
 800b112:	2302      	movs	r3, #2
 800b114:	e104      	b.n	800b320 <I2C_Mem_ISR_DMA+0x228>
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2240      	movs	r2, #64	@ 0x40
 800b11a:	2101      	movs	r1, #1
 800b11c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b11e:	68bb      	ldr	r3, [r7, #8]
 800b120:	2210      	movs	r2, #16
 800b122:	4013      	ands	r3, r2
 800b124:	d017      	beq.n	800b156 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	2210      	movs	r2, #16
 800b12a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b12c:	d013      	beq.n	800b156 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	681b      	ldr	r3, [r3, #0]
 800b132:	2210      	movs	r2, #16
 800b134:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b136:	68fb      	ldr	r3, [r7, #12]
 800b138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b13a:	2204      	movs	r2, #4
 800b13c:	431a      	orrs	r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	2120      	movs	r1, #32
 800b146:	0018      	movs	r0, r3
 800b148:	f000 ffc8 	bl	800c0dc <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	0018      	movs	r0, r3
 800b150:	f000 fe8f 	bl	800be72 <I2C_Flush_TXDR>
 800b154:	e0df      	b.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b156:	68bb      	ldr	r3, [r7, #8]
 800b158:	2202      	movs	r2, #2
 800b15a:	4013      	ands	r3, r2
 800b15c:	d00d      	beq.n	800b17a <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	2202      	movs	r2, #2
 800b162:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800b164:	d009      	beq.n	800b17a <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	68fa      	ldr	r2, [r7, #12]
 800b16c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800b16e:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800b170:	68fb      	ldr	r3, [r7, #12]
 800b172:	2201      	movs	r2, #1
 800b174:	4252      	negs	r2, r2
 800b176:	651a      	str	r2, [r3, #80]	@ 0x50
 800b178:	e0cd      	b.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	2280      	movs	r2, #128	@ 0x80
 800b17e:	4013      	ands	r3, r2
 800b180:	d05e      	beq.n	800b240 <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b182:	687b      	ldr	r3, [r7, #4]
 800b184:	2240      	movs	r2, #64	@ 0x40
 800b186:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800b188:	d05a      	beq.n	800b240 <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	2110      	movs	r1, #16
 800b18e:	0018      	movs	r0, r3
 800b190:	f000 ffa4 	bl	800c0dc <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b198:	b29b      	uxth	r3, r3
 800b19a:	2b00      	cmp	r3, #0
 800b19c:	d04a      	beq.n	800b234 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	2bff      	cmp	r3, #255	@ 0xff
 800b1a6:	d910      	bls.n	800b1ca <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	22ff      	movs	r2, #255	@ 0xff
 800b1ac:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1b2:	b299      	uxth	r1, r3
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1b8:	b2da      	uxtb	r2, r3
 800b1ba:	2380      	movs	r3, #128	@ 0x80
 800b1bc:	045b      	lsls	r3, r3, #17
 800b1be:	68f8      	ldr	r0, [r7, #12]
 800b1c0:	2400      	movs	r4, #0
 800b1c2:	9400      	str	r4, [sp, #0]
 800b1c4:	f000 ff50 	bl	800c068 <I2C_TransferConfig>
 800b1c8:	e011      	b.n	800b1ee <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1ce:	b29a      	uxth	r2, r3
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b1d4:	68fb      	ldr	r3, [r7, #12]
 800b1d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b1d8:	b299      	uxth	r1, r3
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1de:	b2da      	uxtb	r2, r3
 800b1e0:	2380      	movs	r3, #128	@ 0x80
 800b1e2:	049b      	lsls	r3, r3, #18
 800b1e4:	68f8      	ldr	r0, [r7, #12]
 800b1e6:	2400      	movs	r4, #0
 800b1e8:	9400      	str	r4, [sp, #0]
 800b1ea:	f000 ff3d 	bl	800c068 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1f2:	b29a      	uxth	r2, r3
 800b1f4:	68fb      	ldr	r3, [r7, #12]
 800b1f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1f8:	1ad3      	subs	r3, r2, r3
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	2241      	movs	r2, #65	@ 0x41
 800b204:	5c9b      	ldrb	r3, [r3, r2]
 800b206:	b2db      	uxtb	r3, r3
 800b208:	2b22      	cmp	r3, #34	@ 0x22
 800b20a:	d109      	bne.n	800b220 <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	681b      	ldr	r3, [r3, #0]
 800b210:	681a      	ldr	r2, [r3, #0]
 800b212:	68fb      	ldr	r3, [r7, #12]
 800b214:	681b      	ldr	r3, [r3, #0]
 800b216:	2180      	movs	r1, #128	@ 0x80
 800b218:	0209      	lsls	r1, r1, #8
 800b21a:	430a      	orrs	r2, r1
 800b21c:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b21e:	e07a      	b.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	681b      	ldr	r3, [r3, #0]
 800b224:	681a      	ldr	r2, [r3, #0]
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	2180      	movs	r1, #128	@ 0x80
 800b22c:	01c9      	lsls	r1, r1, #7
 800b22e:	430a      	orrs	r2, r1
 800b230:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800b232:	e070      	b.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	2140      	movs	r1, #64	@ 0x40
 800b238:	0018      	movs	r0, r3
 800b23a:	f000 fcef 	bl	800bc1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800b23e:	e06a      	b.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b240:	68bb      	ldr	r3, [r7, #8]
 800b242:	2240      	movs	r2, #64	@ 0x40
 800b244:	4013      	ands	r3, r2
 800b246:	d058      	beq.n	800b2fa <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2240      	movs	r2, #64	@ 0x40
 800b24c:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800b24e:	d054      	beq.n	800b2fa <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	2241      	movs	r2, #65	@ 0x41
 800b254:	5c9b      	ldrb	r3, [r3, r2]
 800b256:	b2db      	uxtb	r3, r3
 800b258:	2b22      	cmp	r3, #34	@ 0x22
 800b25a:	d101      	bne.n	800b260 <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800b25c:	4b33      	ldr	r3, [pc, #204]	@ (800b32c <I2C_Mem_ISR_DMA+0x234>)
 800b25e:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b264:	b29b      	uxth	r3, r3
 800b266:	2bff      	cmp	r3, #255	@ 0xff
 800b268:	d911      	bls.n	800b28e <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	22ff      	movs	r2, #255	@ 0xff
 800b26e:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b274:	b299      	uxth	r1, r3
 800b276:	68fb      	ldr	r3, [r7, #12]
 800b278:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b27a:	b2da      	uxtb	r2, r3
 800b27c:	2380      	movs	r3, #128	@ 0x80
 800b27e:	045c      	lsls	r4, r3, #17
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	697b      	ldr	r3, [r7, #20]
 800b284:	9300      	str	r3, [sp, #0]
 800b286:	0023      	movs	r3, r4
 800b288:	f000 feee 	bl	800c068 <I2C_TransferConfig>
 800b28c:	e012      	b.n	800b2b4 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b292:	b29a      	uxth	r2, r3
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b29c:	b299      	uxth	r1, r3
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2a2:	b2da      	uxtb	r2, r3
 800b2a4:	2380      	movs	r3, #128	@ 0x80
 800b2a6:	049c      	lsls	r4, r3, #18
 800b2a8:	68f8      	ldr	r0, [r7, #12]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	9300      	str	r3, [sp, #0]
 800b2ae:	0023      	movs	r3, r4
 800b2b0:	f000 feda 	bl	800c068 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2b8:	b29a      	uxth	r2, r3
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2be:	1ad3      	subs	r3, r2, r3
 800b2c0:	b29a      	uxth	r2, r3
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	2241      	movs	r2, #65	@ 0x41
 800b2ca:	5c9b      	ldrb	r3, [r3, r2]
 800b2cc:	b2db      	uxtb	r3, r3
 800b2ce:	2b22      	cmp	r3, #34	@ 0x22
 800b2d0:	d109      	bne.n	800b2e6 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800b2d2:	68fb      	ldr	r3, [r7, #12]
 800b2d4:	681b      	ldr	r3, [r3, #0]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	2180      	movs	r1, #128	@ 0x80
 800b2de:	0209      	lsls	r1, r1, #8
 800b2e0:	430a      	orrs	r2, r1
 800b2e2:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2e4:	e017      	b.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	681a      	ldr	r2, [r3, #0]
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	2180      	movs	r1, #128	@ 0x80
 800b2f2:	01c9      	lsls	r1, r1, #7
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b2f8:	e00d      	b.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b2fa:	68bb      	ldr	r3, [r7, #8]
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	4013      	ands	r3, r2
 800b300:	d009      	beq.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2220      	movs	r2, #32
 800b306:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b308:	d005      	beq.n	800b316 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800b30a:	68ba      	ldr	r2, [r7, #8]
 800b30c:	68fb      	ldr	r3, [r7, #12]
 800b30e:	0011      	movs	r1, r2
 800b310:	0018      	movs	r0, r3
 800b312:	f000 fa3d 	bl	800b790 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2240      	movs	r2, #64	@ 0x40
 800b31a:	2100      	movs	r1, #0
 800b31c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b31e:	2300      	movs	r3, #0
}
 800b320:	0018      	movs	r0, r3
 800b322:	46bd      	mov	sp, r7
 800b324:	b007      	add	sp, #28
 800b326:	bd90      	pop	{r4, r7, pc}
 800b328:	80002000 	.word	0x80002000
 800b32c:	80002400 	.word	0x80002400

0800b330 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b088      	sub	sp, #32
 800b334:	af00      	add	r7, sp, #0
 800b336:	60f8      	str	r0, [r7, #12]
 800b338:	60b9      	str	r1, [r7, #8]
 800b33a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800b33c:	68fb      	ldr	r3, [r7, #12]
 800b33e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b340:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800b342:	2300      	movs	r3, #0
 800b344:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800b346:	68fb      	ldr	r3, [r7, #12]
 800b348:	2240      	movs	r2, #64	@ 0x40
 800b34a:	5c9b      	ldrb	r3, [r3, r2]
 800b34c:	2b01      	cmp	r3, #1
 800b34e:	d101      	bne.n	800b354 <I2C_Slave_ISR_DMA+0x24>
 800b350:	2302      	movs	r3, #2
 800b352:	e0cd      	b.n	800b4f0 <I2C_Slave_ISR_DMA+0x1c0>
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	2240      	movs	r2, #64	@ 0x40
 800b358:	2101      	movs	r1, #1
 800b35a:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b35c:	68bb      	ldr	r3, [r7, #8]
 800b35e:	2220      	movs	r2, #32
 800b360:	4013      	ands	r3, r2
 800b362:	d009      	beq.n	800b378 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	2220      	movs	r2, #32
 800b368:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800b36a:	d005      	beq.n	800b378 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800b36c:	68ba      	ldr	r2, [r7, #8]
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	0011      	movs	r1, r2
 800b372:	0018      	movs	r0, r3
 800b374:	f000 fada 	bl	800b92c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	2210      	movs	r2, #16
 800b37c:	4013      	ands	r3, r2
 800b37e:	d100      	bne.n	800b382 <I2C_Slave_ISR_DMA+0x52>
 800b380:	e0a3      	b.n	800b4ca <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2210      	movs	r2, #16
 800b386:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800b388:	d100      	bne.n	800b38c <I2C_Slave_ISR_DMA+0x5c>
 800b38a:	e09e      	b.n	800b4ca <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b38c:	687a      	ldr	r2, [r7, #4]
 800b38e:	2380      	movs	r3, #128	@ 0x80
 800b390:	01db      	lsls	r3, r3, #7
 800b392:	4013      	ands	r3, r2
 800b394:	d105      	bne.n	800b3a2 <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800b396:	687a      	ldr	r2, [r7, #4]
 800b398:	2380      	movs	r3, #128	@ 0x80
 800b39a:	021b      	lsls	r3, r3, #8
 800b39c:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b39e:	d100      	bne.n	800b3a2 <I2C_Slave_ISR_DMA+0x72>
 800b3a0:	e08c      	b.n	800b4bc <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800b3a2:	68fb      	ldr	r3, [r7, #12]
 800b3a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3a6:	2b00      	cmp	r3, #0
 800b3a8:	d00c      	beq.n	800b3c4 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800b3aa:	687a      	ldr	r2, [r7, #4]
 800b3ac:	2380      	movs	r3, #128	@ 0x80
 800b3ae:	021b      	lsls	r3, r3, #8
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	d007      	beq.n	800b3c4 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b3b8:	681b      	ldr	r3, [r3, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	d101      	bne.n	800b3c4 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800b3c4:	68fb      	ldr	r3, [r7, #12]
 800b3c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3c8:	2b00      	cmp	r3, #0
 800b3ca:	d00c      	beq.n	800b3e6 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800b3cc:	687a      	ldr	r2, [r7, #4]
 800b3ce:	2380      	movs	r3, #128	@ 0x80
 800b3d0:	01db      	lsls	r3, r3, #7
 800b3d2:	4013      	ands	r3, r2
 800b3d4:	d007      	beq.n	800b3e6 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800b3d6:	68fb      	ldr	r3, [r7, #12]
 800b3d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	2b00      	cmp	r3, #0
 800b3e0:	d101      	bne.n	800b3e6 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800b3e2:	2301      	movs	r3, #1
 800b3e4:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	2b01      	cmp	r3, #1
 800b3ea:	d12d      	bne.n	800b448 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800b3ec:	68fb      	ldr	r3, [r7, #12]
 800b3ee:	2241      	movs	r2, #65	@ 0x41
 800b3f0:	5c9b      	ldrb	r3, [r3, r2]
 800b3f2:	b2db      	uxtb	r3, r3
 800b3f4:	2b28      	cmp	r3, #40	@ 0x28
 800b3f6:	d10b      	bne.n	800b410 <I2C_Slave_ISR_DMA+0xe0>
 800b3f8:	69ba      	ldr	r2, [r7, #24]
 800b3fa:	2380      	movs	r3, #128	@ 0x80
 800b3fc:	049b      	lsls	r3, r3, #18
 800b3fe:	429a      	cmp	r2, r3
 800b400:	d106      	bne.n	800b410 <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800b402:	68ba      	ldr	r2, [r7, #8]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	0011      	movs	r1, r2
 800b408:	0018      	movs	r0, r3
 800b40a:	f000 fbaf 	bl	800bb6c <I2C_ITListenCplt>
 800b40e:	e054      	b.n	800b4ba <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	2241      	movs	r2, #65	@ 0x41
 800b414:	5c9b      	ldrb	r3, [r3, r2]
 800b416:	b2db      	uxtb	r3, r3
 800b418:	2b29      	cmp	r3, #41	@ 0x29
 800b41a:	d110      	bne.n	800b43e <I2C_Slave_ISR_DMA+0x10e>
 800b41c:	69bb      	ldr	r3, [r7, #24]
 800b41e:	4a36      	ldr	r2, [pc, #216]	@ (800b4f8 <I2C_Slave_ISR_DMA+0x1c8>)
 800b420:	4293      	cmp	r3, r2
 800b422:	d00c      	beq.n	800b43e <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2210      	movs	r2, #16
 800b42a:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	0018      	movs	r0, r3
 800b430:	f000 fd1f 	bl	800be72 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800b434:	68fb      	ldr	r3, [r7, #12]
 800b436:	0018      	movs	r0, r3
 800b438:	f000 f946 	bl	800b6c8 <I2C_ITSlaveSeqCplt>
 800b43c:	e03d      	b.n	800b4ba <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b43e:	68fb      	ldr	r3, [r7, #12]
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	2210      	movs	r2, #16
 800b444:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800b446:	e03e      	b.n	800b4c6 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	2210      	movs	r2, #16
 800b44e:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b450:	68fb      	ldr	r3, [r7, #12]
 800b452:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b454:	2204      	movs	r2, #4
 800b456:	431a      	orrs	r2, r3
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800b45c:	2317      	movs	r3, #23
 800b45e:	18fb      	adds	r3, r7, r3
 800b460:	68fa      	ldr	r2, [r7, #12]
 800b462:	2141      	movs	r1, #65	@ 0x41
 800b464:	5c52      	ldrb	r2, [r2, r1]
 800b466:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800b468:	69bb      	ldr	r3, [r7, #24]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d004      	beq.n	800b478 <I2C_Slave_ISR_DMA+0x148>
 800b46e:	69ba      	ldr	r2, [r7, #24]
 800b470:	2380      	movs	r3, #128	@ 0x80
 800b472:	045b      	lsls	r3, r3, #17
 800b474:	429a      	cmp	r2, r3
 800b476:	d126      	bne.n	800b4c6 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b478:	2217      	movs	r2, #23
 800b47a:	18bb      	adds	r3, r7, r2
 800b47c:	781b      	ldrb	r3, [r3, #0]
 800b47e:	2b21      	cmp	r3, #33	@ 0x21
 800b480:	d003      	beq.n	800b48a <I2C_Slave_ISR_DMA+0x15a>
 800b482:	18bb      	adds	r3, r7, r2
 800b484:	781b      	ldrb	r3, [r3, #0]
 800b486:	2b29      	cmp	r3, #41	@ 0x29
 800b488:	d103      	bne.n	800b492 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2221      	movs	r2, #33	@ 0x21
 800b48e:	631a      	str	r2, [r3, #48]	@ 0x30
 800b490:	e00b      	b.n	800b4aa <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b492:	2217      	movs	r2, #23
 800b494:	18bb      	adds	r3, r7, r2
 800b496:	781b      	ldrb	r3, [r3, #0]
 800b498:	2b22      	cmp	r3, #34	@ 0x22
 800b49a:	d003      	beq.n	800b4a4 <I2C_Slave_ISR_DMA+0x174>
 800b49c:	18bb      	adds	r3, r7, r2
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800b4a2:	d102      	bne.n	800b4aa <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	2222      	movs	r2, #34	@ 0x22
 800b4a8:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800b4aa:	68fb      	ldr	r3, [r7, #12]
 800b4ac:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	0011      	movs	r1, r2
 800b4b2:	0018      	movs	r0, r3
 800b4b4:	f000 fbb2 	bl	800bc1c <I2C_ITError>
      if (treatdmanack == 1U)
 800b4b8:	e005      	b.n	800b4c6 <I2C_Slave_ISR_DMA+0x196>
 800b4ba:	e004      	b.n	800b4c6 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	681b      	ldr	r3, [r3, #0]
 800b4c0:	2210      	movs	r2, #16
 800b4c2:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b4c4:	e00f      	b.n	800b4e6 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800b4c6:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800b4c8:	e00d      	b.n	800b4e6 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	2208      	movs	r2, #8
 800b4ce:	4013      	ands	r3, r2
 800b4d0:	d009      	beq.n	800b4e6 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2208      	movs	r2, #8
 800b4d6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800b4d8:	d005      	beq.n	800b4e6 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800b4da:	68ba      	ldr	r2, [r7, #8]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	0011      	movs	r1, r2
 800b4e0:	0018      	movs	r0, r3
 800b4e2:	f000 f80b 	bl	800b4fc <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800b4e6:	68fb      	ldr	r3, [r7, #12]
 800b4e8:	2240      	movs	r2, #64	@ 0x40
 800b4ea:	2100      	movs	r1, #0
 800b4ec:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800b4ee:	2300      	movs	r3, #0
}
 800b4f0:	0018      	movs	r0, r3
 800b4f2:	46bd      	mov	sp, r7
 800b4f4:	b008      	add	sp, #32
 800b4f6:	bd80      	pop	{r7, pc}
 800b4f8:	ffff0000 	.word	0xffff0000

0800b4fc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b4fc:	b5b0      	push	{r4, r5, r7, lr}
 800b4fe:	b084      	sub	sp, #16
 800b500:	af00      	add	r7, sp, #0
 800b502:	6078      	str	r0, [r7, #4]
 800b504:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2241      	movs	r2, #65	@ 0x41
 800b50a:	5c9b      	ldrb	r3, [r3, r2]
 800b50c:	b2db      	uxtb	r3, r3
 800b50e:	001a      	movs	r2, r3
 800b510:	2328      	movs	r3, #40	@ 0x28
 800b512:	4013      	ands	r3, r2
 800b514:	2b28      	cmp	r3, #40	@ 0x28
 800b516:	d000      	beq.n	800b51a <I2C_ITAddrCplt+0x1e>
 800b518:	e088      	b.n	800b62c <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	699b      	ldr	r3, [r3, #24]
 800b520:	0c1b      	lsrs	r3, r3, #16
 800b522:	b2da      	uxtb	r2, r3
 800b524:	250f      	movs	r5, #15
 800b526:	197b      	adds	r3, r7, r5
 800b528:	2101      	movs	r1, #1
 800b52a:	400a      	ands	r2, r1
 800b52c:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	699b      	ldr	r3, [r3, #24]
 800b534:	0c1b      	lsrs	r3, r3, #16
 800b536:	b29a      	uxth	r2, r3
 800b538:	200c      	movs	r0, #12
 800b53a:	183b      	adds	r3, r7, r0
 800b53c:	21fe      	movs	r1, #254	@ 0xfe
 800b53e:	400a      	ands	r2, r1
 800b540:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800b542:	687b      	ldr	r3, [r7, #4]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	689b      	ldr	r3, [r3, #8]
 800b548:	b29a      	uxth	r2, r3
 800b54a:	240a      	movs	r4, #10
 800b54c:	193b      	adds	r3, r7, r4
 800b54e:	0592      	lsls	r2, r2, #22
 800b550:	0d92      	lsrs	r2, r2, #22
 800b552:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	68db      	ldr	r3, [r3, #12]
 800b55a:	b29a      	uxth	r2, r3
 800b55c:	2308      	movs	r3, #8
 800b55e:	18fb      	adds	r3, r7, r3
 800b560:	21fe      	movs	r1, #254	@ 0xfe
 800b562:	400a      	ands	r2, r1
 800b564:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	68db      	ldr	r3, [r3, #12]
 800b56a:	2b02      	cmp	r3, #2
 800b56c:	d148      	bne.n	800b600 <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800b56e:	0021      	movs	r1, r4
 800b570:	187b      	adds	r3, r7, r1
 800b572:	881b      	ldrh	r3, [r3, #0]
 800b574:	09db      	lsrs	r3, r3, #7
 800b576:	b29a      	uxth	r2, r3
 800b578:	183b      	adds	r3, r7, r0
 800b57a:	881b      	ldrh	r3, [r3, #0]
 800b57c:	4053      	eors	r3, r2
 800b57e:	b29b      	uxth	r3, r3
 800b580:	001a      	movs	r2, r3
 800b582:	2306      	movs	r3, #6
 800b584:	4013      	ands	r3, r2
 800b586:	d120      	bne.n	800b5ca <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800b588:	183b      	adds	r3, r7, r0
 800b58a:	187a      	adds	r2, r7, r1
 800b58c:	8812      	ldrh	r2, [r2, #0]
 800b58e:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b594:	1c5a      	adds	r2, r3, #1
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b59e:	2b02      	cmp	r3, #2
 800b5a0:	d14c      	bne.n	800b63c <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	2208      	movs	r2, #8
 800b5ae:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	2240      	movs	r2, #64	@ 0x40
 800b5b4:	2100      	movs	r1, #0
 800b5b6:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b5b8:	183b      	adds	r3, r7, r0
 800b5ba:	881a      	ldrh	r2, [r3, #0]
 800b5bc:	197b      	adds	r3, r7, r5
 800b5be:	7819      	ldrb	r1, [r3, #0]
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	0018      	movs	r0, r3
 800b5c4:	f7ff fa39 	bl	800aa3a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b5c8:	e038      	b.n	800b63c <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800b5ca:	240c      	movs	r4, #12
 800b5cc:	193b      	adds	r3, r7, r4
 800b5ce:	2208      	movs	r2, #8
 800b5d0:	18ba      	adds	r2, r7, r2
 800b5d2:	8812      	ldrh	r2, [r2, #0]
 800b5d4:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b5d6:	2380      	movs	r3, #128	@ 0x80
 800b5d8:	021a      	lsls	r2, r3, #8
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	0011      	movs	r1, r2
 800b5de:	0018      	movs	r0, r3
 800b5e0:	f000 fe0a 	bl	800c1f8 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800b5e4:	687b      	ldr	r3, [r7, #4]
 800b5e6:	2240      	movs	r2, #64	@ 0x40
 800b5e8:	2100      	movs	r1, #0
 800b5ea:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b5ec:	193b      	adds	r3, r7, r4
 800b5ee:	881a      	ldrh	r2, [r3, #0]
 800b5f0:	230f      	movs	r3, #15
 800b5f2:	18fb      	adds	r3, r7, r3
 800b5f4:	7819      	ldrb	r1, [r3, #0]
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	0018      	movs	r0, r3
 800b5fa:	f7ff fa1e 	bl	800aa3a <HAL_I2C_AddrCallback>
}
 800b5fe:	e01d      	b.n	800b63c <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800b600:	2380      	movs	r3, #128	@ 0x80
 800b602:	021a      	lsls	r2, r3, #8
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	0011      	movs	r1, r2
 800b608:	0018      	movs	r0, r3
 800b60a:	f000 fdf5 	bl	800c1f8 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2240      	movs	r2, #64	@ 0x40
 800b612:	2100      	movs	r1, #0
 800b614:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800b616:	230c      	movs	r3, #12
 800b618:	18fb      	adds	r3, r7, r3
 800b61a:	881a      	ldrh	r2, [r3, #0]
 800b61c:	230f      	movs	r3, #15
 800b61e:	18fb      	adds	r3, r7, r3
 800b620:	7819      	ldrb	r1, [r3, #0]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	0018      	movs	r0, r3
 800b626:	f7ff fa08 	bl	800aa3a <HAL_I2C_AddrCallback>
}
 800b62a:	e007      	b.n	800b63c <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	2208      	movs	r2, #8
 800b632:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	2240      	movs	r2, #64	@ 0x40
 800b638:	2100      	movs	r1, #0
 800b63a:	5499      	strb	r1, [r3, r2]
}
 800b63c:	46c0      	nop			@ (mov r8, r8)
 800b63e:	46bd      	mov	sp, r7
 800b640:	b004      	add	sp, #16
 800b642:	bdb0      	pop	{r4, r5, r7, pc}

0800b644 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	2242      	movs	r2, #66	@ 0x42
 800b650:	2100      	movs	r1, #0
 800b652:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	2241      	movs	r2, #65	@ 0x41
 800b658:	5c9b      	ldrb	r3, [r3, r2]
 800b65a:	b2db      	uxtb	r3, r3
 800b65c:	2b21      	cmp	r3, #33	@ 0x21
 800b65e:	d117      	bne.n	800b690 <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	2241      	movs	r2, #65	@ 0x41
 800b664:	2120      	movs	r1, #32
 800b666:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	2211      	movs	r2, #17
 800b66c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	2200      	movs	r2, #0
 800b672:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2101      	movs	r1, #1
 800b678:	0018      	movs	r0, r3
 800b67a:	f000 fdbd 	bl	800c1f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2240      	movs	r2, #64	@ 0x40
 800b682:	2100      	movs	r1, #0
 800b684:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	0018      	movs	r0, r3
 800b68a:	f7ff f9b6 	bl	800a9fa <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b68e:	e016      	b.n	800b6be <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2241      	movs	r2, #65	@ 0x41
 800b694:	2120      	movs	r1, #32
 800b696:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2212      	movs	r2, #18
 800b69c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	2200      	movs	r2, #0
 800b6a2:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	2102      	movs	r1, #2
 800b6a8:	0018      	movs	r0, r3
 800b6aa:	f000 fda5 	bl	800c1f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	2240      	movs	r2, #64	@ 0x40
 800b6b2:	2100      	movs	r1, #0
 800b6b4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	0018      	movs	r0, r3
 800b6ba:	f7ff f9a6 	bl	800aa0a <HAL_I2C_MasterRxCpltCallback>
}
 800b6be:	46c0      	nop			@ (mov r8, r8)
 800b6c0:	46bd      	mov	sp, r7
 800b6c2:	b002      	add	sp, #8
 800b6c4:	bd80      	pop	{r7, pc}
	...

0800b6c8 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800b6c8:	b580      	push	{r7, lr}
 800b6ca:	b084      	sub	sp, #16
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	2242      	movs	r2, #66	@ 0x42
 800b6dc:	2100      	movs	r1, #0
 800b6de:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b6e0:	68fa      	ldr	r2, [r7, #12]
 800b6e2:	2380      	movs	r3, #128	@ 0x80
 800b6e4:	01db      	lsls	r3, r3, #7
 800b6e6:	4013      	ands	r3, r2
 800b6e8:	d008      	beq.n	800b6fc <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	681b      	ldr	r3, [r3, #0]
 800b6ee:	681a      	ldr	r2, [r3, #0]
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	4924      	ldr	r1, [pc, #144]	@ (800b788 <I2C_ITSlaveSeqCplt+0xc0>)
 800b6f6:	400a      	ands	r2, r1
 800b6f8:	601a      	str	r2, [r3, #0]
 800b6fa:	e00c      	b.n	800b716 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b6fc:	68fa      	ldr	r2, [r7, #12]
 800b6fe:	2380      	movs	r3, #128	@ 0x80
 800b700:	021b      	lsls	r3, r3, #8
 800b702:	4013      	ands	r3, r2
 800b704:	d007      	beq.n	800b716 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	681a      	ldr	r2, [r3, #0]
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	491e      	ldr	r1, [pc, #120]	@ (800b78c <I2C_ITSlaveSeqCplt+0xc4>)
 800b712:	400a      	ands	r2, r1
 800b714:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	2241      	movs	r2, #65	@ 0x41
 800b71a:	5c9b      	ldrb	r3, [r3, r2]
 800b71c:	b2db      	uxtb	r3, r3
 800b71e:	2b29      	cmp	r3, #41	@ 0x29
 800b720:	d114      	bne.n	800b74c <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	2241      	movs	r2, #65	@ 0x41
 800b726:	2128      	movs	r1, #40	@ 0x28
 800b728:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2221      	movs	r2, #33	@ 0x21
 800b72e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	2101      	movs	r1, #1
 800b734:	0018      	movs	r0, r3
 800b736:	f000 fd5f 	bl	800c1f8 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	2240      	movs	r2, #64	@ 0x40
 800b73e:	2100      	movs	r1, #0
 800b740:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b742:	687b      	ldr	r3, [r7, #4]
 800b744:	0018      	movs	r0, r3
 800b746:	f7ff f968 	bl	800aa1a <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b74a:	e019      	b.n	800b780 <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2241      	movs	r2, #65	@ 0x41
 800b750:	5c9b      	ldrb	r3, [r3, r2]
 800b752:	b2db      	uxtb	r3, r3
 800b754:	2b2a      	cmp	r3, #42	@ 0x2a
 800b756:	d113      	bne.n	800b780 <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800b758:	687b      	ldr	r3, [r7, #4]
 800b75a:	2241      	movs	r2, #65	@ 0x41
 800b75c:	2128      	movs	r1, #40	@ 0x28
 800b75e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2222      	movs	r2, #34	@ 0x22
 800b764:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	2102      	movs	r1, #2
 800b76a:	0018      	movs	r0, r3
 800b76c:	f000 fd44 	bl	800c1f8 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	2240      	movs	r2, #64	@ 0x40
 800b774:	2100      	movs	r1, #0
 800b776:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	0018      	movs	r0, r3
 800b77c:	f7ff f955 	bl	800aa2a <HAL_I2C_SlaveRxCpltCallback>
}
 800b780:	46c0      	nop			@ (mov r8, r8)
 800b782:	46bd      	mov	sp, r7
 800b784:	b004      	add	sp, #16
 800b786:	bd80      	pop	{r7, pc}
 800b788:	ffffbfff 	.word	0xffffbfff
 800b78c:	ffff7fff 	.word	0xffff7fff

0800b790 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b790:	b580      	push	{r7, lr}
 800b792:	b086      	sub	sp, #24
 800b794:	af00      	add	r7, sp, #0
 800b796:	6078      	str	r0, [r7, #4]
 800b798:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800b79a:	683b      	ldr	r3, [r7, #0]
 800b79c:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	2220      	movs	r2, #32
 800b7a4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	2241      	movs	r2, #65	@ 0x41
 800b7aa:	5c9b      	ldrb	r3, [r3, r2]
 800b7ac:	b2db      	uxtb	r3, r3
 800b7ae:	2b21      	cmp	r3, #33	@ 0x21
 800b7b0:	d108      	bne.n	800b7c4 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	2101      	movs	r1, #1
 800b7b6:	0018      	movs	r0, r3
 800b7b8:	f000 fd1e 	bl	800c1f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	2211      	movs	r2, #17
 800b7c0:	631a      	str	r2, [r3, #48]	@ 0x30
 800b7c2:	e00d      	b.n	800b7e0 <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b7c4:	687b      	ldr	r3, [r7, #4]
 800b7c6:	2241      	movs	r2, #65	@ 0x41
 800b7c8:	5c9b      	ldrb	r3, [r3, r2]
 800b7ca:	b2db      	uxtb	r3, r3
 800b7cc:	2b22      	cmp	r3, #34	@ 0x22
 800b7ce:	d107      	bne.n	800b7e0 <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2102      	movs	r1, #2
 800b7d4:	0018      	movs	r0, r3
 800b7d6:	f000 fd0f 	bl	800c1f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	2212      	movs	r2, #18
 800b7de:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	685a      	ldr	r2, [r3, #4]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	494e      	ldr	r1, [pc, #312]	@ (800b924 <I2C_ITMasterCplt+0x194>)
 800b7ec:	400a      	ands	r2, r1
 800b7ee:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	2200      	movs	r2, #0
 800b7f4:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	4a4b      	ldr	r2, [pc, #300]	@ (800b928 <I2C_ITMasterCplt+0x198>)
 800b7fa:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800b7fc:	697b      	ldr	r3, [r7, #20]
 800b7fe:	2210      	movs	r2, #16
 800b800:	4013      	ands	r3, r2
 800b802:	d009      	beq.n	800b818 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	2210      	movs	r2, #16
 800b80a:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b80c:	687b      	ldr	r3, [r7, #4]
 800b80e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b810:	2204      	movs	r2, #4
 800b812:	431a      	orrs	r2, r3
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	2241      	movs	r2, #65	@ 0x41
 800b81c:	5c9b      	ldrb	r3, [r3, r2]
 800b81e:	b2db      	uxtb	r3, r3
 800b820:	2b60      	cmp	r3, #96	@ 0x60
 800b822:	d109      	bne.n	800b838 <I2C_ITMasterCplt+0xa8>
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	2204      	movs	r2, #4
 800b828:	4013      	ands	r3, r2
 800b82a:	d005      	beq.n	800b838 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b832:	b2db      	uxtb	r3, r3
 800b834:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800b836:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	0018      	movs	r0, r3
 800b83c:	f000 fb19 	bl	800be72 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b844:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	2241      	movs	r2, #65	@ 0x41
 800b84a:	5c9b      	ldrb	r3, [r3, r2]
 800b84c:	b2db      	uxtb	r3, r3
 800b84e:	2b60      	cmp	r3, #96	@ 0x60
 800b850:	d002      	beq.n	800b858 <I2C_ITMasterCplt+0xc8>
 800b852:	693b      	ldr	r3, [r7, #16]
 800b854:	2b00      	cmp	r3, #0
 800b856:	d007      	beq.n	800b868 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	0011      	movs	r1, r2
 800b860:	0018      	movs	r0, r3
 800b862:	f000 f9db 	bl	800bc1c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800b866:	e058      	b.n	800b91a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	2241      	movs	r2, #65	@ 0x41
 800b86c:	5c9b      	ldrb	r3, [r3, r2]
 800b86e:	b2db      	uxtb	r3, r3
 800b870:	2b21      	cmp	r3, #33	@ 0x21
 800b872:	d126      	bne.n	800b8c2 <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	2241      	movs	r2, #65	@ 0x41
 800b878:	2120      	movs	r1, #32
 800b87a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	2200      	movs	r2, #0
 800b880:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2242      	movs	r2, #66	@ 0x42
 800b886:	5c9b      	ldrb	r3, [r3, r2]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	2b40      	cmp	r3, #64	@ 0x40
 800b88c:	d10c      	bne.n	800b8a8 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	2242      	movs	r2, #66	@ 0x42
 800b892:	2100      	movs	r1, #0
 800b894:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	2240      	movs	r2, #64	@ 0x40
 800b89a:	2100      	movs	r1, #0
 800b89c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	0018      	movs	r0, r3
 800b8a2:	f7ff f8e2 	bl	800aa6a <HAL_I2C_MemTxCpltCallback>
}
 800b8a6:	e038      	b.n	800b91a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	2242      	movs	r2, #66	@ 0x42
 800b8ac:	2100      	movs	r1, #0
 800b8ae:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b8b0:	687b      	ldr	r3, [r7, #4]
 800b8b2:	2240      	movs	r2, #64	@ 0x40
 800b8b4:	2100      	movs	r1, #0
 800b8b6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	0018      	movs	r0, r3
 800b8bc:	f7ff f89d 	bl	800a9fa <HAL_I2C_MasterTxCpltCallback>
}
 800b8c0:	e02b      	b.n	800b91a <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	2241      	movs	r2, #65	@ 0x41
 800b8c6:	5c9b      	ldrb	r3, [r3, r2]
 800b8c8:	b2db      	uxtb	r3, r3
 800b8ca:	2b22      	cmp	r3, #34	@ 0x22
 800b8cc:	d125      	bne.n	800b91a <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2241      	movs	r2, #65	@ 0x41
 800b8d2:	2120      	movs	r1, #32
 800b8d4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800b8d6:	687b      	ldr	r3, [r7, #4]
 800b8d8:	2200      	movs	r2, #0
 800b8da:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	2242      	movs	r2, #66	@ 0x42
 800b8e0:	5c9b      	ldrb	r3, [r3, r2]
 800b8e2:	b2db      	uxtb	r3, r3
 800b8e4:	2b40      	cmp	r3, #64	@ 0x40
 800b8e6:	d10c      	bne.n	800b902 <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	2242      	movs	r2, #66	@ 0x42
 800b8ec:	2100      	movs	r1, #0
 800b8ee:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	2240      	movs	r2, #64	@ 0x40
 800b8f4:	2100      	movs	r1, #0
 800b8f6:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	0018      	movs	r0, r3
 800b8fc:	f7ff f8bd 	bl	800aa7a <HAL_I2C_MemRxCpltCallback>
}
 800b900:	e00b      	b.n	800b91a <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2242      	movs	r2, #66	@ 0x42
 800b906:	2100      	movs	r1, #0
 800b908:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	2240      	movs	r2, #64	@ 0x40
 800b90e:	2100      	movs	r1, #0
 800b910:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	0018      	movs	r0, r3
 800b916:	f7ff f878 	bl	800aa0a <HAL_I2C_MasterRxCpltCallback>
}
 800b91a:	46c0      	nop			@ (mov r8, r8)
 800b91c:	46bd      	mov	sp, r7
 800b91e:	b006      	add	sp, #24
 800b920:	bd80      	pop	{r7, pc}
 800b922:	46c0      	nop			@ (mov r8, r8)
 800b924:	fe00e800 	.word	0xfe00e800
 800b928:	ffff0000 	.word	0xffff0000

0800b92c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800b92c:	b580      	push	{r7, lr}
 800b92e:	b086      	sub	sp, #24
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800b942:	200f      	movs	r0, #15
 800b944:	183b      	adds	r3, r7, r0
 800b946:	687a      	ldr	r2, [r7, #4]
 800b948:	2141      	movs	r1, #65	@ 0x41
 800b94a:	5c52      	ldrb	r2, [r2, r1]
 800b94c:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b94e:	687b      	ldr	r3, [r7, #4]
 800b950:	681b      	ldr	r3, [r3, #0]
 800b952:	2220      	movs	r2, #32
 800b954:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800b956:	183b      	adds	r3, r7, r0
 800b958:	781b      	ldrb	r3, [r3, #0]
 800b95a:	2b21      	cmp	r3, #33	@ 0x21
 800b95c:	d003      	beq.n	800b966 <I2C_ITSlaveCplt+0x3a>
 800b95e:	183b      	adds	r3, r7, r0
 800b960:	781b      	ldrb	r3, [r3, #0]
 800b962:	2b29      	cmp	r3, #41	@ 0x29
 800b964:	d109      	bne.n	800b97a <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800b966:	4a7b      	ldr	r2, [pc, #492]	@ (800bb54 <I2C_ITSlaveCplt+0x228>)
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	0011      	movs	r1, r2
 800b96c:	0018      	movs	r0, r3
 800b96e:	f000 fc43 	bl	800c1f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	2221      	movs	r2, #33	@ 0x21
 800b976:	631a      	str	r2, [r3, #48]	@ 0x30
 800b978:	e011      	b.n	800b99e <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b97a:	220f      	movs	r2, #15
 800b97c:	18bb      	adds	r3, r7, r2
 800b97e:	781b      	ldrb	r3, [r3, #0]
 800b980:	2b22      	cmp	r3, #34	@ 0x22
 800b982:	d003      	beq.n	800b98c <I2C_ITSlaveCplt+0x60>
 800b984:	18bb      	adds	r3, r7, r2
 800b986:	781b      	ldrb	r3, [r3, #0]
 800b988:	2b2a      	cmp	r3, #42	@ 0x2a
 800b98a:	d108      	bne.n	800b99e <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800b98c:	4a72      	ldr	r2, [pc, #456]	@ (800bb58 <I2C_ITSlaveCplt+0x22c>)
 800b98e:	687b      	ldr	r3, [r7, #4]
 800b990:	0011      	movs	r1, r2
 800b992:	0018      	movs	r0, r3
 800b994:	f000 fc30 	bl	800c1f8 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2222      	movs	r2, #34	@ 0x22
 800b99c:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	685a      	ldr	r2, [r3, #4]
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	2180      	movs	r1, #128	@ 0x80
 800b9aa:	0209      	lsls	r1, r1, #8
 800b9ac:	430a      	orrs	r2, r1
 800b9ae:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	685a      	ldr	r2, [r3, #4]
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	681b      	ldr	r3, [r3, #0]
 800b9ba:	4968      	ldr	r1, [pc, #416]	@ (800bb5c <I2C_ITSlaveCplt+0x230>)
 800b9bc:	400a      	ands	r2, r1
 800b9be:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	0018      	movs	r0, r3
 800b9c4:	f000 fa55 	bl	800be72 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800b9c8:	693a      	ldr	r2, [r7, #16]
 800b9ca:	2380      	movs	r3, #128	@ 0x80
 800b9cc:	01db      	lsls	r3, r3, #7
 800b9ce:	4013      	ands	r3, r2
 800b9d0:	d013      	beq.n	800b9fa <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	681a      	ldr	r2, [r3, #0]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	4960      	ldr	r1, [pc, #384]	@ (800bb60 <I2C_ITSlaveCplt+0x234>)
 800b9de:	400a      	ands	r2, r1
 800b9e0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d01f      	beq.n	800ba2a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800b9ea:	687b      	ldr	r3, [r7, #4]
 800b9ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	685b      	ldr	r3, [r3, #4]
 800b9f2:	b29a      	uxth	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800b9f8:	e017      	b.n	800ba2a <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800b9fa:	693a      	ldr	r2, [r7, #16]
 800b9fc:	2380      	movs	r3, #128	@ 0x80
 800b9fe:	021b      	lsls	r3, r3, #8
 800ba00:	4013      	ands	r3, r2
 800ba02:	d012      	beq.n	800ba2a <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ba04:	687b      	ldr	r3, [r7, #4]
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681a      	ldr	r2, [r3, #0]
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	4955      	ldr	r1, [pc, #340]	@ (800bb64 <I2C_ITSlaveCplt+0x238>)
 800ba10:	400a      	ands	r2, r1
 800ba12:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d006      	beq.n	800ba2a <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800ba1c:	687b      	ldr	r3, [r7, #4]
 800ba1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	685b      	ldr	r3, [r3, #4]
 800ba24:	b29a      	uxth	r2, r3
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800ba2a:	697b      	ldr	r3, [r7, #20]
 800ba2c:	2204      	movs	r2, #4
 800ba2e:	4013      	ands	r3, r2
 800ba30:	d020      	beq.n	800ba74 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800ba32:	697b      	ldr	r3, [r7, #20]
 800ba34:	2204      	movs	r2, #4
 800ba36:	4393      	bics	r3, r2
 800ba38:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba44:	b2d2      	uxtb	r2, r2
 800ba46:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba4c:	1c5a      	adds	r2, r3, #1
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800ba52:	687b      	ldr	r3, [r7, #4]
 800ba54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba56:	2b00      	cmp	r3, #0
 800ba58:	d00c      	beq.n	800ba74 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800ba5a:	687b      	ldr	r3, [r7, #4]
 800ba5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800ba5e:	3b01      	subs	r3, #1
 800ba60:	b29a      	uxth	r2, r3
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba6a:	b29b      	uxth	r3, r3
 800ba6c:	3b01      	subs	r3, #1
 800ba6e:	b29a      	uxth	r2, r3
 800ba70:	687b      	ldr	r3, [r7, #4]
 800ba72:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ba78:	b29b      	uxth	r3, r3
 800ba7a:	2b00      	cmp	r3, #0
 800ba7c:	d005      	beq.n	800ba8a <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ba7e:	687b      	ldr	r3, [r7, #4]
 800ba80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba82:	2204      	movs	r2, #4
 800ba84:	431a      	orrs	r2, r3
 800ba86:	687b      	ldr	r3, [r7, #4]
 800ba88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba8a:	687b      	ldr	r3, [r7, #4]
 800ba8c:	2242      	movs	r2, #66	@ 0x42
 800ba8e:	2100      	movs	r1, #0
 800ba90:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ba92:	687b      	ldr	r3, [r7, #4]
 800ba94:	2200      	movs	r2, #0
 800ba96:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d013      	beq.n	800bac8 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800baa0:	687b      	ldr	r3, [r7, #4]
 800baa2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	0011      	movs	r1, r2
 800baa8:	0018      	movs	r0, r3
 800baaa:	f000 f8b7 	bl	800bc1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	2241      	movs	r2, #65	@ 0x41
 800bab2:	5c9b      	ldrb	r3, [r3, r2]
 800bab4:	b2db      	uxtb	r3, r3
 800bab6:	2b28      	cmp	r3, #40	@ 0x28
 800bab8:	d147      	bne.n	800bb4a <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800baba:	697a      	ldr	r2, [r7, #20]
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	0011      	movs	r1, r2
 800bac0:	0018      	movs	r0, r3
 800bac2:	f000 f853 	bl	800bb6c <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800bac6:	e040      	b.n	800bb4a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bacc:	4a26      	ldr	r2, [pc, #152]	@ (800bb68 <I2C_ITSlaveCplt+0x23c>)
 800bace:	4293      	cmp	r3, r2
 800bad0:	d016      	beq.n	800bb00 <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	0018      	movs	r0, r3
 800bad6:	f7ff fdf7 	bl	800b6c8 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	4a22      	ldr	r2, [pc, #136]	@ (800bb68 <I2C_ITSlaveCplt+0x23c>)
 800bade:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2241      	movs	r2, #65	@ 0x41
 800bae4:	2120      	movs	r1, #32
 800bae6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	2200      	movs	r2, #0
 800baec:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	2240      	movs	r2, #64	@ 0x40
 800baf2:	2100      	movs	r1, #0
 800baf4:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	0018      	movs	r0, r3
 800bafa:	f7fe ffae 	bl	800aa5a <HAL_I2C_ListenCpltCallback>
}
 800bafe:	e024      	b.n	800bb4a <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	2241      	movs	r2, #65	@ 0x41
 800bb04:	5c9b      	ldrb	r3, [r3, r2]
 800bb06:	b2db      	uxtb	r3, r3
 800bb08:	2b22      	cmp	r3, #34	@ 0x22
 800bb0a:	d10f      	bne.n	800bb2c <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2241      	movs	r2, #65	@ 0x41
 800bb10:	2120      	movs	r1, #32
 800bb12:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb14:	687b      	ldr	r3, [r7, #4]
 800bb16:	2200      	movs	r2, #0
 800bb18:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2240      	movs	r2, #64	@ 0x40
 800bb1e:	2100      	movs	r1, #0
 800bb20:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	0018      	movs	r0, r3
 800bb26:	f7fe ff80 	bl	800aa2a <HAL_I2C_SlaveRxCpltCallback>
}
 800bb2a:	e00e      	b.n	800bb4a <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	2241      	movs	r2, #65	@ 0x41
 800bb30:	2120      	movs	r1, #32
 800bb32:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2200      	movs	r2, #0
 800bb38:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	2240      	movs	r2, #64	@ 0x40
 800bb3e:	2100      	movs	r1, #0
 800bb40:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	0018      	movs	r0, r3
 800bb46:	f7fe ff68 	bl	800aa1a <HAL_I2C_SlaveTxCpltCallback>
}
 800bb4a:	46c0      	nop			@ (mov r8, r8)
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	b006      	add	sp, #24
 800bb50:	bd80      	pop	{r7, pc}
 800bb52:	46c0      	nop			@ (mov r8, r8)
 800bb54:	00008001 	.word	0x00008001
 800bb58:	00008002 	.word	0x00008002
 800bb5c:	fe00e800 	.word	0xfe00e800
 800bb60:	ffffbfff 	.word	0xffffbfff
 800bb64:	ffff7fff 	.word	0xffff7fff
 800bb68:	ffff0000 	.word	0xffff0000

0800bb6c <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800bb6c:	b580      	push	{r7, lr}
 800bb6e:	b082      	sub	sp, #8
 800bb70:	af00      	add	r7, sp, #0
 800bb72:	6078      	str	r0, [r7, #4]
 800bb74:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	4a26      	ldr	r2, [pc, #152]	@ (800bc14 <I2C_ITListenCplt+0xa8>)
 800bb7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2200      	movs	r2, #0
 800bb80:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2241      	movs	r2, #65	@ 0x41
 800bb86:	2120      	movs	r1, #32
 800bb88:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2242      	movs	r2, #66	@ 0x42
 800bb8e:	2100      	movs	r1, #0
 800bb90:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2200      	movs	r2, #0
 800bb96:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	2204      	movs	r2, #4
 800bb9c:	4013      	ands	r3, r2
 800bb9e:	d022      	beq.n	800bbe6 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bba6:	687b      	ldr	r3, [r7, #4]
 800bba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbaa:	b2d2      	uxtb	r2, r2
 800bbac:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb2:	1c5a      	adds	r2, r3, #1
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d012      	beq.n	800bbe6 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bbd0:	b29b      	uxth	r3, r3
 800bbd2:	3b01      	subs	r3, #1
 800bbd4:	b29a      	uxth	r2, r3
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bbda:	687b      	ldr	r3, [r7, #4]
 800bbdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bbde:	2204      	movs	r2, #4
 800bbe0:	431a      	orrs	r2, r3
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bbe6:	4a0c      	ldr	r2, [pc, #48]	@ (800bc18 <I2C_ITListenCplt+0xac>)
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	0011      	movs	r1, r2
 800bbec:	0018      	movs	r0, r3
 800bbee:	f000 fb03 	bl	800c1f8 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bbf2:	687b      	ldr	r3, [r7, #4]
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	2210      	movs	r2, #16
 800bbf8:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800bbfa:	687b      	ldr	r3, [r7, #4]
 800bbfc:	2240      	movs	r2, #64	@ 0x40
 800bbfe:	2100      	movs	r1, #0
 800bc00:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800bc02:	687b      	ldr	r3, [r7, #4]
 800bc04:	0018      	movs	r0, r3
 800bc06:	f7fe ff28 	bl	800aa5a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800bc0a:	46c0      	nop			@ (mov r8, r8)
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	b002      	add	sp, #8
 800bc10:	bd80      	pop	{r7, pc}
 800bc12:	46c0      	nop			@ (mov r8, r8)
 800bc14:	ffff0000 	.word	0xffff0000
 800bc18:	00008003 	.word	0x00008003

0800bc1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	b084      	sub	sp, #16
 800bc20:	af00      	add	r7, sp, #0
 800bc22:	6078      	str	r0, [r7, #4]
 800bc24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800bc26:	200f      	movs	r0, #15
 800bc28:	183b      	adds	r3, r7, r0
 800bc2a:	687a      	ldr	r2, [r7, #4]
 800bc2c:	2141      	movs	r1, #65	@ 0x41
 800bc2e:	5c52      	ldrb	r2, [r2, r1]
 800bc30:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2242      	movs	r2, #66	@ 0x42
 800bc36:	2100      	movs	r1, #0
 800bc38:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	4a72      	ldr	r2, [pc, #456]	@ (800be08 <I2C_ITError+0x1ec>)
 800bc3e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800bc4a:	683b      	ldr	r3, [r7, #0]
 800bc4c:	431a      	orrs	r2, r3
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800bc52:	183b      	adds	r3, r7, r0
 800bc54:	781b      	ldrb	r3, [r3, #0]
 800bc56:	2b28      	cmp	r3, #40	@ 0x28
 800bc58:	d007      	beq.n	800bc6a <I2C_ITError+0x4e>
 800bc5a:	183b      	adds	r3, r7, r0
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	2b29      	cmp	r3, #41	@ 0x29
 800bc60:	d003      	beq.n	800bc6a <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800bc62:	183b      	adds	r3, r7, r0
 800bc64:	781b      	ldrb	r3, [r3, #0]
 800bc66:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc68:	d10c      	bne.n	800bc84 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	2103      	movs	r1, #3
 800bc6e:	0018      	movs	r0, r3
 800bc70:	f000 fac2 	bl	800c1f8 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	2241      	movs	r2, #65	@ 0x41
 800bc78:	2128      	movs	r1, #40	@ 0x28
 800bc7a:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	4a63      	ldr	r2, [pc, #396]	@ (800be0c <I2C_ITError+0x1f0>)
 800bc80:	635a      	str	r2, [r3, #52]	@ 0x34
 800bc82:	e032      	b.n	800bcea <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800bc84:	4a62      	ldr	r2, [pc, #392]	@ (800be10 <I2C_ITError+0x1f4>)
 800bc86:	687b      	ldr	r3, [r7, #4]
 800bc88:	0011      	movs	r1, r2
 800bc8a:	0018      	movs	r0, r3
 800bc8c:	f000 fab4 	bl	800c1f8 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	0018      	movs	r0, r3
 800bc94:	f000 f8ed 	bl	800be72 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2241      	movs	r2, #65	@ 0x41
 800bc9c:	5c9b      	ldrb	r3, [r3, r2]
 800bc9e:	b2db      	uxtb	r3, r3
 800bca0:	2b60      	cmp	r3, #96	@ 0x60
 800bca2:	d01f      	beq.n	800bce4 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2241      	movs	r2, #65	@ 0x41
 800bca8:	2120      	movs	r1, #32
 800bcaa:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	681b      	ldr	r3, [r3, #0]
 800bcb0:	699b      	ldr	r3, [r3, #24]
 800bcb2:	2220      	movs	r2, #32
 800bcb4:	4013      	ands	r3, r2
 800bcb6:	2b20      	cmp	r3, #32
 800bcb8:	d114      	bne.n	800bce4 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	699b      	ldr	r3, [r3, #24]
 800bcc0:	2210      	movs	r2, #16
 800bcc2:	4013      	ands	r3, r2
 800bcc4:	2b10      	cmp	r3, #16
 800bcc6:	d109      	bne.n	800bcdc <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bcc8:	687b      	ldr	r3, [r7, #4]
 800bcca:	681b      	ldr	r3, [r3, #0]
 800bccc:	2210      	movs	r2, #16
 800bcce:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bcd4:	2204      	movs	r2, #4
 800bcd6:	431a      	orrs	r2, r3
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800bcdc:	687b      	ldr	r3, [r7, #4]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	2220      	movs	r2, #32
 800bce2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	2200      	movs	r2, #0
 800bce8:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bcee:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bcf4:	2b00      	cmp	r3, #0
 800bcf6:	d03b      	beq.n	800bd70 <I2C_ITError+0x154>
 800bcf8:	68bb      	ldr	r3, [r7, #8]
 800bcfa:	2b11      	cmp	r3, #17
 800bcfc:	d002      	beq.n	800bd04 <I2C_ITError+0xe8>
 800bcfe:	68bb      	ldr	r3, [r7, #8]
 800bd00:	2b21      	cmp	r3, #33	@ 0x21
 800bd02:	d135      	bne.n	800bd70 <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	681a      	ldr	r2, [r3, #0]
 800bd0a:	2380      	movs	r3, #128	@ 0x80
 800bd0c:	01db      	lsls	r3, r3, #7
 800bd0e:	401a      	ands	r2, r3
 800bd10:	2380      	movs	r3, #128	@ 0x80
 800bd12:	01db      	lsls	r3, r3, #7
 800bd14:	429a      	cmp	r2, r3
 800bd16:	d107      	bne.n	800bd28 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	681a      	ldr	r2, [r3, #0]
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	493c      	ldr	r1, [pc, #240]	@ (800be14 <I2C_ITError+0x1f8>)
 800bd24:	400a      	ands	r2, r1
 800bd26:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd2c:	0018      	movs	r0, r3
 800bd2e:	f7fe f896 	bl	8009e5e <HAL_DMA_GetState>
 800bd32:	0003      	movs	r3, r0
 800bd34:	2b01      	cmp	r3, #1
 800bd36:	d016      	beq.n	800bd66 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd3c:	4a36      	ldr	r2, [pc, #216]	@ (800be18 <I2C_ITError+0x1fc>)
 800bd3e:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2240      	movs	r2, #64	@ 0x40
 800bd44:	2100      	movs	r1, #0
 800bd46:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd4c:	0018      	movs	r0, r3
 800bd4e:	f7fd ff91 	bl	8009c74 <HAL_DMA_Abort_IT>
 800bd52:	1e03      	subs	r3, r0, #0
 800bd54:	d051      	beq.n	800bdfa <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd5a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800bd60:	0018      	movs	r0, r3
 800bd62:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bd64:	e049      	b.n	800bdfa <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	0018      	movs	r0, r3
 800bd6a:	f000 f859 	bl	800be20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bd6e:	e044      	b.n	800bdfa <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800bd70:	687b      	ldr	r3, [r7, #4]
 800bd72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d03b      	beq.n	800bdf0 <I2C_ITError+0x1d4>
 800bd78:	68bb      	ldr	r3, [r7, #8]
 800bd7a:	2b12      	cmp	r3, #18
 800bd7c:	d002      	beq.n	800bd84 <I2C_ITError+0x168>
 800bd7e:	68bb      	ldr	r3, [r7, #8]
 800bd80:	2b22      	cmp	r3, #34	@ 0x22
 800bd82:	d135      	bne.n	800bdf0 <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	681a      	ldr	r2, [r3, #0]
 800bd8a:	2380      	movs	r3, #128	@ 0x80
 800bd8c:	021b      	lsls	r3, r3, #8
 800bd8e:	401a      	ands	r2, r3
 800bd90:	2380      	movs	r3, #128	@ 0x80
 800bd92:	021b      	lsls	r3, r3, #8
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d107      	bne.n	800bda8 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	681b      	ldr	r3, [r3, #0]
 800bd9c:	681a      	ldr	r2, [r3, #0]
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	491e      	ldr	r1, [pc, #120]	@ (800be1c <I2C_ITError+0x200>)
 800bda4:	400a      	ands	r2, r1
 800bda6:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdac:	0018      	movs	r0, r3
 800bdae:	f7fe f856 	bl	8009e5e <HAL_DMA_GetState>
 800bdb2:	0003      	movs	r3, r0
 800bdb4:	2b01      	cmp	r3, #1
 800bdb6:	d016      	beq.n	800bde6 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdbc:	4a16      	ldr	r2, [pc, #88]	@ (800be18 <I2C_ITError+0x1fc>)
 800bdbe:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bdc0:	687b      	ldr	r3, [r7, #4]
 800bdc2:	2240      	movs	r2, #64	@ 0x40
 800bdc4:	2100      	movs	r1, #0
 800bdc6:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdcc:	0018      	movs	r0, r3
 800bdce:	f7fd ff51 	bl	8009c74 <HAL_DMA_Abort_IT>
 800bdd2:	1e03      	subs	r3, r0, #0
 800bdd4:	d013      	beq.n	800bdfe <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bdda:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bde0:	0018      	movs	r0, r3
 800bde2:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bde4:	e00b      	b.n	800bdfe <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	0018      	movs	r0, r3
 800bdea:	f000 f819 	bl	800be20 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bdee:	e006      	b.n	800bdfe <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800bdf0:	687b      	ldr	r3, [r7, #4]
 800bdf2:	0018      	movs	r0, r3
 800bdf4:	f000 f814 	bl	800be20 <I2C_TreatErrorCallback>
  }
}
 800bdf8:	e002      	b.n	800be00 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800bdfa:	46c0      	nop			@ (mov r8, r8)
 800bdfc:	e000      	b.n	800be00 <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800bdfe:	46c0      	nop			@ (mov r8, r8)
}
 800be00:	46c0      	nop			@ (mov r8, r8)
 800be02:	46bd      	mov	sp, r7
 800be04:	b004      	add	sp, #16
 800be06:	bd80      	pop	{r7, pc}
 800be08:	ffff0000 	.word	0xffff0000
 800be0c:	0800ad01 	.word	0x0800ad01
 800be10:	00008003 	.word	0x00008003
 800be14:	ffffbfff 	.word	0xffffbfff
 800be18:	0800c02b 	.word	0x0800c02b
 800be1c:	ffff7fff 	.word	0xffff7fff

0800be20 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800be20:	b580      	push	{r7, lr}
 800be22:	b082      	sub	sp, #8
 800be24:	af00      	add	r7, sp, #0
 800be26:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2241      	movs	r2, #65	@ 0x41
 800be2c:	5c9b      	ldrb	r3, [r3, r2]
 800be2e:	b2db      	uxtb	r3, r3
 800be30:	2b60      	cmp	r3, #96	@ 0x60
 800be32:	d10f      	bne.n	800be54 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800be34:	687b      	ldr	r3, [r7, #4]
 800be36:	2241      	movs	r2, #65	@ 0x41
 800be38:	2120      	movs	r1, #32
 800be3a:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2200      	movs	r2, #0
 800be40:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	2240      	movs	r2, #64	@ 0x40
 800be46:	2100      	movs	r1, #0
 800be48:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	0018      	movs	r0, r3
 800be4e:	f7fe fe24 	bl	800aa9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800be52:	e00a      	b.n	800be6a <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	2200      	movs	r2, #0
 800be58:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	2240      	movs	r2, #64	@ 0x40
 800be5e:	2100      	movs	r1, #0
 800be60:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	0018      	movs	r0, r3
 800be66:	f7fe fe10 	bl	800aa8a <HAL_I2C_ErrorCallback>
}
 800be6a:	46c0      	nop			@ (mov r8, r8)
 800be6c:	46bd      	mov	sp, r7
 800be6e:	b002      	add	sp, #8
 800be70:	bd80      	pop	{r7, pc}

0800be72 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800be72:	b580      	push	{r7, lr}
 800be74:	b082      	sub	sp, #8
 800be76:	af00      	add	r7, sp, #0
 800be78:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	699b      	ldr	r3, [r3, #24]
 800be80:	2202      	movs	r2, #2
 800be82:	4013      	ands	r3, r2
 800be84:	2b02      	cmp	r3, #2
 800be86:	d103      	bne.n	800be90 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	681b      	ldr	r3, [r3, #0]
 800be8c:	2200      	movs	r2, #0
 800be8e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800be90:	687b      	ldr	r3, [r7, #4]
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	699b      	ldr	r3, [r3, #24]
 800be96:	2201      	movs	r2, #1
 800be98:	4013      	ands	r3, r2
 800be9a:	2b01      	cmp	r3, #1
 800be9c:	d007      	beq.n	800beae <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	699a      	ldr	r2, [r3, #24]
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2101      	movs	r1, #1
 800beaa:	430a      	orrs	r2, r1
 800beac:	619a      	str	r2, [r3, #24]
  }
}
 800beae:	46c0      	nop			@ (mov r8, r8)
 800beb0:	46bd      	mov	sp, r7
 800beb2:	b002      	add	sp, #8
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b084      	sub	sp, #16
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bec4:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800bec6:	68fb      	ldr	r3, [r7, #12]
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	681a      	ldr	r2, [r3, #0]
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	681b      	ldr	r3, [r3, #0]
 800bed0:	4920      	ldr	r1, [pc, #128]	@ (800bf54 <I2C_DMAMasterTransmitCplt+0x9c>)
 800bed2:	400a      	ands	r2, r1
 800bed4:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800bed6:	68fb      	ldr	r3, [r7, #12]
 800bed8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800beda:	b29b      	uxth	r3, r3
 800bedc:	2b00      	cmp	r3, #0
 800bede:	d105      	bne.n	800beec <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bee0:	68fb      	ldr	r3, [r7, #12]
 800bee2:	2120      	movs	r1, #32
 800bee4:	0018      	movs	r0, r3
 800bee6:	f000 f8f9 	bl	800c0dc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800beea:	e02e      	b.n	800bf4a <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800beec:	68fb      	ldr	r3, [r7, #12]
 800beee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bef0:	68fa      	ldr	r2, [r7, #12]
 800bef2:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800bef4:	189a      	adds	r2, r3, r2
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800befe:	b29b      	uxth	r3, r3
 800bf00:	2bff      	cmp	r3, #255	@ 0xff
 800bf02:	d903      	bls.n	800bf0c <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bf04:	68fb      	ldr	r3, [r7, #12]
 800bf06:	22ff      	movs	r2, #255	@ 0xff
 800bf08:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bf0a:	e004      	b.n	800bf16 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800bf0c:	68fb      	ldr	r3, [r7, #12]
 800bf0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf10:	b29a      	uxth	r2, r3
 800bf12:	68fb      	ldr	r3, [r7, #12]
 800bf14:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800bf16:	68fb      	ldr	r3, [r7, #12]
 800bf18:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf1e:	0019      	movs	r1, r3
 800bf20:	68fb      	ldr	r3, [r7, #12]
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	3328      	adds	r3, #40	@ 0x28
 800bf26:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800bf28:	68fb      	ldr	r3, [r7, #12]
 800bf2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800bf2c:	f7fd fdfc 	bl	8009b28 <HAL_DMA_Start_IT>
 800bf30:	1e03      	subs	r3, r0, #0
 800bf32:	d005      	beq.n	800bf40 <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2110      	movs	r1, #16
 800bf38:	0018      	movs	r0, r3
 800bf3a:	f7ff fe6f 	bl	800bc1c <I2C_ITError>
}
 800bf3e:	e004      	b.n	800bf4a <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800bf40:	68fb      	ldr	r3, [r7, #12]
 800bf42:	2140      	movs	r1, #64	@ 0x40
 800bf44:	0018      	movs	r0, r3
 800bf46:	f000 f8c9 	bl	800c0dc <I2C_Enable_IRQ>
}
 800bf4a:	46c0      	nop			@ (mov r8, r8)
 800bf4c:	46bd      	mov	sp, r7
 800bf4e:	b004      	add	sp, #16
 800bf50:	bd80      	pop	{r7, pc}
 800bf52:	46c0      	nop			@ (mov r8, r8)
 800bf54:	ffffbfff 	.word	0xffffbfff

0800bf58 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf64:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	681a      	ldr	r2, [r3, #0]
 800bf6c:	68fb      	ldr	r3, [r7, #12]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	4920      	ldr	r1, [pc, #128]	@ (800bff4 <I2C_DMAMasterReceiveCplt+0x9c>)
 800bf72:	400a      	ands	r2, r1
 800bf74:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800bf76:	68fb      	ldr	r3, [r7, #12]
 800bf78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d105      	bne.n	800bf8c <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800bf80:	68fb      	ldr	r3, [r7, #12]
 800bf82:	2120      	movs	r1, #32
 800bf84:	0018      	movs	r0, r3
 800bf86:	f000 f8a9 	bl	800c0dc <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800bf8a:	e02e      	b.n	800bfea <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800bf94:	189a      	adds	r2, r3, r2
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800bf9a:	68fb      	ldr	r3, [r7, #12]
 800bf9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bf9e:	b29b      	uxth	r3, r3
 800bfa0:	2bff      	cmp	r3, #255	@ 0xff
 800bfa2:	d903      	bls.n	800bfac <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	22ff      	movs	r2, #255	@ 0xff
 800bfa8:	851a      	strh	r2, [r3, #40]	@ 0x28
 800bfaa:	e004      	b.n	800bfb6 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800bfac:	68fb      	ldr	r3, [r7, #12]
 800bfae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800bfb0:	b29a      	uxth	r2, r3
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	3324      	adds	r3, #36	@ 0x24
 800bfc0:	0019      	movs	r1, r3
 800bfc2:	68fb      	ldr	r3, [r7, #12]
 800bfc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bfc6:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800bfc8:	68fb      	ldr	r3, [r7, #12]
 800bfca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800bfcc:	f7fd fdac 	bl	8009b28 <HAL_DMA_Start_IT>
 800bfd0:	1e03      	subs	r3, r0, #0
 800bfd2:	d005      	beq.n	800bfe0 <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	2110      	movs	r1, #16
 800bfd8:	0018      	movs	r0, r3
 800bfda:	f7ff fe1f 	bl	800bc1c <I2C_ITError>
}
 800bfde:	e004      	b.n	800bfea <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	2140      	movs	r1, #64	@ 0x40
 800bfe4:	0018      	movs	r0, r3
 800bfe6:	f000 f879 	bl	800c0dc <I2C_Enable_IRQ>
}
 800bfea:	46c0      	nop			@ (mov r8, r8)
 800bfec:	46bd      	mov	sp, r7
 800bfee:	b004      	add	sp, #16
 800bff0:	bd80      	pop	{r7, pc}
 800bff2:	46c0      	nop			@ (mov r8, r8)
 800bff4:	ffff7fff 	.word	0xffff7fff

0800bff8 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800bff8:	b580      	push	{r7, lr}
 800bffa:	b084      	sub	sp, #16
 800bffc:	af00      	add	r7, sp, #0
 800bffe:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c004:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	681b      	ldr	r3, [r3, #0]
 800c00a:	685a      	ldr	r2, [r3, #4]
 800c00c:	68fb      	ldr	r3, [r7, #12]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	2180      	movs	r1, #128	@ 0x80
 800c012:	0209      	lsls	r1, r1, #8
 800c014:	430a      	orrs	r2, r1
 800c016:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800c018:	68fb      	ldr	r3, [r7, #12]
 800c01a:	2110      	movs	r1, #16
 800c01c:	0018      	movs	r0, r3
 800c01e:	f7ff fdfd 	bl	800bc1c <I2C_ITError>
}
 800c022:	46c0      	nop			@ (mov r8, r8)
 800c024:	46bd      	mov	sp, r7
 800c026:	b004      	add	sp, #16
 800c028:	bd80      	pop	{r7, pc}

0800c02a <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800c02a:	b580      	push	{r7, lr}
 800c02c:	b084      	sub	sp, #16
 800c02e:	af00      	add	r7, sp, #0
 800c030:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c036:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800c038:	68fb      	ldr	r3, [r7, #12]
 800c03a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	d003      	beq.n	800c048 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c044:	2200      	movs	r2, #0
 800c046:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800c048:	68fb      	ldr	r3, [r7, #12]
 800c04a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d003      	beq.n	800c058 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800c050:	68fb      	ldr	r3, [r7, #12]
 800c052:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c054:	2200      	movs	r2, #0
 800c056:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	0018      	movs	r0, r3
 800c05c:	f7ff fee0 	bl	800be20 <I2C_TreatErrorCallback>
}
 800c060:	46c0      	nop			@ (mov r8, r8)
 800c062:	46bd      	mov	sp, r7
 800c064:	b004      	add	sp, #16
 800c066:	bd80      	pop	{r7, pc}

0800c068 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800c068:	b590      	push	{r4, r7, lr}
 800c06a:	b087      	sub	sp, #28
 800c06c:	af00      	add	r7, sp, #0
 800c06e:	60f8      	str	r0, [r7, #12]
 800c070:	0008      	movs	r0, r1
 800c072:	0011      	movs	r1, r2
 800c074:	607b      	str	r3, [r7, #4]
 800c076:	240a      	movs	r4, #10
 800c078:	193b      	adds	r3, r7, r4
 800c07a:	1c02      	adds	r2, r0, #0
 800c07c:	801a      	strh	r2, [r3, #0]
 800c07e:	2009      	movs	r0, #9
 800c080:	183b      	adds	r3, r7, r0
 800c082:	1c0a      	adds	r2, r1, #0
 800c084:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c086:	193b      	adds	r3, r7, r4
 800c088:	881b      	ldrh	r3, [r3, #0]
 800c08a:	059b      	lsls	r3, r3, #22
 800c08c:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c08e:	183b      	adds	r3, r7, r0
 800c090:	781b      	ldrb	r3, [r3, #0]
 800c092:	0419      	lsls	r1, r3, #16
 800c094:	23ff      	movs	r3, #255	@ 0xff
 800c096:	041b      	lsls	r3, r3, #16
 800c098:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c09a:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800c0a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0a2:	4313      	orrs	r3, r2
 800c0a4:	005b      	lsls	r3, r3, #1
 800c0a6:	085b      	lsrs	r3, r3, #1
 800c0a8:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800c0aa:	68fb      	ldr	r3, [r7, #12]
 800c0ac:	681b      	ldr	r3, [r3, #0]
 800c0ae:	685b      	ldr	r3, [r3, #4]
 800c0b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0b2:	0d51      	lsrs	r1, r2, #21
 800c0b4:	2280      	movs	r2, #128	@ 0x80
 800c0b6:	00d2      	lsls	r2, r2, #3
 800c0b8:	400a      	ands	r2, r1
 800c0ba:	4907      	ldr	r1, [pc, #28]	@ (800c0d8 <I2C_TransferConfig+0x70>)
 800c0bc:	430a      	orrs	r2, r1
 800c0be:	43d2      	mvns	r2, r2
 800c0c0:	401a      	ands	r2, r3
 800c0c2:	0011      	movs	r1, r2
 800c0c4:	68fb      	ldr	r3, [r7, #12]
 800c0c6:	681b      	ldr	r3, [r3, #0]
 800c0c8:	697a      	ldr	r2, [r7, #20]
 800c0ca:	430a      	orrs	r2, r1
 800c0cc:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800c0ce:	46c0      	nop			@ (mov r8, r8)
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	b007      	add	sp, #28
 800c0d4:	bd90      	pop	{r4, r7, pc}
 800c0d6:	46c0      	nop			@ (mov r8, r8)
 800c0d8:	03ff63ff 	.word	0x03ff63ff

0800c0dc <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	b084      	sub	sp, #16
 800c0e0:	af00      	add	r7, sp, #0
 800c0e2:	6078      	str	r0, [r7, #4]
 800c0e4:	000a      	movs	r2, r1
 800c0e6:	1cbb      	adds	r3, r7, #2
 800c0e8:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c0ee:	687b      	ldr	r3, [r7, #4]
 800c0f0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c0f2:	4b3e      	ldr	r3, [pc, #248]	@ (800c1ec <I2C_Enable_IRQ+0x110>)
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d035      	beq.n	800c164 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800c0fc:	4b3c      	ldr	r3, [pc, #240]	@ (800c1f0 <I2C_Enable_IRQ+0x114>)
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d030      	beq.n	800c164 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800c106:	4b3b      	ldr	r3, [pc, #236]	@ (800c1f4 <I2C_Enable_IRQ+0x118>)
 800c108:	429a      	cmp	r2, r3
 800c10a:	d02b      	beq.n	800c164 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c10c:	1cbb      	adds	r3, r7, #2
 800c10e:	2200      	movs	r2, #0
 800c110:	5e9b      	ldrsh	r3, [r3, r2]
 800c112:	2b00      	cmp	r3, #0
 800c114:	da03      	bge.n	800c11e <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c116:	68fb      	ldr	r3, [r7, #12]
 800c118:	22b8      	movs	r2, #184	@ 0xb8
 800c11a:	4313      	orrs	r3, r2
 800c11c:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c11e:	1cbb      	adds	r3, r7, #2
 800c120:	881b      	ldrh	r3, [r3, #0]
 800c122:	2201      	movs	r2, #1
 800c124:	4013      	ands	r3, r2
 800c126:	d003      	beq.n	800c130 <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	22f2      	movs	r2, #242	@ 0xf2
 800c12c:	4313      	orrs	r3, r2
 800c12e:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c130:	1cbb      	adds	r3, r7, #2
 800c132:	881b      	ldrh	r3, [r3, #0]
 800c134:	2202      	movs	r2, #2
 800c136:	4013      	ands	r3, r2
 800c138:	d003      	beq.n	800c142 <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	22f4      	movs	r2, #244	@ 0xf4
 800c13e:	4313      	orrs	r3, r2
 800c140:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c142:	1cbb      	adds	r3, r7, #2
 800c144:	881b      	ldrh	r3, [r3, #0]
 800c146:	2b10      	cmp	r3, #16
 800c148:	d103      	bne.n	800c152 <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	2290      	movs	r2, #144	@ 0x90
 800c14e:	4313      	orrs	r3, r2
 800c150:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c152:	1cbb      	adds	r3, r7, #2
 800c154:	881b      	ldrh	r3, [r3, #0]
 800c156:	2b20      	cmp	r3, #32
 800c158:	d13c      	bne.n	800c1d4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2220      	movs	r2, #32
 800c15e:	4313      	orrs	r3, r2
 800c160:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c162:	e037      	b.n	800c1d4 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c164:	1cbb      	adds	r3, r7, #2
 800c166:	2200      	movs	r2, #0
 800c168:	5e9b      	ldrsh	r3, [r3, r2]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	da03      	bge.n	800c176 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	22b8      	movs	r2, #184	@ 0xb8
 800c172:	4313      	orrs	r3, r2
 800c174:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c176:	1cbb      	adds	r3, r7, #2
 800c178:	881b      	ldrh	r3, [r3, #0]
 800c17a:	2201      	movs	r2, #1
 800c17c:	4013      	ands	r3, r2
 800c17e:	d003      	beq.n	800c188 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800c180:	68fb      	ldr	r3, [r7, #12]
 800c182:	22f2      	movs	r2, #242	@ 0xf2
 800c184:	4313      	orrs	r3, r2
 800c186:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c188:	1cbb      	adds	r3, r7, #2
 800c18a:	881b      	ldrh	r3, [r3, #0]
 800c18c:	2202      	movs	r2, #2
 800c18e:	4013      	ands	r3, r2
 800c190:	d003      	beq.n	800c19a <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	22f4      	movs	r2, #244	@ 0xf4
 800c196:	4313      	orrs	r3, r2
 800c198:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c19a:	1cbb      	adds	r3, r7, #2
 800c19c:	881b      	ldrh	r3, [r3, #0]
 800c19e:	2b10      	cmp	r3, #16
 800c1a0:	d103      	bne.n	800c1aa <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	2290      	movs	r2, #144	@ 0x90
 800c1a6:	4313      	orrs	r3, r2
 800c1a8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c1aa:	1cbb      	adds	r3, r7, #2
 800c1ac:	881b      	ldrh	r3, [r3, #0]
 800c1ae:	2b20      	cmp	r3, #32
 800c1b0:	d103      	bne.n	800c1ba <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	2260      	movs	r2, #96	@ 0x60
 800c1b6:	4313      	orrs	r3, r2
 800c1b8:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c1be:	4b0d      	ldr	r3, [pc, #52]	@ (800c1f4 <I2C_Enable_IRQ+0x118>)
 800c1c0:	429a      	cmp	r2, r3
 800c1c2:	d007      	beq.n	800c1d4 <I2C_Enable_IRQ+0xf8>
 800c1c4:	1cbb      	adds	r3, r7, #2
 800c1c6:	881b      	ldrh	r3, [r3, #0]
 800c1c8:	2b40      	cmp	r3, #64	@ 0x40
 800c1ca:	d103      	bne.n	800c1d4 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800c1cc:	68fb      	ldr	r3, [r7, #12]
 800c1ce:	2240      	movs	r2, #64	@ 0x40
 800c1d0:	4313      	orrs	r3, r2
 800c1d2:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	681b      	ldr	r3, [r3, #0]
 800c1d8:	6819      	ldr	r1, [r3, #0]
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	68fa      	ldr	r2, [r7, #12]
 800c1e0:	430a      	orrs	r2, r1
 800c1e2:	601a      	str	r2, [r3, #0]
}
 800c1e4:	46c0      	nop			@ (mov r8, r8)
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	b004      	add	sp, #16
 800c1ea:	bd80      	pop	{r7, pc}
 800c1ec:	0800af01 	.word	0x0800af01
 800c1f0:	0800b331 	.word	0x0800b331
 800c1f4:	0800b0f9 	.word	0x0800b0f9

0800c1f8 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b084      	sub	sp, #16
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	000a      	movs	r2, r1
 800c202:	1cbb      	adds	r3, r7, #2
 800c204:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800c206:	2300      	movs	r3, #0
 800c208:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800c20a:	1cbb      	adds	r3, r7, #2
 800c20c:	881b      	ldrh	r3, [r3, #0]
 800c20e:	2201      	movs	r2, #1
 800c210:	4013      	ands	r3, r2
 800c212:	d010      	beq.n	800c236 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	2242      	movs	r2, #66	@ 0x42
 800c218:	4313      	orrs	r3, r2
 800c21a:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	2241      	movs	r2, #65	@ 0x41
 800c220:	5c9b      	ldrb	r3, [r3, r2]
 800c222:	b2db      	uxtb	r3, r3
 800c224:	001a      	movs	r2, r3
 800c226:	2328      	movs	r3, #40	@ 0x28
 800c228:	4013      	ands	r3, r2
 800c22a:	2b28      	cmp	r3, #40	@ 0x28
 800c22c:	d003      	beq.n	800c236 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	22b0      	movs	r2, #176	@ 0xb0
 800c232:	4313      	orrs	r3, r2
 800c234:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800c236:	1cbb      	adds	r3, r7, #2
 800c238:	881b      	ldrh	r3, [r3, #0]
 800c23a:	2202      	movs	r2, #2
 800c23c:	4013      	ands	r3, r2
 800c23e:	d010      	beq.n	800c262 <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800c240:	68fb      	ldr	r3, [r7, #12]
 800c242:	2244      	movs	r2, #68	@ 0x44
 800c244:	4313      	orrs	r3, r2
 800c246:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2241      	movs	r2, #65	@ 0x41
 800c24c:	5c9b      	ldrb	r3, [r3, r2]
 800c24e:	b2db      	uxtb	r3, r3
 800c250:	001a      	movs	r2, r3
 800c252:	2328      	movs	r3, #40	@ 0x28
 800c254:	4013      	ands	r3, r2
 800c256:	2b28      	cmp	r3, #40	@ 0x28
 800c258:	d003      	beq.n	800c262 <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c25a:	68fb      	ldr	r3, [r7, #12]
 800c25c:	22b0      	movs	r2, #176	@ 0xb0
 800c25e:	4313      	orrs	r3, r2
 800c260:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800c262:	1cbb      	adds	r3, r7, #2
 800c264:	2200      	movs	r2, #0
 800c266:	5e9b      	ldrsh	r3, [r3, r2]
 800c268:	2b00      	cmp	r3, #0
 800c26a:	da03      	bge.n	800c274 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	22b8      	movs	r2, #184	@ 0xb8
 800c270:	4313      	orrs	r3, r2
 800c272:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800c274:	1cbb      	adds	r3, r7, #2
 800c276:	881b      	ldrh	r3, [r3, #0]
 800c278:	2b10      	cmp	r3, #16
 800c27a:	d103      	bne.n	800c284 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	2290      	movs	r2, #144	@ 0x90
 800c280:	4313      	orrs	r3, r2
 800c282:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800c284:	1cbb      	adds	r3, r7, #2
 800c286:	881b      	ldrh	r3, [r3, #0]
 800c288:	2b20      	cmp	r3, #32
 800c28a:	d103      	bne.n	800c294 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	2220      	movs	r2, #32
 800c290:	4313      	orrs	r3, r2
 800c292:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800c294:	1cbb      	adds	r3, r7, #2
 800c296:	881b      	ldrh	r3, [r3, #0]
 800c298:	2b40      	cmp	r3, #64	@ 0x40
 800c29a:	d103      	bne.n	800c2a4 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800c29c:	68fb      	ldr	r3, [r7, #12]
 800c29e:	2240      	movs	r2, #64	@ 0x40
 800c2a0:	4313      	orrs	r3, r2
 800c2a2:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	43d9      	mvns	r1, r3
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	400a      	ands	r2, r1
 800c2b4:	601a      	str	r2, [r3, #0]
}
 800c2b6:	46c0      	nop			@ (mov r8, r8)
 800c2b8:	46bd      	mov	sp, r7
 800c2ba:	b004      	add	sp, #16
 800c2bc:	bd80      	pop	{r7, pc}
	...

0800c2c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	6078      	str	r0, [r7, #4]
 800c2c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2241      	movs	r2, #65	@ 0x41
 800c2ce:	5c9b      	ldrb	r3, [r3, r2]
 800c2d0:	b2db      	uxtb	r3, r3
 800c2d2:	2b20      	cmp	r3, #32
 800c2d4:	d138      	bne.n	800c348 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	2240      	movs	r2, #64	@ 0x40
 800c2da:	5c9b      	ldrb	r3, [r3, r2]
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d101      	bne.n	800c2e4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	e032      	b.n	800c34a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2240      	movs	r2, #64	@ 0x40
 800c2e8:	2101      	movs	r1, #1
 800c2ea:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2241      	movs	r2, #65	@ 0x41
 800c2f0:	2124      	movs	r1, #36	@ 0x24
 800c2f2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681a      	ldr	r2, [r3, #0]
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	681b      	ldr	r3, [r3, #0]
 800c2fe:	2101      	movs	r1, #1
 800c300:	438a      	bics	r2, r1
 800c302:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	681a      	ldr	r2, [r3, #0]
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	681b      	ldr	r3, [r3, #0]
 800c30e:	4911      	ldr	r1, [pc, #68]	@ (800c354 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800c310:	400a      	ands	r2, r1
 800c312:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	681b      	ldr	r3, [r3, #0]
 800c318:	6819      	ldr	r1, [r3, #0]
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	681b      	ldr	r3, [r3, #0]
 800c31e:	683a      	ldr	r2, [r7, #0]
 800c320:	430a      	orrs	r2, r1
 800c322:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	681b      	ldr	r3, [r3, #0]
 800c328:	681a      	ldr	r2, [r3, #0]
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2101      	movs	r1, #1
 800c330:	430a      	orrs	r2, r1
 800c332:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	2241      	movs	r2, #65	@ 0x41
 800c338:	2120      	movs	r1, #32
 800c33a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2240      	movs	r2, #64	@ 0x40
 800c340:	2100      	movs	r1, #0
 800c342:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c344:	2300      	movs	r3, #0
 800c346:	e000      	b.n	800c34a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800c348:	2302      	movs	r3, #2
  }
}
 800c34a:	0018      	movs	r0, r3
 800c34c:	46bd      	mov	sp, r7
 800c34e:	b002      	add	sp, #8
 800c350:	bd80      	pop	{r7, pc}
 800c352:	46c0      	nop			@ (mov r8, r8)
 800c354:	ffffefff 	.word	0xffffefff

0800c358 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
 800c360:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	2241      	movs	r2, #65	@ 0x41
 800c366:	5c9b      	ldrb	r3, [r3, r2]
 800c368:	b2db      	uxtb	r3, r3
 800c36a:	2b20      	cmp	r3, #32
 800c36c:	d139      	bne.n	800c3e2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800c36e:	687b      	ldr	r3, [r7, #4]
 800c370:	2240      	movs	r2, #64	@ 0x40
 800c372:	5c9b      	ldrb	r3, [r3, r2]
 800c374:	2b01      	cmp	r3, #1
 800c376:	d101      	bne.n	800c37c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800c378:	2302      	movs	r3, #2
 800c37a:	e033      	b.n	800c3e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	2240      	movs	r2, #64	@ 0x40
 800c380:	2101      	movs	r1, #1
 800c382:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	2241      	movs	r2, #65	@ 0x41
 800c388:	2124      	movs	r1, #36	@ 0x24
 800c38a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	681a      	ldr	r2, [r3, #0]
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	2101      	movs	r1, #1
 800c398:	438a      	bics	r2, r1
 800c39a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	4a11      	ldr	r2, [pc, #68]	@ (800c3ec <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800c3a8:	4013      	ands	r3, r2
 800c3aa:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800c3ac:	683b      	ldr	r3, [r7, #0]
 800c3ae:	021b      	lsls	r3, r3, #8
 800c3b0:	68fa      	ldr	r2, [r7, #12]
 800c3b2:	4313      	orrs	r3, r2
 800c3b4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800c3b6:	687b      	ldr	r3, [r7, #4]
 800c3b8:	681b      	ldr	r3, [r3, #0]
 800c3ba:	68fa      	ldr	r2, [r7, #12]
 800c3bc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	681b      	ldr	r3, [r3, #0]
 800c3c2:	681a      	ldr	r2, [r3, #0]
 800c3c4:	687b      	ldr	r3, [r7, #4]
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	430a      	orrs	r2, r1
 800c3cc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2241      	movs	r2, #65	@ 0x41
 800c3d2:	2120      	movs	r1, #32
 800c3d4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2240      	movs	r2, #64	@ 0x40
 800c3da:	2100      	movs	r1, #0
 800c3dc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800c3de:	2300      	movs	r3, #0
 800c3e0:	e000      	b.n	800c3e4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800c3e2:	2302      	movs	r3, #2
  }
}
 800c3e4:	0018      	movs	r0, r3
 800c3e6:	46bd      	mov	sp, r7
 800c3e8:	b004      	add	sp, #16
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	fffff0ff 	.word	0xfffff0ff

0800c3f0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800c3f0:	b580      	push	{r7, lr}
 800c3f2:	b088      	sub	sp, #32
 800c3f4:	af00      	add	r7, sp, #0
 800c3f6:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d101      	bne.n	800c402 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800c3fe:	2301      	movs	r3, #1
 800c400:	e0e1      	b.n	800c5c6 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800c402:	687b      	ldr	r3, [r7, #4]
 800c404:	2235      	movs	r2, #53	@ 0x35
 800c406:	5c9b      	ldrb	r3, [r3, r2]
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d107      	bne.n	800c41e <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2234      	movs	r2, #52	@ 0x34
 800c412:	2100      	movs	r1, #0
 800c414:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	0018      	movs	r0, r3
 800c41a:	f7f9 f9b9 	bl	8005790 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c41e:	687b      	ldr	r3, [r7, #4]
 800c420:	2235      	movs	r2, #53	@ 0x35
 800c422:	2102      	movs	r1, #2
 800c424:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	681b      	ldr	r3, [r3, #0]
 800c42a:	69da      	ldr	r2, [r3, #28]
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	4967      	ldr	r1, [pc, #412]	@ (800c5d0 <HAL_I2S_Init+0x1e0>)
 800c432:	400a      	ands	r2, r1
 800c434:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800c436:	687b      	ldr	r3, [r7, #4]
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	2202      	movs	r2, #2
 800c43c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	695b      	ldr	r3, [r3, #20]
 800c442:	2b02      	cmp	r3, #2
 800c444:	d073      	beq.n	800c52e <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	68db      	ldr	r3, [r3, #12]
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d102      	bne.n	800c454 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800c44e:	2310      	movs	r3, #16
 800c450:	617b      	str	r3, [r7, #20]
 800c452:	e001      	b.n	800c458 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800c454:	2320      	movs	r3, #32
 800c456:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800c458:	687b      	ldr	r3, [r7, #4]
 800c45a:	689b      	ldr	r3, [r3, #8]
 800c45c:	2b20      	cmp	r3, #32
 800c45e:	d802      	bhi.n	800c466 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800c460:	697b      	ldr	r3, [r7, #20]
 800c462:	005b      	lsls	r3, r3, #1
 800c464:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800c466:	f002 fe7f 	bl	800f168 <HAL_RCC_GetSysClockFreq>
 800c46a:	0003      	movs	r3, r0
 800c46c:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	691a      	ldr	r2, [r3, #16]
 800c472:	2380      	movs	r3, #128	@ 0x80
 800c474:	009b      	lsls	r3, r3, #2
 800c476:	429a      	cmp	r2, r3
 800c478:	d131      	bne.n	800c4de <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	68db      	ldr	r3, [r3, #12]
 800c47e:	2b00      	cmp	r3, #0
 800c480:	d016      	beq.n	800c4b0 <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c482:	697b      	ldr	r3, [r7, #20]
 800c484:	009b      	lsls	r3, r3, #2
 800c486:	0019      	movs	r1, r3
 800c488:	68f8      	ldr	r0, [r7, #12]
 800c48a:	f7f3 fe81 	bl	8000190 <__udivsi3>
 800c48e:	0003      	movs	r3, r0
 800c490:	001a      	movs	r2, r3
 800c492:	0013      	movs	r3, r2
 800c494:	009b      	lsls	r3, r3, #2
 800c496:	189b      	adds	r3, r3, r2
 800c498:	005b      	lsls	r3, r3, #1
 800c49a:	001a      	movs	r2, r3
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	695b      	ldr	r3, [r3, #20]
 800c4a0:	0019      	movs	r1, r3
 800c4a2:	0010      	movs	r0, r2
 800c4a4:	f7f3 fe74 	bl	8000190 <__udivsi3>
 800c4a8:	0003      	movs	r3, r0
 800c4aa:	3305      	adds	r3, #5
 800c4ac:	613b      	str	r3, [r7, #16]
 800c4ae:	e02a      	b.n	800c506 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c4b0:	697b      	ldr	r3, [r7, #20]
 800c4b2:	00db      	lsls	r3, r3, #3
 800c4b4:	0019      	movs	r1, r3
 800c4b6:	68f8      	ldr	r0, [r7, #12]
 800c4b8:	f7f3 fe6a 	bl	8000190 <__udivsi3>
 800c4bc:	0003      	movs	r3, r0
 800c4be:	001a      	movs	r2, r3
 800c4c0:	0013      	movs	r3, r2
 800c4c2:	009b      	lsls	r3, r3, #2
 800c4c4:	189b      	adds	r3, r3, r2
 800c4c6:	005b      	lsls	r3, r3, #1
 800c4c8:	001a      	movs	r2, r3
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	695b      	ldr	r3, [r3, #20]
 800c4ce:	0019      	movs	r1, r3
 800c4d0:	0010      	movs	r0, r2
 800c4d2:	f7f3 fe5d 	bl	8000190 <__udivsi3>
 800c4d6:	0003      	movs	r3, r0
 800c4d8:	3305      	adds	r3, #5
 800c4da:	613b      	str	r3, [r7, #16]
 800c4dc:	e013      	b.n	800c506 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800c4de:	6979      	ldr	r1, [r7, #20]
 800c4e0:	68f8      	ldr	r0, [r7, #12]
 800c4e2:	f7f3 fe55 	bl	8000190 <__udivsi3>
 800c4e6:	0003      	movs	r3, r0
 800c4e8:	001a      	movs	r2, r3
 800c4ea:	0013      	movs	r3, r2
 800c4ec:	009b      	lsls	r3, r3, #2
 800c4ee:	189b      	adds	r3, r3, r2
 800c4f0:	005b      	lsls	r3, r3, #1
 800c4f2:	001a      	movs	r2, r3
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	695b      	ldr	r3, [r3, #20]
 800c4f8:	0019      	movs	r1, r3
 800c4fa:	0010      	movs	r0, r2
 800c4fc:	f7f3 fe48 	bl	8000190 <__udivsi3>
 800c500:	0003      	movs	r3, r0
 800c502:	3305      	adds	r3, #5
 800c504:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800c506:	693b      	ldr	r3, [r7, #16]
 800c508:	210a      	movs	r1, #10
 800c50a:	0018      	movs	r0, r3
 800c50c:	f7f3 fe40 	bl	8000190 <__udivsi3>
 800c510:	0003      	movs	r3, r0
 800c512:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800c514:	693b      	ldr	r3, [r7, #16]
 800c516:	2201      	movs	r2, #1
 800c518:	4013      	ands	r3, r2
 800c51a:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	69bb      	ldr	r3, [r7, #24]
 800c520:	1ad3      	subs	r3, r2, r3
 800c522:	085b      	lsrs	r3, r3, #1
 800c524:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800c526:	69bb      	ldr	r3, [r7, #24]
 800c528:	021b      	lsls	r3, r3, #8
 800c52a:	61bb      	str	r3, [r7, #24]
 800c52c:	e003      	b.n	800c536 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800c52e:	2302      	movs	r3, #2
 800c530:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800c532:	2300      	movs	r3, #0
 800c534:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800c536:	69fb      	ldr	r3, [r7, #28]
 800c538:	2b01      	cmp	r3, #1
 800c53a:	d902      	bls.n	800c542 <HAL_I2S_Init+0x152>
 800c53c:	69fb      	ldr	r3, [r7, #28]
 800c53e:	2bff      	cmp	r3, #255	@ 0xff
 800c540:	d907      	bls.n	800c552 <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800c542:	687b      	ldr	r3, [r7, #4]
 800c544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c546:	2210      	movs	r2, #16
 800c548:	431a      	orrs	r2, r3
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800c54e:	2301      	movs	r3, #1
 800c550:	e039      	b.n	800c5c6 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800c552:	687b      	ldr	r3, [r7, #4]
 800c554:	691a      	ldr	r2, [r3, #16]
 800c556:	69bb      	ldr	r3, [r7, #24]
 800c558:	431a      	orrs	r2, r3
 800c55a:	0011      	movs	r1, r2
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681b      	ldr	r3, [r3, #0]
 800c560:	69fa      	ldr	r2, [r7, #28]
 800c562:	430a      	orrs	r2, r1
 800c564:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	69db      	ldr	r3, [r3, #28]
 800c56c:	4a18      	ldr	r2, [pc, #96]	@ (800c5d0 <HAL_I2S_Init+0x1e0>)
 800c56e:	401a      	ands	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6859      	ldr	r1, [r3, #4]
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	689b      	ldr	r3, [r3, #8]
 800c578:	4319      	orrs	r1, r3
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	68db      	ldr	r3, [r3, #12]
 800c57e:	4319      	orrs	r1, r3
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	699b      	ldr	r3, [r3, #24]
 800c584:	430b      	orrs	r3, r1
 800c586:	431a      	orrs	r2, r3
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	2180      	movs	r1, #128	@ 0x80
 800c58e:	0109      	lsls	r1, r1, #4
 800c590:	430a      	orrs	r2, r1
 800c592:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	689b      	ldr	r3, [r3, #8]
 800c598:	2b30      	cmp	r3, #48	@ 0x30
 800c59a:	d003      	beq.n	800c5a4 <HAL_I2S_Init+0x1b4>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	689b      	ldr	r3, [r3, #8]
 800c5a0:	2bb0      	cmp	r3, #176	@ 0xb0
 800c5a2:	d108      	bne.n	800c5b6 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	681b      	ldr	r3, [r3, #0]
 800c5a8:	69da      	ldr	r2, [r3, #28]
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	2180      	movs	r1, #128	@ 0x80
 800c5b0:	0149      	lsls	r1, r1, #5
 800c5b2:	430a      	orrs	r2, r1
 800c5b4:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c5b6:	687b      	ldr	r3, [r7, #4]
 800c5b8:	2200      	movs	r2, #0
 800c5ba:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	2235      	movs	r2, #53	@ 0x35
 800c5c0:	2101      	movs	r1, #1
 800c5c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c5c4:	2300      	movs	r3, #0
}
 800c5c6:	0018      	movs	r0, r3
 800c5c8:	46bd      	mov	sp, r7
 800c5ca:	b008      	add	sp, #32
 800c5cc:	bd80      	pop	{r7, pc}
 800c5ce:	46c0      	nop			@ (mov r8, r8)
 800c5d0:	fffff040 	.word	0xfffff040

0800c5d4 <HAL_I2S_DeInit>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DeInit(I2S_HandleTypeDef *hi2s)
{
 800c5d4:	b580      	push	{r7, lr}
 800c5d6:	b082      	sub	sp, #8
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d101      	bne.n	800c5e6 <HAL_I2S_DeInit+0x12>
  {
    return HAL_ERROR;
 800c5e2:	2301      	movs	r3, #1
 800c5e4:	e01b      	b.n	800c61e <HAL_I2S_DeInit+0x4a>
  }

  /* Check the parameters */
  assert_param(IS_I2S_ALL_INSTANCE(hi2s->Instance));

  hi2s->State = HAL_I2S_STATE_BUSY;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	2235      	movs	r2, #53	@ 0x35
 800c5ea:	2102      	movs	r1, #2
 800c5ec:	5499      	strb	r1, [r3, r2]

  /* Disable the I2S Peripheral Clock */
  __HAL_I2S_DISABLE(hi2s);
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	681b      	ldr	r3, [r3, #0]
 800c5f2:	69da      	ldr	r2, [r3, #28]
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	490b      	ldr	r1, [pc, #44]	@ (800c628 <HAL_I2S_DeInit+0x54>)
 800c5fa:	400a      	ands	r2, r1
 800c5fc:	61da      	str	r2, [r3, #28]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hi2s->MspDeInitCallback(hi2s);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_I2S_MspDeInit(hi2s);
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	0018      	movs	r0, r3
 800c602:	f7f9 f939 	bl	8005878 <HAL_I2S_MspDeInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2200      	movs	r2, #0
 800c60a:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_RESET;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2235      	movs	r2, #53	@ 0x35
 800c610:	2100      	movs	r1, #0
 800c612:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hi2s);
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	2234      	movs	r2, #52	@ 0x34
 800c618:	2100      	movs	r1, #0
 800c61a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c61c:	2300      	movs	r3, #0
}
 800c61e:	0018      	movs	r0, r3
 800c620:	46bd      	mov	sp, r7
 800c622:	b002      	add	sp, #8
 800c624:	bd80      	pop	{r7, pc}
 800c626:	46c0      	nop			@ (mov r8, r8)
 800c628:	fffffbff 	.word	0xfffffbff

0800c62c <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800c62c:	b580      	push	{r7, lr}
 800c62e:	b086      	sub	sp, #24
 800c630:	af00      	add	r7, sp, #0
 800c632:	60f8      	str	r0, [r7, #12]
 800c634:	60b9      	str	r1, [r7, #8]
 800c636:	1dbb      	adds	r3, r7, #6
 800c638:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800c63a:	68bb      	ldr	r3, [r7, #8]
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d003      	beq.n	800c648 <HAL_I2S_Receive_DMA+0x1c>
 800c640:	1dbb      	adds	r3, r7, #6
 800c642:	881b      	ldrh	r3, [r3, #0]
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800c648:	2301      	movs	r3, #1
 800c64a:	e0a6      	b.n	800c79a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	2234      	movs	r2, #52	@ 0x34
 800c650:	5c9b      	ldrb	r3, [r3, r2]
 800c652:	b2db      	uxtb	r3, r3
 800c654:	2b01      	cmp	r3, #1
 800c656:	d101      	bne.n	800c65c <HAL_I2S_Receive_DMA+0x30>
 800c658:	2302      	movs	r3, #2
 800c65a:	e09e      	b.n	800c79a <HAL_I2S_Receive_DMA+0x16e>
 800c65c:	68fb      	ldr	r3, [r7, #12]
 800c65e:	2234      	movs	r2, #52	@ 0x34
 800c660:	2101      	movs	r1, #1
 800c662:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	2235      	movs	r2, #53	@ 0x35
 800c668:	5c9b      	ldrb	r3, [r3, r2]
 800c66a:	b2db      	uxtb	r3, r3
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d005      	beq.n	800c67c <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800c670:	68fb      	ldr	r3, [r7, #12]
 800c672:	2234      	movs	r2, #52	@ 0x34
 800c674:	2100      	movs	r1, #0
 800c676:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800c678:	2302      	movs	r3, #2
 800c67a:	e08e      	b.n	800c79a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2235      	movs	r2, #53	@ 0x35
 800c680:	2104      	movs	r1, #4
 800c682:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	68ba      	ldr	r2, [r7, #8]
 800c68e:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	69db      	ldr	r3, [r3, #28]
 800c696:	2207      	movs	r2, #7
 800c698:	4013      	ands	r3, r2
 800c69a:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800c69c:	697b      	ldr	r3, [r7, #20]
 800c69e:	2b03      	cmp	r3, #3
 800c6a0:	d002      	beq.n	800c6a8 <HAL_I2S_Receive_DMA+0x7c>
 800c6a2:	697b      	ldr	r3, [r7, #20]
 800c6a4:	2b05      	cmp	r3, #5
 800c6a6:	d10c      	bne.n	800c6c2 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800c6a8:	1dbb      	adds	r3, r7, #6
 800c6aa:	881b      	ldrh	r3, [r3, #0]
 800c6ac:	18db      	adds	r3, r3, r3
 800c6ae:	b29a      	uxth	r2, r3
 800c6b0:	68fb      	ldr	r3, [r7, #12]
 800c6b2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800c6b4:	1dbb      	adds	r3, r7, #6
 800c6b6:	881b      	ldrh	r3, [r3, #0]
 800c6b8:	18db      	adds	r3, r3, r3
 800c6ba:	b29a      	uxth	r2, r3
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800c6c0:	e007      	b.n	800c6d2 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800c6c2:	68fb      	ldr	r3, [r7, #12]
 800c6c4:	1dba      	adds	r2, r7, #6
 800c6c6:	8812      	ldrh	r2, [r2, #0]
 800c6c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	1dba      	adds	r2, r7, #6
 800c6ce:	8812      	ldrh	r2, [r2, #0]
 800c6d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800c6d2:	68fb      	ldr	r3, [r7, #12]
 800c6d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6d6:	4a33      	ldr	r2, [pc, #204]	@ (800c7a4 <HAL_I2S_Receive_DMA+0x178>)
 800c6d8:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6de:	4a32      	ldr	r2, [pc, #200]	@ (800c7a8 <HAL_I2S_Receive_DMA+0x17c>)
 800c6e0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c6e6:	4a31      	ldr	r2, [pc, #196]	@ (800c7ac <HAL_I2S_Receive_DMA+0x180>)
 800c6e8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	69da      	ldr	r2, [r3, #28]
 800c6f0:	23c0      	movs	r3, #192	@ 0xc0
 800c6f2:	009b      	lsls	r3, r3, #2
 800c6f4:	401a      	ands	r2, r3
 800c6f6:	23c0      	movs	r3, #192	@ 0xc0
 800c6f8:	009b      	lsls	r3, r3, #2
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d10a      	bne.n	800c714 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c6fe:	2300      	movs	r3, #0
 800c700:	613b      	str	r3, [r7, #16]
 800c702:	68fb      	ldr	r3, [r7, #12]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	68db      	ldr	r3, [r3, #12]
 800c708:	613b      	str	r3, [r7, #16]
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	681b      	ldr	r3, [r3, #0]
 800c70e:	689b      	ldr	r3, [r3, #8]
 800c710:	613b      	str	r3, [r7, #16]
 800c712:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	330c      	adds	r3, #12
 800c71e:	0019      	movs	r1, r3
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c724:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800c726:	68fb      	ldr	r3, [r7, #12]
 800c728:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800c72a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800c72c:	f7fd f9fc 	bl	8009b28 <HAL_DMA_Start_IT>
 800c730:	1e03      	subs	r3, r0, #0
 800c732:	d00f      	beq.n	800c754 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c738:	2208      	movs	r2, #8
 800c73a:	431a      	orrs	r2, r3
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2235      	movs	r2, #53	@ 0x35
 800c744:	2101      	movs	r1, #1
 800c746:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	2234      	movs	r2, #52	@ 0x34
 800c74c:	2100      	movs	r1, #0
 800c74e:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c750:	2301      	movs	r3, #1
 800c752:	e022      	b.n	800c79a <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800c754:	68fb      	ldr	r3, [r7, #12]
 800c756:	681b      	ldr	r3, [r3, #0]
 800c758:	69da      	ldr	r2, [r3, #28]
 800c75a:	2380      	movs	r3, #128	@ 0x80
 800c75c:	00db      	lsls	r3, r3, #3
 800c75e:	4013      	ands	r3, r2
 800c760:	d108      	bne.n	800c774 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800c762:	68fb      	ldr	r3, [r7, #12]
 800c764:	681b      	ldr	r3, [r3, #0]
 800c766:	69da      	ldr	r2, [r3, #28]
 800c768:	68fb      	ldr	r3, [r7, #12]
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	2180      	movs	r1, #128	@ 0x80
 800c76e:	00c9      	lsls	r1, r1, #3
 800c770:	430a      	orrs	r2, r1
 800c772:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800c774:	68fb      	ldr	r3, [r7, #12]
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	685b      	ldr	r3, [r3, #4]
 800c77a:	2201      	movs	r2, #1
 800c77c:	4013      	ands	r3, r2
 800c77e:	d107      	bne.n	800c790 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	685a      	ldr	r2, [r3, #4]
 800c786:	68fb      	ldr	r3, [r7, #12]
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	2101      	movs	r1, #1
 800c78c:	430a      	orrs	r2, r1
 800c78e:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	2234      	movs	r2, #52	@ 0x34
 800c794:	2100      	movs	r1, #0
 800c796:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800c798:	2300      	movs	r3, #0
}
 800c79a:	0018      	movs	r0, r3
 800c79c:	46bd      	mov	sp, r7
 800c79e:	b006      	add	sp, #24
 800c7a0:	bd80      	pop	{r7, pc}
 800c7a2:	46c0      	nop			@ (mov r8, r8)
 800c7a4:	0800c9ad 	.word	0x0800c9ad
 800c7a8:	0800c969 	.word	0x0800c969
 800c7ac:	0800c9cb 	.word	0x0800c9cb

0800c7b0 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800c7b0:	b580      	push	{r7, lr}
 800c7b2:	b086      	sub	sp, #24
 800c7b4:	af00      	add	r7, sp, #0
 800c7b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800c7b8:	2317      	movs	r3, #23
 800c7ba:	18fb      	adds	r3, r7, r3
 800c7bc:	2200      	movs	r2, #0
 800c7be:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800c7c0:	687b      	ldr	r3, [r7, #4]
 800c7c2:	685a      	ldr	r2, [r3, #4]
 800c7c4:	2380      	movs	r3, #128	@ 0x80
 800c7c6:	009b      	lsls	r3, r3, #2
 800c7c8:	429a      	cmp	r2, r3
 800c7ca:	d003      	beq.n	800c7d4 <HAL_I2S_DMAStop+0x24>
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	685b      	ldr	r3, [r3, #4]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d158      	bne.n	800c886 <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d010      	beq.n	800c7fe <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c7e0:	0018      	movs	r0, r3
 800c7e2:	f7fd fa07 	bl	8009bf4 <HAL_DMA_Abort>
 800c7e6:	1e03      	subs	r3, r0, #0
 800c7e8:	d009      	beq.n	800c7fe <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c7ea:	687b      	ldr	r3, [r7, #4]
 800c7ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c7ee:	2208      	movs	r2, #8
 800c7f0:	431a      	orrs	r2, r3
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c7f6:	2317      	movs	r3, #23
 800c7f8:	18fb      	adds	r3, r7, r3
 800c7fa:	2201      	movs	r2, #1
 800c7fc:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c7fe:	6878      	ldr	r0, [r7, #4]
 800c800:	2364      	movs	r3, #100	@ 0x64
 800c802:	2201      	movs	r2, #1
 800c804:	2102      	movs	r1, #2
 800c806:	f000 f907 	bl	800ca18 <I2S_WaitFlagStateUntilTimeout>
 800c80a:	1e03      	subs	r3, r0, #0
 800c80c:	d00d      	beq.n	800c82a <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c812:	2201      	movs	r2, #1
 800c814:	431a      	orrs	r2, r3
 800c816:	687b      	ldr	r3, [r7, #4]
 800c818:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	2235      	movs	r2, #53	@ 0x35
 800c81e:	2101      	movs	r1, #1
 800c820:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c822:	2317      	movs	r3, #23
 800c824:	18fb      	adds	r3, r7, r3
 800c826:	2201      	movs	r2, #1
 800c828:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800c82a:	6878      	ldr	r0, [r7, #4]
 800c82c:	2364      	movs	r3, #100	@ 0x64
 800c82e:	2200      	movs	r2, #0
 800c830:	2180      	movs	r1, #128	@ 0x80
 800c832:	f000 f8f1 	bl	800ca18 <I2S_WaitFlagStateUntilTimeout>
 800c836:	1e03      	subs	r3, r0, #0
 800c838:	d00d      	beq.n	800c856 <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c83e:	2201      	movs	r2, #1
 800c840:	431a      	orrs	r2, r3
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	2235      	movs	r2, #53	@ 0x35
 800c84a:	2101      	movs	r1, #1
 800c84c:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800c84e:	2317      	movs	r3, #23
 800c850:	18fb      	adds	r3, r7, r3
 800c852:	2201      	movs	r2, #1
 800c854:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	681b      	ldr	r3, [r3, #0]
 800c85a:	69da      	ldr	r2, [r3, #28]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	681b      	ldr	r3, [r3, #0]
 800c860:	4938      	ldr	r1, [pc, #224]	@ (800c944 <HAL_I2S_DMAStop+0x194>)
 800c862:	400a      	ands	r2, r1
 800c864:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800c866:	2300      	movs	r3, #0
 800c868:	613b      	str	r3, [r7, #16]
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	681b      	ldr	r3, [r3, #0]
 800c86e:	689b      	ldr	r3, [r3, #8]
 800c870:	613b      	str	r3, [r7, #16]
 800c872:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	681b      	ldr	r3, [r3, #0]
 800c878:	685a      	ldr	r2, [r3, #4]
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	2102      	movs	r1, #2
 800c880:	438a      	bics	r2, r1
 800c882:	605a      	str	r2, [r3, #4]
 800c884:	e053      	b.n	800c92e <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	685a      	ldr	r2, [r3, #4]
 800c88a:	23c0      	movs	r3, #192	@ 0xc0
 800c88c:	009b      	lsls	r3, r3, #2
 800c88e:	429a      	cmp	r2, r3
 800c890:	d005      	beq.n	800c89e <HAL_I2S_DMAStop+0xee>
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	685a      	ldr	r2, [r3, #4]
 800c896:	2380      	movs	r3, #128	@ 0x80
 800c898:	005b      	lsls	r3, r3, #1
 800c89a:	429a      	cmp	r2, r3
 800c89c:	d147      	bne.n	800c92e <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d010      	beq.n	800c8c8 <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800c8a6:	687b      	ldr	r3, [r7, #4]
 800c8a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	f7fd f9a2 	bl	8009bf4 <HAL_DMA_Abort>
 800c8b0:	1e03      	subs	r3, r0, #0
 800c8b2:	d009      	beq.n	800c8c8 <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c8b8:	2208      	movs	r2, #8
 800c8ba:	431a      	orrs	r2, r3
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800c8c0:	2317      	movs	r3, #23
 800c8c2:	18fb      	adds	r3, r7, r3
 800c8c4:	2201      	movs	r2, #1
 800c8c6:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800c8c8:	687b      	ldr	r3, [r7, #4]
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	69da      	ldr	r2, [r3, #28]
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	681b      	ldr	r3, [r3, #0]
 800c8d2:	491c      	ldr	r1, [pc, #112]	@ (800c944 <HAL_I2S_DMAStop+0x194>)
 800c8d4:	400a      	ands	r2, r1
 800c8d6:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800c8d8:	2300      	movs	r3, #0
 800c8da:	60fb      	str	r3, [r7, #12]
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	681b      	ldr	r3, [r3, #0]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	60fb      	str	r3, [r7, #12]
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	681b      	ldr	r3, [r3, #0]
 800c8e8:	689b      	ldr	r3, [r3, #8]
 800c8ea:	60fb      	str	r3, [r7, #12]
 800c8ec:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c8ee:	687b      	ldr	r3, [r7, #4]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	685a      	ldr	r2, [r3, #4]
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	2101      	movs	r1, #1
 800c8fa:	438a      	bics	r2, r1
 800c8fc:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	2380      	movs	r3, #128	@ 0x80
 800c904:	005b      	lsls	r3, r3, #1
 800c906:	429a      	cmp	r2, r3
 800c908:	d10e      	bne.n	800c928 <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c90e:	2240      	movs	r2, #64	@ 0x40
 800c910:	431a      	orrs	r2, r3
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	2235      	movs	r2, #53	@ 0x35
 800c91a:	2101      	movs	r1, #1
 800c91c:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800c91e:	2317      	movs	r3, #23
 800c920:	18fb      	adds	r3, r7, r3
 800c922:	2201      	movs	r2, #1
 800c924:	701a      	strb	r2, [r3, #0]
 800c926:	e002      	b.n	800c92e <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	2235      	movs	r2, #53	@ 0x35
 800c932:	2101      	movs	r1, #1
 800c934:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800c936:	2317      	movs	r3, #23
 800c938:	18fb      	adds	r3, r7, r3
 800c93a:	781b      	ldrb	r3, [r3, #0]
}
 800c93c:	0018      	movs	r0, r3
 800c93e:	46bd      	mov	sp, r7
 800c940:	b006      	add	sp, #24
 800c942:	bd80      	pop	{r7, pc}
 800c944:	fffffbff 	.word	0xfffffbff

0800c948 <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800c948:	b580      	push	{r7, lr}
 800c94a:	b082      	sub	sp, #8
 800c94c:	af00      	add	r7, sp, #0
 800c94e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c950:	46c0      	nop			@ (mov r8, r8)
 800c952:	46bd      	mov	sp, r7
 800c954:	b002      	add	sp, #8
 800c956:	bd80      	pop	{r7, pc}

0800c958 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b082      	sub	sp, #8
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800c960:	46c0      	nop			@ (mov r8, r8)
 800c962:	46bd      	mov	sp, r7
 800c964:	b002      	add	sp, #8
 800c966:	bd80      	pop	{r7, pc}

0800c968 <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c974:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	69db      	ldr	r3, [r3, #28]
 800c97a:	2b00      	cmp	r3, #0
 800c97c:	d10e      	bne.n	800c99c <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	685a      	ldr	r2, [r3, #4]
 800c984:	68fb      	ldr	r3, [r7, #12]
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	2101      	movs	r1, #1
 800c98a:	438a      	bics	r2, r1
 800c98c:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	2200      	movs	r2, #0
 800c992:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800c994:	68fb      	ldr	r3, [r7, #12]
 800c996:	2235      	movs	r2, #53	@ 0x35
 800c998:	2101      	movs	r1, #1
 800c99a:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	0018      	movs	r0, r3
 800c9a0:	f7f9 ff24 	bl	80067ec <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c9a4:	46c0      	nop			@ (mov r8, r8)
 800c9a6:	46bd      	mov	sp, r7
 800c9a8:	b004      	add	sp, #16
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b084      	sub	sp, #16
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9b8:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	0018      	movs	r0, r3
 800c9be:	f7ff ffc3 	bl	800c948 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800c9c2:	46c0      	nop			@ (mov r8, r8)
 800c9c4:	46bd      	mov	sp, r7
 800c9c6:	b004      	add	sp, #16
 800c9c8:	bd80      	pop	{r7, pc}

0800c9ca <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800c9ca:	b580      	push	{r7, lr}
 800c9cc:	b084      	sub	sp, #16
 800c9ce:	af00      	add	r7, sp, #0
 800c9d0:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c9d6:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	685a      	ldr	r2, [r3, #4]
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	2103      	movs	r1, #3
 800c9e4:	438a      	bics	r2, r1
 800c9e6:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	2200      	movs	r2, #0
 800c9f2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	2235      	movs	r2, #53	@ 0x35
 800c9f8:	2101      	movs	r1, #1
 800c9fa:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca00:	2208      	movs	r2, #8
 800ca02:	431a      	orrs	r2, r3
 800ca04:	68fb      	ldr	r3, [r7, #12]
 800ca06:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	0018      	movs	r0, r3
 800ca0c:	f7ff ffa4 	bl	800c958 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800ca10:	46c0      	nop			@ (mov r8, r8)
 800ca12:	46bd      	mov	sp, r7
 800ca14:	b004      	add	sp, #16
 800ca16:	bd80      	pop	{r7, pc}

0800ca18 <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800ca18:	b580      	push	{r7, lr}
 800ca1a:	b086      	sub	sp, #24
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	60f8      	str	r0, [r7, #12]
 800ca20:	60b9      	str	r1, [r7, #8]
 800ca22:	603b      	str	r3, [r7, #0]
 800ca24:	1dfb      	adds	r3, r7, #7
 800ca26:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800ca28:	f7fc fb1e 	bl	8009068 <HAL_GetTick>
 800ca2c:	0003      	movs	r3, r0
 800ca2e:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ca30:	e017      	b.n	800ca62 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800ca32:	683b      	ldr	r3, [r7, #0]
 800ca34:	3301      	adds	r3, #1
 800ca36:	d014      	beq.n	800ca62 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800ca38:	f7fc fb16 	bl	8009068 <HAL_GetTick>
 800ca3c:	0002      	movs	r2, r0
 800ca3e:	697b      	ldr	r3, [r7, #20]
 800ca40:	1ad3      	subs	r3, r2, r3
 800ca42:	683a      	ldr	r2, [r7, #0]
 800ca44:	429a      	cmp	r2, r3
 800ca46:	d902      	bls.n	800ca4e <I2S_WaitFlagStateUntilTimeout+0x36>
 800ca48:	683b      	ldr	r3, [r7, #0]
 800ca4a:	2b00      	cmp	r3, #0
 800ca4c:	d109      	bne.n	800ca62 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	2235      	movs	r2, #53	@ 0x35
 800ca52:	2101      	movs	r1, #1
 800ca54:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800ca56:	68fb      	ldr	r3, [r7, #12]
 800ca58:	2234      	movs	r2, #52	@ 0x34
 800ca5a:	2100      	movs	r1, #0
 800ca5c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800ca5e:	2303      	movs	r3, #3
 800ca60:	e00f      	b.n	800ca82 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	689b      	ldr	r3, [r3, #8]
 800ca68:	68ba      	ldr	r2, [r7, #8]
 800ca6a:	4013      	ands	r3, r2
 800ca6c:	68ba      	ldr	r2, [r7, #8]
 800ca6e:	1ad3      	subs	r3, r2, r3
 800ca70:	425a      	negs	r2, r3
 800ca72:	4153      	adcs	r3, r2
 800ca74:	b2db      	uxtb	r3, r3
 800ca76:	001a      	movs	r2, r3
 800ca78:	1dfb      	adds	r3, r7, #7
 800ca7a:	781b      	ldrb	r3, [r3, #0]
 800ca7c:	429a      	cmp	r2, r3
 800ca7e:	d1d8      	bne.n	800ca32 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800ca80:	2300      	movs	r3, #0
}
 800ca82:	0018      	movs	r0, r3
 800ca84:	46bd      	mov	sp, r7
 800ca86:	b006      	add	sp, #24
 800ca88:	bd80      	pop	{r7, pc}
	...

0800ca8c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ca8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca8e:	b08b      	sub	sp, #44	@ 0x2c
 800ca90:	af06      	add	r7, sp, #24
 800ca92:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d101      	bne.n	800ca9e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e0f0      	b.n	800cc80 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ca9e:	687b      	ldr	r3, [r7, #4]
 800caa0:	4a79      	ldr	r2, [pc, #484]	@ (800cc88 <HAL_PCD_Init+0x1fc>)
 800caa2:	5c9b      	ldrb	r3, [r3, r2]
 800caa4:	b2db      	uxtb	r3, r3
 800caa6:	2b00      	cmp	r3, #0
 800caa8:	d108      	bne.n	800cabc <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	23aa      	movs	r3, #170	@ 0xaa
 800caae:	009b      	lsls	r3, r3, #2
 800cab0:	2100      	movs	r1, #0
 800cab2:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	0018      	movs	r0, r3
 800cab8:	f008 fd50 	bl	801555c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	4a72      	ldr	r2, [pc, #456]	@ (800cc88 <HAL_PCD_Init+0x1fc>)
 800cac0:	2103      	movs	r1, #3
 800cac2:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800cac4:	687b      	ldr	r3, [r7, #4]
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	0018      	movs	r0, r3
 800caca:	f004 fdd1 	bl	8011670 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cace:	230f      	movs	r3, #15
 800cad0:	18fb      	adds	r3, r7, r3
 800cad2:	2200      	movs	r2, #0
 800cad4:	701a      	strb	r2, [r3, #0]
 800cad6:	e049      	b.n	800cb6c <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800cad8:	200f      	movs	r0, #15
 800cada:	183b      	adds	r3, r7, r0
 800cadc:	781b      	ldrb	r3, [r3, #0]
 800cade:	6879      	ldr	r1, [r7, #4]
 800cae0:	1c5a      	adds	r2, r3, #1
 800cae2:	0013      	movs	r3, r2
 800cae4:	009b      	lsls	r3, r3, #2
 800cae6:	189b      	adds	r3, r3, r2
 800cae8:	00db      	lsls	r3, r3, #3
 800caea:	18cb      	adds	r3, r1, r3
 800caec:	3301      	adds	r3, #1
 800caee:	2201      	movs	r2, #1
 800caf0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800caf2:	183b      	adds	r3, r7, r0
 800caf4:	781b      	ldrb	r3, [r3, #0]
 800caf6:	6879      	ldr	r1, [r7, #4]
 800caf8:	1c5a      	adds	r2, r3, #1
 800cafa:	0013      	movs	r3, r2
 800cafc:	009b      	lsls	r3, r3, #2
 800cafe:	189b      	adds	r3, r3, r2
 800cb00:	00db      	lsls	r3, r3, #3
 800cb02:	183a      	adds	r2, r7, r0
 800cb04:	7812      	ldrb	r2, [r2, #0]
 800cb06:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800cb08:	183b      	adds	r3, r7, r0
 800cb0a:	781b      	ldrb	r3, [r3, #0]
 800cb0c:	6879      	ldr	r1, [r7, #4]
 800cb0e:	1c5a      	adds	r2, r3, #1
 800cb10:	0013      	movs	r3, r2
 800cb12:	009b      	lsls	r3, r3, #2
 800cb14:	189b      	adds	r3, r3, r2
 800cb16:	00db      	lsls	r3, r3, #3
 800cb18:	18cb      	adds	r3, r1, r3
 800cb1a:	3303      	adds	r3, #3
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800cb20:	183b      	adds	r3, r7, r0
 800cb22:	781a      	ldrb	r2, [r3, #0]
 800cb24:	6879      	ldr	r1, [r7, #4]
 800cb26:	0013      	movs	r3, r2
 800cb28:	009b      	lsls	r3, r3, #2
 800cb2a:	189b      	adds	r3, r3, r2
 800cb2c:	00db      	lsls	r3, r3, #3
 800cb2e:	18cb      	adds	r3, r1, r3
 800cb30:	3338      	adds	r3, #56	@ 0x38
 800cb32:	2200      	movs	r2, #0
 800cb34:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800cb36:	183b      	adds	r3, r7, r0
 800cb38:	781a      	ldrb	r2, [r3, #0]
 800cb3a:	6879      	ldr	r1, [r7, #4]
 800cb3c:	0013      	movs	r3, r2
 800cb3e:	009b      	lsls	r3, r3, #2
 800cb40:	189b      	adds	r3, r3, r2
 800cb42:	00db      	lsls	r3, r3, #3
 800cb44:	18cb      	adds	r3, r1, r3
 800cb46:	333c      	adds	r3, #60	@ 0x3c
 800cb48:	2200      	movs	r2, #0
 800cb4a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800cb4c:	183b      	adds	r3, r7, r0
 800cb4e:	781a      	ldrb	r2, [r3, #0]
 800cb50:	6879      	ldr	r1, [r7, #4]
 800cb52:	0013      	movs	r3, r2
 800cb54:	009b      	lsls	r3, r3, #2
 800cb56:	189b      	adds	r3, r3, r2
 800cb58:	00db      	lsls	r3, r3, #3
 800cb5a:	18cb      	adds	r3, r1, r3
 800cb5c:	3340      	adds	r3, #64	@ 0x40
 800cb5e:	2200      	movs	r2, #0
 800cb60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb62:	183b      	adds	r3, r7, r0
 800cb64:	781a      	ldrb	r2, [r3, #0]
 800cb66:	183b      	adds	r3, r7, r0
 800cb68:	3201      	adds	r2, #1
 800cb6a:	701a      	strb	r2, [r3, #0]
 800cb6c:	210f      	movs	r1, #15
 800cb6e:	187b      	adds	r3, r7, r1
 800cb70:	781a      	ldrb	r2, [r3, #0]
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	685b      	ldr	r3, [r3, #4]
 800cb76:	429a      	cmp	r2, r3
 800cb78:	d3ae      	bcc.n	800cad8 <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cb7a:	187b      	adds	r3, r7, r1
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	701a      	strb	r2, [r3, #0]
 800cb80:	e056      	b.n	800cc30 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800cb82:	240f      	movs	r4, #15
 800cb84:	193b      	adds	r3, r7, r4
 800cb86:	781a      	ldrb	r2, [r3, #0]
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	236a      	movs	r3, #106	@ 0x6a
 800cb8c:	33ff      	adds	r3, #255	@ 0xff
 800cb8e:	0019      	movs	r1, r3
 800cb90:	0013      	movs	r3, r2
 800cb92:	009b      	lsls	r3, r3, #2
 800cb94:	189b      	adds	r3, r3, r2
 800cb96:	00db      	lsls	r3, r3, #3
 800cb98:	18c3      	adds	r3, r0, r3
 800cb9a:	185b      	adds	r3, r3, r1
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800cba0:	193b      	adds	r3, r7, r4
 800cba2:	781a      	ldrb	r2, [r3, #0]
 800cba4:	6878      	ldr	r0, [r7, #4]
 800cba6:	23b4      	movs	r3, #180	@ 0xb4
 800cba8:	0059      	lsls	r1, r3, #1
 800cbaa:	0013      	movs	r3, r2
 800cbac:	009b      	lsls	r3, r3, #2
 800cbae:	189b      	adds	r3, r3, r2
 800cbb0:	00db      	lsls	r3, r3, #3
 800cbb2:	18c3      	adds	r3, r0, r3
 800cbb4:	185b      	adds	r3, r3, r1
 800cbb6:	193a      	adds	r2, r7, r4
 800cbb8:	7812      	ldrb	r2, [r2, #0]
 800cbba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800cbbc:	193b      	adds	r3, r7, r4
 800cbbe:	781a      	ldrb	r2, [r3, #0]
 800cbc0:	6878      	ldr	r0, [r7, #4]
 800cbc2:	236c      	movs	r3, #108	@ 0x6c
 800cbc4:	33ff      	adds	r3, #255	@ 0xff
 800cbc6:	0019      	movs	r1, r3
 800cbc8:	0013      	movs	r3, r2
 800cbca:	009b      	lsls	r3, r3, #2
 800cbcc:	189b      	adds	r3, r3, r2
 800cbce:	00db      	lsls	r3, r3, #3
 800cbd0:	18c3      	adds	r3, r0, r3
 800cbd2:	185b      	adds	r3, r3, r1
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800cbd8:	193b      	adds	r3, r7, r4
 800cbda:	781a      	ldrb	r2, [r3, #0]
 800cbdc:	6878      	ldr	r0, [r7, #4]
 800cbde:	23bc      	movs	r3, #188	@ 0xbc
 800cbe0:	0059      	lsls	r1, r3, #1
 800cbe2:	0013      	movs	r3, r2
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	189b      	adds	r3, r3, r2
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	18c3      	adds	r3, r0, r3
 800cbec:	185b      	adds	r3, r3, r1
 800cbee:	2200      	movs	r2, #0
 800cbf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800cbf2:	193b      	adds	r3, r7, r4
 800cbf4:	781a      	ldrb	r2, [r3, #0]
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	23be      	movs	r3, #190	@ 0xbe
 800cbfa:	0059      	lsls	r1, r3, #1
 800cbfc:	0013      	movs	r3, r2
 800cbfe:	009b      	lsls	r3, r3, #2
 800cc00:	189b      	adds	r3, r3, r2
 800cc02:	00db      	lsls	r3, r3, #3
 800cc04:	18c3      	adds	r3, r0, r3
 800cc06:	185b      	adds	r3, r3, r1
 800cc08:	2200      	movs	r2, #0
 800cc0a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800cc0c:	193b      	adds	r3, r7, r4
 800cc0e:	781a      	ldrb	r2, [r3, #0]
 800cc10:	6878      	ldr	r0, [r7, #4]
 800cc12:	23c0      	movs	r3, #192	@ 0xc0
 800cc14:	0059      	lsls	r1, r3, #1
 800cc16:	0013      	movs	r3, r2
 800cc18:	009b      	lsls	r3, r3, #2
 800cc1a:	189b      	adds	r3, r3, r2
 800cc1c:	00db      	lsls	r3, r3, #3
 800cc1e:	18c3      	adds	r3, r0, r3
 800cc20:	185b      	adds	r3, r3, r1
 800cc22:	2200      	movs	r2, #0
 800cc24:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800cc26:	193b      	adds	r3, r7, r4
 800cc28:	781a      	ldrb	r2, [r3, #0]
 800cc2a:	193b      	adds	r3, r7, r4
 800cc2c:	3201      	adds	r2, #1
 800cc2e:	701a      	strb	r2, [r3, #0]
 800cc30:	230f      	movs	r3, #15
 800cc32:	18fb      	adds	r3, r7, r3
 800cc34:	781a      	ldrb	r2, [r3, #0]
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	429a      	cmp	r2, r3
 800cc3c:	d3a1      	bcc.n	800cb82 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	6818      	ldr	r0, [r3, #0]
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	466a      	mov	r2, sp
 800cc46:	0011      	movs	r1, r2
 800cc48:	001a      	movs	r2, r3
 800cc4a:	3210      	adds	r2, #16
 800cc4c:	ca70      	ldmia	r2!, {r4, r5, r6}
 800cc4e:	c170      	stmia	r1!, {r4, r5, r6}
 800cc50:	ca30      	ldmia	r2!, {r4, r5}
 800cc52:	c130      	stmia	r1!, {r4, r5}
 800cc54:	6859      	ldr	r1, [r3, #4]
 800cc56:	689a      	ldr	r2, [r3, #8]
 800cc58:	68db      	ldr	r3, [r3, #12]
 800cc5a:	f004 fd23 	bl	80116a4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800cc5e:	687b      	ldr	r3, [r7, #4]
 800cc60:	2224      	movs	r2, #36	@ 0x24
 800cc62:	2100      	movs	r1, #0
 800cc64:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	4a07      	ldr	r2, [pc, #28]	@ (800cc88 <HAL_PCD_Init+0x1fc>)
 800cc6a:	2101      	movs	r1, #1
 800cc6c:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800cc6e:	687b      	ldr	r3, [r7, #4]
 800cc70:	69db      	ldr	r3, [r3, #28]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d103      	bne.n	800cc7e <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	0018      	movs	r0, r3
 800cc7a:	f001 fd23 	bl	800e6c4 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800cc7e:	2300      	movs	r3, #0
}
 800cc80:	0018      	movs	r0, r3
 800cc82:	46bd      	mov	sp, r7
 800cc84:	b005      	add	sp, #20
 800cc86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc88:	000002a9 	.word	0x000002a9

0800cc8c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800cc94:	687a      	ldr	r2, [r7, #4]
 800cc96:	23aa      	movs	r3, #170	@ 0xaa
 800cc98:	009b      	lsls	r3, r3, #2
 800cc9a:	5cd3      	ldrb	r3, [r2, r3]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d101      	bne.n	800cca4 <HAL_PCD_Start+0x18>
 800cca0:	2302      	movs	r3, #2
 800cca2:	e014      	b.n	800ccce <HAL_PCD_Start+0x42>
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	23aa      	movs	r3, #170	@ 0xaa
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	2101      	movs	r1, #1
 800ccac:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	0018      	movs	r0, r3
 800ccb4:	f004 fcc6 	bl	8011644 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	0018      	movs	r0, r3
 800ccbe:	f006 fcc9 	bl	8013654 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	23aa      	movs	r3, #170	@ 0xaa
 800ccc6:	009b      	lsls	r3, r3, #2
 800ccc8:	2100      	movs	r1, #0
 800ccca:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800cccc:	2300      	movs	r3, #0
}
 800ccce:	0018      	movs	r0, r3
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	b002      	add	sp, #8
 800ccd4:	bd80      	pop	{r7, pc}
	...

0800ccd8 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ccd8:	b580      	push	{r7, lr}
 800ccda:	b084      	sub	sp, #16
 800ccdc:	af00      	add	r7, sp, #0
 800ccde:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800cce0:	687b      	ldr	r3, [r7, #4]
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	0018      	movs	r0, r3
 800cce6:	f006 fccb 	bl	8013680 <USB_ReadInterrupts>
 800ccea:	0003      	movs	r3, r0
 800ccec:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800ccee:	68fa      	ldr	r2, [r7, #12]
 800ccf0:	2380      	movs	r3, #128	@ 0x80
 800ccf2:	021b      	lsls	r3, r3, #8
 800ccf4:	4013      	ands	r3, r2
 800ccf6:	d004      	beq.n	800cd02 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	0018      	movs	r0, r3
 800ccfc:	f000 fb62 	bl	800d3c4 <PCD_EP_ISR_Handler>

    return;
 800cd00:	e11d      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800cd02:	68fa      	ldr	r2, [r7, #12]
 800cd04:	2380      	movs	r3, #128	@ 0x80
 800cd06:	00db      	lsls	r3, r3, #3
 800cd08:	4013      	ands	r3, r2
 800cd0a:	d015      	beq.n	800cd38 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2244      	movs	r2, #68	@ 0x44
 800cd12:	5a9b      	ldrh	r3, [r3, r2]
 800cd14:	b29a      	uxth	r2, r3
 800cd16:	687b      	ldr	r3, [r7, #4]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	498a      	ldr	r1, [pc, #552]	@ (800cf44 <HAL_PCD_IRQHandler+0x26c>)
 800cd1c:	400a      	ands	r2, r1
 800cd1e:	b291      	uxth	r1, r2
 800cd20:	2244      	movs	r2, #68	@ 0x44
 800cd22:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	0018      	movs	r0, r3
 800cd28:	f008 fc9b 	bl	8015662 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	2100      	movs	r1, #0
 800cd30:	0018      	movs	r0, r3
 800cd32:	f000 f915 	bl	800cf60 <HAL_PCD_SetAddress>

    return;
 800cd36:	e102      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800cd38:	68fa      	ldr	r2, [r7, #12]
 800cd3a:	2380      	movs	r3, #128	@ 0x80
 800cd3c:	01db      	lsls	r3, r3, #7
 800cd3e:	4013      	ands	r3, r2
 800cd40:	d00c      	beq.n	800cd5c <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	2244      	movs	r2, #68	@ 0x44
 800cd48:	5a9b      	ldrh	r3, [r3, r2]
 800cd4a:	b29a      	uxth	r2, r3
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	497d      	ldr	r1, [pc, #500]	@ (800cf48 <HAL_PCD_IRQHandler+0x270>)
 800cd52:	400a      	ands	r2, r1
 800cd54:	b291      	uxth	r1, r2
 800cd56:	2244      	movs	r2, #68	@ 0x44
 800cd58:	5299      	strh	r1, [r3, r2]

    return;
 800cd5a:	e0f0      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800cd5c:	68fa      	ldr	r2, [r7, #12]
 800cd5e:	2380      	movs	r3, #128	@ 0x80
 800cd60:	019b      	lsls	r3, r3, #6
 800cd62:	4013      	ands	r3, r2
 800cd64:	d00c      	beq.n	800cd80 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	2244      	movs	r2, #68	@ 0x44
 800cd6c:	5a9b      	ldrh	r3, [r3, r2]
 800cd6e:	b29a      	uxth	r2, r3
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	4975      	ldr	r1, [pc, #468]	@ (800cf4c <HAL_PCD_IRQHandler+0x274>)
 800cd76:	400a      	ands	r2, r1
 800cd78:	b291      	uxth	r1, r2
 800cd7a:	2244      	movs	r2, #68	@ 0x44
 800cd7c:	5299      	strh	r1, [r3, r2]

    return;
 800cd7e:	e0de      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800cd80:	68fa      	ldr	r2, [r7, #12]
 800cd82:	2380      	movs	r3, #128	@ 0x80
 800cd84:	015b      	lsls	r3, r3, #5
 800cd86:	4013      	ands	r3, r2
 800cd88:	d038      	beq.n	800cdfc <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	2240      	movs	r2, #64	@ 0x40
 800cd90:	5a9b      	ldrh	r3, [r3, r2]
 800cd92:	b29a      	uxth	r2, r3
 800cd94:	687b      	ldr	r3, [r7, #4]
 800cd96:	681b      	ldr	r3, [r3, #0]
 800cd98:	2104      	movs	r1, #4
 800cd9a:	438a      	bics	r2, r1
 800cd9c:	b291      	uxth	r1, r2
 800cd9e:	2240      	movs	r2, #64	@ 0x40
 800cda0:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2240      	movs	r2, #64	@ 0x40
 800cda8:	5a9b      	ldrh	r3, [r3, r2]
 800cdaa:	b29a      	uxth	r2, r3
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2108      	movs	r1, #8
 800cdb2:	438a      	bics	r2, r1
 800cdb4:	b291      	uxth	r1, r2
 800cdb6:	2240      	movs	r2, #64	@ 0x40
 800cdb8:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	23b8      	movs	r3, #184	@ 0xb8
 800cdbe:	009b      	lsls	r3, r3, #2
 800cdc0:	5cd3      	ldrb	r3, [r2, r3]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d109      	bne.n	800cdda <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800cdc6:	687a      	ldr	r2, [r7, #4]
 800cdc8:	23b8      	movs	r3, #184	@ 0xb8
 800cdca:	009b      	lsls	r3, r3, #2
 800cdcc:	2100      	movs	r1, #0
 800cdce:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2100      	movs	r1, #0
 800cdd4:	0018      	movs	r0, r3
 800cdd6:	f001 fc9f 	bl	800e718 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	0018      	movs	r0, r3
 800cdde:	f008 fc81 	bl	80156e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800cde2:	687b      	ldr	r3, [r7, #4]
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	2244      	movs	r2, #68	@ 0x44
 800cde8:	5a9b      	ldrh	r3, [r3, r2]
 800cdea:	b29a      	uxth	r2, r3
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	4957      	ldr	r1, [pc, #348]	@ (800cf50 <HAL_PCD_IRQHandler+0x278>)
 800cdf2:	400a      	ands	r2, r1
 800cdf4:	b291      	uxth	r1, r2
 800cdf6:	2244      	movs	r2, #68	@ 0x44
 800cdf8:	5299      	strh	r1, [r3, r2]

    return;
 800cdfa:	e0a0      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800cdfc:	68fa      	ldr	r2, [r7, #12]
 800cdfe:	2380      	movs	r3, #128	@ 0x80
 800ce00:	011b      	lsls	r3, r3, #4
 800ce02:	4013      	ands	r3, r2
 800ce04:	d028      	beq.n	800ce58 <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	2240      	movs	r2, #64	@ 0x40
 800ce0c:	5a9b      	ldrh	r3, [r3, r2]
 800ce0e:	b29a      	uxth	r2, r3
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	2108      	movs	r1, #8
 800ce16:	430a      	orrs	r2, r1
 800ce18:	b291      	uxth	r1, r2
 800ce1a:	2240      	movs	r2, #64	@ 0x40
 800ce1c:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	681b      	ldr	r3, [r3, #0]
 800ce22:	2244      	movs	r2, #68	@ 0x44
 800ce24:	5a9b      	ldrh	r3, [r3, r2]
 800ce26:	b29a      	uxth	r2, r3
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	681b      	ldr	r3, [r3, #0]
 800ce2c:	4949      	ldr	r1, [pc, #292]	@ (800cf54 <HAL_PCD_IRQHandler+0x27c>)
 800ce2e:	400a      	ands	r2, r1
 800ce30:	b291      	uxth	r1, r2
 800ce32:	2244      	movs	r2, #68	@ 0x44
 800ce34:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800ce36:	687b      	ldr	r3, [r7, #4]
 800ce38:	681b      	ldr	r3, [r3, #0]
 800ce3a:	2240      	movs	r2, #64	@ 0x40
 800ce3c:	5a9b      	ldrh	r3, [r3, r2]
 800ce3e:	b29a      	uxth	r2, r3
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	681b      	ldr	r3, [r3, #0]
 800ce44:	2104      	movs	r1, #4
 800ce46:	430a      	orrs	r2, r1
 800ce48:	b291      	uxth	r1, r2
 800ce4a:	2240      	movs	r2, #64	@ 0x40
 800ce4c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800ce4e:	687b      	ldr	r3, [r7, #4]
 800ce50:	0018      	movs	r0, r3
 800ce52:	f008 fc2b 	bl	80156ac <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800ce56:	e072      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800ce58:	68fb      	ldr	r3, [r7, #12]
 800ce5a:	2280      	movs	r2, #128	@ 0x80
 800ce5c:	4013      	ands	r3, r2
 800ce5e:	d046      	beq.n	800ceee <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2244      	movs	r2, #68	@ 0x44
 800ce66:	5a9b      	ldrh	r3, [r3, r2]
 800ce68:	b29a      	uxth	r2, r3
 800ce6a:	687b      	ldr	r3, [r7, #4]
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2180      	movs	r1, #128	@ 0x80
 800ce70:	438a      	bics	r2, r1
 800ce72:	b291      	uxth	r1, r2
 800ce74:	2244      	movs	r2, #68	@ 0x44
 800ce76:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800ce78:	687a      	ldr	r2, [r7, #4]
 800ce7a:	23b8      	movs	r3, #184	@ 0xb8
 800ce7c:	009b      	lsls	r3, r3, #2
 800ce7e:	5cd3      	ldrb	r3, [r2, r3]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d12f      	bne.n	800cee4 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	681b      	ldr	r3, [r3, #0]
 800ce88:	2240      	movs	r2, #64	@ 0x40
 800ce8a:	5a9b      	ldrh	r3, [r3, r2]
 800ce8c:	b29a      	uxth	r2, r3
 800ce8e:	687b      	ldr	r3, [r7, #4]
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	2104      	movs	r1, #4
 800ce94:	430a      	orrs	r2, r1
 800ce96:	b291      	uxth	r1, r2
 800ce98:	2240      	movs	r2, #64	@ 0x40
 800ce9a:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	681b      	ldr	r3, [r3, #0]
 800cea0:	2240      	movs	r2, #64	@ 0x40
 800cea2:	5a9b      	ldrh	r3, [r3, r2]
 800cea4:	b29a      	uxth	r2, r3
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	2108      	movs	r1, #8
 800ceac:	430a      	orrs	r2, r1
 800ceae:	b291      	uxth	r1, r2
 800ceb0:	2240      	movs	r2, #64	@ 0x40
 800ceb2:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800ceb4:	687a      	ldr	r2, [r7, #4]
 800ceb6:	23b8      	movs	r3, #184	@ 0xb8
 800ceb8:	009b      	lsls	r3, r3, #2
 800ceba:	2101      	movs	r1, #1
 800cebc:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	681b      	ldr	r3, [r3, #0]
 800cec2:	2254      	movs	r2, #84	@ 0x54
 800cec4:	5a9b      	ldrh	r3, [r3, r2]
 800cec6:	b29b      	uxth	r3, r3
 800cec8:	089b      	lsrs	r3, r3, #2
 800ceca:	223c      	movs	r2, #60	@ 0x3c
 800cecc:	4013      	ands	r3, r2
 800cece:	0019      	movs	r1, r3
 800ced0:	687a      	ldr	r2, [r7, #4]
 800ced2:	23b9      	movs	r3, #185	@ 0xb9
 800ced4:	009b      	lsls	r3, r3, #2
 800ced6:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2101      	movs	r1, #1
 800cedc:	0018      	movs	r0, r3
 800cede:	f001 fc1b 	bl	800e718 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800cee2:	e02c      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	0018      	movs	r0, r3
 800cee8:	f008 fbe0 	bl	80156ac <HAL_PCD_SuspendCallback>
    return;
 800ceec:	e027      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800ceee:	68fa      	ldr	r2, [r7, #12]
 800cef0:	2380      	movs	r3, #128	@ 0x80
 800cef2:	009b      	lsls	r3, r3, #2
 800cef4:	4013      	ands	r3, r2
 800cef6:	d010      	beq.n	800cf1a <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	681b      	ldr	r3, [r3, #0]
 800cefc:	2244      	movs	r2, #68	@ 0x44
 800cefe:	5a9b      	ldrh	r3, [r3, r2]
 800cf00:	b29a      	uxth	r2, r3
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	681b      	ldr	r3, [r3, #0]
 800cf06:	4914      	ldr	r1, [pc, #80]	@ (800cf58 <HAL_PCD_IRQHandler+0x280>)
 800cf08:	400a      	ands	r2, r1
 800cf0a:	b291      	uxth	r1, r2
 800cf0c:	2244      	movs	r2, #68	@ 0x44
 800cf0e:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	0018      	movs	r0, r3
 800cf14:	f008 fb96 	bl	8015644 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800cf18:	e011      	b.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800cf1a:	68fa      	ldr	r2, [r7, #12]
 800cf1c:	2380      	movs	r3, #128	@ 0x80
 800cf1e:	005b      	lsls	r3, r3, #1
 800cf20:	4013      	ands	r3, r2
 800cf22:	d00c      	beq.n	800cf3e <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800cf24:	687b      	ldr	r3, [r7, #4]
 800cf26:	681b      	ldr	r3, [r3, #0]
 800cf28:	2244      	movs	r2, #68	@ 0x44
 800cf2a:	5a9b      	ldrh	r3, [r3, r2]
 800cf2c:	b29a      	uxth	r2, r3
 800cf2e:	687b      	ldr	r3, [r7, #4]
 800cf30:	681b      	ldr	r3, [r3, #0]
 800cf32:	490a      	ldr	r1, [pc, #40]	@ (800cf5c <HAL_PCD_IRQHandler+0x284>)
 800cf34:	400a      	ands	r2, r1
 800cf36:	b291      	uxth	r1, r2
 800cf38:	2244      	movs	r2, #68	@ 0x44
 800cf3a:	5299      	strh	r1, [r3, r2]

    return;
 800cf3c:	46c0      	nop			@ (mov r8, r8)
  }
}
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	b004      	add	sp, #16
 800cf42:	bd80      	pop	{r7, pc}
 800cf44:	fffffbff 	.word	0xfffffbff
 800cf48:	ffffbfff 	.word	0xffffbfff
 800cf4c:	ffffdfff 	.word	0xffffdfff
 800cf50:	ffffefff 	.word	0xffffefff
 800cf54:	fffff7ff 	.word	0xfffff7ff
 800cf58:	fffffdff 	.word	0xfffffdff
 800cf5c:	fffffeff 	.word	0xfffffeff

0800cf60 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800cf60:	b580      	push	{r7, lr}
 800cf62:	b082      	sub	sp, #8
 800cf64:	af00      	add	r7, sp, #0
 800cf66:	6078      	str	r0, [r7, #4]
 800cf68:	000a      	movs	r2, r1
 800cf6a:	1cfb      	adds	r3, r7, #3
 800cf6c:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800cf6e:	687a      	ldr	r2, [r7, #4]
 800cf70:	23aa      	movs	r3, #170	@ 0xaa
 800cf72:	009b      	lsls	r3, r3, #2
 800cf74:	5cd3      	ldrb	r3, [r2, r3]
 800cf76:	2b01      	cmp	r3, #1
 800cf78:	d101      	bne.n	800cf7e <HAL_PCD_SetAddress+0x1e>
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	e017      	b.n	800cfae <HAL_PCD_SetAddress+0x4e>
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	23aa      	movs	r3, #170	@ 0xaa
 800cf82:	009b      	lsls	r3, r3, #2
 800cf84:	2101      	movs	r1, #1
 800cf86:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	1cfa      	adds	r2, r7, #3
 800cf8c:	2124      	movs	r1, #36	@ 0x24
 800cf8e:	7812      	ldrb	r2, [r2, #0]
 800cf90:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681a      	ldr	r2, [r3, #0]
 800cf96:	1cfb      	adds	r3, r7, #3
 800cf98:	781b      	ldrb	r3, [r3, #0]
 800cf9a:	0019      	movs	r1, r3
 800cf9c:	0010      	movs	r0, r2
 800cf9e:	f006 fb45 	bl	801362c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	23aa      	movs	r3, #170	@ 0xaa
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	2100      	movs	r1, #0
 800cfaa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800cfac:	2300      	movs	r3, #0
}
 800cfae:	0018      	movs	r0, r3
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	b002      	add	sp, #8
 800cfb4:	bd80      	pop	{r7, pc}

0800cfb6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800cfb6:	b590      	push	{r4, r7, lr}
 800cfb8:	b085      	sub	sp, #20
 800cfba:	af00      	add	r7, sp, #0
 800cfbc:	6078      	str	r0, [r7, #4]
 800cfbe:	000c      	movs	r4, r1
 800cfc0:	0010      	movs	r0, r2
 800cfc2:	0019      	movs	r1, r3
 800cfc4:	1cfb      	adds	r3, r7, #3
 800cfc6:	1c22      	adds	r2, r4, #0
 800cfc8:	701a      	strb	r2, [r3, #0]
 800cfca:	003b      	movs	r3, r7
 800cfcc:	1c02      	adds	r2, r0, #0
 800cfce:	801a      	strh	r2, [r3, #0]
 800cfd0:	1cbb      	adds	r3, r7, #2
 800cfd2:	1c0a      	adds	r2, r1, #0
 800cfd4:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800cfd6:	230b      	movs	r3, #11
 800cfd8:	18fb      	adds	r3, r7, r3
 800cfda:	2200      	movs	r2, #0
 800cfdc:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800cfde:	1cfb      	adds	r3, r7, #3
 800cfe0:	781b      	ldrb	r3, [r3, #0]
 800cfe2:	b25b      	sxtb	r3, r3
 800cfe4:	2b00      	cmp	r3, #0
 800cfe6:	da0f      	bge.n	800d008 <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800cfe8:	1cfb      	adds	r3, r7, #3
 800cfea:	781b      	ldrb	r3, [r3, #0]
 800cfec:	2207      	movs	r2, #7
 800cfee:	4013      	ands	r3, r2
 800cff0:	1c5a      	adds	r2, r3, #1
 800cff2:	0013      	movs	r3, r2
 800cff4:	009b      	lsls	r3, r3, #2
 800cff6:	189b      	adds	r3, r3, r2
 800cff8:	00db      	lsls	r3, r3, #3
 800cffa:	687a      	ldr	r2, [r7, #4]
 800cffc:	18d3      	adds	r3, r2, r3
 800cffe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	2201      	movs	r2, #1
 800d004:	705a      	strb	r2, [r3, #1]
 800d006:	e00f      	b.n	800d028 <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d008:	1cfb      	adds	r3, r7, #3
 800d00a:	781b      	ldrb	r3, [r3, #0]
 800d00c:	2207      	movs	r2, #7
 800d00e:	401a      	ands	r2, r3
 800d010:	0013      	movs	r3, r2
 800d012:	009b      	lsls	r3, r3, #2
 800d014:	189b      	adds	r3, r3, r2
 800d016:	00db      	lsls	r3, r3, #3
 800d018:	3369      	adds	r3, #105	@ 0x69
 800d01a:	33ff      	adds	r3, #255	@ 0xff
 800d01c:	687a      	ldr	r2, [r7, #4]
 800d01e:	18d3      	adds	r3, r2, r3
 800d020:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d022:	68fb      	ldr	r3, [r7, #12]
 800d024:	2200      	movs	r2, #0
 800d026:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800d028:	1cfb      	adds	r3, r7, #3
 800d02a:	781b      	ldrb	r3, [r3, #0]
 800d02c:	2207      	movs	r2, #7
 800d02e:	4013      	ands	r3, r2
 800d030:	b2da      	uxtb	r2, r3
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800d036:	003b      	movs	r3, r7
 800d038:	881a      	ldrh	r2, [r3, #0]
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	1cba      	adds	r2, r7, #2
 800d042:	7812      	ldrb	r2, [r2, #0]
 800d044:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800d046:	1cbb      	adds	r3, r7, #2
 800d048:	781b      	ldrb	r3, [r3, #0]
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d102      	bne.n	800d054 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800d054:	687a      	ldr	r2, [r7, #4]
 800d056:	23aa      	movs	r3, #170	@ 0xaa
 800d058:	009b      	lsls	r3, r3, #2
 800d05a:	5cd3      	ldrb	r3, [r2, r3]
 800d05c:	2b01      	cmp	r3, #1
 800d05e:	d101      	bne.n	800d064 <HAL_PCD_EP_Open+0xae>
 800d060:	2302      	movs	r3, #2
 800d062:	e013      	b.n	800d08c <HAL_PCD_EP_Open+0xd6>
 800d064:	687a      	ldr	r2, [r7, #4]
 800d066:	23aa      	movs	r3, #170	@ 0xaa
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	2101      	movs	r1, #1
 800d06c:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	68fa      	ldr	r2, [r7, #12]
 800d074:	0011      	movs	r1, r2
 800d076:	0018      	movs	r0, r3
 800d078:	f004 fb3c 	bl	80116f4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d07c:	687a      	ldr	r2, [r7, #4]
 800d07e:	23aa      	movs	r3, #170	@ 0xaa
 800d080:	009b      	lsls	r3, r3, #2
 800d082:	2100      	movs	r1, #0
 800d084:	54d1      	strb	r1, [r2, r3]

  return ret;
 800d086:	230b      	movs	r3, #11
 800d088:	18fb      	adds	r3, r7, r3
 800d08a:	781b      	ldrb	r3, [r3, #0]
}
 800d08c:	0018      	movs	r0, r3
 800d08e:	46bd      	mov	sp, r7
 800d090:	b005      	add	sp, #20
 800d092:	bd90      	pop	{r4, r7, pc}

0800d094 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b084      	sub	sp, #16
 800d098:	af00      	add	r7, sp, #0
 800d09a:	6078      	str	r0, [r7, #4]
 800d09c:	000a      	movs	r2, r1
 800d09e:	1cfb      	adds	r3, r7, #3
 800d0a0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800d0a2:	1cfb      	adds	r3, r7, #3
 800d0a4:	781b      	ldrb	r3, [r3, #0]
 800d0a6:	b25b      	sxtb	r3, r3
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	da0f      	bge.n	800d0cc <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d0ac:	1cfb      	adds	r3, r7, #3
 800d0ae:	781b      	ldrb	r3, [r3, #0]
 800d0b0:	2207      	movs	r2, #7
 800d0b2:	4013      	ands	r3, r2
 800d0b4:	1c5a      	adds	r2, r3, #1
 800d0b6:	0013      	movs	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	189b      	adds	r3, r3, r2
 800d0bc:	00db      	lsls	r3, r3, #3
 800d0be:	687a      	ldr	r2, [r7, #4]
 800d0c0:	18d3      	adds	r3, r2, r3
 800d0c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	705a      	strb	r2, [r3, #1]
 800d0ca:	e00f      	b.n	800d0ec <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d0cc:	1cfb      	adds	r3, r7, #3
 800d0ce:	781b      	ldrb	r3, [r3, #0]
 800d0d0:	2207      	movs	r2, #7
 800d0d2:	401a      	ands	r2, r3
 800d0d4:	0013      	movs	r3, r2
 800d0d6:	009b      	lsls	r3, r3, #2
 800d0d8:	189b      	adds	r3, r3, r2
 800d0da:	00db      	lsls	r3, r3, #3
 800d0dc:	3369      	adds	r3, #105	@ 0x69
 800d0de:	33ff      	adds	r3, #255	@ 0xff
 800d0e0:	687a      	ldr	r2, [r7, #4]
 800d0e2:	18d3      	adds	r3, r2, r3
 800d0e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	2200      	movs	r2, #0
 800d0ea:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800d0ec:	1cfb      	adds	r3, r7, #3
 800d0ee:	781b      	ldrb	r3, [r3, #0]
 800d0f0:	2207      	movs	r2, #7
 800d0f2:	4013      	ands	r3, r2
 800d0f4:	b2da      	uxtb	r2, r3
 800d0f6:	68fb      	ldr	r3, [r7, #12]
 800d0f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d0fa:	687a      	ldr	r2, [r7, #4]
 800d0fc:	23aa      	movs	r3, #170	@ 0xaa
 800d0fe:	009b      	lsls	r3, r3, #2
 800d100:	5cd3      	ldrb	r3, [r2, r3]
 800d102:	2b01      	cmp	r3, #1
 800d104:	d101      	bne.n	800d10a <HAL_PCD_EP_Close+0x76>
 800d106:	2302      	movs	r3, #2
 800d108:	e011      	b.n	800d12e <HAL_PCD_EP_Close+0x9a>
 800d10a:	687a      	ldr	r2, [r7, #4]
 800d10c:	23aa      	movs	r3, #170	@ 0xaa
 800d10e:	009b      	lsls	r3, r3, #2
 800d110:	2101      	movs	r1, #1
 800d112:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	68fa      	ldr	r2, [r7, #12]
 800d11a:	0011      	movs	r1, r2
 800d11c:	0018      	movs	r0, r3
 800d11e:	f004 fe8b 	bl	8011e38 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800d122:	687a      	ldr	r2, [r7, #4]
 800d124:	23aa      	movs	r3, #170	@ 0xaa
 800d126:	009b      	lsls	r3, r3, #2
 800d128:	2100      	movs	r1, #0
 800d12a:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 800d12c:	2300      	movs	r3, #0
}
 800d12e:	0018      	movs	r0, r3
 800d130:	46bd      	mov	sp, r7
 800d132:	b004      	add	sp, #16
 800d134:	bd80      	pop	{r7, pc}

0800d136 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d136:	b580      	push	{r7, lr}
 800d138:	b086      	sub	sp, #24
 800d13a:	af00      	add	r7, sp, #0
 800d13c:	60f8      	str	r0, [r7, #12]
 800d13e:	607a      	str	r2, [r7, #4]
 800d140:	603b      	str	r3, [r7, #0]
 800d142:	200b      	movs	r0, #11
 800d144:	183b      	adds	r3, r7, r0
 800d146:	1c0a      	adds	r2, r1, #0
 800d148:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d14a:	0001      	movs	r1, r0
 800d14c:	187b      	adds	r3, r7, r1
 800d14e:	781b      	ldrb	r3, [r3, #0]
 800d150:	2207      	movs	r2, #7
 800d152:	401a      	ands	r2, r3
 800d154:	0013      	movs	r3, r2
 800d156:	009b      	lsls	r3, r3, #2
 800d158:	189b      	adds	r3, r3, r2
 800d15a:	00db      	lsls	r3, r3, #3
 800d15c:	3369      	adds	r3, #105	@ 0x69
 800d15e:	33ff      	adds	r3, #255	@ 0xff
 800d160:	68fa      	ldr	r2, [r7, #12]
 800d162:	18d3      	adds	r3, r2, r3
 800d164:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	687a      	ldr	r2, [r7, #4]
 800d16a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d16c:	697b      	ldr	r3, [r7, #20]
 800d16e:	683a      	ldr	r2, [r7, #0]
 800d170:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2200      	movs	r2, #0
 800d176:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 800d178:	697b      	ldr	r3, [r7, #20]
 800d17a:	2200      	movs	r2, #0
 800d17c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d17e:	187b      	adds	r3, r7, r1
 800d180:	781b      	ldrb	r3, [r3, #0]
 800d182:	2207      	movs	r2, #7
 800d184:	4013      	ands	r3, r2
 800d186:	b2da      	uxtb	r2, r3
 800d188:	697b      	ldr	r3, [r7, #20]
 800d18a:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	697a      	ldr	r2, [r7, #20]
 800d192:	0011      	movs	r1, r2
 800d194:	0018      	movs	r0, r3
 800d196:	f005 f80f 	bl	80121b8 <USB_EPStartXfer>

  return HAL_OK;
 800d19a:	2300      	movs	r3, #0
}
 800d19c:	0018      	movs	r0, r3
 800d19e:	46bd      	mov	sp, r7
 800d1a0:	b006      	add	sp, #24
 800d1a2:	bd80      	pop	{r7, pc}

0800d1a4 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d1a4:	b580      	push	{r7, lr}
 800d1a6:	b082      	sub	sp, #8
 800d1a8:	af00      	add	r7, sp, #0
 800d1aa:	6078      	str	r0, [r7, #4]
 800d1ac:	000a      	movs	r2, r1
 800d1ae:	1cfb      	adds	r3, r7, #3
 800d1b0:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800d1b2:	1cfb      	adds	r3, r7, #3
 800d1b4:	781b      	ldrb	r3, [r3, #0]
 800d1b6:	2207      	movs	r2, #7
 800d1b8:	401a      	ands	r2, r3
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	23c2      	movs	r3, #194	@ 0xc2
 800d1be:	0059      	lsls	r1, r3, #1
 800d1c0:	0013      	movs	r3, r2
 800d1c2:	009b      	lsls	r3, r3, #2
 800d1c4:	189b      	adds	r3, r3, r2
 800d1c6:	00db      	lsls	r3, r3, #3
 800d1c8:	18c3      	adds	r3, r0, r3
 800d1ca:	185b      	adds	r3, r3, r1
 800d1cc:	681b      	ldr	r3, [r3, #0]
}
 800d1ce:	0018      	movs	r0, r3
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	b002      	add	sp, #8
 800d1d4:	bd80      	pop	{r7, pc}

0800d1d6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800d1d6:	b580      	push	{r7, lr}
 800d1d8:	b086      	sub	sp, #24
 800d1da:	af00      	add	r7, sp, #0
 800d1dc:	60f8      	str	r0, [r7, #12]
 800d1de:	607a      	str	r2, [r7, #4]
 800d1e0:	603b      	str	r3, [r7, #0]
 800d1e2:	200b      	movs	r0, #11
 800d1e4:	183b      	adds	r3, r7, r0
 800d1e6:	1c0a      	adds	r2, r1, #0
 800d1e8:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d1ea:	183b      	adds	r3, r7, r0
 800d1ec:	781b      	ldrb	r3, [r3, #0]
 800d1ee:	2207      	movs	r2, #7
 800d1f0:	4013      	ands	r3, r2
 800d1f2:	1c5a      	adds	r2, r3, #1
 800d1f4:	0013      	movs	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	189b      	adds	r3, r3, r2
 800d1fa:	00db      	lsls	r3, r3, #3
 800d1fc:	68fa      	ldr	r2, [r7, #12]
 800d1fe:	18d3      	adds	r3, r2, r3
 800d200:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800d202:	697b      	ldr	r3, [r7, #20]
 800d204:	687a      	ldr	r2, [r7, #4]
 800d206:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	683a      	ldr	r2, [r7, #0]
 800d20c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800d20e:	697b      	ldr	r3, [r7, #20]
 800d210:	2224      	movs	r2, #36	@ 0x24
 800d212:	2101      	movs	r1, #1
 800d214:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	683a      	ldr	r2, [r7, #0]
 800d21a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800d21c:	697b      	ldr	r3, [r7, #20]
 800d21e:	2200      	movs	r2, #0
 800d220:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800d222:	697b      	ldr	r3, [r7, #20]
 800d224:	2201      	movs	r2, #1
 800d226:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d228:	183b      	adds	r3, r7, r0
 800d22a:	781b      	ldrb	r3, [r3, #0]
 800d22c:	2207      	movs	r2, #7
 800d22e:	4013      	ands	r3, r2
 800d230:	b2da      	uxtb	r2, r3
 800d232:	697b      	ldr	r3, [r7, #20]
 800d234:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	697a      	ldr	r2, [r7, #20]
 800d23c:	0011      	movs	r1, r2
 800d23e:	0018      	movs	r0, r3
 800d240:	f004 ffba 	bl	80121b8 <USB_EPStartXfer>

  return HAL_OK;
 800d244:	2300      	movs	r3, #0
}
 800d246:	0018      	movs	r0, r3
 800d248:	46bd      	mov	sp, r7
 800d24a:	b006      	add	sp, #24
 800d24c:	bd80      	pop	{r7, pc}

0800d24e <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d24e:	b580      	push	{r7, lr}
 800d250:	b084      	sub	sp, #16
 800d252:	af00      	add	r7, sp, #0
 800d254:	6078      	str	r0, [r7, #4]
 800d256:	000a      	movs	r2, r1
 800d258:	1cfb      	adds	r3, r7, #3
 800d25a:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800d25c:	1cfb      	adds	r3, r7, #3
 800d25e:	781b      	ldrb	r3, [r3, #0]
 800d260:	2207      	movs	r2, #7
 800d262:	401a      	ands	r2, r3
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	685b      	ldr	r3, [r3, #4]
 800d268:	429a      	cmp	r2, r3
 800d26a:	d901      	bls.n	800d270 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 800d26c:	2301      	movs	r3, #1
 800d26e:	e046      	b.n	800d2fe <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d270:	1cfb      	adds	r3, r7, #3
 800d272:	781b      	ldrb	r3, [r3, #0]
 800d274:	b25b      	sxtb	r3, r3
 800d276:	2b00      	cmp	r3, #0
 800d278:	da0f      	bge.n	800d29a <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d27a:	1cfb      	adds	r3, r7, #3
 800d27c:	781b      	ldrb	r3, [r3, #0]
 800d27e:	2207      	movs	r2, #7
 800d280:	4013      	ands	r3, r2
 800d282:	1c5a      	adds	r2, r3, #1
 800d284:	0013      	movs	r3, r2
 800d286:	009b      	lsls	r3, r3, #2
 800d288:	189b      	adds	r3, r3, r2
 800d28a:	00db      	lsls	r3, r3, #3
 800d28c:	687a      	ldr	r2, [r7, #4]
 800d28e:	18d3      	adds	r3, r2, r3
 800d290:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d292:	68fb      	ldr	r3, [r7, #12]
 800d294:	2201      	movs	r2, #1
 800d296:	705a      	strb	r2, [r3, #1]
 800d298:	e00d      	b.n	800d2b6 <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800d29a:	1cfb      	adds	r3, r7, #3
 800d29c:	781a      	ldrb	r2, [r3, #0]
 800d29e:	0013      	movs	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	189b      	adds	r3, r3, r2
 800d2a4:	00db      	lsls	r3, r3, #3
 800d2a6:	3369      	adds	r3, #105	@ 0x69
 800d2a8:	33ff      	adds	r3, #255	@ 0xff
 800d2aa:	687a      	ldr	r2, [r7, #4]
 800d2ac:	18d3      	adds	r3, r2, r3
 800d2ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2200      	movs	r2, #0
 800d2b4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2201      	movs	r2, #1
 800d2ba:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d2bc:	1cfb      	adds	r3, r7, #3
 800d2be:	781b      	ldrb	r3, [r3, #0]
 800d2c0:	2207      	movs	r2, #7
 800d2c2:	4013      	ands	r3, r2
 800d2c4:	b2da      	uxtb	r2, r3
 800d2c6:	68fb      	ldr	r3, [r7, #12]
 800d2c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d2ca:	687a      	ldr	r2, [r7, #4]
 800d2cc:	23aa      	movs	r3, #170	@ 0xaa
 800d2ce:	009b      	lsls	r3, r3, #2
 800d2d0:	5cd3      	ldrb	r3, [r2, r3]
 800d2d2:	2b01      	cmp	r3, #1
 800d2d4:	d101      	bne.n	800d2da <HAL_PCD_EP_SetStall+0x8c>
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	e011      	b.n	800d2fe <HAL_PCD_EP_SetStall+0xb0>
 800d2da:	687a      	ldr	r2, [r7, #4]
 800d2dc:	23aa      	movs	r3, #170	@ 0xaa
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	2101      	movs	r1, #1
 800d2e2:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	68fa      	ldr	r2, [r7, #12]
 800d2ea:	0011      	movs	r1, r2
 800d2ec:	0018      	movs	r0, r3
 800d2ee:	f006 f89b 	bl	8013428 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 800d2f2:	687a      	ldr	r2, [r7, #4]
 800d2f4:	23aa      	movs	r3, #170	@ 0xaa
 800d2f6:	009b      	lsls	r3, r3, #2
 800d2f8:	2100      	movs	r1, #0
 800d2fa:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d2fc:	2300      	movs	r3, #0
}
 800d2fe:	0018      	movs	r0, r3
 800d300:	46bd      	mov	sp, r7
 800d302:	b004      	add	sp, #16
 800d304:	bd80      	pop	{r7, pc}

0800d306 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800d306:	b580      	push	{r7, lr}
 800d308:	b084      	sub	sp, #16
 800d30a:	af00      	add	r7, sp, #0
 800d30c:	6078      	str	r0, [r7, #4]
 800d30e:	000a      	movs	r2, r1
 800d310:	1cfb      	adds	r3, r7, #3
 800d312:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800d314:	1cfb      	adds	r3, r7, #3
 800d316:	781b      	ldrb	r3, [r3, #0]
 800d318:	220f      	movs	r2, #15
 800d31a:	401a      	ands	r2, r3
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	685b      	ldr	r3, [r3, #4]
 800d320:	429a      	cmp	r2, r3
 800d322:	d901      	bls.n	800d328 <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 800d324:	2301      	movs	r3, #1
 800d326:	e048      	b.n	800d3ba <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800d328:	1cfb      	adds	r3, r7, #3
 800d32a:	781b      	ldrb	r3, [r3, #0]
 800d32c:	b25b      	sxtb	r3, r3
 800d32e:	2b00      	cmp	r3, #0
 800d330:	da0f      	bge.n	800d352 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800d332:	1cfb      	adds	r3, r7, #3
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	2207      	movs	r2, #7
 800d338:	4013      	ands	r3, r2
 800d33a:	1c5a      	adds	r2, r3, #1
 800d33c:	0013      	movs	r3, r2
 800d33e:	009b      	lsls	r3, r3, #2
 800d340:	189b      	adds	r3, r3, r2
 800d342:	00db      	lsls	r3, r3, #3
 800d344:	687a      	ldr	r2, [r7, #4]
 800d346:	18d3      	adds	r3, r2, r3
 800d348:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800d34a:	68fb      	ldr	r3, [r7, #12]
 800d34c:	2201      	movs	r2, #1
 800d34e:	705a      	strb	r2, [r3, #1]
 800d350:	e00f      	b.n	800d372 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800d352:	1cfb      	adds	r3, r7, #3
 800d354:	781b      	ldrb	r3, [r3, #0]
 800d356:	2207      	movs	r2, #7
 800d358:	401a      	ands	r2, r3
 800d35a:	0013      	movs	r3, r2
 800d35c:	009b      	lsls	r3, r3, #2
 800d35e:	189b      	adds	r3, r3, r2
 800d360:	00db      	lsls	r3, r3, #3
 800d362:	3369      	adds	r3, #105	@ 0x69
 800d364:	33ff      	adds	r3, #255	@ 0xff
 800d366:	687a      	ldr	r2, [r7, #4]
 800d368:	18d3      	adds	r3, r2, r3
 800d36a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	2200      	movs	r2, #0
 800d370:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	2200      	movs	r2, #0
 800d376:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800d378:	1cfb      	adds	r3, r7, #3
 800d37a:	781b      	ldrb	r3, [r3, #0]
 800d37c:	2207      	movs	r2, #7
 800d37e:	4013      	ands	r3, r2
 800d380:	b2da      	uxtb	r2, r3
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800d386:	687a      	ldr	r2, [r7, #4]
 800d388:	23aa      	movs	r3, #170	@ 0xaa
 800d38a:	009b      	lsls	r3, r3, #2
 800d38c:	5cd3      	ldrb	r3, [r2, r3]
 800d38e:	2b01      	cmp	r3, #1
 800d390:	d101      	bne.n	800d396 <HAL_PCD_EP_ClrStall+0x90>
 800d392:	2302      	movs	r3, #2
 800d394:	e011      	b.n	800d3ba <HAL_PCD_EP_ClrStall+0xb4>
 800d396:	687a      	ldr	r2, [r7, #4]
 800d398:	23aa      	movs	r3, #170	@ 0xaa
 800d39a:	009b      	lsls	r3, r3, #2
 800d39c:	2101      	movs	r1, #1
 800d39e:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	68fa      	ldr	r2, [r7, #12]
 800d3a6:	0011      	movs	r1, r2
 800d3a8:	0018      	movs	r0, r3
 800d3aa:	f006 f88d 	bl	80134c8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800d3ae:	687a      	ldr	r2, [r7, #4]
 800d3b0:	23aa      	movs	r3, #170	@ 0xaa
 800d3b2:	009b      	lsls	r3, r3, #2
 800d3b4:	2100      	movs	r1, #0
 800d3b6:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800d3b8:	2300      	movs	r3, #0
}
 800d3ba:	0018      	movs	r0, r3
 800d3bc:	46bd      	mov	sp, r7
 800d3be:	b004      	add	sp, #16
 800d3c0:	bd80      	pop	{r7, pc}
	...

0800d3c4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800d3c4:	b5b0      	push	{r4, r5, r7, lr}
 800d3c6:	b096      	sub	sp, #88	@ 0x58
 800d3c8:	af00      	add	r7, sp, #0
 800d3ca:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800d3cc:	f000 fbec 	bl	800dba8 <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	681a      	ldr	r2, [r3, #0]
 800d3d4:	204e      	movs	r0, #78	@ 0x4e
 800d3d6:	183b      	adds	r3, r7, r0
 800d3d8:	2144      	movs	r1, #68	@ 0x44
 800d3da:	5a52      	ldrh	r2, [r2, r1]
 800d3dc:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 800d3de:	183b      	adds	r3, r7, r0
 800d3e0:	881b      	ldrh	r3, [r3, #0]
 800d3e2:	b2da      	uxtb	r2, r3
 800d3e4:	244d      	movs	r4, #77	@ 0x4d
 800d3e6:	193b      	adds	r3, r7, r4
 800d3e8:	210f      	movs	r1, #15
 800d3ea:	400a      	ands	r2, r1
 800d3ec:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 800d3ee:	193b      	adds	r3, r7, r4
 800d3f0:	781b      	ldrb	r3, [r3, #0]
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	d000      	beq.n	800d3f8 <PCD_EP_ISR_Handler+0x34>
 800d3f6:	e18f      	b.n	800d718 <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 800d3f8:	183b      	adds	r3, r7, r0
 800d3fa:	881b      	ldrh	r3, [r3, #0]
 800d3fc:	2210      	movs	r2, #16
 800d3fe:	4013      	ands	r3, r2
 800d400:	d155      	bne.n	800d4ae <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	881b      	ldrh	r3, [r3, #0]
 800d408:	b29a      	uxth	r2, r3
 800d40a:	200e      	movs	r0, #14
 800d40c:	183b      	adds	r3, r7, r0
 800d40e:	49bb      	ldr	r1, [pc, #748]	@ (800d6fc <PCD_EP_ISR_Handler+0x338>)
 800d410:	400a      	ands	r2, r1
 800d412:	801a      	strh	r2, [r3, #0]
 800d414:	687b      	ldr	r3, [r7, #4]
 800d416:	681b      	ldr	r3, [r3, #0]
 800d418:	183a      	adds	r2, r7, r0
 800d41a:	8812      	ldrh	r2, [r2, #0]
 800d41c:	49b8      	ldr	r1, [pc, #736]	@ (800d700 <PCD_EP_ISR_Handler+0x33c>)
 800d41e:	430a      	orrs	r2, r1
 800d420:	b292      	uxth	r2, r2
 800d422:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	3328      	adds	r3, #40	@ 0x28
 800d428:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2250      	movs	r2, #80	@ 0x50
 800d430:	5a9b      	ldrh	r3, [r3, r2]
 800d432:	b29b      	uxth	r3, r3
 800d434:	001a      	movs	r2, r3
 800d436:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d438:	781b      	ldrb	r3, [r3, #0]
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	18d2      	adds	r2, r2, r3
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	18d3      	adds	r3, r2, r3
 800d444:	4aaf      	ldr	r2, [pc, #700]	@ (800d704 <PCD_EP_ISR_Handler+0x340>)
 800d446:	4694      	mov	ip, r2
 800d448:	4463      	add	r3, ip
 800d44a:	881b      	ldrh	r3, [r3, #0]
 800d44c:	059b      	lsls	r3, r3, #22
 800d44e:	0d9a      	lsrs	r2, r3, #22
 800d450:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d452:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 800d454:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d456:	695a      	ldr	r2, [r3, #20]
 800d458:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d45a:	69db      	ldr	r3, [r3, #28]
 800d45c:	18d2      	adds	r2, r2, r3
 800d45e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d460:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 800d462:	687b      	ldr	r3, [r7, #4]
 800d464:	2100      	movs	r1, #0
 800d466:	0018      	movs	r0, r3
 800d468:	f008 f8ce 	bl	8015608 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2224      	movs	r2, #36	@ 0x24
 800d470:	5c9b      	ldrb	r3, [r3, r2]
 800d472:	b2db      	uxtb	r3, r3
 800d474:	2b00      	cmp	r3, #0
 800d476:	d101      	bne.n	800d47c <PCD_EP_ISR_Handler+0xb8>
 800d478:	f000 fb96 	bl	800dba8 <PCD_EP_ISR_Handler+0x7e4>
 800d47c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d47e:	699b      	ldr	r3, [r3, #24]
 800d480:	2b00      	cmp	r3, #0
 800d482:	d001      	beq.n	800d488 <PCD_EP_ISR_Handler+0xc4>
 800d484:	f000 fb90 	bl	800dba8 <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	2224      	movs	r2, #36	@ 0x24
 800d48c:	5c9b      	ldrb	r3, [r3, r2]
 800d48e:	b2db      	uxtb	r3, r3
 800d490:	2280      	movs	r2, #128	@ 0x80
 800d492:	4252      	negs	r2, r2
 800d494:	4313      	orrs	r3, r2
 800d496:	b2da      	uxtb	r2, r3
 800d498:	687b      	ldr	r3, [r7, #4]
 800d49a:	681b      	ldr	r3, [r3, #0]
 800d49c:	0011      	movs	r1, r2
 800d49e:	224c      	movs	r2, #76	@ 0x4c
 800d4a0:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2224      	movs	r2, #36	@ 0x24
 800d4a6:	2100      	movs	r1, #0
 800d4a8:	5499      	strb	r1, [r3, r2]
 800d4aa:	f000 fb7d 	bl	800dba8 <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	3369      	adds	r3, #105	@ 0x69
 800d4b2:	33ff      	adds	r3, #255	@ 0xff
 800d4b4:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d4b6:	687b      	ldr	r3, [r7, #4]
 800d4b8:	681a      	ldr	r2, [r3, #0]
 800d4ba:	214a      	movs	r1, #74	@ 0x4a
 800d4bc:	187b      	adds	r3, r7, r1
 800d4be:	8812      	ldrh	r2, [r2, #0]
 800d4c0:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 800d4c2:	187b      	adds	r3, r7, r1
 800d4c4:	881a      	ldrh	r2, [r3, #0]
 800d4c6:	2380      	movs	r3, #128	@ 0x80
 800d4c8:	011b      	lsls	r3, r3, #4
 800d4ca:	4013      	ands	r3, r2
 800d4cc:	d037      	beq.n	800d53e <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	2250      	movs	r2, #80	@ 0x50
 800d4d4:	5a9b      	ldrh	r3, [r3, r2]
 800d4d6:	b29b      	uxth	r3, r3
 800d4d8:	001a      	movs	r2, r3
 800d4da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4dc:	781b      	ldrb	r3, [r3, #0]
 800d4de:	00db      	lsls	r3, r3, #3
 800d4e0:	18d2      	adds	r2, r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	18d3      	adds	r3, r2, r3
 800d4e8:	4a87      	ldr	r2, [pc, #540]	@ (800d708 <PCD_EP_ISR_Handler+0x344>)
 800d4ea:	4694      	mov	ip, r2
 800d4ec:	4463      	add	r3, ip
 800d4ee:	881b      	ldrh	r3, [r3, #0]
 800d4f0:	059b      	lsls	r3, r3, #22
 800d4f2:	0d9a      	lsrs	r2, r3, #22
 800d4f4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d4f6:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6818      	ldr	r0, [r3, #0]
 800d4fc:	687b      	ldr	r3, [r7, #4]
 800d4fe:	22ac      	movs	r2, #172	@ 0xac
 800d500:	0092      	lsls	r2, r2, #2
 800d502:	1899      	adds	r1, r3, r2
 800d504:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d506:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800d508:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d50a:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800d50c:	b29b      	uxth	r3, r3
 800d50e:	f006 f90e 	bl	801372e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	681b      	ldr	r3, [r3, #0]
 800d516:	881b      	ldrh	r3, [r3, #0]
 800d518:	b29a      	uxth	r2, r3
 800d51a:	2010      	movs	r0, #16
 800d51c:	183b      	adds	r3, r7, r0
 800d51e:	497b      	ldr	r1, [pc, #492]	@ (800d70c <PCD_EP_ISR_Handler+0x348>)
 800d520:	400a      	ands	r2, r1
 800d522:	801a      	strh	r2, [r3, #0]
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	183a      	adds	r2, r7, r0
 800d52a:	8812      	ldrh	r2, [r2, #0]
 800d52c:	2180      	movs	r1, #128	@ 0x80
 800d52e:	430a      	orrs	r2, r1
 800d530:	b292      	uxth	r2, r2
 800d532:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	0018      	movs	r0, r3
 800d538:	f008 f830 	bl	801559c <HAL_PCD_SetupStageCallback>
 800d53c:	e334      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d53e:	234a      	movs	r3, #74	@ 0x4a
 800d540:	18fb      	adds	r3, r7, r3
 800d542:	2200      	movs	r2, #0
 800d544:	5e9b      	ldrsh	r3, [r3, r2]
 800d546:	2b00      	cmp	r3, #0
 800d548:	db00      	blt.n	800d54c <PCD_EP_ISR_Handler+0x188>
 800d54a:	e32d      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	881b      	ldrh	r3, [r3, #0]
 800d552:	b29a      	uxth	r2, r3
 800d554:	201e      	movs	r0, #30
 800d556:	183b      	adds	r3, r7, r0
 800d558:	496c      	ldr	r1, [pc, #432]	@ (800d70c <PCD_EP_ISR_Handler+0x348>)
 800d55a:	400a      	ands	r2, r1
 800d55c:	801a      	strh	r2, [r3, #0]
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	183a      	adds	r2, r7, r0
 800d564:	8812      	ldrh	r2, [r2, #0]
 800d566:	2180      	movs	r1, #128	@ 0x80
 800d568:	430a      	orrs	r2, r1
 800d56a:	b292      	uxth	r2, r2
 800d56c:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	2250      	movs	r2, #80	@ 0x50
 800d574:	5a9b      	ldrh	r3, [r3, r2]
 800d576:	b29b      	uxth	r3, r3
 800d578:	001a      	movs	r2, r3
 800d57a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d57c:	781b      	ldrb	r3, [r3, #0]
 800d57e:	00db      	lsls	r3, r3, #3
 800d580:	18d2      	adds	r2, r2, r3
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	18d3      	adds	r3, r2, r3
 800d588:	4a5f      	ldr	r2, [pc, #380]	@ (800d708 <PCD_EP_ISR_Handler+0x344>)
 800d58a:	4694      	mov	ip, r2
 800d58c:	4463      	add	r3, ip
 800d58e:	881b      	ldrh	r3, [r3, #0]
 800d590:	059b      	lsls	r3, r3, #22
 800d592:	0d9a      	lsrs	r2, r3, #22
 800d594:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d596:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 800d598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d59a:	69db      	ldr	r3, [r3, #28]
 800d59c:	2b00      	cmp	r3, #0
 800d59e:	d01a      	beq.n	800d5d6 <PCD_EP_ISR_Handler+0x212>
 800d5a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5a2:	695b      	ldr	r3, [r3, #20]
 800d5a4:	2b00      	cmp	r3, #0
 800d5a6:	d016      	beq.n	800d5d6 <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	6818      	ldr	r0, [r3, #0]
 800d5ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ae:	6959      	ldr	r1, [r3, #20]
 800d5b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5b2:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800d5b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5b6:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 800d5b8:	b29b      	uxth	r3, r3
 800d5ba:	f006 f8b8 	bl	801372e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 800d5be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5c0:	695a      	ldr	r2, [r3, #20]
 800d5c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5c4:	69db      	ldr	r3, [r3, #28]
 800d5c6:	18d2      	adds	r2, r2, r3
 800d5c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d5ca:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2100      	movs	r1, #0
 800d5d0:	0018      	movs	r0, r3
 800d5d2:	f007 fff8 	bl	80155c6 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	681a      	ldr	r2, [r3, #0]
 800d5da:	214a      	movs	r1, #74	@ 0x4a
 800d5dc:	187b      	adds	r3, r7, r1
 800d5de:	8812      	ldrh	r2, [r2, #0]
 800d5e0:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 800d5e2:	187b      	adds	r3, r7, r1
 800d5e4:	881a      	ldrh	r2, [r3, #0]
 800d5e6:	2380      	movs	r3, #128	@ 0x80
 800d5e8:	011b      	lsls	r3, r3, #4
 800d5ea:	4013      	ands	r3, r2
 800d5ec:	d000      	beq.n	800d5f0 <PCD_EP_ISR_Handler+0x22c>
 800d5ee:	e2db      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
 800d5f0:	187b      	adds	r3, r7, r1
 800d5f2:	881a      	ldrh	r2, [r3, #0]
 800d5f4:	23c0      	movs	r3, #192	@ 0xc0
 800d5f6:	019b      	lsls	r3, r3, #6
 800d5f8:	401a      	ands	r2, r3
 800d5fa:	23c0      	movs	r3, #192	@ 0xc0
 800d5fc:	019b      	lsls	r3, r3, #6
 800d5fe:	429a      	cmp	r2, r3
 800d600:	d100      	bne.n	800d604 <PCD_EP_ISR_Handler+0x240>
 800d602:	e2d1      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	61bb      	str	r3, [r7, #24]
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	681b      	ldr	r3, [r3, #0]
 800d60e:	2250      	movs	r2, #80	@ 0x50
 800d610:	5a9b      	ldrh	r3, [r3, r2]
 800d612:	b29b      	uxth	r3, r3
 800d614:	001a      	movs	r2, r3
 800d616:	69bb      	ldr	r3, [r7, #24]
 800d618:	189b      	adds	r3, r3, r2
 800d61a:	61bb      	str	r3, [r7, #24]
 800d61c:	69bb      	ldr	r3, [r7, #24]
 800d61e:	4a3a      	ldr	r2, [pc, #232]	@ (800d708 <PCD_EP_ISR_Handler+0x344>)
 800d620:	4694      	mov	ip, r2
 800d622:	4463      	add	r3, ip
 800d624:	617b      	str	r3, [r7, #20]
 800d626:	697b      	ldr	r3, [r7, #20]
 800d628:	881b      	ldrh	r3, [r3, #0]
 800d62a:	b29b      	uxth	r3, r3
 800d62c:	059b      	lsls	r3, r3, #22
 800d62e:	0d9b      	lsrs	r3, r3, #22
 800d630:	b29a      	uxth	r2, r3
 800d632:	697b      	ldr	r3, [r7, #20]
 800d634:	801a      	strh	r2, [r3, #0]
 800d636:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d638:	691b      	ldr	r3, [r3, #16]
 800d63a:	2b3e      	cmp	r3, #62	@ 0x3e
 800d63c:	d91a      	bls.n	800d674 <PCD_EP_ISR_Handler+0x2b0>
 800d63e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d640:	691b      	ldr	r3, [r3, #16]
 800d642:	095b      	lsrs	r3, r3, #5
 800d644:	647b      	str	r3, [r7, #68]	@ 0x44
 800d646:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d648:	691b      	ldr	r3, [r3, #16]
 800d64a:	221f      	movs	r2, #31
 800d64c:	4013      	ands	r3, r2
 800d64e:	d102      	bne.n	800d656 <PCD_EP_ISR_Handler+0x292>
 800d650:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d652:	3b01      	subs	r3, #1
 800d654:	647b      	str	r3, [r7, #68]	@ 0x44
 800d656:	697b      	ldr	r3, [r7, #20]
 800d658:	881b      	ldrh	r3, [r3, #0]
 800d65a:	b29a      	uxth	r2, r3
 800d65c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d65e:	b29b      	uxth	r3, r3
 800d660:	029b      	lsls	r3, r3, #10
 800d662:	b29b      	uxth	r3, r3
 800d664:	4313      	orrs	r3, r2
 800d666:	b29b      	uxth	r3, r3
 800d668:	4a25      	ldr	r2, [pc, #148]	@ (800d700 <PCD_EP_ISR_Handler+0x33c>)
 800d66a:	4313      	orrs	r3, r2
 800d66c:	b29a      	uxth	r2, r3
 800d66e:	697b      	ldr	r3, [r7, #20]
 800d670:	801a      	strh	r2, [r3, #0]
 800d672:	e023      	b.n	800d6bc <PCD_EP_ISR_Handler+0x2f8>
 800d674:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d676:	691b      	ldr	r3, [r3, #16]
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d108      	bne.n	800d68e <PCD_EP_ISR_Handler+0x2ca>
 800d67c:	697b      	ldr	r3, [r7, #20]
 800d67e:	881b      	ldrh	r3, [r3, #0]
 800d680:	b29b      	uxth	r3, r3
 800d682:	4a1f      	ldr	r2, [pc, #124]	@ (800d700 <PCD_EP_ISR_Handler+0x33c>)
 800d684:	4313      	orrs	r3, r2
 800d686:	b29a      	uxth	r2, r3
 800d688:	697b      	ldr	r3, [r7, #20]
 800d68a:	801a      	strh	r2, [r3, #0]
 800d68c:	e016      	b.n	800d6bc <PCD_EP_ISR_Handler+0x2f8>
 800d68e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d690:	691b      	ldr	r3, [r3, #16]
 800d692:	085b      	lsrs	r3, r3, #1
 800d694:	647b      	str	r3, [r7, #68]	@ 0x44
 800d696:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d698:	691b      	ldr	r3, [r3, #16]
 800d69a:	2201      	movs	r2, #1
 800d69c:	4013      	ands	r3, r2
 800d69e:	d002      	beq.n	800d6a6 <PCD_EP_ISR_Handler+0x2e2>
 800d6a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	647b      	str	r3, [r7, #68]	@ 0x44
 800d6a6:	697b      	ldr	r3, [r7, #20]
 800d6a8:	881b      	ldrh	r3, [r3, #0]
 800d6aa:	b29a      	uxth	r2, r3
 800d6ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d6ae:	b29b      	uxth	r3, r3
 800d6b0:	029b      	lsls	r3, r3, #10
 800d6b2:	b29b      	uxth	r3, r3
 800d6b4:	4313      	orrs	r3, r2
 800d6b6:	b29a      	uxth	r2, r3
 800d6b8:	697b      	ldr	r3, [r7, #20]
 800d6ba:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	681b      	ldr	r3, [r3, #0]
 800d6c0:	881b      	ldrh	r3, [r3, #0]
 800d6c2:	b29a      	uxth	r2, r3
 800d6c4:	2012      	movs	r0, #18
 800d6c6:	183b      	adds	r3, r7, r0
 800d6c8:	4911      	ldr	r1, [pc, #68]	@ (800d710 <PCD_EP_ISR_Handler+0x34c>)
 800d6ca:	400a      	ands	r2, r1
 800d6cc:	801a      	strh	r2, [r3, #0]
 800d6ce:	183b      	adds	r3, r7, r0
 800d6d0:	183a      	adds	r2, r7, r0
 800d6d2:	8812      	ldrh	r2, [r2, #0]
 800d6d4:	2180      	movs	r1, #128	@ 0x80
 800d6d6:	0149      	lsls	r1, r1, #5
 800d6d8:	404a      	eors	r2, r1
 800d6da:	801a      	strh	r2, [r3, #0]
 800d6dc:	183b      	adds	r3, r7, r0
 800d6de:	183a      	adds	r2, r7, r0
 800d6e0:	8812      	ldrh	r2, [r2, #0]
 800d6e2:	2180      	movs	r1, #128	@ 0x80
 800d6e4:	0189      	lsls	r1, r1, #6
 800d6e6:	404a      	eors	r2, r1
 800d6e8:	801a      	strh	r2, [r3, #0]
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	681b      	ldr	r3, [r3, #0]
 800d6ee:	183a      	adds	r2, r7, r0
 800d6f0:	8812      	ldrh	r2, [r2, #0]
 800d6f2:	4908      	ldr	r1, [pc, #32]	@ (800d714 <PCD_EP_ISR_Handler+0x350>)
 800d6f4:	430a      	orrs	r2, r1
 800d6f6:	b292      	uxth	r2, r2
 800d6f8:	801a      	strh	r2, [r3, #0]
 800d6fa:	e255      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
 800d6fc:	ffff8f0f 	.word	0xffff8f0f
 800d700:	ffff8000 	.word	0xffff8000
 800d704:	00000402 	.word	0x00000402
 800d708:	00000406 	.word	0x00000406
 800d70c:	00000f8f 	.word	0x00000f8f
 800d710:	ffffbf8f 	.word	0xffffbf8f
 800d714:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	681b      	ldr	r3, [r3, #0]
 800d71c:	001a      	movs	r2, r3
 800d71e:	204d      	movs	r0, #77	@ 0x4d
 800d720:	183b      	adds	r3, r7, r0
 800d722:	781b      	ldrb	r3, [r3, #0]
 800d724:	009b      	lsls	r3, r3, #2
 800d726:	18d2      	adds	r2, r2, r3
 800d728:	214a      	movs	r1, #74	@ 0x4a
 800d72a:	187b      	adds	r3, r7, r1
 800d72c:	8812      	ldrh	r2, [r2, #0]
 800d72e:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800d730:	187b      	adds	r3, r7, r1
 800d732:	2200      	movs	r2, #0
 800d734:	5e9b      	ldrsh	r3, [r3, r2]
 800d736:	2b00      	cmp	r3, #0
 800d738:	db00      	blt.n	800d73c <PCD_EP_ISR_Handler+0x378>
 800d73a:	e0fa      	b.n	800d932 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800d73c:	687b      	ldr	r3, [r7, #4]
 800d73e:	681b      	ldr	r3, [r3, #0]
 800d740:	001a      	movs	r2, r3
 800d742:	183b      	adds	r3, r7, r0
 800d744:	781b      	ldrb	r3, [r3, #0]
 800d746:	009b      	lsls	r3, r3, #2
 800d748:	18d3      	adds	r3, r2, r3
 800d74a:	881b      	ldrh	r3, [r3, #0]
 800d74c:	b29a      	uxth	r2, r3
 800d74e:	2448      	movs	r4, #72	@ 0x48
 800d750:	193b      	adds	r3, r7, r4
 800d752:	49d1      	ldr	r1, [pc, #836]	@ (800da98 <PCD_EP_ISR_Handler+0x6d4>)
 800d754:	400a      	ands	r2, r1
 800d756:	801a      	strh	r2, [r3, #0]
 800d758:	687b      	ldr	r3, [r7, #4]
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	001a      	movs	r2, r3
 800d75e:	183b      	adds	r3, r7, r0
 800d760:	781b      	ldrb	r3, [r3, #0]
 800d762:	009b      	lsls	r3, r3, #2
 800d764:	18d3      	adds	r3, r2, r3
 800d766:	193a      	adds	r2, r7, r4
 800d768:	8812      	ldrh	r2, [r2, #0]
 800d76a:	2180      	movs	r1, #128	@ 0x80
 800d76c:	430a      	orrs	r2, r1
 800d76e:	b292      	uxth	r2, r2
 800d770:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 800d772:	183b      	adds	r3, r7, r0
 800d774:	781a      	ldrb	r2, [r3, #0]
 800d776:	0013      	movs	r3, r2
 800d778:	009b      	lsls	r3, r3, #2
 800d77a:	189b      	adds	r3, r3, r2
 800d77c:	00db      	lsls	r3, r3, #3
 800d77e:	3369      	adds	r3, #105	@ 0x69
 800d780:	33ff      	adds	r3, #255	@ 0xff
 800d782:	687a      	ldr	r2, [r7, #4]
 800d784:	18d3      	adds	r3, r2, r3
 800d786:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800d788:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d78a:	7b1b      	ldrb	r3, [r3, #12]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d125      	bne.n	800d7dc <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	2250      	movs	r2, #80	@ 0x50
 800d796:	5a9b      	ldrh	r3, [r3, r2]
 800d798:	b29b      	uxth	r3, r3
 800d79a:	001a      	movs	r2, r3
 800d79c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d79e:	781b      	ldrb	r3, [r3, #0]
 800d7a0:	00db      	lsls	r3, r3, #3
 800d7a2:	18d2      	adds	r2, r2, r3
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	18d3      	adds	r3, r2, r3
 800d7aa:	4abc      	ldr	r2, [pc, #752]	@ (800da9c <PCD_EP_ISR_Handler+0x6d8>)
 800d7ac:	4694      	mov	ip, r2
 800d7ae:	4463      	add	r3, ip
 800d7b0:	881a      	ldrh	r2, [r3, #0]
 800d7b2:	2450      	movs	r4, #80	@ 0x50
 800d7b4:	193b      	adds	r3, r7, r4
 800d7b6:	0592      	lsls	r2, r2, #22
 800d7b8:	0d92      	lsrs	r2, r2, #22
 800d7ba:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 800d7bc:	193b      	adds	r3, r7, r4
 800d7be:	881b      	ldrh	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d100      	bne.n	800d7c6 <PCD_EP_ISR_Handler+0x402>
 800d7c4:	e08d      	b.n	800d8e2 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6818      	ldr	r0, [r3, #0]
 800d7ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7cc:	6959      	ldr	r1, [r3, #20]
 800d7ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7d0:	88da      	ldrh	r2, [r3, #6]
 800d7d2:	193b      	adds	r3, r7, r4
 800d7d4:	881b      	ldrh	r3, [r3, #0]
 800d7d6:	f005 ffaa 	bl	801372e <USB_ReadPMA>
 800d7da:	e082      	b.n	800d8e2 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800d7dc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d7de:	78db      	ldrb	r3, [r3, #3]
 800d7e0:	2b02      	cmp	r3, #2
 800d7e2:	d10c      	bne.n	800d7fe <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 800d7e4:	2350      	movs	r3, #80	@ 0x50
 800d7e6:	18fc      	adds	r4, r7, r3
 800d7e8:	234a      	movs	r3, #74	@ 0x4a
 800d7ea:	18fb      	adds	r3, r7, r3
 800d7ec:	881a      	ldrh	r2, [r3, #0]
 800d7ee:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	0018      	movs	r0, r3
 800d7f4:	f000 f9ec 	bl	800dbd0 <HAL_PCD_EP_DB_Receive>
 800d7f8:	0003      	movs	r3, r0
 800d7fa:	8023      	strh	r3, [r4, #0]
 800d7fc:	e071      	b.n	800d8e2 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	001a      	movs	r2, r3
 800d804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d806:	781b      	ldrb	r3, [r3, #0]
 800d808:	009b      	lsls	r3, r3, #2
 800d80a:	18d3      	adds	r3, r2, r3
 800d80c:	881b      	ldrh	r3, [r3, #0]
 800d80e:	b29a      	uxth	r2, r3
 800d810:	2052      	movs	r0, #82	@ 0x52
 800d812:	183b      	adds	r3, r7, r0
 800d814:	49a2      	ldr	r1, [pc, #648]	@ (800daa0 <PCD_EP_ISR_Handler+0x6dc>)
 800d816:	400a      	ands	r2, r1
 800d818:	801a      	strh	r2, [r3, #0]
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	681b      	ldr	r3, [r3, #0]
 800d81e:	001a      	movs	r2, r3
 800d820:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d822:	781b      	ldrb	r3, [r3, #0]
 800d824:	009b      	lsls	r3, r3, #2
 800d826:	18d3      	adds	r3, r2, r3
 800d828:	183a      	adds	r2, r7, r0
 800d82a:	8812      	ldrh	r2, [r2, #0]
 800d82c:	499d      	ldr	r1, [pc, #628]	@ (800daa4 <PCD_EP_ISR_Handler+0x6e0>)
 800d82e:	430a      	orrs	r2, r1
 800d830:	b292      	uxth	r2, r2
 800d832:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	001a      	movs	r2, r3
 800d83a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d83c:	781b      	ldrb	r3, [r3, #0]
 800d83e:	009b      	lsls	r3, r3, #2
 800d840:	18d3      	adds	r3, r2, r3
 800d842:	881b      	ldrh	r3, [r3, #0]
 800d844:	b29b      	uxth	r3, r3
 800d846:	001a      	movs	r2, r3
 800d848:	2380      	movs	r3, #128	@ 0x80
 800d84a:	01db      	lsls	r3, r3, #7
 800d84c:	4013      	ands	r3, r2
 800d84e:	d024      	beq.n	800d89a <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	2250      	movs	r2, #80	@ 0x50
 800d856:	5a9b      	ldrh	r3, [r3, r2]
 800d858:	b29b      	uxth	r3, r3
 800d85a:	001a      	movs	r2, r3
 800d85c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d85e:	781b      	ldrb	r3, [r3, #0]
 800d860:	00db      	lsls	r3, r3, #3
 800d862:	18d2      	adds	r2, r2, r3
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	681b      	ldr	r3, [r3, #0]
 800d868:	18d3      	adds	r3, r2, r3
 800d86a:	4a8f      	ldr	r2, [pc, #572]	@ (800daa8 <PCD_EP_ISR_Handler+0x6e4>)
 800d86c:	4694      	mov	ip, r2
 800d86e:	4463      	add	r3, ip
 800d870:	881a      	ldrh	r2, [r3, #0]
 800d872:	2450      	movs	r4, #80	@ 0x50
 800d874:	193b      	adds	r3, r7, r4
 800d876:	0592      	lsls	r2, r2, #22
 800d878:	0d92      	lsrs	r2, r2, #22
 800d87a:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800d87c:	193b      	adds	r3, r7, r4
 800d87e:	881b      	ldrh	r3, [r3, #0]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d02e      	beq.n	800d8e2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	6818      	ldr	r0, [r3, #0]
 800d888:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d88a:	6959      	ldr	r1, [r3, #20]
 800d88c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d88e:	891a      	ldrh	r2, [r3, #8]
 800d890:	193b      	adds	r3, r7, r4
 800d892:	881b      	ldrh	r3, [r3, #0]
 800d894:	f005 ff4b 	bl	801372e <USB_ReadPMA>
 800d898:	e023      	b.n	800d8e2 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	681b      	ldr	r3, [r3, #0]
 800d89e:	2250      	movs	r2, #80	@ 0x50
 800d8a0:	5a9b      	ldrh	r3, [r3, r2]
 800d8a2:	b29b      	uxth	r3, r3
 800d8a4:	001a      	movs	r2, r3
 800d8a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8a8:	781b      	ldrb	r3, [r3, #0]
 800d8aa:	00db      	lsls	r3, r3, #3
 800d8ac:	18d2      	adds	r2, r2, r3
 800d8ae:	687b      	ldr	r3, [r7, #4]
 800d8b0:	681b      	ldr	r3, [r3, #0]
 800d8b2:	18d3      	adds	r3, r2, r3
 800d8b4:	4a79      	ldr	r2, [pc, #484]	@ (800da9c <PCD_EP_ISR_Handler+0x6d8>)
 800d8b6:	4694      	mov	ip, r2
 800d8b8:	4463      	add	r3, ip
 800d8ba:	881a      	ldrh	r2, [r3, #0]
 800d8bc:	2450      	movs	r4, #80	@ 0x50
 800d8be:	193b      	adds	r3, r7, r4
 800d8c0:	0592      	lsls	r2, r2, #22
 800d8c2:	0d92      	lsrs	r2, r2, #22
 800d8c4:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 800d8c6:	193b      	adds	r3, r7, r4
 800d8c8:	881b      	ldrh	r3, [r3, #0]
 800d8ca:	2b00      	cmp	r3, #0
 800d8cc:	d009      	beq.n	800d8e2 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800d8ce:	687b      	ldr	r3, [r7, #4]
 800d8d0:	6818      	ldr	r0, [r3, #0]
 800d8d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8d4:	6959      	ldr	r1, [r3, #20]
 800d8d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8d8:	895a      	ldrh	r2, [r3, #10]
 800d8da:	193b      	adds	r3, r7, r4
 800d8dc:	881b      	ldrh	r3, [r3, #0]
 800d8de:	f005 ff26 	bl	801372e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 800d8e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8e4:	69da      	ldr	r2, [r3, #28]
 800d8e6:	2150      	movs	r1, #80	@ 0x50
 800d8e8:	187b      	adds	r3, r7, r1
 800d8ea:	881b      	ldrh	r3, [r3, #0]
 800d8ec:	18d2      	adds	r2, r2, r3
 800d8ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8f0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 800d8f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8f4:	695a      	ldr	r2, [r3, #20]
 800d8f6:	187b      	adds	r3, r7, r1
 800d8f8:	881b      	ldrh	r3, [r3, #0]
 800d8fa:	18d2      	adds	r2, r2, r3
 800d8fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d8fe:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800d900:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d902:	699b      	ldr	r3, [r3, #24]
 800d904:	2b00      	cmp	r3, #0
 800d906:	d005      	beq.n	800d914 <PCD_EP_ISR_Handler+0x550>
 800d908:	187b      	adds	r3, r7, r1
 800d90a:	881a      	ldrh	r2, [r3, #0]
 800d90c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d90e:	691b      	ldr	r3, [r3, #16]
 800d910:	429a      	cmp	r2, r3
 800d912:	d207      	bcs.n	800d924 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800d914:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d916:	781a      	ldrb	r2, [r3, #0]
 800d918:	687b      	ldr	r3, [r7, #4]
 800d91a:	0011      	movs	r1, r2
 800d91c:	0018      	movs	r0, r3
 800d91e:	f007 fe52 	bl	80155c6 <HAL_PCD_DataOutStageCallback>
 800d922:	e006      	b.n	800d932 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	681b      	ldr	r3, [r3, #0]
 800d928:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800d92a:	0011      	movs	r1, r2
 800d92c:	0018      	movs	r0, r3
 800d92e:	f004 fc43 	bl	80121b8 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800d932:	244a      	movs	r4, #74	@ 0x4a
 800d934:	193b      	adds	r3, r7, r4
 800d936:	881b      	ldrh	r3, [r3, #0]
 800d938:	2280      	movs	r2, #128	@ 0x80
 800d93a:	4013      	ands	r3, r2
 800d93c:	d100      	bne.n	800d940 <PCD_EP_ISR_Handler+0x57c>
 800d93e:	e133      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 800d940:	204d      	movs	r0, #77	@ 0x4d
 800d942:	183b      	adds	r3, r7, r0
 800d944:	781b      	ldrb	r3, [r3, #0]
 800d946:	1c5a      	adds	r2, r3, #1
 800d948:	0013      	movs	r3, r2
 800d94a:	009b      	lsls	r3, r3, #2
 800d94c:	189b      	adds	r3, r3, r2
 800d94e:	00db      	lsls	r3, r3, #3
 800d950:	687a      	ldr	r2, [r7, #4]
 800d952:	18d3      	adds	r3, r2, r3
 800d954:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	001a      	movs	r2, r3
 800d95c:	183b      	adds	r3, r7, r0
 800d95e:	781b      	ldrb	r3, [r3, #0]
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	18d3      	adds	r3, r2, r3
 800d964:	881b      	ldrh	r3, [r3, #0]
 800d966:	b29a      	uxth	r2, r3
 800d968:	2542      	movs	r5, #66	@ 0x42
 800d96a:	197b      	adds	r3, r7, r5
 800d96c:	494f      	ldr	r1, [pc, #316]	@ (800daac <PCD_EP_ISR_Handler+0x6e8>)
 800d96e:	400a      	ands	r2, r1
 800d970:	801a      	strh	r2, [r3, #0]
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	001a      	movs	r2, r3
 800d978:	183b      	adds	r3, r7, r0
 800d97a:	781b      	ldrb	r3, [r3, #0]
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	18d3      	adds	r3, r2, r3
 800d980:	197a      	adds	r2, r7, r5
 800d982:	8812      	ldrh	r2, [r2, #0]
 800d984:	494a      	ldr	r1, [pc, #296]	@ (800dab0 <PCD_EP_ISR_Handler+0x6ec>)
 800d986:	430a      	orrs	r2, r1
 800d988:	b292      	uxth	r2, r2
 800d98a:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 800d98c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d98e:	78db      	ldrb	r3, [r3, #3]
 800d990:	2b01      	cmp	r3, #1
 800d992:	d000      	beq.n	800d996 <PCD_EP_ISR_Handler+0x5d2>
 800d994:	e0af      	b.n	800daf6 <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 800d996:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d998:	2200      	movs	r2, #0
 800d99a:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 800d99c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d99e:	7b1b      	ldrb	r3, [r3, #12]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d100      	bne.n	800d9a6 <PCD_EP_ISR_Handler+0x5e2>
 800d9a4:	e09f      	b.n	800dae6 <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800d9a6:	193b      	adds	r3, r7, r4
 800d9a8:	881b      	ldrh	r3, [r3, #0]
 800d9aa:	2240      	movs	r2, #64	@ 0x40
 800d9ac:	4013      	ands	r3, r2
 800d9ae:	d046      	beq.n	800da3e <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800d9b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9b2:	785b      	ldrb	r3, [r3, #1]
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d125      	bne.n	800da04 <PCD_EP_ISR_Handler+0x640>
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	2250      	movs	r2, #80	@ 0x50
 800d9c4:	5a9b      	ldrh	r3, [r3, r2]
 800d9c6:	b29b      	uxth	r3, r3
 800d9c8:	001a      	movs	r2, r3
 800d9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9cc:	189b      	adds	r3, r3, r2
 800d9ce:	627b      	str	r3, [r7, #36]	@ 0x24
 800d9d0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800d9d2:	781b      	ldrb	r3, [r3, #0]
 800d9d4:	00da      	lsls	r2, r3, #3
 800d9d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d9d8:	18d3      	adds	r3, r2, r3
 800d9da:	4a33      	ldr	r2, [pc, #204]	@ (800daa8 <PCD_EP_ISR_Handler+0x6e4>)
 800d9dc:	4694      	mov	ip, r2
 800d9de:	4463      	add	r3, ip
 800d9e0:	623b      	str	r3, [r7, #32]
 800d9e2:	6a3b      	ldr	r3, [r7, #32]
 800d9e4:	881b      	ldrh	r3, [r3, #0]
 800d9e6:	b29b      	uxth	r3, r3
 800d9e8:	059b      	lsls	r3, r3, #22
 800d9ea:	0d9b      	lsrs	r3, r3, #22
 800d9ec:	b29a      	uxth	r2, r3
 800d9ee:	6a3b      	ldr	r3, [r7, #32]
 800d9f0:	801a      	strh	r2, [r3, #0]
 800d9f2:	6a3b      	ldr	r3, [r7, #32]
 800d9f4:	881b      	ldrh	r3, [r3, #0]
 800d9f6:	b29b      	uxth	r3, r3
 800d9f8:	4a2d      	ldr	r2, [pc, #180]	@ (800dab0 <PCD_EP_ISR_Handler+0x6ec>)
 800d9fa:	4313      	orrs	r3, r2
 800d9fc:	b29a      	uxth	r2, r3
 800d9fe:	6a3b      	ldr	r3, [r7, #32]
 800da00:	801a      	strh	r2, [r3, #0]
 800da02:	e070      	b.n	800dae6 <PCD_EP_ISR_Handler+0x722>
 800da04:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da06:	785b      	ldrb	r3, [r3, #1]
 800da08:	2b01      	cmp	r3, #1
 800da0a:	d16c      	bne.n	800dae6 <PCD_EP_ISR_Handler+0x722>
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da12:	687b      	ldr	r3, [r7, #4]
 800da14:	681b      	ldr	r3, [r3, #0]
 800da16:	2250      	movs	r2, #80	@ 0x50
 800da18:	5a9b      	ldrh	r3, [r3, r2]
 800da1a:	b29b      	uxth	r3, r3
 800da1c:	001a      	movs	r2, r3
 800da1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da20:	189b      	adds	r3, r3, r2
 800da22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800da24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da26:	781b      	ldrb	r3, [r3, #0]
 800da28:	00da      	lsls	r2, r3, #3
 800da2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da2c:	18d3      	adds	r3, r2, r3
 800da2e:	4a1e      	ldr	r2, [pc, #120]	@ (800daa8 <PCD_EP_ISR_Handler+0x6e4>)
 800da30:	4694      	mov	ip, r2
 800da32:	4463      	add	r3, ip
 800da34:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da38:	2200      	movs	r2, #0
 800da3a:	801a      	strh	r2, [r3, #0]
 800da3c:	e053      	b.n	800dae6 <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800da44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da46:	785b      	ldrb	r3, [r3, #1]
 800da48:	2b00      	cmp	r3, #0
 800da4a:	d133      	bne.n	800dab4 <PCD_EP_ISR_Handler+0x6f0>
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	681b      	ldr	r3, [r3, #0]
 800da50:	637b      	str	r3, [r7, #52]	@ 0x34
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	2250      	movs	r2, #80	@ 0x50
 800da58:	5a9b      	ldrh	r3, [r3, r2]
 800da5a:	b29b      	uxth	r3, r3
 800da5c:	001a      	movs	r2, r3
 800da5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da60:	189b      	adds	r3, r3, r2
 800da62:	637b      	str	r3, [r7, #52]	@ 0x34
 800da64:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800da66:	781b      	ldrb	r3, [r3, #0]
 800da68:	00da      	lsls	r2, r3, #3
 800da6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800da6c:	18d3      	adds	r3, r2, r3
 800da6e:	4a0b      	ldr	r2, [pc, #44]	@ (800da9c <PCD_EP_ISR_Handler+0x6d8>)
 800da70:	4694      	mov	ip, r2
 800da72:	4463      	add	r3, ip
 800da74:	633b      	str	r3, [r7, #48]	@ 0x30
 800da76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da78:	881b      	ldrh	r3, [r3, #0]
 800da7a:	b29b      	uxth	r3, r3
 800da7c:	059b      	lsls	r3, r3, #22
 800da7e:	0d9b      	lsrs	r3, r3, #22
 800da80:	b29a      	uxth	r2, r3
 800da82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da84:	801a      	strh	r2, [r3, #0]
 800da86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da88:	881b      	ldrh	r3, [r3, #0]
 800da8a:	b29b      	uxth	r3, r3
 800da8c:	4a08      	ldr	r2, [pc, #32]	@ (800dab0 <PCD_EP_ISR_Handler+0x6ec>)
 800da8e:	4313      	orrs	r3, r2
 800da90:	b29a      	uxth	r2, r3
 800da92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da94:	801a      	strh	r2, [r3, #0]
 800da96:	e026      	b.n	800dae6 <PCD_EP_ISR_Handler+0x722>
 800da98:	00000f8f 	.word	0x00000f8f
 800da9c:	00000406 	.word	0x00000406
 800daa0:	ffff8f8f 	.word	0xffff8f8f
 800daa4:	ffff80c0 	.word	0xffff80c0
 800daa8:	00000402 	.word	0x00000402
 800daac:	ffff8f0f 	.word	0xffff8f0f
 800dab0:	ffff8000 	.word	0xffff8000
 800dab4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dab6:	785b      	ldrb	r3, [r3, #1]
 800dab8:	2b01      	cmp	r3, #1
 800daba:	d114      	bne.n	800dae6 <PCD_EP_ISR_Handler+0x722>
 800dabc:	687b      	ldr	r3, [r7, #4]
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	2250      	movs	r2, #80	@ 0x50
 800dac2:	5a9b      	ldrh	r3, [r3, r2]
 800dac4:	b29b      	uxth	r3, r3
 800dac6:	001a      	movs	r2, r3
 800dac8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800daca:	189b      	adds	r3, r3, r2
 800dacc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dace:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dad0:	781b      	ldrb	r3, [r3, #0]
 800dad2:	00da      	lsls	r2, r3, #3
 800dad4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dad6:	18d3      	adds	r3, r2, r3
 800dad8:	4a3b      	ldr	r2, [pc, #236]	@ (800dbc8 <PCD_EP_ISR_Handler+0x804>)
 800dada:	4694      	mov	ip, r2
 800dadc:	4463      	add	r3, ip
 800dade:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dae2:	2200      	movs	r2, #0
 800dae4:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800dae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800dae8:	781a      	ldrb	r2, [r3, #0]
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	0011      	movs	r1, r2
 800daee:	0018      	movs	r0, r3
 800daf0:	f007 fd8a 	bl	8015608 <HAL_PCD_DataInStageCallback>
 800daf4:	e058      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 800daf6:	234a      	movs	r3, #74	@ 0x4a
 800daf8:	18fb      	adds	r3, r7, r3
 800dafa:	881a      	ldrh	r2, [r3, #0]
 800dafc:	2380      	movs	r3, #128	@ 0x80
 800dafe:	005b      	lsls	r3, r3, #1
 800db00:	4013      	ands	r3, r2
 800db02:	d149      	bne.n	800db98 <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2250      	movs	r2, #80	@ 0x50
 800db0a:	5a9b      	ldrh	r3, [r3, r2]
 800db0c:	b29b      	uxth	r3, r3
 800db0e:	001a      	movs	r2, r3
 800db10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	00db      	lsls	r3, r3, #3
 800db16:	18d2      	adds	r2, r2, r3
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	18d3      	adds	r3, r2, r3
 800db1e:	4a2b      	ldr	r2, [pc, #172]	@ (800dbcc <PCD_EP_ISR_Handler+0x808>)
 800db20:	4694      	mov	ip, r2
 800db22:	4463      	add	r3, ip
 800db24:	881a      	ldrh	r2, [r3, #0]
 800db26:	2140      	movs	r1, #64	@ 0x40
 800db28:	187b      	adds	r3, r7, r1
 800db2a:	0592      	lsls	r2, r2, #22
 800db2c:	0d92      	lsrs	r2, r2, #22
 800db2e:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 800db30:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db32:	699a      	ldr	r2, [r3, #24]
 800db34:	187b      	adds	r3, r7, r1
 800db36:	881b      	ldrh	r3, [r3, #0]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d907      	bls.n	800db4c <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 800db3c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db3e:	699a      	ldr	r2, [r3, #24]
 800db40:	187b      	adds	r3, r7, r1
 800db42:	881b      	ldrh	r3, [r3, #0]
 800db44:	1ad2      	subs	r2, r2, r3
 800db46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db48:	619a      	str	r2, [r3, #24]
 800db4a:	e002      	b.n	800db52 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 800db4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db4e:	2200      	movs	r2, #0
 800db50:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 800db52:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db54:	699b      	ldr	r3, [r3, #24]
 800db56:	2b00      	cmp	r3, #0
 800db58:	d107      	bne.n	800db6a <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800db5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db5c:	781a      	ldrb	r2, [r3, #0]
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	0011      	movs	r1, r2
 800db62:	0018      	movs	r0, r3
 800db64:	f007 fd50 	bl	8015608 <HAL_PCD_DataInStageCallback>
 800db68:	e01e      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800db6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db6c:	695a      	ldr	r2, [r3, #20]
 800db6e:	2140      	movs	r1, #64	@ 0x40
 800db70:	187b      	adds	r3, r7, r1
 800db72:	881b      	ldrh	r3, [r3, #0]
 800db74:	18d2      	adds	r2, r2, r3
 800db76:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db78:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800db7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db7c:	69da      	ldr	r2, [r3, #28]
 800db7e:	187b      	adds	r3, r7, r1
 800db80:	881b      	ldrh	r3, [r3, #0]
 800db82:	18d2      	adds	r2, r2, r3
 800db84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800db86:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	681b      	ldr	r3, [r3, #0]
 800db8c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800db8e:	0011      	movs	r1, r2
 800db90:	0018      	movs	r0, r3
 800db92:	f004 fb11 	bl	80121b8 <USB_EPStartXfer>
 800db96:	e007      	b.n	800dba8 <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 800db98:	234a      	movs	r3, #74	@ 0x4a
 800db9a:	18fb      	adds	r3, r7, r3
 800db9c:	881a      	ldrh	r2, [r3, #0]
 800db9e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	0018      	movs	r0, r3
 800dba4:	f000 f930 	bl	800de08 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800dba8:	687b      	ldr	r3, [r7, #4]
 800dbaa:	681b      	ldr	r3, [r3, #0]
 800dbac:	2244      	movs	r2, #68	@ 0x44
 800dbae:	5a9b      	ldrh	r3, [r3, r2]
 800dbb0:	b29b      	uxth	r3, r3
 800dbb2:	b21b      	sxth	r3, r3
 800dbb4:	2b00      	cmp	r3, #0
 800dbb6:	da01      	bge.n	800dbbc <PCD_EP_ISR_Handler+0x7f8>
 800dbb8:	f7ff fc0a 	bl	800d3d0 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 800dbbc:	2300      	movs	r3, #0
}
 800dbbe:	0018      	movs	r0, r3
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	b016      	add	sp, #88	@ 0x58
 800dbc4:	bdb0      	pop	{r4, r5, r7, pc}
 800dbc6:	46c0      	nop			@ (mov r8, r8)
 800dbc8:	00000406 	.word	0x00000406
 800dbcc:	00000402 	.word	0x00000402

0800dbd0 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800dbd0:	b590      	push	{r4, r7, lr}
 800dbd2:	b089      	sub	sp, #36	@ 0x24
 800dbd4:	af00      	add	r7, sp, #0
 800dbd6:	60f8      	str	r0, [r7, #12]
 800dbd8:	60b9      	str	r1, [r7, #8]
 800dbda:	1dbb      	adds	r3, r7, #6
 800dbdc:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800dbde:	1dbb      	adds	r3, r7, #6
 800dbe0:	881a      	ldrh	r2, [r3, #0]
 800dbe2:	2380      	movs	r3, #128	@ 0x80
 800dbe4:	01db      	lsls	r3, r3, #7
 800dbe6:	4013      	ands	r3, r2
 800dbe8:	d100      	bne.n	800dbec <HAL_PCD_EP_DB_Receive+0x1c>
 800dbea:	e07d      	b.n	800dce8 <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800dbec:	68fb      	ldr	r3, [r7, #12]
 800dbee:	681b      	ldr	r3, [r3, #0]
 800dbf0:	2250      	movs	r2, #80	@ 0x50
 800dbf2:	5a9b      	ldrh	r3, [r3, r2]
 800dbf4:	b29b      	uxth	r3, r3
 800dbf6:	001a      	movs	r2, r3
 800dbf8:	68bb      	ldr	r3, [r7, #8]
 800dbfa:	781b      	ldrb	r3, [r3, #0]
 800dbfc:	00db      	lsls	r3, r3, #3
 800dbfe:	18d2      	adds	r2, r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	681b      	ldr	r3, [r3, #0]
 800dc04:	18d3      	adds	r3, r2, r3
 800dc06:	4a7a      	ldr	r2, [pc, #488]	@ (800ddf0 <HAL_PCD_EP_DB_Receive+0x220>)
 800dc08:	4694      	mov	ip, r2
 800dc0a:	4463      	add	r3, ip
 800dc0c:	881a      	ldrh	r2, [r3, #0]
 800dc0e:	211a      	movs	r1, #26
 800dc10:	187b      	adds	r3, r7, r1
 800dc12:	0592      	lsls	r2, r2, #22
 800dc14:	0d92      	lsrs	r2, r2, #22
 800dc16:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dc18:	68bb      	ldr	r3, [r7, #8]
 800dc1a:	699a      	ldr	r2, [r3, #24]
 800dc1c:	187b      	adds	r3, r7, r1
 800dc1e:	881b      	ldrh	r3, [r3, #0]
 800dc20:	429a      	cmp	r2, r3
 800dc22:	d307      	bcc.n	800dc34 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 800dc24:	68bb      	ldr	r3, [r7, #8]
 800dc26:	699a      	ldr	r2, [r3, #24]
 800dc28:	187b      	adds	r3, r7, r1
 800dc2a:	881b      	ldrh	r3, [r3, #0]
 800dc2c:	1ad2      	subs	r2, r2, r3
 800dc2e:	68bb      	ldr	r3, [r7, #8]
 800dc30:	619a      	str	r2, [r3, #24]
 800dc32:	e002      	b.n	800dc3a <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	2200      	movs	r2, #0
 800dc38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dc3a:	68bb      	ldr	r3, [r7, #8]
 800dc3c:	699b      	ldr	r3, [r3, #24]
 800dc3e:	2b00      	cmp	r3, #0
 800dc40:	d121      	bne.n	800dc86 <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	001a      	movs	r2, r3
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	781b      	ldrb	r3, [r3, #0]
 800dc4c:	009b      	lsls	r3, r3, #2
 800dc4e:	18d3      	adds	r3, r2, r3
 800dc50:	881b      	ldrh	r3, [r3, #0]
 800dc52:	b29a      	uxth	r2, r3
 800dc54:	2018      	movs	r0, #24
 800dc56:	183b      	adds	r3, r7, r0
 800dc58:	4966      	ldr	r1, [pc, #408]	@ (800ddf4 <HAL_PCD_EP_DB_Receive+0x224>)
 800dc5a:	400a      	ands	r2, r1
 800dc5c:	801a      	strh	r2, [r3, #0]
 800dc5e:	183b      	adds	r3, r7, r0
 800dc60:	183a      	adds	r2, r7, r0
 800dc62:	8812      	ldrh	r2, [r2, #0]
 800dc64:	2180      	movs	r1, #128	@ 0x80
 800dc66:	0189      	lsls	r1, r1, #6
 800dc68:	404a      	eors	r2, r1
 800dc6a:	801a      	strh	r2, [r3, #0]
 800dc6c:	68fb      	ldr	r3, [r7, #12]
 800dc6e:	681b      	ldr	r3, [r3, #0]
 800dc70:	001a      	movs	r2, r3
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	009b      	lsls	r3, r3, #2
 800dc78:	18d3      	adds	r3, r2, r3
 800dc7a:	183a      	adds	r2, r7, r0
 800dc7c:	8812      	ldrh	r2, [r2, #0]
 800dc7e:	495e      	ldr	r1, [pc, #376]	@ (800ddf8 <HAL_PCD_EP_DB_Receive+0x228>)
 800dc80:	430a      	orrs	r2, r1
 800dc82:	b292      	uxth	r2, r2
 800dc84:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800dc86:	1dbb      	adds	r3, r7, #6
 800dc88:	881b      	ldrh	r3, [r3, #0]
 800dc8a:	2240      	movs	r2, #64	@ 0x40
 800dc8c:	4013      	ands	r3, r2
 800dc8e:	d01a      	beq.n	800dcc6 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800dc90:	68fb      	ldr	r3, [r7, #12]
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	001a      	movs	r2, r3
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	781b      	ldrb	r3, [r3, #0]
 800dc9a:	009b      	lsls	r3, r3, #2
 800dc9c:	18d3      	adds	r3, r2, r3
 800dc9e:	881b      	ldrh	r3, [r3, #0]
 800dca0:	b29a      	uxth	r2, r3
 800dca2:	2016      	movs	r0, #22
 800dca4:	183b      	adds	r3, r7, r0
 800dca6:	4955      	ldr	r1, [pc, #340]	@ (800ddfc <HAL_PCD_EP_DB_Receive+0x22c>)
 800dca8:	400a      	ands	r2, r1
 800dcaa:	801a      	strh	r2, [r3, #0]
 800dcac:	68fb      	ldr	r3, [r7, #12]
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	001a      	movs	r2, r3
 800dcb2:	68bb      	ldr	r3, [r7, #8]
 800dcb4:	781b      	ldrb	r3, [r3, #0]
 800dcb6:	009b      	lsls	r3, r3, #2
 800dcb8:	18d3      	adds	r3, r2, r3
 800dcba:	183a      	adds	r2, r7, r0
 800dcbc:	8812      	ldrh	r2, [r2, #0]
 800dcbe:	4950      	ldr	r1, [pc, #320]	@ (800de00 <HAL_PCD_EP_DB_Receive+0x230>)
 800dcc0:	430a      	orrs	r2, r1
 800dcc2:	b292      	uxth	r2, r2
 800dcc4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800dcc6:	241a      	movs	r4, #26
 800dcc8:	193b      	adds	r3, r7, r4
 800dcca:	881b      	ldrh	r3, [r3, #0]
 800dccc:	2b00      	cmp	r3, #0
 800dcce:	d100      	bne.n	800dcd2 <HAL_PCD_EP_DB_Receive+0x102>
 800dcd0:	e086      	b.n	800dde0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	6818      	ldr	r0, [r3, #0]
 800dcd6:	68bb      	ldr	r3, [r7, #8]
 800dcd8:	6959      	ldr	r1, [r3, #20]
 800dcda:	68bb      	ldr	r3, [r7, #8]
 800dcdc:	891a      	ldrh	r2, [r3, #8]
 800dcde:	193b      	adds	r3, r7, r4
 800dce0:	881b      	ldrh	r3, [r3, #0]
 800dce2:	f005 fd24 	bl	801372e <USB_ReadPMA>
 800dce6:	e07b      	b.n	800dde0 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800dce8:	68fb      	ldr	r3, [r7, #12]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	2250      	movs	r2, #80	@ 0x50
 800dcee:	5a9b      	ldrh	r3, [r3, r2]
 800dcf0:	b29b      	uxth	r3, r3
 800dcf2:	001a      	movs	r2, r3
 800dcf4:	68bb      	ldr	r3, [r7, #8]
 800dcf6:	781b      	ldrb	r3, [r3, #0]
 800dcf8:	00db      	lsls	r3, r3, #3
 800dcfa:	18d2      	adds	r2, r2, r3
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	18d3      	adds	r3, r2, r3
 800dd02:	4a40      	ldr	r2, [pc, #256]	@ (800de04 <HAL_PCD_EP_DB_Receive+0x234>)
 800dd04:	4694      	mov	ip, r2
 800dd06:	4463      	add	r3, ip
 800dd08:	881a      	ldrh	r2, [r3, #0]
 800dd0a:	211a      	movs	r1, #26
 800dd0c:	187b      	adds	r3, r7, r1
 800dd0e:	0592      	lsls	r2, r2, #22
 800dd10:	0d92      	lsrs	r2, r2, #22
 800dd12:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 800dd14:	68bb      	ldr	r3, [r7, #8]
 800dd16:	699a      	ldr	r2, [r3, #24]
 800dd18:	187b      	adds	r3, r7, r1
 800dd1a:	881b      	ldrh	r3, [r3, #0]
 800dd1c:	429a      	cmp	r2, r3
 800dd1e:	d307      	bcc.n	800dd30 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 800dd20:	68bb      	ldr	r3, [r7, #8]
 800dd22:	699a      	ldr	r2, [r3, #24]
 800dd24:	187b      	adds	r3, r7, r1
 800dd26:	881b      	ldrh	r3, [r3, #0]
 800dd28:	1ad2      	subs	r2, r2, r3
 800dd2a:	68bb      	ldr	r3, [r7, #8]
 800dd2c:	619a      	str	r2, [r3, #24]
 800dd2e:	e002      	b.n	800dd36 <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 800dd30:	68bb      	ldr	r3, [r7, #8]
 800dd32:	2200      	movs	r2, #0
 800dd34:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800dd36:	68bb      	ldr	r3, [r7, #8]
 800dd38:	699b      	ldr	r3, [r3, #24]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d121      	bne.n	800dd82 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800dd3e:	68fb      	ldr	r3, [r7, #12]
 800dd40:	681b      	ldr	r3, [r3, #0]
 800dd42:	001a      	movs	r2, r3
 800dd44:	68bb      	ldr	r3, [r7, #8]
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	009b      	lsls	r3, r3, #2
 800dd4a:	18d3      	adds	r3, r2, r3
 800dd4c:	881b      	ldrh	r3, [r3, #0]
 800dd4e:	b29a      	uxth	r2, r3
 800dd50:	201e      	movs	r0, #30
 800dd52:	183b      	adds	r3, r7, r0
 800dd54:	4927      	ldr	r1, [pc, #156]	@ (800ddf4 <HAL_PCD_EP_DB_Receive+0x224>)
 800dd56:	400a      	ands	r2, r1
 800dd58:	801a      	strh	r2, [r3, #0]
 800dd5a:	183b      	adds	r3, r7, r0
 800dd5c:	183a      	adds	r2, r7, r0
 800dd5e:	8812      	ldrh	r2, [r2, #0]
 800dd60:	2180      	movs	r1, #128	@ 0x80
 800dd62:	0189      	lsls	r1, r1, #6
 800dd64:	404a      	eors	r2, r1
 800dd66:	801a      	strh	r2, [r3, #0]
 800dd68:	68fb      	ldr	r3, [r7, #12]
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	001a      	movs	r2, r3
 800dd6e:	68bb      	ldr	r3, [r7, #8]
 800dd70:	781b      	ldrb	r3, [r3, #0]
 800dd72:	009b      	lsls	r3, r3, #2
 800dd74:	18d3      	adds	r3, r2, r3
 800dd76:	183a      	adds	r2, r7, r0
 800dd78:	8812      	ldrh	r2, [r2, #0]
 800dd7a:	491f      	ldr	r1, [pc, #124]	@ (800ddf8 <HAL_PCD_EP_DB_Receive+0x228>)
 800dd7c:	430a      	orrs	r2, r1
 800dd7e:	b292      	uxth	r2, r2
 800dd80:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800dd82:	1dbb      	adds	r3, r7, #6
 800dd84:	881b      	ldrh	r3, [r3, #0]
 800dd86:	2240      	movs	r2, #64	@ 0x40
 800dd88:	4013      	ands	r3, r2
 800dd8a:	d11a      	bne.n	800ddc2 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	001a      	movs	r2, r3
 800dd92:	68bb      	ldr	r3, [r7, #8]
 800dd94:	781b      	ldrb	r3, [r3, #0]
 800dd96:	009b      	lsls	r3, r3, #2
 800dd98:	18d3      	adds	r3, r2, r3
 800dd9a:	881b      	ldrh	r3, [r3, #0]
 800dd9c:	b29a      	uxth	r2, r3
 800dd9e:	201c      	movs	r0, #28
 800dda0:	183b      	adds	r3, r7, r0
 800dda2:	4916      	ldr	r1, [pc, #88]	@ (800ddfc <HAL_PCD_EP_DB_Receive+0x22c>)
 800dda4:	400a      	ands	r2, r1
 800dda6:	801a      	strh	r2, [r3, #0]
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	681b      	ldr	r3, [r3, #0]
 800ddac:	001a      	movs	r2, r3
 800ddae:	68bb      	ldr	r3, [r7, #8]
 800ddb0:	781b      	ldrb	r3, [r3, #0]
 800ddb2:	009b      	lsls	r3, r3, #2
 800ddb4:	18d3      	adds	r3, r2, r3
 800ddb6:	183a      	adds	r2, r7, r0
 800ddb8:	8812      	ldrh	r2, [r2, #0]
 800ddba:	4911      	ldr	r1, [pc, #68]	@ (800de00 <HAL_PCD_EP_DB_Receive+0x230>)
 800ddbc:	430a      	orrs	r2, r1
 800ddbe:	b292      	uxth	r2, r2
 800ddc0:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 800ddc2:	241a      	movs	r4, #26
 800ddc4:	193b      	adds	r3, r7, r4
 800ddc6:	881b      	ldrh	r3, [r3, #0]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d009      	beq.n	800dde0 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800ddcc:	68fb      	ldr	r3, [r7, #12]
 800ddce:	6818      	ldr	r0, [r3, #0]
 800ddd0:	68bb      	ldr	r3, [r7, #8]
 800ddd2:	6959      	ldr	r1, [r3, #20]
 800ddd4:	68bb      	ldr	r3, [r7, #8]
 800ddd6:	895a      	ldrh	r2, [r3, #10]
 800ddd8:	193b      	adds	r3, r7, r4
 800ddda:	881b      	ldrh	r3, [r3, #0]
 800dddc:	f005 fca7 	bl	801372e <USB_ReadPMA>
    }
  }

  return count;
 800dde0:	231a      	movs	r3, #26
 800dde2:	18fb      	adds	r3, r7, r3
 800dde4:	881b      	ldrh	r3, [r3, #0]
}
 800dde6:	0018      	movs	r0, r3
 800dde8:	46bd      	mov	sp, r7
 800ddea:	b009      	add	sp, #36	@ 0x24
 800ddec:	bd90      	pop	{r4, r7, pc}
 800ddee:	46c0      	nop			@ (mov r8, r8)
 800ddf0:	00000402 	.word	0x00000402
 800ddf4:	ffffbf8f 	.word	0xffffbf8f
 800ddf8:	ffff8080 	.word	0xffff8080
 800ddfc:	ffff8f8f 	.word	0xffff8f8f
 800de00:	ffff80c0 	.word	0xffff80c0
 800de04:	00000406 	.word	0x00000406

0800de08 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b0a4      	sub	sp, #144	@ 0x90
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	1dbb      	adds	r3, r7, #6
 800de14:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800de16:	1dbb      	adds	r3, r7, #6
 800de18:	881b      	ldrh	r3, [r3, #0]
 800de1a:	2240      	movs	r2, #64	@ 0x40
 800de1c:	4013      	ands	r3, r2
 800de1e:	d100      	bne.n	800de22 <HAL_PCD_EP_DB_Transmit+0x1a>
 800de20:	e1e4      	b.n	800e1ec <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	681b      	ldr	r3, [r3, #0]
 800de26:	2250      	movs	r2, #80	@ 0x50
 800de28:	5a9b      	ldrh	r3, [r3, r2]
 800de2a:	b29b      	uxth	r3, r3
 800de2c:	001a      	movs	r2, r3
 800de2e:	68bb      	ldr	r3, [r7, #8]
 800de30:	781b      	ldrb	r3, [r3, #0]
 800de32:	00db      	lsls	r3, r3, #3
 800de34:	18d2      	adds	r2, r2, r3
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	18d3      	adds	r3, r2, r3
 800de3c:	4ad0      	ldr	r2, [pc, #832]	@ (800e180 <HAL_PCD_EP_DB_Transmit+0x378>)
 800de3e:	4694      	mov	ip, r2
 800de40:	4463      	add	r3, ip
 800de42:	881a      	ldrh	r2, [r3, #0]
 800de44:	2186      	movs	r1, #134	@ 0x86
 800de46:	187b      	adds	r3, r7, r1
 800de48:	0592      	lsls	r2, r2, #22
 800de4a:	0d92      	lsrs	r2, r2, #22
 800de4c:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 800de4e:	68bb      	ldr	r3, [r7, #8]
 800de50:	699a      	ldr	r2, [r3, #24]
 800de52:	187b      	adds	r3, r7, r1
 800de54:	881b      	ldrh	r3, [r3, #0]
 800de56:	429a      	cmp	r2, r3
 800de58:	d907      	bls.n	800de6a <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 800de5a:	68bb      	ldr	r3, [r7, #8]
 800de5c:	699a      	ldr	r2, [r3, #24]
 800de5e:	187b      	adds	r3, r7, r1
 800de60:	881b      	ldrh	r3, [r3, #0]
 800de62:	1ad2      	subs	r2, r2, r3
 800de64:	68bb      	ldr	r3, [r7, #8]
 800de66:	619a      	str	r2, [r3, #24]
 800de68:	e002      	b.n	800de70 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 800de6a:	68bb      	ldr	r3, [r7, #8]
 800de6c:	2200      	movs	r2, #0
 800de6e:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800de70:	68bb      	ldr	r3, [r7, #8]
 800de72:	699b      	ldr	r3, [r3, #24]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d000      	beq.n	800de7a <HAL_PCD_EP_DB_Transmit+0x72>
 800de78:	e0b5      	b.n	800dfe6 <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	785b      	ldrb	r3, [r3, #1]
 800de7e:	2b00      	cmp	r3, #0
 800de80:	d125      	bne.n	800dece <HAL_PCD_EP_DB_Transmit+0xc6>
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	2250      	movs	r2, #80	@ 0x50
 800de8e:	5a9b      	ldrh	r3, [r3, r2]
 800de90:	b29b      	uxth	r3, r3
 800de92:	001a      	movs	r2, r3
 800de94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800de96:	189b      	adds	r3, r3, r2
 800de98:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800de9a:	68bb      	ldr	r3, [r7, #8]
 800de9c:	781b      	ldrb	r3, [r3, #0]
 800de9e:	00da      	lsls	r2, r3, #3
 800dea0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dea2:	18d3      	adds	r3, r2, r3
 800dea4:	4ab6      	ldr	r2, [pc, #728]	@ (800e180 <HAL_PCD_EP_DB_Transmit+0x378>)
 800dea6:	4694      	mov	ip, r2
 800dea8:	4463      	add	r3, ip
 800deaa:	62bb      	str	r3, [r7, #40]	@ 0x28
 800deac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deae:	881b      	ldrh	r3, [r3, #0]
 800deb0:	b29b      	uxth	r3, r3
 800deb2:	059b      	lsls	r3, r3, #22
 800deb4:	0d9b      	lsrs	r3, r3, #22
 800deb6:	b29a      	uxth	r2, r3
 800deb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deba:	801a      	strh	r2, [r3, #0]
 800debc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800debe:	881b      	ldrh	r3, [r3, #0]
 800dec0:	b29b      	uxth	r3, r3
 800dec2:	4ab0      	ldr	r2, [pc, #704]	@ (800e184 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800dec4:	4313      	orrs	r3, r2
 800dec6:	b29a      	uxth	r2, r3
 800dec8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800deca:	801a      	strh	r2, [r3, #0]
 800decc:	e01b      	b.n	800df06 <HAL_PCD_EP_DB_Transmit+0xfe>
 800dece:	68bb      	ldr	r3, [r7, #8]
 800ded0:	785b      	ldrb	r3, [r3, #1]
 800ded2:	2b01      	cmp	r3, #1
 800ded4:	d117      	bne.n	800df06 <HAL_PCD_EP_DB_Transmit+0xfe>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	681b      	ldr	r3, [r3, #0]
 800deda:	637b      	str	r3, [r7, #52]	@ 0x34
 800dedc:	68fb      	ldr	r3, [r7, #12]
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	2250      	movs	r2, #80	@ 0x50
 800dee2:	5a9b      	ldrh	r3, [r3, r2]
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	001a      	movs	r2, r3
 800dee8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800deea:	189b      	adds	r3, r3, r2
 800deec:	637b      	str	r3, [r7, #52]	@ 0x34
 800deee:	68bb      	ldr	r3, [r7, #8]
 800def0:	781b      	ldrb	r3, [r3, #0]
 800def2:	00da      	lsls	r2, r3, #3
 800def4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800def6:	18d3      	adds	r3, r2, r3
 800def8:	4aa1      	ldr	r2, [pc, #644]	@ (800e180 <HAL_PCD_EP_DB_Transmit+0x378>)
 800defa:	4694      	mov	ip, r2
 800defc:	4463      	add	r3, ip
 800defe:	633b      	str	r3, [r7, #48]	@ 0x30
 800df00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800df02:	2200      	movs	r2, #0
 800df04:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800df06:	68fb      	ldr	r3, [r7, #12]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	627b      	str	r3, [r7, #36]	@ 0x24
 800df0c:	68bb      	ldr	r3, [r7, #8]
 800df0e:	785b      	ldrb	r3, [r3, #1]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d125      	bne.n	800df60 <HAL_PCD_EP_DB_Transmit+0x158>
 800df14:	68fb      	ldr	r3, [r7, #12]
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	61fb      	str	r3, [r7, #28]
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	2250      	movs	r2, #80	@ 0x50
 800df20:	5a9b      	ldrh	r3, [r3, r2]
 800df22:	b29b      	uxth	r3, r3
 800df24:	001a      	movs	r2, r3
 800df26:	69fb      	ldr	r3, [r7, #28]
 800df28:	189b      	adds	r3, r3, r2
 800df2a:	61fb      	str	r3, [r7, #28]
 800df2c:	68bb      	ldr	r3, [r7, #8]
 800df2e:	781b      	ldrb	r3, [r3, #0]
 800df30:	00da      	lsls	r2, r3, #3
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	18d3      	adds	r3, r2, r3
 800df36:	4a94      	ldr	r2, [pc, #592]	@ (800e188 <HAL_PCD_EP_DB_Transmit+0x380>)
 800df38:	4694      	mov	ip, r2
 800df3a:	4463      	add	r3, ip
 800df3c:	61bb      	str	r3, [r7, #24]
 800df3e:	69bb      	ldr	r3, [r7, #24]
 800df40:	881b      	ldrh	r3, [r3, #0]
 800df42:	b29b      	uxth	r3, r3
 800df44:	059b      	lsls	r3, r3, #22
 800df46:	0d9b      	lsrs	r3, r3, #22
 800df48:	b29a      	uxth	r2, r3
 800df4a:	69bb      	ldr	r3, [r7, #24]
 800df4c:	801a      	strh	r2, [r3, #0]
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	881b      	ldrh	r3, [r3, #0]
 800df52:	b29b      	uxth	r3, r3
 800df54:	4a8b      	ldr	r2, [pc, #556]	@ (800e184 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800df56:	4313      	orrs	r3, r2
 800df58:	b29a      	uxth	r2, r3
 800df5a:	69bb      	ldr	r3, [r7, #24]
 800df5c:	801a      	strh	r2, [r3, #0]
 800df5e:	e018      	b.n	800df92 <HAL_PCD_EP_DB_Transmit+0x18a>
 800df60:	68bb      	ldr	r3, [r7, #8]
 800df62:	785b      	ldrb	r3, [r3, #1]
 800df64:	2b01      	cmp	r3, #1
 800df66:	d114      	bne.n	800df92 <HAL_PCD_EP_DB_Transmit+0x18a>
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	681b      	ldr	r3, [r3, #0]
 800df6c:	2250      	movs	r2, #80	@ 0x50
 800df6e:	5a9b      	ldrh	r3, [r3, r2]
 800df70:	b29b      	uxth	r3, r3
 800df72:	001a      	movs	r2, r3
 800df74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df76:	189b      	adds	r3, r3, r2
 800df78:	627b      	str	r3, [r7, #36]	@ 0x24
 800df7a:	68bb      	ldr	r3, [r7, #8]
 800df7c:	781b      	ldrb	r3, [r3, #0]
 800df7e:	00da      	lsls	r2, r3, #3
 800df80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800df82:	18d3      	adds	r3, r2, r3
 800df84:	4a80      	ldr	r2, [pc, #512]	@ (800e188 <HAL_PCD_EP_DB_Transmit+0x380>)
 800df86:	4694      	mov	ip, r2
 800df88:	4463      	add	r3, ip
 800df8a:	623b      	str	r3, [r7, #32]
 800df8c:	6a3b      	ldr	r3, [r7, #32]
 800df8e:	2200      	movs	r2, #0
 800df90:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	781a      	ldrb	r2, [r3, #0]
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	0011      	movs	r1, r2
 800df9a:	0018      	movs	r0, r3
 800df9c:	f007 fb34 	bl	8015608 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800dfa0:	1dbb      	adds	r3, r7, #6
 800dfa2:	881a      	ldrh	r2, [r3, #0]
 800dfa4:	2380      	movs	r3, #128	@ 0x80
 800dfa6:	01db      	lsls	r3, r3, #7
 800dfa8:	4013      	ands	r3, r2
 800dfaa:	d100      	bne.n	800dfae <HAL_PCD_EP_DB_Transmit+0x1a6>
 800dfac:	e309      	b.n	800e5c2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800dfae:	68fb      	ldr	r3, [r7, #12]
 800dfb0:	681b      	ldr	r3, [r3, #0]
 800dfb2:	001a      	movs	r2, r3
 800dfb4:	68bb      	ldr	r3, [r7, #8]
 800dfb6:	781b      	ldrb	r3, [r3, #0]
 800dfb8:	009b      	lsls	r3, r3, #2
 800dfba:	18d3      	adds	r3, r2, r3
 800dfbc:	881b      	ldrh	r3, [r3, #0]
 800dfbe:	b29a      	uxth	r2, r3
 800dfc0:	2016      	movs	r0, #22
 800dfc2:	183b      	adds	r3, r7, r0
 800dfc4:	4971      	ldr	r1, [pc, #452]	@ (800e18c <HAL_PCD_EP_DB_Transmit+0x384>)
 800dfc6:	400a      	ands	r2, r1
 800dfc8:	801a      	strh	r2, [r3, #0]
 800dfca:	68fb      	ldr	r3, [r7, #12]
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	001a      	movs	r2, r3
 800dfd0:	68bb      	ldr	r3, [r7, #8]
 800dfd2:	781b      	ldrb	r3, [r3, #0]
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	18d3      	adds	r3, r2, r3
 800dfd8:	183a      	adds	r2, r7, r0
 800dfda:	8812      	ldrh	r2, [r2, #0]
 800dfdc:	496c      	ldr	r1, [pc, #432]	@ (800e190 <HAL_PCD_EP_DB_Transmit+0x388>)
 800dfde:	430a      	orrs	r2, r1
 800dfe0:	b292      	uxth	r2, r2
 800dfe2:	801a      	strh	r2, [r3, #0]
 800dfe4:	e2ed      	b.n	800e5c2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800dfe6:	1dbb      	adds	r3, r7, #6
 800dfe8:	881a      	ldrh	r2, [r3, #0]
 800dfea:	2380      	movs	r3, #128	@ 0x80
 800dfec:	01db      	lsls	r3, r3, #7
 800dfee:	4013      	ands	r3, r2
 800dff0:	d01a      	beq.n	800e028 <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800dff2:	68fb      	ldr	r3, [r7, #12]
 800dff4:	681b      	ldr	r3, [r3, #0]
 800dff6:	001a      	movs	r2, r3
 800dff8:	68bb      	ldr	r3, [r7, #8]
 800dffa:	781b      	ldrb	r3, [r3, #0]
 800dffc:	009b      	lsls	r3, r3, #2
 800dffe:	18d3      	adds	r3, r2, r3
 800e000:	881b      	ldrh	r3, [r3, #0]
 800e002:	b29a      	uxth	r2, r3
 800e004:	208a      	movs	r0, #138	@ 0x8a
 800e006:	183b      	adds	r3, r7, r0
 800e008:	4960      	ldr	r1, [pc, #384]	@ (800e18c <HAL_PCD_EP_DB_Transmit+0x384>)
 800e00a:	400a      	ands	r2, r1
 800e00c:	801a      	strh	r2, [r3, #0]
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	681b      	ldr	r3, [r3, #0]
 800e012:	001a      	movs	r2, r3
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	781b      	ldrb	r3, [r3, #0]
 800e018:	009b      	lsls	r3, r3, #2
 800e01a:	18d3      	adds	r3, r2, r3
 800e01c:	183a      	adds	r2, r7, r0
 800e01e:	8812      	ldrh	r2, [r2, #0]
 800e020:	495b      	ldr	r1, [pc, #364]	@ (800e190 <HAL_PCD_EP_DB_Transmit+0x388>)
 800e022:	430a      	orrs	r2, r1
 800e024:	b292      	uxth	r2, r2
 800e026:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	2224      	movs	r2, #36	@ 0x24
 800e02c:	5c9b      	ldrb	r3, [r3, r2]
 800e02e:	2b01      	cmp	r3, #1
 800e030:	d000      	beq.n	800e034 <HAL_PCD_EP_DB_Transmit+0x22c>
 800e032:	e2c6      	b.n	800e5c2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e034:	68bb      	ldr	r3, [r7, #8]
 800e036:	695a      	ldr	r2, [r3, #20]
 800e038:	2186      	movs	r1, #134	@ 0x86
 800e03a:	187b      	adds	r3, r7, r1
 800e03c:	881b      	ldrh	r3, [r3, #0]
 800e03e:	18d2      	adds	r2, r2, r3
 800e040:	68bb      	ldr	r3, [r7, #8]
 800e042:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e044:	68bb      	ldr	r3, [r7, #8]
 800e046:	69da      	ldr	r2, [r3, #28]
 800e048:	187b      	adds	r3, r7, r1
 800e04a:	881b      	ldrh	r3, [r3, #0]
 800e04c:	18d2      	adds	r2, r2, r3
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e052:	68bb      	ldr	r3, [r7, #8]
 800e054:	6a1a      	ldr	r2, [r3, #32]
 800e056:	68bb      	ldr	r3, [r7, #8]
 800e058:	691b      	ldr	r3, [r3, #16]
 800e05a:	429a      	cmp	r2, r3
 800e05c:	d30c      	bcc.n	800e078 <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 800e05e:	68bb      	ldr	r3, [r7, #8]
 800e060:	691b      	ldr	r3, [r3, #16]
 800e062:	218c      	movs	r1, #140	@ 0x8c
 800e064:	187a      	adds	r2, r7, r1
 800e066:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e068:	68bb      	ldr	r3, [r7, #8]
 800e06a:	6a1a      	ldr	r2, [r3, #32]
 800e06c:	187b      	adds	r3, r7, r1
 800e06e:	681b      	ldr	r3, [r3, #0]
 800e070:	1ad2      	subs	r2, r2, r3
 800e072:	68bb      	ldr	r3, [r7, #8]
 800e074:	621a      	str	r2, [r3, #32]
 800e076:	e01a      	b.n	800e0ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 800e078:	68bb      	ldr	r3, [r7, #8]
 800e07a:	6a1b      	ldr	r3, [r3, #32]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d10a      	bne.n	800e096 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 800e080:	2386      	movs	r3, #134	@ 0x86
 800e082:	18fb      	adds	r3, r7, r3
 800e084:	881b      	ldrh	r3, [r3, #0]
 800e086:	228c      	movs	r2, #140	@ 0x8c
 800e088:	18ba      	adds	r2, r7, r2
 800e08a:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e08c:	68bb      	ldr	r3, [r7, #8]
 800e08e:	2224      	movs	r2, #36	@ 0x24
 800e090:	2100      	movs	r1, #0
 800e092:	5499      	strb	r1, [r3, r2]
 800e094:	e00b      	b.n	800e0ae <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800e096:	68bb      	ldr	r3, [r7, #8]
 800e098:	2224      	movs	r2, #36	@ 0x24
 800e09a:	2100      	movs	r1, #0
 800e09c:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 800e09e:	68bb      	ldr	r3, [r7, #8]
 800e0a0:	6a1b      	ldr	r3, [r3, #32]
 800e0a2:	228c      	movs	r2, #140	@ 0x8c
 800e0a4:	18ba      	adds	r2, r7, r2
 800e0a6:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e0a8:	68bb      	ldr	r3, [r7, #8]
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e0ae:	68bb      	ldr	r3, [r7, #8]
 800e0b0:	785b      	ldrb	r3, [r3, #1]
 800e0b2:	2b00      	cmp	r3, #0
 800e0b4:	d000      	beq.n	800e0b8 <HAL_PCD_EP_DB_Transmit+0x2b0>
 800e0b6:	e06d      	b.n	800e194 <HAL_PCD_EP_DB_Transmit+0x38c>
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	681b      	ldr	r3, [r3, #0]
 800e0bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2250      	movs	r2, #80	@ 0x50
 800e0c4:	5a9b      	ldrh	r3, [r3, r2]
 800e0c6:	b29b      	uxth	r3, r3
 800e0c8:	001a      	movs	r2, r3
 800e0ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0cc:	189b      	adds	r3, r3, r2
 800e0ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e0d0:	68bb      	ldr	r3, [r7, #8]
 800e0d2:	781b      	ldrb	r3, [r3, #0]
 800e0d4:	00da      	lsls	r2, r3, #3
 800e0d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e0d8:	18d3      	adds	r3, r2, r3
 800e0da:	4a29      	ldr	r2, [pc, #164]	@ (800e180 <HAL_PCD_EP_DB_Transmit+0x378>)
 800e0dc:	4694      	mov	ip, r2
 800e0de:	4463      	add	r3, ip
 800e0e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800e0e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0e4:	881b      	ldrh	r3, [r3, #0]
 800e0e6:	b29b      	uxth	r3, r3
 800e0e8:	059b      	lsls	r3, r3, #22
 800e0ea:	0d9b      	lsrs	r3, r3, #22
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e0f0:	801a      	strh	r2, [r3, #0]
 800e0f2:	228c      	movs	r2, #140	@ 0x8c
 800e0f4:	18bb      	adds	r3, r7, r2
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	2b3e      	cmp	r3, #62	@ 0x3e
 800e0fa:	d91a      	bls.n	800e132 <HAL_PCD_EP_DB_Transmit+0x32a>
 800e0fc:	18bb      	adds	r3, r7, r2
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	095b      	lsrs	r3, r3, #5
 800e102:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e104:	18bb      	adds	r3, r7, r2
 800e106:	681b      	ldr	r3, [r3, #0]
 800e108:	221f      	movs	r2, #31
 800e10a:	4013      	ands	r3, r2
 800e10c:	d102      	bne.n	800e114 <HAL_PCD_EP_DB_Transmit+0x30c>
 800e10e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e110:	3b01      	subs	r3, #1
 800e112:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e116:	881b      	ldrh	r3, [r3, #0]
 800e118:	b29a      	uxth	r2, r3
 800e11a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e11c:	b29b      	uxth	r3, r3
 800e11e:	029b      	lsls	r3, r3, #10
 800e120:	b29b      	uxth	r3, r3
 800e122:	4313      	orrs	r3, r2
 800e124:	b29b      	uxth	r3, r3
 800e126:	4a17      	ldr	r2, [pc, #92]	@ (800e184 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e128:	4313      	orrs	r3, r2
 800e12a:	b29a      	uxth	r2, r3
 800e12c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e12e:	801a      	strh	r2, [r3, #0]
 800e130:	e04f      	b.n	800e1d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e132:	238c      	movs	r3, #140	@ 0x8c
 800e134:	18fb      	adds	r3, r7, r3
 800e136:	681b      	ldr	r3, [r3, #0]
 800e138:	2b00      	cmp	r3, #0
 800e13a:	d108      	bne.n	800e14e <HAL_PCD_EP_DB_Transmit+0x346>
 800e13c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e13e:	881b      	ldrh	r3, [r3, #0]
 800e140:	b29b      	uxth	r3, r3
 800e142:	4a10      	ldr	r2, [pc, #64]	@ (800e184 <HAL_PCD_EP_DB_Transmit+0x37c>)
 800e144:	4313      	orrs	r3, r2
 800e146:	b29a      	uxth	r2, r3
 800e148:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e14a:	801a      	strh	r2, [r3, #0]
 800e14c:	e041      	b.n	800e1d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e14e:	228c      	movs	r2, #140	@ 0x8c
 800e150:	18bb      	adds	r3, r7, r2
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	085b      	lsrs	r3, r3, #1
 800e156:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e158:	18bb      	adds	r3, r7, r2
 800e15a:	681b      	ldr	r3, [r3, #0]
 800e15c:	2201      	movs	r2, #1
 800e15e:	4013      	ands	r3, r2
 800e160:	d002      	beq.n	800e168 <HAL_PCD_EP_DB_Transmit+0x360>
 800e162:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e164:	3301      	adds	r3, #1
 800e166:	64bb      	str	r3, [r7, #72]	@ 0x48
 800e168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e16a:	881b      	ldrh	r3, [r3, #0]
 800e16c:	b29a      	uxth	r2, r3
 800e16e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800e170:	b29b      	uxth	r3, r3
 800e172:	029b      	lsls	r3, r3, #10
 800e174:	b29b      	uxth	r3, r3
 800e176:	4313      	orrs	r3, r2
 800e178:	b29a      	uxth	r2, r3
 800e17a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e17c:	801a      	strh	r2, [r3, #0]
 800e17e:	e028      	b.n	800e1d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e180:	00000402 	.word	0x00000402
 800e184:	ffff8000 	.word	0xffff8000
 800e188:	00000406 	.word	0x00000406
 800e18c:	ffff8f8f 	.word	0xffff8f8f
 800e190:	ffffc080 	.word	0xffffc080
 800e194:	68bb      	ldr	r3, [r7, #8]
 800e196:	785b      	ldrb	r3, [r3, #1]
 800e198:	2b01      	cmp	r3, #1
 800e19a:	d11a      	bne.n	800e1d2 <HAL_PCD_EP_DB_Transmit+0x3ca>
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2250      	movs	r2, #80	@ 0x50
 800e1a8:	5a9b      	ldrh	r3, [r3, r2]
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	001a      	movs	r2, r3
 800e1ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1b0:	189b      	adds	r3, r3, r2
 800e1b2:	647b      	str	r3, [r7, #68]	@ 0x44
 800e1b4:	68bb      	ldr	r3, [r7, #8]
 800e1b6:	781b      	ldrb	r3, [r3, #0]
 800e1b8:	00da      	lsls	r2, r3, #3
 800e1ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e1bc:	18d3      	adds	r3, r2, r3
 800e1be:	4adb      	ldr	r2, [pc, #876]	@ (800e52c <HAL_PCD_EP_DB_Transmit+0x724>)
 800e1c0:	4694      	mov	ip, r2
 800e1c2:	4463      	add	r3, ip
 800e1c4:	643b      	str	r3, [r7, #64]	@ 0x40
 800e1c6:	238c      	movs	r3, #140	@ 0x8c
 800e1c8:	18fb      	adds	r3, r7, r3
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	b29a      	uxth	r2, r3
 800e1ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e1d0:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800e1d2:	68fb      	ldr	r3, [r7, #12]
 800e1d4:	6818      	ldr	r0, [r3, #0]
 800e1d6:	68bb      	ldr	r3, [r7, #8]
 800e1d8:	6959      	ldr	r1, [r3, #20]
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	891a      	ldrh	r2, [r3, #8]
 800e1de:	238c      	movs	r3, #140	@ 0x8c
 800e1e0:	18fb      	adds	r3, r7, r3
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	b29b      	uxth	r3, r3
 800e1e6:	f005 fa59 	bl	801369c <USB_WritePMA>
 800e1ea:	e1ea      	b.n	800e5c2 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2250      	movs	r2, #80	@ 0x50
 800e1f2:	5a9b      	ldrh	r3, [r3, r2]
 800e1f4:	b29b      	uxth	r3, r3
 800e1f6:	001a      	movs	r2, r3
 800e1f8:	68bb      	ldr	r3, [r7, #8]
 800e1fa:	781b      	ldrb	r3, [r3, #0]
 800e1fc:	00db      	lsls	r3, r3, #3
 800e1fe:	18d2      	adds	r2, r2, r3
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	18d3      	adds	r3, r2, r3
 800e206:	4aca      	ldr	r2, [pc, #808]	@ (800e530 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e208:	4694      	mov	ip, r2
 800e20a:	4463      	add	r3, ip
 800e20c:	881a      	ldrh	r2, [r3, #0]
 800e20e:	2186      	movs	r1, #134	@ 0x86
 800e210:	187b      	adds	r3, r7, r1
 800e212:	0592      	lsls	r2, r2, #22
 800e214:	0d92      	lsrs	r2, r2, #22
 800e216:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 800e218:	68bb      	ldr	r3, [r7, #8]
 800e21a:	699a      	ldr	r2, [r3, #24]
 800e21c:	187b      	adds	r3, r7, r1
 800e21e:	881b      	ldrh	r3, [r3, #0]
 800e220:	429a      	cmp	r2, r3
 800e222:	d307      	bcc.n	800e234 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 800e224:	68bb      	ldr	r3, [r7, #8]
 800e226:	699a      	ldr	r2, [r3, #24]
 800e228:	187b      	adds	r3, r7, r1
 800e22a:	881b      	ldrh	r3, [r3, #0]
 800e22c:	1ad2      	subs	r2, r2, r3
 800e22e:	68bb      	ldr	r3, [r7, #8]
 800e230:	619a      	str	r2, [r3, #24]
 800e232:	e002      	b.n	800e23a <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 800e234:	68bb      	ldr	r3, [r7, #8]
 800e236:	2200      	movs	r2, #0
 800e238:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800e23a:	68bb      	ldr	r3, [r7, #8]
 800e23c:	699b      	ldr	r3, [r3, #24]
 800e23e:	2b00      	cmp	r3, #0
 800e240:	d000      	beq.n	800e244 <HAL_PCD_EP_DB_Transmit+0x43c>
 800e242:	e0bb      	b.n	800e3bc <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e244:	68bb      	ldr	r3, [r7, #8]
 800e246:	785b      	ldrb	r3, [r3, #1]
 800e248:	2b00      	cmp	r3, #0
 800e24a:	d125      	bne.n	800e298 <HAL_PCD_EP_DB_Transmit+0x490>
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	681b      	ldr	r3, [r3, #0]
 800e256:	2250      	movs	r2, #80	@ 0x50
 800e258:	5a9b      	ldrh	r3, [r3, r2]
 800e25a:	b29b      	uxth	r3, r3
 800e25c:	001a      	movs	r2, r3
 800e25e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e260:	189b      	adds	r3, r3, r2
 800e262:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800e264:	68bb      	ldr	r3, [r7, #8]
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	00da      	lsls	r2, r3, #3
 800e26a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800e26c:	18d3      	adds	r3, r2, r3
 800e26e:	4aaf      	ldr	r2, [pc, #700]	@ (800e52c <HAL_PCD_EP_DB_Transmit+0x724>)
 800e270:	4694      	mov	ip, r2
 800e272:	4463      	add	r3, ip
 800e274:	67bb      	str	r3, [r7, #120]	@ 0x78
 800e276:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e278:	881b      	ldrh	r3, [r3, #0]
 800e27a:	b29b      	uxth	r3, r3
 800e27c:	059b      	lsls	r3, r3, #22
 800e27e:	0d9b      	lsrs	r3, r3, #22
 800e280:	b29a      	uxth	r2, r3
 800e282:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e284:	801a      	strh	r2, [r3, #0]
 800e286:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e288:	881b      	ldrh	r3, [r3, #0]
 800e28a:	b29b      	uxth	r3, r3
 800e28c:	4aa9      	ldr	r2, [pc, #676]	@ (800e534 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e28e:	4313      	orrs	r3, r2
 800e290:	b29a      	uxth	r2, r3
 800e292:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800e294:	801a      	strh	r2, [r3, #0]
 800e296:	e01b      	b.n	800e2d0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e298:	68bb      	ldr	r3, [r7, #8]
 800e29a:	785b      	ldrb	r3, [r3, #1]
 800e29c:	2b01      	cmp	r3, #1
 800e29e:	d117      	bne.n	800e2d0 <HAL_PCD_EP_DB_Transmit+0x4c8>
 800e2a0:	68fb      	ldr	r3, [r7, #12]
 800e2a2:	681b      	ldr	r3, [r3, #0]
 800e2a4:	667b      	str	r3, [r7, #100]	@ 0x64
 800e2a6:	68fb      	ldr	r3, [r7, #12]
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2250      	movs	r2, #80	@ 0x50
 800e2ac:	5a9b      	ldrh	r3, [r3, r2]
 800e2ae:	b29b      	uxth	r3, r3
 800e2b0:	001a      	movs	r2, r3
 800e2b2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e2b4:	189b      	adds	r3, r3, r2
 800e2b6:	667b      	str	r3, [r7, #100]	@ 0x64
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	781b      	ldrb	r3, [r3, #0]
 800e2bc:	00da      	lsls	r2, r3, #3
 800e2be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e2c0:	18d3      	adds	r3, r2, r3
 800e2c2:	4a9a      	ldr	r2, [pc, #616]	@ (800e52c <HAL_PCD_EP_DB_Transmit+0x724>)
 800e2c4:	4694      	mov	ip, r2
 800e2c6:	4463      	add	r3, ip
 800e2c8:	663b      	str	r3, [r7, #96]	@ 0x60
 800e2ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800e2cc:	2200      	movs	r2, #0
 800e2ce:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	677b      	str	r3, [r7, #116]	@ 0x74
 800e2d6:	68bb      	ldr	r3, [r7, #8]
 800e2d8:	785b      	ldrb	r3, [r3, #1]
 800e2da:	2b00      	cmp	r3, #0
 800e2dc:	d12b      	bne.n	800e336 <HAL_PCD_EP_DB_Transmit+0x52e>
 800e2de:	68fb      	ldr	r3, [r7, #12]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	681b      	ldr	r3, [r3, #0]
 800e2e8:	2250      	movs	r2, #80	@ 0x50
 800e2ea:	5a9b      	ldrh	r3, [r3, r2]
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	001a      	movs	r2, r3
 800e2f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2f2:	189b      	adds	r3, r3, r2
 800e2f4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800e2f6:	68bb      	ldr	r3, [r7, #8]
 800e2f8:	781b      	ldrb	r3, [r3, #0]
 800e2fa:	00da      	lsls	r2, r3, #3
 800e2fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800e2fe:	18d3      	adds	r3, r2, r3
 800e300:	4a8b      	ldr	r2, [pc, #556]	@ (800e530 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e302:	4694      	mov	ip, r2
 800e304:	4463      	add	r3, ip
 800e306:	2180      	movs	r1, #128	@ 0x80
 800e308:	187a      	adds	r2, r7, r1
 800e30a:	6013      	str	r3, [r2, #0]
 800e30c:	187b      	adds	r3, r7, r1
 800e30e:	681b      	ldr	r3, [r3, #0]
 800e310:	881b      	ldrh	r3, [r3, #0]
 800e312:	b29b      	uxth	r3, r3
 800e314:	059b      	lsls	r3, r3, #22
 800e316:	0d9b      	lsrs	r3, r3, #22
 800e318:	b29a      	uxth	r2, r3
 800e31a:	187b      	adds	r3, r7, r1
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	801a      	strh	r2, [r3, #0]
 800e320:	187b      	adds	r3, r7, r1
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	881b      	ldrh	r3, [r3, #0]
 800e326:	b29b      	uxth	r3, r3
 800e328:	4a82      	ldr	r2, [pc, #520]	@ (800e534 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e32a:	4313      	orrs	r3, r2
 800e32c:	b29a      	uxth	r2, r3
 800e32e:	187b      	adds	r3, r7, r1
 800e330:	681b      	ldr	r3, [r3, #0]
 800e332:	801a      	strh	r2, [r3, #0]
 800e334:	e018      	b.n	800e368 <HAL_PCD_EP_DB_Transmit+0x560>
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	785b      	ldrb	r3, [r3, #1]
 800e33a:	2b01      	cmp	r3, #1
 800e33c:	d114      	bne.n	800e368 <HAL_PCD_EP_DB_Transmit+0x560>
 800e33e:	68fb      	ldr	r3, [r7, #12]
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2250      	movs	r2, #80	@ 0x50
 800e344:	5a9b      	ldrh	r3, [r3, r2]
 800e346:	b29b      	uxth	r3, r3
 800e348:	001a      	movs	r2, r3
 800e34a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e34c:	189b      	adds	r3, r3, r2
 800e34e:	677b      	str	r3, [r7, #116]	@ 0x74
 800e350:	68bb      	ldr	r3, [r7, #8]
 800e352:	781b      	ldrb	r3, [r3, #0]
 800e354:	00da      	lsls	r2, r3, #3
 800e356:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800e358:	18d3      	adds	r3, r2, r3
 800e35a:	4a75      	ldr	r2, [pc, #468]	@ (800e530 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e35c:	4694      	mov	ip, r2
 800e35e:	4463      	add	r3, ip
 800e360:	673b      	str	r3, [r7, #112]	@ 0x70
 800e362:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800e364:	2200      	movs	r2, #0
 800e366:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 800e368:	68bb      	ldr	r3, [r7, #8]
 800e36a:	781a      	ldrb	r2, [r3, #0]
 800e36c:	68fb      	ldr	r3, [r7, #12]
 800e36e:	0011      	movs	r1, r2
 800e370:	0018      	movs	r0, r3
 800e372:	f007 f949 	bl	8015608 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e376:	1dbb      	adds	r3, r7, #6
 800e378:	881a      	ldrh	r2, [r3, #0]
 800e37a:	2380      	movs	r3, #128	@ 0x80
 800e37c:	01db      	lsls	r3, r3, #7
 800e37e:	4013      	ands	r3, r2
 800e380:	d000      	beq.n	800e384 <HAL_PCD_EP_DB_Transmit+0x57c>
 800e382:	e11e      	b.n	800e5c2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	681b      	ldr	r3, [r3, #0]
 800e388:	001a      	movs	r2, r3
 800e38a:	68bb      	ldr	r3, [r7, #8]
 800e38c:	781b      	ldrb	r3, [r3, #0]
 800e38e:	009b      	lsls	r3, r3, #2
 800e390:	18d3      	adds	r3, r2, r3
 800e392:	881b      	ldrh	r3, [r3, #0]
 800e394:	b29a      	uxth	r2, r3
 800e396:	2088      	movs	r0, #136	@ 0x88
 800e398:	183b      	adds	r3, r7, r0
 800e39a:	4967      	ldr	r1, [pc, #412]	@ (800e538 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e39c:	400a      	ands	r2, r1
 800e39e:	801a      	strh	r2, [r3, #0]
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	001a      	movs	r2, r3
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	781b      	ldrb	r3, [r3, #0]
 800e3aa:	009b      	lsls	r3, r3, #2
 800e3ac:	18d3      	adds	r3, r2, r3
 800e3ae:	183a      	adds	r2, r7, r0
 800e3b0:	8812      	ldrh	r2, [r2, #0]
 800e3b2:	4962      	ldr	r1, [pc, #392]	@ (800e53c <HAL_PCD_EP_DB_Transmit+0x734>)
 800e3b4:	430a      	orrs	r2, r1
 800e3b6:	b292      	uxth	r2, r2
 800e3b8:	801a      	strh	r2, [r3, #0]
 800e3ba:	e102      	b.n	800e5c2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800e3bc:	1dbb      	adds	r3, r7, #6
 800e3be:	881a      	ldrh	r2, [r3, #0]
 800e3c0:	2380      	movs	r3, #128	@ 0x80
 800e3c2:	01db      	lsls	r3, r3, #7
 800e3c4:	4013      	ands	r3, r2
 800e3c6:	d11a      	bne.n	800e3fe <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 800e3c8:	68fb      	ldr	r3, [r7, #12]
 800e3ca:	681b      	ldr	r3, [r3, #0]
 800e3cc:	001a      	movs	r2, r3
 800e3ce:	68bb      	ldr	r3, [r7, #8]
 800e3d0:	781b      	ldrb	r3, [r3, #0]
 800e3d2:	009b      	lsls	r3, r3, #2
 800e3d4:	18d3      	adds	r3, r2, r3
 800e3d6:	881b      	ldrh	r3, [r3, #0]
 800e3d8:	b29a      	uxth	r2, r3
 800e3da:	204e      	movs	r0, #78	@ 0x4e
 800e3dc:	183b      	adds	r3, r7, r0
 800e3de:	4956      	ldr	r1, [pc, #344]	@ (800e538 <HAL_PCD_EP_DB_Transmit+0x730>)
 800e3e0:	400a      	ands	r2, r1
 800e3e2:	801a      	strh	r2, [r3, #0]
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	001a      	movs	r2, r3
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	781b      	ldrb	r3, [r3, #0]
 800e3ee:	009b      	lsls	r3, r3, #2
 800e3f0:	18d3      	adds	r3, r2, r3
 800e3f2:	183a      	adds	r2, r7, r0
 800e3f4:	8812      	ldrh	r2, [r2, #0]
 800e3f6:	4951      	ldr	r1, [pc, #324]	@ (800e53c <HAL_PCD_EP_DB_Transmit+0x734>)
 800e3f8:	430a      	orrs	r2, r1
 800e3fa:	b292      	uxth	r2, r2
 800e3fc:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800e3fe:	68bb      	ldr	r3, [r7, #8]
 800e400:	2224      	movs	r2, #36	@ 0x24
 800e402:	5c9b      	ldrb	r3, [r3, r2]
 800e404:	2b01      	cmp	r3, #1
 800e406:	d000      	beq.n	800e40a <HAL_PCD_EP_DB_Transmit+0x602>
 800e408:	e0db      	b.n	800e5c2 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 800e40a:	68bb      	ldr	r3, [r7, #8]
 800e40c:	695a      	ldr	r2, [r3, #20]
 800e40e:	2186      	movs	r1, #134	@ 0x86
 800e410:	187b      	adds	r3, r7, r1
 800e412:	881b      	ldrh	r3, [r3, #0]
 800e414:	18d2      	adds	r2, r2, r3
 800e416:	68bb      	ldr	r3, [r7, #8]
 800e418:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 800e41a:	68bb      	ldr	r3, [r7, #8]
 800e41c:	69da      	ldr	r2, [r3, #28]
 800e41e:	187b      	adds	r3, r7, r1
 800e420:	881b      	ldrh	r3, [r3, #0]
 800e422:	18d2      	adds	r2, r2, r3
 800e424:	68bb      	ldr	r3, [r7, #8]
 800e426:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800e428:	68bb      	ldr	r3, [r7, #8]
 800e42a:	6a1a      	ldr	r2, [r3, #32]
 800e42c:	68bb      	ldr	r3, [r7, #8]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	429a      	cmp	r2, r3
 800e432:	d30c      	bcc.n	800e44e <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 800e434:	68bb      	ldr	r3, [r7, #8]
 800e436:	691b      	ldr	r3, [r3, #16]
 800e438:	218c      	movs	r1, #140	@ 0x8c
 800e43a:	187a      	adds	r2, r7, r1
 800e43c:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 800e43e:	68bb      	ldr	r3, [r7, #8]
 800e440:	6a1a      	ldr	r2, [r3, #32]
 800e442:	187b      	adds	r3, r7, r1
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	1ad2      	subs	r2, r2, r3
 800e448:	68bb      	ldr	r3, [r7, #8]
 800e44a:	621a      	str	r2, [r3, #32]
 800e44c:	e01a      	b.n	800e484 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 800e44e:	68bb      	ldr	r3, [r7, #8]
 800e450:	6a1b      	ldr	r3, [r3, #32]
 800e452:	2b00      	cmp	r3, #0
 800e454:	d10a      	bne.n	800e46c <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 800e456:	2386      	movs	r3, #134	@ 0x86
 800e458:	18fb      	adds	r3, r7, r3
 800e45a:	881b      	ldrh	r3, [r3, #0]
 800e45c:	228c      	movs	r2, #140	@ 0x8c
 800e45e:	18ba      	adds	r2, r7, r2
 800e460:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 800e462:	68bb      	ldr	r3, [r7, #8]
 800e464:	2224      	movs	r2, #36	@ 0x24
 800e466:	2100      	movs	r1, #0
 800e468:	5499      	strb	r1, [r3, r2]
 800e46a:	e00b      	b.n	800e484 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 800e46c:	68bb      	ldr	r3, [r7, #8]
 800e46e:	6a1b      	ldr	r3, [r3, #32]
 800e470:	228c      	movs	r2, #140	@ 0x8c
 800e472:	18ba      	adds	r2, r7, r2
 800e474:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 800e476:	68bb      	ldr	r3, [r7, #8]
 800e478:	2200      	movs	r2, #0
 800e47a:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800e47c:	68bb      	ldr	r3, [r7, #8]
 800e47e:	2224      	movs	r2, #36	@ 0x24
 800e480:	2100      	movs	r1, #0
 800e482:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	681b      	ldr	r3, [r3, #0]
 800e488:	657b      	str	r3, [r7, #84]	@ 0x54
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	785b      	ldrb	r3, [r3, #1]
 800e48e:	2b00      	cmp	r3, #0
 800e490:	d000      	beq.n	800e494 <HAL_PCD_EP_DB_Transmit+0x68c>
 800e492:	e06e      	b.n	800e572 <HAL_PCD_EP_DB_Transmit+0x76a>
 800e494:	68fb      	ldr	r3, [r7, #12]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e49a:	68fb      	ldr	r3, [r7, #12]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	2250      	movs	r2, #80	@ 0x50
 800e4a0:	5a9b      	ldrh	r3, [r3, r2]
 800e4a2:	b29b      	uxth	r3, r3
 800e4a4:	001a      	movs	r2, r3
 800e4a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4a8:	189b      	adds	r3, r3, r2
 800e4aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800e4ac:	68bb      	ldr	r3, [r7, #8]
 800e4ae:	781b      	ldrb	r3, [r3, #0]
 800e4b0:	00da      	lsls	r2, r3, #3
 800e4b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800e4b4:	18d3      	adds	r3, r2, r3
 800e4b6:	4a1e      	ldr	r2, [pc, #120]	@ (800e530 <HAL_PCD_EP_DB_Transmit+0x728>)
 800e4b8:	4694      	mov	ip, r2
 800e4ba:	4463      	add	r3, ip
 800e4bc:	65bb      	str	r3, [r7, #88]	@ 0x58
 800e4be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4c0:	881b      	ldrh	r3, [r3, #0]
 800e4c2:	b29b      	uxth	r3, r3
 800e4c4:	059b      	lsls	r3, r3, #22
 800e4c6:	0d9b      	lsrs	r3, r3, #22
 800e4c8:	b29a      	uxth	r2, r3
 800e4ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4cc:	801a      	strh	r2, [r3, #0]
 800e4ce:	228c      	movs	r2, #140	@ 0x8c
 800e4d0:	18bb      	adds	r3, r7, r2
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	2b3e      	cmp	r3, #62	@ 0x3e
 800e4d6:	d91a      	bls.n	800e50e <HAL_PCD_EP_DB_Transmit+0x706>
 800e4d8:	18bb      	adds	r3, r7, r2
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	095b      	lsrs	r3, r3, #5
 800e4de:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4e0:	18bb      	adds	r3, r7, r2
 800e4e2:	681b      	ldr	r3, [r3, #0]
 800e4e4:	221f      	movs	r2, #31
 800e4e6:	4013      	ands	r3, r2
 800e4e8:	d102      	bne.n	800e4f0 <HAL_PCD_EP_DB_Transmit+0x6e8>
 800e4ea:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4ec:	3b01      	subs	r3, #1
 800e4ee:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e4f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e4f2:	881b      	ldrh	r3, [r3, #0]
 800e4f4:	b29a      	uxth	r2, r3
 800e4f6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e4f8:	b29b      	uxth	r3, r3
 800e4fa:	029b      	lsls	r3, r3, #10
 800e4fc:	b29b      	uxth	r3, r3
 800e4fe:	4313      	orrs	r3, r2
 800e500:	b29b      	uxth	r3, r3
 800e502:	4a0c      	ldr	r2, [pc, #48]	@ (800e534 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e504:	4313      	orrs	r3, r2
 800e506:	b29a      	uxth	r2, r3
 800e508:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e50a:	801a      	strh	r2, [r3, #0]
 800e50c:	e04d      	b.n	800e5aa <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e50e:	238c      	movs	r3, #140	@ 0x8c
 800e510:	18fb      	adds	r3, r7, r3
 800e512:	681b      	ldr	r3, [r3, #0]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d113      	bne.n	800e540 <HAL_PCD_EP_DB_Transmit+0x738>
 800e518:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e51a:	881b      	ldrh	r3, [r3, #0]
 800e51c:	b29b      	uxth	r3, r3
 800e51e:	4a05      	ldr	r2, [pc, #20]	@ (800e534 <HAL_PCD_EP_DB_Transmit+0x72c>)
 800e520:	4313      	orrs	r3, r2
 800e522:	b29a      	uxth	r2, r3
 800e524:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e526:	801a      	strh	r2, [r3, #0]
 800e528:	e03f      	b.n	800e5aa <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e52a:	46c0      	nop			@ (mov r8, r8)
 800e52c:	00000402 	.word	0x00000402
 800e530:	00000406 	.word	0x00000406
 800e534:	ffff8000 	.word	0xffff8000
 800e538:	ffff8f8f 	.word	0xffff8f8f
 800e53c:	ffffc080 	.word	0xffffc080
 800e540:	228c      	movs	r2, #140	@ 0x8c
 800e542:	18bb      	adds	r3, r7, r2
 800e544:	681b      	ldr	r3, [r3, #0]
 800e546:	085b      	lsrs	r3, r3, #1
 800e548:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e54a:	18bb      	adds	r3, r7, r2
 800e54c:	681b      	ldr	r3, [r3, #0]
 800e54e:	2201      	movs	r2, #1
 800e550:	4013      	ands	r3, r2
 800e552:	d002      	beq.n	800e55a <HAL_PCD_EP_DB_Transmit+0x752>
 800e554:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e556:	3301      	adds	r3, #1
 800e558:	66bb      	str	r3, [r7, #104]	@ 0x68
 800e55a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e55c:	881b      	ldrh	r3, [r3, #0]
 800e55e:	b29a      	uxth	r2, r3
 800e560:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800e562:	b29b      	uxth	r3, r3
 800e564:	029b      	lsls	r3, r3, #10
 800e566:	b29b      	uxth	r3, r3
 800e568:	4313      	orrs	r3, r2
 800e56a:	b29a      	uxth	r2, r3
 800e56c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800e56e:	801a      	strh	r2, [r3, #0]
 800e570:	e01b      	b.n	800e5aa <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e572:	68bb      	ldr	r3, [r7, #8]
 800e574:	785b      	ldrb	r3, [r3, #1]
 800e576:	2b01      	cmp	r3, #1
 800e578:	d117      	bne.n	800e5aa <HAL_PCD_EP_DB_Transmit+0x7a2>
 800e57a:	68fb      	ldr	r3, [r7, #12]
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	2250      	movs	r2, #80	@ 0x50
 800e580:	5a9b      	ldrh	r3, [r3, r2]
 800e582:	b29b      	uxth	r3, r3
 800e584:	001a      	movs	r2, r3
 800e586:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e588:	189b      	adds	r3, r3, r2
 800e58a:	657b      	str	r3, [r7, #84]	@ 0x54
 800e58c:	68bb      	ldr	r3, [r7, #8]
 800e58e:	781b      	ldrb	r3, [r3, #0]
 800e590:	00da      	lsls	r2, r3, #3
 800e592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800e594:	18d3      	adds	r3, r2, r3
 800e596:	4a21      	ldr	r2, [pc, #132]	@ (800e61c <HAL_PCD_EP_DB_Transmit+0x814>)
 800e598:	4694      	mov	ip, r2
 800e59a:	4463      	add	r3, ip
 800e59c:	653b      	str	r3, [r7, #80]	@ 0x50
 800e59e:	238c      	movs	r3, #140	@ 0x8c
 800e5a0:	18fb      	adds	r3, r7, r3
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	b29a      	uxth	r2, r3
 800e5a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800e5a8:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	6818      	ldr	r0, [r3, #0]
 800e5ae:	68bb      	ldr	r3, [r7, #8]
 800e5b0:	6959      	ldr	r1, [r3, #20]
 800e5b2:	68bb      	ldr	r3, [r7, #8]
 800e5b4:	895a      	ldrh	r2, [r3, #10]
 800e5b6:	238c      	movs	r3, #140	@ 0x8c
 800e5b8:	18fb      	adds	r3, r7, r3
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	b29b      	uxth	r3, r3
 800e5be:	f005 f86d 	bl	801369c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	681b      	ldr	r3, [r3, #0]
 800e5c6:	001a      	movs	r2, r3
 800e5c8:	68bb      	ldr	r3, [r7, #8]
 800e5ca:	781b      	ldrb	r3, [r3, #0]
 800e5cc:	009b      	lsls	r3, r3, #2
 800e5ce:	18d3      	adds	r3, r2, r3
 800e5d0:	881b      	ldrh	r3, [r3, #0]
 800e5d2:	b29a      	uxth	r2, r3
 800e5d4:	2014      	movs	r0, #20
 800e5d6:	183b      	adds	r3, r7, r0
 800e5d8:	4911      	ldr	r1, [pc, #68]	@ (800e620 <HAL_PCD_EP_DB_Transmit+0x818>)
 800e5da:	400a      	ands	r2, r1
 800e5dc:	801a      	strh	r2, [r3, #0]
 800e5de:	183b      	adds	r3, r7, r0
 800e5e0:	183a      	adds	r2, r7, r0
 800e5e2:	8812      	ldrh	r2, [r2, #0]
 800e5e4:	2110      	movs	r1, #16
 800e5e6:	404a      	eors	r2, r1
 800e5e8:	801a      	strh	r2, [r3, #0]
 800e5ea:	183b      	adds	r3, r7, r0
 800e5ec:	183a      	adds	r2, r7, r0
 800e5ee:	8812      	ldrh	r2, [r2, #0]
 800e5f0:	2120      	movs	r1, #32
 800e5f2:	404a      	eors	r2, r1
 800e5f4:	801a      	strh	r2, [r3, #0]
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	001a      	movs	r2, r3
 800e5fc:	68bb      	ldr	r3, [r7, #8]
 800e5fe:	781b      	ldrb	r3, [r3, #0]
 800e600:	009b      	lsls	r3, r3, #2
 800e602:	18d3      	adds	r3, r2, r3
 800e604:	183a      	adds	r2, r7, r0
 800e606:	8812      	ldrh	r2, [r2, #0]
 800e608:	4906      	ldr	r1, [pc, #24]	@ (800e624 <HAL_PCD_EP_DB_Transmit+0x81c>)
 800e60a:	430a      	orrs	r2, r1
 800e60c:	b292      	uxth	r2, r2
 800e60e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 800e610:	2300      	movs	r3, #0
}
 800e612:	0018      	movs	r0, r3
 800e614:	46bd      	mov	sp, r7
 800e616:	b024      	add	sp, #144	@ 0x90
 800e618:	bd80      	pop	{r7, pc}
 800e61a:	46c0      	nop			@ (mov r8, r8)
 800e61c:	00000406 	.word	0x00000406
 800e620:	ffff8fbf 	.word	0xffff8fbf
 800e624:	ffff8080 	.word	0xffff8080

0800e628 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 800e628:	b590      	push	{r4, r7, lr}
 800e62a:	b087      	sub	sp, #28
 800e62c:	af00      	add	r7, sp, #0
 800e62e:	60f8      	str	r0, [r7, #12]
 800e630:	0008      	movs	r0, r1
 800e632:	0011      	movs	r1, r2
 800e634:	607b      	str	r3, [r7, #4]
 800e636:	240a      	movs	r4, #10
 800e638:	193b      	adds	r3, r7, r4
 800e63a:	1c02      	adds	r2, r0, #0
 800e63c:	801a      	strh	r2, [r3, #0]
 800e63e:	2308      	movs	r3, #8
 800e640:	18fb      	adds	r3, r7, r3
 800e642:	1c0a      	adds	r2, r1, #0
 800e644:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800e646:	0021      	movs	r1, r4
 800e648:	187b      	adds	r3, r7, r1
 800e64a:	881b      	ldrh	r3, [r3, #0]
 800e64c:	2280      	movs	r2, #128	@ 0x80
 800e64e:	4013      	ands	r3, r2
 800e650:	b29b      	uxth	r3, r3
 800e652:	2b00      	cmp	r3, #0
 800e654:	d00c      	beq.n	800e670 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800e656:	187b      	adds	r3, r7, r1
 800e658:	881b      	ldrh	r3, [r3, #0]
 800e65a:	2207      	movs	r2, #7
 800e65c:	4013      	ands	r3, r2
 800e65e:	1c5a      	adds	r2, r3, #1
 800e660:	0013      	movs	r3, r2
 800e662:	009b      	lsls	r3, r3, #2
 800e664:	189b      	adds	r3, r3, r2
 800e666:	00db      	lsls	r3, r3, #3
 800e668:	68fa      	ldr	r2, [r7, #12]
 800e66a:	18d3      	adds	r3, r2, r3
 800e66c:	617b      	str	r3, [r7, #20]
 800e66e:	e00b      	b.n	800e688 <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800e670:	230a      	movs	r3, #10
 800e672:	18fb      	adds	r3, r7, r3
 800e674:	881a      	ldrh	r2, [r3, #0]
 800e676:	0013      	movs	r3, r2
 800e678:	009b      	lsls	r3, r3, #2
 800e67a:	189b      	adds	r3, r3, r2
 800e67c:	00db      	lsls	r3, r3, #3
 800e67e:	3369      	adds	r3, #105	@ 0x69
 800e680:	33ff      	adds	r3, #255	@ 0xff
 800e682:	68fa      	ldr	r2, [r7, #12]
 800e684:	18d3      	adds	r3, r2, r3
 800e686:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800e688:	2308      	movs	r3, #8
 800e68a:	18fb      	adds	r3, r7, r3
 800e68c:	881b      	ldrh	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d107      	bne.n	800e6a2 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800e692:	697b      	ldr	r3, [r7, #20]
 800e694:	2200      	movs	r2, #0
 800e696:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 800e698:	687b      	ldr	r3, [r7, #4]
 800e69a:	b29a      	uxth	r2, r3
 800e69c:	697b      	ldr	r3, [r7, #20]
 800e69e:	80da      	strh	r2, [r3, #6]
 800e6a0:	e00b      	b.n	800e6ba <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800e6a2:	697b      	ldr	r3, [r7, #20]
 800e6a4:	2201      	movs	r2, #1
 800e6a6:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	b29a      	uxth	r2, r3
 800e6ac:	697b      	ldr	r3, [r7, #20]
 800e6ae:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	0c1b      	lsrs	r3, r3, #16
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	697b      	ldr	r3, [r7, #20]
 800e6b8:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 800e6ba:	2300      	movs	r3, #0
}
 800e6bc:	0018      	movs	r0, r3
 800e6be:	46bd      	mov	sp, r7
 800e6c0:	b007      	add	sp, #28
 800e6c2:	bd90      	pop	{r4, r7, pc}

0800e6c4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b084      	sub	sp, #16
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 800e6cc:	687b      	ldr	r3, [r7, #4]
 800e6ce:	681b      	ldr	r3, [r3, #0]
 800e6d0:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 800e6d2:	687a      	ldr	r2, [r7, #4]
 800e6d4:	23ba      	movs	r3, #186	@ 0xba
 800e6d6:	009b      	lsls	r3, r3, #2
 800e6d8:	2101      	movs	r1, #1
 800e6da:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 800e6dc:	687a      	ldr	r2, [r7, #4]
 800e6de:	23b8      	movs	r3, #184	@ 0xb8
 800e6e0:	009b      	lsls	r3, r3, #2
 800e6e2:	2100      	movs	r1, #0
 800e6e4:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	2254      	movs	r2, #84	@ 0x54
 800e6ea:	5a9b      	ldrh	r3, [r3, r2]
 800e6ec:	b29b      	uxth	r3, r3
 800e6ee:	2201      	movs	r2, #1
 800e6f0:	4313      	orrs	r3, r2
 800e6f2:	b299      	uxth	r1, r3
 800e6f4:	68fb      	ldr	r3, [r7, #12]
 800e6f6:	2254      	movs	r2, #84	@ 0x54
 800e6f8:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800e6fa:	68fb      	ldr	r3, [r7, #12]
 800e6fc:	2254      	movs	r2, #84	@ 0x54
 800e6fe:	5a9b      	ldrh	r3, [r3, r2]
 800e700:	b29b      	uxth	r3, r3
 800e702:	2202      	movs	r2, #2
 800e704:	4313      	orrs	r3, r2
 800e706:	b299      	uxth	r1, r3
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	2254      	movs	r2, #84	@ 0x54
 800e70c:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 800e70e:	2300      	movs	r3, #0
}
 800e710:	0018      	movs	r0, r3
 800e712:	46bd      	mov	sp, r7
 800e714:	b004      	add	sp, #16
 800e716:	bd80      	pop	{r7, pc}

0800e718 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800e718:	b580      	push	{r7, lr}
 800e71a:	b082      	sub	sp, #8
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	6078      	str	r0, [r7, #4]
 800e720:	000a      	movs	r2, r1
 800e722:	1cfb      	adds	r3, r7, #3
 800e724:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800e726:	46c0      	nop			@ (mov r8, r8)
 800e728:	46bd      	mov	sp, r7
 800e72a:	b002      	add	sp, #8
 800e72c:	bd80      	pop	{r7, pc}
	...

0800e730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800e730:	b5b0      	push	{r4, r5, r7, lr}
 800e732:	b08a      	sub	sp, #40	@ 0x28
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2b00      	cmp	r3, #0
 800e73c:	d102      	bne.n	800e744 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800e73e:	2301      	movs	r3, #1
 800e740:	f000 fbbf 	bl	800eec2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800e744:	4bc9      	ldr	r3, [pc, #804]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	220c      	movs	r2, #12
 800e74a:	4013      	ands	r3, r2
 800e74c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800e74e:	4bc7      	ldr	r3, [pc, #796]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e750:	68da      	ldr	r2, [r3, #12]
 800e752:	2380      	movs	r3, #128	@ 0x80
 800e754:	025b      	lsls	r3, r3, #9
 800e756:	4013      	ands	r3, r2
 800e758:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	681b      	ldr	r3, [r3, #0]
 800e75e:	2201      	movs	r2, #1
 800e760:	4013      	ands	r3, r2
 800e762:	d100      	bne.n	800e766 <HAL_RCC_OscConfig+0x36>
 800e764:	e07e      	b.n	800e864 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800e766:	69fb      	ldr	r3, [r7, #28]
 800e768:	2b08      	cmp	r3, #8
 800e76a:	d007      	beq.n	800e77c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800e76c:	69fb      	ldr	r3, [r7, #28]
 800e76e:	2b0c      	cmp	r3, #12
 800e770:	d112      	bne.n	800e798 <HAL_RCC_OscConfig+0x68>
 800e772:	69ba      	ldr	r2, [r7, #24]
 800e774:	2380      	movs	r3, #128	@ 0x80
 800e776:	025b      	lsls	r3, r3, #9
 800e778:	429a      	cmp	r2, r3
 800e77a:	d10d      	bne.n	800e798 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e77c:	4bbb      	ldr	r3, [pc, #748]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e77e:	681a      	ldr	r2, [r3, #0]
 800e780:	2380      	movs	r3, #128	@ 0x80
 800e782:	029b      	lsls	r3, r3, #10
 800e784:	4013      	ands	r3, r2
 800e786:	d100      	bne.n	800e78a <HAL_RCC_OscConfig+0x5a>
 800e788:	e06b      	b.n	800e862 <HAL_RCC_OscConfig+0x132>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	685b      	ldr	r3, [r3, #4]
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d167      	bne.n	800e862 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800e792:	2301      	movs	r3, #1
 800e794:	f000 fb95 	bl	800eec2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	685a      	ldr	r2, [r3, #4]
 800e79c:	2380      	movs	r3, #128	@ 0x80
 800e79e:	025b      	lsls	r3, r3, #9
 800e7a0:	429a      	cmp	r2, r3
 800e7a2:	d107      	bne.n	800e7b4 <HAL_RCC_OscConfig+0x84>
 800e7a4:	4bb1      	ldr	r3, [pc, #708]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	4bb0      	ldr	r3, [pc, #704]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7aa:	2180      	movs	r1, #128	@ 0x80
 800e7ac:	0249      	lsls	r1, r1, #9
 800e7ae:	430a      	orrs	r2, r1
 800e7b0:	601a      	str	r2, [r3, #0]
 800e7b2:	e027      	b.n	800e804 <HAL_RCC_OscConfig+0xd4>
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	685a      	ldr	r2, [r3, #4]
 800e7b8:	23a0      	movs	r3, #160	@ 0xa0
 800e7ba:	02db      	lsls	r3, r3, #11
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d10e      	bne.n	800e7de <HAL_RCC_OscConfig+0xae>
 800e7c0:	4baa      	ldr	r3, [pc, #680]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7c2:	681a      	ldr	r2, [r3, #0]
 800e7c4:	4ba9      	ldr	r3, [pc, #676]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7c6:	2180      	movs	r1, #128	@ 0x80
 800e7c8:	02c9      	lsls	r1, r1, #11
 800e7ca:	430a      	orrs	r2, r1
 800e7cc:	601a      	str	r2, [r3, #0]
 800e7ce:	4ba7      	ldr	r3, [pc, #668]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7d0:	681a      	ldr	r2, [r3, #0]
 800e7d2:	4ba6      	ldr	r3, [pc, #664]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7d4:	2180      	movs	r1, #128	@ 0x80
 800e7d6:	0249      	lsls	r1, r1, #9
 800e7d8:	430a      	orrs	r2, r1
 800e7da:	601a      	str	r2, [r3, #0]
 800e7dc:	e012      	b.n	800e804 <HAL_RCC_OscConfig+0xd4>
 800e7de:	4ba3      	ldr	r3, [pc, #652]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7e0:	681a      	ldr	r2, [r3, #0]
 800e7e2:	4ba2      	ldr	r3, [pc, #648]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7e4:	49a2      	ldr	r1, [pc, #648]	@ (800ea70 <HAL_RCC_OscConfig+0x340>)
 800e7e6:	400a      	ands	r2, r1
 800e7e8:	601a      	str	r2, [r3, #0]
 800e7ea:	4ba0      	ldr	r3, [pc, #640]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7ec:	681a      	ldr	r2, [r3, #0]
 800e7ee:	2380      	movs	r3, #128	@ 0x80
 800e7f0:	025b      	lsls	r3, r3, #9
 800e7f2:	4013      	ands	r3, r2
 800e7f4:	60fb      	str	r3, [r7, #12]
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	4b9c      	ldr	r3, [pc, #624]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7fa:	681a      	ldr	r2, [r3, #0]
 800e7fc:	4b9b      	ldr	r3, [pc, #620]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e7fe:	499d      	ldr	r1, [pc, #628]	@ (800ea74 <HAL_RCC_OscConfig+0x344>)
 800e800:	400a      	ands	r2, r1
 800e802:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800e804:	687b      	ldr	r3, [r7, #4]
 800e806:	685b      	ldr	r3, [r3, #4]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d015      	beq.n	800e838 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e80c:	f7fa fc2c 	bl	8009068 <HAL_GetTick>
 800e810:	0003      	movs	r3, r0
 800e812:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e814:	e009      	b.n	800e82a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e816:	f7fa fc27 	bl	8009068 <HAL_GetTick>
 800e81a:	0002      	movs	r2, r0
 800e81c:	697b      	ldr	r3, [r7, #20]
 800e81e:	1ad3      	subs	r3, r2, r3
 800e820:	2b64      	cmp	r3, #100	@ 0x64
 800e822:	d902      	bls.n	800e82a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800e824:	2303      	movs	r3, #3
 800e826:	f000 fb4c 	bl	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800e82a:	4b90      	ldr	r3, [pc, #576]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e82c:	681a      	ldr	r2, [r3, #0]
 800e82e:	2380      	movs	r3, #128	@ 0x80
 800e830:	029b      	lsls	r3, r3, #10
 800e832:	4013      	ands	r3, r2
 800e834:	d0ef      	beq.n	800e816 <HAL_RCC_OscConfig+0xe6>
 800e836:	e015      	b.n	800e864 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e838:	f7fa fc16 	bl	8009068 <HAL_GetTick>
 800e83c:	0003      	movs	r3, r0
 800e83e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e840:	e008      	b.n	800e854 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800e842:	f7fa fc11 	bl	8009068 <HAL_GetTick>
 800e846:	0002      	movs	r2, r0
 800e848:	697b      	ldr	r3, [r7, #20]
 800e84a:	1ad3      	subs	r3, r2, r3
 800e84c:	2b64      	cmp	r3, #100	@ 0x64
 800e84e:	d901      	bls.n	800e854 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 800e850:	2303      	movs	r3, #3
 800e852:	e336      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800e854:	4b85      	ldr	r3, [pc, #532]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e856:	681a      	ldr	r2, [r3, #0]
 800e858:	2380      	movs	r3, #128	@ 0x80
 800e85a:	029b      	lsls	r3, r3, #10
 800e85c:	4013      	ands	r3, r2
 800e85e:	d1f0      	bne.n	800e842 <HAL_RCC_OscConfig+0x112>
 800e860:	e000      	b.n	800e864 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800e862:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2202      	movs	r2, #2
 800e86a:	4013      	ands	r3, r2
 800e86c:	d100      	bne.n	800e870 <HAL_RCC_OscConfig+0x140>
 800e86e:	e099      	b.n	800e9a4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	68db      	ldr	r3, [r3, #12]
 800e874:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 800e876:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e878:	2220      	movs	r2, #32
 800e87a:	4013      	ands	r3, r2
 800e87c:	d009      	beq.n	800e892 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800e87e:	4b7b      	ldr	r3, [pc, #492]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e880:	681a      	ldr	r2, [r3, #0]
 800e882:	4b7a      	ldr	r3, [pc, #488]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e884:	2120      	movs	r1, #32
 800e886:	430a      	orrs	r2, r1
 800e888:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 800e88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e88c:	2220      	movs	r2, #32
 800e88e:	4393      	bics	r3, r2
 800e890:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800e892:	69fb      	ldr	r3, [r7, #28]
 800e894:	2b04      	cmp	r3, #4
 800e896:	d005      	beq.n	800e8a4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 800e898:	69fb      	ldr	r3, [r7, #28]
 800e89a:	2b0c      	cmp	r3, #12
 800e89c:	d13e      	bne.n	800e91c <HAL_RCC_OscConfig+0x1ec>
 800e89e:	69bb      	ldr	r3, [r7, #24]
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d13b      	bne.n	800e91c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 800e8a4:	4b71      	ldr	r3, [pc, #452]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e8a6:	681b      	ldr	r3, [r3, #0]
 800e8a8:	2204      	movs	r2, #4
 800e8aa:	4013      	ands	r3, r2
 800e8ac:	d004      	beq.n	800e8b8 <HAL_RCC_OscConfig+0x188>
 800e8ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8b0:	2b00      	cmp	r3, #0
 800e8b2:	d101      	bne.n	800e8b8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 800e8b4:	2301      	movs	r3, #1
 800e8b6:	e304      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e8b8:	4b6c      	ldr	r3, [pc, #432]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e8ba:	685b      	ldr	r3, [r3, #4]
 800e8bc:	4a6e      	ldr	r2, [pc, #440]	@ (800ea78 <HAL_RCC_OscConfig+0x348>)
 800e8be:	4013      	ands	r3, r2
 800e8c0:	0019      	movs	r1, r3
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	691b      	ldr	r3, [r3, #16]
 800e8c6:	021a      	lsls	r2, r3, #8
 800e8c8:	4b68      	ldr	r3, [pc, #416]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e8ca:	430a      	orrs	r2, r1
 800e8cc:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800e8ce:	4b67      	ldr	r3, [pc, #412]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	2209      	movs	r2, #9
 800e8d4:	4393      	bics	r3, r2
 800e8d6:	0019      	movs	r1, r3
 800e8d8:	4b64      	ldr	r3, [pc, #400]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e8da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e8dc:	430a      	orrs	r2, r1
 800e8de:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800e8e0:	f000 fc42 	bl	800f168 <HAL_RCC_GetSysClockFreq>
 800e8e4:	0001      	movs	r1, r0
 800e8e6:	4b61      	ldr	r3, [pc, #388]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e8e8:	68db      	ldr	r3, [r3, #12]
 800e8ea:	091b      	lsrs	r3, r3, #4
 800e8ec:	220f      	movs	r2, #15
 800e8ee:	4013      	ands	r3, r2
 800e8f0:	4a62      	ldr	r2, [pc, #392]	@ (800ea7c <HAL_RCC_OscConfig+0x34c>)
 800e8f2:	5cd3      	ldrb	r3, [r2, r3]
 800e8f4:	000a      	movs	r2, r1
 800e8f6:	40da      	lsrs	r2, r3
 800e8f8:	4b61      	ldr	r3, [pc, #388]	@ (800ea80 <HAL_RCC_OscConfig+0x350>)
 800e8fa:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800e8fc:	4b61      	ldr	r3, [pc, #388]	@ (800ea84 <HAL_RCC_OscConfig+0x354>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	2513      	movs	r5, #19
 800e902:	197c      	adds	r4, r7, r5
 800e904:	0018      	movs	r0, r3
 800e906:	f7fa fb69 	bl	8008fdc <HAL_InitTick>
 800e90a:	0003      	movs	r3, r0
 800e90c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800e90e:	197b      	adds	r3, r7, r5
 800e910:	781b      	ldrb	r3, [r3, #0]
 800e912:	2b00      	cmp	r3, #0
 800e914:	d046      	beq.n	800e9a4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 800e916:	197b      	adds	r3, r7, r5
 800e918:	781b      	ldrb	r3, [r3, #0]
 800e91a:	e2d2      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800e91c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e91e:	2b00      	cmp	r3, #0
 800e920:	d027      	beq.n	800e972 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800e922:	4b52      	ldr	r3, [pc, #328]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	2209      	movs	r2, #9
 800e928:	4393      	bics	r3, r2
 800e92a:	0019      	movs	r1, r3
 800e92c:	4b4f      	ldr	r3, [pc, #316]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e92e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800e930:	430a      	orrs	r2, r1
 800e932:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e934:	f7fa fb98 	bl	8009068 <HAL_GetTick>
 800e938:	0003      	movs	r3, r0
 800e93a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e93c:	e008      	b.n	800e950 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e93e:	f7fa fb93 	bl	8009068 <HAL_GetTick>
 800e942:	0002      	movs	r2, r0
 800e944:	697b      	ldr	r3, [r7, #20]
 800e946:	1ad3      	subs	r3, r2, r3
 800e948:	2b02      	cmp	r3, #2
 800e94a:	d901      	bls.n	800e950 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 800e94c:	2303      	movs	r3, #3
 800e94e:	e2b8      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800e950:	4b46      	ldr	r3, [pc, #280]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	2204      	movs	r2, #4
 800e956:	4013      	ands	r3, r2
 800e958:	d0f1      	beq.n	800e93e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800e95a:	4b44      	ldr	r3, [pc, #272]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e95c:	685b      	ldr	r3, [r3, #4]
 800e95e:	4a46      	ldr	r2, [pc, #280]	@ (800ea78 <HAL_RCC_OscConfig+0x348>)
 800e960:	4013      	ands	r3, r2
 800e962:	0019      	movs	r1, r3
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	691b      	ldr	r3, [r3, #16]
 800e968:	021a      	lsls	r2, r3, #8
 800e96a:	4b40      	ldr	r3, [pc, #256]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e96c:	430a      	orrs	r2, r1
 800e96e:	605a      	str	r2, [r3, #4]
 800e970:	e018      	b.n	800e9a4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800e972:	4b3e      	ldr	r3, [pc, #248]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e974:	681a      	ldr	r2, [r3, #0]
 800e976:	4b3d      	ldr	r3, [pc, #244]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e978:	2101      	movs	r1, #1
 800e97a:	438a      	bics	r2, r1
 800e97c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800e97e:	f7fa fb73 	bl	8009068 <HAL_GetTick>
 800e982:	0003      	movs	r3, r0
 800e984:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e986:	e008      	b.n	800e99a <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800e988:	f7fa fb6e 	bl	8009068 <HAL_GetTick>
 800e98c:	0002      	movs	r2, r0
 800e98e:	697b      	ldr	r3, [r7, #20]
 800e990:	1ad3      	subs	r3, r2, r3
 800e992:	2b02      	cmp	r3, #2
 800e994:	d901      	bls.n	800e99a <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 800e996:	2303      	movs	r3, #3
 800e998:	e293      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800e99a:	4b34      	ldr	r3, [pc, #208]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	2204      	movs	r2, #4
 800e9a0:	4013      	ands	r3, r2
 800e9a2:	d1f1      	bne.n	800e988 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	681b      	ldr	r3, [r3, #0]
 800e9a8:	2210      	movs	r2, #16
 800e9aa:	4013      	ands	r3, r2
 800e9ac:	d100      	bne.n	800e9b0 <HAL_RCC_OscConfig+0x280>
 800e9ae:	e0a2      	b.n	800eaf6 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800e9b0:	69fb      	ldr	r3, [r7, #28]
 800e9b2:	2b00      	cmp	r3, #0
 800e9b4:	d140      	bne.n	800ea38 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800e9b6:	4b2d      	ldr	r3, [pc, #180]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e9b8:	681a      	ldr	r2, [r3, #0]
 800e9ba:	2380      	movs	r3, #128	@ 0x80
 800e9bc:	009b      	lsls	r3, r3, #2
 800e9be:	4013      	ands	r3, r2
 800e9c0:	d005      	beq.n	800e9ce <HAL_RCC_OscConfig+0x29e>
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	69db      	ldr	r3, [r3, #28]
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d101      	bne.n	800e9ce <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800e9ca:	2301      	movs	r3, #1
 800e9cc:	e279      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800e9ce:	4b27      	ldr	r3, [pc, #156]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e9d0:	685b      	ldr	r3, [r3, #4]
 800e9d2:	4a2d      	ldr	r2, [pc, #180]	@ (800ea88 <HAL_RCC_OscConfig+0x358>)
 800e9d4:	4013      	ands	r3, r2
 800e9d6:	0019      	movs	r1, r3
 800e9d8:	687b      	ldr	r3, [r7, #4]
 800e9da:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9dc:	4b23      	ldr	r3, [pc, #140]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e9de:	430a      	orrs	r2, r1
 800e9e0:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800e9e2:	4b22      	ldr	r3, [pc, #136]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e9e4:	685b      	ldr	r3, [r3, #4]
 800e9e6:	021b      	lsls	r3, r3, #8
 800e9e8:	0a19      	lsrs	r1, r3, #8
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6a1b      	ldr	r3, [r3, #32]
 800e9ee:	061a      	lsls	r2, r3, #24
 800e9f0:	4b1e      	ldr	r3, [pc, #120]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800e9f2:	430a      	orrs	r2, r1
 800e9f4:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9fa:	0b5b      	lsrs	r3, r3, #13
 800e9fc:	3301      	adds	r3, #1
 800e9fe:	2280      	movs	r2, #128	@ 0x80
 800ea00:	0212      	lsls	r2, r2, #8
 800ea02:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 800ea04:	4b19      	ldr	r3, [pc, #100]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	091b      	lsrs	r3, r3, #4
 800ea0a:	210f      	movs	r1, #15
 800ea0c:	400b      	ands	r3, r1
 800ea0e:	491b      	ldr	r1, [pc, #108]	@ (800ea7c <HAL_RCC_OscConfig+0x34c>)
 800ea10:	5ccb      	ldrb	r3, [r1, r3]
 800ea12:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800ea14:	4b1a      	ldr	r3, [pc, #104]	@ (800ea80 <HAL_RCC_OscConfig+0x350>)
 800ea16:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 800ea18:	4b1a      	ldr	r3, [pc, #104]	@ (800ea84 <HAL_RCC_OscConfig+0x354>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	2513      	movs	r5, #19
 800ea1e:	197c      	adds	r4, r7, r5
 800ea20:	0018      	movs	r0, r3
 800ea22:	f7fa fadb 	bl	8008fdc <HAL_InitTick>
 800ea26:	0003      	movs	r3, r0
 800ea28:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 800ea2a:	197b      	adds	r3, r7, r5
 800ea2c:	781b      	ldrb	r3, [r3, #0]
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d061      	beq.n	800eaf6 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 800ea32:	197b      	adds	r3, r7, r5
 800ea34:	781b      	ldrb	r3, [r3, #0]
 800ea36:	e244      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	69db      	ldr	r3, [r3, #28]
 800ea3c:	2b00      	cmp	r3, #0
 800ea3e:	d040      	beq.n	800eac2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800ea40:	4b0a      	ldr	r3, [pc, #40]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800ea42:	681a      	ldr	r2, [r3, #0]
 800ea44:	4b09      	ldr	r3, [pc, #36]	@ (800ea6c <HAL_RCC_OscConfig+0x33c>)
 800ea46:	2180      	movs	r1, #128	@ 0x80
 800ea48:	0049      	lsls	r1, r1, #1
 800ea4a:	430a      	orrs	r2, r1
 800ea4c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ea4e:	f7fa fb0b 	bl	8009068 <HAL_GetTick>
 800ea52:	0003      	movs	r3, r0
 800ea54:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ea56:	e019      	b.n	800ea8c <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ea58:	f7fa fb06 	bl	8009068 <HAL_GetTick>
 800ea5c:	0002      	movs	r2, r0
 800ea5e:	697b      	ldr	r3, [r7, #20]
 800ea60:	1ad3      	subs	r3, r2, r3
 800ea62:	2b02      	cmp	r3, #2
 800ea64:	d912      	bls.n	800ea8c <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 800ea66:	2303      	movs	r3, #3
 800ea68:	e22b      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
 800ea6a:	46c0      	nop			@ (mov r8, r8)
 800ea6c:	40021000 	.word	0x40021000
 800ea70:	fffeffff 	.word	0xfffeffff
 800ea74:	fffbffff 	.word	0xfffbffff
 800ea78:	ffffe0ff 	.word	0xffffe0ff
 800ea7c:	0801b464 	.word	0x0801b464
 800ea80:	20000144 	.word	0x20000144
 800ea84:	20000158 	.word	0x20000158
 800ea88:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800ea8c:	4bca      	ldr	r3, [pc, #808]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ea8e:	681a      	ldr	r2, [r3, #0]
 800ea90:	2380      	movs	r3, #128	@ 0x80
 800ea92:	009b      	lsls	r3, r3, #2
 800ea94:	4013      	ands	r3, r2
 800ea96:	d0df      	beq.n	800ea58 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800ea98:	4bc7      	ldr	r3, [pc, #796]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	4ac7      	ldr	r2, [pc, #796]	@ (800edbc <HAL_RCC_OscConfig+0x68c>)
 800ea9e:	4013      	ands	r3, r2
 800eaa0:	0019      	movs	r1, r3
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eaa6:	4bc4      	ldr	r3, [pc, #784]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eaa8:	430a      	orrs	r2, r1
 800eaaa:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800eaac:	4bc2      	ldr	r3, [pc, #776]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	021b      	lsls	r3, r3, #8
 800eab2:	0a19      	lsrs	r1, r3, #8
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a1b      	ldr	r3, [r3, #32]
 800eab8:	061a      	lsls	r2, r3, #24
 800eaba:	4bbf      	ldr	r3, [pc, #764]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eabc:	430a      	orrs	r2, r1
 800eabe:	605a      	str	r2, [r3, #4]
 800eac0:	e019      	b.n	800eaf6 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800eac2:	4bbd      	ldr	r3, [pc, #756]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eac4:	681a      	ldr	r2, [r3, #0]
 800eac6:	4bbc      	ldr	r3, [pc, #752]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eac8:	49bd      	ldr	r1, [pc, #756]	@ (800edc0 <HAL_RCC_OscConfig+0x690>)
 800eaca:	400a      	ands	r2, r1
 800eacc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800eace:	f7fa facb 	bl	8009068 <HAL_GetTick>
 800ead2:	0003      	movs	r3, r0
 800ead4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800ead6:	e008      	b.n	800eaea <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800ead8:	f7fa fac6 	bl	8009068 <HAL_GetTick>
 800eadc:	0002      	movs	r2, r0
 800eade:	697b      	ldr	r3, [r7, #20]
 800eae0:	1ad3      	subs	r3, r2, r3
 800eae2:	2b02      	cmp	r3, #2
 800eae4:	d901      	bls.n	800eaea <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 800eae6:	2303      	movs	r3, #3
 800eae8:	e1eb      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800eaea:	4bb3      	ldr	r3, [pc, #716]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	2380      	movs	r3, #128	@ 0x80
 800eaf0:	009b      	lsls	r3, r3, #2
 800eaf2:	4013      	ands	r3, r2
 800eaf4:	d1f0      	bne.n	800ead8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800eaf6:	687b      	ldr	r3, [r7, #4]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	2208      	movs	r2, #8
 800eafc:	4013      	ands	r3, r2
 800eafe:	d036      	beq.n	800eb6e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	695b      	ldr	r3, [r3, #20]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d019      	beq.n	800eb3c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800eb08:	4bab      	ldr	r3, [pc, #684]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb0c:	4baa      	ldr	r3, [pc, #680]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb0e:	2101      	movs	r1, #1
 800eb10:	430a      	orrs	r2, r1
 800eb12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb14:	f7fa faa8 	bl	8009068 <HAL_GetTick>
 800eb18:	0003      	movs	r3, r0
 800eb1a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eb1c:	e008      	b.n	800eb30 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb1e:	f7fa faa3 	bl	8009068 <HAL_GetTick>
 800eb22:	0002      	movs	r2, r0
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	1ad3      	subs	r3, r2, r3
 800eb28:	2b02      	cmp	r3, #2
 800eb2a:	d901      	bls.n	800eb30 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 800eb2c:	2303      	movs	r3, #3
 800eb2e:	e1c8      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800eb30:	4ba1      	ldr	r3, [pc, #644]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb34:	2202      	movs	r2, #2
 800eb36:	4013      	ands	r3, r2
 800eb38:	d0f1      	beq.n	800eb1e <HAL_RCC_OscConfig+0x3ee>
 800eb3a:	e018      	b.n	800eb6e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800eb3c:	4b9e      	ldr	r3, [pc, #632]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800eb40:	4b9d      	ldr	r3, [pc, #628]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb42:	2101      	movs	r1, #1
 800eb44:	438a      	bics	r2, r1
 800eb46:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800eb48:	f7fa fa8e 	bl	8009068 <HAL_GetTick>
 800eb4c:	0003      	movs	r3, r0
 800eb4e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eb50:	e008      	b.n	800eb64 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800eb52:	f7fa fa89 	bl	8009068 <HAL_GetTick>
 800eb56:	0002      	movs	r2, r0
 800eb58:	697b      	ldr	r3, [r7, #20]
 800eb5a:	1ad3      	subs	r3, r2, r3
 800eb5c:	2b02      	cmp	r3, #2
 800eb5e:	d901      	bls.n	800eb64 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 800eb60:	2303      	movs	r3, #3
 800eb62:	e1ae      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800eb64:	4b94      	ldr	r3, [pc, #592]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eb68:	2202      	movs	r2, #2
 800eb6a:	4013      	ands	r3, r2
 800eb6c:	d1f1      	bne.n	800eb52 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2204      	movs	r2, #4
 800eb74:	4013      	ands	r3, r2
 800eb76:	d100      	bne.n	800eb7a <HAL_RCC_OscConfig+0x44a>
 800eb78:	e0ae      	b.n	800ecd8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800eb7a:	2023      	movs	r0, #35	@ 0x23
 800eb7c:	183b      	adds	r3, r7, r0
 800eb7e:	2200      	movs	r2, #0
 800eb80:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800eb82:	4b8d      	ldr	r3, [pc, #564]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb86:	2380      	movs	r3, #128	@ 0x80
 800eb88:	055b      	lsls	r3, r3, #21
 800eb8a:	4013      	ands	r3, r2
 800eb8c:	d109      	bne.n	800eba2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800eb8e:	4b8a      	ldr	r3, [pc, #552]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800eb92:	4b89      	ldr	r3, [pc, #548]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800eb94:	2180      	movs	r1, #128	@ 0x80
 800eb96:	0549      	lsls	r1, r1, #21
 800eb98:	430a      	orrs	r2, r1
 800eb9a:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800eb9c:	183b      	adds	r3, r7, r0
 800eb9e:	2201      	movs	r2, #1
 800eba0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800eba2:	4b88      	ldr	r3, [pc, #544]	@ (800edc4 <HAL_RCC_OscConfig+0x694>)
 800eba4:	681a      	ldr	r2, [r3, #0]
 800eba6:	2380      	movs	r3, #128	@ 0x80
 800eba8:	005b      	lsls	r3, r3, #1
 800ebaa:	4013      	ands	r3, r2
 800ebac:	d11a      	bne.n	800ebe4 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800ebae:	4b85      	ldr	r3, [pc, #532]	@ (800edc4 <HAL_RCC_OscConfig+0x694>)
 800ebb0:	681a      	ldr	r2, [r3, #0]
 800ebb2:	4b84      	ldr	r3, [pc, #528]	@ (800edc4 <HAL_RCC_OscConfig+0x694>)
 800ebb4:	2180      	movs	r1, #128	@ 0x80
 800ebb6:	0049      	lsls	r1, r1, #1
 800ebb8:	430a      	orrs	r2, r1
 800ebba:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800ebbc:	f7fa fa54 	bl	8009068 <HAL_GetTick>
 800ebc0:	0003      	movs	r3, r0
 800ebc2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebc4:	e008      	b.n	800ebd8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ebc6:	f7fa fa4f 	bl	8009068 <HAL_GetTick>
 800ebca:	0002      	movs	r2, r0
 800ebcc:	697b      	ldr	r3, [r7, #20]
 800ebce:	1ad3      	subs	r3, r2, r3
 800ebd0:	2b64      	cmp	r3, #100	@ 0x64
 800ebd2:	d901      	bls.n	800ebd8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 800ebd4:	2303      	movs	r3, #3
 800ebd6:	e174      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ebd8:	4b7a      	ldr	r3, [pc, #488]	@ (800edc4 <HAL_RCC_OscConfig+0x694>)
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	2380      	movs	r3, #128	@ 0x80
 800ebde:	005b      	lsls	r3, r3, #1
 800ebe0:	4013      	ands	r3, r2
 800ebe2:	d0f0      	beq.n	800ebc6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ebe4:	687b      	ldr	r3, [r7, #4]
 800ebe6:	689a      	ldr	r2, [r3, #8]
 800ebe8:	2380      	movs	r3, #128	@ 0x80
 800ebea:	005b      	lsls	r3, r3, #1
 800ebec:	429a      	cmp	r2, r3
 800ebee:	d107      	bne.n	800ec00 <HAL_RCC_OscConfig+0x4d0>
 800ebf0:	4b71      	ldr	r3, [pc, #452]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ebf2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ebf4:	4b70      	ldr	r3, [pc, #448]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ebf6:	2180      	movs	r1, #128	@ 0x80
 800ebf8:	0049      	lsls	r1, r1, #1
 800ebfa:	430a      	orrs	r2, r1
 800ebfc:	651a      	str	r2, [r3, #80]	@ 0x50
 800ebfe:	e031      	b.n	800ec64 <HAL_RCC_OscConfig+0x534>
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d10c      	bne.n	800ec22 <HAL_RCC_OscConfig+0x4f2>
 800ec08:	4b6b      	ldr	r3, [pc, #428]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec0a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec0c:	4b6a      	ldr	r3, [pc, #424]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec0e:	496c      	ldr	r1, [pc, #432]	@ (800edc0 <HAL_RCC_OscConfig+0x690>)
 800ec10:	400a      	ands	r2, r1
 800ec12:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec14:	4b68      	ldr	r3, [pc, #416]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec16:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec18:	4b67      	ldr	r3, [pc, #412]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec1a:	496b      	ldr	r1, [pc, #428]	@ (800edc8 <HAL_RCC_OscConfig+0x698>)
 800ec1c:	400a      	ands	r2, r1
 800ec1e:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec20:	e020      	b.n	800ec64 <HAL_RCC_OscConfig+0x534>
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	689a      	ldr	r2, [r3, #8]
 800ec26:	23a0      	movs	r3, #160	@ 0xa0
 800ec28:	00db      	lsls	r3, r3, #3
 800ec2a:	429a      	cmp	r2, r3
 800ec2c:	d10e      	bne.n	800ec4c <HAL_RCC_OscConfig+0x51c>
 800ec2e:	4b62      	ldr	r3, [pc, #392]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec30:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec32:	4b61      	ldr	r3, [pc, #388]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec34:	2180      	movs	r1, #128	@ 0x80
 800ec36:	00c9      	lsls	r1, r1, #3
 800ec38:	430a      	orrs	r2, r1
 800ec3a:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec3c:	4b5e      	ldr	r3, [pc, #376]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec40:	4b5d      	ldr	r3, [pc, #372]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec42:	2180      	movs	r1, #128	@ 0x80
 800ec44:	0049      	lsls	r1, r1, #1
 800ec46:	430a      	orrs	r2, r1
 800ec48:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec4a:	e00b      	b.n	800ec64 <HAL_RCC_OscConfig+0x534>
 800ec4c:	4b5a      	ldr	r3, [pc, #360]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec4e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec50:	4b59      	ldr	r3, [pc, #356]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec52:	495b      	ldr	r1, [pc, #364]	@ (800edc0 <HAL_RCC_OscConfig+0x690>)
 800ec54:	400a      	ands	r2, r1
 800ec56:	651a      	str	r2, [r3, #80]	@ 0x50
 800ec58:	4b57      	ldr	r3, [pc, #348]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec5a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec5c:	4b56      	ldr	r3, [pc, #344]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec5e:	495a      	ldr	r1, [pc, #360]	@ (800edc8 <HAL_RCC_OscConfig+0x698>)
 800ec60:	400a      	ands	r2, r1
 800ec62:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	689b      	ldr	r3, [r3, #8]
 800ec68:	2b00      	cmp	r3, #0
 800ec6a:	d015      	beq.n	800ec98 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec6c:	f7fa f9fc 	bl	8009068 <HAL_GetTick>
 800ec70:	0003      	movs	r3, r0
 800ec72:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec74:	e009      	b.n	800ec8a <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ec76:	f7fa f9f7 	bl	8009068 <HAL_GetTick>
 800ec7a:	0002      	movs	r2, r0
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	1ad3      	subs	r3, r2, r3
 800ec80:	4a52      	ldr	r2, [pc, #328]	@ (800edcc <HAL_RCC_OscConfig+0x69c>)
 800ec82:	4293      	cmp	r3, r2
 800ec84:	d901      	bls.n	800ec8a <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 800ec86:	2303      	movs	r3, #3
 800ec88:	e11b      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ec8a:	4b4b      	ldr	r3, [pc, #300]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ec8c:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ec8e:	2380      	movs	r3, #128	@ 0x80
 800ec90:	009b      	lsls	r3, r3, #2
 800ec92:	4013      	ands	r3, r2
 800ec94:	d0ef      	beq.n	800ec76 <HAL_RCC_OscConfig+0x546>
 800ec96:	e014      	b.n	800ecc2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800ec98:	f7fa f9e6 	bl	8009068 <HAL_GetTick>
 800ec9c:	0003      	movs	r3, r0
 800ec9e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800eca0:	e009      	b.n	800ecb6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800eca2:	f7fa f9e1 	bl	8009068 <HAL_GetTick>
 800eca6:	0002      	movs	r2, r0
 800eca8:	697b      	ldr	r3, [r7, #20]
 800ecaa:	1ad3      	subs	r3, r2, r3
 800ecac:	4a47      	ldr	r2, [pc, #284]	@ (800edcc <HAL_RCC_OscConfig+0x69c>)
 800ecae:	4293      	cmp	r3, r2
 800ecb0:	d901      	bls.n	800ecb6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 800ecb2:	2303      	movs	r3, #3
 800ecb4:	e105      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800ecb6:	4b40      	ldr	r3, [pc, #256]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ecb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800ecba:	2380      	movs	r3, #128	@ 0x80
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	4013      	ands	r3, r2
 800ecc0:	d1ef      	bne.n	800eca2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800ecc2:	2323      	movs	r3, #35	@ 0x23
 800ecc4:	18fb      	adds	r3, r7, r3
 800ecc6:	781b      	ldrb	r3, [r3, #0]
 800ecc8:	2b01      	cmp	r3, #1
 800ecca:	d105      	bne.n	800ecd8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800eccc:	4b3a      	ldr	r3, [pc, #232]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ecce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ecd0:	4b39      	ldr	r3, [pc, #228]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ecd2:	493f      	ldr	r1, [pc, #252]	@ (800edd0 <HAL_RCC_OscConfig+0x6a0>)
 800ecd4:	400a      	ands	r2, r1
 800ecd6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	681b      	ldr	r3, [r3, #0]
 800ecdc:	2220      	movs	r2, #32
 800ecde:	4013      	ands	r3, r2
 800ece0:	d049      	beq.n	800ed76 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	699b      	ldr	r3, [r3, #24]
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d026      	beq.n	800ed38 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 800ecea:	4b33      	ldr	r3, [pc, #204]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ecec:	689a      	ldr	r2, [r3, #8]
 800ecee:	4b32      	ldr	r3, [pc, #200]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ecf0:	2101      	movs	r1, #1
 800ecf2:	430a      	orrs	r2, r1
 800ecf4:	609a      	str	r2, [r3, #8]
 800ecf6:	4b30      	ldr	r3, [pc, #192]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ecf8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ecfa:	4b2f      	ldr	r3, [pc, #188]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ecfc:	2101      	movs	r1, #1
 800ecfe:	430a      	orrs	r2, r1
 800ed00:	635a      	str	r2, [r3, #52]	@ 0x34
 800ed02:	4b34      	ldr	r3, [pc, #208]	@ (800edd4 <HAL_RCC_OscConfig+0x6a4>)
 800ed04:	6a1a      	ldr	r2, [r3, #32]
 800ed06:	4b33      	ldr	r3, [pc, #204]	@ (800edd4 <HAL_RCC_OscConfig+0x6a4>)
 800ed08:	2180      	movs	r1, #128	@ 0x80
 800ed0a:	0189      	lsls	r1, r1, #6
 800ed0c:	430a      	orrs	r2, r1
 800ed0e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed10:	f7fa f9aa 	bl	8009068 <HAL_GetTick>
 800ed14:	0003      	movs	r3, r0
 800ed16:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ed18:	e008      	b.n	800ed2c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ed1a:	f7fa f9a5 	bl	8009068 <HAL_GetTick>
 800ed1e:	0002      	movs	r2, r0
 800ed20:	697b      	ldr	r3, [r7, #20]
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	2b02      	cmp	r3, #2
 800ed26:	d901      	bls.n	800ed2c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 800ed28:	2303      	movs	r3, #3
 800ed2a:	e0ca      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800ed2c:	4b22      	ldr	r3, [pc, #136]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ed2e:	689b      	ldr	r3, [r3, #8]
 800ed30:	2202      	movs	r2, #2
 800ed32:	4013      	ands	r3, r2
 800ed34:	d0f1      	beq.n	800ed1a <HAL_RCC_OscConfig+0x5ea>
 800ed36:	e01e      	b.n	800ed76 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 800ed38:	4b1f      	ldr	r3, [pc, #124]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ed3a:	689a      	ldr	r2, [r3, #8]
 800ed3c:	4b1e      	ldr	r3, [pc, #120]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ed3e:	2101      	movs	r1, #1
 800ed40:	438a      	bics	r2, r1
 800ed42:	609a      	str	r2, [r3, #8]
 800ed44:	4b23      	ldr	r3, [pc, #140]	@ (800edd4 <HAL_RCC_OscConfig+0x6a4>)
 800ed46:	6a1a      	ldr	r2, [r3, #32]
 800ed48:	4b22      	ldr	r3, [pc, #136]	@ (800edd4 <HAL_RCC_OscConfig+0x6a4>)
 800ed4a:	4923      	ldr	r1, [pc, #140]	@ (800edd8 <HAL_RCC_OscConfig+0x6a8>)
 800ed4c:	400a      	ands	r2, r1
 800ed4e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed50:	f7fa f98a 	bl	8009068 <HAL_GetTick>
 800ed54:	0003      	movs	r3, r0
 800ed56:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ed58:	e008      	b.n	800ed6c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800ed5a:	f7fa f985 	bl	8009068 <HAL_GetTick>
 800ed5e:	0002      	movs	r2, r0
 800ed60:	697b      	ldr	r3, [r7, #20]
 800ed62:	1ad3      	subs	r3, r2, r3
 800ed64:	2b02      	cmp	r3, #2
 800ed66:	d901      	bls.n	800ed6c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 800ed68:	2303      	movs	r3, #3
 800ed6a:	e0aa      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800ed6c:	4b12      	ldr	r3, [pc, #72]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ed6e:	689b      	ldr	r3, [r3, #8]
 800ed70:	2202      	movs	r2, #2
 800ed72:	4013      	ands	r3, r2
 800ed74:	d1f1      	bne.n	800ed5a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800ed76:	687b      	ldr	r3, [r7, #4]
 800ed78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed7a:	2b00      	cmp	r3, #0
 800ed7c:	d100      	bne.n	800ed80 <HAL_RCC_OscConfig+0x650>
 800ed7e:	e09f      	b.n	800eec0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800ed80:	69fb      	ldr	r3, [r7, #28]
 800ed82:	2b0c      	cmp	r3, #12
 800ed84:	d100      	bne.n	800ed88 <HAL_RCC_OscConfig+0x658>
 800ed86:	e078      	b.n	800ee7a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800ed88:	687b      	ldr	r3, [r7, #4]
 800ed8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ed8c:	2b02      	cmp	r3, #2
 800ed8e:	d159      	bne.n	800ee44 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ed90:	4b09      	ldr	r3, [pc, #36]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ed92:	681a      	ldr	r2, [r3, #0]
 800ed94:	4b08      	ldr	r3, [pc, #32]	@ (800edb8 <HAL_RCC_OscConfig+0x688>)
 800ed96:	4911      	ldr	r1, [pc, #68]	@ (800eddc <HAL_RCC_OscConfig+0x6ac>)
 800ed98:	400a      	ands	r2, r1
 800ed9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ed9c:	f7fa f964 	bl	8009068 <HAL_GetTick>
 800eda0:	0003      	movs	r3, r0
 800eda2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800eda4:	e01c      	b.n	800ede0 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800eda6:	f7fa f95f 	bl	8009068 <HAL_GetTick>
 800edaa:	0002      	movs	r2, r0
 800edac:	697b      	ldr	r3, [r7, #20]
 800edae:	1ad3      	subs	r3, r2, r3
 800edb0:	2b02      	cmp	r3, #2
 800edb2:	d915      	bls.n	800ede0 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 800edb4:	2303      	movs	r3, #3
 800edb6:	e084      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
 800edb8:	40021000 	.word	0x40021000
 800edbc:	ffff1fff 	.word	0xffff1fff
 800edc0:	fffffeff 	.word	0xfffffeff
 800edc4:	40007000 	.word	0x40007000
 800edc8:	fffffbff 	.word	0xfffffbff
 800edcc:	00001388 	.word	0x00001388
 800edd0:	efffffff 	.word	0xefffffff
 800edd4:	40010000 	.word	0x40010000
 800edd8:	ffffdfff 	.word	0xffffdfff
 800eddc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ede0:	4b3a      	ldr	r3, [pc, #232]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ede2:	681a      	ldr	r2, [r3, #0]
 800ede4:	2380      	movs	r3, #128	@ 0x80
 800ede6:	049b      	lsls	r3, r3, #18
 800ede8:	4013      	ands	r3, r2
 800edea:	d1dc      	bne.n	800eda6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800edec:	4b37      	ldr	r3, [pc, #220]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800edee:	68db      	ldr	r3, [r3, #12]
 800edf0:	4a37      	ldr	r2, [pc, #220]	@ (800eed0 <HAL_RCC_OscConfig+0x7a0>)
 800edf2:	4013      	ands	r3, r2
 800edf4:	0019      	movs	r1, r3
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800edfa:	687b      	ldr	r3, [r7, #4]
 800edfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800edfe:	431a      	orrs	r2, r3
 800ee00:	687b      	ldr	r3, [r7, #4]
 800ee02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ee04:	431a      	orrs	r2, r3
 800ee06:	4b31      	ldr	r3, [pc, #196]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ee08:	430a      	orrs	r2, r1
 800ee0a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800ee0c:	4b2f      	ldr	r3, [pc, #188]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ee0e:	681a      	ldr	r2, [r3, #0]
 800ee10:	4b2e      	ldr	r3, [pc, #184]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ee12:	2180      	movs	r1, #128	@ 0x80
 800ee14:	0449      	lsls	r1, r1, #17
 800ee16:	430a      	orrs	r2, r1
 800ee18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee1a:	f7fa f925 	bl	8009068 <HAL_GetTick>
 800ee1e:	0003      	movs	r3, r0
 800ee20:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ee22:	e008      	b.n	800ee36 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee24:	f7fa f920 	bl	8009068 <HAL_GetTick>
 800ee28:	0002      	movs	r2, r0
 800ee2a:	697b      	ldr	r3, [r7, #20]
 800ee2c:	1ad3      	subs	r3, r2, r3
 800ee2e:	2b02      	cmp	r3, #2
 800ee30:	d901      	bls.n	800ee36 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 800ee32:	2303      	movs	r3, #3
 800ee34:	e045      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800ee36:	4b25      	ldr	r3, [pc, #148]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ee38:	681a      	ldr	r2, [r3, #0]
 800ee3a:	2380      	movs	r3, #128	@ 0x80
 800ee3c:	049b      	lsls	r3, r3, #18
 800ee3e:	4013      	ands	r3, r2
 800ee40:	d0f0      	beq.n	800ee24 <HAL_RCC_OscConfig+0x6f4>
 800ee42:	e03d      	b.n	800eec0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800ee44:	4b21      	ldr	r3, [pc, #132]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	4b20      	ldr	r3, [pc, #128]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ee4a:	4922      	ldr	r1, [pc, #136]	@ (800eed4 <HAL_RCC_OscConfig+0x7a4>)
 800ee4c:	400a      	ands	r2, r1
 800ee4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ee50:	f7fa f90a 	bl	8009068 <HAL_GetTick>
 800ee54:	0003      	movs	r3, r0
 800ee56:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ee58:	e008      	b.n	800ee6c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800ee5a:	f7fa f905 	bl	8009068 <HAL_GetTick>
 800ee5e:	0002      	movs	r2, r0
 800ee60:	697b      	ldr	r3, [r7, #20]
 800ee62:	1ad3      	subs	r3, r2, r3
 800ee64:	2b02      	cmp	r3, #2
 800ee66:	d901      	bls.n	800ee6c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 800ee68:	2303      	movs	r3, #3
 800ee6a:	e02a      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 800ee6c:	4b17      	ldr	r3, [pc, #92]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ee6e:	681a      	ldr	r2, [r3, #0]
 800ee70:	2380      	movs	r3, #128	@ 0x80
 800ee72:	049b      	lsls	r3, r3, #18
 800ee74:	4013      	ands	r3, r2
 800ee76:	d1f0      	bne.n	800ee5a <HAL_RCC_OscConfig+0x72a>
 800ee78:	e022      	b.n	800eec0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee7e:	2b01      	cmp	r3, #1
 800ee80:	d101      	bne.n	800ee86 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 800ee82:	2301      	movs	r3, #1
 800ee84:	e01d      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800ee86:	4b11      	ldr	r3, [pc, #68]	@ (800eecc <HAL_RCC_OscConfig+0x79c>)
 800ee88:	68db      	ldr	r3, [r3, #12]
 800ee8a:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800ee8c:	69ba      	ldr	r2, [r7, #24]
 800ee8e:	2380      	movs	r3, #128	@ 0x80
 800ee90:	025b      	lsls	r3, r3, #9
 800ee92:	401a      	ands	r2, r3
 800ee94:	687b      	ldr	r3, [r7, #4]
 800ee96:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ee98:	429a      	cmp	r2, r3
 800ee9a:	d10f      	bne.n	800eebc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800ee9c:	69ba      	ldr	r2, [r7, #24]
 800ee9e:	23f0      	movs	r3, #240	@ 0xf0
 800eea0:	039b      	lsls	r3, r3, #14
 800eea2:	401a      	ands	r2, r3
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800eea8:	429a      	cmp	r2, r3
 800eeaa:	d107      	bne.n	800eebc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 800eeac:	69ba      	ldr	r2, [r7, #24]
 800eeae:	23c0      	movs	r3, #192	@ 0xc0
 800eeb0:	041b      	lsls	r3, r3, #16
 800eeb2:	401a      	ands	r2, r3
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800eeb8:	429a      	cmp	r2, r3
 800eeba:	d001      	beq.n	800eec0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 800eebc:	2301      	movs	r3, #1
 800eebe:	e000      	b.n	800eec2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 800eec0:	2300      	movs	r3, #0
}
 800eec2:	0018      	movs	r0, r3
 800eec4:	46bd      	mov	sp, r7
 800eec6:	b00a      	add	sp, #40	@ 0x28
 800eec8:	bdb0      	pop	{r4, r5, r7, pc}
 800eeca:	46c0      	nop			@ (mov r8, r8)
 800eecc:	40021000 	.word	0x40021000
 800eed0:	ff02ffff 	.word	0xff02ffff
 800eed4:	feffffff 	.word	0xfeffffff

0800eed8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800eed8:	b5b0      	push	{r4, r5, r7, lr}
 800eeda:	b084      	sub	sp, #16
 800eedc:	af00      	add	r7, sp, #0
 800eede:	6078      	str	r0, [r7, #4]
 800eee0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d101      	bne.n	800eeec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800eee8:	2301      	movs	r3, #1
 800eeea:	e128      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800eeec:	4b96      	ldr	r3, [pc, #600]	@ (800f148 <HAL_RCC_ClockConfig+0x270>)
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	2201      	movs	r2, #1
 800eef2:	4013      	ands	r3, r2
 800eef4:	683a      	ldr	r2, [r7, #0]
 800eef6:	429a      	cmp	r2, r3
 800eef8:	d91e      	bls.n	800ef38 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800eefa:	4b93      	ldr	r3, [pc, #588]	@ (800f148 <HAL_RCC_ClockConfig+0x270>)
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	2201      	movs	r2, #1
 800ef00:	4393      	bics	r3, r2
 800ef02:	0019      	movs	r1, r3
 800ef04:	4b90      	ldr	r3, [pc, #576]	@ (800f148 <HAL_RCC_ClockConfig+0x270>)
 800ef06:	683a      	ldr	r2, [r7, #0]
 800ef08:	430a      	orrs	r2, r1
 800ef0a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800ef0c:	f7fa f8ac 	bl	8009068 <HAL_GetTick>
 800ef10:	0003      	movs	r3, r0
 800ef12:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef14:	e009      	b.n	800ef2a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800ef16:	f7fa f8a7 	bl	8009068 <HAL_GetTick>
 800ef1a:	0002      	movs	r2, r0
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	1ad3      	subs	r3, r2, r3
 800ef20:	4a8a      	ldr	r2, [pc, #552]	@ (800f14c <HAL_RCC_ClockConfig+0x274>)
 800ef22:	4293      	cmp	r3, r2
 800ef24:	d901      	bls.n	800ef2a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800ef26:	2303      	movs	r3, #3
 800ef28:	e109      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ef2a:	4b87      	ldr	r3, [pc, #540]	@ (800f148 <HAL_RCC_ClockConfig+0x270>)
 800ef2c:	681b      	ldr	r3, [r3, #0]
 800ef2e:	2201      	movs	r2, #1
 800ef30:	4013      	ands	r3, r2
 800ef32:	683a      	ldr	r2, [r7, #0]
 800ef34:	429a      	cmp	r2, r3
 800ef36:	d1ee      	bne.n	800ef16 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	2202      	movs	r2, #2
 800ef3e:	4013      	ands	r3, r2
 800ef40:	d009      	beq.n	800ef56 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ef42:	4b83      	ldr	r3, [pc, #524]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	22f0      	movs	r2, #240	@ 0xf0
 800ef48:	4393      	bics	r3, r2
 800ef4a:	0019      	movs	r1, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	689a      	ldr	r2, [r3, #8]
 800ef50:	4b7f      	ldr	r3, [pc, #508]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800ef52:	430a      	orrs	r2, r1
 800ef54:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	2201      	movs	r2, #1
 800ef5c:	4013      	ands	r3, r2
 800ef5e:	d100      	bne.n	800ef62 <HAL_RCC_ClockConfig+0x8a>
 800ef60:	e089      	b.n	800f076 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ef62:	687b      	ldr	r3, [r7, #4]
 800ef64:	685b      	ldr	r3, [r3, #4]
 800ef66:	2b02      	cmp	r3, #2
 800ef68:	d107      	bne.n	800ef7a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ef6a:	4b79      	ldr	r3, [pc, #484]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	2380      	movs	r3, #128	@ 0x80
 800ef70:	029b      	lsls	r3, r3, #10
 800ef72:	4013      	ands	r3, r2
 800ef74:	d120      	bne.n	800efb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ef76:	2301      	movs	r3, #1
 800ef78:	e0e1      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	685b      	ldr	r3, [r3, #4]
 800ef7e:	2b03      	cmp	r3, #3
 800ef80:	d107      	bne.n	800ef92 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ef82:	4b73      	ldr	r3, [pc, #460]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800ef84:	681a      	ldr	r2, [r3, #0]
 800ef86:	2380      	movs	r3, #128	@ 0x80
 800ef88:	049b      	lsls	r3, r3, #18
 800ef8a:	4013      	ands	r3, r2
 800ef8c:	d114      	bne.n	800efb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800ef8e:	2301      	movs	r3, #1
 800ef90:	e0d5      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800ef92:	687b      	ldr	r3, [r7, #4]
 800ef94:	685b      	ldr	r3, [r3, #4]
 800ef96:	2b01      	cmp	r3, #1
 800ef98:	d106      	bne.n	800efa8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800ef9a:	4b6d      	ldr	r3, [pc, #436]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2204      	movs	r2, #4
 800efa0:	4013      	ands	r3, r2
 800efa2:	d109      	bne.n	800efb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800efa4:	2301      	movs	r3, #1
 800efa6:	e0ca      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800efa8:	4b69      	ldr	r3, [pc, #420]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800efaa:	681a      	ldr	r2, [r3, #0]
 800efac:	2380      	movs	r3, #128	@ 0x80
 800efae:	009b      	lsls	r3, r3, #2
 800efb0:	4013      	ands	r3, r2
 800efb2:	d101      	bne.n	800efb8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800efb4:	2301      	movs	r3, #1
 800efb6:	e0c2      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800efb8:	4b65      	ldr	r3, [pc, #404]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800efba:	68db      	ldr	r3, [r3, #12]
 800efbc:	2203      	movs	r2, #3
 800efbe:	4393      	bics	r3, r2
 800efc0:	0019      	movs	r1, r3
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	685a      	ldr	r2, [r3, #4]
 800efc6:	4b62      	ldr	r3, [pc, #392]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800efc8:	430a      	orrs	r2, r1
 800efca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800efcc:	f7fa f84c 	bl	8009068 <HAL_GetTick>
 800efd0:	0003      	movs	r3, r0
 800efd2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	685b      	ldr	r3, [r3, #4]
 800efd8:	2b02      	cmp	r3, #2
 800efda:	d111      	bne.n	800f000 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800efdc:	e009      	b.n	800eff2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800efde:	f7fa f843 	bl	8009068 <HAL_GetTick>
 800efe2:	0002      	movs	r2, r0
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	1ad3      	subs	r3, r2, r3
 800efe8:	4a58      	ldr	r2, [pc, #352]	@ (800f14c <HAL_RCC_ClockConfig+0x274>)
 800efea:	4293      	cmp	r3, r2
 800efec:	d901      	bls.n	800eff2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 800efee:	2303      	movs	r3, #3
 800eff0:	e0a5      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800eff2:	4b57      	ldr	r3, [pc, #348]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800eff4:	68db      	ldr	r3, [r3, #12]
 800eff6:	220c      	movs	r2, #12
 800eff8:	4013      	ands	r3, r2
 800effa:	2b08      	cmp	r3, #8
 800effc:	d1ef      	bne.n	800efde <HAL_RCC_ClockConfig+0x106>
 800effe:	e03a      	b.n	800f076 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	685b      	ldr	r3, [r3, #4]
 800f004:	2b03      	cmp	r3, #3
 800f006:	d111      	bne.n	800f02c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f008:	e009      	b.n	800f01e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f00a:	f7fa f82d 	bl	8009068 <HAL_GetTick>
 800f00e:	0002      	movs	r2, r0
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	1ad3      	subs	r3, r2, r3
 800f014:	4a4d      	ldr	r2, [pc, #308]	@ (800f14c <HAL_RCC_ClockConfig+0x274>)
 800f016:	4293      	cmp	r3, r2
 800f018:	d901      	bls.n	800f01e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800f01a:	2303      	movs	r3, #3
 800f01c:	e08f      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800f01e:	4b4c      	ldr	r3, [pc, #304]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800f020:	68db      	ldr	r3, [r3, #12]
 800f022:	220c      	movs	r2, #12
 800f024:	4013      	ands	r3, r2
 800f026:	2b0c      	cmp	r3, #12
 800f028:	d1ef      	bne.n	800f00a <HAL_RCC_ClockConfig+0x132>
 800f02a:	e024      	b.n	800f076 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	685b      	ldr	r3, [r3, #4]
 800f030:	2b01      	cmp	r3, #1
 800f032:	d11b      	bne.n	800f06c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f034:	e009      	b.n	800f04a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f036:	f7fa f817 	bl	8009068 <HAL_GetTick>
 800f03a:	0002      	movs	r2, r0
 800f03c:	68fb      	ldr	r3, [r7, #12]
 800f03e:	1ad3      	subs	r3, r2, r3
 800f040:	4a42      	ldr	r2, [pc, #264]	@ (800f14c <HAL_RCC_ClockConfig+0x274>)
 800f042:	4293      	cmp	r3, r2
 800f044:	d901      	bls.n	800f04a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 800f046:	2303      	movs	r3, #3
 800f048:	e079      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800f04a:	4b41      	ldr	r3, [pc, #260]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800f04c:	68db      	ldr	r3, [r3, #12]
 800f04e:	220c      	movs	r2, #12
 800f050:	4013      	ands	r3, r2
 800f052:	2b04      	cmp	r3, #4
 800f054:	d1ef      	bne.n	800f036 <HAL_RCC_ClockConfig+0x15e>
 800f056:	e00e      	b.n	800f076 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f058:	f7fa f806 	bl	8009068 <HAL_GetTick>
 800f05c:	0002      	movs	r2, r0
 800f05e:	68fb      	ldr	r3, [r7, #12]
 800f060:	1ad3      	subs	r3, r2, r3
 800f062:	4a3a      	ldr	r2, [pc, #232]	@ (800f14c <HAL_RCC_ClockConfig+0x274>)
 800f064:	4293      	cmp	r3, r2
 800f066:	d901      	bls.n	800f06c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800f068:	2303      	movs	r3, #3
 800f06a:	e068      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800f06c:	4b38      	ldr	r3, [pc, #224]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	220c      	movs	r2, #12
 800f072:	4013      	ands	r3, r2
 800f074:	d1f0      	bne.n	800f058 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800f076:	4b34      	ldr	r3, [pc, #208]	@ (800f148 <HAL_RCC_ClockConfig+0x270>)
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	2201      	movs	r2, #1
 800f07c:	4013      	ands	r3, r2
 800f07e:	683a      	ldr	r2, [r7, #0]
 800f080:	429a      	cmp	r2, r3
 800f082:	d21e      	bcs.n	800f0c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800f084:	4b30      	ldr	r3, [pc, #192]	@ (800f148 <HAL_RCC_ClockConfig+0x270>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	2201      	movs	r2, #1
 800f08a:	4393      	bics	r3, r2
 800f08c:	0019      	movs	r1, r3
 800f08e:	4b2e      	ldr	r3, [pc, #184]	@ (800f148 <HAL_RCC_ClockConfig+0x270>)
 800f090:	683a      	ldr	r2, [r7, #0]
 800f092:	430a      	orrs	r2, r1
 800f094:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800f096:	f7f9 ffe7 	bl	8009068 <HAL_GetTick>
 800f09a:	0003      	movs	r3, r0
 800f09c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f09e:	e009      	b.n	800f0b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800f0a0:	f7f9 ffe2 	bl	8009068 <HAL_GetTick>
 800f0a4:	0002      	movs	r2, r0
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	1ad3      	subs	r3, r2, r3
 800f0aa:	4a28      	ldr	r2, [pc, #160]	@ (800f14c <HAL_RCC_ClockConfig+0x274>)
 800f0ac:	4293      	cmp	r3, r2
 800f0ae:	d901      	bls.n	800f0b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800f0b0:	2303      	movs	r3, #3
 800f0b2:	e044      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800f0b4:	4b24      	ldr	r3, [pc, #144]	@ (800f148 <HAL_RCC_ClockConfig+0x270>)
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	4013      	ands	r3, r2
 800f0bc:	683a      	ldr	r2, [r7, #0]
 800f0be:	429a      	cmp	r2, r3
 800f0c0:	d1ee      	bne.n	800f0a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	681b      	ldr	r3, [r3, #0]
 800f0c6:	2204      	movs	r2, #4
 800f0c8:	4013      	ands	r3, r2
 800f0ca:	d009      	beq.n	800f0e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800f0cc:	4b20      	ldr	r3, [pc, #128]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800f0ce:	68db      	ldr	r3, [r3, #12]
 800f0d0:	4a20      	ldr	r2, [pc, #128]	@ (800f154 <HAL_RCC_ClockConfig+0x27c>)
 800f0d2:	4013      	ands	r3, r2
 800f0d4:	0019      	movs	r1, r3
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	68da      	ldr	r2, [r3, #12]
 800f0da:	4b1d      	ldr	r3, [pc, #116]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800f0dc:	430a      	orrs	r2, r1
 800f0de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800f0e0:	687b      	ldr	r3, [r7, #4]
 800f0e2:	681b      	ldr	r3, [r3, #0]
 800f0e4:	2208      	movs	r2, #8
 800f0e6:	4013      	ands	r3, r2
 800f0e8:	d00a      	beq.n	800f100 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800f0ea:	4b19      	ldr	r3, [pc, #100]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800f0ec:	68db      	ldr	r3, [r3, #12]
 800f0ee:	4a1a      	ldr	r2, [pc, #104]	@ (800f158 <HAL_RCC_ClockConfig+0x280>)
 800f0f0:	4013      	ands	r3, r2
 800f0f2:	0019      	movs	r1, r3
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	691b      	ldr	r3, [r3, #16]
 800f0f8:	00da      	lsls	r2, r3, #3
 800f0fa:	4b15      	ldr	r3, [pc, #84]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800f0fc:	430a      	orrs	r2, r1
 800f0fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800f100:	f000 f832 	bl	800f168 <HAL_RCC_GetSysClockFreq>
 800f104:	0001      	movs	r1, r0
 800f106:	4b12      	ldr	r3, [pc, #72]	@ (800f150 <HAL_RCC_ClockConfig+0x278>)
 800f108:	68db      	ldr	r3, [r3, #12]
 800f10a:	091b      	lsrs	r3, r3, #4
 800f10c:	220f      	movs	r2, #15
 800f10e:	4013      	ands	r3, r2
 800f110:	4a12      	ldr	r2, [pc, #72]	@ (800f15c <HAL_RCC_ClockConfig+0x284>)
 800f112:	5cd3      	ldrb	r3, [r2, r3]
 800f114:	000a      	movs	r2, r1
 800f116:	40da      	lsrs	r2, r3
 800f118:	4b11      	ldr	r3, [pc, #68]	@ (800f160 <HAL_RCC_ClockConfig+0x288>)
 800f11a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800f11c:	4b11      	ldr	r3, [pc, #68]	@ (800f164 <HAL_RCC_ClockConfig+0x28c>)
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	250b      	movs	r5, #11
 800f122:	197c      	adds	r4, r7, r5
 800f124:	0018      	movs	r0, r3
 800f126:	f7f9 ff59 	bl	8008fdc <HAL_InitTick>
 800f12a:	0003      	movs	r3, r0
 800f12c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800f12e:	197b      	adds	r3, r7, r5
 800f130:	781b      	ldrb	r3, [r3, #0]
 800f132:	2b00      	cmp	r3, #0
 800f134:	d002      	beq.n	800f13c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800f136:	197b      	adds	r3, r7, r5
 800f138:	781b      	ldrb	r3, [r3, #0]
 800f13a:	e000      	b.n	800f13e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800f13c:	2300      	movs	r3, #0
}
 800f13e:	0018      	movs	r0, r3
 800f140:	46bd      	mov	sp, r7
 800f142:	b004      	add	sp, #16
 800f144:	bdb0      	pop	{r4, r5, r7, pc}
 800f146:	46c0      	nop			@ (mov r8, r8)
 800f148:	40022000 	.word	0x40022000
 800f14c:	00001388 	.word	0x00001388
 800f150:	40021000 	.word	0x40021000
 800f154:	fffff8ff 	.word	0xfffff8ff
 800f158:	ffffc7ff 	.word	0xffffc7ff
 800f15c:	0801b464 	.word	0x0801b464
 800f160:	20000144 	.word	0x20000144
 800f164:	20000158 	.word	0x20000158

0800f168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800f168:	b5b0      	push	{r4, r5, r7, lr}
 800f16a:	b08e      	sub	sp, #56	@ 0x38
 800f16c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800f16e:	4b4c      	ldr	r3, [pc, #304]	@ (800f2a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800f174:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f176:	230c      	movs	r3, #12
 800f178:	4013      	ands	r3, r2
 800f17a:	2b0c      	cmp	r3, #12
 800f17c:	d014      	beq.n	800f1a8 <HAL_RCC_GetSysClockFreq+0x40>
 800f17e:	d900      	bls.n	800f182 <HAL_RCC_GetSysClockFreq+0x1a>
 800f180:	e07b      	b.n	800f27a <HAL_RCC_GetSysClockFreq+0x112>
 800f182:	2b04      	cmp	r3, #4
 800f184:	d002      	beq.n	800f18c <HAL_RCC_GetSysClockFreq+0x24>
 800f186:	2b08      	cmp	r3, #8
 800f188:	d00b      	beq.n	800f1a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800f18a:	e076      	b.n	800f27a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f18c:	4b44      	ldr	r3, [pc, #272]	@ (800f2a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	2210      	movs	r2, #16
 800f192:	4013      	ands	r3, r2
 800f194:	d002      	beq.n	800f19c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800f196:	4b43      	ldr	r3, [pc, #268]	@ (800f2a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800f198:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800f19a:	e07c      	b.n	800f296 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800f19c:	4b42      	ldr	r3, [pc, #264]	@ (800f2a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800f19e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f1a0:	e079      	b.n	800f296 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800f1a2:	4b42      	ldr	r3, [pc, #264]	@ (800f2ac <HAL_RCC_GetSysClockFreq+0x144>)
 800f1a4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f1a6:	e076      	b.n	800f296 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800f1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1aa:	0c9a      	lsrs	r2, r3, #18
 800f1ac:	230f      	movs	r3, #15
 800f1ae:	401a      	ands	r2, r3
 800f1b0:	4b3f      	ldr	r3, [pc, #252]	@ (800f2b0 <HAL_RCC_GetSysClockFreq+0x148>)
 800f1b2:	5c9b      	ldrb	r3, [r3, r2]
 800f1b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800f1b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1b8:	0d9a      	lsrs	r2, r3, #22
 800f1ba:	2303      	movs	r3, #3
 800f1bc:	4013      	ands	r3, r2
 800f1be:	3301      	adds	r3, #1
 800f1c0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800f1c2:	4b37      	ldr	r3, [pc, #220]	@ (800f2a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800f1c4:	68da      	ldr	r2, [r3, #12]
 800f1c6:	2380      	movs	r3, #128	@ 0x80
 800f1c8:	025b      	lsls	r3, r3, #9
 800f1ca:	4013      	ands	r3, r2
 800f1cc:	d01a      	beq.n	800f204 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1d0:	61bb      	str	r3, [r7, #24]
 800f1d2:	2300      	movs	r3, #0
 800f1d4:	61fb      	str	r3, [r7, #28]
 800f1d6:	4a35      	ldr	r2, [pc, #212]	@ (800f2ac <HAL_RCC_GetSysClockFreq+0x144>)
 800f1d8:	2300      	movs	r3, #0
 800f1da:	69b8      	ldr	r0, [r7, #24]
 800f1dc:	69f9      	ldr	r1, [r7, #28]
 800f1de:	f7f1 fa03 	bl	80005e8 <__aeabi_lmul>
 800f1e2:	0002      	movs	r2, r0
 800f1e4:	000b      	movs	r3, r1
 800f1e6:	0010      	movs	r0, r2
 800f1e8:	0019      	movs	r1, r3
 800f1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1ec:	613b      	str	r3, [r7, #16]
 800f1ee:	2300      	movs	r3, #0
 800f1f0:	617b      	str	r3, [r7, #20]
 800f1f2:	693a      	ldr	r2, [r7, #16]
 800f1f4:	697b      	ldr	r3, [r7, #20]
 800f1f6:	f7f1 f9d7 	bl	80005a8 <__aeabi_uldivmod>
 800f1fa:	0002      	movs	r2, r0
 800f1fc:	000b      	movs	r3, r1
 800f1fe:	0013      	movs	r3, r2
 800f200:	637b      	str	r3, [r7, #52]	@ 0x34
 800f202:	e037      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800f204:	4b26      	ldr	r3, [pc, #152]	@ (800f2a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800f206:	681b      	ldr	r3, [r3, #0]
 800f208:	2210      	movs	r2, #16
 800f20a:	4013      	ands	r3, r2
 800f20c:	d01a      	beq.n	800f244 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800f20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f210:	60bb      	str	r3, [r7, #8]
 800f212:	2300      	movs	r3, #0
 800f214:	60fb      	str	r3, [r7, #12]
 800f216:	4a23      	ldr	r2, [pc, #140]	@ (800f2a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800f218:	2300      	movs	r3, #0
 800f21a:	68b8      	ldr	r0, [r7, #8]
 800f21c:	68f9      	ldr	r1, [r7, #12]
 800f21e:	f7f1 f9e3 	bl	80005e8 <__aeabi_lmul>
 800f222:	0002      	movs	r2, r0
 800f224:	000b      	movs	r3, r1
 800f226:	0010      	movs	r0, r2
 800f228:	0019      	movs	r1, r3
 800f22a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f22c:	603b      	str	r3, [r7, #0]
 800f22e:	2300      	movs	r3, #0
 800f230:	607b      	str	r3, [r7, #4]
 800f232:	683a      	ldr	r2, [r7, #0]
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	f7f1 f9b7 	bl	80005a8 <__aeabi_uldivmod>
 800f23a:	0002      	movs	r2, r0
 800f23c:	000b      	movs	r3, r1
 800f23e:	0013      	movs	r3, r2
 800f240:	637b      	str	r3, [r7, #52]	@ 0x34
 800f242:	e017      	b.n	800f274 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800f244:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f246:	0018      	movs	r0, r3
 800f248:	2300      	movs	r3, #0
 800f24a:	0019      	movs	r1, r3
 800f24c:	4a16      	ldr	r2, [pc, #88]	@ (800f2a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800f24e:	2300      	movs	r3, #0
 800f250:	f7f1 f9ca 	bl	80005e8 <__aeabi_lmul>
 800f254:	0002      	movs	r2, r0
 800f256:	000b      	movs	r3, r1
 800f258:	0010      	movs	r0, r2
 800f25a:	0019      	movs	r1, r3
 800f25c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f25e:	001c      	movs	r4, r3
 800f260:	2300      	movs	r3, #0
 800f262:	001d      	movs	r5, r3
 800f264:	0022      	movs	r2, r4
 800f266:	002b      	movs	r3, r5
 800f268:	f7f1 f99e 	bl	80005a8 <__aeabi_uldivmod>
 800f26c:	0002      	movs	r2, r0
 800f26e:	000b      	movs	r3, r1
 800f270:	0013      	movs	r3, r2
 800f272:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800f274:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800f276:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f278:	e00d      	b.n	800f296 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800f27a:	4b09      	ldr	r3, [pc, #36]	@ (800f2a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800f27c:	685b      	ldr	r3, [r3, #4]
 800f27e:	0b5b      	lsrs	r3, r3, #13
 800f280:	2207      	movs	r2, #7
 800f282:	4013      	ands	r3, r2
 800f284:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800f286:	6a3b      	ldr	r3, [r7, #32]
 800f288:	3301      	adds	r3, #1
 800f28a:	2280      	movs	r2, #128	@ 0x80
 800f28c:	0212      	lsls	r2, r2, #8
 800f28e:	409a      	lsls	r2, r3
 800f290:	0013      	movs	r3, r2
 800f292:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800f294:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800f296:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800f298:	0018      	movs	r0, r3
 800f29a:	46bd      	mov	sp, r7
 800f29c:	b00e      	add	sp, #56	@ 0x38
 800f29e:	bdb0      	pop	{r4, r5, r7, pc}
 800f2a0:	40021000 	.word	0x40021000
 800f2a4:	003d0900 	.word	0x003d0900
 800f2a8:	00f42400 	.word	0x00f42400
 800f2ac:	007a1200 	.word	0x007a1200
 800f2b0:	0801b47c 	.word	0x0801b47c

0800f2b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800f2b4:	b580      	push	{r7, lr}
 800f2b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800f2b8:	4b02      	ldr	r3, [pc, #8]	@ (800f2c4 <HAL_RCC_GetHCLKFreq+0x10>)
 800f2ba:	681b      	ldr	r3, [r3, #0]
}
 800f2bc:	0018      	movs	r0, r3
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
 800f2c2:	46c0      	nop			@ (mov r8, r8)
 800f2c4:	20000144 	.word	0x20000144

0800f2c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800f2cc:	f7ff fff2 	bl	800f2b4 <HAL_RCC_GetHCLKFreq>
 800f2d0:	0001      	movs	r1, r0
 800f2d2:	4b06      	ldr	r3, [pc, #24]	@ (800f2ec <HAL_RCC_GetPCLK1Freq+0x24>)
 800f2d4:	68db      	ldr	r3, [r3, #12]
 800f2d6:	0a1b      	lsrs	r3, r3, #8
 800f2d8:	2207      	movs	r2, #7
 800f2da:	4013      	ands	r3, r2
 800f2dc:	4a04      	ldr	r2, [pc, #16]	@ (800f2f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800f2de:	5cd3      	ldrb	r3, [r2, r3]
 800f2e0:	40d9      	lsrs	r1, r3
 800f2e2:	000b      	movs	r3, r1
}
 800f2e4:	0018      	movs	r0, r3
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	bd80      	pop	{r7, pc}
 800f2ea:	46c0      	nop			@ (mov r8, r8)
 800f2ec:	40021000 	.word	0x40021000
 800f2f0:	0801b474 	.word	0x0801b474

0800f2f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800f2f4:	b580      	push	{r7, lr}
 800f2f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800f2f8:	f7ff ffdc 	bl	800f2b4 <HAL_RCC_GetHCLKFreq>
 800f2fc:	0001      	movs	r1, r0
 800f2fe:	4b06      	ldr	r3, [pc, #24]	@ (800f318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800f300:	68db      	ldr	r3, [r3, #12]
 800f302:	0adb      	lsrs	r3, r3, #11
 800f304:	2207      	movs	r2, #7
 800f306:	4013      	ands	r3, r2
 800f308:	4a04      	ldr	r2, [pc, #16]	@ (800f31c <HAL_RCC_GetPCLK2Freq+0x28>)
 800f30a:	5cd3      	ldrb	r3, [r2, r3]
 800f30c:	40d9      	lsrs	r1, r3
 800f30e:	000b      	movs	r3, r1
}
 800f310:	0018      	movs	r0, r3
 800f312:	46bd      	mov	sp, r7
 800f314:	bd80      	pop	{r7, pc}
 800f316:	46c0      	nop			@ (mov r8, r8)
 800f318:	40021000 	.word	0x40021000
 800f31c:	0801b474 	.word	0x0801b474

0800f320 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800f320:	b580      	push	{r7, lr}
 800f322:	b086      	sub	sp, #24
 800f324:	af00      	add	r7, sp, #0
 800f326:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800f328:	2017      	movs	r0, #23
 800f32a:	183b      	adds	r3, r7, r0
 800f32c:	2200      	movs	r2, #0
 800f32e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	681b      	ldr	r3, [r3, #0]
 800f334:	2220      	movs	r2, #32
 800f336:	4013      	ands	r3, r2
 800f338:	d100      	bne.n	800f33c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800f33a:	e0c7      	b.n	800f4cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800f33c:	4b9b      	ldr	r3, [pc, #620]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f33e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f340:	2380      	movs	r3, #128	@ 0x80
 800f342:	055b      	lsls	r3, r3, #21
 800f344:	4013      	ands	r3, r2
 800f346:	d109      	bne.n	800f35c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800f348:	4b98      	ldr	r3, [pc, #608]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f34a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f34c:	4b97      	ldr	r3, [pc, #604]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f34e:	2180      	movs	r1, #128	@ 0x80
 800f350:	0549      	lsls	r1, r1, #21
 800f352:	430a      	orrs	r2, r1
 800f354:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800f356:	183b      	adds	r3, r7, r0
 800f358:	2201      	movs	r2, #1
 800f35a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f35c:	4b94      	ldr	r3, [pc, #592]	@ (800f5b0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f35e:	681a      	ldr	r2, [r3, #0]
 800f360:	2380      	movs	r3, #128	@ 0x80
 800f362:	005b      	lsls	r3, r3, #1
 800f364:	4013      	ands	r3, r2
 800f366:	d11a      	bne.n	800f39e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800f368:	4b91      	ldr	r3, [pc, #580]	@ (800f5b0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f36a:	681a      	ldr	r2, [r3, #0]
 800f36c:	4b90      	ldr	r3, [pc, #576]	@ (800f5b0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f36e:	2180      	movs	r1, #128	@ 0x80
 800f370:	0049      	lsls	r1, r1, #1
 800f372:	430a      	orrs	r2, r1
 800f374:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800f376:	f7f9 fe77 	bl	8009068 <HAL_GetTick>
 800f37a:	0003      	movs	r3, r0
 800f37c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f37e:	e008      	b.n	800f392 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800f380:	f7f9 fe72 	bl	8009068 <HAL_GetTick>
 800f384:	0002      	movs	r2, r0
 800f386:	693b      	ldr	r3, [r7, #16]
 800f388:	1ad3      	subs	r3, r2, r3
 800f38a:	2b64      	cmp	r3, #100	@ 0x64
 800f38c:	d901      	bls.n	800f392 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800f38e:	2303      	movs	r3, #3
 800f390:	e107      	b.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800f392:	4b87      	ldr	r3, [pc, #540]	@ (800f5b0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800f394:	681a      	ldr	r2, [r3, #0]
 800f396:	2380      	movs	r3, #128	@ 0x80
 800f398:	005b      	lsls	r3, r3, #1
 800f39a:	4013      	ands	r3, r2
 800f39c:	d0f0      	beq.n	800f380 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800f39e:	4b83      	ldr	r3, [pc, #524]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3a0:	681a      	ldr	r2, [r3, #0]
 800f3a2:	23c0      	movs	r3, #192	@ 0xc0
 800f3a4:	039b      	lsls	r3, r3, #14
 800f3a6:	4013      	ands	r3, r2
 800f3a8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	685a      	ldr	r2, [r3, #4]
 800f3ae:	23c0      	movs	r3, #192	@ 0xc0
 800f3b0:	039b      	lsls	r3, r3, #14
 800f3b2:	4013      	ands	r3, r2
 800f3b4:	68fa      	ldr	r2, [r7, #12]
 800f3b6:	429a      	cmp	r2, r3
 800f3b8:	d013      	beq.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	685a      	ldr	r2, [r3, #4]
 800f3be:	23c0      	movs	r3, #192	@ 0xc0
 800f3c0:	029b      	lsls	r3, r3, #10
 800f3c2:	401a      	ands	r2, r3
 800f3c4:	23c0      	movs	r3, #192	@ 0xc0
 800f3c6:	029b      	lsls	r3, r3, #10
 800f3c8:	429a      	cmp	r2, r3
 800f3ca:	d10a      	bne.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800f3cc:	4b77      	ldr	r3, [pc, #476]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3ce:	681a      	ldr	r2, [r3, #0]
 800f3d0:	2380      	movs	r3, #128	@ 0x80
 800f3d2:	029b      	lsls	r3, r3, #10
 800f3d4:	401a      	ands	r2, r3
 800f3d6:	2380      	movs	r3, #128	@ 0x80
 800f3d8:	029b      	lsls	r3, r3, #10
 800f3da:	429a      	cmp	r2, r3
 800f3dc:	d101      	bne.n	800f3e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800f3de:	2301      	movs	r3, #1
 800f3e0:	e0df      	b.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800f3e2:	4b72      	ldr	r3, [pc, #456]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f3e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f3e6:	23c0      	movs	r3, #192	@ 0xc0
 800f3e8:	029b      	lsls	r3, r3, #10
 800f3ea:	4013      	ands	r3, r2
 800f3ec:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800f3ee:	68fb      	ldr	r3, [r7, #12]
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d03b      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	685a      	ldr	r2, [r3, #4]
 800f3f8:	23c0      	movs	r3, #192	@ 0xc0
 800f3fa:	029b      	lsls	r3, r3, #10
 800f3fc:	4013      	ands	r3, r2
 800f3fe:	68fa      	ldr	r2, [r7, #12]
 800f400:	429a      	cmp	r2, r3
 800f402:	d033      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	681b      	ldr	r3, [r3, #0]
 800f408:	2220      	movs	r2, #32
 800f40a:	4013      	ands	r3, r2
 800f40c:	d02e      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800f40e:	4b67      	ldr	r3, [pc, #412]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f412:	4a68      	ldr	r2, [pc, #416]	@ (800f5b4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f414:	4013      	ands	r3, r2
 800f416:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800f418:	4b64      	ldr	r3, [pc, #400]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f41a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f41c:	4b63      	ldr	r3, [pc, #396]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f41e:	2180      	movs	r1, #128	@ 0x80
 800f420:	0309      	lsls	r1, r1, #12
 800f422:	430a      	orrs	r2, r1
 800f424:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800f426:	4b61      	ldr	r3, [pc, #388]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f428:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f42a:	4b60      	ldr	r3, [pc, #384]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f42c:	4962      	ldr	r1, [pc, #392]	@ (800f5b8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800f42e:	400a      	ands	r2, r1
 800f430:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800f432:	4b5e      	ldr	r3, [pc, #376]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f434:	68fa      	ldr	r2, [r7, #12]
 800f436:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800f438:	68fa      	ldr	r2, [r7, #12]
 800f43a:	2380      	movs	r3, #128	@ 0x80
 800f43c:	005b      	lsls	r3, r3, #1
 800f43e:	4013      	ands	r3, r2
 800f440:	d014      	beq.n	800f46c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800f442:	f7f9 fe11 	bl	8009068 <HAL_GetTick>
 800f446:	0003      	movs	r3, r0
 800f448:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f44a:	e009      	b.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800f44c:	f7f9 fe0c 	bl	8009068 <HAL_GetTick>
 800f450:	0002      	movs	r2, r0
 800f452:	693b      	ldr	r3, [r7, #16]
 800f454:	1ad3      	subs	r3, r2, r3
 800f456:	4a59      	ldr	r2, [pc, #356]	@ (800f5bc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800f458:	4293      	cmp	r3, r2
 800f45a:	d901      	bls.n	800f460 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800f45c:	2303      	movs	r3, #3
 800f45e:	e0a0      	b.n	800f5a2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800f460:	4b52      	ldr	r3, [pc, #328]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f462:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800f464:	2380      	movs	r3, #128	@ 0x80
 800f466:	009b      	lsls	r3, r3, #2
 800f468:	4013      	ands	r3, r2
 800f46a:	d0ef      	beq.n	800f44c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	681b      	ldr	r3, [r3, #0]
 800f470:	2220      	movs	r2, #32
 800f472:	4013      	ands	r3, r2
 800f474:	d01f      	beq.n	800f4b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	685a      	ldr	r2, [r3, #4]
 800f47a:	23c0      	movs	r3, #192	@ 0xc0
 800f47c:	029b      	lsls	r3, r3, #10
 800f47e:	401a      	ands	r2, r3
 800f480:	23c0      	movs	r3, #192	@ 0xc0
 800f482:	029b      	lsls	r3, r3, #10
 800f484:	429a      	cmp	r2, r3
 800f486:	d10c      	bne.n	800f4a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 800f488:	4b48      	ldr	r3, [pc, #288]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f48a:	681b      	ldr	r3, [r3, #0]
 800f48c:	4a4c      	ldr	r2, [pc, #304]	@ (800f5c0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800f48e:	4013      	ands	r3, r2
 800f490:	0019      	movs	r1, r3
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	685a      	ldr	r2, [r3, #4]
 800f496:	23c0      	movs	r3, #192	@ 0xc0
 800f498:	039b      	lsls	r3, r3, #14
 800f49a:	401a      	ands	r2, r3
 800f49c:	4b43      	ldr	r3, [pc, #268]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f49e:	430a      	orrs	r2, r1
 800f4a0:	601a      	str	r2, [r3, #0]
 800f4a2:	4b42      	ldr	r3, [pc, #264]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4a4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	685a      	ldr	r2, [r3, #4]
 800f4aa:	23c0      	movs	r3, #192	@ 0xc0
 800f4ac:	029b      	lsls	r3, r3, #10
 800f4ae:	401a      	ands	r2, r3
 800f4b0:	4b3e      	ldr	r3, [pc, #248]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4b2:	430a      	orrs	r2, r1
 800f4b4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800f4b6:	2317      	movs	r3, #23
 800f4b8:	18fb      	adds	r3, r7, r3
 800f4ba:	781b      	ldrb	r3, [r3, #0]
 800f4bc:	2b01      	cmp	r3, #1
 800f4be:	d105      	bne.n	800f4cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800f4c0:	4b3a      	ldr	r3, [pc, #232]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800f4c4:	4b39      	ldr	r3, [pc, #228]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4c6:	493f      	ldr	r1, [pc, #252]	@ (800f5c4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800f4c8:	400a      	ands	r2, r1
 800f4ca:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	681b      	ldr	r3, [r3, #0]
 800f4d0:	2201      	movs	r2, #1
 800f4d2:	4013      	ands	r3, r2
 800f4d4:	d009      	beq.n	800f4ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800f4d6:	4b35      	ldr	r3, [pc, #212]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4da:	2203      	movs	r2, #3
 800f4dc:	4393      	bics	r3, r2
 800f4de:	0019      	movs	r1, r3
 800f4e0:	687b      	ldr	r3, [r7, #4]
 800f4e2:	689a      	ldr	r2, [r3, #8]
 800f4e4:	4b31      	ldr	r3, [pc, #196]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4e6:	430a      	orrs	r2, r1
 800f4e8:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	681b      	ldr	r3, [r3, #0]
 800f4ee:	2202      	movs	r2, #2
 800f4f0:	4013      	ands	r3, r2
 800f4f2:	d009      	beq.n	800f508 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800f4f4:	4b2d      	ldr	r3, [pc, #180]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f4f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f4f8:	220c      	movs	r2, #12
 800f4fa:	4393      	bics	r3, r2
 800f4fc:	0019      	movs	r1, r3
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	68da      	ldr	r2, [r3, #12]
 800f502:	4b2a      	ldr	r3, [pc, #168]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f504:	430a      	orrs	r2, r1
 800f506:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	2204      	movs	r2, #4
 800f50e:	4013      	ands	r3, r2
 800f510:	d009      	beq.n	800f526 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800f512:	4b26      	ldr	r3, [pc, #152]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f514:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f516:	4a2c      	ldr	r2, [pc, #176]	@ (800f5c8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800f518:	4013      	ands	r3, r2
 800f51a:	0019      	movs	r1, r3
 800f51c:	687b      	ldr	r3, [r7, #4]
 800f51e:	691a      	ldr	r2, [r3, #16]
 800f520:	4b22      	ldr	r3, [pc, #136]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f522:	430a      	orrs	r2, r1
 800f524:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2208      	movs	r2, #8
 800f52c:	4013      	ands	r3, r2
 800f52e:	d009      	beq.n	800f544 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800f530:	4b1e      	ldr	r3, [pc, #120]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f532:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f534:	4a25      	ldr	r2, [pc, #148]	@ (800f5cc <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800f536:	4013      	ands	r3, r2
 800f538:	0019      	movs	r1, r3
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	695a      	ldr	r2, [r3, #20]
 800f53e:	4b1b      	ldr	r3, [pc, #108]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f540:	430a      	orrs	r2, r1
 800f542:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800f544:	687b      	ldr	r3, [r7, #4]
 800f546:	681a      	ldr	r2, [r3, #0]
 800f548:	2380      	movs	r3, #128	@ 0x80
 800f54a:	005b      	lsls	r3, r3, #1
 800f54c:	4013      	ands	r3, r2
 800f54e:	d009      	beq.n	800f564 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800f550:	4b16      	ldr	r3, [pc, #88]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f552:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f554:	4a17      	ldr	r2, [pc, #92]	@ (800f5b4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800f556:	4013      	ands	r3, r2
 800f558:	0019      	movs	r1, r3
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	699a      	ldr	r2, [r3, #24]
 800f55e:	4b13      	ldr	r3, [pc, #76]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f560:	430a      	orrs	r2, r1
 800f562:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800f564:	687b      	ldr	r3, [r7, #4]
 800f566:	681b      	ldr	r3, [r3, #0]
 800f568:	2240      	movs	r2, #64	@ 0x40
 800f56a:	4013      	ands	r3, r2
 800f56c:	d009      	beq.n	800f582 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800f56e:	4b0f      	ldr	r3, [pc, #60]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f572:	4a17      	ldr	r2, [pc, #92]	@ (800f5d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800f574:	4013      	ands	r3, r2
 800f576:	0019      	movs	r1, r3
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	6a1a      	ldr	r2, [r3, #32]
 800f57c:	4b0b      	ldr	r3, [pc, #44]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f57e:	430a      	orrs	r2, r1
 800f580:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800f582:	687b      	ldr	r3, [r7, #4]
 800f584:	681b      	ldr	r3, [r3, #0]
 800f586:	2280      	movs	r2, #128	@ 0x80
 800f588:	4013      	ands	r3, r2
 800f58a:	d009      	beq.n	800f5a0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800f58c:	4b07      	ldr	r3, [pc, #28]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f58e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f590:	4a10      	ldr	r2, [pc, #64]	@ (800f5d4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800f592:	4013      	ands	r3, r2
 800f594:	0019      	movs	r1, r3
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	69da      	ldr	r2, [r3, #28]
 800f59a:	4b04      	ldr	r3, [pc, #16]	@ (800f5ac <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800f59c:	430a      	orrs	r2, r1
 800f59e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800f5a0:	2300      	movs	r3, #0
}
 800f5a2:	0018      	movs	r0, r3
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	b006      	add	sp, #24
 800f5a8:	bd80      	pop	{r7, pc}
 800f5aa:	46c0      	nop			@ (mov r8, r8)
 800f5ac:	40021000 	.word	0x40021000
 800f5b0:	40007000 	.word	0x40007000
 800f5b4:	fffcffff 	.word	0xfffcffff
 800f5b8:	fff7ffff 	.word	0xfff7ffff
 800f5bc:	00001388 	.word	0x00001388
 800f5c0:	ffcfffff 	.word	0xffcfffff
 800f5c4:	efffffff 	.word	0xefffffff
 800f5c8:	fffff3ff 	.word	0xfffff3ff
 800f5cc:	ffffcfff 	.word	0xffffcfff
 800f5d0:	fbffffff 	.word	0xfbffffff
 800f5d4:	fff3ffff 	.word	0xfff3ffff

0800f5d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800f5d8:	b580      	push	{r7, lr}
 800f5da:	b082      	sub	sp, #8
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	2b00      	cmp	r3, #0
 800f5e4:	d101      	bne.n	800f5ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800f5e6:	2301      	movs	r3, #1
 800f5e8:	e032      	b.n	800f650 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	2239      	movs	r2, #57	@ 0x39
 800f5ee:	5c9b      	ldrb	r3, [r3, r2]
 800f5f0:	b2db      	uxtb	r3, r3
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	d107      	bne.n	800f606 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800f5f6:	687b      	ldr	r3, [r7, #4]
 800f5f8:	2238      	movs	r2, #56	@ 0x38
 800f5fa:	2100      	movs	r1, #0
 800f5fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800f5fe:	687b      	ldr	r3, [r7, #4]
 800f600:	0018      	movs	r0, r3
 800f602:	f7f8 fef5 	bl	80083f0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f606:	687b      	ldr	r3, [r7, #4]
 800f608:	2239      	movs	r2, #57	@ 0x39
 800f60a:	2102      	movs	r1, #2
 800f60c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800f60e:	687b      	ldr	r3, [r7, #4]
 800f610:	681a      	ldr	r2, [r3, #0]
 800f612:	687b      	ldr	r3, [r7, #4]
 800f614:	3304      	adds	r3, #4
 800f616:	0019      	movs	r1, r3
 800f618:	0010      	movs	r0, r2
 800f61a:	f000 f975 	bl	800f908 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	223e      	movs	r2, #62	@ 0x3e
 800f622:	2101      	movs	r1, #1
 800f624:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	223a      	movs	r2, #58	@ 0x3a
 800f62a:	2101      	movs	r1, #1
 800f62c:	5499      	strb	r1, [r3, r2]
 800f62e:	687b      	ldr	r3, [r7, #4]
 800f630:	223b      	movs	r2, #59	@ 0x3b
 800f632:	2101      	movs	r1, #1
 800f634:	5499      	strb	r1, [r3, r2]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	223c      	movs	r2, #60	@ 0x3c
 800f63a:	2101      	movs	r1, #1
 800f63c:	5499      	strb	r1, [r3, r2]
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	223d      	movs	r2, #61	@ 0x3d
 800f642:	2101      	movs	r1, #1
 800f644:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	2239      	movs	r2, #57	@ 0x39
 800f64a:	2101      	movs	r1, #1
 800f64c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f64e:	2300      	movs	r3, #0
}
 800f650:	0018      	movs	r0, r3
 800f652:	46bd      	mov	sp, r7
 800f654:	b002      	add	sp, #8
 800f656:	bd80      	pop	{r7, pc}

0800f658 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800f658:	b580      	push	{r7, lr}
 800f65a:	b084      	sub	sp, #16
 800f65c:	af00      	add	r7, sp, #0
 800f65e:	6078      	str	r0, [r7, #4]
 800f660:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800f662:	683b      	ldr	r3, [r7, #0]
 800f664:	2b00      	cmp	r3, #0
 800f666:	d108      	bne.n	800f67a <HAL_TIM_PWM_Start+0x22>
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	223a      	movs	r2, #58	@ 0x3a
 800f66c:	5c9b      	ldrb	r3, [r3, r2]
 800f66e:	b2db      	uxtb	r3, r3
 800f670:	3b01      	subs	r3, #1
 800f672:	1e5a      	subs	r2, r3, #1
 800f674:	4193      	sbcs	r3, r2
 800f676:	b2db      	uxtb	r3, r3
 800f678:	e01f      	b.n	800f6ba <HAL_TIM_PWM_Start+0x62>
 800f67a:	683b      	ldr	r3, [r7, #0]
 800f67c:	2b04      	cmp	r3, #4
 800f67e:	d108      	bne.n	800f692 <HAL_TIM_PWM_Start+0x3a>
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	223b      	movs	r2, #59	@ 0x3b
 800f684:	5c9b      	ldrb	r3, [r3, r2]
 800f686:	b2db      	uxtb	r3, r3
 800f688:	3b01      	subs	r3, #1
 800f68a:	1e5a      	subs	r2, r3, #1
 800f68c:	4193      	sbcs	r3, r2
 800f68e:	b2db      	uxtb	r3, r3
 800f690:	e013      	b.n	800f6ba <HAL_TIM_PWM_Start+0x62>
 800f692:	683b      	ldr	r3, [r7, #0]
 800f694:	2b08      	cmp	r3, #8
 800f696:	d108      	bne.n	800f6aa <HAL_TIM_PWM_Start+0x52>
 800f698:	687b      	ldr	r3, [r7, #4]
 800f69a:	223c      	movs	r2, #60	@ 0x3c
 800f69c:	5c9b      	ldrb	r3, [r3, r2]
 800f69e:	b2db      	uxtb	r3, r3
 800f6a0:	3b01      	subs	r3, #1
 800f6a2:	1e5a      	subs	r2, r3, #1
 800f6a4:	4193      	sbcs	r3, r2
 800f6a6:	b2db      	uxtb	r3, r3
 800f6a8:	e007      	b.n	800f6ba <HAL_TIM_PWM_Start+0x62>
 800f6aa:	687b      	ldr	r3, [r7, #4]
 800f6ac:	223d      	movs	r2, #61	@ 0x3d
 800f6ae:	5c9b      	ldrb	r3, [r3, r2]
 800f6b0:	b2db      	uxtb	r3, r3
 800f6b2:	3b01      	subs	r3, #1
 800f6b4:	1e5a      	subs	r2, r3, #1
 800f6b6:	4193      	sbcs	r3, r2
 800f6b8:	b2db      	uxtb	r3, r3
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d001      	beq.n	800f6c2 <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 800f6be:	2301      	movs	r3, #1
 800f6c0:	e052      	b.n	800f768 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800f6c2:	683b      	ldr	r3, [r7, #0]
 800f6c4:	2b00      	cmp	r3, #0
 800f6c6:	d104      	bne.n	800f6d2 <HAL_TIM_PWM_Start+0x7a>
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	223a      	movs	r2, #58	@ 0x3a
 800f6cc:	2102      	movs	r1, #2
 800f6ce:	5499      	strb	r1, [r3, r2]
 800f6d0:	e013      	b.n	800f6fa <HAL_TIM_PWM_Start+0xa2>
 800f6d2:	683b      	ldr	r3, [r7, #0]
 800f6d4:	2b04      	cmp	r3, #4
 800f6d6:	d104      	bne.n	800f6e2 <HAL_TIM_PWM_Start+0x8a>
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	223b      	movs	r2, #59	@ 0x3b
 800f6dc:	2102      	movs	r1, #2
 800f6de:	5499      	strb	r1, [r3, r2]
 800f6e0:	e00b      	b.n	800f6fa <HAL_TIM_PWM_Start+0xa2>
 800f6e2:	683b      	ldr	r3, [r7, #0]
 800f6e4:	2b08      	cmp	r3, #8
 800f6e6:	d104      	bne.n	800f6f2 <HAL_TIM_PWM_Start+0x9a>
 800f6e8:	687b      	ldr	r3, [r7, #4]
 800f6ea:	223c      	movs	r2, #60	@ 0x3c
 800f6ec:	2102      	movs	r1, #2
 800f6ee:	5499      	strb	r1, [r3, r2]
 800f6f0:	e003      	b.n	800f6fa <HAL_TIM_PWM_Start+0xa2>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	223d      	movs	r2, #61	@ 0x3d
 800f6f6:	2102      	movs	r1, #2
 800f6f8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	681b      	ldr	r3, [r3, #0]
 800f6fe:	6839      	ldr	r1, [r7, #0]
 800f700:	2201      	movs	r2, #1
 800f702:	0018      	movs	r0, r3
 800f704:	f000 fa62 	bl	800fbcc <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f708:	687b      	ldr	r3, [r7, #4]
 800f70a:	681a      	ldr	r2, [r3, #0]
 800f70c:	2380      	movs	r3, #128	@ 0x80
 800f70e:	05db      	lsls	r3, r3, #23
 800f710:	429a      	cmp	r2, r3
 800f712:	d00e      	beq.n	800f732 <HAL_TIM_PWM_Start+0xda>
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	4a15      	ldr	r2, [pc, #84]	@ (800f770 <HAL_TIM_PWM_Start+0x118>)
 800f71a:	4293      	cmp	r3, r2
 800f71c:	d009      	beq.n	800f732 <HAL_TIM_PWM_Start+0xda>
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	681b      	ldr	r3, [r3, #0]
 800f722:	4a14      	ldr	r2, [pc, #80]	@ (800f774 <HAL_TIM_PWM_Start+0x11c>)
 800f724:	4293      	cmp	r3, r2
 800f726:	d004      	beq.n	800f732 <HAL_TIM_PWM_Start+0xda>
 800f728:	687b      	ldr	r3, [r7, #4]
 800f72a:	681b      	ldr	r3, [r3, #0]
 800f72c:	4a12      	ldr	r2, [pc, #72]	@ (800f778 <HAL_TIM_PWM_Start+0x120>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	d111      	bne.n	800f756 <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	681b      	ldr	r3, [r3, #0]
 800f736:	689b      	ldr	r3, [r3, #8]
 800f738:	2207      	movs	r2, #7
 800f73a:	4013      	ands	r3, r2
 800f73c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	2b06      	cmp	r3, #6
 800f742:	d010      	beq.n	800f766 <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	681b      	ldr	r3, [r3, #0]
 800f748:	681a      	ldr	r2, [r3, #0]
 800f74a:	687b      	ldr	r3, [r7, #4]
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	2101      	movs	r1, #1
 800f750:	430a      	orrs	r2, r1
 800f752:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800f754:	e007      	b.n	800f766 <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	681b      	ldr	r3, [r3, #0]
 800f75a:	681a      	ldr	r2, [r3, #0]
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	2101      	movs	r1, #1
 800f762:	430a      	orrs	r2, r1
 800f764:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800f766:	2300      	movs	r3, #0
}
 800f768:	0018      	movs	r0, r3
 800f76a:	46bd      	mov	sp, r7
 800f76c:	b004      	add	sp, #16
 800f76e:	bd80      	pop	{r7, pc}
 800f770:	40000400 	.word	0x40000400
 800f774:	40010800 	.word	0x40010800
 800f778:	40011400 	.word	0x40011400

0800f77c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800f77c:	b580      	push	{r7, lr}
 800f77e:	b086      	sub	sp, #24
 800f780:	af00      	add	r7, sp, #0
 800f782:	60f8      	str	r0, [r7, #12]
 800f784:	60b9      	str	r1, [r7, #8]
 800f786:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800f788:	2317      	movs	r3, #23
 800f78a:	18fb      	adds	r3, r7, r3
 800f78c:	2200      	movs	r2, #0
 800f78e:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800f790:	68fb      	ldr	r3, [r7, #12]
 800f792:	2238      	movs	r2, #56	@ 0x38
 800f794:	5c9b      	ldrb	r3, [r3, r2]
 800f796:	2b01      	cmp	r3, #1
 800f798:	d101      	bne.n	800f79e <HAL_TIM_PWM_ConfigChannel+0x22>
 800f79a:	2302      	movs	r3, #2
 800f79c:	e0ad      	b.n	800f8fa <HAL_TIM_PWM_ConfigChannel+0x17e>
 800f79e:	68fb      	ldr	r3, [r7, #12]
 800f7a0:	2238      	movs	r2, #56	@ 0x38
 800f7a2:	2101      	movs	r1, #1
 800f7a4:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	2b0c      	cmp	r3, #12
 800f7aa:	d100      	bne.n	800f7ae <HAL_TIM_PWM_ConfigChannel+0x32>
 800f7ac:	e076      	b.n	800f89c <HAL_TIM_PWM_ConfigChannel+0x120>
 800f7ae:	687b      	ldr	r3, [r7, #4]
 800f7b0:	2b0c      	cmp	r3, #12
 800f7b2:	d900      	bls.n	800f7b6 <HAL_TIM_PWM_ConfigChannel+0x3a>
 800f7b4:	e095      	b.n	800f8e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2b08      	cmp	r3, #8
 800f7ba:	d04e      	beq.n	800f85a <HAL_TIM_PWM_ConfigChannel+0xde>
 800f7bc:	687b      	ldr	r3, [r7, #4]
 800f7be:	2b08      	cmp	r3, #8
 800f7c0:	d900      	bls.n	800f7c4 <HAL_TIM_PWM_ConfigChannel+0x48>
 800f7c2:	e08e      	b.n	800f8e2 <HAL_TIM_PWM_ConfigChannel+0x166>
 800f7c4:	687b      	ldr	r3, [r7, #4]
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d003      	beq.n	800f7d2 <HAL_TIM_PWM_ConfigChannel+0x56>
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	2b04      	cmp	r3, #4
 800f7ce:	d021      	beq.n	800f814 <HAL_TIM_PWM_ConfigChannel+0x98>
 800f7d0:	e087      	b.n	800f8e2 <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	0011      	movs	r1, r2
 800f7da:	0018      	movs	r0, r3
 800f7dc:	f000 f8f2 	bl	800f9c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800f7e0:	68fb      	ldr	r3, [r7, #12]
 800f7e2:	681b      	ldr	r3, [r3, #0]
 800f7e4:	699a      	ldr	r2, [r3, #24]
 800f7e6:	68fb      	ldr	r3, [r7, #12]
 800f7e8:	681b      	ldr	r3, [r3, #0]
 800f7ea:	2108      	movs	r1, #8
 800f7ec:	430a      	orrs	r2, r1
 800f7ee:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800f7f0:	68fb      	ldr	r3, [r7, #12]
 800f7f2:	681b      	ldr	r3, [r3, #0]
 800f7f4:	699a      	ldr	r2, [r3, #24]
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	2104      	movs	r1, #4
 800f7fc:	438a      	bics	r2, r1
 800f7fe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800f800:	68fb      	ldr	r3, [r7, #12]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	6999      	ldr	r1, [r3, #24]
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	68da      	ldr	r2, [r3, #12]
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	681b      	ldr	r3, [r3, #0]
 800f80e:	430a      	orrs	r2, r1
 800f810:	619a      	str	r2, [r3, #24]
      break;
 800f812:	e06b      	b.n	800f8ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800f814:	68fb      	ldr	r3, [r7, #12]
 800f816:	681b      	ldr	r3, [r3, #0]
 800f818:	68ba      	ldr	r2, [r7, #8]
 800f81a:	0011      	movs	r1, r2
 800f81c:	0018      	movs	r0, r3
 800f81e:	f000 f90d 	bl	800fa3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	699a      	ldr	r2, [r3, #24]
 800f828:	68fb      	ldr	r3, [r7, #12]
 800f82a:	681b      	ldr	r3, [r3, #0]
 800f82c:	2180      	movs	r1, #128	@ 0x80
 800f82e:	0109      	lsls	r1, r1, #4
 800f830:	430a      	orrs	r2, r1
 800f832:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	681b      	ldr	r3, [r3, #0]
 800f838:	699a      	ldr	r2, [r3, #24]
 800f83a:	68fb      	ldr	r3, [r7, #12]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	4931      	ldr	r1, [pc, #196]	@ (800f904 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800f840:	400a      	ands	r2, r1
 800f842:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	681b      	ldr	r3, [r3, #0]
 800f848:	6999      	ldr	r1, [r3, #24]
 800f84a:	68bb      	ldr	r3, [r7, #8]
 800f84c:	68db      	ldr	r3, [r3, #12]
 800f84e:	021a      	lsls	r2, r3, #8
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	681b      	ldr	r3, [r3, #0]
 800f854:	430a      	orrs	r2, r1
 800f856:	619a      	str	r2, [r3, #24]
      break;
 800f858:	e048      	b.n	800f8ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	68ba      	ldr	r2, [r7, #8]
 800f860:	0011      	movs	r1, r2
 800f862:	0018      	movs	r0, r3
 800f864:	f000 f92c 	bl	800fac0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800f868:	68fb      	ldr	r3, [r7, #12]
 800f86a:	681b      	ldr	r3, [r3, #0]
 800f86c:	69da      	ldr	r2, [r3, #28]
 800f86e:	68fb      	ldr	r3, [r7, #12]
 800f870:	681b      	ldr	r3, [r3, #0]
 800f872:	2108      	movs	r1, #8
 800f874:	430a      	orrs	r2, r1
 800f876:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800f878:	68fb      	ldr	r3, [r7, #12]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	69da      	ldr	r2, [r3, #28]
 800f87e:	68fb      	ldr	r3, [r7, #12]
 800f880:	681b      	ldr	r3, [r3, #0]
 800f882:	2104      	movs	r1, #4
 800f884:	438a      	bics	r2, r1
 800f886:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	69d9      	ldr	r1, [r3, #28]
 800f88e:	68bb      	ldr	r3, [r7, #8]
 800f890:	68da      	ldr	r2, [r3, #12]
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	681b      	ldr	r3, [r3, #0]
 800f896:	430a      	orrs	r2, r1
 800f898:	61da      	str	r2, [r3, #28]
      break;
 800f89a:	e027      	b.n	800f8ec <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	681b      	ldr	r3, [r3, #0]
 800f8a0:	68ba      	ldr	r2, [r7, #8]
 800f8a2:	0011      	movs	r1, r2
 800f8a4:	0018      	movs	r0, r3
 800f8a6:	f000 f94b 	bl	800fb40 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	681b      	ldr	r3, [r3, #0]
 800f8ae:	69da      	ldr	r2, [r3, #28]
 800f8b0:	68fb      	ldr	r3, [r7, #12]
 800f8b2:	681b      	ldr	r3, [r3, #0]
 800f8b4:	2180      	movs	r1, #128	@ 0x80
 800f8b6:	0109      	lsls	r1, r1, #4
 800f8b8:	430a      	orrs	r2, r1
 800f8ba:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800f8bc:	68fb      	ldr	r3, [r7, #12]
 800f8be:	681b      	ldr	r3, [r3, #0]
 800f8c0:	69da      	ldr	r2, [r3, #28]
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	681b      	ldr	r3, [r3, #0]
 800f8c6:	490f      	ldr	r1, [pc, #60]	@ (800f904 <HAL_TIM_PWM_ConfigChannel+0x188>)
 800f8c8:	400a      	ands	r2, r1
 800f8ca:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800f8cc:	68fb      	ldr	r3, [r7, #12]
 800f8ce:	681b      	ldr	r3, [r3, #0]
 800f8d0:	69d9      	ldr	r1, [r3, #28]
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	68db      	ldr	r3, [r3, #12]
 800f8d6:	021a      	lsls	r2, r3, #8
 800f8d8:	68fb      	ldr	r3, [r7, #12]
 800f8da:	681b      	ldr	r3, [r3, #0]
 800f8dc:	430a      	orrs	r2, r1
 800f8de:	61da      	str	r2, [r3, #28]
      break;
 800f8e0:	e004      	b.n	800f8ec <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 800f8e2:	2317      	movs	r3, #23
 800f8e4:	18fb      	adds	r3, r7, r3
 800f8e6:	2201      	movs	r2, #1
 800f8e8:	701a      	strb	r2, [r3, #0]
      break;
 800f8ea:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2238      	movs	r2, #56	@ 0x38
 800f8f0:	2100      	movs	r1, #0
 800f8f2:	5499      	strb	r1, [r3, r2]

  return status;
 800f8f4:	2317      	movs	r3, #23
 800f8f6:	18fb      	adds	r3, r7, r3
 800f8f8:	781b      	ldrb	r3, [r3, #0]
}
 800f8fa:	0018      	movs	r0, r3
 800f8fc:	46bd      	mov	sp, r7
 800f8fe:	b006      	add	sp, #24
 800f900:	bd80      	pop	{r7, pc}
 800f902:	46c0      	nop			@ (mov r8, r8)
 800f904:	fffffbff 	.word	0xfffffbff

0800f908 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f908:	b580      	push	{r7, lr}
 800f90a:	b084      	sub	sp, #16
 800f90c:	af00      	add	r7, sp, #0
 800f90e:	6078      	str	r0, [r7, #4]
 800f910:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f918:	687a      	ldr	r2, [r7, #4]
 800f91a:	2380      	movs	r3, #128	@ 0x80
 800f91c:	05db      	lsls	r3, r3, #23
 800f91e:	429a      	cmp	r2, r3
 800f920:	d00b      	beq.n	800f93a <TIM_Base_SetConfig+0x32>
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	4a23      	ldr	r2, [pc, #140]	@ (800f9b4 <TIM_Base_SetConfig+0xac>)
 800f926:	4293      	cmp	r3, r2
 800f928:	d007      	beq.n	800f93a <TIM_Base_SetConfig+0x32>
 800f92a:	687b      	ldr	r3, [r7, #4]
 800f92c:	4a22      	ldr	r2, [pc, #136]	@ (800f9b8 <TIM_Base_SetConfig+0xb0>)
 800f92e:	4293      	cmp	r3, r2
 800f930:	d003      	beq.n	800f93a <TIM_Base_SetConfig+0x32>
 800f932:	687b      	ldr	r3, [r7, #4]
 800f934:	4a21      	ldr	r2, [pc, #132]	@ (800f9bc <TIM_Base_SetConfig+0xb4>)
 800f936:	4293      	cmp	r3, r2
 800f938:	d108      	bne.n	800f94c <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2270      	movs	r2, #112	@ 0x70
 800f93e:	4393      	bics	r3, r2
 800f940:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f942:	683b      	ldr	r3, [r7, #0]
 800f944:	685b      	ldr	r3, [r3, #4]
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	4313      	orrs	r3, r2
 800f94a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f94c:	687a      	ldr	r2, [r7, #4]
 800f94e:	2380      	movs	r3, #128	@ 0x80
 800f950:	05db      	lsls	r3, r3, #23
 800f952:	429a      	cmp	r2, r3
 800f954:	d00b      	beq.n	800f96e <TIM_Base_SetConfig+0x66>
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	4a16      	ldr	r2, [pc, #88]	@ (800f9b4 <TIM_Base_SetConfig+0xac>)
 800f95a:	4293      	cmp	r3, r2
 800f95c:	d007      	beq.n	800f96e <TIM_Base_SetConfig+0x66>
 800f95e:	687b      	ldr	r3, [r7, #4]
 800f960:	4a15      	ldr	r2, [pc, #84]	@ (800f9b8 <TIM_Base_SetConfig+0xb0>)
 800f962:	4293      	cmp	r3, r2
 800f964:	d003      	beq.n	800f96e <TIM_Base_SetConfig+0x66>
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	4a14      	ldr	r2, [pc, #80]	@ (800f9bc <TIM_Base_SetConfig+0xb4>)
 800f96a:	4293      	cmp	r3, r2
 800f96c:	d108      	bne.n	800f980 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f96e:	68fb      	ldr	r3, [r7, #12]
 800f970:	4a13      	ldr	r2, [pc, #76]	@ (800f9c0 <TIM_Base_SetConfig+0xb8>)
 800f972:	4013      	ands	r3, r2
 800f974:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f976:	683b      	ldr	r3, [r7, #0]
 800f978:	68db      	ldr	r3, [r3, #12]
 800f97a:	68fa      	ldr	r2, [r7, #12]
 800f97c:	4313      	orrs	r3, r2
 800f97e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f980:	68fb      	ldr	r3, [r7, #12]
 800f982:	2280      	movs	r2, #128	@ 0x80
 800f984:	4393      	bics	r3, r2
 800f986:	001a      	movs	r2, r3
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	691b      	ldr	r3, [r3, #16]
 800f98c:	4313      	orrs	r3, r2
 800f98e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f990:	687b      	ldr	r3, [r7, #4]
 800f992:	68fa      	ldr	r2, [r7, #12]
 800f994:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f996:	683b      	ldr	r3, [r7, #0]
 800f998:	689a      	ldr	r2, [r3, #8]
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f99e:	683b      	ldr	r3, [r7, #0]
 800f9a0:	681a      	ldr	r2, [r3, #0]
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f9a6:	687b      	ldr	r3, [r7, #4]
 800f9a8:	2201      	movs	r2, #1
 800f9aa:	615a      	str	r2, [r3, #20]
}
 800f9ac:	46c0      	nop			@ (mov r8, r8)
 800f9ae:	46bd      	mov	sp, r7
 800f9b0:	b004      	add	sp, #16
 800f9b2:	bd80      	pop	{r7, pc}
 800f9b4:	40000400 	.word	0x40000400
 800f9b8:	40010800 	.word	0x40010800
 800f9bc:	40011400 	.word	0x40011400
 800f9c0:	fffffcff 	.word	0xfffffcff

0800f9c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800f9c4:	b580      	push	{r7, lr}
 800f9c6:	b086      	sub	sp, #24
 800f9c8:	af00      	add	r7, sp, #0
 800f9ca:	6078      	str	r0, [r7, #4]
 800f9cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	6a1b      	ldr	r3, [r3, #32]
 800f9d2:	2201      	movs	r2, #1
 800f9d4:	4393      	bics	r3, r2
 800f9d6:	001a      	movs	r2, r3
 800f9d8:	687b      	ldr	r3, [r7, #4]
 800f9da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800f9dc:	687b      	ldr	r3, [r7, #4]
 800f9de:	6a1b      	ldr	r3, [r3, #32]
 800f9e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	685b      	ldr	r3, [r3, #4]
 800f9e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	699b      	ldr	r3, [r3, #24]
 800f9ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	2270      	movs	r2, #112	@ 0x70
 800f9f2:	4393      	bics	r3, r2
 800f9f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800f9f6:	68fb      	ldr	r3, [r7, #12]
 800f9f8:	2203      	movs	r2, #3
 800f9fa:	4393      	bics	r3, r2
 800f9fc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800f9fe:	683b      	ldr	r3, [r7, #0]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	68fa      	ldr	r2, [r7, #12]
 800fa04:	4313      	orrs	r3, r2
 800fa06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800fa08:	697b      	ldr	r3, [r7, #20]
 800fa0a:	2202      	movs	r2, #2
 800fa0c:	4393      	bics	r3, r2
 800fa0e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800fa10:	683b      	ldr	r3, [r7, #0]
 800fa12:	689b      	ldr	r3, [r3, #8]
 800fa14:	697a      	ldr	r2, [r7, #20]
 800fa16:	4313      	orrs	r3, r2
 800fa18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa1a:	687b      	ldr	r3, [r7, #4]
 800fa1c:	693a      	ldr	r2, [r7, #16]
 800fa1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	68fa      	ldr	r2, [r7, #12]
 800fa24:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800fa26:	683b      	ldr	r3, [r7, #0]
 800fa28:	685a      	ldr	r2, [r3, #4]
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	697a      	ldr	r2, [r7, #20]
 800fa32:	621a      	str	r2, [r3, #32]
}
 800fa34:	46c0      	nop			@ (mov r8, r8)
 800fa36:	46bd      	mov	sp, r7
 800fa38:	b006      	add	sp, #24
 800fa3a:	bd80      	pop	{r7, pc}

0800fa3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fa3c:	b580      	push	{r7, lr}
 800fa3e:	b086      	sub	sp, #24
 800fa40:	af00      	add	r7, sp, #0
 800fa42:	6078      	str	r0, [r7, #4]
 800fa44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	6a1b      	ldr	r3, [r3, #32]
 800fa4a:	2210      	movs	r2, #16
 800fa4c:	4393      	bics	r3, r2
 800fa4e:	001a      	movs	r2, r3
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	6a1b      	ldr	r3, [r3, #32]
 800fa58:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	685b      	ldr	r3, [r3, #4]
 800fa5e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	699b      	ldr	r3, [r3, #24]
 800fa64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	4a13      	ldr	r2, [pc, #76]	@ (800fab8 <TIM_OC2_SetConfig+0x7c>)
 800fa6a:	4013      	ands	r3, r2
 800fa6c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800fa6e:	68fb      	ldr	r3, [r7, #12]
 800fa70:	4a12      	ldr	r2, [pc, #72]	@ (800fabc <TIM_OC2_SetConfig+0x80>)
 800fa72:	4013      	ands	r3, r2
 800fa74:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fa76:	683b      	ldr	r3, [r7, #0]
 800fa78:	681b      	ldr	r3, [r3, #0]
 800fa7a:	021b      	lsls	r3, r3, #8
 800fa7c:	68fa      	ldr	r2, [r7, #12]
 800fa7e:	4313      	orrs	r3, r2
 800fa80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800fa82:	697b      	ldr	r3, [r7, #20]
 800fa84:	2220      	movs	r2, #32
 800fa86:	4393      	bics	r3, r2
 800fa88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800fa8a:	683b      	ldr	r3, [r7, #0]
 800fa8c:	689b      	ldr	r3, [r3, #8]
 800fa8e:	011b      	lsls	r3, r3, #4
 800fa90:	697a      	ldr	r2, [r7, #20]
 800fa92:	4313      	orrs	r3, r2
 800fa94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	693a      	ldr	r2, [r7, #16]
 800fa9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	68fa      	ldr	r2, [r7, #12]
 800faa0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800faa2:	683b      	ldr	r3, [r7, #0]
 800faa4:	685a      	ldr	r2, [r3, #4]
 800faa6:	687b      	ldr	r3, [r7, #4]
 800faa8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800faaa:	687b      	ldr	r3, [r7, #4]
 800faac:	697a      	ldr	r2, [r7, #20]
 800faae:	621a      	str	r2, [r3, #32]
}
 800fab0:	46c0      	nop			@ (mov r8, r8)
 800fab2:	46bd      	mov	sp, r7
 800fab4:	b006      	add	sp, #24
 800fab6:	bd80      	pop	{r7, pc}
 800fab8:	ffff8fff 	.word	0xffff8fff
 800fabc:	fffffcff 	.word	0xfffffcff

0800fac0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fac0:	b580      	push	{r7, lr}
 800fac2:	b086      	sub	sp, #24
 800fac4:	af00      	add	r7, sp, #0
 800fac6:	6078      	str	r0, [r7, #4]
 800fac8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800faca:	687b      	ldr	r3, [r7, #4]
 800facc:	6a1b      	ldr	r3, [r3, #32]
 800face:	4a1a      	ldr	r2, [pc, #104]	@ (800fb38 <TIM_OC3_SetConfig+0x78>)
 800fad0:	401a      	ands	r2, r3
 800fad2:	687b      	ldr	r3, [r7, #4]
 800fad4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fad6:	687b      	ldr	r3, [r7, #4]
 800fad8:	6a1b      	ldr	r3, [r3, #32]
 800fada:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fadc:	687b      	ldr	r3, [r7, #4]
 800fade:	685b      	ldr	r3, [r3, #4]
 800fae0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	69db      	ldr	r3, [r3, #28]
 800fae6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800fae8:	68fb      	ldr	r3, [r7, #12]
 800faea:	2270      	movs	r2, #112	@ 0x70
 800faec:	4393      	bics	r3, r2
 800faee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800faf0:	68fb      	ldr	r3, [r7, #12]
 800faf2:	2203      	movs	r2, #3
 800faf4:	4393      	bics	r3, r2
 800faf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800faf8:	683b      	ldr	r3, [r7, #0]
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	68fa      	ldr	r2, [r7, #12]
 800fafe:	4313      	orrs	r3, r2
 800fb00:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800fb02:	697b      	ldr	r3, [r7, #20]
 800fb04:	4a0d      	ldr	r2, [pc, #52]	@ (800fb3c <TIM_OC3_SetConfig+0x7c>)
 800fb06:	4013      	ands	r3, r2
 800fb08:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800fb0a:	683b      	ldr	r3, [r7, #0]
 800fb0c:	689b      	ldr	r3, [r3, #8]
 800fb0e:	021b      	lsls	r3, r3, #8
 800fb10:	697a      	ldr	r2, [r7, #20]
 800fb12:	4313      	orrs	r3, r2
 800fb14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb16:	687b      	ldr	r3, [r7, #4]
 800fb18:	693a      	ldr	r2, [r7, #16]
 800fb1a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	68fa      	ldr	r2, [r7, #12]
 800fb20:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800fb22:	683b      	ldr	r3, [r7, #0]
 800fb24:	685a      	ldr	r2, [r3, #4]
 800fb26:	687b      	ldr	r3, [r7, #4]
 800fb28:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	697a      	ldr	r2, [r7, #20]
 800fb2e:	621a      	str	r2, [r3, #32]
}
 800fb30:	46c0      	nop			@ (mov r8, r8)
 800fb32:	46bd      	mov	sp, r7
 800fb34:	b006      	add	sp, #24
 800fb36:	bd80      	pop	{r7, pc}
 800fb38:	fffffeff 	.word	0xfffffeff
 800fb3c:	fffffdff 	.word	0xfffffdff

0800fb40 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800fb40:	b580      	push	{r7, lr}
 800fb42:	b086      	sub	sp, #24
 800fb44:	af00      	add	r7, sp, #0
 800fb46:	6078      	str	r0, [r7, #4]
 800fb48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800fb4a:	687b      	ldr	r3, [r7, #4]
 800fb4c:	6a1b      	ldr	r3, [r3, #32]
 800fb4e:	4a1b      	ldr	r2, [pc, #108]	@ (800fbbc <TIM_OC4_SetConfig+0x7c>)
 800fb50:	401a      	ands	r2, r3
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800fb56:	687b      	ldr	r3, [r7, #4]
 800fb58:	6a1b      	ldr	r3, [r3, #32]
 800fb5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	685b      	ldr	r3, [r3, #4]
 800fb60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	69db      	ldr	r3, [r3, #28]
 800fb66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800fb68:	68fb      	ldr	r3, [r7, #12]
 800fb6a:	4a15      	ldr	r2, [pc, #84]	@ (800fbc0 <TIM_OC4_SetConfig+0x80>)
 800fb6c:	4013      	ands	r3, r2
 800fb6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800fb70:	68fb      	ldr	r3, [r7, #12]
 800fb72:	4a14      	ldr	r2, [pc, #80]	@ (800fbc4 <TIM_OC4_SetConfig+0x84>)
 800fb74:	4013      	ands	r3, r2
 800fb76:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800fb78:	683b      	ldr	r3, [r7, #0]
 800fb7a:	681b      	ldr	r3, [r3, #0]
 800fb7c:	021b      	lsls	r3, r3, #8
 800fb7e:	68fa      	ldr	r2, [r7, #12]
 800fb80:	4313      	orrs	r3, r2
 800fb82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800fb84:	697b      	ldr	r3, [r7, #20]
 800fb86:	4a10      	ldr	r2, [pc, #64]	@ (800fbc8 <TIM_OC4_SetConfig+0x88>)
 800fb88:	4013      	ands	r3, r2
 800fb8a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800fb8c:	683b      	ldr	r3, [r7, #0]
 800fb8e:	689b      	ldr	r3, [r3, #8]
 800fb90:	031b      	lsls	r3, r3, #12
 800fb92:	697a      	ldr	r2, [r7, #20]
 800fb94:	4313      	orrs	r3, r2
 800fb96:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800fb98:	687b      	ldr	r3, [r7, #4]
 800fb9a:	693a      	ldr	r2, [r7, #16]
 800fb9c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800fb9e:	687b      	ldr	r3, [r7, #4]
 800fba0:	68fa      	ldr	r2, [r7, #12]
 800fba2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800fba4:	683b      	ldr	r3, [r7, #0]
 800fba6:	685a      	ldr	r2, [r3, #4]
 800fba8:	687b      	ldr	r3, [r7, #4]
 800fbaa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	697a      	ldr	r2, [r7, #20]
 800fbb0:	621a      	str	r2, [r3, #32]
}
 800fbb2:	46c0      	nop			@ (mov r8, r8)
 800fbb4:	46bd      	mov	sp, r7
 800fbb6:	b006      	add	sp, #24
 800fbb8:	bd80      	pop	{r7, pc}
 800fbba:	46c0      	nop			@ (mov r8, r8)
 800fbbc:	ffffefff 	.word	0xffffefff
 800fbc0:	ffff8fff 	.word	0xffff8fff
 800fbc4:	fffffcff 	.word	0xfffffcff
 800fbc8:	ffffdfff 	.word	0xffffdfff

0800fbcc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800fbcc:	b580      	push	{r7, lr}
 800fbce:	b086      	sub	sp, #24
 800fbd0:	af00      	add	r7, sp, #0
 800fbd2:	60f8      	str	r0, [r7, #12]
 800fbd4:	60b9      	str	r1, [r7, #8]
 800fbd6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	221f      	movs	r2, #31
 800fbdc:	4013      	ands	r3, r2
 800fbde:	2201      	movs	r2, #1
 800fbe0:	409a      	lsls	r2, r3
 800fbe2:	0013      	movs	r3, r2
 800fbe4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800fbe6:	68fb      	ldr	r3, [r7, #12]
 800fbe8:	6a1b      	ldr	r3, [r3, #32]
 800fbea:	697a      	ldr	r2, [r7, #20]
 800fbec:	43d2      	mvns	r2, r2
 800fbee:	401a      	ands	r2, r3
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800fbf4:	68fb      	ldr	r3, [r7, #12]
 800fbf6:	6a1a      	ldr	r2, [r3, #32]
 800fbf8:	68bb      	ldr	r3, [r7, #8]
 800fbfa:	211f      	movs	r1, #31
 800fbfc:	400b      	ands	r3, r1
 800fbfe:	6879      	ldr	r1, [r7, #4]
 800fc00:	4099      	lsls	r1, r3
 800fc02:	000b      	movs	r3, r1
 800fc04:	431a      	orrs	r2, r3
 800fc06:	68fb      	ldr	r3, [r7, #12]
 800fc08:	621a      	str	r2, [r3, #32]
}
 800fc0a:	46c0      	nop			@ (mov r8, r8)
 800fc0c:	46bd      	mov	sp, r7
 800fc0e:	b006      	add	sp, #24
 800fc10:	bd80      	pop	{r7, pc}
	...

0800fc14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800fc14:	b580      	push	{r7, lr}
 800fc16:	b084      	sub	sp, #16
 800fc18:	af00      	add	r7, sp, #0
 800fc1a:	6078      	str	r0, [r7, #4]
 800fc1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800fc1e:	687b      	ldr	r3, [r7, #4]
 800fc20:	2238      	movs	r2, #56	@ 0x38
 800fc22:	5c9b      	ldrb	r3, [r3, r2]
 800fc24:	2b01      	cmp	r3, #1
 800fc26:	d101      	bne.n	800fc2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800fc28:	2302      	movs	r3, #2
 800fc2a:	e047      	b.n	800fcbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	2238      	movs	r2, #56	@ 0x38
 800fc30:	2101      	movs	r1, #1
 800fc32:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800fc34:	687b      	ldr	r3, [r7, #4]
 800fc36:	2239      	movs	r2, #57	@ 0x39
 800fc38:	2102      	movs	r1, #2
 800fc3a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	685b      	ldr	r3, [r3, #4]
 800fc42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	681b      	ldr	r3, [r3, #0]
 800fc48:	689b      	ldr	r3, [r3, #8]
 800fc4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2270      	movs	r2, #112	@ 0x70
 800fc50:	4393      	bics	r3, r2
 800fc52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800fc54:	683b      	ldr	r3, [r7, #0]
 800fc56:	681b      	ldr	r3, [r3, #0]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	4313      	orrs	r3, r2
 800fc5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	68fa      	ldr	r2, [r7, #12]
 800fc64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800fc66:	687b      	ldr	r3, [r7, #4]
 800fc68:	681a      	ldr	r2, [r3, #0]
 800fc6a:	2380      	movs	r3, #128	@ 0x80
 800fc6c:	05db      	lsls	r3, r3, #23
 800fc6e:	429a      	cmp	r2, r3
 800fc70:	d00e      	beq.n	800fc90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4a13      	ldr	r2, [pc, #76]	@ (800fcc4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d009      	beq.n	800fc90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a11      	ldr	r2, [pc, #68]	@ (800fcc8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d004      	beq.n	800fc90 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 800fc86:	687b      	ldr	r3, [r7, #4]
 800fc88:	681b      	ldr	r3, [r3, #0]
 800fc8a:	4a10      	ldr	r2, [pc, #64]	@ (800fccc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800fc8c:	4293      	cmp	r3, r2
 800fc8e:	d10c      	bne.n	800fcaa <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	2280      	movs	r2, #128	@ 0x80
 800fc94:	4393      	bics	r3, r2
 800fc96:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800fc98:	683b      	ldr	r3, [r7, #0]
 800fc9a:	685b      	ldr	r3, [r3, #4]
 800fc9c:	68ba      	ldr	r2, [r7, #8]
 800fc9e:	4313      	orrs	r3, r2
 800fca0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800fca2:	687b      	ldr	r3, [r7, #4]
 800fca4:	681b      	ldr	r3, [r3, #0]
 800fca6:	68ba      	ldr	r2, [r7, #8]
 800fca8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2239      	movs	r2, #57	@ 0x39
 800fcae:	2101      	movs	r1, #1
 800fcb0:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2238      	movs	r2, #56	@ 0x38
 800fcb6:	2100      	movs	r1, #0
 800fcb8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fcba:	2300      	movs	r3, #0
}
 800fcbc:	0018      	movs	r0, r3
 800fcbe:	46bd      	mov	sp, r7
 800fcc0:	b004      	add	sp, #16
 800fcc2:	bd80      	pop	{r7, pc}
 800fcc4:	40000400 	.word	0x40000400
 800fcc8:	40010800 	.word	0x40010800
 800fccc:	40011400 	.word	0x40011400

0800fcd0 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 800fcd0:	b580      	push	{r7, lr}
 800fcd2:	b082      	sub	sp, #8
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
 800fcd8:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 800fcda:	687b      	ldr	r3, [r7, #4]
 800fcdc:	2238      	movs	r2, #56	@ 0x38
 800fcde:	5c9b      	ldrb	r3, [r3, r2]
 800fce0:	2b01      	cmp	r3, #1
 800fce2:	d101      	bne.n	800fce8 <HAL_TIMEx_RemapConfig+0x18>
 800fce4:	2302      	movs	r3, #2
 800fce6:	e00c      	b.n	800fd02 <HAL_TIMEx_RemapConfig+0x32>
 800fce8:	687b      	ldr	r3, [r7, #4]
 800fcea:	2238      	movs	r2, #56	@ 0x38
 800fcec:	2101      	movs	r1, #1
 800fcee:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	683a      	ldr	r2, [r7, #0]
 800fcf6:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	2238      	movs	r2, #56	@ 0x38
 800fcfc:	2100      	movs	r1, #0
 800fcfe:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800fd00:	2300      	movs	r3, #0
}
 800fd02:	0018      	movs	r0, r3
 800fd04:	46bd      	mov	sp, r7
 800fd06:	b002      	add	sp, #8
 800fd08:	bd80      	pop	{r7, pc}
	...

0800fd0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0
 800fd12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d101      	bne.n	800fd1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800fd1a:	2301      	movs	r3, #1
 800fd1c:	e053      	b.n	800fdc6 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d116      	bne.n	800fd54 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2278      	movs	r2, #120	@ 0x78
 800fd2a:	2100      	movs	r1, #0
 800fd2c:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	0018      	movs	r0, r3
 800fd32:	f000 fd07 	bl	8010744 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800fd36:	687b      	ldr	r3, [r7, #4]
 800fd38:	22b0      	movs	r2, #176	@ 0xb0
 800fd3a:	589b      	ldr	r3, [r3, r2]
 800fd3c:	2b00      	cmp	r3, #0
 800fd3e:	d103      	bne.n	800fd48 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800fd40:	687b      	ldr	r3, [r7, #4]
 800fd42:	21b0      	movs	r1, #176	@ 0xb0
 800fd44:	4a22      	ldr	r2, [pc, #136]	@ (800fdd0 <HAL_UART_Init+0xc4>)
 800fd46:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800fd48:	687b      	ldr	r3, [r7, #4]
 800fd4a:	22b0      	movs	r2, #176	@ 0xb0
 800fd4c:	589b      	ldr	r3, [r3, r2]
 800fd4e:	687a      	ldr	r2, [r7, #4]
 800fd50:	0010      	movs	r0, r2
 800fd52:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	2224      	movs	r2, #36	@ 0x24
 800fd58:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800fd5a:	687b      	ldr	r3, [r7, #4]
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	681a      	ldr	r2, [r3, #0]
 800fd60:	687b      	ldr	r3, [r7, #4]
 800fd62:	681b      	ldr	r3, [r3, #0]
 800fd64:	2101      	movs	r1, #1
 800fd66:	438a      	bics	r2, r1
 800fd68:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	0018      	movs	r0, r3
 800fd6e:	f000 fd2d 	bl	80107cc <UART_SetConfig>
 800fd72:	0003      	movs	r3, r0
 800fd74:	2b01      	cmp	r3, #1
 800fd76:	d101      	bne.n	800fd7c <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800fd78:	2301      	movs	r3, #1
 800fd7a:	e024      	b.n	800fdc6 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800fd7c:	687b      	ldr	r3, [r7, #4]
 800fd7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd80:	2b00      	cmp	r3, #0
 800fd82:	d003      	beq.n	800fd8c <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	0018      	movs	r0, r3
 800fd88:	f000 ffbe 	bl	8010d08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	685a      	ldr	r2, [r3, #4]
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	490f      	ldr	r1, [pc, #60]	@ (800fdd4 <HAL_UART_Init+0xc8>)
 800fd98:	400a      	ands	r2, r1
 800fd9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800fd9c:	687b      	ldr	r3, [r7, #4]
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	689a      	ldr	r2, [r3, #8]
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	681b      	ldr	r3, [r3, #0]
 800fda6:	212a      	movs	r1, #42	@ 0x2a
 800fda8:	438a      	bics	r2, r1
 800fdaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	681b      	ldr	r3, [r3, #0]
 800fdb0:	681a      	ldr	r2, [r3, #0]
 800fdb2:	687b      	ldr	r3, [r7, #4]
 800fdb4:	681b      	ldr	r3, [r3, #0]
 800fdb6:	2101      	movs	r1, #1
 800fdb8:	430a      	orrs	r2, r1
 800fdba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800fdbc:	687b      	ldr	r3, [r7, #4]
 800fdbe:	0018      	movs	r0, r3
 800fdc0:	f001 f856 	bl	8010e70 <UART_CheckIdleState>
 800fdc4:	0003      	movs	r3, r0
}
 800fdc6:	0018      	movs	r0, r3
 800fdc8:	46bd      	mov	sp, r7
 800fdca:	b002      	add	sp, #8
 800fdcc:	bd80      	pop	{r7, pc}
 800fdce:	46c0      	nop			@ (mov r8, r8)
 800fdd0:	080085d1 	.word	0x080085d1
 800fdd4:	ffffb7ff 	.word	0xffffb7ff

0800fdd8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800fdd8:	b580      	push	{r7, lr}
 800fdda:	b08a      	sub	sp, #40	@ 0x28
 800fddc:	af02      	add	r7, sp, #8
 800fdde:	60f8      	str	r0, [r7, #12]
 800fde0:	60b9      	str	r1, [r7, #8]
 800fde2:	603b      	str	r3, [r7, #0]
 800fde4:	1dbb      	adds	r3, r7, #6
 800fde6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800fde8:	68fb      	ldr	r3, [r7, #12]
 800fdea:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fdec:	2b20      	cmp	r3, #32
 800fdee:	d000      	beq.n	800fdf2 <HAL_UART_Transmit+0x1a>
 800fdf0:	e08c      	b.n	800ff0c <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	2b00      	cmp	r3, #0
 800fdf6:	d003      	beq.n	800fe00 <HAL_UART_Transmit+0x28>
 800fdf8:	1dbb      	adds	r3, r7, #6
 800fdfa:	881b      	ldrh	r3, [r3, #0]
 800fdfc:	2b00      	cmp	r3, #0
 800fdfe:	d101      	bne.n	800fe04 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800fe00:	2301      	movs	r3, #1
 800fe02:	e084      	b.n	800ff0e <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe04:	68fb      	ldr	r3, [r7, #12]
 800fe06:	689a      	ldr	r2, [r3, #8]
 800fe08:	2380      	movs	r3, #128	@ 0x80
 800fe0a:	015b      	lsls	r3, r3, #5
 800fe0c:	429a      	cmp	r2, r3
 800fe0e:	d109      	bne.n	800fe24 <HAL_UART_Transmit+0x4c>
 800fe10:	68fb      	ldr	r3, [r7, #12]
 800fe12:	691b      	ldr	r3, [r3, #16]
 800fe14:	2b00      	cmp	r3, #0
 800fe16:	d105      	bne.n	800fe24 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800fe18:	68bb      	ldr	r3, [r7, #8]
 800fe1a:	2201      	movs	r2, #1
 800fe1c:	4013      	ands	r3, r2
 800fe1e:	d001      	beq.n	800fe24 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800fe20:	2301      	movs	r3, #1
 800fe22:	e074      	b.n	800ff0e <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	2284      	movs	r2, #132	@ 0x84
 800fe28:	2100      	movs	r1, #0
 800fe2a:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800fe2c:	68fb      	ldr	r3, [r7, #12]
 800fe2e:	2221      	movs	r2, #33	@ 0x21
 800fe30:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800fe32:	f7f9 f919 	bl	8009068 <HAL_GetTick>
 800fe36:	0003      	movs	r3, r0
 800fe38:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800fe3a:	68fb      	ldr	r3, [r7, #12]
 800fe3c:	1dba      	adds	r2, r7, #6
 800fe3e:	2150      	movs	r1, #80	@ 0x50
 800fe40:	8812      	ldrh	r2, [r2, #0]
 800fe42:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800fe44:	68fb      	ldr	r3, [r7, #12]
 800fe46:	1dba      	adds	r2, r7, #6
 800fe48:	2152      	movs	r1, #82	@ 0x52
 800fe4a:	8812      	ldrh	r2, [r2, #0]
 800fe4c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800fe4e:	68fb      	ldr	r3, [r7, #12]
 800fe50:	689a      	ldr	r2, [r3, #8]
 800fe52:	2380      	movs	r3, #128	@ 0x80
 800fe54:	015b      	lsls	r3, r3, #5
 800fe56:	429a      	cmp	r2, r3
 800fe58:	d108      	bne.n	800fe6c <HAL_UART_Transmit+0x94>
 800fe5a:	68fb      	ldr	r3, [r7, #12]
 800fe5c:	691b      	ldr	r3, [r3, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d104      	bne.n	800fe6c <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800fe62:	2300      	movs	r3, #0
 800fe64:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800fe66:	68bb      	ldr	r3, [r7, #8]
 800fe68:	61bb      	str	r3, [r7, #24]
 800fe6a:	e003      	b.n	800fe74 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800fe70:	2300      	movs	r3, #0
 800fe72:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800fe74:	e02f      	b.n	800fed6 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800fe76:	697a      	ldr	r2, [r7, #20]
 800fe78:	68f8      	ldr	r0, [r7, #12]
 800fe7a:	683b      	ldr	r3, [r7, #0]
 800fe7c:	9300      	str	r3, [sp, #0]
 800fe7e:	0013      	movs	r3, r2
 800fe80:	2200      	movs	r2, #0
 800fe82:	2180      	movs	r1, #128	@ 0x80
 800fe84:	f001 f89c 	bl	8010fc0 <UART_WaitOnFlagUntilTimeout>
 800fe88:	1e03      	subs	r3, r0, #0
 800fe8a:	d004      	beq.n	800fe96 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	2220      	movs	r2, #32
 800fe90:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800fe92:	2303      	movs	r3, #3
 800fe94:	e03b      	b.n	800ff0e <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800fe96:	69fb      	ldr	r3, [r7, #28]
 800fe98:	2b00      	cmp	r3, #0
 800fe9a:	d10b      	bne.n	800feb4 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800fe9c:	69bb      	ldr	r3, [r7, #24]
 800fe9e:	881b      	ldrh	r3, [r3, #0]
 800fea0:	001a      	movs	r2, r3
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	05d2      	lsls	r2, r2, #23
 800fea8:	0dd2      	lsrs	r2, r2, #23
 800feaa:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800feac:	69bb      	ldr	r3, [r7, #24]
 800feae:	3302      	adds	r3, #2
 800feb0:	61bb      	str	r3, [r7, #24]
 800feb2:	e007      	b.n	800fec4 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800feb4:	69fb      	ldr	r3, [r7, #28]
 800feb6:	781a      	ldrb	r2, [r3, #0]
 800feb8:	68fb      	ldr	r3, [r7, #12]
 800feba:	681b      	ldr	r3, [r3, #0]
 800febc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800febe:	69fb      	ldr	r3, [r7, #28]
 800fec0:	3301      	adds	r3, #1
 800fec2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	2252      	movs	r2, #82	@ 0x52
 800fec8:	5a9b      	ldrh	r3, [r3, r2]
 800feca:	b29b      	uxth	r3, r3
 800fecc:	3b01      	subs	r3, #1
 800fece:	b299      	uxth	r1, r3
 800fed0:	68fb      	ldr	r3, [r7, #12]
 800fed2:	2252      	movs	r2, #82	@ 0x52
 800fed4:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	2252      	movs	r2, #82	@ 0x52
 800feda:	5a9b      	ldrh	r3, [r3, r2]
 800fedc:	b29b      	uxth	r3, r3
 800fede:	2b00      	cmp	r3, #0
 800fee0:	d1c9      	bne.n	800fe76 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800fee2:	697a      	ldr	r2, [r7, #20]
 800fee4:	68f8      	ldr	r0, [r7, #12]
 800fee6:	683b      	ldr	r3, [r7, #0]
 800fee8:	9300      	str	r3, [sp, #0]
 800feea:	0013      	movs	r3, r2
 800feec:	2200      	movs	r2, #0
 800feee:	2140      	movs	r1, #64	@ 0x40
 800fef0:	f001 f866 	bl	8010fc0 <UART_WaitOnFlagUntilTimeout>
 800fef4:	1e03      	subs	r3, r0, #0
 800fef6:	d004      	beq.n	800ff02 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800fef8:	68fb      	ldr	r3, [r7, #12]
 800fefa:	2220      	movs	r2, #32
 800fefc:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800fefe:	2303      	movs	r3, #3
 800ff00:	e005      	b.n	800ff0e <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	2220      	movs	r2, #32
 800ff06:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800ff08:	2300      	movs	r3, #0
 800ff0a:	e000      	b.n	800ff0e <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800ff0c:	2302      	movs	r3, #2
  }
}
 800ff0e:	0018      	movs	r0, r3
 800ff10:	46bd      	mov	sp, r7
 800ff12:	b008      	add	sp, #32
 800ff14:	bd80      	pop	{r7, pc}
	...

0800ff18 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800ff18:	b580      	push	{r7, lr}
 800ff1a:	b088      	sub	sp, #32
 800ff1c:	af00      	add	r7, sp, #0
 800ff1e:	60f8      	str	r0, [r7, #12]
 800ff20:	60b9      	str	r1, [r7, #8]
 800ff22:	1dbb      	adds	r3, r7, #6
 800ff24:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ff2a:	2b20      	cmp	r3, #32
 800ff2c:	d000      	beq.n	800ff30 <HAL_UART_Transmit_DMA+0x18>
 800ff2e:	e077      	b.n	8010020 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800ff30:	68bb      	ldr	r3, [r7, #8]
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d003      	beq.n	800ff3e <HAL_UART_Transmit_DMA+0x26>
 800ff36:	1dbb      	adds	r3, r7, #6
 800ff38:	881b      	ldrh	r3, [r3, #0]
 800ff3a:	2b00      	cmp	r3, #0
 800ff3c:	d101      	bne.n	800ff42 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800ff3e:	2301      	movs	r3, #1
 800ff40:	e06f      	b.n	8010022 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	689a      	ldr	r2, [r3, #8]
 800ff46:	2380      	movs	r3, #128	@ 0x80
 800ff48:	015b      	lsls	r3, r3, #5
 800ff4a:	429a      	cmp	r2, r3
 800ff4c:	d109      	bne.n	800ff62 <HAL_UART_Transmit_DMA+0x4a>
 800ff4e:	68fb      	ldr	r3, [r7, #12]
 800ff50:	691b      	ldr	r3, [r3, #16]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d105      	bne.n	800ff62 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ff56:	68bb      	ldr	r3, [r7, #8]
 800ff58:	2201      	movs	r2, #1
 800ff5a:	4013      	ands	r3, r2
 800ff5c:	d001      	beq.n	800ff62 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ff5e:	2301      	movs	r3, #1
 800ff60:	e05f      	b.n	8010022 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800ff62:	68fb      	ldr	r3, [r7, #12]
 800ff64:	68ba      	ldr	r2, [r7, #8]
 800ff66:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800ff68:	68fb      	ldr	r3, [r7, #12]
 800ff6a:	1dba      	adds	r2, r7, #6
 800ff6c:	2150      	movs	r1, #80	@ 0x50
 800ff6e:	8812      	ldrh	r2, [r2, #0]
 800ff70:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800ff72:	68fb      	ldr	r3, [r7, #12]
 800ff74:	1dba      	adds	r2, r7, #6
 800ff76:	2152      	movs	r1, #82	@ 0x52
 800ff78:	8812      	ldrh	r2, [r2, #0]
 800ff7a:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2284      	movs	r2, #132	@ 0x84
 800ff80:	2100      	movs	r1, #0
 800ff82:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	2221      	movs	r2, #33	@ 0x21
 800ff88:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d027      	beq.n	800ffe2 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff96:	4a25      	ldr	r2, [pc, #148]	@ (801002c <HAL_UART_Transmit_DMA+0x114>)
 800ff98:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ff9e:	4a24      	ldr	r2, [pc, #144]	@ (8010030 <HAL_UART_Transmit_DMA+0x118>)
 800ffa0:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffa6:	4a23      	ldr	r2, [pc, #140]	@ (8010034 <HAL_UART_Transmit_DMA+0x11c>)
 800ffa8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ffae:	2200      	movs	r2, #0
 800ffb0:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800ffb2:	68fb      	ldr	r3, [r7, #12]
 800ffb4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800ffb6:	68fb      	ldr	r3, [r7, #12]
 800ffb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ffba:	0019      	movs	r1, r3
 800ffbc:	68fb      	ldr	r3, [r7, #12]
 800ffbe:	681b      	ldr	r3, [r3, #0]
 800ffc0:	3328      	adds	r3, #40	@ 0x28
 800ffc2:	001a      	movs	r2, r3
 800ffc4:	1dbb      	adds	r3, r7, #6
 800ffc6:	881b      	ldrh	r3, [r3, #0]
 800ffc8:	f7f9 fdae 	bl	8009b28 <HAL_DMA_Start_IT>
 800ffcc:	1e03      	subs	r3, r0, #0
 800ffce:	d008      	beq.n	800ffe2 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	2284      	movs	r2, #132	@ 0x84
 800ffd4:	2110      	movs	r1, #16
 800ffd6:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	2220      	movs	r2, #32
 800ffdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800ffde:	2301      	movs	r3, #1
 800ffe0:	e01f      	b.n	8010022 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	681b      	ldr	r3, [r3, #0]
 800ffe6:	2240      	movs	r2, #64	@ 0x40
 800ffe8:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ffea:	f3ef 8310 	mrs	r3, PRIMASK
 800ffee:	613b      	str	r3, [r7, #16]
  return(result);
 800fff0:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800fff2:	61fb      	str	r3, [r7, #28]
 800fff4:	2301      	movs	r3, #1
 800fff6:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	f383 8810 	msr	PRIMASK, r3
}
 800fffe:	46c0      	nop			@ (mov r8, r8)
 8010000:	68fb      	ldr	r3, [r7, #12]
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	689a      	ldr	r2, [r3, #8]
 8010006:	68fb      	ldr	r3, [r7, #12]
 8010008:	681b      	ldr	r3, [r3, #0]
 801000a:	2180      	movs	r1, #128	@ 0x80
 801000c:	430a      	orrs	r2, r1
 801000e:	609a      	str	r2, [r3, #8]
 8010010:	69fb      	ldr	r3, [r7, #28]
 8010012:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010014:	69bb      	ldr	r3, [r7, #24]
 8010016:	f383 8810 	msr	PRIMASK, r3
}
 801001a:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 801001c:	2300      	movs	r3, #0
 801001e:	e000      	b.n	8010022 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8010020:	2302      	movs	r3, #2
  }
}
 8010022:	0018      	movs	r0, r3
 8010024:	46bd      	mov	sp, r7
 8010026:	b008      	add	sp, #32
 8010028:	bd80      	pop	{r7, pc}
 801002a:	46c0      	nop			@ (mov r8, r8)
 801002c:	080112e5 	.word	0x080112e5
 8010030:	08011381 	.word	0x08011381
 8010034:	08011521 	.word	0x08011521

08010038 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010038:	b580      	push	{r7, lr}
 801003a:	b088      	sub	sp, #32
 801003c:	af00      	add	r7, sp, #0
 801003e:	60f8      	str	r0, [r7, #12]
 8010040:	60b9      	str	r1, [r7, #8]
 8010042:	1dbb      	adds	r3, r7, #6
 8010044:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	2280      	movs	r2, #128	@ 0x80
 801004a:	589b      	ldr	r3, [r3, r2]
 801004c:	2b20      	cmp	r3, #32
 801004e:	d14a      	bne.n	80100e6 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8010050:	68bb      	ldr	r3, [r7, #8]
 8010052:	2b00      	cmp	r3, #0
 8010054:	d003      	beq.n	801005e <HAL_UART_Receive_DMA+0x26>
 8010056:	1dbb      	adds	r3, r7, #6
 8010058:	881b      	ldrh	r3, [r3, #0]
 801005a:	2b00      	cmp	r3, #0
 801005c:	d101      	bne.n	8010062 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 801005e:	2301      	movs	r3, #1
 8010060:	e042      	b.n	80100e8 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010062:	68fb      	ldr	r3, [r7, #12]
 8010064:	689a      	ldr	r2, [r3, #8]
 8010066:	2380      	movs	r3, #128	@ 0x80
 8010068:	015b      	lsls	r3, r3, #5
 801006a:	429a      	cmp	r2, r3
 801006c:	d109      	bne.n	8010082 <HAL_UART_Receive_DMA+0x4a>
 801006e:	68fb      	ldr	r3, [r7, #12]
 8010070:	691b      	ldr	r3, [r3, #16]
 8010072:	2b00      	cmp	r3, #0
 8010074:	d105      	bne.n	8010082 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8010076:	68bb      	ldr	r3, [r7, #8]
 8010078:	2201      	movs	r2, #1
 801007a:	4013      	ands	r3, r2
 801007c:	d001      	beq.n	8010082 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 801007e:	2301      	movs	r3, #1
 8010080:	e032      	b.n	80100e8 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010082:	68fb      	ldr	r3, [r7, #12]
 8010084:	2200      	movs	r2, #0
 8010086:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8010088:	68fb      	ldr	r3, [r7, #12]
 801008a:	681b      	ldr	r3, [r3, #0]
 801008c:	4a18      	ldr	r2, [pc, #96]	@ (80100f0 <HAL_UART_Receive_DMA+0xb8>)
 801008e:	4293      	cmp	r3, r2
 8010090:	d020      	beq.n	80100d4 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8010092:	68fb      	ldr	r3, [r7, #12]
 8010094:	681b      	ldr	r3, [r3, #0]
 8010096:	685a      	ldr	r2, [r3, #4]
 8010098:	2380      	movs	r3, #128	@ 0x80
 801009a:	041b      	lsls	r3, r3, #16
 801009c:	4013      	ands	r3, r2
 801009e:	d019      	beq.n	80100d4 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80100a0:	f3ef 8310 	mrs	r3, PRIMASK
 80100a4:	613b      	str	r3, [r7, #16]
  return(result);
 80100a6:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80100a8:	61fb      	str	r3, [r7, #28]
 80100aa:	2301      	movs	r3, #1
 80100ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100ae:	697b      	ldr	r3, [r7, #20]
 80100b0:	f383 8810 	msr	PRIMASK, r3
}
 80100b4:	46c0      	nop			@ (mov r8, r8)
 80100b6:	68fb      	ldr	r3, [r7, #12]
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	681a      	ldr	r2, [r3, #0]
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	681b      	ldr	r3, [r3, #0]
 80100c0:	2180      	movs	r1, #128	@ 0x80
 80100c2:	04c9      	lsls	r1, r1, #19
 80100c4:	430a      	orrs	r2, r1
 80100c6:	601a      	str	r2, [r3, #0]
 80100c8:	69fb      	ldr	r3, [r7, #28]
 80100ca:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	f383 8810 	msr	PRIMASK, r3
}
 80100d2:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80100d4:	1dbb      	adds	r3, r7, #6
 80100d6:	881a      	ldrh	r2, [r3, #0]
 80100d8:	68b9      	ldr	r1, [r7, #8]
 80100da:	68fb      	ldr	r3, [r7, #12]
 80100dc:	0018      	movs	r0, r3
 80100de:	f000 ffd9 	bl	8011094 <UART_Start_Receive_DMA>
 80100e2:	0003      	movs	r3, r0
 80100e4:	e000      	b.n	80100e8 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 80100e6:	2302      	movs	r3, #2
  }
}
 80100e8:	0018      	movs	r0, r3
 80100ea:	46bd      	mov	sp, r7
 80100ec:	b008      	add	sp, #32
 80100ee:	bd80      	pop	{r7, pc}
 80100f0:	40004800 	.word	0x40004800

080100f4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80100f4:	b590      	push	{r4, r7, lr}
 80100f6:	b0ab      	sub	sp, #172	@ 0xac
 80100f8:	af00      	add	r7, sp, #0
 80100fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	681b      	ldr	r3, [r3, #0]
 8010100:	69db      	ldr	r3, [r3, #28]
 8010102:	22a4      	movs	r2, #164	@ 0xa4
 8010104:	18b9      	adds	r1, r7, r2
 8010106:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8010108:	687b      	ldr	r3, [r7, #4]
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	681b      	ldr	r3, [r3, #0]
 801010e:	20a0      	movs	r0, #160	@ 0xa0
 8010110:	1839      	adds	r1, r7, r0
 8010112:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	689b      	ldr	r3, [r3, #8]
 801011a:	219c      	movs	r1, #156	@ 0x9c
 801011c:	1879      	adds	r1, r7, r1
 801011e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8010120:	0011      	movs	r1, r2
 8010122:	18bb      	adds	r3, r7, r2
 8010124:	681b      	ldr	r3, [r3, #0]
 8010126:	4a9c      	ldr	r2, [pc, #624]	@ (8010398 <HAL_UART_IRQHandler+0x2a4>)
 8010128:	4013      	ands	r3, r2
 801012a:	2298      	movs	r2, #152	@ 0x98
 801012c:	18bc      	adds	r4, r7, r2
 801012e:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8010130:	18bb      	adds	r3, r7, r2
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b00      	cmp	r3, #0
 8010136:	d114      	bne.n	8010162 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8010138:	187b      	adds	r3, r7, r1
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	2220      	movs	r2, #32
 801013e:	4013      	ands	r3, r2
 8010140:	d00f      	beq.n	8010162 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8010142:	183b      	adds	r3, r7, r0
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	2220      	movs	r2, #32
 8010148:	4013      	ands	r3, r2
 801014a:	d00a      	beq.n	8010162 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 801014c:	687b      	ldr	r3, [r7, #4]
 801014e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010150:	2b00      	cmp	r3, #0
 8010152:	d100      	bne.n	8010156 <HAL_UART_IRQHandler+0x62>
 8010154:	e2aa      	b.n	80106ac <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801015a:	687a      	ldr	r2, [r7, #4]
 801015c:	0010      	movs	r0, r2
 801015e:	4798      	blx	r3
      }
      return;
 8010160:	e2a4      	b.n	80106ac <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8010162:	2398      	movs	r3, #152	@ 0x98
 8010164:	18fb      	adds	r3, r7, r3
 8010166:	681b      	ldr	r3, [r3, #0]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d100      	bne.n	801016e <HAL_UART_IRQHandler+0x7a>
 801016c:	e11a      	b.n	80103a4 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 801016e:	239c      	movs	r3, #156	@ 0x9c
 8010170:	18fb      	adds	r3, r7, r3
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	2201      	movs	r2, #1
 8010176:	4013      	ands	r3, r2
 8010178:	d106      	bne.n	8010188 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 801017a:	23a0      	movs	r3, #160	@ 0xa0
 801017c:	18fb      	adds	r3, r7, r3
 801017e:	681b      	ldr	r3, [r3, #0]
 8010180:	4a86      	ldr	r2, [pc, #536]	@ (801039c <HAL_UART_IRQHandler+0x2a8>)
 8010182:	4013      	ands	r3, r2
 8010184:	d100      	bne.n	8010188 <HAL_UART_IRQHandler+0x94>
 8010186:	e10d      	b.n	80103a4 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8010188:	23a4      	movs	r3, #164	@ 0xa4
 801018a:	18fb      	adds	r3, r7, r3
 801018c:	681b      	ldr	r3, [r3, #0]
 801018e:	2201      	movs	r2, #1
 8010190:	4013      	ands	r3, r2
 8010192:	d012      	beq.n	80101ba <HAL_UART_IRQHandler+0xc6>
 8010194:	23a0      	movs	r3, #160	@ 0xa0
 8010196:	18fb      	adds	r3, r7, r3
 8010198:	681a      	ldr	r2, [r3, #0]
 801019a:	2380      	movs	r3, #128	@ 0x80
 801019c:	005b      	lsls	r3, r3, #1
 801019e:	4013      	ands	r3, r2
 80101a0:	d00b      	beq.n	80101ba <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80101a2:	687b      	ldr	r3, [r7, #4]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	2201      	movs	r2, #1
 80101a8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	2284      	movs	r2, #132	@ 0x84
 80101ae:	589b      	ldr	r3, [r3, r2]
 80101b0:	2201      	movs	r2, #1
 80101b2:	431a      	orrs	r2, r3
 80101b4:	687b      	ldr	r3, [r7, #4]
 80101b6:	2184      	movs	r1, #132	@ 0x84
 80101b8:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101ba:	23a4      	movs	r3, #164	@ 0xa4
 80101bc:	18fb      	adds	r3, r7, r3
 80101be:	681b      	ldr	r3, [r3, #0]
 80101c0:	2202      	movs	r2, #2
 80101c2:	4013      	ands	r3, r2
 80101c4:	d011      	beq.n	80101ea <HAL_UART_IRQHandler+0xf6>
 80101c6:	239c      	movs	r3, #156	@ 0x9c
 80101c8:	18fb      	adds	r3, r7, r3
 80101ca:	681b      	ldr	r3, [r3, #0]
 80101cc:	2201      	movs	r2, #1
 80101ce:	4013      	ands	r3, r2
 80101d0:	d00b      	beq.n	80101ea <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80101d2:	687b      	ldr	r3, [r7, #4]
 80101d4:	681b      	ldr	r3, [r3, #0]
 80101d6:	2202      	movs	r2, #2
 80101d8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80101da:	687b      	ldr	r3, [r7, #4]
 80101dc:	2284      	movs	r2, #132	@ 0x84
 80101de:	589b      	ldr	r3, [r3, r2]
 80101e0:	2204      	movs	r2, #4
 80101e2:	431a      	orrs	r2, r3
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2184      	movs	r1, #132	@ 0x84
 80101e8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80101ea:	23a4      	movs	r3, #164	@ 0xa4
 80101ec:	18fb      	adds	r3, r7, r3
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2204      	movs	r2, #4
 80101f2:	4013      	ands	r3, r2
 80101f4:	d011      	beq.n	801021a <HAL_UART_IRQHandler+0x126>
 80101f6:	239c      	movs	r3, #156	@ 0x9c
 80101f8:	18fb      	adds	r3, r7, r3
 80101fa:	681b      	ldr	r3, [r3, #0]
 80101fc:	2201      	movs	r2, #1
 80101fe:	4013      	ands	r3, r2
 8010200:	d00b      	beq.n	801021a <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8010202:	687b      	ldr	r3, [r7, #4]
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	2204      	movs	r2, #4
 8010208:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 801020a:	687b      	ldr	r3, [r7, #4]
 801020c:	2284      	movs	r2, #132	@ 0x84
 801020e:	589b      	ldr	r3, [r3, r2]
 8010210:	2202      	movs	r2, #2
 8010212:	431a      	orrs	r2, r3
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	2184      	movs	r1, #132	@ 0x84
 8010218:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 801021a:	23a4      	movs	r3, #164	@ 0xa4
 801021c:	18fb      	adds	r3, r7, r3
 801021e:	681b      	ldr	r3, [r3, #0]
 8010220:	2208      	movs	r2, #8
 8010222:	4013      	ands	r3, r2
 8010224:	d017      	beq.n	8010256 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8010226:	23a0      	movs	r3, #160	@ 0xa0
 8010228:	18fb      	adds	r3, r7, r3
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	2220      	movs	r2, #32
 801022e:	4013      	ands	r3, r2
 8010230:	d105      	bne.n	801023e <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8010232:	239c      	movs	r3, #156	@ 0x9c
 8010234:	18fb      	adds	r3, r7, r3
 8010236:	681b      	ldr	r3, [r3, #0]
 8010238:	2201      	movs	r2, #1
 801023a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 801023c:	d00b      	beq.n	8010256 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801023e:	687b      	ldr	r3, [r7, #4]
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	2208      	movs	r2, #8
 8010244:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	2284      	movs	r2, #132	@ 0x84
 801024a:	589b      	ldr	r3, [r3, r2]
 801024c:	2208      	movs	r2, #8
 801024e:	431a      	orrs	r2, r3
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	2184      	movs	r1, #132	@ 0x84
 8010254:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8010256:	23a4      	movs	r3, #164	@ 0xa4
 8010258:	18fb      	adds	r3, r7, r3
 801025a:	681a      	ldr	r2, [r3, #0]
 801025c:	2380      	movs	r3, #128	@ 0x80
 801025e:	011b      	lsls	r3, r3, #4
 8010260:	4013      	ands	r3, r2
 8010262:	d013      	beq.n	801028c <HAL_UART_IRQHandler+0x198>
 8010264:	23a0      	movs	r3, #160	@ 0xa0
 8010266:	18fb      	adds	r3, r7, r3
 8010268:	681a      	ldr	r2, [r3, #0]
 801026a:	2380      	movs	r3, #128	@ 0x80
 801026c:	04db      	lsls	r3, r3, #19
 801026e:	4013      	ands	r3, r2
 8010270:	d00c      	beq.n	801028c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	681b      	ldr	r3, [r3, #0]
 8010276:	2280      	movs	r2, #128	@ 0x80
 8010278:	0112      	lsls	r2, r2, #4
 801027a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	2284      	movs	r2, #132	@ 0x84
 8010280:	589b      	ldr	r3, [r3, r2]
 8010282:	2220      	movs	r2, #32
 8010284:	431a      	orrs	r2, r3
 8010286:	687b      	ldr	r3, [r7, #4]
 8010288:	2184      	movs	r1, #132	@ 0x84
 801028a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	2284      	movs	r2, #132	@ 0x84
 8010290:	589b      	ldr	r3, [r3, r2]
 8010292:	2b00      	cmp	r3, #0
 8010294:	d100      	bne.n	8010298 <HAL_UART_IRQHandler+0x1a4>
 8010296:	e20b      	b.n	80106b0 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8010298:	23a4      	movs	r3, #164	@ 0xa4
 801029a:	18fb      	adds	r3, r7, r3
 801029c:	681b      	ldr	r3, [r3, #0]
 801029e:	2220      	movs	r2, #32
 80102a0:	4013      	ands	r3, r2
 80102a2:	d00e      	beq.n	80102c2 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80102a4:	23a0      	movs	r3, #160	@ 0xa0
 80102a6:	18fb      	adds	r3, r7, r3
 80102a8:	681b      	ldr	r3, [r3, #0]
 80102aa:	2220      	movs	r2, #32
 80102ac:	4013      	ands	r3, r2
 80102ae:	d008      	beq.n	80102c2 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	d004      	beq.n	80102c2 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80102b8:	687b      	ldr	r3, [r7, #4]
 80102ba:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80102bc:	687a      	ldr	r2, [r7, #4]
 80102be:	0010      	movs	r0, r2
 80102c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	2284      	movs	r2, #132	@ 0x84
 80102c6:	589b      	ldr	r3, [r3, r2]
 80102c8:	2194      	movs	r1, #148	@ 0x94
 80102ca:	187a      	adds	r2, r7, r1
 80102cc:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102ce:	687b      	ldr	r3, [r7, #4]
 80102d0:	681b      	ldr	r3, [r3, #0]
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	2240      	movs	r2, #64	@ 0x40
 80102d6:	4013      	ands	r3, r2
 80102d8:	2b40      	cmp	r3, #64	@ 0x40
 80102da:	d004      	beq.n	80102e6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80102dc:	187b      	adds	r3, r7, r1
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	2228      	movs	r2, #40	@ 0x28
 80102e2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80102e4:	d04b      	beq.n	801037e <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	0018      	movs	r0, r3
 80102ea:	f000 ff97 	bl	801121c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	689b      	ldr	r3, [r3, #8]
 80102f4:	2240      	movs	r2, #64	@ 0x40
 80102f6:	4013      	ands	r3, r2
 80102f8:	2b40      	cmp	r3, #64	@ 0x40
 80102fa:	d139      	bne.n	8010370 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80102fc:	f3ef 8310 	mrs	r3, PRIMASK
 8010300:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8010302:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8010304:	2090      	movs	r0, #144	@ 0x90
 8010306:	183a      	adds	r2, r7, r0
 8010308:	6013      	str	r3, [r2, #0]
 801030a:	2301      	movs	r3, #1
 801030c:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801030e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8010310:	f383 8810 	msr	PRIMASK, r3
}
 8010314:	46c0      	nop			@ (mov r8, r8)
 8010316:	687b      	ldr	r3, [r7, #4]
 8010318:	681b      	ldr	r3, [r3, #0]
 801031a:	689a      	ldr	r2, [r3, #8]
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	2140      	movs	r1, #64	@ 0x40
 8010322:	438a      	bics	r2, r1
 8010324:	609a      	str	r2, [r3, #8]
 8010326:	183b      	adds	r3, r7, r0
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801032c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801032e:	f383 8810 	msr	PRIMASK, r3
}
 8010332:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8010334:	687b      	ldr	r3, [r7, #4]
 8010336:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010338:	2b00      	cmp	r3, #0
 801033a:	d012      	beq.n	8010362 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010340:	4a17      	ldr	r2, [pc, #92]	@ (80103a0 <HAL_UART_IRQHandler+0x2ac>)
 8010342:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8010344:	687b      	ldr	r3, [r7, #4]
 8010346:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010348:	0018      	movs	r0, r3
 801034a:	f7f9 fc93 	bl	8009c74 <HAL_DMA_Abort_IT>
 801034e:	1e03      	subs	r3, r0, #0
 8010350:	d020      	beq.n	8010394 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010356:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010358:	687b      	ldr	r3, [r7, #4]
 801035a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801035c:	0018      	movs	r0, r3
 801035e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010360:	e018      	b.n	8010394 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8010362:	687b      	ldr	r3, [r7, #4]
 8010364:	2298      	movs	r2, #152	@ 0x98
 8010366:	589b      	ldr	r3, [r3, r2]
 8010368:	687a      	ldr	r2, [r7, #4]
 801036a:	0010      	movs	r0, r2
 801036c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801036e:	e011      	b.n	8010394 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2298      	movs	r2, #152	@ 0x98
 8010374:	589b      	ldr	r3, [r3, r2]
 8010376:	687a      	ldr	r2, [r7, #4]
 8010378:	0010      	movs	r0, r2
 801037a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801037c:	e00a      	b.n	8010394 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	2298      	movs	r2, #152	@ 0x98
 8010382:	589b      	ldr	r3, [r3, r2]
 8010384:	687a      	ldr	r2, [r7, #4]
 8010386:	0010      	movs	r0, r2
 8010388:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	2284      	movs	r2, #132	@ 0x84
 801038e:	2100      	movs	r1, #0
 8010390:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8010392:	e18d      	b.n	80106b0 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8010394:	46c0      	nop			@ (mov r8, r8)
    return;
 8010396:	e18b      	b.n	80106b0 <HAL_UART_IRQHandler+0x5bc>
 8010398:	0000080f 	.word	0x0000080f
 801039c:	04000120 	.word	0x04000120
 80103a0:	080115a9 	.word	0x080115a9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80103a8:	2b01      	cmp	r3, #1
 80103aa:	d000      	beq.n	80103ae <HAL_UART_IRQHandler+0x2ba>
 80103ac:	e13d      	b.n	801062a <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80103ae:	23a4      	movs	r3, #164	@ 0xa4
 80103b0:	18fb      	adds	r3, r7, r3
 80103b2:	681b      	ldr	r3, [r3, #0]
 80103b4:	2210      	movs	r2, #16
 80103b6:	4013      	ands	r3, r2
 80103b8:	d100      	bne.n	80103bc <HAL_UART_IRQHandler+0x2c8>
 80103ba:	e136      	b.n	801062a <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80103bc:	23a0      	movs	r3, #160	@ 0xa0
 80103be:	18fb      	adds	r3, r7, r3
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	2210      	movs	r2, #16
 80103c4:	4013      	ands	r3, r2
 80103c6:	d100      	bne.n	80103ca <HAL_UART_IRQHandler+0x2d6>
 80103c8:	e12f      	b.n	801062a <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80103ca:	687b      	ldr	r3, [r7, #4]
 80103cc:	681b      	ldr	r3, [r3, #0]
 80103ce:	2210      	movs	r2, #16
 80103d0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	689b      	ldr	r3, [r3, #8]
 80103d8:	2240      	movs	r2, #64	@ 0x40
 80103da:	4013      	ands	r3, r2
 80103dc:	2b40      	cmp	r3, #64	@ 0x40
 80103de:	d000      	beq.n	80103e2 <HAL_UART_IRQHandler+0x2ee>
 80103e0:	e0a2      	b.n	8010528 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80103e2:	687b      	ldr	r3, [r7, #4]
 80103e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80103e6:	681b      	ldr	r3, [r3, #0]
 80103e8:	685a      	ldr	r2, [r3, #4]
 80103ea:	217e      	movs	r1, #126	@ 0x7e
 80103ec:	187b      	adds	r3, r7, r1
 80103ee:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80103f0:	187b      	adds	r3, r7, r1
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	2b00      	cmp	r3, #0
 80103f6:	d100      	bne.n	80103fa <HAL_UART_IRQHandler+0x306>
 80103f8:	e15c      	b.n	80106b4 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80103fa:	687b      	ldr	r3, [r7, #4]
 80103fc:	2258      	movs	r2, #88	@ 0x58
 80103fe:	5a9b      	ldrh	r3, [r3, r2]
 8010400:	187a      	adds	r2, r7, r1
 8010402:	8812      	ldrh	r2, [r2, #0]
 8010404:	429a      	cmp	r2, r3
 8010406:	d300      	bcc.n	801040a <HAL_UART_IRQHandler+0x316>
 8010408:	e154      	b.n	80106b4 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 801040a:	687b      	ldr	r3, [r7, #4]
 801040c:	187a      	adds	r2, r7, r1
 801040e:	215a      	movs	r1, #90	@ 0x5a
 8010410:	8812      	ldrh	r2, [r2, #0]
 8010412:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8010414:	687b      	ldr	r3, [r7, #4]
 8010416:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	681b      	ldr	r3, [r3, #0]
 801041c:	2220      	movs	r2, #32
 801041e:	4013      	ands	r3, r2
 8010420:	d16f      	bne.n	8010502 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010422:	f3ef 8310 	mrs	r3, PRIMASK
 8010426:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8010428:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801042a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801042c:	2301      	movs	r3, #1
 801042e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010430:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010432:	f383 8810 	msr	PRIMASK, r3
}
 8010436:	46c0      	nop			@ (mov r8, r8)
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	681a      	ldr	r2, [r3, #0]
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	49a0      	ldr	r1, [pc, #640]	@ (80106c4 <HAL_UART_IRQHandler+0x5d0>)
 8010444:	400a      	ands	r2, r1
 8010446:	601a      	str	r2, [r3, #0]
 8010448:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801044a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801044c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801044e:	f383 8810 	msr	PRIMASK, r3
}
 8010452:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010454:	f3ef 8310 	mrs	r3, PRIMASK
 8010458:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 801045a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801045c:	677b      	str	r3, [r7, #116]	@ 0x74
 801045e:	2301      	movs	r3, #1
 8010460:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010462:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010464:	f383 8810 	msr	PRIMASK, r3
}
 8010468:	46c0      	nop			@ (mov r8, r8)
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	689a      	ldr	r2, [r3, #8]
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	2101      	movs	r1, #1
 8010476:	438a      	bics	r2, r1
 8010478:	609a      	str	r2, [r3, #8]
 801047a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801047c:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801047e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010480:	f383 8810 	msr	PRIMASK, r3
}
 8010484:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010486:	f3ef 8310 	mrs	r3, PRIMASK
 801048a:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 801048c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801048e:	673b      	str	r3, [r7, #112]	@ 0x70
 8010490:	2301      	movs	r3, #1
 8010492:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010494:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010496:	f383 8810 	msr	PRIMASK, r3
}
 801049a:	46c0      	nop			@ (mov r8, r8)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	681b      	ldr	r3, [r3, #0]
 80104a0:	689a      	ldr	r2, [r3, #8]
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	681b      	ldr	r3, [r3, #0]
 80104a6:	2140      	movs	r1, #64	@ 0x40
 80104a8:	438a      	bics	r2, r1
 80104aa:	609a      	str	r2, [r3, #8]
 80104ac:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80104ae:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104b0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80104b2:	f383 8810 	msr	PRIMASK, r3
}
 80104b6:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	2280      	movs	r2, #128	@ 0x80
 80104bc:	2120      	movs	r1, #32
 80104be:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80104c0:	687b      	ldr	r3, [r7, #4]
 80104c2:	2200      	movs	r2, #0
 80104c4:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80104c6:	f3ef 8310 	mrs	r3, PRIMASK
 80104ca:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 80104cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80104ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80104d0:	2301      	movs	r3, #1
 80104d2:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104d4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80104d6:	f383 8810 	msr	PRIMASK, r3
}
 80104da:	46c0      	nop			@ (mov r8, r8)
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	681b      	ldr	r3, [r3, #0]
 80104e0:	681a      	ldr	r2, [r3, #0]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	2110      	movs	r1, #16
 80104e8:	438a      	bics	r2, r1
 80104ea:	601a      	str	r2, [r3, #0]
 80104ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80104ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80104f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80104f2:	f383 8810 	msr	PRIMASK, r3
}
 80104f6:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80104fc:	0018      	movs	r0, r3
 80104fe:	f7f9 fb79 	bl	8009bf4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	2202      	movs	r2, #2
 8010506:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	22ac      	movs	r2, #172	@ 0xac
 801050c:	589b      	ldr	r3, [r3, r2]
 801050e:	687a      	ldr	r2, [r7, #4]
 8010510:	2158      	movs	r1, #88	@ 0x58
 8010512:	5a51      	ldrh	r1, [r2, r1]
 8010514:	687a      	ldr	r2, [r7, #4]
 8010516:	205a      	movs	r0, #90	@ 0x5a
 8010518:	5a12      	ldrh	r2, [r2, r0]
 801051a:	b292      	uxth	r2, r2
 801051c:	1a8a      	subs	r2, r1, r2
 801051e:	b291      	uxth	r1, r2
 8010520:	687a      	ldr	r2, [r7, #4]
 8010522:	0010      	movs	r0, r2
 8010524:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010526:	e0c5      	b.n	80106b4 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	2258      	movs	r2, #88	@ 0x58
 801052c:	5a99      	ldrh	r1, [r3, r2]
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	225a      	movs	r2, #90	@ 0x5a
 8010532:	5a9b      	ldrh	r3, [r3, r2]
 8010534:	b29a      	uxth	r2, r3
 8010536:	208e      	movs	r0, #142	@ 0x8e
 8010538:	183b      	adds	r3, r7, r0
 801053a:	1a8a      	subs	r2, r1, r2
 801053c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 801053e:	687b      	ldr	r3, [r7, #4]
 8010540:	225a      	movs	r2, #90	@ 0x5a
 8010542:	5a9b      	ldrh	r3, [r3, r2]
 8010544:	b29b      	uxth	r3, r3
 8010546:	2b00      	cmp	r3, #0
 8010548:	d100      	bne.n	801054c <HAL_UART_IRQHandler+0x458>
 801054a:	e0b5      	b.n	80106b8 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 801054c:	183b      	adds	r3, r7, r0
 801054e:	881b      	ldrh	r3, [r3, #0]
 8010550:	2b00      	cmp	r3, #0
 8010552:	d100      	bne.n	8010556 <HAL_UART_IRQHandler+0x462>
 8010554:	e0b0      	b.n	80106b8 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010556:	f3ef 8310 	mrs	r3, PRIMASK
 801055a:	60fb      	str	r3, [r7, #12]
  return(result);
 801055c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801055e:	2488      	movs	r4, #136	@ 0x88
 8010560:	193a      	adds	r2, r7, r4
 8010562:	6013      	str	r3, [r2, #0]
 8010564:	2301      	movs	r3, #1
 8010566:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010568:	693b      	ldr	r3, [r7, #16]
 801056a:	f383 8810 	msr	PRIMASK, r3
}
 801056e:	46c0      	nop			@ (mov r8, r8)
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	681b      	ldr	r3, [r3, #0]
 8010574:	681a      	ldr	r2, [r3, #0]
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	681b      	ldr	r3, [r3, #0]
 801057a:	4953      	ldr	r1, [pc, #332]	@ (80106c8 <HAL_UART_IRQHandler+0x5d4>)
 801057c:	400a      	ands	r2, r1
 801057e:	601a      	str	r2, [r3, #0]
 8010580:	193b      	adds	r3, r7, r4
 8010582:	681b      	ldr	r3, [r3, #0]
 8010584:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010586:	697b      	ldr	r3, [r7, #20]
 8010588:	f383 8810 	msr	PRIMASK, r3
}
 801058c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801058e:	f3ef 8310 	mrs	r3, PRIMASK
 8010592:	61bb      	str	r3, [r7, #24]
  return(result);
 8010594:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010596:	2484      	movs	r4, #132	@ 0x84
 8010598:	193a      	adds	r2, r7, r4
 801059a:	6013      	str	r3, [r2, #0]
 801059c:	2301      	movs	r3, #1
 801059e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105a0:	69fb      	ldr	r3, [r7, #28]
 80105a2:	f383 8810 	msr	PRIMASK, r3
}
 80105a6:	46c0      	nop			@ (mov r8, r8)
 80105a8:	687b      	ldr	r3, [r7, #4]
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	689a      	ldr	r2, [r3, #8]
 80105ae:	687b      	ldr	r3, [r7, #4]
 80105b0:	681b      	ldr	r3, [r3, #0]
 80105b2:	2101      	movs	r1, #1
 80105b4:	438a      	bics	r2, r1
 80105b6:	609a      	str	r2, [r3, #8]
 80105b8:	193b      	adds	r3, r7, r4
 80105ba:	681b      	ldr	r3, [r3, #0]
 80105bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105be:	6a3b      	ldr	r3, [r7, #32]
 80105c0:	f383 8810 	msr	PRIMASK, r3
}
 80105c4:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80105c6:	687b      	ldr	r3, [r7, #4]
 80105c8:	2280      	movs	r2, #128	@ 0x80
 80105ca:	2120      	movs	r1, #32
 80105cc:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80105ce:	687b      	ldr	r3, [r7, #4]
 80105d0:	2200      	movs	r2, #0
 80105d2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80105d4:	687b      	ldr	r3, [r7, #4]
 80105d6:	2200      	movs	r2, #0
 80105d8:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80105da:	f3ef 8310 	mrs	r3, PRIMASK
 80105de:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80105e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80105e2:	2480      	movs	r4, #128	@ 0x80
 80105e4:	193a      	adds	r2, r7, r4
 80105e6:	6013      	str	r3, [r2, #0]
 80105e8:	2301      	movs	r3, #1
 80105ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80105ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80105ee:	f383 8810 	msr	PRIMASK, r3
}
 80105f2:	46c0      	nop			@ (mov r8, r8)
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	681a      	ldr	r2, [r3, #0]
 80105fa:	687b      	ldr	r3, [r7, #4]
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	2110      	movs	r1, #16
 8010600:	438a      	bics	r2, r1
 8010602:	601a      	str	r2, [r3, #0]
 8010604:	193b      	adds	r3, r7, r4
 8010606:	681b      	ldr	r3, [r3, #0]
 8010608:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801060a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801060c:	f383 8810 	msr	PRIMASK, r3
}
 8010610:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	2202      	movs	r2, #2
 8010616:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8010618:	687b      	ldr	r3, [r7, #4]
 801061a:	22ac      	movs	r2, #172	@ 0xac
 801061c:	589b      	ldr	r3, [r3, r2]
 801061e:	183a      	adds	r2, r7, r0
 8010620:	8811      	ldrh	r1, [r2, #0]
 8010622:	687a      	ldr	r2, [r7, #4]
 8010624:	0010      	movs	r0, r2
 8010626:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8010628:	e046      	b.n	80106b8 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 801062a:	23a4      	movs	r3, #164	@ 0xa4
 801062c:	18fb      	adds	r3, r7, r3
 801062e:	681a      	ldr	r2, [r3, #0]
 8010630:	2380      	movs	r3, #128	@ 0x80
 8010632:	035b      	lsls	r3, r3, #13
 8010634:	4013      	ands	r3, r2
 8010636:	d012      	beq.n	801065e <HAL_UART_IRQHandler+0x56a>
 8010638:	239c      	movs	r3, #156	@ 0x9c
 801063a:	18fb      	adds	r3, r7, r3
 801063c:	681a      	ldr	r2, [r3, #0]
 801063e:	2380      	movs	r3, #128	@ 0x80
 8010640:	03db      	lsls	r3, r3, #15
 8010642:	4013      	ands	r3, r2
 8010644:	d00b      	beq.n	801065e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8010646:	687b      	ldr	r3, [r7, #4]
 8010648:	681b      	ldr	r3, [r3, #0]
 801064a:	2280      	movs	r2, #128	@ 0x80
 801064c:	0352      	lsls	r2, r2, #13
 801064e:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	22a8      	movs	r2, #168	@ 0xa8
 8010654:	589b      	ldr	r3, [r3, r2]
 8010656:	687a      	ldr	r2, [r7, #4]
 8010658:	0010      	movs	r0, r2
 801065a:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801065c:	e02f      	b.n	80106be <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 801065e:	23a4      	movs	r3, #164	@ 0xa4
 8010660:	18fb      	adds	r3, r7, r3
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	2280      	movs	r2, #128	@ 0x80
 8010666:	4013      	ands	r3, r2
 8010668:	d00f      	beq.n	801068a <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 801066a:	23a0      	movs	r3, #160	@ 0xa0
 801066c:	18fb      	adds	r3, r7, r3
 801066e:	681b      	ldr	r3, [r3, #0]
 8010670:	2280      	movs	r2, #128	@ 0x80
 8010672:	4013      	ands	r3, r2
 8010674:	d009      	beq.n	801068a <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8010676:	687b      	ldr	r3, [r7, #4]
 8010678:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801067a:	2b00      	cmp	r3, #0
 801067c:	d01e      	beq.n	80106bc <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 801067e:	687b      	ldr	r3, [r7, #4]
 8010680:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010682:	687a      	ldr	r2, [r7, #4]
 8010684:	0010      	movs	r0, r2
 8010686:	4798      	blx	r3
    }
    return;
 8010688:	e018      	b.n	80106bc <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801068a:	23a4      	movs	r3, #164	@ 0xa4
 801068c:	18fb      	adds	r3, r7, r3
 801068e:	681b      	ldr	r3, [r3, #0]
 8010690:	2240      	movs	r2, #64	@ 0x40
 8010692:	4013      	ands	r3, r2
 8010694:	d013      	beq.n	80106be <HAL_UART_IRQHandler+0x5ca>
 8010696:	23a0      	movs	r3, #160	@ 0xa0
 8010698:	18fb      	adds	r3, r7, r3
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	2240      	movs	r2, #64	@ 0x40
 801069e:	4013      	ands	r3, r2
 80106a0:	d00d      	beq.n	80106be <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	0018      	movs	r0, r3
 80106a6:	f000 ff98 	bl	80115da <UART_EndTransmit_IT>
    return;
 80106aa:	e008      	b.n	80106be <HAL_UART_IRQHandler+0x5ca>
      return;
 80106ac:	46c0      	nop			@ (mov r8, r8)
 80106ae:	e006      	b.n	80106be <HAL_UART_IRQHandler+0x5ca>
    return;
 80106b0:	46c0      	nop			@ (mov r8, r8)
 80106b2:	e004      	b.n	80106be <HAL_UART_IRQHandler+0x5ca>
      return;
 80106b4:	46c0      	nop			@ (mov r8, r8)
 80106b6:	e002      	b.n	80106be <HAL_UART_IRQHandler+0x5ca>
      return;
 80106b8:	46c0      	nop			@ (mov r8, r8)
 80106ba:	e000      	b.n	80106be <HAL_UART_IRQHandler+0x5ca>
    return;
 80106bc:	46c0      	nop			@ (mov r8, r8)
  }

}
 80106be:	46bd      	mov	sp, r7
 80106c0:	b02b      	add	sp, #172	@ 0xac
 80106c2:	bd90      	pop	{r4, r7, pc}
 80106c4:	fffffeff 	.word	0xfffffeff
 80106c8:	fffffedf 	.word	0xfffffedf

080106cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80106cc:	b580      	push	{r7, lr}
 80106ce:	b082      	sub	sp, #8
 80106d0:	af00      	add	r7, sp, #0
 80106d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80106d4:	46c0      	nop			@ (mov r8, r8)
 80106d6:	46bd      	mov	sp, r7
 80106d8:	b002      	add	sp, #8
 80106da:	bd80      	pop	{r7, pc}

080106dc <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
 80106e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 80106e4:	46c0      	nop			@ (mov r8, r8)
 80106e6:	46bd      	mov	sp, r7
 80106e8:	b002      	add	sp, #8
 80106ea:	bd80      	pop	{r7, pc}

080106ec <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80106ec:	b580      	push	{r7, lr}
 80106ee:	b082      	sub	sp, #8
 80106f0:	af00      	add	r7, sp, #0
 80106f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 80106f4:	46c0      	nop			@ (mov r8, r8)
 80106f6:	46bd      	mov	sp, r7
 80106f8:	b002      	add	sp, #8
 80106fa:	bd80      	pop	{r7, pc}

080106fc <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 80106fc:	b580      	push	{r7, lr}
 80106fe:	b082      	sub	sp, #8
 8010700:	af00      	add	r7, sp, #0
 8010702:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8010704:	46c0      	nop			@ (mov r8, r8)
 8010706:	46bd      	mov	sp, r7
 8010708:	b002      	add	sp, #8
 801070a:	bd80      	pop	{r7, pc}

0801070c <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 801070c:	b580      	push	{r7, lr}
 801070e:	b082      	sub	sp, #8
 8010710:	af00      	add	r7, sp, #0
 8010712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8010714:	46c0      	nop			@ (mov r8, r8)
 8010716:	46bd      	mov	sp, r7
 8010718:	b002      	add	sp, #8
 801071a:	bd80      	pop	{r7, pc}

0801071c <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b082      	sub	sp, #8
 8010720:	af00      	add	r7, sp, #0
 8010722:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8010724:	46c0      	nop			@ (mov r8, r8)
 8010726:	46bd      	mov	sp, r7
 8010728:	b002      	add	sp, #8
 801072a:	bd80      	pop	{r7, pc}

0801072c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 801072c:	b580      	push	{r7, lr}
 801072e:	b082      	sub	sp, #8
 8010730:	af00      	add	r7, sp, #0
 8010732:	6078      	str	r0, [r7, #4]
 8010734:	000a      	movs	r2, r1
 8010736:	1cbb      	adds	r3, r7, #2
 8010738:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801073a:	46c0      	nop			@ (mov r8, r8)
 801073c:	46bd      	mov	sp, r7
 801073e:	b002      	add	sp, #8
 8010740:	bd80      	pop	{r7, pc}
	...

08010744 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8010744:	b580      	push	{r7, lr}
 8010746:	b082      	sub	sp, #8
 8010748:	af00      	add	r7, sp, #0
 801074a:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	2188      	movs	r1, #136	@ 0x88
 8010750:	4a14      	ldr	r2, [pc, #80]	@ (80107a4 <UART_InitCallbacksToDefault+0x60>)
 8010752:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	218c      	movs	r1, #140	@ 0x8c
 8010758:	4a13      	ldr	r2, [pc, #76]	@ (80107a8 <UART_InitCallbacksToDefault+0x64>)
 801075a:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	2190      	movs	r1, #144	@ 0x90
 8010760:	4a12      	ldr	r2, [pc, #72]	@ (80107ac <UART_InitCallbacksToDefault+0x68>)
 8010762:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 8010764:	687b      	ldr	r3, [r7, #4]
 8010766:	2194      	movs	r1, #148	@ 0x94
 8010768:	4a11      	ldr	r2, [pc, #68]	@ (80107b0 <UART_InitCallbacksToDefault+0x6c>)
 801076a:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2198      	movs	r1, #152	@ 0x98
 8010770:	4a10      	ldr	r2, [pc, #64]	@ (80107b4 <UART_InitCallbacksToDefault+0x70>)
 8010772:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 8010774:	687b      	ldr	r3, [r7, #4]
 8010776:	219c      	movs	r1, #156	@ 0x9c
 8010778:	4a0f      	ldr	r2, [pc, #60]	@ (80107b8 <UART_InitCallbacksToDefault+0x74>)
 801077a:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	21a0      	movs	r1, #160	@ 0xa0
 8010780:	4a0e      	ldr	r2, [pc, #56]	@ (80107bc <UART_InitCallbacksToDefault+0x78>)
 8010782:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 8010784:	687b      	ldr	r3, [r7, #4]
 8010786:	21a4      	movs	r1, #164	@ 0xa4
 8010788:	4a0d      	ldr	r2, [pc, #52]	@ (80107c0 <UART_InitCallbacksToDefault+0x7c>)
 801078a:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	21a8      	movs	r1, #168	@ 0xa8
 8010790:	4a0c      	ldr	r2, [pc, #48]	@ (80107c4 <UART_InitCallbacksToDefault+0x80>)
 8010792:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 8010794:	687b      	ldr	r3, [r7, #4]
 8010796:	21ac      	movs	r1, #172	@ 0xac
 8010798:	4a0b      	ldr	r2, [pc, #44]	@ (80107c8 <UART_InitCallbacksToDefault+0x84>)
 801079a:	505a      	str	r2, [r3, r1]

}
 801079c:	46c0      	nop			@ (mov r8, r8)
 801079e:	46bd      	mov	sp, r7
 80107a0:	b002      	add	sp, #8
 80107a2:	bd80      	pop	{r7, pc}
 80107a4:	080106dd 	.word	0x080106dd
 80107a8:	080106cd 	.word	0x080106cd
 80107ac:	080106ed 	.word	0x080106ed
 80107b0:	08003819 	.word	0x08003819
 80107b4:	08003855 	.word	0x08003855
 80107b8:	080106fd 	.word	0x080106fd
 80107bc:	0801070d 	.word	0x0801070d
 80107c0:	0801071d 	.word	0x0801071d
 80107c4:	08011635 	.word	0x08011635
 80107c8:	0801072d 	.word	0x0801072d

080107cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80107cc:	b5b0      	push	{r4, r5, r7, lr}
 80107ce:	b08e      	sub	sp, #56	@ 0x38
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80107d4:	231a      	movs	r3, #26
 80107d6:	2218      	movs	r2, #24
 80107d8:	189b      	adds	r3, r3, r2
 80107da:	19db      	adds	r3, r3, r7
 80107dc:	2200      	movs	r2, #0
 80107de:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80107e0:	69fb      	ldr	r3, [r7, #28]
 80107e2:	689a      	ldr	r2, [r3, #8]
 80107e4:	69fb      	ldr	r3, [r7, #28]
 80107e6:	691b      	ldr	r3, [r3, #16]
 80107e8:	431a      	orrs	r2, r3
 80107ea:	69fb      	ldr	r3, [r7, #28]
 80107ec:	695b      	ldr	r3, [r3, #20]
 80107ee:	431a      	orrs	r2, r3
 80107f0:	69fb      	ldr	r3, [r7, #28]
 80107f2:	69db      	ldr	r3, [r3, #28]
 80107f4:	4313      	orrs	r3, r2
 80107f6:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80107f8:	69fb      	ldr	r3, [r7, #28]
 80107fa:	681b      	ldr	r3, [r3, #0]
 80107fc:	681b      	ldr	r3, [r3, #0]
 80107fe:	4ac3      	ldr	r2, [pc, #780]	@ (8010b0c <UART_SetConfig+0x340>)
 8010800:	4013      	ands	r3, r2
 8010802:	0019      	movs	r1, r3
 8010804:	69fb      	ldr	r3, [r7, #28]
 8010806:	681b      	ldr	r3, [r3, #0]
 8010808:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801080a:	430a      	orrs	r2, r1
 801080c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801080e:	69fb      	ldr	r3, [r7, #28]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	685b      	ldr	r3, [r3, #4]
 8010814:	4abe      	ldr	r2, [pc, #760]	@ (8010b10 <UART_SetConfig+0x344>)
 8010816:	4013      	ands	r3, r2
 8010818:	0019      	movs	r1, r3
 801081a:	69fb      	ldr	r3, [r7, #28]
 801081c:	68da      	ldr	r2, [r3, #12]
 801081e:	69fb      	ldr	r3, [r7, #28]
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	430a      	orrs	r2, r1
 8010824:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8010826:	69fb      	ldr	r3, [r7, #28]
 8010828:	699b      	ldr	r3, [r3, #24]
 801082a:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801082c:	69fb      	ldr	r3, [r7, #28]
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	4ab8      	ldr	r2, [pc, #736]	@ (8010b14 <UART_SetConfig+0x348>)
 8010832:	4293      	cmp	r3, r2
 8010834:	d004      	beq.n	8010840 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8010836:	69fb      	ldr	r3, [r7, #28]
 8010838:	6a1b      	ldr	r3, [r3, #32]
 801083a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801083c:	4313      	orrs	r3, r2
 801083e:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8010840:	69fb      	ldr	r3, [r7, #28]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	689b      	ldr	r3, [r3, #8]
 8010846:	4ab4      	ldr	r2, [pc, #720]	@ (8010b18 <UART_SetConfig+0x34c>)
 8010848:	4013      	ands	r3, r2
 801084a:	0019      	movs	r1, r3
 801084c:	69fb      	ldr	r3, [r7, #28]
 801084e:	681b      	ldr	r3, [r3, #0]
 8010850:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8010852:	430a      	orrs	r2, r1
 8010854:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8010856:	69fb      	ldr	r3, [r7, #28]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	4ab0      	ldr	r2, [pc, #704]	@ (8010b1c <UART_SetConfig+0x350>)
 801085c:	4293      	cmp	r3, r2
 801085e:	d131      	bne.n	80108c4 <UART_SetConfig+0xf8>
 8010860:	4baf      	ldr	r3, [pc, #700]	@ (8010b20 <UART_SetConfig+0x354>)
 8010862:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010864:	2203      	movs	r2, #3
 8010866:	4013      	ands	r3, r2
 8010868:	2b03      	cmp	r3, #3
 801086a:	d01d      	beq.n	80108a8 <UART_SetConfig+0xdc>
 801086c:	d823      	bhi.n	80108b6 <UART_SetConfig+0xea>
 801086e:	2b02      	cmp	r3, #2
 8010870:	d00c      	beq.n	801088c <UART_SetConfig+0xc0>
 8010872:	d820      	bhi.n	80108b6 <UART_SetConfig+0xea>
 8010874:	2b00      	cmp	r3, #0
 8010876:	d002      	beq.n	801087e <UART_SetConfig+0xb2>
 8010878:	2b01      	cmp	r3, #1
 801087a:	d00e      	beq.n	801089a <UART_SetConfig+0xce>
 801087c:	e01b      	b.n	80108b6 <UART_SetConfig+0xea>
 801087e:	231b      	movs	r3, #27
 8010880:	2218      	movs	r2, #24
 8010882:	189b      	adds	r3, r3, r2
 8010884:	19db      	adds	r3, r3, r7
 8010886:	2201      	movs	r2, #1
 8010888:	701a      	strb	r2, [r3, #0]
 801088a:	e0b4      	b.n	80109f6 <UART_SetConfig+0x22a>
 801088c:	231b      	movs	r3, #27
 801088e:	2218      	movs	r2, #24
 8010890:	189b      	adds	r3, r3, r2
 8010892:	19db      	adds	r3, r3, r7
 8010894:	2202      	movs	r2, #2
 8010896:	701a      	strb	r2, [r3, #0]
 8010898:	e0ad      	b.n	80109f6 <UART_SetConfig+0x22a>
 801089a:	231b      	movs	r3, #27
 801089c:	2218      	movs	r2, #24
 801089e:	189b      	adds	r3, r3, r2
 80108a0:	19db      	adds	r3, r3, r7
 80108a2:	2204      	movs	r2, #4
 80108a4:	701a      	strb	r2, [r3, #0]
 80108a6:	e0a6      	b.n	80109f6 <UART_SetConfig+0x22a>
 80108a8:	231b      	movs	r3, #27
 80108aa:	2218      	movs	r2, #24
 80108ac:	189b      	adds	r3, r3, r2
 80108ae:	19db      	adds	r3, r3, r7
 80108b0:	2208      	movs	r2, #8
 80108b2:	701a      	strb	r2, [r3, #0]
 80108b4:	e09f      	b.n	80109f6 <UART_SetConfig+0x22a>
 80108b6:	231b      	movs	r3, #27
 80108b8:	2218      	movs	r2, #24
 80108ba:	189b      	adds	r3, r3, r2
 80108bc:	19db      	adds	r3, r3, r7
 80108be:	2210      	movs	r2, #16
 80108c0:	701a      	strb	r2, [r3, #0]
 80108c2:	e098      	b.n	80109f6 <UART_SetConfig+0x22a>
 80108c4:	69fb      	ldr	r3, [r7, #28]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	4a96      	ldr	r2, [pc, #600]	@ (8010b24 <UART_SetConfig+0x358>)
 80108ca:	4293      	cmp	r3, r2
 80108cc:	d131      	bne.n	8010932 <UART_SetConfig+0x166>
 80108ce:	4b94      	ldr	r3, [pc, #592]	@ (8010b20 <UART_SetConfig+0x354>)
 80108d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80108d2:	220c      	movs	r2, #12
 80108d4:	4013      	ands	r3, r2
 80108d6:	2b0c      	cmp	r3, #12
 80108d8:	d01d      	beq.n	8010916 <UART_SetConfig+0x14a>
 80108da:	d823      	bhi.n	8010924 <UART_SetConfig+0x158>
 80108dc:	2b08      	cmp	r3, #8
 80108de:	d00c      	beq.n	80108fa <UART_SetConfig+0x12e>
 80108e0:	d820      	bhi.n	8010924 <UART_SetConfig+0x158>
 80108e2:	2b00      	cmp	r3, #0
 80108e4:	d002      	beq.n	80108ec <UART_SetConfig+0x120>
 80108e6:	2b04      	cmp	r3, #4
 80108e8:	d00e      	beq.n	8010908 <UART_SetConfig+0x13c>
 80108ea:	e01b      	b.n	8010924 <UART_SetConfig+0x158>
 80108ec:	231b      	movs	r3, #27
 80108ee:	2218      	movs	r2, #24
 80108f0:	189b      	adds	r3, r3, r2
 80108f2:	19db      	adds	r3, r3, r7
 80108f4:	2200      	movs	r2, #0
 80108f6:	701a      	strb	r2, [r3, #0]
 80108f8:	e07d      	b.n	80109f6 <UART_SetConfig+0x22a>
 80108fa:	231b      	movs	r3, #27
 80108fc:	2218      	movs	r2, #24
 80108fe:	189b      	adds	r3, r3, r2
 8010900:	19db      	adds	r3, r3, r7
 8010902:	2202      	movs	r2, #2
 8010904:	701a      	strb	r2, [r3, #0]
 8010906:	e076      	b.n	80109f6 <UART_SetConfig+0x22a>
 8010908:	231b      	movs	r3, #27
 801090a:	2218      	movs	r2, #24
 801090c:	189b      	adds	r3, r3, r2
 801090e:	19db      	adds	r3, r3, r7
 8010910:	2204      	movs	r2, #4
 8010912:	701a      	strb	r2, [r3, #0]
 8010914:	e06f      	b.n	80109f6 <UART_SetConfig+0x22a>
 8010916:	231b      	movs	r3, #27
 8010918:	2218      	movs	r2, #24
 801091a:	189b      	adds	r3, r3, r2
 801091c:	19db      	adds	r3, r3, r7
 801091e:	2208      	movs	r2, #8
 8010920:	701a      	strb	r2, [r3, #0]
 8010922:	e068      	b.n	80109f6 <UART_SetConfig+0x22a>
 8010924:	231b      	movs	r3, #27
 8010926:	2218      	movs	r2, #24
 8010928:	189b      	adds	r3, r3, r2
 801092a:	19db      	adds	r3, r3, r7
 801092c:	2210      	movs	r2, #16
 801092e:	701a      	strb	r2, [r3, #0]
 8010930:	e061      	b.n	80109f6 <UART_SetConfig+0x22a>
 8010932:	69fb      	ldr	r3, [r7, #28]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	4a7c      	ldr	r2, [pc, #496]	@ (8010b28 <UART_SetConfig+0x35c>)
 8010938:	4293      	cmp	r3, r2
 801093a:	d106      	bne.n	801094a <UART_SetConfig+0x17e>
 801093c:	231b      	movs	r3, #27
 801093e:	2218      	movs	r2, #24
 8010940:	189b      	adds	r3, r3, r2
 8010942:	19db      	adds	r3, r3, r7
 8010944:	2200      	movs	r2, #0
 8010946:	701a      	strb	r2, [r3, #0]
 8010948:	e055      	b.n	80109f6 <UART_SetConfig+0x22a>
 801094a:	69fb      	ldr	r3, [r7, #28]
 801094c:	681b      	ldr	r3, [r3, #0]
 801094e:	4a77      	ldr	r2, [pc, #476]	@ (8010b2c <UART_SetConfig+0x360>)
 8010950:	4293      	cmp	r3, r2
 8010952:	d106      	bne.n	8010962 <UART_SetConfig+0x196>
 8010954:	231b      	movs	r3, #27
 8010956:	2218      	movs	r2, #24
 8010958:	189b      	adds	r3, r3, r2
 801095a:	19db      	adds	r3, r3, r7
 801095c:	2200      	movs	r2, #0
 801095e:	701a      	strb	r2, [r3, #0]
 8010960:	e049      	b.n	80109f6 <UART_SetConfig+0x22a>
 8010962:	69fb      	ldr	r3, [r7, #28]
 8010964:	681b      	ldr	r3, [r3, #0]
 8010966:	4a6b      	ldr	r2, [pc, #428]	@ (8010b14 <UART_SetConfig+0x348>)
 8010968:	4293      	cmp	r3, r2
 801096a:	d13e      	bne.n	80109ea <UART_SetConfig+0x21e>
 801096c:	4b6c      	ldr	r3, [pc, #432]	@ (8010b20 <UART_SetConfig+0x354>)
 801096e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8010970:	23c0      	movs	r3, #192	@ 0xc0
 8010972:	011b      	lsls	r3, r3, #4
 8010974:	4013      	ands	r3, r2
 8010976:	22c0      	movs	r2, #192	@ 0xc0
 8010978:	0112      	lsls	r2, r2, #4
 801097a:	4293      	cmp	r3, r2
 801097c:	d027      	beq.n	80109ce <UART_SetConfig+0x202>
 801097e:	22c0      	movs	r2, #192	@ 0xc0
 8010980:	0112      	lsls	r2, r2, #4
 8010982:	4293      	cmp	r3, r2
 8010984:	d82a      	bhi.n	80109dc <UART_SetConfig+0x210>
 8010986:	2280      	movs	r2, #128	@ 0x80
 8010988:	0112      	lsls	r2, r2, #4
 801098a:	4293      	cmp	r3, r2
 801098c:	d011      	beq.n	80109b2 <UART_SetConfig+0x1e6>
 801098e:	2280      	movs	r2, #128	@ 0x80
 8010990:	0112      	lsls	r2, r2, #4
 8010992:	4293      	cmp	r3, r2
 8010994:	d822      	bhi.n	80109dc <UART_SetConfig+0x210>
 8010996:	2b00      	cmp	r3, #0
 8010998:	d004      	beq.n	80109a4 <UART_SetConfig+0x1d8>
 801099a:	2280      	movs	r2, #128	@ 0x80
 801099c:	00d2      	lsls	r2, r2, #3
 801099e:	4293      	cmp	r3, r2
 80109a0:	d00e      	beq.n	80109c0 <UART_SetConfig+0x1f4>
 80109a2:	e01b      	b.n	80109dc <UART_SetConfig+0x210>
 80109a4:	231b      	movs	r3, #27
 80109a6:	2218      	movs	r2, #24
 80109a8:	189b      	adds	r3, r3, r2
 80109aa:	19db      	adds	r3, r3, r7
 80109ac:	2200      	movs	r2, #0
 80109ae:	701a      	strb	r2, [r3, #0]
 80109b0:	e021      	b.n	80109f6 <UART_SetConfig+0x22a>
 80109b2:	231b      	movs	r3, #27
 80109b4:	2218      	movs	r2, #24
 80109b6:	189b      	adds	r3, r3, r2
 80109b8:	19db      	adds	r3, r3, r7
 80109ba:	2202      	movs	r2, #2
 80109bc:	701a      	strb	r2, [r3, #0]
 80109be:	e01a      	b.n	80109f6 <UART_SetConfig+0x22a>
 80109c0:	231b      	movs	r3, #27
 80109c2:	2218      	movs	r2, #24
 80109c4:	189b      	adds	r3, r3, r2
 80109c6:	19db      	adds	r3, r3, r7
 80109c8:	2204      	movs	r2, #4
 80109ca:	701a      	strb	r2, [r3, #0]
 80109cc:	e013      	b.n	80109f6 <UART_SetConfig+0x22a>
 80109ce:	231b      	movs	r3, #27
 80109d0:	2218      	movs	r2, #24
 80109d2:	189b      	adds	r3, r3, r2
 80109d4:	19db      	adds	r3, r3, r7
 80109d6:	2208      	movs	r2, #8
 80109d8:	701a      	strb	r2, [r3, #0]
 80109da:	e00c      	b.n	80109f6 <UART_SetConfig+0x22a>
 80109dc:	231b      	movs	r3, #27
 80109de:	2218      	movs	r2, #24
 80109e0:	189b      	adds	r3, r3, r2
 80109e2:	19db      	adds	r3, r3, r7
 80109e4:	2210      	movs	r2, #16
 80109e6:	701a      	strb	r2, [r3, #0]
 80109e8:	e005      	b.n	80109f6 <UART_SetConfig+0x22a>
 80109ea:	231b      	movs	r3, #27
 80109ec:	2218      	movs	r2, #24
 80109ee:	189b      	adds	r3, r3, r2
 80109f0:	19db      	adds	r3, r3, r7
 80109f2:	2210      	movs	r2, #16
 80109f4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80109f6:	69fb      	ldr	r3, [r7, #28]
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4a46      	ldr	r2, [pc, #280]	@ (8010b14 <UART_SetConfig+0x348>)
 80109fc:	4293      	cmp	r3, r2
 80109fe:	d000      	beq.n	8010a02 <UART_SetConfig+0x236>
 8010a00:	e09a      	b.n	8010b38 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8010a02:	231b      	movs	r3, #27
 8010a04:	2218      	movs	r2, #24
 8010a06:	189b      	adds	r3, r3, r2
 8010a08:	19db      	adds	r3, r3, r7
 8010a0a:	781b      	ldrb	r3, [r3, #0]
 8010a0c:	2b08      	cmp	r3, #8
 8010a0e:	d01d      	beq.n	8010a4c <UART_SetConfig+0x280>
 8010a10:	dc20      	bgt.n	8010a54 <UART_SetConfig+0x288>
 8010a12:	2b04      	cmp	r3, #4
 8010a14:	d015      	beq.n	8010a42 <UART_SetConfig+0x276>
 8010a16:	dc1d      	bgt.n	8010a54 <UART_SetConfig+0x288>
 8010a18:	2b00      	cmp	r3, #0
 8010a1a:	d002      	beq.n	8010a22 <UART_SetConfig+0x256>
 8010a1c:	2b02      	cmp	r3, #2
 8010a1e:	d005      	beq.n	8010a2c <UART_SetConfig+0x260>
 8010a20:	e018      	b.n	8010a54 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010a22:	f7fe fc51 	bl	800f2c8 <HAL_RCC_GetPCLK1Freq>
 8010a26:	0003      	movs	r3, r0
 8010a28:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010a2a:	e01c      	b.n	8010a66 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010a2c:	4b3c      	ldr	r3, [pc, #240]	@ (8010b20 <UART_SetConfig+0x354>)
 8010a2e:	681b      	ldr	r3, [r3, #0]
 8010a30:	2210      	movs	r2, #16
 8010a32:	4013      	ands	r3, r2
 8010a34:	d002      	beq.n	8010a3c <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010a36:	4b3e      	ldr	r3, [pc, #248]	@ (8010b30 <UART_SetConfig+0x364>)
 8010a38:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010a3a:	e014      	b.n	8010a66 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8010a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8010b34 <UART_SetConfig+0x368>)
 8010a3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010a40:	e011      	b.n	8010a66 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010a42:	f7fe fb91 	bl	800f168 <HAL_RCC_GetSysClockFreq>
 8010a46:	0003      	movs	r3, r0
 8010a48:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010a4a:	e00c      	b.n	8010a66 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010a4c:	2380      	movs	r3, #128	@ 0x80
 8010a4e:	021b      	lsls	r3, r3, #8
 8010a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010a52:	e008      	b.n	8010a66 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8010a54:	2300      	movs	r3, #0
 8010a56:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010a58:	231a      	movs	r3, #26
 8010a5a:	2218      	movs	r2, #24
 8010a5c:	189b      	adds	r3, r3, r2
 8010a5e:	19db      	adds	r3, r3, r7
 8010a60:	2201      	movs	r2, #1
 8010a62:	701a      	strb	r2, [r3, #0]
        break;
 8010a64:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8010a66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a68:	2b00      	cmp	r3, #0
 8010a6a:	d100      	bne.n	8010a6e <UART_SetConfig+0x2a2>
 8010a6c:	e133      	b.n	8010cd6 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	685a      	ldr	r2, [r3, #4]
 8010a72:	0013      	movs	r3, r2
 8010a74:	005b      	lsls	r3, r3, #1
 8010a76:	189b      	adds	r3, r3, r2
 8010a78:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a7a:	429a      	cmp	r2, r3
 8010a7c:	d305      	bcc.n	8010a8a <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 8010a7e:	69fb      	ldr	r3, [r7, #28]
 8010a80:	685b      	ldr	r3, [r3, #4]
 8010a82:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8010a84:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010a86:	429a      	cmp	r2, r3
 8010a88:	d906      	bls.n	8010a98 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 8010a8a:	231a      	movs	r3, #26
 8010a8c:	2218      	movs	r2, #24
 8010a8e:	189b      	adds	r3, r3, r2
 8010a90:	19db      	adds	r3, r3, r7
 8010a92:	2201      	movs	r2, #1
 8010a94:	701a      	strb	r2, [r3, #0]
 8010a96:	e11e      	b.n	8010cd6 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8010a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010a9a:	613b      	str	r3, [r7, #16]
 8010a9c:	2300      	movs	r3, #0
 8010a9e:	617b      	str	r3, [r7, #20]
 8010aa0:	6939      	ldr	r1, [r7, #16]
 8010aa2:	697a      	ldr	r2, [r7, #20]
 8010aa4:	000b      	movs	r3, r1
 8010aa6:	0e1b      	lsrs	r3, r3, #24
 8010aa8:	0010      	movs	r0, r2
 8010aaa:	0205      	lsls	r5, r0, #8
 8010aac:	431d      	orrs	r5, r3
 8010aae:	000b      	movs	r3, r1
 8010ab0:	021c      	lsls	r4, r3, #8
 8010ab2:	69fb      	ldr	r3, [r7, #28]
 8010ab4:	685b      	ldr	r3, [r3, #4]
 8010ab6:	085b      	lsrs	r3, r3, #1
 8010ab8:	60bb      	str	r3, [r7, #8]
 8010aba:	2300      	movs	r3, #0
 8010abc:	60fb      	str	r3, [r7, #12]
 8010abe:	68b8      	ldr	r0, [r7, #8]
 8010ac0:	68f9      	ldr	r1, [r7, #12]
 8010ac2:	1900      	adds	r0, r0, r4
 8010ac4:	4169      	adcs	r1, r5
 8010ac6:	69fb      	ldr	r3, [r7, #28]
 8010ac8:	685b      	ldr	r3, [r3, #4]
 8010aca:	603b      	str	r3, [r7, #0]
 8010acc:	2300      	movs	r3, #0
 8010ace:	607b      	str	r3, [r7, #4]
 8010ad0:	683a      	ldr	r2, [r7, #0]
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	f7ef fd68 	bl	80005a8 <__aeabi_uldivmod>
 8010ad8:	0002      	movs	r2, r0
 8010ada:	000b      	movs	r3, r1
 8010adc:	0013      	movs	r3, r2
 8010ade:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8010ae0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010ae2:	23c0      	movs	r3, #192	@ 0xc0
 8010ae4:	009b      	lsls	r3, r3, #2
 8010ae6:	429a      	cmp	r2, r3
 8010ae8:	d309      	bcc.n	8010afe <UART_SetConfig+0x332>
 8010aea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010aec:	2380      	movs	r3, #128	@ 0x80
 8010aee:	035b      	lsls	r3, r3, #13
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d204      	bcs.n	8010afe <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8010af4:	69fb      	ldr	r3, [r7, #28]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010afa:	60da      	str	r2, [r3, #12]
 8010afc:	e0eb      	b.n	8010cd6 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8010afe:	231a      	movs	r3, #26
 8010b00:	2218      	movs	r2, #24
 8010b02:	189b      	adds	r3, r3, r2
 8010b04:	19db      	adds	r3, r3, r7
 8010b06:	2201      	movs	r2, #1
 8010b08:	701a      	strb	r2, [r3, #0]
 8010b0a:	e0e4      	b.n	8010cd6 <UART_SetConfig+0x50a>
 8010b0c:	efff69f3 	.word	0xefff69f3
 8010b10:	ffffcfff 	.word	0xffffcfff
 8010b14:	40004800 	.word	0x40004800
 8010b18:	fffff4ff 	.word	0xfffff4ff
 8010b1c:	40013800 	.word	0x40013800
 8010b20:	40021000 	.word	0x40021000
 8010b24:	40004400 	.word	0x40004400
 8010b28:	40004c00 	.word	0x40004c00
 8010b2c:	40005000 	.word	0x40005000
 8010b30:	003d0900 	.word	0x003d0900
 8010b34:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010b38:	69fb      	ldr	r3, [r7, #28]
 8010b3a:	69da      	ldr	r2, [r3, #28]
 8010b3c:	2380      	movs	r3, #128	@ 0x80
 8010b3e:	021b      	lsls	r3, r3, #8
 8010b40:	429a      	cmp	r2, r3
 8010b42:	d000      	beq.n	8010b46 <UART_SetConfig+0x37a>
 8010b44:	e070      	b.n	8010c28 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 8010b46:	231b      	movs	r3, #27
 8010b48:	2218      	movs	r2, #24
 8010b4a:	189b      	adds	r3, r3, r2
 8010b4c:	19db      	adds	r3, r3, r7
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	2b08      	cmp	r3, #8
 8010b52:	d822      	bhi.n	8010b9a <UART_SetConfig+0x3ce>
 8010b54:	009a      	lsls	r2, r3, #2
 8010b56:	4b67      	ldr	r3, [pc, #412]	@ (8010cf4 <UART_SetConfig+0x528>)
 8010b58:	18d3      	adds	r3, r2, r3
 8010b5a:	681b      	ldr	r3, [r3, #0]
 8010b5c:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010b5e:	f7fe fbb3 	bl	800f2c8 <HAL_RCC_GetPCLK1Freq>
 8010b62:	0003      	movs	r3, r0
 8010b64:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b66:	e021      	b.n	8010bac <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010b68:	f7fe fbc4 	bl	800f2f4 <HAL_RCC_GetPCLK2Freq>
 8010b6c:	0003      	movs	r3, r0
 8010b6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b70:	e01c      	b.n	8010bac <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010b72:	4b61      	ldr	r3, [pc, #388]	@ (8010cf8 <UART_SetConfig+0x52c>)
 8010b74:	681b      	ldr	r3, [r3, #0]
 8010b76:	2210      	movs	r2, #16
 8010b78:	4013      	ands	r3, r2
 8010b7a:	d002      	beq.n	8010b82 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010b7c:	4b5f      	ldr	r3, [pc, #380]	@ (8010cfc <UART_SetConfig+0x530>)
 8010b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010b80:	e014      	b.n	8010bac <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 8010b82:	4b5f      	ldr	r3, [pc, #380]	@ (8010d00 <UART_SetConfig+0x534>)
 8010b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b86:	e011      	b.n	8010bac <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010b88:	f7fe faee 	bl	800f168 <HAL_RCC_GetSysClockFreq>
 8010b8c:	0003      	movs	r3, r0
 8010b8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b90:	e00c      	b.n	8010bac <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010b92:	2380      	movs	r3, #128	@ 0x80
 8010b94:	021b      	lsls	r3, r3, #8
 8010b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010b98:	e008      	b.n	8010bac <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 8010b9a:	2300      	movs	r3, #0
 8010b9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010b9e:	231a      	movs	r3, #26
 8010ba0:	2218      	movs	r2, #24
 8010ba2:	189b      	adds	r3, r3, r2
 8010ba4:	19db      	adds	r3, r3, r7
 8010ba6:	2201      	movs	r2, #1
 8010ba8:	701a      	strb	r2, [r3, #0]
        break;
 8010baa:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8010bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bae:	2b00      	cmp	r3, #0
 8010bb0:	d100      	bne.n	8010bb4 <UART_SetConfig+0x3e8>
 8010bb2:	e090      	b.n	8010cd6 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8010bb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010bb6:	005a      	lsls	r2, r3, #1
 8010bb8:	69fb      	ldr	r3, [r7, #28]
 8010bba:	685b      	ldr	r3, [r3, #4]
 8010bbc:	085b      	lsrs	r3, r3, #1
 8010bbe:	18d2      	adds	r2, r2, r3
 8010bc0:	69fb      	ldr	r3, [r7, #28]
 8010bc2:	685b      	ldr	r3, [r3, #4]
 8010bc4:	0019      	movs	r1, r3
 8010bc6:	0010      	movs	r0, r2
 8010bc8:	f7ef fae2 	bl	8000190 <__udivsi3>
 8010bcc:	0003      	movs	r3, r0
 8010bce:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bd2:	2b0f      	cmp	r3, #15
 8010bd4:	d921      	bls.n	8010c1a <UART_SetConfig+0x44e>
 8010bd6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010bd8:	2380      	movs	r3, #128	@ 0x80
 8010bda:	025b      	lsls	r3, r3, #9
 8010bdc:	429a      	cmp	r2, r3
 8010bde:	d21c      	bcs.n	8010c1a <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010be0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010be2:	b29a      	uxth	r2, r3
 8010be4:	200e      	movs	r0, #14
 8010be6:	2418      	movs	r4, #24
 8010be8:	1903      	adds	r3, r0, r4
 8010bea:	19db      	adds	r3, r3, r7
 8010bec:	210f      	movs	r1, #15
 8010bee:	438a      	bics	r2, r1
 8010bf0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010bf4:	085b      	lsrs	r3, r3, #1
 8010bf6:	b29b      	uxth	r3, r3
 8010bf8:	2207      	movs	r2, #7
 8010bfa:	4013      	ands	r3, r2
 8010bfc:	b299      	uxth	r1, r3
 8010bfe:	1903      	adds	r3, r0, r4
 8010c00:	19db      	adds	r3, r3, r7
 8010c02:	1902      	adds	r2, r0, r4
 8010c04:	19d2      	adds	r2, r2, r7
 8010c06:	8812      	ldrh	r2, [r2, #0]
 8010c08:	430a      	orrs	r2, r1
 8010c0a:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8010c0c:	69fb      	ldr	r3, [r7, #28]
 8010c0e:	681b      	ldr	r3, [r3, #0]
 8010c10:	1902      	adds	r2, r0, r4
 8010c12:	19d2      	adds	r2, r2, r7
 8010c14:	8812      	ldrh	r2, [r2, #0]
 8010c16:	60da      	str	r2, [r3, #12]
 8010c18:	e05d      	b.n	8010cd6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010c1a:	231a      	movs	r3, #26
 8010c1c:	2218      	movs	r2, #24
 8010c1e:	189b      	adds	r3, r3, r2
 8010c20:	19db      	adds	r3, r3, r7
 8010c22:	2201      	movs	r2, #1
 8010c24:	701a      	strb	r2, [r3, #0]
 8010c26:	e056      	b.n	8010cd6 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010c28:	231b      	movs	r3, #27
 8010c2a:	2218      	movs	r2, #24
 8010c2c:	189b      	adds	r3, r3, r2
 8010c2e:	19db      	adds	r3, r3, r7
 8010c30:	781b      	ldrb	r3, [r3, #0]
 8010c32:	2b08      	cmp	r3, #8
 8010c34:	d822      	bhi.n	8010c7c <UART_SetConfig+0x4b0>
 8010c36:	009a      	lsls	r2, r3, #2
 8010c38:	4b32      	ldr	r3, [pc, #200]	@ (8010d04 <UART_SetConfig+0x538>)
 8010c3a:	18d3      	adds	r3, r2, r3
 8010c3c:	681b      	ldr	r3, [r3, #0]
 8010c3e:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010c40:	f7fe fb42 	bl	800f2c8 <HAL_RCC_GetPCLK1Freq>
 8010c44:	0003      	movs	r3, r0
 8010c46:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c48:	e021      	b.n	8010c8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8010c4a:	f7fe fb53 	bl	800f2f4 <HAL_RCC_GetPCLK2Freq>
 8010c4e:	0003      	movs	r3, r0
 8010c50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c52:	e01c      	b.n	8010c8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010c54:	4b28      	ldr	r3, [pc, #160]	@ (8010cf8 <UART_SetConfig+0x52c>)
 8010c56:	681b      	ldr	r3, [r3, #0]
 8010c58:	2210      	movs	r2, #16
 8010c5a:	4013      	ands	r3, r2
 8010c5c:	d002      	beq.n	8010c64 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8010c5e:	4b27      	ldr	r3, [pc, #156]	@ (8010cfc <UART_SetConfig+0x530>)
 8010c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8010c62:	e014      	b.n	8010c8e <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 8010c64:	4b26      	ldr	r3, [pc, #152]	@ (8010d00 <UART_SetConfig+0x534>)
 8010c66:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c68:	e011      	b.n	8010c8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8010c6a:	f7fe fa7d 	bl	800f168 <HAL_RCC_GetSysClockFreq>
 8010c6e:	0003      	movs	r3, r0
 8010c70:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c72:	e00c      	b.n	8010c8e <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010c74:	2380      	movs	r3, #128	@ 0x80
 8010c76:	021b      	lsls	r3, r3, #8
 8010c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8010c7a:	e008      	b.n	8010c8e <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 8010c80:	231a      	movs	r3, #26
 8010c82:	2218      	movs	r2, #24
 8010c84:	189b      	adds	r3, r3, r2
 8010c86:	19db      	adds	r3, r3, r7
 8010c88:	2201      	movs	r2, #1
 8010c8a:	701a      	strb	r2, [r3, #0]
        break;
 8010c8c:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 8010c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d020      	beq.n	8010cd6 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8010c94:	69fb      	ldr	r3, [r7, #28]
 8010c96:	685b      	ldr	r3, [r3, #4]
 8010c98:	085a      	lsrs	r2, r3, #1
 8010c9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010c9c:	18d2      	adds	r2, r2, r3
 8010c9e:	69fb      	ldr	r3, [r7, #28]
 8010ca0:	685b      	ldr	r3, [r3, #4]
 8010ca2:	0019      	movs	r1, r3
 8010ca4:	0010      	movs	r0, r2
 8010ca6:	f7ef fa73 	bl	8000190 <__udivsi3>
 8010caa:	0003      	movs	r3, r0
 8010cac:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8010cae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cb0:	2b0f      	cmp	r3, #15
 8010cb2:	d90a      	bls.n	8010cca <UART_SetConfig+0x4fe>
 8010cb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010cb6:	2380      	movs	r3, #128	@ 0x80
 8010cb8:	025b      	lsls	r3, r3, #9
 8010cba:	429a      	cmp	r2, r3
 8010cbc:	d205      	bcs.n	8010cca <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8010cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010cc0:	b29a      	uxth	r2, r3
 8010cc2:	69fb      	ldr	r3, [r7, #28]
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	60da      	str	r2, [r3, #12]
 8010cc8:	e005      	b.n	8010cd6 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 8010cca:	231a      	movs	r3, #26
 8010ccc:	2218      	movs	r2, #24
 8010cce:	189b      	adds	r3, r3, r2
 8010cd0:	19db      	adds	r3, r3, r7
 8010cd2:	2201      	movs	r2, #1
 8010cd4:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8010cd6:	69fb      	ldr	r3, [r7, #28]
 8010cd8:	2200      	movs	r2, #0
 8010cda:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8010cdc:	69fb      	ldr	r3, [r7, #28]
 8010cde:	2200      	movs	r2, #0
 8010ce0:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8010ce2:	231a      	movs	r3, #26
 8010ce4:	2218      	movs	r2, #24
 8010ce6:	189b      	adds	r3, r3, r2
 8010ce8:	19db      	adds	r3, r3, r7
 8010cea:	781b      	ldrb	r3, [r3, #0]
}
 8010cec:	0018      	movs	r0, r3
 8010cee:	46bd      	mov	sp, r7
 8010cf0:	b00e      	add	sp, #56	@ 0x38
 8010cf2:	bdb0      	pop	{r4, r5, r7, pc}
 8010cf4:	0801b488 	.word	0x0801b488
 8010cf8:	40021000 	.word	0x40021000
 8010cfc:	003d0900 	.word	0x003d0900
 8010d00:	00f42400 	.word	0x00f42400
 8010d04:	0801b4ac 	.word	0x0801b4ac

08010d08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8010d08:	b580      	push	{r7, lr}
 8010d0a:	b082      	sub	sp, #8
 8010d0c:	af00      	add	r7, sp, #0
 8010d0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d14:	2201      	movs	r2, #1
 8010d16:	4013      	ands	r3, r2
 8010d18:	d00b      	beq.n	8010d32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010d1a:	687b      	ldr	r3, [r7, #4]
 8010d1c:	681b      	ldr	r3, [r3, #0]
 8010d1e:	685b      	ldr	r3, [r3, #4]
 8010d20:	4a4a      	ldr	r2, [pc, #296]	@ (8010e4c <UART_AdvFeatureConfig+0x144>)
 8010d22:	4013      	ands	r3, r2
 8010d24:	0019      	movs	r1, r3
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d2a:	687b      	ldr	r3, [r7, #4]
 8010d2c:	681b      	ldr	r3, [r3, #0]
 8010d2e:	430a      	orrs	r2, r1
 8010d30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8010d32:	687b      	ldr	r3, [r7, #4]
 8010d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d36:	2202      	movs	r2, #2
 8010d38:	4013      	ands	r3, r2
 8010d3a:	d00b      	beq.n	8010d54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010d3c:	687b      	ldr	r3, [r7, #4]
 8010d3e:	681b      	ldr	r3, [r3, #0]
 8010d40:	685b      	ldr	r3, [r3, #4]
 8010d42:	4a43      	ldr	r2, [pc, #268]	@ (8010e50 <UART_AdvFeatureConfig+0x148>)
 8010d44:	4013      	ands	r3, r2
 8010d46:	0019      	movs	r1, r3
 8010d48:	687b      	ldr	r3, [r7, #4]
 8010d4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8010d4c:	687b      	ldr	r3, [r7, #4]
 8010d4e:	681b      	ldr	r3, [r3, #0]
 8010d50:	430a      	orrs	r2, r1
 8010d52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8010d54:	687b      	ldr	r3, [r7, #4]
 8010d56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d58:	2204      	movs	r2, #4
 8010d5a:	4013      	ands	r3, r2
 8010d5c:	d00b      	beq.n	8010d76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	681b      	ldr	r3, [r3, #0]
 8010d62:	685b      	ldr	r3, [r3, #4]
 8010d64:	4a3b      	ldr	r2, [pc, #236]	@ (8010e54 <UART_AdvFeatureConfig+0x14c>)
 8010d66:	4013      	ands	r3, r2
 8010d68:	0019      	movs	r1, r3
 8010d6a:	687b      	ldr	r3, [r7, #4]
 8010d6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8010d6e:	687b      	ldr	r3, [r7, #4]
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	430a      	orrs	r2, r1
 8010d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8010d76:	687b      	ldr	r3, [r7, #4]
 8010d78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d7a:	2208      	movs	r2, #8
 8010d7c:	4013      	ands	r3, r2
 8010d7e:	d00b      	beq.n	8010d98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	681b      	ldr	r3, [r3, #0]
 8010d84:	685b      	ldr	r3, [r3, #4]
 8010d86:	4a34      	ldr	r2, [pc, #208]	@ (8010e58 <UART_AdvFeatureConfig+0x150>)
 8010d88:	4013      	ands	r3, r2
 8010d8a:	0019      	movs	r1, r3
 8010d8c:	687b      	ldr	r3, [r7, #4]
 8010d8e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	430a      	orrs	r2, r1
 8010d96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010d98:	687b      	ldr	r3, [r7, #4]
 8010d9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010d9c:	2210      	movs	r2, #16
 8010d9e:	4013      	ands	r3, r2
 8010da0:	d00b      	beq.n	8010dba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8010da2:	687b      	ldr	r3, [r7, #4]
 8010da4:	681b      	ldr	r3, [r3, #0]
 8010da6:	689b      	ldr	r3, [r3, #8]
 8010da8:	4a2c      	ldr	r2, [pc, #176]	@ (8010e5c <UART_AdvFeatureConfig+0x154>)
 8010daa:	4013      	ands	r3, r2
 8010dac:	0019      	movs	r1, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	681b      	ldr	r3, [r3, #0]
 8010db6:	430a      	orrs	r2, r1
 8010db8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010dbe:	2220      	movs	r2, #32
 8010dc0:	4013      	ands	r3, r2
 8010dc2:	d00b      	beq.n	8010ddc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	689b      	ldr	r3, [r3, #8]
 8010dca:	4a25      	ldr	r2, [pc, #148]	@ (8010e60 <UART_AdvFeatureConfig+0x158>)
 8010dcc:	4013      	ands	r3, r2
 8010dce:	0019      	movs	r1, r3
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8010dd4:	687b      	ldr	r3, [r7, #4]
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	430a      	orrs	r2, r1
 8010dda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010de0:	2240      	movs	r2, #64	@ 0x40
 8010de2:	4013      	ands	r3, r2
 8010de4:	d01d      	beq.n	8010e22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8010de6:	687b      	ldr	r3, [r7, #4]
 8010de8:	681b      	ldr	r3, [r3, #0]
 8010dea:	685b      	ldr	r3, [r3, #4]
 8010dec:	4a1d      	ldr	r2, [pc, #116]	@ (8010e64 <UART_AdvFeatureConfig+0x15c>)
 8010dee:	4013      	ands	r3, r2
 8010df0:	0019      	movs	r1, r3
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010df6:	687b      	ldr	r3, [r7, #4]
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	430a      	orrs	r2, r1
 8010dfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8010e02:	2380      	movs	r3, #128	@ 0x80
 8010e04:	035b      	lsls	r3, r3, #13
 8010e06:	429a      	cmp	r2, r3
 8010e08:	d10b      	bne.n	8010e22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8010e0a:	687b      	ldr	r3, [r7, #4]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	685b      	ldr	r3, [r3, #4]
 8010e10:	4a15      	ldr	r2, [pc, #84]	@ (8010e68 <UART_AdvFeatureConfig+0x160>)
 8010e12:	4013      	ands	r3, r2
 8010e14:	0019      	movs	r1, r3
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8010e1a:	687b      	ldr	r3, [r7, #4]
 8010e1c:	681b      	ldr	r3, [r3, #0]
 8010e1e:	430a      	orrs	r2, r1
 8010e20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010e26:	2280      	movs	r2, #128	@ 0x80
 8010e28:	4013      	ands	r3, r2
 8010e2a:	d00b      	beq.n	8010e44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010e2c:	687b      	ldr	r3, [r7, #4]
 8010e2e:	681b      	ldr	r3, [r3, #0]
 8010e30:	685b      	ldr	r3, [r3, #4]
 8010e32:	4a0e      	ldr	r2, [pc, #56]	@ (8010e6c <UART_AdvFeatureConfig+0x164>)
 8010e34:	4013      	ands	r3, r2
 8010e36:	0019      	movs	r1, r3
 8010e38:	687b      	ldr	r3, [r7, #4]
 8010e3a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8010e3c:	687b      	ldr	r3, [r7, #4]
 8010e3e:	681b      	ldr	r3, [r3, #0]
 8010e40:	430a      	orrs	r2, r1
 8010e42:	605a      	str	r2, [r3, #4]
  }
}
 8010e44:	46c0      	nop			@ (mov r8, r8)
 8010e46:	46bd      	mov	sp, r7
 8010e48:	b002      	add	sp, #8
 8010e4a:	bd80      	pop	{r7, pc}
 8010e4c:	fffdffff 	.word	0xfffdffff
 8010e50:	fffeffff 	.word	0xfffeffff
 8010e54:	fffbffff 	.word	0xfffbffff
 8010e58:	ffff7fff 	.word	0xffff7fff
 8010e5c:	ffffefff 	.word	0xffffefff
 8010e60:	ffffdfff 	.word	0xffffdfff
 8010e64:	ffefffff 	.word	0xffefffff
 8010e68:	ff9fffff 	.word	0xff9fffff
 8010e6c:	fff7ffff 	.word	0xfff7ffff

08010e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010e70:	b580      	push	{r7, lr}
 8010e72:	b092      	sub	sp, #72	@ 0x48
 8010e74:	af02      	add	r7, sp, #8
 8010e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	2284      	movs	r2, #132	@ 0x84
 8010e7c:	2100      	movs	r1, #0
 8010e7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010e80:	f7f8 f8f2 	bl	8009068 <HAL_GetTick>
 8010e84:	0003      	movs	r3, r0
 8010e86:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8010e88:	687b      	ldr	r3, [r7, #4]
 8010e8a:	681b      	ldr	r3, [r3, #0]
 8010e8c:	681b      	ldr	r3, [r3, #0]
 8010e8e:	2208      	movs	r2, #8
 8010e90:	4013      	ands	r3, r2
 8010e92:	2b08      	cmp	r3, #8
 8010e94:	d12c      	bne.n	8010ef0 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010e96:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010e98:	2280      	movs	r2, #128	@ 0x80
 8010e9a:	0391      	lsls	r1, r2, #14
 8010e9c:	6878      	ldr	r0, [r7, #4]
 8010e9e:	4a46      	ldr	r2, [pc, #280]	@ (8010fb8 <UART_CheckIdleState+0x148>)
 8010ea0:	9200      	str	r2, [sp, #0]
 8010ea2:	2200      	movs	r2, #0
 8010ea4:	f000 f88c 	bl	8010fc0 <UART_WaitOnFlagUntilTimeout>
 8010ea8:	1e03      	subs	r3, r0, #0
 8010eaa:	d021      	beq.n	8010ef0 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010eac:	f3ef 8310 	mrs	r3, PRIMASK
 8010eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8010eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8010eb4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010ebc:	f383 8810 	msr	PRIMASK, r3
}
 8010ec0:	46c0      	nop			@ (mov r8, r8)
 8010ec2:	687b      	ldr	r3, [r7, #4]
 8010ec4:	681b      	ldr	r3, [r3, #0]
 8010ec6:	681a      	ldr	r2, [r3, #0]
 8010ec8:	687b      	ldr	r3, [r7, #4]
 8010eca:	681b      	ldr	r3, [r3, #0]
 8010ecc:	2180      	movs	r1, #128	@ 0x80
 8010ece:	438a      	bics	r2, r1
 8010ed0:	601a      	str	r2, [r3, #0]
 8010ed2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010ed6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010ed8:	f383 8810 	msr	PRIMASK, r3
}
 8010edc:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8010ede:	687b      	ldr	r3, [r7, #4]
 8010ee0:	2220      	movs	r2, #32
 8010ee2:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8010ee4:	687b      	ldr	r3, [r7, #4]
 8010ee6:	2278      	movs	r2, #120	@ 0x78
 8010ee8:	2100      	movs	r1, #0
 8010eea:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010eec:	2303      	movs	r3, #3
 8010eee:	e05f      	b.n	8010fb0 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	681b      	ldr	r3, [r3, #0]
 8010ef4:	681b      	ldr	r3, [r3, #0]
 8010ef6:	2204      	movs	r2, #4
 8010ef8:	4013      	ands	r3, r2
 8010efa:	2b04      	cmp	r3, #4
 8010efc:	d146      	bne.n	8010f8c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010f00:	2280      	movs	r2, #128	@ 0x80
 8010f02:	03d1      	lsls	r1, r2, #15
 8010f04:	6878      	ldr	r0, [r7, #4]
 8010f06:	4a2c      	ldr	r2, [pc, #176]	@ (8010fb8 <UART_CheckIdleState+0x148>)
 8010f08:	9200      	str	r2, [sp, #0]
 8010f0a:	2200      	movs	r2, #0
 8010f0c:	f000 f858 	bl	8010fc0 <UART_WaitOnFlagUntilTimeout>
 8010f10:	1e03      	subs	r3, r0, #0
 8010f12:	d03b      	beq.n	8010f8c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f14:	f3ef 8310 	mrs	r3, PRIMASK
 8010f18:	60fb      	str	r3, [r7, #12]
  return(result);
 8010f1a:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010f1c:	637b      	str	r3, [r7, #52]	@ 0x34
 8010f1e:	2301      	movs	r3, #1
 8010f20:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f22:	693b      	ldr	r3, [r7, #16]
 8010f24:	f383 8810 	msr	PRIMASK, r3
}
 8010f28:	46c0      	nop			@ (mov r8, r8)
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	681b      	ldr	r3, [r3, #0]
 8010f2e:	681a      	ldr	r2, [r3, #0]
 8010f30:	687b      	ldr	r3, [r7, #4]
 8010f32:	681b      	ldr	r3, [r3, #0]
 8010f34:	4921      	ldr	r1, [pc, #132]	@ (8010fbc <UART_CheckIdleState+0x14c>)
 8010f36:	400a      	ands	r2, r1
 8010f38:	601a      	str	r2, [r3, #0]
 8010f3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010f3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f3e:	697b      	ldr	r3, [r7, #20]
 8010f40:	f383 8810 	msr	PRIMASK, r3
}
 8010f44:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8010f46:	f3ef 8310 	mrs	r3, PRIMASK
 8010f4a:	61bb      	str	r3, [r7, #24]
  return(result);
 8010f4c:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010f4e:	633b      	str	r3, [r7, #48]	@ 0x30
 8010f50:	2301      	movs	r3, #1
 8010f52:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f54:	69fb      	ldr	r3, [r7, #28]
 8010f56:	f383 8810 	msr	PRIMASK, r3
}
 8010f5a:	46c0      	nop			@ (mov r8, r8)
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	681b      	ldr	r3, [r3, #0]
 8010f60:	689a      	ldr	r2, [r3, #8]
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	681b      	ldr	r3, [r3, #0]
 8010f66:	2101      	movs	r1, #1
 8010f68:	438a      	bics	r2, r1
 8010f6a:	609a      	str	r2, [r3, #8]
 8010f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010f6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8010f70:	6a3b      	ldr	r3, [r7, #32]
 8010f72:	f383 8810 	msr	PRIMASK, r3
}
 8010f76:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8010f78:	687b      	ldr	r3, [r7, #4]
 8010f7a:	2280      	movs	r2, #128	@ 0x80
 8010f7c:	2120      	movs	r1, #32
 8010f7e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8010f80:	687b      	ldr	r3, [r7, #4]
 8010f82:	2278      	movs	r2, #120	@ 0x78
 8010f84:	2100      	movs	r1, #0
 8010f86:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010f88:	2303      	movs	r3, #3
 8010f8a:	e011      	b.n	8010fb0 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010f8c:	687b      	ldr	r3, [r7, #4]
 8010f8e:	2220      	movs	r2, #32
 8010f90:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8010f92:	687b      	ldr	r3, [r7, #4]
 8010f94:	2280      	movs	r2, #128	@ 0x80
 8010f96:	2120      	movs	r1, #32
 8010f98:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2200      	movs	r2, #0
 8010fa4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	2278      	movs	r2, #120	@ 0x78
 8010faa:	2100      	movs	r1, #0
 8010fac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8010fae:	2300      	movs	r3, #0
}
 8010fb0:	0018      	movs	r0, r3
 8010fb2:	46bd      	mov	sp, r7
 8010fb4:	b010      	add	sp, #64	@ 0x40
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	01ffffff 	.word	0x01ffffff
 8010fbc:	fffffedf 	.word	0xfffffedf

08010fc0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8010fc0:	b580      	push	{r7, lr}
 8010fc2:	b084      	sub	sp, #16
 8010fc4:	af00      	add	r7, sp, #0
 8010fc6:	60f8      	str	r0, [r7, #12]
 8010fc8:	60b9      	str	r1, [r7, #8]
 8010fca:	603b      	str	r3, [r7, #0]
 8010fcc:	1dfb      	adds	r3, r7, #7
 8010fce:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010fd0:	e04b      	b.n	801106a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8010fd2:	69bb      	ldr	r3, [r7, #24]
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	d048      	beq.n	801106a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8010fd8:	f7f8 f846 	bl	8009068 <HAL_GetTick>
 8010fdc:	0002      	movs	r2, r0
 8010fde:	683b      	ldr	r3, [r7, #0]
 8010fe0:	1ad3      	subs	r3, r2, r3
 8010fe2:	69ba      	ldr	r2, [r7, #24]
 8010fe4:	429a      	cmp	r2, r3
 8010fe6:	d302      	bcc.n	8010fee <UART_WaitOnFlagUntilTimeout+0x2e>
 8010fe8:	69bb      	ldr	r3, [r7, #24]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d101      	bne.n	8010ff2 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8010fee:	2303      	movs	r3, #3
 8010ff0:	e04b      	b.n	801108a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010ff2:	68fb      	ldr	r3, [r7, #12]
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	681b      	ldr	r3, [r3, #0]
 8010ff8:	2204      	movs	r2, #4
 8010ffa:	4013      	ands	r3, r2
 8010ffc:	d035      	beq.n	801106a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8010ffe:	68fb      	ldr	r3, [r7, #12]
 8011000:	681b      	ldr	r3, [r3, #0]
 8011002:	69db      	ldr	r3, [r3, #28]
 8011004:	2208      	movs	r2, #8
 8011006:	4013      	ands	r3, r2
 8011008:	2b08      	cmp	r3, #8
 801100a:	d111      	bne.n	8011030 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801100c:	68fb      	ldr	r3, [r7, #12]
 801100e:	681b      	ldr	r3, [r3, #0]
 8011010:	2208      	movs	r2, #8
 8011012:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8011014:	68fb      	ldr	r3, [r7, #12]
 8011016:	0018      	movs	r0, r3
 8011018:	f000 f900 	bl	801121c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 801101c:	68fb      	ldr	r3, [r7, #12]
 801101e:	2284      	movs	r2, #132	@ 0x84
 8011020:	2108      	movs	r1, #8
 8011022:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8011024:	68fb      	ldr	r3, [r7, #12]
 8011026:	2278      	movs	r2, #120	@ 0x78
 8011028:	2100      	movs	r1, #0
 801102a:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 801102c:	2301      	movs	r3, #1
 801102e:	e02c      	b.n	801108a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8011030:	68fb      	ldr	r3, [r7, #12]
 8011032:	681b      	ldr	r3, [r3, #0]
 8011034:	69da      	ldr	r2, [r3, #28]
 8011036:	2380      	movs	r3, #128	@ 0x80
 8011038:	011b      	lsls	r3, r3, #4
 801103a:	401a      	ands	r2, r3
 801103c:	2380      	movs	r3, #128	@ 0x80
 801103e:	011b      	lsls	r3, r3, #4
 8011040:	429a      	cmp	r2, r3
 8011042:	d112      	bne.n	801106a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8011044:	68fb      	ldr	r3, [r7, #12]
 8011046:	681b      	ldr	r3, [r3, #0]
 8011048:	2280      	movs	r2, #128	@ 0x80
 801104a:	0112      	lsls	r2, r2, #4
 801104c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801104e:	68fb      	ldr	r3, [r7, #12]
 8011050:	0018      	movs	r0, r3
 8011052:	f000 f8e3 	bl	801121c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	2284      	movs	r2, #132	@ 0x84
 801105a:	2120      	movs	r1, #32
 801105c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801105e:	68fb      	ldr	r3, [r7, #12]
 8011060:	2278      	movs	r2, #120	@ 0x78
 8011062:	2100      	movs	r1, #0
 8011064:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8011066:	2303      	movs	r3, #3
 8011068:	e00f      	b.n	801108a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801106a:	68fb      	ldr	r3, [r7, #12]
 801106c:	681b      	ldr	r3, [r3, #0]
 801106e:	69db      	ldr	r3, [r3, #28]
 8011070:	68ba      	ldr	r2, [r7, #8]
 8011072:	4013      	ands	r3, r2
 8011074:	68ba      	ldr	r2, [r7, #8]
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	425a      	negs	r2, r3
 801107a:	4153      	adcs	r3, r2
 801107c:	b2db      	uxtb	r3, r3
 801107e:	001a      	movs	r2, r3
 8011080:	1dfb      	adds	r3, r7, #7
 8011082:	781b      	ldrb	r3, [r3, #0]
 8011084:	429a      	cmp	r2, r3
 8011086:	d0a4      	beq.n	8010fd2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8011088:	2300      	movs	r3, #0
}
 801108a:	0018      	movs	r0, r3
 801108c:	46bd      	mov	sp, r7
 801108e:	b004      	add	sp, #16
 8011090:	bd80      	pop	{r7, pc}
	...

08011094 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8011094:	b580      	push	{r7, lr}
 8011096:	b090      	sub	sp, #64	@ 0x40
 8011098:	af00      	add	r7, sp, #0
 801109a:	60f8      	str	r0, [r7, #12]
 801109c:	60b9      	str	r1, [r7, #8]
 801109e:	1dbb      	adds	r3, r7, #6
 80110a0:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	68ba      	ldr	r2, [r7, #8]
 80110a6:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 80110a8:	68fb      	ldr	r3, [r7, #12]
 80110aa:	1dba      	adds	r2, r7, #6
 80110ac:	2158      	movs	r1, #88	@ 0x58
 80110ae:	8812      	ldrh	r2, [r2, #0]
 80110b0:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80110b2:	68fb      	ldr	r3, [r7, #12]
 80110b4:	2284      	movs	r2, #132	@ 0x84
 80110b6:	2100      	movs	r1, #0
 80110b8:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80110ba:	68fb      	ldr	r3, [r7, #12]
 80110bc:	2280      	movs	r2, #128	@ 0x80
 80110be:	2122      	movs	r1, #34	@ 0x22
 80110c0:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 80110c2:	68fb      	ldr	r3, [r7, #12]
 80110c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110c6:	2b00      	cmp	r3, #0
 80110c8:	d028      	beq.n	801111c <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110ce:	4a3e      	ldr	r2, [pc, #248]	@ (80111c8 <UART_Start_Receive_DMA+0x134>)
 80110d0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80110d2:	68fb      	ldr	r3, [r7, #12]
 80110d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110d6:	4a3d      	ldr	r2, [pc, #244]	@ (80111cc <UART_Start_Receive_DMA+0x138>)
 80110d8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110de:	4a3c      	ldr	r2, [pc, #240]	@ (80111d0 <UART_Start_Receive_DMA+0x13c>)
 80110e0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 80110e2:	68fb      	ldr	r3, [r7, #12]
 80110e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80110e6:	2200      	movs	r2, #0
 80110e8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 80110ea:	68fb      	ldr	r3, [r7, #12]
 80110ec:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	681b      	ldr	r3, [r3, #0]
 80110f2:	3324      	adds	r3, #36	@ 0x24
 80110f4:	0019      	movs	r1, r3
 80110f6:	68fb      	ldr	r3, [r7, #12]
 80110f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110fa:	001a      	movs	r2, r3
 80110fc:	1dbb      	adds	r3, r7, #6
 80110fe:	881b      	ldrh	r3, [r3, #0]
 8011100:	f7f8 fd12 	bl	8009b28 <HAL_DMA_Start_IT>
 8011104:	1e03      	subs	r3, r0, #0
 8011106:	d009      	beq.n	801111c <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8011108:	68fb      	ldr	r3, [r7, #12]
 801110a:	2284      	movs	r2, #132	@ 0x84
 801110c:	2110      	movs	r1, #16
 801110e:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8011110:	68fb      	ldr	r3, [r7, #12]
 8011112:	2280      	movs	r2, #128	@ 0x80
 8011114:	2120      	movs	r1, #32
 8011116:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8011118:	2301      	movs	r3, #1
 801111a:	e050      	b.n	80111be <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 801111c:	68fb      	ldr	r3, [r7, #12]
 801111e:	691b      	ldr	r3, [r3, #16]
 8011120:	2b00      	cmp	r3, #0
 8011122:	d019      	beq.n	8011158 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011124:	f3ef 8310 	mrs	r3, PRIMASK
 8011128:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 801112a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801112c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801112e:	2301      	movs	r3, #1
 8011130:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011132:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011134:	f383 8810 	msr	PRIMASK, r3
}
 8011138:	46c0      	nop			@ (mov r8, r8)
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	681a      	ldr	r2, [r3, #0]
 8011140:	68fb      	ldr	r3, [r7, #12]
 8011142:	681b      	ldr	r3, [r3, #0]
 8011144:	2180      	movs	r1, #128	@ 0x80
 8011146:	0049      	lsls	r1, r1, #1
 8011148:	430a      	orrs	r2, r1
 801114a:	601a      	str	r2, [r3, #0]
 801114c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801114e:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011150:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011152:	f383 8810 	msr	PRIMASK, r3
}
 8011156:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011158:	f3ef 8310 	mrs	r3, PRIMASK
 801115c:	613b      	str	r3, [r7, #16]
  return(result);
 801115e:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011160:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011162:	2301      	movs	r3, #1
 8011164:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011166:	697b      	ldr	r3, [r7, #20]
 8011168:	f383 8810 	msr	PRIMASK, r3
}
 801116c:	46c0      	nop			@ (mov r8, r8)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	681b      	ldr	r3, [r3, #0]
 8011172:	689a      	ldr	r2, [r3, #8]
 8011174:	68fb      	ldr	r3, [r7, #12]
 8011176:	681b      	ldr	r3, [r3, #0]
 8011178:	2101      	movs	r1, #1
 801117a:	430a      	orrs	r2, r1
 801117c:	609a      	str	r2, [r3, #8]
 801117e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011180:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011182:	69bb      	ldr	r3, [r7, #24]
 8011184:	f383 8810 	msr	PRIMASK, r3
}
 8011188:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801118a:	f3ef 8310 	mrs	r3, PRIMASK
 801118e:	61fb      	str	r3, [r7, #28]
  return(result);
 8011190:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011192:	637b      	str	r3, [r7, #52]	@ 0x34
 8011194:	2301      	movs	r3, #1
 8011196:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011198:	6a3b      	ldr	r3, [r7, #32]
 801119a:	f383 8810 	msr	PRIMASK, r3
}
 801119e:	46c0      	nop			@ (mov r8, r8)
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	681b      	ldr	r3, [r3, #0]
 80111a4:	689a      	ldr	r2, [r3, #8]
 80111a6:	68fb      	ldr	r3, [r7, #12]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	2140      	movs	r1, #64	@ 0x40
 80111ac:	430a      	orrs	r2, r1
 80111ae:	609a      	str	r2, [r3, #8]
 80111b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111b2:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111b6:	f383 8810 	msr	PRIMASK, r3
}
 80111ba:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 80111bc:	2300      	movs	r3, #0
}
 80111be:	0018      	movs	r0, r3
 80111c0:	46bd      	mov	sp, r7
 80111c2:	b010      	add	sp, #64	@ 0x40
 80111c4:	bd80      	pop	{r7, pc}
 80111c6:	46c0      	nop			@ (mov r8, r8)
 80111c8:	080113a5 	.word	0x080113a5
 80111cc:	080114d9 	.word	0x080114d9
 80111d0:	08011521 	.word	0x08011521

080111d4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80111d4:	b580      	push	{r7, lr}
 80111d6:	b086      	sub	sp, #24
 80111d8:	af00      	add	r7, sp, #0
 80111da:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80111dc:	f3ef 8310 	mrs	r3, PRIMASK
 80111e0:	60bb      	str	r3, [r7, #8]
  return(result);
 80111e2:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80111e4:	617b      	str	r3, [r7, #20]
 80111e6:	2301      	movs	r3, #1
 80111e8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80111ea:	68fb      	ldr	r3, [r7, #12]
 80111ec:	f383 8810 	msr	PRIMASK, r3
}
 80111f0:	46c0      	nop			@ (mov r8, r8)
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	681b      	ldr	r3, [r3, #0]
 80111f6:	681a      	ldr	r2, [r3, #0]
 80111f8:	687b      	ldr	r3, [r7, #4]
 80111fa:	681b      	ldr	r3, [r3, #0]
 80111fc:	21c0      	movs	r1, #192	@ 0xc0
 80111fe:	438a      	bics	r2, r1
 8011200:	601a      	str	r2, [r3, #0]
 8011202:	697b      	ldr	r3, [r7, #20]
 8011204:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011206:	693b      	ldr	r3, [r7, #16]
 8011208:	f383 8810 	msr	PRIMASK, r3
}
 801120c:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	2220      	movs	r2, #32
 8011212:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8011214:	46c0      	nop			@ (mov r8, r8)
 8011216:	46bd      	mov	sp, r7
 8011218:	b006      	add	sp, #24
 801121a:	bd80      	pop	{r7, pc}

0801121c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801121c:	b580      	push	{r7, lr}
 801121e:	b08e      	sub	sp, #56	@ 0x38
 8011220:	af00      	add	r7, sp, #0
 8011222:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011224:	f3ef 8310 	mrs	r3, PRIMASK
 8011228:	617b      	str	r3, [r7, #20]
  return(result);
 801122a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801122c:	637b      	str	r3, [r7, #52]	@ 0x34
 801122e:	2301      	movs	r3, #1
 8011230:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011232:	69bb      	ldr	r3, [r7, #24]
 8011234:	f383 8810 	msr	PRIMASK, r3
}
 8011238:	46c0      	nop			@ (mov r8, r8)
 801123a:	687b      	ldr	r3, [r7, #4]
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	681a      	ldr	r2, [r3, #0]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	4926      	ldr	r1, [pc, #152]	@ (80112e0 <UART_EndRxTransfer+0xc4>)
 8011246:	400a      	ands	r2, r1
 8011248:	601a      	str	r2, [r3, #0]
 801124a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801124c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801124e:	69fb      	ldr	r3, [r7, #28]
 8011250:	f383 8810 	msr	PRIMASK, r3
}
 8011254:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011256:	f3ef 8310 	mrs	r3, PRIMASK
 801125a:	623b      	str	r3, [r7, #32]
  return(result);
 801125c:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801125e:	633b      	str	r3, [r7, #48]	@ 0x30
 8011260:	2301      	movs	r3, #1
 8011262:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011266:	f383 8810 	msr	PRIMASK, r3
}
 801126a:	46c0      	nop			@ (mov r8, r8)
 801126c:	687b      	ldr	r3, [r7, #4]
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	689a      	ldr	r2, [r3, #8]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	681b      	ldr	r3, [r3, #0]
 8011276:	2101      	movs	r1, #1
 8011278:	438a      	bics	r2, r1
 801127a:	609a      	str	r2, [r3, #8]
 801127c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801127e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011280:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011282:	f383 8810 	msr	PRIMASK, r3
}
 8011286:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801128c:	2b01      	cmp	r3, #1
 801128e:	d118      	bne.n	80112c2 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011290:	f3ef 8310 	mrs	r3, PRIMASK
 8011294:	60bb      	str	r3, [r7, #8]
  return(result);
 8011296:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011298:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801129a:	2301      	movs	r3, #1
 801129c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801129e:	68fb      	ldr	r3, [r7, #12]
 80112a0:	f383 8810 	msr	PRIMASK, r3
}
 80112a4:	46c0      	nop			@ (mov r8, r8)
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	681b      	ldr	r3, [r3, #0]
 80112aa:	681a      	ldr	r2, [r3, #0]
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	681b      	ldr	r3, [r3, #0]
 80112b0:	2110      	movs	r1, #16
 80112b2:	438a      	bics	r2, r1
 80112b4:	601a      	str	r2, [r3, #0]
 80112b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80112b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80112ba:	693b      	ldr	r3, [r7, #16]
 80112bc:	f383 8810 	msr	PRIMASK, r3
}
 80112c0:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	2280      	movs	r2, #128	@ 0x80
 80112c6:	2120      	movs	r1, #32
 80112c8:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80112ca:	687b      	ldr	r3, [r7, #4]
 80112cc:	2200      	movs	r2, #0
 80112ce:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80112d0:	687b      	ldr	r3, [r7, #4]
 80112d2:	2200      	movs	r2, #0
 80112d4:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80112d6:	46c0      	nop			@ (mov r8, r8)
 80112d8:	46bd      	mov	sp, r7
 80112da:	b00e      	add	sp, #56	@ 0x38
 80112dc:	bd80      	pop	{r7, pc}
 80112de:	46c0      	nop			@ (mov r8, r8)
 80112e0:	fffffedf 	.word	0xfffffedf

080112e4 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80112e4:	b580      	push	{r7, lr}
 80112e6:	b08c      	sub	sp, #48	@ 0x30
 80112e8:	af00      	add	r7, sp, #0
 80112ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80112ec:	687b      	ldr	r3, [r7, #4]
 80112ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80112f0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	681b      	ldr	r3, [r3, #0]
 80112f8:	2220      	movs	r2, #32
 80112fa:	4013      	ands	r3, r2
 80112fc:	d135      	bne.n	801136a <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 80112fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011300:	2252      	movs	r2, #82	@ 0x52
 8011302:	2100      	movs	r1, #0
 8011304:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011306:	f3ef 8310 	mrs	r3, PRIMASK
 801130a:	60fb      	str	r3, [r7, #12]
  return(result);
 801130c:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 801130e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011310:	2301      	movs	r3, #1
 8011312:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011314:	693b      	ldr	r3, [r7, #16]
 8011316:	f383 8810 	msr	PRIMASK, r3
}
 801131a:	46c0      	nop			@ (mov r8, r8)
 801131c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801131e:	681b      	ldr	r3, [r3, #0]
 8011320:	689a      	ldr	r2, [r3, #8]
 8011322:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011324:	681b      	ldr	r3, [r3, #0]
 8011326:	2180      	movs	r1, #128	@ 0x80
 8011328:	438a      	bics	r2, r1
 801132a:	609a      	str	r2, [r3, #8]
 801132c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801132e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011330:	697b      	ldr	r3, [r7, #20]
 8011332:	f383 8810 	msr	PRIMASK, r3
}
 8011336:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8011338:	f3ef 8310 	mrs	r3, PRIMASK
 801133c:	61bb      	str	r3, [r7, #24]
  return(result);
 801133e:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8011340:	627b      	str	r3, [r7, #36]	@ 0x24
 8011342:	2301      	movs	r3, #1
 8011344:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011346:	69fb      	ldr	r3, [r7, #28]
 8011348:	f383 8810 	msr	PRIMASK, r3
}
 801134c:	46c0      	nop			@ (mov r8, r8)
 801134e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	681a      	ldr	r2, [r3, #0]
 8011354:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011356:	681b      	ldr	r3, [r3, #0]
 8011358:	2140      	movs	r1, #64	@ 0x40
 801135a:	430a      	orrs	r2, r1
 801135c:	601a      	str	r2, [r3, #0]
 801135e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011360:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011362:	6a3b      	ldr	r3, [r7, #32]
 8011364:	f383 8810 	msr	PRIMASK, r3
}
 8011368:	e006      	b.n	8011378 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 801136a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801136c:	228c      	movs	r2, #140	@ 0x8c
 801136e:	589b      	ldr	r3, [r3, r2]
 8011370:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011372:	0010      	movs	r0, r2
 8011374:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8011376:	46c0      	nop			@ (mov r8, r8)
 8011378:	46c0      	nop			@ (mov r8, r8)
 801137a:	46bd      	mov	sp, r7
 801137c:	b00c      	add	sp, #48	@ 0x30
 801137e:	bd80      	pop	{r7, pc}

08011380 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b084      	sub	sp, #16
 8011384:	af00      	add	r7, sp, #0
 8011386:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011388:	687b      	ldr	r3, [r7, #4]
 801138a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801138c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 801138e:	68fb      	ldr	r3, [r7, #12]
 8011390:	2288      	movs	r2, #136	@ 0x88
 8011392:	589b      	ldr	r3, [r3, r2]
 8011394:	68fa      	ldr	r2, [r7, #12]
 8011396:	0010      	movs	r0, r2
 8011398:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801139a:	46c0      	nop			@ (mov r8, r8)
 801139c:	46bd      	mov	sp, r7
 801139e:	b004      	add	sp, #16
 80113a0:	bd80      	pop	{r7, pc}
	...

080113a4 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80113a4:	b580      	push	{r7, lr}
 80113a6:	b094      	sub	sp, #80	@ 0x50
 80113a8:	af00      	add	r7, sp, #0
 80113aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80113b0:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 80113b2:	687b      	ldr	r3, [r7, #4]
 80113b4:	681b      	ldr	r3, [r3, #0]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	2220      	movs	r2, #32
 80113ba:	4013      	ands	r3, r2
 80113bc:	d16f      	bne.n	801149e <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 80113be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113c0:	225a      	movs	r2, #90	@ 0x5a
 80113c2:	2100      	movs	r1, #0
 80113c4:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113c6:	f3ef 8310 	mrs	r3, PRIMASK
 80113ca:	61bb      	str	r3, [r7, #24]
  return(result);
 80113cc:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80113ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80113d0:	2301      	movs	r3, #1
 80113d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113d4:	69fb      	ldr	r3, [r7, #28]
 80113d6:	f383 8810 	msr	PRIMASK, r3
}
 80113da:	46c0      	nop			@ (mov r8, r8)
 80113dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	681a      	ldr	r2, [r3, #0]
 80113e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80113e4:	681b      	ldr	r3, [r3, #0]
 80113e6:	493b      	ldr	r1, [pc, #236]	@ (80114d4 <UART_DMAReceiveCplt+0x130>)
 80113e8:	400a      	ands	r2, r1
 80113ea:	601a      	str	r2, [r3, #0]
 80113ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80113ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80113f0:	6a3b      	ldr	r3, [r7, #32]
 80113f2:	f383 8810 	msr	PRIMASK, r3
}
 80113f6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80113f8:	f3ef 8310 	mrs	r3, PRIMASK
 80113fc:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80113fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8011400:	647b      	str	r3, [r7, #68]	@ 0x44
 8011402:	2301      	movs	r3, #1
 8011404:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011406:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011408:	f383 8810 	msr	PRIMASK, r3
}
 801140c:	46c0      	nop			@ (mov r8, r8)
 801140e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	689a      	ldr	r2, [r3, #8]
 8011414:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2101      	movs	r1, #1
 801141a:	438a      	bics	r2, r1
 801141c:	609a      	str	r2, [r3, #8]
 801141e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011420:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011422:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011424:	f383 8810 	msr	PRIMASK, r3
}
 8011428:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801142a:	f3ef 8310 	mrs	r3, PRIMASK
 801142e:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8011430:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8011432:	643b      	str	r3, [r7, #64]	@ 0x40
 8011434:	2301      	movs	r3, #1
 8011436:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011438:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801143a:	f383 8810 	msr	PRIMASK, r3
}
 801143e:	46c0      	nop			@ (mov r8, r8)
 8011440:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011442:	681b      	ldr	r3, [r3, #0]
 8011444:	689a      	ldr	r2, [r3, #8]
 8011446:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	2140      	movs	r1, #64	@ 0x40
 801144c:	438a      	bics	r2, r1
 801144e:	609a      	str	r2, [r3, #8]
 8011450:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011452:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011454:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011456:	f383 8810 	msr	PRIMASK, r3
}
 801145a:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 801145c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801145e:	2280      	movs	r2, #128	@ 0x80
 8011460:	2120      	movs	r1, #32
 8011462:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8011464:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011466:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8011468:	2b01      	cmp	r3, #1
 801146a:	d118      	bne.n	801149e <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801146c:	f3ef 8310 	mrs	r3, PRIMASK
 8011470:	60fb      	str	r3, [r7, #12]
  return(result);
 8011472:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8011474:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011476:	2301      	movs	r3, #1
 8011478:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801147a:	693b      	ldr	r3, [r7, #16]
 801147c:	f383 8810 	msr	PRIMASK, r3
}
 8011480:	46c0      	nop			@ (mov r8, r8)
 8011482:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	681a      	ldr	r2, [r3, #0]
 8011488:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801148a:	681b      	ldr	r3, [r3, #0]
 801148c:	2110      	movs	r1, #16
 801148e:	438a      	bics	r2, r1
 8011490:	601a      	str	r2, [r3, #0]
 8011492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011494:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8011496:	697b      	ldr	r3, [r7, #20]
 8011498:	f383 8810 	msr	PRIMASK, r3
}
 801149c:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801149e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114a0:	2200      	movs	r2, #0
 80114a2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114a4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80114a8:	2b01      	cmp	r3, #1
 80114aa:	d109      	bne.n	80114c0 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 80114ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114ae:	22ac      	movs	r2, #172	@ 0xac
 80114b0:	589b      	ldr	r3, [r3, r2]
 80114b2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114b4:	2158      	movs	r1, #88	@ 0x58
 80114b6:	5a51      	ldrh	r1, [r2, r1]
 80114b8:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114ba:	0010      	movs	r0, r2
 80114bc:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80114be:	e005      	b.n	80114cc <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 80114c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80114c2:	2294      	movs	r2, #148	@ 0x94
 80114c4:	589b      	ldr	r3, [r3, r2]
 80114c6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80114c8:	0010      	movs	r0, r2
 80114ca:	4798      	blx	r3
}
 80114cc:	46c0      	nop			@ (mov r8, r8)
 80114ce:	46bd      	mov	sp, r7
 80114d0:	b014      	add	sp, #80	@ 0x50
 80114d2:	bd80      	pop	{r7, pc}
 80114d4:	fffffeff 	.word	0xfffffeff

080114d8 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80114d8:	b580      	push	{r7, lr}
 80114da:	b084      	sub	sp, #16
 80114dc:	af00      	add	r7, sp, #0
 80114de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80114e0:	687b      	ldr	r3, [r7, #4]
 80114e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80114e4:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 80114e6:	68fb      	ldr	r3, [r7, #12]
 80114e8:	2201      	movs	r2, #1
 80114ea:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80114ec:	68fb      	ldr	r3, [r7, #12]
 80114ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80114f0:	2b01      	cmp	r3, #1
 80114f2:	d10b      	bne.n	801150c <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 80114f4:	68fb      	ldr	r3, [r7, #12]
 80114f6:	22ac      	movs	r2, #172	@ 0xac
 80114f8:	589b      	ldr	r3, [r3, r2]
 80114fa:	68fa      	ldr	r2, [r7, #12]
 80114fc:	2158      	movs	r1, #88	@ 0x58
 80114fe:	5a52      	ldrh	r2, [r2, r1]
 8011500:	0852      	lsrs	r2, r2, #1
 8011502:	b291      	uxth	r1, r2
 8011504:	68fa      	ldr	r2, [r7, #12]
 8011506:	0010      	movs	r0, r2
 8011508:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 801150a:	e005      	b.n	8011518 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	2290      	movs	r2, #144	@ 0x90
 8011510:	589b      	ldr	r3, [r3, r2]
 8011512:	68fa      	ldr	r2, [r7, #12]
 8011514:	0010      	movs	r0, r2
 8011516:	4798      	blx	r3
}
 8011518:	46c0      	nop			@ (mov r8, r8)
 801151a:	46bd      	mov	sp, r7
 801151c:	b004      	add	sp, #16
 801151e:	bd80      	pop	{r7, pc}

08011520 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b086      	sub	sp, #24
 8011524:	af00      	add	r7, sp, #0
 8011526:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8011528:	687b      	ldr	r3, [r7, #4]
 801152a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801152c:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 801152e:	697b      	ldr	r3, [r7, #20]
 8011530:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011532:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8011534:	697b      	ldr	r3, [r7, #20]
 8011536:	2280      	movs	r2, #128	@ 0x80
 8011538:	589b      	ldr	r3, [r3, r2]
 801153a:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 801153c:	697b      	ldr	r3, [r7, #20]
 801153e:	681b      	ldr	r3, [r3, #0]
 8011540:	689b      	ldr	r3, [r3, #8]
 8011542:	2280      	movs	r2, #128	@ 0x80
 8011544:	4013      	ands	r3, r2
 8011546:	2b80      	cmp	r3, #128	@ 0x80
 8011548:	d10a      	bne.n	8011560 <UART_DMAError+0x40>
 801154a:	693b      	ldr	r3, [r7, #16]
 801154c:	2b21      	cmp	r3, #33	@ 0x21
 801154e:	d107      	bne.n	8011560 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8011550:	697b      	ldr	r3, [r7, #20]
 8011552:	2252      	movs	r2, #82	@ 0x52
 8011554:	2100      	movs	r1, #0
 8011556:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8011558:	697b      	ldr	r3, [r7, #20]
 801155a:	0018      	movs	r0, r3
 801155c:	f7ff fe3a 	bl	80111d4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8011560:	697b      	ldr	r3, [r7, #20]
 8011562:	681b      	ldr	r3, [r3, #0]
 8011564:	689b      	ldr	r3, [r3, #8]
 8011566:	2240      	movs	r2, #64	@ 0x40
 8011568:	4013      	ands	r3, r2
 801156a:	2b40      	cmp	r3, #64	@ 0x40
 801156c:	d10a      	bne.n	8011584 <UART_DMAError+0x64>
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	2b22      	cmp	r3, #34	@ 0x22
 8011572:	d107      	bne.n	8011584 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8011574:	697b      	ldr	r3, [r7, #20]
 8011576:	225a      	movs	r2, #90	@ 0x5a
 8011578:	2100      	movs	r1, #0
 801157a:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 801157c:	697b      	ldr	r3, [r7, #20]
 801157e:	0018      	movs	r0, r3
 8011580:	f7ff fe4c 	bl	801121c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8011584:	697b      	ldr	r3, [r7, #20]
 8011586:	2284      	movs	r2, #132	@ 0x84
 8011588:	589b      	ldr	r3, [r3, r2]
 801158a:	2210      	movs	r2, #16
 801158c:	431a      	orrs	r2, r3
 801158e:	697b      	ldr	r3, [r7, #20]
 8011590:	2184      	movs	r1, #132	@ 0x84
 8011592:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 8011594:	697b      	ldr	r3, [r7, #20]
 8011596:	2298      	movs	r2, #152	@ 0x98
 8011598:	589b      	ldr	r3, [r3, r2]
 801159a:	697a      	ldr	r2, [r7, #20]
 801159c:	0010      	movs	r0, r2
 801159e:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115a0:	46c0      	nop			@ (mov r8, r8)
 80115a2:	46bd      	mov	sp, r7
 80115a4:	b006      	add	sp, #24
 80115a6:	bd80      	pop	{r7, pc}

080115a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80115a8:	b580      	push	{r7, lr}
 80115aa:	b084      	sub	sp, #16
 80115ac:	af00      	add	r7, sp, #0
 80115ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80115b0:	687b      	ldr	r3, [r7, #4]
 80115b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80115b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80115b6:	68fb      	ldr	r3, [r7, #12]
 80115b8:	225a      	movs	r2, #90	@ 0x5a
 80115ba:	2100      	movs	r1, #0
 80115bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80115be:	68fb      	ldr	r3, [r7, #12]
 80115c0:	2252      	movs	r2, #82	@ 0x52
 80115c2:	2100      	movs	r1, #0
 80115c4:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 80115c6:	68fb      	ldr	r3, [r7, #12]
 80115c8:	2298      	movs	r2, #152	@ 0x98
 80115ca:	589b      	ldr	r3, [r3, r2]
 80115cc:	68fa      	ldr	r2, [r7, #12]
 80115ce:	0010      	movs	r0, r2
 80115d0:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80115d2:	46c0      	nop			@ (mov r8, r8)
 80115d4:	46bd      	mov	sp, r7
 80115d6:	b004      	add	sp, #16
 80115d8:	bd80      	pop	{r7, pc}

080115da <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80115da:	b580      	push	{r7, lr}
 80115dc:	b086      	sub	sp, #24
 80115de:	af00      	add	r7, sp, #0
 80115e0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80115e2:	f3ef 8310 	mrs	r3, PRIMASK
 80115e6:	60bb      	str	r3, [r7, #8]
  return(result);
 80115e8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80115ea:	617b      	str	r3, [r7, #20]
 80115ec:	2301      	movs	r3, #1
 80115ee:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80115f0:	68fb      	ldr	r3, [r7, #12]
 80115f2:	f383 8810 	msr	PRIMASK, r3
}
 80115f6:	46c0      	nop			@ (mov r8, r8)
 80115f8:	687b      	ldr	r3, [r7, #4]
 80115fa:	681b      	ldr	r3, [r3, #0]
 80115fc:	681a      	ldr	r2, [r3, #0]
 80115fe:	687b      	ldr	r3, [r7, #4]
 8011600:	681b      	ldr	r3, [r3, #0]
 8011602:	2140      	movs	r1, #64	@ 0x40
 8011604:	438a      	bics	r2, r1
 8011606:	601a      	str	r2, [r3, #0]
 8011608:	697b      	ldr	r3, [r7, #20]
 801160a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801160c:	693b      	ldr	r3, [r7, #16]
 801160e:	f383 8810 	msr	PRIMASK, r3
}
 8011612:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8011614:	687b      	ldr	r3, [r7, #4]
 8011616:	2220      	movs	r2, #32
 8011618:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	2200      	movs	r2, #0
 801161e:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 8011620:	687b      	ldr	r3, [r7, #4]
 8011622:	228c      	movs	r2, #140	@ 0x8c
 8011624:	589b      	ldr	r3, [r3, r2]
 8011626:	687a      	ldr	r2, [r7, #4]
 8011628:	0010      	movs	r0, r2
 801162a:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801162c:	46c0      	nop			@ (mov r8, r8)
 801162e:	46bd      	mov	sp, r7
 8011630:	b006      	add	sp, #24
 8011632:	bd80      	pop	{r7, pc}

08011634 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	b082      	sub	sp, #8
 8011638:	af00      	add	r7, sp, #0
 801163a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801163c:	46c0      	nop			@ (mov r8, r8)
 801163e:	46bd      	mov	sp, r7
 8011640:	b002      	add	sp, #8
 8011642:	bd80      	pop	{r7, pc}

08011644 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8011644:	b580      	push	{r7, lr}
 8011646:	b084      	sub	sp, #16
 8011648:	af00      	add	r7, sp, #0
 801164a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	2244      	movs	r2, #68	@ 0x44
 8011650:	2100      	movs	r1, #0
 8011652:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011654:	4b05      	ldr	r3, [pc, #20]	@ (801166c <USB_EnableGlobalInt+0x28>)
 8011656:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8011658:	68fb      	ldr	r3, [r7, #12]
 801165a:	b299      	uxth	r1, r3
 801165c:	687b      	ldr	r3, [r7, #4]
 801165e:	2240      	movs	r2, #64	@ 0x40
 8011660:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011662:	2300      	movs	r3, #0
}
 8011664:	0018      	movs	r0, r3
 8011666:	46bd      	mov	sp, r7
 8011668:	b004      	add	sp, #16
 801166a:	bd80      	pop	{r7, pc}
 801166c:	0000bf80 	.word	0x0000bf80

08011670 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b084      	sub	sp, #16
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8011678:	4b09      	ldr	r3, [pc, #36]	@ (80116a0 <USB_DisableGlobalInt+0x30>)
 801167a:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	2240      	movs	r2, #64	@ 0x40
 8011680:	5a9b      	ldrh	r3, [r3, r2]
 8011682:	b29b      	uxth	r3, r3
 8011684:	68fa      	ldr	r2, [r7, #12]
 8011686:	b292      	uxth	r2, r2
 8011688:	43d2      	mvns	r2, r2
 801168a:	b292      	uxth	r2, r2
 801168c:	4013      	ands	r3, r2
 801168e:	b299      	uxth	r1, r3
 8011690:	687b      	ldr	r3, [r7, #4]
 8011692:	2240      	movs	r2, #64	@ 0x40
 8011694:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011696:	2300      	movs	r3, #0
}
 8011698:	0018      	movs	r0, r3
 801169a:	46bd      	mov	sp, r7
 801169c:	b004      	add	sp, #16
 801169e:	bd80      	pop	{r7, pc}
 80116a0:	0000bf80 	.word	0x0000bf80

080116a4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80116a4:	b084      	sub	sp, #16
 80116a6:	b590      	push	{r4, r7, lr}
 80116a8:	b083      	sub	sp, #12
 80116aa:	af00      	add	r7, sp, #0
 80116ac:	6078      	str	r0, [r7, #4]
 80116ae:	2004      	movs	r0, #4
 80116b0:	2410      	movs	r4, #16
 80116b2:	1900      	adds	r0, r0, r4
 80116b4:	2408      	movs	r4, #8
 80116b6:	46a4      	mov	ip, r4
 80116b8:	44bc      	add	ip, r7
 80116ba:	4460      	add	r0, ip
 80116bc:	6001      	str	r1, [r0, #0]
 80116be:	6042      	str	r2, [r0, #4]
 80116c0:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	2240      	movs	r2, #64	@ 0x40
 80116c6:	2101      	movs	r1, #1
 80116c8:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	2240      	movs	r2, #64	@ 0x40
 80116ce:	2100      	movs	r1, #0
 80116d0:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80116d2:	687b      	ldr	r3, [r7, #4]
 80116d4:	2244      	movs	r2, #68	@ 0x44
 80116d6:	2100      	movs	r1, #0
 80116d8:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80116da:	687b      	ldr	r3, [r7, #4]
 80116dc:	2250      	movs	r2, #80	@ 0x50
 80116de:	2100      	movs	r1, #0
 80116e0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80116e2:	2300      	movs	r3, #0
}
 80116e4:	0018      	movs	r0, r3
 80116e6:	46bd      	mov	sp, r7
 80116e8:	b003      	add	sp, #12
 80116ea:	bc90      	pop	{r4, r7}
 80116ec:	bc08      	pop	{r3}
 80116ee:	b004      	add	sp, #16
 80116f0:	4718      	bx	r3
	...

080116f4 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80116f4:	b580      	push	{r7, lr}
 80116f6:	b09c      	sub	sp, #112	@ 0x70
 80116f8:	af00      	add	r7, sp, #0
 80116fa:	6078      	str	r0, [r7, #4]
 80116fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80116fe:	236f      	movs	r3, #111	@ 0x6f
 8011700:	18fb      	adds	r3, r7, r3
 8011702:	2200      	movs	r2, #0
 8011704:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8011706:	687a      	ldr	r2, [r7, #4]
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	781b      	ldrb	r3, [r3, #0]
 801170c:	009b      	lsls	r3, r3, #2
 801170e:	18d3      	adds	r3, r2, r3
 8011710:	881b      	ldrh	r3, [r3, #0]
 8011712:	b29a      	uxth	r2, r3
 8011714:	236c      	movs	r3, #108	@ 0x6c
 8011716:	18fb      	adds	r3, r7, r3
 8011718:	49a3      	ldr	r1, [pc, #652]	@ (80119a8 <USB_ActivateEndpoint+0x2b4>)
 801171a:	400a      	ands	r2, r1
 801171c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801171e:	683b      	ldr	r3, [r7, #0]
 8011720:	78db      	ldrb	r3, [r3, #3]
 8011722:	2b03      	cmp	r3, #3
 8011724:	d017      	beq.n	8011756 <USB_ActivateEndpoint+0x62>
 8011726:	dc28      	bgt.n	801177a <USB_ActivateEndpoint+0x86>
 8011728:	2b02      	cmp	r3, #2
 801172a:	d00e      	beq.n	801174a <USB_ActivateEndpoint+0x56>
 801172c:	dc25      	bgt.n	801177a <USB_ActivateEndpoint+0x86>
 801172e:	2b00      	cmp	r3, #0
 8011730:	d002      	beq.n	8011738 <USB_ActivateEndpoint+0x44>
 8011732:	2b01      	cmp	r3, #1
 8011734:	d018      	beq.n	8011768 <USB_ActivateEndpoint+0x74>
 8011736:	e020      	b.n	801177a <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8011738:	226c      	movs	r2, #108	@ 0x6c
 801173a:	18bb      	adds	r3, r7, r2
 801173c:	18ba      	adds	r2, r7, r2
 801173e:	8812      	ldrh	r2, [r2, #0]
 8011740:	2180      	movs	r1, #128	@ 0x80
 8011742:	0089      	lsls	r1, r1, #2
 8011744:	430a      	orrs	r2, r1
 8011746:	801a      	strh	r2, [r3, #0]
      break;
 8011748:	e01c      	b.n	8011784 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 801174a:	226c      	movs	r2, #108	@ 0x6c
 801174c:	18bb      	adds	r3, r7, r2
 801174e:	18ba      	adds	r2, r7, r2
 8011750:	8812      	ldrh	r2, [r2, #0]
 8011752:	801a      	strh	r2, [r3, #0]
      break;
 8011754:	e016      	b.n	8011784 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8011756:	226c      	movs	r2, #108	@ 0x6c
 8011758:	18bb      	adds	r3, r7, r2
 801175a:	18ba      	adds	r2, r7, r2
 801175c:	8812      	ldrh	r2, [r2, #0]
 801175e:	21c0      	movs	r1, #192	@ 0xc0
 8011760:	00c9      	lsls	r1, r1, #3
 8011762:	430a      	orrs	r2, r1
 8011764:	801a      	strh	r2, [r3, #0]
      break;
 8011766:	e00d      	b.n	8011784 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8011768:	226c      	movs	r2, #108	@ 0x6c
 801176a:	18bb      	adds	r3, r7, r2
 801176c:	18ba      	adds	r2, r7, r2
 801176e:	8812      	ldrh	r2, [r2, #0]
 8011770:	2180      	movs	r1, #128	@ 0x80
 8011772:	00c9      	lsls	r1, r1, #3
 8011774:	430a      	orrs	r2, r1
 8011776:	801a      	strh	r2, [r3, #0]
      break;
 8011778:	e004      	b.n	8011784 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 801177a:	236f      	movs	r3, #111	@ 0x6f
 801177c:	18fb      	adds	r3, r7, r3
 801177e:	2201      	movs	r2, #1
 8011780:	701a      	strb	r2, [r3, #0]
      break;
 8011782:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8011784:	687a      	ldr	r2, [r7, #4]
 8011786:	683b      	ldr	r3, [r7, #0]
 8011788:	781b      	ldrb	r3, [r3, #0]
 801178a:	009b      	lsls	r3, r3, #2
 801178c:	18d3      	adds	r3, r2, r3
 801178e:	226c      	movs	r2, #108	@ 0x6c
 8011790:	18ba      	adds	r2, r7, r2
 8011792:	8812      	ldrh	r2, [r2, #0]
 8011794:	4985      	ldr	r1, [pc, #532]	@ (80119ac <USB_ActivateEndpoint+0x2b8>)
 8011796:	430a      	orrs	r2, r1
 8011798:	b292      	uxth	r2, r2
 801179a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801179c:	687a      	ldr	r2, [r7, #4]
 801179e:	683b      	ldr	r3, [r7, #0]
 80117a0:	781b      	ldrb	r3, [r3, #0]
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	18d3      	adds	r3, r2, r3
 80117a6:	881b      	ldrh	r3, [r3, #0]
 80117a8:	b29b      	uxth	r3, r3
 80117aa:	b21b      	sxth	r3, r3
 80117ac:	4a80      	ldr	r2, [pc, #512]	@ (80119b0 <USB_ActivateEndpoint+0x2bc>)
 80117ae:	4013      	ands	r3, r2
 80117b0:	b21a      	sxth	r2, r3
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	781b      	ldrb	r3, [r3, #0]
 80117b6:	b21b      	sxth	r3, r3
 80117b8:	4313      	orrs	r3, r2
 80117ba:	b21a      	sxth	r2, r3
 80117bc:	2166      	movs	r1, #102	@ 0x66
 80117be:	187b      	adds	r3, r7, r1
 80117c0:	801a      	strh	r2, [r3, #0]
 80117c2:	687a      	ldr	r2, [r7, #4]
 80117c4:	683b      	ldr	r3, [r7, #0]
 80117c6:	781b      	ldrb	r3, [r3, #0]
 80117c8:	009b      	lsls	r3, r3, #2
 80117ca:	18d3      	adds	r3, r2, r3
 80117cc:	187a      	adds	r2, r7, r1
 80117ce:	8812      	ldrh	r2, [r2, #0]
 80117d0:	4976      	ldr	r1, [pc, #472]	@ (80119ac <USB_ActivateEndpoint+0x2b8>)
 80117d2:	430a      	orrs	r2, r1
 80117d4:	b292      	uxth	r2, r2
 80117d6:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 80117d8:	683b      	ldr	r3, [r7, #0]
 80117da:	7b1b      	ldrb	r3, [r3, #12]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	d000      	beq.n	80117e2 <USB_ActivateEndpoint+0xee>
 80117e0:	e178      	b.n	8011ad4 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 80117e2:	683b      	ldr	r3, [r7, #0]
 80117e4:	785b      	ldrb	r3, [r3, #1]
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d100      	bne.n	80117ec <USB_ActivateEndpoint+0xf8>
 80117ea:	e07a      	b.n	80118e2 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80117ec:	687b      	ldr	r3, [r7, #4]
 80117ee:	61bb      	str	r3, [r7, #24]
 80117f0:	687b      	ldr	r3, [r7, #4]
 80117f2:	2250      	movs	r2, #80	@ 0x50
 80117f4:	5a9b      	ldrh	r3, [r3, r2]
 80117f6:	b29b      	uxth	r3, r3
 80117f8:	001a      	movs	r2, r3
 80117fa:	69bb      	ldr	r3, [r7, #24]
 80117fc:	189b      	adds	r3, r3, r2
 80117fe:	61bb      	str	r3, [r7, #24]
 8011800:	683b      	ldr	r3, [r7, #0]
 8011802:	781b      	ldrb	r3, [r3, #0]
 8011804:	00da      	lsls	r2, r3, #3
 8011806:	69bb      	ldr	r3, [r7, #24]
 8011808:	18d3      	adds	r3, r2, r3
 801180a:	2280      	movs	r2, #128	@ 0x80
 801180c:	00d2      	lsls	r2, r2, #3
 801180e:	4694      	mov	ip, r2
 8011810:	4463      	add	r3, ip
 8011812:	617b      	str	r3, [r7, #20]
 8011814:	683b      	ldr	r3, [r7, #0]
 8011816:	88db      	ldrh	r3, [r3, #6]
 8011818:	085b      	lsrs	r3, r3, #1
 801181a:	b29b      	uxth	r3, r3
 801181c:	18db      	adds	r3, r3, r3
 801181e:	b29a      	uxth	r2, r3
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011824:	687a      	ldr	r2, [r7, #4]
 8011826:	683b      	ldr	r3, [r7, #0]
 8011828:	781b      	ldrb	r3, [r3, #0]
 801182a:	009b      	lsls	r3, r3, #2
 801182c:	18d2      	adds	r2, r2, r3
 801182e:	2112      	movs	r1, #18
 8011830:	187b      	adds	r3, r7, r1
 8011832:	8812      	ldrh	r2, [r2, #0]
 8011834:	801a      	strh	r2, [r3, #0]
 8011836:	187b      	adds	r3, r7, r1
 8011838:	881b      	ldrh	r3, [r3, #0]
 801183a:	2240      	movs	r2, #64	@ 0x40
 801183c:	4013      	ands	r3, r2
 801183e:	d016      	beq.n	801186e <USB_ActivateEndpoint+0x17a>
 8011840:	687a      	ldr	r2, [r7, #4]
 8011842:	683b      	ldr	r3, [r7, #0]
 8011844:	781b      	ldrb	r3, [r3, #0]
 8011846:	009b      	lsls	r3, r3, #2
 8011848:	18d3      	adds	r3, r2, r3
 801184a:	881b      	ldrh	r3, [r3, #0]
 801184c:	b29a      	uxth	r2, r3
 801184e:	2010      	movs	r0, #16
 8011850:	183b      	adds	r3, r7, r0
 8011852:	4957      	ldr	r1, [pc, #348]	@ (80119b0 <USB_ActivateEndpoint+0x2bc>)
 8011854:	400a      	ands	r2, r1
 8011856:	801a      	strh	r2, [r3, #0]
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	683b      	ldr	r3, [r7, #0]
 801185c:	781b      	ldrb	r3, [r3, #0]
 801185e:	009b      	lsls	r3, r3, #2
 8011860:	18d3      	adds	r3, r2, r3
 8011862:	183a      	adds	r2, r7, r0
 8011864:	8812      	ldrh	r2, [r2, #0]
 8011866:	4953      	ldr	r1, [pc, #332]	@ (80119b4 <USB_ActivateEndpoint+0x2c0>)
 8011868:	430a      	orrs	r2, r1
 801186a:	b292      	uxth	r2, r2
 801186c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801186e:	683b      	ldr	r3, [r7, #0]
 8011870:	78db      	ldrb	r3, [r3, #3]
 8011872:	2b01      	cmp	r3, #1
 8011874:	d01d      	beq.n	80118b2 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011876:	687a      	ldr	r2, [r7, #4]
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	781b      	ldrb	r3, [r3, #0]
 801187c:	009b      	lsls	r3, r3, #2
 801187e:	18d3      	adds	r3, r2, r3
 8011880:	881b      	ldrh	r3, [r3, #0]
 8011882:	b29a      	uxth	r2, r3
 8011884:	200c      	movs	r0, #12
 8011886:	183b      	adds	r3, r7, r0
 8011888:	494b      	ldr	r1, [pc, #300]	@ (80119b8 <USB_ActivateEndpoint+0x2c4>)
 801188a:	400a      	ands	r2, r1
 801188c:	801a      	strh	r2, [r3, #0]
 801188e:	183b      	adds	r3, r7, r0
 8011890:	183a      	adds	r2, r7, r0
 8011892:	8812      	ldrh	r2, [r2, #0]
 8011894:	2120      	movs	r1, #32
 8011896:	404a      	eors	r2, r1
 8011898:	801a      	strh	r2, [r3, #0]
 801189a:	687a      	ldr	r2, [r7, #4]
 801189c:	683b      	ldr	r3, [r7, #0]
 801189e:	781b      	ldrb	r3, [r3, #0]
 80118a0:	009b      	lsls	r3, r3, #2
 80118a2:	18d3      	adds	r3, r2, r3
 80118a4:	183a      	adds	r2, r7, r0
 80118a6:	8812      	ldrh	r2, [r2, #0]
 80118a8:	4940      	ldr	r1, [pc, #256]	@ (80119ac <USB_ActivateEndpoint+0x2b8>)
 80118aa:	430a      	orrs	r2, r1
 80118ac:	b292      	uxth	r2, r2
 80118ae:	801a      	strh	r2, [r3, #0]
 80118b0:	e2b4      	b.n	8011e1c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80118b2:	687a      	ldr	r2, [r7, #4]
 80118b4:	683b      	ldr	r3, [r7, #0]
 80118b6:	781b      	ldrb	r3, [r3, #0]
 80118b8:	009b      	lsls	r3, r3, #2
 80118ba:	18d3      	adds	r3, r2, r3
 80118bc:	881b      	ldrh	r3, [r3, #0]
 80118be:	b29a      	uxth	r2, r3
 80118c0:	200e      	movs	r0, #14
 80118c2:	183b      	adds	r3, r7, r0
 80118c4:	493c      	ldr	r1, [pc, #240]	@ (80119b8 <USB_ActivateEndpoint+0x2c4>)
 80118c6:	400a      	ands	r2, r1
 80118c8:	801a      	strh	r2, [r3, #0]
 80118ca:	687a      	ldr	r2, [r7, #4]
 80118cc:	683b      	ldr	r3, [r7, #0]
 80118ce:	781b      	ldrb	r3, [r3, #0]
 80118d0:	009b      	lsls	r3, r3, #2
 80118d2:	18d3      	adds	r3, r2, r3
 80118d4:	183a      	adds	r2, r7, r0
 80118d6:	8812      	ldrh	r2, [r2, #0]
 80118d8:	4934      	ldr	r1, [pc, #208]	@ (80119ac <USB_ActivateEndpoint+0x2b8>)
 80118da:	430a      	orrs	r2, r1
 80118dc:	b292      	uxth	r2, r2
 80118de:	801a      	strh	r2, [r3, #0]
 80118e0:	e29c      	b.n	8011e1c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	633b      	str	r3, [r7, #48]	@ 0x30
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2250      	movs	r2, #80	@ 0x50
 80118ea:	5a9b      	ldrh	r3, [r3, r2]
 80118ec:	b29b      	uxth	r3, r3
 80118ee:	001a      	movs	r2, r3
 80118f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118f2:	189b      	adds	r3, r3, r2
 80118f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	781b      	ldrb	r3, [r3, #0]
 80118fa:	00da      	lsls	r2, r3, #3
 80118fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80118fe:	18d3      	adds	r3, r2, r3
 8011900:	4a2e      	ldr	r2, [pc, #184]	@ (80119bc <USB_ActivateEndpoint+0x2c8>)
 8011902:	4694      	mov	ip, r2
 8011904:	4463      	add	r3, ip
 8011906:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011908:	683b      	ldr	r3, [r7, #0]
 801190a:	88db      	ldrh	r3, [r3, #6]
 801190c:	085b      	lsrs	r3, r3, #1
 801190e:	b29b      	uxth	r3, r3
 8011910:	18db      	adds	r3, r3, r3
 8011912:	b29a      	uxth	r2, r3
 8011914:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011916:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801191c:	687b      	ldr	r3, [r7, #4]
 801191e:	2250      	movs	r2, #80	@ 0x50
 8011920:	5a9b      	ldrh	r3, [r3, r2]
 8011922:	b29b      	uxth	r3, r3
 8011924:	001a      	movs	r2, r3
 8011926:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011928:	189b      	adds	r3, r3, r2
 801192a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801192c:	683b      	ldr	r3, [r7, #0]
 801192e:	781b      	ldrb	r3, [r3, #0]
 8011930:	00da      	lsls	r2, r3, #3
 8011932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011934:	18d3      	adds	r3, r2, r3
 8011936:	4a22      	ldr	r2, [pc, #136]	@ (80119c0 <USB_ActivateEndpoint+0x2cc>)
 8011938:	4694      	mov	ip, r2
 801193a:	4463      	add	r3, ip
 801193c:	627b      	str	r3, [r7, #36]	@ 0x24
 801193e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011940:	881b      	ldrh	r3, [r3, #0]
 8011942:	b29b      	uxth	r3, r3
 8011944:	059b      	lsls	r3, r3, #22
 8011946:	0d9b      	lsrs	r3, r3, #22
 8011948:	b29a      	uxth	r2, r3
 801194a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801194c:	801a      	strh	r2, [r3, #0]
 801194e:	683b      	ldr	r3, [r7, #0]
 8011950:	691b      	ldr	r3, [r3, #16]
 8011952:	2b3e      	cmp	r3, #62	@ 0x3e
 8011954:	d91a      	bls.n	801198c <USB_ActivateEndpoint+0x298>
 8011956:	683b      	ldr	r3, [r7, #0]
 8011958:	691b      	ldr	r3, [r3, #16]
 801195a:	095b      	lsrs	r3, r3, #5
 801195c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801195e:	683b      	ldr	r3, [r7, #0]
 8011960:	691b      	ldr	r3, [r3, #16]
 8011962:	221f      	movs	r2, #31
 8011964:	4013      	ands	r3, r2
 8011966:	d102      	bne.n	801196e <USB_ActivateEndpoint+0x27a>
 8011968:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801196a:	3b01      	subs	r3, #1
 801196c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801196e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011970:	881b      	ldrh	r3, [r3, #0]
 8011972:	b29a      	uxth	r2, r3
 8011974:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011976:	b29b      	uxth	r3, r3
 8011978:	029b      	lsls	r3, r3, #10
 801197a:	b29b      	uxth	r3, r3
 801197c:	4313      	orrs	r3, r2
 801197e:	b29b      	uxth	r3, r3
 8011980:	4a10      	ldr	r2, [pc, #64]	@ (80119c4 <USB_ActivateEndpoint+0x2d0>)
 8011982:	4313      	orrs	r3, r2
 8011984:	b29a      	uxth	r2, r3
 8011986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011988:	801a      	strh	r2, [r3, #0]
 801198a:	e034      	b.n	80119f6 <USB_ActivateEndpoint+0x302>
 801198c:	683b      	ldr	r3, [r7, #0]
 801198e:	691b      	ldr	r3, [r3, #16]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d119      	bne.n	80119c8 <USB_ActivateEndpoint+0x2d4>
 8011994:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011996:	881b      	ldrh	r3, [r3, #0]
 8011998:	b29b      	uxth	r3, r3
 801199a:	4a0a      	ldr	r2, [pc, #40]	@ (80119c4 <USB_ActivateEndpoint+0x2d0>)
 801199c:	4313      	orrs	r3, r2
 801199e:	b29a      	uxth	r2, r3
 80119a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119a2:	801a      	strh	r2, [r3, #0]
 80119a4:	e027      	b.n	80119f6 <USB_ActivateEndpoint+0x302>
 80119a6:	46c0      	nop			@ (mov r8, r8)
 80119a8:	ffff898f 	.word	0xffff898f
 80119ac:	ffff8080 	.word	0xffff8080
 80119b0:	ffff8f8f 	.word	0xffff8f8f
 80119b4:	ffff80c0 	.word	0xffff80c0
 80119b8:	ffff8fbf 	.word	0xffff8fbf
 80119bc:	00000404 	.word	0x00000404
 80119c0:	00000406 	.word	0x00000406
 80119c4:	ffff8000 	.word	0xffff8000
 80119c8:	683b      	ldr	r3, [r7, #0]
 80119ca:	691b      	ldr	r3, [r3, #16]
 80119cc:	085b      	lsrs	r3, r3, #1
 80119ce:	66bb      	str	r3, [r7, #104]	@ 0x68
 80119d0:	683b      	ldr	r3, [r7, #0]
 80119d2:	691b      	ldr	r3, [r3, #16]
 80119d4:	2201      	movs	r2, #1
 80119d6:	4013      	ands	r3, r2
 80119d8:	d002      	beq.n	80119e0 <USB_ActivateEndpoint+0x2ec>
 80119da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80119dc:	3301      	adds	r3, #1
 80119de:	66bb      	str	r3, [r7, #104]	@ 0x68
 80119e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119e2:	881b      	ldrh	r3, [r3, #0]
 80119e4:	b29a      	uxth	r2, r3
 80119e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80119e8:	b29b      	uxth	r3, r3
 80119ea:	029b      	lsls	r3, r3, #10
 80119ec:	b29b      	uxth	r3, r3
 80119ee:	4313      	orrs	r3, r2
 80119f0:	b29a      	uxth	r2, r3
 80119f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80119f4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80119f6:	687a      	ldr	r2, [r7, #4]
 80119f8:	683b      	ldr	r3, [r7, #0]
 80119fa:	781b      	ldrb	r3, [r3, #0]
 80119fc:	009b      	lsls	r3, r3, #2
 80119fe:	18d2      	adds	r2, r2, r3
 8011a00:	2122      	movs	r1, #34	@ 0x22
 8011a02:	187b      	adds	r3, r7, r1
 8011a04:	8812      	ldrh	r2, [r2, #0]
 8011a06:	801a      	strh	r2, [r3, #0]
 8011a08:	187b      	adds	r3, r7, r1
 8011a0a:	881a      	ldrh	r2, [r3, #0]
 8011a0c:	2380      	movs	r3, #128	@ 0x80
 8011a0e:	01db      	lsls	r3, r3, #7
 8011a10:	4013      	ands	r3, r2
 8011a12:	d016      	beq.n	8011a42 <USB_ActivateEndpoint+0x34e>
 8011a14:	687a      	ldr	r2, [r7, #4]
 8011a16:	683b      	ldr	r3, [r7, #0]
 8011a18:	781b      	ldrb	r3, [r3, #0]
 8011a1a:	009b      	lsls	r3, r3, #2
 8011a1c:	18d3      	adds	r3, r2, r3
 8011a1e:	881b      	ldrh	r3, [r3, #0]
 8011a20:	b29a      	uxth	r2, r3
 8011a22:	2020      	movs	r0, #32
 8011a24:	183b      	adds	r3, r7, r0
 8011a26:	49dd      	ldr	r1, [pc, #884]	@ (8011d9c <USB_ActivateEndpoint+0x6a8>)
 8011a28:	400a      	ands	r2, r1
 8011a2a:	801a      	strh	r2, [r3, #0]
 8011a2c:	687a      	ldr	r2, [r7, #4]
 8011a2e:	683b      	ldr	r3, [r7, #0]
 8011a30:	781b      	ldrb	r3, [r3, #0]
 8011a32:	009b      	lsls	r3, r3, #2
 8011a34:	18d3      	adds	r3, r2, r3
 8011a36:	183a      	adds	r2, r7, r0
 8011a38:	8812      	ldrh	r2, [r2, #0]
 8011a3a:	49d9      	ldr	r1, [pc, #868]	@ (8011da0 <USB_ActivateEndpoint+0x6ac>)
 8011a3c:	430a      	orrs	r2, r1
 8011a3e:	b292      	uxth	r2, r2
 8011a40:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 8011a42:	683b      	ldr	r3, [r7, #0]
 8011a44:	781b      	ldrb	r3, [r3, #0]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d125      	bne.n	8011a96 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011a4a:	687a      	ldr	r2, [r7, #4]
 8011a4c:	683b      	ldr	r3, [r7, #0]
 8011a4e:	781b      	ldrb	r3, [r3, #0]
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	18d3      	adds	r3, r2, r3
 8011a54:	881b      	ldrh	r3, [r3, #0]
 8011a56:	b29a      	uxth	r2, r3
 8011a58:	201c      	movs	r0, #28
 8011a5a:	183b      	adds	r3, r7, r0
 8011a5c:	49d1      	ldr	r1, [pc, #836]	@ (8011da4 <USB_ActivateEndpoint+0x6b0>)
 8011a5e:	400a      	ands	r2, r1
 8011a60:	801a      	strh	r2, [r3, #0]
 8011a62:	183b      	adds	r3, r7, r0
 8011a64:	183a      	adds	r2, r7, r0
 8011a66:	8812      	ldrh	r2, [r2, #0]
 8011a68:	2180      	movs	r1, #128	@ 0x80
 8011a6a:	0149      	lsls	r1, r1, #5
 8011a6c:	404a      	eors	r2, r1
 8011a6e:	801a      	strh	r2, [r3, #0]
 8011a70:	183b      	adds	r3, r7, r0
 8011a72:	183a      	adds	r2, r7, r0
 8011a74:	8812      	ldrh	r2, [r2, #0]
 8011a76:	2180      	movs	r1, #128	@ 0x80
 8011a78:	0189      	lsls	r1, r1, #6
 8011a7a:	404a      	eors	r2, r1
 8011a7c:	801a      	strh	r2, [r3, #0]
 8011a7e:	687a      	ldr	r2, [r7, #4]
 8011a80:	683b      	ldr	r3, [r7, #0]
 8011a82:	781b      	ldrb	r3, [r3, #0]
 8011a84:	009b      	lsls	r3, r3, #2
 8011a86:	18d3      	adds	r3, r2, r3
 8011a88:	183a      	adds	r2, r7, r0
 8011a8a:	8812      	ldrh	r2, [r2, #0]
 8011a8c:	49c6      	ldr	r1, [pc, #792]	@ (8011da8 <USB_ActivateEndpoint+0x6b4>)
 8011a8e:	430a      	orrs	r2, r1
 8011a90:	b292      	uxth	r2, r2
 8011a92:	801a      	strh	r2, [r3, #0]
 8011a94:	e1c2      	b.n	8011e1c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8011a96:	687a      	ldr	r2, [r7, #4]
 8011a98:	683b      	ldr	r3, [r7, #0]
 8011a9a:	781b      	ldrb	r3, [r3, #0]
 8011a9c:	009b      	lsls	r3, r3, #2
 8011a9e:	18d3      	adds	r3, r2, r3
 8011aa0:	881b      	ldrh	r3, [r3, #0]
 8011aa2:	b29a      	uxth	r2, r3
 8011aa4:	201e      	movs	r0, #30
 8011aa6:	183b      	adds	r3, r7, r0
 8011aa8:	49be      	ldr	r1, [pc, #760]	@ (8011da4 <USB_ActivateEndpoint+0x6b0>)
 8011aaa:	400a      	ands	r2, r1
 8011aac:	801a      	strh	r2, [r3, #0]
 8011aae:	183b      	adds	r3, r7, r0
 8011ab0:	183a      	adds	r2, r7, r0
 8011ab2:	8812      	ldrh	r2, [r2, #0]
 8011ab4:	2180      	movs	r1, #128	@ 0x80
 8011ab6:	0189      	lsls	r1, r1, #6
 8011ab8:	404a      	eors	r2, r1
 8011aba:	801a      	strh	r2, [r3, #0]
 8011abc:	687a      	ldr	r2, [r7, #4]
 8011abe:	683b      	ldr	r3, [r7, #0]
 8011ac0:	781b      	ldrb	r3, [r3, #0]
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	18d3      	adds	r3, r2, r3
 8011ac6:	183a      	adds	r2, r7, r0
 8011ac8:	8812      	ldrh	r2, [r2, #0]
 8011aca:	49b7      	ldr	r1, [pc, #732]	@ (8011da8 <USB_ActivateEndpoint+0x6b4>)
 8011acc:	430a      	orrs	r2, r1
 8011ace:	b292      	uxth	r2, r2
 8011ad0:	801a      	strh	r2, [r3, #0]
 8011ad2:	e1a3      	b.n	8011e1c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8011ad4:	683b      	ldr	r3, [r7, #0]
 8011ad6:	78db      	ldrb	r3, [r3, #3]
 8011ad8:	2b02      	cmp	r3, #2
 8011ada:	d117      	bne.n	8011b0c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8011adc:	687a      	ldr	r2, [r7, #4]
 8011ade:	683b      	ldr	r3, [r7, #0]
 8011ae0:	781b      	ldrb	r3, [r3, #0]
 8011ae2:	009b      	lsls	r3, r3, #2
 8011ae4:	18d3      	adds	r3, r2, r3
 8011ae6:	881b      	ldrh	r3, [r3, #0]
 8011ae8:	b29a      	uxth	r2, r3
 8011aea:	2062      	movs	r0, #98	@ 0x62
 8011aec:	183b      	adds	r3, r7, r0
 8011aee:	49ab      	ldr	r1, [pc, #684]	@ (8011d9c <USB_ActivateEndpoint+0x6a8>)
 8011af0:	400a      	ands	r2, r1
 8011af2:	801a      	strh	r2, [r3, #0]
 8011af4:	687a      	ldr	r2, [r7, #4]
 8011af6:	683b      	ldr	r3, [r7, #0]
 8011af8:	781b      	ldrb	r3, [r3, #0]
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	18d3      	adds	r3, r2, r3
 8011afe:	183a      	adds	r2, r7, r0
 8011b00:	8812      	ldrh	r2, [r2, #0]
 8011b02:	49aa      	ldr	r1, [pc, #680]	@ (8011dac <USB_ActivateEndpoint+0x6b8>)
 8011b04:	430a      	orrs	r2, r1
 8011b06:	b292      	uxth	r2, r2
 8011b08:	801a      	strh	r2, [r3, #0]
 8011b0a:	e016      	b.n	8011b3a <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8011b0c:	687a      	ldr	r2, [r7, #4]
 8011b0e:	683b      	ldr	r3, [r7, #0]
 8011b10:	781b      	ldrb	r3, [r3, #0]
 8011b12:	009b      	lsls	r3, r3, #2
 8011b14:	18d3      	adds	r3, r2, r3
 8011b16:	881b      	ldrh	r3, [r3, #0]
 8011b18:	b29a      	uxth	r2, r3
 8011b1a:	2064      	movs	r0, #100	@ 0x64
 8011b1c:	183b      	adds	r3, r7, r0
 8011b1e:	49a4      	ldr	r1, [pc, #656]	@ (8011db0 <USB_ActivateEndpoint+0x6bc>)
 8011b20:	400a      	ands	r2, r1
 8011b22:	801a      	strh	r2, [r3, #0]
 8011b24:	687a      	ldr	r2, [r7, #4]
 8011b26:	683b      	ldr	r3, [r7, #0]
 8011b28:	781b      	ldrb	r3, [r3, #0]
 8011b2a:	009b      	lsls	r3, r3, #2
 8011b2c:	18d3      	adds	r3, r2, r3
 8011b2e:	183a      	adds	r2, r7, r0
 8011b30:	8812      	ldrh	r2, [r2, #0]
 8011b32:	499d      	ldr	r1, [pc, #628]	@ (8011da8 <USB_ActivateEndpoint+0x6b4>)
 8011b34:	430a      	orrs	r2, r1
 8011b36:	b292      	uxth	r2, r2
 8011b38:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8011b3a:	687b      	ldr	r3, [r7, #4]
 8011b3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	2250      	movs	r2, #80	@ 0x50
 8011b42:	5a9b      	ldrh	r3, [r3, r2]
 8011b44:	b29b      	uxth	r3, r3
 8011b46:	001a      	movs	r2, r3
 8011b48:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b4a:	189b      	adds	r3, r3, r2
 8011b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8011b4e:	683b      	ldr	r3, [r7, #0]
 8011b50:	781b      	ldrb	r3, [r3, #0]
 8011b52:	00da      	lsls	r2, r3, #3
 8011b54:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8011b56:	18d3      	adds	r3, r2, r3
 8011b58:	2280      	movs	r2, #128	@ 0x80
 8011b5a:	00d2      	lsls	r2, r2, #3
 8011b5c:	4694      	mov	ip, r2
 8011b5e:	4463      	add	r3, ip
 8011b60:	65bb      	str	r3, [r7, #88]	@ 0x58
 8011b62:	683b      	ldr	r3, [r7, #0]
 8011b64:	891b      	ldrh	r3, [r3, #8]
 8011b66:	085b      	lsrs	r3, r3, #1
 8011b68:	b29b      	uxth	r3, r3
 8011b6a:	18db      	adds	r3, r3, r3
 8011b6c:	b29a      	uxth	r2, r3
 8011b6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011b70:	801a      	strh	r2, [r3, #0]
 8011b72:	687b      	ldr	r3, [r7, #4]
 8011b74:	657b      	str	r3, [r7, #84]	@ 0x54
 8011b76:	687b      	ldr	r3, [r7, #4]
 8011b78:	2250      	movs	r2, #80	@ 0x50
 8011b7a:	5a9b      	ldrh	r3, [r3, r2]
 8011b7c:	b29b      	uxth	r3, r3
 8011b7e:	001a      	movs	r2, r3
 8011b80:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b82:	189b      	adds	r3, r3, r2
 8011b84:	657b      	str	r3, [r7, #84]	@ 0x54
 8011b86:	683b      	ldr	r3, [r7, #0]
 8011b88:	781b      	ldrb	r3, [r3, #0]
 8011b8a:	00da      	lsls	r2, r3, #3
 8011b8c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011b8e:	18d3      	adds	r3, r2, r3
 8011b90:	4a88      	ldr	r2, [pc, #544]	@ (8011db4 <USB_ActivateEndpoint+0x6c0>)
 8011b92:	4694      	mov	ip, r2
 8011b94:	4463      	add	r3, ip
 8011b96:	653b      	str	r3, [r7, #80]	@ 0x50
 8011b98:	683b      	ldr	r3, [r7, #0]
 8011b9a:	895b      	ldrh	r3, [r3, #10]
 8011b9c:	085b      	lsrs	r3, r3, #1
 8011b9e:	b29b      	uxth	r3, r3
 8011ba0:	18db      	adds	r3, r3, r3
 8011ba2:	b29a      	uxth	r2, r3
 8011ba4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ba6:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8011ba8:	683b      	ldr	r3, [r7, #0]
 8011baa:	785b      	ldrb	r3, [r3, #1]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d000      	beq.n	8011bb2 <USB_ActivateEndpoint+0x4be>
 8011bb0:	e087      	b.n	8011cc2 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011bb2:	687a      	ldr	r2, [r7, #4]
 8011bb4:	683b      	ldr	r3, [r7, #0]
 8011bb6:	781b      	ldrb	r3, [r3, #0]
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	18d2      	adds	r2, r2, r3
 8011bbc:	2140      	movs	r1, #64	@ 0x40
 8011bbe:	187b      	adds	r3, r7, r1
 8011bc0:	8812      	ldrh	r2, [r2, #0]
 8011bc2:	801a      	strh	r2, [r3, #0]
 8011bc4:	187b      	adds	r3, r7, r1
 8011bc6:	881a      	ldrh	r2, [r3, #0]
 8011bc8:	2380      	movs	r3, #128	@ 0x80
 8011bca:	01db      	lsls	r3, r3, #7
 8011bcc:	4013      	ands	r3, r2
 8011bce:	d016      	beq.n	8011bfe <USB_ActivateEndpoint+0x50a>
 8011bd0:	687a      	ldr	r2, [r7, #4]
 8011bd2:	683b      	ldr	r3, [r7, #0]
 8011bd4:	781b      	ldrb	r3, [r3, #0]
 8011bd6:	009b      	lsls	r3, r3, #2
 8011bd8:	18d3      	adds	r3, r2, r3
 8011bda:	881b      	ldrh	r3, [r3, #0]
 8011bdc:	b29a      	uxth	r2, r3
 8011bde:	203e      	movs	r0, #62	@ 0x3e
 8011be0:	183b      	adds	r3, r7, r0
 8011be2:	496e      	ldr	r1, [pc, #440]	@ (8011d9c <USB_ActivateEndpoint+0x6a8>)
 8011be4:	400a      	ands	r2, r1
 8011be6:	801a      	strh	r2, [r3, #0]
 8011be8:	687a      	ldr	r2, [r7, #4]
 8011bea:	683b      	ldr	r3, [r7, #0]
 8011bec:	781b      	ldrb	r3, [r3, #0]
 8011bee:	009b      	lsls	r3, r3, #2
 8011bf0:	18d3      	adds	r3, r2, r3
 8011bf2:	183a      	adds	r2, r7, r0
 8011bf4:	8812      	ldrh	r2, [r2, #0]
 8011bf6:	496a      	ldr	r1, [pc, #424]	@ (8011da0 <USB_ActivateEndpoint+0x6ac>)
 8011bf8:	430a      	orrs	r2, r1
 8011bfa:	b292      	uxth	r2, r2
 8011bfc:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011bfe:	687a      	ldr	r2, [r7, #4]
 8011c00:	683b      	ldr	r3, [r7, #0]
 8011c02:	781b      	ldrb	r3, [r3, #0]
 8011c04:	009b      	lsls	r3, r3, #2
 8011c06:	18d2      	adds	r2, r2, r3
 8011c08:	213c      	movs	r1, #60	@ 0x3c
 8011c0a:	187b      	adds	r3, r7, r1
 8011c0c:	8812      	ldrh	r2, [r2, #0]
 8011c0e:	801a      	strh	r2, [r3, #0]
 8011c10:	187b      	adds	r3, r7, r1
 8011c12:	881b      	ldrh	r3, [r3, #0]
 8011c14:	2240      	movs	r2, #64	@ 0x40
 8011c16:	4013      	ands	r3, r2
 8011c18:	d016      	beq.n	8011c48 <USB_ActivateEndpoint+0x554>
 8011c1a:	687a      	ldr	r2, [r7, #4]
 8011c1c:	683b      	ldr	r3, [r7, #0]
 8011c1e:	781b      	ldrb	r3, [r3, #0]
 8011c20:	009b      	lsls	r3, r3, #2
 8011c22:	18d3      	adds	r3, r2, r3
 8011c24:	881b      	ldrh	r3, [r3, #0]
 8011c26:	b29a      	uxth	r2, r3
 8011c28:	203a      	movs	r0, #58	@ 0x3a
 8011c2a:	183b      	adds	r3, r7, r0
 8011c2c:	495b      	ldr	r1, [pc, #364]	@ (8011d9c <USB_ActivateEndpoint+0x6a8>)
 8011c2e:	400a      	ands	r2, r1
 8011c30:	801a      	strh	r2, [r3, #0]
 8011c32:	687a      	ldr	r2, [r7, #4]
 8011c34:	683b      	ldr	r3, [r7, #0]
 8011c36:	781b      	ldrb	r3, [r3, #0]
 8011c38:	009b      	lsls	r3, r3, #2
 8011c3a:	18d3      	adds	r3, r2, r3
 8011c3c:	183a      	adds	r2, r7, r0
 8011c3e:	8812      	ldrh	r2, [r2, #0]
 8011c40:	495d      	ldr	r1, [pc, #372]	@ (8011db8 <USB_ActivateEndpoint+0x6c4>)
 8011c42:	430a      	orrs	r2, r1
 8011c44:	b292      	uxth	r2, r2
 8011c46:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8011c48:	687a      	ldr	r2, [r7, #4]
 8011c4a:	683b      	ldr	r3, [r7, #0]
 8011c4c:	781b      	ldrb	r3, [r3, #0]
 8011c4e:	009b      	lsls	r3, r3, #2
 8011c50:	18d3      	adds	r3, r2, r3
 8011c52:	881b      	ldrh	r3, [r3, #0]
 8011c54:	b29a      	uxth	r2, r3
 8011c56:	2038      	movs	r0, #56	@ 0x38
 8011c58:	183b      	adds	r3, r7, r0
 8011c5a:	4952      	ldr	r1, [pc, #328]	@ (8011da4 <USB_ActivateEndpoint+0x6b0>)
 8011c5c:	400a      	ands	r2, r1
 8011c5e:	801a      	strh	r2, [r3, #0]
 8011c60:	183b      	adds	r3, r7, r0
 8011c62:	183a      	adds	r2, r7, r0
 8011c64:	8812      	ldrh	r2, [r2, #0]
 8011c66:	2180      	movs	r1, #128	@ 0x80
 8011c68:	0149      	lsls	r1, r1, #5
 8011c6a:	404a      	eors	r2, r1
 8011c6c:	801a      	strh	r2, [r3, #0]
 8011c6e:	183b      	adds	r3, r7, r0
 8011c70:	183a      	adds	r2, r7, r0
 8011c72:	8812      	ldrh	r2, [r2, #0]
 8011c74:	2180      	movs	r1, #128	@ 0x80
 8011c76:	0189      	lsls	r1, r1, #6
 8011c78:	404a      	eors	r2, r1
 8011c7a:	801a      	strh	r2, [r3, #0]
 8011c7c:	687a      	ldr	r2, [r7, #4]
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	781b      	ldrb	r3, [r3, #0]
 8011c82:	009b      	lsls	r3, r3, #2
 8011c84:	18d3      	adds	r3, r2, r3
 8011c86:	183a      	adds	r2, r7, r0
 8011c88:	8812      	ldrh	r2, [r2, #0]
 8011c8a:	4947      	ldr	r1, [pc, #284]	@ (8011da8 <USB_ActivateEndpoint+0x6b4>)
 8011c8c:	430a      	orrs	r2, r1
 8011c8e:	b292      	uxth	r2, r2
 8011c90:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	683b      	ldr	r3, [r7, #0]
 8011c96:	781b      	ldrb	r3, [r3, #0]
 8011c98:	009b      	lsls	r3, r3, #2
 8011c9a:	18d3      	adds	r3, r2, r3
 8011c9c:	881b      	ldrh	r3, [r3, #0]
 8011c9e:	b29a      	uxth	r2, r3
 8011ca0:	2036      	movs	r0, #54	@ 0x36
 8011ca2:	183b      	adds	r3, r7, r0
 8011ca4:	4945      	ldr	r1, [pc, #276]	@ (8011dbc <USB_ActivateEndpoint+0x6c8>)
 8011ca6:	400a      	ands	r2, r1
 8011ca8:	801a      	strh	r2, [r3, #0]
 8011caa:	687a      	ldr	r2, [r7, #4]
 8011cac:	683b      	ldr	r3, [r7, #0]
 8011cae:	781b      	ldrb	r3, [r3, #0]
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	18d3      	adds	r3, r2, r3
 8011cb4:	183a      	adds	r2, r7, r0
 8011cb6:	8812      	ldrh	r2, [r2, #0]
 8011cb8:	493b      	ldr	r1, [pc, #236]	@ (8011da8 <USB_ActivateEndpoint+0x6b4>)
 8011cba:	430a      	orrs	r2, r1
 8011cbc:	b292      	uxth	r2, r2
 8011cbe:	801a      	strh	r2, [r3, #0]
 8011cc0:	e0ac      	b.n	8011e1c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011cc2:	687a      	ldr	r2, [r7, #4]
 8011cc4:	683b      	ldr	r3, [r7, #0]
 8011cc6:	781b      	ldrb	r3, [r3, #0]
 8011cc8:	009b      	lsls	r3, r3, #2
 8011cca:	18d2      	adds	r2, r2, r3
 8011ccc:	214e      	movs	r1, #78	@ 0x4e
 8011cce:	187b      	adds	r3, r7, r1
 8011cd0:	8812      	ldrh	r2, [r2, #0]
 8011cd2:	801a      	strh	r2, [r3, #0]
 8011cd4:	187b      	adds	r3, r7, r1
 8011cd6:	881a      	ldrh	r2, [r3, #0]
 8011cd8:	2380      	movs	r3, #128	@ 0x80
 8011cda:	01db      	lsls	r3, r3, #7
 8011cdc:	4013      	ands	r3, r2
 8011cde:	d016      	beq.n	8011d0e <USB_ActivateEndpoint+0x61a>
 8011ce0:	687a      	ldr	r2, [r7, #4]
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	781b      	ldrb	r3, [r3, #0]
 8011ce6:	009b      	lsls	r3, r3, #2
 8011ce8:	18d3      	adds	r3, r2, r3
 8011cea:	881b      	ldrh	r3, [r3, #0]
 8011cec:	b29a      	uxth	r2, r3
 8011cee:	204c      	movs	r0, #76	@ 0x4c
 8011cf0:	183b      	adds	r3, r7, r0
 8011cf2:	492a      	ldr	r1, [pc, #168]	@ (8011d9c <USB_ActivateEndpoint+0x6a8>)
 8011cf4:	400a      	ands	r2, r1
 8011cf6:	801a      	strh	r2, [r3, #0]
 8011cf8:	687a      	ldr	r2, [r7, #4]
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	781b      	ldrb	r3, [r3, #0]
 8011cfe:	009b      	lsls	r3, r3, #2
 8011d00:	18d3      	adds	r3, r2, r3
 8011d02:	183a      	adds	r2, r7, r0
 8011d04:	8812      	ldrh	r2, [r2, #0]
 8011d06:	4926      	ldr	r1, [pc, #152]	@ (8011da0 <USB_ActivateEndpoint+0x6ac>)
 8011d08:	430a      	orrs	r2, r1
 8011d0a:	b292      	uxth	r2, r2
 8011d0c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011d0e:	687a      	ldr	r2, [r7, #4]
 8011d10:	683b      	ldr	r3, [r7, #0]
 8011d12:	781b      	ldrb	r3, [r3, #0]
 8011d14:	009b      	lsls	r3, r3, #2
 8011d16:	18d2      	adds	r2, r2, r3
 8011d18:	214a      	movs	r1, #74	@ 0x4a
 8011d1a:	187b      	adds	r3, r7, r1
 8011d1c:	8812      	ldrh	r2, [r2, #0]
 8011d1e:	801a      	strh	r2, [r3, #0]
 8011d20:	187b      	adds	r3, r7, r1
 8011d22:	881b      	ldrh	r3, [r3, #0]
 8011d24:	2240      	movs	r2, #64	@ 0x40
 8011d26:	4013      	ands	r3, r2
 8011d28:	d016      	beq.n	8011d58 <USB_ActivateEndpoint+0x664>
 8011d2a:	687a      	ldr	r2, [r7, #4]
 8011d2c:	683b      	ldr	r3, [r7, #0]
 8011d2e:	781b      	ldrb	r3, [r3, #0]
 8011d30:	009b      	lsls	r3, r3, #2
 8011d32:	18d3      	adds	r3, r2, r3
 8011d34:	881b      	ldrh	r3, [r3, #0]
 8011d36:	b29a      	uxth	r2, r3
 8011d38:	2048      	movs	r0, #72	@ 0x48
 8011d3a:	183b      	adds	r3, r7, r0
 8011d3c:	4917      	ldr	r1, [pc, #92]	@ (8011d9c <USB_ActivateEndpoint+0x6a8>)
 8011d3e:	400a      	ands	r2, r1
 8011d40:	801a      	strh	r2, [r3, #0]
 8011d42:	687a      	ldr	r2, [r7, #4]
 8011d44:	683b      	ldr	r3, [r7, #0]
 8011d46:	781b      	ldrb	r3, [r3, #0]
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	18d3      	adds	r3, r2, r3
 8011d4c:	183a      	adds	r2, r7, r0
 8011d4e:	8812      	ldrh	r2, [r2, #0]
 8011d50:	4919      	ldr	r1, [pc, #100]	@ (8011db8 <USB_ActivateEndpoint+0x6c4>)
 8011d52:	430a      	orrs	r2, r1
 8011d54:	b292      	uxth	r2, r2
 8011d56:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8011d58:	683b      	ldr	r3, [r7, #0]
 8011d5a:	78db      	ldrb	r3, [r3, #3]
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d02f      	beq.n	8011dc0 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8011d60:	687a      	ldr	r2, [r7, #4]
 8011d62:	683b      	ldr	r3, [r7, #0]
 8011d64:	781b      	ldrb	r3, [r3, #0]
 8011d66:	009b      	lsls	r3, r3, #2
 8011d68:	18d3      	adds	r3, r2, r3
 8011d6a:	881b      	ldrh	r3, [r3, #0]
 8011d6c:	b29a      	uxth	r2, r3
 8011d6e:	2044      	movs	r0, #68	@ 0x44
 8011d70:	183b      	adds	r3, r7, r0
 8011d72:	4912      	ldr	r1, [pc, #72]	@ (8011dbc <USB_ActivateEndpoint+0x6c8>)
 8011d74:	400a      	ands	r2, r1
 8011d76:	801a      	strh	r2, [r3, #0]
 8011d78:	183b      	adds	r3, r7, r0
 8011d7a:	183a      	adds	r2, r7, r0
 8011d7c:	8812      	ldrh	r2, [r2, #0]
 8011d7e:	2120      	movs	r1, #32
 8011d80:	404a      	eors	r2, r1
 8011d82:	801a      	strh	r2, [r3, #0]
 8011d84:	687a      	ldr	r2, [r7, #4]
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	781b      	ldrb	r3, [r3, #0]
 8011d8a:	009b      	lsls	r3, r3, #2
 8011d8c:	18d3      	adds	r3, r2, r3
 8011d8e:	183a      	adds	r2, r7, r0
 8011d90:	8812      	ldrh	r2, [r2, #0]
 8011d92:	4905      	ldr	r1, [pc, #20]	@ (8011da8 <USB_ActivateEndpoint+0x6b4>)
 8011d94:	430a      	orrs	r2, r1
 8011d96:	b292      	uxth	r2, r2
 8011d98:	801a      	strh	r2, [r3, #0]
 8011d9a:	e028      	b.n	8011dee <USB_ActivateEndpoint+0x6fa>
 8011d9c:	ffff8f8f 	.word	0xffff8f8f
 8011da0:	ffffc080 	.word	0xffffc080
 8011da4:	ffffbf8f 	.word	0xffffbf8f
 8011da8:	ffff8080 	.word	0xffff8080
 8011dac:	ffff8180 	.word	0xffff8180
 8011db0:	ffff8e8f 	.word	0xffff8e8f
 8011db4:	00000404 	.word	0x00000404
 8011db8:	ffff80c0 	.word	0xffff80c0
 8011dbc:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011dc0:	687a      	ldr	r2, [r7, #4]
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	781b      	ldrb	r3, [r3, #0]
 8011dc6:	009b      	lsls	r3, r3, #2
 8011dc8:	18d3      	adds	r3, r2, r3
 8011dca:	881b      	ldrh	r3, [r3, #0]
 8011dcc:	b29a      	uxth	r2, r3
 8011dce:	2046      	movs	r0, #70	@ 0x46
 8011dd0:	183b      	adds	r3, r7, r0
 8011dd2:	4916      	ldr	r1, [pc, #88]	@ (8011e2c <USB_ActivateEndpoint+0x738>)
 8011dd4:	400a      	ands	r2, r1
 8011dd6:	801a      	strh	r2, [r3, #0]
 8011dd8:	687a      	ldr	r2, [r7, #4]
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	781b      	ldrb	r3, [r3, #0]
 8011dde:	009b      	lsls	r3, r3, #2
 8011de0:	18d3      	adds	r3, r2, r3
 8011de2:	183a      	adds	r2, r7, r0
 8011de4:	8812      	ldrh	r2, [r2, #0]
 8011de6:	4912      	ldr	r1, [pc, #72]	@ (8011e30 <USB_ActivateEndpoint+0x73c>)
 8011de8:	430a      	orrs	r2, r1
 8011dea:	b292      	uxth	r2, r2
 8011dec:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011dee:	687a      	ldr	r2, [r7, #4]
 8011df0:	683b      	ldr	r3, [r7, #0]
 8011df2:	781b      	ldrb	r3, [r3, #0]
 8011df4:	009b      	lsls	r3, r3, #2
 8011df6:	18d3      	adds	r3, r2, r3
 8011df8:	881b      	ldrh	r3, [r3, #0]
 8011dfa:	b29a      	uxth	r2, r3
 8011dfc:	2042      	movs	r0, #66	@ 0x42
 8011dfe:	183b      	adds	r3, r7, r0
 8011e00:	490c      	ldr	r1, [pc, #48]	@ (8011e34 <USB_ActivateEndpoint+0x740>)
 8011e02:	400a      	ands	r2, r1
 8011e04:	801a      	strh	r2, [r3, #0]
 8011e06:	687a      	ldr	r2, [r7, #4]
 8011e08:	683b      	ldr	r3, [r7, #0]
 8011e0a:	781b      	ldrb	r3, [r3, #0]
 8011e0c:	009b      	lsls	r3, r3, #2
 8011e0e:	18d3      	adds	r3, r2, r3
 8011e10:	183a      	adds	r2, r7, r0
 8011e12:	8812      	ldrh	r2, [r2, #0]
 8011e14:	4906      	ldr	r1, [pc, #24]	@ (8011e30 <USB_ActivateEndpoint+0x73c>)
 8011e16:	430a      	orrs	r2, r1
 8011e18:	b292      	uxth	r2, r2
 8011e1a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8011e1c:	236f      	movs	r3, #111	@ 0x6f
 8011e1e:	18fb      	adds	r3, r7, r3
 8011e20:	781b      	ldrb	r3, [r3, #0]
}
 8011e22:	0018      	movs	r0, r3
 8011e24:	46bd      	mov	sp, r7
 8011e26:	b01c      	add	sp, #112	@ 0x70
 8011e28:	bd80      	pop	{r7, pc}
 8011e2a:	46c0      	nop			@ (mov r8, r8)
 8011e2c:	ffff8fbf 	.word	0xffff8fbf
 8011e30:	ffff8080 	.word	0xffff8080
 8011e34:	ffffbf8f 	.word	0xffffbf8f

08011e38 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8011e38:	b580      	push	{r7, lr}
 8011e3a:	b08c      	sub	sp, #48	@ 0x30
 8011e3c:	af00      	add	r7, sp, #0
 8011e3e:	6078      	str	r0, [r7, #4]
 8011e40:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8011e42:	683b      	ldr	r3, [r7, #0]
 8011e44:	7b1b      	ldrb	r3, [r3, #12]
 8011e46:	2b00      	cmp	r3, #0
 8011e48:	d000      	beq.n	8011e4c <USB_DeactivateEndpoint+0x14>
 8011e4a:	e07e      	b.n	8011f4a <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8011e4c:	683b      	ldr	r3, [r7, #0]
 8011e4e:	785b      	ldrb	r3, [r3, #1]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d03c      	beq.n	8011ece <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	683b      	ldr	r3, [r7, #0]
 8011e58:	781b      	ldrb	r3, [r3, #0]
 8011e5a:	009b      	lsls	r3, r3, #2
 8011e5c:	18d2      	adds	r2, r2, r3
 8011e5e:	210c      	movs	r1, #12
 8011e60:	187b      	adds	r3, r7, r1
 8011e62:	8812      	ldrh	r2, [r2, #0]
 8011e64:	801a      	strh	r2, [r3, #0]
 8011e66:	187b      	adds	r3, r7, r1
 8011e68:	881b      	ldrh	r3, [r3, #0]
 8011e6a:	2240      	movs	r2, #64	@ 0x40
 8011e6c:	4013      	ands	r3, r2
 8011e6e:	d016      	beq.n	8011e9e <USB_DeactivateEndpoint+0x66>
 8011e70:	687a      	ldr	r2, [r7, #4]
 8011e72:	683b      	ldr	r3, [r7, #0]
 8011e74:	781b      	ldrb	r3, [r3, #0]
 8011e76:	009b      	lsls	r3, r3, #2
 8011e78:	18d3      	adds	r3, r2, r3
 8011e7a:	881b      	ldrh	r3, [r3, #0]
 8011e7c:	b29a      	uxth	r2, r3
 8011e7e:	200a      	movs	r0, #10
 8011e80:	183b      	adds	r3, r7, r0
 8011e82:	49c7      	ldr	r1, [pc, #796]	@ (80121a0 <USB_DeactivateEndpoint+0x368>)
 8011e84:	400a      	ands	r2, r1
 8011e86:	801a      	strh	r2, [r3, #0]
 8011e88:	687a      	ldr	r2, [r7, #4]
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	781b      	ldrb	r3, [r3, #0]
 8011e8e:	009b      	lsls	r3, r3, #2
 8011e90:	18d3      	adds	r3, r2, r3
 8011e92:	183a      	adds	r2, r7, r0
 8011e94:	8812      	ldrh	r2, [r2, #0]
 8011e96:	49c3      	ldr	r1, [pc, #780]	@ (80121a4 <USB_DeactivateEndpoint+0x36c>)
 8011e98:	430a      	orrs	r2, r1
 8011e9a:	b292      	uxth	r2, r2
 8011e9c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8011e9e:	687a      	ldr	r2, [r7, #4]
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	781b      	ldrb	r3, [r3, #0]
 8011ea4:	009b      	lsls	r3, r3, #2
 8011ea6:	18d3      	adds	r3, r2, r3
 8011ea8:	881b      	ldrh	r3, [r3, #0]
 8011eaa:	b29a      	uxth	r2, r3
 8011eac:	2008      	movs	r0, #8
 8011eae:	183b      	adds	r3, r7, r0
 8011eb0:	49bd      	ldr	r1, [pc, #756]	@ (80121a8 <USB_DeactivateEndpoint+0x370>)
 8011eb2:	400a      	ands	r2, r1
 8011eb4:	801a      	strh	r2, [r3, #0]
 8011eb6:	687a      	ldr	r2, [r7, #4]
 8011eb8:	683b      	ldr	r3, [r7, #0]
 8011eba:	781b      	ldrb	r3, [r3, #0]
 8011ebc:	009b      	lsls	r3, r3, #2
 8011ebe:	18d3      	adds	r3, r2, r3
 8011ec0:	183a      	adds	r2, r7, r0
 8011ec2:	8812      	ldrh	r2, [r2, #0]
 8011ec4:	49b9      	ldr	r1, [pc, #740]	@ (80121ac <USB_DeactivateEndpoint+0x374>)
 8011ec6:	430a      	orrs	r2, r1
 8011ec8:	b292      	uxth	r2, r2
 8011eca:	801a      	strh	r2, [r3, #0]
 8011ecc:	e163      	b.n	8012196 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011ece:	687a      	ldr	r2, [r7, #4]
 8011ed0:	683b      	ldr	r3, [r7, #0]
 8011ed2:	781b      	ldrb	r3, [r3, #0]
 8011ed4:	009b      	lsls	r3, r3, #2
 8011ed6:	18d2      	adds	r2, r2, r3
 8011ed8:	2112      	movs	r1, #18
 8011eda:	187b      	adds	r3, r7, r1
 8011edc:	8812      	ldrh	r2, [r2, #0]
 8011ede:	801a      	strh	r2, [r3, #0]
 8011ee0:	187b      	adds	r3, r7, r1
 8011ee2:	881a      	ldrh	r2, [r3, #0]
 8011ee4:	2380      	movs	r3, #128	@ 0x80
 8011ee6:	01db      	lsls	r3, r3, #7
 8011ee8:	4013      	ands	r3, r2
 8011eea:	d016      	beq.n	8011f1a <USB_DeactivateEndpoint+0xe2>
 8011eec:	687a      	ldr	r2, [r7, #4]
 8011eee:	683b      	ldr	r3, [r7, #0]
 8011ef0:	781b      	ldrb	r3, [r3, #0]
 8011ef2:	009b      	lsls	r3, r3, #2
 8011ef4:	18d3      	adds	r3, r2, r3
 8011ef6:	881b      	ldrh	r3, [r3, #0]
 8011ef8:	b29a      	uxth	r2, r3
 8011efa:	2010      	movs	r0, #16
 8011efc:	183b      	adds	r3, r7, r0
 8011efe:	49a8      	ldr	r1, [pc, #672]	@ (80121a0 <USB_DeactivateEndpoint+0x368>)
 8011f00:	400a      	ands	r2, r1
 8011f02:	801a      	strh	r2, [r3, #0]
 8011f04:	687a      	ldr	r2, [r7, #4]
 8011f06:	683b      	ldr	r3, [r7, #0]
 8011f08:	781b      	ldrb	r3, [r3, #0]
 8011f0a:	009b      	lsls	r3, r3, #2
 8011f0c:	18d3      	adds	r3, r2, r3
 8011f0e:	183a      	adds	r2, r7, r0
 8011f10:	8812      	ldrh	r2, [r2, #0]
 8011f12:	49a7      	ldr	r1, [pc, #668]	@ (80121b0 <USB_DeactivateEndpoint+0x378>)
 8011f14:	430a      	orrs	r2, r1
 8011f16:	b292      	uxth	r2, r2
 8011f18:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8011f1a:	687a      	ldr	r2, [r7, #4]
 8011f1c:	683b      	ldr	r3, [r7, #0]
 8011f1e:	781b      	ldrb	r3, [r3, #0]
 8011f20:	009b      	lsls	r3, r3, #2
 8011f22:	18d3      	adds	r3, r2, r3
 8011f24:	881b      	ldrh	r3, [r3, #0]
 8011f26:	b29a      	uxth	r2, r3
 8011f28:	200e      	movs	r0, #14
 8011f2a:	183b      	adds	r3, r7, r0
 8011f2c:	49a1      	ldr	r1, [pc, #644]	@ (80121b4 <USB_DeactivateEndpoint+0x37c>)
 8011f2e:	400a      	ands	r2, r1
 8011f30:	801a      	strh	r2, [r3, #0]
 8011f32:	687a      	ldr	r2, [r7, #4]
 8011f34:	683b      	ldr	r3, [r7, #0]
 8011f36:	781b      	ldrb	r3, [r3, #0]
 8011f38:	009b      	lsls	r3, r3, #2
 8011f3a:	18d3      	adds	r3, r2, r3
 8011f3c:	183a      	adds	r2, r7, r0
 8011f3e:	8812      	ldrh	r2, [r2, #0]
 8011f40:	499a      	ldr	r1, [pc, #616]	@ (80121ac <USB_DeactivateEndpoint+0x374>)
 8011f42:	430a      	orrs	r2, r1
 8011f44:	b292      	uxth	r2, r2
 8011f46:	801a      	strh	r2, [r3, #0]
 8011f48:	e125      	b.n	8012196 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8011f4a:	683b      	ldr	r3, [r7, #0]
 8011f4c:	785b      	ldrb	r3, [r3, #1]
 8011f4e:	2b00      	cmp	r3, #0
 8011f50:	d000      	beq.n	8011f54 <USB_DeactivateEndpoint+0x11c>
 8011f52:	e090      	b.n	8012076 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8011f54:	687a      	ldr	r2, [r7, #4]
 8011f56:	683b      	ldr	r3, [r7, #0]
 8011f58:	781b      	ldrb	r3, [r3, #0]
 8011f5a:	009b      	lsls	r3, r3, #2
 8011f5c:	18d2      	adds	r2, r2, r3
 8011f5e:	2120      	movs	r1, #32
 8011f60:	187b      	adds	r3, r7, r1
 8011f62:	8812      	ldrh	r2, [r2, #0]
 8011f64:	801a      	strh	r2, [r3, #0]
 8011f66:	187b      	adds	r3, r7, r1
 8011f68:	881a      	ldrh	r2, [r3, #0]
 8011f6a:	2380      	movs	r3, #128	@ 0x80
 8011f6c:	01db      	lsls	r3, r3, #7
 8011f6e:	4013      	ands	r3, r2
 8011f70:	d016      	beq.n	8011fa0 <USB_DeactivateEndpoint+0x168>
 8011f72:	687a      	ldr	r2, [r7, #4]
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	781b      	ldrb	r3, [r3, #0]
 8011f78:	009b      	lsls	r3, r3, #2
 8011f7a:	18d3      	adds	r3, r2, r3
 8011f7c:	881b      	ldrh	r3, [r3, #0]
 8011f7e:	b29a      	uxth	r2, r3
 8011f80:	201e      	movs	r0, #30
 8011f82:	183b      	adds	r3, r7, r0
 8011f84:	4986      	ldr	r1, [pc, #536]	@ (80121a0 <USB_DeactivateEndpoint+0x368>)
 8011f86:	400a      	ands	r2, r1
 8011f88:	801a      	strh	r2, [r3, #0]
 8011f8a:	687a      	ldr	r2, [r7, #4]
 8011f8c:	683b      	ldr	r3, [r7, #0]
 8011f8e:	781b      	ldrb	r3, [r3, #0]
 8011f90:	009b      	lsls	r3, r3, #2
 8011f92:	18d3      	adds	r3, r2, r3
 8011f94:	183a      	adds	r2, r7, r0
 8011f96:	8812      	ldrh	r2, [r2, #0]
 8011f98:	4985      	ldr	r1, [pc, #532]	@ (80121b0 <USB_DeactivateEndpoint+0x378>)
 8011f9a:	430a      	orrs	r2, r1
 8011f9c:	b292      	uxth	r2, r2
 8011f9e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8011fa0:	687a      	ldr	r2, [r7, #4]
 8011fa2:	683b      	ldr	r3, [r7, #0]
 8011fa4:	781b      	ldrb	r3, [r3, #0]
 8011fa6:	009b      	lsls	r3, r3, #2
 8011fa8:	18d2      	adds	r2, r2, r3
 8011faa:	211c      	movs	r1, #28
 8011fac:	187b      	adds	r3, r7, r1
 8011fae:	8812      	ldrh	r2, [r2, #0]
 8011fb0:	801a      	strh	r2, [r3, #0]
 8011fb2:	187b      	adds	r3, r7, r1
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	2240      	movs	r2, #64	@ 0x40
 8011fb8:	4013      	ands	r3, r2
 8011fba:	d016      	beq.n	8011fea <USB_DeactivateEndpoint+0x1b2>
 8011fbc:	687a      	ldr	r2, [r7, #4]
 8011fbe:	683b      	ldr	r3, [r7, #0]
 8011fc0:	781b      	ldrb	r3, [r3, #0]
 8011fc2:	009b      	lsls	r3, r3, #2
 8011fc4:	18d3      	adds	r3, r2, r3
 8011fc6:	881b      	ldrh	r3, [r3, #0]
 8011fc8:	b29a      	uxth	r2, r3
 8011fca:	201a      	movs	r0, #26
 8011fcc:	183b      	adds	r3, r7, r0
 8011fce:	4974      	ldr	r1, [pc, #464]	@ (80121a0 <USB_DeactivateEndpoint+0x368>)
 8011fd0:	400a      	ands	r2, r1
 8011fd2:	801a      	strh	r2, [r3, #0]
 8011fd4:	687a      	ldr	r2, [r7, #4]
 8011fd6:	683b      	ldr	r3, [r7, #0]
 8011fd8:	781b      	ldrb	r3, [r3, #0]
 8011fda:	009b      	lsls	r3, r3, #2
 8011fdc:	18d3      	adds	r3, r2, r3
 8011fde:	183a      	adds	r2, r7, r0
 8011fe0:	8812      	ldrh	r2, [r2, #0]
 8011fe2:	4970      	ldr	r1, [pc, #448]	@ (80121a4 <USB_DeactivateEndpoint+0x36c>)
 8011fe4:	430a      	orrs	r2, r1
 8011fe6:	b292      	uxth	r2, r2
 8011fe8:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8011fea:	687a      	ldr	r2, [r7, #4]
 8011fec:	683b      	ldr	r3, [r7, #0]
 8011fee:	781b      	ldrb	r3, [r3, #0]
 8011ff0:	009b      	lsls	r3, r3, #2
 8011ff2:	18d3      	adds	r3, r2, r3
 8011ff4:	881b      	ldrh	r3, [r3, #0]
 8011ff6:	b29a      	uxth	r2, r3
 8011ff8:	2018      	movs	r0, #24
 8011ffa:	183b      	adds	r3, r7, r0
 8011ffc:	4968      	ldr	r1, [pc, #416]	@ (80121a0 <USB_DeactivateEndpoint+0x368>)
 8011ffe:	400a      	ands	r2, r1
 8012000:	801a      	strh	r2, [r3, #0]
 8012002:	687a      	ldr	r2, [r7, #4]
 8012004:	683b      	ldr	r3, [r7, #0]
 8012006:	781b      	ldrb	r3, [r3, #0]
 8012008:	009b      	lsls	r3, r3, #2
 801200a:	18d3      	adds	r3, r2, r3
 801200c:	183a      	adds	r2, r7, r0
 801200e:	8812      	ldrh	r2, [r2, #0]
 8012010:	4964      	ldr	r1, [pc, #400]	@ (80121a4 <USB_DeactivateEndpoint+0x36c>)
 8012012:	430a      	orrs	r2, r1
 8012014:	b292      	uxth	r2, r2
 8012016:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012018:	687a      	ldr	r2, [r7, #4]
 801201a:	683b      	ldr	r3, [r7, #0]
 801201c:	781b      	ldrb	r3, [r3, #0]
 801201e:	009b      	lsls	r3, r3, #2
 8012020:	18d3      	adds	r3, r2, r3
 8012022:	881b      	ldrh	r3, [r3, #0]
 8012024:	b29a      	uxth	r2, r3
 8012026:	2016      	movs	r0, #22
 8012028:	183b      	adds	r3, r7, r0
 801202a:	4962      	ldr	r1, [pc, #392]	@ (80121b4 <USB_DeactivateEndpoint+0x37c>)
 801202c:	400a      	ands	r2, r1
 801202e:	801a      	strh	r2, [r3, #0]
 8012030:	687a      	ldr	r2, [r7, #4]
 8012032:	683b      	ldr	r3, [r7, #0]
 8012034:	781b      	ldrb	r3, [r3, #0]
 8012036:	009b      	lsls	r3, r3, #2
 8012038:	18d3      	adds	r3, r2, r3
 801203a:	183a      	adds	r2, r7, r0
 801203c:	8812      	ldrh	r2, [r2, #0]
 801203e:	495b      	ldr	r1, [pc, #364]	@ (80121ac <USB_DeactivateEndpoint+0x374>)
 8012040:	430a      	orrs	r2, r1
 8012042:	b292      	uxth	r2, r2
 8012044:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8012046:	687a      	ldr	r2, [r7, #4]
 8012048:	683b      	ldr	r3, [r7, #0]
 801204a:	781b      	ldrb	r3, [r3, #0]
 801204c:	009b      	lsls	r3, r3, #2
 801204e:	18d3      	adds	r3, r2, r3
 8012050:	881b      	ldrh	r3, [r3, #0]
 8012052:	b29a      	uxth	r2, r3
 8012054:	2014      	movs	r0, #20
 8012056:	183b      	adds	r3, r7, r0
 8012058:	4953      	ldr	r1, [pc, #332]	@ (80121a8 <USB_DeactivateEndpoint+0x370>)
 801205a:	400a      	ands	r2, r1
 801205c:	801a      	strh	r2, [r3, #0]
 801205e:	687a      	ldr	r2, [r7, #4]
 8012060:	683b      	ldr	r3, [r7, #0]
 8012062:	781b      	ldrb	r3, [r3, #0]
 8012064:	009b      	lsls	r3, r3, #2
 8012066:	18d3      	adds	r3, r2, r3
 8012068:	183a      	adds	r2, r7, r0
 801206a:	8812      	ldrh	r2, [r2, #0]
 801206c:	494f      	ldr	r1, [pc, #316]	@ (80121ac <USB_DeactivateEndpoint+0x374>)
 801206e:	430a      	orrs	r2, r1
 8012070:	b292      	uxth	r2, r2
 8012072:	801a      	strh	r2, [r3, #0]
 8012074:	e08f      	b.n	8012196 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8012076:	687a      	ldr	r2, [r7, #4]
 8012078:	683b      	ldr	r3, [r7, #0]
 801207a:	781b      	ldrb	r3, [r3, #0]
 801207c:	009b      	lsls	r3, r3, #2
 801207e:	18d2      	adds	r2, r2, r3
 8012080:	212e      	movs	r1, #46	@ 0x2e
 8012082:	187b      	adds	r3, r7, r1
 8012084:	8812      	ldrh	r2, [r2, #0]
 8012086:	801a      	strh	r2, [r3, #0]
 8012088:	187b      	adds	r3, r7, r1
 801208a:	881a      	ldrh	r2, [r3, #0]
 801208c:	2380      	movs	r3, #128	@ 0x80
 801208e:	01db      	lsls	r3, r3, #7
 8012090:	4013      	ands	r3, r2
 8012092:	d016      	beq.n	80120c2 <USB_DeactivateEndpoint+0x28a>
 8012094:	687a      	ldr	r2, [r7, #4]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	781b      	ldrb	r3, [r3, #0]
 801209a:	009b      	lsls	r3, r3, #2
 801209c:	18d3      	adds	r3, r2, r3
 801209e:	881b      	ldrh	r3, [r3, #0]
 80120a0:	b29a      	uxth	r2, r3
 80120a2:	202c      	movs	r0, #44	@ 0x2c
 80120a4:	183b      	adds	r3, r7, r0
 80120a6:	493e      	ldr	r1, [pc, #248]	@ (80121a0 <USB_DeactivateEndpoint+0x368>)
 80120a8:	400a      	ands	r2, r1
 80120aa:	801a      	strh	r2, [r3, #0]
 80120ac:	687a      	ldr	r2, [r7, #4]
 80120ae:	683b      	ldr	r3, [r7, #0]
 80120b0:	781b      	ldrb	r3, [r3, #0]
 80120b2:	009b      	lsls	r3, r3, #2
 80120b4:	18d3      	adds	r3, r2, r3
 80120b6:	183a      	adds	r2, r7, r0
 80120b8:	8812      	ldrh	r2, [r2, #0]
 80120ba:	493d      	ldr	r1, [pc, #244]	@ (80121b0 <USB_DeactivateEndpoint+0x378>)
 80120bc:	430a      	orrs	r2, r1
 80120be:	b292      	uxth	r2, r2
 80120c0:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80120c2:	687a      	ldr	r2, [r7, #4]
 80120c4:	683b      	ldr	r3, [r7, #0]
 80120c6:	781b      	ldrb	r3, [r3, #0]
 80120c8:	009b      	lsls	r3, r3, #2
 80120ca:	18d2      	adds	r2, r2, r3
 80120cc:	212a      	movs	r1, #42	@ 0x2a
 80120ce:	187b      	adds	r3, r7, r1
 80120d0:	8812      	ldrh	r2, [r2, #0]
 80120d2:	801a      	strh	r2, [r3, #0]
 80120d4:	187b      	adds	r3, r7, r1
 80120d6:	881b      	ldrh	r3, [r3, #0]
 80120d8:	2240      	movs	r2, #64	@ 0x40
 80120da:	4013      	ands	r3, r2
 80120dc:	d016      	beq.n	801210c <USB_DeactivateEndpoint+0x2d4>
 80120de:	687a      	ldr	r2, [r7, #4]
 80120e0:	683b      	ldr	r3, [r7, #0]
 80120e2:	781b      	ldrb	r3, [r3, #0]
 80120e4:	009b      	lsls	r3, r3, #2
 80120e6:	18d3      	adds	r3, r2, r3
 80120e8:	881b      	ldrh	r3, [r3, #0]
 80120ea:	b29a      	uxth	r2, r3
 80120ec:	2028      	movs	r0, #40	@ 0x28
 80120ee:	183b      	adds	r3, r7, r0
 80120f0:	492b      	ldr	r1, [pc, #172]	@ (80121a0 <USB_DeactivateEndpoint+0x368>)
 80120f2:	400a      	ands	r2, r1
 80120f4:	801a      	strh	r2, [r3, #0]
 80120f6:	687a      	ldr	r2, [r7, #4]
 80120f8:	683b      	ldr	r3, [r7, #0]
 80120fa:	781b      	ldrb	r3, [r3, #0]
 80120fc:	009b      	lsls	r3, r3, #2
 80120fe:	18d3      	adds	r3, r2, r3
 8012100:	183a      	adds	r2, r7, r0
 8012102:	8812      	ldrh	r2, [r2, #0]
 8012104:	4927      	ldr	r1, [pc, #156]	@ (80121a4 <USB_DeactivateEndpoint+0x36c>)
 8012106:	430a      	orrs	r2, r1
 8012108:	b292      	uxth	r2, r2
 801210a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 801210c:	687a      	ldr	r2, [r7, #4]
 801210e:	683b      	ldr	r3, [r7, #0]
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	009b      	lsls	r3, r3, #2
 8012114:	18d3      	adds	r3, r2, r3
 8012116:	881b      	ldrh	r3, [r3, #0]
 8012118:	b29a      	uxth	r2, r3
 801211a:	2026      	movs	r0, #38	@ 0x26
 801211c:	183b      	adds	r3, r7, r0
 801211e:	4920      	ldr	r1, [pc, #128]	@ (80121a0 <USB_DeactivateEndpoint+0x368>)
 8012120:	400a      	ands	r2, r1
 8012122:	801a      	strh	r2, [r3, #0]
 8012124:	687a      	ldr	r2, [r7, #4]
 8012126:	683b      	ldr	r3, [r7, #0]
 8012128:	781b      	ldrb	r3, [r3, #0]
 801212a:	009b      	lsls	r3, r3, #2
 801212c:	18d3      	adds	r3, r2, r3
 801212e:	183a      	adds	r2, r7, r0
 8012130:	8812      	ldrh	r2, [r2, #0]
 8012132:	491f      	ldr	r1, [pc, #124]	@ (80121b0 <USB_DeactivateEndpoint+0x378>)
 8012134:	430a      	orrs	r2, r1
 8012136:	b292      	uxth	r2, r2
 8012138:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 801213a:	687a      	ldr	r2, [r7, #4]
 801213c:	683b      	ldr	r3, [r7, #0]
 801213e:	781b      	ldrb	r3, [r3, #0]
 8012140:	009b      	lsls	r3, r3, #2
 8012142:	18d3      	adds	r3, r2, r3
 8012144:	881b      	ldrh	r3, [r3, #0]
 8012146:	b29a      	uxth	r2, r3
 8012148:	2024      	movs	r0, #36	@ 0x24
 801214a:	183b      	adds	r3, r7, r0
 801214c:	4916      	ldr	r1, [pc, #88]	@ (80121a8 <USB_DeactivateEndpoint+0x370>)
 801214e:	400a      	ands	r2, r1
 8012150:	801a      	strh	r2, [r3, #0]
 8012152:	687a      	ldr	r2, [r7, #4]
 8012154:	683b      	ldr	r3, [r7, #0]
 8012156:	781b      	ldrb	r3, [r3, #0]
 8012158:	009b      	lsls	r3, r3, #2
 801215a:	18d3      	adds	r3, r2, r3
 801215c:	183a      	adds	r2, r7, r0
 801215e:	8812      	ldrh	r2, [r2, #0]
 8012160:	4912      	ldr	r1, [pc, #72]	@ (80121ac <USB_DeactivateEndpoint+0x374>)
 8012162:	430a      	orrs	r2, r1
 8012164:	b292      	uxth	r2, r2
 8012166:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8012168:	687a      	ldr	r2, [r7, #4]
 801216a:	683b      	ldr	r3, [r7, #0]
 801216c:	781b      	ldrb	r3, [r3, #0]
 801216e:	009b      	lsls	r3, r3, #2
 8012170:	18d3      	adds	r3, r2, r3
 8012172:	881b      	ldrh	r3, [r3, #0]
 8012174:	b29a      	uxth	r2, r3
 8012176:	2022      	movs	r0, #34	@ 0x22
 8012178:	183b      	adds	r3, r7, r0
 801217a:	490e      	ldr	r1, [pc, #56]	@ (80121b4 <USB_DeactivateEndpoint+0x37c>)
 801217c:	400a      	ands	r2, r1
 801217e:	801a      	strh	r2, [r3, #0]
 8012180:	687a      	ldr	r2, [r7, #4]
 8012182:	683b      	ldr	r3, [r7, #0]
 8012184:	781b      	ldrb	r3, [r3, #0]
 8012186:	009b      	lsls	r3, r3, #2
 8012188:	18d3      	adds	r3, r2, r3
 801218a:	183a      	adds	r2, r7, r0
 801218c:	8812      	ldrh	r2, [r2, #0]
 801218e:	4907      	ldr	r1, [pc, #28]	@ (80121ac <USB_DeactivateEndpoint+0x374>)
 8012190:	430a      	orrs	r2, r1
 8012192:	b292      	uxth	r2, r2
 8012194:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8012196:	2300      	movs	r3, #0
}
 8012198:	0018      	movs	r0, r3
 801219a:	46bd      	mov	sp, r7
 801219c:	b00c      	add	sp, #48	@ 0x30
 801219e:	bd80      	pop	{r7, pc}
 80121a0:	ffff8f8f 	.word	0xffff8f8f
 80121a4:	ffff80c0 	.word	0xffff80c0
 80121a8:	ffff8fbf 	.word	0xffff8fbf
 80121ac:	ffff8080 	.word	0xffff8080
 80121b0:	ffffc080 	.word	0xffffc080
 80121b4:	ffffbf8f 	.word	0xffffbf8f

080121b8 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80121b8:	b590      	push	{r4, r7, lr}
 80121ba:	b0c3      	sub	sp, #268	@ 0x10c
 80121bc:	af00      	add	r7, sp, #0
 80121be:	6078      	str	r0, [r7, #4]
 80121c0:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 80121c2:	683b      	ldr	r3, [r7, #0]
 80121c4:	785b      	ldrb	r3, [r3, #1]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d001      	beq.n	80121ce <USB_EPStartXfer+0x16>
 80121ca:	f000 fd2d 	bl	8012c28 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 80121ce:	683b      	ldr	r3, [r7, #0]
 80121d0:	699a      	ldr	r2, [r3, #24]
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	691b      	ldr	r3, [r3, #16]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d905      	bls.n	80121e6 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 80121da:	683b      	ldr	r3, [r7, #0]
 80121dc:	691b      	ldr	r3, [r3, #16]
 80121de:	1d7a      	adds	r2, r7, #5
 80121e0:	32ff      	adds	r2, #255	@ 0xff
 80121e2:	6013      	str	r3, [r2, #0]
 80121e4:	e004      	b.n	80121f0 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	699b      	ldr	r3, [r3, #24]
 80121ea:	1d7a      	adds	r2, r7, #5
 80121ec:	32ff      	adds	r2, #255	@ 0xff
 80121ee:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80121f0:	683b      	ldr	r3, [r7, #0]
 80121f2:	7b1b      	ldrb	r3, [r3, #12]
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d125      	bne.n	8012244 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80121f8:	683b      	ldr	r3, [r7, #0]
 80121fa:	6959      	ldr	r1, [r3, #20]
 80121fc:	683b      	ldr	r3, [r7, #0]
 80121fe:	88da      	ldrh	r2, [r3, #6]
 8012200:	1d7b      	adds	r3, r7, #5
 8012202:	33ff      	adds	r3, #255	@ 0xff
 8012204:	681b      	ldr	r3, [r3, #0]
 8012206:	b29b      	uxth	r3, r3
 8012208:	6878      	ldr	r0, [r7, #4]
 801220a:	f001 fa47 	bl	801369c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	613b      	str	r3, [r7, #16]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	2250      	movs	r2, #80	@ 0x50
 8012216:	5a9b      	ldrh	r3, [r3, r2]
 8012218:	b29b      	uxth	r3, r3
 801221a:	001a      	movs	r2, r3
 801221c:	693b      	ldr	r3, [r7, #16]
 801221e:	189b      	adds	r3, r3, r2
 8012220:	613b      	str	r3, [r7, #16]
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	781b      	ldrb	r3, [r3, #0]
 8012226:	00da      	lsls	r2, r3, #3
 8012228:	693b      	ldr	r3, [r7, #16]
 801222a:	18d3      	adds	r3, r2, r3
 801222c:	4ad7      	ldr	r2, [pc, #860]	@ (801258c <USB_EPStartXfer+0x3d4>)
 801222e:	4694      	mov	ip, r2
 8012230:	4463      	add	r3, ip
 8012232:	60fb      	str	r3, [r7, #12]
 8012234:	1d7b      	adds	r3, r7, #5
 8012236:	33ff      	adds	r3, #255	@ 0xff
 8012238:	681b      	ldr	r3, [r3, #0]
 801223a:	b29a      	uxth	r2, r3
 801223c:	68fb      	ldr	r3, [r7, #12]
 801223e:	801a      	strh	r2, [r3, #0]
 8012240:	f000 fccd 	bl	8012bde <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8012244:	683b      	ldr	r3, [r7, #0]
 8012246:	78db      	ldrb	r3, [r3, #3]
 8012248:	2b02      	cmp	r3, #2
 801224a:	d000      	beq.n	801224e <USB_EPStartXfer+0x96>
 801224c:	e362      	b.n	8012914 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 801224e:	683b      	ldr	r3, [r7, #0]
 8012250:	6a1a      	ldr	r2, [r3, #32]
 8012252:	683b      	ldr	r3, [r7, #0]
 8012254:	691b      	ldr	r3, [r3, #16]
 8012256:	429a      	cmp	r2, r3
 8012258:	d800      	bhi.n	801225c <USB_EPStartXfer+0xa4>
 801225a:	e309      	b.n	8012870 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801225c:	687a      	ldr	r2, [r7, #4]
 801225e:	683b      	ldr	r3, [r7, #0]
 8012260:	781b      	ldrb	r3, [r3, #0]
 8012262:	009b      	lsls	r3, r3, #2
 8012264:	18d3      	adds	r3, r2, r3
 8012266:	881b      	ldrh	r3, [r3, #0]
 8012268:	b29a      	uxth	r2, r3
 801226a:	2056      	movs	r0, #86	@ 0x56
 801226c:	183b      	adds	r3, r7, r0
 801226e:	49c8      	ldr	r1, [pc, #800]	@ (8012590 <USB_EPStartXfer+0x3d8>)
 8012270:	400a      	ands	r2, r1
 8012272:	801a      	strh	r2, [r3, #0]
 8012274:	687a      	ldr	r2, [r7, #4]
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	781b      	ldrb	r3, [r3, #0]
 801227a:	009b      	lsls	r3, r3, #2
 801227c:	18d3      	adds	r3, r2, r3
 801227e:	183a      	adds	r2, r7, r0
 8012280:	8812      	ldrh	r2, [r2, #0]
 8012282:	49c4      	ldr	r1, [pc, #784]	@ (8012594 <USB_EPStartXfer+0x3dc>)
 8012284:	430a      	orrs	r2, r1
 8012286:	b292      	uxth	r2, r2
 8012288:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 801228a:	683b      	ldr	r3, [r7, #0]
 801228c:	6a1a      	ldr	r2, [r3, #32]
 801228e:	1d7b      	adds	r3, r7, #5
 8012290:	33ff      	adds	r3, #255	@ 0xff
 8012292:	681b      	ldr	r3, [r3, #0]
 8012294:	1ad2      	subs	r2, r2, r3
 8012296:	683b      	ldr	r3, [r7, #0]
 8012298:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801229a:	687a      	ldr	r2, [r7, #4]
 801229c:	683b      	ldr	r3, [r7, #0]
 801229e:	781b      	ldrb	r3, [r3, #0]
 80122a0:	009b      	lsls	r3, r3, #2
 80122a2:	18d3      	adds	r3, r2, r3
 80122a4:	881b      	ldrh	r3, [r3, #0]
 80122a6:	b29b      	uxth	r3, r3
 80122a8:	001a      	movs	r2, r3
 80122aa:	2340      	movs	r3, #64	@ 0x40
 80122ac:	4013      	ands	r3, r2
 80122ae:	d100      	bne.n	80122b2 <USB_EPStartXfer+0xfa>
 80122b0:	e176      	b.n	80125a0 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80122b2:	687b      	ldr	r3, [r7, #4]
 80122b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80122b6:	683b      	ldr	r3, [r7, #0]
 80122b8:	785b      	ldrb	r3, [r3, #1]
 80122ba:	2b00      	cmp	r3, #0
 80122bc:	d000      	beq.n	80122c0 <USB_EPStartXfer+0x108>
 80122be:	e074      	b.n	80123aa <USB_EPStartXfer+0x1f2>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	2250      	movs	r2, #80	@ 0x50
 80122c8:	5a9b      	ldrh	r3, [r3, r2]
 80122ca:	b29b      	uxth	r3, r3
 80122cc:	001a      	movs	r2, r3
 80122ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d0:	189b      	adds	r3, r3, r2
 80122d2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	781b      	ldrb	r3, [r3, #0]
 80122d8:	00da      	lsls	r2, r3, #3
 80122da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122dc:	18d3      	adds	r3, r2, r3
 80122de:	4aae      	ldr	r2, [pc, #696]	@ (8012598 <USB_EPStartXfer+0x3e0>)
 80122e0:	4694      	mov	ip, r2
 80122e2:	4463      	add	r3, ip
 80122e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80122e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122e8:	881b      	ldrh	r3, [r3, #0]
 80122ea:	b29b      	uxth	r3, r3
 80122ec:	059b      	lsls	r3, r3, #22
 80122ee:	0d9b      	lsrs	r3, r3, #22
 80122f0:	b29a      	uxth	r2, r3
 80122f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122f4:	801a      	strh	r2, [r3, #0]
 80122f6:	1d7b      	adds	r3, r7, #5
 80122f8:	33ff      	adds	r3, #255	@ 0xff
 80122fa:	681b      	ldr	r3, [r3, #0]
 80122fc:	2b3e      	cmp	r3, #62	@ 0x3e
 80122fe:	d924      	bls.n	801234a <USB_EPStartXfer+0x192>
 8012300:	1d7b      	adds	r3, r7, #5
 8012302:	33ff      	adds	r3, #255	@ 0xff
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	095b      	lsrs	r3, r3, #5
 8012308:	1c7a      	adds	r2, r7, #1
 801230a:	32ff      	adds	r2, #255	@ 0xff
 801230c:	6013      	str	r3, [r2, #0]
 801230e:	1d7b      	adds	r3, r7, #5
 8012310:	33ff      	adds	r3, #255	@ 0xff
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	221f      	movs	r2, #31
 8012316:	4013      	ands	r3, r2
 8012318:	d106      	bne.n	8012328 <USB_EPStartXfer+0x170>
 801231a:	1c7b      	adds	r3, r7, #1
 801231c:	33ff      	adds	r3, #255	@ 0xff
 801231e:	681b      	ldr	r3, [r3, #0]
 8012320:	3b01      	subs	r3, #1
 8012322:	1c7a      	adds	r2, r7, #1
 8012324:	32ff      	adds	r2, #255	@ 0xff
 8012326:	6013      	str	r3, [r2, #0]
 8012328:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801232a:	881b      	ldrh	r3, [r3, #0]
 801232c:	b29a      	uxth	r2, r3
 801232e:	1c7b      	adds	r3, r7, #1
 8012330:	33ff      	adds	r3, #255	@ 0xff
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	b29b      	uxth	r3, r3
 8012336:	029b      	lsls	r3, r3, #10
 8012338:	b29b      	uxth	r3, r3
 801233a:	4313      	orrs	r3, r2
 801233c:	b29b      	uxth	r3, r3
 801233e:	4a97      	ldr	r2, [pc, #604]	@ (801259c <USB_EPStartXfer+0x3e4>)
 8012340:	4313      	orrs	r3, r2
 8012342:	b29a      	uxth	r2, r3
 8012344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012346:	801a      	strh	r2, [r3, #0]
 8012348:	e04a      	b.n	80123e0 <USB_EPStartXfer+0x228>
 801234a:	1d7b      	adds	r3, r7, #5
 801234c:	33ff      	adds	r3, #255	@ 0xff
 801234e:	681b      	ldr	r3, [r3, #0]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d108      	bne.n	8012366 <USB_EPStartXfer+0x1ae>
 8012354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012356:	881b      	ldrh	r3, [r3, #0]
 8012358:	b29b      	uxth	r3, r3
 801235a:	4a90      	ldr	r2, [pc, #576]	@ (801259c <USB_EPStartXfer+0x3e4>)
 801235c:	4313      	orrs	r3, r2
 801235e:	b29a      	uxth	r2, r3
 8012360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012362:	801a      	strh	r2, [r3, #0]
 8012364:	e03c      	b.n	80123e0 <USB_EPStartXfer+0x228>
 8012366:	1d7b      	adds	r3, r7, #5
 8012368:	33ff      	adds	r3, #255	@ 0xff
 801236a:	681b      	ldr	r3, [r3, #0]
 801236c:	085b      	lsrs	r3, r3, #1
 801236e:	1c7a      	adds	r2, r7, #1
 8012370:	32ff      	adds	r2, #255	@ 0xff
 8012372:	6013      	str	r3, [r2, #0]
 8012374:	1d7b      	adds	r3, r7, #5
 8012376:	33ff      	adds	r3, #255	@ 0xff
 8012378:	681b      	ldr	r3, [r3, #0]
 801237a:	2201      	movs	r2, #1
 801237c:	4013      	ands	r3, r2
 801237e:	d006      	beq.n	801238e <USB_EPStartXfer+0x1d6>
 8012380:	1c7b      	adds	r3, r7, #1
 8012382:	33ff      	adds	r3, #255	@ 0xff
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	3301      	adds	r3, #1
 8012388:	1c7a      	adds	r2, r7, #1
 801238a:	32ff      	adds	r2, #255	@ 0xff
 801238c:	6013      	str	r3, [r2, #0]
 801238e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012390:	881b      	ldrh	r3, [r3, #0]
 8012392:	b29a      	uxth	r2, r3
 8012394:	1c7b      	adds	r3, r7, #1
 8012396:	33ff      	adds	r3, #255	@ 0xff
 8012398:	681b      	ldr	r3, [r3, #0]
 801239a:	b29b      	uxth	r3, r3
 801239c:	029b      	lsls	r3, r3, #10
 801239e:	b29b      	uxth	r3, r3
 80123a0:	4313      	orrs	r3, r2
 80123a2:	b29a      	uxth	r2, r3
 80123a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123a6:	801a      	strh	r2, [r3, #0]
 80123a8:	e01a      	b.n	80123e0 <USB_EPStartXfer+0x228>
 80123aa:	683b      	ldr	r3, [r7, #0]
 80123ac:	785b      	ldrb	r3, [r3, #1]
 80123ae:	2b01      	cmp	r3, #1
 80123b0:	d116      	bne.n	80123e0 <USB_EPStartXfer+0x228>
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	2250      	movs	r2, #80	@ 0x50
 80123b6:	5a9b      	ldrh	r3, [r3, r2]
 80123b8:	b29b      	uxth	r3, r3
 80123ba:	001a      	movs	r2, r3
 80123bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123be:	189b      	adds	r3, r3, r2
 80123c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80123c2:	683b      	ldr	r3, [r7, #0]
 80123c4:	781b      	ldrb	r3, [r3, #0]
 80123c6:	00da      	lsls	r2, r3, #3
 80123c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80123ca:	18d3      	adds	r3, r2, r3
 80123cc:	4a72      	ldr	r2, [pc, #456]	@ (8012598 <USB_EPStartXfer+0x3e0>)
 80123ce:	4694      	mov	ip, r2
 80123d0:	4463      	add	r3, ip
 80123d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80123d4:	1d7b      	adds	r3, r7, #5
 80123d6:	33ff      	adds	r3, #255	@ 0xff
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	b29a      	uxth	r2, r3
 80123dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123de:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80123e0:	2076      	movs	r0, #118	@ 0x76
 80123e2:	183b      	adds	r3, r7, r0
 80123e4:	683a      	ldr	r2, [r7, #0]
 80123e6:	8952      	ldrh	r2, [r2, #10]
 80123e8:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80123ea:	683b      	ldr	r3, [r7, #0]
 80123ec:	6959      	ldr	r1, [r3, #20]
 80123ee:	1d7b      	adds	r3, r7, #5
 80123f0:	33ff      	adds	r3, #255	@ 0xff
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	b29c      	uxth	r4, r3
 80123f6:	183b      	adds	r3, r7, r0
 80123f8:	881a      	ldrh	r2, [r3, #0]
 80123fa:	6878      	ldr	r0, [r7, #4]
 80123fc:	0023      	movs	r3, r4
 80123fe:	f001 f94d 	bl	801369c <USB_WritePMA>
            ep->xfer_buff += len;
 8012402:	683b      	ldr	r3, [r7, #0]
 8012404:	695a      	ldr	r2, [r3, #20]
 8012406:	1d7b      	adds	r3, r7, #5
 8012408:	33ff      	adds	r3, #255	@ 0xff
 801240a:	681b      	ldr	r3, [r3, #0]
 801240c:	18d2      	adds	r2, r2, r3
 801240e:	683b      	ldr	r3, [r7, #0]
 8012410:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8012412:	683b      	ldr	r3, [r7, #0]
 8012414:	6a1a      	ldr	r2, [r3, #32]
 8012416:	683b      	ldr	r3, [r7, #0]
 8012418:	691b      	ldr	r3, [r3, #16]
 801241a:	429a      	cmp	r2, r3
 801241c:	d908      	bls.n	8012430 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801241e:	683b      	ldr	r3, [r7, #0]
 8012420:	6a1a      	ldr	r2, [r3, #32]
 8012422:	1d7b      	adds	r3, r7, #5
 8012424:	33ff      	adds	r3, #255	@ 0xff
 8012426:	681b      	ldr	r3, [r3, #0]
 8012428:	1ad2      	subs	r2, r2, r3
 801242a:	683b      	ldr	r3, [r7, #0]
 801242c:	621a      	str	r2, [r3, #32]
 801242e:	e007      	b.n	8012440 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 8012430:	683b      	ldr	r3, [r7, #0]
 8012432:	6a1b      	ldr	r3, [r3, #32]
 8012434:	1d7a      	adds	r2, r7, #5
 8012436:	32ff      	adds	r2, #255	@ 0xff
 8012438:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 801243a:	683b      	ldr	r3, [r7, #0]
 801243c:	2200      	movs	r2, #0
 801243e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012440:	683b      	ldr	r3, [r7, #0]
 8012442:	785b      	ldrb	r3, [r3, #1]
 8012444:	2b00      	cmp	r3, #0
 8012446:	d000      	beq.n	801244a <USB_EPStartXfer+0x292>
 8012448:	e070      	b.n	801252c <USB_EPStartXfer+0x374>
 801244a:	687b      	ldr	r3, [r7, #4]
 801244c:	61bb      	str	r3, [r7, #24]
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2250      	movs	r2, #80	@ 0x50
 8012452:	5a9b      	ldrh	r3, [r3, r2]
 8012454:	b29b      	uxth	r3, r3
 8012456:	001a      	movs	r2, r3
 8012458:	69bb      	ldr	r3, [r7, #24]
 801245a:	189b      	adds	r3, r3, r2
 801245c:	61bb      	str	r3, [r7, #24]
 801245e:	683b      	ldr	r3, [r7, #0]
 8012460:	781b      	ldrb	r3, [r3, #0]
 8012462:	00da      	lsls	r2, r3, #3
 8012464:	69bb      	ldr	r3, [r7, #24]
 8012466:	18d3      	adds	r3, r2, r3
 8012468:	4a48      	ldr	r2, [pc, #288]	@ (801258c <USB_EPStartXfer+0x3d4>)
 801246a:	4694      	mov	ip, r2
 801246c:	4463      	add	r3, ip
 801246e:	617b      	str	r3, [r7, #20]
 8012470:	697b      	ldr	r3, [r7, #20]
 8012472:	881b      	ldrh	r3, [r3, #0]
 8012474:	b29b      	uxth	r3, r3
 8012476:	059b      	lsls	r3, r3, #22
 8012478:	0d9b      	lsrs	r3, r3, #22
 801247a:	b29a      	uxth	r2, r3
 801247c:	697b      	ldr	r3, [r7, #20]
 801247e:	801a      	strh	r2, [r3, #0]
 8012480:	1d7b      	adds	r3, r7, #5
 8012482:	33ff      	adds	r3, #255	@ 0xff
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	2b3e      	cmp	r3, #62	@ 0x3e
 8012488:	d922      	bls.n	80124d0 <USB_EPStartXfer+0x318>
 801248a:	1d7b      	adds	r3, r7, #5
 801248c:	33ff      	adds	r3, #255	@ 0xff
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	095b      	lsrs	r3, r3, #5
 8012492:	21fc      	movs	r1, #252	@ 0xfc
 8012494:	187a      	adds	r2, r7, r1
 8012496:	6013      	str	r3, [r2, #0]
 8012498:	1d7b      	adds	r3, r7, #5
 801249a:	33ff      	adds	r3, #255	@ 0xff
 801249c:	681b      	ldr	r3, [r3, #0]
 801249e:	221f      	movs	r2, #31
 80124a0:	4013      	ands	r3, r2
 80124a2:	d104      	bne.n	80124ae <USB_EPStartXfer+0x2f6>
 80124a4:	187b      	adds	r3, r7, r1
 80124a6:	681b      	ldr	r3, [r3, #0]
 80124a8:	3b01      	subs	r3, #1
 80124aa:	187a      	adds	r2, r7, r1
 80124ac:	6013      	str	r3, [r2, #0]
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	881b      	ldrh	r3, [r3, #0]
 80124b2:	b29a      	uxth	r2, r3
 80124b4:	23fc      	movs	r3, #252	@ 0xfc
 80124b6:	18fb      	adds	r3, r7, r3
 80124b8:	681b      	ldr	r3, [r3, #0]
 80124ba:	b29b      	uxth	r3, r3
 80124bc:	029b      	lsls	r3, r3, #10
 80124be:	b29b      	uxth	r3, r3
 80124c0:	4313      	orrs	r3, r2
 80124c2:	b29b      	uxth	r3, r3
 80124c4:	4a35      	ldr	r2, [pc, #212]	@ (801259c <USB_EPStartXfer+0x3e4>)
 80124c6:	4313      	orrs	r3, r2
 80124c8:	b29a      	uxth	r2, r3
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	801a      	strh	r2, [r3, #0]
 80124ce:	e04a      	b.n	8012566 <USB_EPStartXfer+0x3ae>
 80124d0:	1d7b      	adds	r3, r7, #5
 80124d2:	33ff      	adds	r3, #255	@ 0xff
 80124d4:	681b      	ldr	r3, [r3, #0]
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d108      	bne.n	80124ec <USB_EPStartXfer+0x334>
 80124da:	697b      	ldr	r3, [r7, #20]
 80124dc:	881b      	ldrh	r3, [r3, #0]
 80124de:	b29b      	uxth	r3, r3
 80124e0:	4a2e      	ldr	r2, [pc, #184]	@ (801259c <USB_EPStartXfer+0x3e4>)
 80124e2:	4313      	orrs	r3, r2
 80124e4:	b29a      	uxth	r2, r3
 80124e6:	697b      	ldr	r3, [r7, #20]
 80124e8:	801a      	strh	r2, [r3, #0]
 80124ea:	e03c      	b.n	8012566 <USB_EPStartXfer+0x3ae>
 80124ec:	1d7b      	adds	r3, r7, #5
 80124ee:	33ff      	adds	r3, #255	@ 0xff
 80124f0:	681b      	ldr	r3, [r3, #0]
 80124f2:	085b      	lsrs	r3, r3, #1
 80124f4:	21fc      	movs	r1, #252	@ 0xfc
 80124f6:	187a      	adds	r2, r7, r1
 80124f8:	6013      	str	r3, [r2, #0]
 80124fa:	1d7b      	adds	r3, r7, #5
 80124fc:	33ff      	adds	r3, #255	@ 0xff
 80124fe:	681b      	ldr	r3, [r3, #0]
 8012500:	2201      	movs	r2, #1
 8012502:	4013      	ands	r3, r2
 8012504:	d004      	beq.n	8012510 <USB_EPStartXfer+0x358>
 8012506:	187b      	adds	r3, r7, r1
 8012508:	681b      	ldr	r3, [r3, #0]
 801250a:	3301      	adds	r3, #1
 801250c:	187a      	adds	r2, r7, r1
 801250e:	6013      	str	r3, [r2, #0]
 8012510:	697b      	ldr	r3, [r7, #20]
 8012512:	881b      	ldrh	r3, [r3, #0]
 8012514:	b29a      	uxth	r2, r3
 8012516:	23fc      	movs	r3, #252	@ 0xfc
 8012518:	18fb      	adds	r3, r7, r3
 801251a:	681b      	ldr	r3, [r3, #0]
 801251c:	b29b      	uxth	r3, r3
 801251e:	029b      	lsls	r3, r3, #10
 8012520:	b29b      	uxth	r3, r3
 8012522:	4313      	orrs	r3, r2
 8012524:	b29a      	uxth	r2, r3
 8012526:	697b      	ldr	r3, [r7, #20]
 8012528:	801a      	strh	r2, [r3, #0]
 801252a:	e01c      	b.n	8012566 <USB_EPStartXfer+0x3ae>
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	785b      	ldrb	r3, [r3, #1]
 8012530:	2b01      	cmp	r3, #1
 8012532:	d118      	bne.n	8012566 <USB_EPStartXfer+0x3ae>
 8012534:	687b      	ldr	r3, [r7, #4]
 8012536:	623b      	str	r3, [r7, #32]
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	2250      	movs	r2, #80	@ 0x50
 801253c:	5a9b      	ldrh	r3, [r3, r2]
 801253e:	b29b      	uxth	r3, r3
 8012540:	001a      	movs	r2, r3
 8012542:	6a3b      	ldr	r3, [r7, #32]
 8012544:	189b      	adds	r3, r3, r2
 8012546:	623b      	str	r3, [r7, #32]
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	781b      	ldrb	r3, [r3, #0]
 801254c:	00da      	lsls	r2, r3, #3
 801254e:	6a3b      	ldr	r3, [r7, #32]
 8012550:	18d3      	adds	r3, r2, r3
 8012552:	4a0e      	ldr	r2, [pc, #56]	@ (801258c <USB_EPStartXfer+0x3d4>)
 8012554:	4694      	mov	ip, r2
 8012556:	4463      	add	r3, ip
 8012558:	61fb      	str	r3, [r7, #28]
 801255a:	1d7b      	adds	r3, r7, #5
 801255c:	33ff      	adds	r3, #255	@ 0xff
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	b29a      	uxth	r2, r3
 8012562:	69fb      	ldr	r3, [r7, #28]
 8012564:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8012566:	2076      	movs	r0, #118	@ 0x76
 8012568:	183b      	adds	r3, r7, r0
 801256a:	683a      	ldr	r2, [r7, #0]
 801256c:	8912      	ldrh	r2, [r2, #8]
 801256e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012570:	683b      	ldr	r3, [r7, #0]
 8012572:	6959      	ldr	r1, [r3, #20]
 8012574:	1d7b      	adds	r3, r7, #5
 8012576:	33ff      	adds	r3, #255	@ 0xff
 8012578:	681b      	ldr	r3, [r3, #0]
 801257a:	b29c      	uxth	r4, r3
 801257c:	183b      	adds	r3, r7, r0
 801257e:	881a      	ldrh	r2, [r3, #0]
 8012580:	6878      	ldr	r0, [r7, #4]
 8012582:	0023      	movs	r3, r4
 8012584:	f001 f88a 	bl	801369c <USB_WritePMA>
 8012588:	e329      	b.n	8012bde <USB_EPStartXfer+0xa26>
 801258a:	46c0      	nop			@ (mov r8, r8)
 801258c:	00000402 	.word	0x00000402
 8012590:	ffff8f8f 	.word	0xffff8f8f
 8012594:	ffff8180 	.word	0xffff8180
 8012598:	00000406 	.word	0x00000406
 801259c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80125a0:	683b      	ldr	r3, [r7, #0]
 80125a2:	785b      	ldrb	r3, [r3, #1]
 80125a4:	2b00      	cmp	r3, #0
 80125a6:	d000      	beq.n	80125aa <USB_EPStartXfer+0x3f2>
 80125a8:	e070      	b.n	801268c <USB_EPStartXfer+0x4d4>
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80125ae:	687b      	ldr	r3, [r7, #4]
 80125b0:	2250      	movs	r2, #80	@ 0x50
 80125b2:	5a9b      	ldrh	r3, [r3, r2]
 80125b4:	b29b      	uxth	r3, r3
 80125b6:	001a      	movs	r2, r3
 80125b8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125ba:	189b      	adds	r3, r3, r2
 80125bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80125be:	683b      	ldr	r3, [r7, #0]
 80125c0:	781b      	ldrb	r3, [r3, #0]
 80125c2:	00da      	lsls	r2, r3, #3
 80125c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80125c6:	18d3      	adds	r3, r2, r3
 80125c8:	4acd      	ldr	r2, [pc, #820]	@ (8012900 <USB_EPStartXfer+0x748>)
 80125ca:	4694      	mov	ip, r2
 80125cc:	4463      	add	r3, ip
 80125ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80125d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125d2:	881b      	ldrh	r3, [r3, #0]
 80125d4:	b29b      	uxth	r3, r3
 80125d6:	059b      	lsls	r3, r3, #22
 80125d8:	0d9b      	lsrs	r3, r3, #22
 80125da:	b29a      	uxth	r2, r3
 80125dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80125de:	801a      	strh	r2, [r3, #0]
 80125e0:	1d7b      	adds	r3, r7, #5
 80125e2:	33ff      	adds	r3, #255	@ 0xff
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2b3e      	cmp	r3, #62	@ 0x3e
 80125e8:	d922      	bls.n	8012630 <USB_EPStartXfer+0x478>
 80125ea:	1d7b      	adds	r3, r7, #5
 80125ec:	33ff      	adds	r3, #255	@ 0xff
 80125ee:	681b      	ldr	r3, [r3, #0]
 80125f0:	095b      	lsrs	r3, r3, #5
 80125f2:	21f8      	movs	r1, #248	@ 0xf8
 80125f4:	187a      	adds	r2, r7, r1
 80125f6:	6013      	str	r3, [r2, #0]
 80125f8:	1d7b      	adds	r3, r7, #5
 80125fa:	33ff      	adds	r3, #255	@ 0xff
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	221f      	movs	r2, #31
 8012600:	4013      	ands	r3, r2
 8012602:	d104      	bne.n	801260e <USB_EPStartXfer+0x456>
 8012604:	187b      	adds	r3, r7, r1
 8012606:	681b      	ldr	r3, [r3, #0]
 8012608:	3b01      	subs	r3, #1
 801260a:	187a      	adds	r2, r7, r1
 801260c:	6013      	str	r3, [r2, #0]
 801260e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012610:	881b      	ldrh	r3, [r3, #0]
 8012612:	b29a      	uxth	r2, r3
 8012614:	23f8      	movs	r3, #248	@ 0xf8
 8012616:	18fb      	adds	r3, r7, r3
 8012618:	681b      	ldr	r3, [r3, #0]
 801261a:	b29b      	uxth	r3, r3
 801261c:	029b      	lsls	r3, r3, #10
 801261e:	b29b      	uxth	r3, r3
 8012620:	4313      	orrs	r3, r2
 8012622:	b29b      	uxth	r3, r3
 8012624:	4ab7      	ldr	r2, [pc, #732]	@ (8012904 <USB_EPStartXfer+0x74c>)
 8012626:	4313      	orrs	r3, r2
 8012628:	b29a      	uxth	r2, r3
 801262a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801262c:	801a      	strh	r2, [r3, #0]
 801262e:	e04a      	b.n	80126c6 <USB_EPStartXfer+0x50e>
 8012630:	1d7b      	adds	r3, r7, #5
 8012632:	33ff      	adds	r3, #255	@ 0xff
 8012634:	681b      	ldr	r3, [r3, #0]
 8012636:	2b00      	cmp	r3, #0
 8012638:	d108      	bne.n	801264c <USB_EPStartXfer+0x494>
 801263a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801263c:	881b      	ldrh	r3, [r3, #0]
 801263e:	b29b      	uxth	r3, r3
 8012640:	4ab0      	ldr	r2, [pc, #704]	@ (8012904 <USB_EPStartXfer+0x74c>)
 8012642:	4313      	orrs	r3, r2
 8012644:	b29a      	uxth	r2, r3
 8012646:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012648:	801a      	strh	r2, [r3, #0]
 801264a:	e03c      	b.n	80126c6 <USB_EPStartXfer+0x50e>
 801264c:	1d7b      	adds	r3, r7, #5
 801264e:	33ff      	adds	r3, #255	@ 0xff
 8012650:	681b      	ldr	r3, [r3, #0]
 8012652:	085b      	lsrs	r3, r3, #1
 8012654:	21f8      	movs	r1, #248	@ 0xf8
 8012656:	187a      	adds	r2, r7, r1
 8012658:	6013      	str	r3, [r2, #0]
 801265a:	1d7b      	adds	r3, r7, #5
 801265c:	33ff      	adds	r3, #255	@ 0xff
 801265e:	681b      	ldr	r3, [r3, #0]
 8012660:	2201      	movs	r2, #1
 8012662:	4013      	ands	r3, r2
 8012664:	d004      	beq.n	8012670 <USB_EPStartXfer+0x4b8>
 8012666:	187b      	adds	r3, r7, r1
 8012668:	681b      	ldr	r3, [r3, #0]
 801266a:	3301      	adds	r3, #1
 801266c:	187a      	adds	r2, r7, r1
 801266e:	6013      	str	r3, [r2, #0]
 8012670:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012672:	881b      	ldrh	r3, [r3, #0]
 8012674:	b29a      	uxth	r2, r3
 8012676:	23f8      	movs	r3, #248	@ 0xf8
 8012678:	18fb      	adds	r3, r7, r3
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	b29b      	uxth	r3, r3
 801267e:	029b      	lsls	r3, r3, #10
 8012680:	b29b      	uxth	r3, r3
 8012682:	4313      	orrs	r3, r2
 8012684:	b29a      	uxth	r2, r3
 8012686:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012688:	801a      	strh	r2, [r3, #0]
 801268a:	e01c      	b.n	80126c6 <USB_EPStartXfer+0x50e>
 801268c:	683b      	ldr	r3, [r7, #0]
 801268e:	785b      	ldrb	r3, [r3, #1]
 8012690:	2b01      	cmp	r3, #1
 8012692:	d118      	bne.n	80126c6 <USB_EPStartXfer+0x50e>
 8012694:	687b      	ldr	r3, [r7, #4]
 8012696:	653b      	str	r3, [r7, #80]	@ 0x50
 8012698:	687b      	ldr	r3, [r7, #4]
 801269a:	2250      	movs	r2, #80	@ 0x50
 801269c:	5a9b      	ldrh	r3, [r3, r2]
 801269e:	b29b      	uxth	r3, r3
 80126a0:	001a      	movs	r2, r3
 80126a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126a4:	189b      	adds	r3, r3, r2
 80126a6:	653b      	str	r3, [r7, #80]	@ 0x50
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	781b      	ldrb	r3, [r3, #0]
 80126ac:	00da      	lsls	r2, r3, #3
 80126ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80126b0:	18d3      	adds	r3, r2, r3
 80126b2:	4a93      	ldr	r2, [pc, #588]	@ (8012900 <USB_EPStartXfer+0x748>)
 80126b4:	4694      	mov	ip, r2
 80126b6:	4463      	add	r3, ip
 80126b8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80126ba:	1d7b      	adds	r3, r7, #5
 80126bc:	33ff      	adds	r3, #255	@ 0xff
 80126be:	681b      	ldr	r3, [r3, #0]
 80126c0:	b29a      	uxth	r2, r3
 80126c2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80126c4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80126c6:	2076      	movs	r0, #118	@ 0x76
 80126c8:	183b      	adds	r3, r7, r0
 80126ca:	683a      	ldr	r2, [r7, #0]
 80126cc:	8912      	ldrh	r2, [r2, #8]
 80126ce:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80126d0:	683b      	ldr	r3, [r7, #0]
 80126d2:	6959      	ldr	r1, [r3, #20]
 80126d4:	1d7b      	adds	r3, r7, #5
 80126d6:	33ff      	adds	r3, #255	@ 0xff
 80126d8:	681b      	ldr	r3, [r3, #0]
 80126da:	b29c      	uxth	r4, r3
 80126dc:	183b      	adds	r3, r7, r0
 80126de:	881a      	ldrh	r2, [r3, #0]
 80126e0:	6878      	ldr	r0, [r7, #4]
 80126e2:	0023      	movs	r3, r4
 80126e4:	f000 ffda 	bl	801369c <USB_WritePMA>
            ep->xfer_buff += len;
 80126e8:	683b      	ldr	r3, [r7, #0]
 80126ea:	695a      	ldr	r2, [r3, #20]
 80126ec:	1d7b      	adds	r3, r7, #5
 80126ee:	33ff      	adds	r3, #255	@ 0xff
 80126f0:	681b      	ldr	r3, [r3, #0]
 80126f2:	18d2      	adds	r2, r2, r3
 80126f4:	683b      	ldr	r3, [r7, #0]
 80126f6:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80126f8:	683b      	ldr	r3, [r7, #0]
 80126fa:	6a1a      	ldr	r2, [r3, #32]
 80126fc:	683b      	ldr	r3, [r7, #0]
 80126fe:	691b      	ldr	r3, [r3, #16]
 8012700:	429a      	cmp	r2, r3
 8012702:	d908      	bls.n	8012716 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8012704:	683b      	ldr	r3, [r7, #0]
 8012706:	6a1a      	ldr	r2, [r3, #32]
 8012708:	1d7b      	adds	r3, r7, #5
 801270a:	33ff      	adds	r3, #255	@ 0xff
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	1ad2      	subs	r2, r2, r3
 8012710:	683b      	ldr	r3, [r7, #0]
 8012712:	621a      	str	r2, [r3, #32]
 8012714:	e007      	b.n	8012726 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8012716:	683b      	ldr	r3, [r7, #0]
 8012718:	6a1b      	ldr	r3, [r3, #32]
 801271a:	1d7a      	adds	r2, r7, #5
 801271c:	32ff      	adds	r2, #255	@ 0xff
 801271e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	2200      	movs	r2, #0
 8012724:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8012726:	687b      	ldr	r3, [r7, #4]
 8012728:	643b      	str	r3, [r7, #64]	@ 0x40
 801272a:	683b      	ldr	r3, [r7, #0]
 801272c:	785b      	ldrb	r3, [r3, #1]
 801272e:	2b00      	cmp	r3, #0
 8012730:	d000      	beq.n	8012734 <USB_EPStartXfer+0x57c>
 8012732:	e070      	b.n	8012816 <USB_EPStartXfer+0x65e>
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012738:	687b      	ldr	r3, [r7, #4]
 801273a:	2250      	movs	r2, #80	@ 0x50
 801273c:	5a9b      	ldrh	r3, [r3, r2]
 801273e:	b29b      	uxth	r3, r3
 8012740:	001a      	movs	r2, r3
 8012742:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012744:	189b      	adds	r3, r3, r2
 8012746:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012748:	683b      	ldr	r3, [r7, #0]
 801274a:	781b      	ldrb	r3, [r3, #0]
 801274c:	00da      	lsls	r2, r3, #3
 801274e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012750:	18d3      	adds	r3, r2, r3
 8012752:	4a6d      	ldr	r2, [pc, #436]	@ (8012908 <USB_EPStartXfer+0x750>)
 8012754:	4694      	mov	ip, r2
 8012756:	4463      	add	r3, ip
 8012758:	637b      	str	r3, [r7, #52]	@ 0x34
 801275a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801275c:	881b      	ldrh	r3, [r3, #0]
 801275e:	b29b      	uxth	r3, r3
 8012760:	059b      	lsls	r3, r3, #22
 8012762:	0d9b      	lsrs	r3, r3, #22
 8012764:	b29a      	uxth	r2, r3
 8012766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012768:	801a      	strh	r2, [r3, #0]
 801276a:	1d7b      	adds	r3, r7, #5
 801276c:	33ff      	adds	r3, #255	@ 0xff
 801276e:	681b      	ldr	r3, [r3, #0]
 8012770:	2b3e      	cmp	r3, #62	@ 0x3e
 8012772:	d922      	bls.n	80127ba <USB_EPStartXfer+0x602>
 8012774:	1d7b      	adds	r3, r7, #5
 8012776:	33ff      	adds	r3, #255	@ 0xff
 8012778:	681b      	ldr	r3, [r3, #0]
 801277a:	095b      	lsrs	r3, r3, #5
 801277c:	21f4      	movs	r1, #244	@ 0xf4
 801277e:	187a      	adds	r2, r7, r1
 8012780:	6013      	str	r3, [r2, #0]
 8012782:	1d7b      	adds	r3, r7, #5
 8012784:	33ff      	adds	r3, #255	@ 0xff
 8012786:	681b      	ldr	r3, [r3, #0]
 8012788:	221f      	movs	r2, #31
 801278a:	4013      	ands	r3, r2
 801278c:	d104      	bne.n	8012798 <USB_EPStartXfer+0x5e0>
 801278e:	187b      	adds	r3, r7, r1
 8012790:	681b      	ldr	r3, [r3, #0]
 8012792:	3b01      	subs	r3, #1
 8012794:	187a      	adds	r2, r7, r1
 8012796:	6013      	str	r3, [r2, #0]
 8012798:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801279a:	881b      	ldrh	r3, [r3, #0]
 801279c:	b29a      	uxth	r2, r3
 801279e:	23f4      	movs	r3, #244	@ 0xf4
 80127a0:	18fb      	adds	r3, r7, r3
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	b29b      	uxth	r3, r3
 80127a6:	029b      	lsls	r3, r3, #10
 80127a8:	b29b      	uxth	r3, r3
 80127aa:	4313      	orrs	r3, r2
 80127ac:	b29b      	uxth	r3, r3
 80127ae:	4a55      	ldr	r2, [pc, #340]	@ (8012904 <USB_EPStartXfer+0x74c>)
 80127b0:	4313      	orrs	r3, r2
 80127b2:	b29a      	uxth	r2, r3
 80127b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127b6:	801a      	strh	r2, [r3, #0]
 80127b8:	e048      	b.n	801284c <USB_EPStartXfer+0x694>
 80127ba:	1d7b      	adds	r3, r7, #5
 80127bc:	33ff      	adds	r3, #255	@ 0xff
 80127be:	681b      	ldr	r3, [r3, #0]
 80127c0:	2b00      	cmp	r3, #0
 80127c2:	d108      	bne.n	80127d6 <USB_EPStartXfer+0x61e>
 80127c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127c6:	881b      	ldrh	r3, [r3, #0]
 80127c8:	b29b      	uxth	r3, r3
 80127ca:	4a4e      	ldr	r2, [pc, #312]	@ (8012904 <USB_EPStartXfer+0x74c>)
 80127cc:	4313      	orrs	r3, r2
 80127ce:	b29a      	uxth	r2, r3
 80127d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127d2:	801a      	strh	r2, [r3, #0]
 80127d4:	e03a      	b.n	801284c <USB_EPStartXfer+0x694>
 80127d6:	1d7b      	adds	r3, r7, #5
 80127d8:	33ff      	adds	r3, #255	@ 0xff
 80127da:	681b      	ldr	r3, [r3, #0]
 80127dc:	085b      	lsrs	r3, r3, #1
 80127de:	21f4      	movs	r1, #244	@ 0xf4
 80127e0:	187a      	adds	r2, r7, r1
 80127e2:	6013      	str	r3, [r2, #0]
 80127e4:	1d7b      	adds	r3, r7, #5
 80127e6:	33ff      	adds	r3, #255	@ 0xff
 80127e8:	681b      	ldr	r3, [r3, #0]
 80127ea:	2201      	movs	r2, #1
 80127ec:	4013      	ands	r3, r2
 80127ee:	d004      	beq.n	80127fa <USB_EPStartXfer+0x642>
 80127f0:	187b      	adds	r3, r7, r1
 80127f2:	681b      	ldr	r3, [r3, #0]
 80127f4:	3301      	adds	r3, #1
 80127f6:	187a      	adds	r2, r7, r1
 80127f8:	6013      	str	r3, [r2, #0]
 80127fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80127fc:	881b      	ldrh	r3, [r3, #0]
 80127fe:	b29a      	uxth	r2, r3
 8012800:	23f4      	movs	r3, #244	@ 0xf4
 8012802:	18fb      	adds	r3, r7, r3
 8012804:	681b      	ldr	r3, [r3, #0]
 8012806:	b29b      	uxth	r3, r3
 8012808:	029b      	lsls	r3, r3, #10
 801280a:	b29b      	uxth	r3, r3
 801280c:	4313      	orrs	r3, r2
 801280e:	b29a      	uxth	r2, r3
 8012810:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012812:	801a      	strh	r2, [r3, #0]
 8012814:	e01a      	b.n	801284c <USB_EPStartXfer+0x694>
 8012816:	683b      	ldr	r3, [r7, #0]
 8012818:	785b      	ldrb	r3, [r3, #1]
 801281a:	2b01      	cmp	r3, #1
 801281c:	d116      	bne.n	801284c <USB_EPStartXfer+0x694>
 801281e:	687b      	ldr	r3, [r7, #4]
 8012820:	2250      	movs	r2, #80	@ 0x50
 8012822:	5a9b      	ldrh	r3, [r3, r2]
 8012824:	b29b      	uxth	r3, r3
 8012826:	001a      	movs	r2, r3
 8012828:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801282a:	189b      	adds	r3, r3, r2
 801282c:	643b      	str	r3, [r7, #64]	@ 0x40
 801282e:	683b      	ldr	r3, [r7, #0]
 8012830:	781b      	ldrb	r3, [r3, #0]
 8012832:	00da      	lsls	r2, r3, #3
 8012834:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012836:	18d3      	adds	r3, r2, r3
 8012838:	4a33      	ldr	r2, [pc, #204]	@ (8012908 <USB_EPStartXfer+0x750>)
 801283a:	4694      	mov	ip, r2
 801283c:	4463      	add	r3, ip
 801283e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012840:	1d7b      	adds	r3, r7, #5
 8012842:	33ff      	adds	r3, #255	@ 0xff
 8012844:	681b      	ldr	r3, [r3, #0]
 8012846:	b29a      	uxth	r2, r3
 8012848:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801284a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 801284c:	2076      	movs	r0, #118	@ 0x76
 801284e:	183b      	adds	r3, r7, r0
 8012850:	683a      	ldr	r2, [r7, #0]
 8012852:	8952      	ldrh	r2, [r2, #10]
 8012854:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012856:	683b      	ldr	r3, [r7, #0]
 8012858:	6959      	ldr	r1, [r3, #20]
 801285a:	1d7b      	adds	r3, r7, #5
 801285c:	33ff      	adds	r3, #255	@ 0xff
 801285e:	681b      	ldr	r3, [r3, #0]
 8012860:	b29c      	uxth	r4, r3
 8012862:	183b      	adds	r3, r7, r0
 8012864:	881a      	ldrh	r2, [r3, #0]
 8012866:	6878      	ldr	r0, [r7, #4]
 8012868:	0023      	movs	r3, r4
 801286a:	f000 ff17 	bl	801369c <USB_WritePMA>
 801286e:	e1b6      	b.n	8012bde <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8012870:	683b      	ldr	r3, [r7, #0]
 8012872:	6a1b      	ldr	r3, [r3, #32]
 8012874:	1d7a      	adds	r2, r7, #5
 8012876:	32ff      	adds	r2, #255	@ 0xff
 8012878:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 801287a:	687a      	ldr	r2, [r7, #4]
 801287c:	683b      	ldr	r3, [r7, #0]
 801287e:	781b      	ldrb	r3, [r3, #0]
 8012880:	009b      	lsls	r3, r3, #2
 8012882:	18d3      	adds	r3, r2, r3
 8012884:	881b      	ldrh	r3, [r3, #0]
 8012886:	b29a      	uxth	r2, r3
 8012888:	2062      	movs	r0, #98	@ 0x62
 801288a:	183b      	adds	r3, r7, r0
 801288c:	491f      	ldr	r1, [pc, #124]	@ (801290c <USB_EPStartXfer+0x754>)
 801288e:	400a      	ands	r2, r1
 8012890:	801a      	strh	r2, [r3, #0]
 8012892:	687a      	ldr	r2, [r7, #4]
 8012894:	683b      	ldr	r3, [r7, #0]
 8012896:	781b      	ldrb	r3, [r3, #0]
 8012898:	009b      	lsls	r3, r3, #2
 801289a:	18d3      	adds	r3, r2, r3
 801289c:	183a      	adds	r2, r7, r0
 801289e:	8812      	ldrh	r2, [r2, #0]
 80128a0:	491b      	ldr	r1, [pc, #108]	@ (8012910 <USB_EPStartXfer+0x758>)
 80128a2:	430a      	orrs	r2, r1
 80128a4:	b292      	uxth	r2, r2
 80128a6:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2250      	movs	r2, #80	@ 0x50
 80128b0:	5a9b      	ldrh	r3, [r3, r2]
 80128b2:	b29b      	uxth	r3, r3
 80128b4:	001a      	movs	r2, r3
 80128b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128b8:	189b      	adds	r3, r3, r2
 80128ba:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80128bc:	683b      	ldr	r3, [r7, #0]
 80128be:	781b      	ldrb	r3, [r3, #0]
 80128c0:	00da      	lsls	r2, r3, #3
 80128c2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80128c4:	18d3      	adds	r3, r2, r3
 80128c6:	4a0e      	ldr	r2, [pc, #56]	@ (8012900 <USB_EPStartXfer+0x748>)
 80128c8:	4694      	mov	ip, r2
 80128ca:	4463      	add	r3, ip
 80128cc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80128ce:	1d7b      	adds	r3, r7, #5
 80128d0:	33ff      	adds	r3, #255	@ 0xff
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	b29a      	uxth	r2, r3
 80128d6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80128d8:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80128da:	2076      	movs	r0, #118	@ 0x76
 80128dc:	183b      	adds	r3, r7, r0
 80128de:	683a      	ldr	r2, [r7, #0]
 80128e0:	8912      	ldrh	r2, [r2, #8]
 80128e2:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80128e4:	683b      	ldr	r3, [r7, #0]
 80128e6:	6959      	ldr	r1, [r3, #20]
 80128e8:	1d7b      	adds	r3, r7, #5
 80128ea:	33ff      	adds	r3, #255	@ 0xff
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	b29c      	uxth	r4, r3
 80128f0:	183b      	adds	r3, r7, r0
 80128f2:	881a      	ldrh	r2, [r3, #0]
 80128f4:	6878      	ldr	r0, [r7, #4]
 80128f6:	0023      	movs	r3, r4
 80128f8:	f000 fed0 	bl	801369c <USB_WritePMA>
 80128fc:	e16f      	b.n	8012bde <USB_EPStartXfer+0xa26>
 80128fe:	46c0      	nop			@ (mov r8, r8)
 8012900:	00000402 	.word	0x00000402
 8012904:	ffff8000 	.word	0xffff8000
 8012908:	00000406 	.word	0x00000406
 801290c:	ffff8e8f 	.word	0xffff8e8f
 8012910:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8012914:	683b      	ldr	r3, [r7, #0]
 8012916:	6a1a      	ldr	r2, [r3, #32]
 8012918:	1d7b      	adds	r3, r7, #5
 801291a:	33ff      	adds	r3, #255	@ 0xff
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	1ad2      	subs	r2, r2, r3
 8012920:	683b      	ldr	r3, [r7, #0]
 8012922:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8012924:	687a      	ldr	r2, [r7, #4]
 8012926:	683b      	ldr	r3, [r7, #0]
 8012928:	781b      	ldrb	r3, [r3, #0]
 801292a:	009b      	lsls	r3, r3, #2
 801292c:	18d3      	adds	r3, r2, r3
 801292e:	881b      	ldrh	r3, [r3, #0]
 8012930:	b29b      	uxth	r3, r3
 8012932:	001a      	movs	r2, r3
 8012934:	2340      	movs	r3, #64	@ 0x40
 8012936:	4013      	ands	r3, r2
 8012938:	d100      	bne.n	801293c <USB_EPStartXfer+0x784>
 801293a:	e0a4      	b.n	8012a86 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	673b      	str	r3, [r7, #112]	@ 0x70
 8012940:	683b      	ldr	r3, [r7, #0]
 8012942:	785b      	ldrb	r3, [r3, #1]
 8012944:	2b00      	cmp	r3, #0
 8012946:	d000      	beq.n	801294a <USB_EPStartXfer+0x792>
 8012948:	e070      	b.n	8012a2c <USB_EPStartXfer+0x874>
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	2250      	movs	r2, #80	@ 0x50
 8012952:	5a9b      	ldrh	r3, [r3, r2]
 8012954:	b29b      	uxth	r3, r3
 8012956:	001a      	movs	r2, r3
 8012958:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801295a:	189b      	adds	r3, r3, r2
 801295c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	781b      	ldrb	r3, [r3, #0]
 8012962:	00da      	lsls	r2, r3, #3
 8012964:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8012966:	18d3      	adds	r3, r2, r3
 8012968:	4abc      	ldr	r2, [pc, #752]	@ (8012c5c <USB_EPStartXfer+0xaa4>)
 801296a:	4694      	mov	ip, r2
 801296c:	4463      	add	r3, ip
 801296e:	667b      	str	r3, [r7, #100]	@ 0x64
 8012970:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012972:	881b      	ldrh	r3, [r3, #0]
 8012974:	b29b      	uxth	r3, r3
 8012976:	059b      	lsls	r3, r3, #22
 8012978:	0d9b      	lsrs	r3, r3, #22
 801297a:	b29a      	uxth	r2, r3
 801297c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801297e:	801a      	strh	r2, [r3, #0]
 8012980:	1d7b      	adds	r3, r7, #5
 8012982:	33ff      	adds	r3, #255	@ 0xff
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	2b3e      	cmp	r3, #62	@ 0x3e
 8012988:	d922      	bls.n	80129d0 <USB_EPStartXfer+0x818>
 801298a:	1d7b      	adds	r3, r7, #5
 801298c:	33ff      	adds	r3, #255	@ 0xff
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	095b      	lsrs	r3, r3, #5
 8012992:	21f0      	movs	r1, #240	@ 0xf0
 8012994:	187a      	adds	r2, r7, r1
 8012996:	6013      	str	r3, [r2, #0]
 8012998:	1d7b      	adds	r3, r7, #5
 801299a:	33ff      	adds	r3, #255	@ 0xff
 801299c:	681b      	ldr	r3, [r3, #0]
 801299e:	221f      	movs	r2, #31
 80129a0:	4013      	ands	r3, r2
 80129a2:	d104      	bne.n	80129ae <USB_EPStartXfer+0x7f6>
 80129a4:	187b      	adds	r3, r7, r1
 80129a6:	681b      	ldr	r3, [r3, #0]
 80129a8:	3b01      	subs	r3, #1
 80129aa:	187a      	adds	r2, r7, r1
 80129ac:	6013      	str	r3, [r2, #0]
 80129ae:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80129b0:	881b      	ldrh	r3, [r3, #0]
 80129b2:	b29a      	uxth	r2, r3
 80129b4:	23f0      	movs	r3, #240	@ 0xf0
 80129b6:	18fb      	adds	r3, r7, r3
 80129b8:	681b      	ldr	r3, [r3, #0]
 80129ba:	b29b      	uxth	r3, r3
 80129bc:	029b      	lsls	r3, r3, #10
 80129be:	b29b      	uxth	r3, r3
 80129c0:	4313      	orrs	r3, r2
 80129c2:	b29b      	uxth	r3, r3
 80129c4:	4aa6      	ldr	r2, [pc, #664]	@ (8012c60 <USB_EPStartXfer+0xaa8>)
 80129c6:	4313      	orrs	r3, r2
 80129c8:	b29a      	uxth	r2, r3
 80129ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80129cc:	801a      	strh	r2, [r3, #0]
 80129ce:	e048      	b.n	8012a62 <USB_EPStartXfer+0x8aa>
 80129d0:	1d7b      	adds	r3, r7, #5
 80129d2:	33ff      	adds	r3, #255	@ 0xff
 80129d4:	681b      	ldr	r3, [r3, #0]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d108      	bne.n	80129ec <USB_EPStartXfer+0x834>
 80129da:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80129dc:	881b      	ldrh	r3, [r3, #0]
 80129de:	b29b      	uxth	r3, r3
 80129e0:	4a9f      	ldr	r2, [pc, #636]	@ (8012c60 <USB_EPStartXfer+0xaa8>)
 80129e2:	4313      	orrs	r3, r2
 80129e4:	b29a      	uxth	r2, r3
 80129e6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80129e8:	801a      	strh	r2, [r3, #0]
 80129ea:	e03a      	b.n	8012a62 <USB_EPStartXfer+0x8aa>
 80129ec:	1d7b      	adds	r3, r7, #5
 80129ee:	33ff      	adds	r3, #255	@ 0xff
 80129f0:	681b      	ldr	r3, [r3, #0]
 80129f2:	085b      	lsrs	r3, r3, #1
 80129f4:	21f0      	movs	r1, #240	@ 0xf0
 80129f6:	187a      	adds	r2, r7, r1
 80129f8:	6013      	str	r3, [r2, #0]
 80129fa:	1d7b      	adds	r3, r7, #5
 80129fc:	33ff      	adds	r3, #255	@ 0xff
 80129fe:	681b      	ldr	r3, [r3, #0]
 8012a00:	2201      	movs	r2, #1
 8012a02:	4013      	ands	r3, r2
 8012a04:	d004      	beq.n	8012a10 <USB_EPStartXfer+0x858>
 8012a06:	187b      	adds	r3, r7, r1
 8012a08:	681b      	ldr	r3, [r3, #0]
 8012a0a:	3301      	adds	r3, #1
 8012a0c:	187a      	adds	r2, r7, r1
 8012a0e:	6013      	str	r3, [r2, #0]
 8012a10:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a12:	881b      	ldrh	r3, [r3, #0]
 8012a14:	b29a      	uxth	r2, r3
 8012a16:	23f0      	movs	r3, #240	@ 0xf0
 8012a18:	18fb      	adds	r3, r7, r3
 8012a1a:	681b      	ldr	r3, [r3, #0]
 8012a1c:	b29b      	uxth	r3, r3
 8012a1e:	029b      	lsls	r3, r3, #10
 8012a20:	b29b      	uxth	r3, r3
 8012a22:	4313      	orrs	r3, r2
 8012a24:	b29a      	uxth	r2, r3
 8012a26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8012a28:	801a      	strh	r2, [r3, #0]
 8012a2a:	e01a      	b.n	8012a62 <USB_EPStartXfer+0x8aa>
 8012a2c:	683b      	ldr	r3, [r7, #0]
 8012a2e:	785b      	ldrb	r3, [r3, #1]
 8012a30:	2b01      	cmp	r3, #1
 8012a32:	d116      	bne.n	8012a62 <USB_EPStartXfer+0x8aa>
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2250      	movs	r2, #80	@ 0x50
 8012a38:	5a9b      	ldrh	r3, [r3, r2]
 8012a3a:	b29b      	uxth	r3, r3
 8012a3c:	001a      	movs	r2, r3
 8012a3e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012a40:	189b      	adds	r3, r3, r2
 8012a42:	673b      	str	r3, [r7, #112]	@ 0x70
 8012a44:	683b      	ldr	r3, [r7, #0]
 8012a46:	781b      	ldrb	r3, [r3, #0]
 8012a48:	00da      	lsls	r2, r3, #3
 8012a4a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8012a4c:	18d3      	adds	r3, r2, r3
 8012a4e:	4a83      	ldr	r2, [pc, #524]	@ (8012c5c <USB_EPStartXfer+0xaa4>)
 8012a50:	4694      	mov	ip, r2
 8012a52:	4463      	add	r3, ip
 8012a54:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8012a56:	1d7b      	adds	r3, r7, #5
 8012a58:	33ff      	adds	r3, #255	@ 0xff
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	b29a      	uxth	r2, r3
 8012a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8012a60:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8012a62:	2076      	movs	r0, #118	@ 0x76
 8012a64:	183b      	adds	r3, r7, r0
 8012a66:	683a      	ldr	r2, [r7, #0]
 8012a68:	8952      	ldrh	r2, [r2, #10]
 8012a6a:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012a6c:	683b      	ldr	r3, [r7, #0]
 8012a6e:	6959      	ldr	r1, [r3, #20]
 8012a70:	1d7b      	adds	r3, r7, #5
 8012a72:	33ff      	adds	r3, #255	@ 0xff
 8012a74:	681b      	ldr	r3, [r3, #0]
 8012a76:	b29c      	uxth	r4, r3
 8012a78:	183b      	adds	r3, r7, r0
 8012a7a:	881a      	ldrh	r2, [r3, #0]
 8012a7c:	6878      	ldr	r0, [r7, #4]
 8012a7e:	0023      	movs	r3, r4
 8012a80:	f000 fe0c 	bl	801369c <USB_WritePMA>
 8012a84:	e0ab      	b.n	8012bde <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8012a86:	683b      	ldr	r3, [r7, #0]
 8012a88:	785b      	ldrb	r3, [r3, #1]
 8012a8a:	2b00      	cmp	r3, #0
 8012a8c:	d000      	beq.n	8012a90 <USB_EPStartXfer+0x8d8>
 8012a8e:	e070      	b.n	8012b72 <USB_EPStartXfer+0x9ba>
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2250      	movs	r2, #80	@ 0x50
 8012a98:	5a9b      	ldrh	r3, [r3, r2]
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	001a      	movs	r2, r3
 8012a9e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012aa0:	189b      	adds	r3, r3, r2
 8012aa2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8012aa4:	683b      	ldr	r3, [r7, #0]
 8012aa6:	781b      	ldrb	r3, [r3, #0]
 8012aa8:	00da      	lsls	r2, r3, #3
 8012aaa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8012aac:	18d3      	adds	r3, r2, r3
 8012aae:	4a6d      	ldr	r2, [pc, #436]	@ (8012c64 <USB_EPStartXfer+0xaac>)
 8012ab0:	4694      	mov	ip, r2
 8012ab2:	4463      	add	r3, ip
 8012ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8012ab6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ab8:	881b      	ldrh	r3, [r3, #0]
 8012aba:	b29b      	uxth	r3, r3
 8012abc:	059b      	lsls	r3, r3, #22
 8012abe:	0d9b      	lsrs	r3, r3, #22
 8012ac0:	b29a      	uxth	r2, r3
 8012ac2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012ac4:	801a      	strh	r2, [r3, #0]
 8012ac6:	1d7b      	adds	r3, r7, #5
 8012ac8:	33ff      	adds	r3, #255	@ 0xff
 8012aca:	681b      	ldr	r3, [r3, #0]
 8012acc:	2b3e      	cmp	r3, #62	@ 0x3e
 8012ace:	d922      	bls.n	8012b16 <USB_EPStartXfer+0x95e>
 8012ad0:	1d7b      	adds	r3, r7, #5
 8012ad2:	33ff      	adds	r3, #255	@ 0xff
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	095b      	lsrs	r3, r3, #5
 8012ad8:	21ec      	movs	r1, #236	@ 0xec
 8012ada:	187a      	adds	r2, r7, r1
 8012adc:	6013      	str	r3, [r2, #0]
 8012ade:	1d7b      	adds	r3, r7, #5
 8012ae0:	33ff      	adds	r3, #255	@ 0xff
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	221f      	movs	r2, #31
 8012ae6:	4013      	ands	r3, r2
 8012ae8:	d104      	bne.n	8012af4 <USB_EPStartXfer+0x93c>
 8012aea:	187b      	adds	r3, r7, r1
 8012aec:	681b      	ldr	r3, [r3, #0]
 8012aee:	3b01      	subs	r3, #1
 8012af0:	187a      	adds	r2, r7, r1
 8012af2:	6013      	str	r3, [r2, #0]
 8012af4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012af6:	881b      	ldrh	r3, [r3, #0]
 8012af8:	b29a      	uxth	r2, r3
 8012afa:	23ec      	movs	r3, #236	@ 0xec
 8012afc:	18fb      	adds	r3, r7, r3
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	b29b      	uxth	r3, r3
 8012b02:	029b      	lsls	r3, r3, #10
 8012b04:	b29b      	uxth	r3, r3
 8012b06:	4313      	orrs	r3, r2
 8012b08:	b29b      	uxth	r3, r3
 8012b0a:	4a55      	ldr	r2, [pc, #340]	@ (8012c60 <USB_EPStartXfer+0xaa8>)
 8012b0c:	4313      	orrs	r3, r2
 8012b0e:	b29a      	uxth	r2, r3
 8012b10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b12:	801a      	strh	r2, [r3, #0]
 8012b14:	e052      	b.n	8012bbc <USB_EPStartXfer+0xa04>
 8012b16:	1d7b      	adds	r3, r7, #5
 8012b18:	33ff      	adds	r3, #255	@ 0xff
 8012b1a:	681b      	ldr	r3, [r3, #0]
 8012b1c:	2b00      	cmp	r3, #0
 8012b1e:	d108      	bne.n	8012b32 <USB_EPStartXfer+0x97a>
 8012b20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b22:	881b      	ldrh	r3, [r3, #0]
 8012b24:	b29b      	uxth	r3, r3
 8012b26:	4a4e      	ldr	r2, [pc, #312]	@ (8012c60 <USB_EPStartXfer+0xaa8>)
 8012b28:	4313      	orrs	r3, r2
 8012b2a:	b29a      	uxth	r2, r3
 8012b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b2e:	801a      	strh	r2, [r3, #0]
 8012b30:	e044      	b.n	8012bbc <USB_EPStartXfer+0xa04>
 8012b32:	1d7b      	adds	r3, r7, #5
 8012b34:	33ff      	adds	r3, #255	@ 0xff
 8012b36:	681b      	ldr	r3, [r3, #0]
 8012b38:	085b      	lsrs	r3, r3, #1
 8012b3a:	21ec      	movs	r1, #236	@ 0xec
 8012b3c:	187a      	adds	r2, r7, r1
 8012b3e:	6013      	str	r3, [r2, #0]
 8012b40:	1d7b      	adds	r3, r7, #5
 8012b42:	33ff      	adds	r3, #255	@ 0xff
 8012b44:	681b      	ldr	r3, [r3, #0]
 8012b46:	2201      	movs	r2, #1
 8012b48:	4013      	ands	r3, r2
 8012b4a:	d004      	beq.n	8012b56 <USB_EPStartXfer+0x99e>
 8012b4c:	187b      	adds	r3, r7, r1
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	3301      	adds	r3, #1
 8012b52:	187a      	adds	r2, r7, r1
 8012b54:	6013      	str	r3, [r2, #0]
 8012b56:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b58:	881b      	ldrh	r3, [r3, #0]
 8012b5a:	b29a      	uxth	r2, r3
 8012b5c:	23ec      	movs	r3, #236	@ 0xec
 8012b5e:	18fb      	adds	r3, r7, r3
 8012b60:	681b      	ldr	r3, [r3, #0]
 8012b62:	b29b      	uxth	r3, r3
 8012b64:	029b      	lsls	r3, r3, #10
 8012b66:	b29b      	uxth	r3, r3
 8012b68:	4313      	orrs	r3, r2
 8012b6a:	b29a      	uxth	r2, r3
 8012b6c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8012b6e:	801a      	strh	r2, [r3, #0]
 8012b70:	e024      	b.n	8012bbc <USB_EPStartXfer+0xa04>
 8012b72:	683b      	ldr	r3, [r7, #0]
 8012b74:	785b      	ldrb	r3, [r3, #1]
 8012b76:	2b01      	cmp	r3, #1
 8012b78:	d120      	bne.n	8012bbc <USB_EPStartXfer+0xa04>
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	2184      	movs	r1, #132	@ 0x84
 8012b7e:	187a      	adds	r2, r7, r1
 8012b80:	6013      	str	r3, [r2, #0]
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	2250      	movs	r2, #80	@ 0x50
 8012b86:	5a9b      	ldrh	r3, [r3, r2]
 8012b88:	b29b      	uxth	r3, r3
 8012b8a:	001a      	movs	r2, r3
 8012b8c:	187b      	adds	r3, r7, r1
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	189b      	adds	r3, r3, r2
 8012b92:	187a      	adds	r2, r7, r1
 8012b94:	6013      	str	r3, [r2, #0]
 8012b96:	683b      	ldr	r3, [r7, #0]
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	00da      	lsls	r2, r3, #3
 8012b9c:	187b      	adds	r3, r7, r1
 8012b9e:	681b      	ldr	r3, [r3, #0]
 8012ba0:	18d3      	adds	r3, r2, r3
 8012ba2:	4a30      	ldr	r2, [pc, #192]	@ (8012c64 <USB_EPStartXfer+0xaac>)
 8012ba4:	4694      	mov	ip, r2
 8012ba6:	4463      	add	r3, ip
 8012ba8:	2180      	movs	r1, #128	@ 0x80
 8012baa:	187a      	adds	r2, r7, r1
 8012bac:	6013      	str	r3, [r2, #0]
 8012bae:	1d7b      	adds	r3, r7, #5
 8012bb0:	33ff      	adds	r3, #255	@ 0xff
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	b29a      	uxth	r2, r3
 8012bb6:	187b      	adds	r3, r7, r1
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8012bbc:	2076      	movs	r0, #118	@ 0x76
 8012bbe:	183b      	adds	r3, r7, r0
 8012bc0:	683a      	ldr	r2, [r7, #0]
 8012bc2:	8912      	ldrh	r2, [r2, #8]
 8012bc4:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8012bc6:	683b      	ldr	r3, [r7, #0]
 8012bc8:	6959      	ldr	r1, [r3, #20]
 8012bca:	1d7b      	adds	r3, r7, #5
 8012bcc:	33ff      	adds	r3, #255	@ 0xff
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	b29c      	uxth	r4, r3
 8012bd2:	183b      	adds	r3, r7, r0
 8012bd4:	881a      	ldrh	r2, [r3, #0]
 8012bd6:	6878      	ldr	r0, [r7, #4]
 8012bd8:	0023      	movs	r3, r4
 8012bda:	f000 fd5f 	bl	801369c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8012bde:	687a      	ldr	r2, [r7, #4]
 8012be0:	683b      	ldr	r3, [r7, #0]
 8012be2:	781b      	ldrb	r3, [r3, #0]
 8012be4:	009b      	lsls	r3, r3, #2
 8012be6:	18d3      	adds	r3, r2, r3
 8012be8:	881b      	ldrh	r3, [r3, #0]
 8012bea:	b29a      	uxth	r2, r3
 8012bec:	200a      	movs	r0, #10
 8012bee:	183b      	adds	r3, r7, r0
 8012bf0:	491d      	ldr	r1, [pc, #116]	@ (8012c68 <USB_EPStartXfer+0xab0>)
 8012bf2:	400a      	ands	r2, r1
 8012bf4:	801a      	strh	r2, [r3, #0]
 8012bf6:	183b      	adds	r3, r7, r0
 8012bf8:	183a      	adds	r2, r7, r0
 8012bfa:	8812      	ldrh	r2, [r2, #0]
 8012bfc:	2110      	movs	r1, #16
 8012bfe:	404a      	eors	r2, r1
 8012c00:	801a      	strh	r2, [r3, #0]
 8012c02:	183b      	adds	r3, r7, r0
 8012c04:	183a      	adds	r2, r7, r0
 8012c06:	8812      	ldrh	r2, [r2, #0]
 8012c08:	2120      	movs	r1, #32
 8012c0a:	404a      	eors	r2, r1
 8012c0c:	801a      	strh	r2, [r3, #0]
 8012c0e:	687a      	ldr	r2, [r7, #4]
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	781b      	ldrb	r3, [r3, #0]
 8012c14:	009b      	lsls	r3, r3, #2
 8012c16:	18d3      	adds	r3, r2, r3
 8012c18:	183a      	adds	r2, r7, r0
 8012c1a:	8812      	ldrh	r2, [r2, #0]
 8012c1c:	4913      	ldr	r1, [pc, #76]	@ (8012c6c <USB_EPStartXfer+0xab4>)
 8012c1e:	430a      	orrs	r2, r1
 8012c20:	b292      	uxth	r2, r2
 8012c22:	801a      	strh	r2, [r3, #0]
 8012c24:	f000 fbf4 	bl	8013410 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8012c28:	683b      	ldr	r3, [r7, #0]
 8012c2a:	7b1b      	ldrb	r3, [r3, #12]
 8012c2c:	2b00      	cmp	r3, #0
 8012c2e:	d000      	beq.n	8012c32 <USB_EPStartXfer+0xa7a>
 8012c30:	e0a9      	b.n	8012d86 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8012c32:	683b      	ldr	r3, [r7, #0]
 8012c34:	699a      	ldr	r2, [r3, #24]
 8012c36:	683b      	ldr	r3, [r7, #0]
 8012c38:	691b      	ldr	r3, [r3, #16]
 8012c3a:	429a      	cmp	r2, r3
 8012c3c:	d918      	bls.n	8012c70 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8012c3e:	683b      	ldr	r3, [r7, #0]
 8012c40:	691b      	ldr	r3, [r3, #16]
 8012c42:	1d7a      	adds	r2, r7, #5
 8012c44:	32ff      	adds	r2, #255	@ 0xff
 8012c46:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8012c48:	683b      	ldr	r3, [r7, #0]
 8012c4a:	699a      	ldr	r2, [r3, #24]
 8012c4c:	1d7b      	adds	r3, r7, #5
 8012c4e:	33ff      	adds	r3, #255	@ 0xff
 8012c50:	681b      	ldr	r3, [r3, #0]
 8012c52:	1ad2      	subs	r2, r2, r3
 8012c54:	683b      	ldr	r3, [r7, #0]
 8012c56:	619a      	str	r2, [r3, #24]
 8012c58:	e012      	b.n	8012c80 <USB_EPStartXfer+0xac8>
 8012c5a:	46c0      	nop			@ (mov r8, r8)
 8012c5c:	00000406 	.word	0x00000406
 8012c60:	ffff8000 	.word	0xffff8000
 8012c64:	00000402 	.word	0x00000402
 8012c68:	ffff8fbf 	.word	0xffff8fbf
 8012c6c:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8012c70:	683b      	ldr	r3, [r7, #0]
 8012c72:	699b      	ldr	r3, [r3, #24]
 8012c74:	1d7a      	adds	r2, r7, #5
 8012c76:	32ff      	adds	r2, #255	@ 0xff
 8012c78:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8012c7a:	683b      	ldr	r3, [r7, #0]
 8012c7c:	2200      	movs	r2, #0
 8012c7e:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8012c80:	687b      	ldr	r3, [r7, #4]
 8012c82:	2190      	movs	r1, #144	@ 0x90
 8012c84:	187a      	adds	r2, r7, r1
 8012c86:	6013      	str	r3, [r2, #0]
 8012c88:	687b      	ldr	r3, [r7, #4]
 8012c8a:	2250      	movs	r2, #80	@ 0x50
 8012c8c:	5a9b      	ldrh	r3, [r3, r2]
 8012c8e:	b29b      	uxth	r3, r3
 8012c90:	001a      	movs	r2, r3
 8012c92:	187b      	adds	r3, r7, r1
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	189b      	adds	r3, r3, r2
 8012c98:	187a      	adds	r2, r7, r1
 8012c9a:	6013      	str	r3, [r2, #0]
 8012c9c:	683b      	ldr	r3, [r7, #0]
 8012c9e:	781b      	ldrb	r3, [r3, #0]
 8012ca0:	00da      	lsls	r2, r3, #3
 8012ca2:	187b      	adds	r3, r7, r1
 8012ca4:	681b      	ldr	r3, [r3, #0]
 8012ca6:	18d3      	adds	r3, r2, r3
 8012ca8:	4acf      	ldr	r2, [pc, #828]	@ (8012fe8 <USB_EPStartXfer+0xe30>)
 8012caa:	4694      	mov	ip, r2
 8012cac:	4463      	add	r3, ip
 8012cae:	218c      	movs	r1, #140	@ 0x8c
 8012cb0:	187a      	adds	r2, r7, r1
 8012cb2:	6013      	str	r3, [r2, #0]
 8012cb4:	187b      	adds	r3, r7, r1
 8012cb6:	681b      	ldr	r3, [r3, #0]
 8012cb8:	881b      	ldrh	r3, [r3, #0]
 8012cba:	b29b      	uxth	r3, r3
 8012cbc:	059b      	lsls	r3, r3, #22
 8012cbe:	0d9b      	lsrs	r3, r3, #22
 8012cc0:	b29a      	uxth	r2, r3
 8012cc2:	187b      	adds	r3, r7, r1
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	801a      	strh	r2, [r3, #0]
 8012cc8:	1d7b      	adds	r3, r7, #5
 8012cca:	33ff      	adds	r3, #255	@ 0xff
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	2b3e      	cmp	r3, #62	@ 0x3e
 8012cd0:	d925      	bls.n	8012d1e <USB_EPStartXfer+0xb66>
 8012cd2:	1d7b      	adds	r3, r7, #5
 8012cd4:	33ff      	adds	r3, #255	@ 0xff
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	095b      	lsrs	r3, r3, #5
 8012cda:	21e8      	movs	r1, #232	@ 0xe8
 8012cdc:	187a      	adds	r2, r7, r1
 8012cde:	6013      	str	r3, [r2, #0]
 8012ce0:	1d7b      	adds	r3, r7, #5
 8012ce2:	33ff      	adds	r3, #255	@ 0xff
 8012ce4:	681b      	ldr	r3, [r3, #0]
 8012ce6:	221f      	movs	r2, #31
 8012ce8:	4013      	ands	r3, r2
 8012cea:	d104      	bne.n	8012cf6 <USB_EPStartXfer+0xb3e>
 8012cec:	187b      	adds	r3, r7, r1
 8012cee:	681b      	ldr	r3, [r3, #0]
 8012cf0:	3b01      	subs	r3, #1
 8012cf2:	187a      	adds	r2, r7, r1
 8012cf4:	6013      	str	r3, [r2, #0]
 8012cf6:	218c      	movs	r1, #140	@ 0x8c
 8012cf8:	187b      	adds	r3, r7, r1
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	881b      	ldrh	r3, [r3, #0]
 8012cfe:	b29a      	uxth	r2, r3
 8012d00:	23e8      	movs	r3, #232	@ 0xe8
 8012d02:	18fb      	adds	r3, r7, r3
 8012d04:	681b      	ldr	r3, [r3, #0]
 8012d06:	b29b      	uxth	r3, r3
 8012d08:	029b      	lsls	r3, r3, #10
 8012d0a:	b29b      	uxth	r3, r3
 8012d0c:	4313      	orrs	r3, r2
 8012d0e:	b29b      	uxth	r3, r3
 8012d10:	4ab6      	ldr	r2, [pc, #728]	@ (8012fec <USB_EPStartXfer+0xe34>)
 8012d12:	4313      	orrs	r3, r2
 8012d14:	b29a      	uxth	r2, r3
 8012d16:	187b      	adds	r3, r7, r1
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	801a      	strh	r2, [r3, #0]
 8012d1c:	e353      	b.n	80133c6 <USB_EPStartXfer+0x120e>
 8012d1e:	1d7b      	adds	r3, r7, #5
 8012d20:	33ff      	adds	r3, #255	@ 0xff
 8012d22:	681b      	ldr	r3, [r3, #0]
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	d10b      	bne.n	8012d40 <USB_EPStartXfer+0xb88>
 8012d28:	218c      	movs	r1, #140	@ 0x8c
 8012d2a:	187b      	adds	r3, r7, r1
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	881b      	ldrh	r3, [r3, #0]
 8012d30:	b29b      	uxth	r3, r3
 8012d32:	4aae      	ldr	r2, [pc, #696]	@ (8012fec <USB_EPStartXfer+0xe34>)
 8012d34:	4313      	orrs	r3, r2
 8012d36:	b29a      	uxth	r2, r3
 8012d38:	187b      	adds	r3, r7, r1
 8012d3a:	681b      	ldr	r3, [r3, #0]
 8012d3c:	801a      	strh	r2, [r3, #0]
 8012d3e:	e342      	b.n	80133c6 <USB_EPStartXfer+0x120e>
 8012d40:	1d7b      	adds	r3, r7, #5
 8012d42:	33ff      	adds	r3, #255	@ 0xff
 8012d44:	681b      	ldr	r3, [r3, #0]
 8012d46:	085b      	lsrs	r3, r3, #1
 8012d48:	21e8      	movs	r1, #232	@ 0xe8
 8012d4a:	187a      	adds	r2, r7, r1
 8012d4c:	6013      	str	r3, [r2, #0]
 8012d4e:	1d7b      	adds	r3, r7, #5
 8012d50:	33ff      	adds	r3, #255	@ 0xff
 8012d52:	681b      	ldr	r3, [r3, #0]
 8012d54:	2201      	movs	r2, #1
 8012d56:	4013      	ands	r3, r2
 8012d58:	d004      	beq.n	8012d64 <USB_EPStartXfer+0xbac>
 8012d5a:	187b      	adds	r3, r7, r1
 8012d5c:	681b      	ldr	r3, [r3, #0]
 8012d5e:	3301      	adds	r3, #1
 8012d60:	187a      	adds	r2, r7, r1
 8012d62:	6013      	str	r3, [r2, #0]
 8012d64:	218c      	movs	r1, #140	@ 0x8c
 8012d66:	187b      	adds	r3, r7, r1
 8012d68:	681b      	ldr	r3, [r3, #0]
 8012d6a:	881b      	ldrh	r3, [r3, #0]
 8012d6c:	b29a      	uxth	r2, r3
 8012d6e:	23e8      	movs	r3, #232	@ 0xe8
 8012d70:	18fb      	adds	r3, r7, r3
 8012d72:	681b      	ldr	r3, [r3, #0]
 8012d74:	b29b      	uxth	r3, r3
 8012d76:	029b      	lsls	r3, r3, #10
 8012d78:	b29b      	uxth	r3, r3
 8012d7a:	4313      	orrs	r3, r2
 8012d7c:	b29a      	uxth	r2, r3
 8012d7e:	187b      	adds	r3, r7, r1
 8012d80:	681b      	ldr	r3, [r3, #0]
 8012d82:	801a      	strh	r2, [r3, #0]
 8012d84:	e31f      	b.n	80133c6 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8012d86:	683b      	ldr	r3, [r7, #0]
 8012d88:	78db      	ldrb	r3, [r3, #3]
 8012d8a:	2b02      	cmp	r3, #2
 8012d8c:	d000      	beq.n	8012d90 <USB_EPStartXfer+0xbd8>
 8012d8e:	e191      	b.n	80130b4 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	785b      	ldrb	r3, [r3, #1]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d000      	beq.n	8012d9a <USB_EPStartXfer+0xbe2>
 8012d98:	e07c      	b.n	8012e94 <USB_EPStartXfer+0xcdc>
 8012d9a:	687b      	ldr	r3, [r7, #4]
 8012d9c:	21ac      	movs	r1, #172	@ 0xac
 8012d9e:	187a      	adds	r2, r7, r1
 8012da0:	6013      	str	r3, [r2, #0]
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	2250      	movs	r2, #80	@ 0x50
 8012da6:	5a9b      	ldrh	r3, [r3, r2]
 8012da8:	b29b      	uxth	r3, r3
 8012daa:	001a      	movs	r2, r3
 8012dac:	187b      	adds	r3, r7, r1
 8012dae:	681b      	ldr	r3, [r3, #0]
 8012db0:	189b      	adds	r3, r3, r2
 8012db2:	187a      	adds	r2, r7, r1
 8012db4:	6013      	str	r3, [r2, #0]
 8012db6:	683b      	ldr	r3, [r7, #0]
 8012db8:	781b      	ldrb	r3, [r3, #0]
 8012dba:	00da      	lsls	r2, r3, #3
 8012dbc:	187b      	adds	r3, r7, r1
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	18d3      	adds	r3, r2, r3
 8012dc2:	4a8b      	ldr	r2, [pc, #556]	@ (8012ff0 <USB_EPStartXfer+0xe38>)
 8012dc4:	4694      	mov	ip, r2
 8012dc6:	4463      	add	r3, ip
 8012dc8:	21a8      	movs	r1, #168	@ 0xa8
 8012dca:	187a      	adds	r2, r7, r1
 8012dcc:	6013      	str	r3, [r2, #0]
 8012dce:	187b      	adds	r3, r7, r1
 8012dd0:	681b      	ldr	r3, [r3, #0]
 8012dd2:	881b      	ldrh	r3, [r3, #0]
 8012dd4:	b29b      	uxth	r3, r3
 8012dd6:	059b      	lsls	r3, r3, #22
 8012dd8:	0d9b      	lsrs	r3, r3, #22
 8012dda:	b29a      	uxth	r2, r3
 8012ddc:	187b      	adds	r3, r7, r1
 8012dde:	681b      	ldr	r3, [r3, #0]
 8012de0:	801a      	strh	r2, [r3, #0]
 8012de2:	683b      	ldr	r3, [r7, #0]
 8012de4:	691b      	ldr	r3, [r3, #16]
 8012de6:	2b3e      	cmp	r3, #62	@ 0x3e
 8012de8:	d923      	bls.n	8012e32 <USB_EPStartXfer+0xc7a>
 8012dea:	683b      	ldr	r3, [r7, #0]
 8012dec:	691b      	ldr	r3, [r3, #16]
 8012dee:	095b      	lsrs	r3, r3, #5
 8012df0:	21e4      	movs	r1, #228	@ 0xe4
 8012df2:	187a      	adds	r2, r7, r1
 8012df4:	6013      	str	r3, [r2, #0]
 8012df6:	683b      	ldr	r3, [r7, #0]
 8012df8:	691b      	ldr	r3, [r3, #16]
 8012dfa:	221f      	movs	r2, #31
 8012dfc:	4013      	ands	r3, r2
 8012dfe:	d104      	bne.n	8012e0a <USB_EPStartXfer+0xc52>
 8012e00:	187b      	adds	r3, r7, r1
 8012e02:	681b      	ldr	r3, [r3, #0]
 8012e04:	3b01      	subs	r3, #1
 8012e06:	187a      	adds	r2, r7, r1
 8012e08:	6013      	str	r3, [r2, #0]
 8012e0a:	21a8      	movs	r1, #168	@ 0xa8
 8012e0c:	187b      	adds	r3, r7, r1
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	881b      	ldrh	r3, [r3, #0]
 8012e12:	b29a      	uxth	r2, r3
 8012e14:	23e4      	movs	r3, #228	@ 0xe4
 8012e16:	18fb      	adds	r3, r7, r3
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	029b      	lsls	r3, r3, #10
 8012e1e:	b29b      	uxth	r3, r3
 8012e20:	4313      	orrs	r3, r2
 8012e22:	b29b      	uxth	r3, r3
 8012e24:	4a71      	ldr	r2, [pc, #452]	@ (8012fec <USB_EPStartXfer+0xe34>)
 8012e26:	4313      	orrs	r3, r2
 8012e28:	b29a      	uxth	r2, r3
 8012e2a:	187b      	adds	r3, r7, r1
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	801a      	strh	r2, [r3, #0]
 8012e30:	e054      	b.n	8012edc <USB_EPStartXfer+0xd24>
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	691b      	ldr	r3, [r3, #16]
 8012e36:	2b00      	cmp	r3, #0
 8012e38:	d10b      	bne.n	8012e52 <USB_EPStartXfer+0xc9a>
 8012e3a:	21a8      	movs	r1, #168	@ 0xa8
 8012e3c:	187b      	adds	r3, r7, r1
 8012e3e:	681b      	ldr	r3, [r3, #0]
 8012e40:	881b      	ldrh	r3, [r3, #0]
 8012e42:	b29b      	uxth	r3, r3
 8012e44:	4a69      	ldr	r2, [pc, #420]	@ (8012fec <USB_EPStartXfer+0xe34>)
 8012e46:	4313      	orrs	r3, r2
 8012e48:	b29a      	uxth	r2, r3
 8012e4a:	187b      	adds	r3, r7, r1
 8012e4c:	681b      	ldr	r3, [r3, #0]
 8012e4e:	801a      	strh	r2, [r3, #0]
 8012e50:	e044      	b.n	8012edc <USB_EPStartXfer+0xd24>
 8012e52:	683b      	ldr	r3, [r7, #0]
 8012e54:	691b      	ldr	r3, [r3, #16]
 8012e56:	085b      	lsrs	r3, r3, #1
 8012e58:	21e4      	movs	r1, #228	@ 0xe4
 8012e5a:	187a      	adds	r2, r7, r1
 8012e5c:	6013      	str	r3, [r2, #0]
 8012e5e:	683b      	ldr	r3, [r7, #0]
 8012e60:	691b      	ldr	r3, [r3, #16]
 8012e62:	2201      	movs	r2, #1
 8012e64:	4013      	ands	r3, r2
 8012e66:	d004      	beq.n	8012e72 <USB_EPStartXfer+0xcba>
 8012e68:	187b      	adds	r3, r7, r1
 8012e6a:	681b      	ldr	r3, [r3, #0]
 8012e6c:	3301      	adds	r3, #1
 8012e6e:	187a      	adds	r2, r7, r1
 8012e70:	6013      	str	r3, [r2, #0]
 8012e72:	21a8      	movs	r1, #168	@ 0xa8
 8012e74:	187b      	adds	r3, r7, r1
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	881b      	ldrh	r3, [r3, #0]
 8012e7a:	b29a      	uxth	r2, r3
 8012e7c:	23e4      	movs	r3, #228	@ 0xe4
 8012e7e:	18fb      	adds	r3, r7, r3
 8012e80:	681b      	ldr	r3, [r3, #0]
 8012e82:	b29b      	uxth	r3, r3
 8012e84:	029b      	lsls	r3, r3, #10
 8012e86:	b29b      	uxth	r3, r3
 8012e88:	4313      	orrs	r3, r2
 8012e8a:	b29a      	uxth	r2, r3
 8012e8c:	187b      	adds	r3, r7, r1
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	801a      	strh	r2, [r3, #0]
 8012e92:	e023      	b.n	8012edc <USB_EPStartXfer+0xd24>
 8012e94:	683b      	ldr	r3, [r7, #0]
 8012e96:	785b      	ldrb	r3, [r3, #1]
 8012e98:	2b01      	cmp	r3, #1
 8012e9a:	d11f      	bne.n	8012edc <USB_EPStartXfer+0xd24>
 8012e9c:	687b      	ldr	r3, [r7, #4]
 8012e9e:	21b4      	movs	r1, #180	@ 0xb4
 8012ea0:	187a      	adds	r2, r7, r1
 8012ea2:	6013      	str	r3, [r2, #0]
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2250      	movs	r2, #80	@ 0x50
 8012ea8:	5a9b      	ldrh	r3, [r3, r2]
 8012eaa:	b29b      	uxth	r3, r3
 8012eac:	001a      	movs	r2, r3
 8012eae:	187b      	adds	r3, r7, r1
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	189b      	adds	r3, r3, r2
 8012eb4:	187a      	adds	r2, r7, r1
 8012eb6:	6013      	str	r3, [r2, #0]
 8012eb8:	683b      	ldr	r3, [r7, #0]
 8012eba:	781b      	ldrb	r3, [r3, #0]
 8012ebc:	00da      	lsls	r2, r3, #3
 8012ebe:	187b      	adds	r3, r7, r1
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	18d3      	adds	r3, r2, r3
 8012ec4:	4a4a      	ldr	r2, [pc, #296]	@ (8012ff0 <USB_EPStartXfer+0xe38>)
 8012ec6:	4694      	mov	ip, r2
 8012ec8:	4463      	add	r3, ip
 8012eca:	21b0      	movs	r1, #176	@ 0xb0
 8012ecc:	187a      	adds	r2, r7, r1
 8012ece:	6013      	str	r3, [r2, #0]
 8012ed0:	683b      	ldr	r3, [r7, #0]
 8012ed2:	691b      	ldr	r3, [r3, #16]
 8012ed4:	b29a      	uxth	r2, r3
 8012ed6:	187b      	adds	r3, r7, r1
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	801a      	strh	r2, [r3, #0]
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	22a4      	movs	r2, #164	@ 0xa4
 8012ee0:	18ba      	adds	r2, r7, r2
 8012ee2:	6013      	str	r3, [r2, #0]
 8012ee4:	683b      	ldr	r3, [r7, #0]
 8012ee6:	785b      	ldrb	r3, [r3, #1]
 8012ee8:	2b00      	cmp	r3, #0
 8012eea:	d000      	beq.n	8012eee <USB_EPStartXfer+0xd36>
 8012eec:	e082      	b.n	8012ff4 <USB_EPStartXfer+0xe3c>
 8012eee:	687b      	ldr	r3, [r7, #4]
 8012ef0:	219c      	movs	r1, #156	@ 0x9c
 8012ef2:	187a      	adds	r2, r7, r1
 8012ef4:	6013      	str	r3, [r2, #0]
 8012ef6:	687b      	ldr	r3, [r7, #4]
 8012ef8:	2250      	movs	r2, #80	@ 0x50
 8012efa:	5a9b      	ldrh	r3, [r3, r2]
 8012efc:	b29b      	uxth	r3, r3
 8012efe:	001a      	movs	r2, r3
 8012f00:	187b      	adds	r3, r7, r1
 8012f02:	681b      	ldr	r3, [r3, #0]
 8012f04:	189b      	adds	r3, r3, r2
 8012f06:	187a      	adds	r2, r7, r1
 8012f08:	6013      	str	r3, [r2, #0]
 8012f0a:	683b      	ldr	r3, [r7, #0]
 8012f0c:	781b      	ldrb	r3, [r3, #0]
 8012f0e:	00da      	lsls	r2, r3, #3
 8012f10:	187b      	adds	r3, r7, r1
 8012f12:	681b      	ldr	r3, [r3, #0]
 8012f14:	18d3      	adds	r3, r2, r3
 8012f16:	4a34      	ldr	r2, [pc, #208]	@ (8012fe8 <USB_EPStartXfer+0xe30>)
 8012f18:	4694      	mov	ip, r2
 8012f1a:	4463      	add	r3, ip
 8012f1c:	2198      	movs	r1, #152	@ 0x98
 8012f1e:	187a      	adds	r2, r7, r1
 8012f20:	6013      	str	r3, [r2, #0]
 8012f22:	187b      	adds	r3, r7, r1
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	881b      	ldrh	r3, [r3, #0]
 8012f28:	b29b      	uxth	r3, r3
 8012f2a:	059b      	lsls	r3, r3, #22
 8012f2c:	0d9b      	lsrs	r3, r3, #22
 8012f2e:	b29a      	uxth	r2, r3
 8012f30:	187b      	adds	r3, r7, r1
 8012f32:	681b      	ldr	r3, [r3, #0]
 8012f34:	801a      	strh	r2, [r3, #0]
 8012f36:	683b      	ldr	r3, [r7, #0]
 8012f38:	691b      	ldr	r3, [r3, #16]
 8012f3a:	2b3e      	cmp	r3, #62	@ 0x3e
 8012f3c:	d923      	bls.n	8012f86 <USB_EPStartXfer+0xdce>
 8012f3e:	683b      	ldr	r3, [r7, #0]
 8012f40:	691b      	ldr	r3, [r3, #16]
 8012f42:	095b      	lsrs	r3, r3, #5
 8012f44:	21e0      	movs	r1, #224	@ 0xe0
 8012f46:	187a      	adds	r2, r7, r1
 8012f48:	6013      	str	r3, [r2, #0]
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	691b      	ldr	r3, [r3, #16]
 8012f4e:	221f      	movs	r2, #31
 8012f50:	4013      	ands	r3, r2
 8012f52:	d104      	bne.n	8012f5e <USB_EPStartXfer+0xda6>
 8012f54:	187b      	adds	r3, r7, r1
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	3b01      	subs	r3, #1
 8012f5a:	187a      	adds	r2, r7, r1
 8012f5c:	6013      	str	r3, [r2, #0]
 8012f5e:	2198      	movs	r1, #152	@ 0x98
 8012f60:	187b      	adds	r3, r7, r1
 8012f62:	681b      	ldr	r3, [r3, #0]
 8012f64:	881b      	ldrh	r3, [r3, #0]
 8012f66:	b29a      	uxth	r2, r3
 8012f68:	23e0      	movs	r3, #224	@ 0xe0
 8012f6a:	18fb      	adds	r3, r7, r3
 8012f6c:	681b      	ldr	r3, [r3, #0]
 8012f6e:	b29b      	uxth	r3, r3
 8012f70:	029b      	lsls	r3, r3, #10
 8012f72:	b29b      	uxth	r3, r3
 8012f74:	4313      	orrs	r3, r2
 8012f76:	b29b      	uxth	r3, r3
 8012f78:	4a1c      	ldr	r2, [pc, #112]	@ (8012fec <USB_EPStartXfer+0xe34>)
 8012f7a:	4313      	orrs	r3, r2
 8012f7c:	b29a      	uxth	r2, r3
 8012f7e:	187b      	adds	r3, r7, r1
 8012f80:	681b      	ldr	r3, [r3, #0]
 8012f82:	801a      	strh	r2, [r3, #0]
 8012f84:	e057      	b.n	8013036 <USB_EPStartXfer+0xe7e>
 8012f86:	683b      	ldr	r3, [r7, #0]
 8012f88:	691b      	ldr	r3, [r3, #16]
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	d10b      	bne.n	8012fa6 <USB_EPStartXfer+0xdee>
 8012f8e:	2198      	movs	r1, #152	@ 0x98
 8012f90:	187b      	adds	r3, r7, r1
 8012f92:	681b      	ldr	r3, [r3, #0]
 8012f94:	881b      	ldrh	r3, [r3, #0]
 8012f96:	b29b      	uxth	r3, r3
 8012f98:	4a14      	ldr	r2, [pc, #80]	@ (8012fec <USB_EPStartXfer+0xe34>)
 8012f9a:	4313      	orrs	r3, r2
 8012f9c:	b29a      	uxth	r2, r3
 8012f9e:	187b      	adds	r3, r7, r1
 8012fa0:	681b      	ldr	r3, [r3, #0]
 8012fa2:	801a      	strh	r2, [r3, #0]
 8012fa4:	e047      	b.n	8013036 <USB_EPStartXfer+0xe7e>
 8012fa6:	683b      	ldr	r3, [r7, #0]
 8012fa8:	691b      	ldr	r3, [r3, #16]
 8012faa:	085b      	lsrs	r3, r3, #1
 8012fac:	21e0      	movs	r1, #224	@ 0xe0
 8012fae:	187a      	adds	r2, r7, r1
 8012fb0:	6013      	str	r3, [r2, #0]
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	691b      	ldr	r3, [r3, #16]
 8012fb6:	2201      	movs	r2, #1
 8012fb8:	4013      	ands	r3, r2
 8012fba:	d004      	beq.n	8012fc6 <USB_EPStartXfer+0xe0e>
 8012fbc:	187b      	adds	r3, r7, r1
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	3301      	adds	r3, #1
 8012fc2:	187a      	adds	r2, r7, r1
 8012fc4:	6013      	str	r3, [r2, #0]
 8012fc6:	2198      	movs	r1, #152	@ 0x98
 8012fc8:	187b      	adds	r3, r7, r1
 8012fca:	681b      	ldr	r3, [r3, #0]
 8012fcc:	881b      	ldrh	r3, [r3, #0]
 8012fce:	b29a      	uxth	r2, r3
 8012fd0:	23e0      	movs	r3, #224	@ 0xe0
 8012fd2:	18fb      	adds	r3, r7, r3
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	b29b      	uxth	r3, r3
 8012fd8:	029b      	lsls	r3, r3, #10
 8012fda:	b29b      	uxth	r3, r3
 8012fdc:	4313      	orrs	r3, r2
 8012fde:	b29a      	uxth	r2, r3
 8012fe0:	187b      	adds	r3, r7, r1
 8012fe2:	681b      	ldr	r3, [r3, #0]
 8012fe4:	801a      	strh	r2, [r3, #0]
 8012fe6:	e026      	b.n	8013036 <USB_EPStartXfer+0xe7e>
 8012fe8:	00000406 	.word	0x00000406
 8012fec:	ffff8000 	.word	0xffff8000
 8012ff0:	00000402 	.word	0x00000402
 8012ff4:	683b      	ldr	r3, [r7, #0]
 8012ff6:	785b      	ldrb	r3, [r3, #1]
 8012ff8:	2b01      	cmp	r3, #1
 8012ffa:	d11c      	bne.n	8013036 <USB_EPStartXfer+0xe7e>
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	2250      	movs	r2, #80	@ 0x50
 8013000:	5a9b      	ldrh	r3, [r3, r2]
 8013002:	b29b      	uxth	r3, r3
 8013004:	001a      	movs	r2, r3
 8013006:	21a4      	movs	r1, #164	@ 0xa4
 8013008:	187b      	adds	r3, r7, r1
 801300a:	681b      	ldr	r3, [r3, #0]
 801300c:	189b      	adds	r3, r3, r2
 801300e:	187a      	adds	r2, r7, r1
 8013010:	6013      	str	r3, [r2, #0]
 8013012:	683b      	ldr	r3, [r7, #0]
 8013014:	781b      	ldrb	r3, [r3, #0]
 8013016:	00da      	lsls	r2, r3, #3
 8013018:	187b      	adds	r3, r7, r1
 801301a:	681b      	ldr	r3, [r3, #0]
 801301c:	18d3      	adds	r3, r2, r3
 801301e:	4ad2      	ldr	r2, [pc, #840]	@ (8013368 <USB_EPStartXfer+0x11b0>)
 8013020:	4694      	mov	ip, r2
 8013022:	4463      	add	r3, ip
 8013024:	21a0      	movs	r1, #160	@ 0xa0
 8013026:	187a      	adds	r2, r7, r1
 8013028:	6013      	str	r3, [r2, #0]
 801302a:	683b      	ldr	r3, [r7, #0]
 801302c:	691b      	ldr	r3, [r3, #16]
 801302e:	b29a      	uxth	r2, r3
 8013030:	187b      	adds	r3, r7, r1
 8013032:	681b      	ldr	r3, [r3, #0]
 8013034:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8013036:	683b      	ldr	r3, [r7, #0]
 8013038:	69db      	ldr	r3, [r3, #28]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d100      	bne.n	8013040 <USB_EPStartXfer+0xe88>
 801303e:	e1c2      	b.n	80133c6 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8013040:	687a      	ldr	r2, [r7, #4]
 8013042:	683b      	ldr	r3, [r7, #0]
 8013044:	781b      	ldrb	r3, [r3, #0]
 8013046:	009b      	lsls	r3, r3, #2
 8013048:	18d2      	adds	r2, r2, r3
 801304a:	2196      	movs	r1, #150	@ 0x96
 801304c:	187b      	adds	r3, r7, r1
 801304e:	8812      	ldrh	r2, [r2, #0]
 8013050:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013052:	187b      	adds	r3, r7, r1
 8013054:	881a      	ldrh	r2, [r3, #0]
 8013056:	2380      	movs	r3, #128	@ 0x80
 8013058:	01db      	lsls	r3, r3, #7
 801305a:	4013      	ands	r3, r2
 801305c:	d004      	beq.n	8013068 <USB_EPStartXfer+0xeb0>
 801305e:	187b      	adds	r3, r7, r1
 8013060:	881b      	ldrh	r3, [r3, #0]
 8013062:	2240      	movs	r2, #64	@ 0x40
 8013064:	4013      	ands	r3, r2
 8013066:	d10d      	bne.n	8013084 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013068:	2196      	movs	r1, #150	@ 0x96
 801306a:	187b      	adds	r3, r7, r1
 801306c:	881a      	ldrh	r2, [r3, #0]
 801306e:	2380      	movs	r3, #128	@ 0x80
 8013070:	01db      	lsls	r3, r3, #7
 8013072:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8013074:	d000      	beq.n	8013078 <USB_EPStartXfer+0xec0>
 8013076:	e1a6      	b.n	80133c6 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8013078:	187b      	adds	r3, r7, r1
 801307a:	881b      	ldrh	r3, [r3, #0]
 801307c:	2240      	movs	r2, #64	@ 0x40
 801307e:	4013      	ands	r3, r2
 8013080:	d000      	beq.n	8013084 <USB_EPStartXfer+0xecc>
 8013082:	e1a0      	b.n	80133c6 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8013084:	687a      	ldr	r2, [r7, #4]
 8013086:	683b      	ldr	r3, [r7, #0]
 8013088:	781b      	ldrb	r3, [r3, #0]
 801308a:	009b      	lsls	r3, r3, #2
 801308c:	18d3      	adds	r3, r2, r3
 801308e:	881b      	ldrh	r3, [r3, #0]
 8013090:	b29a      	uxth	r2, r3
 8013092:	2094      	movs	r0, #148	@ 0x94
 8013094:	183b      	adds	r3, r7, r0
 8013096:	49b5      	ldr	r1, [pc, #724]	@ (801336c <USB_EPStartXfer+0x11b4>)
 8013098:	400a      	ands	r2, r1
 801309a:	801a      	strh	r2, [r3, #0]
 801309c:	687a      	ldr	r2, [r7, #4]
 801309e:	683b      	ldr	r3, [r7, #0]
 80130a0:	781b      	ldrb	r3, [r3, #0]
 80130a2:	009b      	lsls	r3, r3, #2
 80130a4:	18d3      	adds	r3, r2, r3
 80130a6:	183a      	adds	r2, r7, r0
 80130a8:	8812      	ldrh	r2, [r2, #0]
 80130aa:	49b1      	ldr	r1, [pc, #708]	@ (8013370 <USB_EPStartXfer+0x11b8>)
 80130ac:	430a      	orrs	r2, r1
 80130ae:	b292      	uxth	r2, r2
 80130b0:	801a      	strh	r2, [r3, #0]
 80130b2:	e188      	b.n	80133c6 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80130b4:	683b      	ldr	r3, [r7, #0]
 80130b6:	78db      	ldrb	r3, [r3, #3]
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d000      	beq.n	80130be <USB_EPStartXfer+0xf06>
 80130bc:	e181      	b.n	80133c2 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80130be:	683b      	ldr	r3, [r7, #0]
 80130c0:	699a      	ldr	r2, [r3, #24]
 80130c2:	683b      	ldr	r3, [r7, #0]
 80130c4:	691b      	ldr	r3, [r3, #16]
 80130c6:	429a      	cmp	r2, r3
 80130c8:	d90d      	bls.n	80130e6 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 80130ca:	683b      	ldr	r3, [r7, #0]
 80130cc:	691b      	ldr	r3, [r3, #16]
 80130ce:	1d7a      	adds	r2, r7, #5
 80130d0:	32ff      	adds	r2, #255	@ 0xff
 80130d2:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 80130d4:	683b      	ldr	r3, [r7, #0]
 80130d6:	699a      	ldr	r2, [r3, #24]
 80130d8:	1d7b      	adds	r3, r7, #5
 80130da:	33ff      	adds	r3, #255	@ 0xff
 80130dc:	681b      	ldr	r3, [r3, #0]
 80130de:	1ad2      	subs	r2, r2, r3
 80130e0:	683b      	ldr	r3, [r7, #0]
 80130e2:	619a      	str	r2, [r3, #24]
 80130e4:	e007      	b.n	80130f6 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 80130e6:	683b      	ldr	r3, [r7, #0]
 80130e8:	699b      	ldr	r3, [r3, #24]
 80130ea:	1d7a      	adds	r2, r7, #5
 80130ec:	32ff      	adds	r2, #255	@ 0xff
 80130ee:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 80130f0:	683b      	ldr	r3, [r7, #0]
 80130f2:	2200      	movs	r2, #0
 80130f4:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80130f6:	683b      	ldr	r3, [r7, #0]
 80130f8:	785b      	ldrb	r3, [r3, #1]
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d000      	beq.n	8013100 <USB_EPStartXfer+0xf48>
 80130fe:	e082      	b.n	8013206 <USB_EPStartXfer+0x104e>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	21cc      	movs	r1, #204	@ 0xcc
 8013104:	187a      	adds	r2, r7, r1
 8013106:	6013      	str	r3, [r2, #0]
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	2250      	movs	r2, #80	@ 0x50
 801310c:	5a9b      	ldrh	r3, [r3, r2]
 801310e:	b29b      	uxth	r3, r3
 8013110:	001a      	movs	r2, r3
 8013112:	187b      	adds	r3, r7, r1
 8013114:	681b      	ldr	r3, [r3, #0]
 8013116:	189b      	adds	r3, r3, r2
 8013118:	187a      	adds	r2, r7, r1
 801311a:	6013      	str	r3, [r2, #0]
 801311c:	683b      	ldr	r3, [r7, #0]
 801311e:	781b      	ldrb	r3, [r3, #0]
 8013120:	00da      	lsls	r2, r3, #3
 8013122:	187b      	adds	r3, r7, r1
 8013124:	681b      	ldr	r3, [r3, #0]
 8013126:	18d3      	adds	r3, r2, r3
 8013128:	4a92      	ldr	r2, [pc, #584]	@ (8013374 <USB_EPStartXfer+0x11bc>)
 801312a:	4694      	mov	ip, r2
 801312c:	4463      	add	r3, ip
 801312e:	21c8      	movs	r1, #200	@ 0xc8
 8013130:	187a      	adds	r2, r7, r1
 8013132:	6013      	str	r3, [r2, #0]
 8013134:	187b      	adds	r3, r7, r1
 8013136:	681b      	ldr	r3, [r3, #0]
 8013138:	881b      	ldrh	r3, [r3, #0]
 801313a:	b29b      	uxth	r3, r3
 801313c:	059b      	lsls	r3, r3, #22
 801313e:	0d9b      	lsrs	r3, r3, #22
 8013140:	b29a      	uxth	r2, r3
 8013142:	187b      	adds	r3, r7, r1
 8013144:	681b      	ldr	r3, [r3, #0]
 8013146:	801a      	strh	r2, [r3, #0]
 8013148:	1d7b      	adds	r3, r7, #5
 801314a:	33ff      	adds	r3, #255	@ 0xff
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	2b3e      	cmp	r3, #62	@ 0x3e
 8013150:	d925      	bls.n	801319e <USB_EPStartXfer+0xfe6>
 8013152:	1d7b      	adds	r3, r7, #5
 8013154:	33ff      	adds	r3, #255	@ 0xff
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	095b      	lsrs	r3, r3, #5
 801315a:	21dc      	movs	r1, #220	@ 0xdc
 801315c:	187a      	adds	r2, r7, r1
 801315e:	6013      	str	r3, [r2, #0]
 8013160:	1d7b      	adds	r3, r7, #5
 8013162:	33ff      	adds	r3, #255	@ 0xff
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	221f      	movs	r2, #31
 8013168:	4013      	ands	r3, r2
 801316a:	d104      	bne.n	8013176 <USB_EPStartXfer+0xfbe>
 801316c:	187b      	adds	r3, r7, r1
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	3b01      	subs	r3, #1
 8013172:	187a      	adds	r2, r7, r1
 8013174:	6013      	str	r3, [r2, #0]
 8013176:	21c8      	movs	r1, #200	@ 0xc8
 8013178:	187b      	adds	r3, r7, r1
 801317a:	681b      	ldr	r3, [r3, #0]
 801317c:	881b      	ldrh	r3, [r3, #0]
 801317e:	b29a      	uxth	r2, r3
 8013180:	23dc      	movs	r3, #220	@ 0xdc
 8013182:	18fb      	adds	r3, r7, r3
 8013184:	681b      	ldr	r3, [r3, #0]
 8013186:	b29b      	uxth	r3, r3
 8013188:	029b      	lsls	r3, r3, #10
 801318a:	b29b      	uxth	r3, r3
 801318c:	4313      	orrs	r3, r2
 801318e:	b29b      	uxth	r3, r3
 8013190:	4a79      	ldr	r2, [pc, #484]	@ (8013378 <USB_EPStartXfer+0x11c0>)
 8013192:	4313      	orrs	r3, r2
 8013194:	b29a      	uxth	r2, r3
 8013196:	187b      	adds	r3, r7, r1
 8013198:	681b      	ldr	r3, [r3, #0]
 801319a:	801a      	strh	r2, [r3, #0]
 801319c:	e058      	b.n	8013250 <USB_EPStartXfer+0x1098>
 801319e:	1d7b      	adds	r3, r7, #5
 80131a0:	33ff      	adds	r3, #255	@ 0xff
 80131a2:	681b      	ldr	r3, [r3, #0]
 80131a4:	2b00      	cmp	r3, #0
 80131a6:	d10b      	bne.n	80131c0 <USB_EPStartXfer+0x1008>
 80131a8:	21c8      	movs	r1, #200	@ 0xc8
 80131aa:	187b      	adds	r3, r7, r1
 80131ac:	681b      	ldr	r3, [r3, #0]
 80131ae:	881b      	ldrh	r3, [r3, #0]
 80131b0:	b29b      	uxth	r3, r3
 80131b2:	4a71      	ldr	r2, [pc, #452]	@ (8013378 <USB_EPStartXfer+0x11c0>)
 80131b4:	4313      	orrs	r3, r2
 80131b6:	b29a      	uxth	r2, r3
 80131b8:	187b      	adds	r3, r7, r1
 80131ba:	681b      	ldr	r3, [r3, #0]
 80131bc:	801a      	strh	r2, [r3, #0]
 80131be:	e047      	b.n	8013250 <USB_EPStartXfer+0x1098>
 80131c0:	1d7b      	adds	r3, r7, #5
 80131c2:	33ff      	adds	r3, #255	@ 0xff
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	085b      	lsrs	r3, r3, #1
 80131c8:	21dc      	movs	r1, #220	@ 0xdc
 80131ca:	187a      	adds	r2, r7, r1
 80131cc:	6013      	str	r3, [r2, #0]
 80131ce:	1d7b      	adds	r3, r7, #5
 80131d0:	33ff      	adds	r3, #255	@ 0xff
 80131d2:	681b      	ldr	r3, [r3, #0]
 80131d4:	2201      	movs	r2, #1
 80131d6:	4013      	ands	r3, r2
 80131d8:	d004      	beq.n	80131e4 <USB_EPStartXfer+0x102c>
 80131da:	187b      	adds	r3, r7, r1
 80131dc:	681b      	ldr	r3, [r3, #0]
 80131de:	3301      	adds	r3, #1
 80131e0:	187a      	adds	r2, r7, r1
 80131e2:	6013      	str	r3, [r2, #0]
 80131e4:	21c8      	movs	r1, #200	@ 0xc8
 80131e6:	187b      	adds	r3, r7, r1
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	881b      	ldrh	r3, [r3, #0]
 80131ec:	b29a      	uxth	r2, r3
 80131ee:	23dc      	movs	r3, #220	@ 0xdc
 80131f0:	18fb      	adds	r3, r7, r3
 80131f2:	681b      	ldr	r3, [r3, #0]
 80131f4:	b29b      	uxth	r3, r3
 80131f6:	029b      	lsls	r3, r3, #10
 80131f8:	b29b      	uxth	r3, r3
 80131fa:	4313      	orrs	r3, r2
 80131fc:	b29a      	uxth	r2, r3
 80131fe:	187b      	adds	r3, r7, r1
 8013200:	681b      	ldr	r3, [r3, #0]
 8013202:	801a      	strh	r2, [r3, #0]
 8013204:	e024      	b.n	8013250 <USB_EPStartXfer+0x1098>
 8013206:	683b      	ldr	r3, [r7, #0]
 8013208:	785b      	ldrb	r3, [r3, #1]
 801320a:	2b01      	cmp	r3, #1
 801320c:	d120      	bne.n	8013250 <USB_EPStartXfer+0x1098>
 801320e:	687b      	ldr	r3, [r7, #4]
 8013210:	21d4      	movs	r1, #212	@ 0xd4
 8013212:	187a      	adds	r2, r7, r1
 8013214:	6013      	str	r3, [r2, #0]
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	2250      	movs	r2, #80	@ 0x50
 801321a:	5a9b      	ldrh	r3, [r3, r2]
 801321c:	b29b      	uxth	r3, r3
 801321e:	001a      	movs	r2, r3
 8013220:	187b      	adds	r3, r7, r1
 8013222:	681b      	ldr	r3, [r3, #0]
 8013224:	189b      	adds	r3, r3, r2
 8013226:	187a      	adds	r2, r7, r1
 8013228:	6013      	str	r3, [r2, #0]
 801322a:	683b      	ldr	r3, [r7, #0]
 801322c:	781b      	ldrb	r3, [r3, #0]
 801322e:	00da      	lsls	r2, r3, #3
 8013230:	187b      	adds	r3, r7, r1
 8013232:	681b      	ldr	r3, [r3, #0]
 8013234:	18d3      	adds	r3, r2, r3
 8013236:	4a4f      	ldr	r2, [pc, #316]	@ (8013374 <USB_EPStartXfer+0x11bc>)
 8013238:	4694      	mov	ip, r2
 801323a:	4463      	add	r3, ip
 801323c:	21d0      	movs	r1, #208	@ 0xd0
 801323e:	187a      	adds	r2, r7, r1
 8013240:	6013      	str	r3, [r2, #0]
 8013242:	1d7b      	adds	r3, r7, #5
 8013244:	33ff      	adds	r3, #255	@ 0xff
 8013246:	681b      	ldr	r3, [r3, #0]
 8013248:	b29a      	uxth	r2, r3
 801324a:	187b      	adds	r3, r7, r1
 801324c:	681b      	ldr	r3, [r3, #0]
 801324e:	801a      	strh	r2, [r3, #0]
 8013250:	687b      	ldr	r3, [r7, #4]
 8013252:	22c4      	movs	r2, #196	@ 0xc4
 8013254:	18ba      	adds	r2, r7, r2
 8013256:	6013      	str	r3, [r2, #0]
 8013258:	683b      	ldr	r3, [r7, #0]
 801325a:	785b      	ldrb	r3, [r3, #1]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d000      	beq.n	8013262 <USB_EPStartXfer+0x10aa>
 8013260:	e08c      	b.n	801337c <USB_EPStartXfer+0x11c4>
 8013262:	687b      	ldr	r3, [r7, #4]
 8013264:	21bc      	movs	r1, #188	@ 0xbc
 8013266:	187a      	adds	r2, r7, r1
 8013268:	6013      	str	r3, [r2, #0]
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	2250      	movs	r2, #80	@ 0x50
 801326e:	5a9b      	ldrh	r3, [r3, r2]
 8013270:	b29b      	uxth	r3, r3
 8013272:	001a      	movs	r2, r3
 8013274:	187b      	adds	r3, r7, r1
 8013276:	681b      	ldr	r3, [r3, #0]
 8013278:	189b      	adds	r3, r3, r2
 801327a:	187a      	adds	r2, r7, r1
 801327c:	6013      	str	r3, [r2, #0]
 801327e:	683b      	ldr	r3, [r7, #0]
 8013280:	781b      	ldrb	r3, [r3, #0]
 8013282:	00da      	lsls	r2, r3, #3
 8013284:	187b      	adds	r3, r7, r1
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	18d3      	adds	r3, r2, r3
 801328a:	4a37      	ldr	r2, [pc, #220]	@ (8013368 <USB_EPStartXfer+0x11b0>)
 801328c:	4694      	mov	ip, r2
 801328e:	4463      	add	r3, ip
 8013290:	21b8      	movs	r1, #184	@ 0xb8
 8013292:	187a      	adds	r2, r7, r1
 8013294:	6013      	str	r3, [r2, #0]
 8013296:	187b      	adds	r3, r7, r1
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	881b      	ldrh	r3, [r3, #0]
 801329c:	b29b      	uxth	r3, r3
 801329e:	059b      	lsls	r3, r3, #22
 80132a0:	0d9b      	lsrs	r3, r3, #22
 80132a2:	b29a      	uxth	r2, r3
 80132a4:	187b      	adds	r3, r7, r1
 80132a6:	681b      	ldr	r3, [r3, #0]
 80132a8:	801a      	strh	r2, [r3, #0]
 80132aa:	1d7b      	adds	r3, r7, #5
 80132ac:	33ff      	adds	r3, #255	@ 0xff
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	2b3e      	cmp	r3, #62	@ 0x3e
 80132b2:	d925      	bls.n	8013300 <USB_EPStartXfer+0x1148>
 80132b4:	1d7b      	adds	r3, r7, #5
 80132b6:	33ff      	adds	r3, #255	@ 0xff
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	095b      	lsrs	r3, r3, #5
 80132bc:	21d8      	movs	r1, #216	@ 0xd8
 80132be:	187a      	adds	r2, r7, r1
 80132c0:	6013      	str	r3, [r2, #0]
 80132c2:	1d7b      	adds	r3, r7, #5
 80132c4:	33ff      	adds	r3, #255	@ 0xff
 80132c6:	681b      	ldr	r3, [r3, #0]
 80132c8:	221f      	movs	r2, #31
 80132ca:	4013      	ands	r3, r2
 80132cc:	d104      	bne.n	80132d8 <USB_EPStartXfer+0x1120>
 80132ce:	187b      	adds	r3, r7, r1
 80132d0:	681b      	ldr	r3, [r3, #0]
 80132d2:	3b01      	subs	r3, #1
 80132d4:	187a      	adds	r2, r7, r1
 80132d6:	6013      	str	r3, [r2, #0]
 80132d8:	21b8      	movs	r1, #184	@ 0xb8
 80132da:	187b      	adds	r3, r7, r1
 80132dc:	681b      	ldr	r3, [r3, #0]
 80132de:	881b      	ldrh	r3, [r3, #0]
 80132e0:	b29a      	uxth	r2, r3
 80132e2:	23d8      	movs	r3, #216	@ 0xd8
 80132e4:	18fb      	adds	r3, r7, r3
 80132e6:	681b      	ldr	r3, [r3, #0]
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	029b      	lsls	r3, r3, #10
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	4313      	orrs	r3, r2
 80132f0:	b29b      	uxth	r3, r3
 80132f2:	4a21      	ldr	r2, [pc, #132]	@ (8013378 <USB_EPStartXfer+0x11c0>)
 80132f4:	4313      	orrs	r3, r2
 80132f6:	b29a      	uxth	r2, r3
 80132f8:	187b      	adds	r3, r7, r1
 80132fa:	681b      	ldr	r3, [r3, #0]
 80132fc:	801a      	strh	r2, [r3, #0]
 80132fe:	e062      	b.n	80133c6 <USB_EPStartXfer+0x120e>
 8013300:	1d7b      	adds	r3, r7, #5
 8013302:	33ff      	adds	r3, #255	@ 0xff
 8013304:	681b      	ldr	r3, [r3, #0]
 8013306:	2b00      	cmp	r3, #0
 8013308:	d10b      	bne.n	8013322 <USB_EPStartXfer+0x116a>
 801330a:	21b8      	movs	r1, #184	@ 0xb8
 801330c:	187b      	adds	r3, r7, r1
 801330e:	681b      	ldr	r3, [r3, #0]
 8013310:	881b      	ldrh	r3, [r3, #0]
 8013312:	b29b      	uxth	r3, r3
 8013314:	4a18      	ldr	r2, [pc, #96]	@ (8013378 <USB_EPStartXfer+0x11c0>)
 8013316:	4313      	orrs	r3, r2
 8013318:	b29a      	uxth	r2, r3
 801331a:	187b      	adds	r3, r7, r1
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	801a      	strh	r2, [r3, #0]
 8013320:	e051      	b.n	80133c6 <USB_EPStartXfer+0x120e>
 8013322:	1d7b      	adds	r3, r7, #5
 8013324:	33ff      	adds	r3, #255	@ 0xff
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	085b      	lsrs	r3, r3, #1
 801332a:	21d8      	movs	r1, #216	@ 0xd8
 801332c:	187a      	adds	r2, r7, r1
 801332e:	6013      	str	r3, [r2, #0]
 8013330:	1d7b      	adds	r3, r7, #5
 8013332:	33ff      	adds	r3, #255	@ 0xff
 8013334:	681b      	ldr	r3, [r3, #0]
 8013336:	2201      	movs	r2, #1
 8013338:	4013      	ands	r3, r2
 801333a:	d004      	beq.n	8013346 <USB_EPStartXfer+0x118e>
 801333c:	187b      	adds	r3, r7, r1
 801333e:	681b      	ldr	r3, [r3, #0]
 8013340:	3301      	adds	r3, #1
 8013342:	187a      	adds	r2, r7, r1
 8013344:	6013      	str	r3, [r2, #0]
 8013346:	21b8      	movs	r1, #184	@ 0xb8
 8013348:	187b      	adds	r3, r7, r1
 801334a:	681b      	ldr	r3, [r3, #0]
 801334c:	881b      	ldrh	r3, [r3, #0]
 801334e:	b29a      	uxth	r2, r3
 8013350:	23d8      	movs	r3, #216	@ 0xd8
 8013352:	18fb      	adds	r3, r7, r3
 8013354:	681b      	ldr	r3, [r3, #0]
 8013356:	b29b      	uxth	r3, r3
 8013358:	029b      	lsls	r3, r3, #10
 801335a:	b29b      	uxth	r3, r3
 801335c:	4313      	orrs	r3, r2
 801335e:	b29a      	uxth	r2, r3
 8013360:	187b      	adds	r3, r7, r1
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	801a      	strh	r2, [r3, #0]
 8013366:	e02e      	b.n	80133c6 <USB_EPStartXfer+0x120e>
 8013368:	00000406 	.word	0x00000406
 801336c:	ffff8f8f 	.word	0xffff8f8f
 8013370:	ffff80c0 	.word	0xffff80c0
 8013374:	00000402 	.word	0x00000402
 8013378:	ffff8000 	.word	0xffff8000
 801337c:	683b      	ldr	r3, [r7, #0]
 801337e:	785b      	ldrb	r3, [r3, #1]
 8013380:	2b01      	cmp	r3, #1
 8013382:	d120      	bne.n	80133c6 <USB_EPStartXfer+0x120e>
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2250      	movs	r2, #80	@ 0x50
 8013388:	5a9b      	ldrh	r3, [r3, r2]
 801338a:	b29b      	uxth	r3, r3
 801338c:	001a      	movs	r2, r3
 801338e:	21c4      	movs	r1, #196	@ 0xc4
 8013390:	187b      	adds	r3, r7, r1
 8013392:	681b      	ldr	r3, [r3, #0]
 8013394:	189b      	adds	r3, r3, r2
 8013396:	187a      	adds	r2, r7, r1
 8013398:	6013      	str	r3, [r2, #0]
 801339a:	683b      	ldr	r3, [r7, #0]
 801339c:	781b      	ldrb	r3, [r3, #0]
 801339e:	00da      	lsls	r2, r3, #3
 80133a0:	187b      	adds	r3, r7, r1
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	18d3      	adds	r3, r2, r3
 80133a6:	4a1d      	ldr	r2, [pc, #116]	@ (801341c <USB_EPStartXfer+0x1264>)
 80133a8:	4694      	mov	ip, r2
 80133aa:	4463      	add	r3, ip
 80133ac:	21c0      	movs	r1, #192	@ 0xc0
 80133ae:	187a      	adds	r2, r7, r1
 80133b0:	6013      	str	r3, [r2, #0]
 80133b2:	1d7b      	adds	r3, r7, #5
 80133b4:	33ff      	adds	r3, #255	@ 0xff
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	b29a      	uxth	r2, r3
 80133ba:	187b      	adds	r3, r7, r1
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	801a      	strh	r2, [r3, #0]
 80133c0:	e001      	b.n	80133c6 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 80133c2:	2301      	movs	r3, #1
 80133c4:	e025      	b.n	8013412 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80133c6:	687a      	ldr	r2, [r7, #4]
 80133c8:	683b      	ldr	r3, [r7, #0]
 80133ca:	781b      	ldrb	r3, [r3, #0]
 80133cc:	009b      	lsls	r3, r3, #2
 80133ce:	18d3      	adds	r3, r2, r3
 80133d0:	881b      	ldrh	r3, [r3, #0]
 80133d2:	b29a      	uxth	r2, r3
 80133d4:	208a      	movs	r0, #138	@ 0x8a
 80133d6:	183b      	adds	r3, r7, r0
 80133d8:	4911      	ldr	r1, [pc, #68]	@ (8013420 <USB_EPStartXfer+0x1268>)
 80133da:	400a      	ands	r2, r1
 80133dc:	801a      	strh	r2, [r3, #0]
 80133de:	183b      	adds	r3, r7, r0
 80133e0:	183a      	adds	r2, r7, r0
 80133e2:	8812      	ldrh	r2, [r2, #0]
 80133e4:	2180      	movs	r1, #128	@ 0x80
 80133e6:	0149      	lsls	r1, r1, #5
 80133e8:	404a      	eors	r2, r1
 80133ea:	801a      	strh	r2, [r3, #0]
 80133ec:	183b      	adds	r3, r7, r0
 80133ee:	183a      	adds	r2, r7, r0
 80133f0:	8812      	ldrh	r2, [r2, #0]
 80133f2:	2180      	movs	r1, #128	@ 0x80
 80133f4:	0189      	lsls	r1, r1, #6
 80133f6:	404a      	eors	r2, r1
 80133f8:	801a      	strh	r2, [r3, #0]
 80133fa:	687a      	ldr	r2, [r7, #4]
 80133fc:	683b      	ldr	r3, [r7, #0]
 80133fe:	781b      	ldrb	r3, [r3, #0]
 8013400:	009b      	lsls	r3, r3, #2
 8013402:	18d3      	adds	r3, r2, r3
 8013404:	183a      	adds	r2, r7, r0
 8013406:	8812      	ldrh	r2, [r2, #0]
 8013408:	4906      	ldr	r1, [pc, #24]	@ (8013424 <USB_EPStartXfer+0x126c>)
 801340a:	430a      	orrs	r2, r1
 801340c:	b292      	uxth	r2, r2
 801340e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8013410:	2300      	movs	r3, #0
}
 8013412:	0018      	movs	r0, r3
 8013414:	46bd      	mov	sp, r7
 8013416:	b043      	add	sp, #268	@ 0x10c
 8013418:	bd90      	pop	{r4, r7, pc}
 801341a:	46c0      	nop			@ (mov r8, r8)
 801341c:	00000406 	.word	0x00000406
 8013420:	ffffbf8f 	.word	0xffffbf8f
 8013424:	ffff8080 	.word	0xffff8080

08013428 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8013428:	b580      	push	{r7, lr}
 801342a:	b084      	sub	sp, #16
 801342c:	af00      	add	r7, sp, #0
 801342e:	6078      	str	r0, [r7, #4]
 8013430:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8013432:	683b      	ldr	r3, [r7, #0]
 8013434:	785b      	ldrb	r3, [r3, #1]
 8013436:	2b00      	cmp	r3, #0
 8013438:	d01d      	beq.n	8013476 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 801343a:	687a      	ldr	r2, [r7, #4]
 801343c:	683b      	ldr	r3, [r7, #0]
 801343e:	781b      	ldrb	r3, [r3, #0]
 8013440:	009b      	lsls	r3, r3, #2
 8013442:	18d3      	adds	r3, r2, r3
 8013444:	881b      	ldrh	r3, [r3, #0]
 8013446:	b29a      	uxth	r2, r3
 8013448:	200c      	movs	r0, #12
 801344a:	183b      	adds	r3, r7, r0
 801344c:	491b      	ldr	r1, [pc, #108]	@ (80134bc <USB_EPSetStall+0x94>)
 801344e:	400a      	ands	r2, r1
 8013450:	801a      	strh	r2, [r3, #0]
 8013452:	183b      	adds	r3, r7, r0
 8013454:	183a      	adds	r2, r7, r0
 8013456:	8812      	ldrh	r2, [r2, #0]
 8013458:	2110      	movs	r1, #16
 801345a:	404a      	eors	r2, r1
 801345c:	801a      	strh	r2, [r3, #0]
 801345e:	687a      	ldr	r2, [r7, #4]
 8013460:	683b      	ldr	r3, [r7, #0]
 8013462:	781b      	ldrb	r3, [r3, #0]
 8013464:	009b      	lsls	r3, r3, #2
 8013466:	18d3      	adds	r3, r2, r3
 8013468:	183a      	adds	r2, r7, r0
 801346a:	8812      	ldrh	r2, [r2, #0]
 801346c:	4914      	ldr	r1, [pc, #80]	@ (80134c0 <USB_EPSetStall+0x98>)
 801346e:	430a      	orrs	r2, r1
 8013470:	b292      	uxth	r2, r2
 8013472:	801a      	strh	r2, [r3, #0]
 8013474:	e01d      	b.n	80134b2 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8013476:	687a      	ldr	r2, [r7, #4]
 8013478:	683b      	ldr	r3, [r7, #0]
 801347a:	781b      	ldrb	r3, [r3, #0]
 801347c:	009b      	lsls	r3, r3, #2
 801347e:	18d3      	adds	r3, r2, r3
 8013480:	881b      	ldrh	r3, [r3, #0]
 8013482:	b29a      	uxth	r2, r3
 8013484:	200e      	movs	r0, #14
 8013486:	183b      	adds	r3, r7, r0
 8013488:	490e      	ldr	r1, [pc, #56]	@ (80134c4 <USB_EPSetStall+0x9c>)
 801348a:	400a      	ands	r2, r1
 801348c:	801a      	strh	r2, [r3, #0]
 801348e:	183b      	adds	r3, r7, r0
 8013490:	183a      	adds	r2, r7, r0
 8013492:	8812      	ldrh	r2, [r2, #0]
 8013494:	2180      	movs	r1, #128	@ 0x80
 8013496:	0149      	lsls	r1, r1, #5
 8013498:	404a      	eors	r2, r1
 801349a:	801a      	strh	r2, [r3, #0]
 801349c:	687a      	ldr	r2, [r7, #4]
 801349e:	683b      	ldr	r3, [r7, #0]
 80134a0:	781b      	ldrb	r3, [r3, #0]
 80134a2:	009b      	lsls	r3, r3, #2
 80134a4:	18d3      	adds	r3, r2, r3
 80134a6:	183a      	adds	r2, r7, r0
 80134a8:	8812      	ldrh	r2, [r2, #0]
 80134aa:	4905      	ldr	r1, [pc, #20]	@ (80134c0 <USB_EPSetStall+0x98>)
 80134ac:	430a      	orrs	r2, r1
 80134ae:	b292      	uxth	r2, r2
 80134b0:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 80134b2:	2300      	movs	r3, #0
}
 80134b4:	0018      	movs	r0, r3
 80134b6:	46bd      	mov	sp, r7
 80134b8:	b004      	add	sp, #16
 80134ba:	bd80      	pop	{r7, pc}
 80134bc:	ffff8fbf 	.word	0xffff8fbf
 80134c0:	ffff8080 	.word	0xffff8080
 80134c4:	ffffbf8f 	.word	0xffffbf8f

080134c8 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b086      	sub	sp, #24
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
 80134d0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80134d2:	683b      	ldr	r3, [r7, #0]
 80134d4:	7b1b      	ldrb	r3, [r3, #12]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d000      	beq.n	80134dc <USB_EPClearStall+0x14>
 80134da:	e095      	b.n	8013608 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	785b      	ldrb	r3, [r3, #1]
 80134e0:	2b00      	cmp	r3, #0
 80134e2:	d046      	beq.n	8013572 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80134e4:	687a      	ldr	r2, [r7, #4]
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	781b      	ldrb	r3, [r3, #0]
 80134ea:	009b      	lsls	r3, r3, #2
 80134ec:	18d2      	adds	r2, r2, r3
 80134ee:	2110      	movs	r1, #16
 80134f0:	187b      	adds	r3, r7, r1
 80134f2:	8812      	ldrh	r2, [r2, #0]
 80134f4:	801a      	strh	r2, [r3, #0]
 80134f6:	187b      	adds	r3, r7, r1
 80134f8:	881b      	ldrh	r3, [r3, #0]
 80134fa:	2240      	movs	r2, #64	@ 0x40
 80134fc:	4013      	ands	r3, r2
 80134fe:	d016      	beq.n	801352e <USB_EPClearStall+0x66>
 8013500:	687a      	ldr	r2, [r7, #4]
 8013502:	683b      	ldr	r3, [r7, #0]
 8013504:	781b      	ldrb	r3, [r3, #0]
 8013506:	009b      	lsls	r3, r3, #2
 8013508:	18d3      	adds	r3, r2, r3
 801350a:	881b      	ldrh	r3, [r3, #0]
 801350c:	b29a      	uxth	r2, r3
 801350e:	200e      	movs	r0, #14
 8013510:	183b      	adds	r3, r7, r0
 8013512:	4940      	ldr	r1, [pc, #256]	@ (8013614 <USB_EPClearStall+0x14c>)
 8013514:	400a      	ands	r2, r1
 8013516:	801a      	strh	r2, [r3, #0]
 8013518:	687a      	ldr	r2, [r7, #4]
 801351a:	683b      	ldr	r3, [r7, #0]
 801351c:	781b      	ldrb	r3, [r3, #0]
 801351e:	009b      	lsls	r3, r3, #2
 8013520:	18d3      	adds	r3, r2, r3
 8013522:	183a      	adds	r2, r7, r0
 8013524:	8812      	ldrh	r2, [r2, #0]
 8013526:	493c      	ldr	r1, [pc, #240]	@ (8013618 <USB_EPClearStall+0x150>)
 8013528:	430a      	orrs	r2, r1
 801352a:	b292      	uxth	r2, r2
 801352c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801352e:	683b      	ldr	r3, [r7, #0]
 8013530:	78db      	ldrb	r3, [r3, #3]
 8013532:	2b01      	cmp	r3, #1
 8013534:	d068      	beq.n	8013608 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8013536:	687a      	ldr	r2, [r7, #4]
 8013538:	683b      	ldr	r3, [r7, #0]
 801353a:	781b      	ldrb	r3, [r3, #0]
 801353c:	009b      	lsls	r3, r3, #2
 801353e:	18d3      	adds	r3, r2, r3
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	b29a      	uxth	r2, r3
 8013544:	200c      	movs	r0, #12
 8013546:	183b      	adds	r3, r7, r0
 8013548:	4934      	ldr	r1, [pc, #208]	@ (801361c <USB_EPClearStall+0x154>)
 801354a:	400a      	ands	r2, r1
 801354c:	801a      	strh	r2, [r3, #0]
 801354e:	183b      	adds	r3, r7, r0
 8013550:	183a      	adds	r2, r7, r0
 8013552:	8812      	ldrh	r2, [r2, #0]
 8013554:	2120      	movs	r1, #32
 8013556:	404a      	eors	r2, r1
 8013558:	801a      	strh	r2, [r3, #0]
 801355a:	687a      	ldr	r2, [r7, #4]
 801355c:	683b      	ldr	r3, [r7, #0]
 801355e:	781b      	ldrb	r3, [r3, #0]
 8013560:	009b      	lsls	r3, r3, #2
 8013562:	18d3      	adds	r3, r2, r3
 8013564:	183a      	adds	r2, r7, r0
 8013566:	8812      	ldrh	r2, [r2, #0]
 8013568:	492d      	ldr	r1, [pc, #180]	@ (8013620 <USB_EPClearStall+0x158>)
 801356a:	430a      	orrs	r2, r1
 801356c:	b292      	uxth	r2, r2
 801356e:	801a      	strh	r2, [r3, #0]
 8013570:	e04a      	b.n	8013608 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8013572:	687a      	ldr	r2, [r7, #4]
 8013574:	683b      	ldr	r3, [r7, #0]
 8013576:	781b      	ldrb	r3, [r3, #0]
 8013578:	009b      	lsls	r3, r3, #2
 801357a:	18d2      	adds	r2, r2, r3
 801357c:	2116      	movs	r1, #22
 801357e:	187b      	adds	r3, r7, r1
 8013580:	8812      	ldrh	r2, [r2, #0]
 8013582:	801a      	strh	r2, [r3, #0]
 8013584:	187b      	adds	r3, r7, r1
 8013586:	881a      	ldrh	r2, [r3, #0]
 8013588:	2380      	movs	r3, #128	@ 0x80
 801358a:	01db      	lsls	r3, r3, #7
 801358c:	4013      	ands	r3, r2
 801358e:	d016      	beq.n	80135be <USB_EPClearStall+0xf6>
 8013590:	687a      	ldr	r2, [r7, #4]
 8013592:	683b      	ldr	r3, [r7, #0]
 8013594:	781b      	ldrb	r3, [r3, #0]
 8013596:	009b      	lsls	r3, r3, #2
 8013598:	18d3      	adds	r3, r2, r3
 801359a:	881b      	ldrh	r3, [r3, #0]
 801359c:	b29a      	uxth	r2, r3
 801359e:	2014      	movs	r0, #20
 80135a0:	183b      	adds	r3, r7, r0
 80135a2:	491c      	ldr	r1, [pc, #112]	@ (8013614 <USB_EPClearStall+0x14c>)
 80135a4:	400a      	ands	r2, r1
 80135a6:	801a      	strh	r2, [r3, #0]
 80135a8:	687a      	ldr	r2, [r7, #4]
 80135aa:	683b      	ldr	r3, [r7, #0]
 80135ac:	781b      	ldrb	r3, [r3, #0]
 80135ae:	009b      	lsls	r3, r3, #2
 80135b0:	18d3      	adds	r3, r2, r3
 80135b2:	183a      	adds	r2, r7, r0
 80135b4:	8812      	ldrh	r2, [r2, #0]
 80135b6:	491b      	ldr	r1, [pc, #108]	@ (8013624 <USB_EPClearStall+0x15c>)
 80135b8:	430a      	orrs	r2, r1
 80135ba:	b292      	uxth	r2, r2
 80135bc:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80135be:	687a      	ldr	r2, [r7, #4]
 80135c0:	683b      	ldr	r3, [r7, #0]
 80135c2:	781b      	ldrb	r3, [r3, #0]
 80135c4:	009b      	lsls	r3, r3, #2
 80135c6:	18d3      	adds	r3, r2, r3
 80135c8:	881b      	ldrh	r3, [r3, #0]
 80135ca:	b29a      	uxth	r2, r3
 80135cc:	2012      	movs	r0, #18
 80135ce:	183b      	adds	r3, r7, r0
 80135d0:	4915      	ldr	r1, [pc, #84]	@ (8013628 <USB_EPClearStall+0x160>)
 80135d2:	400a      	ands	r2, r1
 80135d4:	801a      	strh	r2, [r3, #0]
 80135d6:	183b      	adds	r3, r7, r0
 80135d8:	183a      	adds	r2, r7, r0
 80135da:	8812      	ldrh	r2, [r2, #0]
 80135dc:	2180      	movs	r1, #128	@ 0x80
 80135de:	0149      	lsls	r1, r1, #5
 80135e0:	404a      	eors	r2, r1
 80135e2:	801a      	strh	r2, [r3, #0]
 80135e4:	183b      	adds	r3, r7, r0
 80135e6:	183a      	adds	r2, r7, r0
 80135e8:	8812      	ldrh	r2, [r2, #0]
 80135ea:	2180      	movs	r1, #128	@ 0x80
 80135ec:	0189      	lsls	r1, r1, #6
 80135ee:	404a      	eors	r2, r1
 80135f0:	801a      	strh	r2, [r3, #0]
 80135f2:	687a      	ldr	r2, [r7, #4]
 80135f4:	683b      	ldr	r3, [r7, #0]
 80135f6:	781b      	ldrb	r3, [r3, #0]
 80135f8:	009b      	lsls	r3, r3, #2
 80135fa:	18d3      	adds	r3, r2, r3
 80135fc:	183a      	adds	r2, r7, r0
 80135fe:	8812      	ldrh	r2, [r2, #0]
 8013600:	4907      	ldr	r1, [pc, #28]	@ (8013620 <USB_EPClearStall+0x158>)
 8013602:	430a      	orrs	r2, r1
 8013604:	b292      	uxth	r2, r2
 8013606:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8013608:	2300      	movs	r3, #0
}
 801360a:	0018      	movs	r0, r3
 801360c:	46bd      	mov	sp, r7
 801360e:	b006      	add	sp, #24
 8013610:	bd80      	pop	{r7, pc}
 8013612:	46c0      	nop			@ (mov r8, r8)
 8013614:	ffff8f8f 	.word	0xffff8f8f
 8013618:	ffff80c0 	.word	0xffff80c0
 801361c:	ffff8fbf 	.word	0xffff8fbf
 8013620:	ffff8080 	.word	0xffff8080
 8013624:	ffffc080 	.word	0xffffc080
 8013628:	ffffbf8f 	.word	0xffffbf8f

0801362c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801362c:	b580      	push	{r7, lr}
 801362e:	b082      	sub	sp, #8
 8013630:	af00      	add	r7, sp, #0
 8013632:	6078      	str	r0, [r7, #4]
 8013634:	000a      	movs	r2, r1
 8013636:	1cfb      	adds	r3, r7, #3
 8013638:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 801363a:	1cfb      	adds	r3, r7, #3
 801363c:	781b      	ldrb	r3, [r3, #0]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d103      	bne.n	801364a <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8013642:	687b      	ldr	r3, [r7, #4]
 8013644:	224c      	movs	r2, #76	@ 0x4c
 8013646:	2180      	movs	r1, #128	@ 0x80
 8013648:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 801364a:	2300      	movs	r3, #0
}
 801364c:	0018      	movs	r0, r3
 801364e:	46bd      	mov	sp, r7
 8013650:	b002      	add	sp, #8
 8013652:	bd80      	pop	{r7, pc}

08013654 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	2258      	movs	r2, #88	@ 0x58
 8013660:	5a9b      	ldrh	r3, [r3, r2]
 8013662:	b29b      	uxth	r3, r3
 8013664:	4a05      	ldr	r2, [pc, #20]	@ (801367c <USB_DevConnect+0x28>)
 8013666:	4313      	orrs	r3, r2
 8013668:	b299      	uxth	r1, r3
 801366a:	687b      	ldr	r3, [r7, #4]
 801366c:	2258      	movs	r2, #88	@ 0x58
 801366e:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8013670:	2300      	movs	r3, #0
}
 8013672:	0018      	movs	r0, r3
 8013674:	46bd      	mov	sp, r7
 8013676:	b002      	add	sp, #8
 8013678:	bd80      	pop	{r7, pc}
 801367a:	46c0      	nop			@ (mov r8, r8)
 801367c:	ffff8000 	.word	0xffff8000

08013680 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8013680:	b580      	push	{r7, lr}
 8013682:	b084      	sub	sp, #16
 8013684:	af00      	add	r7, sp, #0
 8013686:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8013688:	687b      	ldr	r3, [r7, #4]
 801368a:	2244      	movs	r2, #68	@ 0x44
 801368c:	5a9b      	ldrh	r3, [r3, r2]
 801368e:	b29b      	uxth	r3, r3
 8013690:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8013692:	68fb      	ldr	r3, [r7, #12]
}
 8013694:	0018      	movs	r0, r3
 8013696:	46bd      	mov	sp, r7
 8013698:	b004      	add	sp, #16
 801369a:	bd80      	pop	{r7, pc}

0801369c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801369c:	b580      	push	{r7, lr}
 801369e:	b08a      	sub	sp, #40	@ 0x28
 80136a0:	af00      	add	r7, sp, #0
 80136a2:	60f8      	str	r0, [r7, #12]
 80136a4:	60b9      	str	r1, [r7, #8]
 80136a6:	0019      	movs	r1, r3
 80136a8:	1dbb      	adds	r3, r7, #6
 80136aa:	801a      	strh	r2, [r3, #0]
 80136ac:	1d3b      	adds	r3, r7, #4
 80136ae:	1c0a      	adds	r2, r1, #0
 80136b0:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80136b2:	1d3b      	adds	r3, r7, #4
 80136b4:	881b      	ldrh	r3, [r3, #0]
 80136b6:	3301      	adds	r3, #1
 80136b8:	085b      	lsrs	r3, r3, #1
 80136ba:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80136bc:	68fb      	ldr	r3, [r7, #12]
 80136be:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80136c0:	68bb      	ldr	r3, [r7, #8]
 80136c2:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80136c4:	1dbb      	adds	r3, r7, #6
 80136c6:	881a      	ldrh	r2, [r3, #0]
 80136c8:	697b      	ldr	r3, [r7, #20]
 80136ca:	18d3      	adds	r3, r2, r3
 80136cc:	2280      	movs	r2, #128	@ 0x80
 80136ce:	00d2      	lsls	r2, r2, #3
 80136d0:	4694      	mov	ip, r2
 80136d2:	4463      	add	r3, ip
 80136d4:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80136d6:	69bb      	ldr	r3, [r7, #24]
 80136d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80136da:	e020      	b.n	801371e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 80136dc:	69fb      	ldr	r3, [r7, #28]
 80136de:	781a      	ldrb	r2, [r3, #0]
 80136e0:	2112      	movs	r1, #18
 80136e2:	187b      	adds	r3, r7, r1
 80136e4:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 80136e6:	69fb      	ldr	r3, [r7, #28]
 80136e8:	3301      	adds	r3, #1
 80136ea:	781b      	ldrb	r3, [r3, #0]
 80136ec:	021b      	lsls	r3, r3, #8
 80136ee:	b21a      	sxth	r2, r3
 80136f0:	187b      	adds	r3, r7, r1
 80136f2:	2000      	movs	r0, #0
 80136f4:	5e1b      	ldrsh	r3, [r3, r0]
 80136f6:	4313      	orrs	r3, r2
 80136f8:	b21a      	sxth	r2, r3
 80136fa:	187b      	adds	r3, r7, r1
 80136fc:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 80136fe:	6a3b      	ldr	r3, [r7, #32]
 8013700:	187a      	adds	r2, r7, r1
 8013702:	8812      	ldrh	r2, [r2, #0]
 8013704:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8013706:	6a3b      	ldr	r3, [r7, #32]
 8013708:	3302      	adds	r3, #2
 801370a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801370c:	69fb      	ldr	r3, [r7, #28]
 801370e:	3301      	adds	r3, #1
 8013710:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8013712:	69fb      	ldr	r3, [r7, #28]
 8013714:	3301      	adds	r3, #1
 8013716:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8013718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801371a:	3b01      	subs	r3, #1
 801371c:	627b      	str	r3, [r7, #36]	@ 0x24
 801371e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013720:	2b00      	cmp	r3, #0
 8013722:	d1db      	bne.n	80136dc <USB_WritePMA+0x40>
  }
}
 8013724:	46c0      	nop			@ (mov r8, r8)
 8013726:	46c0      	nop			@ (mov r8, r8)
 8013728:	46bd      	mov	sp, r7
 801372a:	b00a      	add	sp, #40	@ 0x28
 801372c:	bd80      	pop	{r7, pc}

0801372e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801372e:	b580      	push	{r7, lr}
 8013730:	b08a      	sub	sp, #40	@ 0x28
 8013732:	af00      	add	r7, sp, #0
 8013734:	60f8      	str	r0, [r7, #12]
 8013736:	60b9      	str	r1, [r7, #8]
 8013738:	0019      	movs	r1, r3
 801373a:	1dbb      	adds	r3, r7, #6
 801373c:	801a      	strh	r2, [r3, #0]
 801373e:	1d3b      	adds	r3, r7, #4
 8013740:	1c0a      	adds	r2, r1, #0
 8013742:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8013744:	1d3b      	adds	r3, r7, #4
 8013746:	881b      	ldrh	r3, [r3, #0]
 8013748:	085b      	lsrs	r3, r3, #1
 801374a:	b29b      	uxth	r3, r3
 801374c:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801374e:	68fb      	ldr	r3, [r7, #12]
 8013750:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8013752:	68bb      	ldr	r3, [r7, #8]
 8013754:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8013756:	1dbb      	adds	r3, r7, #6
 8013758:	881a      	ldrh	r2, [r3, #0]
 801375a:	697b      	ldr	r3, [r7, #20]
 801375c:	18d3      	adds	r3, r2, r3
 801375e:	2280      	movs	r2, #128	@ 0x80
 8013760:	00d2      	lsls	r2, r2, #3
 8013762:	4694      	mov	ip, r2
 8013764:	4463      	add	r3, ip
 8013766:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	627b      	str	r3, [r7, #36]	@ 0x24
 801376c:	e018      	b.n	80137a0 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 801376e:	6a3b      	ldr	r3, [r7, #32]
 8013770:	881b      	ldrh	r3, [r3, #0]
 8013772:	b29b      	uxth	r3, r3
 8013774:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8013776:	6a3b      	ldr	r3, [r7, #32]
 8013778:	3302      	adds	r3, #2
 801377a:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	b2da      	uxtb	r2, r3
 8013780:	69fb      	ldr	r3, [r7, #28]
 8013782:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013784:	69fb      	ldr	r3, [r7, #28]
 8013786:	3301      	adds	r3, #1
 8013788:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 801378a:	693b      	ldr	r3, [r7, #16]
 801378c:	0a1b      	lsrs	r3, r3, #8
 801378e:	b2da      	uxtb	r2, r3
 8013790:	69fb      	ldr	r3, [r7, #28]
 8013792:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8013794:	69fb      	ldr	r3, [r7, #28]
 8013796:	3301      	adds	r3, #1
 8013798:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801379a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801379c:	3b01      	subs	r3, #1
 801379e:	627b      	str	r3, [r7, #36]	@ 0x24
 80137a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80137a2:	2b00      	cmp	r3, #0
 80137a4:	d1e3      	bne.n	801376e <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 80137a6:	1d3b      	adds	r3, r7, #4
 80137a8:	881b      	ldrh	r3, [r3, #0]
 80137aa:	2201      	movs	r2, #1
 80137ac:	4013      	ands	r3, r2
 80137ae:	b29b      	uxth	r3, r3
 80137b0:	2b00      	cmp	r3, #0
 80137b2:	d007      	beq.n	80137c4 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 80137b4:	6a3b      	ldr	r3, [r7, #32]
 80137b6:	881b      	ldrh	r3, [r3, #0]
 80137b8:	b29b      	uxth	r3, r3
 80137ba:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80137bc:	693b      	ldr	r3, [r7, #16]
 80137be:	b2da      	uxtb	r2, r3
 80137c0:	69fb      	ldr	r3, [r7, #28]
 80137c2:	701a      	strb	r2, [r3, #0]
  }
}
 80137c4:	46c0      	nop			@ (mov r8, r8)
 80137c6:	46bd      	mov	sp, r7
 80137c8:	b00a      	add	sp, #40	@ 0x28
 80137ca:	bd80      	pop	{r7, pc}

080137cc <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b084      	sub	sp, #16
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
 80137d4:	000a      	movs	r2, r1
 80137d6:	1cfb      	adds	r3, r7, #3
 80137d8:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80137da:	230f      	movs	r3, #15
 80137dc:	18fb      	adds	r3, r7, r3
 80137de:	2200      	movs	r2, #0
 80137e0:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	7c1b      	ldrb	r3, [r3, #16]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d116      	bne.n	8013818 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80137ea:	2380      	movs	r3, #128	@ 0x80
 80137ec:	009b      	lsls	r3, r3, #2
 80137ee:	6878      	ldr	r0, [r7, #4]
 80137f0:	2202      	movs	r2, #2
 80137f2:	2181      	movs	r1, #129	@ 0x81
 80137f4:	f002 f81d 	bl	8015832 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	2201      	movs	r2, #1
 80137fc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80137fe:	2380      	movs	r3, #128	@ 0x80
 8013800:	009b      	lsls	r3, r3, #2
 8013802:	6878      	ldr	r0, [r7, #4]
 8013804:	2202      	movs	r2, #2
 8013806:	2101      	movs	r1, #1
 8013808:	f002 f813 	bl	8015832 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801380c:	687a      	ldr	r2, [r7, #4]
 801380e:	23b6      	movs	r3, #182	@ 0xb6
 8013810:	005b      	lsls	r3, r3, #1
 8013812:	2101      	movs	r1, #1
 8013814:	50d1      	str	r1, [r2, r3]
 8013816:	e013      	b.n	8013840 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8013818:	6878      	ldr	r0, [r7, #4]
 801381a:	2340      	movs	r3, #64	@ 0x40
 801381c:	2202      	movs	r2, #2
 801381e:	2181      	movs	r1, #129	@ 0x81
 8013820:	f002 f807 	bl	8015832 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	2201      	movs	r2, #1
 8013828:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801382a:	6878      	ldr	r0, [r7, #4]
 801382c:	2340      	movs	r3, #64	@ 0x40
 801382e:	2202      	movs	r2, #2
 8013830:	2101      	movs	r1, #1
 8013832:	f001 fffe 	bl	8015832 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8013836:	687a      	ldr	r2, [r7, #4]
 8013838:	23b6      	movs	r3, #182	@ 0xb6
 801383a:	005b      	lsls	r3, r3, #1
 801383c:	2101      	movs	r1, #1
 801383e:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8013840:	6878      	ldr	r0, [r7, #4]
 8013842:	2308      	movs	r3, #8
 8013844:	2203      	movs	r2, #3
 8013846:	2182      	movs	r1, #130	@ 0x82
 8013848:	f001 fff3 	bl	8015832 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2201      	movs	r2, #1
 8013850:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8013852:	2387      	movs	r3, #135	@ 0x87
 8013854:	009b      	lsls	r3, r3, #2
 8013856:	0018      	movs	r0, r3
 8013858:	f002 f984 	bl	8015b64 <USBD_static_malloc>
 801385c:	0001      	movs	r1, r0
 801385e:	687a      	ldr	r2, [r7, #4]
 8013860:	23ae      	movs	r3, #174	@ 0xae
 8013862:	009b      	lsls	r3, r3, #2
 8013864:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 8013866:	687a      	ldr	r2, [r7, #4]
 8013868:	23ae      	movs	r3, #174	@ 0xae
 801386a:	009b      	lsls	r3, r3, #2
 801386c:	58d3      	ldr	r3, [r2, r3]
 801386e:	2b00      	cmp	r3, #0
 8013870:	d104      	bne.n	801387c <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 8013872:	230f      	movs	r3, #15
 8013874:	18fb      	adds	r3, r7, r3
 8013876:	2201      	movs	r2, #1
 8013878:	701a      	strb	r2, [r3, #0]
 801387a:	e02c      	b.n	80138d6 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 801387c:	687a      	ldr	r2, [r7, #4]
 801387e:	23ae      	movs	r3, #174	@ 0xae
 8013880:	009b      	lsls	r3, r3, #2
 8013882:	58d3      	ldr	r3, [r2, r3]
 8013884:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8013886:	687a      	ldr	r2, [r7, #4]
 8013888:	23af      	movs	r3, #175	@ 0xaf
 801388a:	009b      	lsls	r3, r3, #2
 801388c:	58d3      	ldr	r3, [r2, r3]
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8013892:	68ba      	ldr	r2, [r7, #8]
 8013894:	2385      	movs	r3, #133	@ 0x85
 8013896:	009b      	lsls	r3, r3, #2
 8013898:	2100      	movs	r1, #0
 801389a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801389c:	68ba      	ldr	r2, [r7, #8]
 801389e:	2386      	movs	r3, #134	@ 0x86
 80138a0:	009b      	lsls	r3, r3, #2
 80138a2:	2100      	movs	r1, #0
 80138a4:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80138a6:	687b      	ldr	r3, [r7, #4]
 80138a8:	7c1b      	ldrb	r3, [r3, #16]
 80138aa:	2b00      	cmp	r3, #0
 80138ac:	d10a      	bne.n	80138c4 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80138ae:	68ba      	ldr	r2, [r7, #8]
 80138b0:	2381      	movs	r3, #129	@ 0x81
 80138b2:	009b      	lsls	r3, r3, #2
 80138b4:	58d2      	ldr	r2, [r2, r3]
 80138b6:	2380      	movs	r3, #128	@ 0x80
 80138b8:	009b      	lsls	r3, r3, #2
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	2101      	movs	r1, #1
 80138be:	f002 f903 	bl	8015ac8 <USBD_LL_PrepareReceive>
 80138c2:	e008      	b.n	80138d6 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80138c4:	68ba      	ldr	r2, [r7, #8]
 80138c6:	2381      	movs	r3, #129	@ 0x81
 80138c8:	009b      	lsls	r3, r3, #2
 80138ca:	58d2      	ldr	r2, [r2, r3]
 80138cc:	6878      	ldr	r0, [r7, #4]
 80138ce:	2340      	movs	r3, #64	@ 0x40
 80138d0:	2101      	movs	r1, #1
 80138d2:	f002 f8f9 	bl	8015ac8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 80138d6:	230f      	movs	r3, #15
 80138d8:	18fb      	adds	r3, r7, r3
 80138da:	781b      	ldrb	r3, [r3, #0]
}
 80138dc:	0018      	movs	r0, r3
 80138de:	46bd      	mov	sp, r7
 80138e0:	b004      	add	sp, #16
 80138e2:	bd80      	pop	{r7, pc}

080138e4 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80138e4:	b580      	push	{r7, lr}
 80138e6:	b084      	sub	sp, #16
 80138e8:	af00      	add	r7, sp, #0
 80138ea:	6078      	str	r0, [r7, #4]
 80138ec:	000a      	movs	r2, r1
 80138ee:	1cfb      	adds	r3, r7, #3
 80138f0:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 80138f2:	230f      	movs	r3, #15
 80138f4:	18fb      	adds	r3, r7, r3
 80138f6:	2200      	movs	r2, #0
 80138f8:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2181      	movs	r1, #129	@ 0x81
 80138fe:	0018      	movs	r0, r3
 8013900:	f001 ffce 	bl	80158a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	2200      	movs	r2, #0
 8013908:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2101      	movs	r1, #1
 801390e:	0018      	movs	r0, r3
 8013910:	f001 ffc6 	bl	80158a0 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8013914:	687a      	ldr	r2, [r7, #4]
 8013916:	23b6      	movs	r3, #182	@ 0xb6
 8013918:	005b      	lsls	r3, r3, #1
 801391a:	2100      	movs	r1, #0
 801391c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801391e:	687b      	ldr	r3, [r7, #4]
 8013920:	2182      	movs	r1, #130	@ 0x82
 8013922:	0018      	movs	r0, r3
 8013924:	f001 ffbc 	bl	80158a0 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8013928:	687b      	ldr	r3, [r7, #4]
 801392a:	2200      	movs	r2, #0
 801392c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801392e:	687a      	ldr	r2, [r7, #4]
 8013930:	23ae      	movs	r3, #174	@ 0xae
 8013932:	009b      	lsls	r3, r3, #2
 8013934:	58d3      	ldr	r3, [r2, r3]
 8013936:	2b00      	cmp	r3, #0
 8013938:	d011      	beq.n	801395e <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 801393a:	687a      	ldr	r2, [r7, #4]
 801393c:	23af      	movs	r3, #175	@ 0xaf
 801393e:	009b      	lsls	r3, r3, #2
 8013940:	58d3      	ldr	r3, [r2, r3]
 8013942:	685b      	ldr	r3, [r3, #4]
 8013944:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8013946:	687a      	ldr	r2, [r7, #4]
 8013948:	23ae      	movs	r3, #174	@ 0xae
 801394a:	009b      	lsls	r3, r3, #2
 801394c:	58d3      	ldr	r3, [r2, r3]
 801394e:	0018      	movs	r0, r3
 8013950:	f002 f914 	bl	8015b7c <USBD_static_free>
    pdev->pClassData = NULL;
 8013954:	687a      	ldr	r2, [r7, #4]
 8013956:	23ae      	movs	r3, #174	@ 0xae
 8013958:	009b      	lsls	r3, r3, #2
 801395a:	2100      	movs	r1, #0
 801395c:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 801395e:	230f      	movs	r3, #15
 8013960:	18fb      	adds	r3, r7, r3
 8013962:	781b      	ldrb	r3, [r3, #0]
}
 8013964:	0018      	movs	r0, r3
 8013966:	46bd      	mov	sp, r7
 8013968:	b004      	add	sp, #16
 801396a:	bd80      	pop	{r7, pc}

0801396c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801396c:	b580      	push	{r7, lr}
 801396e:	b086      	sub	sp, #24
 8013970:	af00      	add	r7, sp, #0
 8013972:	6078      	str	r0, [r7, #4]
 8013974:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013976:	687a      	ldr	r2, [r7, #4]
 8013978:	23ae      	movs	r3, #174	@ 0xae
 801397a:	009b      	lsls	r3, r3, #2
 801397c:	58d3      	ldr	r3, [r2, r3]
 801397e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 8013980:	230f      	movs	r3, #15
 8013982:	18fb      	adds	r3, r7, r3
 8013984:	2200      	movs	r2, #0
 8013986:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 8013988:	230c      	movs	r3, #12
 801398a:	18fb      	adds	r3, r7, r3
 801398c:	2200      	movs	r2, #0
 801398e:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8013990:	2317      	movs	r3, #23
 8013992:	18fb      	adds	r3, r7, r3
 8013994:	2200      	movs	r2, #0
 8013996:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8013998:	683b      	ldr	r3, [r7, #0]
 801399a:	781b      	ldrb	r3, [r3, #0]
 801399c:	001a      	movs	r2, r3
 801399e:	2360      	movs	r3, #96	@ 0x60
 80139a0:	4013      	ands	r3, r2
 80139a2:	d03d      	beq.n	8013a20 <USBD_CDC_Setup+0xb4>
 80139a4:	2b20      	cmp	r3, #32
 80139a6:	d000      	beq.n	80139aa <USBD_CDC_Setup+0x3e>
 80139a8:	e094      	b.n	8013ad4 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80139aa:	683b      	ldr	r3, [r7, #0]
 80139ac:	88db      	ldrh	r3, [r3, #6]
 80139ae:	2b00      	cmp	r3, #0
 80139b0:	d02b      	beq.n	8013a0a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 80139b2:	683b      	ldr	r3, [r7, #0]
 80139b4:	781b      	ldrb	r3, [r3, #0]
 80139b6:	b25b      	sxtb	r3, r3
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	da12      	bge.n	80139e2 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80139bc:	687a      	ldr	r2, [r7, #4]
 80139be:	23af      	movs	r3, #175	@ 0xaf
 80139c0:	009b      	lsls	r3, r3, #2
 80139c2:	58d3      	ldr	r3, [r2, r3]
 80139c4:	689b      	ldr	r3, [r3, #8]
 80139c6:	683a      	ldr	r2, [r7, #0]
 80139c8:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80139ca:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80139cc:	683a      	ldr	r2, [r7, #0]
 80139ce:	88d2      	ldrh	r2, [r2, #6]
 80139d0:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80139d2:	6939      	ldr	r1, [r7, #16]
 80139d4:	683b      	ldr	r3, [r7, #0]
 80139d6:	88da      	ldrh	r2, [r3, #6]
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	0018      	movs	r0, r3
 80139dc:	f001 fb79 	bl	80150d2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80139e0:	e083      	b.n	8013aea <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 80139e2:	683b      	ldr	r3, [r7, #0]
 80139e4:	7859      	ldrb	r1, [r3, #1]
 80139e6:	693a      	ldr	r2, [r7, #16]
 80139e8:	2380      	movs	r3, #128	@ 0x80
 80139ea:	009b      	lsls	r3, r3, #2
 80139ec:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80139ee:	683b      	ldr	r3, [r7, #0]
 80139f0:	88db      	ldrh	r3, [r3, #6]
 80139f2:	b2d9      	uxtb	r1, r3
 80139f4:	693b      	ldr	r3, [r7, #16]
 80139f6:	4a40      	ldr	r2, [pc, #256]	@ (8013af8 <USBD_CDC_Setup+0x18c>)
 80139f8:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80139fa:	6939      	ldr	r1, [r7, #16]
 80139fc:	683b      	ldr	r3, [r7, #0]
 80139fe:	88da      	ldrh	r2, [r3, #6]
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	0018      	movs	r0, r3
 8013a04:	f001 fb98 	bl	8015138 <USBD_CtlPrepareRx>
      break;
 8013a08:	e06f      	b.n	8013aea <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8013a0a:	687a      	ldr	r2, [r7, #4]
 8013a0c:	23af      	movs	r3, #175	@ 0xaf
 8013a0e:	009b      	lsls	r3, r3, #2
 8013a10:	58d3      	ldr	r3, [r2, r3]
 8013a12:	689b      	ldr	r3, [r3, #8]
 8013a14:	683a      	ldr	r2, [r7, #0]
 8013a16:	7850      	ldrb	r0, [r2, #1]
 8013a18:	6839      	ldr	r1, [r7, #0]
 8013a1a:	2200      	movs	r2, #0
 8013a1c:	4798      	blx	r3
      break;
 8013a1e:	e064      	b.n	8013aea <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8013a20:	683b      	ldr	r3, [r7, #0]
 8013a22:	785b      	ldrb	r3, [r3, #1]
 8013a24:	2b0b      	cmp	r3, #11
 8013a26:	d037      	beq.n	8013a98 <USBD_CDC_Setup+0x12c>
 8013a28:	dc47      	bgt.n	8013aba <USBD_CDC_Setup+0x14e>
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d002      	beq.n	8013a34 <USBD_CDC_Setup+0xc8>
 8013a2e:	2b0a      	cmp	r3, #10
 8013a30:	d019      	beq.n	8013a66 <USBD_CDC_Setup+0xfa>
 8013a32:	e042      	b.n	8013aba <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a34:	687a      	ldr	r2, [r7, #4]
 8013a36:	23a7      	movs	r3, #167	@ 0xa7
 8013a38:	009b      	lsls	r3, r3, #2
 8013a3a:	5cd3      	ldrb	r3, [r2, r3]
 8013a3c:	2b03      	cmp	r3, #3
 8013a3e:	d107      	bne.n	8013a50 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8013a40:	230c      	movs	r3, #12
 8013a42:	18f9      	adds	r1, r7, r3
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2202      	movs	r2, #2
 8013a48:	0018      	movs	r0, r3
 8013a4a:	f001 fb42 	bl	80150d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013a4e:	e040      	b.n	8013ad2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013a50:	683a      	ldr	r2, [r7, #0]
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	0011      	movs	r1, r2
 8013a56:	0018      	movs	r0, r3
 8013a58:	f001 fabd 	bl	8014fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013a5c:	2317      	movs	r3, #23
 8013a5e:	18fb      	adds	r3, r7, r3
 8013a60:	2202      	movs	r2, #2
 8013a62:	701a      	strb	r2, [r3, #0]
          break;
 8013a64:	e035      	b.n	8013ad2 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8013a66:	687a      	ldr	r2, [r7, #4]
 8013a68:	23a7      	movs	r3, #167	@ 0xa7
 8013a6a:	009b      	lsls	r3, r3, #2
 8013a6c:	5cd3      	ldrb	r3, [r2, r3]
 8013a6e:	2b03      	cmp	r3, #3
 8013a70:	d107      	bne.n	8013a82 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8013a72:	230f      	movs	r3, #15
 8013a74:	18f9      	adds	r1, r7, r3
 8013a76:	687b      	ldr	r3, [r7, #4]
 8013a78:	2201      	movs	r2, #1
 8013a7a:	0018      	movs	r0, r3
 8013a7c:	f001 fb29 	bl	80150d2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8013a80:	e027      	b.n	8013ad2 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 8013a82:	683a      	ldr	r2, [r7, #0]
 8013a84:	687b      	ldr	r3, [r7, #4]
 8013a86:	0011      	movs	r1, r2
 8013a88:	0018      	movs	r0, r3
 8013a8a:	f001 faa4 	bl	8014fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013a8e:	2317      	movs	r3, #23
 8013a90:	18fb      	adds	r3, r7, r3
 8013a92:	2202      	movs	r2, #2
 8013a94:	701a      	strb	r2, [r3, #0]
          break;
 8013a96:	e01c      	b.n	8013ad2 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8013a98:	687a      	ldr	r2, [r7, #4]
 8013a9a:	23a7      	movs	r3, #167	@ 0xa7
 8013a9c:	009b      	lsls	r3, r3, #2
 8013a9e:	5cd3      	ldrb	r3, [r2, r3]
 8013aa0:	2b03      	cmp	r3, #3
 8013aa2:	d015      	beq.n	8013ad0 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8013aa4:	683a      	ldr	r2, [r7, #0]
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	0011      	movs	r1, r2
 8013aaa:	0018      	movs	r0, r3
 8013aac:	f001 fa93 	bl	8014fd6 <USBD_CtlError>
            ret = USBD_FAIL;
 8013ab0:	2317      	movs	r3, #23
 8013ab2:	18fb      	adds	r3, r7, r3
 8013ab4:	2202      	movs	r2, #2
 8013ab6:	701a      	strb	r2, [r3, #0]
          }
          break;
 8013ab8:	e00a      	b.n	8013ad0 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 8013aba:	683a      	ldr	r2, [r7, #0]
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	0011      	movs	r1, r2
 8013ac0:	0018      	movs	r0, r3
 8013ac2:	f001 fa88 	bl	8014fd6 <USBD_CtlError>
          ret = USBD_FAIL;
 8013ac6:	2317      	movs	r3, #23
 8013ac8:	18fb      	adds	r3, r7, r3
 8013aca:	2202      	movs	r2, #2
 8013acc:	701a      	strb	r2, [r3, #0]
          break;
 8013ace:	e000      	b.n	8013ad2 <USBD_CDC_Setup+0x166>
          break;
 8013ad0:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8013ad2:	e00a      	b.n	8013aea <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8013ad4:	683a      	ldr	r2, [r7, #0]
 8013ad6:	687b      	ldr	r3, [r7, #4]
 8013ad8:	0011      	movs	r1, r2
 8013ada:	0018      	movs	r0, r3
 8013adc:	f001 fa7b 	bl	8014fd6 <USBD_CtlError>
      ret = USBD_FAIL;
 8013ae0:	2317      	movs	r3, #23
 8013ae2:	18fb      	adds	r3, r7, r3
 8013ae4:	2202      	movs	r2, #2
 8013ae6:	701a      	strb	r2, [r3, #0]
      break;
 8013ae8:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8013aea:	2317      	movs	r3, #23
 8013aec:	18fb      	adds	r3, r7, r3
 8013aee:	781b      	ldrb	r3, [r3, #0]
}
 8013af0:	0018      	movs	r0, r3
 8013af2:	46bd      	mov	sp, r7
 8013af4:	b006      	add	sp, #24
 8013af6:	bd80      	pop	{r7, pc}
 8013af8:	00000201 	.word	0x00000201

08013afc <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013afc:	b580      	push	{r7, lr}
 8013afe:	b084      	sub	sp, #16
 8013b00:	af00      	add	r7, sp, #0
 8013b02:	6078      	str	r0, [r7, #4]
 8013b04:	000a      	movs	r2, r1
 8013b06:	1cfb      	adds	r3, r7, #3
 8013b08:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8013b0a:	687a      	ldr	r2, [r7, #4]
 8013b0c:	23ae      	movs	r3, #174	@ 0xae
 8013b0e:	009b      	lsls	r3, r3, #2
 8013b10:	58d3      	ldr	r3, [r2, r3]
 8013b12:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8013b14:	687a      	ldr	r2, [r7, #4]
 8013b16:	23b0      	movs	r3, #176	@ 0xb0
 8013b18:	009b      	lsls	r3, r3, #2
 8013b1a:	58d3      	ldr	r3, [r2, r3]
 8013b1c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 8013b1e:	687a      	ldr	r2, [r7, #4]
 8013b20:	23ae      	movs	r3, #174	@ 0xae
 8013b22:	009b      	lsls	r3, r3, #2
 8013b24:	58d3      	ldr	r3, [r2, r3]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d03e      	beq.n	8013ba8 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 8013b2a:	1cfb      	adds	r3, r7, #3
 8013b2c:	781a      	ldrb	r2, [r3, #0]
 8013b2e:	6879      	ldr	r1, [r7, #4]
 8013b30:	0013      	movs	r3, r2
 8013b32:	009b      	lsls	r3, r3, #2
 8013b34:	189b      	adds	r3, r3, r2
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	18cb      	adds	r3, r1, r3
 8013b3a:	331c      	adds	r3, #28
 8013b3c:	681b      	ldr	r3, [r3, #0]
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d02b      	beq.n	8013b9a <USBD_CDC_DataIn+0x9e>
 8013b42:	1cfb      	adds	r3, r7, #3
 8013b44:	781a      	ldrb	r2, [r3, #0]
 8013b46:	6879      	ldr	r1, [r7, #4]
 8013b48:	0013      	movs	r3, r2
 8013b4a:	009b      	lsls	r3, r3, #2
 8013b4c:	189b      	adds	r3, r3, r2
 8013b4e:	009b      	lsls	r3, r3, #2
 8013b50:	18cb      	adds	r3, r1, r3
 8013b52:	331c      	adds	r3, #28
 8013b54:	6818      	ldr	r0, [r3, #0]
 8013b56:	1cfb      	adds	r3, r7, #3
 8013b58:	781a      	ldrb	r2, [r3, #0]
 8013b5a:	68b9      	ldr	r1, [r7, #8]
 8013b5c:	0013      	movs	r3, r2
 8013b5e:	009b      	lsls	r3, r3, #2
 8013b60:	189b      	adds	r3, r3, r2
 8013b62:	00db      	lsls	r3, r3, #3
 8013b64:	18cb      	adds	r3, r1, r3
 8013b66:	3338      	adds	r3, #56	@ 0x38
 8013b68:	681b      	ldr	r3, [r3, #0]
 8013b6a:	0019      	movs	r1, r3
 8013b6c:	f7ec fb96 	bl	800029c <__aeabi_uidivmod>
 8013b70:	1e0b      	subs	r3, r1, #0
 8013b72:	d112      	bne.n	8013b9a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8013b74:	1cfb      	adds	r3, r7, #3
 8013b76:	781a      	ldrb	r2, [r3, #0]
 8013b78:	6879      	ldr	r1, [r7, #4]
 8013b7a:	0013      	movs	r3, r2
 8013b7c:	009b      	lsls	r3, r3, #2
 8013b7e:	189b      	adds	r3, r3, r2
 8013b80:	009b      	lsls	r3, r3, #2
 8013b82:	18cb      	adds	r3, r1, r3
 8013b84:	331c      	adds	r3, #28
 8013b86:	2200      	movs	r2, #0
 8013b88:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8013b8a:	1cfb      	adds	r3, r7, #3
 8013b8c:	7819      	ldrb	r1, [r3, #0]
 8013b8e:	6878      	ldr	r0, [r7, #4]
 8013b90:	2300      	movs	r3, #0
 8013b92:	2200      	movs	r2, #0
 8013b94:	f001 ff61 	bl	8015a5a <USBD_LL_Transmit>
 8013b98:	e004      	b.n	8013ba4 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8013b9a:	68fa      	ldr	r2, [r7, #12]
 8013b9c:	2385      	movs	r3, #133	@ 0x85
 8013b9e:	009b      	lsls	r3, r3, #2
 8013ba0:	2100      	movs	r1, #0
 8013ba2:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8013ba4:	2300      	movs	r3, #0
 8013ba6:	e000      	b.n	8013baa <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8013ba8:	2302      	movs	r3, #2
  }
}
 8013baa:	0018      	movs	r0, r3
 8013bac:	46bd      	mov	sp, r7
 8013bae:	b004      	add	sp, #16
 8013bb0:	bd80      	pop	{r7, pc}

08013bb2 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8013bb2:	b580      	push	{r7, lr}
 8013bb4:	b084      	sub	sp, #16
 8013bb6:	af00      	add	r7, sp, #0
 8013bb8:	6078      	str	r0, [r7, #4]
 8013bba:	000a      	movs	r2, r1
 8013bbc:	1cfb      	adds	r3, r7, #3
 8013bbe:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013bc0:	687a      	ldr	r2, [r7, #4]
 8013bc2:	23ae      	movs	r3, #174	@ 0xae
 8013bc4:	009b      	lsls	r3, r3, #2
 8013bc6:	58d3      	ldr	r3, [r2, r3]
 8013bc8:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8013bca:	1cfb      	adds	r3, r7, #3
 8013bcc:	781a      	ldrb	r2, [r3, #0]
 8013bce:	687b      	ldr	r3, [r7, #4]
 8013bd0:	0011      	movs	r1, r2
 8013bd2:	0018      	movs	r0, r3
 8013bd4:	f001 ffaf 	bl	8015b36 <USBD_LL_GetRxDataSize>
 8013bd8:	0001      	movs	r1, r0
 8013bda:	68fa      	ldr	r2, [r7, #12]
 8013bdc:	2383      	movs	r3, #131	@ 0x83
 8013bde:	009b      	lsls	r3, r3, #2
 8013be0:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8013be2:	687a      	ldr	r2, [r7, #4]
 8013be4:	23ae      	movs	r3, #174	@ 0xae
 8013be6:	009b      	lsls	r3, r3, #2
 8013be8:	58d3      	ldr	r3, [r2, r3]
 8013bea:	2b00      	cmp	r3, #0
 8013bec:	d011      	beq.n	8013c12 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8013bee:	687a      	ldr	r2, [r7, #4]
 8013bf0:	23af      	movs	r3, #175	@ 0xaf
 8013bf2:	009b      	lsls	r3, r3, #2
 8013bf4:	58d3      	ldr	r3, [r2, r3]
 8013bf6:	68da      	ldr	r2, [r3, #12]
 8013bf8:	68f9      	ldr	r1, [r7, #12]
 8013bfa:	2381      	movs	r3, #129	@ 0x81
 8013bfc:	009b      	lsls	r3, r3, #2
 8013bfe:	58c8      	ldr	r0, [r1, r3]
 8013c00:	68fb      	ldr	r3, [r7, #12]
 8013c02:	2183      	movs	r1, #131	@ 0x83
 8013c04:	0089      	lsls	r1, r1, #2
 8013c06:	468c      	mov	ip, r1
 8013c08:	4463      	add	r3, ip
 8013c0a:	0019      	movs	r1, r3
 8013c0c:	4790      	blx	r2

    return USBD_OK;
 8013c0e:	2300      	movs	r3, #0
 8013c10:	e000      	b.n	8013c14 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8013c12:	2302      	movs	r3, #2
  }
}
 8013c14:	0018      	movs	r0, r3
 8013c16:	46bd      	mov	sp, r7
 8013c18:	b004      	add	sp, #16
 8013c1a:	bd80      	pop	{r7, pc}

08013c1c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8013c1c:	b590      	push	{r4, r7, lr}
 8013c1e:	b085      	sub	sp, #20
 8013c20:	af00      	add	r7, sp, #0
 8013c22:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013c24:	687a      	ldr	r2, [r7, #4]
 8013c26:	23ae      	movs	r3, #174	@ 0xae
 8013c28:	009b      	lsls	r3, r3, #2
 8013c2a:	58d3      	ldr	r3, [r2, r3]
 8013c2c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8013c2e:	687a      	ldr	r2, [r7, #4]
 8013c30:	23af      	movs	r3, #175	@ 0xaf
 8013c32:	009b      	lsls	r3, r3, #2
 8013c34:	58d3      	ldr	r3, [r2, r3]
 8013c36:	2b00      	cmp	r3, #0
 8013c38:	d018      	beq.n	8013c6c <USBD_CDC_EP0_RxReady+0x50>
 8013c3a:	68fa      	ldr	r2, [r7, #12]
 8013c3c:	2380      	movs	r3, #128	@ 0x80
 8013c3e:	009b      	lsls	r3, r3, #2
 8013c40:	5cd3      	ldrb	r3, [r2, r3]
 8013c42:	2bff      	cmp	r3, #255	@ 0xff
 8013c44:	d012      	beq.n	8013c6c <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013c46:	687a      	ldr	r2, [r7, #4]
 8013c48:	23af      	movs	r3, #175	@ 0xaf
 8013c4a:	009b      	lsls	r3, r3, #2
 8013c4c:	58d3      	ldr	r3, [r2, r3]
 8013c4e:	689b      	ldr	r3, [r3, #8]
 8013c50:	68f9      	ldr	r1, [r7, #12]
 8013c52:	2280      	movs	r2, #128	@ 0x80
 8013c54:	0092      	lsls	r2, r2, #2
 8013c56:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8013c58:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8013c5a:	68fa      	ldr	r2, [r7, #12]
 8013c5c:	4c06      	ldr	r4, [pc, #24]	@ (8013c78 <USBD_CDC_EP0_RxReady+0x5c>)
 8013c5e:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8013c60:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8013c62:	68fa      	ldr	r2, [r7, #12]
 8013c64:	2380      	movs	r3, #128	@ 0x80
 8013c66:	009b      	lsls	r3, r3, #2
 8013c68:	21ff      	movs	r1, #255	@ 0xff
 8013c6a:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8013c6c:	2300      	movs	r3, #0
}
 8013c6e:	0018      	movs	r0, r3
 8013c70:	46bd      	mov	sp, r7
 8013c72:	b005      	add	sp, #20
 8013c74:	bd90      	pop	{r4, r7, pc}
 8013c76:	46c0      	nop			@ (mov r8, r8)
 8013c78:	00000201 	.word	0x00000201

08013c7c <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8013c7c:	b580      	push	{r7, lr}
 8013c7e:	b082      	sub	sp, #8
 8013c80:	af00      	add	r7, sp, #0
 8013c82:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8013c84:	687b      	ldr	r3, [r7, #4]
 8013c86:	2243      	movs	r2, #67	@ 0x43
 8013c88:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8013c8a:	4b02      	ldr	r3, [pc, #8]	@ (8013c94 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8013c8c:	0018      	movs	r0, r3
 8013c8e:	46bd      	mov	sp, r7
 8013c90:	b002      	add	sp, #8
 8013c92:	bd80      	pop	{r7, pc}
 8013c94:	200001e8 	.word	0x200001e8

08013c98 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8013c98:	b580      	push	{r7, lr}
 8013c9a:	b082      	sub	sp, #8
 8013c9c:	af00      	add	r7, sp, #0
 8013c9e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8013ca0:	687b      	ldr	r3, [r7, #4]
 8013ca2:	2243      	movs	r2, #67	@ 0x43
 8013ca4:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8013ca6:	4b02      	ldr	r3, [pc, #8]	@ (8013cb0 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8013ca8:	0018      	movs	r0, r3
 8013caa:	46bd      	mov	sp, r7
 8013cac:	b002      	add	sp, #8
 8013cae:	bd80      	pop	{r7, pc}
 8013cb0:	200001a4 	.word	0x200001a4

08013cb4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8013cb4:	b580      	push	{r7, lr}
 8013cb6:	b082      	sub	sp, #8
 8013cb8:	af00      	add	r7, sp, #0
 8013cba:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8013cbc:	687b      	ldr	r3, [r7, #4]
 8013cbe:	2243      	movs	r2, #67	@ 0x43
 8013cc0:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8013cc2:	4b02      	ldr	r3, [pc, #8]	@ (8013ccc <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8013cc4:	0018      	movs	r0, r3
 8013cc6:	46bd      	mov	sp, r7
 8013cc8:	b002      	add	sp, #8
 8013cca:	bd80      	pop	{r7, pc}
 8013ccc:	2000022c 	.word	0x2000022c

08013cd0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8013cd0:	b580      	push	{r7, lr}
 8013cd2:	b082      	sub	sp, #8
 8013cd4:	af00      	add	r7, sp, #0
 8013cd6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	220a      	movs	r2, #10
 8013cdc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8013cde:	4b02      	ldr	r3, [pc, #8]	@ (8013ce8 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8013ce0:	0018      	movs	r0, r3
 8013ce2:	46bd      	mov	sp, r7
 8013ce4:	b002      	add	sp, #8
 8013ce6:	bd80      	pop	{r7, pc}
 8013ce8:	20000160 	.word	0x20000160

08013cec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8013cec:	b580      	push	{r7, lr}
 8013cee:	b084      	sub	sp, #16
 8013cf0:	af00      	add	r7, sp, #0
 8013cf2:	6078      	str	r0, [r7, #4]
 8013cf4:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8013cf6:	200f      	movs	r0, #15
 8013cf8:	183b      	adds	r3, r7, r0
 8013cfa:	2202      	movs	r2, #2
 8013cfc:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8013cfe:	683b      	ldr	r3, [r7, #0]
 8013d00:	2b00      	cmp	r3, #0
 8013d02:	d007      	beq.n	8013d14 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8013d04:	687a      	ldr	r2, [r7, #4]
 8013d06:	23af      	movs	r3, #175	@ 0xaf
 8013d08:	009b      	lsls	r3, r3, #2
 8013d0a:	6839      	ldr	r1, [r7, #0]
 8013d0c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8013d0e:	183b      	adds	r3, r7, r0
 8013d10:	2200      	movs	r2, #0
 8013d12:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8013d14:	230f      	movs	r3, #15
 8013d16:	18fb      	adds	r3, r7, r3
 8013d18:	781b      	ldrb	r3, [r3, #0]
}
 8013d1a:	0018      	movs	r0, r3
 8013d1c:	46bd      	mov	sp, r7
 8013d1e:	b004      	add	sp, #16
 8013d20:	bd80      	pop	{r7, pc}

08013d22 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8013d22:	b580      	push	{r7, lr}
 8013d24:	b086      	sub	sp, #24
 8013d26:	af00      	add	r7, sp, #0
 8013d28:	60f8      	str	r0, [r7, #12]
 8013d2a:	60b9      	str	r1, [r7, #8]
 8013d2c:	1dbb      	adds	r3, r7, #6
 8013d2e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013d30:	68fa      	ldr	r2, [r7, #12]
 8013d32:	23ae      	movs	r3, #174	@ 0xae
 8013d34:	009b      	lsls	r3, r3, #2
 8013d36:	58d3      	ldr	r3, [r2, r3]
 8013d38:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8013d3a:	697a      	ldr	r2, [r7, #20]
 8013d3c:	2382      	movs	r3, #130	@ 0x82
 8013d3e:	009b      	lsls	r3, r3, #2
 8013d40:	68b9      	ldr	r1, [r7, #8]
 8013d42:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8013d44:	1dbb      	adds	r3, r7, #6
 8013d46:	8819      	ldrh	r1, [r3, #0]
 8013d48:	697a      	ldr	r2, [r7, #20]
 8013d4a:	2384      	movs	r3, #132	@ 0x84
 8013d4c:	009b      	lsls	r3, r3, #2
 8013d4e:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013d50:	2300      	movs	r3, #0
}
 8013d52:	0018      	movs	r0, r3
 8013d54:	46bd      	mov	sp, r7
 8013d56:	b006      	add	sp, #24
 8013d58:	bd80      	pop	{r7, pc}

08013d5a <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8013d5a:	b580      	push	{r7, lr}
 8013d5c:	b084      	sub	sp, #16
 8013d5e:	af00      	add	r7, sp, #0
 8013d60:	6078      	str	r0, [r7, #4]
 8013d62:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013d64:	687a      	ldr	r2, [r7, #4]
 8013d66:	23ae      	movs	r3, #174	@ 0xae
 8013d68:	009b      	lsls	r3, r3, #2
 8013d6a:	58d3      	ldr	r3, [r2, r3]
 8013d6c:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8013d6e:	68fa      	ldr	r2, [r7, #12]
 8013d70:	2381      	movs	r3, #129	@ 0x81
 8013d72:	009b      	lsls	r3, r3, #2
 8013d74:	6839      	ldr	r1, [r7, #0]
 8013d76:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8013d78:	2300      	movs	r3, #0
}
 8013d7a:	0018      	movs	r0, r3
 8013d7c:	46bd      	mov	sp, r7
 8013d7e:	b004      	add	sp, #16
 8013d80:	bd80      	pop	{r7, pc}

08013d82 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8013d82:	b580      	push	{r7, lr}
 8013d84:	b084      	sub	sp, #16
 8013d86:	af00      	add	r7, sp, #0
 8013d88:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8013d8a:	687a      	ldr	r2, [r7, #4]
 8013d8c:	23ae      	movs	r3, #174	@ 0xae
 8013d8e:	009b      	lsls	r3, r3, #2
 8013d90:	58d3      	ldr	r3, [r2, r3]
 8013d92:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8013d94:	687a      	ldr	r2, [r7, #4]
 8013d96:	23ae      	movs	r3, #174	@ 0xae
 8013d98:	009b      	lsls	r3, r3, #2
 8013d9a:	58d3      	ldr	r3, [r2, r3]
 8013d9c:	2b00      	cmp	r3, #0
 8013d9e:	d019      	beq.n	8013dd4 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	7c1b      	ldrb	r3, [r3, #16]
 8013da4:	2b00      	cmp	r3, #0
 8013da6:	d10a      	bne.n	8013dbe <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013da8:	68fa      	ldr	r2, [r7, #12]
 8013daa:	2381      	movs	r3, #129	@ 0x81
 8013dac:	009b      	lsls	r3, r3, #2
 8013dae:	58d2      	ldr	r2, [r2, r3]
 8013db0:	2380      	movs	r3, #128	@ 0x80
 8013db2:	009b      	lsls	r3, r3, #2
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	2101      	movs	r1, #1
 8013db8:	f001 fe86 	bl	8015ac8 <USBD_LL_PrepareReceive>
 8013dbc:	e008      	b.n	8013dd0 <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8013dbe:	68fa      	ldr	r2, [r7, #12]
 8013dc0:	2381      	movs	r3, #129	@ 0x81
 8013dc2:	009b      	lsls	r3, r3, #2
 8013dc4:	58d2      	ldr	r2, [r2, r3]
 8013dc6:	6878      	ldr	r0, [r7, #4]
 8013dc8:	2340      	movs	r3, #64	@ 0x40
 8013dca:	2101      	movs	r1, #1
 8013dcc:	f001 fe7c 	bl	8015ac8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8013dd0:	2300      	movs	r3, #0
 8013dd2:	e000      	b.n	8013dd6 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8013dd4:	2302      	movs	r3, #2
  }
}
 8013dd6:	0018      	movs	r0, r3
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	b004      	add	sp, #16
 8013ddc:	bd80      	pop	{r7, pc}

08013dde <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8013dde:	b580      	push	{r7, lr}
 8013de0:	b084      	sub	sp, #16
 8013de2:	af00      	add	r7, sp, #0
 8013de4:	60f8      	str	r0, [r7, #12]
 8013de6:	60b9      	str	r1, [r7, #8]
 8013de8:	1dfb      	adds	r3, r7, #7
 8013dea:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8013dec:	68fb      	ldr	r3, [r7, #12]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d101      	bne.n	8013df6 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8013df2:	2302      	movs	r3, #2
 8013df4:	e020      	b.n	8013e38 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8013df6:	68fa      	ldr	r2, [r7, #12]
 8013df8:	23ad      	movs	r3, #173	@ 0xad
 8013dfa:	009b      	lsls	r3, r3, #2
 8013dfc:	58d3      	ldr	r3, [r2, r3]
 8013dfe:	2b00      	cmp	r3, #0
 8013e00:	d004      	beq.n	8013e0c <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8013e02:	68fa      	ldr	r2, [r7, #12]
 8013e04:	23ad      	movs	r3, #173	@ 0xad
 8013e06:	009b      	lsls	r3, r3, #2
 8013e08:	2100      	movs	r1, #0
 8013e0a:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8013e0c:	68bb      	ldr	r3, [r7, #8]
 8013e0e:	2b00      	cmp	r3, #0
 8013e10:	d004      	beq.n	8013e1c <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8013e12:	68fa      	ldr	r2, [r7, #12]
 8013e14:	23ac      	movs	r3, #172	@ 0xac
 8013e16:	009b      	lsls	r3, r3, #2
 8013e18:	68b9      	ldr	r1, [r7, #8]
 8013e1a:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8013e1c:	68fa      	ldr	r2, [r7, #12]
 8013e1e:	23a7      	movs	r3, #167	@ 0xa7
 8013e20:	009b      	lsls	r3, r3, #2
 8013e22:	2101      	movs	r1, #1
 8013e24:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8013e26:	68fb      	ldr	r3, [r7, #12]
 8013e28:	1dfa      	adds	r2, r7, #7
 8013e2a:	7812      	ldrb	r2, [r2, #0]
 8013e2c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8013e2e:	68fb      	ldr	r3, [r7, #12]
 8013e30:	0018      	movs	r0, r3
 8013e32:	f001 fc75 	bl	8015720 <USBD_LL_Init>

  return USBD_OK;
 8013e36:	2300      	movs	r3, #0
}
 8013e38:	0018      	movs	r0, r3
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	b004      	add	sp, #16
 8013e3e:	bd80      	pop	{r7, pc}

08013e40 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8013e40:	b580      	push	{r7, lr}
 8013e42:	b084      	sub	sp, #16
 8013e44:	af00      	add	r7, sp, #0
 8013e46:	6078      	str	r0, [r7, #4]
 8013e48:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8013e4a:	200f      	movs	r0, #15
 8013e4c:	183b      	adds	r3, r7, r0
 8013e4e:	2200      	movs	r2, #0
 8013e50:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	2b00      	cmp	r3, #0
 8013e56:	d008      	beq.n	8013e6a <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	23ad      	movs	r3, #173	@ 0xad
 8013e5c:	009b      	lsls	r3, r3, #2
 8013e5e:	6839      	ldr	r1, [r7, #0]
 8013e60:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8013e62:	183b      	adds	r3, r7, r0
 8013e64:	2200      	movs	r2, #0
 8013e66:	701a      	strb	r2, [r3, #0]
 8013e68:	e003      	b.n	8013e72 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8013e6a:	230f      	movs	r3, #15
 8013e6c:	18fb      	adds	r3, r7, r3
 8013e6e:	2202      	movs	r2, #2
 8013e70:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8013e72:	230f      	movs	r3, #15
 8013e74:	18fb      	adds	r3, r7, r3
 8013e76:	781b      	ldrb	r3, [r3, #0]
}
 8013e78:	0018      	movs	r0, r3
 8013e7a:	46bd      	mov	sp, r7
 8013e7c:	b004      	add	sp, #16
 8013e7e:	bd80      	pop	{r7, pc}

08013e80 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8013e80:	b580      	push	{r7, lr}
 8013e82:	b082      	sub	sp, #8
 8013e84:	af00      	add	r7, sp, #0
 8013e86:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	0018      	movs	r0, r3
 8013e8c:	f001 fcac 	bl	80157e8 <USBD_LL_Start>

  return USBD_OK;
 8013e90:	2300      	movs	r3, #0
}
 8013e92:	0018      	movs	r0, r3
 8013e94:	46bd      	mov	sp, r7
 8013e96:	b002      	add	sp, #8
 8013e98:	bd80      	pop	{r7, pc}

08013e9a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8013e9a:	b580      	push	{r7, lr}
 8013e9c:	b082      	sub	sp, #8
 8013e9e:	af00      	add	r7, sp, #0
 8013ea0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8013ea2:	2300      	movs	r3, #0
}
 8013ea4:	0018      	movs	r0, r3
 8013ea6:	46bd      	mov	sp, r7
 8013ea8:	b002      	add	sp, #8
 8013eaa:	bd80      	pop	{r7, pc}

08013eac <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013eac:	b590      	push	{r4, r7, lr}
 8013eae:	b085      	sub	sp, #20
 8013eb0:	af00      	add	r7, sp, #0
 8013eb2:	6078      	str	r0, [r7, #4]
 8013eb4:	000a      	movs	r2, r1
 8013eb6:	1cfb      	adds	r3, r7, #3
 8013eb8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8013eba:	240f      	movs	r4, #15
 8013ebc:	193b      	adds	r3, r7, r4
 8013ebe:	2202      	movs	r2, #2
 8013ec0:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8013ec2:	687a      	ldr	r2, [r7, #4]
 8013ec4:	23ad      	movs	r3, #173	@ 0xad
 8013ec6:	009b      	lsls	r3, r3, #2
 8013ec8:	58d3      	ldr	r3, [r2, r3]
 8013eca:	2b00      	cmp	r3, #0
 8013ecc:	d00e      	beq.n	8013eec <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8013ece:	687a      	ldr	r2, [r7, #4]
 8013ed0:	23ad      	movs	r3, #173	@ 0xad
 8013ed2:	009b      	lsls	r3, r3, #2
 8013ed4:	58d3      	ldr	r3, [r2, r3]
 8013ed6:	681b      	ldr	r3, [r3, #0]
 8013ed8:	1cfa      	adds	r2, r7, #3
 8013eda:	7811      	ldrb	r1, [r2, #0]
 8013edc:	687a      	ldr	r2, [r7, #4]
 8013ede:	0010      	movs	r0, r2
 8013ee0:	4798      	blx	r3
 8013ee2:	1e03      	subs	r3, r0, #0
 8013ee4:	d102      	bne.n	8013eec <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8013ee6:	193b      	adds	r3, r7, r4
 8013ee8:	2200      	movs	r2, #0
 8013eea:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8013eec:	230f      	movs	r3, #15
 8013eee:	18fb      	adds	r3, r7, r3
 8013ef0:	781b      	ldrb	r3, [r3, #0]
}
 8013ef2:	0018      	movs	r0, r3
 8013ef4:	46bd      	mov	sp, r7
 8013ef6:	b005      	add	sp, #20
 8013ef8:	bd90      	pop	{r4, r7, pc}

08013efa <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8013efa:	b580      	push	{r7, lr}
 8013efc:	b082      	sub	sp, #8
 8013efe:	af00      	add	r7, sp, #0
 8013f00:	6078      	str	r0, [r7, #4]
 8013f02:	000a      	movs	r2, r1
 8013f04:	1cfb      	adds	r3, r7, #3
 8013f06:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8013f08:	687a      	ldr	r2, [r7, #4]
 8013f0a:	23ad      	movs	r3, #173	@ 0xad
 8013f0c:	009b      	lsls	r3, r3, #2
 8013f0e:	58d3      	ldr	r3, [r2, r3]
 8013f10:	685b      	ldr	r3, [r3, #4]
 8013f12:	1cfa      	adds	r2, r7, #3
 8013f14:	7811      	ldrb	r1, [r2, #0]
 8013f16:	687a      	ldr	r2, [r7, #4]
 8013f18:	0010      	movs	r0, r2
 8013f1a:	4798      	blx	r3

  return USBD_OK;
 8013f1c:	2300      	movs	r3, #0
}
 8013f1e:	0018      	movs	r0, r3
 8013f20:	46bd      	mov	sp, r7
 8013f22:	b002      	add	sp, #8
 8013f24:	bd80      	pop	{r7, pc}
	...

08013f28 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8013f28:	b580      	push	{r7, lr}
 8013f2a:	b082      	sub	sp, #8
 8013f2c:	af00      	add	r7, sp, #0
 8013f2e:	6078      	str	r0, [r7, #4]
 8013f30:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8013f32:	687b      	ldr	r3, [r7, #4]
 8013f34:	22aa      	movs	r2, #170	@ 0xaa
 8013f36:	0092      	lsls	r2, r2, #2
 8013f38:	4694      	mov	ip, r2
 8013f3a:	4463      	add	r3, ip
 8013f3c:	683a      	ldr	r2, [r7, #0]
 8013f3e:	0011      	movs	r1, r2
 8013f40:	0018      	movs	r0, r3
 8013f42:	f001 f810 	bl	8014f66 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8013f46:	687a      	ldr	r2, [r7, #4]
 8013f48:	23a5      	movs	r3, #165	@ 0xa5
 8013f4a:	009b      	lsls	r3, r3, #2
 8013f4c:	2101      	movs	r1, #1
 8013f4e:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8013f50:	687b      	ldr	r3, [r7, #4]
 8013f52:	4a23      	ldr	r2, [pc, #140]	@ (8013fe0 <USBD_LL_SetupStage+0xb8>)
 8013f54:	5a9b      	ldrh	r3, [r3, r2]
 8013f56:	0019      	movs	r1, r3
 8013f58:	687a      	ldr	r2, [r7, #4]
 8013f5a:	23a6      	movs	r3, #166	@ 0xa6
 8013f5c:	009b      	lsls	r3, r3, #2
 8013f5e:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8013f60:	687a      	ldr	r2, [r7, #4]
 8013f62:	23aa      	movs	r3, #170	@ 0xaa
 8013f64:	009b      	lsls	r3, r3, #2
 8013f66:	5cd3      	ldrb	r3, [r2, r3]
 8013f68:	001a      	movs	r2, r3
 8013f6a:	231f      	movs	r3, #31
 8013f6c:	4013      	ands	r3, r2
 8013f6e:	2b02      	cmp	r3, #2
 8013f70:	d019      	beq.n	8013fa6 <USBD_LL_SetupStage+0x7e>
 8013f72:	d822      	bhi.n	8013fba <USBD_LL_SetupStage+0x92>
 8013f74:	2b00      	cmp	r3, #0
 8013f76:	d002      	beq.n	8013f7e <USBD_LL_SetupStage+0x56>
 8013f78:	2b01      	cmp	r3, #1
 8013f7a:	d00a      	beq.n	8013f92 <USBD_LL_SetupStage+0x6a>
 8013f7c:	e01d      	b.n	8013fba <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	22aa      	movs	r2, #170	@ 0xaa
 8013f82:	0092      	lsls	r2, r2, #2
 8013f84:	189a      	adds	r2, r3, r2
 8013f86:	687b      	ldr	r3, [r7, #4]
 8013f88:	0011      	movs	r1, r2
 8013f8a:	0018      	movs	r0, r3
 8013f8c:	f000 fa10 	bl	80143b0 <USBD_StdDevReq>
      break;
 8013f90:	e020      	b.n	8013fd4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8013f92:	687b      	ldr	r3, [r7, #4]
 8013f94:	22aa      	movs	r2, #170	@ 0xaa
 8013f96:	0092      	lsls	r2, r2, #2
 8013f98:	189a      	adds	r2, r3, r2
 8013f9a:	687b      	ldr	r3, [r7, #4]
 8013f9c:	0011      	movs	r1, r2
 8013f9e:	0018      	movs	r0, r3
 8013fa0:	f000 fa78 	bl	8014494 <USBD_StdItfReq>
      break;
 8013fa4:	e016      	b.n	8013fd4 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8013fa6:	687b      	ldr	r3, [r7, #4]
 8013fa8:	22aa      	movs	r2, #170	@ 0xaa
 8013faa:	0092      	lsls	r2, r2, #2
 8013fac:	189a      	adds	r2, r3, r2
 8013fae:	687b      	ldr	r3, [r7, #4]
 8013fb0:	0011      	movs	r1, r2
 8013fb2:	0018      	movs	r0, r3
 8013fb4:	f000 fac5 	bl	8014542 <USBD_StdEPReq>
      break;
 8013fb8:	e00c      	b.n	8013fd4 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8013fba:	687a      	ldr	r2, [r7, #4]
 8013fbc:	23aa      	movs	r3, #170	@ 0xaa
 8013fbe:	009b      	lsls	r3, r3, #2
 8013fc0:	5cd3      	ldrb	r3, [r2, r3]
 8013fc2:	227f      	movs	r2, #127	@ 0x7f
 8013fc4:	4393      	bics	r3, r2
 8013fc6:	b2da      	uxtb	r2, r3
 8013fc8:	687b      	ldr	r3, [r7, #4]
 8013fca:	0011      	movs	r1, r2
 8013fcc:	0018      	movs	r0, r3
 8013fce:	f001 fc92 	bl	80158f6 <USBD_LL_StallEP>
      break;
 8013fd2:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8013fd4:	2300      	movs	r3, #0
}
 8013fd6:	0018      	movs	r0, r3
 8013fd8:	46bd      	mov	sp, r7
 8013fda:	b002      	add	sp, #8
 8013fdc:	bd80      	pop	{r7, pc}
 8013fde:	46c0      	nop			@ (mov r8, r8)
 8013fe0:	000002ae 	.word	0x000002ae

08013fe4 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8013fe4:	b580      	push	{r7, lr}
 8013fe6:	b086      	sub	sp, #24
 8013fe8:	af00      	add	r7, sp, #0
 8013fea:	60f8      	str	r0, [r7, #12]
 8013fec:	607a      	str	r2, [r7, #4]
 8013fee:	200b      	movs	r0, #11
 8013ff0:	183b      	adds	r3, r7, r0
 8013ff2:	1c0a      	adds	r2, r1, #0
 8013ff4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8013ff6:	183b      	adds	r3, r7, r0
 8013ff8:	781b      	ldrb	r3, [r3, #0]
 8013ffa:	2b00      	cmp	r3, #0
 8013ffc:	d154      	bne.n	80140a8 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8013ffe:	68fb      	ldr	r3, [r7, #12]
 8014000:	3355      	adds	r3, #85	@ 0x55
 8014002:	33ff      	adds	r3, #255	@ 0xff
 8014004:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8014006:	68fa      	ldr	r2, [r7, #12]
 8014008:	23a5      	movs	r3, #165	@ 0xa5
 801400a:	009b      	lsls	r3, r3, #2
 801400c:	58d3      	ldr	r3, [r2, r3]
 801400e:	2b03      	cmp	r3, #3
 8014010:	d139      	bne.n	8014086 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8014012:	697b      	ldr	r3, [r7, #20]
 8014014:	68da      	ldr	r2, [r3, #12]
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	691b      	ldr	r3, [r3, #16]
 801401a:	429a      	cmp	r2, r3
 801401c:	d919      	bls.n	8014052 <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 801401e:	697b      	ldr	r3, [r7, #20]
 8014020:	68da      	ldr	r2, [r3, #12]
 8014022:	697b      	ldr	r3, [r7, #20]
 8014024:	691b      	ldr	r3, [r3, #16]
 8014026:	1ad2      	subs	r2, r2, r3
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 801402c:	697b      	ldr	r3, [r7, #20]
 801402e:	68da      	ldr	r2, [r3, #12]
 8014030:	697b      	ldr	r3, [r7, #20]
 8014032:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8014034:	429a      	cmp	r2, r3
 8014036:	d203      	bcs.n	8014040 <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014038:	697b      	ldr	r3, [r7, #20]
 801403a:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 801403c:	b29b      	uxth	r3, r3
 801403e:	e002      	b.n	8014046 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8014044:	b29b      	uxth	r3, r3
 8014046:	6879      	ldr	r1, [r7, #4]
 8014048:	68f8      	ldr	r0, [r7, #12]
 801404a:	001a      	movs	r2, r3
 801404c:	f001 f898 	bl	8015180 <USBD_CtlContinueRx>
 8014050:	e045      	b.n	80140de <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014052:	68fa      	ldr	r2, [r7, #12]
 8014054:	23ad      	movs	r3, #173	@ 0xad
 8014056:	009b      	lsls	r3, r3, #2
 8014058:	58d3      	ldr	r3, [r2, r3]
 801405a:	691b      	ldr	r3, [r3, #16]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d00d      	beq.n	801407c <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014060:	68fa      	ldr	r2, [r7, #12]
 8014062:	23a7      	movs	r3, #167	@ 0xa7
 8014064:	009b      	lsls	r3, r3, #2
 8014066:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8014068:	2b03      	cmp	r3, #3
 801406a:	d107      	bne.n	801407c <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 801406c:	68fa      	ldr	r2, [r7, #12]
 801406e:	23ad      	movs	r3, #173	@ 0xad
 8014070:	009b      	lsls	r3, r3, #2
 8014072:	58d3      	ldr	r3, [r2, r3]
 8014074:	691b      	ldr	r3, [r3, #16]
 8014076:	68fa      	ldr	r2, [r7, #12]
 8014078:	0010      	movs	r0, r2
 801407a:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 801407c:	68fb      	ldr	r3, [r7, #12]
 801407e:	0018      	movs	r0, r3
 8014080:	f001 f891 	bl	80151a6 <USBD_CtlSendStatus>
 8014084:	e02b      	b.n	80140de <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8014086:	68fa      	ldr	r2, [r7, #12]
 8014088:	23a5      	movs	r3, #165	@ 0xa5
 801408a:	009b      	lsls	r3, r3, #2
 801408c:	58d3      	ldr	r3, [r2, r3]
 801408e:	2b05      	cmp	r3, #5
 8014090:	d125      	bne.n	80140de <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8014092:	68fa      	ldr	r2, [r7, #12]
 8014094:	23a5      	movs	r3, #165	@ 0xa5
 8014096:	009b      	lsls	r3, r3, #2
 8014098:	2100      	movs	r1, #0
 801409a:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	2100      	movs	r1, #0
 80140a0:	0018      	movs	r0, r3
 80140a2:	f001 fc28 	bl	80158f6 <USBD_LL_StallEP>
 80140a6:	e01a      	b.n	80140de <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 80140a8:	68fa      	ldr	r2, [r7, #12]
 80140aa:	23ad      	movs	r3, #173	@ 0xad
 80140ac:	009b      	lsls	r3, r3, #2
 80140ae:	58d3      	ldr	r3, [r2, r3]
 80140b0:	699b      	ldr	r3, [r3, #24]
 80140b2:	2b00      	cmp	r3, #0
 80140b4:	d011      	beq.n	80140da <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80140b6:	68fa      	ldr	r2, [r7, #12]
 80140b8:	23a7      	movs	r3, #167	@ 0xa7
 80140ba:	009b      	lsls	r3, r3, #2
 80140bc:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 80140be:	2b03      	cmp	r3, #3
 80140c0:	d10b      	bne.n	80140da <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 80140c2:	68fa      	ldr	r2, [r7, #12]
 80140c4:	23ad      	movs	r3, #173	@ 0xad
 80140c6:	009b      	lsls	r3, r3, #2
 80140c8:	58d3      	ldr	r3, [r2, r3]
 80140ca:	699b      	ldr	r3, [r3, #24]
 80140cc:	220b      	movs	r2, #11
 80140ce:	18ba      	adds	r2, r7, r2
 80140d0:	7811      	ldrb	r1, [r2, #0]
 80140d2:	68fa      	ldr	r2, [r7, #12]
 80140d4:	0010      	movs	r0, r2
 80140d6:	4798      	blx	r3
 80140d8:	e001      	b.n	80140de <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80140da:	2302      	movs	r3, #2
 80140dc:	e000      	b.n	80140e0 <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 80140de:	2300      	movs	r3, #0
}
 80140e0:	0018      	movs	r0, r3
 80140e2:	46bd      	mov	sp, r7
 80140e4:	b006      	add	sp, #24
 80140e6:	bd80      	pop	{r7, pc}

080140e8 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80140e8:	b580      	push	{r7, lr}
 80140ea:	b086      	sub	sp, #24
 80140ec:	af00      	add	r7, sp, #0
 80140ee:	60f8      	str	r0, [r7, #12]
 80140f0:	607a      	str	r2, [r7, #4]
 80140f2:	200b      	movs	r0, #11
 80140f4:	183b      	adds	r3, r7, r0
 80140f6:	1c0a      	adds	r2, r1, #0
 80140f8:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80140fa:	183b      	adds	r3, r7, r0
 80140fc:	781b      	ldrb	r3, [r3, #0]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d000      	beq.n	8014104 <USBD_LL_DataInStage+0x1c>
 8014102:	e08e      	b.n	8014222 <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8014104:	68fb      	ldr	r3, [r7, #12]
 8014106:	3314      	adds	r3, #20
 8014108:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 801410a:	68fa      	ldr	r2, [r7, #12]
 801410c:	23a5      	movs	r3, #165	@ 0xa5
 801410e:	009b      	lsls	r3, r3, #2
 8014110:	58d3      	ldr	r3, [r2, r3]
 8014112:	2b02      	cmp	r3, #2
 8014114:	d164      	bne.n	80141e0 <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8014116:	697b      	ldr	r3, [r7, #20]
 8014118:	68da      	ldr	r2, [r3, #12]
 801411a:	697b      	ldr	r3, [r7, #20]
 801411c:	691b      	ldr	r3, [r3, #16]
 801411e:	429a      	cmp	r2, r3
 8014120:	d915      	bls.n	801414e <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8014122:	697b      	ldr	r3, [r7, #20]
 8014124:	68da      	ldr	r2, [r3, #12]
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	691b      	ldr	r3, [r3, #16]
 801412a:	1ad2      	subs	r2, r2, r3
 801412c:	697b      	ldr	r3, [r7, #20]
 801412e:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8014130:	697b      	ldr	r3, [r7, #20]
 8014132:	68db      	ldr	r3, [r3, #12]
 8014134:	b29a      	uxth	r2, r3
 8014136:	6879      	ldr	r1, [r7, #4]
 8014138:	68fb      	ldr	r3, [r7, #12]
 801413a:	0018      	movs	r0, r3
 801413c:	f000 ffe9 	bl	8015112 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014140:	68f8      	ldr	r0, [r7, #12]
 8014142:	2300      	movs	r3, #0
 8014144:	2200      	movs	r2, #0
 8014146:	2100      	movs	r1, #0
 8014148:	f001 fcbe 	bl	8015ac8 <USBD_LL_PrepareReceive>
 801414c:	e059      	b.n	8014202 <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801414e:	697b      	ldr	r3, [r7, #20]
 8014150:	689a      	ldr	r2, [r3, #8]
 8014152:	697b      	ldr	r3, [r7, #20]
 8014154:	691b      	ldr	r3, [r3, #16]
 8014156:	0019      	movs	r1, r3
 8014158:	0010      	movs	r0, r2
 801415a:	f7ec f89f 	bl	800029c <__aeabi_uidivmod>
 801415e:	1e0b      	subs	r3, r1, #0
 8014160:	d11f      	bne.n	80141a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 8014162:	697b      	ldr	r3, [r7, #20]
 8014164:	689a      	ldr	r2, [r3, #8]
 8014166:	697b      	ldr	r3, [r7, #20]
 8014168:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801416a:	429a      	cmp	r2, r3
 801416c:	d319      	bcc.n	80141a2 <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	689a      	ldr	r2, [r3, #8]
 8014172:	68f9      	ldr	r1, [r7, #12]
 8014174:	23a6      	movs	r3, #166	@ 0xa6
 8014176:	009b      	lsls	r3, r3, #2
 8014178:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 801417a:	429a      	cmp	r2, r3
 801417c:	d211      	bcs.n	80141a2 <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	2200      	movs	r2, #0
 8014182:	2100      	movs	r1, #0
 8014184:	0018      	movs	r0, r3
 8014186:	f000 ffc4 	bl	8015112 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 801418a:	68fa      	ldr	r2, [r7, #12]
 801418c:	23a6      	movs	r3, #166	@ 0xa6
 801418e:	009b      	lsls	r3, r3, #2
 8014190:	2100      	movs	r1, #0
 8014192:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8014194:	68f8      	ldr	r0, [r7, #12]
 8014196:	2300      	movs	r3, #0
 8014198:	2200      	movs	r2, #0
 801419a:	2100      	movs	r1, #0
 801419c:	f001 fc94 	bl	8015ac8 <USBD_LL_PrepareReceive>
 80141a0:	e02f      	b.n	8014202 <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80141a2:	68fa      	ldr	r2, [r7, #12]
 80141a4:	23ad      	movs	r3, #173	@ 0xad
 80141a6:	009b      	lsls	r3, r3, #2
 80141a8:	58d3      	ldr	r3, [r2, r3]
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	2b00      	cmp	r3, #0
 80141ae:	d00d      	beq.n	80141cc <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80141b0:	68fa      	ldr	r2, [r7, #12]
 80141b2:	23a7      	movs	r3, #167	@ 0xa7
 80141b4:	009b      	lsls	r3, r3, #2
 80141b6:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80141b8:	2b03      	cmp	r3, #3
 80141ba:	d107      	bne.n	80141cc <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 80141bc:	68fa      	ldr	r2, [r7, #12]
 80141be:	23ad      	movs	r3, #173	@ 0xad
 80141c0:	009b      	lsls	r3, r3, #2
 80141c2:	58d3      	ldr	r3, [r2, r3]
 80141c4:	68db      	ldr	r3, [r3, #12]
 80141c6:	68fa      	ldr	r2, [r7, #12]
 80141c8:	0010      	movs	r0, r2
 80141ca:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80141cc:	68fb      	ldr	r3, [r7, #12]
 80141ce:	2180      	movs	r1, #128	@ 0x80
 80141d0:	0018      	movs	r0, r3
 80141d2:	f001 fb90 	bl	80158f6 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80141d6:	68fb      	ldr	r3, [r7, #12]
 80141d8:	0018      	movs	r0, r3
 80141da:	f000 fff8 	bl	80151ce <USBD_CtlReceiveStatus>
 80141de:	e010      	b.n	8014202 <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80141e0:	68fa      	ldr	r2, [r7, #12]
 80141e2:	23a5      	movs	r3, #165	@ 0xa5
 80141e4:	009b      	lsls	r3, r3, #2
 80141e6:	58d3      	ldr	r3, [r2, r3]
 80141e8:	2b04      	cmp	r3, #4
 80141ea:	d005      	beq.n	80141f8 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80141ec:	68fa      	ldr	r2, [r7, #12]
 80141ee:	23a5      	movs	r3, #165	@ 0xa5
 80141f0:	009b      	lsls	r3, r3, #2
 80141f2:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80141f4:	2b00      	cmp	r3, #0
 80141f6:	d104      	bne.n	8014202 <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	2180      	movs	r1, #128	@ 0x80
 80141fc:	0018      	movs	r0, r3
 80141fe:	f001 fb7a 	bl	80158f6 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8014202:	68fa      	ldr	r2, [r7, #12]
 8014204:	23a8      	movs	r3, #168	@ 0xa8
 8014206:	009b      	lsls	r3, r3, #2
 8014208:	5cd3      	ldrb	r3, [r2, r3]
 801420a:	2b01      	cmp	r3, #1
 801420c:	d124      	bne.n	8014258 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 801420e:	68fb      	ldr	r3, [r7, #12]
 8014210:	0018      	movs	r0, r3
 8014212:	f7ff fe42 	bl	8013e9a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8014216:	68fa      	ldr	r2, [r7, #12]
 8014218:	23a8      	movs	r3, #168	@ 0xa8
 801421a:	009b      	lsls	r3, r3, #2
 801421c:	2100      	movs	r1, #0
 801421e:	54d1      	strb	r1, [r2, r3]
 8014220:	e01a      	b.n	8014258 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8014222:	68fa      	ldr	r2, [r7, #12]
 8014224:	23ad      	movs	r3, #173	@ 0xad
 8014226:	009b      	lsls	r3, r3, #2
 8014228:	58d3      	ldr	r3, [r2, r3]
 801422a:	695b      	ldr	r3, [r3, #20]
 801422c:	2b00      	cmp	r3, #0
 801422e:	d011      	beq.n	8014254 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8014230:	68fa      	ldr	r2, [r7, #12]
 8014232:	23a7      	movs	r3, #167	@ 0xa7
 8014234:	009b      	lsls	r3, r3, #2
 8014236:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8014238:	2b03      	cmp	r3, #3
 801423a:	d10b      	bne.n	8014254 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 801423c:	68fa      	ldr	r2, [r7, #12]
 801423e:	23ad      	movs	r3, #173	@ 0xad
 8014240:	009b      	lsls	r3, r3, #2
 8014242:	58d3      	ldr	r3, [r2, r3]
 8014244:	695b      	ldr	r3, [r3, #20]
 8014246:	220b      	movs	r2, #11
 8014248:	18ba      	adds	r2, r7, r2
 801424a:	7811      	ldrb	r1, [r2, #0]
 801424c:	68fa      	ldr	r2, [r7, #12]
 801424e:	0010      	movs	r0, r2
 8014250:	4798      	blx	r3
 8014252:	e001      	b.n	8014258 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8014254:	2302      	movs	r3, #2
 8014256:	e000      	b.n	801425a <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8014258:	2300      	movs	r3, #0
}
 801425a:	0018      	movs	r0, r3
 801425c:	46bd      	mov	sp, r7
 801425e:	b006      	add	sp, #24
 8014260:	bd80      	pop	{r7, pc}

08014262 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8014262:	b580      	push	{r7, lr}
 8014264:	b082      	sub	sp, #8
 8014266:	af00      	add	r7, sp, #0
 8014268:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801426a:	6878      	ldr	r0, [r7, #4]
 801426c:	2340      	movs	r3, #64	@ 0x40
 801426e:	2200      	movs	r2, #0
 8014270:	2100      	movs	r1, #0
 8014272:	f001 fade 	bl	8015832 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8014276:	687a      	ldr	r2, [r7, #4]
 8014278:	23ac      	movs	r3, #172	@ 0xac
 801427a:	005b      	lsls	r3, r3, #1
 801427c:	2101      	movs	r1, #1
 801427e:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8014280:	687a      	ldr	r2, [r7, #4]
 8014282:	23b2      	movs	r3, #178	@ 0xb2
 8014284:	005b      	lsls	r3, r3, #1
 8014286:	2140      	movs	r1, #64	@ 0x40
 8014288:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 801428a:	6878      	ldr	r0, [r7, #4]
 801428c:	2340      	movs	r3, #64	@ 0x40
 801428e:	2200      	movs	r2, #0
 8014290:	2180      	movs	r1, #128	@ 0x80
 8014292:	f001 face 	bl	8015832 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	2201      	movs	r2, #1
 801429a:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 801429c:	687b      	ldr	r3, [r7, #4]
 801429e:	2240      	movs	r2, #64	@ 0x40
 80142a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80142a2:	687a      	ldr	r2, [r7, #4]
 80142a4:	23a7      	movs	r3, #167	@ 0xa7
 80142a6:	009b      	lsls	r3, r3, #2
 80142a8:	2101      	movs	r1, #1
 80142aa:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 80142ac:	687a      	ldr	r2, [r7, #4]
 80142ae:	23a5      	movs	r3, #165	@ 0xa5
 80142b0:	009b      	lsls	r3, r3, #2
 80142b2:	2100      	movs	r1, #0
 80142b4:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	2200      	movs	r2, #0
 80142ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80142bc:	687a      	ldr	r2, [r7, #4]
 80142be:	23a9      	movs	r3, #169	@ 0xa9
 80142c0:	009b      	lsls	r3, r3, #2
 80142c2:	2100      	movs	r1, #0
 80142c4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80142c6:	687a      	ldr	r2, [r7, #4]
 80142c8:	23ae      	movs	r3, #174	@ 0xae
 80142ca:	009b      	lsls	r3, r3, #2
 80142cc:	58d3      	ldr	r3, [r2, r3]
 80142ce:	2b00      	cmp	r3, #0
 80142d0:	d00a      	beq.n	80142e8 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80142d2:	687a      	ldr	r2, [r7, #4]
 80142d4:	23ad      	movs	r3, #173	@ 0xad
 80142d6:	009b      	lsls	r3, r3, #2
 80142d8:	58d3      	ldr	r3, [r2, r3]
 80142da:	685a      	ldr	r2, [r3, #4]
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	685b      	ldr	r3, [r3, #4]
 80142e0:	b2d9      	uxtb	r1, r3
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	0018      	movs	r0, r3
 80142e6:	4790      	blx	r2
  }

  return USBD_OK;
 80142e8:	2300      	movs	r3, #0
}
 80142ea:	0018      	movs	r0, r3
 80142ec:	46bd      	mov	sp, r7
 80142ee:	b002      	add	sp, #8
 80142f0:	bd80      	pop	{r7, pc}

080142f2 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80142f2:	b580      	push	{r7, lr}
 80142f4:	b082      	sub	sp, #8
 80142f6:	af00      	add	r7, sp, #0
 80142f8:	6078      	str	r0, [r7, #4]
 80142fa:	000a      	movs	r2, r1
 80142fc:	1cfb      	adds	r3, r7, #3
 80142fe:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	1cfa      	adds	r2, r7, #3
 8014304:	7812      	ldrb	r2, [r2, #0]
 8014306:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8014308:	2300      	movs	r3, #0
}
 801430a:	0018      	movs	r0, r3
 801430c:	46bd      	mov	sp, r7
 801430e:	b002      	add	sp, #8
 8014310:	bd80      	pop	{r7, pc}
	...

08014314 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8014314:	b580      	push	{r7, lr}
 8014316:	b082      	sub	sp, #8
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 801431c:	687a      	ldr	r2, [r7, #4]
 801431e:	23a7      	movs	r3, #167	@ 0xa7
 8014320:	009b      	lsls	r3, r3, #2
 8014322:	5cd1      	ldrb	r1, [r2, r3]
 8014324:	687b      	ldr	r3, [r7, #4]
 8014326:	4a06      	ldr	r2, [pc, #24]	@ (8014340 <USBD_LL_Suspend+0x2c>)
 8014328:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 801432a:	687a      	ldr	r2, [r7, #4]
 801432c:	23a7      	movs	r3, #167	@ 0xa7
 801432e:	009b      	lsls	r3, r3, #2
 8014330:	2104      	movs	r1, #4
 8014332:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8014334:	2300      	movs	r3, #0
}
 8014336:	0018      	movs	r0, r3
 8014338:	46bd      	mov	sp, r7
 801433a:	b002      	add	sp, #8
 801433c:	bd80      	pop	{r7, pc}
 801433e:	46c0      	nop			@ (mov r8, r8)
 8014340:	0000029d 	.word	0x0000029d

08014344 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8014344:	b580      	push	{r7, lr}
 8014346:	b082      	sub	sp, #8
 8014348:	af00      	add	r7, sp, #0
 801434a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801434c:	687a      	ldr	r2, [r7, #4]
 801434e:	23a7      	movs	r3, #167	@ 0xa7
 8014350:	009b      	lsls	r3, r3, #2
 8014352:	5cd3      	ldrb	r3, [r2, r3]
 8014354:	2b04      	cmp	r3, #4
 8014356:	d106      	bne.n	8014366 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	4a05      	ldr	r2, [pc, #20]	@ (8014370 <USBD_LL_Resume+0x2c>)
 801435c:	5c99      	ldrb	r1, [r3, r2]
 801435e:	687a      	ldr	r2, [r7, #4]
 8014360:	23a7      	movs	r3, #167	@ 0xa7
 8014362:	009b      	lsls	r3, r3, #2
 8014364:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8014366:	2300      	movs	r3, #0
}
 8014368:	0018      	movs	r0, r3
 801436a:	46bd      	mov	sp, r7
 801436c:	b002      	add	sp, #8
 801436e:	bd80      	pop	{r7, pc}
 8014370:	0000029d 	.word	0x0000029d

08014374 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8014374:	b580      	push	{r7, lr}
 8014376:	b082      	sub	sp, #8
 8014378:	af00      	add	r7, sp, #0
 801437a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801437c:	687a      	ldr	r2, [r7, #4]
 801437e:	23a7      	movs	r3, #167	@ 0xa7
 8014380:	009b      	lsls	r3, r3, #2
 8014382:	5cd3      	ldrb	r3, [r2, r3]
 8014384:	2b03      	cmp	r3, #3
 8014386:	d10e      	bne.n	80143a6 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8014388:	687a      	ldr	r2, [r7, #4]
 801438a:	23ad      	movs	r3, #173	@ 0xad
 801438c:	009b      	lsls	r3, r3, #2
 801438e:	58d3      	ldr	r3, [r2, r3]
 8014390:	69db      	ldr	r3, [r3, #28]
 8014392:	2b00      	cmp	r3, #0
 8014394:	d007      	beq.n	80143a6 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8014396:	687a      	ldr	r2, [r7, #4]
 8014398:	23ad      	movs	r3, #173	@ 0xad
 801439a:	009b      	lsls	r3, r3, #2
 801439c:	58d3      	ldr	r3, [r2, r3]
 801439e:	69db      	ldr	r3, [r3, #28]
 80143a0:	687a      	ldr	r2, [r7, #4]
 80143a2:	0010      	movs	r0, r2
 80143a4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80143a6:	2300      	movs	r3, #0
}
 80143a8:	0018      	movs	r0, r3
 80143aa:	46bd      	mov	sp, r7
 80143ac:	b002      	add	sp, #8
 80143ae:	bd80      	pop	{r7, pc}

080143b0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b084      	sub	sp, #16
 80143b4:	af00      	add	r7, sp, #0
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80143ba:	230f      	movs	r3, #15
 80143bc:	18fb      	adds	r3, r7, r3
 80143be:	2200      	movs	r2, #0
 80143c0:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80143c2:	683b      	ldr	r3, [r7, #0]
 80143c4:	781b      	ldrb	r3, [r3, #0]
 80143c6:	001a      	movs	r2, r3
 80143c8:	2360      	movs	r3, #96	@ 0x60
 80143ca:	4013      	ands	r3, r2
 80143cc:	2b40      	cmp	r3, #64	@ 0x40
 80143ce:	d004      	beq.n	80143da <USBD_StdDevReq+0x2a>
 80143d0:	d84f      	bhi.n	8014472 <USBD_StdDevReq+0xc2>
 80143d2:	2b00      	cmp	r3, #0
 80143d4:	d00b      	beq.n	80143ee <USBD_StdDevReq+0x3e>
 80143d6:	2b20      	cmp	r3, #32
 80143d8:	d14b      	bne.n	8014472 <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80143da:	687a      	ldr	r2, [r7, #4]
 80143dc:	23ad      	movs	r3, #173	@ 0xad
 80143de:	009b      	lsls	r3, r3, #2
 80143e0:	58d3      	ldr	r3, [r2, r3]
 80143e2:	689b      	ldr	r3, [r3, #8]
 80143e4:	6839      	ldr	r1, [r7, #0]
 80143e6:	687a      	ldr	r2, [r7, #4]
 80143e8:	0010      	movs	r0, r2
 80143ea:	4798      	blx	r3
      break;
 80143ec:	e048      	b.n	8014480 <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80143ee:	683b      	ldr	r3, [r7, #0]
 80143f0:	785b      	ldrb	r3, [r3, #1]
 80143f2:	2b09      	cmp	r3, #9
 80143f4:	d835      	bhi.n	8014462 <USBD_StdDevReq+0xb2>
 80143f6:	009a      	lsls	r2, r3, #2
 80143f8:	4b25      	ldr	r3, [pc, #148]	@ (8014490 <USBD_StdDevReq+0xe0>)
 80143fa:	18d3      	adds	r3, r2, r3
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8014400:	683a      	ldr	r2, [r7, #0]
 8014402:	687b      	ldr	r3, [r7, #4]
 8014404:	0011      	movs	r1, r2
 8014406:	0018      	movs	r0, r3
 8014408:	f000 fa52 	bl	80148b0 <USBD_GetDescriptor>
          break;
 801440c:	e030      	b.n	8014470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 801440e:	683a      	ldr	r2, [r7, #0]
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	0011      	movs	r1, r2
 8014414:	0018      	movs	r0, r3
 8014416:	f000 fbfd 	bl	8014c14 <USBD_SetAddress>
          break;
 801441a:	e029      	b.n	8014470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 801441c:	683a      	ldr	r2, [r7, #0]
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	0011      	movs	r1, r2
 8014422:	0018      	movs	r0, r3
 8014424:	f000 fc4a 	bl	8014cbc <USBD_SetConfig>
          break;
 8014428:	e022      	b.n	8014470 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 801442a:	683a      	ldr	r2, [r7, #0]
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	0011      	movs	r1, r2
 8014430:	0018      	movs	r0, r3
 8014432:	f000 fce7 	bl	8014e04 <USBD_GetConfig>
          break;
 8014436:	e01b      	b.n	8014470 <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8014438:	683a      	ldr	r2, [r7, #0]
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	0011      	movs	r1, r2
 801443e:	0018      	movs	r0, r3
 8014440:	f000 fd1b 	bl	8014e7a <USBD_GetStatus>
          break;
 8014444:	e014      	b.n	8014470 <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8014446:	683a      	ldr	r2, [r7, #0]
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	0011      	movs	r1, r2
 801444c:	0018      	movs	r0, r3
 801444e:	f000 fd4e 	bl	8014eee <USBD_SetFeature>
          break;
 8014452:	e00d      	b.n	8014470 <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8014454:	683a      	ldr	r2, [r7, #0]
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	0011      	movs	r1, r2
 801445a:	0018      	movs	r0, r3
 801445c:	f000 fd5d 	bl	8014f1a <USBD_ClrFeature>
          break;
 8014460:	e006      	b.n	8014470 <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8014462:	683a      	ldr	r2, [r7, #0]
 8014464:	687b      	ldr	r3, [r7, #4]
 8014466:	0011      	movs	r1, r2
 8014468:	0018      	movs	r0, r3
 801446a:	f000 fdb4 	bl	8014fd6 <USBD_CtlError>
          break;
 801446e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014470:	e006      	b.n	8014480 <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8014472:	683a      	ldr	r2, [r7, #0]
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	0011      	movs	r1, r2
 8014478:	0018      	movs	r0, r3
 801447a:	f000 fdac 	bl	8014fd6 <USBD_CtlError>
      break;
 801447e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 8014480:	230f      	movs	r3, #15
 8014482:	18fb      	adds	r3, r7, r3
 8014484:	781b      	ldrb	r3, [r3, #0]
}
 8014486:	0018      	movs	r0, r3
 8014488:	46bd      	mov	sp, r7
 801448a:	b004      	add	sp, #16
 801448c:	bd80      	pop	{r7, pc}
 801448e:	46c0      	nop			@ (mov r8, r8)
 8014490:	0801b4d0 	.word	0x0801b4d0

08014494 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8014494:	b5b0      	push	{r4, r5, r7, lr}
 8014496:	b084      	sub	sp, #16
 8014498:	af00      	add	r7, sp, #0
 801449a:	6078      	str	r0, [r7, #4]
 801449c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801449e:	230f      	movs	r3, #15
 80144a0:	18fb      	adds	r3, r7, r3
 80144a2:	2200      	movs	r2, #0
 80144a4:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80144a6:	683b      	ldr	r3, [r7, #0]
 80144a8:	781b      	ldrb	r3, [r3, #0]
 80144aa:	001a      	movs	r2, r3
 80144ac:	2360      	movs	r3, #96	@ 0x60
 80144ae:	4013      	ands	r3, r2
 80144b0:	2b40      	cmp	r3, #64	@ 0x40
 80144b2:	d004      	beq.n	80144be <USBD_StdItfReq+0x2a>
 80144b4:	d839      	bhi.n	801452a <USBD_StdItfReq+0x96>
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d001      	beq.n	80144be <USBD_StdItfReq+0x2a>
 80144ba:	2b20      	cmp	r3, #32
 80144bc:	d135      	bne.n	801452a <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80144be:	687a      	ldr	r2, [r7, #4]
 80144c0:	23a7      	movs	r3, #167	@ 0xa7
 80144c2:	009b      	lsls	r3, r3, #2
 80144c4:	5cd3      	ldrb	r3, [r2, r3]
 80144c6:	3b01      	subs	r3, #1
 80144c8:	2b02      	cmp	r3, #2
 80144ca:	d825      	bhi.n	8014518 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80144cc:	683b      	ldr	r3, [r7, #0]
 80144ce:	889b      	ldrh	r3, [r3, #4]
 80144d0:	b2db      	uxtb	r3, r3
 80144d2:	2b01      	cmp	r3, #1
 80144d4:	d819      	bhi.n	801450a <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80144d6:	687a      	ldr	r2, [r7, #4]
 80144d8:	23ad      	movs	r3, #173	@ 0xad
 80144da:	009b      	lsls	r3, r3, #2
 80144dc:	58d3      	ldr	r3, [r2, r3]
 80144de:	689b      	ldr	r3, [r3, #8]
 80144e0:	250f      	movs	r5, #15
 80144e2:	197c      	adds	r4, r7, r5
 80144e4:	6839      	ldr	r1, [r7, #0]
 80144e6:	687a      	ldr	r2, [r7, #4]
 80144e8:	0010      	movs	r0, r2
 80144ea:	4798      	blx	r3
 80144ec:	0003      	movs	r3, r0
 80144ee:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80144f0:	683b      	ldr	r3, [r7, #0]
 80144f2:	88db      	ldrh	r3, [r3, #6]
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d116      	bne.n	8014526 <USBD_StdItfReq+0x92>
 80144f8:	197b      	adds	r3, r7, r5
 80144fa:	781b      	ldrb	r3, [r3, #0]
 80144fc:	2b00      	cmp	r3, #0
 80144fe:	d112      	bne.n	8014526 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	0018      	movs	r0, r3
 8014504:	f000 fe4f 	bl	80151a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8014508:	e00d      	b.n	8014526 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 801450a:	683a      	ldr	r2, [r7, #0]
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	0011      	movs	r1, r2
 8014510:	0018      	movs	r0, r3
 8014512:	f000 fd60 	bl	8014fd6 <USBD_CtlError>
          break;
 8014516:	e006      	b.n	8014526 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 8014518:	683a      	ldr	r2, [r7, #0]
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	0011      	movs	r1, r2
 801451e:	0018      	movs	r0, r3
 8014520:	f000 fd59 	bl	8014fd6 <USBD_CtlError>
          break;
 8014524:	e000      	b.n	8014528 <USBD_StdItfReq+0x94>
          break;
 8014526:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014528:	e006      	b.n	8014538 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 801452a:	683a      	ldr	r2, [r7, #0]
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	0011      	movs	r1, r2
 8014530:	0018      	movs	r0, r3
 8014532:	f000 fd50 	bl	8014fd6 <USBD_CtlError>
      break;
 8014536:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8014538:	2300      	movs	r3, #0
}
 801453a:	0018      	movs	r0, r3
 801453c:	46bd      	mov	sp, r7
 801453e:	b004      	add	sp, #16
 8014540:	bdb0      	pop	{r4, r5, r7, pc}

08014542 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8014542:	b5b0      	push	{r4, r5, r7, lr}
 8014544:	b084      	sub	sp, #16
 8014546:	af00      	add	r7, sp, #0
 8014548:	6078      	str	r0, [r7, #4]
 801454a:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 801454c:	230f      	movs	r3, #15
 801454e:	18fb      	adds	r3, r7, r3
 8014550:	2200      	movs	r2, #0
 8014552:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8014554:	683b      	ldr	r3, [r7, #0]
 8014556:	889a      	ldrh	r2, [r3, #4]
 8014558:	230e      	movs	r3, #14
 801455a:	18fb      	adds	r3, r7, r3
 801455c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801455e:	683b      	ldr	r3, [r7, #0]
 8014560:	781b      	ldrb	r3, [r3, #0]
 8014562:	001a      	movs	r2, r3
 8014564:	2360      	movs	r3, #96	@ 0x60
 8014566:	4013      	ands	r3, r2
 8014568:	2b40      	cmp	r3, #64	@ 0x40
 801456a:	d006      	beq.n	801457a <USBD_StdEPReq+0x38>
 801456c:	d900      	bls.n	8014570 <USBD_StdEPReq+0x2e>
 801456e:	e190      	b.n	8014892 <USBD_StdEPReq+0x350>
 8014570:	2b00      	cmp	r3, #0
 8014572:	d00c      	beq.n	801458e <USBD_StdEPReq+0x4c>
 8014574:	2b20      	cmp	r3, #32
 8014576:	d000      	beq.n	801457a <USBD_StdEPReq+0x38>
 8014578:	e18b      	b.n	8014892 <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 801457a:	687a      	ldr	r2, [r7, #4]
 801457c:	23ad      	movs	r3, #173	@ 0xad
 801457e:	009b      	lsls	r3, r3, #2
 8014580:	58d3      	ldr	r3, [r2, r3]
 8014582:	689b      	ldr	r3, [r3, #8]
 8014584:	6839      	ldr	r1, [r7, #0]
 8014586:	687a      	ldr	r2, [r7, #4]
 8014588:	0010      	movs	r0, r2
 801458a:	4798      	blx	r3
      break;
 801458c:	e188      	b.n	80148a0 <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801458e:	683b      	ldr	r3, [r7, #0]
 8014590:	781b      	ldrb	r3, [r3, #0]
 8014592:	001a      	movs	r2, r3
 8014594:	2360      	movs	r3, #96	@ 0x60
 8014596:	4013      	ands	r3, r2
 8014598:	2b20      	cmp	r3, #32
 801459a:	d10f      	bne.n	80145bc <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 801459c:	687a      	ldr	r2, [r7, #4]
 801459e:	23ad      	movs	r3, #173	@ 0xad
 80145a0:	009b      	lsls	r3, r3, #2
 80145a2:	58d3      	ldr	r3, [r2, r3]
 80145a4:	689b      	ldr	r3, [r3, #8]
 80145a6:	250f      	movs	r5, #15
 80145a8:	197c      	adds	r4, r7, r5
 80145aa:	6839      	ldr	r1, [r7, #0]
 80145ac:	687a      	ldr	r2, [r7, #4]
 80145ae:	0010      	movs	r0, r2
 80145b0:	4798      	blx	r3
 80145b2:	0003      	movs	r3, r0
 80145b4:	7023      	strb	r3, [r4, #0]

        return ret;
 80145b6:	197b      	adds	r3, r7, r5
 80145b8:	781b      	ldrb	r3, [r3, #0]
 80145ba:	e174      	b.n	80148a6 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 80145bc:	683b      	ldr	r3, [r7, #0]
 80145be:	785b      	ldrb	r3, [r3, #1]
 80145c0:	2b03      	cmp	r3, #3
 80145c2:	d007      	beq.n	80145d4 <USBD_StdEPReq+0x92>
 80145c4:	dd00      	ble.n	80145c8 <USBD_StdEPReq+0x86>
 80145c6:	e15c      	b.n	8014882 <USBD_StdEPReq+0x340>
 80145c8:	2b00      	cmp	r3, #0
 80145ca:	d100      	bne.n	80145ce <USBD_StdEPReq+0x8c>
 80145cc:	e092      	b.n	80146f4 <USBD_StdEPReq+0x1b2>
 80145ce:	2b01      	cmp	r3, #1
 80145d0:	d04b      	beq.n	801466a <USBD_StdEPReq+0x128>
 80145d2:	e156      	b.n	8014882 <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80145d4:	687a      	ldr	r2, [r7, #4]
 80145d6:	23a7      	movs	r3, #167	@ 0xa7
 80145d8:	009b      	lsls	r3, r3, #2
 80145da:	5cd3      	ldrb	r3, [r2, r3]
 80145dc:	2b02      	cmp	r3, #2
 80145de:	d002      	beq.n	80145e6 <USBD_StdEPReq+0xa4>
 80145e0:	2b03      	cmp	r3, #3
 80145e2:	d01d      	beq.n	8014620 <USBD_StdEPReq+0xde>
 80145e4:	e039      	b.n	801465a <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80145e6:	220e      	movs	r2, #14
 80145e8:	18bb      	adds	r3, r7, r2
 80145ea:	781b      	ldrb	r3, [r3, #0]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d010      	beq.n	8014612 <USBD_StdEPReq+0xd0>
 80145f0:	18bb      	adds	r3, r7, r2
 80145f2:	781b      	ldrb	r3, [r3, #0]
 80145f4:	2b80      	cmp	r3, #128	@ 0x80
 80145f6:	d00c      	beq.n	8014612 <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80145f8:	18bb      	adds	r3, r7, r2
 80145fa:	781a      	ldrb	r2, [r3, #0]
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	0011      	movs	r1, r2
 8014600:	0018      	movs	r0, r3
 8014602:	f001 f978 	bl	80158f6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8014606:	687b      	ldr	r3, [r7, #4]
 8014608:	2180      	movs	r1, #128	@ 0x80
 801460a:	0018      	movs	r0, r3
 801460c:	f001 f973 	bl	80158f6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8014610:	e02a      	b.n	8014668 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 8014612:	683a      	ldr	r2, [r7, #0]
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	0011      	movs	r1, r2
 8014618:	0018      	movs	r0, r3
 801461a:	f000 fcdc 	bl	8014fd6 <USBD_CtlError>
              break;
 801461e:	e023      	b.n	8014668 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8014620:	683b      	ldr	r3, [r7, #0]
 8014622:	885b      	ldrh	r3, [r3, #2]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d113      	bne.n	8014650 <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8014628:	220e      	movs	r2, #14
 801462a:	18bb      	adds	r3, r7, r2
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	2b00      	cmp	r3, #0
 8014630:	d00e      	beq.n	8014650 <USBD_StdEPReq+0x10e>
 8014632:	18bb      	adds	r3, r7, r2
 8014634:	781b      	ldrb	r3, [r3, #0]
 8014636:	2b80      	cmp	r3, #128	@ 0x80
 8014638:	d00a      	beq.n	8014650 <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 801463a:	683b      	ldr	r3, [r7, #0]
 801463c:	88db      	ldrh	r3, [r3, #6]
 801463e:	2b00      	cmp	r3, #0
 8014640:	d106      	bne.n	8014650 <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8014642:	18bb      	adds	r3, r7, r2
 8014644:	781a      	ldrb	r2, [r3, #0]
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	0011      	movs	r1, r2
 801464a:	0018      	movs	r0, r3
 801464c:	f001 f953 	bl	80158f6 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	0018      	movs	r0, r3
 8014654:	f000 fda7 	bl	80151a6 <USBD_CtlSendStatus>

              break;
 8014658:	e006      	b.n	8014668 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 801465a:	683a      	ldr	r2, [r7, #0]
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	0011      	movs	r1, r2
 8014660:	0018      	movs	r0, r3
 8014662:	f000 fcb8 	bl	8014fd6 <USBD_CtlError>
              break;
 8014666:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014668:	e112      	b.n	8014890 <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801466a:	687a      	ldr	r2, [r7, #4]
 801466c:	23a7      	movs	r3, #167	@ 0xa7
 801466e:	009b      	lsls	r3, r3, #2
 8014670:	5cd3      	ldrb	r3, [r2, r3]
 8014672:	2b02      	cmp	r3, #2
 8014674:	d002      	beq.n	801467c <USBD_StdEPReq+0x13a>
 8014676:	2b03      	cmp	r3, #3
 8014678:	d01d      	beq.n	80146b6 <USBD_StdEPReq+0x174>
 801467a:	e032      	b.n	80146e2 <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801467c:	220e      	movs	r2, #14
 801467e:	18bb      	adds	r3, r7, r2
 8014680:	781b      	ldrb	r3, [r3, #0]
 8014682:	2b00      	cmp	r3, #0
 8014684:	d010      	beq.n	80146a8 <USBD_StdEPReq+0x166>
 8014686:	18bb      	adds	r3, r7, r2
 8014688:	781b      	ldrb	r3, [r3, #0]
 801468a:	2b80      	cmp	r3, #128	@ 0x80
 801468c:	d00c      	beq.n	80146a8 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801468e:	18bb      	adds	r3, r7, r2
 8014690:	781a      	ldrb	r2, [r3, #0]
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	0011      	movs	r1, r2
 8014696:	0018      	movs	r0, r3
 8014698:	f001 f92d 	bl	80158f6 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2180      	movs	r1, #128	@ 0x80
 80146a0:	0018      	movs	r0, r3
 80146a2:	f001 f928 	bl	80158f6 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80146a6:	e024      	b.n	80146f2 <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 80146a8:	683a      	ldr	r2, [r7, #0]
 80146aa:	687b      	ldr	r3, [r7, #4]
 80146ac:	0011      	movs	r1, r2
 80146ae:	0018      	movs	r0, r3
 80146b0:	f000 fc91 	bl	8014fd6 <USBD_CtlError>
              break;
 80146b4:	e01d      	b.n	80146f2 <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80146b6:	683b      	ldr	r3, [r7, #0]
 80146b8:	885b      	ldrh	r3, [r3, #2]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d118      	bne.n	80146f0 <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80146be:	210e      	movs	r1, #14
 80146c0:	187b      	adds	r3, r7, r1
 80146c2:	781b      	ldrb	r3, [r3, #0]
 80146c4:	227f      	movs	r2, #127	@ 0x7f
 80146c6:	4013      	ands	r3, r2
 80146c8:	d006      	beq.n	80146d8 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80146ca:	187b      	adds	r3, r7, r1
 80146cc:	781a      	ldrb	r2, [r3, #0]
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	0011      	movs	r1, r2
 80146d2:	0018      	movs	r0, r3
 80146d4:	f001 f93a 	bl	801594c <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80146d8:	687b      	ldr	r3, [r7, #4]
 80146da:	0018      	movs	r0, r3
 80146dc:	f000 fd63 	bl	80151a6 <USBD_CtlSendStatus>
              }
              break;
 80146e0:	e006      	b.n	80146f0 <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80146e2:	683a      	ldr	r2, [r7, #0]
 80146e4:	687b      	ldr	r3, [r7, #4]
 80146e6:	0011      	movs	r1, r2
 80146e8:	0018      	movs	r0, r3
 80146ea:	f000 fc74 	bl	8014fd6 <USBD_CtlError>
              break;
 80146ee:	e000      	b.n	80146f2 <USBD_StdEPReq+0x1b0>
              break;
 80146f0:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80146f2:	e0cd      	b.n	8014890 <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80146f4:	687a      	ldr	r2, [r7, #4]
 80146f6:	23a7      	movs	r3, #167	@ 0xa7
 80146f8:	009b      	lsls	r3, r3, #2
 80146fa:	5cd3      	ldrb	r3, [r2, r3]
 80146fc:	2b02      	cmp	r3, #2
 80146fe:	d002      	beq.n	8014706 <USBD_StdEPReq+0x1c4>
 8014700:	2b03      	cmp	r3, #3
 8014702:	d03c      	beq.n	801477e <USBD_StdEPReq+0x23c>
 8014704:	e0b5      	b.n	8014872 <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8014706:	220e      	movs	r2, #14
 8014708:	18bb      	adds	r3, r7, r2
 801470a:	781b      	ldrb	r3, [r3, #0]
 801470c:	2b00      	cmp	r3, #0
 801470e:	d00a      	beq.n	8014726 <USBD_StdEPReq+0x1e4>
 8014710:	18bb      	adds	r3, r7, r2
 8014712:	781b      	ldrb	r3, [r3, #0]
 8014714:	2b80      	cmp	r3, #128	@ 0x80
 8014716:	d006      	beq.n	8014726 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 8014718:	683a      	ldr	r2, [r7, #0]
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	0011      	movs	r1, r2
 801471e:	0018      	movs	r0, r3
 8014720:	f000 fc59 	bl	8014fd6 <USBD_CtlError>
                break;
 8014724:	e0ac      	b.n	8014880 <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014726:	220e      	movs	r2, #14
 8014728:	18bb      	adds	r3, r7, r2
 801472a:	781b      	ldrb	r3, [r3, #0]
 801472c:	b25b      	sxtb	r3, r3
 801472e:	2b00      	cmp	r3, #0
 8014730:	da0c      	bge.n	801474c <USBD_StdEPReq+0x20a>
 8014732:	18bb      	adds	r3, r7, r2
 8014734:	781b      	ldrb	r3, [r3, #0]
 8014736:	227f      	movs	r2, #127	@ 0x7f
 8014738:	401a      	ands	r2, r3
 801473a:	0013      	movs	r3, r2
 801473c:	009b      	lsls	r3, r3, #2
 801473e:	189b      	adds	r3, r3, r2
 8014740:	009b      	lsls	r3, r3, #2
 8014742:	3310      	adds	r3, #16
 8014744:	687a      	ldr	r2, [r7, #4]
 8014746:	18d3      	adds	r3, r2, r3
 8014748:	3304      	adds	r3, #4
 801474a:	e00d      	b.n	8014768 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801474c:	230e      	movs	r3, #14
 801474e:	18fb      	adds	r3, r7, r3
 8014750:	781b      	ldrb	r3, [r3, #0]
 8014752:	227f      	movs	r2, #127	@ 0x7f
 8014754:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014756:	0013      	movs	r3, r2
 8014758:	009b      	lsls	r3, r3, #2
 801475a:	189b      	adds	r3, r3, r2
 801475c:	009b      	lsls	r3, r3, #2
 801475e:	3351      	adds	r3, #81	@ 0x51
 8014760:	33ff      	adds	r3, #255	@ 0xff
 8014762:	687a      	ldr	r2, [r7, #4]
 8014764:	18d3      	adds	r3, r2, r3
 8014766:	3304      	adds	r3, #4
 8014768:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 801476a:	68bb      	ldr	r3, [r7, #8]
 801476c:	2200      	movs	r2, #0
 801476e:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014770:	68b9      	ldr	r1, [r7, #8]
 8014772:	687b      	ldr	r3, [r7, #4]
 8014774:	2202      	movs	r2, #2
 8014776:	0018      	movs	r0, r3
 8014778:	f000 fcab 	bl	80150d2 <USBD_CtlSendData>
              break;
 801477c:	e080      	b.n	8014880 <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801477e:	220e      	movs	r2, #14
 8014780:	18bb      	adds	r3, r7, r2
 8014782:	781b      	ldrb	r3, [r3, #0]
 8014784:	b25b      	sxtb	r3, r3
 8014786:	2b00      	cmp	r3, #0
 8014788:	da14      	bge.n	80147b4 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 801478a:	18bb      	adds	r3, r7, r2
 801478c:	781b      	ldrb	r3, [r3, #0]
 801478e:	220f      	movs	r2, #15
 8014790:	401a      	ands	r2, r3
 8014792:	6879      	ldr	r1, [r7, #4]
 8014794:	0013      	movs	r3, r2
 8014796:	009b      	lsls	r3, r3, #2
 8014798:	189b      	adds	r3, r3, r2
 801479a:	009b      	lsls	r3, r3, #2
 801479c:	18cb      	adds	r3, r1, r3
 801479e:	3318      	adds	r3, #24
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	d11e      	bne.n	80147e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80147a6:	683a      	ldr	r2, [r7, #0]
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	0011      	movs	r1, r2
 80147ac:	0018      	movs	r0, r3
 80147ae:	f000 fc12 	bl	8014fd6 <USBD_CtlError>
                  break;
 80147b2:	e065      	b.n	8014880 <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80147b4:	230e      	movs	r3, #14
 80147b6:	18fb      	adds	r3, r7, r3
 80147b8:	781b      	ldrb	r3, [r3, #0]
 80147ba:	220f      	movs	r2, #15
 80147bc:	401a      	ands	r2, r3
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	23ac      	movs	r3, #172	@ 0xac
 80147c2:	0059      	lsls	r1, r3, #1
 80147c4:	0013      	movs	r3, r2
 80147c6:	009b      	lsls	r3, r3, #2
 80147c8:	189b      	adds	r3, r3, r2
 80147ca:	009b      	lsls	r3, r3, #2
 80147cc:	18c3      	adds	r3, r0, r3
 80147ce:	185b      	adds	r3, r3, r1
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	2b00      	cmp	r3, #0
 80147d4:	d106      	bne.n	80147e4 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80147d6:	683a      	ldr	r2, [r7, #0]
 80147d8:	687b      	ldr	r3, [r7, #4]
 80147da:	0011      	movs	r1, r2
 80147dc:	0018      	movs	r0, r3
 80147de:	f000 fbfa 	bl	8014fd6 <USBD_CtlError>
                  break;
 80147e2:	e04d      	b.n	8014880 <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80147e4:	220e      	movs	r2, #14
 80147e6:	18bb      	adds	r3, r7, r2
 80147e8:	781b      	ldrb	r3, [r3, #0]
 80147ea:	b25b      	sxtb	r3, r3
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	da0c      	bge.n	801480a <USBD_StdEPReq+0x2c8>
 80147f0:	18bb      	adds	r3, r7, r2
 80147f2:	781b      	ldrb	r3, [r3, #0]
 80147f4:	227f      	movs	r2, #127	@ 0x7f
 80147f6:	401a      	ands	r2, r3
 80147f8:	0013      	movs	r3, r2
 80147fa:	009b      	lsls	r3, r3, #2
 80147fc:	189b      	adds	r3, r3, r2
 80147fe:	009b      	lsls	r3, r3, #2
 8014800:	3310      	adds	r3, #16
 8014802:	687a      	ldr	r2, [r7, #4]
 8014804:	18d3      	adds	r3, r2, r3
 8014806:	3304      	adds	r3, #4
 8014808:	e00d      	b.n	8014826 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801480a:	230e      	movs	r3, #14
 801480c:	18fb      	adds	r3, r7, r3
 801480e:	781b      	ldrb	r3, [r3, #0]
 8014810:	227f      	movs	r2, #127	@ 0x7f
 8014812:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8014814:	0013      	movs	r3, r2
 8014816:	009b      	lsls	r3, r3, #2
 8014818:	189b      	adds	r3, r3, r2
 801481a:	009b      	lsls	r3, r3, #2
 801481c:	3351      	adds	r3, #81	@ 0x51
 801481e:	33ff      	adds	r3, #255	@ 0xff
 8014820:	687a      	ldr	r2, [r7, #4]
 8014822:	18d3      	adds	r3, r2, r3
 8014824:	3304      	adds	r3, #4
 8014826:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8014828:	220e      	movs	r2, #14
 801482a:	18bb      	adds	r3, r7, r2
 801482c:	781b      	ldrb	r3, [r3, #0]
 801482e:	2b00      	cmp	r3, #0
 8014830:	d003      	beq.n	801483a <USBD_StdEPReq+0x2f8>
 8014832:	18bb      	adds	r3, r7, r2
 8014834:	781b      	ldrb	r3, [r3, #0]
 8014836:	2b80      	cmp	r3, #128	@ 0x80
 8014838:	d103      	bne.n	8014842 <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 801483a:	68bb      	ldr	r3, [r7, #8]
 801483c:	2200      	movs	r2, #0
 801483e:	601a      	str	r2, [r3, #0]
 8014840:	e010      	b.n	8014864 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8014842:	230e      	movs	r3, #14
 8014844:	18fb      	adds	r3, r7, r3
 8014846:	781a      	ldrb	r2, [r3, #0]
 8014848:	687b      	ldr	r3, [r7, #4]
 801484a:	0011      	movs	r1, r2
 801484c:	0018      	movs	r0, r3
 801484e:	f001 f8a8 	bl	80159a2 <USBD_LL_IsStallEP>
 8014852:	1e03      	subs	r3, r0, #0
 8014854:	d003      	beq.n	801485e <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8014856:	68bb      	ldr	r3, [r7, #8]
 8014858:	2201      	movs	r2, #1
 801485a:	601a      	str	r2, [r3, #0]
 801485c:	e002      	b.n	8014864 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801485e:	68bb      	ldr	r3, [r7, #8]
 8014860:	2200      	movs	r2, #0
 8014862:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8014864:	68b9      	ldr	r1, [r7, #8]
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	2202      	movs	r2, #2
 801486a:	0018      	movs	r0, r3
 801486c:	f000 fc31 	bl	80150d2 <USBD_CtlSendData>
              break;
 8014870:	e006      	b.n	8014880 <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 8014872:	683a      	ldr	r2, [r7, #0]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	0011      	movs	r1, r2
 8014878:	0018      	movs	r0, r3
 801487a:	f000 fbac 	bl	8014fd6 <USBD_CtlError>
              break;
 801487e:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8014880:	e006      	b.n	8014890 <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 8014882:	683a      	ldr	r2, [r7, #0]
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	0011      	movs	r1, r2
 8014888:	0018      	movs	r0, r3
 801488a:	f000 fba4 	bl	8014fd6 <USBD_CtlError>
          break;
 801488e:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8014890:	e006      	b.n	80148a0 <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 8014892:	683a      	ldr	r2, [r7, #0]
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	0011      	movs	r1, r2
 8014898:	0018      	movs	r0, r3
 801489a:	f000 fb9c 	bl	8014fd6 <USBD_CtlError>
      break;
 801489e:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 80148a0:	230f      	movs	r3, #15
 80148a2:	18fb      	adds	r3, r7, r3
 80148a4:	781b      	ldrb	r3, [r3, #0]
}
 80148a6:	0018      	movs	r0, r3
 80148a8:	46bd      	mov	sp, r7
 80148aa:	b004      	add	sp, #16
 80148ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080148b0 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80148b0:	b580      	push	{r7, lr}
 80148b2:	b084      	sub	sp, #16
 80148b4:	af00      	add	r7, sp, #0
 80148b6:	6078      	str	r0, [r7, #4]
 80148b8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80148ba:	2308      	movs	r3, #8
 80148bc:	18fb      	adds	r3, r7, r3
 80148be:	2200      	movs	r2, #0
 80148c0:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 80148c2:	2300      	movs	r3, #0
 80148c4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80148c6:	230b      	movs	r3, #11
 80148c8:	18fb      	adds	r3, r7, r3
 80148ca:	2200      	movs	r2, #0
 80148cc:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	885b      	ldrh	r3, [r3, #2]
 80148d2:	0a1b      	lsrs	r3, r3, #8
 80148d4:	b29b      	uxth	r3, r3
 80148d6:	2b07      	cmp	r3, #7
 80148d8:	d900      	bls.n	80148dc <USBD_GetDescriptor+0x2c>
 80148da:	e159      	b.n	8014b90 <USBD_GetDescriptor+0x2e0>
 80148dc:	009a      	lsls	r2, r3, #2
 80148de:	4bcb      	ldr	r3, [pc, #812]	@ (8014c0c <USBD_GetDescriptor+0x35c>)
 80148e0:	18d3      	adds	r3, r2, r3
 80148e2:	681b      	ldr	r3, [r3, #0]
 80148e4:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80148e6:	687a      	ldr	r2, [r7, #4]
 80148e8:	23ac      	movs	r3, #172	@ 0xac
 80148ea:	009b      	lsls	r3, r3, #2
 80148ec:	58d3      	ldr	r3, [r2, r3]
 80148ee:	681b      	ldr	r3, [r3, #0]
 80148f0:	687a      	ldr	r2, [r7, #4]
 80148f2:	7c12      	ldrb	r2, [r2, #16]
 80148f4:	2108      	movs	r1, #8
 80148f6:	1879      	adds	r1, r7, r1
 80148f8:	0010      	movs	r0, r2
 80148fa:	4798      	blx	r3
 80148fc:	0003      	movs	r3, r0
 80148fe:	60fb      	str	r3, [r7, #12]
      break;
 8014900:	e153      	b.n	8014baa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	7c1b      	ldrb	r3, [r3, #16]
 8014906:	2b00      	cmp	r3, #0
 8014908:	d10f      	bne.n	801492a <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 801490a:	687a      	ldr	r2, [r7, #4]
 801490c:	23ad      	movs	r3, #173	@ 0xad
 801490e:	009b      	lsls	r3, r3, #2
 8014910:	58d3      	ldr	r3, [r2, r3]
 8014912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014914:	2208      	movs	r2, #8
 8014916:	18ba      	adds	r2, r7, r2
 8014918:	0010      	movs	r0, r2
 801491a:	4798      	blx	r3
 801491c:	0003      	movs	r3, r0
 801491e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014920:	68fb      	ldr	r3, [r7, #12]
 8014922:	3301      	adds	r3, #1
 8014924:	2202      	movs	r2, #2
 8014926:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8014928:	e13f      	b.n	8014baa <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 801492a:	687a      	ldr	r2, [r7, #4]
 801492c:	23ad      	movs	r3, #173	@ 0xad
 801492e:	009b      	lsls	r3, r3, #2
 8014930:	58d3      	ldr	r3, [r2, r3]
 8014932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014934:	2208      	movs	r2, #8
 8014936:	18ba      	adds	r2, r7, r2
 8014938:	0010      	movs	r0, r2
 801493a:	4798      	blx	r3
 801493c:	0003      	movs	r3, r0
 801493e:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	3301      	adds	r3, #1
 8014944:	2202      	movs	r2, #2
 8014946:	701a      	strb	r2, [r3, #0]
      break;
 8014948:	e12f      	b.n	8014baa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	885b      	ldrh	r3, [r3, #2]
 801494e:	b2db      	uxtb	r3, r3
 8014950:	2b05      	cmp	r3, #5
 8014952:	d900      	bls.n	8014956 <USBD_GetDescriptor+0xa6>
 8014954:	e0d0      	b.n	8014af8 <USBD_GetDescriptor+0x248>
 8014956:	009a      	lsls	r2, r3, #2
 8014958:	4bad      	ldr	r3, [pc, #692]	@ (8014c10 <USBD_GetDescriptor+0x360>)
 801495a:	18d3      	adds	r3, r2, r3
 801495c:	681b      	ldr	r3, [r3, #0]
 801495e:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	23ac      	movs	r3, #172	@ 0xac
 8014964:	009b      	lsls	r3, r3, #2
 8014966:	58d3      	ldr	r3, [r2, r3]
 8014968:	685b      	ldr	r3, [r3, #4]
 801496a:	2b00      	cmp	r3, #0
 801496c:	d00d      	beq.n	801498a <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801496e:	687a      	ldr	r2, [r7, #4]
 8014970:	23ac      	movs	r3, #172	@ 0xac
 8014972:	009b      	lsls	r3, r3, #2
 8014974:	58d3      	ldr	r3, [r2, r3]
 8014976:	685b      	ldr	r3, [r3, #4]
 8014978:	687a      	ldr	r2, [r7, #4]
 801497a:	7c12      	ldrb	r2, [r2, #16]
 801497c:	2108      	movs	r1, #8
 801497e:	1879      	adds	r1, r7, r1
 8014980:	0010      	movs	r0, r2
 8014982:	4798      	blx	r3
 8014984:	0003      	movs	r3, r0
 8014986:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014988:	e0c3      	b.n	8014b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 801498a:	683a      	ldr	r2, [r7, #0]
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	0011      	movs	r1, r2
 8014990:	0018      	movs	r0, r3
 8014992:	f000 fb20 	bl	8014fd6 <USBD_CtlError>
            err++;
 8014996:	210b      	movs	r1, #11
 8014998:	187b      	adds	r3, r7, r1
 801499a:	781a      	ldrb	r2, [r3, #0]
 801499c:	187b      	adds	r3, r7, r1
 801499e:	3201      	adds	r2, #1
 80149a0:	701a      	strb	r2, [r3, #0]
          break;
 80149a2:	e0b6      	b.n	8014b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80149a4:	687a      	ldr	r2, [r7, #4]
 80149a6:	23ac      	movs	r3, #172	@ 0xac
 80149a8:	009b      	lsls	r3, r3, #2
 80149aa:	58d3      	ldr	r3, [r2, r3]
 80149ac:	689b      	ldr	r3, [r3, #8]
 80149ae:	2b00      	cmp	r3, #0
 80149b0:	d00d      	beq.n	80149ce <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80149b2:	687a      	ldr	r2, [r7, #4]
 80149b4:	23ac      	movs	r3, #172	@ 0xac
 80149b6:	009b      	lsls	r3, r3, #2
 80149b8:	58d3      	ldr	r3, [r2, r3]
 80149ba:	689b      	ldr	r3, [r3, #8]
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	7c12      	ldrb	r2, [r2, #16]
 80149c0:	2108      	movs	r1, #8
 80149c2:	1879      	adds	r1, r7, r1
 80149c4:	0010      	movs	r0, r2
 80149c6:	4798      	blx	r3
 80149c8:	0003      	movs	r3, r0
 80149ca:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80149cc:	e0a1      	b.n	8014b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80149ce:	683a      	ldr	r2, [r7, #0]
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	0011      	movs	r1, r2
 80149d4:	0018      	movs	r0, r3
 80149d6:	f000 fafe 	bl	8014fd6 <USBD_CtlError>
            err++;
 80149da:	210b      	movs	r1, #11
 80149dc:	187b      	adds	r3, r7, r1
 80149de:	781a      	ldrb	r2, [r3, #0]
 80149e0:	187b      	adds	r3, r7, r1
 80149e2:	3201      	adds	r2, #1
 80149e4:	701a      	strb	r2, [r3, #0]
          break;
 80149e6:	e094      	b.n	8014b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80149e8:	687a      	ldr	r2, [r7, #4]
 80149ea:	23ac      	movs	r3, #172	@ 0xac
 80149ec:	009b      	lsls	r3, r3, #2
 80149ee:	58d3      	ldr	r3, [r2, r3]
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d00d      	beq.n	8014a12 <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80149f6:	687a      	ldr	r2, [r7, #4]
 80149f8:	23ac      	movs	r3, #172	@ 0xac
 80149fa:	009b      	lsls	r3, r3, #2
 80149fc:	58d3      	ldr	r3, [r2, r3]
 80149fe:	68db      	ldr	r3, [r3, #12]
 8014a00:	687a      	ldr	r2, [r7, #4]
 8014a02:	7c12      	ldrb	r2, [r2, #16]
 8014a04:	2108      	movs	r1, #8
 8014a06:	1879      	adds	r1, r7, r1
 8014a08:	0010      	movs	r0, r2
 8014a0a:	4798      	blx	r3
 8014a0c:	0003      	movs	r3, r0
 8014a0e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a10:	e07f      	b.n	8014b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014a12:	683a      	ldr	r2, [r7, #0]
 8014a14:	687b      	ldr	r3, [r7, #4]
 8014a16:	0011      	movs	r1, r2
 8014a18:	0018      	movs	r0, r3
 8014a1a:	f000 fadc 	bl	8014fd6 <USBD_CtlError>
            err++;
 8014a1e:	210b      	movs	r1, #11
 8014a20:	187b      	adds	r3, r7, r1
 8014a22:	781a      	ldrb	r2, [r3, #0]
 8014a24:	187b      	adds	r3, r7, r1
 8014a26:	3201      	adds	r2, #1
 8014a28:	701a      	strb	r2, [r3, #0]
          break;
 8014a2a:	e072      	b.n	8014b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8014a2c:	687a      	ldr	r2, [r7, #4]
 8014a2e:	23ac      	movs	r3, #172	@ 0xac
 8014a30:	009b      	lsls	r3, r3, #2
 8014a32:	58d3      	ldr	r3, [r2, r3]
 8014a34:	691b      	ldr	r3, [r3, #16]
 8014a36:	2b00      	cmp	r3, #0
 8014a38:	d00d      	beq.n	8014a56 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8014a3a:	687a      	ldr	r2, [r7, #4]
 8014a3c:	23ac      	movs	r3, #172	@ 0xac
 8014a3e:	009b      	lsls	r3, r3, #2
 8014a40:	58d3      	ldr	r3, [r2, r3]
 8014a42:	691b      	ldr	r3, [r3, #16]
 8014a44:	687a      	ldr	r2, [r7, #4]
 8014a46:	7c12      	ldrb	r2, [r2, #16]
 8014a48:	2108      	movs	r1, #8
 8014a4a:	1879      	adds	r1, r7, r1
 8014a4c:	0010      	movs	r0, r2
 8014a4e:	4798      	blx	r3
 8014a50:	0003      	movs	r3, r0
 8014a52:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a54:	e05d      	b.n	8014b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014a56:	683a      	ldr	r2, [r7, #0]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	0011      	movs	r1, r2
 8014a5c:	0018      	movs	r0, r3
 8014a5e:	f000 faba 	bl	8014fd6 <USBD_CtlError>
            err++;
 8014a62:	210b      	movs	r1, #11
 8014a64:	187b      	adds	r3, r7, r1
 8014a66:	781a      	ldrb	r2, [r3, #0]
 8014a68:	187b      	adds	r3, r7, r1
 8014a6a:	3201      	adds	r2, #1
 8014a6c:	701a      	strb	r2, [r3, #0]
          break;
 8014a6e:	e050      	b.n	8014b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8014a70:	687a      	ldr	r2, [r7, #4]
 8014a72:	23ac      	movs	r3, #172	@ 0xac
 8014a74:	009b      	lsls	r3, r3, #2
 8014a76:	58d3      	ldr	r3, [r2, r3]
 8014a78:	695b      	ldr	r3, [r3, #20]
 8014a7a:	2b00      	cmp	r3, #0
 8014a7c:	d00d      	beq.n	8014a9a <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8014a7e:	687a      	ldr	r2, [r7, #4]
 8014a80:	23ac      	movs	r3, #172	@ 0xac
 8014a82:	009b      	lsls	r3, r3, #2
 8014a84:	58d3      	ldr	r3, [r2, r3]
 8014a86:	695b      	ldr	r3, [r3, #20]
 8014a88:	687a      	ldr	r2, [r7, #4]
 8014a8a:	7c12      	ldrb	r2, [r2, #16]
 8014a8c:	2108      	movs	r1, #8
 8014a8e:	1879      	adds	r1, r7, r1
 8014a90:	0010      	movs	r0, r2
 8014a92:	4798      	blx	r3
 8014a94:	0003      	movs	r3, r0
 8014a96:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014a98:	e03b      	b.n	8014b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014a9a:	683a      	ldr	r2, [r7, #0]
 8014a9c:	687b      	ldr	r3, [r7, #4]
 8014a9e:	0011      	movs	r1, r2
 8014aa0:	0018      	movs	r0, r3
 8014aa2:	f000 fa98 	bl	8014fd6 <USBD_CtlError>
            err++;
 8014aa6:	210b      	movs	r1, #11
 8014aa8:	187b      	adds	r3, r7, r1
 8014aaa:	781a      	ldrb	r2, [r3, #0]
 8014aac:	187b      	adds	r3, r7, r1
 8014aae:	3201      	adds	r2, #1
 8014ab0:	701a      	strb	r2, [r3, #0]
          break;
 8014ab2:	e02e      	b.n	8014b12 <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8014ab4:	687a      	ldr	r2, [r7, #4]
 8014ab6:	23ac      	movs	r3, #172	@ 0xac
 8014ab8:	009b      	lsls	r3, r3, #2
 8014aba:	58d3      	ldr	r3, [r2, r3]
 8014abc:	699b      	ldr	r3, [r3, #24]
 8014abe:	2b00      	cmp	r3, #0
 8014ac0:	d00d      	beq.n	8014ade <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8014ac2:	687a      	ldr	r2, [r7, #4]
 8014ac4:	23ac      	movs	r3, #172	@ 0xac
 8014ac6:	009b      	lsls	r3, r3, #2
 8014ac8:	58d3      	ldr	r3, [r2, r3]
 8014aca:	699b      	ldr	r3, [r3, #24]
 8014acc:	687a      	ldr	r2, [r7, #4]
 8014ace:	7c12      	ldrb	r2, [r2, #16]
 8014ad0:	2108      	movs	r1, #8
 8014ad2:	1879      	adds	r1, r7, r1
 8014ad4:	0010      	movs	r0, r2
 8014ad6:	4798      	blx	r3
 8014ad8:	0003      	movs	r3, r0
 8014ada:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8014adc:	e019      	b.n	8014b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8014ade:	683a      	ldr	r2, [r7, #0]
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	0011      	movs	r1, r2
 8014ae4:	0018      	movs	r0, r3
 8014ae6:	f000 fa76 	bl	8014fd6 <USBD_CtlError>
            err++;
 8014aea:	210b      	movs	r1, #11
 8014aec:	187b      	adds	r3, r7, r1
 8014aee:	781a      	ldrb	r2, [r3, #0]
 8014af0:	187b      	adds	r3, r7, r1
 8014af2:	3201      	adds	r2, #1
 8014af4:	701a      	strb	r2, [r3, #0]
          break;
 8014af6:	e00c      	b.n	8014b12 <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8014af8:	683a      	ldr	r2, [r7, #0]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	0011      	movs	r1, r2
 8014afe:	0018      	movs	r0, r3
 8014b00:	f000 fa69 	bl	8014fd6 <USBD_CtlError>
          err++;
 8014b04:	210b      	movs	r1, #11
 8014b06:	187b      	adds	r3, r7, r1
 8014b08:	781a      	ldrb	r2, [r3, #0]
 8014b0a:	187b      	adds	r3, r7, r1
 8014b0c:	3201      	adds	r2, #1
 8014b0e:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 8014b10:	e04b      	b.n	8014baa <USBD_GetDescriptor+0x2fa>
 8014b12:	e04a      	b.n	8014baa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	7c1b      	ldrb	r3, [r3, #16]
 8014b18:	2b00      	cmp	r3, #0
 8014b1a:	d10b      	bne.n	8014b34 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8014b1c:	687a      	ldr	r2, [r7, #4]
 8014b1e:	23ad      	movs	r3, #173	@ 0xad
 8014b20:	009b      	lsls	r3, r3, #2
 8014b22:	58d3      	ldr	r3, [r2, r3]
 8014b24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014b26:	2208      	movs	r2, #8
 8014b28:	18ba      	adds	r2, r7, r2
 8014b2a:	0010      	movs	r0, r2
 8014b2c:	4798      	blx	r3
 8014b2e:	0003      	movs	r3, r0
 8014b30:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b32:	e03a      	b.n	8014baa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014b34:	683a      	ldr	r2, [r7, #0]
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	0011      	movs	r1, r2
 8014b3a:	0018      	movs	r0, r3
 8014b3c:	f000 fa4b 	bl	8014fd6 <USBD_CtlError>
        err++;
 8014b40:	210b      	movs	r1, #11
 8014b42:	187b      	adds	r3, r7, r1
 8014b44:	781a      	ldrb	r2, [r3, #0]
 8014b46:	187b      	adds	r3, r7, r1
 8014b48:	3201      	adds	r2, #1
 8014b4a:	701a      	strb	r2, [r3, #0]
      break;
 8014b4c:	e02d      	b.n	8014baa <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014b4e:	687b      	ldr	r3, [r7, #4]
 8014b50:	7c1b      	ldrb	r3, [r3, #16]
 8014b52:	2b00      	cmp	r3, #0
 8014b54:	d10f      	bne.n	8014b76 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8014b56:	687a      	ldr	r2, [r7, #4]
 8014b58:	23ad      	movs	r3, #173	@ 0xad
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	58d3      	ldr	r3, [r2, r3]
 8014b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b60:	2208      	movs	r2, #8
 8014b62:	18ba      	adds	r2, r7, r2
 8014b64:	0010      	movs	r0, r2
 8014b66:	4798      	blx	r3
 8014b68:	0003      	movs	r3, r0
 8014b6a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8014b6c:	68fb      	ldr	r3, [r7, #12]
 8014b6e:	3301      	adds	r3, #1
 8014b70:	2207      	movs	r2, #7
 8014b72:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8014b74:	e019      	b.n	8014baa <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8014b76:	683a      	ldr	r2, [r7, #0]
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	0011      	movs	r1, r2
 8014b7c:	0018      	movs	r0, r3
 8014b7e:	f000 fa2a 	bl	8014fd6 <USBD_CtlError>
        err++;
 8014b82:	210b      	movs	r1, #11
 8014b84:	187b      	adds	r3, r7, r1
 8014b86:	781a      	ldrb	r2, [r3, #0]
 8014b88:	187b      	adds	r3, r7, r1
 8014b8a:	3201      	adds	r2, #1
 8014b8c:	701a      	strb	r2, [r3, #0]
      break;
 8014b8e:	e00c      	b.n	8014baa <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8014b90:	683a      	ldr	r2, [r7, #0]
 8014b92:	687b      	ldr	r3, [r7, #4]
 8014b94:	0011      	movs	r1, r2
 8014b96:	0018      	movs	r0, r3
 8014b98:	f000 fa1d 	bl	8014fd6 <USBD_CtlError>
      err++;
 8014b9c:	210b      	movs	r1, #11
 8014b9e:	187b      	adds	r3, r7, r1
 8014ba0:	781a      	ldrb	r2, [r3, #0]
 8014ba2:	187b      	adds	r3, r7, r1
 8014ba4:	3201      	adds	r2, #1
 8014ba6:	701a      	strb	r2, [r3, #0]
      break;
 8014ba8:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8014baa:	230b      	movs	r3, #11
 8014bac:	18fb      	adds	r3, r7, r3
 8014bae:	781b      	ldrb	r3, [r3, #0]
 8014bb0:	2b00      	cmp	r3, #0
 8014bb2:	d127      	bne.n	8014c04 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8014bb4:	2108      	movs	r1, #8
 8014bb6:	187b      	adds	r3, r7, r1
 8014bb8:	881b      	ldrh	r3, [r3, #0]
 8014bba:	2b00      	cmp	r3, #0
 8014bbc:	d019      	beq.n	8014bf2 <USBD_GetDescriptor+0x342>
 8014bbe:	683b      	ldr	r3, [r7, #0]
 8014bc0:	88db      	ldrh	r3, [r3, #6]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d015      	beq.n	8014bf2 <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8014bc6:	683b      	ldr	r3, [r7, #0]
 8014bc8:	88da      	ldrh	r2, [r3, #6]
 8014bca:	187b      	adds	r3, r7, r1
 8014bcc:	881b      	ldrh	r3, [r3, #0]
 8014bce:	1c18      	adds	r0, r3, #0
 8014bd0:	1c11      	adds	r1, r2, #0
 8014bd2:	b28a      	uxth	r2, r1
 8014bd4:	b283      	uxth	r3, r0
 8014bd6:	429a      	cmp	r2, r3
 8014bd8:	d900      	bls.n	8014bdc <USBD_GetDescriptor+0x32c>
 8014bda:	1c01      	adds	r1, r0, #0
 8014bdc:	b28a      	uxth	r2, r1
 8014bde:	2108      	movs	r1, #8
 8014be0:	187b      	adds	r3, r7, r1
 8014be2:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8014be4:	187b      	adds	r3, r7, r1
 8014be6:	881a      	ldrh	r2, [r3, #0]
 8014be8:	68f9      	ldr	r1, [r7, #12]
 8014bea:	687b      	ldr	r3, [r7, #4]
 8014bec:	0018      	movs	r0, r3
 8014bee:	f000 fa70 	bl	80150d2 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8014bf2:	683b      	ldr	r3, [r7, #0]
 8014bf4:	88db      	ldrh	r3, [r3, #6]
 8014bf6:	2b00      	cmp	r3, #0
 8014bf8:	d105      	bne.n	8014c06 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8014bfa:	687b      	ldr	r3, [r7, #4]
 8014bfc:	0018      	movs	r0, r3
 8014bfe:	f000 fad2 	bl	80151a6 <USBD_CtlSendStatus>
 8014c02:	e000      	b.n	8014c06 <USBD_GetDescriptor+0x356>
    return;
 8014c04:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014c06:	46bd      	mov	sp, r7
 8014c08:	b004      	add	sp, #16
 8014c0a:	bd80      	pop	{r7, pc}
 8014c0c:	0801b4f8 	.word	0x0801b4f8
 8014c10:	0801b518 	.word	0x0801b518

08014c14 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014c14:	b590      	push	{r4, r7, lr}
 8014c16:	b085      	sub	sp, #20
 8014c18:	af00      	add	r7, sp, #0
 8014c1a:	6078      	str	r0, [r7, #4]
 8014c1c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8014c1e:	683b      	ldr	r3, [r7, #0]
 8014c20:	889b      	ldrh	r3, [r3, #4]
 8014c22:	2b00      	cmp	r3, #0
 8014c24:	d13d      	bne.n	8014ca2 <USBD_SetAddress+0x8e>
 8014c26:	683b      	ldr	r3, [r7, #0]
 8014c28:	88db      	ldrh	r3, [r3, #6]
 8014c2a:	2b00      	cmp	r3, #0
 8014c2c:	d139      	bne.n	8014ca2 <USBD_SetAddress+0x8e>
 8014c2e:	683b      	ldr	r3, [r7, #0]
 8014c30:	885b      	ldrh	r3, [r3, #2]
 8014c32:	2b7f      	cmp	r3, #127	@ 0x7f
 8014c34:	d835      	bhi.n	8014ca2 <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8014c36:	683b      	ldr	r3, [r7, #0]
 8014c38:	885b      	ldrh	r3, [r3, #2]
 8014c3a:	b2da      	uxtb	r2, r3
 8014c3c:	230f      	movs	r3, #15
 8014c3e:	18fb      	adds	r3, r7, r3
 8014c40:	217f      	movs	r1, #127	@ 0x7f
 8014c42:	400a      	ands	r2, r1
 8014c44:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c46:	687a      	ldr	r2, [r7, #4]
 8014c48:	23a7      	movs	r3, #167	@ 0xa7
 8014c4a:	009b      	lsls	r3, r3, #2
 8014c4c:	5cd3      	ldrb	r3, [r2, r3]
 8014c4e:	2b03      	cmp	r3, #3
 8014c50:	d106      	bne.n	8014c60 <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8014c52:	683a      	ldr	r2, [r7, #0]
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	0011      	movs	r1, r2
 8014c58:	0018      	movs	r0, r3
 8014c5a:	f000 f9bc 	bl	8014fd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c5e:	e027      	b.n	8014cb0 <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	240f      	movs	r4, #15
 8014c64:	193a      	adds	r2, r7, r4
 8014c66:	4914      	ldr	r1, [pc, #80]	@ (8014cb8 <USBD_SetAddress+0xa4>)
 8014c68:	7812      	ldrb	r2, [r2, #0]
 8014c6a:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8014c6c:	193b      	adds	r3, r7, r4
 8014c6e:	781a      	ldrb	r2, [r3, #0]
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	0011      	movs	r1, r2
 8014c74:	0018      	movs	r0, r3
 8014c76:	f000 fec5 	bl	8015a04 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	0018      	movs	r0, r3
 8014c7e:	f000 fa92 	bl	80151a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8014c82:	193b      	adds	r3, r7, r4
 8014c84:	781b      	ldrb	r3, [r3, #0]
 8014c86:	2b00      	cmp	r3, #0
 8014c88:	d005      	beq.n	8014c96 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8014c8a:	687a      	ldr	r2, [r7, #4]
 8014c8c:	23a7      	movs	r3, #167	@ 0xa7
 8014c8e:	009b      	lsls	r3, r3, #2
 8014c90:	2102      	movs	r1, #2
 8014c92:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014c94:	e00c      	b.n	8014cb0 <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8014c96:	687a      	ldr	r2, [r7, #4]
 8014c98:	23a7      	movs	r3, #167	@ 0xa7
 8014c9a:	009b      	lsls	r3, r3, #2
 8014c9c:	2101      	movs	r1, #1
 8014c9e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8014ca0:	e006      	b.n	8014cb0 <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8014ca2:	683a      	ldr	r2, [r7, #0]
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	0011      	movs	r1, r2
 8014ca8:	0018      	movs	r0, r3
 8014caa:	f000 f994 	bl	8014fd6 <USBD_CtlError>
  }
}
 8014cae:	46c0      	nop			@ (mov r8, r8)
 8014cb0:	46c0      	nop			@ (mov r8, r8)
 8014cb2:	46bd      	mov	sp, r7
 8014cb4:	b005      	add	sp, #20
 8014cb6:	bd90      	pop	{r4, r7, pc}
 8014cb8:	0000029e 	.word	0x0000029e

08014cbc <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014cbc:	b580      	push	{r7, lr}
 8014cbe:	b082      	sub	sp, #8
 8014cc0:	af00      	add	r7, sp, #0
 8014cc2:	6078      	str	r0, [r7, #4]
 8014cc4:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8014cc6:	683b      	ldr	r3, [r7, #0]
 8014cc8:	885b      	ldrh	r3, [r3, #2]
 8014cca:	b2da      	uxtb	r2, r3
 8014ccc:	4b4c      	ldr	r3, [pc, #304]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014cce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8014cd0:	4b4b      	ldr	r3, [pc, #300]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014cd2:	781b      	ldrb	r3, [r3, #0]
 8014cd4:	2b01      	cmp	r3, #1
 8014cd6:	d906      	bls.n	8014ce6 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8014cd8:	683a      	ldr	r2, [r7, #0]
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	0011      	movs	r1, r2
 8014cde:	0018      	movs	r0, r3
 8014ce0:	f000 f979 	bl	8014fd6 <USBD_CtlError>
 8014ce4:	e088      	b.n	8014df8 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8014ce6:	687a      	ldr	r2, [r7, #4]
 8014ce8:	23a7      	movs	r3, #167	@ 0xa7
 8014cea:	009b      	lsls	r3, r3, #2
 8014cec:	5cd3      	ldrb	r3, [r2, r3]
 8014cee:	2b02      	cmp	r3, #2
 8014cf0:	d002      	beq.n	8014cf8 <USBD_SetConfig+0x3c>
 8014cf2:	2b03      	cmp	r3, #3
 8014cf4:	d029      	beq.n	8014d4a <USBD_SetConfig+0x8e>
 8014cf6:	e071      	b.n	8014ddc <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8014cf8:	4b41      	ldr	r3, [pc, #260]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014cfa:	781b      	ldrb	r3, [r3, #0]
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d01f      	beq.n	8014d40 <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8014d00:	4b3f      	ldr	r3, [pc, #252]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014d02:	781b      	ldrb	r3, [r3, #0]
 8014d04:	001a      	movs	r2, r3
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8014d0a:	687a      	ldr	r2, [r7, #4]
 8014d0c:	23a7      	movs	r3, #167	@ 0xa7
 8014d0e:	009b      	lsls	r3, r3, #2
 8014d10:	2103      	movs	r1, #3
 8014d12:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014d14:	4b3a      	ldr	r3, [pc, #232]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014d16:	781a      	ldrb	r2, [r3, #0]
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	0011      	movs	r1, r2
 8014d1c:	0018      	movs	r0, r3
 8014d1e:	f7ff f8c5 	bl	8013eac <USBD_SetClassConfig>
 8014d22:	0003      	movs	r3, r0
 8014d24:	2b02      	cmp	r3, #2
 8014d26:	d106      	bne.n	8014d36 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8014d28:	683a      	ldr	r2, [r7, #0]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	0011      	movs	r1, r2
 8014d2e:	0018      	movs	r0, r3
 8014d30:	f000 f951 	bl	8014fd6 <USBD_CtlError>
            return;
 8014d34:	e060      	b.n	8014df8 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	0018      	movs	r0, r3
 8014d3a:	f000 fa34 	bl	80151a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014d3e:	e05b      	b.n	8014df8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014d40:	687b      	ldr	r3, [r7, #4]
 8014d42:	0018      	movs	r0, r3
 8014d44:	f000 fa2f 	bl	80151a6 <USBD_CtlSendStatus>
        break;
 8014d48:	e056      	b.n	8014df8 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8014d4a:	4b2d      	ldr	r3, [pc, #180]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014d4c:	781b      	ldrb	r3, [r3, #0]
 8014d4e:	2b00      	cmp	r3, #0
 8014d50:	d115      	bne.n	8014d7e <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8014d52:	687a      	ldr	r2, [r7, #4]
 8014d54:	23a7      	movs	r3, #167	@ 0xa7
 8014d56:	009b      	lsls	r3, r3, #2
 8014d58:	2102      	movs	r1, #2
 8014d5a:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8014d5c:	4b28      	ldr	r3, [pc, #160]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014d5e:	781b      	ldrb	r3, [r3, #0]
 8014d60:	001a      	movs	r2, r3
 8014d62:	687b      	ldr	r3, [r7, #4]
 8014d64:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8014d66:	4b26      	ldr	r3, [pc, #152]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014d68:	781a      	ldrb	r2, [r3, #0]
 8014d6a:	687b      	ldr	r3, [r7, #4]
 8014d6c:	0011      	movs	r1, r2
 8014d6e:	0018      	movs	r0, r3
 8014d70:	f7ff f8c3 	bl	8013efa <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	0018      	movs	r0, r3
 8014d78:	f000 fa15 	bl	80151a6 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8014d7c:	e03c      	b.n	8014df8 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8014d7e:	4b20      	ldr	r3, [pc, #128]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014d80:	781b      	ldrb	r3, [r3, #0]
 8014d82:	001a      	movs	r2, r3
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	685b      	ldr	r3, [r3, #4]
 8014d88:	429a      	cmp	r2, r3
 8014d8a:	d022      	beq.n	8014dd2 <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	685b      	ldr	r3, [r3, #4]
 8014d90:	b2da      	uxtb	r2, r3
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	0011      	movs	r1, r2
 8014d96:	0018      	movs	r0, r3
 8014d98:	f7ff f8af 	bl	8013efa <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8014d9c:	4b18      	ldr	r3, [pc, #96]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014d9e:	781b      	ldrb	r3, [r3, #0]
 8014da0:	001a      	movs	r2, r3
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8014da6:	4b16      	ldr	r3, [pc, #88]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014da8:	781a      	ldrb	r2, [r3, #0]
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	0011      	movs	r1, r2
 8014dae:	0018      	movs	r0, r3
 8014db0:	f7ff f87c 	bl	8013eac <USBD_SetClassConfig>
 8014db4:	0003      	movs	r3, r0
 8014db6:	2b02      	cmp	r3, #2
 8014db8:	d106      	bne.n	8014dc8 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8014dba:	683a      	ldr	r2, [r7, #0]
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	0011      	movs	r1, r2
 8014dc0:	0018      	movs	r0, r3
 8014dc2:	f000 f908 	bl	8014fd6 <USBD_CtlError>
            return;
 8014dc6:	e017      	b.n	8014df8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	0018      	movs	r0, r3
 8014dcc:	f000 f9eb 	bl	80151a6 <USBD_CtlSendStatus>
        break;
 8014dd0:	e012      	b.n	8014df8 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	0018      	movs	r0, r3
 8014dd6:	f000 f9e6 	bl	80151a6 <USBD_CtlSendStatus>
        break;
 8014dda:	e00d      	b.n	8014df8 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8014ddc:	683a      	ldr	r2, [r7, #0]
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	0011      	movs	r1, r2
 8014de2:	0018      	movs	r0, r3
 8014de4:	f000 f8f7 	bl	8014fd6 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8014de8:	4b05      	ldr	r3, [pc, #20]	@ (8014e00 <USBD_SetConfig+0x144>)
 8014dea:	781a      	ldrb	r2, [r3, #0]
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	0011      	movs	r1, r2
 8014df0:	0018      	movs	r0, r3
 8014df2:	f7ff f882 	bl	8013efa <USBD_ClrClassConfig>
        break;
 8014df6:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8014df8:	46bd      	mov	sp, r7
 8014dfa:	b002      	add	sp, #8
 8014dfc:	bd80      	pop	{r7, pc}
 8014dfe:	46c0      	nop			@ (mov r8, r8)
 8014e00:	200026b8 	.word	0x200026b8

08014e04 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e04:	b580      	push	{r7, lr}
 8014e06:	b082      	sub	sp, #8
 8014e08:	af00      	add	r7, sp, #0
 8014e0a:	6078      	str	r0, [r7, #4]
 8014e0c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8014e0e:	683b      	ldr	r3, [r7, #0]
 8014e10:	88db      	ldrh	r3, [r3, #6]
 8014e12:	2b01      	cmp	r3, #1
 8014e14:	d006      	beq.n	8014e24 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8014e16:	683a      	ldr	r2, [r7, #0]
 8014e18:	687b      	ldr	r3, [r7, #4]
 8014e1a:	0011      	movs	r1, r2
 8014e1c:	0018      	movs	r0, r3
 8014e1e:	f000 f8da 	bl	8014fd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8014e22:	e026      	b.n	8014e72 <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8014e24:	687a      	ldr	r2, [r7, #4]
 8014e26:	23a7      	movs	r3, #167	@ 0xa7
 8014e28:	009b      	lsls	r3, r3, #2
 8014e2a:	5cd3      	ldrb	r3, [r2, r3]
 8014e2c:	2b02      	cmp	r3, #2
 8014e2e:	dc02      	bgt.n	8014e36 <USBD_GetConfig+0x32>
 8014e30:	2b00      	cmp	r3, #0
 8014e32:	dc03      	bgt.n	8014e3c <USBD_GetConfig+0x38>
 8014e34:	e016      	b.n	8014e64 <USBD_GetConfig+0x60>
 8014e36:	2b03      	cmp	r3, #3
 8014e38:	d00c      	beq.n	8014e54 <USBD_GetConfig+0x50>
 8014e3a:	e013      	b.n	8014e64 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8014e3c:	687b      	ldr	r3, [r7, #4]
 8014e3e:	2200      	movs	r2, #0
 8014e40:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	3308      	adds	r3, #8
 8014e46:	0019      	movs	r1, r3
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	2201      	movs	r2, #1
 8014e4c:	0018      	movs	r0, r3
 8014e4e:	f000 f940 	bl	80150d2 <USBD_CtlSendData>
        break;
 8014e52:	e00e      	b.n	8014e72 <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8014e54:	687b      	ldr	r3, [r7, #4]
 8014e56:	1d19      	adds	r1, r3, #4
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2201      	movs	r2, #1
 8014e5c:	0018      	movs	r0, r3
 8014e5e:	f000 f938 	bl	80150d2 <USBD_CtlSendData>
        break;
 8014e62:	e006      	b.n	8014e72 <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8014e64:	683a      	ldr	r2, [r7, #0]
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	0011      	movs	r1, r2
 8014e6a:	0018      	movs	r0, r3
 8014e6c:	f000 f8b3 	bl	8014fd6 <USBD_CtlError>
        break;
 8014e70:	46c0      	nop			@ (mov r8, r8)
}
 8014e72:	46c0      	nop			@ (mov r8, r8)
 8014e74:	46bd      	mov	sp, r7
 8014e76:	b002      	add	sp, #8
 8014e78:	bd80      	pop	{r7, pc}

08014e7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8014e7a:	b580      	push	{r7, lr}
 8014e7c:	b082      	sub	sp, #8
 8014e7e:	af00      	add	r7, sp, #0
 8014e80:	6078      	str	r0, [r7, #4]
 8014e82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014e84:	687a      	ldr	r2, [r7, #4]
 8014e86:	23a7      	movs	r3, #167	@ 0xa7
 8014e88:	009b      	lsls	r3, r3, #2
 8014e8a:	5cd3      	ldrb	r3, [r2, r3]
 8014e8c:	3b01      	subs	r3, #1
 8014e8e:	2b02      	cmp	r3, #2
 8014e90:	d822      	bhi.n	8014ed8 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8014e92:	683b      	ldr	r3, [r7, #0]
 8014e94:	88db      	ldrh	r3, [r3, #6]
 8014e96:	2b02      	cmp	r3, #2
 8014e98:	d006      	beq.n	8014ea8 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8014e9a:	683a      	ldr	r2, [r7, #0]
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	0011      	movs	r1, r2
 8014ea0:	0018      	movs	r0, r3
 8014ea2:	f000 f898 	bl	8014fd6 <USBD_CtlError>
        break;
 8014ea6:	e01e      	b.n	8014ee6 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	2201      	movs	r2, #1
 8014eac:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8014eae:	687a      	ldr	r2, [r7, #4]
 8014eb0:	23a9      	movs	r3, #169	@ 0xa9
 8014eb2:	009b      	lsls	r3, r3, #2
 8014eb4:	58d3      	ldr	r3, [r2, r3]
 8014eb6:	2b00      	cmp	r3, #0
 8014eb8:	d005      	beq.n	8014ec6 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8014eba:	687b      	ldr	r3, [r7, #4]
 8014ebc:	68db      	ldr	r3, [r3, #12]
 8014ebe:	2202      	movs	r2, #2
 8014ec0:	431a      	orrs	r2, r3
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	330c      	adds	r3, #12
 8014eca:	0019      	movs	r1, r3
 8014ecc:	687b      	ldr	r3, [r7, #4]
 8014ece:	2202      	movs	r2, #2
 8014ed0:	0018      	movs	r0, r3
 8014ed2:	f000 f8fe 	bl	80150d2 <USBD_CtlSendData>
      break;
 8014ed6:	e006      	b.n	8014ee6 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8014ed8:	683a      	ldr	r2, [r7, #0]
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	0011      	movs	r1, r2
 8014ede:	0018      	movs	r0, r3
 8014ee0:	f000 f879 	bl	8014fd6 <USBD_CtlError>
      break;
 8014ee4:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014ee6:	46c0      	nop			@ (mov r8, r8)
 8014ee8:	46bd      	mov	sp, r7
 8014eea:	b002      	add	sp, #8
 8014eec:	bd80      	pop	{r7, pc}

08014eee <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014eee:	b580      	push	{r7, lr}
 8014ef0:	b082      	sub	sp, #8
 8014ef2:	af00      	add	r7, sp, #0
 8014ef4:	6078      	str	r0, [r7, #4]
 8014ef6:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	885b      	ldrh	r3, [r3, #2]
 8014efc:	2b01      	cmp	r3, #1
 8014efe:	d108      	bne.n	8014f12 <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8014f00:	687a      	ldr	r2, [r7, #4]
 8014f02:	23a9      	movs	r3, #169	@ 0xa9
 8014f04:	009b      	lsls	r3, r3, #2
 8014f06:	2101      	movs	r1, #1
 8014f08:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8014f0a:	687b      	ldr	r3, [r7, #4]
 8014f0c:	0018      	movs	r0, r3
 8014f0e:	f000 f94a 	bl	80151a6 <USBD_CtlSendStatus>
  }
}
 8014f12:	46c0      	nop			@ (mov r8, r8)
 8014f14:	46bd      	mov	sp, r7
 8014f16:	b002      	add	sp, #8
 8014f18:	bd80      	pop	{r7, pc}

08014f1a <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8014f1a:	b580      	push	{r7, lr}
 8014f1c:	b082      	sub	sp, #8
 8014f1e:	af00      	add	r7, sp, #0
 8014f20:	6078      	str	r0, [r7, #4]
 8014f22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8014f24:	687a      	ldr	r2, [r7, #4]
 8014f26:	23a7      	movs	r3, #167	@ 0xa7
 8014f28:	009b      	lsls	r3, r3, #2
 8014f2a:	5cd3      	ldrb	r3, [r2, r3]
 8014f2c:	3b01      	subs	r3, #1
 8014f2e:	2b02      	cmp	r3, #2
 8014f30:	d80d      	bhi.n	8014f4e <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8014f32:	683b      	ldr	r3, [r7, #0]
 8014f34:	885b      	ldrh	r3, [r3, #2]
 8014f36:	2b01      	cmp	r3, #1
 8014f38:	d110      	bne.n	8014f5c <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8014f3a:	687a      	ldr	r2, [r7, #4]
 8014f3c:	23a9      	movs	r3, #169	@ 0xa9
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	2100      	movs	r1, #0
 8014f42:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8014f44:	687b      	ldr	r3, [r7, #4]
 8014f46:	0018      	movs	r0, r3
 8014f48:	f000 f92d 	bl	80151a6 <USBD_CtlSendStatus>
      }
      break;
 8014f4c:	e006      	b.n	8014f5c <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8014f4e:	683a      	ldr	r2, [r7, #0]
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	0011      	movs	r1, r2
 8014f54:	0018      	movs	r0, r3
 8014f56:	f000 f83e 	bl	8014fd6 <USBD_CtlError>
      break;
 8014f5a:	e000      	b.n	8014f5e <USBD_ClrFeature+0x44>
      break;
 8014f5c:	46c0      	nop			@ (mov r8, r8)
  }
}
 8014f5e:	46c0      	nop			@ (mov r8, r8)
 8014f60:	46bd      	mov	sp, r7
 8014f62:	b002      	add	sp, #8
 8014f64:	bd80      	pop	{r7, pc}

08014f66 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8014f66:	b580      	push	{r7, lr}
 8014f68:	b082      	sub	sp, #8
 8014f6a:	af00      	add	r7, sp, #0
 8014f6c:	6078      	str	r0, [r7, #4]
 8014f6e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8014f70:	683b      	ldr	r3, [r7, #0]
 8014f72:	781a      	ldrb	r2, [r3, #0]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8014f78:	683b      	ldr	r3, [r7, #0]
 8014f7a:	785a      	ldrb	r2, [r3, #1]
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8014f80:	683b      	ldr	r3, [r7, #0]
 8014f82:	3302      	adds	r3, #2
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	001a      	movs	r2, r3
 8014f88:	683b      	ldr	r3, [r7, #0]
 8014f8a:	3303      	adds	r3, #3
 8014f8c:	781b      	ldrb	r3, [r3, #0]
 8014f8e:	021b      	lsls	r3, r3, #8
 8014f90:	b29b      	uxth	r3, r3
 8014f92:	18d3      	adds	r3, r2, r3
 8014f94:	b29a      	uxth	r2, r3
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8014f9a:	683b      	ldr	r3, [r7, #0]
 8014f9c:	3304      	adds	r3, #4
 8014f9e:	781b      	ldrb	r3, [r3, #0]
 8014fa0:	001a      	movs	r2, r3
 8014fa2:	683b      	ldr	r3, [r7, #0]
 8014fa4:	3305      	adds	r3, #5
 8014fa6:	781b      	ldrb	r3, [r3, #0]
 8014fa8:	021b      	lsls	r3, r3, #8
 8014faa:	b29b      	uxth	r3, r3
 8014fac:	18d3      	adds	r3, r2, r3
 8014fae:	b29a      	uxth	r2, r3
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8014fb4:	683b      	ldr	r3, [r7, #0]
 8014fb6:	3306      	adds	r3, #6
 8014fb8:	781b      	ldrb	r3, [r3, #0]
 8014fba:	001a      	movs	r2, r3
 8014fbc:	683b      	ldr	r3, [r7, #0]
 8014fbe:	3307      	adds	r3, #7
 8014fc0:	781b      	ldrb	r3, [r3, #0]
 8014fc2:	021b      	lsls	r3, r3, #8
 8014fc4:	b29b      	uxth	r3, r3
 8014fc6:	18d3      	adds	r3, r2, r3
 8014fc8:	b29a      	uxth	r2, r3
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	80da      	strh	r2, [r3, #6]

}
 8014fce:	46c0      	nop			@ (mov r8, r8)
 8014fd0:	46bd      	mov	sp, r7
 8014fd2:	b002      	add	sp, #8
 8014fd4:	bd80      	pop	{r7, pc}

08014fd6 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8014fd6:	b580      	push	{r7, lr}
 8014fd8:	b082      	sub	sp, #8
 8014fda:	af00      	add	r7, sp, #0
 8014fdc:	6078      	str	r0, [r7, #4]
 8014fde:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	2180      	movs	r1, #128	@ 0x80
 8014fe4:	0018      	movs	r0, r3
 8014fe6:	f000 fc86 	bl	80158f6 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	2100      	movs	r1, #0
 8014fee:	0018      	movs	r0, r3
 8014ff0:	f000 fc81 	bl	80158f6 <USBD_LL_StallEP>
}
 8014ff4:	46c0      	nop			@ (mov r8, r8)
 8014ff6:	46bd      	mov	sp, r7
 8014ff8:	b002      	add	sp, #8
 8014ffa:	bd80      	pop	{r7, pc}

08014ffc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8014ffc:	b590      	push	{r4, r7, lr}
 8014ffe:	b087      	sub	sp, #28
 8015000:	af00      	add	r7, sp, #0
 8015002:	60f8      	str	r0, [r7, #12]
 8015004:	60b9      	str	r1, [r7, #8]
 8015006:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8015008:	2417      	movs	r4, #23
 801500a:	193b      	adds	r3, r7, r4
 801500c:	2200      	movs	r2, #0
 801500e:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	2b00      	cmp	r3, #0
 8015014:	d03c      	beq.n	8015090 <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8015016:	68fb      	ldr	r3, [r7, #12]
 8015018:	0018      	movs	r0, r3
 801501a:	f000 f83d 	bl	8015098 <USBD_GetLen>
 801501e:	0003      	movs	r3, r0
 8015020:	3301      	adds	r3, #1
 8015022:	b29b      	uxth	r3, r3
 8015024:	18db      	adds	r3, r3, r3
 8015026:	b29a      	uxth	r2, r3
 8015028:	687b      	ldr	r3, [r7, #4]
 801502a:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 801502c:	193b      	adds	r3, r7, r4
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	193a      	adds	r2, r7, r4
 8015032:	1c59      	adds	r1, r3, #1
 8015034:	7011      	strb	r1, [r2, #0]
 8015036:	001a      	movs	r2, r3
 8015038:	68bb      	ldr	r3, [r7, #8]
 801503a:	189b      	adds	r3, r3, r2
 801503c:	687a      	ldr	r2, [r7, #4]
 801503e:	7812      	ldrb	r2, [r2, #0]
 8015040:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8015042:	193b      	adds	r3, r7, r4
 8015044:	781b      	ldrb	r3, [r3, #0]
 8015046:	193a      	adds	r2, r7, r4
 8015048:	1c59      	adds	r1, r3, #1
 801504a:	7011      	strb	r1, [r2, #0]
 801504c:	001a      	movs	r2, r3
 801504e:	68bb      	ldr	r3, [r7, #8]
 8015050:	189b      	adds	r3, r3, r2
 8015052:	2203      	movs	r2, #3
 8015054:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8015056:	e017      	b.n	8015088 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8015058:	68fb      	ldr	r3, [r7, #12]
 801505a:	1c5a      	adds	r2, r3, #1
 801505c:	60fa      	str	r2, [r7, #12]
 801505e:	2417      	movs	r4, #23
 8015060:	193a      	adds	r2, r7, r4
 8015062:	7812      	ldrb	r2, [r2, #0]
 8015064:	1939      	adds	r1, r7, r4
 8015066:	1c50      	adds	r0, r2, #1
 8015068:	7008      	strb	r0, [r1, #0]
 801506a:	0011      	movs	r1, r2
 801506c:	68ba      	ldr	r2, [r7, #8]
 801506e:	1852      	adds	r2, r2, r1
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8015074:	193b      	adds	r3, r7, r4
 8015076:	781b      	ldrb	r3, [r3, #0]
 8015078:	193a      	adds	r2, r7, r4
 801507a:	1c59      	adds	r1, r3, #1
 801507c:	7011      	strb	r1, [r2, #0]
 801507e:	001a      	movs	r2, r3
 8015080:	68bb      	ldr	r3, [r7, #8]
 8015082:	189b      	adds	r3, r3, r2
 8015084:	2200      	movs	r2, #0
 8015086:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	781b      	ldrb	r3, [r3, #0]
 801508c:	2b00      	cmp	r3, #0
 801508e:	d1e3      	bne.n	8015058 <USBD_GetString+0x5c>
    }
  }
}
 8015090:	46c0      	nop			@ (mov r8, r8)
 8015092:	46bd      	mov	sp, r7
 8015094:	b007      	add	sp, #28
 8015096:	bd90      	pop	{r4, r7, pc}

08015098 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8015098:	b580      	push	{r7, lr}
 801509a:	b084      	sub	sp, #16
 801509c:	af00      	add	r7, sp, #0
 801509e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80150a0:	230f      	movs	r3, #15
 80150a2:	18fb      	adds	r3, r7, r3
 80150a4:	2200      	movs	r2, #0
 80150a6:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 80150a8:	e008      	b.n	80150bc <USBD_GetLen+0x24>
  {
    len++;
 80150aa:	210f      	movs	r1, #15
 80150ac:	187b      	adds	r3, r7, r1
 80150ae:	781a      	ldrb	r2, [r3, #0]
 80150b0:	187b      	adds	r3, r7, r1
 80150b2:	3201      	adds	r2, #1
 80150b4:	701a      	strb	r2, [r3, #0]
    buf++;
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	3301      	adds	r3, #1
 80150ba:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	781b      	ldrb	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d1f2      	bne.n	80150aa <USBD_GetLen+0x12>
  }

  return len;
 80150c4:	230f      	movs	r3, #15
 80150c6:	18fb      	adds	r3, r7, r3
 80150c8:	781b      	ldrb	r3, [r3, #0]
}
 80150ca:	0018      	movs	r0, r3
 80150cc:	46bd      	mov	sp, r7
 80150ce:	b004      	add	sp, #16
 80150d0:	bd80      	pop	{r7, pc}

080150d2 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 80150d2:	b580      	push	{r7, lr}
 80150d4:	b084      	sub	sp, #16
 80150d6:	af00      	add	r7, sp, #0
 80150d8:	60f8      	str	r0, [r7, #12]
 80150da:	60b9      	str	r1, [r7, #8]
 80150dc:	1dbb      	adds	r3, r7, #6
 80150de:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80150e0:	68fa      	ldr	r2, [r7, #12]
 80150e2:	23a5      	movs	r3, #165	@ 0xa5
 80150e4:	009b      	lsls	r3, r3, #2
 80150e6:	2102      	movs	r1, #2
 80150e8:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 80150ea:	1dbb      	adds	r3, r7, #6
 80150ec:	881a      	ldrh	r2, [r3, #0]
 80150ee:	68fb      	ldr	r3, [r7, #12]
 80150f0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 80150f2:	1dbb      	adds	r3, r7, #6
 80150f4:	881a      	ldrh	r2, [r3, #0]
 80150f6:	68fb      	ldr	r3, [r7, #12]
 80150f8:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80150fa:	1dbb      	adds	r3, r7, #6
 80150fc:	881b      	ldrh	r3, [r3, #0]
 80150fe:	68ba      	ldr	r2, [r7, #8]
 8015100:	68f8      	ldr	r0, [r7, #12]
 8015102:	2100      	movs	r1, #0
 8015104:	f000 fca9 	bl	8015a5a <USBD_LL_Transmit>

  return USBD_OK;
 8015108:	2300      	movs	r3, #0
}
 801510a:	0018      	movs	r0, r3
 801510c:	46bd      	mov	sp, r7
 801510e:	b004      	add	sp, #16
 8015110:	bd80      	pop	{r7, pc}

08015112 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8015112:	b580      	push	{r7, lr}
 8015114:	b084      	sub	sp, #16
 8015116:	af00      	add	r7, sp, #0
 8015118:	60f8      	str	r0, [r7, #12]
 801511a:	60b9      	str	r1, [r7, #8]
 801511c:	1dbb      	adds	r3, r7, #6
 801511e:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8015120:	1dbb      	adds	r3, r7, #6
 8015122:	881b      	ldrh	r3, [r3, #0]
 8015124:	68ba      	ldr	r2, [r7, #8]
 8015126:	68f8      	ldr	r0, [r7, #12]
 8015128:	2100      	movs	r1, #0
 801512a:	f000 fc96 	bl	8015a5a <USBD_LL_Transmit>

  return USBD_OK;
 801512e:	2300      	movs	r3, #0
}
 8015130:	0018      	movs	r0, r3
 8015132:	46bd      	mov	sp, r7
 8015134:	b004      	add	sp, #16
 8015136:	bd80      	pop	{r7, pc}

08015138 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8015138:	b580      	push	{r7, lr}
 801513a:	b084      	sub	sp, #16
 801513c:	af00      	add	r7, sp, #0
 801513e:	60f8      	str	r0, [r7, #12]
 8015140:	60b9      	str	r1, [r7, #8]
 8015142:	1dbb      	adds	r3, r7, #6
 8015144:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8015146:	68fa      	ldr	r2, [r7, #12]
 8015148:	23a5      	movs	r3, #165	@ 0xa5
 801514a:	009b      	lsls	r3, r3, #2
 801514c:	2103      	movs	r1, #3
 801514e:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 8015150:	1dbb      	adds	r3, r7, #6
 8015152:	8819      	ldrh	r1, [r3, #0]
 8015154:	68fa      	ldr	r2, [r7, #12]
 8015156:	23ae      	movs	r3, #174	@ 0xae
 8015158:	005b      	lsls	r3, r3, #1
 801515a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 801515c:	1dbb      	adds	r3, r7, #6
 801515e:	8819      	ldrh	r1, [r3, #0]
 8015160:	68fa      	ldr	r2, [r7, #12]
 8015162:	23b0      	movs	r3, #176	@ 0xb0
 8015164:	005b      	lsls	r3, r3, #1
 8015166:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8015168:	1dbb      	adds	r3, r7, #6
 801516a:	881b      	ldrh	r3, [r3, #0]
 801516c:	68ba      	ldr	r2, [r7, #8]
 801516e:	68f8      	ldr	r0, [r7, #12]
 8015170:	2100      	movs	r1, #0
 8015172:	f000 fca9 	bl	8015ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8015176:	2300      	movs	r3, #0
}
 8015178:	0018      	movs	r0, r3
 801517a:	46bd      	mov	sp, r7
 801517c:	b004      	add	sp, #16
 801517e:	bd80      	pop	{r7, pc}

08015180 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8015180:	b580      	push	{r7, lr}
 8015182:	b084      	sub	sp, #16
 8015184:	af00      	add	r7, sp, #0
 8015186:	60f8      	str	r0, [r7, #12]
 8015188:	60b9      	str	r1, [r7, #8]
 801518a:	1dbb      	adds	r3, r7, #6
 801518c:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801518e:	1dbb      	adds	r3, r7, #6
 8015190:	881b      	ldrh	r3, [r3, #0]
 8015192:	68ba      	ldr	r2, [r7, #8]
 8015194:	68f8      	ldr	r0, [r7, #12]
 8015196:	2100      	movs	r1, #0
 8015198:	f000 fc96 	bl	8015ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 801519c:	2300      	movs	r3, #0
}
 801519e:	0018      	movs	r0, r3
 80151a0:	46bd      	mov	sp, r7
 80151a2:	b004      	add	sp, #16
 80151a4:	bd80      	pop	{r7, pc}

080151a6 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80151a6:	b580      	push	{r7, lr}
 80151a8:	b082      	sub	sp, #8
 80151aa:	af00      	add	r7, sp, #0
 80151ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80151ae:	687a      	ldr	r2, [r7, #4]
 80151b0:	23a5      	movs	r3, #165	@ 0xa5
 80151b2:	009b      	lsls	r3, r3, #2
 80151b4:	2104      	movs	r1, #4
 80151b6:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80151b8:	6878      	ldr	r0, [r7, #4]
 80151ba:	2300      	movs	r3, #0
 80151bc:	2200      	movs	r2, #0
 80151be:	2100      	movs	r1, #0
 80151c0:	f000 fc4b 	bl	8015a5a <USBD_LL_Transmit>

  return USBD_OK;
 80151c4:	2300      	movs	r3, #0
}
 80151c6:	0018      	movs	r0, r3
 80151c8:	46bd      	mov	sp, r7
 80151ca:	b002      	add	sp, #8
 80151cc:	bd80      	pop	{r7, pc}

080151ce <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80151ce:	b580      	push	{r7, lr}
 80151d0:	b082      	sub	sp, #8
 80151d2:	af00      	add	r7, sp, #0
 80151d4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80151d6:	687a      	ldr	r2, [r7, #4]
 80151d8:	23a5      	movs	r3, #165	@ 0xa5
 80151da:	009b      	lsls	r3, r3, #2
 80151dc:	2105      	movs	r1, #5
 80151de:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80151e0:	6878      	ldr	r0, [r7, #4]
 80151e2:	2300      	movs	r3, #0
 80151e4:	2200      	movs	r2, #0
 80151e6:	2100      	movs	r1, #0
 80151e8:	f000 fc6e 	bl	8015ac8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80151ec:	2300      	movs	r3, #0
}
 80151ee:	0018      	movs	r0, r3
 80151f0:	46bd      	mov	sp, r7
 80151f2:	b002      	add	sp, #8
 80151f4:	bd80      	pop	{r7, pc}
	...

080151f8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80151f8:	b580      	push	{r7, lr}
 80151fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80151fc:	4914      	ldr	r1, [pc, #80]	@ (8015250 <MX_USB_DEVICE_Init+0x58>)
 80151fe:	4b15      	ldr	r3, [pc, #84]	@ (8015254 <MX_USB_DEVICE_Init+0x5c>)
 8015200:	2200      	movs	r2, #0
 8015202:	0018      	movs	r0, r3
 8015204:	f7fe fdeb 	bl	8013dde <USBD_Init>
 8015208:	1e03      	subs	r3, r0, #0
 801520a:	d001      	beq.n	8015210 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 801520c:	f7f0 fc90 	bl	8005b30 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8015210:	4a11      	ldr	r2, [pc, #68]	@ (8015258 <MX_USB_DEVICE_Init+0x60>)
 8015212:	4b10      	ldr	r3, [pc, #64]	@ (8015254 <MX_USB_DEVICE_Init+0x5c>)
 8015214:	0011      	movs	r1, r2
 8015216:	0018      	movs	r0, r3
 8015218:	f7fe fe12 	bl	8013e40 <USBD_RegisterClass>
 801521c:	1e03      	subs	r3, r0, #0
 801521e:	d001      	beq.n	8015224 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 8015220:	f7f0 fc86 	bl	8005b30 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8015224:	4a0d      	ldr	r2, [pc, #52]	@ (801525c <MX_USB_DEVICE_Init+0x64>)
 8015226:	4b0b      	ldr	r3, [pc, #44]	@ (8015254 <MX_USB_DEVICE_Init+0x5c>)
 8015228:	0011      	movs	r1, r2
 801522a:	0018      	movs	r0, r3
 801522c:	f7fe fd5e 	bl	8013cec <USBD_CDC_RegisterInterface>
 8015230:	1e03      	subs	r3, r0, #0
 8015232:	d001      	beq.n	8015238 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8015234:	f7f0 fc7c 	bl	8005b30 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8015238:	4b06      	ldr	r3, [pc, #24]	@ (8015254 <MX_USB_DEVICE_Init+0x5c>)
 801523a:	0018      	movs	r0, r3
 801523c:	f7fe fe20 	bl	8013e80 <USBD_Start>
 8015240:	1e03      	subs	r3, r0, #0
 8015242:	d001      	beq.n	8015248 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8015244:	f7f0 fc74 	bl	8005b30 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8015248:	46c0      	nop			@ (mov r8, r8)
 801524a:	46bd      	mov	sp, r7
 801524c:	bd80      	pop	{r7, pc}
 801524e:	46c0      	nop			@ (mov r8, r8)
 8015250:	20000280 	.word	0x20000280
 8015254:	200026bc 	.word	0x200026bc
 8015258:	2000016c 	.word	0x2000016c
 801525c:	20000270 	.word	0x20000270

08015260 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8015260:	b580      	push	{r7, lr}
 8015262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8015264:	4907      	ldr	r1, [pc, #28]	@ (8015284 <CDC_Init_FS+0x24>)
 8015266:	4b08      	ldr	r3, [pc, #32]	@ (8015288 <CDC_Init_FS+0x28>)
 8015268:	2200      	movs	r2, #0
 801526a:	0018      	movs	r0, r3
 801526c:	f7fe fd59 	bl	8013d22 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8015270:	4a06      	ldr	r2, [pc, #24]	@ (801528c <CDC_Init_FS+0x2c>)
 8015272:	4b05      	ldr	r3, [pc, #20]	@ (8015288 <CDC_Init_FS+0x28>)
 8015274:	0011      	movs	r1, r2
 8015276:	0018      	movs	r0, r3
 8015278:	f7fe fd6f 	bl	8013d5a <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 801527c:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801527e:	0018      	movs	r0, r3
 8015280:	46bd      	mov	sp, r7
 8015282:	bd80      	pop	{r7, pc}
 8015284:	20002d80 	.word	0x20002d80
 8015288:	200026bc 	.word	0x200026bc
 801528c:	20002980 	.word	0x20002980

08015290 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8015290:	b580      	push	{r7, lr}
 8015292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8015294:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8015296:	0018      	movs	r0, r3
 8015298:	46bd      	mov	sp, r7
 801529a:	bd80      	pop	{r7, pc}

0801529c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 801529c:	b580      	push	{r7, lr}
 801529e:	b082      	sub	sp, #8
 80152a0:	af00      	add	r7, sp, #0
 80152a2:	6039      	str	r1, [r7, #0]
 80152a4:	0011      	movs	r1, r2
 80152a6:	1dfb      	adds	r3, r7, #7
 80152a8:	1c02      	adds	r2, r0, #0
 80152aa:	701a      	strb	r2, [r3, #0]
 80152ac:	1d3b      	adds	r3, r7, #4
 80152ae:	1c0a      	adds	r2, r1, #0
 80152b0:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80152b2:	1dfb      	adds	r3, r7, #7
 80152b4:	781b      	ldrb	r3, [r3, #0]
 80152b6:	2b23      	cmp	r3, #35	@ 0x23
 80152b8:	d804      	bhi.n	80152c4 <CDC_Control_FS+0x28>
 80152ba:	009a      	lsls	r2, r3, #2
 80152bc:	4b04      	ldr	r3, [pc, #16]	@ (80152d0 <CDC_Control_FS+0x34>)
 80152be:	18d3      	adds	r3, r2, r3
 80152c0:	681b      	ldr	r3, [r3, #0]
 80152c2:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80152c4:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80152c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80152c8:	0018      	movs	r0, r3
 80152ca:	46bd      	mov	sp, r7
 80152cc:	b002      	add	sp, #8
 80152ce:	bd80      	pop	{r7, pc}
 80152d0:	0801b530 	.word	0x0801b530

080152d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80152d4:	b580      	push	{r7, lr}
 80152d6:	b082      	sub	sp, #8
 80152d8:	af00      	add	r7, sp, #0
 80152da:	6078      	str	r0, [r7, #4]
 80152dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80152de:	687a      	ldr	r2, [r7, #4]
 80152e0:	4b06      	ldr	r3, [pc, #24]	@ (80152fc <CDC_Receive_FS+0x28>)
 80152e2:	0011      	movs	r1, r2
 80152e4:	0018      	movs	r0, r3
 80152e6:	f7fe fd38 	bl	8013d5a <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80152ea:	4b04      	ldr	r3, [pc, #16]	@ (80152fc <CDC_Receive_FS+0x28>)
 80152ec:	0018      	movs	r0, r3
 80152ee:	f7fe fd48 	bl	8013d82 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 80152f2:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80152f4:	0018      	movs	r0, r3
 80152f6:	46bd      	mov	sp, r7
 80152f8:	b002      	add	sp, #8
 80152fa:	bd80      	pop	{r7, pc}
 80152fc:	200026bc 	.word	0x200026bc

08015300 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015300:	b580      	push	{r7, lr}
 8015302:	b082      	sub	sp, #8
 8015304:	af00      	add	r7, sp, #0
 8015306:	0002      	movs	r2, r0
 8015308:	6039      	str	r1, [r7, #0]
 801530a:	1dfb      	adds	r3, r7, #7
 801530c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801530e:	683b      	ldr	r3, [r7, #0]
 8015310:	2212      	movs	r2, #18
 8015312:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8015314:	4b02      	ldr	r3, [pc, #8]	@ (8015320 <USBD_FS_DeviceDescriptor+0x20>)
}
 8015316:	0018      	movs	r0, r3
 8015318:	46bd      	mov	sp, r7
 801531a:	b002      	add	sp, #8
 801531c:	bd80      	pop	{r7, pc}
 801531e:	46c0      	nop			@ (mov r8, r8)
 8015320:	2000029c 	.word	0x2000029c

08015324 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015324:	b580      	push	{r7, lr}
 8015326:	b082      	sub	sp, #8
 8015328:	af00      	add	r7, sp, #0
 801532a:	0002      	movs	r2, r0
 801532c:	6039      	str	r1, [r7, #0]
 801532e:	1dfb      	adds	r3, r7, #7
 8015330:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8015332:	683b      	ldr	r3, [r7, #0]
 8015334:	2204      	movs	r2, #4
 8015336:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8015338:	4b02      	ldr	r3, [pc, #8]	@ (8015344 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 801533a:	0018      	movs	r0, r3
 801533c:	46bd      	mov	sp, r7
 801533e:	b002      	add	sp, #8
 8015340:	bd80      	pop	{r7, pc}
 8015342:	46c0      	nop			@ (mov r8, r8)
 8015344:	200002b0 	.word	0x200002b0

08015348 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015348:	b580      	push	{r7, lr}
 801534a:	b082      	sub	sp, #8
 801534c:	af00      	add	r7, sp, #0
 801534e:	0002      	movs	r2, r0
 8015350:	6039      	str	r1, [r7, #0]
 8015352:	1dfb      	adds	r3, r7, #7
 8015354:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015356:	1dfb      	adds	r3, r7, #7
 8015358:	781b      	ldrb	r3, [r3, #0]
 801535a:	2b00      	cmp	r3, #0
 801535c:	d106      	bne.n	801536c <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801535e:	683a      	ldr	r2, [r7, #0]
 8015360:	4908      	ldr	r1, [pc, #32]	@ (8015384 <USBD_FS_ProductStrDescriptor+0x3c>)
 8015362:	4b09      	ldr	r3, [pc, #36]	@ (8015388 <USBD_FS_ProductStrDescriptor+0x40>)
 8015364:	0018      	movs	r0, r3
 8015366:	f7ff fe49 	bl	8014ffc <USBD_GetString>
 801536a:	e005      	b.n	8015378 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801536c:	683a      	ldr	r2, [r7, #0]
 801536e:	4905      	ldr	r1, [pc, #20]	@ (8015384 <USBD_FS_ProductStrDescriptor+0x3c>)
 8015370:	4b05      	ldr	r3, [pc, #20]	@ (8015388 <USBD_FS_ProductStrDescriptor+0x40>)
 8015372:	0018      	movs	r0, r3
 8015374:	f7ff fe42 	bl	8014ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 8015378:	4b02      	ldr	r3, [pc, #8]	@ (8015384 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 801537a:	0018      	movs	r0, r3
 801537c:	46bd      	mov	sp, r7
 801537e:	b002      	add	sp, #8
 8015380:	bd80      	pop	{r7, pc}
 8015382:	46c0      	nop			@ (mov r8, r8)
 8015384:	20003180 	.word	0x20003180
 8015388:	0801b2c4 	.word	0x0801b2c4

0801538c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801538c:	b580      	push	{r7, lr}
 801538e:	b082      	sub	sp, #8
 8015390:	af00      	add	r7, sp, #0
 8015392:	0002      	movs	r2, r0
 8015394:	6039      	str	r1, [r7, #0]
 8015396:	1dfb      	adds	r3, r7, #7
 8015398:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 801539a:	683a      	ldr	r2, [r7, #0]
 801539c:	4904      	ldr	r1, [pc, #16]	@ (80153b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801539e:	4b05      	ldr	r3, [pc, #20]	@ (80153b4 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80153a0:	0018      	movs	r0, r3
 80153a2:	f7ff fe2b 	bl	8014ffc <USBD_GetString>
  return USBD_StrDesc;
 80153a6:	4b02      	ldr	r3, [pc, #8]	@ (80153b0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80153a8:	0018      	movs	r0, r3
 80153aa:	46bd      	mov	sp, r7
 80153ac:	b002      	add	sp, #8
 80153ae:	bd80      	pop	{r7, pc}
 80153b0:	20003180 	.word	0x20003180
 80153b4:	0801b2dc 	.word	0x0801b2dc

080153b8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153b8:	b580      	push	{r7, lr}
 80153ba:	b082      	sub	sp, #8
 80153bc:	af00      	add	r7, sp, #0
 80153be:	0002      	movs	r2, r0
 80153c0:	6039      	str	r1, [r7, #0]
 80153c2:	1dfb      	adds	r3, r7, #7
 80153c4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80153c6:	683b      	ldr	r3, [r7, #0]
 80153c8:	221a      	movs	r2, #26
 80153ca:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80153cc:	f000 f84c 	bl	8015468 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80153d0:	4b02      	ldr	r3, [pc, #8]	@ (80153dc <USBD_FS_SerialStrDescriptor+0x24>)
}
 80153d2:	0018      	movs	r0, r3
 80153d4:	46bd      	mov	sp, r7
 80153d6:	b002      	add	sp, #8
 80153d8:	bd80      	pop	{r7, pc}
 80153da:	46c0      	nop			@ (mov r8, r8)
 80153dc:	200002b4 	.word	0x200002b4

080153e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b082      	sub	sp, #8
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	0002      	movs	r2, r0
 80153e8:	6039      	str	r1, [r7, #0]
 80153ea:	1dfb      	adds	r3, r7, #7
 80153ec:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80153ee:	1dfb      	adds	r3, r7, #7
 80153f0:	781b      	ldrb	r3, [r3, #0]
 80153f2:	2b00      	cmp	r3, #0
 80153f4:	d106      	bne.n	8015404 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80153f6:	683a      	ldr	r2, [r7, #0]
 80153f8:	4908      	ldr	r1, [pc, #32]	@ (801541c <USBD_FS_ConfigStrDescriptor+0x3c>)
 80153fa:	4b09      	ldr	r3, [pc, #36]	@ (8015420 <USBD_FS_ConfigStrDescriptor+0x40>)
 80153fc:	0018      	movs	r0, r3
 80153fe:	f7ff fdfd 	bl	8014ffc <USBD_GetString>
 8015402:	e005      	b.n	8015410 <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8015404:	683a      	ldr	r2, [r7, #0]
 8015406:	4905      	ldr	r1, [pc, #20]	@ (801541c <USBD_FS_ConfigStrDescriptor+0x3c>)
 8015408:	4b05      	ldr	r3, [pc, #20]	@ (8015420 <USBD_FS_ConfigStrDescriptor+0x40>)
 801540a:	0018      	movs	r0, r3
 801540c:	f7ff fdf6 	bl	8014ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 8015410:	4b02      	ldr	r3, [pc, #8]	@ (801541c <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 8015412:	0018      	movs	r0, r3
 8015414:	46bd      	mov	sp, r7
 8015416:	b002      	add	sp, #8
 8015418:	bd80      	pop	{r7, pc}
 801541a:	46c0      	nop			@ (mov r8, r8)
 801541c:	20003180 	.word	0x20003180
 8015420:	0801b2f0 	.word	0x0801b2f0

08015424 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	0002      	movs	r2, r0
 801542c:	6039      	str	r1, [r7, #0]
 801542e:	1dfb      	adds	r3, r7, #7
 8015430:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8015432:	1dfb      	adds	r3, r7, #7
 8015434:	781b      	ldrb	r3, [r3, #0]
 8015436:	2b00      	cmp	r3, #0
 8015438:	d106      	bne.n	8015448 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801543a:	683a      	ldr	r2, [r7, #0]
 801543c:	4908      	ldr	r1, [pc, #32]	@ (8015460 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801543e:	4b09      	ldr	r3, [pc, #36]	@ (8015464 <USBD_FS_InterfaceStrDescriptor+0x40>)
 8015440:	0018      	movs	r0, r3
 8015442:	f7ff fddb 	bl	8014ffc <USBD_GetString>
 8015446:	e005      	b.n	8015454 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8015448:	683a      	ldr	r2, [r7, #0]
 801544a:	4905      	ldr	r1, [pc, #20]	@ (8015460 <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801544c:	4b05      	ldr	r3, [pc, #20]	@ (8015464 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801544e:	0018      	movs	r0, r3
 8015450:	f7ff fdd4 	bl	8014ffc <USBD_GetString>
  }
  return USBD_StrDesc;
 8015454:	4b02      	ldr	r3, [pc, #8]	@ (8015460 <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8015456:	0018      	movs	r0, r3
 8015458:	46bd      	mov	sp, r7
 801545a:	b002      	add	sp, #8
 801545c:	bd80      	pop	{r7, pc}
 801545e:	46c0      	nop			@ (mov r8, r8)
 8015460:	20003180 	.word	0x20003180
 8015464:	0801b2fc 	.word	0x0801b2fc

08015468 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8015468:	b580      	push	{r7, lr}
 801546a:	b084      	sub	sp, #16
 801546c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801546e:	4b10      	ldr	r3, [pc, #64]	@ (80154b0 <Get_SerialNum+0x48>)
 8015470:	681b      	ldr	r3, [r3, #0]
 8015472:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8015474:	4b0f      	ldr	r3, [pc, #60]	@ (80154b4 <Get_SerialNum+0x4c>)
 8015476:	681b      	ldr	r3, [r3, #0]
 8015478:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801547a:	4b0f      	ldr	r3, [pc, #60]	@ (80154b8 <Get_SerialNum+0x50>)
 801547c:	681b      	ldr	r3, [r3, #0]
 801547e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8015480:	68fa      	ldr	r2, [r7, #12]
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	18d3      	adds	r3, r2, r3
 8015486:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8015488:	68fb      	ldr	r3, [r7, #12]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d00b      	beq.n	80154a6 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801548e:	490b      	ldr	r1, [pc, #44]	@ (80154bc <Get_SerialNum+0x54>)
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	2208      	movs	r2, #8
 8015494:	0018      	movs	r0, r3
 8015496:	f000 f815 	bl	80154c4 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 801549a:	4909      	ldr	r1, [pc, #36]	@ (80154c0 <Get_SerialNum+0x58>)
 801549c:	68bb      	ldr	r3, [r7, #8]
 801549e:	2204      	movs	r2, #4
 80154a0:	0018      	movs	r0, r3
 80154a2:	f000 f80f 	bl	80154c4 <IntToUnicode>
  }
}
 80154a6:	46c0      	nop			@ (mov r8, r8)
 80154a8:	46bd      	mov	sp, r7
 80154aa:	b004      	add	sp, #16
 80154ac:	bd80      	pop	{r7, pc}
 80154ae:	46c0      	nop			@ (mov r8, r8)
 80154b0:	1ff80050 	.word	0x1ff80050
 80154b4:	1ff80054 	.word	0x1ff80054
 80154b8:	1ff80058 	.word	0x1ff80058
 80154bc:	200002b6 	.word	0x200002b6
 80154c0:	200002c6 	.word	0x200002c6

080154c4 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80154c4:	b580      	push	{r7, lr}
 80154c6:	b086      	sub	sp, #24
 80154c8:	af00      	add	r7, sp, #0
 80154ca:	60f8      	str	r0, [r7, #12]
 80154cc:	60b9      	str	r1, [r7, #8]
 80154ce:	1dfb      	adds	r3, r7, #7
 80154d0:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80154d2:	2117      	movs	r1, #23
 80154d4:	187b      	adds	r3, r7, r1
 80154d6:	2200      	movs	r2, #0
 80154d8:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80154da:	187b      	adds	r3, r7, r1
 80154dc:	2200      	movs	r2, #0
 80154de:	701a      	strb	r2, [r3, #0]
 80154e0:	e02f      	b.n	8015542 <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	0f1b      	lsrs	r3, r3, #28
 80154e6:	2b09      	cmp	r3, #9
 80154e8:	d80d      	bhi.n	8015506 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80154ea:	68fb      	ldr	r3, [r7, #12]
 80154ec:	0f1b      	lsrs	r3, r3, #28
 80154ee:	b2da      	uxtb	r2, r3
 80154f0:	2317      	movs	r3, #23
 80154f2:	18fb      	adds	r3, r7, r3
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	005b      	lsls	r3, r3, #1
 80154f8:	0019      	movs	r1, r3
 80154fa:	68bb      	ldr	r3, [r7, #8]
 80154fc:	185b      	adds	r3, r3, r1
 80154fe:	3230      	adds	r2, #48	@ 0x30
 8015500:	b2d2      	uxtb	r2, r2
 8015502:	701a      	strb	r2, [r3, #0]
 8015504:	e00c      	b.n	8015520 <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8015506:	68fb      	ldr	r3, [r7, #12]
 8015508:	0f1b      	lsrs	r3, r3, #28
 801550a:	b2da      	uxtb	r2, r3
 801550c:	2317      	movs	r3, #23
 801550e:	18fb      	adds	r3, r7, r3
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	005b      	lsls	r3, r3, #1
 8015514:	0019      	movs	r1, r3
 8015516:	68bb      	ldr	r3, [r7, #8]
 8015518:	185b      	adds	r3, r3, r1
 801551a:	3237      	adds	r2, #55	@ 0x37
 801551c:	b2d2      	uxtb	r2, r2
 801551e:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8015520:	68fb      	ldr	r3, [r7, #12]
 8015522:	011b      	lsls	r3, r3, #4
 8015524:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8015526:	2117      	movs	r1, #23
 8015528:	187b      	adds	r3, r7, r1
 801552a:	781b      	ldrb	r3, [r3, #0]
 801552c:	005b      	lsls	r3, r3, #1
 801552e:	3301      	adds	r3, #1
 8015530:	68ba      	ldr	r2, [r7, #8]
 8015532:	18d3      	adds	r3, r2, r3
 8015534:	2200      	movs	r2, #0
 8015536:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8015538:	187b      	adds	r3, r7, r1
 801553a:	781a      	ldrb	r2, [r3, #0]
 801553c:	187b      	adds	r3, r7, r1
 801553e:	3201      	adds	r2, #1
 8015540:	701a      	strb	r2, [r3, #0]
 8015542:	2317      	movs	r3, #23
 8015544:	18fa      	adds	r2, r7, r3
 8015546:	1dfb      	adds	r3, r7, #7
 8015548:	7812      	ldrb	r2, [r2, #0]
 801554a:	781b      	ldrb	r3, [r3, #0]
 801554c:	429a      	cmp	r2, r3
 801554e:	d3c8      	bcc.n	80154e2 <IntToUnicode+0x1e>
  }
}
 8015550:	46c0      	nop			@ (mov r8, r8)
 8015552:	46c0      	nop			@ (mov r8, r8)
 8015554:	46bd      	mov	sp, r7
 8015556:	b006      	add	sp, #24
 8015558:	bd80      	pop	{r7, pc}
	...

0801555c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 801555c:	b580      	push	{r7, lr}
 801555e:	b082      	sub	sp, #8
 8015560:	af00      	add	r7, sp, #0
 8015562:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8015564:	687b      	ldr	r3, [r7, #4]
 8015566:	681b      	ldr	r3, [r3, #0]
 8015568:	4a0a      	ldr	r2, [pc, #40]	@ (8015594 <HAL_PCD_MspInit+0x38>)
 801556a:	4293      	cmp	r3, r2
 801556c:	d10e      	bne.n	801558c <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801556e:	4b0a      	ldr	r3, [pc, #40]	@ (8015598 <HAL_PCD_MspInit+0x3c>)
 8015570:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015572:	4b09      	ldr	r3, [pc, #36]	@ (8015598 <HAL_PCD_MspInit+0x3c>)
 8015574:	2180      	movs	r1, #128	@ 0x80
 8015576:	0409      	lsls	r1, r1, #16
 8015578:	430a      	orrs	r2, r1
 801557a:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 801557c:	2200      	movs	r2, #0
 801557e:	2100      	movs	r1, #0
 8015580:	201f      	movs	r0, #31
 8015582:	f7f4 f9c9 	bl	8009918 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8015586:	201f      	movs	r0, #31
 8015588:	f7f4 f9db 	bl	8009942 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 801558c:	46c0      	nop			@ (mov r8, r8)
 801558e:	46bd      	mov	sp, r7
 8015590:	b002      	add	sp, #8
 8015592:	bd80      	pop	{r7, pc}
 8015594:	40005c00 	.word	0x40005c00
 8015598:	40021000 	.word	0x40021000

0801559c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801559c:	b580      	push	{r7, lr}
 801559e:	b082      	sub	sp, #8
 80155a0:	af00      	add	r7, sp, #0
 80155a2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80155a4:	687a      	ldr	r2, [r7, #4]
 80155a6:	23bc      	movs	r3, #188	@ 0xbc
 80155a8:	009b      	lsls	r3, r3, #2
 80155aa:	58d2      	ldr	r2, [r2, r3]
 80155ac:	687b      	ldr	r3, [r7, #4]
 80155ae:	21ac      	movs	r1, #172	@ 0xac
 80155b0:	0089      	lsls	r1, r1, #2
 80155b2:	468c      	mov	ip, r1
 80155b4:	4463      	add	r3, ip
 80155b6:	0019      	movs	r1, r3
 80155b8:	0010      	movs	r0, r2
 80155ba:	f7fe fcb5 	bl	8013f28 <USBD_LL_SetupStage>
}
 80155be:	46c0      	nop			@ (mov r8, r8)
 80155c0:	46bd      	mov	sp, r7
 80155c2:	b002      	add	sp, #8
 80155c4:	bd80      	pop	{r7, pc}

080155c6 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80155c6:	b590      	push	{r4, r7, lr}
 80155c8:	b083      	sub	sp, #12
 80155ca:	af00      	add	r7, sp, #0
 80155cc:	6078      	str	r0, [r7, #4]
 80155ce:	000a      	movs	r2, r1
 80155d0:	1cfb      	adds	r3, r7, #3
 80155d2:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80155d4:	687a      	ldr	r2, [r7, #4]
 80155d6:	23bc      	movs	r3, #188	@ 0xbc
 80155d8:	009b      	lsls	r3, r3, #2
 80155da:	58d4      	ldr	r4, [r2, r3]
 80155dc:	1cfb      	adds	r3, r7, #3
 80155de:	781a      	ldrb	r2, [r3, #0]
 80155e0:	6878      	ldr	r0, [r7, #4]
 80155e2:	23be      	movs	r3, #190	@ 0xbe
 80155e4:	0059      	lsls	r1, r3, #1
 80155e6:	0013      	movs	r3, r2
 80155e8:	009b      	lsls	r3, r3, #2
 80155ea:	189b      	adds	r3, r3, r2
 80155ec:	00db      	lsls	r3, r3, #3
 80155ee:	18c3      	adds	r3, r0, r3
 80155f0:	185b      	adds	r3, r3, r1
 80155f2:	681a      	ldr	r2, [r3, #0]
 80155f4:	1cfb      	adds	r3, r7, #3
 80155f6:	781b      	ldrb	r3, [r3, #0]
 80155f8:	0019      	movs	r1, r3
 80155fa:	0020      	movs	r0, r4
 80155fc:	f7fe fcf2 	bl	8013fe4 <USBD_LL_DataOutStage>
}
 8015600:	46c0      	nop			@ (mov r8, r8)
 8015602:	46bd      	mov	sp, r7
 8015604:	b003      	add	sp, #12
 8015606:	bd90      	pop	{r4, r7, pc}

08015608 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015608:	b580      	push	{r7, lr}
 801560a:	b082      	sub	sp, #8
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	000a      	movs	r2, r1
 8015612:	1cfb      	adds	r3, r7, #3
 8015614:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8015616:	687a      	ldr	r2, [r7, #4]
 8015618:	23bc      	movs	r3, #188	@ 0xbc
 801561a:	009b      	lsls	r3, r3, #2
 801561c:	58d0      	ldr	r0, [r2, r3]
 801561e:	1cfb      	adds	r3, r7, #3
 8015620:	781a      	ldrb	r2, [r3, #0]
 8015622:	6879      	ldr	r1, [r7, #4]
 8015624:	0013      	movs	r3, r2
 8015626:	009b      	lsls	r3, r3, #2
 8015628:	189b      	adds	r3, r3, r2
 801562a:	00db      	lsls	r3, r3, #3
 801562c:	18cb      	adds	r3, r1, r3
 801562e:	333c      	adds	r3, #60	@ 0x3c
 8015630:	681a      	ldr	r2, [r3, #0]
 8015632:	1cfb      	adds	r3, r7, #3
 8015634:	781b      	ldrb	r3, [r3, #0]
 8015636:	0019      	movs	r1, r3
 8015638:	f7fe fd56 	bl	80140e8 <USBD_LL_DataInStage>
}
 801563c:	46c0      	nop			@ (mov r8, r8)
 801563e:	46bd      	mov	sp, r7
 8015640:	b002      	add	sp, #8
 8015642:	bd80      	pop	{r7, pc}

08015644 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015644:	b580      	push	{r7, lr}
 8015646:	b082      	sub	sp, #8
 8015648:	af00      	add	r7, sp, #0
 801564a:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801564c:	687a      	ldr	r2, [r7, #4]
 801564e:	23bc      	movs	r3, #188	@ 0xbc
 8015650:	009b      	lsls	r3, r3, #2
 8015652:	58d3      	ldr	r3, [r2, r3]
 8015654:	0018      	movs	r0, r3
 8015656:	f7fe fe8d 	bl	8014374 <USBD_LL_SOF>
}
 801565a:	46c0      	nop			@ (mov r8, r8)
 801565c:	46bd      	mov	sp, r7
 801565e:	b002      	add	sp, #8
 8015660:	bd80      	pop	{r7, pc}

08015662 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8015662:	b580      	push	{r7, lr}
 8015664:	b084      	sub	sp, #16
 8015666:	af00      	add	r7, sp, #0
 8015668:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 801566a:	230f      	movs	r3, #15
 801566c:	18fb      	adds	r3, r7, r3
 801566e:	2201      	movs	r2, #1
 8015670:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	689b      	ldr	r3, [r3, #8]
 8015676:	2b02      	cmp	r3, #2
 8015678:	d001      	beq.n	801567e <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 801567a:	f7f0 fa59 	bl	8005b30 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801567e:	687a      	ldr	r2, [r7, #4]
 8015680:	23bc      	movs	r3, #188	@ 0xbc
 8015682:	009b      	lsls	r3, r3, #2
 8015684:	58d2      	ldr	r2, [r2, r3]
 8015686:	230f      	movs	r3, #15
 8015688:	18fb      	adds	r3, r7, r3
 801568a:	781b      	ldrb	r3, [r3, #0]
 801568c:	0019      	movs	r1, r3
 801568e:	0010      	movs	r0, r2
 8015690:	f7fe fe2f 	bl	80142f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	23bc      	movs	r3, #188	@ 0xbc
 8015698:	009b      	lsls	r3, r3, #2
 801569a:	58d3      	ldr	r3, [r2, r3]
 801569c:	0018      	movs	r0, r3
 801569e:	f7fe fde0 	bl	8014262 <USBD_LL_Reset>
}
 80156a2:	46c0      	nop			@ (mov r8, r8)
 80156a4:	46bd      	mov	sp, r7
 80156a6:	b004      	add	sp, #16
 80156a8:	bd80      	pop	{r7, pc}
	...

080156ac <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b082      	sub	sp, #8
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80156b4:	687a      	ldr	r2, [r7, #4]
 80156b6:	23bc      	movs	r3, #188	@ 0xbc
 80156b8:	009b      	lsls	r3, r3, #2
 80156ba:	58d3      	ldr	r3, [r2, r3]
 80156bc:	0018      	movs	r0, r3
 80156be:	f7fe fe29 	bl	8014314 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80156c2:	687b      	ldr	r3, [r7, #4]
 80156c4:	699b      	ldr	r3, [r3, #24]
 80156c6:	2b00      	cmp	r3, #0
 80156c8:	d005      	beq.n	80156d6 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156ca:	4b05      	ldr	r3, [pc, #20]	@ (80156e0 <HAL_PCD_SuspendCallback+0x34>)
 80156cc:	691a      	ldr	r2, [r3, #16]
 80156ce:	4b04      	ldr	r3, [pc, #16]	@ (80156e0 <HAL_PCD_SuspendCallback+0x34>)
 80156d0:	2106      	movs	r1, #6
 80156d2:	430a      	orrs	r2, r1
 80156d4:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80156d6:	46c0      	nop			@ (mov r8, r8)
 80156d8:	46bd      	mov	sp, r7
 80156da:	b002      	add	sp, #8
 80156dc:	bd80      	pop	{r7, pc}
 80156de:	46c0      	nop			@ (mov r8, r8)
 80156e0:	e000ed00 	.word	0xe000ed00

080156e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80156e4:	b580      	push	{r7, lr}
 80156e6:	b082      	sub	sp, #8
 80156e8:	af00      	add	r7, sp, #0
 80156ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	699b      	ldr	r3, [r3, #24]
 80156f0:	2b00      	cmp	r3, #0
 80156f2:	d007      	beq.n	8015704 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80156f4:	4b09      	ldr	r3, [pc, #36]	@ (801571c <HAL_PCD_ResumeCallback+0x38>)
 80156f6:	691a      	ldr	r2, [r3, #16]
 80156f8:	4b08      	ldr	r3, [pc, #32]	@ (801571c <HAL_PCD_ResumeCallback+0x38>)
 80156fa:	2106      	movs	r1, #6
 80156fc:	438a      	bics	r2, r1
 80156fe:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 8015700:	f000 fa44 	bl	8015b8c <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8015704:	687a      	ldr	r2, [r7, #4]
 8015706:	23bc      	movs	r3, #188	@ 0xbc
 8015708:	009b      	lsls	r3, r3, #2
 801570a:	58d3      	ldr	r3, [r2, r3]
 801570c:	0018      	movs	r0, r3
 801570e:	f7fe fe19 	bl	8014344 <USBD_LL_Resume>
}
 8015712:	46c0      	nop			@ (mov r8, r8)
 8015714:	46bd      	mov	sp, r7
 8015716:	b002      	add	sp, #8
 8015718:	bd80      	pop	{r7, pc}
 801571a:	46c0      	nop			@ (mov r8, r8)
 801571c:	e000ed00 	.word	0xe000ed00

08015720 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8015720:	b580      	push	{r7, lr}
 8015722:	b082      	sub	sp, #8
 8015724:	af00      	add	r7, sp, #0
 8015726:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8015728:	4a2d      	ldr	r2, [pc, #180]	@ (80157e0 <USBD_LL_Init+0xc0>)
 801572a:	23bc      	movs	r3, #188	@ 0xbc
 801572c:	009b      	lsls	r3, r3, #2
 801572e:	6879      	ldr	r1, [r7, #4]
 8015730:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 8015732:	687a      	ldr	r2, [r7, #4]
 8015734:	23b0      	movs	r3, #176	@ 0xb0
 8015736:	009b      	lsls	r3, r3, #2
 8015738:	4929      	ldr	r1, [pc, #164]	@ (80157e0 <USBD_LL_Init+0xc0>)
 801573a:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 801573c:	4b28      	ldr	r3, [pc, #160]	@ (80157e0 <USBD_LL_Init+0xc0>)
 801573e:	4a29      	ldr	r2, [pc, #164]	@ (80157e4 <USBD_LL_Init+0xc4>)
 8015740:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8015742:	4b27      	ldr	r3, [pc, #156]	@ (80157e0 <USBD_LL_Init+0xc0>)
 8015744:	2208      	movs	r2, #8
 8015746:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8015748:	4b25      	ldr	r3, [pc, #148]	@ (80157e0 <USBD_LL_Init+0xc0>)
 801574a:	2202      	movs	r2, #2
 801574c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801574e:	4b24      	ldr	r3, [pc, #144]	@ (80157e0 <USBD_LL_Init+0xc0>)
 8015750:	2202      	movs	r2, #2
 8015752:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8015754:	4b22      	ldr	r3, [pc, #136]	@ (80157e0 <USBD_LL_Init+0xc0>)
 8015756:	2200      	movs	r2, #0
 8015758:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 801575a:	4b21      	ldr	r3, [pc, #132]	@ (80157e0 <USBD_LL_Init+0xc0>)
 801575c:	2200      	movs	r2, #0
 801575e:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8015760:	4b1f      	ldr	r3, [pc, #124]	@ (80157e0 <USBD_LL_Init+0xc0>)
 8015762:	2200      	movs	r2, #0
 8015764:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8015766:	4b1e      	ldr	r3, [pc, #120]	@ (80157e0 <USBD_LL_Init+0xc0>)
 8015768:	0018      	movs	r0, r3
 801576a:	f7f7 f98f 	bl	800ca8c <HAL_PCD_Init>
 801576e:	1e03      	subs	r3, r0, #0
 8015770:	d001      	beq.n	8015776 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 8015772:	f7f0 f9dd 	bl	8005b30 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8015776:	687a      	ldr	r2, [r7, #4]
 8015778:	23b0      	movs	r3, #176	@ 0xb0
 801577a:	009b      	lsls	r3, r3, #2
 801577c:	58d0      	ldr	r0, [r2, r3]
 801577e:	2318      	movs	r3, #24
 8015780:	2200      	movs	r2, #0
 8015782:	2100      	movs	r1, #0
 8015784:	f7f8 ff50 	bl	800e628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8015788:	687a      	ldr	r2, [r7, #4]
 801578a:	23b0      	movs	r3, #176	@ 0xb0
 801578c:	009b      	lsls	r3, r3, #2
 801578e:	58d0      	ldr	r0, [r2, r3]
 8015790:	2358      	movs	r3, #88	@ 0x58
 8015792:	2200      	movs	r2, #0
 8015794:	2180      	movs	r1, #128	@ 0x80
 8015796:	f7f8 ff47 	bl	800e628 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 801579a:	687a      	ldr	r2, [r7, #4]
 801579c:	23b0      	movs	r3, #176	@ 0xb0
 801579e:	009b      	lsls	r3, r3, #2
 80157a0:	58d0      	ldr	r0, [r2, r3]
 80157a2:	23c0      	movs	r3, #192	@ 0xc0
 80157a4:	2200      	movs	r2, #0
 80157a6:	2181      	movs	r1, #129	@ 0x81
 80157a8:	f7f8 ff3e 	bl	800e628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80157ac:	687a      	ldr	r2, [r7, #4]
 80157ae:	23b0      	movs	r3, #176	@ 0xb0
 80157b0:	009b      	lsls	r3, r3, #2
 80157b2:	58d0      	ldr	r0, [r2, r3]
 80157b4:	2388      	movs	r3, #136	@ 0x88
 80157b6:	005b      	lsls	r3, r3, #1
 80157b8:	2200      	movs	r2, #0
 80157ba:	2101      	movs	r1, #1
 80157bc:	f7f8 ff34 	bl	800e628 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80157c0:	687a      	ldr	r2, [r7, #4]
 80157c2:	23b0      	movs	r3, #176	@ 0xb0
 80157c4:	009b      	lsls	r3, r3, #2
 80157c6:	58d0      	ldr	r0, [r2, r3]
 80157c8:	2380      	movs	r3, #128	@ 0x80
 80157ca:	005b      	lsls	r3, r3, #1
 80157cc:	2200      	movs	r2, #0
 80157ce:	2182      	movs	r1, #130	@ 0x82
 80157d0:	f7f8 ff2a 	bl	800e628 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80157d4:	2300      	movs	r3, #0
}
 80157d6:	0018      	movs	r0, r3
 80157d8:	46bd      	mov	sp, r7
 80157da:	b002      	add	sp, #8
 80157dc:	bd80      	pop	{r7, pc}
 80157de:	46c0      	nop			@ (mov r8, r8)
 80157e0:	20003380 	.word	0x20003380
 80157e4:	40005c00 	.word	0x40005c00

080157e8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80157e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80157ea:	b085      	sub	sp, #20
 80157ec:	af00      	add	r7, sp, #0
 80157ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80157f0:	210f      	movs	r1, #15
 80157f2:	187b      	adds	r3, r7, r1
 80157f4:	2200      	movs	r2, #0
 80157f6:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80157f8:	260e      	movs	r6, #14
 80157fa:	19bb      	adds	r3, r7, r6
 80157fc:	2200      	movs	r2, #0
 80157fe:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	23b0      	movs	r3, #176	@ 0xb0
 8015804:	009b      	lsls	r3, r3, #2
 8015806:	58d3      	ldr	r3, [r2, r3]
 8015808:	000d      	movs	r5, r1
 801580a:	187c      	adds	r4, r7, r1
 801580c:	0018      	movs	r0, r3
 801580e:	f7f7 fa3d 	bl	800cc8c <HAL_PCD_Start>
 8015812:	0003      	movs	r3, r0
 8015814:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015816:	19bc      	adds	r4, r7, r6
 8015818:	197b      	adds	r3, r7, r5
 801581a:	781b      	ldrb	r3, [r3, #0]
 801581c:	0018      	movs	r0, r3
 801581e:	f000 f9bc 	bl	8015b9a <USBD_Get_USB_Status>
 8015822:	0003      	movs	r3, r0
 8015824:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015826:	19bb      	adds	r3, r7, r6
 8015828:	781b      	ldrb	r3, [r3, #0]
}
 801582a:	0018      	movs	r0, r3
 801582c:	46bd      	mov	sp, r7
 801582e:	b005      	add	sp, #20
 8015830:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015832 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8015832:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015834:	b085      	sub	sp, #20
 8015836:	af00      	add	r7, sp, #0
 8015838:	6078      	str	r0, [r7, #4]
 801583a:	000c      	movs	r4, r1
 801583c:	0010      	movs	r0, r2
 801583e:	0019      	movs	r1, r3
 8015840:	1cfb      	adds	r3, r7, #3
 8015842:	1c22      	adds	r2, r4, #0
 8015844:	701a      	strb	r2, [r3, #0]
 8015846:	1cbb      	adds	r3, r7, #2
 8015848:	1c02      	adds	r2, r0, #0
 801584a:	701a      	strb	r2, [r3, #0]
 801584c:	003b      	movs	r3, r7
 801584e:	1c0a      	adds	r2, r1, #0
 8015850:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015852:	260f      	movs	r6, #15
 8015854:	19bb      	adds	r3, r7, r6
 8015856:	2200      	movs	r2, #0
 8015858:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801585a:	250e      	movs	r5, #14
 801585c:	197b      	adds	r3, r7, r5
 801585e:	2200      	movs	r2, #0
 8015860:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8015862:	687a      	ldr	r2, [r7, #4]
 8015864:	23b0      	movs	r3, #176	@ 0xb0
 8015866:	009b      	lsls	r3, r3, #2
 8015868:	58d0      	ldr	r0, [r2, r3]
 801586a:	19bc      	adds	r4, r7, r6
 801586c:	1cbb      	adds	r3, r7, #2
 801586e:	781d      	ldrb	r5, [r3, #0]
 8015870:	003b      	movs	r3, r7
 8015872:	881a      	ldrh	r2, [r3, #0]
 8015874:	1cfb      	adds	r3, r7, #3
 8015876:	7819      	ldrb	r1, [r3, #0]
 8015878:	002b      	movs	r3, r5
 801587a:	f7f7 fb9c 	bl	800cfb6 <HAL_PCD_EP_Open>
 801587e:	0003      	movs	r3, r0
 8015880:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015882:	250e      	movs	r5, #14
 8015884:	197c      	adds	r4, r7, r5
 8015886:	19bb      	adds	r3, r7, r6
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	0018      	movs	r0, r3
 801588c:	f000 f985 	bl	8015b9a <USBD_Get_USB_Status>
 8015890:	0003      	movs	r3, r0
 8015892:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015894:	197b      	adds	r3, r7, r5
 8015896:	781b      	ldrb	r3, [r3, #0]
}
 8015898:	0018      	movs	r0, r3
 801589a:	46bd      	mov	sp, r7
 801589c:	b005      	add	sp, #20
 801589e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080158a0 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158a2:	b085      	sub	sp, #20
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	6078      	str	r0, [r7, #4]
 80158a8:	000a      	movs	r2, r1
 80158aa:	1cfb      	adds	r3, r7, #3
 80158ac:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80158ae:	210f      	movs	r1, #15
 80158b0:	187b      	adds	r3, r7, r1
 80158b2:	2200      	movs	r2, #0
 80158b4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80158b6:	260e      	movs	r6, #14
 80158b8:	19bb      	adds	r3, r7, r6
 80158ba:	2200      	movs	r2, #0
 80158bc:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80158be:	687a      	ldr	r2, [r7, #4]
 80158c0:	23b0      	movs	r3, #176	@ 0xb0
 80158c2:	009b      	lsls	r3, r3, #2
 80158c4:	58d2      	ldr	r2, [r2, r3]
 80158c6:	000d      	movs	r5, r1
 80158c8:	187c      	adds	r4, r7, r1
 80158ca:	1cfb      	adds	r3, r7, #3
 80158cc:	781b      	ldrb	r3, [r3, #0]
 80158ce:	0019      	movs	r1, r3
 80158d0:	0010      	movs	r0, r2
 80158d2:	f7f7 fbdf 	bl	800d094 <HAL_PCD_EP_Close>
 80158d6:	0003      	movs	r3, r0
 80158d8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80158da:	19bc      	adds	r4, r7, r6
 80158dc:	197b      	adds	r3, r7, r5
 80158de:	781b      	ldrb	r3, [r3, #0]
 80158e0:	0018      	movs	r0, r3
 80158e2:	f000 f95a 	bl	8015b9a <USBD_Get_USB_Status>
 80158e6:	0003      	movs	r3, r0
 80158e8:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80158ea:	19bb      	adds	r3, r7, r6
 80158ec:	781b      	ldrb	r3, [r3, #0]
}
 80158ee:	0018      	movs	r0, r3
 80158f0:	46bd      	mov	sp, r7
 80158f2:	b005      	add	sp, #20
 80158f4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080158f6 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80158f6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80158f8:	b085      	sub	sp, #20
 80158fa:	af00      	add	r7, sp, #0
 80158fc:	6078      	str	r0, [r7, #4]
 80158fe:	000a      	movs	r2, r1
 8015900:	1cfb      	adds	r3, r7, #3
 8015902:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015904:	210f      	movs	r1, #15
 8015906:	187b      	adds	r3, r7, r1
 8015908:	2200      	movs	r2, #0
 801590a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801590c:	260e      	movs	r6, #14
 801590e:	19bb      	adds	r3, r7, r6
 8015910:	2200      	movs	r2, #0
 8015912:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8015914:	687a      	ldr	r2, [r7, #4]
 8015916:	23b0      	movs	r3, #176	@ 0xb0
 8015918:	009b      	lsls	r3, r3, #2
 801591a:	58d2      	ldr	r2, [r2, r3]
 801591c:	000d      	movs	r5, r1
 801591e:	187c      	adds	r4, r7, r1
 8015920:	1cfb      	adds	r3, r7, #3
 8015922:	781b      	ldrb	r3, [r3, #0]
 8015924:	0019      	movs	r1, r3
 8015926:	0010      	movs	r0, r2
 8015928:	f7f7 fc91 	bl	800d24e <HAL_PCD_EP_SetStall>
 801592c:	0003      	movs	r3, r0
 801592e:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015930:	19bc      	adds	r4, r7, r6
 8015932:	197b      	adds	r3, r7, r5
 8015934:	781b      	ldrb	r3, [r3, #0]
 8015936:	0018      	movs	r0, r3
 8015938:	f000 f92f 	bl	8015b9a <USBD_Get_USB_Status>
 801593c:	0003      	movs	r3, r0
 801593e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015940:	19bb      	adds	r3, r7, r6
 8015942:	781b      	ldrb	r3, [r3, #0]
}
 8015944:	0018      	movs	r0, r3
 8015946:	46bd      	mov	sp, r7
 8015948:	b005      	add	sp, #20
 801594a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801594c <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801594c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801594e:	b085      	sub	sp, #20
 8015950:	af00      	add	r7, sp, #0
 8015952:	6078      	str	r0, [r7, #4]
 8015954:	000a      	movs	r2, r1
 8015956:	1cfb      	adds	r3, r7, #3
 8015958:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801595a:	210f      	movs	r1, #15
 801595c:	187b      	adds	r3, r7, r1
 801595e:	2200      	movs	r2, #0
 8015960:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015962:	260e      	movs	r6, #14
 8015964:	19bb      	adds	r3, r7, r6
 8015966:	2200      	movs	r2, #0
 8015968:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801596a:	687a      	ldr	r2, [r7, #4]
 801596c:	23b0      	movs	r3, #176	@ 0xb0
 801596e:	009b      	lsls	r3, r3, #2
 8015970:	58d2      	ldr	r2, [r2, r3]
 8015972:	000d      	movs	r5, r1
 8015974:	187c      	adds	r4, r7, r1
 8015976:	1cfb      	adds	r3, r7, #3
 8015978:	781b      	ldrb	r3, [r3, #0]
 801597a:	0019      	movs	r1, r3
 801597c:	0010      	movs	r0, r2
 801597e:	f7f7 fcc2 	bl	800d306 <HAL_PCD_EP_ClrStall>
 8015982:	0003      	movs	r3, r0
 8015984:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015986:	19bc      	adds	r4, r7, r6
 8015988:	197b      	adds	r3, r7, r5
 801598a:	781b      	ldrb	r3, [r3, #0]
 801598c:	0018      	movs	r0, r3
 801598e:	f000 f904 	bl	8015b9a <USBD_Get_USB_Status>
 8015992:	0003      	movs	r3, r0
 8015994:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015996:	19bb      	adds	r3, r7, r6
 8015998:	781b      	ldrb	r3, [r3, #0]
}
 801599a:	0018      	movs	r0, r3
 801599c:	46bd      	mov	sp, r7
 801599e:	b005      	add	sp, #20
 80159a0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080159a2 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80159a2:	b580      	push	{r7, lr}
 80159a4:	b084      	sub	sp, #16
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
 80159aa:	000a      	movs	r2, r1
 80159ac:	1cfb      	adds	r3, r7, #3
 80159ae:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80159b0:	687a      	ldr	r2, [r7, #4]
 80159b2:	23b0      	movs	r3, #176	@ 0xb0
 80159b4:	009b      	lsls	r3, r3, #2
 80159b6:	58d3      	ldr	r3, [r2, r3]
 80159b8:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80159ba:	1cfb      	adds	r3, r7, #3
 80159bc:	781b      	ldrb	r3, [r3, #0]
 80159be:	b25b      	sxtb	r3, r3
 80159c0:	2b00      	cmp	r3, #0
 80159c2:	da0d      	bge.n	80159e0 <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80159c4:	1cfb      	adds	r3, r7, #3
 80159c6:	781b      	ldrb	r3, [r3, #0]
 80159c8:	227f      	movs	r2, #127	@ 0x7f
 80159ca:	4013      	ands	r3, r2
 80159cc:	68f9      	ldr	r1, [r7, #12]
 80159ce:	1c5a      	adds	r2, r3, #1
 80159d0:	0013      	movs	r3, r2
 80159d2:	009b      	lsls	r3, r3, #2
 80159d4:	189b      	adds	r3, r3, r2
 80159d6:	00db      	lsls	r3, r3, #3
 80159d8:	18cb      	adds	r3, r1, r3
 80159da:	3302      	adds	r3, #2
 80159dc:	781b      	ldrb	r3, [r3, #0]
 80159de:	e00d      	b.n	80159fc <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80159e0:	1cfb      	adds	r3, r7, #3
 80159e2:	781b      	ldrb	r3, [r3, #0]
 80159e4:	227f      	movs	r2, #127	@ 0x7f
 80159e6:	401a      	ands	r2, r3
 80159e8:	68f8      	ldr	r0, [r7, #12]
 80159ea:	23b5      	movs	r3, #181	@ 0xb5
 80159ec:	0059      	lsls	r1, r3, #1
 80159ee:	0013      	movs	r3, r2
 80159f0:	009b      	lsls	r3, r3, #2
 80159f2:	189b      	adds	r3, r3, r2
 80159f4:	00db      	lsls	r3, r3, #3
 80159f6:	18c3      	adds	r3, r0, r3
 80159f8:	185b      	adds	r3, r3, r1
 80159fa:	781b      	ldrb	r3, [r3, #0]
  }
}
 80159fc:	0018      	movs	r0, r3
 80159fe:	46bd      	mov	sp, r7
 8015a00:	b004      	add	sp, #16
 8015a02:	bd80      	pop	{r7, pc}

08015a04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8015a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a06:	b085      	sub	sp, #20
 8015a08:	af00      	add	r7, sp, #0
 8015a0a:	6078      	str	r0, [r7, #4]
 8015a0c:	000a      	movs	r2, r1
 8015a0e:	1cfb      	adds	r3, r7, #3
 8015a10:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a12:	210f      	movs	r1, #15
 8015a14:	187b      	adds	r3, r7, r1
 8015a16:	2200      	movs	r2, #0
 8015a18:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a1a:	260e      	movs	r6, #14
 8015a1c:	19bb      	adds	r3, r7, r6
 8015a1e:	2200      	movs	r2, #0
 8015a20:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	23b0      	movs	r3, #176	@ 0xb0
 8015a26:	009b      	lsls	r3, r3, #2
 8015a28:	58d2      	ldr	r2, [r2, r3]
 8015a2a:	000d      	movs	r5, r1
 8015a2c:	187c      	adds	r4, r7, r1
 8015a2e:	1cfb      	adds	r3, r7, #3
 8015a30:	781b      	ldrb	r3, [r3, #0]
 8015a32:	0019      	movs	r1, r3
 8015a34:	0010      	movs	r0, r2
 8015a36:	f7f7 fa93 	bl	800cf60 <HAL_PCD_SetAddress>
 8015a3a:	0003      	movs	r3, r0
 8015a3c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015a3e:	19bc      	adds	r4, r7, r6
 8015a40:	197b      	adds	r3, r7, r5
 8015a42:	781b      	ldrb	r3, [r3, #0]
 8015a44:	0018      	movs	r0, r3
 8015a46:	f000 f8a8 	bl	8015b9a <USBD_Get_USB_Status>
 8015a4a:	0003      	movs	r3, r0
 8015a4c:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015a4e:	19bb      	adds	r3, r7, r6
 8015a50:	781b      	ldrb	r3, [r3, #0]
}
 8015a52:	0018      	movs	r0, r3
 8015a54:	46bd      	mov	sp, r7
 8015a56:	b005      	add	sp, #20
 8015a58:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015a5a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015a5a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015a5c:	b087      	sub	sp, #28
 8015a5e:	af00      	add	r7, sp, #0
 8015a60:	60f8      	str	r0, [r7, #12]
 8015a62:	0008      	movs	r0, r1
 8015a64:	607a      	str	r2, [r7, #4]
 8015a66:	0019      	movs	r1, r3
 8015a68:	230b      	movs	r3, #11
 8015a6a:	18fb      	adds	r3, r7, r3
 8015a6c:	1c02      	adds	r2, r0, #0
 8015a6e:	701a      	strb	r2, [r3, #0]
 8015a70:	2408      	movs	r4, #8
 8015a72:	193b      	adds	r3, r7, r4
 8015a74:	1c0a      	adds	r2, r1, #0
 8015a76:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015a78:	2117      	movs	r1, #23
 8015a7a:	187b      	adds	r3, r7, r1
 8015a7c:	2200      	movs	r2, #0
 8015a7e:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015a80:	2516      	movs	r5, #22
 8015a82:	197b      	adds	r3, r7, r5
 8015a84:	2200      	movs	r2, #0
 8015a86:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8015a88:	68fa      	ldr	r2, [r7, #12]
 8015a8a:	23b0      	movs	r3, #176	@ 0xb0
 8015a8c:	009b      	lsls	r3, r3, #2
 8015a8e:	58d0      	ldr	r0, [r2, r3]
 8015a90:	193b      	adds	r3, r7, r4
 8015a92:	881d      	ldrh	r5, [r3, #0]
 8015a94:	000e      	movs	r6, r1
 8015a96:	187c      	adds	r4, r7, r1
 8015a98:	687a      	ldr	r2, [r7, #4]
 8015a9a:	230b      	movs	r3, #11
 8015a9c:	18fb      	adds	r3, r7, r3
 8015a9e:	7819      	ldrb	r1, [r3, #0]
 8015aa0:	002b      	movs	r3, r5
 8015aa2:	f7f7 fb98 	bl	800d1d6 <HAL_PCD_EP_Transmit>
 8015aa6:	0003      	movs	r3, r0
 8015aa8:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015aaa:	2516      	movs	r5, #22
 8015aac:	197c      	adds	r4, r7, r5
 8015aae:	19bb      	adds	r3, r7, r6
 8015ab0:	781b      	ldrb	r3, [r3, #0]
 8015ab2:	0018      	movs	r0, r3
 8015ab4:	f000 f871 	bl	8015b9a <USBD_Get_USB_Status>
 8015ab8:	0003      	movs	r3, r0
 8015aba:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015abc:	197b      	adds	r3, r7, r5
 8015abe:	781b      	ldrb	r3, [r3, #0]
}
 8015ac0:	0018      	movs	r0, r3
 8015ac2:	46bd      	mov	sp, r7
 8015ac4:	b007      	add	sp, #28
 8015ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015ac8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8015ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015aca:	b087      	sub	sp, #28
 8015acc:	af00      	add	r7, sp, #0
 8015ace:	60f8      	str	r0, [r7, #12]
 8015ad0:	0008      	movs	r0, r1
 8015ad2:	607a      	str	r2, [r7, #4]
 8015ad4:	0019      	movs	r1, r3
 8015ad6:	230b      	movs	r3, #11
 8015ad8:	18fb      	adds	r3, r7, r3
 8015ada:	1c02      	adds	r2, r0, #0
 8015adc:	701a      	strb	r2, [r3, #0]
 8015ade:	2408      	movs	r4, #8
 8015ae0:	193b      	adds	r3, r7, r4
 8015ae2:	1c0a      	adds	r2, r1, #0
 8015ae4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8015ae6:	2117      	movs	r1, #23
 8015ae8:	187b      	adds	r3, r7, r1
 8015aea:	2200      	movs	r2, #0
 8015aec:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015aee:	2516      	movs	r5, #22
 8015af0:	197b      	adds	r3, r7, r5
 8015af2:	2200      	movs	r2, #0
 8015af4:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8015af6:	68fa      	ldr	r2, [r7, #12]
 8015af8:	23b0      	movs	r3, #176	@ 0xb0
 8015afa:	009b      	lsls	r3, r3, #2
 8015afc:	58d0      	ldr	r0, [r2, r3]
 8015afe:	193b      	adds	r3, r7, r4
 8015b00:	881d      	ldrh	r5, [r3, #0]
 8015b02:	000e      	movs	r6, r1
 8015b04:	187c      	adds	r4, r7, r1
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	230b      	movs	r3, #11
 8015b0a:	18fb      	adds	r3, r7, r3
 8015b0c:	7819      	ldrb	r1, [r3, #0]
 8015b0e:	002b      	movs	r3, r5
 8015b10:	f7f7 fb11 	bl	800d136 <HAL_PCD_EP_Receive>
 8015b14:	0003      	movs	r3, r0
 8015b16:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8015b18:	2516      	movs	r5, #22
 8015b1a:	197c      	adds	r4, r7, r5
 8015b1c:	19bb      	adds	r3, r7, r6
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	0018      	movs	r0, r3
 8015b22:	f000 f83a 	bl	8015b9a <USBD_Get_USB_Status>
 8015b26:	0003      	movs	r3, r0
 8015b28:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8015b2a:	197b      	adds	r3, r7, r5
 8015b2c:	781b      	ldrb	r3, [r3, #0]
}
 8015b2e:	0018      	movs	r0, r3
 8015b30:	46bd      	mov	sp, r7
 8015b32:	b007      	add	sp, #28
 8015b34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08015b36 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8015b36:	b580      	push	{r7, lr}
 8015b38:	b082      	sub	sp, #8
 8015b3a:	af00      	add	r7, sp, #0
 8015b3c:	6078      	str	r0, [r7, #4]
 8015b3e:	000a      	movs	r2, r1
 8015b40:	1cfb      	adds	r3, r7, #3
 8015b42:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8015b44:	687a      	ldr	r2, [r7, #4]
 8015b46:	23b0      	movs	r3, #176	@ 0xb0
 8015b48:	009b      	lsls	r3, r3, #2
 8015b4a:	58d2      	ldr	r2, [r2, r3]
 8015b4c:	1cfb      	adds	r3, r7, #3
 8015b4e:	781b      	ldrb	r3, [r3, #0]
 8015b50:	0019      	movs	r1, r3
 8015b52:	0010      	movs	r0, r2
 8015b54:	f7f7 fb26 	bl	800d1a4 <HAL_PCD_EP_GetRxCount>
 8015b58:	0003      	movs	r3, r0
}
 8015b5a:	0018      	movs	r0, r3
 8015b5c:	46bd      	mov	sp, r7
 8015b5e:	b002      	add	sp, #8
 8015b60:	bd80      	pop	{r7, pc}
	...

08015b64 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8015b64:	b580      	push	{r7, lr}
 8015b66:	b082      	sub	sp, #8
 8015b68:	af00      	add	r7, sp, #0
 8015b6a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8015b6c:	4b02      	ldr	r3, [pc, #8]	@ (8015b78 <USBD_static_malloc+0x14>)
}
 8015b6e:	0018      	movs	r0, r3
 8015b70:	46bd      	mov	sp, r7
 8015b72:	b002      	add	sp, #8
 8015b74:	bd80      	pop	{r7, pc}
 8015b76:	46c0      	nop			@ (mov r8, r8)
 8015b78:	20003674 	.word	0x20003674

08015b7c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8015b7c:	b580      	push	{r7, lr}
 8015b7e:	b082      	sub	sp, #8
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]

}
 8015b84:	46c0      	nop			@ (mov r8, r8)
 8015b86:	46bd      	mov	sp, r7
 8015b88:	b002      	add	sp, #8
 8015b8a:	bd80      	pop	{r7, pc}

08015b8c <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8015b8c:	b580      	push	{r7, lr}
 8015b8e:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8015b90:	f7ef ff5c 	bl	8005a4c <SystemClock_Config>
}
 8015b94:	46c0      	nop			@ (mov r8, r8)
 8015b96:	46bd      	mov	sp, r7
 8015b98:	bd80      	pop	{r7, pc}

08015b9a <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8015b9a:	b580      	push	{r7, lr}
 8015b9c:	b084      	sub	sp, #16
 8015b9e:	af00      	add	r7, sp, #0
 8015ba0:	0002      	movs	r2, r0
 8015ba2:	1dfb      	adds	r3, r7, #7
 8015ba4:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8015ba6:	230f      	movs	r3, #15
 8015ba8:	18fb      	adds	r3, r7, r3
 8015baa:	2200      	movs	r2, #0
 8015bac:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8015bae:	1dfb      	adds	r3, r7, #7
 8015bb0:	781b      	ldrb	r3, [r3, #0]
 8015bb2:	2b03      	cmp	r3, #3
 8015bb4:	d017      	beq.n	8015be6 <USBD_Get_USB_Status+0x4c>
 8015bb6:	dc1b      	bgt.n	8015bf0 <USBD_Get_USB_Status+0x56>
 8015bb8:	2b02      	cmp	r3, #2
 8015bba:	d00f      	beq.n	8015bdc <USBD_Get_USB_Status+0x42>
 8015bbc:	dc18      	bgt.n	8015bf0 <USBD_Get_USB_Status+0x56>
 8015bbe:	2b00      	cmp	r3, #0
 8015bc0:	d002      	beq.n	8015bc8 <USBD_Get_USB_Status+0x2e>
 8015bc2:	2b01      	cmp	r3, #1
 8015bc4:	d005      	beq.n	8015bd2 <USBD_Get_USB_Status+0x38>
 8015bc6:	e013      	b.n	8015bf0 <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8015bc8:	230f      	movs	r3, #15
 8015bca:	18fb      	adds	r3, r7, r3
 8015bcc:	2200      	movs	r2, #0
 8015bce:	701a      	strb	r2, [r3, #0]
    break;
 8015bd0:	e013      	b.n	8015bfa <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8015bd2:	230f      	movs	r3, #15
 8015bd4:	18fb      	adds	r3, r7, r3
 8015bd6:	2202      	movs	r2, #2
 8015bd8:	701a      	strb	r2, [r3, #0]
    break;
 8015bda:	e00e      	b.n	8015bfa <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8015bdc:	230f      	movs	r3, #15
 8015bde:	18fb      	adds	r3, r7, r3
 8015be0:	2201      	movs	r2, #1
 8015be2:	701a      	strb	r2, [r3, #0]
    break;
 8015be4:	e009      	b.n	8015bfa <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8015be6:	230f      	movs	r3, #15
 8015be8:	18fb      	adds	r3, r7, r3
 8015bea:	2202      	movs	r2, #2
 8015bec:	701a      	strb	r2, [r3, #0]
    break;
 8015bee:	e004      	b.n	8015bfa <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8015bf0:	230f      	movs	r3, #15
 8015bf2:	18fb      	adds	r3, r7, r3
 8015bf4:	2202      	movs	r2, #2
 8015bf6:	701a      	strb	r2, [r3, #0]
    break;
 8015bf8:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8015bfa:	230f      	movs	r3, #15
 8015bfc:	18fb      	adds	r3, r7, r3
 8015bfe:	781b      	ldrb	r3, [r3, #0]
}
 8015c00:	0018      	movs	r0, r3
 8015c02:	46bd      	mov	sp, r7
 8015c04:	b004      	add	sp, #16
 8015c06:	bd80      	pop	{r7, pc}

08015c08 <arm_split_rfft_q15>:
 8015c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015c0a:	4644      	mov	r4, r8
 8015c0c:	465f      	mov	r7, fp
 8015c0e:	4656      	mov	r6, sl
 8015c10:	464d      	mov	r5, r9
 8015c12:	b4f0      	push	{r4, r5, r6, r7}
 8015c14:	b089      	sub	sp, #36	@ 0x24
 8015c16:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015c18:	9007      	str	r0, [sp, #28]
 8015c1a:	00a4      	lsls	r4, r4, #2
 8015c1c:	46a2      	mov	sl, r4
 8015c1e:	449a      	add	sl, r3
 8015c20:	0003      	movs	r3, r0
 8015c22:	46a3      	mov	fp, r4
 8015c24:	3304      	adds	r3, #4
 8015c26:	4699      	mov	r9, r3
 8015c28:	4b45      	ldr	r3, [pc, #276]	@ (8015d40 <arm_split_rfft_q15+0x138>)
 8015c2a:	4493      	add	fp, r2
 8015c2c:	18cb      	adds	r3, r1, r3
 8015c2e:	009b      	lsls	r3, r3, #2
 8015c30:	0002      	movs	r2, r0
 8015c32:	0018      	movs	r0, r3
 8015c34:	9306      	str	r3, [sp, #24]
 8015c36:	4684      	mov	ip, r0
 8015c38:	0013      	movs	r3, r2
 8015c3a:	4463      	add	r3, ip
 8015c3c:	9404      	str	r4, [sp, #16]
 8015c3e:	4698      	mov	r8, r3
 8015c40:	2901      	cmp	r1, #1
 8015c42:	d95d      	bls.n	8015d00 <arm_split_rfft_q15+0xf8>
 8015c44:	9a07      	ldr	r2, [sp, #28]
 8015c46:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8015c48:	4694      	mov	ip, r2
 8015c4a:	00c9      	lsls	r1, r1, #3
 8015c4c:	3904      	subs	r1, #4
 8015c4e:	1d1d      	adds	r5, r3, #4
 8015c50:	1858      	adds	r0, r3, r1
 8015c52:	9b06      	ldr	r3, [sp, #24]
 8015c54:	464e      	mov	r6, r9
 8015c56:	3304      	adds	r3, #4
 8015c58:	4463      	add	r3, ip
 8015c5a:	46c1      	mov	r9, r8
 8015c5c:	46ac      	mov	ip, r5
 8015c5e:	4680      	mov	r8, r0
 8015c60:	465d      	mov	r5, fp
 8015c62:	4650      	mov	r0, sl
 8015c64:	9305      	str	r3, [sp, #20]
 8015c66:	2200      	movs	r2, #0
 8015c68:	5eb3      	ldrsh	r3, [r6, r2]
 8015c6a:	2100      	movs	r1, #0
 8015c6c:	5e6a      	ldrsh	r2, [r5, r1]
 8015c6e:	001c      	movs	r4, r3
 8015c70:	9301      	str	r3, [sp, #4]
 8015c72:	9202      	str	r2, [sp, #8]
 8015c74:	2102      	movs	r1, #2
 8015c76:	5e73      	ldrsh	r3, [r6, r1]
 8015c78:	4354      	muls	r4, r2
 8015c7a:	2102      	movs	r1, #2
 8015c7c:	5e6a      	ldrsh	r2, [r5, r1]
 8015c7e:	4649      	mov	r1, r9
 8015c80:	2700      	movs	r7, #0
 8015c82:	5fc9      	ldrsh	r1, [r1, r7]
 8015c84:	9203      	str	r2, [sp, #12]
 8015c86:	468b      	mov	fp, r1
 8015c88:	2700      	movs	r7, #0
 8015c8a:	5fc1      	ldrsh	r1, [r0, r7]
 8015c8c:	435a      	muls	r2, r3
 8015c8e:	468a      	mov	sl, r1
 8015c90:	4649      	mov	r1, r9
 8015c92:	1aa4      	subs	r4, r4, r2
 8015c94:	2702      	movs	r7, #2
 8015c96:	5fcf      	ldrsh	r7, [r1, r7]
 8015c98:	2102      	movs	r1, #2
 8015c9a:	5e42      	ldrsh	r2, [r0, r1]
 8015c9c:	4651      	mov	r1, sl
 8015c9e:	9200      	str	r2, [sp, #0]
 8015ca0:	465a      	mov	r2, fp
 8015ca2:	434a      	muls	r2, r1
 8015ca4:	4659      	mov	r1, fp
 8015ca6:	1914      	adds	r4, r2, r4
 8015ca8:	9a00      	ldr	r2, [sp, #0]
 8015caa:	3604      	adds	r6, #4
 8015cac:	437a      	muls	r2, r7
 8015cae:	18a2      	adds	r2, r4, r2
 8015cb0:	9c00      	ldr	r4, [sp, #0]
 8015cb2:	1412      	asrs	r2, r2, #16
 8015cb4:	434c      	muls	r4, r1
 8015cb6:	0021      	movs	r1, r4
 8015cb8:	4654      	mov	r4, sl
 8015cba:	4367      	muls	r7, r4
 8015cbc:	9c02      	ldr	r4, [sp, #8]
 8015cbe:	1bc9      	subs	r1, r1, r7
 8015cc0:	4363      	muls	r3, r4
 8015cc2:	1859      	adds	r1, r3, r1
 8015cc4:	2304      	movs	r3, #4
 8015cc6:	425b      	negs	r3, r3
 8015cc8:	469a      	mov	sl, r3
 8015cca:	4663      	mov	r3, ip
 8015ccc:	9f01      	ldr	r7, [sp, #4]
 8015cce:	801a      	strh	r2, [r3, #0]
 8015cd0:	9b03      	ldr	r3, [sp, #12]
 8015cd2:	44d1      	add	r9, sl
 8015cd4:	435f      	muls	r7, r3
 8015cd6:	4663      	mov	r3, ip
 8015cd8:	1879      	adds	r1, r7, r1
 8015cda:	1409      	asrs	r1, r1, #16
 8015cdc:	8059      	strh	r1, [r3, #2]
 8015cde:	4643      	mov	r3, r8
 8015ce0:	801a      	strh	r2, [r3, #0]
 8015ce2:	9a04      	ldr	r2, [sp, #16]
 8015ce4:	4249      	negs	r1, r1
 8015ce6:	4692      	mov	sl, r2
 8015ce8:	8059      	strh	r1, [r3, #2]
 8015cea:	2304      	movs	r3, #4
 8015cec:	4450      	add	r0, sl
 8015cee:	4455      	add	r5, sl
 8015cf0:	469a      	mov	sl, r3
 8015cf2:	3b08      	subs	r3, #8
 8015cf4:	44d4      	add	ip, sl
 8015cf6:	469a      	mov	sl, r3
 8015cf8:	9b05      	ldr	r3, [sp, #20]
 8015cfa:	44d0      	add	r8, sl
 8015cfc:	429e      	cmp	r6, r3
 8015cfe:	d1b2      	bne.n	8015c66 <arm_split_rfft_q15+0x5e>
 8015d00:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015d02:	9b06      	ldr	r3, [sp, #24]
 8015d04:	4694      	mov	ip, r2
 8015d06:	4463      	add	r3, ip
 8015d08:	0019      	movs	r1, r3
 8015d0a:	9807      	ldr	r0, [sp, #28]
 8015d0c:	2200      	movs	r2, #0
 8015d0e:	5e83      	ldrsh	r3, [r0, r2]
 8015d10:	2402      	movs	r4, #2
 8015d12:	5f02      	ldrsh	r2, [r0, r4]
 8015d14:	1a9b      	subs	r3, r3, r2
 8015d16:	105b      	asrs	r3, r3, #1
 8015d18:	2200      	movs	r2, #0
 8015d1a:	808b      	strh	r3, [r1, #4]
 8015d1c:	0003      	movs	r3, r0
 8015d1e:	80ca      	strh	r2, [r1, #6]
 8015d20:	2000      	movs	r0, #0
 8015d22:	5e19      	ldrsh	r1, [r3, r0]
 8015d24:	2002      	movs	r0, #2
 8015d26:	5e1b      	ldrsh	r3, [r3, r0]
 8015d28:	18cb      	adds	r3, r1, r3
 8015d2a:	4661      	mov	r1, ip
 8015d2c:	105b      	asrs	r3, r3, #1
 8015d2e:	800b      	strh	r3, [r1, #0]
 8015d30:	804a      	strh	r2, [r1, #2]
 8015d32:	b009      	add	sp, #36	@ 0x24
 8015d34:	bc3c      	pop	{r2, r3, r4, r5}
 8015d36:	4690      	mov	r8, r2
 8015d38:	4699      	mov	r9, r3
 8015d3a:	46a2      	mov	sl, r4
 8015d3c:	46ab      	mov	fp, r5
 8015d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d40:	3fffffff 	.word	0x3fffffff

08015d44 <arm_rfft_q15>:
 8015d44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8015d46:	465f      	mov	r7, fp
 8015d48:	4656      	mov	r6, sl
 8015d4a:	464d      	mov	r5, r9
 8015d4c:	4644      	mov	r4, r8
 8015d4e:	b4f0      	push	{r4, r5, r6, r7}
 8015d50:	6943      	ldr	r3, [r0, #20]
 8015d52:	b08b      	sub	sp, #44	@ 0x2c
 8015d54:	9308      	str	r3, [sp, #32]
 8015d56:	6803      	ldr	r3, [r0, #0]
 8015d58:	9207      	str	r2, [sp, #28]
 8015d5a:	085b      	lsrs	r3, r3, #1
 8015d5c:	9302      	str	r3, [sp, #8]
 8015d5e:	7902      	ldrb	r2, [r0, #4]
 8015d60:	0007      	movs	r7, r0
 8015d62:	000e      	movs	r6, r1
 8015d64:	2a01      	cmp	r2, #1
 8015d66:	d013      	beq.n	8015d90 <arm_rfft_q15+0x4c>
 8015d68:	7943      	ldrb	r3, [r0, #5]
 8015d6a:	3708      	adds	r7, #8
 8015d6c:	9808      	ldr	r0, [sp, #32]
 8015d6e:	f000 fa9d 	bl	80162ac <arm_cfft_q15>
 8015d72:	cf0e      	ldmia	r7!, {r1, r2, r3}
 8015d74:	9101      	str	r1, [sp, #4]
 8015d76:	9907      	ldr	r1, [sp, #28]
 8015d78:	0030      	movs	r0, r6
 8015d7a:	9100      	str	r1, [sp, #0]
 8015d7c:	9902      	ldr	r1, [sp, #8]
 8015d7e:	f7ff ff43 	bl	8015c08 <arm_split_rfft_q15>
 8015d82:	b00b      	add	sp, #44	@ 0x2c
 8015d84:	bc3c      	pop	{r2, r3, r4, r5}
 8015d86:	4690      	mov	r8, r2
 8015d88:	4699      	mov	r9, r3
 8015d8a:	46a2      	mov	sl, r4
 8015d8c:	46ab      	mov	fp, r5
 8015d8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015d90:	0019      	movs	r1, r3
 8015d92:	68c3      	ldr	r3, [r0, #12]
 8015d94:	6882      	ldr	r2, [r0, #8]
 8015d96:	469b      	mov	fp, r3
 8015d98:	6903      	ldr	r3, [r0, #16]
 8015d9a:	4698      	mov	r8, r3
 8015d9c:	008b      	lsls	r3, r1, #2
 8015d9e:	18f0      	adds	r0, r6, r3
 8015da0:	2900      	cmp	r1, #0
 8015da2:	d060      	beq.n	8015e66 <arm_rfft_q15+0x122>
 8015da4:	46b4      	mov	ip, r6
 8015da6:	4646      	mov	r6, r8
 8015da8:	0093      	lsls	r3, r2, #2
 8015daa:	9a07      	ldr	r2, [sp, #28]
 8015dac:	9306      	str	r3, [sp, #24]
 8015dae:	9709      	str	r7, [sp, #36]	@ 0x24
 8015db0:	2100      	movs	r1, #0
 8015db2:	5e43      	ldrsh	r3, [r0, r1]
 8015db4:	3804      	subs	r0, #4
 8015db6:	4698      	mov	r8, r3
 8015db8:	4645      	mov	r5, r8
 8015dba:	2100      	movs	r1, #0
 8015dbc:	5e73      	ldrsh	r3, [r6, r1]
 8015dbe:	2406      	movs	r4, #6
 8015dc0:	5f01      	ldrsh	r1, [r0, r4]
 8015dc2:	9303      	str	r3, [sp, #12]
 8015dc4:	435d      	muls	r5, r3
 8015dc6:	2402      	movs	r4, #2
 8015dc8:	5f33      	ldrsh	r3, [r6, r4]
 8015dca:	4664      	mov	r4, ip
 8015dcc:	9104      	str	r1, [sp, #16]
 8015dce:	4359      	muls	r1, r3
 8015dd0:	1a6d      	subs	r5, r5, r1
 8015dd2:	9505      	str	r5, [sp, #20]
 8015dd4:	2500      	movs	r5, #0
 8015dd6:	5f64      	ldrsh	r4, [r4, r5]
 8015dd8:	46a1      	mov	r9, r4
 8015dda:	465c      	mov	r4, fp
 8015ddc:	2500      	movs	r5, #0
 8015dde:	5f64      	ldrsh	r4, [r4, r5]
 8015de0:	46a2      	mov	sl, r4
 8015de2:	4664      	mov	r4, ip
 8015de4:	2102      	movs	r1, #2
 8015de6:	5e61      	ldrsh	r1, [r4, r1]
 8015de8:	465c      	mov	r4, fp
 8015dea:	4655      	mov	r5, sl
 8015dec:	2702      	movs	r7, #2
 8015dee:	5fe7      	ldrsh	r7, [r4, r7]
 8015df0:	464c      	mov	r4, r9
 8015df2:	436c      	muls	r4, r5
 8015df4:	9d05      	ldr	r5, [sp, #20]
 8015df6:	1965      	adds	r5, r4, r5
 8015df8:	003c      	movs	r4, r7
 8015dfa:	434c      	muls	r4, r1
 8015dfc:	192c      	adds	r4, r5, r4
 8015dfe:	4655      	mov	r5, sl
 8015e00:	4369      	muls	r1, r5
 8015e02:	464d      	mov	r5, r9
 8015e04:	436f      	muls	r7, r5
 8015e06:	4645      	mov	r5, r8
 8015e08:	436b      	muls	r3, r5
 8015e0a:	2504      	movs	r5, #4
 8015e0c:	46a8      	mov	r8, r5
 8015e0e:	1bc9      	subs	r1, r1, r7
 8015e10:	1ac9      	subs	r1, r1, r3
 8015e12:	9f03      	ldr	r7, [sp, #12]
 8015e14:	9b04      	ldr	r3, [sp, #16]
 8015e16:	44c4      	add	ip, r8
 8015e18:	435f      	muls	r7, r3
 8015e1a:	1bc9      	subs	r1, r1, r7
 8015e1c:	1409      	asrs	r1, r1, #16
 8015e1e:	8051      	strh	r1, [r2, #2]
 8015e20:	9906      	ldr	r1, [sp, #24]
 8015e22:	9b02      	ldr	r3, [sp, #8]
 8015e24:	4688      	mov	r8, r1
 8015e26:	1424      	asrs	r4, r4, #16
 8015e28:	3b01      	subs	r3, #1
 8015e2a:	8014      	strh	r4, [r2, #0]
 8015e2c:	4446      	add	r6, r8
 8015e2e:	44c3      	add	fp, r8
 8015e30:	9302      	str	r3, [sp, #8]
 8015e32:	3204      	adds	r2, #4
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d1bb      	bne.n	8015db0 <arm_rfft_q15+0x6c>
 8015e38:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8015e3a:	793a      	ldrb	r2, [r7, #4]
 8015e3c:	9c07      	ldr	r4, [sp, #28]
 8015e3e:	797b      	ldrb	r3, [r7, #5]
 8015e40:	0021      	movs	r1, r4
 8015e42:	9808      	ldr	r0, [sp, #32]
 8015e44:	f000 fa32 	bl	80162ac <arm_cfft_q15>
 8015e48:	683a      	ldr	r2, [r7, #0]
 8015e4a:	0023      	movs	r3, r4
 8015e4c:	2100      	movs	r1, #0
 8015e4e:	2a00      	cmp	r2, #0
 8015e50:	d097      	beq.n	8015d82 <arm_rfft_q15+0x3e>
 8015e52:	2000      	movs	r0, #0
 8015e54:	5e1a      	ldrsh	r2, [r3, r0]
 8015e56:	3101      	adds	r1, #1
 8015e58:	0052      	lsls	r2, r2, #1
 8015e5a:	801a      	strh	r2, [r3, #0]
 8015e5c:	683a      	ldr	r2, [r7, #0]
 8015e5e:	3302      	adds	r3, #2
 8015e60:	428a      	cmp	r2, r1
 8015e62:	d8f6      	bhi.n	8015e52 <arm_rfft_q15+0x10e>
 8015e64:	e78d      	b.n	8015d82 <arm_rfft_q15+0x3e>
 8015e66:	2201      	movs	r2, #1
 8015e68:	e7e8      	b.n	8015e3c <arm_rfft_q15+0xf8>
 8015e6a:	46c0      	nop			@ (mov r8, r8)

08015e6c <arm_rfft_init_q15>:
 8015e6c:	b510      	push	{r4, lr}
 8015e6e:	7143      	strb	r3, [r0, #5]
 8015e70:	2380      	movs	r3, #128	@ 0x80
 8015e72:	4c31      	ldr	r4, [pc, #196]	@ (8015f38 <arm_rfft_init_q15+0xcc>)
 8015e74:	0409      	lsls	r1, r1, #16
 8015e76:	60c4      	str	r4, [r0, #12]
 8015e78:	4c30      	ldr	r4, [pc, #192]	@ (8015f3c <arm_rfft_init_q15+0xd0>)
 8015e7a:	0c09      	lsrs	r1, r1, #16
 8015e7c:	6001      	str	r1, [r0, #0]
 8015e7e:	6104      	str	r4, [r0, #16]
 8015e80:	7102      	strb	r2, [r0, #4]
 8015e82:	009b      	lsls	r3, r3, #2
 8015e84:	4299      	cmp	r1, r3
 8015e86:	d047      	beq.n	8015f18 <arm_rfft_init_q15+0xac>
 8015e88:	d912      	bls.n	8015eb0 <arm_rfft_init_q15+0x44>
 8015e8a:	2380      	movs	r3, #128	@ 0x80
 8015e8c:	011b      	lsls	r3, r3, #4
 8015e8e:	4299      	cmp	r1, r3
 8015e90:	d048      	beq.n	8015f24 <arm_rfft_init_q15+0xb8>
 8015e92:	d931      	bls.n	8015ef8 <arm_rfft_init_q15+0x8c>
 8015e94:	2380      	movs	r3, #128	@ 0x80
 8015e96:	015b      	lsls	r3, r3, #5
 8015e98:	4299      	cmp	r1, r3
 8015e9a:	d01e      	beq.n	8015eda <arm_rfft_init_q15+0x6e>
 8015e9c:	2380      	movs	r3, #128	@ 0x80
 8015e9e:	019b      	lsls	r3, r3, #6
 8015ea0:	4299      	cmp	r1, r3
 8015ea2:	d145      	bne.n	8015f30 <arm_rfft_init_q15+0xc4>
 8015ea4:	2301      	movs	r3, #1
 8015ea6:	6083      	str	r3, [r0, #8]
 8015ea8:	4b25      	ldr	r3, [pc, #148]	@ (8015f40 <arm_rfft_init_q15+0xd4>)
 8015eaa:	6143      	str	r3, [r0, #20]
 8015eac:	2000      	movs	r0, #0
 8015eae:	bd10      	pop	{r4, pc}
 8015eb0:	2940      	cmp	r1, #64	@ 0x40
 8015eb2:	d02b      	beq.n	8015f0c <arm_rfft_init_q15+0xa0>
 8015eb4:	d917      	bls.n	8015ee6 <arm_rfft_init_q15+0x7a>
 8015eb6:	2980      	cmp	r1, #128	@ 0x80
 8015eb8:	d009      	beq.n	8015ece <arm_rfft_init_q15+0x62>
 8015eba:	2380      	movs	r3, #128	@ 0x80
 8015ebc:	005b      	lsls	r3, r3, #1
 8015ebe:	4299      	cmp	r1, r3
 8015ec0:	d136      	bne.n	8015f30 <arm_rfft_init_q15+0xc4>
 8015ec2:	2320      	movs	r3, #32
 8015ec4:	6083      	str	r3, [r0, #8]
 8015ec6:	4b1f      	ldr	r3, [pc, #124]	@ (8015f44 <arm_rfft_init_q15+0xd8>)
 8015ec8:	6143      	str	r3, [r0, #20]
 8015eca:	2000      	movs	r0, #0
 8015ecc:	e7ef      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015ece:	2340      	movs	r3, #64	@ 0x40
 8015ed0:	6083      	str	r3, [r0, #8]
 8015ed2:	4b1d      	ldr	r3, [pc, #116]	@ (8015f48 <arm_rfft_init_q15+0xdc>)
 8015ed4:	6143      	str	r3, [r0, #20]
 8015ed6:	2000      	movs	r0, #0
 8015ed8:	e7e9      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015eda:	2302      	movs	r3, #2
 8015edc:	6083      	str	r3, [r0, #8]
 8015ede:	4b1b      	ldr	r3, [pc, #108]	@ (8015f4c <arm_rfft_init_q15+0xe0>)
 8015ee0:	6143      	str	r3, [r0, #20]
 8015ee2:	2000      	movs	r0, #0
 8015ee4:	e7e3      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015ee6:	2920      	cmp	r1, #32
 8015ee8:	d122      	bne.n	8015f30 <arm_rfft_init_q15+0xc4>
 8015eea:	2380      	movs	r3, #128	@ 0x80
 8015eec:	005b      	lsls	r3, r3, #1
 8015eee:	6083      	str	r3, [r0, #8]
 8015ef0:	4b17      	ldr	r3, [pc, #92]	@ (8015f50 <arm_rfft_init_q15+0xe4>)
 8015ef2:	6143      	str	r3, [r0, #20]
 8015ef4:	2000      	movs	r0, #0
 8015ef6:	e7da      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015ef8:	2380      	movs	r3, #128	@ 0x80
 8015efa:	00db      	lsls	r3, r3, #3
 8015efc:	4299      	cmp	r1, r3
 8015efe:	d117      	bne.n	8015f30 <arm_rfft_init_q15+0xc4>
 8015f00:	2308      	movs	r3, #8
 8015f02:	6083      	str	r3, [r0, #8]
 8015f04:	4b13      	ldr	r3, [pc, #76]	@ (8015f54 <arm_rfft_init_q15+0xe8>)
 8015f06:	6143      	str	r3, [r0, #20]
 8015f08:	2000      	movs	r0, #0
 8015f0a:	e7d0      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015f0c:	2380      	movs	r3, #128	@ 0x80
 8015f0e:	6083      	str	r3, [r0, #8]
 8015f10:	4b11      	ldr	r3, [pc, #68]	@ (8015f58 <arm_rfft_init_q15+0xec>)
 8015f12:	6143      	str	r3, [r0, #20]
 8015f14:	2000      	movs	r0, #0
 8015f16:	e7ca      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015f18:	2310      	movs	r3, #16
 8015f1a:	6083      	str	r3, [r0, #8]
 8015f1c:	4b0f      	ldr	r3, [pc, #60]	@ (8015f5c <arm_rfft_init_q15+0xf0>)
 8015f1e:	6143      	str	r3, [r0, #20]
 8015f20:	2000      	movs	r0, #0
 8015f22:	e7c4      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015f24:	2304      	movs	r3, #4
 8015f26:	6083      	str	r3, [r0, #8]
 8015f28:	4b0d      	ldr	r3, [pc, #52]	@ (8015f60 <arm_rfft_init_q15+0xf4>)
 8015f2a:	6143      	str	r3, [r0, #20]
 8015f2c:	2000      	movs	r0, #0
 8015f2e:	e7be      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015f30:	2001      	movs	r0, #1
 8015f32:	4240      	negs	r0, r0
 8015f34:	e7bb      	b.n	8015eae <arm_rfft_init_q15+0x42>
 8015f36:	46c0      	nop			@ (mov r8, r8)
 8015f38:	0801b5c0 	.word	0x0801b5c0
 8015f3c:	0801f5c0 	.word	0x0801f5c0
 8015f40:	08023620 	.word	0x08023620
 8015f44:	080235d0 	.word	0x080235d0
 8015f48:	08023600 	.word	0x08023600
 8015f4c:	08023610 	.word	0x08023610
 8015f50:	08023630 	.word	0x08023630
 8015f54:	080235e0 	.word	0x080235e0
 8015f58:	08023640 	.word	0x08023640
 8015f5c:	080235c0 	.word	0x080235c0
 8015f60:	080235f0 	.word	0x080235f0

08015f64 <arm_sqrt_q15>:
 8015f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015f66:	0004      	movs	r4, r0
 8015f68:	000f      	movs	r7, r1
 8015f6a:	2800      	cmp	r0, #0
 8015f6c:	dd56      	ble.n	801601c <arm_sqrt_q15+0xb8>
 8015f6e:	f7ea fafd 	bl	800056c <__clzsi2>
 8015f72:	2601      	movs	r6, #1
 8015f74:	3811      	subs	r0, #17
 8015f76:	b285      	uxth	r5, r0
 8015f78:	402e      	ands	r6, r5
 8015f7a:	d046      	beq.n	801600a <arm_sqrt_q15+0xa6>
 8015f7c:	1e6b      	subs	r3, r5, #1
 8015f7e:	409c      	lsls	r4, r3
 8015f80:	b224      	sxth	r4, r4
 8015f82:	0020      	movs	r0, r4
 8015f84:	f7eb fae8 	bl	8001558 <__aeabi_i2f>
 8015f88:	21e0      	movs	r1, #224	@ 0xe0
 8015f8a:	0589      	lsls	r1, r1, #22
 8015f8c:	f7ea ffcc 	bl	8000f28 <__aeabi_fmul>
 8015f90:	218d      	movs	r1, #141	@ 0x8d
 8015f92:	4b25      	ldr	r3, [pc, #148]	@ (8016028 <arm_sqrt_q15+0xc4>)
 8015f94:	1040      	asrs	r0, r0, #1
 8015f96:	1a18      	subs	r0, r3, r0
 8015f98:	05c9      	lsls	r1, r1, #23
 8015f9a:	f7ea ffc5 	bl	8000f28 <__aeabi_fmul>
 8015f9e:	f7eb fabb 	bl	8001518 <__aeabi_f2iz>
 8015fa2:	23c0      	movs	r3, #192	@ 0xc0
 8015fa4:	b201      	sxth	r1, r0
 8015fa6:	000a      	movs	r2, r1
 8015fa8:	019b      	lsls	r3, r3, #6
 8015faa:	469c      	mov	ip, r3
 8015fac:	434a      	muls	r2, r1
 8015fae:	13d2      	asrs	r2, r2, #15
 8015fb0:	1060      	asrs	r0, r4, #1
 8015fb2:	b212      	sxth	r2, r2
 8015fb4:	4342      	muls	r2, r0
 8015fb6:	13d2      	asrs	r2, r2, #15
 8015fb8:	1a9a      	subs	r2, r3, r2
 8015fba:	434a      	muls	r2, r1
 8015fbc:	13d2      	asrs	r2, r2, #15
 8015fbe:	0092      	lsls	r2, r2, #2
 8015fc0:	b212      	sxth	r2, r2
 8015fc2:	0013      	movs	r3, r2
 8015fc4:	4661      	mov	r1, ip
 8015fc6:	4353      	muls	r3, r2
 8015fc8:	13db      	asrs	r3, r3, #15
 8015fca:	b21b      	sxth	r3, r3
 8015fcc:	4343      	muls	r3, r0
 8015fce:	13db      	asrs	r3, r3, #15
 8015fd0:	1acb      	subs	r3, r1, r3
 8015fd2:	435a      	muls	r2, r3
 8015fd4:	13d2      	asrs	r2, r2, #15
 8015fd6:	0092      	lsls	r2, r2, #2
 8015fd8:	b213      	sxth	r3, r2
 8015fda:	001a      	movs	r2, r3
 8015fdc:	435a      	muls	r2, r3
 8015fde:	13d2      	asrs	r2, r2, #15
 8015fe0:	b212      	sxth	r2, r2
 8015fe2:	4350      	muls	r0, r2
 8015fe4:	13c0      	asrs	r0, r0, #15
 8015fe6:	1a08      	subs	r0, r1, r0
 8015fe8:	4343      	muls	r3, r0
 8015fea:	13db      	asrs	r3, r3, #15
 8015fec:	009b      	lsls	r3, r3, #2
 8015fee:	b21b      	sxth	r3, r3
 8015ff0:	4363      	muls	r3, r4
 8015ff2:	13db      	asrs	r3, r3, #15
 8015ff4:	b21b      	sxth	r3, r3
 8015ff6:	005b      	lsls	r3, r3, #1
 8015ff8:	b21b      	sxth	r3, r3
 8015ffa:	2e00      	cmp	r6, #0
 8015ffc:	d108      	bne.n	8016010 <arm_sqrt_q15+0xac>
 8015ffe:	b22d      	sxth	r5, r5
 8016000:	106d      	asrs	r5, r5, #1
 8016002:	412b      	asrs	r3, r5
 8016004:	2000      	movs	r0, #0
 8016006:	803b      	strh	r3, [r7, #0]
 8016008:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801600a:	40ac      	lsls	r4, r5
 801600c:	b224      	sxth	r4, r4
 801600e:	e7b8      	b.n	8015f82 <arm_sqrt_q15+0x1e>
 8016010:	3d01      	subs	r5, #1
 8016012:	0fe8      	lsrs	r0, r5, #31
 8016014:	1945      	adds	r5, r0, r5
 8016016:	106d      	asrs	r5, r5, #1
 8016018:	412b      	asrs	r3, r5
 801601a:	e7f3      	b.n	8016004 <arm_sqrt_q15+0xa0>
 801601c:	2300      	movs	r3, #0
 801601e:	2001      	movs	r0, #1
 8016020:	800b      	strh	r3, [r1, #0]
 8016022:	4240      	negs	r0, r0
 8016024:	e7f0      	b.n	8016008 <arm_sqrt_q15+0xa4>
 8016026:	46c0      	nop			@ (mov r8, r8)
 8016028:	5f3759df 	.word	0x5f3759df

0801602c <arm_abs_q15>:
 801602c:	b570      	push	{r4, r5, r6, lr}
 801602e:	2400      	movs	r4, #0
 8016030:	2a00      	cmp	r2, #0
 8016032:	d012      	beq.n	801605a <arm_abs_q15+0x2e>
 8016034:	4d0a      	ldr	r5, [pc, #40]	@ (8016060 <arm_abs_q15+0x34>)
 8016036:	e004      	b.n	8016042 <arm_abs_q15+0x16>
 8016038:	3a01      	subs	r2, #1
 801603a:	530b      	strh	r3, [r1, r4]
 801603c:	3402      	adds	r4, #2
 801603e:	2a00      	cmp	r2, #0
 8016040:	d00b      	beq.n	801605a <arm_abs_q15+0x2e>
 8016042:	5f03      	ldrsh	r3, [r0, r4]
 8016044:	2b00      	cmp	r3, #0
 8016046:	dcf7      	bgt.n	8016038 <arm_abs_q15+0xc>
 8016048:	42ab      	cmp	r3, r5
 801604a:	d007      	beq.n	801605c <arm_abs_q15+0x30>
 801604c:	425b      	negs	r3, r3
 801604e:	b21b      	sxth	r3, r3
 8016050:	3a01      	subs	r2, #1
 8016052:	530b      	strh	r3, [r1, r4]
 8016054:	3402      	adds	r4, #2
 8016056:	2a00      	cmp	r2, #0
 8016058:	d1f3      	bne.n	8016042 <arm_abs_q15+0x16>
 801605a:	bd70      	pop	{r4, r5, r6, pc}
 801605c:	4b01      	ldr	r3, [pc, #4]	@ (8016064 <arm_abs_q15+0x38>)
 801605e:	e7eb      	b.n	8016038 <arm_abs_q15+0xc>
 8016060:	ffff8000 	.word	0xffff8000
 8016064:	00007fff 	.word	0x00007fff

08016068 <arm_cfft_radix4by2_q15>:
 8016068:	b5f0      	push	{r4, r5, r6, r7, lr}
 801606a:	465f      	mov	r7, fp
 801606c:	4644      	mov	r4, r8
 801606e:	4656      	mov	r6, sl
 8016070:	464d      	mov	r5, r9
 8016072:	b4f0      	push	{r4, r5, r6, r7}
 8016074:	084b      	lsrs	r3, r1, #1
 8016076:	b087      	sub	sp, #28
 8016078:	9103      	str	r1, [sp, #12]
 801607a:	0007      	movs	r7, r0
 801607c:	9002      	str	r0, [sp, #8]
 801607e:	0014      	movs	r4, r2
 8016080:	9204      	str	r2, [sp, #16]
 8016082:	1e19      	subs	r1, r3, #0
 8016084:	9305      	str	r3, [sp, #20]
 8016086:	d06c      	beq.n	8016162 <arm_cfft_radix4by2_q15+0xfa>
 8016088:	008a      	lsls	r2, r1, #2
 801608a:	4691      	mov	r9, r2
 801608c:	0022      	movs	r2, r4
 801608e:	0003      	movs	r3, r0
 8016090:	444a      	add	r2, r9
 8016092:	4693      	mov	fp, r2
 8016094:	0025      	movs	r5, r4
 8016096:	4684      	mov	ip, r0
 8016098:	464e      	mov	r6, r9
 801609a:	3302      	adds	r3, #2
 801609c:	2100      	movs	r1, #0
 801609e:	5e6a      	ldrsh	r2, [r5, r1]
 80160a0:	4690      	mov	r8, r2
 80160a2:	2200      	movs	r2, #0
 80160a4:	5eb8      	ldrsh	r0, [r7, r2]
 80160a6:	2202      	movs	r2, #2
 80160a8:	5ea9      	ldrsh	r1, [r5, r2]
 80160aa:	1042      	asrs	r2, r0, #1
 80160ac:	4691      	mov	r9, r2
 80160ae:	5fb8      	ldrsh	r0, [r7, r6]
 80160b0:	9101      	str	r1, [sp, #4]
 80160b2:	1041      	asrs	r1, r0, #1
 80160b4:	468a      	mov	sl, r1
 80160b6:	464a      	mov	r2, r9
 80160b8:	4452      	add	r2, sl
 80160ba:	1052      	asrs	r2, r2, #1
 80160bc:	803a      	strh	r2, [r7, #0]
 80160be:	000c      	movs	r4, r1
 80160c0:	2100      	movs	r1, #0
 80160c2:	5e5a      	ldrsh	r2, [r3, r1]
 80160c4:	5f99      	ldrsh	r1, [r3, r6]
 80160c6:	1052      	asrs	r2, r2, #1
 80160c8:	1049      	asrs	r1, r1, #1
 80160ca:	1888      	adds	r0, r1, r2
 80160cc:	1040      	asrs	r0, r0, #1
 80160ce:	8018      	strh	r0, [r3, #0]
 80160d0:	4648      	mov	r0, r9
 80160d2:	1a52      	subs	r2, r2, r1
 80160d4:	4641      	mov	r1, r8
 80160d6:	1b00      	subs	r0, r0, r4
 80160d8:	4341      	muls	r1, r0
 80160da:	1409      	asrs	r1, r1, #16
 80160dc:	4689      	mov	r9, r1
 80160de:	9901      	ldr	r1, [sp, #4]
 80160e0:	3504      	adds	r5, #4
 80160e2:	4351      	muls	r1, r2
 80160e4:	1409      	asrs	r1, r1, #16
 80160e6:	4449      	add	r1, r9
 80160e8:	53b9      	strh	r1, [r7, r6]
 80160ea:	4641      	mov	r1, r8
 80160ec:	434a      	muls	r2, r1
 80160ee:	1411      	asrs	r1, r2, #16
 80160f0:	9a01      	ldr	r2, [sp, #4]
 80160f2:	3704      	adds	r7, #4
 80160f4:	4342      	muls	r2, r0
 80160f6:	1410      	asrs	r0, r2, #16
 80160f8:	1a0a      	subs	r2, r1, r0
 80160fa:	539a      	strh	r2, [r3, r6]
 80160fc:	3304      	adds	r3, #4
 80160fe:	455d      	cmp	r5, fp
 8016100:	d1cc      	bne.n	801609c <arm_cfft_radix4by2_q15+0x34>
 8016102:	9d05      	ldr	r5, [sp, #20]
 8016104:	9c02      	ldr	r4, [sp, #8]
 8016106:	9f04      	ldr	r7, [sp, #16]
 8016108:	2302      	movs	r3, #2
 801610a:	003a      	movs	r2, r7
 801610c:	0029      	movs	r1, r5
 801610e:	0020      	movs	r0, r4
 8016110:	4666      	mov	r6, ip
 8016112:	f000 f92f 	bl	8016374 <arm_radix4_butterfly_q15>
 8016116:	46a4      	mov	ip, r4
 8016118:	9903      	ldr	r1, [sp, #12]
 801611a:	2302      	movs	r3, #2
 801611c:	0048      	lsls	r0, r1, #1
 801611e:	4460      	add	r0, ip
 8016120:	003a      	movs	r2, r7
 8016122:	0029      	movs	r1, r5
 8016124:	f000 f926 	bl	8016374 <arm_radix4_butterfly_q15>
 8016128:	46a4      	mov	ip, r4
 801612a:	00e8      	lsls	r0, r5, #3
 801612c:	4460      	add	r0, ip
 801612e:	2300      	movs	r3, #0
 8016130:	5ef4      	ldrsh	r4, [r6, r3]
 8016132:	2302      	movs	r3, #2
 8016134:	5ef1      	ldrsh	r1, [r6, r3]
 8016136:	2304      	movs	r3, #4
 8016138:	5ef2      	ldrsh	r2, [r6, r3]
 801613a:	2506      	movs	r5, #6
 801613c:	5f73      	ldrsh	r3, [r6, r5]
 801613e:	0064      	lsls	r4, r4, #1
 8016140:	0049      	lsls	r1, r1, #1
 8016142:	0052      	lsls	r2, r2, #1
 8016144:	005b      	lsls	r3, r3, #1
 8016146:	8034      	strh	r4, [r6, #0]
 8016148:	8071      	strh	r1, [r6, #2]
 801614a:	80b2      	strh	r2, [r6, #4]
 801614c:	80f3      	strh	r3, [r6, #6]
 801614e:	3608      	adds	r6, #8
 8016150:	42b0      	cmp	r0, r6
 8016152:	d1ec      	bne.n	801612e <arm_cfft_radix4by2_q15+0xc6>
 8016154:	b007      	add	sp, #28
 8016156:	bc3c      	pop	{r2, r3, r4, r5}
 8016158:	4690      	mov	r8, r2
 801615a:	4699      	mov	r9, r3
 801615c:	46a2      	mov	sl, r4
 801615e:	46ab      	mov	fp, r5
 8016160:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016162:	9c02      	ldr	r4, [sp, #8]
 8016164:	2302      	movs	r3, #2
 8016166:	0020      	movs	r0, r4
 8016168:	2100      	movs	r1, #0
 801616a:	0015      	movs	r5, r2
 801616c:	f000 f902 	bl	8016374 <arm_radix4_butterfly_q15>
 8016170:	46a4      	mov	ip, r4
 8016172:	9b03      	ldr	r3, [sp, #12]
 8016174:	002a      	movs	r2, r5
 8016176:	0058      	lsls	r0, r3, #1
 8016178:	4460      	add	r0, ip
 801617a:	2302      	movs	r3, #2
 801617c:	2100      	movs	r1, #0
 801617e:	f000 f8f9 	bl	8016374 <arm_radix4_butterfly_q15>
 8016182:	e7e7      	b.n	8016154 <arm_cfft_radix4by2_q15+0xec>

08016184 <arm_cfft_radix4by2_inverse_q15>:
 8016184:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016186:	465f      	mov	r7, fp
 8016188:	4644      	mov	r4, r8
 801618a:	4656      	mov	r6, sl
 801618c:	464d      	mov	r5, r9
 801618e:	b4f0      	push	{r4, r5, r6, r7}
 8016190:	084b      	lsrs	r3, r1, #1
 8016192:	b087      	sub	sp, #28
 8016194:	9103      	str	r1, [sp, #12]
 8016196:	0007      	movs	r7, r0
 8016198:	9002      	str	r0, [sp, #8]
 801619a:	0014      	movs	r4, r2
 801619c:	9204      	str	r2, [sp, #16]
 801619e:	1e19      	subs	r1, r3, #0
 80161a0:	9305      	str	r3, [sp, #20]
 80161a2:	d100      	bne.n	80161a6 <arm_cfft_radix4by2_inverse_q15+0x22>
 80161a4:	e070      	b.n	8016288 <arm_cfft_radix4by2_inverse_q15+0x104>
 80161a6:	008a      	lsls	r2, r1, #2
 80161a8:	4691      	mov	r9, r2
 80161aa:	0022      	movs	r2, r4
 80161ac:	0003      	movs	r3, r0
 80161ae:	444a      	add	r2, r9
 80161b0:	4692      	mov	sl, r2
 80161b2:	464d      	mov	r5, r9
 80161b4:	4684      	mov	ip, r0
 80161b6:	3302      	adds	r3, #2
 80161b8:	2200      	movs	r2, #0
 80161ba:	5eb9      	ldrsh	r1, [r7, r2]
 80161bc:	2202      	movs	r2, #2
 80161be:	5ea0      	ldrsh	r0, [r4, r2]
 80161c0:	2200      	movs	r2, #0
 80161c2:	5ea6      	ldrsh	r6, [r4, r2]
 80161c4:	104a      	asrs	r2, r1, #1
 80161c6:	4691      	mov	r9, r2
 80161c8:	5f79      	ldrsh	r1, [r7, r5]
 80161ca:	464a      	mov	r2, r9
 80161cc:	1049      	asrs	r1, r1, #1
 80161ce:	1852      	adds	r2, r2, r1
 80161d0:	1052      	asrs	r2, r2, #1
 80161d2:	803a      	strh	r2, [r7, #0]
 80161d4:	9001      	str	r0, [sp, #4]
 80161d6:	2000      	movs	r0, #0
 80161d8:	5e1a      	ldrsh	r2, [r3, r0]
 80161da:	3404      	adds	r4, #4
 80161dc:	1052      	asrs	r2, r2, #1
 80161de:	4690      	mov	r8, r2
 80161e0:	5f5a      	ldrsh	r2, [r3, r5]
 80161e2:	1052      	asrs	r2, r2, #1
 80161e4:	4693      	mov	fp, r2
 80161e6:	44c3      	add	fp, r8
 80161e8:	4658      	mov	r0, fp
 80161ea:	1040      	asrs	r0, r0, #1
 80161ec:	8018      	strh	r0, [r3, #0]
 80161ee:	4648      	mov	r0, r9
 80161f0:	1a41      	subs	r1, r0, r1
 80161f2:	4640      	mov	r0, r8
 80161f4:	1a82      	subs	r2, r0, r2
 80161f6:	0030      	movs	r0, r6
 80161f8:	4348      	muls	r0, r1
 80161fa:	1400      	asrs	r0, r0, #16
 80161fc:	4681      	mov	r9, r0
 80161fe:	9801      	ldr	r0, [sp, #4]
 8016200:	4693      	mov	fp, r2
 8016202:	4350      	muls	r0, r2
 8016204:	1400      	asrs	r0, r0, #16
 8016206:	4680      	mov	r8, r0
 8016208:	4648      	mov	r0, r9
 801620a:	4642      	mov	r2, r8
 801620c:	1a80      	subs	r0, r0, r2
 801620e:	465a      	mov	r2, fp
 8016210:	5378      	strh	r0, [r7, r5]
 8016212:	9801      	ldr	r0, [sp, #4]
 8016214:	4372      	muls	r2, r6
 8016216:	4348      	muls	r0, r1
 8016218:	1412      	asrs	r2, r2, #16
 801621a:	1401      	asrs	r1, r0, #16
 801621c:	1852      	adds	r2, r2, r1
 801621e:	535a      	strh	r2, [r3, r5]
 8016220:	3704      	adds	r7, #4
 8016222:	3304      	adds	r3, #4
 8016224:	4554      	cmp	r4, sl
 8016226:	d1c7      	bne.n	80161b8 <arm_cfft_radix4by2_inverse_q15+0x34>
 8016228:	9d05      	ldr	r5, [sp, #20]
 801622a:	9c02      	ldr	r4, [sp, #8]
 801622c:	9f04      	ldr	r7, [sp, #16]
 801622e:	2302      	movs	r3, #2
 8016230:	003a      	movs	r2, r7
 8016232:	0029      	movs	r1, r5
 8016234:	0020      	movs	r0, r4
 8016236:	4666      	mov	r6, ip
 8016238:	f000 fc3c 	bl	8016ab4 <arm_radix4_butterfly_inverse_q15>
 801623c:	46a4      	mov	ip, r4
 801623e:	9903      	ldr	r1, [sp, #12]
 8016240:	2302      	movs	r3, #2
 8016242:	0048      	lsls	r0, r1, #1
 8016244:	4460      	add	r0, ip
 8016246:	003a      	movs	r2, r7
 8016248:	0029      	movs	r1, r5
 801624a:	f000 fc33 	bl	8016ab4 <arm_radix4_butterfly_inverse_q15>
 801624e:	46a4      	mov	ip, r4
 8016250:	00e8      	lsls	r0, r5, #3
 8016252:	4460      	add	r0, ip
 8016254:	2300      	movs	r3, #0
 8016256:	5ef4      	ldrsh	r4, [r6, r3]
 8016258:	2302      	movs	r3, #2
 801625a:	5ef1      	ldrsh	r1, [r6, r3]
 801625c:	2304      	movs	r3, #4
 801625e:	5ef2      	ldrsh	r2, [r6, r3]
 8016260:	2506      	movs	r5, #6
 8016262:	5f73      	ldrsh	r3, [r6, r5]
 8016264:	0064      	lsls	r4, r4, #1
 8016266:	0049      	lsls	r1, r1, #1
 8016268:	0052      	lsls	r2, r2, #1
 801626a:	005b      	lsls	r3, r3, #1
 801626c:	8034      	strh	r4, [r6, #0]
 801626e:	8071      	strh	r1, [r6, #2]
 8016270:	80b2      	strh	r2, [r6, #4]
 8016272:	80f3      	strh	r3, [r6, #6]
 8016274:	3608      	adds	r6, #8
 8016276:	42b0      	cmp	r0, r6
 8016278:	d1ec      	bne.n	8016254 <arm_cfft_radix4by2_inverse_q15+0xd0>
 801627a:	b007      	add	sp, #28
 801627c:	bc3c      	pop	{r2, r3, r4, r5}
 801627e:	4690      	mov	r8, r2
 8016280:	4699      	mov	r9, r3
 8016282:	46a2      	mov	sl, r4
 8016284:	46ab      	mov	fp, r5
 8016286:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016288:	9c02      	ldr	r4, [sp, #8]
 801628a:	2302      	movs	r3, #2
 801628c:	0020      	movs	r0, r4
 801628e:	2100      	movs	r1, #0
 8016290:	0015      	movs	r5, r2
 8016292:	f000 fc0f 	bl	8016ab4 <arm_radix4_butterfly_inverse_q15>
 8016296:	46a4      	mov	ip, r4
 8016298:	9b03      	ldr	r3, [sp, #12]
 801629a:	002a      	movs	r2, r5
 801629c:	0058      	lsls	r0, r3, #1
 801629e:	4460      	add	r0, ip
 80162a0:	2302      	movs	r3, #2
 80162a2:	2100      	movs	r1, #0
 80162a4:	f000 fc06 	bl	8016ab4 <arm_radix4_butterfly_inverse_q15>
 80162a8:	e7e7      	b.n	801627a <arm_cfft_radix4by2_inverse_q15+0xf6>
 80162aa:	46c0      	nop			@ (mov r8, r8)

080162ac <arm_cfft_q15>:
 80162ac:	b570      	push	{r4, r5, r6, lr}
 80162ae:	001e      	movs	r6, r3
 80162b0:	2380      	movs	r3, #128	@ 0x80
 80162b2:	000d      	movs	r5, r1
 80162b4:	0004      	movs	r4, r0
 80162b6:	8801      	ldrh	r1, [r0, #0]
 80162b8:	005b      	lsls	r3, r3, #1
 80162ba:	2a01      	cmp	r2, #1
 80162bc:	d028      	beq.n	8016310 <arm_cfft_q15+0x64>
 80162be:	4299      	cmp	r1, r3
 80162c0:	d020      	beq.n	8016304 <arm_cfft_q15+0x58>
 80162c2:	d812      	bhi.n	80162ea <arm_cfft_q15+0x3e>
 80162c4:	2920      	cmp	r1, #32
 80162c6:	d004      	beq.n	80162d2 <arm_cfft_q15+0x26>
 80162c8:	d949      	bls.n	801635e <arm_cfft_q15+0xb2>
 80162ca:	2940      	cmp	r1, #64	@ 0x40
 80162cc:	d01a      	beq.n	8016304 <arm_cfft_q15+0x58>
 80162ce:	2980      	cmp	r1, #128	@ 0x80
 80162d0:	d103      	bne.n	80162da <arm_cfft_q15+0x2e>
 80162d2:	6862      	ldr	r2, [r4, #4]
 80162d4:	0028      	movs	r0, r5
 80162d6:	f7ff fec7 	bl	8016068 <arm_cfft_radix4by2_q15>
 80162da:	2e00      	cmp	r6, #0
 80162dc:	d004      	beq.n	80162e8 <arm_cfft_q15+0x3c>
 80162de:	68a2      	ldr	r2, [r4, #8]
 80162e0:	89a1      	ldrh	r1, [r4, #12]
 80162e2:	0028      	movs	r0, r5
 80162e4:	f7e9 ff25 	bl	8000132 <arm_bitreversal_16>
 80162e8:	bd70      	pop	{r4, r5, r6, pc}
 80162ea:	2380      	movs	r3, #128	@ 0x80
 80162ec:	00db      	lsls	r3, r3, #3
 80162ee:	4299      	cmp	r1, r3
 80162f0:	d008      	beq.n	8016304 <arm_cfft_q15+0x58>
 80162f2:	d92f      	bls.n	8016354 <arm_cfft_q15+0xa8>
 80162f4:	2380      	movs	r3, #128	@ 0x80
 80162f6:	011b      	lsls	r3, r3, #4
 80162f8:	4299      	cmp	r1, r3
 80162fa:	d0ea      	beq.n	80162d2 <arm_cfft_q15+0x26>
 80162fc:	2380      	movs	r3, #128	@ 0x80
 80162fe:	015b      	lsls	r3, r3, #5
 8016300:	4299      	cmp	r1, r3
 8016302:	d1ea      	bne.n	80162da <arm_cfft_q15+0x2e>
 8016304:	2301      	movs	r3, #1
 8016306:	6862      	ldr	r2, [r4, #4]
 8016308:	0028      	movs	r0, r5
 801630a:	f000 f833 	bl	8016374 <arm_radix4_butterfly_q15>
 801630e:	e7e4      	b.n	80162da <arm_cfft_q15+0x2e>
 8016310:	4299      	cmp	r1, r3
 8016312:	d019      	beq.n	8016348 <arm_cfft_q15+0x9c>
 8016314:	d80b      	bhi.n	801632e <arm_cfft_q15+0x82>
 8016316:	2920      	cmp	r1, #32
 8016318:	d004      	beq.n	8016324 <arm_cfft_q15+0x78>
 801631a:	d928      	bls.n	801636e <arm_cfft_q15+0xc2>
 801631c:	2940      	cmp	r1, #64	@ 0x40
 801631e:	d013      	beq.n	8016348 <arm_cfft_q15+0x9c>
 8016320:	2980      	cmp	r1, #128	@ 0x80
 8016322:	d1da      	bne.n	80162da <arm_cfft_q15+0x2e>
 8016324:	6862      	ldr	r2, [r4, #4]
 8016326:	0028      	movs	r0, r5
 8016328:	f7ff ff2c 	bl	8016184 <arm_cfft_radix4by2_inverse_q15>
 801632c:	e7d5      	b.n	80162da <arm_cfft_q15+0x2e>
 801632e:	2380      	movs	r3, #128	@ 0x80
 8016330:	00db      	lsls	r3, r3, #3
 8016332:	4299      	cmp	r1, r3
 8016334:	d008      	beq.n	8016348 <arm_cfft_q15+0x9c>
 8016336:	d915      	bls.n	8016364 <arm_cfft_q15+0xb8>
 8016338:	2380      	movs	r3, #128	@ 0x80
 801633a:	011b      	lsls	r3, r3, #4
 801633c:	4299      	cmp	r1, r3
 801633e:	d0f1      	beq.n	8016324 <arm_cfft_q15+0x78>
 8016340:	2380      	movs	r3, #128	@ 0x80
 8016342:	015b      	lsls	r3, r3, #5
 8016344:	4299      	cmp	r1, r3
 8016346:	d1c8      	bne.n	80162da <arm_cfft_q15+0x2e>
 8016348:	2301      	movs	r3, #1
 801634a:	6862      	ldr	r2, [r4, #4]
 801634c:	0028      	movs	r0, r5
 801634e:	f000 fbb1 	bl	8016ab4 <arm_radix4_butterfly_inverse_q15>
 8016352:	e7c2      	b.n	80162da <arm_cfft_q15+0x2e>
 8016354:	2380      	movs	r3, #128	@ 0x80
 8016356:	009b      	lsls	r3, r3, #2
 8016358:	4299      	cmp	r1, r3
 801635a:	d0ba      	beq.n	80162d2 <arm_cfft_q15+0x26>
 801635c:	e7bd      	b.n	80162da <arm_cfft_q15+0x2e>
 801635e:	2910      	cmp	r1, #16
 8016360:	d1bb      	bne.n	80162da <arm_cfft_q15+0x2e>
 8016362:	e7cf      	b.n	8016304 <arm_cfft_q15+0x58>
 8016364:	2380      	movs	r3, #128	@ 0x80
 8016366:	009b      	lsls	r3, r3, #2
 8016368:	4299      	cmp	r1, r3
 801636a:	d0db      	beq.n	8016324 <arm_cfft_q15+0x78>
 801636c:	e7b5      	b.n	80162da <arm_cfft_q15+0x2e>
 801636e:	2910      	cmp	r1, #16
 8016370:	d1b3      	bne.n	80162da <arm_cfft_q15+0x2e>
 8016372:	e7e9      	b.n	8016348 <arm_cfft_q15+0x9c>

08016374 <arm_radix4_butterfly_q15>:
 8016374:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016376:	4656      	mov	r6, sl
 8016378:	464d      	mov	r5, r9
 801637a:	465f      	mov	r7, fp
 801637c:	4644      	mov	r4, r8
 801637e:	b4f0      	push	{r4, r5, r6, r7}
 8016380:	b0ab      	sub	sp, #172	@ 0xac
 8016382:	9114      	str	r1, [sp, #80]	@ 0x50
 8016384:	0889      	lsrs	r1, r1, #2
 8016386:	000d      	movs	r5, r1
 8016388:	9122      	str	r1, [sp, #136]	@ 0x88
 801638a:	0001      	movs	r1, r0
 801638c:	9028      	str	r0, [sp, #160]	@ 0xa0
 801638e:	9020      	str	r0, [sp, #128]	@ 0x80
 8016390:	00a8      	lsls	r0, r5, #2
 8016392:	0004      	movs	r4, r0
 8016394:	9003      	str	r0, [sp, #12]
 8016396:	0008      	movs	r0, r1
 8016398:	4682      	mov	sl, r0
 801639a:	0016      	movs	r6, r2
 801639c:	9229      	str	r2, [sp, #164]	@ 0xa4
 801639e:	1ca2      	adds	r2, r4, #2
 80163a0:	4689      	mov	r9, r1
 80163a2:	4492      	add	sl, r2
 80163a4:	00d9      	lsls	r1, r3, #3
 80163a6:	005a      	lsls	r2, r3, #1
 80163a8:	9108      	str	r1, [sp, #32]
 80163aa:	0099      	lsls	r1, r3, #2
 80163ac:	18d3      	adds	r3, r2, r3
 80163ae:	46a4      	mov	ip, r4
 80163b0:	9107      	str	r1, [sp, #28]
 80163b2:	0099      	lsls	r1, r3, #2
 80163b4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80163b6:	00e9      	lsls	r1, r5, #3
 80163b8:	468b      	mov	fp, r1
 80163ba:	44e1      	add	r9, ip
 80163bc:	44cc      	add	ip, r9
 80163be:	4661      	mov	r1, ip
 80163c0:	465b      	mov	r3, fp
 80163c2:	9001      	str	r0, [sp, #4]
 80163c4:	464a      	mov	r2, r9
 80163c6:	4650      	mov	r0, sl
 80163c8:	910a      	str	r1, [sp, #40]	@ 0x28
 80163ca:	9606      	str	r6, [sp, #24]
 80163cc:	9604      	str	r6, [sp, #16]
 80163ce:	9605      	str	r6, [sp, #20]
 80163d0:	9302      	str	r3, [sp, #8]
 80163d2:	9c01      	ldr	r4, [sp, #4]
 80163d4:	9e03      	ldr	r6, [sp, #12]
 80163d6:	2300      	movs	r3, #0
 80163d8:	5ee1      	ldrsh	r1, [r4, r3]
 80163da:	2700      	movs	r7, #0
 80163dc:	5fd5      	ldrsh	r5, [r2, r7]
 80163de:	108b      	asrs	r3, r1, #2
 80163e0:	4698      	mov	r8, r3
 80163e2:	2102      	movs	r1, #2
 80163e4:	5e63      	ldrsh	r3, [r4, r1]
 80163e6:	109b      	asrs	r3, r3, #2
 80163e8:	469c      	mov	ip, r3
 80163ea:	0033      	movs	r3, r6
 80163ec:	5ed1      	ldrsh	r1, [r2, r3]
 80163ee:	5f83      	ldrsh	r3, [r0, r6]
 80163f0:	4644      	mov	r4, r8
 80163f2:	1089      	asrs	r1, r1, #2
 80163f4:	1a64      	subs	r4, r4, r1
 80163f6:	46a3      	mov	fp, r4
 80163f8:	4664      	mov	r4, ip
 80163fa:	109b      	asrs	r3, r3, #2
 80163fc:	1ae4      	subs	r4, r4, r3
 80163fe:	9409      	str	r4, [sp, #36]	@ 0x24
 8016400:	10ac      	asrs	r4, r5, #2
 8016402:	46a2      	mov	sl, r4
 8016404:	2700      	movs	r7, #0
 8016406:	5fc4      	ldrsh	r4, [r0, r7]
 8016408:	4441      	add	r1, r8
 801640a:	10a4      	asrs	r4, r4, #2
 801640c:	46a1      	mov	r9, r4
 801640e:	9c02      	ldr	r4, [sp, #8]
 8016410:	4463      	add	r3, ip
 8016412:	0027      	movs	r7, r4
 8016414:	5fd5      	ldrsh	r5, [r2, r7]
 8016416:	0027      	movs	r7, r4
 8016418:	5fc4      	ldrsh	r4, [r0, r7]
 801641a:	10ad      	asrs	r5, r5, #2
 801641c:	4455      	add	r5, sl
 801641e:	104f      	asrs	r7, r1, #1
 8016420:	10a4      	asrs	r4, r4, #2
 8016422:	444c      	add	r4, r9
 8016424:	46b9      	mov	r9, r7
 8016426:	106f      	asrs	r7, r5, #1
 8016428:	46b8      	mov	r8, r7
 801642a:	44c8      	add	r8, r9
 801642c:	4647      	mov	r7, r8
 801642e:	46a2      	mov	sl, r4
 8016430:	9c01      	ldr	r4, [sp, #4]
 8016432:	1b49      	subs	r1, r1, r5
 8016434:	8027      	strh	r7, [r4, #0]
 8016436:	105f      	asrs	r7, r3, #1
 8016438:	46bc      	mov	ip, r7
 801643a:	4657      	mov	r7, sl
 801643c:	107f      	asrs	r7, r7, #1
 801643e:	46b8      	mov	r8, r7
 8016440:	44e0      	add	r8, ip
 8016442:	4647      	mov	r7, r8
 8016444:	8067      	strh	r7, [r4, #2]
 8016446:	4654      	mov	r4, sl
 8016448:	1b1b      	subs	r3, r3, r4
 801644a:	9c05      	ldr	r4, [sp, #20]
 801644c:	2500      	movs	r5, #0
 801644e:	5f67      	ldrsh	r7, [r4, r5]
 8016450:	46b9      	mov	r9, r7
 8016452:	2702      	movs	r7, #2
 8016454:	5fe5      	ldrsh	r5, [r4, r7]
 8016456:	2700      	movs	r7, #0
 8016458:	5fd4      	ldrsh	r4, [r2, r7]
 801645a:	10a7      	asrs	r7, r4, #2
 801645c:	46bc      	mov	ip, r7
 801645e:	2700      	movs	r7, #0
 8016460:	5fc4      	ldrsh	r4, [r0, r7]
 8016462:	10a7      	asrs	r7, r4, #2
 8016464:	464c      	mov	r4, r9
 8016466:	46ba      	mov	sl, r7
 8016468:	464f      	mov	r7, r9
 801646a:	434c      	muls	r4, r1
 801646c:	46a0      	mov	r8, r4
 801646e:	001c      	movs	r4, r3
 8016470:	4369      	muls	r1, r5
 8016472:	437b      	muls	r3, r7
 8016474:	9f02      	ldr	r7, [sp, #8]
 8016476:	1a5b      	subs	r3, r3, r1
 8016478:	0039      	movs	r1, r7
 801647a:	436c      	muls	r4, r5
 801647c:	4444      	add	r4, r8
 801647e:	1424      	asrs	r4, r4, #16
 8016480:	141b      	asrs	r3, r3, #16
 8016482:	8014      	strh	r4, [r2, #0]
 8016484:	8003      	strh	r3, [r0, #0]
 8016486:	5e53      	ldrsh	r3, [r2, r1]
 8016488:	4661      	mov	r1, ip
 801648a:	109b      	asrs	r3, r3, #2
 801648c:	1acb      	subs	r3, r1, r3
 801648e:	0039      	movs	r1, r7
 8016490:	5e41      	ldrsh	r1, [r0, r1]
 8016492:	4657      	mov	r7, sl
 8016494:	1089      	asrs	r1, r1, #2
 8016496:	1a79      	subs	r1, r7, r1
 8016498:	465f      	mov	r7, fp
 801649a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 801649c:	1a7f      	subs	r7, r7, r1
 801649e:	195c      	adds	r4, r3, r5
 80164a0:	1aed      	subs	r5, r5, r3
 80164a2:	4459      	add	r1, fp
 80164a4:	46ab      	mov	fp, r5
 80164a6:	9d04      	ldr	r5, [sp, #16]
 80164a8:	46b8      	mov	r8, r7
 80164aa:	2302      	movs	r3, #2
 80164ac:	5eef      	ldrsh	r7, [r5, r3]
 80164ae:	46bc      	mov	ip, r7
 80164b0:	2300      	movs	r3, #0
 80164b2:	5eef      	ldrsh	r7, [r5, r3]
 80164b4:	4665      	mov	r5, ip
 80164b6:	465b      	mov	r3, fp
 80164b8:	435d      	muls	r5, r3
 80164ba:	46b9      	mov	r9, r7
 80164bc:	46aa      	mov	sl, r5
 80164be:	003d      	movs	r5, r7
 80164c0:	4667      	mov	r7, ip
 80164c2:	434d      	muls	r5, r1
 80164c4:	4379      	muls	r1, r7
 80164c6:	464f      	mov	r7, r9
 80164c8:	437b      	muls	r3, r7
 80164ca:	4455      	add	r5, sl
 80164cc:	1a5b      	subs	r3, r3, r1
 80164ce:	142d      	asrs	r5, r5, #16
 80164d0:	141b      	asrs	r3, r3, #16
 80164d2:	5395      	strh	r5, [r2, r6]
 80164d4:	5383      	strh	r3, [r0, r6]
 80164d6:	9b06      	ldr	r3, [sp, #24]
 80164d8:	2602      	movs	r6, #2
 80164da:	5f99      	ldrsh	r1, [r3, r6]
 80164dc:	001e      	movs	r6, r3
 80164de:	2500      	movs	r5, #0
 80164e0:	5f5d      	ldrsh	r5, [r3, r5]
 80164e2:	0023      	movs	r3, r4
 80164e4:	434b      	muls	r3, r1
 80164e6:	469c      	mov	ip, r3
 80164e8:	4643      	mov	r3, r8
 80164ea:	436b      	muls	r3, r5
 80164ec:	9f02      	ldr	r7, [sp, #8]
 80164ee:	4463      	add	r3, ip
 80164f0:	141b      	asrs	r3, r3, #16
 80164f2:	53d3      	strh	r3, [r2, r7]
 80164f4:	4643      	mov	r3, r8
 80164f6:	436c      	muls	r4, r5
 80164f8:	434b      	muls	r3, r1
 80164fa:	1ae3      	subs	r3, r4, r3
 80164fc:	141b      	asrs	r3, r3, #16
 80164fe:	53c3      	strh	r3, [r0, r7]
 8016500:	9b01      	ldr	r3, [sp, #4]
 8016502:	9c05      	ldr	r4, [sp, #20]
 8016504:	3304      	adds	r3, #4
 8016506:	9301      	str	r3, [sp, #4]
 8016508:	9b08      	ldr	r3, [sp, #32]
 801650a:	9d04      	ldr	r5, [sp, #16]
 801650c:	469c      	mov	ip, r3
 801650e:	9b07      	ldr	r3, [sp, #28]
 8016510:	4464      	add	r4, ip
 8016512:	469c      	mov	ip, r3
 8016514:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8016516:	4465      	add	r5, ip
 8016518:	0033      	movs	r3, r6
 801651a:	468c      	mov	ip, r1
 801651c:	4463      	add	r3, ip
 801651e:	9306      	str	r3, [sp, #24]
 8016520:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016522:	3204      	adds	r2, #4
 8016524:	3004      	adds	r0, #4
 8016526:	9405      	str	r4, [sp, #20]
 8016528:	9504      	str	r5, [sp, #16]
 801652a:	429a      	cmp	r2, r3
 801652c:	d000      	beq.n	8016530 <arm_radix4_butterfly_q15+0x1bc>
 801652e:	e750      	b.n	80163d2 <arm_radix4_butterfly_q15+0x5e>
 8016530:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8016532:	9b07      	ldr	r3, [sp, #28]
 8016534:	2a04      	cmp	r2, #4
 8016536:	d800      	bhi.n	801653a <arm_radix4_butterfly_q15+0x1c6>
 8016538:	e198      	b.n	801686c <arm_radix4_butterfly_q15+0x4f8>
 801653a:	9219      	str	r2, [sp, #100]	@ 0x64
 801653c:	9227      	str	r2, [sp, #156]	@ 0x9c
 801653e:	4ad9      	ldr	r2, [pc, #868]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 8016540:	4692      	mov	sl, r2
 8016542:	4ad9      	ldr	r2, [pc, #868]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 8016544:	4693      	mov	fp, r2
 8016546:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8016548:	0892      	lsrs	r2, r2, #2
 801654a:	0011      	movs	r1, r2
 801654c:	9222      	str	r2, [sp, #136]	@ 0x88
 801654e:	3a01      	subs	r2, #1
 8016550:	9224      	str	r2, [sp, #144]	@ 0x90
 8016552:	009a      	lsls	r2, r3, #2
 8016554:	9221      	str	r2, [sp, #132]	@ 0x84
 8016556:	00da      	lsls	r2, r3, #3
 8016558:	9223      	str	r2, [sp, #140]	@ 0x8c
 801655a:	005a      	lsls	r2, r3, #1
 801655c:	18d3      	adds	r3, r2, r3
 801655e:	009b      	lsls	r3, r3, #2
 8016560:	9325      	str	r3, [sp, #148]	@ 0x94
 8016562:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016564:	009b      	lsls	r3, r3, #2
 8016566:	931a      	str	r3, [sp, #104]	@ 0x68
 8016568:	00cb      	lsls	r3, r1, #3
 801656a:	4699      	mov	r9, r3
 801656c:	008b      	lsls	r3, r1, #2
 801656e:	9303      	str	r3, [sp, #12]
 8016570:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8016572:	931f      	str	r3, [sp, #124]	@ 0x7c
 8016574:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8016576:	931e      	str	r3, [sp, #120]	@ 0x78
 8016578:	931d      	str	r3, [sp, #116]	@ 0x74
 801657a:	931c      	str	r3, [sp, #112]	@ 0x70
 801657c:	2300      	movs	r3, #0
 801657e:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016580:	464b      	mov	r3, r9
 8016582:	3302      	adds	r3, #2
 8016584:	9326      	str	r3, [sp, #152]	@ 0x98
 8016586:	464b      	mov	r3, r9
 8016588:	9302      	str	r3, [sp, #8]
 801658a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801658c:	2100      	movs	r1, #0
 801658e:	5e5a      	ldrsh	r2, [r3, r1]
 8016590:	9208      	str	r2, [sp, #32]
 8016592:	2202      	movs	r2, #2
 8016594:	5e9b      	ldrsh	r3, [r3, r2]
 8016596:	9311      	str	r3, [sp, #68]	@ 0x44
 8016598:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801659a:	2100      	movs	r1, #0
 801659c:	5e5a      	ldrsh	r2, [r3, r1]
 801659e:	9209      	str	r2, [sp, #36]	@ 0x24
 80165a0:	2202      	movs	r2, #2
 80165a2:	5e9b      	ldrsh	r3, [r3, r2]
 80165a4:	9312      	str	r3, [sp, #72]	@ 0x48
 80165a6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80165a8:	2100      	movs	r1, #0
 80165aa:	5e5a      	ldrsh	r2, [r3, r1]
 80165ac:	9215      	str	r2, [sp, #84]	@ 0x54
 80165ae:	2202      	movs	r2, #2
 80165b0:	5e9b      	ldrsh	r3, [r3, r2]
 80165b2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80165b4:	9313      	str	r3, [sp, #76]	@ 0x4c
 80165b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80165b8:	4293      	cmp	r3, r2
 80165ba:	d800      	bhi.n	80165be <arm_radix4_butterfly_q15+0x24a>
 80165bc:	e134      	b.n	8016828 <arm_radix4_butterfly_q15+0x4b4>
 80165be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80165c0:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 80165c2:	425b      	negs	r3, r3
 80165c4:	9318      	str	r3, [sp, #96]	@ 0x60
 80165c6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80165c8:	4694      	mov	ip, r2
 80165ca:	425b      	negs	r3, r3
 80165cc:	9317      	str	r3, [sp, #92]	@ 0x5c
 80165ce:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80165d0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80165d2:	425b      	negs	r3, r3
 80165d4:	9316      	str	r3, [sp, #88]	@ 0x58
 80165d6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80165d8:	920a      	str	r2, [sp, #40]	@ 0x28
 80165da:	0019      	movs	r1, r3
 80165dc:	9b03      	ldr	r3, [sp, #12]
 80165de:	4461      	add	r1, ip
 80165e0:	4698      	mov	r8, r3
 80165e2:	44e0      	add	r8, ip
 80165e4:	4643      	mov	r3, r8
 80165e6:	46e1      	mov	r9, ip
 80165e8:	9301      	str	r3, [sp, #4]
 80165ea:	4688      	mov	r8, r1
 80165ec:	e0a1      	b.n	8016732 <arm_radix4_butterfly_q15+0x3be>
 80165ee:	b200      	sxth	r0, r0
 80165f0:	1040      	asrs	r0, r0, #1
 80165f2:	2e00      	cmp	r6, #0
 80165f4:	dc00      	bgt.n	80165f8 <arm_radix4_butterfly_q15+0x284>
 80165f6:	e100      	b.n	80167fa <arm_radix4_butterfly_q15+0x486>
 80165f8:	b212      	sxth	r2, r2
 80165fa:	1052      	asrs	r2, r2, #1
 80165fc:	9e05      	ldr	r6, [sp, #20]
 80165fe:	2f00      	cmp	r7, #0
 8016600:	dc00      	bgt.n	8016604 <arm_radix4_butterfly_q15+0x290>
 8016602:	e101      	b.n	8016808 <arm_radix4_butterfly_q15+0x494>
 8016604:	b236      	sxth	r6, r6
 8016606:	1076      	asrs	r6, r6, #1
 8016608:	2d00      	cmp	r5, #0
 801660a:	dc00      	bgt.n	801660e <arm_radix4_butterfly_q15+0x29a>
 801660c:	e102      	b.n	8016814 <arm_radix4_butterfly_q15+0x4a0>
 801660e:	4649      	mov	r1, r9
 8016610:	1885      	adds	r5, r0, r2
 8016612:	b21b      	sxth	r3, r3
 8016614:	105b      	asrs	r3, r3, #1
 8016616:	106d      	asrs	r5, r5, #1
 8016618:	800d      	strh	r5, [r1, #0]
 801661a:	18f5      	adds	r5, r6, r3
 801661c:	106d      	asrs	r5, r5, #1
 801661e:	804d      	strh	r5, [r1, #2]
 8016620:	9901      	ldr	r1, [sp, #4]
 8016622:	1a80      	subs	r0, r0, r2
 8016624:	000a      	movs	r2, r1
 8016626:	2500      	movs	r5, #0
 8016628:	5f55      	ldrsh	r5, [r2, r5]
 801662a:	000a      	movs	r2, r1
 801662c:	1af3      	subs	r3, r6, r3
 801662e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8016630:	2602      	movs	r6, #2
 8016632:	5f96      	ldrsh	r6, [r2, r6]
 8016634:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016636:	435f      	muls	r7, r3
 8016638:	4342      	muls	r2, r0
 801663a:	19d7      	adds	r7, r2, r7
 801663c:	143f      	asrs	r7, r7, #16
 801663e:	800f      	strh	r7, [r1, #0]
 8016640:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8016642:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8016644:	4353      	muls	r3, r2
 8016646:	4348      	muls	r0, r1
 8016648:	9a01      	ldr	r2, [sp, #4]
 801664a:	18c0      	adds	r0, r0, r3
 801664c:	1400      	asrs	r0, r0, #16
 801664e:	9b02      	ldr	r3, [sp, #8]
 8016650:	8050      	strh	r0, [r2, #2]
 8016652:	5ed3      	ldrsh	r3, [r2, r3]
 8016654:	1aed      	subs	r5, r5, r3
 8016656:	002b      	movs	r3, r5
 8016658:	4555      	cmp	r5, sl
 801665a:	dd00      	ble.n	801665e <arm_radix4_butterfly_q15+0x2ea>
 801665c:	4b91      	ldr	r3, [pc, #580]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 801665e:	002f      	movs	r7, r5
 8016660:	455d      	cmp	r5, fp
 8016662:	da00      	bge.n	8016666 <arm_radix4_butterfly_q15+0x2f2>
 8016664:	4f90      	ldr	r7, [pc, #576]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 8016666:	4642      	mov	r2, r8
 8016668:	9903      	ldr	r1, [sp, #12]
 801666a:	5e52      	ldrsh	r2, [r2, r1]
 801666c:	1ab6      	subs	r6, r6, r2
 801666e:	0030      	movs	r0, r6
 8016670:	4556      	cmp	r6, sl
 8016672:	dd00      	ble.n	8016676 <arm_radix4_butterfly_q15+0x302>
 8016674:	488b      	ldr	r0, [pc, #556]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 8016676:	46b4      	mov	ip, r6
 8016678:	455e      	cmp	r6, fp
 801667a:	da01      	bge.n	8016680 <arm_radix4_butterfly_q15+0x30c>
 801667c:	4a8a      	ldr	r2, [pc, #552]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 801667e:	4694      	mov	ip, r2
 8016680:	9a07      	ldr	r2, [sp, #28]
 8016682:	2c00      	cmp	r4, #0
 8016684:	dc00      	bgt.n	8016688 <arm_radix4_butterfly_q15+0x314>
 8016686:	e0cd      	b.n	8016824 <arm_radix4_butterfly_q15+0x4b0>
 8016688:	b212      	sxth	r2, r2
 801668a:	1052      	asrs	r2, r2, #1
 801668c:	b292      	uxth	r2, r2
 801668e:	2e00      	cmp	r6, #0
 8016690:	dc00      	bgt.n	8016694 <arm_radix4_butterfly_q15+0x320>
 8016692:	e0c5      	b.n	8016820 <arm_radix4_butterfly_q15+0x4ac>
 8016694:	b204      	sxth	r4, r0
 8016696:	9904      	ldr	r1, [sp, #16]
 8016698:	1064      	asrs	r4, r4, #1
 801669a:	b2a4      	uxth	r4, r4
 801669c:	9806      	ldr	r0, [sp, #24]
 801669e:	2900      	cmp	r1, #0
 80166a0:	dc00      	bgt.n	80166a4 <arm_radix4_butterfly_q15+0x330>
 80166a2:	e0bb      	b.n	801681c <arm_radix4_butterfly_q15+0x4a8>
 80166a4:	b200      	sxth	r0, r0
 80166a6:	1040      	asrs	r0, r0, #1
 80166a8:	b280      	uxth	r0, r0
 80166aa:	2d00      	cmp	r5, #0
 80166ac:	dc00      	bgt.n	80166b0 <arm_radix4_butterfly_q15+0x33c>
 80166ae:	e0b3      	b.n	8016818 <arm_radix4_butterfly_q15+0x4a4>
 80166b0:	1916      	adds	r6, r2, r4
 80166b2:	9f08      	ldr	r7, [sp, #32]
 80166b4:	b236      	sxth	r6, r6
 80166b6:	4377      	muls	r7, r6
 80166b8:	b21b      	sxth	r3, r3
 80166ba:	46bc      	mov	ip, r7
 80166bc:	105b      	asrs	r3, r3, #1
 80166be:	b29b      	uxth	r3, r3
 80166c0:	1ac5      	subs	r5, r0, r3
 80166c2:	9304      	str	r3, [sp, #16]
 80166c4:	464b      	mov	r3, r9
 80166c6:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80166c8:	b22d      	sxth	r5, r5
 80166ca:	436f      	muls	r7, r5
 80166cc:	9902      	ldr	r1, [sp, #8]
 80166ce:	4467      	add	r7, ip
 80166d0:	143f      	asrs	r7, r7, #16
 80166d2:	525f      	strh	r7, [r3, r1]
 80166d4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80166d6:	9f08      	ldr	r7, [sp, #32]
 80166d8:	435e      	muls	r6, r3
 80166da:	4643      	mov	r3, r8
 80166dc:	437d      	muls	r5, r7
 80166de:	1976      	adds	r6, r6, r5
 80166e0:	1436      	asrs	r6, r6, #16
 80166e2:	801e      	strh	r6, [r3, #0]
 80166e4:	9d15      	ldr	r5, [sp, #84]	@ 0x54
 80166e6:	9b04      	ldr	r3, [sp, #16]
 80166e8:	1b12      	subs	r2, r2, r4
 80166ea:	18c3      	adds	r3, r0, r3
 80166ec:	0028      	movs	r0, r5
 80166ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 80166f0:	b21b      	sxth	r3, r3
 80166f2:	b212      	sxth	r2, r2
 80166f4:	435c      	muls	r4, r3
 80166f6:	4350      	muls	r0, r2
 80166f8:	1820      	adds	r0, r4, r0
 80166fa:	9c01      	ldr	r4, [sp, #4]
 80166fc:	1400      	asrs	r0, r0, #16
 80166fe:	5260      	strh	r0, [r4, r1]
 8016700:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8016702:	436b      	muls	r3, r5
 8016704:	434a      	muls	r2, r1
 8016706:	18d2      	adds	r2, r2, r3
 8016708:	4643      	mov	r3, r8
 801670a:	9903      	ldr	r1, [sp, #12]
 801670c:	1412      	asrs	r2, r2, #16
 801670e:	525a      	strh	r2, [r3, r1]
 8016710:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016712:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016714:	4694      	mov	ip, r2
 8016716:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016718:	4463      	add	r3, ip
 801671a:	0019      	movs	r1, r3
 801671c:	4694      	mov	ip, r2
 801671e:	930a      	str	r3, [sp, #40]	@ 0x28
 8016720:	0023      	movs	r3, r4
 8016722:	4463      	add	r3, ip
 8016724:	9301      	str	r3, [sp, #4]
 8016726:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8016728:	44e1      	add	r9, ip
 801672a:	44e0      	add	r8, ip
 801672c:	001a      	movs	r2, r3
 801672e:	428a      	cmp	r2, r1
 8016730:	d97a      	bls.n	8016828 <arm_radix4_butterfly_q15+0x4b4>
 8016732:	464b      	mov	r3, r9
 8016734:	2500      	movs	r5, #0
 8016736:	5f5d      	ldrsh	r5, [r3, r5]
 8016738:	464b      	mov	r3, r9
 801673a:	9a02      	ldr	r2, [sp, #8]
 801673c:	5e9c      	ldrsh	r4, [r3, r2]
 801673e:	192b      	adds	r3, r5, r4
 8016740:	469c      	mov	ip, r3
 8016742:	0018      	movs	r0, r3
 8016744:	4553      	cmp	r3, sl
 8016746:	dd00      	ble.n	801674a <arm_radix4_butterfly_q15+0x3d6>
 8016748:	4856      	ldr	r0, [pc, #344]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 801674a:	4663      	mov	r3, ip
 801674c:	930d      	str	r3, [sp, #52]	@ 0x34
 801674e:	45dc      	cmp	ip, fp
 8016750:	da01      	bge.n	8016756 <arm_radix4_butterfly_q15+0x3e2>
 8016752:	4b55      	ldr	r3, [pc, #340]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 8016754:	930d      	str	r3, [sp, #52]	@ 0x34
 8016756:	464b      	mov	r3, r9
 8016758:	2202      	movs	r2, #2
 801675a:	5e9a      	ldrsh	r2, [r3, r2]
 801675c:	4643      	mov	r3, r8
 801675e:	2100      	movs	r1, #0
 8016760:	5e5b      	ldrsh	r3, [r3, r1]
 8016762:	18d7      	adds	r7, r2, r3
 8016764:	9705      	str	r7, [sp, #20]
 8016766:	4557      	cmp	r7, sl
 8016768:	dd01      	ble.n	801676e <arm_radix4_butterfly_q15+0x3fa>
 801676a:	494e      	ldr	r1, [pc, #312]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 801676c:	9105      	str	r1, [sp, #20]
 801676e:	970c      	str	r7, [sp, #48]	@ 0x30
 8016770:	455f      	cmp	r7, fp
 8016772:	da01      	bge.n	8016778 <arm_radix4_butterfly_q15+0x404>
 8016774:	494c      	ldr	r1, [pc, #304]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 8016776:	910c      	str	r1, [sp, #48]	@ 0x30
 8016778:	1b2c      	subs	r4, r5, r4
 801677a:	9407      	str	r4, [sp, #28]
 801677c:	4554      	cmp	r4, sl
 801677e:	dd01      	ble.n	8016784 <arm_radix4_butterfly_q15+0x410>
 8016780:	4948      	ldr	r1, [pc, #288]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 8016782:	9107      	str	r1, [sp, #28]
 8016784:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016786:	455c      	cmp	r4, fp
 8016788:	da01      	bge.n	801678e <arm_radix4_butterfly_q15+0x41a>
 801678a:	4947      	ldr	r1, [pc, #284]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 801678c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801678e:	1ad3      	subs	r3, r2, r3
 8016790:	9304      	str	r3, [sp, #16]
 8016792:	9306      	str	r3, [sp, #24]
 8016794:	4553      	cmp	r3, sl
 8016796:	dd02      	ble.n	801679e <arm_radix4_butterfly_q15+0x42a>
 8016798:	4b42      	ldr	r3, [pc, #264]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 801679a:	9306      	str	r3, [sp, #24]
 801679c:	9b04      	ldr	r3, [sp, #16]
 801679e:	930e      	str	r3, [sp, #56]	@ 0x38
 80167a0:	455b      	cmp	r3, fp
 80167a2:	da01      	bge.n	80167a8 <arm_radix4_butterfly_q15+0x434>
 80167a4:	4b40      	ldr	r3, [pc, #256]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 80167a6:	930e      	str	r3, [sp, #56]	@ 0x38
 80167a8:	9a01      	ldr	r2, [sp, #4]
 80167aa:	2300      	movs	r3, #0
 80167ac:	5ed6      	ldrsh	r6, [r2, r3]
 80167ae:	9b02      	ldr	r3, [sp, #8]
 80167b0:	5ed3      	ldrsh	r3, [r2, r3]
 80167b2:	18f6      	adds	r6, r6, r3
 80167b4:	0032      	movs	r2, r6
 80167b6:	4556      	cmp	r6, sl
 80167b8:	dd00      	ble.n	80167bc <arm_radix4_butterfly_q15+0x448>
 80167ba:	4a3a      	ldr	r2, [pc, #232]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 80167bc:	960f      	str	r6, [sp, #60]	@ 0x3c
 80167be:	455e      	cmp	r6, fp
 80167c0:	da01      	bge.n	80167c6 <arm_radix4_butterfly_q15+0x452>
 80167c2:	4b39      	ldr	r3, [pc, #228]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 80167c4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80167c6:	9b01      	ldr	r3, [sp, #4]
 80167c8:	9903      	ldr	r1, [sp, #12]
 80167ca:	2502      	movs	r5, #2
 80167cc:	5f5d      	ldrsh	r5, [r3, r5]
 80167ce:	4643      	mov	r3, r8
 80167d0:	5e5b      	ldrsh	r3, [r3, r1]
 80167d2:	18ed      	adds	r5, r5, r3
 80167d4:	002b      	movs	r3, r5
 80167d6:	4555      	cmp	r5, sl
 80167d8:	dd00      	ble.n	80167dc <arm_radix4_butterfly_q15+0x468>
 80167da:	4b32      	ldr	r3, [pc, #200]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 80167dc:	9510      	str	r5, [sp, #64]	@ 0x40
 80167de:	455d      	cmp	r5, fp
 80167e0:	da01      	bge.n	80167e6 <arm_radix4_butterfly_q15+0x472>
 80167e2:	4931      	ldr	r1, [pc, #196]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 80167e4:	9110      	str	r1, [sp, #64]	@ 0x40
 80167e6:	4661      	mov	r1, ip
 80167e8:	2900      	cmp	r1, #0
 80167ea:	dd00      	ble.n	80167ee <arm_radix4_butterfly_q15+0x47a>
 80167ec:	e6ff      	b.n	80165ee <arm_radix4_butterfly_q15+0x27a>
 80167ee:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80167f0:	b200      	sxth	r0, r0
 80167f2:	1040      	asrs	r0, r0, #1
 80167f4:	2e00      	cmp	r6, #0
 80167f6:	dd00      	ble.n	80167fa <arm_radix4_butterfly_q15+0x486>
 80167f8:	e6fe      	b.n	80165f8 <arm_radix4_butterfly_q15+0x284>
 80167fa:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80167fc:	9e05      	ldr	r6, [sp, #20]
 80167fe:	b212      	sxth	r2, r2
 8016800:	1052      	asrs	r2, r2, #1
 8016802:	2f00      	cmp	r7, #0
 8016804:	dd00      	ble.n	8016808 <arm_radix4_butterfly_q15+0x494>
 8016806:	e6fd      	b.n	8016604 <arm_radix4_butterfly_q15+0x290>
 8016808:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801680a:	b236      	sxth	r6, r6
 801680c:	1076      	asrs	r6, r6, #1
 801680e:	2d00      	cmp	r5, #0
 8016810:	dd00      	ble.n	8016814 <arm_radix4_butterfly_q15+0x4a0>
 8016812:	e6fc      	b.n	801660e <arm_radix4_butterfly_q15+0x29a>
 8016814:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016816:	e6fa      	b.n	801660e <arm_radix4_butterfly_q15+0x29a>
 8016818:	003b      	movs	r3, r7
 801681a:	e749      	b.n	80166b0 <arm_radix4_butterfly_q15+0x33c>
 801681c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801681e:	e741      	b.n	80166a4 <arm_radix4_butterfly_q15+0x330>
 8016820:	4660      	mov	r0, ip
 8016822:	e737      	b.n	8016694 <arm_radix4_butterfly_q15+0x320>
 8016824:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016826:	e72f      	b.n	8016688 <arm_radix4_butterfly_q15+0x314>
 8016828:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801682a:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 801682c:	468c      	mov	ip, r1
 801682e:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8016830:	4462      	add	r2, ip
 8016832:	468c      	mov	ip, r1
 8016834:	921c      	str	r2, [sp, #112]	@ 0x70
 8016836:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8016838:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801683a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801683c:	4462      	add	r2, ip
 801683e:	468c      	mov	ip, r1
 8016840:	921d      	str	r2, [sp, #116]	@ 0x74
 8016842:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8016844:	3301      	adds	r3, #1
 8016846:	4462      	add	r2, ip
 8016848:	921e      	str	r2, [sp, #120]	@ 0x78
 801684a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801684c:	931b      	str	r3, [sp, #108]	@ 0x6c
 801684e:	3204      	adds	r2, #4
 8016850:	921f      	str	r2, [sp, #124]	@ 0x7c
 8016852:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8016854:	4293      	cmp	r3, r2
 8016856:	d800      	bhi.n	801685a <arm_radix4_butterfly_q15+0x4e6>
 8016858:	e697      	b.n	801658a <arm_radix4_butterfly_q15+0x216>
 801685a:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801685c:	9922      	ldr	r1, [sp, #136]	@ 0x88
 801685e:	0892      	lsrs	r2, r2, #2
 8016860:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8016862:	9227      	str	r2, [sp, #156]	@ 0x9c
 8016864:	9119      	str	r1, [sp, #100]	@ 0x64
 8016866:	2a04      	cmp	r2, #4
 8016868:	d900      	bls.n	801686c <arm_radix4_butterfly_q15+0x4f8>
 801686a:	e66c      	b.n	8016546 <arm_radix4_butterfly_q15+0x1d2>
 801686c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801686e:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8016870:	0893      	lsrs	r3, r2, #2
 8016872:	0058      	lsls	r0, r3, #1
 8016874:	1a8a      	subs	r2, r1, r2
 8016876:	18c0      	adds	r0, r0, r3
 8016878:	920f      	str	r2, [sp, #60]	@ 0x3c
 801687a:	009a      	lsls	r2, r3, #2
 801687c:	00db      	lsls	r3, r3, #3
 801687e:	930e      	str	r3, [sp, #56]	@ 0x38
 8016880:	2300      	movs	r3, #0
 8016882:	9c28      	ldr	r4, [sp, #160]	@ 0xa0
 8016884:	9305      	str	r3, [sp, #20]
 8016886:	46a1      	mov	r9, r4
 8016888:	4b06      	ldr	r3, [pc, #24]	@ (80168a4 <arm_radix4_butterfly_q15+0x530>)
 801688a:	9202      	str	r2, [sp, #8]
 801688c:	469b      	mov	fp, r3
 801688e:	3202      	adds	r2, #2
 8016890:	4b05      	ldr	r3, [pc, #20]	@ (80168a8 <arm_radix4_butterfly_q15+0x534>)
 8016892:	4491      	add	r9, r2
 8016894:	46a0      	mov	r8, r4
 8016896:	469a      	mov	sl, r3
 8016898:	464b      	mov	r3, r9
 801689a:	0080      	lsls	r0, r0, #2
 801689c:	4480      	add	r8, r0
 801689e:	4640      	mov	r0, r8
 80168a0:	9301      	str	r3, [sp, #4]
 80168a2:	e08a      	b.n	80169ba <arm_radix4_butterfly_q15+0x646>
 80168a4:	00007fff 	.word	0x00007fff
 80168a8:	ffff8000 	.word	0xffff8000
 80168ac:	b21b      	sxth	r3, r3
 80168ae:	105b      	asrs	r3, r3, #1
 80168b0:	b29b      	uxth	r3, r3
 80168b2:	469c      	mov	ip, r3
 80168b4:	2d00      	cmp	r5, #0
 80168b6:	dc00      	bgt.n	80168ba <arm_radix4_butterfly_q15+0x546>
 80168b8:	e0e2      	b.n	8016a80 <arm_radix4_butterfly_q15+0x70c>
 80168ba:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80168bc:	b21b      	sxth	r3, r3
 80168be:	105b      	asrs	r3, r3, #1
 80168c0:	b29d      	uxth	r5, r3
 80168c2:	4663      	mov	r3, ip
 80168c4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80168c6:	195b      	adds	r3, r3, r5
 80168c8:	8033      	strh	r3, [r6, #0]
 80168ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80168cc:	2f00      	cmp	r7, #0
 80168ce:	dc00      	bgt.n	80168d2 <arm_radix4_butterfly_q15+0x55e>
 80168d0:	e0ea      	b.n	8016aa8 <arm_radix4_butterfly_q15+0x734>
 80168d2:	b21f      	sxth	r7, r3
 80168d4:	107f      	asrs	r7, r7, #1
 80168d6:	b2bf      	uxth	r7, r7
 80168d8:	464b      	mov	r3, r9
 80168da:	2c00      	cmp	r4, #0
 80168dc:	dc00      	bgt.n	80168e0 <arm_radix4_butterfly_q15+0x56c>
 80168de:	e0e1      	b.n	8016aa4 <arm_radix4_butterfly_q15+0x730>
 80168e0:	b21c      	sxth	r4, r3
 80168e2:	1064      	asrs	r4, r4, #1
 80168e4:	b2a3      	uxth	r3, r4
 80168e6:	4699      	mov	r9, r3
 80168e8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80168ea:	18fb      	adds	r3, r7, r3
 80168ec:	8073      	strh	r3, [r6, #2]
 80168ee:	9b02      	ldr	r3, [sp, #8]
 80168f0:	5ef3      	ldrsh	r3, [r6, r3]
 80168f2:	4698      	mov	r8, r3
 80168f4:	9b01      	ldr	r3, [sp, #4]
 80168f6:	2400      	movs	r4, #0
 80168f8:	5f1b      	ldrsh	r3, [r3, r4]
 80168fa:	464c      	mov	r4, r9
 80168fc:	9304      	str	r3, [sp, #16]
 80168fe:	4663      	mov	r3, ip
 8016900:	1b5b      	subs	r3, r3, r5
 8016902:	9d02      	ldr	r5, [sp, #8]
 8016904:	1b3f      	subs	r7, r7, r4
 8016906:	5373      	strh	r3, [r6, r5]
 8016908:	9b01      	ldr	r3, [sp, #4]
 801690a:	801f      	strh	r7, [r3, #0]
 801690c:	2300      	movs	r3, #0
 801690e:	5ec4      	ldrsh	r4, [r0, r3]
 8016910:	4643      	mov	r3, r8
 8016912:	1b1c      	subs	r4, r3, r4
 8016914:	46a0      	mov	r8, r4
 8016916:	455c      	cmp	r4, fp
 8016918:	dd01      	ble.n	801691e <arm_radix4_butterfly_q15+0x5aa>
 801691a:	4b64      	ldr	r3, [pc, #400]	@ (8016aac <arm_radix4_butterfly_q15+0x738>)
 801691c:	4698      	mov	r8, r3
 801691e:	46a1      	mov	r9, r4
 8016920:	4554      	cmp	r4, sl
 8016922:	da01      	bge.n	8016928 <arm_radix4_butterfly_q15+0x5b4>
 8016924:	4b62      	ldr	r3, [pc, #392]	@ (8016ab0 <arm_radix4_butterfly_q15+0x73c>)
 8016926:	4699      	mov	r9, r3
 8016928:	2302      	movs	r3, #2
 801692a:	5ec5      	ldrsh	r5, [r0, r3]
 801692c:	9b04      	ldr	r3, [sp, #16]
 801692e:	1b5d      	subs	r5, r3, r5
 8016930:	002b      	movs	r3, r5
 8016932:	455d      	cmp	r5, fp
 8016934:	dd00      	ble.n	8016938 <arm_radix4_butterfly_q15+0x5c4>
 8016936:	4b5d      	ldr	r3, [pc, #372]	@ (8016aac <arm_radix4_butterfly_q15+0x738>)
 8016938:	002f      	movs	r7, r5
 801693a:	4555      	cmp	r5, sl
 801693c:	da00      	bge.n	8016940 <arm_radix4_butterfly_q15+0x5cc>
 801693e:	4f5c      	ldr	r7, [pc, #368]	@ (8016ab0 <arm_radix4_butterfly_q15+0x73c>)
 8016940:	9e07      	ldr	r6, [sp, #28]
 8016942:	46b4      	mov	ip, r6
 8016944:	2900      	cmp	r1, #0
 8016946:	dc00      	bgt.n	801694a <arm_radix4_butterfly_q15+0x5d6>
 8016948:	e0a9      	b.n	8016a9e <arm_radix4_butterfly_q15+0x72a>
 801694a:	4661      	mov	r1, ip
 801694c:	b209      	sxth	r1, r1
 801694e:	1049      	asrs	r1, r1, #1
 8016950:	b289      	uxth	r1, r1
 8016952:	2d00      	cmp	r5, #0
 8016954:	dc00      	bgt.n	8016958 <arm_radix4_butterfly_q15+0x5e4>
 8016956:	e0a0      	b.n	8016a9a <arm_radix4_butterfly_q15+0x726>
 8016958:	b21b      	sxth	r3, r3
 801695a:	105b      	asrs	r3, r3, #1
 801695c:	b29b      	uxth	r3, r3
 801695e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8016960:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8016962:	18cd      	adds	r5, r1, r3
 8016964:	53f5      	strh	r5, [r6, r7]
 8016966:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8016968:	2a00      	cmp	r2, #0
 801696a:	dc00      	bgt.n	801696e <arm_radix4_butterfly_q15+0x5fa>
 801696c:	e093      	b.n	8016a96 <arm_radix4_butterfly_q15+0x722>
 801696e:	b22d      	sxth	r5, r5
 8016970:	106d      	asrs	r5, r5, #1
 8016972:	b2ad      	uxth	r5, r5
 8016974:	2c00      	cmp	r4, #0
 8016976:	dc00      	bgt.n	801697a <arm_radix4_butterfly_q15+0x606>
 8016978:	e08b      	b.n	8016a92 <arm_radix4_butterfly_q15+0x71e>
 801697a:	4642      	mov	r2, r8
 801697c:	b212      	sxth	r2, r2
 801697e:	1052      	asrs	r2, r2, #1
 8016980:	9f01      	ldr	r7, [sp, #4]
 8016982:	b292      	uxth	r2, r2
 8016984:	9e02      	ldr	r6, [sp, #8]
 8016986:	1aac      	subs	r4, r5, r2
 8016988:	18aa      	adds	r2, r5, r2
 801698a:	53bc      	strh	r4, [r7, r6]
 801698c:	8042      	strh	r2, [r0, #2]
 801698e:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8016990:	1ac9      	subs	r1, r1, r3
 8016992:	4694      	mov	ip, r2
 8016994:	9b05      	ldr	r3, [sp, #20]
 8016996:	8001      	strh	r1, [r0, #0]
 8016998:	4463      	add	r3, ip
 801699a:	9a03      	ldr	r2, [sp, #12]
 801699c:	0019      	movs	r1, r3
 801699e:	9305      	str	r3, [sp, #20]
 80169a0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80169a2:	4694      	mov	ip, r2
 80169a4:	001c      	movs	r4, r3
 80169a6:	003b      	movs	r3, r7
 80169a8:	4463      	add	r3, ip
 80169aa:	9301      	str	r3, [sp, #4]
 80169ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80169ae:	4464      	add	r4, ip
 80169b0:	9420      	str	r4, [sp, #128]	@ 0x80
 80169b2:	4460      	add	r0, ip
 80169b4:	001a      	movs	r2, r3
 80169b6:	428a      	cmp	r2, r1
 80169b8:	d364      	bcc.n	8016a84 <arm_radix4_butterfly_q15+0x710>
 80169ba:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80169bc:	2200      	movs	r2, #0
 80169be:	5e9d      	ldrsh	r5, [r3, r2]
 80169c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80169c2:	5e99      	ldrsh	r1, [r3, r2]
 80169c4:	186b      	adds	r3, r5, r1
 80169c6:	469c      	mov	ip, r3
 80169c8:	455b      	cmp	r3, fp
 80169ca:	dd00      	ble.n	80169ce <arm_radix4_butterfly_q15+0x65a>
 80169cc:	4b37      	ldr	r3, [pc, #220]	@ (8016aac <arm_radix4_butterfly_q15+0x738>)
 80169ce:	46e0      	mov	r8, ip
 80169d0:	45d4      	cmp	ip, sl
 80169d2:	da01      	bge.n	80169d8 <arm_radix4_butterfly_q15+0x664>
 80169d4:	4a36      	ldr	r2, [pc, #216]	@ (8016ab0 <arm_radix4_butterfly_q15+0x73c>)
 80169d6:	4690      	mov	r8, r2
 80169d8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80169da:	9e01      	ldr	r6, [sp, #4]
 80169dc:	2402      	movs	r4, #2
 80169de:	5f14      	ldrsh	r4, [r2, r4]
 80169e0:	9a02      	ldr	r2, [sp, #8]
 80169e2:	5eb2      	ldrsh	r2, [r6, r2]
 80169e4:	18a7      	adds	r7, r4, r2
 80169e6:	9709      	str	r7, [sp, #36]	@ 0x24
 80169e8:	455f      	cmp	r7, fp
 80169ea:	dd01      	ble.n	80169f0 <arm_radix4_butterfly_q15+0x67c>
 80169ec:	4e2f      	ldr	r6, [pc, #188]	@ (8016aac <arm_radix4_butterfly_q15+0x738>)
 80169ee:	9609      	str	r6, [sp, #36]	@ 0x24
 80169f0:	9708      	str	r7, [sp, #32]
 80169f2:	4557      	cmp	r7, sl
 80169f4:	da01      	bge.n	80169fa <arm_radix4_butterfly_q15+0x686>
 80169f6:	4e2e      	ldr	r6, [pc, #184]	@ (8016ab0 <arm_radix4_butterfly_q15+0x73c>)
 80169f8:	9608      	str	r6, [sp, #32]
 80169fa:	1a69      	subs	r1, r5, r1
 80169fc:	9107      	str	r1, [sp, #28]
 80169fe:	4559      	cmp	r1, fp
 8016a00:	dd01      	ble.n	8016a06 <arm_radix4_butterfly_q15+0x692>
 8016a02:	4d2a      	ldr	r5, [pc, #168]	@ (8016aac <arm_radix4_butterfly_q15+0x738>)
 8016a04:	9507      	str	r5, [sp, #28]
 8016a06:	9106      	str	r1, [sp, #24]
 8016a08:	4551      	cmp	r1, sl
 8016a0a:	da01      	bge.n	8016a10 <arm_radix4_butterfly_q15+0x69c>
 8016a0c:	4d28      	ldr	r5, [pc, #160]	@ (8016ab0 <arm_radix4_butterfly_q15+0x73c>)
 8016a0e:	9506      	str	r5, [sp, #24]
 8016a10:	1aa2      	subs	r2, r4, r2
 8016a12:	920d      	str	r2, [sp, #52]	@ 0x34
 8016a14:	455a      	cmp	r2, fp
 8016a16:	dd01      	ble.n	8016a1c <arm_radix4_butterfly_q15+0x6a8>
 8016a18:	4c24      	ldr	r4, [pc, #144]	@ (8016aac <arm_radix4_butterfly_q15+0x738>)
 8016a1a:	940d      	str	r4, [sp, #52]	@ 0x34
 8016a1c:	920a      	str	r2, [sp, #40]	@ 0x28
 8016a1e:	4552      	cmp	r2, sl
 8016a20:	da01      	bge.n	8016a26 <arm_radix4_butterfly_q15+0x6b2>
 8016a22:	4c23      	ldr	r4, [pc, #140]	@ (8016ab0 <arm_radix4_butterfly_q15+0x73c>)
 8016a24:	940a      	str	r4, [sp, #40]	@ 0x28
 8016a26:	9c20      	ldr	r4, [sp, #128]	@ 0x80
 8016a28:	9d02      	ldr	r5, [sp, #8]
 8016a2a:	5f65      	ldrsh	r5, [r4, r5]
 8016a2c:	2600      	movs	r6, #0
 8016a2e:	5f84      	ldrsh	r4, [r0, r6]
 8016a30:	192d      	adds	r5, r5, r4
 8016a32:	950b      	str	r5, [sp, #44]	@ 0x2c
 8016a34:	455d      	cmp	r5, fp
 8016a36:	dd01      	ble.n	8016a3c <arm_radix4_butterfly_q15+0x6c8>
 8016a38:	4c1c      	ldr	r4, [pc, #112]	@ (8016aac <arm_radix4_butterfly_q15+0x738>)
 8016a3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016a3c:	950c      	str	r5, [sp, #48]	@ 0x30
 8016a3e:	4555      	cmp	r5, sl
 8016a40:	da01      	bge.n	8016a46 <arm_radix4_butterfly_q15+0x6d2>
 8016a42:	4c1b      	ldr	r4, [pc, #108]	@ (8016ab0 <arm_radix4_butterfly_q15+0x73c>)
 8016a44:	940c      	str	r4, [sp, #48]	@ 0x30
 8016a46:	9c01      	ldr	r4, [sp, #4]
 8016a48:	2600      	movs	r6, #0
 8016a4a:	5fa4      	ldrsh	r4, [r4, r6]
 8016a4c:	46a1      	mov	r9, r4
 8016a4e:	2602      	movs	r6, #2
 8016a50:	5f84      	ldrsh	r4, [r0, r6]
 8016a52:	444c      	add	r4, r9
 8016a54:	46a1      	mov	r9, r4
 8016a56:	455c      	cmp	r4, fp
 8016a58:	dd01      	ble.n	8016a5e <arm_radix4_butterfly_q15+0x6ea>
 8016a5a:	4e14      	ldr	r6, [pc, #80]	@ (8016aac <arm_radix4_butterfly_q15+0x738>)
 8016a5c:	46b1      	mov	r9, r6
 8016a5e:	9404      	str	r4, [sp, #16]
 8016a60:	4554      	cmp	r4, sl
 8016a62:	da01      	bge.n	8016a68 <arm_radix4_butterfly_q15+0x6f4>
 8016a64:	4e12      	ldr	r6, [pc, #72]	@ (8016ab0 <arm_radix4_butterfly_q15+0x73c>)
 8016a66:	9604      	str	r6, [sp, #16]
 8016a68:	4666      	mov	r6, ip
 8016a6a:	2e00      	cmp	r6, #0
 8016a6c:	dd00      	ble.n	8016a70 <arm_radix4_butterfly_q15+0x6fc>
 8016a6e:	e71d      	b.n	80168ac <arm_radix4_butterfly_q15+0x538>
 8016a70:	4643      	mov	r3, r8
 8016a72:	b21b      	sxth	r3, r3
 8016a74:	105b      	asrs	r3, r3, #1
 8016a76:	b29b      	uxth	r3, r3
 8016a78:	469c      	mov	ip, r3
 8016a7a:	2d00      	cmp	r5, #0
 8016a7c:	dd00      	ble.n	8016a80 <arm_radix4_butterfly_q15+0x70c>
 8016a7e:	e71c      	b.n	80168ba <arm_radix4_butterfly_q15+0x546>
 8016a80:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016a82:	e71b      	b.n	80168bc <arm_radix4_butterfly_q15+0x548>
 8016a84:	b02b      	add	sp, #172	@ 0xac
 8016a86:	bc3c      	pop	{r2, r3, r4, r5}
 8016a88:	4690      	mov	r8, r2
 8016a8a:	4699      	mov	r9, r3
 8016a8c:	46a2      	mov	sl, r4
 8016a8e:	46ab      	mov	fp, r5
 8016a90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8016a92:	464a      	mov	r2, r9
 8016a94:	e772      	b.n	801697c <arm_radix4_butterfly_q15+0x608>
 8016a96:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8016a98:	e769      	b.n	801696e <arm_radix4_butterfly_q15+0x5fa>
 8016a9a:	003b      	movs	r3, r7
 8016a9c:	e75c      	b.n	8016958 <arm_radix4_butterfly_q15+0x5e4>
 8016a9e:	9906      	ldr	r1, [sp, #24]
 8016aa0:	468c      	mov	ip, r1
 8016aa2:	e752      	b.n	801694a <arm_radix4_butterfly_q15+0x5d6>
 8016aa4:	9b04      	ldr	r3, [sp, #16]
 8016aa6:	e71b      	b.n	80168e0 <arm_radix4_butterfly_q15+0x56c>
 8016aa8:	9b08      	ldr	r3, [sp, #32]
 8016aaa:	e712      	b.n	80168d2 <arm_radix4_butterfly_q15+0x55e>
 8016aac:	00007fff 	.word	0x00007fff
 8016ab0:	ffff8000 	.word	0xffff8000

08016ab4 <arm_radix4_butterfly_inverse_q15>:
 8016ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016ab6:	4656      	mov	r6, sl
 8016ab8:	464d      	mov	r5, r9
 8016aba:	465f      	mov	r7, fp
 8016abc:	4644      	mov	r4, r8
 8016abe:	b4f0      	push	{r4, r5, r6, r7}
 8016ac0:	b0a7      	sub	sp, #156	@ 0x9c
 8016ac2:	9111      	str	r1, [sp, #68]	@ 0x44
 8016ac4:	0889      	lsrs	r1, r1, #2
 8016ac6:	000d      	movs	r5, r1
 8016ac8:	911e      	str	r1, [sp, #120]	@ 0x78
 8016aca:	0001      	movs	r1, r0
 8016acc:	9024      	str	r0, [sp, #144]	@ 0x90
 8016ace:	901c      	str	r0, [sp, #112]	@ 0x70
 8016ad0:	00a8      	lsls	r0, r5, #2
 8016ad2:	0004      	movs	r4, r0
 8016ad4:	9002      	str	r0, [sp, #8]
 8016ad6:	0008      	movs	r0, r1
 8016ad8:	4682      	mov	sl, r0
 8016ada:	0016      	movs	r6, r2
 8016adc:	9225      	str	r2, [sp, #148]	@ 0x94
 8016ade:	1ca2      	adds	r2, r4, #2
 8016ae0:	4689      	mov	r9, r1
 8016ae2:	4492      	add	sl, r2
 8016ae4:	00d9      	lsls	r1, r3, #3
 8016ae6:	005a      	lsls	r2, r3, #1
 8016ae8:	9106      	str	r1, [sp, #24]
 8016aea:	0099      	lsls	r1, r3, #2
 8016aec:	18d3      	adds	r3, r2, r3
 8016aee:	46a4      	mov	ip, r4
 8016af0:	9105      	str	r1, [sp, #20]
 8016af2:	0099      	lsls	r1, r3, #2
 8016af4:	9109      	str	r1, [sp, #36]	@ 0x24
 8016af6:	00e9      	lsls	r1, r5, #3
 8016af8:	468b      	mov	fp, r1
 8016afa:	44e1      	add	r9, ip
 8016afc:	44cc      	add	ip, r9
 8016afe:	4661      	mov	r1, ip
 8016b00:	465b      	mov	r3, fp
 8016b02:	9601      	str	r6, [sp, #4]
 8016b04:	9603      	str	r6, [sp, #12]
 8016b06:	9604      	str	r6, [sp, #16]
 8016b08:	464a      	mov	r2, r9
 8016b0a:	0006      	movs	r6, r0
 8016b0c:	4650      	mov	r0, sl
 8016b0e:	9108      	str	r1, [sp, #32]
 8016b10:	9300      	str	r3, [sp, #0]
 8016b12:	2300      	movs	r3, #0
 8016b14:	5ef1      	ldrsh	r1, [r6, r3]
 8016b16:	9c02      	ldr	r4, [sp, #8]
 8016b18:	108b      	asrs	r3, r1, #2
 8016b1a:	4698      	mov	r8, r3
 8016b1c:	2102      	movs	r1, #2
 8016b1e:	5e73      	ldrsh	r3, [r6, r1]
 8016b20:	0037      	movs	r7, r6
 8016b22:	109b      	asrs	r3, r3, #2
 8016b24:	469c      	mov	ip, r3
 8016b26:	0023      	movs	r3, r4
 8016b28:	5ed1      	ldrsh	r1, [r2, r3]
 8016b2a:	5f03      	ldrsh	r3, [r0, r4]
 8016b2c:	4645      	mov	r5, r8
 8016b2e:	1089      	asrs	r1, r1, #2
 8016b30:	1a6d      	subs	r5, r5, r1
 8016b32:	46ab      	mov	fp, r5
 8016b34:	4665      	mov	r5, ip
 8016b36:	109b      	asrs	r3, r3, #2
 8016b38:	1aed      	subs	r5, r5, r3
 8016b3a:	9507      	str	r5, [sp, #28]
 8016b3c:	2600      	movs	r6, #0
 8016b3e:	5f95      	ldrsh	r5, [r2, r6]
 8016b40:	4441      	add	r1, r8
 8016b42:	10ae      	asrs	r6, r5, #2
 8016b44:	46b2      	mov	sl, r6
 8016b46:	2600      	movs	r6, #0
 8016b48:	5f84      	ldrsh	r4, [r0, r6]
 8016b4a:	4463      	add	r3, ip
 8016b4c:	10a6      	asrs	r6, r4, #2
 8016b4e:	46b1      	mov	r9, r6
 8016b50:	9c00      	ldr	r4, [sp, #0]
 8016b52:	5f15      	ldrsh	r5, [r2, r4]
 8016b54:	5f04      	ldrsh	r4, [r0, r4]
 8016b56:	10ad      	asrs	r5, r5, #2
 8016b58:	4455      	add	r5, sl
 8016b5a:	104e      	asrs	r6, r1, #1
 8016b5c:	10a4      	asrs	r4, r4, #2
 8016b5e:	444c      	add	r4, r9
 8016b60:	46b1      	mov	r9, r6
 8016b62:	106e      	asrs	r6, r5, #1
 8016b64:	46b0      	mov	r8, r6
 8016b66:	44c8      	add	r8, r9
 8016b68:	4646      	mov	r6, r8
 8016b6a:	803e      	strh	r6, [r7, #0]
 8016b6c:	105e      	asrs	r6, r3, #1
 8016b6e:	46b4      	mov	ip, r6
 8016b70:	1066      	asrs	r6, r4, #1
 8016b72:	46b0      	mov	r8, r6
 8016b74:	44e0      	add	r8, ip
 8016b76:	4646      	mov	r6, r8
 8016b78:	1b49      	subs	r1, r1, r5
 8016b7a:	9d04      	ldr	r5, [sp, #16]
 8016b7c:	807e      	strh	r6, [r7, #2]
 8016b7e:	1b1b      	subs	r3, r3, r4
 8016b80:	2400      	movs	r4, #0
 8016b82:	5f2e      	ldrsh	r6, [r5, r4]
 8016b84:	46b1      	mov	r9, r6
 8016b86:	2600      	movs	r6, #0
 8016b88:	5f94      	ldrsh	r4, [r2, r6]
 8016b8a:	2602      	movs	r6, #2
 8016b8c:	5fad      	ldrsh	r5, [r5, r6]
 8016b8e:	10a6      	asrs	r6, r4, #2
 8016b90:	46b4      	mov	ip, r6
 8016b92:	2600      	movs	r6, #0
 8016b94:	5f84      	ldrsh	r4, [r0, r6]
 8016b96:	10a6      	asrs	r6, r4, #2
 8016b98:	46b2      	mov	sl, r6
 8016b9a:	464c      	mov	r4, r9
 8016b9c:	001e      	movs	r6, r3
 8016b9e:	434c      	muls	r4, r1
 8016ba0:	436e      	muls	r6, r5
 8016ba2:	1ba4      	subs	r4, r4, r6
 8016ba4:	464e      	mov	r6, r9
 8016ba6:	4369      	muls	r1, r5
 8016ba8:	4373      	muls	r3, r6
 8016baa:	18cb      	adds	r3, r1, r3
 8016bac:	1424      	asrs	r4, r4, #16
 8016bae:	141b      	asrs	r3, r3, #16
 8016bb0:	8014      	strh	r4, [r2, #0]
 8016bb2:	8003      	strh	r3, [r0, #0]
 8016bb4:	9b00      	ldr	r3, [sp, #0]
 8016bb6:	9d07      	ldr	r5, [sp, #28]
 8016bb8:	5ed3      	ldrsh	r3, [r2, r3]
 8016bba:	4661      	mov	r1, ip
 8016bbc:	109b      	asrs	r3, r3, #2
 8016bbe:	1acb      	subs	r3, r1, r3
 8016bc0:	9900      	ldr	r1, [sp, #0]
 8016bc2:	1aec      	subs	r4, r5, r3
 8016bc4:	5e41      	ldrsh	r1, [r0, r1]
 8016bc6:	4656      	mov	r6, sl
 8016bc8:	1089      	asrs	r1, r1, #2
 8016bca:	1a71      	subs	r1, r6, r1
 8016bcc:	465e      	mov	r6, fp
 8016bce:	9407      	str	r4, [sp, #28]
 8016bd0:	9c03      	ldr	r4, [sp, #12]
 8016bd2:	46ac      	mov	ip, r5
 8016bd4:	4688      	mov	r8, r1
 8016bd6:	1a71      	subs	r1, r6, r1
 8016bd8:	2500      	movs	r5, #0
 8016bda:	5f66      	ldrsh	r6, [r4, r5]
 8016bdc:	4463      	add	r3, ip
 8016bde:	46b1      	mov	r9, r6
 8016be0:	2502      	movs	r5, #2
 8016be2:	5f66      	ldrsh	r6, [r4, r5]
 8016be4:	9c02      	ldr	r4, [sp, #8]
 8016be6:	46b4      	mov	ip, r6
 8016be8:	464e      	mov	r6, r9
 8016bea:	434e      	muls	r6, r1
 8016bec:	0035      	movs	r5, r6
 8016bee:	4666      	mov	r6, ip
 8016bf0:	435e      	muls	r6, r3
 8016bf2:	1bad      	subs	r5, r5, r6
 8016bf4:	4666      	mov	r6, ip
 8016bf6:	4371      	muls	r1, r6
 8016bf8:	464e      	mov	r6, r9
 8016bfa:	4373      	muls	r3, r6
 8016bfc:	18cb      	adds	r3, r1, r3
 8016bfe:	142d      	asrs	r5, r5, #16
 8016c00:	141b      	asrs	r3, r3, #16
 8016c02:	5315      	strh	r5, [r2, r4]
 8016c04:	5303      	strh	r3, [r0, r4]
 8016c06:	9b01      	ldr	r3, [sp, #4]
 8016c08:	44d8      	add	r8, fp
 8016c0a:	2600      	movs	r6, #0
 8016c0c:	5f99      	ldrsh	r1, [r3, r6]
 8016c0e:	2602      	movs	r6, #2
 8016c10:	5f9d      	ldrsh	r5, [r3, r6]
 8016c12:	4646      	mov	r6, r8
 8016c14:	434e      	muls	r6, r1
 8016c16:	9c07      	ldr	r4, [sp, #28]
 8016c18:	0033      	movs	r3, r6
 8016c1a:	0026      	movs	r6, r4
 8016c1c:	436e      	muls	r6, r5
 8016c1e:	1b9b      	subs	r3, r3, r6
 8016c20:	9e00      	ldr	r6, [sp, #0]
 8016c22:	141b      	asrs	r3, r3, #16
 8016c24:	5393      	strh	r3, [r2, r6]
 8016c26:	4646      	mov	r6, r8
 8016c28:	434c      	muls	r4, r1
 8016c2a:	436e      	muls	r6, r5
 8016c2c:	9900      	ldr	r1, [sp, #0]
 8016c2e:	1933      	adds	r3, r6, r4
 8016c30:	141b      	asrs	r3, r3, #16
 8016c32:	5243      	strh	r3, [r0, r1]
 8016c34:	9906      	ldr	r1, [sp, #24]
 8016c36:	9d04      	ldr	r5, [sp, #16]
 8016c38:	468c      	mov	ip, r1
 8016c3a:	9905      	ldr	r1, [sp, #20]
 8016c3c:	4465      	add	r5, ip
 8016c3e:	468c      	mov	ip, r1
 8016c40:	003b      	movs	r3, r7
 8016c42:	9c03      	ldr	r4, [sp, #12]
 8016c44:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8016c46:	4464      	add	r4, ip
 8016c48:	468c      	mov	ip, r1
 8016c4a:	3304      	adds	r3, #4
 8016c4c:	001e      	movs	r6, r3
 8016c4e:	9b01      	ldr	r3, [sp, #4]
 8016c50:	3204      	adds	r2, #4
 8016c52:	4463      	add	r3, ip
 8016c54:	9301      	str	r3, [sp, #4]
 8016c56:	9b08      	ldr	r3, [sp, #32]
 8016c58:	3004      	adds	r0, #4
 8016c5a:	9504      	str	r5, [sp, #16]
 8016c5c:	9403      	str	r4, [sp, #12]
 8016c5e:	429a      	cmp	r2, r3
 8016c60:	d000      	beq.n	8016c64 <arm_radix4_butterfly_inverse_q15+0x1b0>
 8016c62:	e756      	b.n	8016b12 <arm_radix4_butterfly_inverse_q15+0x5e>
 8016c64:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8016c66:	9b05      	ldr	r3, [sp, #20]
 8016c68:	2a04      	cmp	r2, #4
 8016c6a:	d800      	bhi.n	8016c6e <arm_radix4_butterfly_inverse_q15+0x1ba>
 8016c6c:	e188      	b.n	8016f80 <arm_radix4_butterfly_inverse_q15+0x4cc>
 8016c6e:	9215      	str	r2, [sp, #84]	@ 0x54
 8016c70:	9223      	str	r2, [sp, #140]	@ 0x8c
 8016c72:	4ad1      	ldr	r2, [pc, #836]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016c74:	4692      	mov	sl, r2
 8016c76:	4ad1      	ldr	r2, [pc, #836]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016c78:	4693      	mov	fp, r2
 8016c7a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8016c7c:	0892      	lsrs	r2, r2, #2
 8016c7e:	0011      	movs	r1, r2
 8016c80:	921e      	str	r2, [sp, #120]	@ 0x78
 8016c82:	3a01      	subs	r2, #1
 8016c84:	9220      	str	r2, [sp, #128]	@ 0x80
 8016c86:	009a      	lsls	r2, r3, #2
 8016c88:	921d      	str	r2, [sp, #116]	@ 0x74
 8016c8a:	00da      	lsls	r2, r3, #3
 8016c8c:	921f      	str	r2, [sp, #124]	@ 0x7c
 8016c8e:	005a      	lsls	r2, r3, #1
 8016c90:	18d3      	adds	r3, r2, r3
 8016c92:	009b      	lsls	r3, r3, #2
 8016c94:	9321      	str	r3, [sp, #132]	@ 0x84
 8016c96:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8016c98:	009b      	lsls	r3, r3, #2
 8016c9a:	9316      	str	r3, [sp, #88]	@ 0x58
 8016c9c:	00cb      	lsls	r3, r1, #3
 8016c9e:	4699      	mov	r9, r3
 8016ca0:	008b      	lsls	r3, r1, #2
 8016ca2:	9302      	str	r3, [sp, #8]
 8016ca4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8016ca6:	931b      	str	r3, [sp, #108]	@ 0x6c
 8016ca8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8016caa:	931a      	str	r3, [sp, #104]	@ 0x68
 8016cac:	9319      	str	r3, [sp, #100]	@ 0x64
 8016cae:	9318      	str	r3, [sp, #96]	@ 0x60
 8016cb0:	2300      	movs	r3, #0
 8016cb2:	9317      	str	r3, [sp, #92]	@ 0x5c
 8016cb4:	464b      	mov	r3, r9
 8016cb6:	3302      	adds	r3, #2
 8016cb8:	9322      	str	r3, [sp, #136]	@ 0x88
 8016cba:	464b      	mov	r3, r9
 8016cbc:	9301      	str	r3, [sp, #4]
 8016cbe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016cc0:	2100      	movs	r1, #0
 8016cc2:	5e5a      	ldrsh	r2, [r3, r1]
 8016cc4:	9207      	str	r2, [sp, #28]
 8016cc6:	2202      	movs	r2, #2
 8016cc8:	5e9b      	ldrsh	r3, [r3, r2]
 8016cca:	9308      	str	r3, [sp, #32]
 8016ccc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8016cce:	2100      	movs	r1, #0
 8016cd0:	5e5a      	ldrsh	r2, [r3, r1]
 8016cd2:	9209      	str	r2, [sp, #36]	@ 0x24
 8016cd4:	2202      	movs	r2, #2
 8016cd6:	5e9b      	ldrsh	r3, [r3, r2]
 8016cd8:	9312      	str	r3, [sp, #72]	@ 0x48
 8016cda:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8016cdc:	2100      	movs	r1, #0
 8016cde:	5e5a      	ldrsh	r2, [r3, r1]
 8016ce0:	9213      	str	r2, [sp, #76]	@ 0x4c
 8016ce2:	2202      	movs	r2, #2
 8016ce4:	5e9b      	ldrsh	r3, [r3, r2]
 8016ce6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016ce8:	9314      	str	r3, [sp, #80]	@ 0x50
 8016cea:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016cec:	4293      	cmp	r3, r2
 8016cee:	d800      	bhi.n	8016cf2 <arm_radix4_butterfly_inverse_q15+0x23e>
 8016cf0:	e124      	b.n	8016f3c <arm_radix4_butterfly_inverse_q15+0x488>
 8016cf2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8016cf4:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016cf6:	0019      	movs	r1, r3
 8016cf8:	9b02      	ldr	r3, [sp, #8]
 8016cfa:	4694      	mov	ip, r2
 8016cfc:	4699      	mov	r9, r3
 8016cfe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8016d00:	44e1      	add	r9, ip
 8016d02:	920a      	str	r2, [sp, #40]	@ 0x28
 8016d04:	464a      	mov	r2, r9
 8016d06:	4461      	add	r1, ip
 8016d08:	4688      	mov	r8, r1
 8016d0a:	9200      	str	r2, [sp, #0]
 8016d0c:	46e1      	mov	r9, ip
 8016d0e:	e0a3      	b.n	8016e58 <arm_radix4_butterfly_inverse_q15+0x3a4>
 8016d10:	b200      	sxth	r0, r0
 8016d12:	1040      	asrs	r0, r0, #1
 8016d14:	2e00      	cmp	r6, #0
 8016d16:	dc00      	bgt.n	8016d1a <arm_radix4_butterfly_inverse_q15+0x266>
 8016d18:	e102      	b.n	8016f20 <arm_radix4_butterfly_inverse_q15+0x46c>
 8016d1a:	4649      	mov	r1, r9
 8016d1c:	b212      	sxth	r2, r2
 8016d1e:	1052      	asrs	r2, r2, #1
 8016d20:	1886      	adds	r6, r0, r2
 8016d22:	1076      	asrs	r6, r6, #1
 8016d24:	800e      	strh	r6, [r1, #0]
 8016d26:	9e04      	ldr	r6, [sp, #16]
 8016d28:	2f00      	cmp	r7, #0
 8016d2a:	dc00      	bgt.n	8016d2e <arm_radix4_butterfly_inverse_q15+0x27a>
 8016d2c:	e104      	b.n	8016f38 <arm_radix4_butterfly_inverse_q15+0x484>
 8016d2e:	b236      	sxth	r6, r6
 8016d30:	1076      	asrs	r6, r6, #1
 8016d32:	2d00      	cmp	r5, #0
 8016d34:	dc00      	bgt.n	8016d38 <arm_radix4_butterfly_inverse_q15+0x284>
 8016d36:	e0fd      	b.n	8016f34 <arm_radix4_butterfly_inverse_q15+0x480>
 8016d38:	4649      	mov	r1, r9
 8016d3a:	b21b      	sxth	r3, r3
 8016d3c:	105b      	asrs	r3, r3, #1
 8016d3e:	18f5      	adds	r5, r6, r3
 8016d40:	106d      	asrs	r5, r5, #1
 8016d42:	804d      	strh	r5, [r1, #2]
 8016d44:	9900      	ldr	r1, [sp, #0]
 8016d46:	1a80      	subs	r0, r0, r2
 8016d48:	000a      	movs	r2, r1
 8016d4a:	2500      	movs	r5, #0
 8016d4c:	5f55      	ldrsh	r5, [r2, r5]
 8016d4e:	000a      	movs	r2, r1
 8016d50:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016d52:	1af3      	subs	r3, r6, r3
 8016d54:	2602      	movs	r6, #2
 8016d56:	5f96      	ldrsh	r6, [r2, r6]
 8016d58:	000a      	movs	r2, r1
 8016d5a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8016d5c:	435a      	muls	r2, r3
 8016d5e:	4347      	muls	r7, r0
 8016d60:	1abf      	subs	r7, r7, r2
 8016d62:	9a00      	ldr	r2, [sp, #0]
 8016d64:	143f      	asrs	r7, r7, #16
 8016d66:	8017      	strh	r7, [r2, #0]
 8016d68:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8016d6a:	4348      	muls	r0, r1
 8016d6c:	437b      	muls	r3, r7
 8016d6e:	9a00      	ldr	r2, [sp, #0]
 8016d70:	18c0      	adds	r0, r0, r3
 8016d72:	1400      	asrs	r0, r0, #16
 8016d74:	9b01      	ldr	r3, [sp, #4]
 8016d76:	8050      	strh	r0, [r2, #2]
 8016d78:	5ed3      	ldrsh	r3, [r2, r3]
 8016d7a:	1aed      	subs	r5, r5, r3
 8016d7c:	0028      	movs	r0, r5
 8016d7e:	4555      	cmp	r5, sl
 8016d80:	dd00      	ble.n	8016d84 <arm_radix4_butterfly_inverse_q15+0x2d0>
 8016d82:	488d      	ldr	r0, [pc, #564]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016d84:	002f      	movs	r7, r5
 8016d86:	455d      	cmp	r5, fp
 8016d88:	da00      	bge.n	8016d8c <arm_radix4_butterfly_inverse_q15+0x2d8>
 8016d8a:	4f8c      	ldr	r7, [pc, #560]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016d8c:	4643      	mov	r3, r8
 8016d8e:	9a02      	ldr	r2, [sp, #8]
 8016d90:	5e9b      	ldrsh	r3, [r3, r2]
 8016d92:	1af6      	subs	r6, r6, r3
 8016d94:	0033      	movs	r3, r6
 8016d96:	4556      	cmp	r6, sl
 8016d98:	dd00      	ble.n	8016d9c <arm_radix4_butterfly_inverse_q15+0x2e8>
 8016d9a:	4b87      	ldr	r3, [pc, #540]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016d9c:	46b4      	mov	ip, r6
 8016d9e:	455e      	cmp	r6, fp
 8016da0:	da01      	bge.n	8016da6 <arm_radix4_butterfly_inverse_q15+0x2f2>
 8016da2:	4a86      	ldr	r2, [pc, #536]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016da4:	4694      	mov	ip, r2
 8016da6:	9a06      	ldr	r2, [sp, #24]
 8016da8:	2c00      	cmp	r4, #0
 8016daa:	dc00      	bgt.n	8016dae <arm_radix4_butterfly_inverse_q15+0x2fa>
 8016dac:	e0c0      	b.n	8016f30 <arm_radix4_butterfly_inverse_q15+0x47c>
 8016dae:	b212      	sxth	r2, r2
 8016db0:	1052      	asrs	r2, r2, #1
 8016db2:	b292      	uxth	r2, r2
 8016db4:	2e00      	cmp	r6, #0
 8016db6:	dc00      	bgt.n	8016dba <arm_radix4_butterfly_inverse_q15+0x306>
 8016db8:	e0b8      	b.n	8016f2c <arm_radix4_butterfly_inverse_q15+0x478>
 8016dba:	b21c      	sxth	r4, r3
 8016dbc:	9903      	ldr	r1, [sp, #12]
 8016dbe:	1064      	asrs	r4, r4, #1
 8016dc0:	b2a4      	uxth	r4, r4
 8016dc2:	9b05      	ldr	r3, [sp, #20]
 8016dc4:	2900      	cmp	r1, #0
 8016dc6:	dc00      	bgt.n	8016dca <arm_radix4_butterfly_inverse_q15+0x316>
 8016dc8:	e0ae      	b.n	8016f28 <arm_radix4_butterfly_inverse_q15+0x474>
 8016dca:	b21b      	sxth	r3, r3
 8016dcc:	105b      	asrs	r3, r3, #1
 8016dce:	b29b      	uxth	r3, r3
 8016dd0:	9303      	str	r3, [sp, #12]
 8016dd2:	2d00      	cmp	r5, #0
 8016dd4:	dc00      	bgt.n	8016dd8 <arm_radix4_butterfly_inverse_q15+0x324>
 8016dd6:	e0a5      	b.n	8016f24 <arm_radix4_butterfly_inverse_q15+0x470>
 8016dd8:	b200      	sxth	r0, r0
 8016dda:	1040      	asrs	r0, r0, #1
 8016ddc:	b280      	uxth	r0, r0
 8016dde:	181d      	adds	r5, r3, r0
 8016de0:	464b      	mov	r3, r9
 8016de2:	1b16      	subs	r6, r2, r4
 8016de4:	9f07      	ldr	r7, [sp, #28]
 8016de6:	9908      	ldr	r1, [sp, #32]
 8016de8:	b236      	sxth	r6, r6
 8016dea:	b22d      	sxth	r5, r5
 8016dec:	4369      	muls	r1, r5
 8016dee:	4377      	muls	r7, r6
 8016df0:	1a7f      	subs	r7, r7, r1
 8016df2:	9901      	ldr	r1, [sp, #4]
 8016df4:	143f      	asrs	r7, r7, #16
 8016df6:	525f      	strh	r7, [r3, r1]
 8016df8:	4643      	mov	r3, r8
 8016dfa:	9908      	ldr	r1, [sp, #32]
 8016dfc:	9f07      	ldr	r7, [sp, #28]
 8016dfe:	434e      	muls	r6, r1
 8016e00:	437d      	muls	r5, r7
 8016e02:	1976      	adds	r6, r6, r5
 8016e04:	1436      	asrs	r6, r6, #16
 8016e06:	801e      	strh	r6, [r3, #0]
 8016e08:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8016e0a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8016e0c:	9b03      	ldr	r3, [sp, #12]
 8016e0e:	1912      	adds	r2, r2, r4
 8016e10:	1a1b      	subs	r3, r3, r0
 8016e12:	002c      	movs	r4, r5
 8016e14:	0008      	movs	r0, r1
 8016e16:	b212      	sxth	r2, r2
 8016e18:	b21b      	sxth	r3, r3
 8016e1a:	435c      	muls	r4, r3
 8016e1c:	4350      	muls	r0, r2
 8016e1e:	434b      	muls	r3, r1
 8016e20:	436a      	muls	r2, r5
 8016e22:	18d2      	adds	r2, r2, r3
 8016e24:	4643      	mov	r3, r8
 8016e26:	9e00      	ldr	r6, [sp, #0]
 8016e28:	1b00      	subs	r0, r0, r4
 8016e2a:	9902      	ldr	r1, [sp, #8]
 8016e2c:	9c01      	ldr	r4, [sp, #4]
 8016e2e:	1412      	asrs	r2, r2, #16
 8016e30:	1400      	asrs	r0, r0, #16
 8016e32:	5330      	strh	r0, [r6, r4]
 8016e34:	525a      	strh	r2, [r3, r1]
 8016e36:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8016e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016e3a:	4694      	mov	ip, r2
 8016e3c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8016e3e:	4463      	add	r3, ip
 8016e40:	0019      	movs	r1, r3
 8016e42:	4694      	mov	ip, r2
 8016e44:	930a      	str	r3, [sp, #40]	@ 0x28
 8016e46:	0033      	movs	r3, r6
 8016e48:	4463      	add	r3, ip
 8016e4a:	9300      	str	r3, [sp, #0]
 8016e4c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8016e4e:	44e1      	add	r9, ip
 8016e50:	44e0      	add	r8, ip
 8016e52:	001a      	movs	r2, r3
 8016e54:	428a      	cmp	r2, r1
 8016e56:	d971      	bls.n	8016f3c <arm_radix4_butterfly_inverse_q15+0x488>
 8016e58:	464b      	mov	r3, r9
 8016e5a:	2500      	movs	r5, #0
 8016e5c:	5f5d      	ldrsh	r5, [r3, r5]
 8016e5e:	464b      	mov	r3, r9
 8016e60:	9a01      	ldr	r2, [sp, #4]
 8016e62:	5e9c      	ldrsh	r4, [r3, r2]
 8016e64:	192b      	adds	r3, r5, r4
 8016e66:	469c      	mov	ip, r3
 8016e68:	0018      	movs	r0, r3
 8016e6a:	4553      	cmp	r3, sl
 8016e6c:	dd00      	ble.n	8016e70 <arm_radix4_butterfly_inverse_q15+0x3bc>
 8016e6e:	4852      	ldr	r0, [pc, #328]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016e70:	4663      	mov	r3, ip
 8016e72:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e74:	45dc      	cmp	ip, fp
 8016e76:	da01      	bge.n	8016e7c <arm_radix4_butterfly_inverse_q15+0x3c8>
 8016e78:	4b50      	ldr	r3, [pc, #320]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016e7a:	930d      	str	r3, [sp, #52]	@ 0x34
 8016e7c:	464b      	mov	r3, r9
 8016e7e:	2202      	movs	r2, #2
 8016e80:	5e9a      	ldrsh	r2, [r3, r2]
 8016e82:	4643      	mov	r3, r8
 8016e84:	2100      	movs	r1, #0
 8016e86:	5e5b      	ldrsh	r3, [r3, r1]
 8016e88:	18d7      	adds	r7, r2, r3
 8016e8a:	9704      	str	r7, [sp, #16]
 8016e8c:	4557      	cmp	r7, sl
 8016e8e:	dd01      	ble.n	8016e94 <arm_radix4_butterfly_inverse_q15+0x3e0>
 8016e90:	4949      	ldr	r1, [pc, #292]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016e92:	9104      	str	r1, [sp, #16]
 8016e94:	970c      	str	r7, [sp, #48]	@ 0x30
 8016e96:	455f      	cmp	r7, fp
 8016e98:	da01      	bge.n	8016e9e <arm_radix4_butterfly_inverse_q15+0x3ea>
 8016e9a:	4948      	ldr	r1, [pc, #288]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016e9c:	910c      	str	r1, [sp, #48]	@ 0x30
 8016e9e:	1b2c      	subs	r4, r5, r4
 8016ea0:	9406      	str	r4, [sp, #24]
 8016ea2:	4554      	cmp	r4, sl
 8016ea4:	dd01      	ble.n	8016eaa <arm_radix4_butterfly_inverse_q15+0x3f6>
 8016ea6:	4944      	ldr	r1, [pc, #272]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016ea8:	9106      	str	r1, [sp, #24]
 8016eaa:	940b      	str	r4, [sp, #44]	@ 0x2c
 8016eac:	455c      	cmp	r4, fp
 8016eae:	da01      	bge.n	8016eb4 <arm_radix4_butterfly_inverse_q15+0x400>
 8016eb0:	4942      	ldr	r1, [pc, #264]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016eb2:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016eb4:	1ad3      	subs	r3, r2, r3
 8016eb6:	9303      	str	r3, [sp, #12]
 8016eb8:	9305      	str	r3, [sp, #20]
 8016eba:	4553      	cmp	r3, sl
 8016ebc:	dd02      	ble.n	8016ec4 <arm_radix4_butterfly_inverse_q15+0x410>
 8016ebe:	4b3e      	ldr	r3, [pc, #248]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016ec0:	9305      	str	r3, [sp, #20]
 8016ec2:	9b03      	ldr	r3, [sp, #12]
 8016ec4:	930e      	str	r3, [sp, #56]	@ 0x38
 8016ec6:	455b      	cmp	r3, fp
 8016ec8:	da01      	bge.n	8016ece <arm_radix4_butterfly_inverse_q15+0x41a>
 8016eca:	4b3c      	ldr	r3, [pc, #240]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016ecc:	930e      	str	r3, [sp, #56]	@ 0x38
 8016ece:	9a00      	ldr	r2, [sp, #0]
 8016ed0:	2300      	movs	r3, #0
 8016ed2:	5ed6      	ldrsh	r6, [r2, r3]
 8016ed4:	9b01      	ldr	r3, [sp, #4]
 8016ed6:	5ed3      	ldrsh	r3, [r2, r3]
 8016ed8:	18f6      	adds	r6, r6, r3
 8016eda:	0032      	movs	r2, r6
 8016edc:	4556      	cmp	r6, sl
 8016ede:	dd00      	ble.n	8016ee2 <arm_radix4_butterfly_inverse_q15+0x42e>
 8016ee0:	4a35      	ldr	r2, [pc, #212]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016ee2:	960f      	str	r6, [sp, #60]	@ 0x3c
 8016ee4:	455e      	cmp	r6, fp
 8016ee6:	da01      	bge.n	8016eec <arm_radix4_butterfly_inverse_q15+0x438>
 8016ee8:	4b34      	ldr	r3, [pc, #208]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016eea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016eec:	9b00      	ldr	r3, [sp, #0]
 8016eee:	9902      	ldr	r1, [sp, #8]
 8016ef0:	2502      	movs	r5, #2
 8016ef2:	5f5d      	ldrsh	r5, [r3, r5]
 8016ef4:	4643      	mov	r3, r8
 8016ef6:	5e5b      	ldrsh	r3, [r3, r1]
 8016ef8:	18ed      	adds	r5, r5, r3
 8016efa:	002b      	movs	r3, r5
 8016efc:	4555      	cmp	r5, sl
 8016efe:	dd00      	ble.n	8016f02 <arm_radix4_butterfly_inverse_q15+0x44e>
 8016f00:	4b2d      	ldr	r3, [pc, #180]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016f02:	9510      	str	r5, [sp, #64]	@ 0x40
 8016f04:	455d      	cmp	r5, fp
 8016f06:	da01      	bge.n	8016f0c <arm_radix4_butterfly_inverse_q15+0x458>
 8016f08:	492c      	ldr	r1, [pc, #176]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016f0a:	9110      	str	r1, [sp, #64]	@ 0x40
 8016f0c:	4661      	mov	r1, ip
 8016f0e:	2900      	cmp	r1, #0
 8016f10:	dd00      	ble.n	8016f14 <arm_radix4_butterfly_inverse_q15+0x460>
 8016f12:	e6fd      	b.n	8016d10 <arm_radix4_butterfly_inverse_q15+0x25c>
 8016f14:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8016f16:	b200      	sxth	r0, r0
 8016f18:	1040      	asrs	r0, r0, #1
 8016f1a:	2e00      	cmp	r6, #0
 8016f1c:	dd00      	ble.n	8016f20 <arm_radix4_butterfly_inverse_q15+0x46c>
 8016f1e:	e6fc      	b.n	8016d1a <arm_radix4_butterfly_inverse_q15+0x266>
 8016f20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016f22:	e6fa      	b.n	8016d1a <arm_radix4_butterfly_inverse_q15+0x266>
 8016f24:	0038      	movs	r0, r7
 8016f26:	e757      	b.n	8016dd8 <arm_radix4_butterfly_inverse_q15+0x324>
 8016f28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f2a:	e74e      	b.n	8016dca <arm_radix4_butterfly_inverse_q15+0x316>
 8016f2c:	4663      	mov	r3, ip
 8016f2e:	e744      	b.n	8016dba <arm_radix4_butterfly_inverse_q15+0x306>
 8016f30:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8016f32:	e73c      	b.n	8016dae <arm_radix4_butterfly_inverse_q15+0x2fa>
 8016f34:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016f36:	e6ff      	b.n	8016d38 <arm_radix4_butterfly_inverse_q15+0x284>
 8016f38:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8016f3a:	e6f8      	b.n	8016d2e <arm_radix4_butterfly_inverse_q15+0x27a>
 8016f3c:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8016f3e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8016f40:	468c      	mov	ip, r1
 8016f42:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8016f44:	4462      	add	r2, ip
 8016f46:	468c      	mov	ip, r1
 8016f48:	9218      	str	r2, [sp, #96]	@ 0x60
 8016f4a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8016f4c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016f4e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8016f50:	4462      	add	r2, ip
 8016f52:	468c      	mov	ip, r1
 8016f54:	9219      	str	r2, [sp, #100]	@ 0x64
 8016f56:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8016f58:	3301      	adds	r3, #1
 8016f5a:	4462      	add	r2, ip
 8016f5c:	921a      	str	r2, [sp, #104]	@ 0x68
 8016f5e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8016f60:	9317      	str	r3, [sp, #92]	@ 0x5c
 8016f62:	3204      	adds	r2, #4
 8016f64:	921b      	str	r2, [sp, #108]	@ 0x6c
 8016f66:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8016f68:	4293      	cmp	r3, r2
 8016f6a:	d800      	bhi.n	8016f6e <arm_radix4_butterfly_inverse_q15+0x4ba>
 8016f6c:	e6a7      	b.n	8016cbe <arm_radix4_butterfly_inverse_q15+0x20a>
 8016f6e:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8016f70:	991e      	ldr	r1, [sp, #120]	@ 0x78
 8016f72:	0892      	lsrs	r2, r2, #2
 8016f74:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016f76:	9223      	str	r2, [sp, #140]	@ 0x8c
 8016f78:	9115      	str	r1, [sp, #84]	@ 0x54
 8016f7a:	2a04      	cmp	r2, #4
 8016f7c:	d900      	bls.n	8016f80 <arm_radix4_butterfly_inverse_q15+0x4cc>
 8016f7e:	e67c      	b.n	8016c7a <arm_radix4_butterfly_inverse_q15+0x1c6>
 8016f80:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8016f82:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016f84:	0893      	lsrs	r3, r2, #2
 8016f86:	0058      	lsls	r0, r3, #1
 8016f88:	1a8a      	subs	r2, r1, r2
 8016f8a:	18c0      	adds	r0, r0, r3
 8016f8c:	920e      	str	r2, [sp, #56]	@ 0x38
 8016f8e:	009a      	lsls	r2, r3, #2
 8016f90:	00db      	lsls	r3, r3, #3
 8016f92:	930d      	str	r3, [sp, #52]	@ 0x34
 8016f94:	2300      	movs	r3, #0
 8016f96:	9c24      	ldr	r4, [sp, #144]	@ 0x90
 8016f98:	9304      	str	r3, [sp, #16]
 8016f9a:	46a1      	mov	r9, r4
 8016f9c:	4b06      	ldr	r3, [pc, #24]	@ (8016fb8 <arm_radix4_butterfly_inverse_q15+0x504>)
 8016f9e:	9201      	str	r2, [sp, #4]
 8016fa0:	469b      	mov	fp, r3
 8016fa2:	3202      	adds	r2, #2
 8016fa4:	4b05      	ldr	r3, [pc, #20]	@ (8016fbc <arm_radix4_butterfly_inverse_q15+0x508>)
 8016fa6:	4491      	add	r9, r2
 8016fa8:	46a0      	mov	r8, r4
 8016faa:	469a      	mov	sl, r3
 8016fac:	464b      	mov	r3, r9
 8016fae:	0080      	lsls	r0, r0, #2
 8016fb0:	4480      	add	r8, r0
 8016fb2:	4640      	mov	r0, r8
 8016fb4:	9300      	str	r3, [sp, #0]
 8016fb6:	e08a      	b.n	80170ce <arm_radix4_butterfly_inverse_q15+0x61a>
 8016fb8:	00007fff 	.word	0x00007fff
 8016fbc:	ffff8000 	.word	0xffff8000
 8016fc0:	b21b      	sxth	r3, r3
 8016fc2:	105b      	asrs	r3, r3, #1
 8016fc4:	b29b      	uxth	r3, r3
 8016fc6:	469c      	mov	ip, r3
 8016fc8:	2d00      	cmp	r5, #0
 8016fca:	dc00      	bgt.n	8016fce <arm_radix4_butterfly_inverse_q15+0x51a>
 8016fcc:	e0e2      	b.n	8017194 <arm_radix4_butterfly_inverse_q15+0x6e0>
 8016fce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8016fd0:	b21b      	sxth	r3, r3
 8016fd2:	105b      	asrs	r3, r3, #1
 8016fd4:	b29d      	uxth	r5, r3
 8016fd6:	4663      	mov	r3, ip
 8016fd8:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8016fda:	195b      	adds	r3, r3, r5
 8016fdc:	8033      	strh	r3, [r6, #0]
 8016fde:	9b08      	ldr	r3, [sp, #32]
 8016fe0:	2f00      	cmp	r7, #0
 8016fe2:	dc00      	bgt.n	8016fe6 <arm_radix4_butterfly_inverse_q15+0x532>
 8016fe4:	e0ea      	b.n	80171bc <arm_radix4_butterfly_inverse_q15+0x708>
 8016fe6:	b21f      	sxth	r7, r3
 8016fe8:	107f      	asrs	r7, r7, #1
 8016fea:	b2bf      	uxth	r7, r7
 8016fec:	464b      	mov	r3, r9
 8016fee:	2c00      	cmp	r4, #0
 8016ff0:	dc00      	bgt.n	8016ff4 <arm_radix4_butterfly_inverse_q15+0x540>
 8016ff2:	e0e1      	b.n	80171b8 <arm_radix4_butterfly_inverse_q15+0x704>
 8016ff4:	b21c      	sxth	r4, r3
 8016ff6:	1064      	asrs	r4, r4, #1
 8016ff8:	b2a3      	uxth	r3, r4
 8016ffa:	4699      	mov	r9, r3
 8016ffc:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8016ffe:	18fb      	adds	r3, r7, r3
 8017000:	8073      	strh	r3, [r6, #2]
 8017002:	9b01      	ldr	r3, [sp, #4]
 8017004:	5ef3      	ldrsh	r3, [r6, r3]
 8017006:	4698      	mov	r8, r3
 8017008:	9b00      	ldr	r3, [sp, #0]
 801700a:	2400      	movs	r4, #0
 801700c:	5f1b      	ldrsh	r3, [r3, r4]
 801700e:	464c      	mov	r4, r9
 8017010:	9303      	str	r3, [sp, #12]
 8017012:	4663      	mov	r3, ip
 8017014:	1b5b      	subs	r3, r3, r5
 8017016:	9d01      	ldr	r5, [sp, #4]
 8017018:	1b3f      	subs	r7, r7, r4
 801701a:	5373      	strh	r3, [r6, r5]
 801701c:	9b00      	ldr	r3, [sp, #0]
 801701e:	801f      	strh	r7, [r3, #0]
 8017020:	2300      	movs	r3, #0
 8017022:	5ec4      	ldrsh	r4, [r0, r3]
 8017024:	4643      	mov	r3, r8
 8017026:	1b1c      	subs	r4, r3, r4
 8017028:	46a0      	mov	r8, r4
 801702a:	455c      	cmp	r4, fp
 801702c:	dd01      	ble.n	8017032 <arm_radix4_butterfly_inverse_q15+0x57e>
 801702e:	4b64      	ldr	r3, [pc, #400]	@ (80171c0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8017030:	4698      	mov	r8, r3
 8017032:	46a1      	mov	r9, r4
 8017034:	4554      	cmp	r4, sl
 8017036:	da01      	bge.n	801703c <arm_radix4_butterfly_inverse_q15+0x588>
 8017038:	4b62      	ldr	r3, [pc, #392]	@ (80171c4 <arm_radix4_butterfly_inverse_q15+0x710>)
 801703a:	4699      	mov	r9, r3
 801703c:	2302      	movs	r3, #2
 801703e:	5ec5      	ldrsh	r5, [r0, r3]
 8017040:	9b03      	ldr	r3, [sp, #12]
 8017042:	1b5d      	subs	r5, r3, r5
 8017044:	002b      	movs	r3, r5
 8017046:	455d      	cmp	r5, fp
 8017048:	dd00      	ble.n	801704c <arm_radix4_butterfly_inverse_q15+0x598>
 801704a:	4b5d      	ldr	r3, [pc, #372]	@ (80171c0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 801704c:	002f      	movs	r7, r5
 801704e:	4555      	cmp	r5, sl
 8017050:	da00      	bge.n	8017054 <arm_radix4_butterfly_inverse_q15+0x5a0>
 8017052:	4f5c      	ldr	r7, [pc, #368]	@ (80171c4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8017054:	9e06      	ldr	r6, [sp, #24]
 8017056:	46b4      	mov	ip, r6
 8017058:	2900      	cmp	r1, #0
 801705a:	dc00      	bgt.n	801705e <arm_radix4_butterfly_inverse_q15+0x5aa>
 801705c:	e0a9      	b.n	80171b2 <arm_radix4_butterfly_inverse_q15+0x6fe>
 801705e:	4661      	mov	r1, ip
 8017060:	b209      	sxth	r1, r1
 8017062:	1049      	asrs	r1, r1, #1
 8017064:	b289      	uxth	r1, r1
 8017066:	2d00      	cmp	r5, #0
 8017068:	dc00      	bgt.n	801706c <arm_radix4_butterfly_inverse_q15+0x5b8>
 801706a:	e0a0      	b.n	80171ae <arm_radix4_butterfly_inverse_q15+0x6fa>
 801706c:	b21b      	sxth	r3, r3
 801706e:	105b      	asrs	r3, r3, #1
 8017070:	b29b      	uxth	r3, r3
 8017072:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8017074:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017076:	1acd      	subs	r5, r1, r3
 8017078:	53f5      	strh	r5, [r6, r7]
 801707a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801707c:	2a00      	cmp	r2, #0
 801707e:	dc00      	bgt.n	8017082 <arm_radix4_butterfly_inverse_q15+0x5ce>
 8017080:	e093      	b.n	80171aa <arm_radix4_butterfly_inverse_q15+0x6f6>
 8017082:	b22d      	sxth	r5, r5
 8017084:	106d      	asrs	r5, r5, #1
 8017086:	b2ad      	uxth	r5, r5
 8017088:	2c00      	cmp	r4, #0
 801708a:	dc00      	bgt.n	801708e <arm_radix4_butterfly_inverse_q15+0x5da>
 801708c:	e08b      	b.n	80171a6 <arm_radix4_butterfly_inverse_q15+0x6f2>
 801708e:	4642      	mov	r2, r8
 8017090:	b212      	sxth	r2, r2
 8017092:	1052      	asrs	r2, r2, #1
 8017094:	9f00      	ldr	r7, [sp, #0]
 8017096:	b292      	uxth	r2, r2
 8017098:	9e01      	ldr	r6, [sp, #4]
 801709a:	18ac      	adds	r4, r5, r2
 801709c:	1aaa      	subs	r2, r5, r2
 801709e:	53bc      	strh	r4, [r7, r6]
 80170a0:	8042      	strh	r2, [r0, #2]
 80170a2:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80170a4:	18c9      	adds	r1, r1, r3
 80170a6:	4694      	mov	ip, r2
 80170a8:	9b04      	ldr	r3, [sp, #16]
 80170aa:	8001      	strh	r1, [r0, #0]
 80170ac:	4463      	add	r3, ip
 80170ae:	9a02      	ldr	r2, [sp, #8]
 80170b0:	0019      	movs	r1, r3
 80170b2:	9304      	str	r3, [sp, #16]
 80170b4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80170b6:	4694      	mov	ip, r2
 80170b8:	001c      	movs	r4, r3
 80170ba:	003b      	movs	r3, r7
 80170bc:	4463      	add	r3, ip
 80170be:	9300      	str	r3, [sp, #0]
 80170c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170c2:	4464      	add	r4, ip
 80170c4:	941c      	str	r4, [sp, #112]	@ 0x70
 80170c6:	4460      	add	r0, ip
 80170c8:	001a      	movs	r2, r3
 80170ca:	428a      	cmp	r2, r1
 80170cc:	d364      	bcc.n	8017198 <arm_radix4_butterfly_inverse_q15+0x6e4>
 80170ce:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80170d0:	2200      	movs	r2, #0
 80170d2:	5e9d      	ldrsh	r5, [r3, r2]
 80170d4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80170d6:	5e99      	ldrsh	r1, [r3, r2]
 80170d8:	186b      	adds	r3, r5, r1
 80170da:	469c      	mov	ip, r3
 80170dc:	455b      	cmp	r3, fp
 80170de:	dd00      	ble.n	80170e2 <arm_radix4_butterfly_inverse_q15+0x62e>
 80170e0:	4b37      	ldr	r3, [pc, #220]	@ (80171c0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 80170e2:	46e0      	mov	r8, ip
 80170e4:	45d4      	cmp	ip, sl
 80170e6:	da01      	bge.n	80170ec <arm_radix4_butterfly_inverse_q15+0x638>
 80170e8:	4a36      	ldr	r2, [pc, #216]	@ (80171c4 <arm_radix4_butterfly_inverse_q15+0x710>)
 80170ea:	4690      	mov	r8, r2
 80170ec:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80170ee:	9e00      	ldr	r6, [sp, #0]
 80170f0:	2402      	movs	r4, #2
 80170f2:	5f14      	ldrsh	r4, [r2, r4]
 80170f4:	9a01      	ldr	r2, [sp, #4]
 80170f6:	5eb2      	ldrsh	r2, [r6, r2]
 80170f8:	18a7      	adds	r7, r4, r2
 80170fa:	9708      	str	r7, [sp, #32]
 80170fc:	455f      	cmp	r7, fp
 80170fe:	dd01      	ble.n	8017104 <arm_radix4_butterfly_inverse_q15+0x650>
 8017100:	4e2f      	ldr	r6, [pc, #188]	@ (80171c0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8017102:	9608      	str	r6, [sp, #32]
 8017104:	9707      	str	r7, [sp, #28]
 8017106:	4557      	cmp	r7, sl
 8017108:	da01      	bge.n	801710e <arm_radix4_butterfly_inverse_q15+0x65a>
 801710a:	4e2e      	ldr	r6, [pc, #184]	@ (80171c4 <arm_radix4_butterfly_inverse_q15+0x710>)
 801710c:	9607      	str	r6, [sp, #28]
 801710e:	1a69      	subs	r1, r5, r1
 8017110:	9106      	str	r1, [sp, #24]
 8017112:	4559      	cmp	r1, fp
 8017114:	dd01      	ble.n	801711a <arm_radix4_butterfly_inverse_q15+0x666>
 8017116:	4d2a      	ldr	r5, [pc, #168]	@ (80171c0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8017118:	9506      	str	r5, [sp, #24]
 801711a:	9105      	str	r1, [sp, #20]
 801711c:	4551      	cmp	r1, sl
 801711e:	da01      	bge.n	8017124 <arm_radix4_butterfly_inverse_q15+0x670>
 8017120:	4d28      	ldr	r5, [pc, #160]	@ (80171c4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8017122:	9505      	str	r5, [sp, #20]
 8017124:	1aa2      	subs	r2, r4, r2
 8017126:	920c      	str	r2, [sp, #48]	@ 0x30
 8017128:	455a      	cmp	r2, fp
 801712a:	dd01      	ble.n	8017130 <arm_radix4_butterfly_inverse_q15+0x67c>
 801712c:	4c24      	ldr	r4, [pc, #144]	@ (80171c0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 801712e:	940c      	str	r4, [sp, #48]	@ 0x30
 8017130:	9209      	str	r2, [sp, #36]	@ 0x24
 8017132:	4552      	cmp	r2, sl
 8017134:	da01      	bge.n	801713a <arm_radix4_butterfly_inverse_q15+0x686>
 8017136:	4c23      	ldr	r4, [pc, #140]	@ (80171c4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8017138:	9409      	str	r4, [sp, #36]	@ 0x24
 801713a:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801713c:	9d01      	ldr	r5, [sp, #4]
 801713e:	5f65      	ldrsh	r5, [r4, r5]
 8017140:	2600      	movs	r6, #0
 8017142:	5f84      	ldrsh	r4, [r0, r6]
 8017144:	192d      	adds	r5, r5, r4
 8017146:	950a      	str	r5, [sp, #40]	@ 0x28
 8017148:	455d      	cmp	r5, fp
 801714a:	dd01      	ble.n	8017150 <arm_radix4_butterfly_inverse_q15+0x69c>
 801714c:	4c1c      	ldr	r4, [pc, #112]	@ (80171c0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 801714e:	940a      	str	r4, [sp, #40]	@ 0x28
 8017150:	950b      	str	r5, [sp, #44]	@ 0x2c
 8017152:	4555      	cmp	r5, sl
 8017154:	da01      	bge.n	801715a <arm_radix4_butterfly_inverse_q15+0x6a6>
 8017156:	4c1b      	ldr	r4, [pc, #108]	@ (80171c4 <arm_radix4_butterfly_inverse_q15+0x710>)
 8017158:	940b      	str	r4, [sp, #44]	@ 0x2c
 801715a:	9c00      	ldr	r4, [sp, #0]
 801715c:	2600      	movs	r6, #0
 801715e:	5fa4      	ldrsh	r4, [r4, r6]
 8017160:	46a1      	mov	r9, r4
 8017162:	2602      	movs	r6, #2
 8017164:	5f84      	ldrsh	r4, [r0, r6]
 8017166:	444c      	add	r4, r9
 8017168:	46a1      	mov	r9, r4
 801716a:	455c      	cmp	r4, fp
 801716c:	dd01      	ble.n	8017172 <arm_radix4_butterfly_inverse_q15+0x6be>
 801716e:	4e14      	ldr	r6, [pc, #80]	@ (80171c0 <arm_radix4_butterfly_inverse_q15+0x70c>)
 8017170:	46b1      	mov	r9, r6
 8017172:	9403      	str	r4, [sp, #12]
 8017174:	4554      	cmp	r4, sl
 8017176:	da01      	bge.n	801717c <arm_radix4_butterfly_inverse_q15+0x6c8>
 8017178:	4e12      	ldr	r6, [pc, #72]	@ (80171c4 <arm_radix4_butterfly_inverse_q15+0x710>)
 801717a:	9603      	str	r6, [sp, #12]
 801717c:	4666      	mov	r6, ip
 801717e:	2e00      	cmp	r6, #0
 8017180:	dd00      	ble.n	8017184 <arm_radix4_butterfly_inverse_q15+0x6d0>
 8017182:	e71d      	b.n	8016fc0 <arm_radix4_butterfly_inverse_q15+0x50c>
 8017184:	4643      	mov	r3, r8
 8017186:	b21b      	sxth	r3, r3
 8017188:	105b      	asrs	r3, r3, #1
 801718a:	b29b      	uxth	r3, r3
 801718c:	469c      	mov	ip, r3
 801718e:	2d00      	cmp	r5, #0
 8017190:	dd00      	ble.n	8017194 <arm_radix4_butterfly_inverse_q15+0x6e0>
 8017192:	e71c      	b.n	8016fce <arm_radix4_butterfly_inverse_q15+0x51a>
 8017194:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017196:	e71b      	b.n	8016fd0 <arm_radix4_butterfly_inverse_q15+0x51c>
 8017198:	b027      	add	sp, #156	@ 0x9c
 801719a:	bc3c      	pop	{r2, r3, r4, r5}
 801719c:	4690      	mov	r8, r2
 801719e:	4699      	mov	r9, r3
 80171a0:	46a2      	mov	sl, r4
 80171a2:	46ab      	mov	fp, r5
 80171a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80171a6:	464a      	mov	r2, r9
 80171a8:	e772      	b.n	8017090 <arm_radix4_butterfly_inverse_q15+0x5dc>
 80171aa:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80171ac:	e769      	b.n	8017082 <arm_radix4_butterfly_inverse_q15+0x5ce>
 80171ae:	003b      	movs	r3, r7
 80171b0:	e75c      	b.n	801706c <arm_radix4_butterfly_inverse_q15+0x5b8>
 80171b2:	9905      	ldr	r1, [sp, #20]
 80171b4:	468c      	mov	ip, r1
 80171b6:	e752      	b.n	801705e <arm_radix4_butterfly_inverse_q15+0x5aa>
 80171b8:	9b03      	ldr	r3, [sp, #12]
 80171ba:	e71b      	b.n	8016ff4 <arm_radix4_butterfly_inverse_q15+0x540>
 80171bc:	9b07      	ldr	r3, [sp, #28]
 80171be:	e712      	b.n	8016fe6 <arm_radix4_butterfly_inverse_q15+0x532>
 80171c0:	00007fff 	.word	0x00007fff
 80171c4:	ffff8000 	.word	0xffff8000

080171c8 <__cvt>:
 80171c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80171ca:	001f      	movs	r7, r3
 80171cc:	2300      	movs	r3, #0
 80171ce:	0016      	movs	r6, r2
 80171d0:	b08b      	sub	sp, #44	@ 0x2c
 80171d2:	429f      	cmp	r7, r3
 80171d4:	da04      	bge.n	80171e0 <__cvt+0x18>
 80171d6:	2180      	movs	r1, #128	@ 0x80
 80171d8:	0609      	lsls	r1, r1, #24
 80171da:	187b      	adds	r3, r7, r1
 80171dc:	001f      	movs	r7, r3
 80171de:	232d      	movs	r3, #45	@ 0x2d
 80171e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80171e2:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 80171e4:	7013      	strb	r3, [r2, #0]
 80171e6:	2320      	movs	r3, #32
 80171e8:	2203      	movs	r2, #3
 80171ea:	439d      	bics	r5, r3
 80171ec:	2d46      	cmp	r5, #70	@ 0x46
 80171ee:	d007      	beq.n	8017200 <__cvt+0x38>
 80171f0:	002b      	movs	r3, r5
 80171f2:	3b45      	subs	r3, #69	@ 0x45
 80171f4:	4259      	negs	r1, r3
 80171f6:	414b      	adcs	r3, r1
 80171f8:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80171fa:	3a01      	subs	r2, #1
 80171fc:	18cb      	adds	r3, r1, r3
 80171fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8017200:	ab09      	add	r3, sp, #36	@ 0x24
 8017202:	9304      	str	r3, [sp, #16]
 8017204:	ab08      	add	r3, sp, #32
 8017206:	9303      	str	r3, [sp, #12]
 8017208:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801720a:	9200      	str	r2, [sp, #0]
 801720c:	9302      	str	r3, [sp, #8]
 801720e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017210:	0032      	movs	r2, r6
 8017212:	9301      	str	r3, [sp, #4]
 8017214:	003b      	movs	r3, r7
 8017216:	f000 ff05 	bl	8018024 <_dtoa_r>
 801721a:	0004      	movs	r4, r0
 801721c:	2d47      	cmp	r5, #71	@ 0x47
 801721e:	d11b      	bne.n	8017258 <__cvt+0x90>
 8017220:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8017222:	07db      	lsls	r3, r3, #31
 8017224:	d511      	bpl.n	801724a <__cvt+0x82>
 8017226:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017228:	18c3      	adds	r3, r0, r3
 801722a:	9307      	str	r3, [sp, #28]
 801722c:	2200      	movs	r2, #0
 801722e:	2300      	movs	r3, #0
 8017230:	0030      	movs	r0, r6
 8017232:	0039      	movs	r1, r7
 8017234:	f7e9 f932 	bl	800049c <__aeabi_dcmpeq>
 8017238:	2800      	cmp	r0, #0
 801723a:	d001      	beq.n	8017240 <__cvt+0x78>
 801723c:	9b07      	ldr	r3, [sp, #28]
 801723e:	9309      	str	r3, [sp, #36]	@ 0x24
 8017240:	2230      	movs	r2, #48	@ 0x30
 8017242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017244:	9907      	ldr	r1, [sp, #28]
 8017246:	428b      	cmp	r3, r1
 8017248:	d320      	bcc.n	801728c <__cvt+0xc4>
 801724a:	0020      	movs	r0, r4
 801724c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801724e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017250:	1b1b      	subs	r3, r3, r4
 8017252:	6013      	str	r3, [r2, #0]
 8017254:	b00b      	add	sp, #44	@ 0x2c
 8017256:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017258:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801725a:	18c3      	adds	r3, r0, r3
 801725c:	9307      	str	r3, [sp, #28]
 801725e:	2d46      	cmp	r5, #70	@ 0x46
 8017260:	d1e4      	bne.n	801722c <__cvt+0x64>
 8017262:	7803      	ldrb	r3, [r0, #0]
 8017264:	2b30      	cmp	r3, #48	@ 0x30
 8017266:	d10c      	bne.n	8017282 <__cvt+0xba>
 8017268:	2200      	movs	r2, #0
 801726a:	2300      	movs	r3, #0
 801726c:	0030      	movs	r0, r6
 801726e:	0039      	movs	r1, r7
 8017270:	f7e9 f914 	bl	800049c <__aeabi_dcmpeq>
 8017274:	2800      	cmp	r0, #0
 8017276:	d104      	bne.n	8017282 <__cvt+0xba>
 8017278:	2301      	movs	r3, #1
 801727a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801727c:	1a9b      	subs	r3, r3, r2
 801727e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017280:	6013      	str	r3, [r2, #0]
 8017282:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017284:	9a07      	ldr	r2, [sp, #28]
 8017286:	681b      	ldr	r3, [r3, #0]
 8017288:	18d3      	adds	r3, r2, r3
 801728a:	e7ce      	b.n	801722a <__cvt+0x62>
 801728c:	1c59      	adds	r1, r3, #1
 801728e:	9109      	str	r1, [sp, #36]	@ 0x24
 8017290:	701a      	strb	r2, [r3, #0]
 8017292:	e7d6      	b.n	8017242 <__cvt+0x7a>

08017294 <__exponent>:
 8017294:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017296:	232b      	movs	r3, #43	@ 0x2b
 8017298:	0005      	movs	r5, r0
 801729a:	000c      	movs	r4, r1
 801729c:	b085      	sub	sp, #20
 801729e:	7002      	strb	r2, [r0, #0]
 80172a0:	2900      	cmp	r1, #0
 80172a2:	da01      	bge.n	80172a8 <__exponent+0x14>
 80172a4:	424c      	negs	r4, r1
 80172a6:	3302      	adds	r3, #2
 80172a8:	706b      	strb	r3, [r5, #1]
 80172aa:	2c09      	cmp	r4, #9
 80172ac:	dd2c      	ble.n	8017308 <__exponent+0x74>
 80172ae:	ab02      	add	r3, sp, #8
 80172b0:	1dde      	adds	r6, r3, #7
 80172b2:	0020      	movs	r0, r4
 80172b4:	210a      	movs	r1, #10
 80172b6:	f7e9 f8db 	bl	8000470 <__aeabi_idivmod>
 80172ba:	0037      	movs	r7, r6
 80172bc:	3130      	adds	r1, #48	@ 0x30
 80172be:	3e01      	subs	r6, #1
 80172c0:	0020      	movs	r0, r4
 80172c2:	7031      	strb	r1, [r6, #0]
 80172c4:	210a      	movs	r1, #10
 80172c6:	9401      	str	r4, [sp, #4]
 80172c8:	f7e8 ffec 	bl	80002a4 <__divsi3>
 80172cc:	9b01      	ldr	r3, [sp, #4]
 80172ce:	0004      	movs	r4, r0
 80172d0:	2b63      	cmp	r3, #99	@ 0x63
 80172d2:	dcee      	bgt.n	80172b2 <__exponent+0x1e>
 80172d4:	1eba      	subs	r2, r7, #2
 80172d6:	1ca8      	adds	r0, r5, #2
 80172d8:	0001      	movs	r1, r0
 80172da:	0013      	movs	r3, r2
 80172dc:	3430      	adds	r4, #48	@ 0x30
 80172de:	7014      	strb	r4, [r2, #0]
 80172e0:	ac02      	add	r4, sp, #8
 80172e2:	3407      	adds	r4, #7
 80172e4:	429c      	cmp	r4, r3
 80172e6:	d80a      	bhi.n	80172fe <__exponent+0x6a>
 80172e8:	2300      	movs	r3, #0
 80172ea:	42a2      	cmp	r2, r4
 80172ec:	d803      	bhi.n	80172f6 <__exponent+0x62>
 80172ee:	3309      	adds	r3, #9
 80172f0:	aa02      	add	r2, sp, #8
 80172f2:	189b      	adds	r3, r3, r2
 80172f4:	1bdb      	subs	r3, r3, r7
 80172f6:	18c0      	adds	r0, r0, r3
 80172f8:	1b40      	subs	r0, r0, r5
 80172fa:	b005      	add	sp, #20
 80172fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80172fe:	781c      	ldrb	r4, [r3, #0]
 8017300:	3301      	adds	r3, #1
 8017302:	700c      	strb	r4, [r1, #0]
 8017304:	3101      	adds	r1, #1
 8017306:	e7eb      	b.n	80172e0 <__exponent+0x4c>
 8017308:	2330      	movs	r3, #48	@ 0x30
 801730a:	18e4      	adds	r4, r4, r3
 801730c:	70ab      	strb	r3, [r5, #2]
 801730e:	1d28      	adds	r0, r5, #4
 8017310:	70ec      	strb	r4, [r5, #3]
 8017312:	e7f1      	b.n	80172f8 <__exponent+0x64>

08017314 <_printf_float>:
 8017314:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017316:	b097      	sub	sp, #92	@ 0x5c
 8017318:	000d      	movs	r5, r1
 801731a:	920a      	str	r2, [sp, #40]	@ 0x28
 801731c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801731e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017320:	9009      	str	r0, [sp, #36]	@ 0x24
 8017322:	f000 fd5d 	bl	8017de0 <_localeconv_r>
 8017326:	6803      	ldr	r3, [r0, #0]
 8017328:	0018      	movs	r0, r3
 801732a:	930d      	str	r3, [sp, #52]	@ 0x34
 801732c:	f7e8 ff14 	bl	8000158 <strlen>
 8017330:	2300      	movs	r3, #0
 8017332:	900f      	str	r0, [sp, #60]	@ 0x3c
 8017334:	9314      	str	r3, [sp, #80]	@ 0x50
 8017336:	7e2b      	ldrb	r3, [r5, #24]
 8017338:	2207      	movs	r2, #7
 801733a:	930c      	str	r3, [sp, #48]	@ 0x30
 801733c:	682b      	ldr	r3, [r5, #0]
 801733e:	930e      	str	r3, [sp, #56]	@ 0x38
 8017340:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017342:	6823      	ldr	r3, [r4, #0]
 8017344:	05c9      	lsls	r1, r1, #23
 8017346:	d545      	bpl.n	80173d4 <_printf_float+0xc0>
 8017348:	189b      	adds	r3, r3, r2
 801734a:	4393      	bics	r3, r2
 801734c:	001a      	movs	r2, r3
 801734e:	3208      	adds	r2, #8
 8017350:	6022      	str	r2, [r4, #0]
 8017352:	2201      	movs	r2, #1
 8017354:	681e      	ldr	r6, [r3, #0]
 8017356:	685f      	ldr	r7, [r3, #4]
 8017358:	007b      	lsls	r3, r7, #1
 801735a:	085b      	lsrs	r3, r3, #1
 801735c:	9311      	str	r3, [sp, #68]	@ 0x44
 801735e:	9610      	str	r6, [sp, #64]	@ 0x40
 8017360:	64ae      	str	r6, [r5, #72]	@ 0x48
 8017362:	64ef      	str	r7, [r5, #76]	@ 0x4c
 8017364:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017366:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017368:	4ba7      	ldr	r3, [pc, #668]	@ (8017608 <_printf_float+0x2f4>)
 801736a:	4252      	negs	r2, r2
 801736c:	f7eb ff8e 	bl	800328c <__aeabi_dcmpun>
 8017370:	2800      	cmp	r0, #0
 8017372:	d131      	bne.n	80173d8 <_printf_float+0xc4>
 8017374:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8017376:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017378:	2201      	movs	r2, #1
 801737a:	4ba3      	ldr	r3, [pc, #652]	@ (8017608 <_printf_float+0x2f4>)
 801737c:	4252      	negs	r2, r2
 801737e:	f7e9 f89d 	bl	80004bc <__aeabi_dcmple>
 8017382:	2800      	cmp	r0, #0
 8017384:	d128      	bne.n	80173d8 <_printf_float+0xc4>
 8017386:	2200      	movs	r2, #0
 8017388:	2300      	movs	r3, #0
 801738a:	0030      	movs	r0, r6
 801738c:	0039      	movs	r1, r7
 801738e:	f7e9 f88b 	bl	80004a8 <__aeabi_dcmplt>
 8017392:	2800      	cmp	r0, #0
 8017394:	d003      	beq.n	801739e <_printf_float+0x8a>
 8017396:	002b      	movs	r3, r5
 8017398:	222d      	movs	r2, #45	@ 0x2d
 801739a:	3343      	adds	r3, #67	@ 0x43
 801739c:	701a      	strb	r2, [r3, #0]
 801739e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173a0:	4f9a      	ldr	r7, [pc, #616]	@ (801760c <_printf_float+0x2f8>)
 80173a2:	2b47      	cmp	r3, #71	@ 0x47
 80173a4:	d900      	bls.n	80173a8 <_printf_float+0x94>
 80173a6:	4f9a      	ldr	r7, [pc, #616]	@ (8017610 <_printf_float+0x2fc>)
 80173a8:	2303      	movs	r3, #3
 80173aa:	2400      	movs	r4, #0
 80173ac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80173ae:	612b      	str	r3, [r5, #16]
 80173b0:	3301      	adds	r3, #1
 80173b2:	439a      	bics	r2, r3
 80173b4:	602a      	str	r2, [r5, #0]
 80173b6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80173b8:	0029      	movs	r1, r5
 80173ba:	9300      	str	r3, [sp, #0]
 80173bc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80173be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80173c0:	aa15      	add	r2, sp, #84	@ 0x54
 80173c2:	f000 f9e5 	bl	8017790 <_printf_common>
 80173c6:	3001      	adds	r0, #1
 80173c8:	d000      	beq.n	80173cc <_printf_float+0xb8>
 80173ca:	e09f      	b.n	801750c <_printf_float+0x1f8>
 80173cc:	2001      	movs	r0, #1
 80173ce:	4240      	negs	r0, r0
 80173d0:	b017      	add	sp, #92	@ 0x5c
 80173d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80173d4:	3307      	adds	r3, #7
 80173d6:	e7b8      	b.n	801734a <_printf_float+0x36>
 80173d8:	0032      	movs	r2, r6
 80173da:	003b      	movs	r3, r7
 80173dc:	0030      	movs	r0, r6
 80173de:	0039      	movs	r1, r7
 80173e0:	f7eb ff54 	bl	800328c <__aeabi_dcmpun>
 80173e4:	2800      	cmp	r0, #0
 80173e6:	d00b      	beq.n	8017400 <_printf_float+0xec>
 80173e8:	2f00      	cmp	r7, #0
 80173ea:	da03      	bge.n	80173f4 <_printf_float+0xe0>
 80173ec:	002b      	movs	r3, r5
 80173ee:	222d      	movs	r2, #45	@ 0x2d
 80173f0:	3343      	adds	r3, #67	@ 0x43
 80173f2:	701a      	strb	r2, [r3, #0]
 80173f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173f6:	4f87      	ldr	r7, [pc, #540]	@ (8017614 <_printf_float+0x300>)
 80173f8:	2b47      	cmp	r3, #71	@ 0x47
 80173fa:	d9d5      	bls.n	80173a8 <_printf_float+0x94>
 80173fc:	4f86      	ldr	r7, [pc, #536]	@ (8017618 <_printf_float+0x304>)
 80173fe:	e7d3      	b.n	80173a8 <_printf_float+0x94>
 8017400:	2220      	movs	r2, #32
 8017402:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8017404:	686b      	ldr	r3, [r5, #4]
 8017406:	4394      	bics	r4, r2
 8017408:	1c5a      	adds	r2, r3, #1
 801740a:	d146      	bne.n	801749a <_printf_float+0x186>
 801740c:	3307      	adds	r3, #7
 801740e:	606b      	str	r3, [r5, #4]
 8017410:	2380      	movs	r3, #128	@ 0x80
 8017412:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017414:	00db      	lsls	r3, r3, #3
 8017416:	4313      	orrs	r3, r2
 8017418:	2200      	movs	r2, #0
 801741a:	602b      	str	r3, [r5, #0]
 801741c:	9206      	str	r2, [sp, #24]
 801741e:	aa14      	add	r2, sp, #80	@ 0x50
 8017420:	9205      	str	r2, [sp, #20]
 8017422:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017424:	a90a      	add	r1, sp, #40	@ 0x28
 8017426:	9204      	str	r2, [sp, #16]
 8017428:	aa13      	add	r2, sp, #76	@ 0x4c
 801742a:	9203      	str	r2, [sp, #12]
 801742c:	2223      	movs	r2, #35	@ 0x23
 801742e:	1852      	adds	r2, r2, r1
 8017430:	9202      	str	r2, [sp, #8]
 8017432:	9301      	str	r3, [sp, #4]
 8017434:	686b      	ldr	r3, [r5, #4]
 8017436:	0032      	movs	r2, r6
 8017438:	9300      	str	r3, [sp, #0]
 801743a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801743c:	003b      	movs	r3, r7
 801743e:	f7ff fec3 	bl	80171c8 <__cvt>
 8017442:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8017444:	0007      	movs	r7, r0
 8017446:	2c47      	cmp	r4, #71	@ 0x47
 8017448:	d12d      	bne.n	80174a6 <_printf_float+0x192>
 801744a:	1cd3      	adds	r3, r2, #3
 801744c:	db02      	blt.n	8017454 <_printf_float+0x140>
 801744e:	686b      	ldr	r3, [r5, #4]
 8017450:	429a      	cmp	r2, r3
 8017452:	dd48      	ble.n	80174e6 <_printf_float+0x1d2>
 8017454:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017456:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8017458:	3b02      	subs	r3, #2
 801745a:	b2db      	uxtb	r3, r3
 801745c:	930c      	str	r3, [sp, #48]	@ 0x30
 801745e:	0028      	movs	r0, r5
 8017460:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017462:	3901      	subs	r1, #1
 8017464:	3050      	adds	r0, #80	@ 0x50
 8017466:	9113      	str	r1, [sp, #76]	@ 0x4c
 8017468:	f7ff ff14 	bl	8017294 <__exponent>
 801746c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801746e:	0004      	movs	r4, r0
 8017470:	1813      	adds	r3, r2, r0
 8017472:	612b      	str	r3, [r5, #16]
 8017474:	2a01      	cmp	r2, #1
 8017476:	dc02      	bgt.n	801747e <_printf_float+0x16a>
 8017478:	682a      	ldr	r2, [r5, #0]
 801747a:	07d2      	lsls	r2, r2, #31
 801747c:	d501      	bpl.n	8017482 <_printf_float+0x16e>
 801747e:	3301      	adds	r3, #1
 8017480:	612b      	str	r3, [r5, #16]
 8017482:	2323      	movs	r3, #35	@ 0x23
 8017484:	aa0a      	add	r2, sp, #40	@ 0x28
 8017486:	189b      	adds	r3, r3, r2
 8017488:	781b      	ldrb	r3, [r3, #0]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d100      	bne.n	8017490 <_printf_float+0x17c>
 801748e:	e792      	b.n	80173b6 <_printf_float+0xa2>
 8017490:	002b      	movs	r3, r5
 8017492:	222d      	movs	r2, #45	@ 0x2d
 8017494:	3343      	adds	r3, #67	@ 0x43
 8017496:	701a      	strb	r2, [r3, #0]
 8017498:	e78d      	b.n	80173b6 <_printf_float+0xa2>
 801749a:	2c47      	cmp	r4, #71	@ 0x47
 801749c:	d1b8      	bne.n	8017410 <_printf_float+0xfc>
 801749e:	2b00      	cmp	r3, #0
 80174a0:	d1b6      	bne.n	8017410 <_printf_float+0xfc>
 80174a2:	3301      	adds	r3, #1
 80174a4:	e7b3      	b.n	801740e <_printf_float+0xfa>
 80174a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174a8:	0011      	movs	r1, r2
 80174aa:	2b65      	cmp	r3, #101	@ 0x65
 80174ac:	d9d7      	bls.n	801745e <_printf_float+0x14a>
 80174ae:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80174b0:	2b66      	cmp	r3, #102	@ 0x66
 80174b2:	d11a      	bne.n	80174ea <_printf_float+0x1d6>
 80174b4:	686b      	ldr	r3, [r5, #4]
 80174b6:	2a00      	cmp	r2, #0
 80174b8:	dd09      	ble.n	80174ce <_printf_float+0x1ba>
 80174ba:	612a      	str	r2, [r5, #16]
 80174bc:	2b00      	cmp	r3, #0
 80174be:	d102      	bne.n	80174c6 <_printf_float+0x1b2>
 80174c0:	6829      	ldr	r1, [r5, #0]
 80174c2:	07c9      	lsls	r1, r1, #31
 80174c4:	d50b      	bpl.n	80174de <_printf_float+0x1ca>
 80174c6:	3301      	adds	r3, #1
 80174c8:	189b      	adds	r3, r3, r2
 80174ca:	612b      	str	r3, [r5, #16]
 80174cc:	e007      	b.n	80174de <_printf_float+0x1ca>
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d103      	bne.n	80174da <_printf_float+0x1c6>
 80174d2:	2201      	movs	r2, #1
 80174d4:	6829      	ldr	r1, [r5, #0]
 80174d6:	4211      	tst	r1, r2
 80174d8:	d000      	beq.n	80174dc <_printf_float+0x1c8>
 80174da:	1c9a      	adds	r2, r3, #2
 80174dc:	612a      	str	r2, [r5, #16]
 80174de:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80174e0:	2400      	movs	r4, #0
 80174e2:	65ab      	str	r3, [r5, #88]	@ 0x58
 80174e4:	e7cd      	b.n	8017482 <_printf_float+0x16e>
 80174e6:	2367      	movs	r3, #103	@ 0x67
 80174e8:	930c      	str	r3, [sp, #48]	@ 0x30
 80174ea:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80174ec:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80174ee:	4299      	cmp	r1, r3
 80174f0:	db06      	blt.n	8017500 <_printf_float+0x1ec>
 80174f2:	682b      	ldr	r3, [r5, #0]
 80174f4:	6129      	str	r1, [r5, #16]
 80174f6:	07db      	lsls	r3, r3, #31
 80174f8:	d5f1      	bpl.n	80174de <_printf_float+0x1ca>
 80174fa:	3101      	adds	r1, #1
 80174fc:	6129      	str	r1, [r5, #16]
 80174fe:	e7ee      	b.n	80174de <_printf_float+0x1ca>
 8017500:	2201      	movs	r2, #1
 8017502:	2900      	cmp	r1, #0
 8017504:	dce0      	bgt.n	80174c8 <_printf_float+0x1b4>
 8017506:	1892      	adds	r2, r2, r2
 8017508:	1a52      	subs	r2, r2, r1
 801750a:	e7dd      	b.n	80174c8 <_printf_float+0x1b4>
 801750c:	682a      	ldr	r2, [r5, #0]
 801750e:	0553      	lsls	r3, r2, #21
 8017510:	d408      	bmi.n	8017524 <_printf_float+0x210>
 8017512:	692b      	ldr	r3, [r5, #16]
 8017514:	003a      	movs	r2, r7
 8017516:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017518:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801751a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801751c:	47a0      	blx	r4
 801751e:	3001      	adds	r0, #1
 8017520:	d129      	bne.n	8017576 <_printf_float+0x262>
 8017522:	e753      	b.n	80173cc <_printf_float+0xb8>
 8017524:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017526:	2b65      	cmp	r3, #101	@ 0x65
 8017528:	d800      	bhi.n	801752c <_printf_float+0x218>
 801752a:	e0da      	b.n	80176e2 <_printf_float+0x3ce>
 801752c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801752e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017530:	2200      	movs	r2, #0
 8017532:	2300      	movs	r3, #0
 8017534:	f7e8 ffb2 	bl	800049c <__aeabi_dcmpeq>
 8017538:	2800      	cmp	r0, #0
 801753a:	d033      	beq.n	80175a4 <_printf_float+0x290>
 801753c:	2301      	movs	r3, #1
 801753e:	4a37      	ldr	r2, [pc, #220]	@ (801761c <_printf_float+0x308>)
 8017540:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017542:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017544:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8017546:	47a0      	blx	r4
 8017548:	3001      	adds	r0, #1
 801754a:	d100      	bne.n	801754e <_printf_float+0x23a>
 801754c:	e73e      	b.n	80173cc <_printf_float+0xb8>
 801754e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017550:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017552:	42b3      	cmp	r3, r6
 8017554:	db02      	blt.n	801755c <_printf_float+0x248>
 8017556:	682b      	ldr	r3, [r5, #0]
 8017558:	07db      	lsls	r3, r3, #31
 801755a:	d50c      	bpl.n	8017576 <_printf_float+0x262>
 801755c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801755e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017560:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017562:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017564:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017566:	47a0      	blx	r4
 8017568:	2400      	movs	r4, #0
 801756a:	3001      	adds	r0, #1
 801756c:	d100      	bne.n	8017570 <_printf_float+0x25c>
 801756e:	e72d      	b.n	80173cc <_printf_float+0xb8>
 8017570:	1e73      	subs	r3, r6, #1
 8017572:	42a3      	cmp	r3, r4
 8017574:	dc0a      	bgt.n	801758c <_printf_float+0x278>
 8017576:	682b      	ldr	r3, [r5, #0]
 8017578:	079b      	lsls	r3, r3, #30
 801757a:	d500      	bpl.n	801757e <_printf_float+0x26a>
 801757c:	e105      	b.n	801778a <_printf_float+0x476>
 801757e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8017580:	68e8      	ldr	r0, [r5, #12]
 8017582:	4298      	cmp	r0, r3
 8017584:	db00      	blt.n	8017588 <_printf_float+0x274>
 8017586:	e723      	b.n	80173d0 <_printf_float+0xbc>
 8017588:	0018      	movs	r0, r3
 801758a:	e721      	b.n	80173d0 <_printf_float+0xbc>
 801758c:	002a      	movs	r2, r5
 801758e:	2301      	movs	r3, #1
 8017590:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017592:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017594:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017596:	321a      	adds	r2, #26
 8017598:	47b8      	blx	r7
 801759a:	3001      	adds	r0, #1
 801759c:	d100      	bne.n	80175a0 <_printf_float+0x28c>
 801759e:	e715      	b.n	80173cc <_printf_float+0xb8>
 80175a0:	3401      	adds	r4, #1
 80175a2:	e7e5      	b.n	8017570 <_printf_float+0x25c>
 80175a4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80175a6:	2b00      	cmp	r3, #0
 80175a8:	dc3a      	bgt.n	8017620 <_printf_float+0x30c>
 80175aa:	2301      	movs	r3, #1
 80175ac:	4a1b      	ldr	r2, [pc, #108]	@ (801761c <_printf_float+0x308>)
 80175ae:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175b0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175b2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80175b4:	47a0      	blx	r4
 80175b6:	3001      	adds	r0, #1
 80175b8:	d100      	bne.n	80175bc <_printf_float+0x2a8>
 80175ba:	e707      	b.n	80173cc <_printf_float+0xb8>
 80175bc:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 80175be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80175c0:	4333      	orrs	r3, r6
 80175c2:	d102      	bne.n	80175ca <_printf_float+0x2b6>
 80175c4:	682b      	ldr	r3, [r5, #0]
 80175c6:	07db      	lsls	r3, r3, #31
 80175c8:	d5d5      	bpl.n	8017576 <_printf_float+0x262>
 80175ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80175cc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80175ce:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175d0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175d2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80175d4:	47a0      	blx	r4
 80175d6:	2300      	movs	r3, #0
 80175d8:	3001      	adds	r0, #1
 80175da:	d100      	bne.n	80175de <_printf_float+0x2ca>
 80175dc:	e6f6      	b.n	80173cc <_printf_float+0xb8>
 80175de:	930c      	str	r3, [sp, #48]	@ 0x30
 80175e0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80175e2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80175e4:	425b      	negs	r3, r3
 80175e6:	4293      	cmp	r3, r2
 80175e8:	dc01      	bgt.n	80175ee <_printf_float+0x2da>
 80175ea:	0033      	movs	r3, r6
 80175ec:	e792      	b.n	8017514 <_printf_float+0x200>
 80175ee:	002a      	movs	r2, r5
 80175f0:	2301      	movs	r3, #1
 80175f2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80175f4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80175f6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80175f8:	321a      	adds	r2, #26
 80175fa:	47a0      	blx	r4
 80175fc:	3001      	adds	r0, #1
 80175fe:	d100      	bne.n	8017602 <_printf_float+0x2ee>
 8017600:	e6e4      	b.n	80173cc <_printf_float+0xb8>
 8017602:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017604:	3301      	adds	r3, #1
 8017606:	e7ea      	b.n	80175de <_printf_float+0x2ca>
 8017608:	7fefffff 	.word	0x7fefffff
 801760c:	0802d418 	.word	0x0802d418
 8017610:	0802d41c 	.word	0x0802d41c
 8017614:	0802d420 	.word	0x0802d420
 8017618:	0802d424 	.word	0x0802d424
 801761c:	0802d428 	.word	0x0802d428
 8017620:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8017622:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 8017624:	930c      	str	r3, [sp, #48]	@ 0x30
 8017626:	429e      	cmp	r6, r3
 8017628:	dd00      	ble.n	801762c <_printf_float+0x318>
 801762a:	001e      	movs	r6, r3
 801762c:	2e00      	cmp	r6, #0
 801762e:	dc31      	bgt.n	8017694 <_printf_float+0x380>
 8017630:	43f3      	mvns	r3, r6
 8017632:	2400      	movs	r4, #0
 8017634:	17db      	asrs	r3, r3, #31
 8017636:	4033      	ands	r3, r6
 8017638:	930e      	str	r3, [sp, #56]	@ 0x38
 801763a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801763c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801763e:	1af3      	subs	r3, r6, r3
 8017640:	42a3      	cmp	r3, r4
 8017642:	dc30      	bgt.n	80176a6 <_printf_float+0x392>
 8017644:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017646:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017648:	429a      	cmp	r2, r3
 801764a:	dc38      	bgt.n	80176be <_printf_float+0x3aa>
 801764c:	682b      	ldr	r3, [r5, #0]
 801764e:	07db      	lsls	r3, r3, #31
 8017650:	d435      	bmi.n	80176be <_printf_float+0x3aa>
 8017652:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017654:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017656:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017658:	1b9b      	subs	r3, r3, r6
 801765a:	1b14      	subs	r4, r2, r4
 801765c:	429c      	cmp	r4, r3
 801765e:	dd00      	ble.n	8017662 <_printf_float+0x34e>
 8017660:	001c      	movs	r4, r3
 8017662:	2c00      	cmp	r4, #0
 8017664:	dc34      	bgt.n	80176d0 <_printf_float+0x3bc>
 8017666:	43e3      	mvns	r3, r4
 8017668:	2600      	movs	r6, #0
 801766a:	17db      	asrs	r3, r3, #31
 801766c:	401c      	ands	r4, r3
 801766e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8017670:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8017672:	1ad3      	subs	r3, r2, r3
 8017674:	1b1b      	subs	r3, r3, r4
 8017676:	42b3      	cmp	r3, r6
 8017678:	dc00      	bgt.n	801767c <_printf_float+0x368>
 801767a:	e77c      	b.n	8017576 <_printf_float+0x262>
 801767c:	002a      	movs	r2, r5
 801767e:	2301      	movs	r3, #1
 8017680:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017682:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017684:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017686:	321a      	adds	r2, #26
 8017688:	47b8      	blx	r7
 801768a:	3001      	adds	r0, #1
 801768c:	d100      	bne.n	8017690 <_printf_float+0x37c>
 801768e:	e69d      	b.n	80173cc <_printf_float+0xb8>
 8017690:	3601      	adds	r6, #1
 8017692:	e7ec      	b.n	801766e <_printf_float+0x35a>
 8017694:	0033      	movs	r3, r6
 8017696:	003a      	movs	r2, r7
 8017698:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801769a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801769c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801769e:	47a0      	blx	r4
 80176a0:	3001      	adds	r0, #1
 80176a2:	d1c5      	bne.n	8017630 <_printf_float+0x31c>
 80176a4:	e692      	b.n	80173cc <_printf_float+0xb8>
 80176a6:	002a      	movs	r2, r5
 80176a8:	2301      	movs	r3, #1
 80176aa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176ac:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176ae:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80176b0:	321a      	adds	r2, #26
 80176b2:	47b0      	blx	r6
 80176b4:	3001      	adds	r0, #1
 80176b6:	d100      	bne.n	80176ba <_printf_float+0x3a6>
 80176b8:	e688      	b.n	80173cc <_printf_float+0xb8>
 80176ba:	3401      	adds	r4, #1
 80176bc:	e7bd      	b.n	801763a <_printf_float+0x326>
 80176be:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80176c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80176c2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176c4:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176c6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80176c8:	47a0      	blx	r4
 80176ca:	3001      	adds	r0, #1
 80176cc:	d1c1      	bne.n	8017652 <_printf_float+0x33e>
 80176ce:	e67d      	b.n	80173cc <_printf_float+0xb8>
 80176d0:	19ba      	adds	r2, r7, r6
 80176d2:	0023      	movs	r3, r4
 80176d4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176d6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176d8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80176da:	47b0      	blx	r6
 80176dc:	3001      	adds	r0, #1
 80176de:	d1c2      	bne.n	8017666 <_printf_float+0x352>
 80176e0:	e674      	b.n	80173cc <_printf_float+0xb8>
 80176e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80176e4:	930c      	str	r3, [sp, #48]	@ 0x30
 80176e6:	2b01      	cmp	r3, #1
 80176e8:	dc02      	bgt.n	80176f0 <_printf_float+0x3dc>
 80176ea:	2301      	movs	r3, #1
 80176ec:	421a      	tst	r2, r3
 80176ee:	d039      	beq.n	8017764 <_printf_float+0x450>
 80176f0:	2301      	movs	r3, #1
 80176f2:	003a      	movs	r2, r7
 80176f4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80176f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80176f8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80176fa:	47b0      	blx	r6
 80176fc:	3001      	adds	r0, #1
 80176fe:	d100      	bne.n	8017702 <_printf_float+0x3ee>
 8017700:	e664      	b.n	80173cc <_printf_float+0xb8>
 8017702:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8017704:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017706:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017708:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801770a:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801770c:	47b0      	blx	r6
 801770e:	3001      	adds	r0, #1
 8017710:	d100      	bne.n	8017714 <_printf_float+0x400>
 8017712:	e65b      	b.n	80173cc <_printf_float+0xb8>
 8017714:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 8017716:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 8017718:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801771a:	2200      	movs	r2, #0
 801771c:	3b01      	subs	r3, #1
 801771e:	930c      	str	r3, [sp, #48]	@ 0x30
 8017720:	2300      	movs	r3, #0
 8017722:	f7e8 febb 	bl	800049c <__aeabi_dcmpeq>
 8017726:	2800      	cmp	r0, #0
 8017728:	d11a      	bne.n	8017760 <_printf_float+0x44c>
 801772a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801772c:	1c7a      	adds	r2, r7, #1
 801772e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017730:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017732:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017734:	47b0      	blx	r6
 8017736:	3001      	adds	r0, #1
 8017738:	d10e      	bne.n	8017758 <_printf_float+0x444>
 801773a:	e647      	b.n	80173cc <_printf_float+0xb8>
 801773c:	002a      	movs	r2, r5
 801773e:	2301      	movs	r3, #1
 8017740:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8017742:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017744:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8017746:	321a      	adds	r2, #26
 8017748:	47b8      	blx	r7
 801774a:	3001      	adds	r0, #1
 801774c:	d100      	bne.n	8017750 <_printf_float+0x43c>
 801774e:	e63d      	b.n	80173cc <_printf_float+0xb8>
 8017750:	3601      	adds	r6, #1
 8017752:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017754:	429e      	cmp	r6, r3
 8017756:	dbf1      	blt.n	801773c <_printf_float+0x428>
 8017758:	002a      	movs	r2, r5
 801775a:	0023      	movs	r3, r4
 801775c:	3250      	adds	r2, #80	@ 0x50
 801775e:	e6da      	b.n	8017516 <_printf_float+0x202>
 8017760:	2600      	movs	r6, #0
 8017762:	e7f6      	b.n	8017752 <_printf_float+0x43e>
 8017764:	003a      	movs	r2, r7
 8017766:	e7e2      	b.n	801772e <_printf_float+0x41a>
 8017768:	002a      	movs	r2, r5
 801776a:	2301      	movs	r3, #1
 801776c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801776e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8017770:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8017772:	3219      	adds	r2, #25
 8017774:	47b0      	blx	r6
 8017776:	3001      	adds	r0, #1
 8017778:	d100      	bne.n	801777c <_printf_float+0x468>
 801777a:	e627      	b.n	80173cc <_printf_float+0xb8>
 801777c:	3401      	adds	r4, #1
 801777e:	68eb      	ldr	r3, [r5, #12]
 8017780:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8017782:	1a9b      	subs	r3, r3, r2
 8017784:	42a3      	cmp	r3, r4
 8017786:	dcef      	bgt.n	8017768 <_printf_float+0x454>
 8017788:	e6f9      	b.n	801757e <_printf_float+0x26a>
 801778a:	2400      	movs	r4, #0
 801778c:	e7f7      	b.n	801777e <_printf_float+0x46a>
 801778e:	46c0      	nop			@ (mov r8, r8)

08017790 <_printf_common>:
 8017790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017792:	0016      	movs	r6, r2
 8017794:	9301      	str	r3, [sp, #4]
 8017796:	688a      	ldr	r2, [r1, #8]
 8017798:	690b      	ldr	r3, [r1, #16]
 801779a:	000c      	movs	r4, r1
 801779c:	9000      	str	r0, [sp, #0]
 801779e:	4293      	cmp	r3, r2
 80177a0:	da00      	bge.n	80177a4 <_printf_common+0x14>
 80177a2:	0013      	movs	r3, r2
 80177a4:	0022      	movs	r2, r4
 80177a6:	6033      	str	r3, [r6, #0]
 80177a8:	3243      	adds	r2, #67	@ 0x43
 80177aa:	7812      	ldrb	r2, [r2, #0]
 80177ac:	2a00      	cmp	r2, #0
 80177ae:	d001      	beq.n	80177b4 <_printf_common+0x24>
 80177b0:	3301      	adds	r3, #1
 80177b2:	6033      	str	r3, [r6, #0]
 80177b4:	6823      	ldr	r3, [r4, #0]
 80177b6:	069b      	lsls	r3, r3, #26
 80177b8:	d502      	bpl.n	80177c0 <_printf_common+0x30>
 80177ba:	6833      	ldr	r3, [r6, #0]
 80177bc:	3302      	adds	r3, #2
 80177be:	6033      	str	r3, [r6, #0]
 80177c0:	6822      	ldr	r2, [r4, #0]
 80177c2:	2306      	movs	r3, #6
 80177c4:	0015      	movs	r5, r2
 80177c6:	401d      	ands	r5, r3
 80177c8:	421a      	tst	r2, r3
 80177ca:	d027      	beq.n	801781c <_printf_common+0x8c>
 80177cc:	0023      	movs	r3, r4
 80177ce:	3343      	adds	r3, #67	@ 0x43
 80177d0:	781b      	ldrb	r3, [r3, #0]
 80177d2:	1e5a      	subs	r2, r3, #1
 80177d4:	4193      	sbcs	r3, r2
 80177d6:	6822      	ldr	r2, [r4, #0]
 80177d8:	0692      	lsls	r2, r2, #26
 80177da:	d430      	bmi.n	801783e <_printf_common+0xae>
 80177dc:	0022      	movs	r2, r4
 80177de:	9901      	ldr	r1, [sp, #4]
 80177e0:	9800      	ldr	r0, [sp, #0]
 80177e2:	9d08      	ldr	r5, [sp, #32]
 80177e4:	3243      	adds	r2, #67	@ 0x43
 80177e6:	47a8      	blx	r5
 80177e8:	3001      	adds	r0, #1
 80177ea:	d025      	beq.n	8017838 <_printf_common+0xa8>
 80177ec:	2206      	movs	r2, #6
 80177ee:	6823      	ldr	r3, [r4, #0]
 80177f0:	2500      	movs	r5, #0
 80177f2:	4013      	ands	r3, r2
 80177f4:	2b04      	cmp	r3, #4
 80177f6:	d105      	bne.n	8017804 <_printf_common+0x74>
 80177f8:	6833      	ldr	r3, [r6, #0]
 80177fa:	68e5      	ldr	r5, [r4, #12]
 80177fc:	1aed      	subs	r5, r5, r3
 80177fe:	43eb      	mvns	r3, r5
 8017800:	17db      	asrs	r3, r3, #31
 8017802:	401d      	ands	r5, r3
 8017804:	68a3      	ldr	r3, [r4, #8]
 8017806:	6922      	ldr	r2, [r4, #16]
 8017808:	4293      	cmp	r3, r2
 801780a:	dd01      	ble.n	8017810 <_printf_common+0x80>
 801780c:	1a9b      	subs	r3, r3, r2
 801780e:	18ed      	adds	r5, r5, r3
 8017810:	2600      	movs	r6, #0
 8017812:	42b5      	cmp	r5, r6
 8017814:	d120      	bne.n	8017858 <_printf_common+0xc8>
 8017816:	2000      	movs	r0, #0
 8017818:	e010      	b.n	801783c <_printf_common+0xac>
 801781a:	3501      	adds	r5, #1
 801781c:	68e3      	ldr	r3, [r4, #12]
 801781e:	6832      	ldr	r2, [r6, #0]
 8017820:	1a9b      	subs	r3, r3, r2
 8017822:	42ab      	cmp	r3, r5
 8017824:	ddd2      	ble.n	80177cc <_printf_common+0x3c>
 8017826:	0022      	movs	r2, r4
 8017828:	2301      	movs	r3, #1
 801782a:	9901      	ldr	r1, [sp, #4]
 801782c:	9800      	ldr	r0, [sp, #0]
 801782e:	9f08      	ldr	r7, [sp, #32]
 8017830:	3219      	adds	r2, #25
 8017832:	47b8      	blx	r7
 8017834:	3001      	adds	r0, #1
 8017836:	d1f0      	bne.n	801781a <_printf_common+0x8a>
 8017838:	2001      	movs	r0, #1
 801783a:	4240      	negs	r0, r0
 801783c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801783e:	2030      	movs	r0, #48	@ 0x30
 8017840:	18e1      	adds	r1, r4, r3
 8017842:	3143      	adds	r1, #67	@ 0x43
 8017844:	7008      	strb	r0, [r1, #0]
 8017846:	0021      	movs	r1, r4
 8017848:	1c5a      	adds	r2, r3, #1
 801784a:	3145      	adds	r1, #69	@ 0x45
 801784c:	7809      	ldrb	r1, [r1, #0]
 801784e:	18a2      	adds	r2, r4, r2
 8017850:	3243      	adds	r2, #67	@ 0x43
 8017852:	3302      	adds	r3, #2
 8017854:	7011      	strb	r1, [r2, #0]
 8017856:	e7c1      	b.n	80177dc <_printf_common+0x4c>
 8017858:	0022      	movs	r2, r4
 801785a:	2301      	movs	r3, #1
 801785c:	9901      	ldr	r1, [sp, #4]
 801785e:	9800      	ldr	r0, [sp, #0]
 8017860:	9f08      	ldr	r7, [sp, #32]
 8017862:	321a      	adds	r2, #26
 8017864:	47b8      	blx	r7
 8017866:	3001      	adds	r0, #1
 8017868:	d0e6      	beq.n	8017838 <_printf_common+0xa8>
 801786a:	3601      	adds	r6, #1
 801786c:	e7d1      	b.n	8017812 <_printf_common+0x82>
	...

08017870 <_printf_i>:
 8017870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017872:	b08b      	sub	sp, #44	@ 0x2c
 8017874:	9206      	str	r2, [sp, #24]
 8017876:	000a      	movs	r2, r1
 8017878:	3243      	adds	r2, #67	@ 0x43
 801787a:	9307      	str	r3, [sp, #28]
 801787c:	9005      	str	r0, [sp, #20]
 801787e:	9203      	str	r2, [sp, #12]
 8017880:	7e0a      	ldrb	r2, [r1, #24]
 8017882:	000c      	movs	r4, r1
 8017884:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017886:	2a78      	cmp	r2, #120	@ 0x78
 8017888:	d809      	bhi.n	801789e <_printf_i+0x2e>
 801788a:	2a62      	cmp	r2, #98	@ 0x62
 801788c:	d80b      	bhi.n	80178a6 <_printf_i+0x36>
 801788e:	2a00      	cmp	r2, #0
 8017890:	d100      	bne.n	8017894 <_printf_i+0x24>
 8017892:	e0bc      	b.n	8017a0e <_printf_i+0x19e>
 8017894:	497b      	ldr	r1, [pc, #492]	@ (8017a84 <_printf_i+0x214>)
 8017896:	9104      	str	r1, [sp, #16]
 8017898:	2a58      	cmp	r2, #88	@ 0x58
 801789a:	d100      	bne.n	801789e <_printf_i+0x2e>
 801789c:	e090      	b.n	80179c0 <_printf_i+0x150>
 801789e:	0025      	movs	r5, r4
 80178a0:	3542      	adds	r5, #66	@ 0x42
 80178a2:	702a      	strb	r2, [r5, #0]
 80178a4:	e022      	b.n	80178ec <_printf_i+0x7c>
 80178a6:	0010      	movs	r0, r2
 80178a8:	3863      	subs	r0, #99	@ 0x63
 80178aa:	2815      	cmp	r0, #21
 80178ac:	d8f7      	bhi.n	801789e <_printf_i+0x2e>
 80178ae:	f7e8 fc65 	bl	800017c <__gnu_thumb1_case_shi>
 80178b2:	0016      	.short	0x0016
 80178b4:	fff6001f 	.word	0xfff6001f
 80178b8:	fff6fff6 	.word	0xfff6fff6
 80178bc:	001ffff6 	.word	0x001ffff6
 80178c0:	fff6fff6 	.word	0xfff6fff6
 80178c4:	fff6fff6 	.word	0xfff6fff6
 80178c8:	003600a1 	.word	0x003600a1
 80178cc:	fff60080 	.word	0xfff60080
 80178d0:	00b2fff6 	.word	0x00b2fff6
 80178d4:	0036fff6 	.word	0x0036fff6
 80178d8:	fff6fff6 	.word	0xfff6fff6
 80178dc:	0084      	.short	0x0084
 80178de:	0025      	movs	r5, r4
 80178e0:	681a      	ldr	r2, [r3, #0]
 80178e2:	3542      	adds	r5, #66	@ 0x42
 80178e4:	1d11      	adds	r1, r2, #4
 80178e6:	6019      	str	r1, [r3, #0]
 80178e8:	6813      	ldr	r3, [r2, #0]
 80178ea:	702b      	strb	r3, [r5, #0]
 80178ec:	2301      	movs	r3, #1
 80178ee:	e0a0      	b.n	8017a32 <_printf_i+0x1c2>
 80178f0:	6818      	ldr	r0, [r3, #0]
 80178f2:	6809      	ldr	r1, [r1, #0]
 80178f4:	1d02      	adds	r2, r0, #4
 80178f6:	060d      	lsls	r5, r1, #24
 80178f8:	d50b      	bpl.n	8017912 <_printf_i+0xa2>
 80178fa:	6806      	ldr	r6, [r0, #0]
 80178fc:	601a      	str	r2, [r3, #0]
 80178fe:	2e00      	cmp	r6, #0
 8017900:	da03      	bge.n	801790a <_printf_i+0x9a>
 8017902:	232d      	movs	r3, #45	@ 0x2d
 8017904:	9a03      	ldr	r2, [sp, #12]
 8017906:	4276      	negs	r6, r6
 8017908:	7013      	strb	r3, [r2, #0]
 801790a:	4b5e      	ldr	r3, [pc, #376]	@ (8017a84 <_printf_i+0x214>)
 801790c:	270a      	movs	r7, #10
 801790e:	9304      	str	r3, [sp, #16]
 8017910:	e018      	b.n	8017944 <_printf_i+0xd4>
 8017912:	6806      	ldr	r6, [r0, #0]
 8017914:	601a      	str	r2, [r3, #0]
 8017916:	0649      	lsls	r1, r1, #25
 8017918:	d5f1      	bpl.n	80178fe <_printf_i+0x8e>
 801791a:	b236      	sxth	r6, r6
 801791c:	e7ef      	b.n	80178fe <_printf_i+0x8e>
 801791e:	6808      	ldr	r0, [r1, #0]
 8017920:	6819      	ldr	r1, [r3, #0]
 8017922:	c940      	ldmia	r1!, {r6}
 8017924:	0605      	lsls	r5, r0, #24
 8017926:	d402      	bmi.n	801792e <_printf_i+0xbe>
 8017928:	0640      	lsls	r0, r0, #25
 801792a:	d500      	bpl.n	801792e <_printf_i+0xbe>
 801792c:	b2b6      	uxth	r6, r6
 801792e:	6019      	str	r1, [r3, #0]
 8017930:	4b54      	ldr	r3, [pc, #336]	@ (8017a84 <_printf_i+0x214>)
 8017932:	270a      	movs	r7, #10
 8017934:	9304      	str	r3, [sp, #16]
 8017936:	2a6f      	cmp	r2, #111	@ 0x6f
 8017938:	d100      	bne.n	801793c <_printf_i+0xcc>
 801793a:	3f02      	subs	r7, #2
 801793c:	0023      	movs	r3, r4
 801793e:	2200      	movs	r2, #0
 8017940:	3343      	adds	r3, #67	@ 0x43
 8017942:	701a      	strb	r2, [r3, #0]
 8017944:	6863      	ldr	r3, [r4, #4]
 8017946:	60a3      	str	r3, [r4, #8]
 8017948:	2b00      	cmp	r3, #0
 801794a:	db03      	blt.n	8017954 <_printf_i+0xe4>
 801794c:	2104      	movs	r1, #4
 801794e:	6822      	ldr	r2, [r4, #0]
 8017950:	438a      	bics	r2, r1
 8017952:	6022      	str	r2, [r4, #0]
 8017954:	2e00      	cmp	r6, #0
 8017956:	d102      	bne.n	801795e <_printf_i+0xee>
 8017958:	9d03      	ldr	r5, [sp, #12]
 801795a:	2b00      	cmp	r3, #0
 801795c:	d00c      	beq.n	8017978 <_printf_i+0x108>
 801795e:	9d03      	ldr	r5, [sp, #12]
 8017960:	0030      	movs	r0, r6
 8017962:	0039      	movs	r1, r7
 8017964:	f7e8 fc9a 	bl	800029c <__aeabi_uidivmod>
 8017968:	9b04      	ldr	r3, [sp, #16]
 801796a:	3d01      	subs	r5, #1
 801796c:	5c5b      	ldrb	r3, [r3, r1]
 801796e:	702b      	strb	r3, [r5, #0]
 8017970:	0033      	movs	r3, r6
 8017972:	0006      	movs	r6, r0
 8017974:	429f      	cmp	r7, r3
 8017976:	d9f3      	bls.n	8017960 <_printf_i+0xf0>
 8017978:	2f08      	cmp	r7, #8
 801797a:	d109      	bne.n	8017990 <_printf_i+0x120>
 801797c:	6823      	ldr	r3, [r4, #0]
 801797e:	07db      	lsls	r3, r3, #31
 8017980:	d506      	bpl.n	8017990 <_printf_i+0x120>
 8017982:	6862      	ldr	r2, [r4, #4]
 8017984:	6923      	ldr	r3, [r4, #16]
 8017986:	429a      	cmp	r2, r3
 8017988:	dc02      	bgt.n	8017990 <_printf_i+0x120>
 801798a:	2330      	movs	r3, #48	@ 0x30
 801798c:	3d01      	subs	r5, #1
 801798e:	702b      	strb	r3, [r5, #0]
 8017990:	9b03      	ldr	r3, [sp, #12]
 8017992:	1b5b      	subs	r3, r3, r5
 8017994:	6123      	str	r3, [r4, #16]
 8017996:	9b07      	ldr	r3, [sp, #28]
 8017998:	0021      	movs	r1, r4
 801799a:	9300      	str	r3, [sp, #0]
 801799c:	9805      	ldr	r0, [sp, #20]
 801799e:	9b06      	ldr	r3, [sp, #24]
 80179a0:	aa09      	add	r2, sp, #36	@ 0x24
 80179a2:	f7ff fef5 	bl	8017790 <_printf_common>
 80179a6:	3001      	adds	r0, #1
 80179a8:	d148      	bne.n	8017a3c <_printf_i+0x1cc>
 80179aa:	2001      	movs	r0, #1
 80179ac:	4240      	negs	r0, r0
 80179ae:	b00b      	add	sp, #44	@ 0x2c
 80179b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179b2:	2220      	movs	r2, #32
 80179b4:	6809      	ldr	r1, [r1, #0]
 80179b6:	430a      	orrs	r2, r1
 80179b8:	6022      	str	r2, [r4, #0]
 80179ba:	2278      	movs	r2, #120	@ 0x78
 80179bc:	4932      	ldr	r1, [pc, #200]	@ (8017a88 <_printf_i+0x218>)
 80179be:	9104      	str	r1, [sp, #16]
 80179c0:	0021      	movs	r1, r4
 80179c2:	3145      	adds	r1, #69	@ 0x45
 80179c4:	700a      	strb	r2, [r1, #0]
 80179c6:	6819      	ldr	r1, [r3, #0]
 80179c8:	6822      	ldr	r2, [r4, #0]
 80179ca:	c940      	ldmia	r1!, {r6}
 80179cc:	0610      	lsls	r0, r2, #24
 80179ce:	d402      	bmi.n	80179d6 <_printf_i+0x166>
 80179d0:	0650      	lsls	r0, r2, #25
 80179d2:	d500      	bpl.n	80179d6 <_printf_i+0x166>
 80179d4:	b2b6      	uxth	r6, r6
 80179d6:	6019      	str	r1, [r3, #0]
 80179d8:	07d3      	lsls	r3, r2, #31
 80179da:	d502      	bpl.n	80179e2 <_printf_i+0x172>
 80179dc:	2320      	movs	r3, #32
 80179de:	4313      	orrs	r3, r2
 80179e0:	6023      	str	r3, [r4, #0]
 80179e2:	2e00      	cmp	r6, #0
 80179e4:	d001      	beq.n	80179ea <_printf_i+0x17a>
 80179e6:	2710      	movs	r7, #16
 80179e8:	e7a8      	b.n	801793c <_printf_i+0xcc>
 80179ea:	2220      	movs	r2, #32
 80179ec:	6823      	ldr	r3, [r4, #0]
 80179ee:	4393      	bics	r3, r2
 80179f0:	6023      	str	r3, [r4, #0]
 80179f2:	e7f8      	b.n	80179e6 <_printf_i+0x176>
 80179f4:	681a      	ldr	r2, [r3, #0]
 80179f6:	680d      	ldr	r5, [r1, #0]
 80179f8:	1d10      	adds	r0, r2, #4
 80179fa:	6949      	ldr	r1, [r1, #20]
 80179fc:	6018      	str	r0, [r3, #0]
 80179fe:	6813      	ldr	r3, [r2, #0]
 8017a00:	062e      	lsls	r6, r5, #24
 8017a02:	d501      	bpl.n	8017a08 <_printf_i+0x198>
 8017a04:	6019      	str	r1, [r3, #0]
 8017a06:	e002      	b.n	8017a0e <_printf_i+0x19e>
 8017a08:	066d      	lsls	r5, r5, #25
 8017a0a:	d5fb      	bpl.n	8017a04 <_printf_i+0x194>
 8017a0c:	8019      	strh	r1, [r3, #0]
 8017a0e:	2300      	movs	r3, #0
 8017a10:	9d03      	ldr	r5, [sp, #12]
 8017a12:	6123      	str	r3, [r4, #16]
 8017a14:	e7bf      	b.n	8017996 <_printf_i+0x126>
 8017a16:	681a      	ldr	r2, [r3, #0]
 8017a18:	1d11      	adds	r1, r2, #4
 8017a1a:	6019      	str	r1, [r3, #0]
 8017a1c:	6815      	ldr	r5, [r2, #0]
 8017a1e:	2100      	movs	r1, #0
 8017a20:	0028      	movs	r0, r5
 8017a22:	6862      	ldr	r2, [r4, #4]
 8017a24:	f000 fa5b 	bl	8017ede <memchr>
 8017a28:	2800      	cmp	r0, #0
 8017a2a:	d001      	beq.n	8017a30 <_printf_i+0x1c0>
 8017a2c:	1b40      	subs	r0, r0, r5
 8017a2e:	6060      	str	r0, [r4, #4]
 8017a30:	6863      	ldr	r3, [r4, #4]
 8017a32:	6123      	str	r3, [r4, #16]
 8017a34:	2300      	movs	r3, #0
 8017a36:	9a03      	ldr	r2, [sp, #12]
 8017a38:	7013      	strb	r3, [r2, #0]
 8017a3a:	e7ac      	b.n	8017996 <_printf_i+0x126>
 8017a3c:	002a      	movs	r2, r5
 8017a3e:	6923      	ldr	r3, [r4, #16]
 8017a40:	9906      	ldr	r1, [sp, #24]
 8017a42:	9805      	ldr	r0, [sp, #20]
 8017a44:	9d07      	ldr	r5, [sp, #28]
 8017a46:	47a8      	blx	r5
 8017a48:	3001      	adds	r0, #1
 8017a4a:	d0ae      	beq.n	80179aa <_printf_i+0x13a>
 8017a4c:	6823      	ldr	r3, [r4, #0]
 8017a4e:	079b      	lsls	r3, r3, #30
 8017a50:	d415      	bmi.n	8017a7e <_printf_i+0x20e>
 8017a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017a54:	68e0      	ldr	r0, [r4, #12]
 8017a56:	4298      	cmp	r0, r3
 8017a58:	daa9      	bge.n	80179ae <_printf_i+0x13e>
 8017a5a:	0018      	movs	r0, r3
 8017a5c:	e7a7      	b.n	80179ae <_printf_i+0x13e>
 8017a5e:	0022      	movs	r2, r4
 8017a60:	2301      	movs	r3, #1
 8017a62:	9906      	ldr	r1, [sp, #24]
 8017a64:	9805      	ldr	r0, [sp, #20]
 8017a66:	9e07      	ldr	r6, [sp, #28]
 8017a68:	3219      	adds	r2, #25
 8017a6a:	47b0      	blx	r6
 8017a6c:	3001      	adds	r0, #1
 8017a6e:	d09c      	beq.n	80179aa <_printf_i+0x13a>
 8017a70:	3501      	adds	r5, #1
 8017a72:	68e3      	ldr	r3, [r4, #12]
 8017a74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017a76:	1a9b      	subs	r3, r3, r2
 8017a78:	42ab      	cmp	r3, r5
 8017a7a:	dcf0      	bgt.n	8017a5e <_printf_i+0x1ee>
 8017a7c:	e7e9      	b.n	8017a52 <_printf_i+0x1e2>
 8017a7e:	2500      	movs	r5, #0
 8017a80:	e7f7      	b.n	8017a72 <_printf_i+0x202>
 8017a82:	46c0      	nop			@ (mov r8, r8)
 8017a84:	0802d42a 	.word	0x0802d42a
 8017a88:	0802d43b 	.word	0x0802d43b

08017a8c <std>:
 8017a8c:	2300      	movs	r3, #0
 8017a8e:	b510      	push	{r4, lr}
 8017a90:	0004      	movs	r4, r0
 8017a92:	6003      	str	r3, [r0, #0]
 8017a94:	6043      	str	r3, [r0, #4]
 8017a96:	6083      	str	r3, [r0, #8]
 8017a98:	8181      	strh	r1, [r0, #12]
 8017a9a:	6643      	str	r3, [r0, #100]	@ 0x64
 8017a9c:	81c2      	strh	r2, [r0, #14]
 8017a9e:	6103      	str	r3, [r0, #16]
 8017aa0:	6143      	str	r3, [r0, #20]
 8017aa2:	6183      	str	r3, [r0, #24]
 8017aa4:	0019      	movs	r1, r3
 8017aa6:	2208      	movs	r2, #8
 8017aa8:	305c      	adds	r0, #92	@ 0x5c
 8017aaa:	f000 f967 	bl	8017d7c <memset>
 8017aae:	4b0b      	ldr	r3, [pc, #44]	@ (8017adc <std+0x50>)
 8017ab0:	6224      	str	r4, [r4, #32]
 8017ab2:	6263      	str	r3, [r4, #36]	@ 0x24
 8017ab4:	4b0a      	ldr	r3, [pc, #40]	@ (8017ae0 <std+0x54>)
 8017ab6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8017ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8017ae4 <std+0x58>)
 8017aba:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8017abc:	4b0a      	ldr	r3, [pc, #40]	@ (8017ae8 <std+0x5c>)
 8017abe:	6323      	str	r3, [r4, #48]	@ 0x30
 8017ac0:	4b0a      	ldr	r3, [pc, #40]	@ (8017aec <std+0x60>)
 8017ac2:	429c      	cmp	r4, r3
 8017ac4:	d005      	beq.n	8017ad2 <std+0x46>
 8017ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8017af0 <std+0x64>)
 8017ac8:	429c      	cmp	r4, r3
 8017aca:	d002      	beq.n	8017ad2 <std+0x46>
 8017acc:	4b09      	ldr	r3, [pc, #36]	@ (8017af4 <std+0x68>)
 8017ace:	429c      	cmp	r4, r3
 8017ad0:	d103      	bne.n	8017ada <std+0x4e>
 8017ad2:	0020      	movs	r0, r4
 8017ad4:	3058      	adds	r0, #88	@ 0x58
 8017ad6:	f000 f9ff 	bl	8017ed8 <__retarget_lock_init_recursive>
 8017ada:	bd10      	pop	{r4, pc}
 8017adc:	08017c75 	.word	0x08017c75
 8017ae0:	08017c9d 	.word	0x08017c9d
 8017ae4:	08017cd5 	.word	0x08017cd5
 8017ae8:	08017d01 	.word	0x08017d01
 8017aec:	20003894 	.word	0x20003894
 8017af0:	200038fc 	.word	0x200038fc
 8017af4:	20003964 	.word	0x20003964

08017af8 <stdio_exit_handler>:
 8017af8:	b510      	push	{r4, lr}
 8017afa:	4a03      	ldr	r2, [pc, #12]	@ (8017b08 <stdio_exit_handler+0x10>)
 8017afc:	4903      	ldr	r1, [pc, #12]	@ (8017b0c <stdio_exit_handler+0x14>)
 8017afe:	4804      	ldr	r0, [pc, #16]	@ (8017b10 <stdio_exit_handler+0x18>)
 8017b00:	f000 f86c 	bl	8017bdc <_fwalk_sglue>
 8017b04:	bd10      	pop	{r4, pc}
 8017b06:	46c0      	nop			@ (mov r8, r8)
 8017b08:	200002d0 	.word	0x200002d0
 8017b0c:	08019bb1 	.word	0x08019bb1
 8017b10:	200002e0 	.word	0x200002e0

08017b14 <cleanup_stdio>:
 8017b14:	6841      	ldr	r1, [r0, #4]
 8017b16:	4b0b      	ldr	r3, [pc, #44]	@ (8017b44 <cleanup_stdio+0x30>)
 8017b18:	b510      	push	{r4, lr}
 8017b1a:	0004      	movs	r4, r0
 8017b1c:	4299      	cmp	r1, r3
 8017b1e:	d001      	beq.n	8017b24 <cleanup_stdio+0x10>
 8017b20:	f002 f846 	bl	8019bb0 <_fflush_r>
 8017b24:	68a1      	ldr	r1, [r4, #8]
 8017b26:	4b08      	ldr	r3, [pc, #32]	@ (8017b48 <cleanup_stdio+0x34>)
 8017b28:	4299      	cmp	r1, r3
 8017b2a:	d002      	beq.n	8017b32 <cleanup_stdio+0x1e>
 8017b2c:	0020      	movs	r0, r4
 8017b2e:	f002 f83f 	bl	8019bb0 <_fflush_r>
 8017b32:	68e1      	ldr	r1, [r4, #12]
 8017b34:	4b05      	ldr	r3, [pc, #20]	@ (8017b4c <cleanup_stdio+0x38>)
 8017b36:	4299      	cmp	r1, r3
 8017b38:	d002      	beq.n	8017b40 <cleanup_stdio+0x2c>
 8017b3a:	0020      	movs	r0, r4
 8017b3c:	f002 f838 	bl	8019bb0 <_fflush_r>
 8017b40:	bd10      	pop	{r4, pc}
 8017b42:	46c0      	nop			@ (mov r8, r8)
 8017b44:	20003894 	.word	0x20003894
 8017b48:	200038fc 	.word	0x200038fc
 8017b4c:	20003964 	.word	0x20003964

08017b50 <global_stdio_init.part.0>:
 8017b50:	b510      	push	{r4, lr}
 8017b52:	4b09      	ldr	r3, [pc, #36]	@ (8017b78 <global_stdio_init.part.0+0x28>)
 8017b54:	4a09      	ldr	r2, [pc, #36]	@ (8017b7c <global_stdio_init.part.0+0x2c>)
 8017b56:	2104      	movs	r1, #4
 8017b58:	601a      	str	r2, [r3, #0]
 8017b5a:	4809      	ldr	r0, [pc, #36]	@ (8017b80 <global_stdio_init.part.0+0x30>)
 8017b5c:	2200      	movs	r2, #0
 8017b5e:	f7ff ff95 	bl	8017a8c <std>
 8017b62:	2201      	movs	r2, #1
 8017b64:	2109      	movs	r1, #9
 8017b66:	4807      	ldr	r0, [pc, #28]	@ (8017b84 <global_stdio_init.part.0+0x34>)
 8017b68:	f7ff ff90 	bl	8017a8c <std>
 8017b6c:	2202      	movs	r2, #2
 8017b6e:	2112      	movs	r1, #18
 8017b70:	4805      	ldr	r0, [pc, #20]	@ (8017b88 <global_stdio_init.part.0+0x38>)
 8017b72:	f7ff ff8b 	bl	8017a8c <std>
 8017b76:	bd10      	pop	{r4, pc}
 8017b78:	200039cc 	.word	0x200039cc
 8017b7c:	08017af9 	.word	0x08017af9
 8017b80:	20003894 	.word	0x20003894
 8017b84:	200038fc 	.word	0x200038fc
 8017b88:	20003964 	.word	0x20003964

08017b8c <__sfp_lock_acquire>:
 8017b8c:	b510      	push	{r4, lr}
 8017b8e:	4802      	ldr	r0, [pc, #8]	@ (8017b98 <__sfp_lock_acquire+0xc>)
 8017b90:	f000 f9a3 	bl	8017eda <__retarget_lock_acquire_recursive>
 8017b94:	bd10      	pop	{r4, pc}
 8017b96:	46c0      	nop			@ (mov r8, r8)
 8017b98:	200039d5 	.word	0x200039d5

08017b9c <__sfp_lock_release>:
 8017b9c:	b510      	push	{r4, lr}
 8017b9e:	4802      	ldr	r0, [pc, #8]	@ (8017ba8 <__sfp_lock_release+0xc>)
 8017ba0:	f000 f99c 	bl	8017edc <__retarget_lock_release_recursive>
 8017ba4:	bd10      	pop	{r4, pc}
 8017ba6:	46c0      	nop			@ (mov r8, r8)
 8017ba8:	200039d5 	.word	0x200039d5

08017bac <__sinit>:
 8017bac:	b510      	push	{r4, lr}
 8017bae:	0004      	movs	r4, r0
 8017bb0:	f7ff ffec 	bl	8017b8c <__sfp_lock_acquire>
 8017bb4:	6a23      	ldr	r3, [r4, #32]
 8017bb6:	2b00      	cmp	r3, #0
 8017bb8:	d002      	beq.n	8017bc0 <__sinit+0x14>
 8017bba:	f7ff ffef 	bl	8017b9c <__sfp_lock_release>
 8017bbe:	bd10      	pop	{r4, pc}
 8017bc0:	4b04      	ldr	r3, [pc, #16]	@ (8017bd4 <__sinit+0x28>)
 8017bc2:	6223      	str	r3, [r4, #32]
 8017bc4:	4b04      	ldr	r3, [pc, #16]	@ (8017bd8 <__sinit+0x2c>)
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	2b00      	cmp	r3, #0
 8017bca:	d1f6      	bne.n	8017bba <__sinit+0xe>
 8017bcc:	f7ff ffc0 	bl	8017b50 <global_stdio_init.part.0>
 8017bd0:	e7f3      	b.n	8017bba <__sinit+0xe>
 8017bd2:	46c0      	nop			@ (mov r8, r8)
 8017bd4:	08017b15 	.word	0x08017b15
 8017bd8:	200039cc 	.word	0x200039cc

08017bdc <_fwalk_sglue>:
 8017bdc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8017bde:	0014      	movs	r4, r2
 8017be0:	2600      	movs	r6, #0
 8017be2:	9000      	str	r0, [sp, #0]
 8017be4:	9101      	str	r1, [sp, #4]
 8017be6:	68a5      	ldr	r5, [r4, #8]
 8017be8:	6867      	ldr	r7, [r4, #4]
 8017bea:	3f01      	subs	r7, #1
 8017bec:	d504      	bpl.n	8017bf8 <_fwalk_sglue+0x1c>
 8017bee:	6824      	ldr	r4, [r4, #0]
 8017bf0:	2c00      	cmp	r4, #0
 8017bf2:	d1f8      	bne.n	8017be6 <_fwalk_sglue+0xa>
 8017bf4:	0030      	movs	r0, r6
 8017bf6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8017bf8:	89ab      	ldrh	r3, [r5, #12]
 8017bfa:	2b01      	cmp	r3, #1
 8017bfc:	d908      	bls.n	8017c10 <_fwalk_sglue+0x34>
 8017bfe:	220e      	movs	r2, #14
 8017c00:	5eab      	ldrsh	r3, [r5, r2]
 8017c02:	3301      	adds	r3, #1
 8017c04:	d004      	beq.n	8017c10 <_fwalk_sglue+0x34>
 8017c06:	0029      	movs	r1, r5
 8017c08:	9800      	ldr	r0, [sp, #0]
 8017c0a:	9b01      	ldr	r3, [sp, #4]
 8017c0c:	4798      	blx	r3
 8017c0e:	4306      	orrs	r6, r0
 8017c10:	3568      	adds	r5, #104	@ 0x68
 8017c12:	e7ea      	b.n	8017bea <_fwalk_sglue+0xe>

08017c14 <iprintf>:
 8017c14:	b40f      	push	{r0, r1, r2, r3}
 8017c16:	b507      	push	{r0, r1, r2, lr}
 8017c18:	4905      	ldr	r1, [pc, #20]	@ (8017c30 <iprintf+0x1c>)
 8017c1a:	ab04      	add	r3, sp, #16
 8017c1c:	6808      	ldr	r0, [r1, #0]
 8017c1e:	cb04      	ldmia	r3!, {r2}
 8017c20:	6881      	ldr	r1, [r0, #8]
 8017c22:	9301      	str	r3, [sp, #4]
 8017c24:	f001 fe22 	bl	801986c <_vfiprintf_r>
 8017c28:	b003      	add	sp, #12
 8017c2a:	bc08      	pop	{r3}
 8017c2c:	b004      	add	sp, #16
 8017c2e:	4718      	bx	r3
 8017c30:	200002dc 	.word	0x200002dc

08017c34 <siprintf>:
 8017c34:	b40e      	push	{r1, r2, r3}
 8017c36:	b500      	push	{lr}
 8017c38:	490b      	ldr	r1, [pc, #44]	@ (8017c68 <siprintf+0x34>)
 8017c3a:	b09c      	sub	sp, #112	@ 0x70
 8017c3c:	ab1d      	add	r3, sp, #116	@ 0x74
 8017c3e:	9002      	str	r0, [sp, #8]
 8017c40:	9006      	str	r0, [sp, #24]
 8017c42:	9107      	str	r1, [sp, #28]
 8017c44:	9104      	str	r1, [sp, #16]
 8017c46:	4809      	ldr	r0, [pc, #36]	@ (8017c6c <siprintf+0x38>)
 8017c48:	4909      	ldr	r1, [pc, #36]	@ (8017c70 <siprintf+0x3c>)
 8017c4a:	cb04      	ldmia	r3!, {r2}
 8017c4c:	9105      	str	r1, [sp, #20]
 8017c4e:	6800      	ldr	r0, [r0, #0]
 8017c50:	a902      	add	r1, sp, #8
 8017c52:	9301      	str	r3, [sp, #4]
 8017c54:	f001 fce4 	bl	8019620 <_svfiprintf_r>
 8017c58:	2200      	movs	r2, #0
 8017c5a:	9b02      	ldr	r3, [sp, #8]
 8017c5c:	701a      	strb	r2, [r3, #0]
 8017c5e:	b01c      	add	sp, #112	@ 0x70
 8017c60:	bc08      	pop	{r3}
 8017c62:	b003      	add	sp, #12
 8017c64:	4718      	bx	r3
 8017c66:	46c0      	nop			@ (mov r8, r8)
 8017c68:	7fffffff 	.word	0x7fffffff
 8017c6c:	200002dc 	.word	0x200002dc
 8017c70:	ffff0208 	.word	0xffff0208

08017c74 <__sread>:
 8017c74:	b570      	push	{r4, r5, r6, lr}
 8017c76:	000c      	movs	r4, r1
 8017c78:	250e      	movs	r5, #14
 8017c7a:	5f49      	ldrsh	r1, [r1, r5]
 8017c7c:	f000 f8da 	bl	8017e34 <_read_r>
 8017c80:	2800      	cmp	r0, #0
 8017c82:	db03      	blt.n	8017c8c <__sread+0x18>
 8017c84:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8017c86:	181b      	adds	r3, r3, r0
 8017c88:	6563      	str	r3, [r4, #84]	@ 0x54
 8017c8a:	bd70      	pop	{r4, r5, r6, pc}
 8017c8c:	89a3      	ldrh	r3, [r4, #12]
 8017c8e:	4a02      	ldr	r2, [pc, #8]	@ (8017c98 <__sread+0x24>)
 8017c90:	4013      	ands	r3, r2
 8017c92:	81a3      	strh	r3, [r4, #12]
 8017c94:	e7f9      	b.n	8017c8a <__sread+0x16>
 8017c96:	46c0      	nop			@ (mov r8, r8)
 8017c98:	ffffefff 	.word	0xffffefff

08017c9c <__swrite>:
 8017c9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017c9e:	001f      	movs	r7, r3
 8017ca0:	898b      	ldrh	r3, [r1, #12]
 8017ca2:	0005      	movs	r5, r0
 8017ca4:	000c      	movs	r4, r1
 8017ca6:	0016      	movs	r6, r2
 8017ca8:	05db      	lsls	r3, r3, #23
 8017caa:	d505      	bpl.n	8017cb8 <__swrite+0x1c>
 8017cac:	230e      	movs	r3, #14
 8017cae:	5ec9      	ldrsh	r1, [r1, r3]
 8017cb0:	2200      	movs	r2, #0
 8017cb2:	2302      	movs	r3, #2
 8017cb4:	f000 f8aa 	bl	8017e0c <_lseek_r>
 8017cb8:	89a3      	ldrh	r3, [r4, #12]
 8017cba:	4a05      	ldr	r2, [pc, #20]	@ (8017cd0 <__swrite+0x34>)
 8017cbc:	0028      	movs	r0, r5
 8017cbe:	4013      	ands	r3, r2
 8017cc0:	81a3      	strh	r3, [r4, #12]
 8017cc2:	0032      	movs	r2, r6
 8017cc4:	230e      	movs	r3, #14
 8017cc6:	5ee1      	ldrsh	r1, [r4, r3]
 8017cc8:	003b      	movs	r3, r7
 8017cca:	f000 f8c7 	bl	8017e5c <_write_r>
 8017cce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017cd0:	ffffefff 	.word	0xffffefff

08017cd4 <__sseek>:
 8017cd4:	b570      	push	{r4, r5, r6, lr}
 8017cd6:	000c      	movs	r4, r1
 8017cd8:	250e      	movs	r5, #14
 8017cda:	5f49      	ldrsh	r1, [r1, r5]
 8017cdc:	f000 f896 	bl	8017e0c <_lseek_r>
 8017ce0:	89a3      	ldrh	r3, [r4, #12]
 8017ce2:	1c42      	adds	r2, r0, #1
 8017ce4:	d103      	bne.n	8017cee <__sseek+0x1a>
 8017ce6:	4a05      	ldr	r2, [pc, #20]	@ (8017cfc <__sseek+0x28>)
 8017ce8:	4013      	ands	r3, r2
 8017cea:	81a3      	strh	r3, [r4, #12]
 8017cec:	bd70      	pop	{r4, r5, r6, pc}
 8017cee:	2280      	movs	r2, #128	@ 0x80
 8017cf0:	0152      	lsls	r2, r2, #5
 8017cf2:	4313      	orrs	r3, r2
 8017cf4:	81a3      	strh	r3, [r4, #12]
 8017cf6:	6560      	str	r0, [r4, #84]	@ 0x54
 8017cf8:	e7f8      	b.n	8017cec <__sseek+0x18>
 8017cfa:	46c0      	nop			@ (mov r8, r8)
 8017cfc:	ffffefff 	.word	0xffffefff

08017d00 <__sclose>:
 8017d00:	b510      	push	{r4, lr}
 8017d02:	230e      	movs	r3, #14
 8017d04:	5ec9      	ldrsh	r1, [r1, r3]
 8017d06:	f000 f86f 	bl	8017de8 <_close_r>
 8017d0a:	bd10      	pop	{r4, pc}

08017d0c <_vsniprintf_r>:
 8017d0c:	b530      	push	{r4, r5, lr}
 8017d0e:	0014      	movs	r4, r2
 8017d10:	0005      	movs	r5, r0
 8017d12:	001a      	movs	r2, r3
 8017d14:	b09b      	sub	sp, #108	@ 0x6c
 8017d16:	2c00      	cmp	r4, #0
 8017d18:	da05      	bge.n	8017d26 <_vsniprintf_r+0x1a>
 8017d1a:	238b      	movs	r3, #139	@ 0x8b
 8017d1c:	6003      	str	r3, [r0, #0]
 8017d1e:	2001      	movs	r0, #1
 8017d20:	4240      	negs	r0, r0
 8017d22:	b01b      	add	sp, #108	@ 0x6c
 8017d24:	bd30      	pop	{r4, r5, pc}
 8017d26:	2382      	movs	r3, #130	@ 0x82
 8017d28:	4668      	mov	r0, sp
 8017d2a:	009b      	lsls	r3, r3, #2
 8017d2c:	8183      	strh	r3, [r0, #12]
 8017d2e:	2300      	movs	r3, #0
 8017d30:	9100      	str	r1, [sp, #0]
 8017d32:	9104      	str	r1, [sp, #16]
 8017d34:	429c      	cmp	r4, r3
 8017d36:	d000      	beq.n	8017d3a <_vsniprintf_r+0x2e>
 8017d38:	1e63      	subs	r3, r4, #1
 8017d3a:	9302      	str	r3, [sp, #8]
 8017d3c:	9305      	str	r3, [sp, #20]
 8017d3e:	2301      	movs	r3, #1
 8017d40:	4669      	mov	r1, sp
 8017d42:	425b      	negs	r3, r3
 8017d44:	81cb      	strh	r3, [r1, #14]
 8017d46:	0028      	movs	r0, r5
 8017d48:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8017d4a:	f001 fc69 	bl	8019620 <_svfiprintf_r>
 8017d4e:	1c43      	adds	r3, r0, #1
 8017d50:	da01      	bge.n	8017d56 <_vsniprintf_r+0x4a>
 8017d52:	238b      	movs	r3, #139	@ 0x8b
 8017d54:	602b      	str	r3, [r5, #0]
 8017d56:	2c00      	cmp	r4, #0
 8017d58:	d0e3      	beq.n	8017d22 <_vsniprintf_r+0x16>
 8017d5a:	2200      	movs	r2, #0
 8017d5c:	9b00      	ldr	r3, [sp, #0]
 8017d5e:	701a      	strb	r2, [r3, #0]
 8017d60:	e7df      	b.n	8017d22 <_vsniprintf_r+0x16>
	...

08017d64 <vsniprintf>:
 8017d64:	b513      	push	{r0, r1, r4, lr}
 8017d66:	4c04      	ldr	r4, [pc, #16]	@ (8017d78 <vsniprintf+0x14>)
 8017d68:	9300      	str	r3, [sp, #0]
 8017d6a:	0013      	movs	r3, r2
 8017d6c:	000a      	movs	r2, r1
 8017d6e:	0001      	movs	r1, r0
 8017d70:	6820      	ldr	r0, [r4, #0]
 8017d72:	f7ff ffcb 	bl	8017d0c <_vsniprintf_r>
 8017d76:	bd16      	pop	{r1, r2, r4, pc}
 8017d78:	200002dc 	.word	0x200002dc

08017d7c <memset>:
 8017d7c:	0003      	movs	r3, r0
 8017d7e:	1882      	adds	r2, r0, r2
 8017d80:	4293      	cmp	r3, r2
 8017d82:	d100      	bne.n	8017d86 <memset+0xa>
 8017d84:	4770      	bx	lr
 8017d86:	7019      	strb	r1, [r3, #0]
 8017d88:	3301      	adds	r3, #1
 8017d8a:	e7f9      	b.n	8017d80 <memset+0x4>

08017d8c <strncpy>:
 8017d8c:	0003      	movs	r3, r0
 8017d8e:	b530      	push	{r4, r5, lr}
 8017d90:	001d      	movs	r5, r3
 8017d92:	2a00      	cmp	r2, #0
 8017d94:	d006      	beq.n	8017da4 <strncpy+0x18>
 8017d96:	780c      	ldrb	r4, [r1, #0]
 8017d98:	3a01      	subs	r2, #1
 8017d9a:	3301      	adds	r3, #1
 8017d9c:	702c      	strb	r4, [r5, #0]
 8017d9e:	3101      	adds	r1, #1
 8017da0:	2c00      	cmp	r4, #0
 8017da2:	d1f5      	bne.n	8017d90 <strncpy+0x4>
 8017da4:	2100      	movs	r1, #0
 8017da6:	189a      	adds	r2, r3, r2
 8017da8:	4293      	cmp	r3, r2
 8017daa:	d100      	bne.n	8017dae <strncpy+0x22>
 8017dac:	bd30      	pop	{r4, r5, pc}
 8017dae:	7019      	strb	r1, [r3, #0]
 8017db0:	3301      	adds	r3, #1
 8017db2:	e7f9      	b.n	8017da8 <strncpy+0x1c>

08017db4 <strstr>:
 8017db4:	780a      	ldrb	r2, [r1, #0]
 8017db6:	b530      	push	{r4, r5, lr}
 8017db8:	2a00      	cmp	r2, #0
 8017dba:	d10c      	bne.n	8017dd6 <strstr+0x22>
 8017dbc:	bd30      	pop	{r4, r5, pc}
 8017dbe:	429a      	cmp	r2, r3
 8017dc0:	d108      	bne.n	8017dd4 <strstr+0x20>
 8017dc2:	2301      	movs	r3, #1
 8017dc4:	5ccc      	ldrb	r4, [r1, r3]
 8017dc6:	2c00      	cmp	r4, #0
 8017dc8:	d0f8      	beq.n	8017dbc <strstr+0x8>
 8017dca:	5cc5      	ldrb	r5, [r0, r3]
 8017dcc:	42a5      	cmp	r5, r4
 8017dce:	d101      	bne.n	8017dd4 <strstr+0x20>
 8017dd0:	3301      	adds	r3, #1
 8017dd2:	e7f7      	b.n	8017dc4 <strstr+0x10>
 8017dd4:	3001      	adds	r0, #1
 8017dd6:	7803      	ldrb	r3, [r0, #0]
 8017dd8:	2b00      	cmp	r3, #0
 8017dda:	d1f0      	bne.n	8017dbe <strstr+0xa>
 8017ddc:	0018      	movs	r0, r3
 8017dde:	e7ed      	b.n	8017dbc <strstr+0x8>

08017de0 <_localeconv_r>:
 8017de0:	4800      	ldr	r0, [pc, #0]	@ (8017de4 <_localeconv_r+0x4>)
 8017de2:	4770      	bx	lr
 8017de4:	2000041c 	.word	0x2000041c

08017de8 <_close_r>:
 8017de8:	2300      	movs	r3, #0
 8017dea:	b570      	push	{r4, r5, r6, lr}
 8017dec:	4d06      	ldr	r5, [pc, #24]	@ (8017e08 <_close_r+0x20>)
 8017dee:	0004      	movs	r4, r0
 8017df0:	0008      	movs	r0, r1
 8017df2:	602b      	str	r3, [r5, #0]
 8017df4:	f7f0 f9a2 	bl	800813c <_close>
 8017df8:	1c43      	adds	r3, r0, #1
 8017dfa:	d103      	bne.n	8017e04 <_close_r+0x1c>
 8017dfc:	682b      	ldr	r3, [r5, #0]
 8017dfe:	2b00      	cmp	r3, #0
 8017e00:	d000      	beq.n	8017e04 <_close_r+0x1c>
 8017e02:	6023      	str	r3, [r4, #0]
 8017e04:	bd70      	pop	{r4, r5, r6, pc}
 8017e06:	46c0      	nop			@ (mov r8, r8)
 8017e08:	200039d0 	.word	0x200039d0

08017e0c <_lseek_r>:
 8017e0c:	b570      	push	{r4, r5, r6, lr}
 8017e0e:	0004      	movs	r4, r0
 8017e10:	0008      	movs	r0, r1
 8017e12:	0011      	movs	r1, r2
 8017e14:	001a      	movs	r2, r3
 8017e16:	2300      	movs	r3, #0
 8017e18:	4d05      	ldr	r5, [pc, #20]	@ (8017e30 <_lseek_r+0x24>)
 8017e1a:	602b      	str	r3, [r5, #0]
 8017e1c:	f7f0 f9af 	bl	800817e <_lseek>
 8017e20:	1c43      	adds	r3, r0, #1
 8017e22:	d103      	bne.n	8017e2c <_lseek_r+0x20>
 8017e24:	682b      	ldr	r3, [r5, #0]
 8017e26:	2b00      	cmp	r3, #0
 8017e28:	d000      	beq.n	8017e2c <_lseek_r+0x20>
 8017e2a:	6023      	str	r3, [r4, #0]
 8017e2c:	bd70      	pop	{r4, r5, r6, pc}
 8017e2e:	46c0      	nop			@ (mov r8, r8)
 8017e30:	200039d0 	.word	0x200039d0

08017e34 <_read_r>:
 8017e34:	b570      	push	{r4, r5, r6, lr}
 8017e36:	0004      	movs	r4, r0
 8017e38:	0008      	movs	r0, r1
 8017e3a:	0011      	movs	r1, r2
 8017e3c:	001a      	movs	r2, r3
 8017e3e:	2300      	movs	r3, #0
 8017e40:	4d05      	ldr	r5, [pc, #20]	@ (8017e58 <_read_r+0x24>)
 8017e42:	602b      	str	r3, [r5, #0]
 8017e44:	f7f0 f95d 	bl	8008102 <_read>
 8017e48:	1c43      	adds	r3, r0, #1
 8017e4a:	d103      	bne.n	8017e54 <_read_r+0x20>
 8017e4c:	682b      	ldr	r3, [r5, #0]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	d000      	beq.n	8017e54 <_read_r+0x20>
 8017e52:	6023      	str	r3, [r4, #0]
 8017e54:	bd70      	pop	{r4, r5, r6, pc}
 8017e56:	46c0      	nop			@ (mov r8, r8)
 8017e58:	200039d0 	.word	0x200039d0

08017e5c <_write_r>:
 8017e5c:	b570      	push	{r4, r5, r6, lr}
 8017e5e:	0004      	movs	r4, r0
 8017e60:	0008      	movs	r0, r1
 8017e62:	0011      	movs	r1, r2
 8017e64:	001a      	movs	r2, r3
 8017e66:	2300      	movs	r3, #0
 8017e68:	4d05      	ldr	r5, [pc, #20]	@ (8017e80 <_write_r+0x24>)
 8017e6a:	602b      	str	r3, [r5, #0]
 8017e6c:	f7f0 fd6c 	bl	8008948 <_write>
 8017e70:	1c43      	adds	r3, r0, #1
 8017e72:	d103      	bne.n	8017e7c <_write_r+0x20>
 8017e74:	682b      	ldr	r3, [r5, #0]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d000      	beq.n	8017e7c <_write_r+0x20>
 8017e7a:	6023      	str	r3, [r4, #0]
 8017e7c:	bd70      	pop	{r4, r5, r6, pc}
 8017e7e:	46c0      	nop			@ (mov r8, r8)
 8017e80:	200039d0 	.word	0x200039d0

08017e84 <__errno>:
 8017e84:	4b01      	ldr	r3, [pc, #4]	@ (8017e8c <__errno+0x8>)
 8017e86:	6818      	ldr	r0, [r3, #0]
 8017e88:	4770      	bx	lr
 8017e8a:	46c0      	nop			@ (mov r8, r8)
 8017e8c:	200002dc 	.word	0x200002dc

08017e90 <__libc_init_array>:
 8017e90:	b570      	push	{r4, r5, r6, lr}
 8017e92:	2600      	movs	r6, #0
 8017e94:	4c0c      	ldr	r4, [pc, #48]	@ (8017ec8 <__libc_init_array+0x38>)
 8017e96:	4d0d      	ldr	r5, [pc, #52]	@ (8017ecc <__libc_init_array+0x3c>)
 8017e98:	1b64      	subs	r4, r4, r5
 8017e9a:	10a4      	asrs	r4, r4, #2
 8017e9c:	42a6      	cmp	r6, r4
 8017e9e:	d109      	bne.n	8017eb4 <__libc_init_array+0x24>
 8017ea0:	2600      	movs	r6, #0
 8017ea2:	f002 fd49 	bl	801a938 <_init>
 8017ea6:	4c0a      	ldr	r4, [pc, #40]	@ (8017ed0 <__libc_init_array+0x40>)
 8017ea8:	4d0a      	ldr	r5, [pc, #40]	@ (8017ed4 <__libc_init_array+0x44>)
 8017eaa:	1b64      	subs	r4, r4, r5
 8017eac:	10a4      	asrs	r4, r4, #2
 8017eae:	42a6      	cmp	r6, r4
 8017eb0:	d105      	bne.n	8017ebe <__libc_init_array+0x2e>
 8017eb2:	bd70      	pop	{r4, r5, r6, pc}
 8017eb4:	00b3      	lsls	r3, r6, #2
 8017eb6:	58eb      	ldr	r3, [r5, r3]
 8017eb8:	4798      	blx	r3
 8017eba:	3601      	adds	r6, #1
 8017ebc:	e7ee      	b.n	8017e9c <__libc_init_array+0xc>
 8017ebe:	00b3      	lsls	r3, r6, #2
 8017ec0:	58eb      	ldr	r3, [r5, r3]
 8017ec2:	4798      	blx	r3
 8017ec4:	3601      	adds	r6, #1
 8017ec6:	e7f2      	b.n	8017eae <__libc_init_array+0x1e>
 8017ec8:	0802d7a8 	.word	0x0802d7a8
 8017ecc:	0802d7a8 	.word	0x0802d7a8
 8017ed0:	0802d7ac 	.word	0x0802d7ac
 8017ed4:	0802d7a8 	.word	0x0802d7a8

08017ed8 <__retarget_lock_init_recursive>:
 8017ed8:	4770      	bx	lr

08017eda <__retarget_lock_acquire_recursive>:
 8017eda:	4770      	bx	lr

08017edc <__retarget_lock_release_recursive>:
 8017edc:	4770      	bx	lr

08017ede <memchr>:
 8017ede:	b2c9      	uxtb	r1, r1
 8017ee0:	1882      	adds	r2, r0, r2
 8017ee2:	4290      	cmp	r0, r2
 8017ee4:	d101      	bne.n	8017eea <memchr+0xc>
 8017ee6:	2000      	movs	r0, #0
 8017ee8:	4770      	bx	lr
 8017eea:	7803      	ldrb	r3, [r0, #0]
 8017eec:	428b      	cmp	r3, r1
 8017eee:	d0fb      	beq.n	8017ee8 <memchr+0xa>
 8017ef0:	3001      	adds	r0, #1
 8017ef2:	e7f6      	b.n	8017ee2 <memchr+0x4>

08017ef4 <memcpy>:
 8017ef4:	2300      	movs	r3, #0
 8017ef6:	b510      	push	{r4, lr}
 8017ef8:	429a      	cmp	r2, r3
 8017efa:	d100      	bne.n	8017efe <memcpy+0xa>
 8017efc:	bd10      	pop	{r4, pc}
 8017efe:	5ccc      	ldrb	r4, [r1, r3]
 8017f00:	54c4      	strb	r4, [r0, r3]
 8017f02:	3301      	adds	r3, #1
 8017f04:	e7f8      	b.n	8017ef8 <memcpy+0x4>

08017f06 <quorem>:
 8017f06:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017f08:	6902      	ldr	r2, [r0, #16]
 8017f0a:	690f      	ldr	r7, [r1, #16]
 8017f0c:	b087      	sub	sp, #28
 8017f0e:	0006      	movs	r6, r0
 8017f10:	000b      	movs	r3, r1
 8017f12:	2000      	movs	r0, #0
 8017f14:	9102      	str	r1, [sp, #8]
 8017f16:	42ba      	cmp	r2, r7
 8017f18:	db6d      	blt.n	8017ff6 <quorem+0xf0>
 8017f1a:	3f01      	subs	r7, #1
 8017f1c:	00bc      	lsls	r4, r7, #2
 8017f1e:	3314      	adds	r3, #20
 8017f20:	9305      	str	r3, [sp, #20]
 8017f22:	191b      	adds	r3, r3, r4
 8017f24:	9303      	str	r3, [sp, #12]
 8017f26:	0033      	movs	r3, r6
 8017f28:	3314      	adds	r3, #20
 8017f2a:	191c      	adds	r4, r3, r4
 8017f2c:	9301      	str	r3, [sp, #4]
 8017f2e:	6823      	ldr	r3, [r4, #0]
 8017f30:	9304      	str	r3, [sp, #16]
 8017f32:	9b03      	ldr	r3, [sp, #12]
 8017f34:	9804      	ldr	r0, [sp, #16]
 8017f36:	681d      	ldr	r5, [r3, #0]
 8017f38:	3501      	adds	r5, #1
 8017f3a:	0029      	movs	r1, r5
 8017f3c:	f7e8 f928 	bl	8000190 <__udivsi3>
 8017f40:	9b04      	ldr	r3, [sp, #16]
 8017f42:	9000      	str	r0, [sp, #0]
 8017f44:	42ab      	cmp	r3, r5
 8017f46:	d32b      	bcc.n	8017fa0 <quorem+0x9a>
 8017f48:	9b05      	ldr	r3, [sp, #20]
 8017f4a:	9d01      	ldr	r5, [sp, #4]
 8017f4c:	469c      	mov	ip, r3
 8017f4e:	2300      	movs	r3, #0
 8017f50:	9305      	str	r3, [sp, #20]
 8017f52:	9304      	str	r3, [sp, #16]
 8017f54:	4662      	mov	r2, ip
 8017f56:	ca08      	ldmia	r2!, {r3}
 8017f58:	6828      	ldr	r0, [r5, #0]
 8017f5a:	4694      	mov	ip, r2
 8017f5c:	9a00      	ldr	r2, [sp, #0]
 8017f5e:	b299      	uxth	r1, r3
 8017f60:	4351      	muls	r1, r2
 8017f62:	9a05      	ldr	r2, [sp, #20]
 8017f64:	0c1b      	lsrs	r3, r3, #16
 8017f66:	1889      	adds	r1, r1, r2
 8017f68:	9a00      	ldr	r2, [sp, #0]
 8017f6a:	4353      	muls	r3, r2
 8017f6c:	0c0a      	lsrs	r2, r1, #16
 8017f6e:	189b      	adds	r3, r3, r2
 8017f70:	0c1a      	lsrs	r2, r3, #16
 8017f72:	b289      	uxth	r1, r1
 8017f74:	9205      	str	r2, [sp, #20]
 8017f76:	b282      	uxth	r2, r0
 8017f78:	1a52      	subs	r2, r2, r1
 8017f7a:	9904      	ldr	r1, [sp, #16]
 8017f7c:	0c00      	lsrs	r0, r0, #16
 8017f7e:	1852      	adds	r2, r2, r1
 8017f80:	b29b      	uxth	r3, r3
 8017f82:	1411      	asrs	r1, r2, #16
 8017f84:	1ac3      	subs	r3, r0, r3
 8017f86:	185b      	adds	r3, r3, r1
 8017f88:	1419      	asrs	r1, r3, #16
 8017f8a:	b292      	uxth	r2, r2
 8017f8c:	041b      	lsls	r3, r3, #16
 8017f8e:	431a      	orrs	r2, r3
 8017f90:	9b03      	ldr	r3, [sp, #12]
 8017f92:	9104      	str	r1, [sp, #16]
 8017f94:	c504      	stmia	r5!, {r2}
 8017f96:	4563      	cmp	r3, ip
 8017f98:	d2dc      	bcs.n	8017f54 <quorem+0x4e>
 8017f9a:	6823      	ldr	r3, [r4, #0]
 8017f9c:	2b00      	cmp	r3, #0
 8017f9e:	d030      	beq.n	8018002 <quorem+0xfc>
 8017fa0:	0030      	movs	r0, r6
 8017fa2:	9902      	ldr	r1, [sp, #8]
 8017fa4:	f001 f9c6 	bl	8019334 <__mcmp>
 8017fa8:	2800      	cmp	r0, #0
 8017faa:	db23      	blt.n	8017ff4 <quorem+0xee>
 8017fac:	0034      	movs	r4, r6
 8017fae:	2500      	movs	r5, #0
 8017fb0:	9902      	ldr	r1, [sp, #8]
 8017fb2:	3414      	adds	r4, #20
 8017fb4:	3114      	adds	r1, #20
 8017fb6:	6823      	ldr	r3, [r4, #0]
 8017fb8:	c901      	ldmia	r1!, {r0}
 8017fba:	9302      	str	r3, [sp, #8]
 8017fbc:	466b      	mov	r3, sp
 8017fbe:	891b      	ldrh	r3, [r3, #8]
 8017fc0:	b282      	uxth	r2, r0
 8017fc2:	1a9a      	subs	r2, r3, r2
 8017fc4:	9b02      	ldr	r3, [sp, #8]
 8017fc6:	1952      	adds	r2, r2, r5
 8017fc8:	0c00      	lsrs	r0, r0, #16
 8017fca:	0c1b      	lsrs	r3, r3, #16
 8017fcc:	1a1b      	subs	r3, r3, r0
 8017fce:	1410      	asrs	r0, r2, #16
 8017fd0:	181b      	adds	r3, r3, r0
 8017fd2:	141d      	asrs	r5, r3, #16
 8017fd4:	b292      	uxth	r2, r2
 8017fd6:	041b      	lsls	r3, r3, #16
 8017fd8:	431a      	orrs	r2, r3
 8017fda:	9b03      	ldr	r3, [sp, #12]
 8017fdc:	c404      	stmia	r4!, {r2}
 8017fde:	428b      	cmp	r3, r1
 8017fe0:	d2e9      	bcs.n	8017fb6 <quorem+0xb0>
 8017fe2:	9a01      	ldr	r2, [sp, #4]
 8017fe4:	00bb      	lsls	r3, r7, #2
 8017fe6:	18d3      	adds	r3, r2, r3
 8017fe8:	681a      	ldr	r2, [r3, #0]
 8017fea:	2a00      	cmp	r2, #0
 8017fec:	d013      	beq.n	8018016 <quorem+0x110>
 8017fee:	9b00      	ldr	r3, [sp, #0]
 8017ff0:	3301      	adds	r3, #1
 8017ff2:	9300      	str	r3, [sp, #0]
 8017ff4:	9800      	ldr	r0, [sp, #0]
 8017ff6:	b007      	add	sp, #28
 8017ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8017ffa:	6823      	ldr	r3, [r4, #0]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d104      	bne.n	801800a <quorem+0x104>
 8018000:	3f01      	subs	r7, #1
 8018002:	9b01      	ldr	r3, [sp, #4]
 8018004:	3c04      	subs	r4, #4
 8018006:	42a3      	cmp	r3, r4
 8018008:	d3f7      	bcc.n	8017ffa <quorem+0xf4>
 801800a:	6137      	str	r7, [r6, #16]
 801800c:	e7c8      	b.n	8017fa0 <quorem+0x9a>
 801800e:	681a      	ldr	r2, [r3, #0]
 8018010:	2a00      	cmp	r2, #0
 8018012:	d104      	bne.n	801801e <quorem+0x118>
 8018014:	3f01      	subs	r7, #1
 8018016:	9a01      	ldr	r2, [sp, #4]
 8018018:	3b04      	subs	r3, #4
 801801a:	429a      	cmp	r2, r3
 801801c:	d3f7      	bcc.n	801800e <quorem+0x108>
 801801e:	6137      	str	r7, [r6, #16]
 8018020:	e7e5      	b.n	8017fee <quorem+0xe8>
	...

08018024 <_dtoa_r>:
 8018024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018026:	0014      	movs	r4, r2
 8018028:	001d      	movs	r5, r3
 801802a:	69c6      	ldr	r6, [r0, #28]
 801802c:	b09d      	sub	sp, #116	@ 0x74
 801802e:	940a      	str	r4, [sp, #40]	@ 0x28
 8018030:	950b      	str	r5, [sp, #44]	@ 0x2c
 8018032:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 8018034:	9003      	str	r0, [sp, #12]
 8018036:	2e00      	cmp	r6, #0
 8018038:	d10f      	bne.n	801805a <_dtoa_r+0x36>
 801803a:	2010      	movs	r0, #16
 801803c:	f000 fe30 	bl	8018ca0 <malloc>
 8018040:	9b03      	ldr	r3, [sp, #12]
 8018042:	1e02      	subs	r2, r0, #0
 8018044:	61d8      	str	r0, [r3, #28]
 8018046:	d104      	bne.n	8018052 <_dtoa_r+0x2e>
 8018048:	21ef      	movs	r1, #239	@ 0xef
 801804a:	4bc7      	ldr	r3, [pc, #796]	@ (8018368 <_dtoa_r+0x344>)
 801804c:	48c7      	ldr	r0, [pc, #796]	@ (801836c <_dtoa_r+0x348>)
 801804e:	f001 fea1 	bl	8019d94 <__assert_func>
 8018052:	6046      	str	r6, [r0, #4]
 8018054:	6086      	str	r6, [r0, #8]
 8018056:	6006      	str	r6, [r0, #0]
 8018058:	60c6      	str	r6, [r0, #12]
 801805a:	9b03      	ldr	r3, [sp, #12]
 801805c:	69db      	ldr	r3, [r3, #28]
 801805e:	6819      	ldr	r1, [r3, #0]
 8018060:	2900      	cmp	r1, #0
 8018062:	d00b      	beq.n	801807c <_dtoa_r+0x58>
 8018064:	685a      	ldr	r2, [r3, #4]
 8018066:	2301      	movs	r3, #1
 8018068:	4093      	lsls	r3, r2
 801806a:	604a      	str	r2, [r1, #4]
 801806c:	608b      	str	r3, [r1, #8]
 801806e:	9803      	ldr	r0, [sp, #12]
 8018070:	f000 ff16 	bl	8018ea0 <_Bfree>
 8018074:	2200      	movs	r2, #0
 8018076:	9b03      	ldr	r3, [sp, #12]
 8018078:	69db      	ldr	r3, [r3, #28]
 801807a:	601a      	str	r2, [r3, #0]
 801807c:	2d00      	cmp	r5, #0
 801807e:	da1e      	bge.n	80180be <_dtoa_r+0x9a>
 8018080:	2301      	movs	r3, #1
 8018082:	603b      	str	r3, [r7, #0]
 8018084:	006b      	lsls	r3, r5, #1
 8018086:	085b      	lsrs	r3, r3, #1
 8018088:	930b      	str	r3, [sp, #44]	@ 0x2c
 801808a:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801808c:	4bb8      	ldr	r3, [pc, #736]	@ (8018370 <_dtoa_r+0x34c>)
 801808e:	4ab8      	ldr	r2, [pc, #736]	@ (8018370 <_dtoa_r+0x34c>)
 8018090:	403b      	ands	r3, r7
 8018092:	4293      	cmp	r3, r2
 8018094:	d116      	bne.n	80180c4 <_dtoa_r+0xa0>
 8018096:	4bb7      	ldr	r3, [pc, #732]	@ (8018374 <_dtoa_r+0x350>)
 8018098:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801809a:	6013      	str	r3, [r2, #0]
 801809c:	033b      	lsls	r3, r7, #12
 801809e:	0b1b      	lsrs	r3, r3, #12
 80180a0:	4323      	orrs	r3, r4
 80180a2:	d101      	bne.n	80180a8 <_dtoa_r+0x84>
 80180a4:	f000 fd83 	bl	8018bae <_dtoa_r+0xb8a>
 80180a8:	4bb3      	ldr	r3, [pc, #716]	@ (8018378 <_dtoa_r+0x354>)
 80180aa:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80180ac:	9308      	str	r3, [sp, #32]
 80180ae:	2a00      	cmp	r2, #0
 80180b0:	d002      	beq.n	80180b8 <_dtoa_r+0x94>
 80180b2:	4bb2      	ldr	r3, [pc, #712]	@ (801837c <_dtoa_r+0x358>)
 80180b4:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80180b6:	6013      	str	r3, [r2, #0]
 80180b8:	9808      	ldr	r0, [sp, #32]
 80180ba:	b01d      	add	sp, #116	@ 0x74
 80180bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180be:	2300      	movs	r3, #0
 80180c0:	603b      	str	r3, [r7, #0]
 80180c2:	e7e2      	b.n	801808a <_dtoa_r+0x66>
 80180c4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80180c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80180c8:	9212      	str	r2, [sp, #72]	@ 0x48
 80180ca:	9313      	str	r3, [sp, #76]	@ 0x4c
 80180cc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80180ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80180d0:	2200      	movs	r2, #0
 80180d2:	2300      	movs	r3, #0
 80180d4:	f7e8 f9e2 	bl	800049c <__aeabi_dcmpeq>
 80180d8:	1e06      	subs	r6, r0, #0
 80180da:	d00b      	beq.n	80180f4 <_dtoa_r+0xd0>
 80180dc:	2301      	movs	r3, #1
 80180de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80180e0:	6013      	str	r3, [r2, #0]
 80180e2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d002      	beq.n	80180ee <_dtoa_r+0xca>
 80180e8:	4ba5      	ldr	r3, [pc, #660]	@ (8018380 <_dtoa_r+0x35c>)
 80180ea:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80180ec:	6013      	str	r3, [r2, #0]
 80180ee:	4ba5      	ldr	r3, [pc, #660]	@ (8018384 <_dtoa_r+0x360>)
 80180f0:	9308      	str	r3, [sp, #32]
 80180f2:	e7e1      	b.n	80180b8 <_dtoa_r+0x94>
 80180f4:	ab1a      	add	r3, sp, #104	@ 0x68
 80180f6:	9301      	str	r3, [sp, #4]
 80180f8:	ab1b      	add	r3, sp, #108	@ 0x6c
 80180fa:	9300      	str	r3, [sp, #0]
 80180fc:	9803      	ldr	r0, [sp, #12]
 80180fe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8018100:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018102:	f001 f9cd 	bl	80194a0 <__d2b>
 8018106:	007a      	lsls	r2, r7, #1
 8018108:	9005      	str	r0, [sp, #20]
 801810a:	0d52      	lsrs	r2, r2, #21
 801810c:	d100      	bne.n	8018110 <_dtoa_r+0xec>
 801810e:	e07b      	b.n	8018208 <_dtoa_r+0x1e4>
 8018110:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8018112:	9618      	str	r6, [sp, #96]	@ 0x60
 8018114:	0319      	lsls	r1, r3, #12
 8018116:	4b9c      	ldr	r3, [pc, #624]	@ (8018388 <_dtoa_r+0x364>)
 8018118:	0b09      	lsrs	r1, r1, #12
 801811a:	430b      	orrs	r3, r1
 801811c:	499b      	ldr	r1, [pc, #620]	@ (801838c <_dtoa_r+0x368>)
 801811e:	1857      	adds	r7, r2, r1
 8018120:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018122:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018124:	0019      	movs	r1, r3
 8018126:	2200      	movs	r2, #0
 8018128:	4b99      	ldr	r3, [pc, #612]	@ (8018390 <_dtoa_r+0x36c>)
 801812a:	f7ea fd13 	bl	8002b54 <__aeabi_dsub>
 801812e:	4a99      	ldr	r2, [pc, #612]	@ (8018394 <_dtoa_r+0x370>)
 8018130:	4b99      	ldr	r3, [pc, #612]	@ (8018398 <_dtoa_r+0x374>)
 8018132:	f7ea fa47 	bl	80025c4 <__aeabi_dmul>
 8018136:	4a99      	ldr	r2, [pc, #612]	@ (801839c <_dtoa_r+0x378>)
 8018138:	4b99      	ldr	r3, [pc, #612]	@ (80183a0 <_dtoa_r+0x37c>)
 801813a:	f7e9 fa9b 	bl	8001674 <__aeabi_dadd>
 801813e:	0004      	movs	r4, r0
 8018140:	0038      	movs	r0, r7
 8018142:	000d      	movs	r5, r1
 8018144:	f7eb f900 	bl	8003348 <__aeabi_i2d>
 8018148:	4a96      	ldr	r2, [pc, #600]	@ (80183a4 <_dtoa_r+0x380>)
 801814a:	4b97      	ldr	r3, [pc, #604]	@ (80183a8 <_dtoa_r+0x384>)
 801814c:	f7ea fa3a 	bl	80025c4 <__aeabi_dmul>
 8018150:	0002      	movs	r2, r0
 8018152:	000b      	movs	r3, r1
 8018154:	0020      	movs	r0, r4
 8018156:	0029      	movs	r1, r5
 8018158:	f7e9 fa8c 	bl	8001674 <__aeabi_dadd>
 801815c:	0004      	movs	r4, r0
 801815e:	000d      	movs	r5, r1
 8018160:	f7eb f8b6 	bl	80032d0 <__aeabi_d2iz>
 8018164:	2200      	movs	r2, #0
 8018166:	9004      	str	r0, [sp, #16]
 8018168:	2300      	movs	r3, #0
 801816a:	0020      	movs	r0, r4
 801816c:	0029      	movs	r1, r5
 801816e:	f7e8 f99b 	bl	80004a8 <__aeabi_dcmplt>
 8018172:	2800      	cmp	r0, #0
 8018174:	d00b      	beq.n	801818e <_dtoa_r+0x16a>
 8018176:	9804      	ldr	r0, [sp, #16]
 8018178:	f7eb f8e6 	bl	8003348 <__aeabi_i2d>
 801817c:	002b      	movs	r3, r5
 801817e:	0022      	movs	r2, r4
 8018180:	f7e8 f98c 	bl	800049c <__aeabi_dcmpeq>
 8018184:	4243      	negs	r3, r0
 8018186:	4158      	adcs	r0, r3
 8018188:	9b04      	ldr	r3, [sp, #16]
 801818a:	1a1b      	subs	r3, r3, r0
 801818c:	9304      	str	r3, [sp, #16]
 801818e:	2301      	movs	r3, #1
 8018190:	9315      	str	r3, [sp, #84]	@ 0x54
 8018192:	9b04      	ldr	r3, [sp, #16]
 8018194:	2b16      	cmp	r3, #22
 8018196:	d810      	bhi.n	80181ba <_dtoa_r+0x196>
 8018198:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801819a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801819c:	9a04      	ldr	r2, [sp, #16]
 801819e:	4b83      	ldr	r3, [pc, #524]	@ (80183ac <_dtoa_r+0x388>)
 80181a0:	00d2      	lsls	r2, r2, #3
 80181a2:	189b      	adds	r3, r3, r2
 80181a4:	681a      	ldr	r2, [r3, #0]
 80181a6:	685b      	ldr	r3, [r3, #4]
 80181a8:	f7e8 f97e 	bl	80004a8 <__aeabi_dcmplt>
 80181ac:	2800      	cmp	r0, #0
 80181ae:	d047      	beq.n	8018240 <_dtoa_r+0x21c>
 80181b0:	9b04      	ldr	r3, [sp, #16]
 80181b2:	3b01      	subs	r3, #1
 80181b4:	9304      	str	r3, [sp, #16]
 80181b6:	2300      	movs	r3, #0
 80181b8:	9315      	str	r3, [sp, #84]	@ 0x54
 80181ba:	2200      	movs	r2, #0
 80181bc:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80181be:	9206      	str	r2, [sp, #24]
 80181c0:	1bdb      	subs	r3, r3, r7
 80181c2:	1e5a      	subs	r2, r3, #1
 80181c4:	d53e      	bpl.n	8018244 <_dtoa_r+0x220>
 80181c6:	2201      	movs	r2, #1
 80181c8:	1ad3      	subs	r3, r2, r3
 80181ca:	9306      	str	r3, [sp, #24]
 80181cc:	2300      	movs	r3, #0
 80181ce:	930d      	str	r3, [sp, #52]	@ 0x34
 80181d0:	9b04      	ldr	r3, [sp, #16]
 80181d2:	2b00      	cmp	r3, #0
 80181d4:	db38      	blt.n	8018248 <_dtoa_r+0x224>
 80181d6:	9a04      	ldr	r2, [sp, #16]
 80181d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80181da:	4694      	mov	ip, r2
 80181dc:	4463      	add	r3, ip
 80181de:	930d      	str	r3, [sp, #52]	@ 0x34
 80181e0:	2300      	movs	r3, #0
 80181e2:	9214      	str	r2, [sp, #80]	@ 0x50
 80181e4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80181e6:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80181e8:	2401      	movs	r4, #1
 80181ea:	2b09      	cmp	r3, #9
 80181ec:	d867      	bhi.n	80182be <_dtoa_r+0x29a>
 80181ee:	2b05      	cmp	r3, #5
 80181f0:	dd02      	ble.n	80181f8 <_dtoa_r+0x1d4>
 80181f2:	2400      	movs	r4, #0
 80181f4:	3b04      	subs	r3, #4
 80181f6:	9322      	str	r3, [sp, #136]	@ 0x88
 80181f8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80181fa:	1e98      	subs	r0, r3, #2
 80181fc:	2803      	cmp	r0, #3
 80181fe:	d867      	bhi.n	80182d0 <_dtoa_r+0x2ac>
 8018200:	f7e7 ffb2 	bl	8000168 <__gnu_thumb1_case_uqi>
 8018204:	5b383a2b 	.word	0x5b383a2b
 8018208:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801820a:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801820c:	18f6      	adds	r6, r6, r3
 801820e:	4b68      	ldr	r3, [pc, #416]	@ (80183b0 <_dtoa_r+0x38c>)
 8018210:	18f2      	adds	r2, r6, r3
 8018212:	2a20      	cmp	r2, #32
 8018214:	dd0f      	ble.n	8018236 <_dtoa_r+0x212>
 8018216:	2340      	movs	r3, #64	@ 0x40
 8018218:	1a9b      	subs	r3, r3, r2
 801821a:	409f      	lsls	r7, r3
 801821c:	4b65      	ldr	r3, [pc, #404]	@ (80183b4 <_dtoa_r+0x390>)
 801821e:	0038      	movs	r0, r7
 8018220:	18f3      	adds	r3, r6, r3
 8018222:	40dc      	lsrs	r4, r3
 8018224:	4320      	orrs	r0, r4
 8018226:	f7eb f8bd 	bl	80033a4 <__aeabi_ui2d>
 801822a:	2201      	movs	r2, #1
 801822c:	4b62      	ldr	r3, [pc, #392]	@ (80183b8 <_dtoa_r+0x394>)
 801822e:	1e77      	subs	r7, r6, #1
 8018230:	18cb      	adds	r3, r1, r3
 8018232:	9218      	str	r2, [sp, #96]	@ 0x60
 8018234:	e776      	b.n	8018124 <_dtoa_r+0x100>
 8018236:	2320      	movs	r3, #32
 8018238:	0020      	movs	r0, r4
 801823a:	1a9b      	subs	r3, r3, r2
 801823c:	4098      	lsls	r0, r3
 801823e:	e7f2      	b.n	8018226 <_dtoa_r+0x202>
 8018240:	9015      	str	r0, [sp, #84]	@ 0x54
 8018242:	e7ba      	b.n	80181ba <_dtoa_r+0x196>
 8018244:	920d      	str	r2, [sp, #52]	@ 0x34
 8018246:	e7c3      	b.n	80181d0 <_dtoa_r+0x1ac>
 8018248:	9b06      	ldr	r3, [sp, #24]
 801824a:	9a04      	ldr	r2, [sp, #16]
 801824c:	1a9b      	subs	r3, r3, r2
 801824e:	9306      	str	r3, [sp, #24]
 8018250:	4253      	negs	r3, r2
 8018252:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018254:	2300      	movs	r3, #0
 8018256:	9314      	str	r3, [sp, #80]	@ 0x50
 8018258:	e7c5      	b.n	80181e6 <_dtoa_r+0x1c2>
 801825a:	2300      	movs	r3, #0
 801825c:	9310      	str	r3, [sp, #64]	@ 0x40
 801825e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018260:	930e      	str	r3, [sp, #56]	@ 0x38
 8018262:	9309      	str	r3, [sp, #36]	@ 0x24
 8018264:	2b00      	cmp	r3, #0
 8018266:	dc13      	bgt.n	8018290 <_dtoa_r+0x26c>
 8018268:	2301      	movs	r3, #1
 801826a:	001a      	movs	r2, r3
 801826c:	930e      	str	r3, [sp, #56]	@ 0x38
 801826e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018270:	9223      	str	r2, [sp, #140]	@ 0x8c
 8018272:	e00d      	b.n	8018290 <_dtoa_r+0x26c>
 8018274:	2301      	movs	r3, #1
 8018276:	e7f1      	b.n	801825c <_dtoa_r+0x238>
 8018278:	2300      	movs	r3, #0
 801827a:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801827c:	9310      	str	r3, [sp, #64]	@ 0x40
 801827e:	4694      	mov	ip, r2
 8018280:	9b04      	ldr	r3, [sp, #16]
 8018282:	4463      	add	r3, ip
 8018284:	930e      	str	r3, [sp, #56]	@ 0x38
 8018286:	3301      	adds	r3, #1
 8018288:	9309      	str	r3, [sp, #36]	@ 0x24
 801828a:	2b00      	cmp	r3, #0
 801828c:	dc00      	bgt.n	8018290 <_dtoa_r+0x26c>
 801828e:	2301      	movs	r3, #1
 8018290:	9a03      	ldr	r2, [sp, #12]
 8018292:	2100      	movs	r1, #0
 8018294:	69d0      	ldr	r0, [r2, #28]
 8018296:	2204      	movs	r2, #4
 8018298:	0015      	movs	r5, r2
 801829a:	3514      	adds	r5, #20
 801829c:	429d      	cmp	r5, r3
 801829e:	d91b      	bls.n	80182d8 <_dtoa_r+0x2b4>
 80182a0:	6041      	str	r1, [r0, #4]
 80182a2:	9803      	ldr	r0, [sp, #12]
 80182a4:	f000 fdb8 	bl	8018e18 <_Balloc>
 80182a8:	9008      	str	r0, [sp, #32]
 80182aa:	2800      	cmp	r0, #0
 80182ac:	d117      	bne.n	80182de <_dtoa_r+0x2ba>
 80182ae:	21b0      	movs	r1, #176	@ 0xb0
 80182b0:	4b42      	ldr	r3, [pc, #264]	@ (80183bc <_dtoa_r+0x398>)
 80182b2:	482e      	ldr	r0, [pc, #184]	@ (801836c <_dtoa_r+0x348>)
 80182b4:	9a08      	ldr	r2, [sp, #32]
 80182b6:	31ff      	adds	r1, #255	@ 0xff
 80182b8:	e6c9      	b.n	801804e <_dtoa_r+0x2a>
 80182ba:	2301      	movs	r3, #1
 80182bc:	e7dd      	b.n	801827a <_dtoa_r+0x256>
 80182be:	2300      	movs	r3, #0
 80182c0:	9410      	str	r4, [sp, #64]	@ 0x40
 80182c2:	9322      	str	r3, [sp, #136]	@ 0x88
 80182c4:	3b01      	subs	r3, #1
 80182c6:	930e      	str	r3, [sp, #56]	@ 0x38
 80182c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80182ca:	2200      	movs	r2, #0
 80182cc:	3313      	adds	r3, #19
 80182ce:	e7cf      	b.n	8018270 <_dtoa_r+0x24c>
 80182d0:	2301      	movs	r3, #1
 80182d2:	9310      	str	r3, [sp, #64]	@ 0x40
 80182d4:	3b02      	subs	r3, #2
 80182d6:	e7f6      	b.n	80182c6 <_dtoa_r+0x2a2>
 80182d8:	3101      	adds	r1, #1
 80182da:	0052      	lsls	r2, r2, #1
 80182dc:	e7dc      	b.n	8018298 <_dtoa_r+0x274>
 80182de:	9b03      	ldr	r3, [sp, #12]
 80182e0:	9a08      	ldr	r2, [sp, #32]
 80182e2:	69db      	ldr	r3, [r3, #28]
 80182e4:	601a      	str	r2, [r3, #0]
 80182e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80182e8:	2b0e      	cmp	r3, #14
 80182ea:	d900      	bls.n	80182ee <_dtoa_r+0x2ca>
 80182ec:	e0d9      	b.n	80184a2 <_dtoa_r+0x47e>
 80182ee:	2c00      	cmp	r4, #0
 80182f0:	d100      	bne.n	80182f4 <_dtoa_r+0x2d0>
 80182f2:	e0d6      	b.n	80184a2 <_dtoa_r+0x47e>
 80182f4:	9b04      	ldr	r3, [sp, #16]
 80182f6:	2b00      	cmp	r3, #0
 80182f8:	dd64      	ble.n	80183c4 <_dtoa_r+0x3a0>
 80182fa:	210f      	movs	r1, #15
 80182fc:	9a04      	ldr	r2, [sp, #16]
 80182fe:	4b2b      	ldr	r3, [pc, #172]	@ (80183ac <_dtoa_r+0x388>)
 8018300:	400a      	ands	r2, r1
 8018302:	00d2      	lsls	r2, r2, #3
 8018304:	189b      	adds	r3, r3, r2
 8018306:	681e      	ldr	r6, [r3, #0]
 8018308:	685f      	ldr	r7, [r3, #4]
 801830a:	9b04      	ldr	r3, [sp, #16]
 801830c:	2402      	movs	r4, #2
 801830e:	111d      	asrs	r5, r3, #4
 8018310:	05db      	lsls	r3, r3, #23
 8018312:	d50a      	bpl.n	801832a <_dtoa_r+0x306>
 8018314:	4b2a      	ldr	r3, [pc, #168]	@ (80183c0 <_dtoa_r+0x39c>)
 8018316:	400d      	ands	r5, r1
 8018318:	6a1a      	ldr	r2, [r3, #32]
 801831a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801831c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801831e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 8018320:	f7e9 fd0c 	bl	8001d3c <__aeabi_ddiv>
 8018324:	900a      	str	r0, [sp, #40]	@ 0x28
 8018326:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018328:	3401      	adds	r4, #1
 801832a:	4b25      	ldr	r3, [pc, #148]	@ (80183c0 <_dtoa_r+0x39c>)
 801832c:	930c      	str	r3, [sp, #48]	@ 0x30
 801832e:	2d00      	cmp	r5, #0
 8018330:	d108      	bne.n	8018344 <_dtoa_r+0x320>
 8018332:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018334:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018336:	0032      	movs	r2, r6
 8018338:	003b      	movs	r3, r7
 801833a:	f7e9 fcff 	bl	8001d3c <__aeabi_ddiv>
 801833e:	900a      	str	r0, [sp, #40]	@ 0x28
 8018340:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018342:	e05a      	b.n	80183fa <_dtoa_r+0x3d6>
 8018344:	2301      	movs	r3, #1
 8018346:	421d      	tst	r5, r3
 8018348:	d009      	beq.n	801835e <_dtoa_r+0x33a>
 801834a:	18e4      	adds	r4, r4, r3
 801834c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801834e:	0030      	movs	r0, r6
 8018350:	681a      	ldr	r2, [r3, #0]
 8018352:	685b      	ldr	r3, [r3, #4]
 8018354:	0039      	movs	r1, r7
 8018356:	f7ea f935 	bl	80025c4 <__aeabi_dmul>
 801835a:	0006      	movs	r6, r0
 801835c:	000f      	movs	r7, r1
 801835e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018360:	106d      	asrs	r5, r5, #1
 8018362:	3308      	adds	r3, #8
 8018364:	e7e2      	b.n	801832c <_dtoa_r+0x308>
 8018366:	46c0      	nop			@ (mov r8, r8)
 8018368:	0802d459 	.word	0x0802d459
 801836c:	0802d470 	.word	0x0802d470
 8018370:	7ff00000 	.word	0x7ff00000
 8018374:	0000270f 	.word	0x0000270f
 8018378:	0802d455 	.word	0x0802d455
 801837c:	0802d458 	.word	0x0802d458
 8018380:	0802d429 	.word	0x0802d429
 8018384:	0802d428 	.word	0x0802d428
 8018388:	3ff00000 	.word	0x3ff00000
 801838c:	fffffc01 	.word	0xfffffc01
 8018390:	3ff80000 	.word	0x3ff80000
 8018394:	636f4361 	.word	0x636f4361
 8018398:	3fd287a7 	.word	0x3fd287a7
 801839c:	8b60c8b3 	.word	0x8b60c8b3
 80183a0:	3fc68a28 	.word	0x3fc68a28
 80183a4:	509f79fb 	.word	0x509f79fb
 80183a8:	3fd34413 	.word	0x3fd34413
 80183ac:	0802d568 	.word	0x0802d568
 80183b0:	00000432 	.word	0x00000432
 80183b4:	00000412 	.word	0x00000412
 80183b8:	fe100000 	.word	0xfe100000
 80183bc:	0802d4c8 	.word	0x0802d4c8
 80183c0:	0802d540 	.word	0x0802d540
 80183c4:	9b04      	ldr	r3, [sp, #16]
 80183c6:	2402      	movs	r4, #2
 80183c8:	2b00      	cmp	r3, #0
 80183ca:	d016      	beq.n	80183fa <_dtoa_r+0x3d6>
 80183cc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80183ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 80183d0:	220f      	movs	r2, #15
 80183d2:	425d      	negs	r5, r3
 80183d4:	402a      	ands	r2, r5
 80183d6:	4bd7      	ldr	r3, [pc, #860]	@ (8018734 <_dtoa_r+0x710>)
 80183d8:	00d2      	lsls	r2, r2, #3
 80183da:	189b      	adds	r3, r3, r2
 80183dc:	681a      	ldr	r2, [r3, #0]
 80183de:	685b      	ldr	r3, [r3, #4]
 80183e0:	f7ea f8f0 	bl	80025c4 <__aeabi_dmul>
 80183e4:	2701      	movs	r7, #1
 80183e6:	2300      	movs	r3, #0
 80183e8:	900a      	str	r0, [sp, #40]	@ 0x28
 80183ea:	910b      	str	r1, [sp, #44]	@ 0x2c
 80183ec:	4ed2      	ldr	r6, [pc, #840]	@ (8018738 <_dtoa_r+0x714>)
 80183ee:	112d      	asrs	r5, r5, #4
 80183f0:	2d00      	cmp	r5, #0
 80183f2:	d000      	beq.n	80183f6 <_dtoa_r+0x3d2>
 80183f4:	e0ba      	b.n	801856c <_dtoa_r+0x548>
 80183f6:	2b00      	cmp	r3, #0
 80183f8:	d1a1      	bne.n	801833e <_dtoa_r+0x31a>
 80183fa:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80183fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80183fe:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018400:	2b00      	cmp	r3, #0
 8018402:	d100      	bne.n	8018406 <_dtoa_r+0x3e2>
 8018404:	e0bd      	b.n	8018582 <_dtoa_r+0x55e>
 8018406:	2200      	movs	r2, #0
 8018408:	0030      	movs	r0, r6
 801840a:	0039      	movs	r1, r7
 801840c:	4bcb      	ldr	r3, [pc, #812]	@ (801873c <_dtoa_r+0x718>)
 801840e:	f7e8 f84b 	bl	80004a8 <__aeabi_dcmplt>
 8018412:	2800      	cmp	r0, #0
 8018414:	d100      	bne.n	8018418 <_dtoa_r+0x3f4>
 8018416:	e0b4      	b.n	8018582 <_dtoa_r+0x55e>
 8018418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801841a:	2b00      	cmp	r3, #0
 801841c:	d100      	bne.n	8018420 <_dtoa_r+0x3fc>
 801841e:	e0b0      	b.n	8018582 <_dtoa_r+0x55e>
 8018420:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018422:	2b00      	cmp	r3, #0
 8018424:	dd39      	ble.n	801849a <_dtoa_r+0x476>
 8018426:	9b04      	ldr	r3, [sp, #16]
 8018428:	2200      	movs	r2, #0
 801842a:	3b01      	subs	r3, #1
 801842c:	930c      	str	r3, [sp, #48]	@ 0x30
 801842e:	0030      	movs	r0, r6
 8018430:	4bc3      	ldr	r3, [pc, #780]	@ (8018740 <_dtoa_r+0x71c>)
 8018432:	0039      	movs	r1, r7
 8018434:	f7ea f8c6 	bl	80025c4 <__aeabi_dmul>
 8018438:	900a      	str	r0, [sp, #40]	@ 0x28
 801843a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801843c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801843e:	3401      	adds	r4, #1
 8018440:	0020      	movs	r0, r4
 8018442:	9311      	str	r3, [sp, #68]	@ 0x44
 8018444:	f7ea ff80 	bl	8003348 <__aeabi_i2d>
 8018448:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801844a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801844c:	f7ea f8ba 	bl	80025c4 <__aeabi_dmul>
 8018450:	4bbc      	ldr	r3, [pc, #752]	@ (8018744 <_dtoa_r+0x720>)
 8018452:	2200      	movs	r2, #0
 8018454:	f7e9 f90e 	bl	8001674 <__aeabi_dadd>
 8018458:	4bbb      	ldr	r3, [pc, #748]	@ (8018748 <_dtoa_r+0x724>)
 801845a:	0006      	movs	r6, r0
 801845c:	18cf      	adds	r7, r1, r3
 801845e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018460:	2b00      	cmp	r3, #0
 8018462:	d000      	beq.n	8018466 <_dtoa_r+0x442>
 8018464:	e091      	b.n	801858a <_dtoa_r+0x566>
 8018466:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018468:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801846a:	2200      	movs	r2, #0
 801846c:	4bb7      	ldr	r3, [pc, #732]	@ (801874c <_dtoa_r+0x728>)
 801846e:	f7ea fb71 	bl	8002b54 <__aeabi_dsub>
 8018472:	0032      	movs	r2, r6
 8018474:	003b      	movs	r3, r7
 8018476:	0004      	movs	r4, r0
 8018478:	000d      	movs	r5, r1
 801847a:	f7e8 f829 	bl	80004d0 <__aeabi_dcmpgt>
 801847e:	2800      	cmp	r0, #0
 8018480:	d000      	beq.n	8018484 <_dtoa_r+0x460>
 8018482:	e29d      	b.n	80189c0 <_dtoa_r+0x99c>
 8018484:	2180      	movs	r1, #128	@ 0x80
 8018486:	0609      	lsls	r1, r1, #24
 8018488:	187b      	adds	r3, r7, r1
 801848a:	0032      	movs	r2, r6
 801848c:	0020      	movs	r0, r4
 801848e:	0029      	movs	r1, r5
 8018490:	f7e8 f80a 	bl	80004a8 <__aeabi_dcmplt>
 8018494:	2800      	cmp	r0, #0
 8018496:	d000      	beq.n	801849a <_dtoa_r+0x476>
 8018498:	e130      	b.n	80186fc <_dtoa_r+0x6d8>
 801849a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801849c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801849e:	930a      	str	r3, [sp, #40]	@ 0x28
 80184a0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80184a2:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	da00      	bge.n	80184aa <_dtoa_r+0x486>
 80184a8:	e177      	b.n	801879a <_dtoa_r+0x776>
 80184aa:	9a04      	ldr	r2, [sp, #16]
 80184ac:	2a0e      	cmp	r2, #14
 80184ae:	dd00      	ble.n	80184b2 <_dtoa_r+0x48e>
 80184b0:	e173      	b.n	801879a <_dtoa_r+0x776>
 80184b2:	4ba0      	ldr	r3, [pc, #640]	@ (8018734 <_dtoa_r+0x710>)
 80184b4:	00d2      	lsls	r2, r2, #3
 80184b6:	189b      	adds	r3, r3, r2
 80184b8:	685c      	ldr	r4, [r3, #4]
 80184ba:	681b      	ldr	r3, [r3, #0]
 80184bc:	9306      	str	r3, [sp, #24]
 80184be:	9407      	str	r4, [sp, #28]
 80184c0:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80184c2:	2b00      	cmp	r3, #0
 80184c4:	da03      	bge.n	80184ce <_dtoa_r+0x4aa>
 80184c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	dc00      	bgt.n	80184ce <_dtoa_r+0x4aa>
 80184cc:	e106      	b.n	80186dc <_dtoa_r+0x6b8>
 80184ce:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 80184d0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80184d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80184d4:	9d08      	ldr	r5, [sp, #32]
 80184d6:	3b01      	subs	r3, #1
 80184d8:	195b      	adds	r3, r3, r5
 80184da:	930a      	str	r3, [sp, #40]	@ 0x28
 80184dc:	9a06      	ldr	r2, [sp, #24]
 80184de:	9b07      	ldr	r3, [sp, #28]
 80184e0:	0030      	movs	r0, r6
 80184e2:	0039      	movs	r1, r7
 80184e4:	f7e9 fc2a 	bl	8001d3c <__aeabi_ddiv>
 80184e8:	f7ea fef2 	bl	80032d0 <__aeabi_d2iz>
 80184ec:	9009      	str	r0, [sp, #36]	@ 0x24
 80184ee:	f7ea ff2b 	bl	8003348 <__aeabi_i2d>
 80184f2:	9a06      	ldr	r2, [sp, #24]
 80184f4:	9b07      	ldr	r3, [sp, #28]
 80184f6:	f7ea f865 	bl	80025c4 <__aeabi_dmul>
 80184fa:	0002      	movs	r2, r0
 80184fc:	000b      	movs	r3, r1
 80184fe:	0030      	movs	r0, r6
 8018500:	0039      	movs	r1, r7
 8018502:	f7ea fb27 	bl	8002b54 <__aeabi_dsub>
 8018506:	002b      	movs	r3, r5
 8018508:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801850a:	3501      	adds	r5, #1
 801850c:	3230      	adds	r2, #48	@ 0x30
 801850e:	701a      	strb	r2, [r3, #0]
 8018510:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018512:	002c      	movs	r4, r5
 8018514:	429a      	cmp	r2, r3
 8018516:	d000      	beq.n	801851a <_dtoa_r+0x4f6>
 8018518:	e131      	b.n	801877e <_dtoa_r+0x75a>
 801851a:	0002      	movs	r2, r0
 801851c:	000b      	movs	r3, r1
 801851e:	f7e9 f8a9 	bl	8001674 <__aeabi_dadd>
 8018522:	9a06      	ldr	r2, [sp, #24]
 8018524:	9b07      	ldr	r3, [sp, #28]
 8018526:	0006      	movs	r6, r0
 8018528:	000f      	movs	r7, r1
 801852a:	f7e7 ffd1 	bl	80004d0 <__aeabi_dcmpgt>
 801852e:	2800      	cmp	r0, #0
 8018530:	d000      	beq.n	8018534 <_dtoa_r+0x510>
 8018532:	e10f      	b.n	8018754 <_dtoa_r+0x730>
 8018534:	9a06      	ldr	r2, [sp, #24]
 8018536:	9b07      	ldr	r3, [sp, #28]
 8018538:	0030      	movs	r0, r6
 801853a:	0039      	movs	r1, r7
 801853c:	f7e7 ffae 	bl	800049c <__aeabi_dcmpeq>
 8018540:	2800      	cmp	r0, #0
 8018542:	d003      	beq.n	801854c <_dtoa_r+0x528>
 8018544:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018546:	07dd      	lsls	r5, r3, #31
 8018548:	d500      	bpl.n	801854c <_dtoa_r+0x528>
 801854a:	e103      	b.n	8018754 <_dtoa_r+0x730>
 801854c:	9905      	ldr	r1, [sp, #20]
 801854e:	9803      	ldr	r0, [sp, #12]
 8018550:	f000 fca6 	bl	8018ea0 <_Bfree>
 8018554:	2300      	movs	r3, #0
 8018556:	7023      	strb	r3, [r4, #0]
 8018558:	9b04      	ldr	r3, [sp, #16]
 801855a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801855c:	3301      	adds	r3, #1
 801855e:	6013      	str	r3, [r2, #0]
 8018560:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018562:	2b00      	cmp	r3, #0
 8018564:	d100      	bne.n	8018568 <_dtoa_r+0x544>
 8018566:	e5a7      	b.n	80180b8 <_dtoa_r+0x94>
 8018568:	601c      	str	r4, [r3, #0]
 801856a:	e5a5      	b.n	80180b8 <_dtoa_r+0x94>
 801856c:	423d      	tst	r5, r7
 801856e:	d005      	beq.n	801857c <_dtoa_r+0x558>
 8018570:	6832      	ldr	r2, [r6, #0]
 8018572:	6873      	ldr	r3, [r6, #4]
 8018574:	f7ea f826 	bl	80025c4 <__aeabi_dmul>
 8018578:	003b      	movs	r3, r7
 801857a:	3401      	adds	r4, #1
 801857c:	106d      	asrs	r5, r5, #1
 801857e:	3608      	adds	r6, #8
 8018580:	e736      	b.n	80183f0 <_dtoa_r+0x3cc>
 8018582:	9b04      	ldr	r3, [sp, #16]
 8018584:	930c      	str	r3, [sp, #48]	@ 0x30
 8018586:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018588:	e75a      	b.n	8018440 <_dtoa_r+0x41c>
 801858a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801858c:	4b69      	ldr	r3, [pc, #420]	@ (8018734 <_dtoa_r+0x710>)
 801858e:	3a01      	subs	r2, #1
 8018590:	00d2      	lsls	r2, r2, #3
 8018592:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018594:	189b      	adds	r3, r3, r2
 8018596:	681a      	ldr	r2, [r3, #0]
 8018598:	685b      	ldr	r3, [r3, #4]
 801859a:	2900      	cmp	r1, #0
 801859c:	d04c      	beq.n	8018638 <_dtoa_r+0x614>
 801859e:	2000      	movs	r0, #0
 80185a0:	496b      	ldr	r1, [pc, #428]	@ (8018750 <_dtoa_r+0x72c>)
 80185a2:	f7e9 fbcb 	bl	8001d3c <__aeabi_ddiv>
 80185a6:	0032      	movs	r2, r6
 80185a8:	003b      	movs	r3, r7
 80185aa:	f7ea fad3 	bl	8002b54 <__aeabi_dsub>
 80185ae:	9a08      	ldr	r2, [sp, #32]
 80185b0:	0006      	movs	r6, r0
 80185b2:	4694      	mov	ip, r2
 80185b4:	000f      	movs	r7, r1
 80185b6:	9b08      	ldr	r3, [sp, #32]
 80185b8:	9316      	str	r3, [sp, #88]	@ 0x58
 80185ba:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80185bc:	4463      	add	r3, ip
 80185be:	9311      	str	r3, [sp, #68]	@ 0x44
 80185c0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80185c2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80185c4:	f7ea fe84 	bl	80032d0 <__aeabi_d2iz>
 80185c8:	0005      	movs	r5, r0
 80185ca:	f7ea febd 	bl	8003348 <__aeabi_i2d>
 80185ce:	0002      	movs	r2, r0
 80185d0:	000b      	movs	r3, r1
 80185d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80185d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80185d6:	f7ea fabd 	bl	8002b54 <__aeabi_dsub>
 80185da:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80185dc:	3530      	adds	r5, #48	@ 0x30
 80185de:	1c5c      	adds	r4, r3, #1
 80185e0:	701d      	strb	r5, [r3, #0]
 80185e2:	0032      	movs	r2, r6
 80185e4:	003b      	movs	r3, r7
 80185e6:	900a      	str	r0, [sp, #40]	@ 0x28
 80185e8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80185ea:	f7e7 ff5d 	bl	80004a8 <__aeabi_dcmplt>
 80185ee:	2800      	cmp	r0, #0
 80185f0:	d16a      	bne.n	80186c8 <_dtoa_r+0x6a4>
 80185f2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80185f4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80185f6:	2000      	movs	r0, #0
 80185f8:	4950      	ldr	r1, [pc, #320]	@ (801873c <_dtoa_r+0x718>)
 80185fa:	f7ea faab 	bl	8002b54 <__aeabi_dsub>
 80185fe:	0032      	movs	r2, r6
 8018600:	003b      	movs	r3, r7
 8018602:	f7e7 ff51 	bl	80004a8 <__aeabi_dcmplt>
 8018606:	2800      	cmp	r0, #0
 8018608:	d000      	beq.n	801860c <_dtoa_r+0x5e8>
 801860a:	e0a5      	b.n	8018758 <_dtoa_r+0x734>
 801860c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801860e:	42a3      	cmp	r3, r4
 8018610:	d100      	bne.n	8018614 <_dtoa_r+0x5f0>
 8018612:	e742      	b.n	801849a <_dtoa_r+0x476>
 8018614:	2200      	movs	r2, #0
 8018616:	0030      	movs	r0, r6
 8018618:	0039      	movs	r1, r7
 801861a:	4b49      	ldr	r3, [pc, #292]	@ (8018740 <_dtoa_r+0x71c>)
 801861c:	f7e9 ffd2 	bl	80025c4 <__aeabi_dmul>
 8018620:	2200      	movs	r2, #0
 8018622:	0006      	movs	r6, r0
 8018624:	000f      	movs	r7, r1
 8018626:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018628:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801862a:	4b45      	ldr	r3, [pc, #276]	@ (8018740 <_dtoa_r+0x71c>)
 801862c:	f7e9 ffca 	bl	80025c4 <__aeabi_dmul>
 8018630:	9416      	str	r4, [sp, #88]	@ 0x58
 8018632:	900a      	str	r0, [sp, #40]	@ 0x28
 8018634:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018636:	e7c3      	b.n	80185c0 <_dtoa_r+0x59c>
 8018638:	0030      	movs	r0, r6
 801863a:	0039      	movs	r1, r7
 801863c:	f7e9 ffc2 	bl	80025c4 <__aeabi_dmul>
 8018640:	9d08      	ldr	r5, [sp, #32]
 8018642:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018644:	002b      	movs	r3, r5
 8018646:	4694      	mov	ip, r2
 8018648:	9016      	str	r0, [sp, #88]	@ 0x58
 801864a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801864c:	4463      	add	r3, ip
 801864e:	9319      	str	r3, [sp, #100]	@ 0x64
 8018650:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018652:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018654:	f7ea fe3c 	bl	80032d0 <__aeabi_d2iz>
 8018658:	0004      	movs	r4, r0
 801865a:	f7ea fe75 	bl	8003348 <__aeabi_i2d>
 801865e:	000b      	movs	r3, r1
 8018660:	0002      	movs	r2, r0
 8018662:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018666:	f7ea fa75 	bl	8002b54 <__aeabi_dsub>
 801866a:	3430      	adds	r4, #48	@ 0x30
 801866c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801866e:	702c      	strb	r4, [r5, #0]
 8018670:	3501      	adds	r5, #1
 8018672:	0006      	movs	r6, r0
 8018674:	000f      	movs	r7, r1
 8018676:	42ab      	cmp	r3, r5
 8018678:	d129      	bne.n	80186ce <_dtoa_r+0x6aa>
 801867a:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801867c:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801867e:	9b08      	ldr	r3, [sp, #32]
 8018680:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8018682:	469c      	mov	ip, r3
 8018684:	2200      	movs	r2, #0
 8018686:	4b32      	ldr	r3, [pc, #200]	@ (8018750 <_dtoa_r+0x72c>)
 8018688:	4464      	add	r4, ip
 801868a:	f7e8 fff3 	bl	8001674 <__aeabi_dadd>
 801868e:	0002      	movs	r2, r0
 8018690:	000b      	movs	r3, r1
 8018692:	0030      	movs	r0, r6
 8018694:	0039      	movs	r1, r7
 8018696:	f7e7 ff1b 	bl	80004d0 <__aeabi_dcmpgt>
 801869a:	2800      	cmp	r0, #0
 801869c:	d15c      	bne.n	8018758 <_dtoa_r+0x734>
 801869e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80186a0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80186a2:	2000      	movs	r0, #0
 80186a4:	492a      	ldr	r1, [pc, #168]	@ (8018750 <_dtoa_r+0x72c>)
 80186a6:	f7ea fa55 	bl	8002b54 <__aeabi_dsub>
 80186aa:	0002      	movs	r2, r0
 80186ac:	000b      	movs	r3, r1
 80186ae:	0030      	movs	r0, r6
 80186b0:	0039      	movs	r1, r7
 80186b2:	f7e7 fef9 	bl	80004a8 <__aeabi_dcmplt>
 80186b6:	2800      	cmp	r0, #0
 80186b8:	d100      	bne.n	80186bc <_dtoa_r+0x698>
 80186ba:	e6ee      	b.n	801849a <_dtoa_r+0x476>
 80186bc:	0023      	movs	r3, r4
 80186be:	3c01      	subs	r4, #1
 80186c0:	7822      	ldrb	r2, [r4, #0]
 80186c2:	2a30      	cmp	r2, #48	@ 0x30
 80186c4:	d0fa      	beq.n	80186bc <_dtoa_r+0x698>
 80186c6:	001c      	movs	r4, r3
 80186c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80186ca:	9304      	str	r3, [sp, #16]
 80186cc:	e73e      	b.n	801854c <_dtoa_r+0x528>
 80186ce:	2200      	movs	r2, #0
 80186d0:	4b1b      	ldr	r3, [pc, #108]	@ (8018740 <_dtoa_r+0x71c>)
 80186d2:	f7e9 ff77 	bl	80025c4 <__aeabi_dmul>
 80186d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80186d8:	910b      	str	r1, [sp, #44]	@ 0x2c
 80186da:	e7b9      	b.n	8018650 <_dtoa_r+0x62c>
 80186dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80186de:	2b00      	cmp	r3, #0
 80186e0:	d10c      	bne.n	80186fc <_dtoa_r+0x6d8>
 80186e2:	9806      	ldr	r0, [sp, #24]
 80186e4:	9907      	ldr	r1, [sp, #28]
 80186e6:	2200      	movs	r2, #0
 80186e8:	4b18      	ldr	r3, [pc, #96]	@ (801874c <_dtoa_r+0x728>)
 80186ea:	f7e9 ff6b 	bl	80025c4 <__aeabi_dmul>
 80186ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80186f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80186f2:	f7e7 fef7 	bl	80004e4 <__aeabi_dcmpge>
 80186f6:	2800      	cmp	r0, #0
 80186f8:	d100      	bne.n	80186fc <_dtoa_r+0x6d8>
 80186fa:	e164      	b.n	80189c6 <_dtoa_r+0x9a2>
 80186fc:	2600      	movs	r6, #0
 80186fe:	0037      	movs	r7, r6
 8018700:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018702:	9c08      	ldr	r4, [sp, #32]
 8018704:	43db      	mvns	r3, r3
 8018706:	930c      	str	r3, [sp, #48]	@ 0x30
 8018708:	2300      	movs	r3, #0
 801870a:	9304      	str	r3, [sp, #16]
 801870c:	0031      	movs	r1, r6
 801870e:	9803      	ldr	r0, [sp, #12]
 8018710:	f000 fbc6 	bl	8018ea0 <_Bfree>
 8018714:	2f00      	cmp	r7, #0
 8018716:	d0d7      	beq.n	80186c8 <_dtoa_r+0x6a4>
 8018718:	9b04      	ldr	r3, [sp, #16]
 801871a:	2b00      	cmp	r3, #0
 801871c:	d005      	beq.n	801872a <_dtoa_r+0x706>
 801871e:	42bb      	cmp	r3, r7
 8018720:	d003      	beq.n	801872a <_dtoa_r+0x706>
 8018722:	0019      	movs	r1, r3
 8018724:	9803      	ldr	r0, [sp, #12]
 8018726:	f000 fbbb 	bl	8018ea0 <_Bfree>
 801872a:	0039      	movs	r1, r7
 801872c:	9803      	ldr	r0, [sp, #12]
 801872e:	f000 fbb7 	bl	8018ea0 <_Bfree>
 8018732:	e7c9      	b.n	80186c8 <_dtoa_r+0x6a4>
 8018734:	0802d568 	.word	0x0802d568
 8018738:	0802d540 	.word	0x0802d540
 801873c:	3ff00000 	.word	0x3ff00000
 8018740:	40240000 	.word	0x40240000
 8018744:	401c0000 	.word	0x401c0000
 8018748:	fcc00000 	.word	0xfcc00000
 801874c:	40140000 	.word	0x40140000
 8018750:	3fe00000 	.word	0x3fe00000
 8018754:	9b04      	ldr	r3, [sp, #16]
 8018756:	930c      	str	r3, [sp, #48]	@ 0x30
 8018758:	0023      	movs	r3, r4
 801875a:	001c      	movs	r4, r3
 801875c:	3b01      	subs	r3, #1
 801875e:	781a      	ldrb	r2, [r3, #0]
 8018760:	2a39      	cmp	r2, #57	@ 0x39
 8018762:	d108      	bne.n	8018776 <_dtoa_r+0x752>
 8018764:	9a08      	ldr	r2, [sp, #32]
 8018766:	429a      	cmp	r2, r3
 8018768:	d1f7      	bne.n	801875a <_dtoa_r+0x736>
 801876a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801876c:	9908      	ldr	r1, [sp, #32]
 801876e:	3201      	adds	r2, #1
 8018770:	920c      	str	r2, [sp, #48]	@ 0x30
 8018772:	2230      	movs	r2, #48	@ 0x30
 8018774:	700a      	strb	r2, [r1, #0]
 8018776:	781a      	ldrb	r2, [r3, #0]
 8018778:	3201      	adds	r2, #1
 801877a:	701a      	strb	r2, [r3, #0]
 801877c:	e7a4      	b.n	80186c8 <_dtoa_r+0x6a4>
 801877e:	2200      	movs	r2, #0
 8018780:	4bc6      	ldr	r3, [pc, #792]	@ (8018a9c <_dtoa_r+0xa78>)
 8018782:	f7e9 ff1f 	bl	80025c4 <__aeabi_dmul>
 8018786:	2200      	movs	r2, #0
 8018788:	2300      	movs	r3, #0
 801878a:	0006      	movs	r6, r0
 801878c:	000f      	movs	r7, r1
 801878e:	f7e7 fe85 	bl	800049c <__aeabi_dcmpeq>
 8018792:	2800      	cmp	r0, #0
 8018794:	d100      	bne.n	8018798 <_dtoa_r+0x774>
 8018796:	e6a1      	b.n	80184dc <_dtoa_r+0x4b8>
 8018798:	e6d8      	b.n	801854c <_dtoa_r+0x528>
 801879a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801879c:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801879e:	9c06      	ldr	r4, [sp, #24]
 80187a0:	2f00      	cmp	r7, #0
 80187a2:	d014      	beq.n	80187ce <_dtoa_r+0x7aa>
 80187a4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80187a6:	2a01      	cmp	r2, #1
 80187a8:	dd00      	ble.n	80187ac <_dtoa_r+0x788>
 80187aa:	e0c8      	b.n	801893e <_dtoa_r+0x91a>
 80187ac:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80187ae:	2a00      	cmp	r2, #0
 80187b0:	d100      	bne.n	80187b4 <_dtoa_r+0x790>
 80187b2:	e0be      	b.n	8018932 <_dtoa_r+0x90e>
 80187b4:	4aba      	ldr	r2, [pc, #744]	@ (8018aa0 <_dtoa_r+0xa7c>)
 80187b6:	189b      	adds	r3, r3, r2
 80187b8:	9a06      	ldr	r2, [sp, #24]
 80187ba:	2101      	movs	r1, #1
 80187bc:	18d2      	adds	r2, r2, r3
 80187be:	9206      	str	r2, [sp, #24]
 80187c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80187c2:	9803      	ldr	r0, [sp, #12]
 80187c4:	18d3      	adds	r3, r2, r3
 80187c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80187c8:	f000 fc22 	bl	8019010 <__i2b>
 80187cc:	0007      	movs	r7, r0
 80187ce:	2c00      	cmp	r4, #0
 80187d0:	d00e      	beq.n	80187f0 <_dtoa_r+0x7cc>
 80187d2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80187d4:	2b00      	cmp	r3, #0
 80187d6:	dd0b      	ble.n	80187f0 <_dtoa_r+0x7cc>
 80187d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80187da:	0023      	movs	r3, r4
 80187dc:	4294      	cmp	r4, r2
 80187de:	dd00      	ble.n	80187e2 <_dtoa_r+0x7be>
 80187e0:	0013      	movs	r3, r2
 80187e2:	9a06      	ldr	r2, [sp, #24]
 80187e4:	1ae4      	subs	r4, r4, r3
 80187e6:	1ad2      	subs	r2, r2, r3
 80187e8:	9206      	str	r2, [sp, #24]
 80187ea:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80187ec:	1ad3      	subs	r3, r2, r3
 80187ee:	930d      	str	r3, [sp, #52]	@ 0x34
 80187f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80187f2:	2b00      	cmp	r3, #0
 80187f4:	d01f      	beq.n	8018836 <_dtoa_r+0x812>
 80187f6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80187f8:	2b00      	cmp	r3, #0
 80187fa:	d100      	bne.n	80187fe <_dtoa_r+0x7da>
 80187fc:	e0b5      	b.n	801896a <_dtoa_r+0x946>
 80187fe:	2d00      	cmp	r5, #0
 8018800:	d010      	beq.n	8018824 <_dtoa_r+0x800>
 8018802:	0039      	movs	r1, r7
 8018804:	002a      	movs	r2, r5
 8018806:	9803      	ldr	r0, [sp, #12]
 8018808:	f000 fccc 	bl	80191a4 <__pow5mult>
 801880c:	9a05      	ldr	r2, [sp, #20]
 801880e:	0001      	movs	r1, r0
 8018810:	0007      	movs	r7, r0
 8018812:	9803      	ldr	r0, [sp, #12]
 8018814:	f000 fc14 	bl	8019040 <__multiply>
 8018818:	0006      	movs	r6, r0
 801881a:	9905      	ldr	r1, [sp, #20]
 801881c:	9803      	ldr	r0, [sp, #12]
 801881e:	f000 fb3f 	bl	8018ea0 <_Bfree>
 8018822:	9605      	str	r6, [sp, #20]
 8018824:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018826:	1b5a      	subs	r2, r3, r5
 8018828:	42ab      	cmp	r3, r5
 801882a:	d004      	beq.n	8018836 <_dtoa_r+0x812>
 801882c:	9905      	ldr	r1, [sp, #20]
 801882e:	9803      	ldr	r0, [sp, #12]
 8018830:	f000 fcb8 	bl	80191a4 <__pow5mult>
 8018834:	9005      	str	r0, [sp, #20]
 8018836:	2101      	movs	r1, #1
 8018838:	9803      	ldr	r0, [sp, #12]
 801883a:	f000 fbe9 	bl	8019010 <__i2b>
 801883e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018840:	0006      	movs	r6, r0
 8018842:	2b00      	cmp	r3, #0
 8018844:	d100      	bne.n	8018848 <_dtoa_r+0x824>
 8018846:	e1bc      	b.n	8018bc2 <_dtoa_r+0xb9e>
 8018848:	001a      	movs	r2, r3
 801884a:	0001      	movs	r1, r0
 801884c:	9803      	ldr	r0, [sp, #12]
 801884e:	f000 fca9 	bl	80191a4 <__pow5mult>
 8018852:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018854:	0006      	movs	r6, r0
 8018856:	2500      	movs	r5, #0
 8018858:	2b01      	cmp	r3, #1
 801885a:	dc16      	bgt.n	801888a <_dtoa_r+0x866>
 801885c:	2500      	movs	r5, #0
 801885e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018860:	42ab      	cmp	r3, r5
 8018862:	d10e      	bne.n	8018882 <_dtoa_r+0x85e>
 8018864:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018866:	031b      	lsls	r3, r3, #12
 8018868:	42ab      	cmp	r3, r5
 801886a:	d10a      	bne.n	8018882 <_dtoa_r+0x85e>
 801886c:	4b8d      	ldr	r3, [pc, #564]	@ (8018aa4 <_dtoa_r+0xa80>)
 801886e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018870:	4213      	tst	r3, r2
 8018872:	d006      	beq.n	8018882 <_dtoa_r+0x85e>
 8018874:	9b06      	ldr	r3, [sp, #24]
 8018876:	3501      	adds	r5, #1
 8018878:	3301      	adds	r3, #1
 801887a:	9306      	str	r3, [sp, #24]
 801887c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801887e:	3301      	adds	r3, #1
 8018880:	930d      	str	r3, [sp, #52]	@ 0x34
 8018882:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8018884:	2001      	movs	r0, #1
 8018886:	2b00      	cmp	r3, #0
 8018888:	d008      	beq.n	801889c <_dtoa_r+0x878>
 801888a:	6933      	ldr	r3, [r6, #16]
 801888c:	3303      	adds	r3, #3
 801888e:	009b      	lsls	r3, r3, #2
 8018890:	18f3      	adds	r3, r6, r3
 8018892:	6858      	ldr	r0, [r3, #4]
 8018894:	f000 fb6c 	bl	8018f70 <__hi0bits>
 8018898:	2320      	movs	r3, #32
 801889a:	1a18      	subs	r0, r3, r0
 801889c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801889e:	1818      	adds	r0, r3, r0
 80188a0:	0002      	movs	r2, r0
 80188a2:	231f      	movs	r3, #31
 80188a4:	401a      	ands	r2, r3
 80188a6:	4218      	tst	r0, r3
 80188a8:	d065      	beq.n	8018976 <_dtoa_r+0x952>
 80188aa:	3301      	adds	r3, #1
 80188ac:	1a9b      	subs	r3, r3, r2
 80188ae:	2b04      	cmp	r3, #4
 80188b0:	dd5d      	ble.n	801896e <_dtoa_r+0x94a>
 80188b2:	231c      	movs	r3, #28
 80188b4:	1a9b      	subs	r3, r3, r2
 80188b6:	9a06      	ldr	r2, [sp, #24]
 80188b8:	18e4      	adds	r4, r4, r3
 80188ba:	18d2      	adds	r2, r2, r3
 80188bc:	9206      	str	r2, [sp, #24]
 80188be:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80188c0:	18d3      	adds	r3, r2, r3
 80188c2:	930d      	str	r3, [sp, #52]	@ 0x34
 80188c4:	9b06      	ldr	r3, [sp, #24]
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	dd05      	ble.n	80188d6 <_dtoa_r+0x8b2>
 80188ca:	001a      	movs	r2, r3
 80188cc:	9905      	ldr	r1, [sp, #20]
 80188ce:	9803      	ldr	r0, [sp, #12]
 80188d0:	f000 fcc4 	bl	801925c <__lshift>
 80188d4:	9005      	str	r0, [sp, #20]
 80188d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80188d8:	2b00      	cmp	r3, #0
 80188da:	dd05      	ble.n	80188e8 <_dtoa_r+0x8c4>
 80188dc:	0031      	movs	r1, r6
 80188de:	001a      	movs	r2, r3
 80188e0:	9803      	ldr	r0, [sp, #12]
 80188e2:	f000 fcbb 	bl	801925c <__lshift>
 80188e6:	0006      	movs	r6, r0
 80188e8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80188ea:	2b00      	cmp	r3, #0
 80188ec:	d045      	beq.n	801897a <_dtoa_r+0x956>
 80188ee:	0031      	movs	r1, r6
 80188f0:	9805      	ldr	r0, [sp, #20]
 80188f2:	f000 fd1f 	bl	8019334 <__mcmp>
 80188f6:	2800      	cmp	r0, #0
 80188f8:	da3f      	bge.n	801897a <_dtoa_r+0x956>
 80188fa:	9b04      	ldr	r3, [sp, #16]
 80188fc:	220a      	movs	r2, #10
 80188fe:	3b01      	subs	r3, #1
 8018900:	930c      	str	r3, [sp, #48]	@ 0x30
 8018902:	9905      	ldr	r1, [sp, #20]
 8018904:	2300      	movs	r3, #0
 8018906:	9803      	ldr	r0, [sp, #12]
 8018908:	f000 faee 	bl	8018ee8 <__multadd>
 801890c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801890e:	9005      	str	r0, [sp, #20]
 8018910:	2b00      	cmp	r3, #0
 8018912:	d100      	bne.n	8018916 <_dtoa_r+0x8f2>
 8018914:	e15c      	b.n	8018bd0 <_dtoa_r+0xbac>
 8018916:	2300      	movs	r3, #0
 8018918:	0039      	movs	r1, r7
 801891a:	220a      	movs	r2, #10
 801891c:	9803      	ldr	r0, [sp, #12]
 801891e:	f000 fae3 	bl	8018ee8 <__multadd>
 8018922:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018924:	0007      	movs	r7, r0
 8018926:	2b00      	cmp	r3, #0
 8018928:	dc55      	bgt.n	80189d6 <_dtoa_r+0x9b2>
 801892a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801892c:	2b02      	cmp	r3, #2
 801892e:	dc2d      	bgt.n	801898c <_dtoa_r+0x968>
 8018930:	e051      	b.n	80189d6 <_dtoa_r+0x9b2>
 8018932:	2336      	movs	r3, #54	@ 0x36
 8018934:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8018936:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8018938:	9c06      	ldr	r4, [sp, #24]
 801893a:	1a9b      	subs	r3, r3, r2
 801893c:	e73c      	b.n	80187b8 <_dtoa_r+0x794>
 801893e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018940:	1e5d      	subs	r5, r3, #1
 8018942:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018944:	42ab      	cmp	r3, r5
 8018946:	db08      	blt.n	801895a <_dtoa_r+0x936>
 8018948:	1b5d      	subs	r5, r3, r5
 801894a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801894c:	9c06      	ldr	r4, [sp, #24]
 801894e:	2b00      	cmp	r3, #0
 8018950:	db00      	blt.n	8018954 <_dtoa_r+0x930>
 8018952:	e731      	b.n	80187b8 <_dtoa_r+0x794>
 8018954:	1ae4      	subs	r4, r4, r3
 8018956:	2300      	movs	r3, #0
 8018958:	e72e      	b.n	80187b8 <_dtoa_r+0x794>
 801895a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801895c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801895e:	1aeb      	subs	r3, r5, r3
 8018960:	18d3      	adds	r3, r2, r3
 8018962:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018964:	9314      	str	r3, [sp, #80]	@ 0x50
 8018966:	2500      	movs	r5, #0
 8018968:	e7ef      	b.n	801894a <_dtoa_r+0x926>
 801896a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801896c:	e75e      	b.n	801882c <_dtoa_r+0x808>
 801896e:	2b04      	cmp	r3, #4
 8018970:	d0a8      	beq.n	80188c4 <_dtoa_r+0x8a0>
 8018972:	331c      	adds	r3, #28
 8018974:	e79f      	b.n	80188b6 <_dtoa_r+0x892>
 8018976:	0013      	movs	r3, r2
 8018978:	e7fb      	b.n	8018972 <_dtoa_r+0x94e>
 801897a:	9b04      	ldr	r3, [sp, #16]
 801897c:	930c      	str	r3, [sp, #48]	@ 0x30
 801897e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018980:	930e      	str	r3, [sp, #56]	@ 0x38
 8018982:	2b00      	cmp	r3, #0
 8018984:	dc23      	bgt.n	80189ce <_dtoa_r+0x9aa>
 8018986:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018988:	2b02      	cmp	r3, #2
 801898a:	dd20      	ble.n	80189ce <_dtoa_r+0x9aa>
 801898c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801898e:	2b00      	cmp	r3, #0
 8018990:	d000      	beq.n	8018994 <_dtoa_r+0x970>
 8018992:	e6b5      	b.n	8018700 <_dtoa_r+0x6dc>
 8018994:	0031      	movs	r1, r6
 8018996:	2205      	movs	r2, #5
 8018998:	9803      	ldr	r0, [sp, #12]
 801899a:	f000 faa5 	bl	8018ee8 <__multadd>
 801899e:	0006      	movs	r6, r0
 80189a0:	0001      	movs	r1, r0
 80189a2:	9805      	ldr	r0, [sp, #20]
 80189a4:	f000 fcc6 	bl	8019334 <__mcmp>
 80189a8:	2800      	cmp	r0, #0
 80189aa:	dc00      	bgt.n	80189ae <_dtoa_r+0x98a>
 80189ac:	e6a8      	b.n	8018700 <_dtoa_r+0x6dc>
 80189ae:	9b08      	ldr	r3, [sp, #32]
 80189b0:	9a08      	ldr	r2, [sp, #32]
 80189b2:	1c5c      	adds	r4, r3, #1
 80189b4:	2331      	movs	r3, #49	@ 0x31
 80189b6:	7013      	strb	r3, [r2, #0]
 80189b8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80189ba:	3301      	adds	r3, #1
 80189bc:	930c      	str	r3, [sp, #48]	@ 0x30
 80189be:	e6a3      	b.n	8018708 <_dtoa_r+0x6e4>
 80189c0:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 80189c2:	0037      	movs	r7, r6
 80189c4:	e7f3      	b.n	80189ae <_dtoa_r+0x98a>
 80189c6:	9b04      	ldr	r3, [sp, #16]
 80189c8:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 80189ca:	930c      	str	r3, [sp, #48]	@ 0x30
 80189cc:	e7f9      	b.n	80189c2 <_dtoa_r+0x99e>
 80189ce:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d100      	bne.n	80189d6 <_dtoa_r+0x9b2>
 80189d4:	e100      	b.n	8018bd8 <_dtoa_r+0xbb4>
 80189d6:	2c00      	cmp	r4, #0
 80189d8:	dd05      	ble.n	80189e6 <_dtoa_r+0x9c2>
 80189da:	0039      	movs	r1, r7
 80189dc:	0022      	movs	r2, r4
 80189de:	9803      	ldr	r0, [sp, #12]
 80189e0:	f000 fc3c 	bl	801925c <__lshift>
 80189e4:	0007      	movs	r7, r0
 80189e6:	0038      	movs	r0, r7
 80189e8:	2d00      	cmp	r5, #0
 80189ea:	d018      	beq.n	8018a1e <_dtoa_r+0x9fa>
 80189ec:	6879      	ldr	r1, [r7, #4]
 80189ee:	9803      	ldr	r0, [sp, #12]
 80189f0:	f000 fa12 	bl	8018e18 <_Balloc>
 80189f4:	1e04      	subs	r4, r0, #0
 80189f6:	d105      	bne.n	8018a04 <_dtoa_r+0x9e0>
 80189f8:	0022      	movs	r2, r4
 80189fa:	4b2b      	ldr	r3, [pc, #172]	@ (8018aa8 <_dtoa_r+0xa84>)
 80189fc:	482b      	ldr	r0, [pc, #172]	@ (8018aac <_dtoa_r+0xa88>)
 80189fe:	492c      	ldr	r1, [pc, #176]	@ (8018ab0 <_dtoa_r+0xa8c>)
 8018a00:	f7ff fb25 	bl	801804e <_dtoa_r+0x2a>
 8018a04:	0039      	movs	r1, r7
 8018a06:	693a      	ldr	r2, [r7, #16]
 8018a08:	310c      	adds	r1, #12
 8018a0a:	3202      	adds	r2, #2
 8018a0c:	0092      	lsls	r2, r2, #2
 8018a0e:	300c      	adds	r0, #12
 8018a10:	f7ff fa70 	bl	8017ef4 <memcpy>
 8018a14:	2201      	movs	r2, #1
 8018a16:	0021      	movs	r1, r4
 8018a18:	9803      	ldr	r0, [sp, #12]
 8018a1a:	f000 fc1f 	bl	801925c <__lshift>
 8018a1e:	9b08      	ldr	r3, [sp, #32]
 8018a20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018a22:	9306      	str	r3, [sp, #24]
 8018a24:	3b01      	subs	r3, #1
 8018a26:	189b      	adds	r3, r3, r2
 8018a28:	2201      	movs	r2, #1
 8018a2a:	9704      	str	r7, [sp, #16]
 8018a2c:	0007      	movs	r7, r0
 8018a2e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018a32:	4013      	ands	r3, r2
 8018a34:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a36:	0031      	movs	r1, r6
 8018a38:	9805      	ldr	r0, [sp, #20]
 8018a3a:	f7ff fa64 	bl	8017f06 <quorem>
 8018a3e:	9904      	ldr	r1, [sp, #16]
 8018a40:	0005      	movs	r5, r0
 8018a42:	900a      	str	r0, [sp, #40]	@ 0x28
 8018a44:	9805      	ldr	r0, [sp, #20]
 8018a46:	f000 fc75 	bl	8019334 <__mcmp>
 8018a4a:	003a      	movs	r2, r7
 8018a4c:	900d      	str	r0, [sp, #52]	@ 0x34
 8018a4e:	0031      	movs	r1, r6
 8018a50:	9803      	ldr	r0, [sp, #12]
 8018a52:	f000 fc8b 	bl	801936c <__mdiff>
 8018a56:	2201      	movs	r2, #1
 8018a58:	68c3      	ldr	r3, [r0, #12]
 8018a5a:	0004      	movs	r4, r0
 8018a5c:	3530      	adds	r5, #48	@ 0x30
 8018a5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8018a60:	2b00      	cmp	r3, #0
 8018a62:	d104      	bne.n	8018a6e <_dtoa_r+0xa4a>
 8018a64:	0001      	movs	r1, r0
 8018a66:	9805      	ldr	r0, [sp, #20]
 8018a68:	f000 fc64 	bl	8019334 <__mcmp>
 8018a6c:	9009      	str	r0, [sp, #36]	@ 0x24
 8018a6e:	0021      	movs	r1, r4
 8018a70:	9803      	ldr	r0, [sp, #12]
 8018a72:	f000 fa15 	bl	8018ea0 <_Bfree>
 8018a76:	9b06      	ldr	r3, [sp, #24]
 8018a78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018a7a:	1c5c      	adds	r4, r3, #1
 8018a7c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018a7e:	4313      	orrs	r3, r2
 8018a80:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018a82:	4313      	orrs	r3, r2
 8018a84:	d116      	bne.n	8018ab4 <_dtoa_r+0xa90>
 8018a86:	2d39      	cmp	r5, #57	@ 0x39
 8018a88:	d02f      	beq.n	8018aea <_dtoa_r+0xac6>
 8018a8a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	dd01      	ble.n	8018a94 <_dtoa_r+0xa70>
 8018a90:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018a92:	3531      	adds	r5, #49	@ 0x31
 8018a94:	9b06      	ldr	r3, [sp, #24]
 8018a96:	701d      	strb	r5, [r3, #0]
 8018a98:	e638      	b.n	801870c <_dtoa_r+0x6e8>
 8018a9a:	46c0      	nop			@ (mov r8, r8)
 8018a9c:	40240000 	.word	0x40240000
 8018aa0:	00000433 	.word	0x00000433
 8018aa4:	7ff00000 	.word	0x7ff00000
 8018aa8:	0802d4c8 	.word	0x0802d4c8
 8018aac:	0802d470 	.word	0x0802d470
 8018ab0:	000002ef 	.word	0x000002ef
 8018ab4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018ab6:	2b00      	cmp	r3, #0
 8018ab8:	db04      	blt.n	8018ac4 <_dtoa_r+0xaa0>
 8018aba:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8018abc:	4313      	orrs	r3, r2
 8018abe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8018ac0:	4313      	orrs	r3, r2
 8018ac2:	d11e      	bne.n	8018b02 <_dtoa_r+0xade>
 8018ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	dde4      	ble.n	8018a94 <_dtoa_r+0xa70>
 8018aca:	9905      	ldr	r1, [sp, #20]
 8018acc:	2201      	movs	r2, #1
 8018ace:	9803      	ldr	r0, [sp, #12]
 8018ad0:	f000 fbc4 	bl	801925c <__lshift>
 8018ad4:	0031      	movs	r1, r6
 8018ad6:	9005      	str	r0, [sp, #20]
 8018ad8:	f000 fc2c 	bl	8019334 <__mcmp>
 8018adc:	2800      	cmp	r0, #0
 8018ade:	dc02      	bgt.n	8018ae6 <_dtoa_r+0xac2>
 8018ae0:	d1d8      	bne.n	8018a94 <_dtoa_r+0xa70>
 8018ae2:	07eb      	lsls	r3, r5, #31
 8018ae4:	d5d6      	bpl.n	8018a94 <_dtoa_r+0xa70>
 8018ae6:	2d39      	cmp	r5, #57	@ 0x39
 8018ae8:	d1d2      	bne.n	8018a90 <_dtoa_r+0xa6c>
 8018aea:	2339      	movs	r3, #57	@ 0x39
 8018aec:	9a06      	ldr	r2, [sp, #24]
 8018aee:	7013      	strb	r3, [r2, #0]
 8018af0:	0023      	movs	r3, r4
 8018af2:	001c      	movs	r4, r3
 8018af4:	3b01      	subs	r3, #1
 8018af6:	781a      	ldrb	r2, [r3, #0]
 8018af8:	2a39      	cmp	r2, #57	@ 0x39
 8018afa:	d04f      	beq.n	8018b9c <_dtoa_r+0xb78>
 8018afc:	3201      	adds	r2, #1
 8018afe:	701a      	strb	r2, [r3, #0]
 8018b00:	e604      	b.n	801870c <_dtoa_r+0x6e8>
 8018b02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018b04:	2b00      	cmp	r3, #0
 8018b06:	dd03      	ble.n	8018b10 <_dtoa_r+0xaec>
 8018b08:	2d39      	cmp	r5, #57	@ 0x39
 8018b0a:	d0ee      	beq.n	8018aea <_dtoa_r+0xac6>
 8018b0c:	3501      	adds	r5, #1
 8018b0e:	e7c1      	b.n	8018a94 <_dtoa_r+0xa70>
 8018b10:	9b06      	ldr	r3, [sp, #24]
 8018b12:	9a06      	ldr	r2, [sp, #24]
 8018b14:	701d      	strb	r5, [r3, #0]
 8018b16:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018b18:	4293      	cmp	r3, r2
 8018b1a:	d02a      	beq.n	8018b72 <_dtoa_r+0xb4e>
 8018b1c:	2300      	movs	r3, #0
 8018b1e:	220a      	movs	r2, #10
 8018b20:	9905      	ldr	r1, [sp, #20]
 8018b22:	9803      	ldr	r0, [sp, #12]
 8018b24:	f000 f9e0 	bl	8018ee8 <__multadd>
 8018b28:	9b04      	ldr	r3, [sp, #16]
 8018b2a:	9005      	str	r0, [sp, #20]
 8018b2c:	42bb      	cmp	r3, r7
 8018b2e:	d109      	bne.n	8018b44 <_dtoa_r+0xb20>
 8018b30:	2300      	movs	r3, #0
 8018b32:	220a      	movs	r2, #10
 8018b34:	9904      	ldr	r1, [sp, #16]
 8018b36:	9803      	ldr	r0, [sp, #12]
 8018b38:	f000 f9d6 	bl	8018ee8 <__multadd>
 8018b3c:	9004      	str	r0, [sp, #16]
 8018b3e:	0007      	movs	r7, r0
 8018b40:	9406      	str	r4, [sp, #24]
 8018b42:	e778      	b.n	8018a36 <_dtoa_r+0xa12>
 8018b44:	9904      	ldr	r1, [sp, #16]
 8018b46:	2300      	movs	r3, #0
 8018b48:	220a      	movs	r2, #10
 8018b4a:	9803      	ldr	r0, [sp, #12]
 8018b4c:	f000 f9cc 	bl	8018ee8 <__multadd>
 8018b50:	2300      	movs	r3, #0
 8018b52:	9004      	str	r0, [sp, #16]
 8018b54:	220a      	movs	r2, #10
 8018b56:	0039      	movs	r1, r7
 8018b58:	9803      	ldr	r0, [sp, #12]
 8018b5a:	f000 f9c5 	bl	8018ee8 <__multadd>
 8018b5e:	e7ee      	b.n	8018b3e <_dtoa_r+0xb1a>
 8018b60:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018b62:	2401      	movs	r4, #1
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	dd00      	ble.n	8018b6a <_dtoa_r+0xb46>
 8018b68:	001c      	movs	r4, r3
 8018b6a:	9b08      	ldr	r3, [sp, #32]
 8018b6c:	191c      	adds	r4, r3, r4
 8018b6e:	2300      	movs	r3, #0
 8018b70:	9304      	str	r3, [sp, #16]
 8018b72:	9905      	ldr	r1, [sp, #20]
 8018b74:	2201      	movs	r2, #1
 8018b76:	9803      	ldr	r0, [sp, #12]
 8018b78:	f000 fb70 	bl	801925c <__lshift>
 8018b7c:	0031      	movs	r1, r6
 8018b7e:	9005      	str	r0, [sp, #20]
 8018b80:	f000 fbd8 	bl	8019334 <__mcmp>
 8018b84:	2800      	cmp	r0, #0
 8018b86:	dcb3      	bgt.n	8018af0 <_dtoa_r+0xacc>
 8018b88:	d101      	bne.n	8018b8e <_dtoa_r+0xb6a>
 8018b8a:	07ed      	lsls	r5, r5, #31
 8018b8c:	d4b0      	bmi.n	8018af0 <_dtoa_r+0xacc>
 8018b8e:	0023      	movs	r3, r4
 8018b90:	001c      	movs	r4, r3
 8018b92:	3b01      	subs	r3, #1
 8018b94:	781a      	ldrb	r2, [r3, #0]
 8018b96:	2a30      	cmp	r2, #48	@ 0x30
 8018b98:	d0fa      	beq.n	8018b90 <_dtoa_r+0xb6c>
 8018b9a:	e5b7      	b.n	801870c <_dtoa_r+0x6e8>
 8018b9c:	9a08      	ldr	r2, [sp, #32]
 8018b9e:	429a      	cmp	r2, r3
 8018ba0:	d1a7      	bne.n	8018af2 <_dtoa_r+0xace>
 8018ba2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018ba4:	3301      	adds	r3, #1
 8018ba6:	930c      	str	r3, [sp, #48]	@ 0x30
 8018ba8:	2331      	movs	r3, #49	@ 0x31
 8018baa:	7013      	strb	r3, [r2, #0]
 8018bac:	e5ae      	b.n	801870c <_dtoa_r+0x6e8>
 8018bae:	4b15      	ldr	r3, [pc, #84]	@ (8018c04 <_dtoa_r+0xbe0>)
 8018bb0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8018bb2:	9308      	str	r3, [sp, #32]
 8018bb4:	4b14      	ldr	r3, [pc, #80]	@ (8018c08 <_dtoa_r+0xbe4>)
 8018bb6:	2a00      	cmp	r2, #0
 8018bb8:	d001      	beq.n	8018bbe <_dtoa_r+0xb9a>
 8018bba:	f7ff fa7b 	bl	80180b4 <_dtoa_r+0x90>
 8018bbe:	f7ff fa7b 	bl	80180b8 <_dtoa_r+0x94>
 8018bc2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8018bc4:	2b01      	cmp	r3, #1
 8018bc6:	dc00      	bgt.n	8018bca <_dtoa_r+0xba6>
 8018bc8:	e648      	b.n	801885c <_dtoa_r+0x838>
 8018bca:	2001      	movs	r0, #1
 8018bcc:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 8018bce:	e665      	b.n	801889c <_dtoa_r+0x878>
 8018bd0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bd2:	2b00      	cmp	r3, #0
 8018bd4:	dc00      	bgt.n	8018bd8 <_dtoa_r+0xbb4>
 8018bd6:	e6d6      	b.n	8018986 <_dtoa_r+0x962>
 8018bd8:	2400      	movs	r4, #0
 8018bda:	0031      	movs	r1, r6
 8018bdc:	9805      	ldr	r0, [sp, #20]
 8018bde:	f7ff f992 	bl	8017f06 <quorem>
 8018be2:	9b08      	ldr	r3, [sp, #32]
 8018be4:	3030      	adds	r0, #48	@ 0x30
 8018be6:	5518      	strb	r0, [r3, r4]
 8018be8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018bea:	3401      	adds	r4, #1
 8018bec:	0005      	movs	r5, r0
 8018bee:	429c      	cmp	r4, r3
 8018bf0:	dab6      	bge.n	8018b60 <_dtoa_r+0xb3c>
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	220a      	movs	r2, #10
 8018bf6:	9905      	ldr	r1, [sp, #20]
 8018bf8:	9803      	ldr	r0, [sp, #12]
 8018bfa:	f000 f975 	bl	8018ee8 <__multadd>
 8018bfe:	9005      	str	r0, [sp, #20]
 8018c00:	e7eb      	b.n	8018bda <_dtoa_r+0xbb6>
 8018c02:	46c0      	nop			@ (mov r8, r8)
 8018c04:	0802d44c 	.word	0x0802d44c
 8018c08:	0802d454 	.word	0x0802d454

08018c0c <_free_r>:
 8018c0c:	b570      	push	{r4, r5, r6, lr}
 8018c0e:	0005      	movs	r5, r0
 8018c10:	1e0c      	subs	r4, r1, #0
 8018c12:	d010      	beq.n	8018c36 <_free_r+0x2a>
 8018c14:	3c04      	subs	r4, #4
 8018c16:	6823      	ldr	r3, [r4, #0]
 8018c18:	2b00      	cmp	r3, #0
 8018c1a:	da00      	bge.n	8018c1e <_free_r+0x12>
 8018c1c:	18e4      	adds	r4, r4, r3
 8018c1e:	0028      	movs	r0, r5
 8018c20:	f000 f8ea 	bl	8018df8 <__malloc_lock>
 8018c24:	4a1d      	ldr	r2, [pc, #116]	@ (8018c9c <_free_r+0x90>)
 8018c26:	6813      	ldr	r3, [r2, #0]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d105      	bne.n	8018c38 <_free_r+0x2c>
 8018c2c:	6063      	str	r3, [r4, #4]
 8018c2e:	6014      	str	r4, [r2, #0]
 8018c30:	0028      	movs	r0, r5
 8018c32:	f000 f8e9 	bl	8018e08 <__malloc_unlock>
 8018c36:	bd70      	pop	{r4, r5, r6, pc}
 8018c38:	42a3      	cmp	r3, r4
 8018c3a:	d908      	bls.n	8018c4e <_free_r+0x42>
 8018c3c:	6820      	ldr	r0, [r4, #0]
 8018c3e:	1821      	adds	r1, r4, r0
 8018c40:	428b      	cmp	r3, r1
 8018c42:	d1f3      	bne.n	8018c2c <_free_r+0x20>
 8018c44:	6819      	ldr	r1, [r3, #0]
 8018c46:	685b      	ldr	r3, [r3, #4]
 8018c48:	1809      	adds	r1, r1, r0
 8018c4a:	6021      	str	r1, [r4, #0]
 8018c4c:	e7ee      	b.n	8018c2c <_free_r+0x20>
 8018c4e:	001a      	movs	r2, r3
 8018c50:	685b      	ldr	r3, [r3, #4]
 8018c52:	2b00      	cmp	r3, #0
 8018c54:	d001      	beq.n	8018c5a <_free_r+0x4e>
 8018c56:	42a3      	cmp	r3, r4
 8018c58:	d9f9      	bls.n	8018c4e <_free_r+0x42>
 8018c5a:	6811      	ldr	r1, [r2, #0]
 8018c5c:	1850      	adds	r0, r2, r1
 8018c5e:	42a0      	cmp	r0, r4
 8018c60:	d10b      	bne.n	8018c7a <_free_r+0x6e>
 8018c62:	6820      	ldr	r0, [r4, #0]
 8018c64:	1809      	adds	r1, r1, r0
 8018c66:	1850      	adds	r0, r2, r1
 8018c68:	6011      	str	r1, [r2, #0]
 8018c6a:	4283      	cmp	r3, r0
 8018c6c:	d1e0      	bne.n	8018c30 <_free_r+0x24>
 8018c6e:	6818      	ldr	r0, [r3, #0]
 8018c70:	685b      	ldr	r3, [r3, #4]
 8018c72:	1841      	adds	r1, r0, r1
 8018c74:	6011      	str	r1, [r2, #0]
 8018c76:	6053      	str	r3, [r2, #4]
 8018c78:	e7da      	b.n	8018c30 <_free_r+0x24>
 8018c7a:	42a0      	cmp	r0, r4
 8018c7c:	d902      	bls.n	8018c84 <_free_r+0x78>
 8018c7e:	230c      	movs	r3, #12
 8018c80:	602b      	str	r3, [r5, #0]
 8018c82:	e7d5      	b.n	8018c30 <_free_r+0x24>
 8018c84:	6820      	ldr	r0, [r4, #0]
 8018c86:	1821      	adds	r1, r4, r0
 8018c88:	428b      	cmp	r3, r1
 8018c8a:	d103      	bne.n	8018c94 <_free_r+0x88>
 8018c8c:	6819      	ldr	r1, [r3, #0]
 8018c8e:	685b      	ldr	r3, [r3, #4]
 8018c90:	1809      	adds	r1, r1, r0
 8018c92:	6021      	str	r1, [r4, #0]
 8018c94:	6063      	str	r3, [r4, #4]
 8018c96:	6054      	str	r4, [r2, #4]
 8018c98:	e7ca      	b.n	8018c30 <_free_r+0x24>
 8018c9a:	46c0      	nop			@ (mov r8, r8)
 8018c9c:	200039dc 	.word	0x200039dc

08018ca0 <malloc>:
 8018ca0:	b510      	push	{r4, lr}
 8018ca2:	4b03      	ldr	r3, [pc, #12]	@ (8018cb0 <malloc+0x10>)
 8018ca4:	0001      	movs	r1, r0
 8018ca6:	6818      	ldr	r0, [r3, #0]
 8018ca8:	f000 f826 	bl	8018cf8 <_malloc_r>
 8018cac:	bd10      	pop	{r4, pc}
 8018cae:	46c0      	nop			@ (mov r8, r8)
 8018cb0:	200002dc 	.word	0x200002dc

08018cb4 <sbrk_aligned>:
 8018cb4:	b570      	push	{r4, r5, r6, lr}
 8018cb6:	4e0f      	ldr	r6, [pc, #60]	@ (8018cf4 <sbrk_aligned+0x40>)
 8018cb8:	000d      	movs	r5, r1
 8018cba:	6831      	ldr	r1, [r6, #0]
 8018cbc:	0004      	movs	r4, r0
 8018cbe:	2900      	cmp	r1, #0
 8018cc0:	d102      	bne.n	8018cc8 <sbrk_aligned+0x14>
 8018cc2:	f001 f855 	bl	8019d70 <_sbrk_r>
 8018cc6:	6030      	str	r0, [r6, #0]
 8018cc8:	0029      	movs	r1, r5
 8018cca:	0020      	movs	r0, r4
 8018ccc:	f001 f850 	bl	8019d70 <_sbrk_r>
 8018cd0:	1c43      	adds	r3, r0, #1
 8018cd2:	d103      	bne.n	8018cdc <sbrk_aligned+0x28>
 8018cd4:	2501      	movs	r5, #1
 8018cd6:	426d      	negs	r5, r5
 8018cd8:	0028      	movs	r0, r5
 8018cda:	bd70      	pop	{r4, r5, r6, pc}
 8018cdc:	2303      	movs	r3, #3
 8018cde:	1cc5      	adds	r5, r0, #3
 8018ce0:	439d      	bics	r5, r3
 8018ce2:	42a8      	cmp	r0, r5
 8018ce4:	d0f8      	beq.n	8018cd8 <sbrk_aligned+0x24>
 8018ce6:	1a29      	subs	r1, r5, r0
 8018ce8:	0020      	movs	r0, r4
 8018cea:	f001 f841 	bl	8019d70 <_sbrk_r>
 8018cee:	3001      	adds	r0, #1
 8018cf0:	d1f2      	bne.n	8018cd8 <sbrk_aligned+0x24>
 8018cf2:	e7ef      	b.n	8018cd4 <sbrk_aligned+0x20>
 8018cf4:	200039d8 	.word	0x200039d8

08018cf8 <_malloc_r>:
 8018cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018cfa:	2203      	movs	r2, #3
 8018cfc:	1ccb      	adds	r3, r1, #3
 8018cfe:	4393      	bics	r3, r2
 8018d00:	3308      	adds	r3, #8
 8018d02:	0005      	movs	r5, r0
 8018d04:	001f      	movs	r7, r3
 8018d06:	2b0c      	cmp	r3, #12
 8018d08:	d234      	bcs.n	8018d74 <_malloc_r+0x7c>
 8018d0a:	270c      	movs	r7, #12
 8018d0c:	42b9      	cmp	r1, r7
 8018d0e:	d833      	bhi.n	8018d78 <_malloc_r+0x80>
 8018d10:	0028      	movs	r0, r5
 8018d12:	f000 f871 	bl	8018df8 <__malloc_lock>
 8018d16:	4e37      	ldr	r6, [pc, #220]	@ (8018df4 <_malloc_r+0xfc>)
 8018d18:	6833      	ldr	r3, [r6, #0]
 8018d1a:	001c      	movs	r4, r3
 8018d1c:	2c00      	cmp	r4, #0
 8018d1e:	d12f      	bne.n	8018d80 <_malloc_r+0x88>
 8018d20:	0039      	movs	r1, r7
 8018d22:	0028      	movs	r0, r5
 8018d24:	f7ff ffc6 	bl	8018cb4 <sbrk_aligned>
 8018d28:	0004      	movs	r4, r0
 8018d2a:	1c43      	adds	r3, r0, #1
 8018d2c:	d15f      	bne.n	8018dee <_malloc_r+0xf6>
 8018d2e:	6834      	ldr	r4, [r6, #0]
 8018d30:	9400      	str	r4, [sp, #0]
 8018d32:	9b00      	ldr	r3, [sp, #0]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d14a      	bne.n	8018dce <_malloc_r+0xd6>
 8018d38:	2c00      	cmp	r4, #0
 8018d3a:	d052      	beq.n	8018de2 <_malloc_r+0xea>
 8018d3c:	6823      	ldr	r3, [r4, #0]
 8018d3e:	0028      	movs	r0, r5
 8018d40:	18e3      	adds	r3, r4, r3
 8018d42:	9900      	ldr	r1, [sp, #0]
 8018d44:	9301      	str	r3, [sp, #4]
 8018d46:	f001 f813 	bl	8019d70 <_sbrk_r>
 8018d4a:	9b01      	ldr	r3, [sp, #4]
 8018d4c:	4283      	cmp	r3, r0
 8018d4e:	d148      	bne.n	8018de2 <_malloc_r+0xea>
 8018d50:	6823      	ldr	r3, [r4, #0]
 8018d52:	0028      	movs	r0, r5
 8018d54:	1aff      	subs	r7, r7, r3
 8018d56:	0039      	movs	r1, r7
 8018d58:	f7ff ffac 	bl	8018cb4 <sbrk_aligned>
 8018d5c:	3001      	adds	r0, #1
 8018d5e:	d040      	beq.n	8018de2 <_malloc_r+0xea>
 8018d60:	6823      	ldr	r3, [r4, #0]
 8018d62:	19db      	adds	r3, r3, r7
 8018d64:	6023      	str	r3, [r4, #0]
 8018d66:	6833      	ldr	r3, [r6, #0]
 8018d68:	685a      	ldr	r2, [r3, #4]
 8018d6a:	2a00      	cmp	r2, #0
 8018d6c:	d133      	bne.n	8018dd6 <_malloc_r+0xde>
 8018d6e:	9b00      	ldr	r3, [sp, #0]
 8018d70:	6033      	str	r3, [r6, #0]
 8018d72:	e019      	b.n	8018da8 <_malloc_r+0xb0>
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	dac9      	bge.n	8018d0c <_malloc_r+0x14>
 8018d78:	230c      	movs	r3, #12
 8018d7a:	602b      	str	r3, [r5, #0]
 8018d7c:	2000      	movs	r0, #0
 8018d7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018d80:	6821      	ldr	r1, [r4, #0]
 8018d82:	1bc9      	subs	r1, r1, r7
 8018d84:	d420      	bmi.n	8018dc8 <_malloc_r+0xd0>
 8018d86:	290b      	cmp	r1, #11
 8018d88:	d90a      	bls.n	8018da0 <_malloc_r+0xa8>
 8018d8a:	19e2      	adds	r2, r4, r7
 8018d8c:	6027      	str	r7, [r4, #0]
 8018d8e:	42a3      	cmp	r3, r4
 8018d90:	d104      	bne.n	8018d9c <_malloc_r+0xa4>
 8018d92:	6032      	str	r2, [r6, #0]
 8018d94:	6863      	ldr	r3, [r4, #4]
 8018d96:	6011      	str	r1, [r2, #0]
 8018d98:	6053      	str	r3, [r2, #4]
 8018d9a:	e005      	b.n	8018da8 <_malloc_r+0xb0>
 8018d9c:	605a      	str	r2, [r3, #4]
 8018d9e:	e7f9      	b.n	8018d94 <_malloc_r+0x9c>
 8018da0:	6862      	ldr	r2, [r4, #4]
 8018da2:	42a3      	cmp	r3, r4
 8018da4:	d10e      	bne.n	8018dc4 <_malloc_r+0xcc>
 8018da6:	6032      	str	r2, [r6, #0]
 8018da8:	0028      	movs	r0, r5
 8018daa:	f000 f82d 	bl	8018e08 <__malloc_unlock>
 8018dae:	0020      	movs	r0, r4
 8018db0:	2207      	movs	r2, #7
 8018db2:	300b      	adds	r0, #11
 8018db4:	1d23      	adds	r3, r4, #4
 8018db6:	4390      	bics	r0, r2
 8018db8:	1ac2      	subs	r2, r0, r3
 8018dba:	4298      	cmp	r0, r3
 8018dbc:	d0df      	beq.n	8018d7e <_malloc_r+0x86>
 8018dbe:	1a1b      	subs	r3, r3, r0
 8018dc0:	50a3      	str	r3, [r4, r2]
 8018dc2:	e7dc      	b.n	8018d7e <_malloc_r+0x86>
 8018dc4:	605a      	str	r2, [r3, #4]
 8018dc6:	e7ef      	b.n	8018da8 <_malloc_r+0xb0>
 8018dc8:	0023      	movs	r3, r4
 8018dca:	6864      	ldr	r4, [r4, #4]
 8018dcc:	e7a6      	b.n	8018d1c <_malloc_r+0x24>
 8018dce:	9c00      	ldr	r4, [sp, #0]
 8018dd0:	6863      	ldr	r3, [r4, #4]
 8018dd2:	9300      	str	r3, [sp, #0]
 8018dd4:	e7ad      	b.n	8018d32 <_malloc_r+0x3a>
 8018dd6:	001a      	movs	r2, r3
 8018dd8:	685b      	ldr	r3, [r3, #4]
 8018dda:	42a3      	cmp	r3, r4
 8018ddc:	d1fb      	bne.n	8018dd6 <_malloc_r+0xde>
 8018dde:	2300      	movs	r3, #0
 8018de0:	e7da      	b.n	8018d98 <_malloc_r+0xa0>
 8018de2:	230c      	movs	r3, #12
 8018de4:	0028      	movs	r0, r5
 8018de6:	602b      	str	r3, [r5, #0]
 8018de8:	f000 f80e 	bl	8018e08 <__malloc_unlock>
 8018dec:	e7c6      	b.n	8018d7c <_malloc_r+0x84>
 8018dee:	6007      	str	r7, [r0, #0]
 8018df0:	e7da      	b.n	8018da8 <_malloc_r+0xb0>
 8018df2:	46c0      	nop			@ (mov r8, r8)
 8018df4:	200039dc 	.word	0x200039dc

08018df8 <__malloc_lock>:
 8018df8:	b510      	push	{r4, lr}
 8018dfa:	4802      	ldr	r0, [pc, #8]	@ (8018e04 <__malloc_lock+0xc>)
 8018dfc:	f7ff f86d 	bl	8017eda <__retarget_lock_acquire_recursive>
 8018e00:	bd10      	pop	{r4, pc}
 8018e02:	46c0      	nop			@ (mov r8, r8)
 8018e04:	200039d4 	.word	0x200039d4

08018e08 <__malloc_unlock>:
 8018e08:	b510      	push	{r4, lr}
 8018e0a:	4802      	ldr	r0, [pc, #8]	@ (8018e14 <__malloc_unlock+0xc>)
 8018e0c:	f7ff f866 	bl	8017edc <__retarget_lock_release_recursive>
 8018e10:	bd10      	pop	{r4, pc}
 8018e12:	46c0      	nop			@ (mov r8, r8)
 8018e14:	200039d4 	.word	0x200039d4

08018e18 <_Balloc>:
 8018e18:	b570      	push	{r4, r5, r6, lr}
 8018e1a:	69c5      	ldr	r5, [r0, #28]
 8018e1c:	0006      	movs	r6, r0
 8018e1e:	000c      	movs	r4, r1
 8018e20:	2d00      	cmp	r5, #0
 8018e22:	d10e      	bne.n	8018e42 <_Balloc+0x2a>
 8018e24:	2010      	movs	r0, #16
 8018e26:	f7ff ff3b 	bl	8018ca0 <malloc>
 8018e2a:	1e02      	subs	r2, r0, #0
 8018e2c:	61f0      	str	r0, [r6, #28]
 8018e2e:	d104      	bne.n	8018e3a <_Balloc+0x22>
 8018e30:	216b      	movs	r1, #107	@ 0x6b
 8018e32:	4b19      	ldr	r3, [pc, #100]	@ (8018e98 <_Balloc+0x80>)
 8018e34:	4819      	ldr	r0, [pc, #100]	@ (8018e9c <_Balloc+0x84>)
 8018e36:	f000 ffad 	bl	8019d94 <__assert_func>
 8018e3a:	6045      	str	r5, [r0, #4]
 8018e3c:	6085      	str	r5, [r0, #8]
 8018e3e:	6005      	str	r5, [r0, #0]
 8018e40:	60c5      	str	r5, [r0, #12]
 8018e42:	69f5      	ldr	r5, [r6, #28]
 8018e44:	68eb      	ldr	r3, [r5, #12]
 8018e46:	2b00      	cmp	r3, #0
 8018e48:	d013      	beq.n	8018e72 <_Balloc+0x5a>
 8018e4a:	69f3      	ldr	r3, [r6, #28]
 8018e4c:	00a2      	lsls	r2, r4, #2
 8018e4e:	68db      	ldr	r3, [r3, #12]
 8018e50:	189b      	adds	r3, r3, r2
 8018e52:	6818      	ldr	r0, [r3, #0]
 8018e54:	2800      	cmp	r0, #0
 8018e56:	d118      	bne.n	8018e8a <_Balloc+0x72>
 8018e58:	2101      	movs	r1, #1
 8018e5a:	000d      	movs	r5, r1
 8018e5c:	40a5      	lsls	r5, r4
 8018e5e:	1d6a      	adds	r2, r5, #5
 8018e60:	0030      	movs	r0, r6
 8018e62:	0092      	lsls	r2, r2, #2
 8018e64:	f000 ffb4 	bl	8019dd0 <_calloc_r>
 8018e68:	2800      	cmp	r0, #0
 8018e6a:	d00c      	beq.n	8018e86 <_Balloc+0x6e>
 8018e6c:	6044      	str	r4, [r0, #4]
 8018e6e:	6085      	str	r5, [r0, #8]
 8018e70:	e00d      	b.n	8018e8e <_Balloc+0x76>
 8018e72:	2221      	movs	r2, #33	@ 0x21
 8018e74:	2104      	movs	r1, #4
 8018e76:	0030      	movs	r0, r6
 8018e78:	f000 ffaa 	bl	8019dd0 <_calloc_r>
 8018e7c:	69f3      	ldr	r3, [r6, #28]
 8018e7e:	60e8      	str	r0, [r5, #12]
 8018e80:	68db      	ldr	r3, [r3, #12]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d1e1      	bne.n	8018e4a <_Balloc+0x32>
 8018e86:	2000      	movs	r0, #0
 8018e88:	bd70      	pop	{r4, r5, r6, pc}
 8018e8a:	6802      	ldr	r2, [r0, #0]
 8018e8c:	601a      	str	r2, [r3, #0]
 8018e8e:	2300      	movs	r3, #0
 8018e90:	6103      	str	r3, [r0, #16]
 8018e92:	60c3      	str	r3, [r0, #12]
 8018e94:	e7f8      	b.n	8018e88 <_Balloc+0x70>
 8018e96:	46c0      	nop			@ (mov r8, r8)
 8018e98:	0802d459 	.word	0x0802d459
 8018e9c:	0802d4d9 	.word	0x0802d4d9

08018ea0 <_Bfree>:
 8018ea0:	b570      	push	{r4, r5, r6, lr}
 8018ea2:	69c6      	ldr	r6, [r0, #28]
 8018ea4:	0005      	movs	r5, r0
 8018ea6:	000c      	movs	r4, r1
 8018ea8:	2e00      	cmp	r6, #0
 8018eaa:	d10e      	bne.n	8018eca <_Bfree+0x2a>
 8018eac:	2010      	movs	r0, #16
 8018eae:	f7ff fef7 	bl	8018ca0 <malloc>
 8018eb2:	1e02      	subs	r2, r0, #0
 8018eb4:	61e8      	str	r0, [r5, #28]
 8018eb6:	d104      	bne.n	8018ec2 <_Bfree+0x22>
 8018eb8:	218f      	movs	r1, #143	@ 0x8f
 8018eba:	4b09      	ldr	r3, [pc, #36]	@ (8018ee0 <_Bfree+0x40>)
 8018ebc:	4809      	ldr	r0, [pc, #36]	@ (8018ee4 <_Bfree+0x44>)
 8018ebe:	f000 ff69 	bl	8019d94 <__assert_func>
 8018ec2:	6046      	str	r6, [r0, #4]
 8018ec4:	6086      	str	r6, [r0, #8]
 8018ec6:	6006      	str	r6, [r0, #0]
 8018ec8:	60c6      	str	r6, [r0, #12]
 8018eca:	2c00      	cmp	r4, #0
 8018ecc:	d007      	beq.n	8018ede <_Bfree+0x3e>
 8018ece:	69eb      	ldr	r3, [r5, #28]
 8018ed0:	6862      	ldr	r2, [r4, #4]
 8018ed2:	68db      	ldr	r3, [r3, #12]
 8018ed4:	0092      	lsls	r2, r2, #2
 8018ed6:	189b      	adds	r3, r3, r2
 8018ed8:	681a      	ldr	r2, [r3, #0]
 8018eda:	6022      	str	r2, [r4, #0]
 8018edc:	601c      	str	r4, [r3, #0]
 8018ede:	bd70      	pop	{r4, r5, r6, pc}
 8018ee0:	0802d459 	.word	0x0802d459
 8018ee4:	0802d4d9 	.word	0x0802d4d9

08018ee8 <__multadd>:
 8018ee8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8018eea:	000f      	movs	r7, r1
 8018eec:	9001      	str	r0, [sp, #4]
 8018eee:	000c      	movs	r4, r1
 8018ef0:	001e      	movs	r6, r3
 8018ef2:	2000      	movs	r0, #0
 8018ef4:	690d      	ldr	r5, [r1, #16]
 8018ef6:	3714      	adds	r7, #20
 8018ef8:	683b      	ldr	r3, [r7, #0]
 8018efa:	3001      	adds	r0, #1
 8018efc:	b299      	uxth	r1, r3
 8018efe:	4351      	muls	r1, r2
 8018f00:	0c1b      	lsrs	r3, r3, #16
 8018f02:	4353      	muls	r3, r2
 8018f04:	1989      	adds	r1, r1, r6
 8018f06:	0c0e      	lsrs	r6, r1, #16
 8018f08:	199b      	adds	r3, r3, r6
 8018f0a:	0c1e      	lsrs	r6, r3, #16
 8018f0c:	b289      	uxth	r1, r1
 8018f0e:	041b      	lsls	r3, r3, #16
 8018f10:	185b      	adds	r3, r3, r1
 8018f12:	c708      	stmia	r7!, {r3}
 8018f14:	4285      	cmp	r5, r0
 8018f16:	dcef      	bgt.n	8018ef8 <__multadd+0x10>
 8018f18:	2e00      	cmp	r6, #0
 8018f1a:	d022      	beq.n	8018f62 <__multadd+0x7a>
 8018f1c:	68a3      	ldr	r3, [r4, #8]
 8018f1e:	42ab      	cmp	r3, r5
 8018f20:	dc19      	bgt.n	8018f56 <__multadd+0x6e>
 8018f22:	6861      	ldr	r1, [r4, #4]
 8018f24:	9801      	ldr	r0, [sp, #4]
 8018f26:	3101      	adds	r1, #1
 8018f28:	f7ff ff76 	bl	8018e18 <_Balloc>
 8018f2c:	1e07      	subs	r7, r0, #0
 8018f2e:	d105      	bne.n	8018f3c <__multadd+0x54>
 8018f30:	003a      	movs	r2, r7
 8018f32:	21ba      	movs	r1, #186	@ 0xba
 8018f34:	4b0c      	ldr	r3, [pc, #48]	@ (8018f68 <__multadd+0x80>)
 8018f36:	480d      	ldr	r0, [pc, #52]	@ (8018f6c <__multadd+0x84>)
 8018f38:	f000 ff2c 	bl	8019d94 <__assert_func>
 8018f3c:	0021      	movs	r1, r4
 8018f3e:	6922      	ldr	r2, [r4, #16]
 8018f40:	310c      	adds	r1, #12
 8018f42:	3202      	adds	r2, #2
 8018f44:	0092      	lsls	r2, r2, #2
 8018f46:	300c      	adds	r0, #12
 8018f48:	f7fe ffd4 	bl	8017ef4 <memcpy>
 8018f4c:	0021      	movs	r1, r4
 8018f4e:	9801      	ldr	r0, [sp, #4]
 8018f50:	f7ff ffa6 	bl	8018ea0 <_Bfree>
 8018f54:	003c      	movs	r4, r7
 8018f56:	1d2b      	adds	r3, r5, #4
 8018f58:	009b      	lsls	r3, r3, #2
 8018f5a:	18e3      	adds	r3, r4, r3
 8018f5c:	3501      	adds	r5, #1
 8018f5e:	605e      	str	r6, [r3, #4]
 8018f60:	6125      	str	r5, [r4, #16]
 8018f62:	0020      	movs	r0, r4
 8018f64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8018f66:	46c0      	nop			@ (mov r8, r8)
 8018f68:	0802d4c8 	.word	0x0802d4c8
 8018f6c:	0802d4d9 	.word	0x0802d4d9

08018f70 <__hi0bits>:
 8018f70:	2280      	movs	r2, #128	@ 0x80
 8018f72:	0003      	movs	r3, r0
 8018f74:	0252      	lsls	r2, r2, #9
 8018f76:	2000      	movs	r0, #0
 8018f78:	4293      	cmp	r3, r2
 8018f7a:	d201      	bcs.n	8018f80 <__hi0bits+0x10>
 8018f7c:	041b      	lsls	r3, r3, #16
 8018f7e:	3010      	adds	r0, #16
 8018f80:	2280      	movs	r2, #128	@ 0x80
 8018f82:	0452      	lsls	r2, r2, #17
 8018f84:	4293      	cmp	r3, r2
 8018f86:	d201      	bcs.n	8018f8c <__hi0bits+0x1c>
 8018f88:	3008      	adds	r0, #8
 8018f8a:	021b      	lsls	r3, r3, #8
 8018f8c:	2280      	movs	r2, #128	@ 0x80
 8018f8e:	0552      	lsls	r2, r2, #21
 8018f90:	4293      	cmp	r3, r2
 8018f92:	d201      	bcs.n	8018f98 <__hi0bits+0x28>
 8018f94:	3004      	adds	r0, #4
 8018f96:	011b      	lsls	r3, r3, #4
 8018f98:	2280      	movs	r2, #128	@ 0x80
 8018f9a:	05d2      	lsls	r2, r2, #23
 8018f9c:	4293      	cmp	r3, r2
 8018f9e:	d201      	bcs.n	8018fa4 <__hi0bits+0x34>
 8018fa0:	3002      	adds	r0, #2
 8018fa2:	009b      	lsls	r3, r3, #2
 8018fa4:	2b00      	cmp	r3, #0
 8018fa6:	db03      	blt.n	8018fb0 <__hi0bits+0x40>
 8018fa8:	3001      	adds	r0, #1
 8018faa:	4213      	tst	r3, r2
 8018fac:	d100      	bne.n	8018fb0 <__hi0bits+0x40>
 8018fae:	2020      	movs	r0, #32
 8018fb0:	4770      	bx	lr

08018fb2 <__lo0bits>:
 8018fb2:	6803      	ldr	r3, [r0, #0]
 8018fb4:	0001      	movs	r1, r0
 8018fb6:	2207      	movs	r2, #7
 8018fb8:	0018      	movs	r0, r3
 8018fba:	4010      	ands	r0, r2
 8018fbc:	4213      	tst	r3, r2
 8018fbe:	d00d      	beq.n	8018fdc <__lo0bits+0x2a>
 8018fc0:	3a06      	subs	r2, #6
 8018fc2:	2000      	movs	r0, #0
 8018fc4:	4213      	tst	r3, r2
 8018fc6:	d105      	bne.n	8018fd4 <__lo0bits+0x22>
 8018fc8:	3002      	adds	r0, #2
 8018fca:	4203      	tst	r3, r0
 8018fcc:	d003      	beq.n	8018fd6 <__lo0bits+0x24>
 8018fce:	40d3      	lsrs	r3, r2
 8018fd0:	0010      	movs	r0, r2
 8018fd2:	600b      	str	r3, [r1, #0]
 8018fd4:	4770      	bx	lr
 8018fd6:	089b      	lsrs	r3, r3, #2
 8018fd8:	600b      	str	r3, [r1, #0]
 8018fda:	e7fb      	b.n	8018fd4 <__lo0bits+0x22>
 8018fdc:	b29a      	uxth	r2, r3
 8018fde:	2a00      	cmp	r2, #0
 8018fe0:	d101      	bne.n	8018fe6 <__lo0bits+0x34>
 8018fe2:	2010      	movs	r0, #16
 8018fe4:	0c1b      	lsrs	r3, r3, #16
 8018fe6:	b2da      	uxtb	r2, r3
 8018fe8:	2a00      	cmp	r2, #0
 8018fea:	d101      	bne.n	8018ff0 <__lo0bits+0x3e>
 8018fec:	3008      	adds	r0, #8
 8018fee:	0a1b      	lsrs	r3, r3, #8
 8018ff0:	071a      	lsls	r2, r3, #28
 8018ff2:	d101      	bne.n	8018ff8 <__lo0bits+0x46>
 8018ff4:	3004      	adds	r0, #4
 8018ff6:	091b      	lsrs	r3, r3, #4
 8018ff8:	079a      	lsls	r2, r3, #30
 8018ffa:	d101      	bne.n	8019000 <__lo0bits+0x4e>
 8018ffc:	3002      	adds	r0, #2
 8018ffe:	089b      	lsrs	r3, r3, #2
 8019000:	07da      	lsls	r2, r3, #31
 8019002:	d4e9      	bmi.n	8018fd8 <__lo0bits+0x26>
 8019004:	3001      	adds	r0, #1
 8019006:	085b      	lsrs	r3, r3, #1
 8019008:	d1e6      	bne.n	8018fd8 <__lo0bits+0x26>
 801900a:	2020      	movs	r0, #32
 801900c:	e7e2      	b.n	8018fd4 <__lo0bits+0x22>
	...

08019010 <__i2b>:
 8019010:	b510      	push	{r4, lr}
 8019012:	000c      	movs	r4, r1
 8019014:	2101      	movs	r1, #1
 8019016:	f7ff feff 	bl	8018e18 <_Balloc>
 801901a:	2800      	cmp	r0, #0
 801901c:	d107      	bne.n	801902e <__i2b+0x1e>
 801901e:	2146      	movs	r1, #70	@ 0x46
 8019020:	4c05      	ldr	r4, [pc, #20]	@ (8019038 <__i2b+0x28>)
 8019022:	0002      	movs	r2, r0
 8019024:	4b05      	ldr	r3, [pc, #20]	@ (801903c <__i2b+0x2c>)
 8019026:	0020      	movs	r0, r4
 8019028:	31ff      	adds	r1, #255	@ 0xff
 801902a:	f000 feb3 	bl	8019d94 <__assert_func>
 801902e:	2301      	movs	r3, #1
 8019030:	6144      	str	r4, [r0, #20]
 8019032:	6103      	str	r3, [r0, #16]
 8019034:	bd10      	pop	{r4, pc}
 8019036:	46c0      	nop			@ (mov r8, r8)
 8019038:	0802d4d9 	.word	0x0802d4d9
 801903c:	0802d4c8 	.word	0x0802d4c8

08019040 <__multiply>:
 8019040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019042:	0014      	movs	r4, r2
 8019044:	690a      	ldr	r2, [r1, #16]
 8019046:	6923      	ldr	r3, [r4, #16]
 8019048:	000d      	movs	r5, r1
 801904a:	b08b      	sub	sp, #44	@ 0x2c
 801904c:	429a      	cmp	r2, r3
 801904e:	db02      	blt.n	8019056 <__multiply+0x16>
 8019050:	0023      	movs	r3, r4
 8019052:	000c      	movs	r4, r1
 8019054:	001d      	movs	r5, r3
 8019056:	6927      	ldr	r7, [r4, #16]
 8019058:	692e      	ldr	r6, [r5, #16]
 801905a:	6861      	ldr	r1, [r4, #4]
 801905c:	19bb      	adds	r3, r7, r6
 801905e:	9303      	str	r3, [sp, #12]
 8019060:	68a3      	ldr	r3, [r4, #8]
 8019062:	19ba      	adds	r2, r7, r6
 8019064:	4293      	cmp	r3, r2
 8019066:	da00      	bge.n	801906a <__multiply+0x2a>
 8019068:	3101      	adds	r1, #1
 801906a:	f7ff fed5 	bl	8018e18 <_Balloc>
 801906e:	9002      	str	r0, [sp, #8]
 8019070:	2800      	cmp	r0, #0
 8019072:	d106      	bne.n	8019082 <__multiply+0x42>
 8019074:	21b1      	movs	r1, #177	@ 0xb1
 8019076:	4b49      	ldr	r3, [pc, #292]	@ (801919c <__multiply+0x15c>)
 8019078:	4849      	ldr	r0, [pc, #292]	@ (80191a0 <__multiply+0x160>)
 801907a:	9a02      	ldr	r2, [sp, #8]
 801907c:	0049      	lsls	r1, r1, #1
 801907e:	f000 fe89 	bl	8019d94 <__assert_func>
 8019082:	9b02      	ldr	r3, [sp, #8]
 8019084:	2200      	movs	r2, #0
 8019086:	3314      	adds	r3, #20
 8019088:	469c      	mov	ip, r3
 801908a:	19bb      	adds	r3, r7, r6
 801908c:	009b      	lsls	r3, r3, #2
 801908e:	4463      	add	r3, ip
 8019090:	9304      	str	r3, [sp, #16]
 8019092:	4663      	mov	r3, ip
 8019094:	9904      	ldr	r1, [sp, #16]
 8019096:	428b      	cmp	r3, r1
 8019098:	d32a      	bcc.n	80190f0 <__multiply+0xb0>
 801909a:	0023      	movs	r3, r4
 801909c:	00bf      	lsls	r7, r7, #2
 801909e:	3314      	adds	r3, #20
 80190a0:	3514      	adds	r5, #20
 80190a2:	9308      	str	r3, [sp, #32]
 80190a4:	00b6      	lsls	r6, r6, #2
 80190a6:	19db      	adds	r3, r3, r7
 80190a8:	9305      	str	r3, [sp, #20]
 80190aa:	19ab      	adds	r3, r5, r6
 80190ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80190ae:	2304      	movs	r3, #4
 80190b0:	9306      	str	r3, [sp, #24]
 80190b2:	0023      	movs	r3, r4
 80190b4:	9a05      	ldr	r2, [sp, #20]
 80190b6:	3315      	adds	r3, #21
 80190b8:	9501      	str	r5, [sp, #4]
 80190ba:	429a      	cmp	r2, r3
 80190bc:	d305      	bcc.n	80190ca <__multiply+0x8a>
 80190be:	1b13      	subs	r3, r2, r4
 80190c0:	3b15      	subs	r3, #21
 80190c2:	089b      	lsrs	r3, r3, #2
 80190c4:	3301      	adds	r3, #1
 80190c6:	009b      	lsls	r3, r3, #2
 80190c8:	9306      	str	r3, [sp, #24]
 80190ca:	9b01      	ldr	r3, [sp, #4]
 80190cc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80190ce:	4293      	cmp	r3, r2
 80190d0:	d310      	bcc.n	80190f4 <__multiply+0xb4>
 80190d2:	9b03      	ldr	r3, [sp, #12]
 80190d4:	2b00      	cmp	r3, #0
 80190d6:	dd05      	ble.n	80190e4 <__multiply+0xa4>
 80190d8:	9b04      	ldr	r3, [sp, #16]
 80190da:	3b04      	subs	r3, #4
 80190dc:	9304      	str	r3, [sp, #16]
 80190de:	681b      	ldr	r3, [r3, #0]
 80190e0:	2b00      	cmp	r3, #0
 80190e2:	d056      	beq.n	8019192 <__multiply+0x152>
 80190e4:	9b02      	ldr	r3, [sp, #8]
 80190e6:	9a03      	ldr	r2, [sp, #12]
 80190e8:	0018      	movs	r0, r3
 80190ea:	611a      	str	r2, [r3, #16]
 80190ec:	b00b      	add	sp, #44	@ 0x2c
 80190ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80190f0:	c304      	stmia	r3!, {r2}
 80190f2:	e7cf      	b.n	8019094 <__multiply+0x54>
 80190f4:	9b01      	ldr	r3, [sp, #4]
 80190f6:	6818      	ldr	r0, [r3, #0]
 80190f8:	b280      	uxth	r0, r0
 80190fa:	2800      	cmp	r0, #0
 80190fc:	d01e      	beq.n	801913c <__multiply+0xfc>
 80190fe:	4667      	mov	r7, ip
 8019100:	2500      	movs	r5, #0
 8019102:	9e08      	ldr	r6, [sp, #32]
 8019104:	ce02      	ldmia	r6!, {r1}
 8019106:	683b      	ldr	r3, [r7, #0]
 8019108:	9307      	str	r3, [sp, #28]
 801910a:	b28b      	uxth	r3, r1
 801910c:	4343      	muls	r3, r0
 801910e:	001a      	movs	r2, r3
 8019110:	466b      	mov	r3, sp
 8019112:	0c09      	lsrs	r1, r1, #16
 8019114:	8b9b      	ldrh	r3, [r3, #28]
 8019116:	4341      	muls	r1, r0
 8019118:	18d3      	adds	r3, r2, r3
 801911a:	9a07      	ldr	r2, [sp, #28]
 801911c:	195b      	adds	r3, r3, r5
 801911e:	0c12      	lsrs	r2, r2, #16
 8019120:	1889      	adds	r1, r1, r2
 8019122:	0c1a      	lsrs	r2, r3, #16
 8019124:	188a      	adds	r2, r1, r2
 8019126:	b29b      	uxth	r3, r3
 8019128:	0c15      	lsrs	r5, r2, #16
 801912a:	0412      	lsls	r2, r2, #16
 801912c:	431a      	orrs	r2, r3
 801912e:	9b05      	ldr	r3, [sp, #20]
 8019130:	c704      	stmia	r7!, {r2}
 8019132:	42b3      	cmp	r3, r6
 8019134:	d8e6      	bhi.n	8019104 <__multiply+0xc4>
 8019136:	4663      	mov	r3, ip
 8019138:	9a06      	ldr	r2, [sp, #24]
 801913a:	509d      	str	r5, [r3, r2]
 801913c:	9b01      	ldr	r3, [sp, #4]
 801913e:	6818      	ldr	r0, [r3, #0]
 8019140:	0c00      	lsrs	r0, r0, #16
 8019142:	d020      	beq.n	8019186 <__multiply+0x146>
 8019144:	4663      	mov	r3, ip
 8019146:	0025      	movs	r5, r4
 8019148:	4661      	mov	r1, ip
 801914a:	2700      	movs	r7, #0
 801914c:	681b      	ldr	r3, [r3, #0]
 801914e:	3514      	adds	r5, #20
 8019150:	682a      	ldr	r2, [r5, #0]
 8019152:	680e      	ldr	r6, [r1, #0]
 8019154:	b292      	uxth	r2, r2
 8019156:	4342      	muls	r2, r0
 8019158:	0c36      	lsrs	r6, r6, #16
 801915a:	1992      	adds	r2, r2, r6
 801915c:	19d2      	adds	r2, r2, r7
 801915e:	0416      	lsls	r6, r2, #16
 8019160:	b29b      	uxth	r3, r3
 8019162:	431e      	orrs	r6, r3
 8019164:	600e      	str	r6, [r1, #0]
 8019166:	cd40      	ldmia	r5!, {r6}
 8019168:	684b      	ldr	r3, [r1, #4]
 801916a:	0c36      	lsrs	r6, r6, #16
 801916c:	4346      	muls	r6, r0
 801916e:	b29b      	uxth	r3, r3
 8019170:	0c12      	lsrs	r2, r2, #16
 8019172:	18f3      	adds	r3, r6, r3
 8019174:	189b      	adds	r3, r3, r2
 8019176:	9a05      	ldr	r2, [sp, #20]
 8019178:	0c1f      	lsrs	r7, r3, #16
 801917a:	3104      	adds	r1, #4
 801917c:	42aa      	cmp	r2, r5
 801917e:	d8e7      	bhi.n	8019150 <__multiply+0x110>
 8019180:	4662      	mov	r2, ip
 8019182:	9906      	ldr	r1, [sp, #24]
 8019184:	5053      	str	r3, [r2, r1]
 8019186:	9b01      	ldr	r3, [sp, #4]
 8019188:	3304      	adds	r3, #4
 801918a:	9301      	str	r3, [sp, #4]
 801918c:	2304      	movs	r3, #4
 801918e:	449c      	add	ip, r3
 8019190:	e79b      	b.n	80190ca <__multiply+0x8a>
 8019192:	9b03      	ldr	r3, [sp, #12]
 8019194:	3b01      	subs	r3, #1
 8019196:	9303      	str	r3, [sp, #12]
 8019198:	e79b      	b.n	80190d2 <__multiply+0x92>
 801919a:	46c0      	nop			@ (mov r8, r8)
 801919c:	0802d4c8 	.word	0x0802d4c8
 80191a0:	0802d4d9 	.word	0x0802d4d9

080191a4 <__pow5mult>:
 80191a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80191a6:	2303      	movs	r3, #3
 80191a8:	0015      	movs	r5, r2
 80191aa:	0007      	movs	r7, r0
 80191ac:	000e      	movs	r6, r1
 80191ae:	401a      	ands	r2, r3
 80191b0:	421d      	tst	r5, r3
 80191b2:	d008      	beq.n	80191c6 <__pow5mult+0x22>
 80191b4:	4925      	ldr	r1, [pc, #148]	@ (801924c <__pow5mult+0xa8>)
 80191b6:	3a01      	subs	r2, #1
 80191b8:	0092      	lsls	r2, r2, #2
 80191ba:	5852      	ldr	r2, [r2, r1]
 80191bc:	2300      	movs	r3, #0
 80191be:	0031      	movs	r1, r6
 80191c0:	f7ff fe92 	bl	8018ee8 <__multadd>
 80191c4:	0006      	movs	r6, r0
 80191c6:	10ad      	asrs	r5, r5, #2
 80191c8:	d03d      	beq.n	8019246 <__pow5mult+0xa2>
 80191ca:	69fc      	ldr	r4, [r7, #28]
 80191cc:	2c00      	cmp	r4, #0
 80191ce:	d10f      	bne.n	80191f0 <__pow5mult+0x4c>
 80191d0:	2010      	movs	r0, #16
 80191d2:	f7ff fd65 	bl	8018ca0 <malloc>
 80191d6:	1e02      	subs	r2, r0, #0
 80191d8:	61f8      	str	r0, [r7, #28]
 80191da:	d105      	bne.n	80191e8 <__pow5mult+0x44>
 80191dc:	21b4      	movs	r1, #180	@ 0xb4
 80191de:	4b1c      	ldr	r3, [pc, #112]	@ (8019250 <__pow5mult+0xac>)
 80191e0:	481c      	ldr	r0, [pc, #112]	@ (8019254 <__pow5mult+0xb0>)
 80191e2:	31ff      	adds	r1, #255	@ 0xff
 80191e4:	f000 fdd6 	bl	8019d94 <__assert_func>
 80191e8:	6044      	str	r4, [r0, #4]
 80191ea:	6084      	str	r4, [r0, #8]
 80191ec:	6004      	str	r4, [r0, #0]
 80191ee:	60c4      	str	r4, [r0, #12]
 80191f0:	69fb      	ldr	r3, [r7, #28]
 80191f2:	689c      	ldr	r4, [r3, #8]
 80191f4:	9301      	str	r3, [sp, #4]
 80191f6:	2c00      	cmp	r4, #0
 80191f8:	d108      	bne.n	801920c <__pow5mult+0x68>
 80191fa:	0038      	movs	r0, r7
 80191fc:	4916      	ldr	r1, [pc, #88]	@ (8019258 <__pow5mult+0xb4>)
 80191fe:	f7ff ff07 	bl	8019010 <__i2b>
 8019202:	9b01      	ldr	r3, [sp, #4]
 8019204:	0004      	movs	r4, r0
 8019206:	6098      	str	r0, [r3, #8]
 8019208:	2300      	movs	r3, #0
 801920a:	6003      	str	r3, [r0, #0]
 801920c:	2301      	movs	r3, #1
 801920e:	421d      	tst	r5, r3
 8019210:	d00a      	beq.n	8019228 <__pow5mult+0x84>
 8019212:	0031      	movs	r1, r6
 8019214:	0022      	movs	r2, r4
 8019216:	0038      	movs	r0, r7
 8019218:	f7ff ff12 	bl	8019040 <__multiply>
 801921c:	0031      	movs	r1, r6
 801921e:	9001      	str	r0, [sp, #4]
 8019220:	0038      	movs	r0, r7
 8019222:	f7ff fe3d 	bl	8018ea0 <_Bfree>
 8019226:	9e01      	ldr	r6, [sp, #4]
 8019228:	106d      	asrs	r5, r5, #1
 801922a:	d00c      	beq.n	8019246 <__pow5mult+0xa2>
 801922c:	6820      	ldr	r0, [r4, #0]
 801922e:	2800      	cmp	r0, #0
 8019230:	d107      	bne.n	8019242 <__pow5mult+0x9e>
 8019232:	0022      	movs	r2, r4
 8019234:	0021      	movs	r1, r4
 8019236:	0038      	movs	r0, r7
 8019238:	f7ff ff02 	bl	8019040 <__multiply>
 801923c:	2300      	movs	r3, #0
 801923e:	6020      	str	r0, [r4, #0]
 8019240:	6003      	str	r3, [r0, #0]
 8019242:	0004      	movs	r4, r0
 8019244:	e7e2      	b.n	801920c <__pow5mult+0x68>
 8019246:	0030      	movs	r0, r6
 8019248:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801924a:	46c0      	nop			@ (mov r8, r8)
 801924c:	0802d534 	.word	0x0802d534
 8019250:	0802d459 	.word	0x0802d459
 8019254:	0802d4d9 	.word	0x0802d4d9
 8019258:	00000271 	.word	0x00000271

0801925c <__lshift>:
 801925c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801925e:	000c      	movs	r4, r1
 8019260:	0016      	movs	r6, r2
 8019262:	6923      	ldr	r3, [r4, #16]
 8019264:	1157      	asrs	r7, r2, #5
 8019266:	b085      	sub	sp, #20
 8019268:	18fb      	adds	r3, r7, r3
 801926a:	9301      	str	r3, [sp, #4]
 801926c:	3301      	adds	r3, #1
 801926e:	9300      	str	r3, [sp, #0]
 8019270:	6849      	ldr	r1, [r1, #4]
 8019272:	68a3      	ldr	r3, [r4, #8]
 8019274:	9002      	str	r0, [sp, #8]
 8019276:	9a00      	ldr	r2, [sp, #0]
 8019278:	4293      	cmp	r3, r2
 801927a:	db10      	blt.n	801929e <__lshift+0x42>
 801927c:	9802      	ldr	r0, [sp, #8]
 801927e:	f7ff fdcb 	bl	8018e18 <_Balloc>
 8019282:	2300      	movs	r3, #0
 8019284:	0001      	movs	r1, r0
 8019286:	0005      	movs	r5, r0
 8019288:	001a      	movs	r2, r3
 801928a:	3114      	adds	r1, #20
 801928c:	4298      	cmp	r0, r3
 801928e:	d10c      	bne.n	80192aa <__lshift+0x4e>
 8019290:	21ef      	movs	r1, #239	@ 0xef
 8019292:	002a      	movs	r2, r5
 8019294:	4b25      	ldr	r3, [pc, #148]	@ (801932c <__lshift+0xd0>)
 8019296:	4826      	ldr	r0, [pc, #152]	@ (8019330 <__lshift+0xd4>)
 8019298:	0049      	lsls	r1, r1, #1
 801929a:	f000 fd7b 	bl	8019d94 <__assert_func>
 801929e:	3101      	adds	r1, #1
 80192a0:	005b      	lsls	r3, r3, #1
 80192a2:	e7e8      	b.n	8019276 <__lshift+0x1a>
 80192a4:	0098      	lsls	r0, r3, #2
 80192a6:	500a      	str	r2, [r1, r0]
 80192a8:	3301      	adds	r3, #1
 80192aa:	42bb      	cmp	r3, r7
 80192ac:	dbfa      	blt.n	80192a4 <__lshift+0x48>
 80192ae:	43fb      	mvns	r3, r7
 80192b0:	17db      	asrs	r3, r3, #31
 80192b2:	401f      	ands	r7, r3
 80192b4:	00bf      	lsls	r7, r7, #2
 80192b6:	0023      	movs	r3, r4
 80192b8:	201f      	movs	r0, #31
 80192ba:	19c9      	adds	r1, r1, r7
 80192bc:	0037      	movs	r7, r6
 80192be:	6922      	ldr	r2, [r4, #16]
 80192c0:	3314      	adds	r3, #20
 80192c2:	0092      	lsls	r2, r2, #2
 80192c4:	189a      	adds	r2, r3, r2
 80192c6:	4007      	ands	r7, r0
 80192c8:	4206      	tst	r6, r0
 80192ca:	d029      	beq.n	8019320 <__lshift+0xc4>
 80192cc:	3001      	adds	r0, #1
 80192ce:	1bc0      	subs	r0, r0, r7
 80192d0:	9003      	str	r0, [sp, #12]
 80192d2:	468c      	mov	ip, r1
 80192d4:	2000      	movs	r0, #0
 80192d6:	681e      	ldr	r6, [r3, #0]
 80192d8:	40be      	lsls	r6, r7
 80192da:	4306      	orrs	r6, r0
 80192dc:	4660      	mov	r0, ip
 80192de:	c040      	stmia	r0!, {r6}
 80192e0:	4684      	mov	ip, r0
 80192e2:	9e03      	ldr	r6, [sp, #12]
 80192e4:	cb01      	ldmia	r3!, {r0}
 80192e6:	40f0      	lsrs	r0, r6
 80192e8:	429a      	cmp	r2, r3
 80192ea:	d8f4      	bhi.n	80192d6 <__lshift+0x7a>
 80192ec:	0026      	movs	r6, r4
 80192ee:	3615      	adds	r6, #21
 80192f0:	2304      	movs	r3, #4
 80192f2:	42b2      	cmp	r2, r6
 80192f4:	d304      	bcc.n	8019300 <__lshift+0xa4>
 80192f6:	1b13      	subs	r3, r2, r4
 80192f8:	3b15      	subs	r3, #21
 80192fa:	089b      	lsrs	r3, r3, #2
 80192fc:	3301      	adds	r3, #1
 80192fe:	009b      	lsls	r3, r3, #2
 8019300:	50c8      	str	r0, [r1, r3]
 8019302:	2800      	cmp	r0, #0
 8019304:	d002      	beq.n	801930c <__lshift+0xb0>
 8019306:	9b01      	ldr	r3, [sp, #4]
 8019308:	3302      	adds	r3, #2
 801930a:	9300      	str	r3, [sp, #0]
 801930c:	9b00      	ldr	r3, [sp, #0]
 801930e:	9802      	ldr	r0, [sp, #8]
 8019310:	3b01      	subs	r3, #1
 8019312:	0021      	movs	r1, r4
 8019314:	612b      	str	r3, [r5, #16]
 8019316:	f7ff fdc3 	bl	8018ea0 <_Bfree>
 801931a:	0028      	movs	r0, r5
 801931c:	b005      	add	sp, #20
 801931e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019320:	cb01      	ldmia	r3!, {r0}
 8019322:	c101      	stmia	r1!, {r0}
 8019324:	429a      	cmp	r2, r3
 8019326:	d8fb      	bhi.n	8019320 <__lshift+0xc4>
 8019328:	e7f0      	b.n	801930c <__lshift+0xb0>
 801932a:	46c0      	nop			@ (mov r8, r8)
 801932c:	0802d4c8 	.word	0x0802d4c8
 8019330:	0802d4d9 	.word	0x0802d4d9

08019334 <__mcmp>:
 8019334:	b530      	push	{r4, r5, lr}
 8019336:	690b      	ldr	r3, [r1, #16]
 8019338:	6904      	ldr	r4, [r0, #16]
 801933a:	0002      	movs	r2, r0
 801933c:	1ae0      	subs	r0, r4, r3
 801933e:	429c      	cmp	r4, r3
 8019340:	d10f      	bne.n	8019362 <__mcmp+0x2e>
 8019342:	3214      	adds	r2, #20
 8019344:	009b      	lsls	r3, r3, #2
 8019346:	3114      	adds	r1, #20
 8019348:	0014      	movs	r4, r2
 801934a:	18c9      	adds	r1, r1, r3
 801934c:	18d2      	adds	r2, r2, r3
 801934e:	3a04      	subs	r2, #4
 8019350:	3904      	subs	r1, #4
 8019352:	6815      	ldr	r5, [r2, #0]
 8019354:	680b      	ldr	r3, [r1, #0]
 8019356:	429d      	cmp	r5, r3
 8019358:	d004      	beq.n	8019364 <__mcmp+0x30>
 801935a:	2001      	movs	r0, #1
 801935c:	429d      	cmp	r5, r3
 801935e:	d200      	bcs.n	8019362 <__mcmp+0x2e>
 8019360:	3802      	subs	r0, #2
 8019362:	bd30      	pop	{r4, r5, pc}
 8019364:	4294      	cmp	r4, r2
 8019366:	d3f2      	bcc.n	801934e <__mcmp+0x1a>
 8019368:	e7fb      	b.n	8019362 <__mcmp+0x2e>
	...

0801936c <__mdiff>:
 801936c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801936e:	000c      	movs	r4, r1
 8019370:	b087      	sub	sp, #28
 8019372:	9000      	str	r0, [sp, #0]
 8019374:	0011      	movs	r1, r2
 8019376:	0020      	movs	r0, r4
 8019378:	0017      	movs	r7, r2
 801937a:	f7ff ffdb 	bl	8019334 <__mcmp>
 801937e:	1e05      	subs	r5, r0, #0
 8019380:	d110      	bne.n	80193a4 <__mdiff+0x38>
 8019382:	0001      	movs	r1, r0
 8019384:	9800      	ldr	r0, [sp, #0]
 8019386:	f7ff fd47 	bl	8018e18 <_Balloc>
 801938a:	1e02      	subs	r2, r0, #0
 801938c:	d104      	bne.n	8019398 <__mdiff+0x2c>
 801938e:	4b40      	ldr	r3, [pc, #256]	@ (8019490 <__mdiff+0x124>)
 8019390:	4840      	ldr	r0, [pc, #256]	@ (8019494 <__mdiff+0x128>)
 8019392:	4941      	ldr	r1, [pc, #260]	@ (8019498 <__mdiff+0x12c>)
 8019394:	f000 fcfe 	bl	8019d94 <__assert_func>
 8019398:	2301      	movs	r3, #1
 801939a:	6145      	str	r5, [r0, #20]
 801939c:	6103      	str	r3, [r0, #16]
 801939e:	0010      	movs	r0, r2
 80193a0:	b007      	add	sp, #28
 80193a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80193a4:	2600      	movs	r6, #0
 80193a6:	42b0      	cmp	r0, r6
 80193a8:	da03      	bge.n	80193b2 <__mdiff+0x46>
 80193aa:	0023      	movs	r3, r4
 80193ac:	003c      	movs	r4, r7
 80193ae:	001f      	movs	r7, r3
 80193b0:	3601      	adds	r6, #1
 80193b2:	6861      	ldr	r1, [r4, #4]
 80193b4:	9800      	ldr	r0, [sp, #0]
 80193b6:	f7ff fd2f 	bl	8018e18 <_Balloc>
 80193ba:	1e02      	subs	r2, r0, #0
 80193bc:	d103      	bne.n	80193c6 <__mdiff+0x5a>
 80193be:	4b34      	ldr	r3, [pc, #208]	@ (8019490 <__mdiff+0x124>)
 80193c0:	4834      	ldr	r0, [pc, #208]	@ (8019494 <__mdiff+0x128>)
 80193c2:	4936      	ldr	r1, [pc, #216]	@ (801949c <__mdiff+0x130>)
 80193c4:	e7e6      	b.n	8019394 <__mdiff+0x28>
 80193c6:	6923      	ldr	r3, [r4, #16]
 80193c8:	3414      	adds	r4, #20
 80193ca:	9300      	str	r3, [sp, #0]
 80193cc:	009b      	lsls	r3, r3, #2
 80193ce:	18e3      	adds	r3, r4, r3
 80193d0:	0021      	movs	r1, r4
 80193d2:	9401      	str	r4, [sp, #4]
 80193d4:	003c      	movs	r4, r7
 80193d6:	9302      	str	r3, [sp, #8]
 80193d8:	693b      	ldr	r3, [r7, #16]
 80193da:	3414      	adds	r4, #20
 80193dc:	009b      	lsls	r3, r3, #2
 80193de:	18e3      	adds	r3, r4, r3
 80193e0:	9303      	str	r3, [sp, #12]
 80193e2:	0003      	movs	r3, r0
 80193e4:	60c6      	str	r6, [r0, #12]
 80193e6:	468c      	mov	ip, r1
 80193e8:	2000      	movs	r0, #0
 80193ea:	3314      	adds	r3, #20
 80193ec:	9304      	str	r3, [sp, #16]
 80193ee:	9305      	str	r3, [sp, #20]
 80193f0:	4663      	mov	r3, ip
 80193f2:	cb20      	ldmia	r3!, {r5}
 80193f4:	b2a9      	uxth	r1, r5
 80193f6:	000e      	movs	r6, r1
 80193f8:	469c      	mov	ip, r3
 80193fa:	cc08      	ldmia	r4!, {r3}
 80193fc:	0c2d      	lsrs	r5, r5, #16
 80193fe:	b299      	uxth	r1, r3
 8019400:	1a71      	subs	r1, r6, r1
 8019402:	1809      	adds	r1, r1, r0
 8019404:	0c1b      	lsrs	r3, r3, #16
 8019406:	1408      	asrs	r0, r1, #16
 8019408:	1aeb      	subs	r3, r5, r3
 801940a:	181b      	adds	r3, r3, r0
 801940c:	1418      	asrs	r0, r3, #16
 801940e:	b289      	uxth	r1, r1
 8019410:	041b      	lsls	r3, r3, #16
 8019412:	4319      	orrs	r1, r3
 8019414:	9b05      	ldr	r3, [sp, #20]
 8019416:	c302      	stmia	r3!, {r1}
 8019418:	9305      	str	r3, [sp, #20]
 801941a:	9b03      	ldr	r3, [sp, #12]
 801941c:	42a3      	cmp	r3, r4
 801941e:	d8e7      	bhi.n	80193f0 <__mdiff+0x84>
 8019420:	0039      	movs	r1, r7
 8019422:	9c03      	ldr	r4, [sp, #12]
 8019424:	3115      	adds	r1, #21
 8019426:	2304      	movs	r3, #4
 8019428:	428c      	cmp	r4, r1
 801942a:	d304      	bcc.n	8019436 <__mdiff+0xca>
 801942c:	1be3      	subs	r3, r4, r7
 801942e:	3b15      	subs	r3, #21
 8019430:	089b      	lsrs	r3, r3, #2
 8019432:	3301      	adds	r3, #1
 8019434:	009b      	lsls	r3, r3, #2
 8019436:	9901      	ldr	r1, [sp, #4]
 8019438:	18cd      	adds	r5, r1, r3
 801943a:	9904      	ldr	r1, [sp, #16]
 801943c:	002e      	movs	r6, r5
 801943e:	18cb      	adds	r3, r1, r3
 8019440:	001f      	movs	r7, r3
 8019442:	9902      	ldr	r1, [sp, #8]
 8019444:	428e      	cmp	r6, r1
 8019446:	d311      	bcc.n	801946c <__mdiff+0x100>
 8019448:	9c02      	ldr	r4, [sp, #8]
 801944a:	1ee9      	subs	r1, r5, #3
 801944c:	2000      	movs	r0, #0
 801944e:	428c      	cmp	r4, r1
 8019450:	d304      	bcc.n	801945c <__mdiff+0xf0>
 8019452:	0021      	movs	r1, r4
 8019454:	3103      	adds	r1, #3
 8019456:	1b49      	subs	r1, r1, r5
 8019458:	0889      	lsrs	r1, r1, #2
 801945a:	0088      	lsls	r0, r1, #2
 801945c:	181b      	adds	r3, r3, r0
 801945e:	3b04      	subs	r3, #4
 8019460:	6819      	ldr	r1, [r3, #0]
 8019462:	2900      	cmp	r1, #0
 8019464:	d010      	beq.n	8019488 <__mdiff+0x11c>
 8019466:	9b00      	ldr	r3, [sp, #0]
 8019468:	6113      	str	r3, [r2, #16]
 801946a:	e798      	b.n	801939e <__mdiff+0x32>
 801946c:	4684      	mov	ip, r0
 801946e:	ce02      	ldmia	r6!, {r1}
 8019470:	b288      	uxth	r0, r1
 8019472:	4460      	add	r0, ip
 8019474:	1400      	asrs	r0, r0, #16
 8019476:	0c0c      	lsrs	r4, r1, #16
 8019478:	1904      	adds	r4, r0, r4
 801947a:	4461      	add	r1, ip
 801947c:	1420      	asrs	r0, r4, #16
 801947e:	b289      	uxth	r1, r1
 8019480:	0424      	lsls	r4, r4, #16
 8019482:	4321      	orrs	r1, r4
 8019484:	c702      	stmia	r7!, {r1}
 8019486:	e7dc      	b.n	8019442 <__mdiff+0xd6>
 8019488:	9900      	ldr	r1, [sp, #0]
 801948a:	3901      	subs	r1, #1
 801948c:	9100      	str	r1, [sp, #0]
 801948e:	e7e6      	b.n	801945e <__mdiff+0xf2>
 8019490:	0802d4c8 	.word	0x0802d4c8
 8019494:	0802d4d9 	.word	0x0802d4d9
 8019498:	00000237 	.word	0x00000237
 801949c:	00000245 	.word	0x00000245

080194a0 <__d2b>:
 80194a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80194a2:	2101      	movs	r1, #1
 80194a4:	0016      	movs	r6, r2
 80194a6:	001f      	movs	r7, r3
 80194a8:	f7ff fcb6 	bl	8018e18 <_Balloc>
 80194ac:	1e04      	subs	r4, r0, #0
 80194ae:	d105      	bne.n	80194bc <__d2b+0x1c>
 80194b0:	0022      	movs	r2, r4
 80194b2:	4b25      	ldr	r3, [pc, #148]	@ (8019548 <__d2b+0xa8>)
 80194b4:	4825      	ldr	r0, [pc, #148]	@ (801954c <__d2b+0xac>)
 80194b6:	4926      	ldr	r1, [pc, #152]	@ (8019550 <__d2b+0xb0>)
 80194b8:	f000 fc6c 	bl	8019d94 <__assert_func>
 80194bc:	033b      	lsls	r3, r7, #12
 80194be:	007d      	lsls	r5, r7, #1
 80194c0:	0b1b      	lsrs	r3, r3, #12
 80194c2:	0d6d      	lsrs	r5, r5, #21
 80194c4:	d002      	beq.n	80194cc <__d2b+0x2c>
 80194c6:	2280      	movs	r2, #128	@ 0x80
 80194c8:	0352      	lsls	r2, r2, #13
 80194ca:	4313      	orrs	r3, r2
 80194cc:	9301      	str	r3, [sp, #4]
 80194ce:	2e00      	cmp	r6, #0
 80194d0:	d025      	beq.n	801951e <__d2b+0x7e>
 80194d2:	4668      	mov	r0, sp
 80194d4:	9600      	str	r6, [sp, #0]
 80194d6:	f7ff fd6c 	bl	8018fb2 <__lo0bits>
 80194da:	9b01      	ldr	r3, [sp, #4]
 80194dc:	9900      	ldr	r1, [sp, #0]
 80194de:	2800      	cmp	r0, #0
 80194e0:	d01b      	beq.n	801951a <__d2b+0x7a>
 80194e2:	2220      	movs	r2, #32
 80194e4:	001e      	movs	r6, r3
 80194e6:	1a12      	subs	r2, r2, r0
 80194e8:	4096      	lsls	r6, r2
 80194ea:	0032      	movs	r2, r6
 80194ec:	40c3      	lsrs	r3, r0
 80194ee:	430a      	orrs	r2, r1
 80194f0:	6162      	str	r2, [r4, #20]
 80194f2:	9301      	str	r3, [sp, #4]
 80194f4:	9e01      	ldr	r6, [sp, #4]
 80194f6:	61a6      	str	r6, [r4, #24]
 80194f8:	1e73      	subs	r3, r6, #1
 80194fa:	419e      	sbcs	r6, r3
 80194fc:	3601      	adds	r6, #1
 80194fe:	6126      	str	r6, [r4, #16]
 8019500:	2d00      	cmp	r5, #0
 8019502:	d014      	beq.n	801952e <__d2b+0x8e>
 8019504:	2635      	movs	r6, #53	@ 0x35
 8019506:	4b13      	ldr	r3, [pc, #76]	@ (8019554 <__d2b+0xb4>)
 8019508:	18ed      	adds	r5, r5, r3
 801950a:	9b08      	ldr	r3, [sp, #32]
 801950c:	182d      	adds	r5, r5, r0
 801950e:	601d      	str	r5, [r3, #0]
 8019510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019512:	1a36      	subs	r6, r6, r0
 8019514:	601e      	str	r6, [r3, #0]
 8019516:	0020      	movs	r0, r4
 8019518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801951a:	6161      	str	r1, [r4, #20]
 801951c:	e7ea      	b.n	80194f4 <__d2b+0x54>
 801951e:	a801      	add	r0, sp, #4
 8019520:	f7ff fd47 	bl	8018fb2 <__lo0bits>
 8019524:	9b01      	ldr	r3, [sp, #4]
 8019526:	2601      	movs	r6, #1
 8019528:	6163      	str	r3, [r4, #20]
 801952a:	3020      	adds	r0, #32
 801952c:	e7e7      	b.n	80194fe <__d2b+0x5e>
 801952e:	4b0a      	ldr	r3, [pc, #40]	@ (8019558 <__d2b+0xb8>)
 8019530:	18c0      	adds	r0, r0, r3
 8019532:	9b08      	ldr	r3, [sp, #32]
 8019534:	6018      	str	r0, [r3, #0]
 8019536:	4b09      	ldr	r3, [pc, #36]	@ (801955c <__d2b+0xbc>)
 8019538:	18f3      	adds	r3, r6, r3
 801953a:	009b      	lsls	r3, r3, #2
 801953c:	18e3      	adds	r3, r4, r3
 801953e:	6958      	ldr	r0, [r3, #20]
 8019540:	f7ff fd16 	bl	8018f70 <__hi0bits>
 8019544:	0176      	lsls	r6, r6, #5
 8019546:	e7e3      	b.n	8019510 <__d2b+0x70>
 8019548:	0802d4c8 	.word	0x0802d4c8
 801954c:	0802d4d9 	.word	0x0802d4d9
 8019550:	0000030f 	.word	0x0000030f
 8019554:	fffffbcd 	.word	0xfffffbcd
 8019558:	fffffbce 	.word	0xfffffbce
 801955c:	3fffffff 	.word	0x3fffffff

08019560 <__ssputs_r>:
 8019560:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019562:	688e      	ldr	r6, [r1, #8]
 8019564:	b085      	sub	sp, #20
 8019566:	001f      	movs	r7, r3
 8019568:	000c      	movs	r4, r1
 801956a:	680b      	ldr	r3, [r1, #0]
 801956c:	9002      	str	r0, [sp, #8]
 801956e:	9203      	str	r2, [sp, #12]
 8019570:	42be      	cmp	r6, r7
 8019572:	d830      	bhi.n	80195d6 <__ssputs_r+0x76>
 8019574:	210c      	movs	r1, #12
 8019576:	5e62      	ldrsh	r2, [r4, r1]
 8019578:	2190      	movs	r1, #144	@ 0x90
 801957a:	00c9      	lsls	r1, r1, #3
 801957c:	420a      	tst	r2, r1
 801957e:	d028      	beq.n	80195d2 <__ssputs_r+0x72>
 8019580:	2003      	movs	r0, #3
 8019582:	6921      	ldr	r1, [r4, #16]
 8019584:	1a5b      	subs	r3, r3, r1
 8019586:	9301      	str	r3, [sp, #4]
 8019588:	6963      	ldr	r3, [r4, #20]
 801958a:	4343      	muls	r3, r0
 801958c:	9801      	ldr	r0, [sp, #4]
 801958e:	0fdd      	lsrs	r5, r3, #31
 8019590:	18ed      	adds	r5, r5, r3
 8019592:	1c7b      	adds	r3, r7, #1
 8019594:	181b      	adds	r3, r3, r0
 8019596:	106d      	asrs	r5, r5, #1
 8019598:	42ab      	cmp	r3, r5
 801959a:	d900      	bls.n	801959e <__ssputs_r+0x3e>
 801959c:	001d      	movs	r5, r3
 801959e:	0552      	lsls	r2, r2, #21
 80195a0:	d528      	bpl.n	80195f4 <__ssputs_r+0x94>
 80195a2:	0029      	movs	r1, r5
 80195a4:	9802      	ldr	r0, [sp, #8]
 80195a6:	f7ff fba7 	bl	8018cf8 <_malloc_r>
 80195aa:	1e06      	subs	r6, r0, #0
 80195ac:	d02c      	beq.n	8019608 <__ssputs_r+0xa8>
 80195ae:	9a01      	ldr	r2, [sp, #4]
 80195b0:	6921      	ldr	r1, [r4, #16]
 80195b2:	f7fe fc9f 	bl	8017ef4 <memcpy>
 80195b6:	89a2      	ldrh	r2, [r4, #12]
 80195b8:	4b18      	ldr	r3, [pc, #96]	@ (801961c <__ssputs_r+0xbc>)
 80195ba:	401a      	ands	r2, r3
 80195bc:	2380      	movs	r3, #128	@ 0x80
 80195be:	4313      	orrs	r3, r2
 80195c0:	81a3      	strh	r3, [r4, #12]
 80195c2:	9b01      	ldr	r3, [sp, #4]
 80195c4:	6126      	str	r6, [r4, #16]
 80195c6:	18f6      	adds	r6, r6, r3
 80195c8:	6026      	str	r6, [r4, #0]
 80195ca:	003e      	movs	r6, r7
 80195cc:	6165      	str	r5, [r4, #20]
 80195ce:	1aed      	subs	r5, r5, r3
 80195d0:	60a5      	str	r5, [r4, #8]
 80195d2:	42be      	cmp	r6, r7
 80195d4:	d900      	bls.n	80195d8 <__ssputs_r+0x78>
 80195d6:	003e      	movs	r6, r7
 80195d8:	0032      	movs	r2, r6
 80195da:	9903      	ldr	r1, [sp, #12]
 80195dc:	6820      	ldr	r0, [r4, #0]
 80195de:	f000 fbb3 	bl	8019d48 <memmove>
 80195e2:	2000      	movs	r0, #0
 80195e4:	68a3      	ldr	r3, [r4, #8]
 80195e6:	1b9b      	subs	r3, r3, r6
 80195e8:	60a3      	str	r3, [r4, #8]
 80195ea:	6823      	ldr	r3, [r4, #0]
 80195ec:	199b      	adds	r3, r3, r6
 80195ee:	6023      	str	r3, [r4, #0]
 80195f0:	b005      	add	sp, #20
 80195f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80195f4:	002a      	movs	r2, r5
 80195f6:	9802      	ldr	r0, [sp, #8]
 80195f8:	f000 fc29 	bl	8019e4e <_realloc_r>
 80195fc:	1e06      	subs	r6, r0, #0
 80195fe:	d1e0      	bne.n	80195c2 <__ssputs_r+0x62>
 8019600:	6921      	ldr	r1, [r4, #16]
 8019602:	9802      	ldr	r0, [sp, #8]
 8019604:	f7ff fb02 	bl	8018c0c <_free_r>
 8019608:	230c      	movs	r3, #12
 801960a:	2001      	movs	r0, #1
 801960c:	9a02      	ldr	r2, [sp, #8]
 801960e:	4240      	negs	r0, r0
 8019610:	6013      	str	r3, [r2, #0]
 8019612:	89a2      	ldrh	r2, [r4, #12]
 8019614:	3334      	adds	r3, #52	@ 0x34
 8019616:	4313      	orrs	r3, r2
 8019618:	81a3      	strh	r3, [r4, #12]
 801961a:	e7e9      	b.n	80195f0 <__ssputs_r+0x90>
 801961c:	fffffb7f 	.word	0xfffffb7f

08019620 <_svfiprintf_r>:
 8019620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019622:	b0a1      	sub	sp, #132	@ 0x84
 8019624:	9003      	str	r0, [sp, #12]
 8019626:	001d      	movs	r5, r3
 8019628:	898b      	ldrh	r3, [r1, #12]
 801962a:	000f      	movs	r7, r1
 801962c:	0016      	movs	r6, r2
 801962e:	061b      	lsls	r3, r3, #24
 8019630:	d511      	bpl.n	8019656 <_svfiprintf_r+0x36>
 8019632:	690b      	ldr	r3, [r1, #16]
 8019634:	2b00      	cmp	r3, #0
 8019636:	d10e      	bne.n	8019656 <_svfiprintf_r+0x36>
 8019638:	2140      	movs	r1, #64	@ 0x40
 801963a:	f7ff fb5d 	bl	8018cf8 <_malloc_r>
 801963e:	6038      	str	r0, [r7, #0]
 8019640:	6138      	str	r0, [r7, #16]
 8019642:	2800      	cmp	r0, #0
 8019644:	d105      	bne.n	8019652 <_svfiprintf_r+0x32>
 8019646:	230c      	movs	r3, #12
 8019648:	9a03      	ldr	r2, [sp, #12]
 801964a:	6013      	str	r3, [r2, #0]
 801964c:	2001      	movs	r0, #1
 801964e:	4240      	negs	r0, r0
 8019650:	e0cf      	b.n	80197f2 <_svfiprintf_r+0x1d2>
 8019652:	2340      	movs	r3, #64	@ 0x40
 8019654:	617b      	str	r3, [r7, #20]
 8019656:	2300      	movs	r3, #0
 8019658:	ac08      	add	r4, sp, #32
 801965a:	6163      	str	r3, [r4, #20]
 801965c:	3320      	adds	r3, #32
 801965e:	7663      	strb	r3, [r4, #25]
 8019660:	3310      	adds	r3, #16
 8019662:	76a3      	strb	r3, [r4, #26]
 8019664:	9507      	str	r5, [sp, #28]
 8019666:	0035      	movs	r5, r6
 8019668:	782b      	ldrb	r3, [r5, #0]
 801966a:	2b00      	cmp	r3, #0
 801966c:	d001      	beq.n	8019672 <_svfiprintf_r+0x52>
 801966e:	2b25      	cmp	r3, #37	@ 0x25
 8019670:	d148      	bne.n	8019704 <_svfiprintf_r+0xe4>
 8019672:	1bab      	subs	r3, r5, r6
 8019674:	9305      	str	r3, [sp, #20]
 8019676:	42b5      	cmp	r5, r6
 8019678:	d00b      	beq.n	8019692 <_svfiprintf_r+0x72>
 801967a:	0032      	movs	r2, r6
 801967c:	0039      	movs	r1, r7
 801967e:	9803      	ldr	r0, [sp, #12]
 8019680:	f7ff ff6e 	bl	8019560 <__ssputs_r>
 8019684:	3001      	adds	r0, #1
 8019686:	d100      	bne.n	801968a <_svfiprintf_r+0x6a>
 8019688:	e0ae      	b.n	80197e8 <_svfiprintf_r+0x1c8>
 801968a:	6963      	ldr	r3, [r4, #20]
 801968c:	9a05      	ldr	r2, [sp, #20]
 801968e:	189b      	adds	r3, r3, r2
 8019690:	6163      	str	r3, [r4, #20]
 8019692:	782b      	ldrb	r3, [r5, #0]
 8019694:	2b00      	cmp	r3, #0
 8019696:	d100      	bne.n	801969a <_svfiprintf_r+0x7a>
 8019698:	e0a6      	b.n	80197e8 <_svfiprintf_r+0x1c8>
 801969a:	2201      	movs	r2, #1
 801969c:	2300      	movs	r3, #0
 801969e:	4252      	negs	r2, r2
 80196a0:	6062      	str	r2, [r4, #4]
 80196a2:	a904      	add	r1, sp, #16
 80196a4:	3254      	adds	r2, #84	@ 0x54
 80196a6:	1852      	adds	r2, r2, r1
 80196a8:	1c6e      	adds	r6, r5, #1
 80196aa:	6023      	str	r3, [r4, #0]
 80196ac:	60e3      	str	r3, [r4, #12]
 80196ae:	60a3      	str	r3, [r4, #8]
 80196b0:	7013      	strb	r3, [r2, #0]
 80196b2:	65a3      	str	r3, [r4, #88]	@ 0x58
 80196b4:	4b54      	ldr	r3, [pc, #336]	@ (8019808 <_svfiprintf_r+0x1e8>)
 80196b6:	2205      	movs	r2, #5
 80196b8:	0018      	movs	r0, r3
 80196ba:	7831      	ldrb	r1, [r6, #0]
 80196bc:	9305      	str	r3, [sp, #20]
 80196be:	f7fe fc0e 	bl	8017ede <memchr>
 80196c2:	1c75      	adds	r5, r6, #1
 80196c4:	2800      	cmp	r0, #0
 80196c6:	d11f      	bne.n	8019708 <_svfiprintf_r+0xe8>
 80196c8:	6822      	ldr	r2, [r4, #0]
 80196ca:	06d3      	lsls	r3, r2, #27
 80196cc:	d504      	bpl.n	80196d8 <_svfiprintf_r+0xb8>
 80196ce:	2353      	movs	r3, #83	@ 0x53
 80196d0:	a904      	add	r1, sp, #16
 80196d2:	185b      	adds	r3, r3, r1
 80196d4:	2120      	movs	r1, #32
 80196d6:	7019      	strb	r1, [r3, #0]
 80196d8:	0713      	lsls	r3, r2, #28
 80196da:	d504      	bpl.n	80196e6 <_svfiprintf_r+0xc6>
 80196dc:	2353      	movs	r3, #83	@ 0x53
 80196de:	a904      	add	r1, sp, #16
 80196e0:	185b      	adds	r3, r3, r1
 80196e2:	212b      	movs	r1, #43	@ 0x2b
 80196e4:	7019      	strb	r1, [r3, #0]
 80196e6:	7833      	ldrb	r3, [r6, #0]
 80196e8:	2b2a      	cmp	r3, #42	@ 0x2a
 80196ea:	d016      	beq.n	801971a <_svfiprintf_r+0xfa>
 80196ec:	0035      	movs	r5, r6
 80196ee:	2100      	movs	r1, #0
 80196f0:	200a      	movs	r0, #10
 80196f2:	68e3      	ldr	r3, [r4, #12]
 80196f4:	782a      	ldrb	r2, [r5, #0]
 80196f6:	1c6e      	adds	r6, r5, #1
 80196f8:	3a30      	subs	r2, #48	@ 0x30
 80196fa:	2a09      	cmp	r2, #9
 80196fc:	d950      	bls.n	80197a0 <_svfiprintf_r+0x180>
 80196fe:	2900      	cmp	r1, #0
 8019700:	d111      	bne.n	8019726 <_svfiprintf_r+0x106>
 8019702:	e017      	b.n	8019734 <_svfiprintf_r+0x114>
 8019704:	3501      	adds	r5, #1
 8019706:	e7af      	b.n	8019668 <_svfiprintf_r+0x48>
 8019708:	9b05      	ldr	r3, [sp, #20]
 801970a:	6822      	ldr	r2, [r4, #0]
 801970c:	1ac0      	subs	r0, r0, r3
 801970e:	2301      	movs	r3, #1
 8019710:	4083      	lsls	r3, r0
 8019712:	4313      	orrs	r3, r2
 8019714:	002e      	movs	r6, r5
 8019716:	6023      	str	r3, [r4, #0]
 8019718:	e7cc      	b.n	80196b4 <_svfiprintf_r+0x94>
 801971a:	9b07      	ldr	r3, [sp, #28]
 801971c:	1d19      	adds	r1, r3, #4
 801971e:	681b      	ldr	r3, [r3, #0]
 8019720:	9107      	str	r1, [sp, #28]
 8019722:	2b00      	cmp	r3, #0
 8019724:	db01      	blt.n	801972a <_svfiprintf_r+0x10a>
 8019726:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019728:	e004      	b.n	8019734 <_svfiprintf_r+0x114>
 801972a:	425b      	negs	r3, r3
 801972c:	60e3      	str	r3, [r4, #12]
 801972e:	2302      	movs	r3, #2
 8019730:	4313      	orrs	r3, r2
 8019732:	6023      	str	r3, [r4, #0]
 8019734:	782b      	ldrb	r3, [r5, #0]
 8019736:	2b2e      	cmp	r3, #46	@ 0x2e
 8019738:	d10c      	bne.n	8019754 <_svfiprintf_r+0x134>
 801973a:	786b      	ldrb	r3, [r5, #1]
 801973c:	2b2a      	cmp	r3, #42	@ 0x2a
 801973e:	d134      	bne.n	80197aa <_svfiprintf_r+0x18a>
 8019740:	9b07      	ldr	r3, [sp, #28]
 8019742:	3502      	adds	r5, #2
 8019744:	1d1a      	adds	r2, r3, #4
 8019746:	681b      	ldr	r3, [r3, #0]
 8019748:	9207      	str	r2, [sp, #28]
 801974a:	2b00      	cmp	r3, #0
 801974c:	da01      	bge.n	8019752 <_svfiprintf_r+0x132>
 801974e:	2301      	movs	r3, #1
 8019750:	425b      	negs	r3, r3
 8019752:	9309      	str	r3, [sp, #36]	@ 0x24
 8019754:	4e2d      	ldr	r6, [pc, #180]	@ (801980c <_svfiprintf_r+0x1ec>)
 8019756:	2203      	movs	r2, #3
 8019758:	0030      	movs	r0, r6
 801975a:	7829      	ldrb	r1, [r5, #0]
 801975c:	f7fe fbbf 	bl	8017ede <memchr>
 8019760:	2800      	cmp	r0, #0
 8019762:	d006      	beq.n	8019772 <_svfiprintf_r+0x152>
 8019764:	2340      	movs	r3, #64	@ 0x40
 8019766:	1b80      	subs	r0, r0, r6
 8019768:	4083      	lsls	r3, r0
 801976a:	6822      	ldr	r2, [r4, #0]
 801976c:	3501      	adds	r5, #1
 801976e:	4313      	orrs	r3, r2
 8019770:	6023      	str	r3, [r4, #0]
 8019772:	7829      	ldrb	r1, [r5, #0]
 8019774:	2206      	movs	r2, #6
 8019776:	4826      	ldr	r0, [pc, #152]	@ (8019810 <_svfiprintf_r+0x1f0>)
 8019778:	1c6e      	adds	r6, r5, #1
 801977a:	7621      	strb	r1, [r4, #24]
 801977c:	f7fe fbaf 	bl	8017ede <memchr>
 8019780:	2800      	cmp	r0, #0
 8019782:	d038      	beq.n	80197f6 <_svfiprintf_r+0x1d6>
 8019784:	4b23      	ldr	r3, [pc, #140]	@ (8019814 <_svfiprintf_r+0x1f4>)
 8019786:	2b00      	cmp	r3, #0
 8019788:	d122      	bne.n	80197d0 <_svfiprintf_r+0x1b0>
 801978a:	2207      	movs	r2, #7
 801978c:	9b07      	ldr	r3, [sp, #28]
 801978e:	3307      	adds	r3, #7
 8019790:	4393      	bics	r3, r2
 8019792:	3308      	adds	r3, #8
 8019794:	9307      	str	r3, [sp, #28]
 8019796:	6963      	ldr	r3, [r4, #20]
 8019798:	9a04      	ldr	r2, [sp, #16]
 801979a:	189b      	adds	r3, r3, r2
 801979c:	6163      	str	r3, [r4, #20]
 801979e:	e762      	b.n	8019666 <_svfiprintf_r+0x46>
 80197a0:	4343      	muls	r3, r0
 80197a2:	0035      	movs	r5, r6
 80197a4:	2101      	movs	r1, #1
 80197a6:	189b      	adds	r3, r3, r2
 80197a8:	e7a4      	b.n	80196f4 <_svfiprintf_r+0xd4>
 80197aa:	2300      	movs	r3, #0
 80197ac:	200a      	movs	r0, #10
 80197ae:	0019      	movs	r1, r3
 80197b0:	3501      	adds	r5, #1
 80197b2:	6063      	str	r3, [r4, #4]
 80197b4:	782a      	ldrb	r2, [r5, #0]
 80197b6:	1c6e      	adds	r6, r5, #1
 80197b8:	3a30      	subs	r2, #48	@ 0x30
 80197ba:	2a09      	cmp	r2, #9
 80197bc:	d903      	bls.n	80197c6 <_svfiprintf_r+0x1a6>
 80197be:	2b00      	cmp	r3, #0
 80197c0:	d0c8      	beq.n	8019754 <_svfiprintf_r+0x134>
 80197c2:	9109      	str	r1, [sp, #36]	@ 0x24
 80197c4:	e7c6      	b.n	8019754 <_svfiprintf_r+0x134>
 80197c6:	4341      	muls	r1, r0
 80197c8:	0035      	movs	r5, r6
 80197ca:	2301      	movs	r3, #1
 80197cc:	1889      	adds	r1, r1, r2
 80197ce:	e7f1      	b.n	80197b4 <_svfiprintf_r+0x194>
 80197d0:	aa07      	add	r2, sp, #28
 80197d2:	9200      	str	r2, [sp, #0]
 80197d4:	0021      	movs	r1, r4
 80197d6:	003a      	movs	r2, r7
 80197d8:	4b0f      	ldr	r3, [pc, #60]	@ (8019818 <_svfiprintf_r+0x1f8>)
 80197da:	9803      	ldr	r0, [sp, #12]
 80197dc:	f7fd fd9a 	bl	8017314 <_printf_float>
 80197e0:	9004      	str	r0, [sp, #16]
 80197e2:	9b04      	ldr	r3, [sp, #16]
 80197e4:	3301      	adds	r3, #1
 80197e6:	d1d6      	bne.n	8019796 <_svfiprintf_r+0x176>
 80197e8:	89bb      	ldrh	r3, [r7, #12]
 80197ea:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80197ec:	065b      	lsls	r3, r3, #25
 80197ee:	d500      	bpl.n	80197f2 <_svfiprintf_r+0x1d2>
 80197f0:	e72c      	b.n	801964c <_svfiprintf_r+0x2c>
 80197f2:	b021      	add	sp, #132	@ 0x84
 80197f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80197f6:	aa07      	add	r2, sp, #28
 80197f8:	9200      	str	r2, [sp, #0]
 80197fa:	0021      	movs	r1, r4
 80197fc:	003a      	movs	r2, r7
 80197fe:	4b06      	ldr	r3, [pc, #24]	@ (8019818 <_svfiprintf_r+0x1f8>)
 8019800:	9803      	ldr	r0, [sp, #12]
 8019802:	f7fe f835 	bl	8017870 <_printf_i>
 8019806:	e7eb      	b.n	80197e0 <_svfiprintf_r+0x1c0>
 8019808:	0802d630 	.word	0x0802d630
 801980c:	0802d636 	.word	0x0802d636
 8019810:	0802d63a 	.word	0x0802d63a
 8019814:	08017315 	.word	0x08017315
 8019818:	08019561 	.word	0x08019561

0801981c <__sfputc_r>:
 801981c:	6893      	ldr	r3, [r2, #8]
 801981e:	b510      	push	{r4, lr}
 8019820:	3b01      	subs	r3, #1
 8019822:	6093      	str	r3, [r2, #8]
 8019824:	2b00      	cmp	r3, #0
 8019826:	da04      	bge.n	8019832 <__sfputc_r+0x16>
 8019828:	6994      	ldr	r4, [r2, #24]
 801982a:	42a3      	cmp	r3, r4
 801982c:	db07      	blt.n	801983e <__sfputc_r+0x22>
 801982e:	290a      	cmp	r1, #10
 8019830:	d005      	beq.n	801983e <__sfputc_r+0x22>
 8019832:	6813      	ldr	r3, [r2, #0]
 8019834:	1c58      	adds	r0, r3, #1
 8019836:	6010      	str	r0, [r2, #0]
 8019838:	7019      	strb	r1, [r3, #0]
 801983a:	0008      	movs	r0, r1
 801983c:	bd10      	pop	{r4, pc}
 801983e:	f000 f9e2 	bl	8019c06 <__swbuf_r>
 8019842:	0001      	movs	r1, r0
 8019844:	e7f9      	b.n	801983a <__sfputc_r+0x1e>

08019846 <__sfputs_r>:
 8019846:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019848:	0006      	movs	r6, r0
 801984a:	000f      	movs	r7, r1
 801984c:	0014      	movs	r4, r2
 801984e:	18d5      	adds	r5, r2, r3
 8019850:	42ac      	cmp	r4, r5
 8019852:	d101      	bne.n	8019858 <__sfputs_r+0x12>
 8019854:	2000      	movs	r0, #0
 8019856:	e007      	b.n	8019868 <__sfputs_r+0x22>
 8019858:	7821      	ldrb	r1, [r4, #0]
 801985a:	003a      	movs	r2, r7
 801985c:	0030      	movs	r0, r6
 801985e:	f7ff ffdd 	bl	801981c <__sfputc_r>
 8019862:	3401      	adds	r4, #1
 8019864:	1c43      	adds	r3, r0, #1
 8019866:	d1f3      	bne.n	8019850 <__sfputs_r+0xa>
 8019868:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801986c <_vfiprintf_r>:
 801986c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801986e:	b0a1      	sub	sp, #132	@ 0x84
 8019870:	000f      	movs	r7, r1
 8019872:	0015      	movs	r5, r2
 8019874:	001e      	movs	r6, r3
 8019876:	9003      	str	r0, [sp, #12]
 8019878:	2800      	cmp	r0, #0
 801987a:	d004      	beq.n	8019886 <_vfiprintf_r+0x1a>
 801987c:	6a03      	ldr	r3, [r0, #32]
 801987e:	2b00      	cmp	r3, #0
 8019880:	d101      	bne.n	8019886 <_vfiprintf_r+0x1a>
 8019882:	f7fe f993 	bl	8017bac <__sinit>
 8019886:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019888:	07db      	lsls	r3, r3, #31
 801988a:	d405      	bmi.n	8019898 <_vfiprintf_r+0x2c>
 801988c:	89bb      	ldrh	r3, [r7, #12]
 801988e:	059b      	lsls	r3, r3, #22
 8019890:	d402      	bmi.n	8019898 <_vfiprintf_r+0x2c>
 8019892:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019894:	f7fe fb21 	bl	8017eda <__retarget_lock_acquire_recursive>
 8019898:	89bb      	ldrh	r3, [r7, #12]
 801989a:	071b      	lsls	r3, r3, #28
 801989c:	d502      	bpl.n	80198a4 <_vfiprintf_r+0x38>
 801989e:	693b      	ldr	r3, [r7, #16]
 80198a0:	2b00      	cmp	r3, #0
 80198a2:	d113      	bne.n	80198cc <_vfiprintf_r+0x60>
 80198a4:	0039      	movs	r1, r7
 80198a6:	9803      	ldr	r0, [sp, #12]
 80198a8:	f000 f9f0 	bl	8019c8c <__swsetup_r>
 80198ac:	2800      	cmp	r0, #0
 80198ae:	d00d      	beq.n	80198cc <_vfiprintf_r+0x60>
 80198b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80198b2:	07db      	lsls	r3, r3, #31
 80198b4:	d503      	bpl.n	80198be <_vfiprintf_r+0x52>
 80198b6:	2001      	movs	r0, #1
 80198b8:	4240      	negs	r0, r0
 80198ba:	b021      	add	sp, #132	@ 0x84
 80198bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80198be:	89bb      	ldrh	r3, [r7, #12]
 80198c0:	059b      	lsls	r3, r3, #22
 80198c2:	d4f8      	bmi.n	80198b6 <_vfiprintf_r+0x4a>
 80198c4:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80198c6:	f7fe fb09 	bl	8017edc <__retarget_lock_release_recursive>
 80198ca:	e7f4      	b.n	80198b6 <_vfiprintf_r+0x4a>
 80198cc:	2300      	movs	r3, #0
 80198ce:	ac08      	add	r4, sp, #32
 80198d0:	6163      	str	r3, [r4, #20]
 80198d2:	3320      	adds	r3, #32
 80198d4:	7663      	strb	r3, [r4, #25]
 80198d6:	3310      	adds	r3, #16
 80198d8:	76a3      	strb	r3, [r4, #26]
 80198da:	9607      	str	r6, [sp, #28]
 80198dc:	002e      	movs	r6, r5
 80198de:	7833      	ldrb	r3, [r6, #0]
 80198e0:	2b00      	cmp	r3, #0
 80198e2:	d001      	beq.n	80198e8 <_vfiprintf_r+0x7c>
 80198e4:	2b25      	cmp	r3, #37	@ 0x25
 80198e6:	d148      	bne.n	801997a <_vfiprintf_r+0x10e>
 80198e8:	1b73      	subs	r3, r6, r5
 80198ea:	9305      	str	r3, [sp, #20]
 80198ec:	42ae      	cmp	r6, r5
 80198ee:	d00b      	beq.n	8019908 <_vfiprintf_r+0x9c>
 80198f0:	002a      	movs	r2, r5
 80198f2:	0039      	movs	r1, r7
 80198f4:	9803      	ldr	r0, [sp, #12]
 80198f6:	f7ff ffa6 	bl	8019846 <__sfputs_r>
 80198fa:	3001      	adds	r0, #1
 80198fc:	d100      	bne.n	8019900 <_vfiprintf_r+0x94>
 80198fe:	e0ae      	b.n	8019a5e <_vfiprintf_r+0x1f2>
 8019900:	6963      	ldr	r3, [r4, #20]
 8019902:	9a05      	ldr	r2, [sp, #20]
 8019904:	189b      	adds	r3, r3, r2
 8019906:	6163      	str	r3, [r4, #20]
 8019908:	7833      	ldrb	r3, [r6, #0]
 801990a:	2b00      	cmp	r3, #0
 801990c:	d100      	bne.n	8019910 <_vfiprintf_r+0xa4>
 801990e:	e0a6      	b.n	8019a5e <_vfiprintf_r+0x1f2>
 8019910:	2201      	movs	r2, #1
 8019912:	2300      	movs	r3, #0
 8019914:	4252      	negs	r2, r2
 8019916:	6062      	str	r2, [r4, #4]
 8019918:	a904      	add	r1, sp, #16
 801991a:	3254      	adds	r2, #84	@ 0x54
 801991c:	1852      	adds	r2, r2, r1
 801991e:	1c75      	adds	r5, r6, #1
 8019920:	6023      	str	r3, [r4, #0]
 8019922:	60e3      	str	r3, [r4, #12]
 8019924:	60a3      	str	r3, [r4, #8]
 8019926:	7013      	strb	r3, [r2, #0]
 8019928:	65a3      	str	r3, [r4, #88]	@ 0x58
 801992a:	4b59      	ldr	r3, [pc, #356]	@ (8019a90 <_vfiprintf_r+0x224>)
 801992c:	2205      	movs	r2, #5
 801992e:	0018      	movs	r0, r3
 8019930:	7829      	ldrb	r1, [r5, #0]
 8019932:	9305      	str	r3, [sp, #20]
 8019934:	f7fe fad3 	bl	8017ede <memchr>
 8019938:	1c6e      	adds	r6, r5, #1
 801993a:	2800      	cmp	r0, #0
 801993c:	d11f      	bne.n	801997e <_vfiprintf_r+0x112>
 801993e:	6822      	ldr	r2, [r4, #0]
 8019940:	06d3      	lsls	r3, r2, #27
 8019942:	d504      	bpl.n	801994e <_vfiprintf_r+0xe2>
 8019944:	2353      	movs	r3, #83	@ 0x53
 8019946:	a904      	add	r1, sp, #16
 8019948:	185b      	adds	r3, r3, r1
 801994a:	2120      	movs	r1, #32
 801994c:	7019      	strb	r1, [r3, #0]
 801994e:	0713      	lsls	r3, r2, #28
 8019950:	d504      	bpl.n	801995c <_vfiprintf_r+0xf0>
 8019952:	2353      	movs	r3, #83	@ 0x53
 8019954:	a904      	add	r1, sp, #16
 8019956:	185b      	adds	r3, r3, r1
 8019958:	212b      	movs	r1, #43	@ 0x2b
 801995a:	7019      	strb	r1, [r3, #0]
 801995c:	782b      	ldrb	r3, [r5, #0]
 801995e:	2b2a      	cmp	r3, #42	@ 0x2a
 8019960:	d016      	beq.n	8019990 <_vfiprintf_r+0x124>
 8019962:	002e      	movs	r6, r5
 8019964:	2100      	movs	r1, #0
 8019966:	200a      	movs	r0, #10
 8019968:	68e3      	ldr	r3, [r4, #12]
 801996a:	7832      	ldrb	r2, [r6, #0]
 801996c:	1c75      	adds	r5, r6, #1
 801996e:	3a30      	subs	r2, #48	@ 0x30
 8019970:	2a09      	cmp	r2, #9
 8019972:	d950      	bls.n	8019a16 <_vfiprintf_r+0x1aa>
 8019974:	2900      	cmp	r1, #0
 8019976:	d111      	bne.n	801999c <_vfiprintf_r+0x130>
 8019978:	e017      	b.n	80199aa <_vfiprintf_r+0x13e>
 801997a:	3601      	adds	r6, #1
 801997c:	e7af      	b.n	80198de <_vfiprintf_r+0x72>
 801997e:	9b05      	ldr	r3, [sp, #20]
 8019980:	6822      	ldr	r2, [r4, #0]
 8019982:	1ac0      	subs	r0, r0, r3
 8019984:	2301      	movs	r3, #1
 8019986:	4083      	lsls	r3, r0
 8019988:	4313      	orrs	r3, r2
 801998a:	0035      	movs	r5, r6
 801998c:	6023      	str	r3, [r4, #0]
 801998e:	e7cc      	b.n	801992a <_vfiprintf_r+0xbe>
 8019990:	9b07      	ldr	r3, [sp, #28]
 8019992:	1d19      	adds	r1, r3, #4
 8019994:	681b      	ldr	r3, [r3, #0]
 8019996:	9107      	str	r1, [sp, #28]
 8019998:	2b00      	cmp	r3, #0
 801999a:	db01      	blt.n	80199a0 <_vfiprintf_r+0x134>
 801999c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801999e:	e004      	b.n	80199aa <_vfiprintf_r+0x13e>
 80199a0:	425b      	negs	r3, r3
 80199a2:	60e3      	str	r3, [r4, #12]
 80199a4:	2302      	movs	r3, #2
 80199a6:	4313      	orrs	r3, r2
 80199a8:	6023      	str	r3, [r4, #0]
 80199aa:	7833      	ldrb	r3, [r6, #0]
 80199ac:	2b2e      	cmp	r3, #46	@ 0x2e
 80199ae:	d10c      	bne.n	80199ca <_vfiprintf_r+0x15e>
 80199b0:	7873      	ldrb	r3, [r6, #1]
 80199b2:	2b2a      	cmp	r3, #42	@ 0x2a
 80199b4:	d134      	bne.n	8019a20 <_vfiprintf_r+0x1b4>
 80199b6:	9b07      	ldr	r3, [sp, #28]
 80199b8:	3602      	adds	r6, #2
 80199ba:	1d1a      	adds	r2, r3, #4
 80199bc:	681b      	ldr	r3, [r3, #0]
 80199be:	9207      	str	r2, [sp, #28]
 80199c0:	2b00      	cmp	r3, #0
 80199c2:	da01      	bge.n	80199c8 <_vfiprintf_r+0x15c>
 80199c4:	2301      	movs	r3, #1
 80199c6:	425b      	negs	r3, r3
 80199c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80199ca:	4d32      	ldr	r5, [pc, #200]	@ (8019a94 <_vfiprintf_r+0x228>)
 80199cc:	2203      	movs	r2, #3
 80199ce:	0028      	movs	r0, r5
 80199d0:	7831      	ldrb	r1, [r6, #0]
 80199d2:	f7fe fa84 	bl	8017ede <memchr>
 80199d6:	2800      	cmp	r0, #0
 80199d8:	d006      	beq.n	80199e8 <_vfiprintf_r+0x17c>
 80199da:	2340      	movs	r3, #64	@ 0x40
 80199dc:	1b40      	subs	r0, r0, r5
 80199de:	4083      	lsls	r3, r0
 80199e0:	6822      	ldr	r2, [r4, #0]
 80199e2:	3601      	adds	r6, #1
 80199e4:	4313      	orrs	r3, r2
 80199e6:	6023      	str	r3, [r4, #0]
 80199e8:	7831      	ldrb	r1, [r6, #0]
 80199ea:	2206      	movs	r2, #6
 80199ec:	482a      	ldr	r0, [pc, #168]	@ (8019a98 <_vfiprintf_r+0x22c>)
 80199ee:	1c75      	adds	r5, r6, #1
 80199f0:	7621      	strb	r1, [r4, #24]
 80199f2:	f7fe fa74 	bl	8017ede <memchr>
 80199f6:	2800      	cmp	r0, #0
 80199f8:	d040      	beq.n	8019a7c <_vfiprintf_r+0x210>
 80199fa:	4b28      	ldr	r3, [pc, #160]	@ (8019a9c <_vfiprintf_r+0x230>)
 80199fc:	2b00      	cmp	r3, #0
 80199fe:	d122      	bne.n	8019a46 <_vfiprintf_r+0x1da>
 8019a00:	2207      	movs	r2, #7
 8019a02:	9b07      	ldr	r3, [sp, #28]
 8019a04:	3307      	adds	r3, #7
 8019a06:	4393      	bics	r3, r2
 8019a08:	3308      	adds	r3, #8
 8019a0a:	9307      	str	r3, [sp, #28]
 8019a0c:	6963      	ldr	r3, [r4, #20]
 8019a0e:	9a04      	ldr	r2, [sp, #16]
 8019a10:	189b      	adds	r3, r3, r2
 8019a12:	6163      	str	r3, [r4, #20]
 8019a14:	e762      	b.n	80198dc <_vfiprintf_r+0x70>
 8019a16:	4343      	muls	r3, r0
 8019a18:	002e      	movs	r6, r5
 8019a1a:	2101      	movs	r1, #1
 8019a1c:	189b      	adds	r3, r3, r2
 8019a1e:	e7a4      	b.n	801996a <_vfiprintf_r+0xfe>
 8019a20:	2300      	movs	r3, #0
 8019a22:	200a      	movs	r0, #10
 8019a24:	0019      	movs	r1, r3
 8019a26:	3601      	adds	r6, #1
 8019a28:	6063      	str	r3, [r4, #4]
 8019a2a:	7832      	ldrb	r2, [r6, #0]
 8019a2c:	1c75      	adds	r5, r6, #1
 8019a2e:	3a30      	subs	r2, #48	@ 0x30
 8019a30:	2a09      	cmp	r2, #9
 8019a32:	d903      	bls.n	8019a3c <_vfiprintf_r+0x1d0>
 8019a34:	2b00      	cmp	r3, #0
 8019a36:	d0c8      	beq.n	80199ca <_vfiprintf_r+0x15e>
 8019a38:	9109      	str	r1, [sp, #36]	@ 0x24
 8019a3a:	e7c6      	b.n	80199ca <_vfiprintf_r+0x15e>
 8019a3c:	4341      	muls	r1, r0
 8019a3e:	002e      	movs	r6, r5
 8019a40:	2301      	movs	r3, #1
 8019a42:	1889      	adds	r1, r1, r2
 8019a44:	e7f1      	b.n	8019a2a <_vfiprintf_r+0x1be>
 8019a46:	aa07      	add	r2, sp, #28
 8019a48:	9200      	str	r2, [sp, #0]
 8019a4a:	0021      	movs	r1, r4
 8019a4c:	003a      	movs	r2, r7
 8019a4e:	4b14      	ldr	r3, [pc, #80]	@ (8019aa0 <_vfiprintf_r+0x234>)
 8019a50:	9803      	ldr	r0, [sp, #12]
 8019a52:	f7fd fc5f 	bl	8017314 <_printf_float>
 8019a56:	9004      	str	r0, [sp, #16]
 8019a58:	9b04      	ldr	r3, [sp, #16]
 8019a5a:	3301      	adds	r3, #1
 8019a5c:	d1d6      	bne.n	8019a0c <_vfiprintf_r+0x1a0>
 8019a5e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8019a60:	07db      	lsls	r3, r3, #31
 8019a62:	d405      	bmi.n	8019a70 <_vfiprintf_r+0x204>
 8019a64:	89bb      	ldrh	r3, [r7, #12]
 8019a66:	059b      	lsls	r3, r3, #22
 8019a68:	d402      	bmi.n	8019a70 <_vfiprintf_r+0x204>
 8019a6a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 8019a6c:	f7fe fa36 	bl	8017edc <__retarget_lock_release_recursive>
 8019a70:	89bb      	ldrh	r3, [r7, #12]
 8019a72:	065b      	lsls	r3, r3, #25
 8019a74:	d500      	bpl.n	8019a78 <_vfiprintf_r+0x20c>
 8019a76:	e71e      	b.n	80198b6 <_vfiprintf_r+0x4a>
 8019a78:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019a7a:	e71e      	b.n	80198ba <_vfiprintf_r+0x4e>
 8019a7c:	aa07      	add	r2, sp, #28
 8019a7e:	9200      	str	r2, [sp, #0]
 8019a80:	0021      	movs	r1, r4
 8019a82:	003a      	movs	r2, r7
 8019a84:	4b06      	ldr	r3, [pc, #24]	@ (8019aa0 <_vfiprintf_r+0x234>)
 8019a86:	9803      	ldr	r0, [sp, #12]
 8019a88:	f7fd fef2 	bl	8017870 <_printf_i>
 8019a8c:	e7e3      	b.n	8019a56 <_vfiprintf_r+0x1ea>
 8019a8e:	46c0      	nop			@ (mov r8, r8)
 8019a90:	0802d630 	.word	0x0802d630
 8019a94:	0802d636 	.word	0x0802d636
 8019a98:	0802d63a 	.word	0x0802d63a
 8019a9c:	08017315 	.word	0x08017315
 8019aa0:	08019847 	.word	0x08019847

08019aa4 <__sflush_r>:
 8019aa4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019aa6:	220c      	movs	r2, #12
 8019aa8:	5e8b      	ldrsh	r3, [r1, r2]
 8019aaa:	0005      	movs	r5, r0
 8019aac:	000c      	movs	r4, r1
 8019aae:	071a      	lsls	r2, r3, #28
 8019ab0:	d456      	bmi.n	8019b60 <__sflush_r+0xbc>
 8019ab2:	684a      	ldr	r2, [r1, #4]
 8019ab4:	2a00      	cmp	r2, #0
 8019ab6:	dc02      	bgt.n	8019abe <__sflush_r+0x1a>
 8019ab8:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 8019aba:	2a00      	cmp	r2, #0
 8019abc:	dd4e      	ble.n	8019b5c <__sflush_r+0xb8>
 8019abe:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019ac0:	2f00      	cmp	r7, #0
 8019ac2:	d04b      	beq.n	8019b5c <__sflush_r+0xb8>
 8019ac4:	2200      	movs	r2, #0
 8019ac6:	2080      	movs	r0, #128	@ 0x80
 8019ac8:	682e      	ldr	r6, [r5, #0]
 8019aca:	602a      	str	r2, [r5, #0]
 8019acc:	001a      	movs	r2, r3
 8019ace:	0140      	lsls	r0, r0, #5
 8019ad0:	6a21      	ldr	r1, [r4, #32]
 8019ad2:	4002      	ands	r2, r0
 8019ad4:	4203      	tst	r3, r0
 8019ad6:	d033      	beq.n	8019b40 <__sflush_r+0x9c>
 8019ad8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8019ada:	89a3      	ldrh	r3, [r4, #12]
 8019adc:	075b      	lsls	r3, r3, #29
 8019ade:	d506      	bpl.n	8019aee <__sflush_r+0x4a>
 8019ae0:	6863      	ldr	r3, [r4, #4]
 8019ae2:	1ad2      	subs	r2, r2, r3
 8019ae4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8019ae6:	2b00      	cmp	r3, #0
 8019ae8:	d001      	beq.n	8019aee <__sflush_r+0x4a>
 8019aea:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8019aec:	1ad2      	subs	r2, r2, r3
 8019aee:	2300      	movs	r3, #0
 8019af0:	0028      	movs	r0, r5
 8019af2:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8019af4:	6a21      	ldr	r1, [r4, #32]
 8019af6:	47b8      	blx	r7
 8019af8:	89a2      	ldrh	r2, [r4, #12]
 8019afa:	1c43      	adds	r3, r0, #1
 8019afc:	d106      	bne.n	8019b0c <__sflush_r+0x68>
 8019afe:	6829      	ldr	r1, [r5, #0]
 8019b00:	291d      	cmp	r1, #29
 8019b02:	d846      	bhi.n	8019b92 <__sflush_r+0xee>
 8019b04:	4b29      	ldr	r3, [pc, #164]	@ (8019bac <__sflush_r+0x108>)
 8019b06:	410b      	asrs	r3, r1
 8019b08:	07db      	lsls	r3, r3, #31
 8019b0a:	d442      	bmi.n	8019b92 <__sflush_r+0xee>
 8019b0c:	2300      	movs	r3, #0
 8019b0e:	6063      	str	r3, [r4, #4]
 8019b10:	6923      	ldr	r3, [r4, #16]
 8019b12:	6023      	str	r3, [r4, #0]
 8019b14:	04d2      	lsls	r2, r2, #19
 8019b16:	d505      	bpl.n	8019b24 <__sflush_r+0x80>
 8019b18:	1c43      	adds	r3, r0, #1
 8019b1a:	d102      	bne.n	8019b22 <__sflush_r+0x7e>
 8019b1c:	682b      	ldr	r3, [r5, #0]
 8019b1e:	2b00      	cmp	r3, #0
 8019b20:	d100      	bne.n	8019b24 <__sflush_r+0x80>
 8019b22:	6560      	str	r0, [r4, #84]	@ 0x54
 8019b24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019b26:	602e      	str	r6, [r5, #0]
 8019b28:	2900      	cmp	r1, #0
 8019b2a:	d017      	beq.n	8019b5c <__sflush_r+0xb8>
 8019b2c:	0023      	movs	r3, r4
 8019b2e:	3344      	adds	r3, #68	@ 0x44
 8019b30:	4299      	cmp	r1, r3
 8019b32:	d002      	beq.n	8019b3a <__sflush_r+0x96>
 8019b34:	0028      	movs	r0, r5
 8019b36:	f7ff f869 	bl	8018c0c <_free_r>
 8019b3a:	2300      	movs	r3, #0
 8019b3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8019b3e:	e00d      	b.n	8019b5c <__sflush_r+0xb8>
 8019b40:	2301      	movs	r3, #1
 8019b42:	0028      	movs	r0, r5
 8019b44:	47b8      	blx	r7
 8019b46:	0002      	movs	r2, r0
 8019b48:	1c43      	adds	r3, r0, #1
 8019b4a:	d1c6      	bne.n	8019ada <__sflush_r+0x36>
 8019b4c:	682b      	ldr	r3, [r5, #0]
 8019b4e:	2b00      	cmp	r3, #0
 8019b50:	d0c3      	beq.n	8019ada <__sflush_r+0x36>
 8019b52:	2b1d      	cmp	r3, #29
 8019b54:	d001      	beq.n	8019b5a <__sflush_r+0xb6>
 8019b56:	2b16      	cmp	r3, #22
 8019b58:	d11a      	bne.n	8019b90 <__sflush_r+0xec>
 8019b5a:	602e      	str	r6, [r5, #0]
 8019b5c:	2000      	movs	r0, #0
 8019b5e:	e01e      	b.n	8019b9e <__sflush_r+0xfa>
 8019b60:	690e      	ldr	r6, [r1, #16]
 8019b62:	2e00      	cmp	r6, #0
 8019b64:	d0fa      	beq.n	8019b5c <__sflush_r+0xb8>
 8019b66:	680f      	ldr	r7, [r1, #0]
 8019b68:	600e      	str	r6, [r1, #0]
 8019b6a:	1bba      	subs	r2, r7, r6
 8019b6c:	9201      	str	r2, [sp, #4]
 8019b6e:	2200      	movs	r2, #0
 8019b70:	079b      	lsls	r3, r3, #30
 8019b72:	d100      	bne.n	8019b76 <__sflush_r+0xd2>
 8019b74:	694a      	ldr	r2, [r1, #20]
 8019b76:	60a2      	str	r2, [r4, #8]
 8019b78:	9b01      	ldr	r3, [sp, #4]
 8019b7a:	2b00      	cmp	r3, #0
 8019b7c:	ddee      	ble.n	8019b5c <__sflush_r+0xb8>
 8019b7e:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8019b80:	0032      	movs	r2, r6
 8019b82:	001f      	movs	r7, r3
 8019b84:	0028      	movs	r0, r5
 8019b86:	9b01      	ldr	r3, [sp, #4]
 8019b88:	6a21      	ldr	r1, [r4, #32]
 8019b8a:	47b8      	blx	r7
 8019b8c:	2800      	cmp	r0, #0
 8019b8e:	dc07      	bgt.n	8019ba0 <__sflush_r+0xfc>
 8019b90:	89a2      	ldrh	r2, [r4, #12]
 8019b92:	2340      	movs	r3, #64	@ 0x40
 8019b94:	2001      	movs	r0, #1
 8019b96:	4313      	orrs	r3, r2
 8019b98:	b21b      	sxth	r3, r3
 8019b9a:	81a3      	strh	r3, [r4, #12]
 8019b9c:	4240      	negs	r0, r0
 8019b9e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019ba0:	9b01      	ldr	r3, [sp, #4]
 8019ba2:	1836      	adds	r6, r6, r0
 8019ba4:	1a1b      	subs	r3, r3, r0
 8019ba6:	9301      	str	r3, [sp, #4]
 8019ba8:	e7e6      	b.n	8019b78 <__sflush_r+0xd4>
 8019baa:	46c0      	nop			@ (mov r8, r8)
 8019bac:	dfbffffe 	.word	0xdfbffffe

08019bb0 <_fflush_r>:
 8019bb0:	690b      	ldr	r3, [r1, #16]
 8019bb2:	b570      	push	{r4, r5, r6, lr}
 8019bb4:	0005      	movs	r5, r0
 8019bb6:	000c      	movs	r4, r1
 8019bb8:	2b00      	cmp	r3, #0
 8019bba:	d102      	bne.n	8019bc2 <_fflush_r+0x12>
 8019bbc:	2500      	movs	r5, #0
 8019bbe:	0028      	movs	r0, r5
 8019bc0:	bd70      	pop	{r4, r5, r6, pc}
 8019bc2:	2800      	cmp	r0, #0
 8019bc4:	d004      	beq.n	8019bd0 <_fflush_r+0x20>
 8019bc6:	6a03      	ldr	r3, [r0, #32]
 8019bc8:	2b00      	cmp	r3, #0
 8019bca:	d101      	bne.n	8019bd0 <_fflush_r+0x20>
 8019bcc:	f7fd ffee 	bl	8017bac <__sinit>
 8019bd0:	220c      	movs	r2, #12
 8019bd2:	5ea3      	ldrsh	r3, [r4, r2]
 8019bd4:	2b00      	cmp	r3, #0
 8019bd6:	d0f1      	beq.n	8019bbc <_fflush_r+0xc>
 8019bd8:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019bda:	07d2      	lsls	r2, r2, #31
 8019bdc:	d404      	bmi.n	8019be8 <_fflush_r+0x38>
 8019bde:	059b      	lsls	r3, r3, #22
 8019be0:	d402      	bmi.n	8019be8 <_fflush_r+0x38>
 8019be2:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019be4:	f7fe f979 	bl	8017eda <__retarget_lock_acquire_recursive>
 8019be8:	0028      	movs	r0, r5
 8019bea:	0021      	movs	r1, r4
 8019bec:	f7ff ff5a 	bl	8019aa4 <__sflush_r>
 8019bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019bf2:	0005      	movs	r5, r0
 8019bf4:	07db      	lsls	r3, r3, #31
 8019bf6:	d4e2      	bmi.n	8019bbe <_fflush_r+0xe>
 8019bf8:	89a3      	ldrh	r3, [r4, #12]
 8019bfa:	059b      	lsls	r3, r3, #22
 8019bfc:	d4df      	bmi.n	8019bbe <_fflush_r+0xe>
 8019bfe:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8019c00:	f7fe f96c 	bl	8017edc <__retarget_lock_release_recursive>
 8019c04:	e7db      	b.n	8019bbe <_fflush_r+0xe>

08019c06 <__swbuf_r>:
 8019c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019c08:	0006      	movs	r6, r0
 8019c0a:	000d      	movs	r5, r1
 8019c0c:	0014      	movs	r4, r2
 8019c0e:	2800      	cmp	r0, #0
 8019c10:	d004      	beq.n	8019c1c <__swbuf_r+0x16>
 8019c12:	6a03      	ldr	r3, [r0, #32]
 8019c14:	2b00      	cmp	r3, #0
 8019c16:	d101      	bne.n	8019c1c <__swbuf_r+0x16>
 8019c18:	f7fd ffc8 	bl	8017bac <__sinit>
 8019c1c:	69a3      	ldr	r3, [r4, #24]
 8019c1e:	60a3      	str	r3, [r4, #8]
 8019c20:	89a3      	ldrh	r3, [r4, #12]
 8019c22:	071b      	lsls	r3, r3, #28
 8019c24:	d502      	bpl.n	8019c2c <__swbuf_r+0x26>
 8019c26:	6923      	ldr	r3, [r4, #16]
 8019c28:	2b00      	cmp	r3, #0
 8019c2a:	d109      	bne.n	8019c40 <__swbuf_r+0x3a>
 8019c2c:	0021      	movs	r1, r4
 8019c2e:	0030      	movs	r0, r6
 8019c30:	f000 f82c 	bl	8019c8c <__swsetup_r>
 8019c34:	2800      	cmp	r0, #0
 8019c36:	d003      	beq.n	8019c40 <__swbuf_r+0x3a>
 8019c38:	2501      	movs	r5, #1
 8019c3a:	426d      	negs	r5, r5
 8019c3c:	0028      	movs	r0, r5
 8019c3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019c40:	6923      	ldr	r3, [r4, #16]
 8019c42:	6820      	ldr	r0, [r4, #0]
 8019c44:	b2ef      	uxtb	r7, r5
 8019c46:	1ac0      	subs	r0, r0, r3
 8019c48:	6963      	ldr	r3, [r4, #20]
 8019c4a:	b2ed      	uxtb	r5, r5
 8019c4c:	4283      	cmp	r3, r0
 8019c4e:	dc05      	bgt.n	8019c5c <__swbuf_r+0x56>
 8019c50:	0021      	movs	r1, r4
 8019c52:	0030      	movs	r0, r6
 8019c54:	f7ff ffac 	bl	8019bb0 <_fflush_r>
 8019c58:	2800      	cmp	r0, #0
 8019c5a:	d1ed      	bne.n	8019c38 <__swbuf_r+0x32>
 8019c5c:	68a3      	ldr	r3, [r4, #8]
 8019c5e:	3001      	adds	r0, #1
 8019c60:	3b01      	subs	r3, #1
 8019c62:	60a3      	str	r3, [r4, #8]
 8019c64:	6823      	ldr	r3, [r4, #0]
 8019c66:	1c5a      	adds	r2, r3, #1
 8019c68:	6022      	str	r2, [r4, #0]
 8019c6a:	701f      	strb	r7, [r3, #0]
 8019c6c:	6963      	ldr	r3, [r4, #20]
 8019c6e:	4283      	cmp	r3, r0
 8019c70:	d004      	beq.n	8019c7c <__swbuf_r+0x76>
 8019c72:	89a3      	ldrh	r3, [r4, #12]
 8019c74:	07db      	lsls	r3, r3, #31
 8019c76:	d5e1      	bpl.n	8019c3c <__swbuf_r+0x36>
 8019c78:	2d0a      	cmp	r5, #10
 8019c7a:	d1df      	bne.n	8019c3c <__swbuf_r+0x36>
 8019c7c:	0021      	movs	r1, r4
 8019c7e:	0030      	movs	r0, r6
 8019c80:	f7ff ff96 	bl	8019bb0 <_fflush_r>
 8019c84:	2800      	cmp	r0, #0
 8019c86:	d0d9      	beq.n	8019c3c <__swbuf_r+0x36>
 8019c88:	e7d6      	b.n	8019c38 <__swbuf_r+0x32>
	...

08019c8c <__swsetup_r>:
 8019c8c:	4b2d      	ldr	r3, [pc, #180]	@ (8019d44 <__swsetup_r+0xb8>)
 8019c8e:	b570      	push	{r4, r5, r6, lr}
 8019c90:	0005      	movs	r5, r0
 8019c92:	6818      	ldr	r0, [r3, #0]
 8019c94:	000c      	movs	r4, r1
 8019c96:	2800      	cmp	r0, #0
 8019c98:	d004      	beq.n	8019ca4 <__swsetup_r+0x18>
 8019c9a:	6a03      	ldr	r3, [r0, #32]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d101      	bne.n	8019ca4 <__swsetup_r+0x18>
 8019ca0:	f7fd ff84 	bl	8017bac <__sinit>
 8019ca4:	230c      	movs	r3, #12
 8019ca6:	5ee2      	ldrsh	r2, [r4, r3]
 8019ca8:	0713      	lsls	r3, r2, #28
 8019caa:	d423      	bmi.n	8019cf4 <__swsetup_r+0x68>
 8019cac:	06d3      	lsls	r3, r2, #27
 8019cae:	d407      	bmi.n	8019cc0 <__swsetup_r+0x34>
 8019cb0:	2309      	movs	r3, #9
 8019cb2:	602b      	str	r3, [r5, #0]
 8019cb4:	2340      	movs	r3, #64	@ 0x40
 8019cb6:	2001      	movs	r0, #1
 8019cb8:	4313      	orrs	r3, r2
 8019cba:	81a3      	strh	r3, [r4, #12]
 8019cbc:	4240      	negs	r0, r0
 8019cbe:	e03a      	b.n	8019d36 <__swsetup_r+0xaa>
 8019cc0:	0752      	lsls	r2, r2, #29
 8019cc2:	d513      	bpl.n	8019cec <__swsetup_r+0x60>
 8019cc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019cc6:	2900      	cmp	r1, #0
 8019cc8:	d008      	beq.n	8019cdc <__swsetup_r+0x50>
 8019cca:	0023      	movs	r3, r4
 8019ccc:	3344      	adds	r3, #68	@ 0x44
 8019cce:	4299      	cmp	r1, r3
 8019cd0:	d002      	beq.n	8019cd8 <__swsetup_r+0x4c>
 8019cd2:	0028      	movs	r0, r5
 8019cd4:	f7fe ff9a 	bl	8018c0c <_free_r>
 8019cd8:	2300      	movs	r3, #0
 8019cda:	6363      	str	r3, [r4, #52]	@ 0x34
 8019cdc:	2224      	movs	r2, #36	@ 0x24
 8019cde:	89a3      	ldrh	r3, [r4, #12]
 8019ce0:	4393      	bics	r3, r2
 8019ce2:	81a3      	strh	r3, [r4, #12]
 8019ce4:	2300      	movs	r3, #0
 8019ce6:	6063      	str	r3, [r4, #4]
 8019ce8:	6923      	ldr	r3, [r4, #16]
 8019cea:	6023      	str	r3, [r4, #0]
 8019cec:	2308      	movs	r3, #8
 8019cee:	89a2      	ldrh	r2, [r4, #12]
 8019cf0:	4313      	orrs	r3, r2
 8019cf2:	81a3      	strh	r3, [r4, #12]
 8019cf4:	6923      	ldr	r3, [r4, #16]
 8019cf6:	2b00      	cmp	r3, #0
 8019cf8:	d10b      	bne.n	8019d12 <__swsetup_r+0x86>
 8019cfa:	21a0      	movs	r1, #160	@ 0xa0
 8019cfc:	2280      	movs	r2, #128	@ 0x80
 8019cfe:	89a3      	ldrh	r3, [r4, #12]
 8019d00:	0089      	lsls	r1, r1, #2
 8019d02:	0092      	lsls	r2, r2, #2
 8019d04:	400b      	ands	r3, r1
 8019d06:	4293      	cmp	r3, r2
 8019d08:	d003      	beq.n	8019d12 <__swsetup_r+0x86>
 8019d0a:	0021      	movs	r1, r4
 8019d0c:	0028      	movs	r0, r5
 8019d0e:	f000 f915 	bl	8019f3c <__smakebuf_r>
 8019d12:	230c      	movs	r3, #12
 8019d14:	5ee2      	ldrsh	r2, [r4, r3]
 8019d16:	2101      	movs	r1, #1
 8019d18:	0013      	movs	r3, r2
 8019d1a:	400b      	ands	r3, r1
 8019d1c:	420a      	tst	r2, r1
 8019d1e:	d00b      	beq.n	8019d38 <__swsetup_r+0xac>
 8019d20:	2300      	movs	r3, #0
 8019d22:	60a3      	str	r3, [r4, #8]
 8019d24:	6963      	ldr	r3, [r4, #20]
 8019d26:	425b      	negs	r3, r3
 8019d28:	61a3      	str	r3, [r4, #24]
 8019d2a:	2000      	movs	r0, #0
 8019d2c:	6923      	ldr	r3, [r4, #16]
 8019d2e:	4283      	cmp	r3, r0
 8019d30:	d101      	bne.n	8019d36 <__swsetup_r+0xaa>
 8019d32:	0613      	lsls	r3, r2, #24
 8019d34:	d4be      	bmi.n	8019cb4 <__swsetup_r+0x28>
 8019d36:	bd70      	pop	{r4, r5, r6, pc}
 8019d38:	0791      	lsls	r1, r2, #30
 8019d3a:	d400      	bmi.n	8019d3e <__swsetup_r+0xb2>
 8019d3c:	6963      	ldr	r3, [r4, #20]
 8019d3e:	60a3      	str	r3, [r4, #8]
 8019d40:	e7f3      	b.n	8019d2a <__swsetup_r+0x9e>
 8019d42:	46c0      	nop			@ (mov r8, r8)
 8019d44:	200002dc 	.word	0x200002dc

08019d48 <memmove>:
 8019d48:	b510      	push	{r4, lr}
 8019d4a:	4288      	cmp	r0, r1
 8019d4c:	d806      	bhi.n	8019d5c <memmove+0x14>
 8019d4e:	2300      	movs	r3, #0
 8019d50:	429a      	cmp	r2, r3
 8019d52:	d008      	beq.n	8019d66 <memmove+0x1e>
 8019d54:	5ccc      	ldrb	r4, [r1, r3]
 8019d56:	54c4      	strb	r4, [r0, r3]
 8019d58:	3301      	adds	r3, #1
 8019d5a:	e7f9      	b.n	8019d50 <memmove+0x8>
 8019d5c:	188b      	adds	r3, r1, r2
 8019d5e:	4298      	cmp	r0, r3
 8019d60:	d2f5      	bcs.n	8019d4e <memmove+0x6>
 8019d62:	3a01      	subs	r2, #1
 8019d64:	d200      	bcs.n	8019d68 <memmove+0x20>
 8019d66:	bd10      	pop	{r4, pc}
 8019d68:	5c8b      	ldrb	r3, [r1, r2]
 8019d6a:	5483      	strb	r3, [r0, r2]
 8019d6c:	e7f9      	b.n	8019d62 <memmove+0x1a>
	...

08019d70 <_sbrk_r>:
 8019d70:	2300      	movs	r3, #0
 8019d72:	b570      	push	{r4, r5, r6, lr}
 8019d74:	4d06      	ldr	r5, [pc, #24]	@ (8019d90 <_sbrk_r+0x20>)
 8019d76:	0004      	movs	r4, r0
 8019d78:	0008      	movs	r0, r1
 8019d7a:	602b      	str	r3, [r5, #0]
 8019d7c:	f7ee fa0a 	bl	8008194 <_sbrk>
 8019d80:	1c43      	adds	r3, r0, #1
 8019d82:	d103      	bne.n	8019d8c <_sbrk_r+0x1c>
 8019d84:	682b      	ldr	r3, [r5, #0]
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d000      	beq.n	8019d8c <_sbrk_r+0x1c>
 8019d8a:	6023      	str	r3, [r4, #0]
 8019d8c:	bd70      	pop	{r4, r5, r6, pc}
 8019d8e:	46c0      	nop			@ (mov r8, r8)
 8019d90:	200039d0 	.word	0x200039d0

08019d94 <__assert_func>:
 8019d94:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8019d96:	0014      	movs	r4, r2
 8019d98:	001a      	movs	r2, r3
 8019d9a:	4b09      	ldr	r3, [pc, #36]	@ (8019dc0 <__assert_func+0x2c>)
 8019d9c:	0005      	movs	r5, r0
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	000e      	movs	r6, r1
 8019da2:	68d8      	ldr	r0, [r3, #12]
 8019da4:	4b07      	ldr	r3, [pc, #28]	@ (8019dc4 <__assert_func+0x30>)
 8019da6:	2c00      	cmp	r4, #0
 8019da8:	d101      	bne.n	8019dae <__assert_func+0x1a>
 8019daa:	4b07      	ldr	r3, [pc, #28]	@ (8019dc8 <__assert_func+0x34>)
 8019dac:	001c      	movs	r4, r3
 8019dae:	4907      	ldr	r1, [pc, #28]	@ (8019dcc <__assert_func+0x38>)
 8019db0:	9301      	str	r3, [sp, #4]
 8019db2:	9402      	str	r4, [sp, #8]
 8019db4:	002b      	movs	r3, r5
 8019db6:	9600      	str	r6, [sp, #0]
 8019db8:	f000 f886 	bl	8019ec8 <fiprintf>
 8019dbc:	f000 f924 	bl	801a008 <abort>
 8019dc0:	200002dc 	.word	0x200002dc
 8019dc4:	0802d64b 	.word	0x0802d64b
 8019dc8:	0802d686 	.word	0x0802d686
 8019dcc:	0802d658 	.word	0x0802d658

08019dd0 <_calloc_r>:
 8019dd0:	b570      	push	{r4, r5, r6, lr}
 8019dd2:	0c0b      	lsrs	r3, r1, #16
 8019dd4:	0c15      	lsrs	r5, r2, #16
 8019dd6:	2b00      	cmp	r3, #0
 8019dd8:	d11e      	bne.n	8019e18 <_calloc_r+0x48>
 8019dda:	2d00      	cmp	r5, #0
 8019ddc:	d10c      	bne.n	8019df8 <_calloc_r+0x28>
 8019dde:	b289      	uxth	r1, r1
 8019de0:	b294      	uxth	r4, r2
 8019de2:	434c      	muls	r4, r1
 8019de4:	0021      	movs	r1, r4
 8019de6:	f7fe ff87 	bl	8018cf8 <_malloc_r>
 8019dea:	1e05      	subs	r5, r0, #0
 8019dec:	d01a      	beq.n	8019e24 <_calloc_r+0x54>
 8019dee:	0022      	movs	r2, r4
 8019df0:	2100      	movs	r1, #0
 8019df2:	f7fd ffc3 	bl	8017d7c <memset>
 8019df6:	e016      	b.n	8019e26 <_calloc_r+0x56>
 8019df8:	1c2b      	adds	r3, r5, #0
 8019dfa:	1c0c      	adds	r4, r1, #0
 8019dfc:	b289      	uxth	r1, r1
 8019dfe:	b292      	uxth	r2, r2
 8019e00:	434a      	muls	r2, r1
 8019e02:	b29b      	uxth	r3, r3
 8019e04:	b2a1      	uxth	r1, r4
 8019e06:	4359      	muls	r1, r3
 8019e08:	0c14      	lsrs	r4, r2, #16
 8019e0a:	190c      	adds	r4, r1, r4
 8019e0c:	0c23      	lsrs	r3, r4, #16
 8019e0e:	d107      	bne.n	8019e20 <_calloc_r+0x50>
 8019e10:	0424      	lsls	r4, r4, #16
 8019e12:	b292      	uxth	r2, r2
 8019e14:	4314      	orrs	r4, r2
 8019e16:	e7e5      	b.n	8019de4 <_calloc_r+0x14>
 8019e18:	2d00      	cmp	r5, #0
 8019e1a:	d101      	bne.n	8019e20 <_calloc_r+0x50>
 8019e1c:	1c14      	adds	r4, r2, #0
 8019e1e:	e7ed      	b.n	8019dfc <_calloc_r+0x2c>
 8019e20:	230c      	movs	r3, #12
 8019e22:	6003      	str	r3, [r0, #0]
 8019e24:	2500      	movs	r5, #0
 8019e26:	0028      	movs	r0, r5
 8019e28:	bd70      	pop	{r4, r5, r6, pc}

08019e2a <__ascii_mbtowc>:
 8019e2a:	b082      	sub	sp, #8
 8019e2c:	2900      	cmp	r1, #0
 8019e2e:	d100      	bne.n	8019e32 <__ascii_mbtowc+0x8>
 8019e30:	a901      	add	r1, sp, #4
 8019e32:	1e10      	subs	r0, r2, #0
 8019e34:	d006      	beq.n	8019e44 <__ascii_mbtowc+0x1a>
 8019e36:	2b00      	cmp	r3, #0
 8019e38:	d006      	beq.n	8019e48 <__ascii_mbtowc+0x1e>
 8019e3a:	7813      	ldrb	r3, [r2, #0]
 8019e3c:	600b      	str	r3, [r1, #0]
 8019e3e:	7810      	ldrb	r0, [r2, #0]
 8019e40:	1e43      	subs	r3, r0, #1
 8019e42:	4198      	sbcs	r0, r3
 8019e44:	b002      	add	sp, #8
 8019e46:	4770      	bx	lr
 8019e48:	2002      	movs	r0, #2
 8019e4a:	4240      	negs	r0, r0
 8019e4c:	e7fa      	b.n	8019e44 <__ascii_mbtowc+0x1a>

08019e4e <_realloc_r>:
 8019e4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8019e50:	0006      	movs	r6, r0
 8019e52:	000c      	movs	r4, r1
 8019e54:	0015      	movs	r5, r2
 8019e56:	2900      	cmp	r1, #0
 8019e58:	d105      	bne.n	8019e66 <_realloc_r+0x18>
 8019e5a:	0011      	movs	r1, r2
 8019e5c:	f7fe ff4c 	bl	8018cf8 <_malloc_r>
 8019e60:	0004      	movs	r4, r0
 8019e62:	0020      	movs	r0, r4
 8019e64:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8019e66:	2a00      	cmp	r2, #0
 8019e68:	d103      	bne.n	8019e72 <_realloc_r+0x24>
 8019e6a:	f7fe fecf 	bl	8018c0c <_free_r>
 8019e6e:	2400      	movs	r4, #0
 8019e70:	e7f7      	b.n	8019e62 <_realloc_r+0x14>
 8019e72:	f000 f8d0 	bl	801a016 <_malloc_usable_size_r>
 8019e76:	0007      	movs	r7, r0
 8019e78:	4285      	cmp	r5, r0
 8019e7a:	d802      	bhi.n	8019e82 <_realloc_r+0x34>
 8019e7c:	0843      	lsrs	r3, r0, #1
 8019e7e:	42ab      	cmp	r3, r5
 8019e80:	d3ef      	bcc.n	8019e62 <_realloc_r+0x14>
 8019e82:	0029      	movs	r1, r5
 8019e84:	0030      	movs	r0, r6
 8019e86:	f7fe ff37 	bl	8018cf8 <_malloc_r>
 8019e8a:	9001      	str	r0, [sp, #4]
 8019e8c:	2800      	cmp	r0, #0
 8019e8e:	d0ee      	beq.n	8019e6e <_realloc_r+0x20>
 8019e90:	002a      	movs	r2, r5
 8019e92:	42bd      	cmp	r5, r7
 8019e94:	d900      	bls.n	8019e98 <_realloc_r+0x4a>
 8019e96:	003a      	movs	r2, r7
 8019e98:	0021      	movs	r1, r4
 8019e9a:	9801      	ldr	r0, [sp, #4]
 8019e9c:	f7fe f82a 	bl	8017ef4 <memcpy>
 8019ea0:	0021      	movs	r1, r4
 8019ea2:	0030      	movs	r0, r6
 8019ea4:	f7fe feb2 	bl	8018c0c <_free_r>
 8019ea8:	9c01      	ldr	r4, [sp, #4]
 8019eaa:	e7da      	b.n	8019e62 <_realloc_r+0x14>

08019eac <__ascii_wctomb>:
 8019eac:	0003      	movs	r3, r0
 8019eae:	1e08      	subs	r0, r1, #0
 8019eb0:	d005      	beq.n	8019ebe <__ascii_wctomb+0x12>
 8019eb2:	2aff      	cmp	r2, #255	@ 0xff
 8019eb4:	d904      	bls.n	8019ec0 <__ascii_wctomb+0x14>
 8019eb6:	228a      	movs	r2, #138	@ 0x8a
 8019eb8:	2001      	movs	r0, #1
 8019eba:	601a      	str	r2, [r3, #0]
 8019ebc:	4240      	negs	r0, r0
 8019ebe:	4770      	bx	lr
 8019ec0:	2001      	movs	r0, #1
 8019ec2:	700a      	strb	r2, [r1, #0]
 8019ec4:	e7fb      	b.n	8019ebe <__ascii_wctomb+0x12>
	...

08019ec8 <fiprintf>:
 8019ec8:	b40e      	push	{r1, r2, r3}
 8019eca:	b517      	push	{r0, r1, r2, r4, lr}
 8019ecc:	4c05      	ldr	r4, [pc, #20]	@ (8019ee4 <fiprintf+0x1c>)
 8019ece:	ab05      	add	r3, sp, #20
 8019ed0:	cb04      	ldmia	r3!, {r2}
 8019ed2:	0001      	movs	r1, r0
 8019ed4:	6820      	ldr	r0, [r4, #0]
 8019ed6:	9301      	str	r3, [sp, #4]
 8019ed8:	f7ff fcc8 	bl	801986c <_vfiprintf_r>
 8019edc:	bc1e      	pop	{r1, r2, r3, r4}
 8019ede:	bc08      	pop	{r3}
 8019ee0:	b003      	add	sp, #12
 8019ee2:	4718      	bx	r3
 8019ee4:	200002dc 	.word	0x200002dc

08019ee8 <__swhatbuf_r>:
 8019ee8:	b570      	push	{r4, r5, r6, lr}
 8019eea:	000e      	movs	r6, r1
 8019eec:	001d      	movs	r5, r3
 8019eee:	230e      	movs	r3, #14
 8019ef0:	5ec9      	ldrsh	r1, [r1, r3]
 8019ef2:	0014      	movs	r4, r2
 8019ef4:	b096      	sub	sp, #88	@ 0x58
 8019ef6:	2900      	cmp	r1, #0
 8019ef8:	da0c      	bge.n	8019f14 <__swhatbuf_r+0x2c>
 8019efa:	89b2      	ldrh	r2, [r6, #12]
 8019efc:	2380      	movs	r3, #128	@ 0x80
 8019efe:	0011      	movs	r1, r2
 8019f00:	4019      	ands	r1, r3
 8019f02:	421a      	tst	r2, r3
 8019f04:	d114      	bne.n	8019f30 <__swhatbuf_r+0x48>
 8019f06:	2380      	movs	r3, #128	@ 0x80
 8019f08:	00db      	lsls	r3, r3, #3
 8019f0a:	2000      	movs	r0, #0
 8019f0c:	6029      	str	r1, [r5, #0]
 8019f0e:	6023      	str	r3, [r4, #0]
 8019f10:	b016      	add	sp, #88	@ 0x58
 8019f12:	bd70      	pop	{r4, r5, r6, pc}
 8019f14:	466a      	mov	r2, sp
 8019f16:	f000 f853 	bl	8019fc0 <_fstat_r>
 8019f1a:	2800      	cmp	r0, #0
 8019f1c:	dbed      	blt.n	8019efa <__swhatbuf_r+0x12>
 8019f1e:	23f0      	movs	r3, #240	@ 0xf0
 8019f20:	9901      	ldr	r1, [sp, #4]
 8019f22:	021b      	lsls	r3, r3, #8
 8019f24:	4019      	ands	r1, r3
 8019f26:	4b04      	ldr	r3, [pc, #16]	@ (8019f38 <__swhatbuf_r+0x50>)
 8019f28:	18c9      	adds	r1, r1, r3
 8019f2a:	424b      	negs	r3, r1
 8019f2c:	4159      	adcs	r1, r3
 8019f2e:	e7ea      	b.n	8019f06 <__swhatbuf_r+0x1e>
 8019f30:	2100      	movs	r1, #0
 8019f32:	2340      	movs	r3, #64	@ 0x40
 8019f34:	e7e9      	b.n	8019f0a <__swhatbuf_r+0x22>
 8019f36:	46c0      	nop			@ (mov r8, r8)
 8019f38:	ffffe000 	.word	0xffffe000

08019f3c <__smakebuf_r>:
 8019f3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019f3e:	2602      	movs	r6, #2
 8019f40:	898b      	ldrh	r3, [r1, #12]
 8019f42:	0005      	movs	r5, r0
 8019f44:	000c      	movs	r4, r1
 8019f46:	b085      	sub	sp, #20
 8019f48:	4233      	tst	r3, r6
 8019f4a:	d007      	beq.n	8019f5c <__smakebuf_r+0x20>
 8019f4c:	0023      	movs	r3, r4
 8019f4e:	3347      	adds	r3, #71	@ 0x47
 8019f50:	6023      	str	r3, [r4, #0]
 8019f52:	6123      	str	r3, [r4, #16]
 8019f54:	2301      	movs	r3, #1
 8019f56:	6163      	str	r3, [r4, #20]
 8019f58:	b005      	add	sp, #20
 8019f5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019f5c:	ab03      	add	r3, sp, #12
 8019f5e:	aa02      	add	r2, sp, #8
 8019f60:	f7ff ffc2 	bl	8019ee8 <__swhatbuf_r>
 8019f64:	9f02      	ldr	r7, [sp, #8]
 8019f66:	9001      	str	r0, [sp, #4]
 8019f68:	0039      	movs	r1, r7
 8019f6a:	0028      	movs	r0, r5
 8019f6c:	f7fe fec4 	bl	8018cf8 <_malloc_r>
 8019f70:	2800      	cmp	r0, #0
 8019f72:	d108      	bne.n	8019f86 <__smakebuf_r+0x4a>
 8019f74:	220c      	movs	r2, #12
 8019f76:	5ea3      	ldrsh	r3, [r4, r2]
 8019f78:	059a      	lsls	r2, r3, #22
 8019f7a:	d4ed      	bmi.n	8019f58 <__smakebuf_r+0x1c>
 8019f7c:	2203      	movs	r2, #3
 8019f7e:	4393      	bics	r3, r2
 8019f80:	431e      	orrs	r6, r3
 8019f82:	81a6      	strh	r6, [r4, #12]
 8019f84:	e7e2      	b.n	8019f4c <__smakebuf_r+0x10>
 8019f86:	2380      	movs	r3, #128	@ 0x80
 8019f88:	89a2      	ldrh	r2, [r4, #12]
 8019f8a:	6020      	str	r0, [r4, #0]
 8019f8c:	4313      	orrs	r3, r2
 8019f8e:	81a3      	strh	r3, [r4, #12]
 8019f90:	9b03      	ldr	r3, [sp, #12]
 8019f92:	6120      	str	r0, [r4, #16]
 8019f94:	6167      	str	r7, [r4, #20]
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d00c      	beq.n	8019fb4 <__smakebuf_r+0x78>
 8019f9a:	0028      	movs	r0, r5
 8019f9c:	230e      	movs	r3, #14
 8019f9e:	5ee1      	ldrsh	r1, [r4, r3]
 8019fa0:	f000 f820 	bl	8019fe4 <_isatty_r>
 8019fa4:	2800      	cmp	r0, #0
 8019fa6:	d005      	beq.n	8019fb4 <__smakebuf_r+0x78>
 8019fa8:	2303      	movs	r3, #3
 8019faa:	89a2      	ldrh	r2, [r4, #12]
 8019fac:	439a      	bics	r2, r3
 8019fae:	3b02      	subs	r3, #2
 8019fb0:	4313      	orrs	r3, r2
 8019fb2:	81a3      	strh	r3, [r4, #12]
 8019fb4:	89a3      	ldrh	r3, [r4, #12]
 8019fb6:	9a01      	ldr	r2, [sp, #4]
 8019fb8:	4313      	orrs	r3, r2
 8019fba:	81a3      	strh	r3, [r4, #12]
 8019fbc:	e7cc      	b.n	8019f58 <__smakebuf_r+0x1c>
	...

08019fc0 <_fstat_r>:
 8019fc0:	2300      	movs	r3, #0
 8019fc2:	b570      	push	{r4, r5, r6, lr}
 8019fc4:	4d06      	ldr	r5, [pc, #24]	@ (8019fe0 <_fstat_r+0x20>)
 8019fc6:	0004      	movs	r4, r0
 8019fc8:	0008      	movs	r0, r1
 8019fca:	0011      	movs	r1, r2
 8019fcc:	602b      	str	r3, [r5, #0]
 8019fce:	f7ee f8bf 	bl	8008150 <_fstat>
 8019fd2:	1c43      	adds	r3, r0, #1
 8019fd4:	d103      	bne.n	8019fde <_fstat_r+0x1e>
 8019fd6:	682b      	ldr	r3, [r5, #0]
 8019fd8:	2b00      	cmp	r3, #0
 8019fda:	d000      	beq.n	8019fde <_fstat_r+0x1e>
 8019fdc:	6023      	str	r3, [r4, #0]
 8019fde:	bd70      	pop	{r4, r5, r6, pc}
 8019fe0:	200039d0 	.word	0x200039d0

08019fe4 <_isatty_r>:
 8019fe4:	2300      	movs	r3, #0
 8019fe6:	b570      	push	{r4, r5, r6, lr}
 8019fe8:	4d06      	ldr	r5, [pc, #24]	@ (801a004 <_isatty_r+0x20>)
 8019fea:	0004      	movs	r4, r0
 8019fec:	0008      	movs	r0, r1
 8019fee:	602b      	str	r3, [r5, #0]
 8019ff0:	f7ee f8bc 	bl	800816c <_isatty>
 8019ff4:	1c43      	adds	r3, r0, #1
 8019ff6:	d103      	bne.n	801a000 <_isatty_r+0x1c>
 8019ff8:	682b      	ldr	r3, [r5, #0]
 8019ffa:	2b00      	cmp	r3, #0
 8019ffc:	d000      	beq.n	801a000 <_isatty_r+0x1c>
 8019ffe:	6023      	str	r3, [r4, #0]
 801a000:	bd70      	pop	{r4, r5, r6, pc}
 801a002:	46c0      	nop			@ (mov r8, r8)
 801a004:	200039d0 	.word	0x200039d0

0801a008 <abort>:
 801a008:	2006      	movs	r0, #6
 801a00a:	b510      	push	{r4, lr}
 801a00c:	f000 f834 	bl	801a078 <raise>
 801a010:	2001      	movs	r0, #1
 801a012:	f7ee f869 	bl	80080e8 <_exit>

0801a016 <_malloc_usable_size_r>:
 801a016:	1f0b      	subs	r3, r1, #4
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	1f18      	subs	r0, r3, #4
 801a01c:	2b00      	cmp	r3, #0
 801a01e:	da01      	bge.n	801a024 <_malloc_usable_size_r+0xe>
 801a020:	580b      	ldr	r3, [r1, r0]
 801a022:	18c0      	adds	r0, r0, r3
 801a024:	4770      	bx	lr

0801a026 <_raise_r>:
 801a026:	b570      	push	{r4, r5, r6, lr}
 801a028:	0004      	movs	r4, r0
 801a02a:	000d      	movs	r5, r1
 801a02c:	291f      	cmp	r1, #31
 801a02e:	d904      	bls.n	801a03a <_raise_r+0x14>
 801a030:	2316      	movs	r3, #22
 801a032:	6003      	str	r3, [r0, #0]
 801a034:	2001      	movs	r0, #1
 801a036:	4240      	negs	r0, r0
 801a038:	bd70      	pop	{r4, r5, r6, pc}
 801a03a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a03c:	2b00      	cmp	r3, #0
 801a03e:	d004      	beq.n	801a04a <_raise_r+0x24>
 801a040:	008a      	lsls	r2, r1, #2
 801a042:	189b      	adds	r3, r3, r2
 801a044:	681a      	ldr	r2, [r3, #0]
 801a046:	2a00      	cmp	r2, #0
 801a048:	d108      	bne.n	801a05c <_raise_r+0x36>
 801a04a:	0020      	movs	r0, r4
 801a04c:	f000 f830 	bl	801a0b0 <_getpid_r>
 801a050:	002a      	movs	r2, r5
 801a052:	0001      	movs	r1, r0
 801a054:	0020      	movs	r0, r4
 801a056:	f000 f819 	bl	801a08c <_kill_r>
 801a05a:	e7ed      	b.n	801a038 <_raise_r+0x12>
 801a05c:	2a01      	cmp	r2, #1
 801a05e:	d009      	beq.n	801a074 <_raise_r+0x4e>
 801a060:	1c51      	adds	r1, r2, #1
 801a062:	d103      	bne.n	801a06c <_raise_r+0x46>
 801a064:	2316      	movs	r3, #22
 801a066:	6003      	str	r3, [r0, #0]
 801a068:	2001      	movs	r0, #1
 801a06a:	e7e5      	b.n	801a038 <_raise_r+0x12>
 801a06c:	2100      	movs	r1, #0
 801a06e:	0028      	movs	r0, r5
 801a070:	6019      	str	r1, [r3, #0]
 801a072:	4790      	blx	r2
 801a074:	2000      	movs	r0, #0
 801a076:	e7df      	b.n	801a038 <_raise_r+0x12>

0801a078 <raise>:
 801a078:	b510      	push	{r4, lr}
 801a07a:	4b03      	ldr	r3, [pc, #12]	@ (801a088 <raise+0x10>)
 801a07c:	0001      	movs	r1, r0
 801a07e:	6818      	ldr	r0, [r3, #0]
 801a080:	f7ff ffd1 	bl	801a026 <_raise_r>
 801a084:	bd10      	pop	{r4, pc}
 801a086:	46c0      	nop			@ (mov r8, r8)
 801a088:	200002dc 	.word	0x200002dc

0801a08c <_kill_r>:
 801a08c:	2300      	movs	r3, #0
 801a08e:	b570      	push	{r4, r5, r6, lr}
 801a090:	4d06      	ldr	r5, [pc, #24]	@ (801a0ac <_kill_r+0x20>)
 801a092:	0004      	movs	r4, r0
 801a094:	0008      	movs	r0, r1
 801a096:	0011      	movs	r1, r2
 801a098:	602b      	str	r3, [r5, #0]
 801a09a:	f7ee f815 	bl	80080c8 <_kill>
 801a09e:	1c43      	adds	r3, r0, #1
 801a0a0:	d103      	bne.n	801a0aa <_kill_r+0x1e>
 801a0a2:	682b      	ldr	r3, [r5, #0]
 801a0a4:	2b00      	cmp	r3, #0
 801a0a6:	d000      	beq.n	801a0aa <_kill_r+0x1e>
 801a0a8:	6023      	str	r3, [r4, #0]
 801a0aa:	bd70      	pop	{r4, r5, r6, pc}
 801a0ac:	200039d0 	.word	0x200039d0

0801a0b0 <_getpid_r>:
 801a0b0:	b510      	push	{r4, lr}
 801a0b2:	f7ee f803 	bl	80080bc <_getpid>
 801a0b6:	bd10      	pop	{r4, pc}

0801a0b8 <log10>:
 801a0b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a0ba:	0004      	movs	r4, r0
 801a0bc:	000d      	movs	r5, r1
 801a0be:	f000 f8fd 	bl	801a2bc <__ieee754_log10>
 801a0c2:	0022      	movs	r2, r4
 801a0c4:	0006      	movs	r6, r0
 801a0c6:	000f      	movs	r7, r1
 801a0c8:	002b      	movs	r3, r5
 801a0ca:	0020      	movs	r0, r4
 801a0cc:	0029      	movs	r1, r5
 801a0ce:	f7e9 f8dd 	bl	800328c <__aeabi_dcmpun>
 801a0d2:	2800      	cmp	r0, #0
 801a0d4:	d115      	bne.n	801a102 <log10+0x4a>
 801a0d6:	2200      	movs	r2, #0
 801a0d8:	2300      	movs	r3, #0
 801a0da:	0020      	movs	r0, r4
 801a0dc:	0029      	movs	r1, r5
 801a0de:	f7e6 f9ed 	bl	80004bc <__aeabi_dcmple>
 801a0e2:	2800      	cmp	r0, #0
 801a0e4:	d00d      	beq.n	801a102 <log10+0x4a>
 801a0e6:	2200      	movs	r2, #0
 801a0e8:	2300      	movs	r3, #0
 801a0ea:	0020      	movs	r0, r4
 801a0ec:	0029      	movs	r1, r5
 801a0ee:	f7e6 f9d5 	bl	800049c <__aeabi_dcmpeq>
 801a0f2:	2800      	cmp	r0, #0
 801a0f4:	d008      	beq.n	801a108 <log10+0x50>
 801a0f6:	f7fd fec5 	bl	8017e84 <__errno>
 801a0fa:	2322      	movs	r3, #34	@ 0x22
 801a0fc:	2600      	movs	r6, #0
 801a0fe:	4f07      	ldr	r7, [pc, #28]	@ (801a11c <log10+0x64>)
 801a100:	6003      	str	r3, [r0, #0]
 801a102:	0030      	movs	r0, r6
 801a104:	0039      	movs	r1, r7
 801a106:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a108:	f7fd febc 	bl	8017e84 <__errno>
 801a10c:	2321      	movs	r3, #33	@ 0x21
 801a10e:	6003      	str	r3, [r0, #0]
 801a110:	4803      	ldr	r0, [pc, #12]	@ (801a120 <log10+0x68>)
 801a112:	f000 f84b 	bl	801a1ac <nan>
 801a116:	0006      	movs	r6, r0
 801a118:	000f      	movs	r7, r1
 801a11a:	e7f2      	b.n	801a102 <log10+0x4a>
 801a11c:	fff00000 	.word	0xfff00000
 801a120:	0802d686 	.word	0x0802d686

0801a124 <expf>:
 801a124:	b570      	push	{r4, r5, r6, lr}
 801a126:	1c04      	adds	r4, r0, #0
 801a128:	f000 f942 	bl	801a3b0 <__ieee754_expf>
 801a12c:	1c05      	adds	r5, r0, #0
 801a12e:	1c20      	adds	r0, r4, #0
 801a130:	f000 f842 	bl	801a1b8 <finitef>
 801a134:	2800      	cmp	r0, #0
 801a136:	d00b      	beq.n	801a150 <expf+0x2c>
 801a138:	490c      	ldr	r1, [pc, #48]	@ (801a16c <expf+0x48>)
 801a13a:	1c20      	adds	r0, r4, #0
 801a13c:	f7e6 fa02 	bl	8000544 <__aeabi_fcmpgt>
 801a140:	2800      	cmp	r0, #0
 801a142:	d007      	beq.n	801a154 <expf+0x30>
 801a144:	f7fd fe9e 	bl	8017e84 <__errno>
 801a148:	25ff      	movs	r5, #255	@ 0xff
 801a14a:	2322      	movs	r3, #34	@ 0x22
 801a14c:	05ed      	lsls	r5, r5, #23
 801a14e:	6003      	str	r3, [r0, #0]
 801a150:	1c28      	adds	r0, r5, #0
 801a152:	bd70      	pop	{r4, r5, r6, pc}
 801a154:	4906      	ldr	r1, [pc, #24]	@ (801a170 <expf+0x4c>)
 801a156:	1c20      	adds	r0, r4, #0
 801a158:	f7e6 f9e0 	bl	800051c <__aeabi_fcmplt>
 801a15c:	2800      	cmp	r0, #0
 801a15e:	d0f7      	beq.n	801a150 <expf+0x2c>
 801a160:	f7fd fe90 	bl	8017e84 <__errno>
 801a164:	2322      	movs	r3, #34	@ 0x22
 801a166:	2500      	movs	r5, #0
 801a168:	6003      	str	r3, [r0, #0]
 801a16a:	e7f1      	b.n	801a150 <expf+0x2c>
 801a16c:	42b17217 	.word	0x42b17217
 801a170:	c2cff1b5 	.word	0xc2cff1b5

0801a174 <sqrtf>:
 801a174:	b570      	push	{r4, r5, r6, lr}
 801a176:	1c05      	adds	r5, r0, #0
 801a178:	f000 f828 	bl	801a1cc <__ieee754_sqrtf>
 801a17c:	1c29      	adds	r1, r5, #0
 801a17e:	1c04      	adds	r4, r0, #0
 801a180:	1c28      	adds	r0, r5, #0
 801a182:	f7e7 f9b3 	bl	80014ec <__aeabi_fcmpun>
 801a186:	2800      	cmp	r0, #0
 801a188:	d10e      	bne.n	801a1a8 <sqrtf+0x34>
 801a18a:	2100      	movs	r1, #0
 801a18c:	1c28      	adds	r0, r5, #0
 801a18e:	f7e6 f9c5 	bl	800051c <__aeabi_fcmplt>
 801a192:	2800      	cmp	r0, #0
 801a194:	d008      	beq.n	801a1a8 <sqrtf+0x34>
 801a196:	f7fd fe75 	bl	8017e84 <__errno>
 801a19a:	2321      	movs	r3, #33	@ 0x21
 801a19c:	2100      	movs	r1, #0
 801a19e:	6003      	str	r3, [r0, #0]
 801a1a0:	1c08      	adds	r0, r1, #0
 801a1a2:	f7e6 fcdb 	bl	8000b5c <__aeabi_fdiv>
 801a1a6:	1c04      	adds	r4, r0, #0
 801a1a8:	1c20      	adds	r0, r4, #0
 801a1aa:	bd70      	pop	{r4, r5, r6, pc}

0801a1ac <nan>:
 801a1ac:	2000      	movs	r0, #0
 801a1ae:	4901      	ldr	r1, [pc, #4]	@ (801a1b4 <nan+0x8>)
 801a1b0:	4770      	bx	lr
 801a1b2:	46c0      	nop			@ (mov r8, r8)
 801a1b4:	7ff80000 	.word	0x7ff80000

0801a1b8 <finitef>:
 801a1b8:	22ff      	movs	r2, #255	@ 0xff
 801a1ba:	0043      	lsls	r3, r0, #1
 801a1bc:	085b      	lsrs	r3, r3, #1
 801a1be:	2001      	movs	r0, #1
 801a1c0:	05d2      	lsls	r2, r2, #23
 801a1c2:	4293      	cmp	r3, r2
 801a1c4:	db00      	blt.n	801a1c8 <finitef+0x10>
 801a1c6:	2000      	movs	r0, #0
 801a1c8:	4770      	bx	lr
	...

0801a1cc <__ieee754_sqrtf>:
 801a1cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a1ce:	0003      	movs	r3, r0
 801a1d0:	0042      	lsls	r2, r0, #1
 801a1d2:	1c04      	adds	r4, r0, #0
 801a1d4:	20ff      	movs	r0, #255	@ 0xff
 801a1d6:	0852      	lsrs	r2, r2, #1
 801a1d8:	05c0      	lsls	r0, r0, #23
 801a1da:	4282      	cmp	r2, r0
 801a1dc:	d30a      	bcc.n	801a1f4 <__ieee754_sqrtf+0x28>
 801a1de:	1c21      	adds	r1, r4, #0
 801a1e0:	1c20      	adds	r0, r4, #0
 801a1e2:	f7e6 fea1 	bl	8000f28 <__aeabi_fmul>
 801a1e6:	1c01      	adds	r1, r0, #0
 801a1e8:	1c20      	adds	r0, r4, #0
 801a1ea:	f7e6 fb2d 	bl	8000848 <__aeabi_fadd>
 801a1ee:	1c04      	adds	r4, r0, #0
 801a1f0:	1c20      	adds	r0, r4, #0
 801a1f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a1f4:	2a00      	cmp	r2, #0
 801a1f6:	d0fb      	beq.n	801a1f0 <__ieee754_sqrtf+0x24>
 801a1f8:	2c00      	cmp	r4, #0
 801a1fa:	da07      	bge.n	801a20c <__ieee754_sqrtf+0x40>
 801a1fc:	1c21      	adds	r1, r4, #0
 801a1fe:	1c20      	adds	r0, r4, #0
 801a200:	f7e6 ffd0 	bl	80011a4 <__aeabi_fsub>
 801a204:	1c01      	adds	r1, r0, #0
 801a206:	f7e6 fca9 	bl	8000b5c <__aeabi_fdiv>
 801a20a:	e7f0      	b.n	801a1ee <__ieee754_sqrtf+0x22>
 801a20c:	0022      	movs	r2, r4
 801a20e:	15e1      	asrs	r1, r4, #23
 801a210:	4002      	ands	r2, r0
 801a212:	4204      	tst	r4, r0
 801a214:	d046      	beq.n	801a2a4 <__ieee754_sqrtf+0xd8>
 801a216:	2280      	movs	r2, #128	@ 0x80
 801a218:	000f      	movs	r7, r1
 801a21a:	025b      	lsls	r3, r3, #9
 801a21c:	0a5b      	lsrs	r3, r3, #9
 801a21e:	0412      	lsls	r2, r2, #16
 801a220:	3f7f      	subs	r7, #127	@ 0x7f
 801a222:	4313      	orrs	r3, r2
 801a224:	07c9      	lsls	r1, r1, #31
 801a226:	d400      	bmi.n	801a22a <__ieee754_sqrtf+0x5e>
 801a228:	005b      	lsls	r3, r3, #1
 801a22a:	2400      	movs	r4, #0
 801a22c:	2180      	movs	r1, #128	@ 0x80
 801a22e:	2019      	movs	r0, #25
 801a230:	0026      	movs	r6, r4
 801a232:	107f      	asrs	r7, r7, #1
 801a234:	005b      	lsls	r3, r3, #1
 801a236:	0449      	lsls	r1, r1, #17
 801a238:	1875      	adds	r5, r6, r1
 801a23a:	001a      	movs	r2, r3
 801a23c:	429d      	cmp	r5, r3
 801a23e:	dc02      	bgt.n	801a246 <__ieee754_sqrtf+0x7a>
 801a240:	186e      	adds	r6, r5, r1
 801a242:	1b5a      	subs	r2, r3, r5
 801a244:	1864      	adds	r4, r4, r1
 801a246:	3801      	subs	r0, #1
 801a248:	0053      	lsls	r3, r2, #1
 801a24a:	0849      	lsrs	r1, r1, #1
 801a24c:	2800      	cmp	r0, #0
 801a24e:	d1f3      	bne.n	801a238 <__ieee754_sqrtf+0x6c>
 801a250:	2a00      	cmp	r2, #0
 801a252:	d019      	beq.n	801a288 <__ieee754_sqrtf+0xbc>
 801a254:	4d17      	ldr	r5, [pc, #92]	@ (801a2b4 <__ieee754_sqrtf+0xe8>)
 801a256:	4e18      	ldr	r6, [pc, #96]	@ (801a2b8 <__ieee754_sqrtf+0xec>)
 801a258:	6828      	ldr	r0, [r5, #0]
 801a25a:	6831      	ldr	r1, [r6, #0]
 801a25c:	682b      	ldr	r3, [r5, #0]
 801a25e:	9301      	str	r3, [sp, #4]
 801a260:	f7e6 ffa0 	bl	80011a4 <__aeabi_fsub>
 801a264:	1c01      	adds	r1, r0, #0
 801a266:	9801      	ldr	r0, [sp, #4]
 801a268:	f7e6 f962 	bl	8000530 <__aeabi_fcmple>
 801a26c:	2800      	cmp	r0, #0
 801a26e:	d00b      	beq.n	801a288 <__ieee754_sqrtf+0xbc>
 801a270:	6828      	ldr	r0, [r5, #0]
 801a272:	6831      	ldr	r1, [r6, #0]
 801a274:	f7e6 fae8 	bl	8000848 <__aeabi_fadd>
 801a278:	682d      	ldr	r5, [r5, #0]
 801a27a:	1c01      	adds	r1, r0, #0
 801a27c:	1c28      	adds	r0, r5, #0
 801a27e:	f7e6 f94d 	bl	800051c <__aeabi_fcmplt>
 801a282:	2800      	cmp	r0, #0
 801a284:	d011      	beq.n	801a2aa <__ieee754_sqrtf+0xde>
 801a286:	3402      	adds	r4, #2
 801a288:	23fc      	movs	r3, #252	@ 0xfc
 801a28a:	1064      	asrs	r4, r4, #1
 801a28c:	059b      	lsls	r3, r3, #22
 801a28e:	18e3      	adds	r3, r4, r3
 801a290:	05fc      	lsls	r4, r7, #23
 801a292:	18e4      	adds	r4, r4, r3
 801a294:	e7ac      	b.n	801a1f0 <__ieee754_sqrtf+0x24>
 801a296:	005b      	lsls	r3, r3, #1
 801a298:	3201      	adds	r2, #1
 801a29a:	4203      	tst	r3, r0
 801a29c:	d0fb      	beq.n	801a296 <__ieee754_sqrtf+0xca>
 801a29e:	3a01      	subs	r2, #1
 801a2a0:	1a89      	subs	r1, r1, r2
 801a2a2:	e7b8      	b.n	801a216 <__ieee754_sqrtf+0x4a>
 801a2a4:	2080      	movs	r0, #128	@ 0x80
 801a2a6:	0400      	lsls	r0, r0, #16
 801a2a8:	e7f7      	b.n	801a29a <__ieee754_sqrtf+0xce>
 801a2aa:	2301      	movs	r3, #1
 801a2ac:	3401      	adds	r4, #1
 801a2ae:	439c      	bics	r4, r3
 801a2b0:	e7ea      	b.n	801a288 <__ieee754_sqrtf+0xbc>
 801a2b2:	46c0      	nop			@ (mov r8, r8)
 801a2b4:	2000049c 	.word	0x2000049c
 801a2b8:	20000498 	.word	0x20000498

0801a2bc <__ieee754_log10>:
 801a2bc:	2280      	movs	r2, #128	@ 0x80
 801a2be:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a2c0:	000b      	movs	r3, r1
 801a2c2:	0004      	movs	r4, r0
 801a2c4:	000d      	movs	r5, r1
 801a2c6:	b085      	sub	sp, #20
 801a2c8:	0352      	lsls	r2, r2, #13
 801a2ca:	4291      	cmp	r1, r2
 801a2cc:	da26      	bge.n	801a31c <__ieee754_log10+0x60>
 801a2ce:	004a      	lsls	r2, r1, #1
 801a2d0:	0852      	lsrs	r2, r2, #1
 801a2d2:	4302      	orrs	r2, r0
 801a2d4:	d107      	bne.n	801a2e6 <__ieee754_log10+0x2a>
 801a2d6:	2200      	movs	r2, #0
 801a2d8:	2300      	movs	r3, #0
 801a2da:	2000      	movs	r0, #0
 801a2dc:	4929      	ldr	r1, [pc, #164]	@ (801a384 <__ieee754_log10+0xc8>)
 801a2de:	f7e7 fd2d 	bl	8001d3c <__aeabi_ddiv>
 801a2e2:	b005      	add	sp, #20
 801a2e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a2e6:	2900      	cmp	r1, #0
 801a2e8:	da05      	bge.n	801a2f6 <__ieee754_log10+0x3a>
 801a2ea:	0002      	movs	r2, r0
 801a2ec:	f7e8 fc32 	bl	8002b54 <__aeabi_dsub>
 801a2f0:	2200      	movs	r2, #0
 801a2f2:	2300      	movs	r3, #0
 801a2f4:	e7f3      	b.n	801a2de <__ieee754_log10+0x22>
 801a2f6:	2200      	movs	r2, #0
 801a2f8:	4b23      	ldr	r3, [pc, #140]	@ (801a388 <__ieee754_log10+0xcc>)
 801a2fa:	f7e8 f963 	bl	80025c4 <__aeabi_dmul>
 801a2fe:	2236      	movs	r2, #54	@ 0x36
 801a300:	0004      	movs	r4, r0
 801a302:	000d      	movs	r5, r1
 801a304:	000b      	movs	r3, r1
 801a306:	4252      	negs	r2, r2
 801a308:	4920      	ldr	r1, [pc, #128]	@ (801a38c <__ieee754_log10+0xd0>)
 801a30a:	428b      	cmp	r3, r1
 801a30c:	dd08      	ble.n	801a320 <__ieee754_log10+0x64>
 801a30e:	0022      	movs	r2, r4
 801a310:	002b      	movs	r3, r5
 801a312:	0020      	movs	r0, r4
 801a314:	0029      	movs	r1, r5
 801a316:	f7e7 f9ad 	bl	8001674 <__aeabi_dadd>
 801a31a:	e7e2      	b.n	801a2e2 <__ieee754_log10+0x26>
 801a31c:	2200      	movs	r2, #0
 801a31e:	e7f3      	b.n	801a308 <__ieee754_log10+0x4c>
 801a320:	491b      	ldr	r1, [pc, #108]	@ (801a390 <__ieee754_log10+0xd4>)
 801a322:	1518      	asrs	r0, r3, #20
 801a324:	1840      	adds	r0, r0, r1
 801a326:	1880      	adds	r0, r0, r2
 801a328:	0fc2      	lsrs	r2, r0, #31
 801a32a:	031b      	lsls	r3, r3, #12
 801a32c:	0b1b      	lsrs	r3, r3, #12
 801a32e:	1880      	adds	r0, r0, r2
 801a330:	9203      	str	r2, [sp, #12]
 801a332:	9300      	str	r3, [sp, #0]
 801a334:	f7e9 f808 	bl	8003348 <__aeabi_i2d>
 801a338:	9a03      	ldr	r2, [sp, #12]
 801a33a:	4b16      	ldr	r3, [pc, #88]	@ (801a394 <__ieee754_log10+0xd8>)
 801a33c:	0006      	movs	r6, r0
 801a33e:	1a9b      	subs	r3, r3, r2
 801a340:	9a00      	ldr	r2, [sp, #0]
 801a342:	051b      	lsls	r3, r3, #20
 801a344:	431a      	orrs	r2, r3
 801a346:	0015      	movs	r5, r2
 801a348:	4b13      	ldr	r3, [pc, #76]	@ (801a398 <__ieee754_log10+0xdc>)
 801a34a:	4a14      	ldr	r2, [pc, #80]	@ (801a39c <__ieee754_log10+0xe0>)
 801a34c:	000f      	movs	r7, r1
 801a34e:	f7e8 f939 	bl	80025c4 <__aeabi_dmul>
 801a352:	9000      	str	r0, [sp, #0]
 801a354:	9101      	str	r1, [sp, #4]
 801a356:	0020      	movs	r0, r4
 801a358:	0029      	movs	r1, r5
 801a35a:	f000 f93b 	bl	801a5d4 <__ieee754_log>
 801a35e:	4a10      	ldr	r2, [pc, #64]	@ (801a3a0 <__ieee754_log10+0xe4>)
 801a360:	4b10      	ldr	r3, [pc, #64]	@ (801a3a4 <__ieee754_log10+0xe8>)
 801a362:	f7e8 f92f 	bl	80025c4 <__aeabi_dmul>
 801a366:	9a00      	ldr	r2, [sp, #0]
 801a368:	9b01      	ldr	r3, [sp, #4]
 801a36a:	f7e7 f983 	bl	8001674 <__aeabi_dadd>
 801a36e:	4a0e      	ldr	r2, [pc, #56]	@ (801a3a8 <__ieee754_log10+0xec>)
 801a370:	4b0e      	ldr	r3, [pc, #56]	@ (801a3ac <__ieee754_log10+0xf0>)
 801a372:	0004      	movs	r4, r0
 801a374:	000d      	movs	r5, r1
 801a376:	0030      	movs	r0, r6
 801a378:	0039      	movs	r1, r7
 801a37a:	f7e8 f923 	bl	80025c4 <__aeabi_dmul>
 801a37e:	0002      	movs	r2, r0
 801a380:	000b      	movs	r3, r1
 801a382:	e7c6      	b.n	801a312 <__ieee754_log10+0x56>
 801a384:	c3500000 	.word	0xc3500000
 801a388:	43500000 	.word	0x43500000
 801a38c:	7fefffff 	.word	0x7fefffff
 801a390:	fffffc01 	.word	0xfffffc01
 801a394:	000003ff 	.word	0x000003ff
 801a398:	3d59fef3 	.word	0x3d59fef3
 801a39c:	11f12b36 	.word	0x11f12b36
 801a3a0:	1526e50e 	.word	0x1526e50e
 801a3a4:	3fdbcb7b 	.word	0x3fdbcb7b
 801a3a8:	509f6000 	.word	0x509f6000
 801a3ac:	3fd34413 	.word	0x3fd34413

0801a3b0 <__ieee754_expf>:
 801a3b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a3b2:	21ff      	movs	r1, #255	@ 0xff
 801a3b4:	0043      	lsls	r3, r0, #1
 801a3b6:	1c04      	adds	r4, r0, #0
 801a3b8:	085b      	lsrs	r3, r3, #1
 801a3ba:	05c9      	lsls	r1, r1, #23
 801a3bc:	428b      	cmp	r3, r1
 801a3be:	d904      	bls.n	801a3ca <__ieee754_expf+0x1a>
 801a3c0:	1c01      	adds	r1, r0, #0
 801a3c2:	1c20      	adds	r0, r4, #0
 801a3c4:	f7e6 fa40 	bl	8000848 <__aeabi_fadd>
 801a3c8:	e00d      	b.n	801a3e6 <__ieee754_expf+0x36>
 801a3ca:	0fc6      	lsrs	r6, r0, #31
 801a3cc:	428b      	cmp	r3, r1
 801a3ce:	d104      	bne.n	801a3da <__ieee754_expf+0x2a>
 801a3d0:	2e00      	cmp	r6, #0
 801a3d2:	d000      	beq.n	801a3d6 <__ieee754_expf+0x26>
 801a3d4:	e0ba      	b.n	801a54c <__ieee754_expf+0x19c>
 801a3d6:	1c20      	adds	r0, r4, #0
 801a3d8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801a3da:	495d      	ldr	r1, [pc, #372]	@ (801a550 <__ieee754_expf+0x1a0>)
 801a3dc:	4288      	cmp	r0, r1
 801a3de:	dd04      	ble.n	801a3ea <__ieee754_expf+0x3a>
 801a3e0:	2000      	movs	r0, #0
 801a3e2:	f000 f8f1 	bl	801a5c8 <__math_oflowf>
 801a3e6:	1c04      	adds	r4, r0, #0
 801a3e8:	e7f5      	b.n	801a3d6 <__ieee754_expf+0x26>
 801a3ea:	2800      	cmp	r0, #0
 801a3ec:	da06      	bge.n	801a3fc <__ieee754_expf+0x4c>
 801a3ee:	4a59      	ldr	r2, [pc, #356]	@ (801a554 <__ieee754_expf+0x1a4>)
 801a3f0:	4293      	cmp	r3, r2
 801a3f2:	d903      	bls.n	801a3fc <__ieee754_expf+0x4c>
 801a3f4:	2000      	movs	r0, #0
 801a3f6:	f000 f8e1 	bl	801a5bc <__math_uflowf>
 801a3fa:	e7f4      	b.n	801a3e6 <__ieee754_expf+0x36>
 801a3fc:	4a56      	ldr	r2, [pc, #344]	@ (801a558 <__ieee754_expf+0x1a8>)
 801a3fe:	4293      	cmp	r3, r2
 801a400:	d96e      	bls.n	801a4e0 <__ieee754_expf+0x130>
 801a402:	4a56      	ldr	r2, [pc, #344]	@ (801a55c <__ieee754_expf+0x1ac>)
 801a404:	00b5      	lsls	r5, r6, #2
 801a406:	4293      	cmp	r3, r2
 801a408:	d84e      	bhi.n	801a4a8 <__ieee754_expf+0xf8>
 801a40a:	4b55      	ldr	r3, [pc, #340]	@ (801a560 <__ieee754_expf+0x1b0>)
 801a40c:	1c20      	adds	r0, r4, #0
 801a40e:	5959      	ldr	r1, [r3, r5]
 801a410:	f7e6 fec8 	bl	80011a4 <__aeabi_fsub>
 801a414:	4b53      	ldr	r3, [pc, #332]	@ (801a564 <__ieee754_expf+0x1b4>)
 801a416:	1c07      	adds	r7, r0, #0
 801a418:	595b      	ldr	r3, [r3, r5]
 801a41a:	2501      	movs	r5, #1
 801a41c:	1bad      	subs	r5, r5, r6
 801a41e:	9300      	str	r3, [sp, #0]
 801a420:	1bad      	subs	r5, r5, r6
 801a422:	9900      	ldr	r1, [sp, #0]
 801a424:	1c38      	adds	r0, r7, #0
 801a426:	f7e6 febd 	bl	80011a4 <__aeabi_fsub>
 801a42a:	1c04      	adds	r4, r0, #0
 801a42c:	1c21      	adds	r1, r4, #0
 801a42e:	1c20      	adds	r0, r4, #0
 801a430:	f7e6 fd7a 	bl	8000f28 <__aeabi_fmul>
 801a434:	494c      	ldr	r1, [pc, #304]	@ (801a568 <__ieee754_expf+0x1b8>)
 801a436:	1c06      	adds	r6, r0, #0
 801a438:	f7e6 fd76 	bl	8000f28 <__aeabi_fmul>
 801a43c:	494b      	ldr	r1, [pc, #300]	@ (801a56c <__ieee754_expf+0x1bc>)
 801a43e:	f7e6 feb1 	bl	80011a4 <__aeabi_fsub>
 801a442:	1c31      	adds	r1, r6, #0
 801a444:	f7e6 fd70 	bl	8000f28 <__aeabi_fmul>
 801a448:	4949      	ldr	r1, [pc, #292]	@ (801a570 <__ieee754_expf+0x1c0>)
 801a44a:	f7e6 f9fd 	bl	8000848 <__aeabi_fadd>
 801a44e:	1c31      	adds	r1, r6, #0
 801a450:	f7e6 fd6a 	bl	8000f28 <__aeabi_fmul>
 801a454:	4947      	ldr	r1, [pc, #284]	@ (801a574 <__ieee754_expf+0x1c4>)
 801a456:	f7e6 fea5 	bl	80011a4 <__aeabi_fsub>
 801a45a:	1c31      	adds	r1, r6, #0
 801a45c:	f7e6 fd64 	bl	8000f28 <__aeabi_fmul>
 801a460:	4945      	ldr	r1, [pc, #276]	@ (801a578 <__ieee754_expf+0x1c8>)
 801a462:	f7e6 f9f1 	bl	8000848 <__aeabi_fadd>
 801a466:	1c31      	adds	r1, r6, #0
 801a468:	f7e6 fd5e 	bl	8000f28 <__aeabi_fmul>
 801a46c:	1c01      	adds	r1, r0, #0
 801a46e:	1c20      	adds	r0, r4, #0
 801a470:	f7e6 fe98 	bl	80011a4 <__aeabi_fsub>
 801a474:	1c01      	adds	r1, r0, #0
 801a476:	1c06      	adds	r6, r0, #0
 801a478:	1c20      	adds	r0, r4, #0
 801a47a:	f7e6 fd55 	bl	8000f28 <__aeabi_fmul>
 801a47e:	9001      	str	r0, [sp, #4]
 801a480:	2d00      	cmp	r5, #0
 801a482:	d140      	bne.n	801a506 <__ieee754_expf+0x156>
 801a484:	2180      	movs	r1, #128	@ 0x80
 801a486:	1c30      	adds	r0, r6, #0
 801a488:	05c9      	lsls	r1, r1, #23
 801a48a:	f7e6 fe8b 	bl	80011a4 <__aeabi_fsub>
 801a48e:	1c01      	adds	r1, r0, #0
 801a490:	9801      	ldr	r0, [sp, #4]
 801a492:	f7e6 fb63 	bl	8000b5c <__aeabi_fdiv>
 801a496:	1c21      	adds	r1, r4, #0
 801a498:	f7e6 fe84 	bl	80011a4 <__aeabi_fsub>
 801a49c:	1c01      	adds	r1, r0, #0
 801a49e:	20fe      	movs	r0, #254	@ 0xfe
 801a4a0:	0580      	lsls	r0, r0, #22
 801a4a2:	f7e6 fe7f 	bl	80011a4 <__aeabi_fsub>
 801a4a6:	e79e      	b.n	801a3e6 <__ieee754_expf+0x36>
 801a4a8:	4934      	ldr	r1, [pc, #208]	@ (801a57c <__ieee754_expf+0x1cc>)
 801a4aa:	1c20      	adds	r0, r4, #0
 801a4ac:	f7e6 fd3c 	bl	8000f28 <__aeabi_fmul>
 801a4b0:	4b33      	ldr	r3, [pc, #204]	@ (801a580 <__ieee754_expf+0x1d0>)
 801a4b2:	5959      	ldr	r1, [r3, r5]
 801a4b4:	f7e6 f9c8 	bl	8000848 <__aeabi_fadd>
 801a4b8:	f7e7 f82e 	bl	8001518 <__aeabi_f2iz>
 801a4bc:	0005      	movs	r5, r0
 801a4be:	f7e7 f84b 	bl	8001558 <__aeabi_i2f>
 801a4c2:	4930      	ldr	r1, [pc, #192]	@ (801a584 <__ieee754_expf+0x1d4>)
 801a4c4:	1c06      	adds	r6, r0, #0
 801a4c6:	f7e6 fd2f 	bl	8000f28 <__aeabi_fmul>
 801a4ca:	1c01      	adds	r1, r0, #0
 801a4cc:	1c20      	adds	r0, r4, #0
 801a4ce:	f7e6 fe69 	bl	80011a4 <__aeabi_fsub>
 801a4d2:	492d      	ldr	r1, [pc, #180]	@ (801a588 <__ieee754_expf+0x1d8>)
 801a4d4:	1c07      	adds	r7, r0, #0
 801a4d6:	1c30      	adds	r0, r6, #0
 801a4d8:	f7e6 fd26 	bl	8000f28 <__aeabi_fmul>
 801a4dc:	9000      	str	r0, [sp, #0]
 801a4de:	e7a0      	b.n	801a422 <__ieee754_expf+0x72>
 801a4e0:	22d0      	movs	r2, #208	@ 0xd0
 801a4e2:	0592      	lsls	r2, r2, #22
 801a4e4:	4293      	cmp	r3, r2
 801a4e6:	d20c      	bcs.n	801a502 <__ieee754_expf+0x152>
 801a4e8:	4928      	ldr	r1, [pc, #160]	@ (801a58c <__ieee754_expf+0x1dc>)
 801a4ea:	1c20      	adds	r0, r4, #0
 801a4ec:	f7e6 f9ac 	bl	8000848 <__aeabi_fadd>
 801a4f0:	21fe      	movs	r1, #254	@ 0xfe
 801a4f2:	0589      	lsls	r1, r1, #22
 801a4f4:	f7e6 f826 	bl	8000544 <__aeabi_fcmpgt>
 801a4f8:	1e05      	subs	r5, r0, #0
 801a4fa:	d097      	beq.n	801a42c <__ieee754_expf+0x7c>
 801a4fc:	21fe      	movs	r1, #254	@ 0xfe
 801a4fe:	0589      	lsls	r1, r1, #22
 801a500:	e75f      	b.n	801a3c2 <__ieee754_expf+0x12>
 801a502:	2500      	movs	r5, #0
 801a504:	e792      	b.n	801a42c <__ieee754_expf+0x7c>
 801a506:	2080      	movs	r0, #128	@ 0x80
 801a508:	1c31      	adds	r1, r6, #0
 801a50a:	05c0      	lsls	r0, r0, #23
 801a50c:	f7e6 fe4a 	bl	80011a4 <__aeabi_fsub>
 801a510:	1c01      	adds	r1, r0, #0
 801a512:	9801      	ldr	r0, [sp, #4]
 801a514:	f7e6 fb22 	bl	8000b5c <__aeabi_fdiv>
 801a518:	1c01      	adds	r1, r0, #0
 801a51a:	9800      	ldr	r0, [sp, #0]
 801a51c:	f7e6 fe42 	bl	80011a4 <__aeabi_fsub>
 801a520:	1c39      	adds	r1, r7, #0
 801a522:	f7e6 fe3f 	bl	80011a4 <__aeabi_fsub>
 801a526:	1c01      	adds	r1, r0, #0
 801a528:	20fe      	movs	r0, #254	@ 0xfe
 801a52a:	0580      	lsls	r0, r0, #22
 801a52c:	f7e6 fe3a 	bl	80011a4 <__aeabi_fsub>
 801a530:	002b      	movs	r3, r5
 801a532:	337d      	adds	r3, #125	@ 0x7d
 801a534:	db02      	blt.n	801a53c <__ieee754_expf+0x18c>
 801a536:	05ec      	lsls	r4, r5, #23
 801a538:	1824      	adds	r4, r4, r0
 801a53a:	e74c      	b.n	801a3d6 <__ieee754_expf+0x26>
 801a53c:	21d8      	movs	r1, #216	@ 0xd8
 801a53e:	3564      	adds	r5, #100	@ 0x64
 801a540:	05ed      	lsls	r5, r5, #23
 801a542:	1828      	adds	r0, r5, r0
 801a544:	0509      	lsls	r1, r1, #20
 801a546:	f7e6 fcef 	bl	8000f28 <__aeabi_fmul>
 801a54a:	e74c      	b.n	801a3e6 <__ieee754_expf+0x36>
 801a54c:	2400      	movs	r4, #0
 801a54e:	e742      	b.n	801a3d6 <__ieee754_expf+0x26>
 801a550:	42b17217 	.word	0x42b17217
 801a554:	42cff1b5 	.word	0x42cff1b5
 801a558:	3eb17218 	.word	0x3eb17218
 801a55c:	3f851591 	.word	0x3f851591
 801a560:	0802d790 	.word	0x0802d790
 801a564:	0802d788 	.word	0x0802d788
 801a568:	3331bb4c 	.word	0x3331bb4c
 801a56c:	35ddea0e 	.word	0x35ddea0e
 801a570:	388ab355 	.word	0x388ab355
 801a574:	3b360b61 	.word	0x3b360b61
 801a578:	3e2aaaab 	.word	0x3e2aaaab
 801a57c:	3fb8aa3b 	.word	0x3fb8aa3b
 801a580:	0802d798 	.word	0x0802d798
 801a584:	3f317180 	.word	0x3f317180
 801a588:	3717f7d1 	.word	0x3717f7d1
 801a58c:	7149f2ca 	.word	0x7149f2ca

0801a590 <with_errnof>:
 801a590:	b570      	push	{r4, r5, r6, lr}
 801a592:	000d      	movs	r5, r1
 801a594:	1c04      	adds	r4, r0, #0
 801a596:	f7fd fc75 	bl	8017e84 <__errno>
 801a59a:	6005      	str	r5, [r0, #0]
 801a59c:	1c20      	adds	r0, r4, #0
 801a59e:	bd70      	pop	{r4, r5, r6, pc}

0801a5a0 <xflowf>:
 801a5a0:	b510      	push	{r4, lr}
 801a5a2:	1c0b      	adds	r3, r1, #0
 801a5a4:	2800      	cmp	r0, #0
 801a5a6:	d002      	beq.n	801a5ae <xflowf+0xe>
 801a5a8:	2380      	movs	r3, #128	@ 0x80
 801a5aa:	061b      	lsls	r3, r3, #24
 801a5ac:	18cb      	adds	r3, r1, r3
 801a5ae:	1c18      	adds	r0, r3, #0
 801a5b0:	f7e6 fcba 	bl	8000f28 <__aeabi_fmul>
 801a5b4:	2122      	movs	r1, #34	@ 0x22
 801a5b6:	f7ff ffeb 	bl	801a590 <with_errnof>
 801a5ba:	bd10      	pop	{r4, pc}

0801a5bc <__math_uflowf>:
 801a5bc:	2180      	movs	r1, #128	@ 0x80
 801a5be:	b510      	push	{r4, lr}
 801a5c0:	0549      	lsls	r1, r1, #21
 801a5c2:	f7ff ffed 	bl	801a5a0 <xflowf>
 801a5c6:	bd10      	pop	{r4, pc}

0801a5c8 <__math_oflowf>:
 801a5c8:	21e0      	movs	r1, #224	@ 0xe0
 801a5ca:	b510      	push	{r4, lr}
 801a5cc:	05c9      	lsls	r1, r1, #23
 801a5ce:	f7ff ffe7 	bl	801a5a0 <xflowf>
 801a5d2:	bd10      	pop	{r4, pc}

0801a5d4 <__ieee754_log>:
 801a5d4:	2380      	movs	r3, #128	@ 0x80
 801a5d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a5d8:	035b      	lsls	r3, r3, #13
 801a5da:	000e      	movs	r6, r1
 801a5dc:	b08d      	sub	sp, #52	@ 0x34
 801a5de:	4299      	cmp	r1, r3
 801a5e0:	da23      	bge.n	801a62a <__ieee754_log+0x56>
 801a5e2:	004b      	lsls	r3, r1, #1
 801a5e4:	085b      	lsrs	r3, r3, #1
 801a5e6:	4303      	orrs	r3, r0
 801a5e8:	d107      	bne.n	801a5fa <__ieee754_log+0x26>
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	2300      	movs	r3, #0
 801a5ee:	2000      	movs	r0, #0
 801a5f0:	49b4      	ldr	r1, [pc, #720]	@ (801a8c4 <__ieee754_log+0x2f0>)
 801a5f2:	f7e7 fba3 	bl	8001d3c <__aeabi_ddiv>
 801a5f6:	b00d      	add	sp, #52	@ 0x34
 801a5f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a5fa:	2900      	cmp	r1, #0
 801a5fc:	da06      	bge.n	801a60c <__ieee754_log+0x38>
 801a5fe:	0002      	movs	r2, r0
 801a600:	000b      	movs	r3, r1
 801a602:	f7e8 faa7 	bl	8002b54 <__aeabi_dsub>
 801a606:	2200      	movs	r2, #0
 801a608:	2300      	movs	r3, #0
 801a60a:	e7f2      	b.n	801a5f2 <__ieee754_log+0x1e>
 801a60c:	4bae      	ldr	r3, [pc, #696]	@ (801a8c8 <__ieee754_log+0x2f4>)
 801a60e:	2200      	movs	r2, #0
 801a610:	f7e7 ffd8 	bl	80025c4 <__aeabi_dmul>
 801a614:	2336      	movs	r3, #54	@ 0x36
 801a616:	000e      	movs	r6, r1
 801a618:	425b      	negs	r3, r3
 801a61a:	4aac      	ldr	r2, [pc, #688]	@ (801a8cc <__ieee754_log+0x2f8>)
 801a61c:	4296      	cmp	r6, r2
 801a61e:	dd06      	ble.n	801a62e <__ieee754_log+0x5a>
 801a620:	0002      	movs	r2, r0
 801a622:	000b      	movs	r3, r1
 801a624:	f7e7 f826 	bl	8001674 <__aeabi_dadd>
 801a628:	e7e5      	b.n	801a5f6 <__ieee754_log+0x22>
 801a62a:	2300      	movs	r3, #0
 801a62c:	e7f5      	b.n	801a61a <__ieee754_log+0x46>
 801a62e:	4ca8      	ldr	r4, [pc, #672]	@ (801a8d0 <__ieee754_log+0x2fc>)
 801a630:	1532      	asrs	r2, r6, #20
 801a632:	1912      	adds	r2, r2, r4
 801a634:	0336      	lsls	r6, r6, #12
 801a636:	4ca7      	ldr	r4, [pc, #668]	@ (801a8d4 <__ieee754_log+0x300>)
 801a638:	18d2      	adds	r2, r2, r3
 801a63a:	0b33      	lsrs	r3, r6, #12
 801a63c:	9302      	str	r3, [sp, #8]
 801a63e:	191b      	adds	r3, r3, r4
 801a640:	2480      	movs	r4, #128	@ 0x80
 801a642:	0364      	lsls	r4, r4, #13
 801a644:	4023      	ands	r3, r4
 801a646:	4ca4      	ldr	r4, [pc, #656]	@ (801a8d8 <__ieee754_log+0x304>)
 801a648:	9d02      	ldr	r5, [sp, #8]
 801a64a:	405c      	eors	r4, r3
 801a64c:	151b      	asrs	r3, r3, #20
 801a64e:	189b      	adds	r3, r3, r2
 801a650:	4325      	orrs	r5, r4
 801a652:	2200      	movs	r2, #0
 801a654:	9300      	str	r3, [sp, #0]
 801a656:	0029      	movs	r1, r5
 801a658:	4b9f      	ldr	r3, [pc, #636]	@ (801a8d8 <__ieee754_log+0x304>)
 801a65a:	f7e8 fa7b 	bl	8002b54 <__aeabi_dsub>
 801a65e:	9b02      	ldr	r3, [sp, #8]
 801a660:	0006      	movs	r6, r0
 801a662:	3302      	adds	r3, #2
 801a664:	031b      	lsls	r3, r3, #12
 801a666:	000f      	movs	r7, r1
 801a668:	2200      	movs	r2, #0
 801a66a:	0b1b      	lsrs	r3, r3, #12
 801a66c:	2b02      	cmp	r3, #2
 801a66e:	dc64      	bgt.n	801a73a <__ieee754_log+0x166>
 801a670:	2300      	movs	r3, #0
 801a672:	f7e5 ff13 	bl	800049c <__aeabi_dcmpeq>
 801a676:	2800      	cmp	r0, #0
 801a678:	d019      	beq.n	801a6ae <__ieee754_log+0xda>
 801a67a:	9b00      	ldr	r3, [sp, #0]
 801a67c:	2b00      	cmp	r3, #0
 801a67e:	d100      	bne.n	801a682 <__ieee754_log+0xae>
 801a680:	e11c      	b.n	801a8bc <__ieee754_log+0x2e8>
 801a682:	0018      	movs	r0, r3
 801a684:	f7e8 fe60 	bl	8003348 <__aeabi_i2d>
 801a688:	4a94      	ldr	r2, [pc, #592]	@ (801a8dc <__ieee754_log+0x308>)
 801a68a:	4b95      	ldr	r3, [pc, #596]	@ (801a8e0 <__ieee754_log+0x30c>)
 801a68c:	0004      	movs	r4, r0
 801a68e:	000d      	movs	r5, r1
 801a690:	f7e7 ff98 	bl	80025c4 <__aeabi_dmul>
 801a694:	4a93      	ldr	r2, [pc, #588]	@ (801a8e4 <__ieee754_log+0x310>)
 801a696:	0006      	movs	r6, r0
 801a698:	000f      	movs	r7, r1
 801a69a:	4b93      	ldr	r3, [pc, #588]	@ (801a8e8 <__ieee754_log+0x314>)
 801a69c:	0020      	movs	r0, r4
 801a69e:	0029      	movs	r1, r5
 801a6a0:	f7e7 ff90 	bl	80025c4 <__aeabi_dmul>
 801a6a4:	0002      	movs	r2, r0
 801a6a6:	000b      	movs	r3, r1
 801a6a8:	0030      	movs	r0, r6
 801a6aa:	0039      	movs	r1, r7
 801a6ac:	e7ba      	b.n	801a624 <__ieee754_log+0x50>
 801a6ae:	4a8f      	ldr	r2, [pc, #572]	@ (801a8ec <__ieee754_log+0x318>)
 801a6b0:	4b8f      	ldr	r3, [pc, #572]	@ (801a8f0 <__ieee754_log+0x31c>)
 801a6b2:	0030      	movs	r0, r6
 801a6b4:	0039      	movs	r1, r7
 801a6b6:	f7e7 ff85 	bl	80025c4 <__aeabi_dmul>
 801a6ba:	0002      	movs	r2, r0
 801a6bc:	000b      	movs	r3, r1
 801a6be:	2000      	movs	r0, #0
 801a6c0:	498c      	ldr	r1, [pc, #560]	@ (801a8f4 <__ieee754_log+0x320>)
 801a6c2:	f7e8 fa47 	bl	8002b54 <__aeabi_dsub>
 801a6c6:	0032      	movs	r2, r6
 801a6c8:	0004      	movs	r4, r0
 801a6ca:	000d      	movs	r5, r1
 801a6cc:	003b      	movs	r3, r7
 801a6ce:	0030      	movs	r0, r6
 801a6d0:	0039      	movs	r1, r7
 801a6d2:	f7e7 ff77 	bl	80025c4 <__aeabi_dmul>
 801a6d6:	000b      	movs	r3, r1
 801a6d8:	0002      	movs	r2, r0
 801a6da:	0029      	movs	r1, r5
 801a6dc:	0020      	movs	r0, r4
 801a6de:	f7e7 ff71 	bl	80025c4 <__aeabi_dmul>
 801a6e2:	9b00      	ldr	r3, [sp, #0]
 801a6e4:	9002      	str	r0, [sp, #8]
 801a6e6:	9103      	str	r1, [sp, #12]
 801a6e8:	2b00      	cmp	r3, #0
 801a6ea:	d106      	bne.n	801a6fa <__ieee754_log+0x126>
 801a6ec:	0002      	movs	r2, r0
 801a6ee:	000b      	movs	r3, r1
 801a6f0:	0030      	movs	r0, r6
 801a6f2:	0039      	movs	r1, r7
 801a6f4:	f7e8 fa2e 	bl	8002b54 <__aeabi_dsub>
 801a6f8:	e77d      	b.n	801a5f6 <__ieee754_log+0x22>
 801a6fa:	9800      	ldr	r0, [sp, #0]
 801a6fc:	f7e8 fe24 	bl	8003348 <__aeabi_i2d>
 801a700:	4a76      	ldr	r2, [pc, #472]	@ (801a8dc <__ieee754_log+0x308>)
 801a702:	4b77      	ldr	r3, [pc, #476]	@ (801a8e0 <__ieee754_log+0x30c>)
 801a704:	0004      	movs	r4, r0
 801a706:	000d      	movs	r5, r1
 801a708:	f7e7 ff5c 	bl	80025c4 <__aeabi_dmul>
 801a70c:	4a75      	ldr	r2, [pc, #468]	@ (801a8e4 <__ieee754_log+0x310>)
 801a70e:	9000      	str	r0, [sp, #0]
 801a710:	9101      	str	r1, [sp, #4]
 801a712:	4b75      	ldr	r3, [pc, #468]	@ (801a8e8 <__ieee754_log+0x314>)
 801a714:	0020      	movs	r0, r4
 801a716:	0029      	movs	r1, r5
 801a718:	f7e7 ff54 	bl	80025c4 <__aeabi_dmul>
 801a71c:	0002      	movs	r2, r0
 801a71e:	000b      	movs	r3, r1
 801a720:	9802      	ldr	r0, [sp, #8]
 801a722:	9903      	ldr	r1, [sp, #12]
 801a724:	f7e8 fa16 	bl	8002b54 <__aeabi_dsub>
 801a728:	0032      	movs	r2, r6
 801a72a:	003b      	movs	r3, r7
 801a72c:	f7e8 fa12 	bl	8002b54 <__aeabi_dsub>
 801a730:	0002      	movs	r2, r0
 801a732:	000b      	movs	r3, r1
 801a734:	9800      	ldr	r0, [sp, #0]
 801a736:	9901      	ldr	r1, [sp, #4]
 801a738:	e7dc      	b.n	801a6f4 <__ieee754_log+0x120>
 801a73a:	2380      	movs	r3, #128	@ 0x80
 801a73c:	05db      	lsls	r3, r3, #23
 801a73e:	f7e6 ff99 	bl	8001674 <__aeabi_dadd>
 801a742:	0002      	movs	r2, r0
 801a744:	000b      	movs	r3, r1
 801a746:	0030      	movs	r0, r6
 801a748:	0039      	movs	r1, r7
 801a74a:	f7e7 faf7 	bl	8001d3c <__aeabi_ddiv>
 801a74e:	9004      	str	r0, [sp, #16]
 801a750:	9105      	str	r1, [sp, #20]
 801a752:	9800      	ldr	r0, [sp, #0]
 801a754:	f7e8 fdf8 	bl	8003348 <__aeabi_i2d>
 801a758:	9a04      	ldr	r2, [sp, #16]
 801a75a:	9b05      	ldr	r3, [sp, #20]
 801a75c:	9006      	str	r0, [sp, #24]
 801a75e:	9107      	str	r1, [sp, #28]
 801a760:	0010      	movs	r0, r2
 801a762:	0019      	movs	r1, r3
 801a764:	f7e7 ff2e 	bl	80025c4 <__aeabi_dmul>
 801a768:	4a63      	ldr	r2, [pc, #396]	@ (801a8f8 <__ieee754_log+0x324>)
 801a76a:	9b02      	ldr	r3, [sp, #8]
 801a76c:	4694      	mov	ip, r2
 801a76e:	4463      	add	r3, ip
 801a770:	0002      	movs	r2, r0
 801a772:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a774:	000b      	movs	r3, r1
 801a776:	9008      	str	r0, [sp, #32]
 801a778:	9109      	str	r1, [sp, #36]	@ 0x24
 801a77a:	f7e7 ff23 	bl	80025c4 <__aeabi_dmul>
 801a77e:	0004      	movs	r4, r0
 801a780:	000d      	movs	r5, r1
 801a782:	4a5e      	ldr	r2, [pc, #376]	@ (801a8fc <__ieee754_log+0x328>)
 801a784:	4b5e      	ldr	r3, [pc, #376]	@ (801a900 <__ieee754_log+0x32c>)
 801a786:	f7e7 ff1d 	bl	80025c4 <__aeabi_dmul>
 801a78a:	4a5e      	ldr	r2, [pc, #376]	@ (801a904 <__ieee754_log+0x330>)
 801a78c:	4b5e      	ldr	r3, [pc, #376]	@ (801a908 <__ieee754_log+0x334>)
 801a78e:	f7e6 ff71 	bl	8001674 <__aeabi_dadd>
 801a792:	0022      	movs	r2, r4
 801a794:	002b      	movs	r3, r5
 801a796:	f7e7 ff15 	bl	80025c4 <__aeabi_dmul>
 801a79a:	4a5c      	ldr	r2, [pc, #368]	@ (801a90c <__ieee754_log+0x338>)
 801a79c:	4b5c      	ldr	r3, [pc, #368]	@ (801a910 <__ieee754_log+0x33c>)
 801a79e:	f7e6 ff69 	bl	8001674 <__aeabi_dadd>
 801a7a2:	0022      	movs	r2, r4
 801a7a4:	002b      	movs	r3, r5
 801a7a6:	f7e7 ff0d 	bl	80025c4 <__aeabi_dmul>
 801a7aa:	4a5a      	ldr	r2, [pc, #360]	@ (801a914 <__ieee754_log+0x340>)
 801a7ac:	4b5a      	ldr	r3, [pc, #360]	@ (801a918 <__ieee754_log+0x344>)
 801a7ae:	f7e6 ff61 	bl	8001674 <__aeabi_dadd>
 801a7b2:	9a08      	ldr	r2, [sp, #32]
 801a7b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a7b6:	f7e7 ff05 	bl	80025c4 <__aeabi_dmul>
 801a7ba:	4a58      	ldr	r2, [pc, #352]	@ (801a91c <__ieee754_log+0x348>)
 801a7bc:	9008      	str	r0, [sp, #32]
 801a7be:	9109      	str	r1, [sp, #36]	@ 0x24
 801a7c0:	4b57      	ldr	r3, [pc, #348]	@ (801a920 <__ieee754_log+0x34c>)
 801a7c2:	0020      	movs	r0, r4
 801a7c4:	0029      	movs	r1, r5
 801a7c6:	f7e7 fefd 	bl	80025c4 <__aeabi_dmul>
 801a7ca:	4a56      	ldr	r2, [pc, #344]	@ (801a924 <__ieee754_log+0x350>)
 801a7cc:	4b56      	ldr	r3, [pc, #344]	@ (801a928 <__ieee754_log+0x354>)
 801a7ce:	f7e6 ff51 	bl	8001674 <__aeabi_dadd>
 801a7d2:	0022      	movs	r2, r4
 801a7d4:	002b      	movs	r3, r5
 801a7d6:	f7e7 fef5 	bl	80025c4 <__aeabi_dmul>
 801a7da:	4a54      	ldr	r2, [pc, #336]	@ (801a92c <__ieee754_log+0x358>)
 801a7dc:	4b54      	ldr	r3, [pc, #336]	@ (801a930 <__ieee754_log+0x35c>)
 801a7de:	f7e6 ff49 	bl	8001674 <__aeabi_dadd>
 801a7e2:	0022      	movs	r2, r4
 801a7e4:	002b      	movs	r3, r5
 801a7e6:	f7e7 feed 	bl	80025c4 <__aeabi_dmul>
 801a7ea:	0002      	movs	r2, r0
 801a7ec:	000b      	movs	r3, r1
 801a7ee:	9808      	ldr	r0, [sp, #32]
 801a7f0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a7f2:	f7e6 ff3f 	bl	8001674 <__aeabi_dadd>
 801a7f6:	9a02      	ldr	r2, [sp, #8]
 801a7f8:	4b4e      	ldr	r3, [pc, #312]	@ (801a934 <__ieee754_log+0x360>)
 801a7fa:	0004      	movs	r4, r0
 801a7fc:	1a9b      	subs	r3, r3, r2
 801a7fe:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a800:	000d      	movs	r5, r1
 801a802:	4313      	orrs	r3, r2
 801a804:	2b00      	cmp	r3, #0
 801a806:	dd34      	ble.n	801a872 <__ieee754_log+0x29e>
 801a808:	2200      	movs	r2, #0
 801a80a:	4b3a      	ldr	r3, [pc, #232]	@ (801a8f4 <__ieee754_log+0x320>)
 801a80c:	0030      	movs	r0, r6
 801a80e:	0039      	movs	r1, r7
 801a810:	f7e7 fed8 	bl	80025c4 <__aeabi_dmul>
 801a814:	0032      	movs	r2, r6
 801a816:	003b      	movs	r3, r7
 801a818:	f7e7 fed4 	bl	80025c4 <__aeabi_dmul>
 801a81c:	0002      	movs	r2, r0
 801a81e:	000b      	movs	r3, r1
 801a820:	9002      	str	r0, [sp, #8]
 801a822:	9103      	str	r1, [sp, #12]
 801a824:	0020      	movs	r0, r4
 801a826:	0029      	movs	r1, r5
 801a828:	f7e6 ff24 	bl	8001674 <__aeabi_dadd>
 801a82c:	9a04      	ldr	r2, [sp, #16]
 801a82e:	9b05      	ldr	r3, [sp, #20]
 801a830:	f7e7 fec8 	bl	80025c4 <__aeabi_dmul>
 801a834:	9b00      	ldr	r3, [sp, #0]
 801a836:	0004      	movs	r4, r0
 801a838:	000d      	movs	r5, r1
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d106      	bne.n	801a84c <__ieee754_log+0x278>
 801a83e:	0002      	movs	r2, r0
 801a840:	000b      	movs	r3, r1
 801a842:	9802      	ldr	r0, [sp, #8]
 801a844:	9903      	ldr	r1, [sp, #12]
 801a846:	f7e8 f985 	bl	8002b54 <__aeabi_dsub>
 801a84a:	e74f      	b.n	801a6ec <__ieee754_log+0x118>
 801a84c:	4a23      	ldr	r2, [pc, #140]	@ (801a8dc <__ieee754_log+0x308>)
 801a84e:	4b24      	ldr	r3, [pc, #144]	@ (801a8e0 <__ieee754_log+0x30c>)
 801a850:	9806      	ldr	r0, [sp, #24]
 801a852:	9907      	ldr	r1, [sp, #28]
 801a854:	f7e7 feb6 	bl	80025c4 <__aeabi_dmul>
 801a858:	4a22      	ldr	r2, [pc, #136]	@ (801a8e4 <__ieee754_log+0x310>)
 801a85a:	9000      	str	r0, [sp, #0]
 801a85c:	9101      	str	r1, [sp, #4]
 801a85e:	9806      	ldr	r0, [sp, #24]
 801a860:	9907      	ldr	r1, [sp, #28]
 801a862:	4b21      	ldr	r3, [pc, #132]	@ (801a8e8 <__ieee754_log+0x314>)
 801a864:	f7e7 feae 	bl	80025c4 <__aeabi_dmul>
 801a868:	0022      	movs	r2, r4
 801a86a:	002b      	movs	r3, r5
 801a86c:	f7e6 ff02 	bl	8001674 <__aeabi_dadd>
 801a870:	e754      	b.n	801a71c <__ieee754_log+0x148>
 801a872:	0002      	movs	r2, r0
 801a874:	000b      	movs	r3, r1
 801a876:	0030      	movs	r0, r6
 801a878:	0039      	movs	r1, r7
 801a87a:	f7e8 f96b 	bl	8002b54 <__aeabi_dsub>
 801a87e:	9a04      	ldr	r2, [sp, #16]
 801a880:	9b05      	ldr	r3, [sp, #20]
 801a882:	f7e7 fe9f 	bl	80025c4 <__aeabi_dmul>
 801a886:	9b00      	ldr	r3, [sp, #0]
 801a888:	0004      	movs	r4, r0
 801a88a:	000d      	movs	r5, r1
 801a88c:	2b00      	cmp	r3, #0
 801a88e:	d102      	bne.n	801a896 <__ieee754_log+0x2c2>
 801a890:	0002      	movs	r2, r0
 801a892:	000b      	movs	r3, r1
 801a894:	e72c      	b.n	801a6f0 <__ieee754_log+0x11c>
 801a896:	4a11      	ldr	r2, [pc, #68]	@ (801a8dc <__ieee754_log+0x308>)
 801a898:	4b11      	ldr	r3, [pc, #68]	@ (801a8e0 <__ieee754_log+0x30c>)
 801a89a:	9806      	ldr	r0, [sp, #24]
 801a89c:	9907      	ldr	r1, [sp, #28]
 801a89e:	f7e7 fe91 	bl	80025c4 <__aeabi_dmul>
 801a8a2:	4a10      	ldr	r2, [pc, #64]	@ (801a8e4 <__ieee754_log+0x310>)
 801a8a4:	9000      	str	r0, [sp, #0]
 801a8a6:	9101      	str	r1, [sp, #4]
 801a8a8:	9806      	ldr	r0, [sp, #24]
 801a8aa:	9907      	ldr	r1, [sp, #28]
 801a8ac:	4b0e      	ldr	r3, [pc, #56]	@ (801a8e8 <__ieee754_log+0x314>)
 801a8ae:	f7e7 fe89 	bl	80025c4 <__aeabi_dmul>
 801a8b2:	0002      	movs	r2, r0
 801a8b4:	000b      	movs	r3, r1
 801a8b6:	0020      	movs	r0, r4
 801a8b8:	0029      	movs	r1, r5
 801a8ba:	e733      	b.n	801a724 <__ieee754_log+0x150>
 801a8bc:	2000      	movs	r0, #0
 801a8be:	2100      	movs	r1, #0
 801a8c0:	e699      	b.n	801a5f6 <__ieee754_log+0x22>
 801a8c2:	46c0      	nop			@ (mov r8, r8)
 801a8c4:	c3500000 	.word	0xc3500000
 801a8c8:	43500000 	.word	0x43500000
 801a8cc:	7fefffff 	.word	0x7fefffff
 801a8d0:	fffffc01 	.word	0xfffffc01
 801a8d4:	00095f64 	.word	0x00095f64
 801a8d8:	3ff00000 	.word	0x3ff00000
 801a8dc:	fee00000 	.word	0xfee00000
 801a8e0:	3fe62e42 	.word	0x3fe62e42
 801a8e4:	35793c76 	.word	0x35793c76
 801a8e8:	3dea39ef 	.word	0x3dea39ef
 801a8ec:	55555555 	.word	0x55555555
 801a8f0:	3fd55555 	.word	0x3fd55555
 801a8f4:	3fe00000 	.word	0x3fe00000
 801a8f8:	fff9eb86 	.word	0xfff9eb86
 801a8fc:	df3e5244 	.word	0xdf3e5244
 801a900:	3fc2f112 	.word	0x3fc2f112
 801a904:	96cb03de 	.word	0x96cb03de
 801a908:	3fc74664 	.word	0x3fc74664
 801a90c:	94229359 	.word	0x94229359
 801a910:	3fd24924 	.word	0x3fd24924
 801a914:	55555593 	.word	0x55555593
 801a918:	3fe55555 	.word	0x3fe55555
 801a91c:	d078c69f 	.word	0xd078c69f
 801a920:	3fc39a09 	.word	0x3fc39a09
 801a924:	1d8e78af 	.word	0x1d8e78af
 801a928:	3fcc71c5 	.word	0x3fcc71c5
 801a92c:	9997fa04 	.word	0x9997fa04
 801a930:	3fd99999 	.word	0x3fd99999
 801a934:	0006b851 	.word	0x0006b851

0801a938 <_init>:
 801a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a93a:	46c0      	nop			@ (mov r8, r8)
 801a93c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a93e:	bc08      	pop	{r3}
 801a940:	469e      	mov	lr, r3
 801a942:	4770      	bx	lr

0801a944 <_fini>:
 801a944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a946:	46c0      	nop			@ (mov r8, r8)
 801a948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a94a:	bc08      	pop	{r3}
 801a94c:	469e      	mov	lr, r3
 801a94e:	4770      	bx	lr
