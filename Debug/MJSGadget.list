
MJSGadget.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f410  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a40  0800f4d0  0800f4d0  000104d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff10  0800ff10  00011218  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff10  0800ff10  00010f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff18  0800ff18  00011218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff18  0800ff18  00010f18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff1c  0800ff1c  00010f1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000218  20000000  0800ff20  00011000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000fb0  20000218  08010138  00011218  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200011c8  08010138  000121c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00011218  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017344  00000000  00000000  00011240  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000045e1  00000000  00000000  00028584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001378  00000000  00000000  0002cb68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eba  00000000  00000000  0002dee0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d1b  00000000  00000000  0002ed9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f459  00000000  00000000  00048ab5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089e10  00000000  00000000  00067f0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f1d1e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000577c  00000000  00000000  000f1d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000f74e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000218 	.word	0x20000218
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800f4b8 	.word	0x0800f4b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000021c 	.word	0x2000021c
 8000104:	0800f4b8 	.word	0x0800f4b8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			@ (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	@ 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			@ (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	@ 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	@ 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			@ (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			@ (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 ffd3 	bl	80023e8 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 ff13 	bl	8002278 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 ffc5 	bl	80023e8 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 ffbb 	bl	80023e8 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			@ (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 ff3d 	bl	8002300 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			@ (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 ff33 	bl	8002300 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			@ (mov r8, r8)

080004a8 <__aeabi_cfrcmple>:
 80004a8:	4684      	mov	ip, r0
 80004aa:	0008      	movs	r0, r1
 80004ac:	4661      	mov	r1, ip
 80004ae:	e7ff      	b.n	80004b0 <__aeabi_cfcmpeq>

080004b0 <__aeabi_cfcmpeq>:
 80004b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004b2:	f000 fc6f 	bl	8000d94 <__lesf2>
 80004b6:	2800      	cmp	r0, #0
 80004b8:	d401      	bmi.n	80004be <__aeabi_cfcmpeq+0xe>
 80004ba:	2100      	movs	r1, #0
 80004bc:	42c8      	cmn	r0, r1
 80004be:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004c0 <__aeabi_fcmpeq>:
 80004c0:	b510      	push	{r4, lr}
 80004c2:	f000 fbef 	bl	8000ca4 <__eqsf2>
 80004c6:	4240      	negs	r0, r0
 80004c8:	3001      	adds	r0, #1
 80004ca:	bd10      	pop	{r4, pc}

080004cc <__aeabi_fcmplt>:
 80004cc:	b510      	push	{r4, lr}
 80004ce:	f000 fc61 	bl	8000d94 <__lesf2>
 80004d2:	2800      	cmp	r0, #0
 80004d4:	db01      	blt.n	80004da <__aeabi_fcmplt+0xe>
 80004d6:	2000      	movs	r0, #0
 80004d8:	bd10      	pop	{r4, pc}
 80004da:	2001      	movs	r0, #1
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	46c0      	nop			@ (mov r8, r8)

080004e0 <__aeabi_fcmple>:
 80004e0:	b510      	push	{r4, lr}
 80004e2:	f000 fc57 	bl	8000d94 <__lesf2>
 80004e6:	2800      	cmp	r0, #0
 80004e8:	dd01      	ble.n	80004ee <__aeabi_fcmple+0xe>
 80004ea:	2000      	movs	r0, #0
 80004ec:	bd10      	pop	{r4, pc}
 80004ee:	2001      	movs	r0, #1
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	46c0      	nop			@ (mov r8, r8)

080004f4 <__aeabi_fcmpgt>:
 80004f4:	b510      	push	{r4, lr}
 80004f6:	f000 fbfd 	bl	8000cf4 <__gesf2>
 80004fa:	2800      	cmp	r0, #0
 80004fc:	dc01      	bgt.n	8000502 <__aeabi_fcmpgt+0xe>
 80004fe:	2000      	movs	r0, #0
 8000500:	bd10      	pop	{r4, pc}
 8000502:	2001      	movs	r0, #1
 8000504:	bd10      	pop	{r4, pc}
 8000506:	46c0      	nop			@ (mov r8, r8)

08000508 <__aeabi_fcmpge>:
 8000508:	b510      	push	{r4, lr}
 800050a:	f000 fbf3 	bl	8000cf4 <__gesf2>
 800050e:	2800      	cmp	r0, #0
 8000510:	da01      	bge.n	8000516 <__aeabi_fcmpge+0xe>
 8000512:	2000      	movs	r0, #0
 8000514:	bd10      	pop	{r4, pc}
 8000516:	2001      	movs	r0, #1
 8000518:	bd10      	pop	{r4, pc}
 800051a:	46c0      	nop			@ (mov r8, r8)

0800051c <__aeabi_uldivmod>:
 800051c:	2b00      	cmp	r3, #0
 800051e:	d111      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000520:	2a00      	cmp	r2, #0
 8000522:	d10f      	bne.n	8000544 <__aeabi_uldivmod+0x28>
 8000524:	2900      	cmp	r1, #0
 8000526:	d100      	bne.n	800052a <__aeabi_uldivmod+0xe>
 8000528:	2800      	cmp	r0, #0
 800052a:	d002      	beq.n	8000532 <__aeabi_uldivmod+0x16>
 800052c:	2100      	movs	r1, #0
 800052e:	43c9      	mvns	r1, r1
 8000530:	0008      	movs	r0, r1
 8000532:	b407      	push	{r0, r1, r2}
 8000534:	4802      	ldr	r0, [pc, #8]	@ (8000540 <__aeabi_uldivmod+0x24>)
 8000536:	a102      	add	r1, pc, #8	@ (adr r1, 8000540 <__aeabi_uldivmod+0x24>)
 8000538:	1840      	adds	r0, r0, r1
 800053a:	9002      	str	r0, [sp, #8]
 800053c:	bd03      	pop	{r0, r1, pc}
 800053e:	46c0      	nop			@ (mov r8, r8)
 8000540:	fffffee9 	.word	0xfffffee9
 8000544:	b403      	push	{r0, r1}
 8000546:	4668      	mov	r0, sp
 8000548:	b501      	push	{r0, lr}
 800054a:	9802      	ldr	r0, [sp, #8]
 800054c:	f000 f834 	bl	80005b8 <__udivmoddi4>
 8000550:	9b01      	ldr	r3, [sp, #4]
 8000552:	469e      	mov	lr, r3
 8000554:	b002      	add	sp, #8
 8000556:	bc0c      	pop	{r2, r3}
 8000558:	4770      	bx	lr
 800055a:	46c0      	nop			@ (mov r8, r8)

0800055c <__aeabi_lmul>:
 800055c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800055e:	46ce      	mov	lr, r9
 8000560:	4699      	mov	r9, r3
 8000562:	0c03      	lsrs	r3, r0, #16
 8000564:	469c      	mov	ip, r3
 8000566:	0413      	lsls	r3, r2, #16
 8000568:	4647      	mov	r7, r8
 800056a:	0c1b      	lsrs	r3, r3, #16
 800056c:	001d      	movs	r5, r3
 800056e:	000e      	movs	r6, r1
 8000570:	4661      	mov	r1, ip
 8000572:	0404      	lsls	r4, r0, #16
 8000574:	0c24      	lsrs	r4, r4, #16
 8000576:	b580      	push	{r7, lr}
 8000578:	0007      	movs	r7, r0
 800057a:	0c10      	lsrs	r0, r2, #16
 800057c:	434b      	muls	r3, r1
 800057e:	4365      	muls	r5, r4
 8000580:	4341      	muls	r1, r0
 8000582:	4360      	muls	r0, r4
 8000584:	0c2c      	lsrs	r4, r5, #16
 8000586:	18c0      	adds	r0, r0, r3
 8000588:	1824      	adds	r4, r4, r0
 800058a:	468c      	mov	ip, r1
 800058c:	42a3      	cmp	r3, r4
 800058e:	d903      	bls.n	8000598 <__aeabi_lmul+0x3c>
 8000590:	2380      	movs	r3, #128	@ 0x80
 8000592:	025b      	lsls	r3, r3, #9
 8000594:	4698      	mov	r8, r3
 8000596:	44c4      	add	ip, r8
 8000598:	4649      	mov	r1, r9
 800059a:	4379      	muls	r1, r7
 800059c:	4356      	muls	r6, r2
 800059e:	0c23      	lsrs	r3, r4, #16
 80005a0:	042d      	lsls	r5, r5, #16
 80005a2:	0c2d      	lsrs	r5, r5, #16
 80005a4:	1989      	adds	r1, r1, r6
 80005a6:	4463      	add	r3, ip
 80005a8:	0424      	lsls	r4, r4, #16
 80005aa:	1960      	adds	r0, r4, r5
 80005ac:	18c9      	adds	r1, r1, r3
 80005ae:	bcc0      	pop	{r6, r7}
 80005b0:	46b9      	mov	r9, r7
 80005b2:	46b0      	mov	r8, r6
 80005b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005b6:	46c0      	nop			@ (mov r8, r8)

080005b8 <__udivmoddi4>:
 80005b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005ba:	4657      	mov	r7, sl
 80005bc:	464e      	mov	r6, r9
 80005be:	4645      	mov	r5, r8
 80005c0:	46de      	mov	lr, fp
 80005c2:	b5e0      	push	{r5, r6, r7, lr}
 80005c4:	0004      	movs	r4, r0
 80005c6:	000d      	movs	r5, r1
 80005c8:	4692      	mov	sl, r2
 80005ca:	4699      	mov	r9, r3
 80005cc:	b083      	sub	sp, #12
 80005ce:	428b      	cmp	r3, r1
 80005d0:	d830      	bhi.n	8000634 <__udivmoddi4+0x7c>
 80005d2:	d02d      	beq.n	8000630 <__udivmoddi4+0x78>
 80005d4:	4649      	mov	r1, r9
 80005d6:	4650      	mov	r0, sl
 80005d8:	f002 ff2e 	bl	8003438 <__clzdi2>
 80005dc:	0029      	movs	r1, r5
 80005de:	0006      	movs	r6, r0
 80005e0:	0020      	movs	r0, r4
 80005e2:	f002 ff29 	bl	8003438 <__clzdi2>
 80005e6:	1a33      	subs	r3, r6, r0
 80005e8:	4698      	mov	r8, r3
 80005ea:	3b20      	subs	r3, #32
 80005ec:	d434      	bmi.n	8000658 <__udivmoddi4+0xa0>
 80005ee:	469b      	mov	fp, r3
 80005f0:	4653      	mov	r3, sl
 80005f2:	465a      	mov	r2, fp
 80005f4:	4093      	lsls	r3, r2
 80005f6:	4642      	mov	r2, r8
 80005f8:	001f      	movs	r7, r3
 80005fa:	4653      	mov	r3, sl
 80005fc:	4093      	lsls	r3, r2
 80005fe:	001e      	movs	r6, r3
 8000600:	42af      	cmp	r7, r5
 8000602:	d83b      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000604:	42af      	cmp	r7, r5
 8000606:	d100      	bne.n	800060a <__udivmoddi4+0x52>
 8000608:	e079      	b.n	80006fe <__udivmoddi4+0x146>
 800060a:	465b      	mov	r3, fp
 800060c:	1ba4      	subs	r4, r4, r6
 800060e:	41bd      	sbcs	r5, r7
 8000610:	2b00      	cmp	r3, #0
 8000612:	da00      	bge.n	8000616 <__udivmoddi4+0x5e>
 8000614:	e076      	b.n	8000704 <__udivmoddi4+0x14c>
 8000616:	2200      	movs	r2, #0
 8000618:	2300      	movs	r3, #0
 800061a:	9200      	str	r2, [sp, #0]
 800061c:	9301      	str	r3, [sp, #4]
 800061e:	2301      	movs	r3, #1
 8000620:	465a      	mov	r2, fp
 8000622:	4093      	lsls	r3, r2
 8000624:	9301      	str	r3, [sp, #4]
 8000626:	2301      	movs	r3, #1
 8000628:	4642      	mov	r2, r8
 800062a:	4093      	lsls	r3, r2
 800062c:	9300      	str	r3, [sp, #0]
 800062e:	e029      	b.n	8000684 <__udivmoddi4+0xcc>
 8000630:	4282      	cmp	r2, r0
 8000632:	d9cf      	bls.n	80005d4 <__udivmoddi4+0x1c>
 8000634:	2200      	movs	r2, #0
 8000636:	2300      	movs	r3, #0
 8000638:	9200      	str	r2, [sp, #0]
 800063a:	9301      	str	r3, [sp, #4]
 800063c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <__udivmoddi4+0x8e>
 8000642:	601c      	str	r4, [r3, #0]
 8000644:	605d      	str	r5, [r3, #4]
 8000646:	9800      	ldr	r0, [sp, #0]
 8000648:	9901      	ldr	r1, [sp, #4]
 800064a:	b003      	add	sp, #12
 800064c:	bcf0      	pop	{r4, r5, r6, r7}
 800064e:	46bb      	mov	fp, r7
 8000650:	46b2      	mov	sl, r6
 8000652:	46a9      	mov	r9, r5
 8000654:	46a0      	mov	r8, r4
 8000656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000658:	4642      	mov	r2, r8
 800065a:	469b      	mov	fp, r3
 800065c:	2320      	movs	r3, #32
 800065e:	1a9b      	subs	r3, r3, r2
 8000660:	4652      	mov	r2, sl
 8000662:	40da      	lsrs	r2, r3
 8000664:	4641      	mov	r1, r8
 8000666:	0013      	movs	r3, r2
 8000668:	464a      	mov	r2, r9
 800066a:	408a      	lsls	r2, r1
 800066c:	0017      	movs	r7, r2
 800066e:	4642      	mov	r2, r8
 8000670:	431f      	orrs	r7, r3
 8000672:	4653      	mov	r3, sl
 8000674:	4093      	lsls	r3, r2
 8000676:	001e      	movs	r6, r3
 8000678:	42af      	cmp	r7, r5
 800067a:	d9c3      	bls.n	8000604 <__udivmoddi4+0x4c>
 800067c:	2200      	movs	r2, #0
 800067e:	2300      	movs	r3, #0
 8000680:	9200      	str	r2, [sp, #0]
 8000682:	9301      	str	r3, [sp, #4]
 8000684:	4643      	mov	r3, r8
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0d8      	beq.n	800063c <__udivmoddi4+0x84>
 800068a:	07fb      	lsls	r3, r7, #31
 800068c:	0872      	lsrs	r2, r6, #1
 800068e:	431a      	orrs	r2, r3
 8000690:	4646      	mov	r6, r8
 8000692:	087b      	lsrs	r3, r7, #1
 8000694:	e00e      	b.n	80006b4 <__udivmoddi4+0xfc>
 8000696:	42ab      	cmp	r3, r5
 8000698:	d101      	bne.n	800069e <__udivmoddi4+0xe6>
 800069a:	42a2      	cmp	r2, r4
 800069c:	d80c      	bhi.n	80006b8 <__udivmoddi4+0x100>
 800069e:	1aa4      	subs	r4, r4, r2
 80006a0:	419d      	sbcs	r5, r3
 80006a2:	2001      	movs	r0, #1
 80006a4:	1924      	adds	r4, r4, r4
 80006a6:	416d      	adcs	r5, r5
 80006a8:	2100      	movs	r1, #0
 80006aa:	3e01      	subs	r6, #1
 80006ac:	1824      	adds	r4, r4, r0
 80006ae:	414d      	adcs	r5, r1
 80006b0:	2e00      	cmp	r6, #0
 80006b2:	d006      	beq.n	80006c2 <__udivmoddi4+0x10a>
 80006b4:	42ab      	cmp	r3, r5
 80006b6:	d9ee      	bls.n	8000696 <__udivmoddi4+0xde>
 80006b8:	3e01      	subs	r6, #1
 80006ba:	1924      	adds	r4, r4, r4
 80006bc:	416d      	adcs	r5, r5
 80006be:	2e00      	cmp	r6, #0
 80006c0:	d1f8      	bne.n	80006b4 <__udivmoddi4+0xfc>
 80006c2:	9800      	ldr	r0, [sp, #0]
 80006c4:	9901      	ldr	r1, [sp, #4]
 80006c6:	465b      	mov	r3, fp
 80006c8:	1900      	adds	r0, r0, r4
 80006ca:	4169      	adcs	r1, r5
 80006cc:	2b00      	cmp	r3, #0
 80006ce:	db24      	blt.n	800071a <__udivmoddi4+0x162>
 80006d0:	002b      	movs	r3, r5
 80006d2:	465a      	mov	r2, fp
 80006d4:	4644      	mov	r4, r8
 80006d6:	40d3      	lsrs	r3, r2
 80006d8:	002a      	movs	r2, r5
 80006da:	40e2      	lsrs	r2, r4
 80006dc:	001c      	movs	r4, r3
 80006de:	465b      	mov	r3, fp
 80006e0:	0015      	movs	r5, r2
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	db2a      	blt.n	800073c <__udivmoddi4+0x184>
 80006e6:	0026      	movs	r6, r4
 80006e8:	409e      	lsls	r6, r3
 80006ea:	0033      	movs	r3, r6
 80006ec:	0026      	movs	r6, r4
 80006ee:	4647      	mov	r7, r8
 80006f0:	40be      	lsls	r6, r7
 80006f2:	0032      	movs	r2, r6
 80006f4:	1a80      	subs	r0, r0, r2
 80006f6:	4199      	sbcs	r1, r3
 80006f8:	9000      	str	r0, [sp, #0]
 80006fa:	9101      	str	r1, [sp, #4]
 80006fc:	e79e      	b.n	800063c <__udivmoddi4+0x84>
 80006fe:	42a3      	cmp	r3, r4
 8000700:	d8bc      	bhi.n	800067c <__udivmoddi4+0xc4>
 8000702:	e782      	b.n	800060a <__udivmoddi4+0x52>
 8000704:	4642      	mov	r2, r8
 8000706:	2320      	movs	r3, #32
 8000708:	2100      	movs	r1, #0
 800070a:	1a9b      	subs	r3, r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	9100      	str	r1, [sp, #0]
 8000710:	9201      	str	r2, [sp, #4]
 8000712:	2201      	movs	r2, #1
 8000714:	40da      	lsrs	r2, r3
 8000716:	9201      	str	r2, [sp, #4]
 8000718:	e785      	b.n	8000626 <__udivmoddi4+0x6e>
 800071a:	4642      	mov	r2, r8
 800071c:	2320      	movs	r3, #32
 800071e:	1a9b      	subs	r3, r3, r2
 8000720:	002a      	movs	r2, r5
 8000722:	4646      	mov	r6, r8
 8000724:	409a      	lsls	r2, r3
 8000726:	0023      	movs	r3, r4
 8000728:	40f3      	lsrs	r3, r6
 800072a:	4644      	mov	r4, r8
 800072c:	4313      	orrs	r3, r2
 800072e:	002a      	movs	r2, r5
 8000730:	40e2      	lsrs	r2, r4
 8000732:	001c      	movs	r4, r3
 8000734:	465b      	mov	r3, fp
 8000736:	0015      	movs	r5, r2
 8000738:	2b00      	cmp	r3, #0
 800073a:	dad4      	bge.n	80006e6 <__udivmoddi4+0x12e>
 800073c:	4642      	mov	r2, r8
 800073e:	002f      	movs	r7, r5
 8000740:	2320      	movs	r3, #32
 8000742:	0026      	movs	r6, r4
 8000744:	4097      	lsls	r7, r2
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	40de      	lsrs	r6, r3
 800074a:	003b      	movs	r3, r7
 800074c:	4333      	orrs	r3, r6
 800074e:	e7cd      	b.n	80006ec <__udivmoddi4+0x134>

08000750 <__aeabi_fadd>:
 8000750:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000752:	46ce      	mov	lr, r9
 8000754:	4647      	mov	r7, r8
 8000756:	0243      	lsls	r3, r0, #9
 8000758:	0a5a      	lsrs	r2, r3, #9
 800075a:	024e      	lsls	r6, r1, #9
 800075c:	0045      	lsls	r5, r0, #1
 800075e:	0fc4      	lsrs	r4, r0, #31
 8000760:	0048      	lsls	r0, r1, #1
 8000762:	4691      	mov	r9, r2
 8000764:	0e2d      	lsrs	r5, r5, #24
 8000766:	0a72      	lsrs	r2, r6, #9
 8000768:	0e00      	lsrs	r0, r0, #24
 800076a:	4694      	mov	ip, r2
 800076c:	b580      	push	{r7, lr}
 800076e:	099b      	lsrs	r3, r3, #6
 8000770:	0fc9      	lsrs	r1, r1, #31
 8000772:	09b6      	lsrs	r6, r6, #6
 8000774:	1a2a      	subs	r2, r5, r0
 8000776:	428c      	cmp	r4, r1
 8000778:	d021      	beq.n	80007be <__aeabi_fadd+0x6e>
 800077a:	2a00      	cmp	r2, #0
 800077c:	dd0d      	ble.n	800079a <__aeabi_fadd+0x4a>
 800077e:	2800      	cmp	r0, #0
 8000780:	d12d      	bne.n	80007de <__aeabi_fadd+0x8e>
 8000782:	2e00      	cmp	r6, #0
 8000784:	d100      	bne.n	8000788 <__aeabi_fadd+0x38>
 8000786:	e08d      	b.n	80008a4 <__aeabi_fadd+0x154>
 8000788:	1e51      	subs	r1, r2, #1
 800078a:	2a01      	cmp	r2, #1
 800078c:	d100      	bne.n	8000790 <__aeabi_fadd+0x40>
 800078e:	e11d      	b.n	80009cc <__aeabi_fadd+0x27c>
 8000790:	2aff      	cmp	r2, #255	@ 0xff
 8000792:	d100      	bne.n	8000796 <__aeabi_fadd+0x46>
 8000794:	e0ab      	b.n	80008ee <__aeabi_fadd+0x19e>
 8000796:	000a      	movs	r2, r1
 8000798:	e027      	b.n	80007ea <__aeabi_fadd+0x9a>
 800079a:	2a00      	cmp	r2, #0
 800079c:	d04d      	beq.n	800083a <__aeabi_fadd+0xea>
 800079e:	1b42      	subs	r2, r0, r5
 80007a0:	2d00      	cmp	r5, #0
 80007a2:	d000      	beq.n	80007a6 <__aeabi_fadd+0x56>
 80007a4:	e0cc      	b.n	8000940 <__aeabi_fadd+0x1f0>
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d100      	bne.n	80007ac <__aeabi_fadd+0x5c>
 80007aa:	e079      	b.n	80008a0 <__aeabi_fadd+0x150>
 80007ac:	1e54      	subs	r4, r2, #1
 80007ae:	2a01      	cmp	r2, #1
 80007b0:	d100      	bne.n	80007b4 <__aeabi_fadd+0x64>
 80007b2:	e128      	b.n	8000a06 <__aeabi_fadd+0x2b6>
 80007b4:	2aff      	cmp	r2, #255	@ 0xff
 80007b6:	d100      	bne.n	80007ba <__aeabi_fadd+0x6a>
 80007b8:	e097      	b.n	80008ea <__aeabi_fadd+0x19a>
 80007ba:	0022      	movs	r2, r4
 80007bc:	e0c5      	b.n	800094a <__aeabi_fadd+0x1fa>
 80007be:	2a00      	cmp	r2, #0
 80007c0:	dc00      	bgt.n	80007c4 <__aeabi_fadd+0x74>
 80007c2:	e096      	b.n	80008f2 <__aeabi_fadd+0x1a2>
 80007c4:	2800      	cmp	r0, #0
 80007c6:	d04f      	beq.n	8000868 <__aeabi_fadd+0x118>
 80007c8:	2dff      	cmp	r5, #255	@ 0xff
 80007ca:	d100      	bne.n	80007ce <__aeabi_fadd+0x7e>
 80007cc:	e08f      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007ce:	2180      	movs	r1, #128	@ 0x80
 80007d0:	04c9      	lsls	r1, r1, #19
 80007d2:	430e      	orrs	r6, r1
 80007d4:	2a1b      	cmp	r2, #27
 80007d6:	dd51      	ble.n	800087c <__aeabi_fadd+0x12c>
 80007d8:	002a      	movs	r2, r5
 80007da:	3301      	adds	r3, #1
 80007dc:	e018      	b.n	8000810 <__aeabi_fadd+0xc0>
 80007de:	2dff      	cmp	r5, #255	@ 0xff
 80007e0:	d100      	bne.n	80007e4 <__aeabi_fadd+0x94>
 80007e2:	e084      	b.n	80008ee <__aeabi_fadd+0x19e>
 80007e4:	2180      	movs	r1, #128	@ 0x80
 80007e6:	04c9      	lsls	r1, r1, #19
 80007e8:	430e      	orrs	r6, r1
 80007ea:	2101      	movs	r1, #1
 80007ec:	2a1b      	cmp	r2, #27
 80007ee:	dc08      	bgt.n	8000802 <__aeabi_fadd+0xb2>
 80007f0:	0031      	movs	r1, r6
 80007f2:	2020      	movs	r0, #32
 80007f4:	40d1      	lsrs	r1, r2
 80007f6:	1a82      	subs	r2, r0, r2
 80007f8:	4096      	lsls	r6, r2
 80007fa:	0032      	movs	r2, r6
 80007fc:	1e50      	subs	r0, r2, #1
 80007fe:	4182      	sbcs	r2, r0
 8000800:	4311      	orrs	r1, r2
 8000802:	1a5b      	subs	r3, r3, r1
 8000804:	015a      	lsls	r2, r3, #5
 8000806:	d459      	bmi.n	80008bc <__aeabi_fadd+0x16c>
 8000808:	2107      	movs	r1, #7
 800080a:	002a      	movs	r2, r5
 800080c:	4019      	ands	r1, r3
 800080e:	d049      	beq.n	80008a4 <__aeabi_fadd+0x154>
 8000810:	210f      	movs	r1, #15
 8000812:	4019      	ands	r1, r3
 8000814:	2904      	cmp	r1, #4
 8000816:	d000      	beq.n	800081a <__aeabi_fadd+0xca>
 8000818:	3304      	adds	r3, #4
 800081a:	0159      	lsls	r1, r3, #5
 800081c:	d542      	bpl.n	80008a4 <__aeabi_fadd+0x154>
 800081e:	1c50      	adds	r0, r2, #1
 8000820:	2afe      	cmp	r2, #254	@ 0xfe
 8000822:	d03a      	beq.n	800089a <__aeabi_fadd+0x14a>
 8000824:	019b      	lsls	r3, r3, #6
 8000826:	b2c0      	uxtb	r0, r0
 8000828:	0a5b      	lsrs	r3, r3, #9
 800082a:	05c0      	lsls	r0, r0, #23
 800082c:	4318      	orrs	r0, r3
 800082e:	07e4      	lsls	r4, r4, #31
 8000830:	4320      	orrs	r0, r4
 8000832:	bcc0      	pop	{r6, r7}
 8000834:	46b9      	mov	r9, r7
 8000836:	46b0      	mov	r8, r6
 8000838:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800083a:	20fe      	movs	r0, #254	@ 0xfe
 800083c:	4680      	mov	r8, r0
 800083e:	1c6f      	adds	r7, r5, #1
 8000840:	0038      	movs	r0, r7
 8000842:	4647      	mov	r7, r8
 8000844:	4207      	tst	r7, r0
 8000846:	d000      	beq.n	800084a <__aeabi_fadd+0xfa>
 8000848:	e08e      	b.n	8000968 <__aeabi_fadd+0x218>
 800084a:	2d00      	cmp	r5, #0
 800084c:	d000      	beq.n	8000850 <__aeabi_fadd+0x100>
 800084e:	e0b4      	b.n	80009ba <__aeabi_fadd+0x26a>
 8000850:	2b00      	cmp	r3, #0
 8000852:	d100      	bne.n	8000856 <__aeabi_fadd+0x106>
 8000854:	e0db      	b.n	8000a0e <__aeabi_fadd+0x2be>
 8000856:	2e00      	cmp	r6, #0
 8000858:	d06c      	beq.n	8000934 <__aeabi_fadd+0x1e4>
 800085a:	1b98      	subs	r0, r3, r6
 800085c:	0145      	lsls	r5, r0, #5
 800085e:	d400      	bmi.n	8000862 <__aeabi_fadd+0x112>
 8000860:	e0f7      	b.n	8000a52 <__aeabi_fadd+0x302>
 8000862:	000c      	movs	r4, r1
 8000864:	1af3      	subs	r3, r6, r3
 8000866:	e03d      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000868:	2e00      	cmp	r6, #0
 800086a:	d01b      	beq.n	80008a4 <__aeabi_fadd+0x154>
 800086c:	1e51      	subs	r1, r2, #1
 800086e:	2a01      	cmp	r2, #1
 8000870:	d100      	bne.n	8000874 <__aeabi_fadd+0x124>
 8000872:	e082      	b.n	800097a <__aeabi_fadd+0x22a>
 8000874:	2aff      	cmp	r2, #255	@ 0xff
 8000876:	d03a      	beq.n	80008ee <__aeabi_fadd+0x19e>
 8000878:	000a      	movs	r2, r1
 800087a:	e7ab      	b.n	80007d4 <__aeabi_fadd+0x84>
 800087c:	0031      	movs	r1, r6
 800087e:	2020      	movs	r0, #32
 8000880:	40d1      	lsrs	r1, r2
 8000882:	1a82      	subs	r2, r0, r2
 8000884:	4096      	lsls	r6, r2
 8000886:	0032      	movs	r2, r6
 8000888:	1e50      	subs	r0, r2, #1
 800088a:	4182      	sbcs	r2, r0
 800088c:	430a      	orrs	r2, r1
 800088e:	189b      	adds	r3, r3, r2
 8000890:	015a      	lsls	r2, r3, #5
 8000892:	d5b9      	bpl.n	8000808 <__aeabi_fadd+0xb8>
 8000894:	1c6a      	adds	r2, r5, #1
 8000896:	2dfe      	cmp	r5, #254	@ 0xfe
 8000898:	d175      	bne.n	8000986 <__aeabi_fadd+0x236>
 800089a:	20ff      	movs	r0, #255	@ 0xff
 800089c:	2300      	movs	r3, #0
 800089e:	e7c4      	b.n	800082a <__aeabi_fadd+0xda>
 80008a0:	000c      	movs	r4, r1
 80008a2:	0033      	movs	r3, r6
 80008a4:	08db      	lsrs	r3, r3, #3
 80008a6:	2aff      	cmp	r2, #255	@ 0xff
 80008a8:	d146      	bne.n	8000938 <__aeabi_fadd+0x1e8>
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d0f5      	beq.n	800089a <__aeabi_fadd+0x14a>
 80008ae:	2280      	movs	r2, #128	@ 0x80
 80008b0:	03d2      	lsls	r2, r2, #15
 80008b2:	4313      	orrs	r3, r2
 80008b4:	025b      	lsls	r3, r3, #9
 80008b6:	20ff      	movs	r0, #255	@ 0xff
 80008b8:	0a5b      	lsrs	r3, r3, #9
 80008ba:	e7b6      	b.n	800082a <__aeabi_fadd+0xda>
 80008bc:	019f      	lsls	r7, r3, #6
 80008be:	09bf      	lsrs	r7, r7, #6
 80008c0:	0038      	movs	r0, r7
 80008c2:	f002 fd9b 	bl	80033fc <__clzsi2>
 80008c6:	3805      	subs	r0, #5
 80008c8:	4087      	lsls	r7, r0
 80008ca:	4285      	cmp	r5, r0
 80008cc:	dc24      	bgt.n	8000918 <__aeabi_fadd+0x1c8>
 80008ce:	003b      	movs	r3, r7
 80008d0:	2120      	movs	r1, #32
 80008d2:	1b42      	subs	r2, r0, r5
 80008d4:	3201      	adds	r2, #1
 80008d6:	40d3      	lsrs	r3, r2
 80008d8:	1a8a      	subs	r2, r1, r2
 80008da:	4097      	lsls	r7, r2
 80008dc:	1e7a      	subs	r2, r7, #1
 80008de:	4197      	sbcs	r7, r2
 80008e0:	2200      	movs	r2, #0
 80008e2:	433b      	orrs	r3, r7
 80008e4:	0759      	lsls	r1, r3, #29
 80008e6:	d193      	bne.n	8000810 <__aeabi_fadd+0xc0>
 80008e8:	e797      	b.n	800081a <__aeabi_fadd+0xca>
 80008ea:	000c      	movs	r4, r1
 80008ec:	0033      	movs	r3, r6
 80008ee:	08db      	lsrs	r3, r3, #3
 80008f0:	e7db      	b.n	80008aa <__aeabi_fadd+0x15a>
 80008f2:	2a00      	cmp	r2, #0
 80008f4:	d014      	beq.n	8000920 <__aeabi_fadd+0x1d0>
 80008f6:	1b42      	subs	r2, r0, r5
 80008f8:	2d00      	cmp	r5, #0
 80008fa:	d14b      	bne.n	8000994 <__aeabi_fadd+0x244>
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d0d0      	beq.n	80008a2 <__aeabi_fadd+0x152>
 8000900:	1e51      	subs	r1, r2, #1
 8000902:	2a01      	cmp	r2, #1
 8000904:	d100      	bne.n	8000908 <__aeabi_fadd+0x1b8>
 8000906:	e09e      	b.n	8000a46 <__aeabi_fadd+0x2f6>
 8000908:	2aff      	cmp	r2, #255	@ 0xff
 800090a:	d0ef      	beq.n	80008ec <__aeabi_fadd+0x19c>
 800090c:	000a      	movs	r2, r1
 800090e:	2a1b      	cmp	r2, #27
 8000910:	dd5f      	ble.n	80009d2 <__aeabi_fadd+0x282>
 8000912:	0002      	movs	r2, r0
 8000914:	1c73      	adds	r3, r6, #1
 8000916:	e77b      	b.n	8000810 <__aeabi_fadd+0xc0>
 8000918:	4b50      	ldr	r3, [pc, #320]	@ (8000a5c <__aeabi_fadd+0x30c>)
 800091a:	1a2a      	subs	r2, r5, r0
 800091c:	403b      	ands	r3, r7
 800091e:	e7e1      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000920:	21fe      	movs	r1, #254	@ 0xfe
 8000922:	1c6a      	adds	r2, r5, #1
 8000924:	4211      	tst	r1, r2
 8000926:	d13b      	bne.n	80009a0 <__aeabi_fadd+0x250>
 8000928:	2d00      	cmp	r5, #0
 800092a:	d15d      	bne.n	80009e8 <__aeabi_fadd+0x298>
 800092c:	2b00      	cmp	r3, #0
 800092e:	d07f      	beq.n	8000a30 <__aeabi_fadd+0x2e0>
 8000930:	2e00      	cmp	r6, #0
 8000932:	d17f      	bne.n	8000a34 <__aeabi_fadd+0x2e4>
 8000934:	2200      	movs	r2, #0
 8000936:	08db      	lsrs	r3, r3, #3
 8000938:	025b      	lsls	r3, r3, #9
 800093a:	0a5b      	lsrs	r3, r3, #9
 800093c:	b2d0      	uxtb	r0, r2
 800093e:	e774      	b.n	800082a <__aeabi_fadd+0xda>
 8000940:	28ff      	cmp	r0, #255	@ 0xff
 8000942:	d0d2      	beq.n	80008ea <__aeabi_fadd+0x19a>
 8000944:	2480      	movs	r4, #128	@ 0x80
 8000946:	04e4      	lsls	r4, r4, #19
 8000948:	4323      	orrs	r3, r4
 800094a:	2401      	movs	r4, #1
 800094c:	2a1b      	cmp	r2, #27
 800094e:	dc07      	bgt.n	8000960 <__aeabi_fadd+0x210>
 8000950:	001c      	movs	r4, r3
 8000952:	2520      	movs	r5, #32
 8000954:	40d4      	lsrs	r4, r2
 8000956:	1aaa      	subs	r2, r5, r2
 8000958:	4093      	lsls	r3, r2
 800095a:	1e5a      	subs	r2, r3, #1
 800095c:	4193      	sbcs	r3, r2
 800095e:	431c      	orrs	r4, r3
 8000960:	1b33      	subs	r3, r6, r4
 8000962:	0005      	movs	r5, r0
 8000964:	000c      	movs	r4, r1
 8000966:	e74d      	b.n	8000804 <__aeabi_fadd+0xb4>
 8000968:	1b9f      	subs	r7, r3, r6
 800096a:	017a      	lsls	r2, r7, #5
 800096c:	d422      	bmi.n	80009b4 <__aeabi_fadd+0x264>
 800096e:	2f00      	cmp	r7, #0
 8000970:	d1a6      	bne.n	80008c0 <__aeabi_fadd+0x170>
 8000972:	2400      	movs	r4, #0
 8000974:	2000      	movs	r0, #0
 8000976:	2300      	movs	r3, #0
 8000978:	e757      	b.n	800082a <__aeabi_fadd+0xda>
 800097a:	199b      	adds	r3, r3, r6
 800097c:	2501      	movs	r5, #1
 800097e:	3201      	adds	r2, #1
 8000980:	0159      	lsls	r1, r3, #5
 8000982:	d400      	bmi.n	8000986 <__aeabi_fadd+0x236>
 8000984:	e740      	b.n	8000808 <__aeabi_fadd+0xb8>
 8000986:	2101      	movs	r1, #1
 8000988:	4835      	ldr	r0, [pc, #212]	@ (8000a60 <__aeabi_fadd+0x310>)
 800098a:	4019      	ands	r1, r3
 800098c:	085b      	lsrs	r3, r3, #1
 800098e:	4003      	ands	r3, r0
 8000990:	430b      	orrs	r3, r1
 8000992:	e7a7      	b.n	80008e4 <__aeabi_fadd+0x194>
 8000994:	28ff      	cmp	r0, #255	@ 0xff
 8000996:	d0a9      	beq.n	80008ec <__aeabi_fadd+0x19c>
 8000998:	2180      	movs	r1, #128	@ 0x80
 800099a:	04c9      	lsls	r1, r1, #19
 800099c:	430b      	orrs	r3, r1
 800099e:	e7b6      	b.n	800090e <__aeabi_fadd+0x1be>
 80009a0:	2aff      	cmp	r2, #255	@ 0xff
 80009a2:	d100      	bne.n	80009a6 <__aeabi_fadd+0x256>
 80009a4:	e779      	b.n	800089a <__aeabi_fadd+0x14a>
 80009a6:	199b      	adds	r3, r3, r6
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	0759      	lsls	r1, r3, #29
 80009ac:	d000      	beq.n	80009b0 <__aeabi_fadd+0x260>
 80009ae:	e72f      	b.n	8000810 <__aeabi_fadd+0xc0>
 80009b0:	08db      	lsrs	r3, r3, #3
 80009b2:	e7c1      	b.n	8000938 <__aeabi_fadd+0x1e8>
 80009b4:	000c      	movs	r4, r1
 80009b6:	1af7      	subs	r7, r6, r3
 80009b8:	e782      	b.n	80008c0 <__aeabi_fadd+0x170>
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d12c      	bne.n	8000a18 <__aeabi_fadd+0x2c8>
 80009be:	2e00      	cmp	r6, #0
 80009c0:	d193      	bne.n	80008ea <__aeabi_fadd+0x19a>
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	2400      	movs	r4, #0
 80009c6:	20ff      	movs	r0, #255	@ 0xff
 80009c8:	03db      	lsls	r3, r3, #15
 80009ca:	e72e      	b.n	800082a <__aeabi_fadd+0xda>
 80009cc:	2501      	movs	r5, #1
 80009ce:	1b9b      	subs	r3, r3, r6
 80009d0:	e718      	b.n	8000804 <__aeabi_fadd+0xb4>
 80009d2:	0019      	movs	r1, r3
 80009d4:	2520      	movs	r5, #32
 80009d6:	40d1      	lsrs	r1, r2
 80009d8:	1aaa      	subs	r2, r5, r2
 80009da:	4093      	lsls	r3, r2
 80009dc:	1e5a      	subs	r2, r3, #1
 80009de:	4193      	sbcs	r3, r2
 80009e0:	430b      	orrs	r3, r1
 80009e2:	0005      	movs	r5, r0
 80009e4:	199b      	adds	r3, r3, r6
 80009e6:	e753      	b.n	8000890 <__aeabi_fadd+0x140>
 80009e8:	2b00      	cmp	r3, #0
 80009ea:	d100      	bne.n	80009ee <__aeabi_fadd+0x29e>
 80009ec:	e77e      	b.n	80008ec <__aeabi_fadd+0x19c>
 80009ee:	2e00      	cmp	r6, #0
 80009f0:	d100      	bne.n	80009f4 <__aeabi_fadd+0x2a4>
 80009f2:	e77c      	b.n	80008ee <__aeabi_fadd+0x19e>
 80009f4:	2280      	movs	r2, #128	@ 0x80
 80009f6:	03d2      	lsls	r2, r2, #15
 80009f8:	4591      	cmp	r9, r2
 80009fa:	d302      	bcc.n	8000a02 <__aeabi_fadd+0x2b2>
 80009fc:	4594      	cmp	ip, r2
 80009fe:	d200      	bcs.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a00:	0033      	movs	r3, r6
 8000a02:	08db      	lsrs	r3, r3, #3
 8000a04:	e753      	b.n	80008ae <__aeabi_fadd+0x15e>
 8000a06:	000c      	movs	r4, r1
 8000a08:	1af3      	subs	r3, r6, r3
 8000a0a:	3501      	adds	r5, #1
 8000a0c:	e6fa      	b.n	8000804 <__aeabi_fadd+0xb4>
 8000a0e:	2e00      	cmp	r6, #0
 8000a10:	d0af      	beq.n	8000972 <__aeabi_fadd+0x222>
 8000a12:	000c      	movs	r4, r1
 8000a14:	0033      	movs	r3, r6
 8000a16:	e78d      	b.n	8000934 <__aeabi_fadd+0x1e4>
 8000a18:	2e00      	cmp	r6, #0
 8000a1a:	d100      	bne.n	8000a1e <__aeabi_fadd+0x2ce>
 8000a1c:	e767      	b.n	80008ee <__aeabi_fadd+0x19e>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4591      	cmp	r9, r2
 8000a24:	d3ed      	bcc.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a26:	4594      	cmp	ip, r2
 8000a28:	d2eb      	bcs.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a2a:	000c      	movs	r4, r1
 8000a2c:	0033      	movs	r3, r6
 8000a2e:	e7e8      	b.n	8000a02 <__aeabi_fadd+0x2b2>
 8000a30:	0033      	movs	r3, r6
 8000a32:	e77f      	b.n	8000934 <__aeabi_fadd+0x1e4>
 8000a34:	199b      	adds	r3, r3, r6
 8000a36:	2200      	movs	r2, #0
 8000a38:	0159      	lsls	r1, r3, #5
 8000a3a:	d5b9      	bpl.n	80009b0 <__aeabi_fadd+0x260>
 8000a3c:	4a07      	ldr	r2, [pc, #28]	@ (8000a5c <__aeabi_fadd+0x30c>)
 8000a3e:	4013      	ands	r3, r2
 8000a40:	08db      	lsrs	r3, r3, #3
 8000a42:	2201      	movs	r2, #1
 8000a44:	e778      	b.n	8000938 <__aeabi_fadd+0x1e8>
 8000a46:	199b      	adds	r3, r3, r6
 8000a48:	3201      	adds	r2, #1
 8000a4a:	3501      	adds	r5, #1
 8000a4c:	0159      	lsls	r1, r3, #5
 8000a4e:	d49a      	bmi.n	8000986 <__aeabi_fadd+0x236>
 8000a50:	e6da      	b.n	8000808 <__aeabi_fadd+0xb8>
 8000a52:	1e03      	subs	r3, r0, #0
 8000a54:	d08d      	beq.n	8000972 <__aeabi_fadd+0x222>
 8000a56:	08db      	lsrs	r3, r3, #3
 8000a58:	e76e      	b.n	8000938 <__aeabi_fadd+0x1e8>
 8000a5a:	46c0      	nop			@ (mov r8, r8)
 8000a5c:	fbffffff 	.word	0xfbffffff
 8000a60:	7dffffff 	.word	0x7dffffff

08000a64 <__aeabi_fdiv>:
 8000a64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a66:	464f      	mov	r7, r9
 8000a68:	4646      	mov	r6, r8
 8000a6a:	46d6      	mov	lr, sl
 8000a6c:	0244      	lsls	r4, r0, #9
 8000a6e:	b5c0      	push	{r6, r7, lr}
 8000a70:	0047      	lsls	r7, r0, #1
 8000a72:	1c0e      	adds	r6, r1, #0
 8000a74:	0a64      	lsrs	r4, r4, #9
 8000a76:	0e3f      	lsrs	r7, r7, #24
 8000a78:	0fc5      	lsrs	r5, r0, #31
 8000a7a:	2f00      	cmp	r7, #0
 8000a7c:	d03c      	beq.n	8000af8 <__aeabi_fdiv+0x94>
 8000a7e:	2fff      	cmp	r7, #255	@ 0xff
 8000a80:	d042      	beq.n	8000b08 <__aeabi_fdiv+0xa4>
 8000a82:	2300      	movs	r3, #0
 8000a84:	2280      	movs	r2, #128	@ 0x80
 8000a86:	4699      	mov	r9, r3
 8000a88:	469a      	mov	sl, r3
 8000a8a:	00e4      	lsls	r4, r4, #3
 8000a8c:	04d2      	lsls	r2, r2, #19
 8000a8e:	4314      	orrs	r4, r2
 8000a90:	3f7f      	subs	r7, #127	@ 0x7f
 8000a92:	0273      	lsls	r3, r6, #9
 8000a94:	0a5b      	lsrs	r3, r3, #9
 8000a96:	4698      	mov	r8, r3
 8000a98:	0073      	lsls	r3, r6, #1
 8000a9a:	0e1b      	lsrs	r3, r3, #24
 8000a9c:	0ff6      	lsrs	r6, r6, #31
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d01b      	beq.n	8000ada <__aeabi_fdiv+0x76>
 8000aa2:	2bff      	cmp	r3, #255	@ 0xff
 8000aa4:	d013      	beq.n	8000ace <__aeabi_fdiv+0x6a>
 8000aa6:	4642      	mov	r2, r8
 8000aa8:	2180      	movs	r1, #128	@ 0x80
 8000aaa:	00d2      	lsls	r2, r2, #3
 8000aac:	04c9      	lsls	r1, r1, #19
 8000aae:	4311      	orrs	r1, r2
 8000ab0:	4688      	mov	r8, r1
 8000ab2:	2000      	movs	r0, #0
 8000ab4:	3b7f      	subs	r3, #127	@ 0x7f
 8000ab6:	0029      	movs	r1, r5
 8000ab8:	1aff      	subs	r7, r7, r3
 8000aba:	464b      	mov	r3, r9
 8000abc:	4071      	eors	r1, r6
 8000abe:	b2c9      	uxtb	r1, r1
 8000ac0:	2b0f      	cmp	r3, #15
 8000ac2:	d900      	bls.n	8000ac6 <__aeabi_fdiv+0x62>
 8000ac4:	e0b5      	b.n	8000c32 <__aeabi_fdiv+0x1ce>
 8000ac6:	4a74      	ldr	r2, [pc, #464]	@ (8000c98 <__aeabi_fdiv+0x234>)
 8000ac8:	009b      	lsls	r3, r3, #2
 8000aca:	58d3      	ldr	r3, [r2, r3]
 8000acc:	469f      	mov	pc, r3
 8000ace:	4643      	mov	r3, r8
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d13f      	bne.n	8000b54 <__aeabi_fdiv+0xf0>
 8000ad4:	3fff      	subs	r7, #255	@ 0xff
 8000ad6:	3302      	adds	r3, #2
 8000ad8:	e003      	b.n	8000ae2 <__aeabi_fdiv+0x7e>
 8000ada:	4643      	mov	r3, r8
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d12d      	bne.n	8000b3c <__aeabi_fdiv+0xd8>
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	0029      	movs	r1, r5
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	4071      	eors	r1, r6
 8000ae8:	b2c9      	uxtb	r1, r1
 8000aea:	431a      	orrs	r2, r3
 8000aec:	2a0e      	cmp	r2, #14
 8000aee:	d838      	bhi.n	8000b62 <__aeabi_fdiv+0xfe>
 8000af0:	486a      	ldr	r0, [pc, #424]	@ (8000c9c <__aeabi_fdiv+0x238>)
 8000af2:	0092      	lsls	r2, r2, #2
 8000af4:	5882      	ldr	r2, [r0, r2]
 8000af6:	4697      	mov	pc, r2
 8000af8:	2c00      	cmp	r4, #0
 8000afa:	d113      	bne.n	8000b24 <__aeabi_fdiv+0xc0>
 8000afc:	2304      	movs	r3, #4
 8000afe:	4699      	mov	r9, r3
 8000b00:	3b03      	subs	r3, #3
 8000b02:	2700      	movs	r7, #0
 8000b04:	469a      	mov	sl, r3
 8000b06:	e7c4      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b08:	2c00      	cmp	r4, #0
 8000b0a:	d105      	bne.n	8000b18 <__aeabi_fdiv+0xb4>
 8000b0c:	2308      	movs	r3, #8
 8000b0e:	4699      	mov	r9, r3
 8000b10:	3b06      	subs	r3, #6
 8000b12:	27ff      	movs	r7, #255	@ 0xff
 8000b14:	469a      	mov	sl, r3
 8000b16:	e7bc      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b18:	230c      	movs	r3, #12
 8000b1a:	4699      	mov	r9, r3
 8000b1c:	3b09      	subs	r3, #9
 8000b1e:	27ff      	movs	r7, #255	@ 0xff
 8000b20:	469a      	mov	sl, r3
 8000b22:	e7b6      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b24:	0020      	movs	r0, r4
 8000b26:	f002 fc69 	bl	80033fc <__clzsi2>
 8000b2a:	2776      	movs	r7, #118	@ 0x76
 8000b2c:	1f43      	subs	r3, r0, #5
 8000b2e:	409c      	lsls	r4, r3
 8000b30:	2300      	movs	r3, #0
 8000b32:	427f      	negs	r7, r7
 8000b34:	4699      	mov	r9, r3
 8000b36:	469a      	mov	sl, r3
 8000b38:	1a3f      	subs	r7, r7, r0
 8000b3a:	e7aa      	b.n	8000a92 <__aeabi_fdiv+0x2e>
 8000b3c:	4640      	mov	r0, r8
 8000b3e:	f002 fc5d 	bl	80033fc <__clzsi2>
 8000b42:	4642      	mov	r2, r8
 8000b44:	1f43      	subs	r3, r0, #5
 8000b46:	409a      	lsls	r2, r3
 8000b48:	2376      	movs	r3, #118	@ 0x76
 8000b4a:	425b      	negs	r3, r3
 8000b4c:	1a1b      	subs	r3, r3, r0
 8000b4e:	4690      	mov	r8, r2
 8000b50:	2000      	movs	r0, #0
 8000b52:	e7b0      	b.n	8000ab6 <__aeabi_fdiv+0x52>
 8000b54:	2303      	movs	r3, #3
 8000b56:	464a      	mov	r2, r9
 8000b58:	431a      	orrs	r2, r3
 8000b5a:	4691      	mov	r9, r2
 8000b5c:	2003      	movs	r0, #3
 8000b5e:	33fc      	adds	r3, #252	@ 0xfc
 8000b60:	e7a9      	b.n	8000ab6 <__aeabi_fdiv+0x52>
 8000b62:	000d      	movs	r5, r1
 8000b64:	20ff      	movs	r0, #255	@ 0xff
 8000b66:	2200      	movs	r2, #0
 8000b68:	05c0      	lsls	r0, r0, #23
 8000b6a:	07ed      	lsls	r5, r5, #31
 8000b6c:	4310      	orrs	r0, r2
 8000b6e:	4328      	orrs	r0, r5
 8000b70:	bce0      	pop	{r5, r6, r7}
 8000b72:	46ba      	mov	sl, r7
 8000b74:	46b1      	mov	r9, r6
 8000b76:	46a8      	mov	r8, r5
 8000b78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b7a:	000d      	movs	r5, r1
 8000b7c:	2000      	movs	r0, #0
 8000b7e:	2200      	movs	r2, #0
 8000b80:	e7f2      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000b82:	4653      	mov	r3, sl
 8000b84:	2b02      	cmp	r3, #2
 8000b86:	d0ed      	beq.n	8000b64 <__aeabi_fdiv+0x100>
 8000b88:	2b03      	cmp	r3, #3
 8000b8a:	d033      	beq.n	8000bf4 <__aeabi_fdiv+0x190>
 8000b8c:	46a0      	mov	r8, r4
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d105      	bne.n	8000b9e <__aeabi_fdiv+0x13a>
 8000b92:	2000      	movs	r0, #0
 8000b94:	2200      	movs	r2, #0
 8000b96:	e7e7      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000b98:	0035      	movs	r5, r6
 8000b9a:	2803      	cmp	r0, #3
 8000b9c:	d07a      	beq.n	8000c94 <__aeabi_fdiv+0x230>
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	337f      	adds	r3, #127	@ 0x7f
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	dd2d      	ble.n	8000c02 <__aeabi_fdiv+0x19e>
 8000ba6:	4642      	mov	r2, r8
 8000ba8:	0752      	lsls	r2, r2, #29
 8000baa:	d007      	beq.n	8000bbc <__aeabi_fdiv+0x158>
 8000bac:	220f      	movs	r2, #15
 8000bae:	4641      	mov	r1, r8
 8000bb0:	400a      	ands	r2, r1
 8000bb2:	2a04      	cmp	r2, #4
 8000bb4:	d002      	beq.n	8000bbc <__aeabi_fdiv+0x158>
 8000bb6:	2204      	movs	r2, #4
 8000bb8:	4694      	mov	ip, r2
 8000bba:	44e0      	add	r8, ip
 8000bbc:	4642      	mov	r2, r8
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	d505      	bpl.n	8000bce <__aeabi_fdiv+0x16a>
 8000bc2:	4642      	mov	r2, r8
 8000bc4:	4b36      	ldr	r3, [pc, #216]	@ (8000ca0 <__aeabi_fdiv+0x23c>)
 8000bc6:	401a      	ands	r2, r3
 8000bc8:	003b      	movs	r3, r7
 8000bca:	4690      	mov	r8, r2
 8000bcc:	3380      	adds	r3, #128	@ 0x80
 8000bce:	2bfe      	cmp	r3, #254	@ 0xfe
 8000bd0:	dcc8      	bgt.n	8000b64 <__aeabi_fdiv+0x100>
 8000bd2:	4642      	mov	r2, r8
 8000bd4:	0192      	lsls	r2, r2, #6
 8000bd6:	0a52      	lsrs	r2, r2, #9
 8000bd8:	b2d8      	uxtb	r0, r3
 8000bda:	e7c5      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000bdc:	2280      	movs	r2, #128	@ 0x80
 8000bde:	2500      	movs	r5, #0
 8000be0:	20ff      	movs	r0, #255	@ 0xff
 8000be2:	03d2      	lsls	r2, r2, #15
 8000be4:	e7c0      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000be6:	2280      	movs	r2, #128	@ 0x80
 8000be8:	03d2      	lsls	r2, r2, #15
 8000bea:	4214      	tst	r4, r2
 8000bec:	d002      	beq.n	8000bf4 <__aeabi_fdiv+0x190>
 8000bee:	4643      	mov	r3, r8
 8000bf0:	4213      	tst	r3, r2
 8000bf2:	d049      	beq.n	8000c88 <__aeabi_fdiv+0x224>
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	03d2      	lsls	r2, r2, #15
 8000bf8:	4322      	orrs	r2, r4
 8000bfa:	0252      	lsls	r2, r2, #9
 8000bfc:	20ff      	movs	r0, #255	@ 0xff
 8000bfe:	0a52      	lsrs	r2, r2, #9
 8000c00:	e7b2      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c02:	2201      	movs	r2, #1
 8000c04:	1ad3      	subs	r3, r2, r3
 8000c06:	2b1b      	cmp	r3, #27
 8000c08:	dcc3      	bgt.n	8000b92 <__aeabi_fdiv+0x12e>
 8000c0a:	4642      	mov	r2, r8
 8000c0c:	40da      	lsrs	r2, r3
 8000c0e:	4643      	mov	r3, r8
 8000c10:	379e      	adds	r7, #158	@ 0x9e
 8000c12:	40bb      	lsls	r3, r7
 8000c14:	1e59      	subs	r1, r3, #1
 8000c16:	418b      	sbcs	r3, r1
 8000c18:	431a      	orrs	r2, r3
 8000c1a:	0753      	lsls	r3, r2, #29
 8000c1c:	d004      	beq.n	8000c28 <__aeabi_fdiv+0x1c4>
 8000c1e:	230f      	movs	r3, #15
 8000c20:	4013      	ands	r3, r2
 8000c22:	2b04      	cmp	r3, #4
 8000c24:	d000      	beq.n	8000c28 <__aeabi_fdiv+0x1c4>
 8000c26:	3204      	adds	r2, #4
 8000c28:	0153      	lsls	r3, r2, #5
 8000c2a:	d529      	bpl.n	8000c80 <__aeabi_fdiv+0x21c>
 8000c2c:	2001      	movs	r0, #1
 8000c2e:	2200      	movs	r2, #0
 8000c30:	e79a      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c32:	4642      	mov	r2, r8
 8000c34:	0163      	lsls	r3, r4, #5
 8000c36:	0155      	lsls	r5, r2, #5
 8000c38:	42ab      	cmp	r3, r5
 8000c3a:	d215      	bcs.n	8000c68 <__aeabi_fdiv+0x204>
 8000c3c:	201b      	movs	r0, #27
 8000c3e:	2200      	movs	r2, #0
 8000c40:	3f01      	subs	r7, #1
 8000c42:	2601      	movs	r6, #1
 8000c44:	001c      	movs	r4, r3
 8000c46:	0052      	lsls	r2, r2, #1
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	2c00      	cmp	r4, #0
 8000c4c:	db01      	blt.n	8000c52 <__aeabi_fdiv+0x1ee>
 8000c4e:	429d      	cmp	r5, r3
 8000c50:	d801      	bhi.n	8000c56 <__aeabi_fdiv+0x1f2>
 8000c52:	1b5b      	subs	r3, r3, r5
 8000c54:	4332      	orrs	r2, r6
 8000c56:	3801      	subs	r0, #1
 8000c58:	2800      	cmp	r0, #0
 8000c5a:	d1f3      	bne.n	8000c44 <__aeabi_fdiv+0x1e0>
 8000c5c:	1e58      	subs	r0, r3, #1
 8000c5e:	4183      	sbcs	r3, r0
 8000c60:	4313      	orrs	r3, r2
 8000c62:	4698      	mov	r8, r3
 8000c64:	000d      	movs	r5, r1
 8000c66:	e79a      	b.n	8000b9e <__aeabi_fdiv+0x13a>
 8000c68:	201a      	movs	r0, #26
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	1b5b      	subs	r3, r3, r5
 8000c6e:	e7e8      	b.n	8000c42 <__aeabi_fdiv+0x1de>
 8000c70:	3b02      	subs	r3, #2
 8000c72:	425a      	negs	r2, r3
 8000c74:	4153      	adcs	r3, r2
 8000c76:	425b      	negs	r3, r3
 8000c78:	0035      	movs	r5, r6
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	b2d8      	uxtb	r0, r3
 8000c7e:	e773      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c80:	0192      	lsls	r2, r2, #6
 8000c82:	2000      	movs	r0, #0
 8000c84:	0a52      	lsrs	r2, r2, #9
 8000c86:	e76f      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c88:	431a      	orrs	r2, r3
 8000c8a:	0252      	lsls	r2, r2, #9
 8000c8c:	0035      	movs	r5, r6
 8000c8e:	20ff      	movs	r0, #255	@ 0xff
 8000c90:	0a52      	lsrs	r2, r2, #9
 8000c92:	e769      	b.n	8000b68 <__aeabi_fdiv+0x104>
 8000c94:	4644      	mov	r4, r8
 8000c96:	e7ad      	b.n	8000bf4 <__aeabi_fdiv+0x190>
 8000c98:	0800fa3c 	.word	0x0800fa3c
 8000c9c:	0800fa7c 	.word	0x0800fa7c
 8000ca0:	f7ffffff 	.word	0xf7ffffff

08000ca4 <__eqsf2>:
 8000ca4:	b570      	push	{r4, r5, r6, lr}
 8000ca6:	0042      	lsls	r2, r0, #1
 8000ca8:	024e      	lsls	r6, r1, #9
 8000caa:	004c      	lsls	r4, r1, #1
 8000cac:	0245      	lsls	r5, r0, #9
 8000cae:	0a6d      	lsrs	r5, r5, #9
 8000cb0:	0e12      	lsrs	r2, r2, #24
 8000cb2:	0fc3      	lsrs	r3, r0, #31
 8000cb4:	0a76      	lsrs	r6, r6, #9
 8000cb6:	0e24      	lsrs	r4, r4, #24
 8000cb8:	0fc9      	lsrs	r1, r1, #31
 8000cba:	2aff      	cmp	r2, #255	@ 0xff
 8000cbc:	d010      	beq.n	8000ce0 <__eqsf2+0x3c>
 8000cbe:	2cff      	cmp	r4, #255	@ 0xff
 8000cc0:	d00c      	beq.n	8000cdc <__eqsf2+0x38>
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	42a2      	cmp	r2, r4
 8000cc6:	d10a      	bne.n	8000cde <__eqsf2+0x3a>
 8000cc8:	42b5      	cmp	r5, r6
 8000cca:	d108      	bne.n	8000cde <__eqsf2+0x3a>
 8000ccc:	428b      	cmp	r3, r1
 8000cce:	d00f      	beq.n	8000cf0 <__eqsf2+0x4c>
 8000cd0:	2a00      	cmp	r2, #0
 8000cd2:	d104      	bne.n	8000cde <__eqsf2+0x3a>
 8000cd4:	0028      	movs	r0, r5
 8000cd6:	1e43      	subs	r3, r0, #1
 8000cd8:	4198      	sbcs	r0, r3
 8000cda:	e000      	b.n	8000cde <__eqsf2+0x3a>
 8000cdc:	2001      	movs	r0, #1
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	2001      	movs	r0, #1
 8000ce2:	2cff      	cmp	r4, #255	@ 0xff
 8000ce4:	d1fb      	bne.n	8000cde <__eqsf2+0x3a>
 8000ce6:	4335      	orrs	r5, r6
 8000ce8:	d1f9      	bne.n	8000cde <__eqsf2+0x3a>
 8000cea:	404b      	eors	r3, r1
 8000cec:	0018      	movs	r0, r3
 8000cee:	e7f6      	b.n	8000cde <__eqsf2+0x3a>
 8000cf0:	2000      	movs	r0, #0
 8000cf2:	e7f4      	b.n	8000cde <__eqsf2+0x3a>

08000cf4 <__gesf2>:
 8000cf4:	b530      	push	{r4, r5, lr}
 8000cf6:	0042      	lsls	r2, r0, #1
 8000cf8:	0244      	lsls	r4, r0, #9
 8000cfa:	024d      	lsls	r5, r1, #9
 8000cfc:	0fc3      	lsrs	r3, r0, #31
 8000cfe:	0048      	lsls	r0, r1, #1
 8000d00:	0a64      	lsrs	r4, r4, #9
 8000d02:	0e12      	lsrs	r2, r2, #24
 8000d04:	0a6d      	lsrs	r5, r5, #9
 8000d06:	0e00      	lsrs	r0, r0, #24
 8000d08:	0fc9      	lsrs	r1, r1, #31
 8000d0a:	2aff      	cmp	r2, #255	@ 0xff
 8000d0c:	d019      	beq.n	8000d42 <__gesf2+0x4e>
 8000d0e:	28ff      	cmp	r0, #255	@ 0xff
 8000d10:	d00b      	beq.n	8000d2a <__gesf2+0x36>
 8000d12:	2a00      	cmp	r2, #0
 8000d14:	d11e      	bne.n	8000d54 <__gesf2+0x60>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d10b      	bne.n	8000d32 <__gesf2+0x3e>
 8000d1a:	2d00      	cmp	r5, #0
 8000d1c:	d027      	beq.n	8000d6e <__gesf2+0x7a>
 8000d1e:	2c00      	cmp	r4, #0
 8000d20:	d134      	bne.n	8000d8c <__gesf2+0x98>
 8000d22:	2900      	cmp	r1, #0
 8000d24:	d02f      	beq.n	8000d86 <__gesf2+0x92>
 8000d26:	0008      	movs	r0, r1
 8000d28:	bd30      	pop	{r4, r5, pc}
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d128      	bne.n	8000d80 <__gesf2+0x8c>
 8000d2e:	2a00      	cmp	r2, #0
 8000d30:	d101      	bne.n	8000d36 <__gesf2+0x42>
 8000d32:	2c00      	cmp	r4, #0
 8000d34:	d0f5      	beq.n	8000d22 <__gesf2+0x2e>
 8000d36:	428b      	cmp	r3, r1
 8000d38:	d107      	bne.n	8000d4a <__gesf2+0x56>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d023      	beq.n	8000d86 <__gesf2+0x92>
 8000d3e:	0018      	movs	r0, r3
 8000d40:	e7f2      	b.n	8000d28 <__gesf2+0x34>
 8000d42:	2c00      	cmp	r4, #0
 8000d44:	d11c      	bne.n	8000d80 <__gesf2+0x8c>
 8000d46:	28ff      	cmp	r0, #255	@ 0xff
 8000d48:	d014      	beq.n	8000d74 <__gesf2+0x80>
 8000d4a:	1e58      	subs	r0, r3, #1
 8000d4c:	2302      	movs	r3, #2
 8000d4e:	4018      	ands	r0, r3
 8000d50:	3801      	subs	r0, #1
 8000d52:	e7e9      	b.n	8000d28 <__gesf2+0x34>
 8000d54:	2800      	cmp	r0, #0
 8000d56:	d0f8      	beq.n	8000d4a <__gesf2+0x56>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	d1f6      	bne.n	8000d4a <__gesf2+0x56>
 8000d5c:	4282      	cmp	r2, r0
 8000d5e:	dcf4      	bgt.n	8000d4a <__gesf2+0x56>
 8000d60:	dbeb      	blt.n	8000d3a <__gesf2+0x46>
 8000d62:	42ac      	cmp	r4, r5
 8000d64:	d8f1      	bhi.n	8000d4a <__gesf2+0x56>
 8000d66:	2000      	movs	r0, #0
 8000d68:	42ac      	cmp	r4, r5
 8000d6a:	d2dd      	bcs.n	8000d28 <__gesf2+0x34>
 8000d6c:	e7e5      	b.n	8000d3a <__gesf2+0x46>
 8000d6e:	2c00      	cmp	r4, #0
 8000d70:	d0da      	beq.n	8000d28 <__gesf2+0x34>
 8000d72:	e7ea      	b.n	8000d4a <__gesf2+0x56>
 8000d74:	2d00      	cmp	r5, #0
 8000d76:	d103      	bne.n	8000d80 <__gesf2+0x8c>
 8000d78:	428b      	cmp	r3, r1
 8000d7a:	d1e6      	bne.n	8000d4a <__gesf2+0x56>
 8000d7c:	2000      	movs	r0, #0
 8000d7e:	e7d3      	b.n	8000d28 <__gesf2+0x34>
 8000d80:	2002      	movs	r0, #2
 8000d82:	4240      	negs	r0, r0
 8000d84:	e7d0      	b.n	8000d28 <__gesf2+0x34>
 8000d86:	2001      	movs	r0, #1
 8000d88:	4240      	negs	r0, r0
 8000d8a:	e7cd      	b.n	8000d28 <__gesf2+0x34>
 8000d8c:	428b      	cmp	r3, r1
 8000d8e:	d0e8      	beq.n	8000d62 <__gesf2+0x6e>
 8000d90:	e7db      	b.n	8000d4a <__gesf2+0x56>
 8000d92:	46c0      	nop			@ (mov r8, r8)

08000d94 <__lesf2>:
 8000d94:	b530      	push	{r4, r5, lr}
 8000d96:	0042      	lsls	r2, r0, #1
 8000d98:	0244      	lsls	r4, r0, #9
 8000d9a:	024d      	lsls	r5, r1, #9
 8000d9c:	0fc3      	lsrs	r3, r0, #31
 8000d9e:	0048      	lsls	r0, r1, #1
 8000da0:	0a64      	lsrs	r4, r4, #9
 8000da2:	0e12      	lsrs	r2, r2, #24
 8000da4:	0a6d      	lsrs	r5, r5, #9
 8000da6:	0e00      	lsrs	r0, r0, #24
 8000da8:	0fc9      	lsrs	r1, r1, #31
 8000daa:	2aff      	cmp	r2, #255	@ 0xff
 8000dac:	d01a      	beq.n	8000de4 <__lesf2+0x50>
 8000dae:	28ff      	cmp	r0, #255	@ 0xff
 8000db0:	d00e      	beq.n	8000dd0 <__lesf2+0x3c>
 8000db2:	2a00      	cmp	r2, #0
 8000db4:	d11e      	bne.n	8000df4 <__lesf2+0x60>
 8000db6:	2800      	cmp	r0, #0
 8000db8:	d10e      	bne.n	8000dd8 <__lesf2+0x44>
 8000dba:	2d00      	cmp	r5, #0
 8000dbc:	d02a      	beq.n	8000e14 <__lesf2+0x80>
 8000dbe:	2c00      	cmp	r4, #0
 8000dc0:	d00c      	beq.n	8000ddc <__lesf2+0x48>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d01d      	beq.n	8000e02 <__lesf2+0x6e>
 8000dc6:	1e58      	subs	r0, r3, #1
 8000dc8:	2302      	movs	r3, #2
 8000dca:	4018      	ands	r0, r3
 8000dcc:	3801      	subs	r0, #1
 8000dce:	e010      	b.n	8000df2 <__lesf2+0x5e>
 8000dd0:	2d00      	cmp	r5, #0
 8000dd2:	d10d      	bne.n	8000df0 <__lesf2+0x5c>
 8000dd4:	2a00      	cmp	r2, #0
 8000dd6:	d120      	bne.n	8000e1a <__lesf2+0x86>
 8000dd8:	2c00      	cmp	r4, #0
 8000dda:	d11e      	bne.n	8000e1a <__lesf2+0x86>
 8000ddc:	2900      	cmp	r1, #0
 8000dde:	d023      	beq.n	8000e28 <__lesf2+0x94>
 8000de0:	0008      	movs	r0, r1
 8000de2:	e006      	b.n	8000df2 <__lesf2+0x5e>
 8000de4:	2c00      	cmp	r4, #0
 8000de6:	d103      	bne.n	8000df0 <__lesf2+0x5c>
 8000de8:	28ff      	cmp	r0, #255	@ 0xff
 8000dea:	d1ec      	bne.n	8000dc6 <__lesf2+0x32>
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d017      	beq.n	8000e20 <__lesf2+0x8c>
 8000df0:	2002      	movs	r0, #2
 8000df2:	bd30      	pop	{r4, r5, pc}
 8000df4:	2800      	cmp	r0, #0
 8000df6:	d0e6      	beq.n	8000dc6 <__lesf2+0x32>
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d1e4      	bne.n	8000dc6 <__lesf2+0x32>
 8000dfc:	4282      	cmp	r2, r0
 8000dfe:	dce2      	bgt.n	8000dc6 <__lesf2+0x32>
 8000e00:	db04      	blt.n	8000e0c <__lesf2+0x78>
 8000e02:	42ac      	cmp	r4, r5
 8000e04:	d8df      	bhi.n	8000dc6 <__lesf2+0x32>
 8000e06:	2000      	movs	r0, #0
 8000e08:	42ac      	cmp	r4, r5
 8000e0a:	d2f2      	bcs.n	8000df2 <__lesf2+0x5e>
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d00b      	beq.n	8000e28 <__lesf2+0x94>
 8000e10:	0018      	movs	r0, r3
 8000e12:	e7ee      	b.n	8000df2 <__lesf2+0x5e>
 8000e14:	2c00      	cmp	r4, #0
 8000e16:	d0ec      	beq.n	8000df2 <__lesf2+0x5e>
 8000e18:	e7d5      	b.n	8000dc6 <__lesf2+0x32>
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d1d3      	bne.n	8000dc6 <__lesf2+0x32>
 8000e1e:	e7f5      	b.n	8000e0c <__lesf2+0x78>
 8000e20:	2000      	movs	r0, #0
 8000e22:	428b      	cmp	r3, r1
 8000e24:	d0e5      	beq.n	8000df2 <__lesf2+0x5e>
 8000e26:	e7ce      	b.n	8000dc6 <__lesf2+0x32>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	4240      	negs	r0, r0
 8000e2c:	e7e1      	b.n	8000df2 <__lesf2+0x5e>
 8000e2e:	46c0      	nop			@ (mov r8, r8)

08000e30 <__aeabi_fmul>:
 8000e30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e32:	464f      	mov	r7, r9
 8000e34:	4646      	mov	r6, r8
 8000e36:	46d6      	mov	lr, sl
 8000e38:	0243      	lsls	r3, r0, #9
 8000e3a:	0a5b      	lsrs	r3, r3, #9
 8000e3c:	0045      	lsls	r5, r0, #1
 8000e3e:	b5c0      	push	{r6, r7, lr}
 8000e40:	4699      	mov	r9, r3
 8000e42:	1c0f      	adds	r7, r1, #0
 8000e44:	0e2d      	lsrs	r5, r5, #24
 8000e46:	0fc6      	lsrs	r6, r0, #31
 8000e48:	2d00      	cmp	r5, #0
 8000e4a:	d100      	bne.n	8000e4e <__aeabi_fmul+0x1e>
 8000e4c:	e088      	b.n	8000f60 <__aeabi_fmul+0x130>
 8000e4e:	2dff      	cmp	r5, #255	@ 0xff
 8000e50:	d100      	bne.n	8000e54 <__aeabi_fmul+0x24>
 8000e52:	e08d      	b.n	8000f70 <__aeabi_fmul+0x140>
 8000e54:	2280      	movs	r2, #128	@ 0x80
 8000e56:	00db      	lsls	r3, r3, #3
 8000e58:	04d2      	lsls	r2, r2, #19
 8000e5a:	431a      	orrs	r2, r3
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	4691      	mov	r9, r2
 8000e60:	4698      	mov	r8, r3
 8000e62:	469a      	mov	sl, r3
 8000e64:	3d7f      	subs	r5, #127	@ 0x7f
 8000e66:	027c      	lsls	r4, r7, #9
 8000e68:	007b      	lsls	r3, r7, #1
 8000e6a:	0a64      	lsrs	r4, r4, #9
 8000e6c:	0e1b      	lsrs	r3, r3, #24
 8000e6e:	0fff      	lsrs	r7, r7, #31
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d068      	beq.n	8000f46 <__aeabi_fmul+0x116>
 8000e74:	2bff      	cmp	r3, #255	@ 0xff
 8000e76:	d021      	beq.n	8000ebc <__aeabi_fmul+0x8c>
 8000e78:	2280      	movs	r2, #128	@ 0x80
 8000e7a:	00e4      	lsls	r4, r4, #3
 8000e7c:	04d2      	lsls	r2, r2, #19
 8000e7e:	4314      	orrs	r4, r2
 8000e80:	4642      	mov	r2, r8
 8000e82:	3b7f      	subs	r3, #127	@ 0x7f
 8000e84:	195b      	adds	r3, r3, r5
 8000e86:	2100      	movs	r1, #0
 8000e88:	1c5d      	adds	r5, r3, #1
 8000e8a:	2a0a      	cmp	r2, #10
 8000e8c:	dc2e      	bgt.n	8000eec <__aeabi_fmul+0xbc>
 8000e8e:	407e      	eors	r6, r7
 8000e90:	4642      	mov	r2, r8
 8000e92:	2a02      	cmp	r2, #2
 8000e94:	dc23      	bgt.n	8000ede <__aeabi_fmul+0xae>
 8000e96:	3a01      	subs	r2, #1
 8000e98:	2a01      	cmp	r2, #1
 8000e9a:	d900      	bls.n	8000e9e <__aeabi_fmul+0x6e>
 8000e9c:	e0bd      	b.n	800101a <__aeabi_fmul+0x1ea>
 8000e9e:	2902      	cmp	r1, #2
 8000ea0:	d06e      	beq.n	8000f80 <__aeabi_fmul+0x150>
 8000ea2:	2901      	cmp	r1, #1
 8000ea4:	d12c      	bne.n	8000f00 <__aeabi_fmul+0xd0>
 8000ea6:	2000      	movs	r0, #0
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	05c0      	lsls	r0, r0, #23
 8000eac:	07f6      	lsls	r6, r6, #31
 8000eae:	4310      	orrs	r0, r2
 8000eb0:	4330      	orrs	r0, r6
 8000eb2:	bce0      	pop	{r5, r6, r7}
 8000eb4:	46ba      	mov	sl, r7
 8000eb6:	46b1      	mov	r9, r6
 8000eb8:	46a8      	mov	r8, r5
 8000eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ebc:	002b      	movs	r3, r5
 8000ebe:	33ff      	adds	r3, #255	@ 0xff
 8000ec0:	2c00      	cmp	r4, #0
 8000ec2:	d065      	beq.n	8000f90 <__aeabi_fmul+0x160>
 8000ec4:	2203      	movs	r2, #3
 8000ec6:	4641      	mov	r1, r8
 8000ec8:	4311      	orrs	r1, r2
 8000eca:	0032      	movs	r2, r6
 8000ecc:	3501      	adds	r5, #1
 8000ece:	4688      	mov	r8, r1
 8000ed0:	407a      	eors	r2, r7
 8000ed2:	35ff      	adds	r5, #255	@ 0xff
 8000ed4:	290a      	cmp	r1, #10
 8000ed6:	dd00      	ble.n	8000eda <__aeabi_fmul+0xaa>
 8000ed8:	e0d8      	b.n	800108c <__aeabi_fmul+0x25c>
 8000eda:	0016      	movs	r6, r2
 8000edc:	2103      	movs	r1, #3
 8000ede:	4640      	mov	r0, r8
 8000ee0:	2201      	movs	r2, #1
 8000ee2:	4082      	lsls	r2, r0
 8000ee4:	20a6      	movs	r0, #166	@ 0xa6
 8000ee6:	00c0      	lsls	r0, r0, #3
 8000ee8:	4202      	tst	r2, r0
 8000eea:	d020      	beq.n	8000f2e <__aeabi_fmul+0xfe>
 8000eec:	4653      	mov	r3, sl
 8000eee:	2b02      	cmp	r3, #2
 8000ef0:	d046      	beq.n	8000f80 <__aeabi_fmul+0x150>
 8000ef2:	2b03      	cmp	r3, #3
 8000ef4:	d100      	bne.n	8000ef8 <__aeabi_fmul+0xc8>
 8000ef6:	e0bb      	b.n	8001070 <__aeabi_fmul+0x240>
 8000ef8:	4651      	mov	r1, sl
 8000efa:	464c      	mov	r4, r9
 8000efc:	2901      	cmp	r1, #1
 8000efe:	d0d2      	beq.n	8000ea6 <__aeabi_fmul+0x76>
 8000f00:	002b      	movs	r3, r5
 8000f02:	337f      	adds	r3, #127	@ 0x7f
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	dd70      	ble.n	8000fea <__aeabi_fmul+0x1ba>
 8000f08:	0762      	lsls	r2, r4, #29
 8000f0a:	d004      	beq.n	8000f16 <__aeabi_fmul+0xe6>
 8000f0c:	220f      	movs	r2, #15
 8000f0e:	4022      	ands	r2, r4
 8000f10:	2a04      	cmp	r2, #4
 8000f12:	d000      	beq.n	8000f16 <__aeabi_fmul+0xe6>
 8000f14:	3404      	adds	r4, #4
 8000f16:	0122      	lsls	r2, r4, #4
 8000f18:	d503      	bpl.n	8000f22 <__aeabi_fmul+0xf2>
 8000f1a:	4b63      	ldr	r3, [pc, #396]	@ (80010a8 <__aeabi_fmul+0x278>)
 8000f1c:	401c      	ands	r4, r3
 8000f1e:	002b      	movs	r3, r5
 8000f20:	3380      	adds	r3, #128	@ 0x80
 8000f22:	2bfe      	cmp	r3, #254	@ 0xfe
 8000f24:	dc2c      	bgt.n	8000f80 <__aeabi_fmul+0x150>
 8000f26:	01a2      	lsls	r2, r4, #6
 8000f28:	0a52      	lsrs	r2, r2, #9
 8000f2a:	b2d8      	uxtb	r0, r3
 8000f2c:	e7bd      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f2e:	2090      	movs	r0, #144	@ 0x90
 8000f30:	0080      	lsls	r0, r0, #2
 8000f32:	4202      	tst	r2, r0
 8000f34:	d127      	bne.n	8000f86 <__aeabi_fmul+0x156>
 8000f36:	38b9      	subs	r0, #185	@ 0xb9
 8000f38:	38ff      	subs	r0, #255	@ 0xff
 8000f3a:	4210      	tst	r0, r2
 8000f3c:	d06d      	beq.n	800101a <__aeabi_fmul+0x1ea>
 8000f3e:	003e      	movs	r6, r7
 8000f40:	46a1      	mov	r9, r4
 8000f42:	468a      	mov	sl, r1
 8000f44:	e7d2      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	d141      	bne.n	8000fce <__aeabi_fmul+0x19e>
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	4642      	mov	r2, r8
 8000f4e:	431a      	orrs	r2, r3
 8000f50:	4690      	mov	r8, r2
 8000f52:	002b      	movs	r3, r5
 8000f54:	4642      	mov	r2, r8
 8000f56:	2101      	movs	r1, #1
 8000f58:	1c5d      	adds	r5, r3, #1
 8000f5a:	2a0a      	cmp	r2, #10
 8000f5c:	dd97      	ble.n	8000e8e <__aeabi_fmul+0x5e>
 8000f5e:	e7c5      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d126      	bne.n	8000fb2 <__aeabi_fmul+0x182>
 8000f64:	2304      	movs	r3, #4
 8000f66:	4698      	mov	r8, r3
 8000f68:	3b03      	subs	r3, #3
 8000f6a:	2500      	movs	r5, #0
 8000f6c:	469a      	mov	sl, r3
 8000f6e:	e77a      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d118      	bne.n	8000fa6 <__aeabi_fmul+0x176>
 8000f74:	2308      	movs	r3, #8
 8000f76:	4698      	mov	r8, r3
 8000f78:	3b06      	subs	r3, #6
 8000f7a:	25ff      	movs	r5, #255	@ 0xff
 8000f7c:	469a      	mov	sl, r3
 8000f7e:	e772      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000f80:	20ff      	movs	r0, #255	@ 0xff
 8000f82:	2200      	movs	r2, #0
 8000f84:	e791      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f86:	2280      	movs	r2, #128	@ 0x80
 8000f88:	2600      	movs	r6, #0
 8000f8a:	20ff      	movs	r0, #255	@ 0xff
 8000f8c:	03d2      	lsls	r2, r2, #15
 8000f8e:	e78c      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8000f90:	4641      	mov	r1, r8
 8000f92:	2202      	movs	r2, #2
 8000f94:	3501      	adds	r5, #1
 8000f96:	4311      	orrs	r1, r2
 8000f98:	4688      	mov	r8, r1
 8000f9a:	35ff      	adds	r5, #255	@ 0xff
 8000f9c:	290a      	cmp	r1, #10
 8000f9e:	dca5      	bgt.n	8000eec <__aeabi_fmul+0xbc>
 8000fa0:	2102      	movs	r1, #2
 8000fa2:	407e      	eors	r6, r7
 8000fa4:	e774      	b.n	8000e90 <__aeabi_fmul+0x60>
 8000fa6:	230c      	movs	r3, #12
 8000fa8:	4698      	mov	r8, r3
 8000faa:	3b09      	subs	r3, #9
 8000fac:	25ff      	movs	r5, #255	@ 0xff
 8000fae:	469a      	mov	sl, r3
 8000fb0:	e759      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f002 fa22 	bl	80033fc <__clzsi2>
 8000fb8:	464a      	mov	r2, r9
 8000fba:	1f43      	subs	r3, r0, #5
 8000fbc:	2576      	movs	r5, #118	@ 0x76
 8000fbe:	409a      	lsls	r2, r3
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	426d      	negs	r5, r5
 8000fc4:	4691      	mov	r9, r2
 8000fc6:	4698      	mov	r8, r3
 8000fc8:	469a      	mov	sl, r3
 8000fca:	1a2d      	subs	r5, r5, r0
 8000fcc:	e74b      	b.n	8000e66 <__aeabi_fmul+0x36>
 8000fce:	0020      	movs	r0, r4
 8000fd0:	f002 fa14 	bl	80033fc <__clzsi2>
 8000fd4:	4642      	mov	r2, r8
 8000fd6:	1f43      	subs	r3, r0, #5
 8000fd8:	409c      	lsls	r4, r3
 8000fda:	1a2b      	subs	r3, r5, r0
 8000fdc:	3b76      	subs	r3, #118	@ 0x76
 8000fde:	2100      	movs	r1, #0
 8000fe0:	1c5d      	adds	r5, r3, #1
 8000fe2:	2a0a      	cmp	r2, #10
 8000fe4:	dc00      	bgt.n	8000fe8 <__aeabi_fmul+0x1b8>
 8000fe6:	e752      	b.n	8000e8e <__aeabi_fmul+0x5e>
 8000fe8:	e780      	b.n	8000eec <__aeabi_fmul+0xbc>
 8000fea:	2201      	movs	r2, #1
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b1b      	cmp	r3, #27
 8000ff0:	dd00      	ble.n	8000ff4 <__aeabi_fmul+0x1c4>
 8000ff2:	e758      	b.n	8000ea6 <__aeabi_fmul+0x76>
 8000ff4:	359e      	adds	r5, #158	@ 0x9e
 8000ff6:	0022      	movs	r2, r4
 8000ff8:	40ac      	lsls	r4, r5
 8000ffa:	40da      	lsrs	r2, r3
 8000ffc:	1e63      	subs	r3, r4, #1
 8000ffe:	419c      	sbcs	r4, r3
 8001000:	4322      	orrs	r2, r4
 8001002:	0753      	lsls	r3, r2, #29
 8001004:	d004      	beq.n	8001010 <__aeabi_fmul+0x1e0>
 8001006:	230f      	movs	r3, #15
 8001008:	4013      	ands	r3, r2
 800100a:	2b04      	cmp	r3, #4
 800100c:	d000      	beq.n	8001010 <__aeabi_fmul+0x1e0>
 800100e:	3204      	adds	r2, #4
 8001010:	0153      	lsls	r3, r2, #5
 8001012:	d537      	bpl.n	8001084 <__aeabi_fmul+0x254>
 8001014:	2001      	movs	r0, #1
 8001016:	2200      	movs	r2, #0
 8001018:	e747      	b.n	8000eaa <__aeabi_fmul+0x7a>
 800101a:	0c21      	lsrs	r1, r4, #16
 800101c:	464a      	mov	r2, r9
 800101e:	0424      	lsls	r4, r4, #16
 8001020:	0c24      	lsrs	r4, r4, #16
 8001022:	0027      	movs	r7, r4
 8001024:	0c10      	lsrs	r0, r2, #16
 8001026:	0412      	lsls	r2, r2, #16
 8001028:	0c12      	lsrs	r2, r2, #16
 800102a:	4344      	muls	r4, r0
 800102c:	4357      	muls	r7, r2
 800102e:	4348      	muls	r0, r1
 8001030:	4351      	muls	r1, r2
 8001032:	0c3a      	lsrs	r2, r7, #16
 8001034:	1909      	adds	r1, r1, r4
 8001036:	1852      	adds	r2, r2, r1
 8001038:	4294      	cmp	r4, r2
 800103a:	d903      	bls.n	8001044 <__aeabi_fmul+0x214>
 800103c:	2180      	movs	r1, #128	@ 0x80
 800103e:	0249      	lsls	r1, r1, #9
 8001040:	468c      	mov	ip, r1
 8001042:	4460      	add	r0, ip
 8001044:	043f      	lsls	r7, r7, #16
 8001046:	0411      	lsls	r1, r2, #16
 8001048:	0c3f      	lsrs	r7, r7, #16
 800104a:	19c9      	adds	r1, r1, r7
 800104c:	018c      	lsls	r4, r1, #6
 800104e:	1e67      	subs	r7, r4, #1
 8001050:	41bc      	sbcs	r4, r7
 8001052:	0c12      	lsrs	r2, r2, #16
 8001054:	0e89      	lsrs	r1, r1, #26
 8001056:	1812      	adds	r2, r2, r0
 8001058:	430c      	orrs	r4, r1
 800105a:	0192      	lsls	r2, r2, #6
 800105c:	4314      	orrs	r4, r2
 800105e:	0112      	lsls	r2, r2, #4
 8001060:	d50e      	bpl.n	8001080 <__aeabi_fmul+0x250>
 8001062:	2301      	movs	r3, #1
 8001064:	0862      	lsrs	r2, r4, #1
 8001066:	401c      	ands	r4, r3
 8001068:	4314      	orrs	r4, r2
 800106a:	e749      	b.n	8000f00 <__aeabi_fmul+0xd0>
 800106c:	003e      	movs	r6, r7
 800106e:	46a1      	mov	r9, r4
 8001070:	2280      	movs	r2, #128	@ 0x80
 8001072:	464b      	mov	r3, r9
 8001074:	03d2      	lsls	r2, r2, #15
 8001076:	431a      	orrs	r2, r3
 8001078:	0252      	lsls	r2, r2, #9
 800107a:	20ff      	movs	r0, #255	@ 0xff
 800107c:	0a52      	lsrs	r2, r2, #9
 800107e:	e714      	b.n	8000eaa <__aeabi_fmul+0x7a>
 8001080:	001d      	movs	r5, r3
 8001082:	e73d      	b.n	8000f00 <__aeabi_fmul+0xd0>
 8001084:	0192      	lsls	r2, r2, #6
 8001086:	2000      	movs	r0, #0
 8001088:	0a52      	lsrs	r2, r2, #9
 800108a:	e70e      	b.n	8000eaa <__aeabi_fmul+0x7a>
 800108c:	290f      	cmp	r1, #15
 800108e:	d1ed      	bne.n	800106c <__aeabi_fmul+0x23c>
 8001090:	2280      	movs	r2, #128	@ 0x80
 8001092:	464b      	mov	r3, r9
 8001094:	03d2      	lsls	r2, r2, #15
 8001096:	4213      	tst	r3, r2
 8001098:	d0ea      	beq.n	8001070 <__aeabi_fmul+0x240>
 800109a:	4214      	tst	r4, r2
 800109c:	d1e8      	bne.n	8001070 <__aeabi_fmul+0x240>
 800109e:	003e      	movs	r6, r7
 80010a0:	20ff      	movs	r0, #255	@ 0xff
 80010a2:	4322      	orrs	r2, r4
 80010a4:	e701      	b.n	8000eaa <__aeabi_fmul+0x7a>
 80010a6:	46c0      	nop			@ (mov r8, r8)
 80010a8:	f7ffffff 	.word	0xf7ffffff

080010ac <__aeabi_fsub>:
 80010ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80010ae:	4647      	mov	r7, r8
 80010b0:	46ce      	mov	lr, r9
 80010b2:	024e      	lsls	r6, r1, #9
 80010b4:	0243      	lsls	r3, r0, #9
 80010b6:	0045      	lsls	r5, r0, #1
 80010b8:	0a72      	lsrs	r2, r6, #9
 80010ba:	0fc4      	lsrs	r4, r0, #31
 80010bc:	0048      	lsls	r0, r1, #1
 80010be:	b580      	push	{r7, lr}
 80010c0:	4694      	mov	ip, r2
 80010c2:	0a5f      	lsrs	r7, r3, #9
 80010c4:	0e2d      	lsrs	r5, r5, #24
 80010c6:	099b      	lsrs	r3, r3, #6
 80010c8:	0e00      	lsrs	r0, r0, #24
 80010ca:	0fc9      	lsrs	r1, r1, #31
 80010cc:	09b6      	lsrs	r6, r6, #6
 80010ce:	28ff      	cmp	r0, #255	@ 0xff
 80010d0:	d024      	beq.n	800111c <__aeabi_fsub+0x70>
 80010d2:	2201      	movs	r2, #1
 80010d4:	4051      	eors	r1, r2
 80010d6:	1a2a      	subs	r2, r5, r0
 80010d8:	428c      	cmp	r4, r1
 80010da:	d00f      	beq.n	80010fc <__aeabi_fsub+0x50>
 80010dc:	2a00      	cmp	r2, #0
 80010de:	dc00      	bgt.n	80010e2 <__aeabi_fsub+0x36>
 80010e0:	e16a      	b.n	80013b8 <__aeabi_fsub+0x30c>
 80010e2:	2800      	cmp	r0, #0
 80010e4:	d135      	bne.n	8001152 <__aeabi_fsub+0xa6>
 80010e6:	2e00      	cmp	r6, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_fsub+0x40>
 80010ea:	e0a2      	b.n	8001232 <__aeabi_fsub+0x186>
 80010ec:	1e51      	subs	r1, r2, #1
 80010ee:	2a01      	cmp	r2, #1
 80010f0:	d100      	bne.n	80010f4 <__aeabi_fsub+0x48>
 80010f2:	e124      	b.n	800133e <__aeabi_fsub+0x292>
 80010f4:	2aff      	cmp	r2, #255	@ 0xff
 80010f6:	d021      	beq.n	800113c <__aeabi_fsub+0x90>
 80010f8:	000a      	movs	r2, r1
 80010fa:	e02f      	b.n	800115c <__aeabi_fsub+0xb0>
 80010fc:	2a00      	cmp	r2, #0
 80010fe:	dc00      	bgt.n	8001102 <__aeabi_fsub+0x56>
 8001100:	e167      	b.n	80013d2 <__aeabi_fsub+0x326>
 8001102:	2800      	cmp	r0, #0
 8001104:	d05e      	beq.n	80011c4 <__aeabi_fsub+0x118>
 8001106:	2dff      	cmp	r5, #255	@ 0xff
 8001108:	d018      	beq.n	800113c <__aeabi_fsub+0x90>
 800110a:	2180      	movs	r1, #128	@ 0x80
 800110c:	04c9      	lsls	r1, r1, #19
 800110e:	430e      	orrs	r6, r1
 8001110:	2a1b      	cmp	r2, #27
 8001112:	dc00      	bgt.n	8001116 <__aeabi_fsub+0x6a>
 8001114:	e076      	b.n	8001204 <__aeabi_fsub+0x158>
 8001116:	002a      	movs	r2, r5
 8001118:	3301      	adds	r3, #1
 800111a:	e032      	b.n	8001182 <__aeabi_fsub+0xd6>
 800111c:	002a      	movs	r2, r5
 800111e:	3aff      	subs	r2, #255	@ 0xff
 8001120:	4691      	mov	r9, r2
 8001122:	2e00      	cmp	r6, #0
 8001124:	d042      	beq.n	80011ac <__aeabi_fsub+0x100>
 8001126:	428c      	cmp	r4, r1
 8001128:	d055      	beq.n	80011d6 <__aeabi_fsub+0x12a>
 800112a:	464a      	mov	r2, r9
 800112c:	2a00      	cmp	r2, #0
 800112e:	d100      	bne.n	8001132 <__aeabi_fsub+0x86>
 8001130:	e09c      	b.n	800126c <__aeabi_fsub+0x1c0>
 8001132:	2d00      	cmp	r5, #0
 8001134:	d100      	bne.n	8001138 <__aeabi_fsub+0x8c>
 8001136:	e077      	b.n	8001228 <__aeabi_fsub+0x17c>
 8001138:	000c      	movs	r4, r1
 800113a:	0033      	movs	r3, r6
 800113c:	08db      	lsrs	r3, r3, #3
 800113e:	2b00      	cmp	r3, #0
 8001140:	d100      	bne.n	8001144 <__aeabi_fsub+0x98>
 8001142:	e06e      	b.n	8001222 <__aeabi_fsub+0x176>
 8001144:	2280      	movs	r2, #128	@ 0x80
 8001146:	03d2      	lsls	r2, r2, #15
 8001148:	4313      	orrs	r3, r2
 800114a:	025b      	lsls	r3, r3, #9
 800114c:	20ff      	movs	r0, #255	@ 0xff
 800114e:	0a5b      	lsrs	r3, r3, #9
 8001150:	e024      	b.n	800119c <__aeabi_fsub+0xf0>
 8001152:	2dff      	cmp	r5, #255	@ 0xff
 8001154:	d0f2      	beq.n	800113c <__aeabi_fsub+0x90>
 8001156:	2180      	movs	r1, #128	@ 0x80
 8001158:	04c9      	lsls	r1, r1, #19
 800115a:	430e      	orrs	r6, r1
 800115c:	2101      	movs	r1, #1
 800115e:	2a1b      	cmp	r2, #27
 8001160:	dc08      	bgt.n	8001174 <__aeabi_fsub+0xc8>
 8001162:	0031      	movs	r1, r6
 8001164:	2020      	movs	r0, #32
 8001166:	40d1      	lsrs	r1, r2
 8001168:	1a82      	subs	r2, r0, r2
 800116a:	4096      	lsls	r6, r2
 800116c:	0032      	movs	r2, r6
 800116e:	1e50      	subs	r0, r2, #1
 8001170:	4182      	sbcs	r2, r0
 8001172:	4311      	orrs	r1, r2
 8001174:	1a5b      	subs	r3, r3, r1
 8001176:	015a      	lsls	r2, r3, #5
 8001178:	d460      	bmi.n	800123c <__aeabi_fsub+0x190>
 800117a:	2107      	movs	r1, #7
 800117c:	002a      	movs	r2, r5
 800117e:	4019      	ands	r1, r3
 8001180:	d057      	beq.n	8001232 <__aeabi_fsub+0x186>
 8001182:	210f      	movs	r1, #15
 8001184:	4019      	ands	r1, r3
 8001186:	2904      	cmp	r1, #4
 8001188:	d000      	beq.n	800118c <__aeabi_fsub+0xe0>
 800118a:	3304      	adds	r3, #4
 800118c:	0159      	lsls	r1, r3, #5
 800118e:	d550      	bpl.n	8001232 <__aeabi_fsub+0x186>
 8001190:	1c50      	adds	r0, r2, #1
 8001192:	2afe      	cmp	r2, #254	@ 0xfe
 8001194:	d045      	beq.n	8001222 <__aeabi_fsub+0x176>
 8001196:	019b      	lsls	r3, r3, #6
 8001198:	b2c0      	uxtb	r0, r0
 800119a:	0a5b      	lsrs	r3, r3, #9
 800119c:	05c0      	lsls	r0, r0, #23
 800119e:	4318      	orrs	r0, r3
 80011a0:	07e4      	lsls	r4, r4, #31
 80011a2:	4320      	orrs	r0, r4
 80011a4:	bcc0      	pop	{r6, r7}
 80011a6:	46b9      	mov	r9, r7
 80011a8:	46b0      	mov	r8, r6
 80011aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011ac:	2201      	movs	r2, #1
 80011ae:	4051      	eors	r1, r2
 80011b0:	428c      	cmp	r4, r1
 80011b2:	d1ba      	bne.n	800112a <__aeabi_fsub+0x7e>
 80011b4:	464a      	mov	r2, r9
 80011b6:	2a00      	cmp	r2, #0
 80011b8:	d010      	beq.n	80011dc <__aeabi_fsub+0x130>
 80011ba:	2d00      	cmp	r5, #0
 80011bc:	d100      	bne.n	80011c0 <__aeabi_fsub+0x114>
 80011be:	e098      	b.n	80012f2 <__aeabi_fsub+0x246>
 80011c0:	2300      	movs	r3, #0
 80011c2:	e7bb      	b.n	800113c <__aeabi_fsub+0x90>
 80011c4:	2e00      	cmp	r6, #0
 80011c6:	d034      	beq.n	8001232 <__aeabi_fsub+0x186>
 80011c8:	1e51      	subs	r1, r2, #1
 80011ca:	2a01      	cmp	r2, #1
 80011cc:	d06e      	beq.n	80012ac <__aeabi_fsub+0x200>
 80011ce:	2aff      	cmp	r2, #255	@ 0xff
 80011d0:	d0b4      	beq.n	800113c <__aeabi_fsub+0x90>
 80011d2:	000a      	movs	r2, r1
 80011d4:	e79c      	b.n	8001110 <__aeabi_fsub+0x64>
 80011d6:	2a00      	cmp	r2, #0
 80011d8:	d000      	beq.n	80011dc <__aeabi_fsub+0x130>
 80011da:	e088      	b.n	80012ee <__aeabi_fsub+0x242>
 80011dc:	20fe      	movs	r0, #254	@ 0xfe
 80011de:	1c6a      	adds	r2, r5, #1
 80011e0:	4210      	tst	r0, r2
 80011e2:	d000      	beq.n	80011e6 <__aeabi_fsub+0x13a>
 80011e4:	e092      	b.n	800130c <__aeabi_fsub+0x260>
 80011e6:	2d00      	cmp	r5, #0
 80011e8:	d000      	beq.n	80011ec <__aeabi_fsub+0x140>
 80011ea:	e0a4      	b.n	8001336 <__aeabi_fsub+0x28a>
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d100      	bne.n	80011f2 <__aeabi_fsub+0x146>
 80011f0:	e0cb      	b.n	800138a <__aeabi_fsub+0x2de>
 80011f2:	2e00      	cmp	r6, #0
 80011f4:	d000      	beq.n	80011f8 <__aeabi_fsub+0x14c>
 80011f6:	e0ca      	b.n	800138e <__aeabi_fsub+0x2e2>
 80011f8:	2200      	movs	r2, #0
 80011fa:	08db      	lsrs	r3, r3, #3
 80011fc:	025b      	lsls	r3, r3, #9
 80011fe:	0a5b      	lsrs	r3, r3, #9
 8001200:	b2d0      	uxtb	r0, r2
 8001202:	e7cb      	b.n	800119c <__aeabi_fsub+0xf0>
 8001204:	0031      	movs	r1, r6
 8001206:	2020      	movs	r0, #32
 8001208:	40d1      	lsrs	r1, r2
 800120a:	1a82      	subs	r2, r0, r2
 800120c:	4096      	lsls	r6, r2
 800120e:	0032      	movs	r2, r6
 8001210:	1e50      	subs	r0, r2, #1
 8001212:	4182      	sbcs	r2, r0
 8001214:	430a      	orrs	r2, r1
 8001216:	189b      	adds	r3, r3, r2
 8001218:	015a      	lsls	r2, r3, #5
 800121a:	d5ae      	bpl.n	800117a <__aeabi_fsub+0xce>
 800121c:	1c6a      	adds	r2, r5, #1
 800121e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001220:	d14a      	bne.n	80012b8 <__aeabi_fsub+0x20c>
 8001222:	20ff      	movs	r0, #255	@ 0xff
 8001224:	2300      	movs	r3, #0
 8001226:	e7b9      	b.n	800119c <__aeabi_fsub+0xf0>
 8001228:	22ff      	movs	r2, #255	@ 0xff
 800122a:	2b00      	cmp	r3, #0
 800122c:	d14b      	bne.n	80012c6 <__aeabi_fsub+0x21a>
 800122e:	000c      	movs	r4, r1
 8001230:	0033      	movs	r3, r6
 8001232:	08db      	lsrs	r3, r3, #3
 8001234:	2aff      	cmp	r2, #255	@ 0xff
 8001236:	d100      	bne.n	800123a <__aeabi_fsub+0x18e>
 8001238:	e781      	b.n	800113e <__aeabi_fsub+0x92>
 800123a:	e7df      	b.n	80011fc <__aeabi_fsub+0x150>
 800123c:	019f      	lsls	r7, r3, #6
 800123e:	09bf      	lsrs	r7, r7, #6
 8001240:	0038      	movs	r0, r7
 8001242:	f002 f8db 	bl	80033fc <__clzsi2>
 8001246:	3805      	subs	r0, #5
 8001248:	4087      	lsls	r7, r0
 800124a:	4285      	cmp	r5, r0
 800124c:	dc21      	bgt.n	8001292 <__aeabi_fsub+0x1e6>
 800124e:	003b      	movs	r3, r7
 8001250:	2120      	movs	r1, #32
 8001252:	1b42      	subs	r2, r0, r5
 8001254:	3201      	adds	r2, #1
 8001256:	40d3      	lsrs	r3, r2
 8001258:	1a8a      	subs	r2, r1, r2
 800125a:	4097      	lsls	r7, r2
 800125c:	1e7a      	subs	r2, r7, #1
 800125e:	4197      	sbcs	r7, r2
 8001260:	2200      	movs	r2, #0
 8001262:	433b      	orrs	r3, r7
 8001264:	0759      	lsls	r1, r3, #29
 8001266:	d000      	beq.n	800126a <__aeabi_fsub+0x1be>
 8001268:	e78b      	b.n	8001182 <__aeabi_fsub+0xd6>
 800126a:	e78f      	b.n	800118c <__aeabi_fsub+0xe0>
 800126c:	20fe      	movs	r0, #254	@ 0xfe
 800126e:	1c6a      	adds	r2, r5, #1
 8001270:	4210      	tst	r0, r2
 8001272:	d112      	bne.n	800129a <__aeabi_fsub+0x1ee>
 8001274:	2d00      	cmp	r5, #0
 8001276:	d152      	bne.n	800131e <__aeabi_fsub+0x272>
 8001278:	2b00      	cmp	r3, #0
 800127a:	d07c      	beq.n	8001376 <__aeabi_fsub+0x2ca>
 800127c:	2e00      	cmp	r6, #0
 800127e:	d0bb      	beq.n	80011f8 <__aeabi_fsub+0x14c>
 8001280:	1b9a      	subs	r2, r3, r6
 8001282:	0150      	lsls	r0, r2, #5
 8001284:	d400      	bmi.n	8001288 <__aeabi_fsub+0x1dc>
 8001286:	e08b      	b.n	80013a0 <__aeabi_fsub+0x2f4>
 8001288:	2401      	movs	r4, #1
 800128a:	2200      	movs	r2, #0
 800128c:	1af3      	subs	r3, r6, r3
 800128e:	400c      	ands	r4, r1
 8001290:	e7e8      	b.n	8001264 <__aeabi_fsub+0x1b8>
 8001292:	4b56      	ldr	r3, [pc, #344]	@ (80013ec <__aeabi_fsub+0x340>)
 8001294:	1a2a      	subs	r2, r5, r0
 8001296:	403b      	ands	r3, r7
 8001298:	e7e4      	b.n	8001264 <__aeabi_fsub+0x1b8>
 800129a:	1b9f      	subs	r7, r3, r6
 800129c:	017a      	lsls	r2, r7, #5
 800129e:	d446      	bmi.n	800132e <__aeabi_fsub+0x282>
 80012a0:	2f00      	cmp	r7, #0
 80012a2:	d1cd      	bne.n	8001240 <__aeabi_fsub+0x194>
 80012a4:	2400      	movs	r4, #0
 80012a6:	2000      	movs	r0, #0
 80012a8:	2300      	movs	r3, #0
 80012aa:	e777      	b.n	800119c <__aeabi_fsub+0xf0>
 80012ac:	199b      	adds	r3, r3, r6
 80012ae:	2501      	movs	r5, #1
 80012b0:	3201      	adds	r2, #1
 80012b2:	0159      	lsls	r1, r3, #5
 80012b4:	d400      	bmi.n	80012b8 <__aeabi_fsub+0x20c>
 80012b6:	e760      	b.n	800117a <__aeabi_fsub+0xce>
 80012b8:	2101      	movs	r1, #1
 80012ba:	484d      	ldr	r0, [pc, #308]	@ (80013f0 <__aeabi_fsub+0x344>)
 80012bc:	4019      	ands	r1, r3
 80012be:	085b      	lsrs	r3, r3, #1
 80012c0:	4003      	ands	r3, r0
 80012c2:	430b      	orrs	r3, r1
 80012c4:	e7ce      	b.n	8001264 <__aeabi_fsub+0x1b8>
 80012c6:	1e57      	subs	r7, r2, #1
 80012c8:	2a01      	cmp	r2, #1
 80012ca:	d05a      	beq.n	8001382 <__aeabi_fsub+0x2d6>
 80012cc:	000c      	movs	r4, r1
 80012ce:	2aff      	cmp	r2, #255	@ 0xff
 80012d0:	d033      	beq.n	800133a <__aeabi_fsub+0x28e>
 80012d2:	2201      	movs	r2, #1
 80012d4:	2f1b      	cmp	r7, #27
 80012d6:	dc07      	bgt.n	80012e8 <__aeabi_fsub+0x23c>
 80012d8:	2120      	movs	r1, #32
 80012da:	1bc9      	subs	r1, r1, r7
 80012dc:	001a      	movs	r2, r3
 80012de:	408b      	lsls	r3, r1
 80012e0:	40fa      	lsrs	r2, r7
 80012e2:	1e59      	subs	r1, r3, #1
 80012e4:	418b      	sbcs	r3, r1
 80012e6:	431a      	orrs	r2, r3
 80012e8:	0005      	movs	r5, r0
 80012ea:	1ab3      	subs	r3, r6, r2
 80012ec:	e743      	b.n	8001176 <__aeabi_fsub+0xca>
 80012ee:	2d00      	cmp	r5, #0
 80012f0:	d123      	bne.n	800133a <__aeabi_fsub+0x28e>
 80012f2:	22ff      	movs	r2, #255	@ 0xff
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d09b      	beq.n	8001230 <__aeabi_fsub+0x184>
 80012f8:	1e51      	subs	r1, r2, #1
 80012fa:	2a01      	cmp	r2, #1
 80012fc:	d0d6      	beq.n	80012ac <__aeabi_fsub+0x200>
 80012fe:	2aff      	cmp	r2, #255	@ 0xff
 8001300:	d01b      	beq.n	800133a <__aeabi_fsub+0x28e>
 8001302:	291b      	cmp	r1, #27
 8001304:	dd2c      	ble.n	8001360 <__aeabi_fsub+0x2b4>
 8001306:	0002      	movs	r2, r0
 8001308:	1c73      	adds	r3, r6, #1
 800130a:	e73a      	b.n	8001182 <__aeabi_fsub+0xd6>
 800130c:	2aff      	cmp	r2, #255	@ 0xff
 800130e:	d088      	beq.n	8001222 <__aeabi_fsub+0x176>
 8001310:	199b      	adds	r3, r3, r6
 8001312:	085b      	lsrs	r3, r3, #1
 8001314:	0759      	lsls	r1, r3, #29
 8001316:	d000      	beq.n	800131a <__aeabi_fsub+0x26e>
 8001318:	e733      	b.n	8001182 <__aeabi_fsub+0xd6>
 800131a:	08db      	lsrs	r3, r3, #3
 800131c:	e76e      	b.n	80011fc <__aeabi_fsub+0x150>
 800131e:	2b00      	cmp	r3, #0
 8001320:	d110      	bne.n	8001344 <__aeabi_fsub+0x298>
 8001322:	2e00      	cmp	r6, #0
 8001324:	d043      	beq.n	80013ae <__aeabi_fsub+0x302>
 8001326:	2401      	movs	r4, #1
 8001328:	0033      	movs	r3, r6
 800132a:	400c      	ands	r4, r1
 800132c:	e706      	b.n	800113c <__aeabi_fsub+0x90>
 800132e:	2401      	movs	r4, #1
 8001330:	1af7      	subs	r7, r6, r3
 8001332:	400c      	ands	r4, r1
 8001334:	e784      	b.n	8001240 <__aeabi_fsub+0x194>
 8001336:	2b00      	cmp	r3, #0
 8001338:	d104      	bne.n	8001344 <__aeabi_fsub+0x298>
 800133a:	0033      	movs	r3, r6
 800133c:	e6fe      	b.n	800113c <__aeabi_fsub+0x90>
 800133e:	2501      	movs	r5, #1
 8001340:	1b9b      	subs	r3, r3, r6
 8001342:	e718      	b.n	8001176 <__aeabi_fsub+0xca>
 8001344:	2e00      	cmp	r6, #0
 8001346:	d100      	bne.n	800134a <__aeabi_fsub+0x29e>
 8001348:	e6f8      	b.n	800113c <__aeabi_fsub+0x90>
 800134a:	2280      	movs	r2, #128	@ 0x80
 800134c:	03d2      	lsls	r2, r2, #15
 800134e:	4297      	cmp	r7, r2
 8001350:	d304      	bcc.n	800135c <__aeabi_fsub+0x2b0>
 8001352:	4594      	cmp	ip, r2
 8001354:	d202      	bcs.n	800135c <__aeabi_fsub+0x2b0>
 8001356:	2401      	movs	r4, #1
 8001358:	0033      	movs	r3, r6
 800135a:	400c      	ands	r4, r1
 800135c:	08db      	lsrs	r3, r3, #3
 800135e:	e6f1      	b.n	8001144 <__aeabi_fsub+0x98>
 8001360:	001a      	movs	r2, r3
 8001362:	2520      	movs	r5, #32
 8001364:	40ca      	lsrs	r2, r1
 8001366:	1a69      	subs	r1, r5, r1
 8001368:	408b      	lsls	r3, r1
 800136a:	1e59      	subs	r1, r3, #1
 800136c:	418b      	sbcs	r3, r1
 800136e:	4313      	orrs	r3, r2
 8001370:	0005      	movs	r5, r0
 8001372:	199b      	adds	r3, r3, r6
 8001374:	e750      	b.n	8001218 <__aeabi_fsub+0x16c>
 8001376:	2e00      	cmp	r6, #0
 8001378:	d094      	beq.n	80012a4 <__aeabi_fsub+0x1f8>
 800137a:	2401      	movs	r4, #1
 800137c:	0033      	movs	r3, r6
 800137e:	400c      	ands	r4, r1
 8001380:	e73a      	b.n	80011f8 <__aeabi_fsub+0x14c>
 8001382:	000c      	movs	r4, r1
 8001384:	2501      	movs	r5, #1
 8001386:	1af3      	subs	r3, r6, r3
 8001388:	e6f5      	b.n	8001176 <__aeabi_fsub+0xca>
 800138a:	0033      	movs	r3, r6
 800138c:	e734      	b.n	80011f8 <__aeabi_fsub+0x14c>
 800138e:	199b      	adds	r3, r3, r6
 8001390:	2200      	movs	r2, #0
 8001392:	0159      	lsls	r1, r3, #5
 8001394:	d5c1      	bpl.n	800131a <__aeabi_fsub+0x26e>
 8001396:	4a15      	ldr	r2, [pc, #84]	@ (80013ec <__aeabi_fsub+0x340>)
 8001398:	4013      	ands	r3, r2
 800139a:	08db      	lsrs	r3, r3, #3
 800139c:	2201      	movs	r2, #1
 800139e:	e72d      	b.n	80011fc <__aeabi_fsub+0x150>
 80013a0:	2a00      	cmp	r2, #0
 80013a2:	d100      	bne.n	80013a6 <__aeabi_fsub+0x2fa>
 80013a4:	e77e      	b.n	80012a4 <__aeabi_fsub+0x1f8>
 80013a6:	0013      	movs	r3, r2
 80013a8:	2200      	movs	r2, #0
 80013aa:	08db      	lsrs	r3, r3, #3
 80013ac:	e726      	b.n	80011fc <__aeabi_fsub+0x150>
 80013ae:	2380      	movs	r3, #128	@ 0x80
 80013b0:	2400      	movs	r4, #0
 80013b2:	20ff      	movs	r0, #255	@ 0xff
 80013b4:	03db      	lsls	r3, r3, #15
 80013b6:	e6f1      	b.n	800119c <__aeabi_fsub+0xf0>
 80013b8:	2a00      	cmp	r2, #0
 80013ba:	d100      	bne.n	80013be <__aeabi_fsub+0x312>
 80013bc:	e756      	b.n	800126c <__aeabi_fsub+0x1c0>
 80013be:	1b47      	subs	r7, r0, r5
 80013c0:	003a      	movs	r2, r7
 80013c2:	2d00      	cmp	r5, #0
 80013c4:	d100      	bne.n	80013c8 <__aeabi_fsub+0x31c>
 80013c6:	e730      	b.n	800122a <__aeabi_fsub+0x17e>
 80013c8:	2280      	movs	r2, #128	@ 0x80
 80013ca:	04d2      	lsls	r2, r2, #19
 80013cc:	000c      	movs	r4, r1
 80013ce:	4313      	orrs	r3, r2
 80013d0:	e77f      	b.n	80012d2 <__aeabi_fsub+0x226>
 80013d2:	2a00      	cmp	r2, #0
 80013d4:	d100      	bne.n	80013d8 <__aeabi_fsub+0x32c>
 80013d6:	e701      	b.n	80011dc <__aeabi_fsub+0x130>
 80013d8:	1b41      	subs	r1, r0, r5
 80013da:	2d00      	cmp	r5, #0
 80013dc:	d101      	bne.n	80013e2 <__aeabi_fsub+0x336>
 80013de:	000a      	movs	r2, r1
 80013e0:	e788      	b.n	80012f4 <__aeabi_fsub+0x248>
 80013e2:	2280      	movs	r2, #128	@ 0x80
 80013e4:	04d2      	lsls	r2, r2, #19
 80013e6:	4313      	orrs	r3, r2
 80013e8:	e78b      	b.n	8001302 <__aeabi_fsub+0x256>
 80013ea:	46c0      	nop			@ (mov r8, r8)
 80013ec:	fbffffff 	.word	0xfbffffff
 80013f0:	7dffffff 	.word	0x7dffffff

080013f4 <__aeabi_fcmpun>:
 80013f4:	0243      	lsls	r3, r0, #9
 80013f6:	024a      	lsls	r2, r1, #9
 80013f8:	0040      	lsls	r0, r0, #1
 80013fa:	0049      	lsls	r1, r1, #1
 80013fc:	0a5b      	lsrs	r3, r3, #9
 80013fe:	0a52      	lsrs	r2, r2, #9
 8001400:	0e09      	lsrs	r1, r1, #24
 8001402:	0e00      	lsrs	r0, r0, #24
 8001404:	28ff      	cmp	r0, #255	@ 0xff
 8001406:	d006      	beq.n	8001416 <__aeabi_fcmpun+0x22>
 8001408:	2000      	movs	r0, #0
 800140a:	29ff      	cmp	r1, #255	@ 0xff
 800140c:	d102      	bne.n	8001414 <__aeabi_fcmpun+0x20>
 800140e:	1e53      	subs	r3, r2, #1
 8001410:	419a      	sbcs	r2, r3
 8001412:	0010      	movs	r0, r2
 8001414:	4770      	bx	lr
 8001416:	38fe      	subs	r0, #254	@ 0xfe
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1fb      	bne.n	8001414 <__aeabi_fcmpun+0x20>
 800141c:	e7f4      	b.n	8001408 <__aeabi_fcmpun+0x14>
 800141e:	46c0      	nop			@ (mov r8, r8)

08001420 <__aeabi_f2iz>:
 8001420:	0241      	lsls	r1, r0, #9
 8001422:	0042      	lsls	r2, r0, #1
 8001424:	0fc3      	lsrs	r3, r0, #31
 8001426:	0a49      	lsrs	r1, r1, #9
 8001428:	2000      	movs	r0, #0
 800142a:	0e12      	lsrs	r2, r2, #24
 800142c:	2a7e      	cmp	r2, #126	@ 0x7e
 800142e:	dd03      	ble.n	8001438 <__aeabi_f2iz+0x18>
 8001430:	2a9d      	cmp	r2, #157	@ 0x9d
 8001432:	dd02      	ble.n	800143a <__aeabi_f2iz+0x1a>
 8001434:	4a09      	ldr	r2, [pc, #36]	@ (800145c <__aeabi_f2iz+0x3c>)
 8001436:	1898      	adds	r0, r3, r2
 8001438:	4770      	bx	lr
 800143a:	2080      	movs	r0, #128	@ 0x80
 800143c:	0400      	lsls	r0, r0, #16
 800143e:	4301      	orrs	r1, r0
 8001440:	2a95      	cmp	r2, #149	@ 0x95
 8001442:	dc07      	bgt.n	8001454 <__aeabi_f2iz+0x34>
 8001444:	2096      	movs	r0, #150	@ 0x96
 8001446:	1a82      	subs	r2, r0, r2
 8001448:	40d1      	lsrs	r1, r2
 800144a:	4248      	negs	r0, r1
 800144c:	2b00      	cmp	r3, #0
 800144e:	d1f3      	bne.n	8001438 <__aeabi_f2iz+0x18>
 8001450:	0008      	movs	r0, r1
 8001452:	e7f1      	b.n	8001438 <__aeabi_f2iz+0x18>
 8001454:	3a96      	subs	r2, #150	@ 0x96
 8001456:	4091      	lsls	r1, r2
 8001458:	e7f7      	b.n	800144a <__aeabi_f2iz+0x2a>
 800145a:	46c0      	nop			@ (mov r8, r8)
 800145c:	7fffffff 	.word	0x7fffffff

08001460 <__aeabi_i2f>:
 8001460:	b570      	push	{r4, r5, r6, lr}
 8001462:	2800      	cmp	r0, #0
 8001464:	d013      	beq.n	800148e <__aeabi_i2f+0x2e>
 8001466:	17c3      	asrs	r3, r0, #31
 8001468:	18c5      	adds	r5, r0, r3
 800146a:	405d      	eors	r5, r3
 800146c:	0fc4      	lsrs	r4, r0, #31
 800146e:	0028      	movs	r0, r5
 8001470:	f001 ffc4 	bl	80033fc <__clzsi2>
 8001474:	239e      	movs	r3, #158	@ 0x9e
 8001476:	0001      	movs	r1, r0
 8001478:	1a1b      	subs	r3, r3, r0
 800147a:	2b96      	cmp	r3, #150	@ 0x96
 800147c:	dc0f      	bgt.n	800149e <__aeabi_i2f+0x3e>
 800147e:	2808      	cmp	r0, #8
 8001480:	d034      	beq.n	80014ec <__aeabi_i2f+0x8c>
 8001482:	3908      	subs	r1, #8
 8001484:	408d      	lsls	r5, r1
 8001486:	026d      	lsls	r5, r5, #9
 8001488:	0a6d      	lsrs	r5, r5, #9
 800148a:	b2d8      	uxtb	r0, r3
 800148c:	e002      	b.n	8001494 <__aeabi_i2f+0x34>
 800148e:	2400      	movs	r4, #0
 8001490:	2000      	movs	r0, #0
 8001492:	2500      	movs	r5, #0
 8001494:	05c0      	lsls	r0, r0, #23
 8001496:	4328      	orrs	r0, r5
 8001498:	07e4      	lsls	r4, r4, #31
 800149a:	4320      	orrs	r0, r4
 800149c:	bd70      	pop	{r4, r5, r6, pc}
 800149e:	2b99      	cmp	r3, #153	@ 0x99
 80014a0:	dc16      	bgt.n	80014d0 <__aeabi_i2f+0x70>
 80014a2:	1f42      	subs	r2, r0, #5
 80014a4:	2805      	cmp	r0, #5
 80014a6:	d000      	beq.n	80014aa <__aeabi_i2f+0x4a>
 80014a8:	4095      	lsls	r5, r2
 80014aa:	002a      	movs	r2, r5
 80014ac:	4811      	ldr	r0, [pc, #68]	@ (80014f4 <__aeabi_i2f+0x94>)
 80014ae:	4002      	ands	r2, r0
 80014b0:	076e      	lsls	r6, r5, #29
 80014b2:	d009      	beq.n	80014c8 <__aeabi_i2f+0x68>
 80014b4:	260f      	movs	r6, #15
 80014b6:	4035      	ands	r5, r6
 80014b8:	2d04      	cmp	r5, #4
 80014ba:	d005      	beq.n	80014c8 <__aeabi_i2f+0x68>
 80014bc:	3204      	adds	r2, #4
 80014be:	0155      	lsls	r5, r2, #5
 80014c0:	d502      	bpl.n	80014c8 <__aeabi_i2f+0x68>
 80014c2:	239f      	movs	r3, #159	@ 0x9f
 80014c4:	4002      	ands	r2, r0
 80014c6:	1a5b      	subs	r3, r3, r1
 80014c8:	0192      	lsls	r2, r2, #6
 80014ca:	0a55      	lsrs	r5, r2, #9
 80014cc:	b2d8      	uxtb	r0, r3
 80014ce:	e7e1      	b.n	8001494 <__aeabi_i2f+0x34>
 80014d0:	2205      	movs	r2, #5
 80014d2:	1a12      	subs	r2, r2, r0
 80014d4:	0028      	movs	r0, r5
 80014d6:	40d0      	lsrs	r0, r2
 80014d8:	0002      	movs	r2, r0
 80014da:	0008      	movs	r0, r1
 80014dc:	301b      	adds	r0, #27
 80014de:	4085      	lsls	r5, r0
 80014e0:	0028      	movs	r0, r5
 80014e2:	1e45      	subs	r5, r0, #1
 80014e4:	41a8      	sbcs	r0, r5
 80014e6:	4302      	orrs	r2, r0
 80014e8:	0015      	movs	r5, r2
 80014ea:	e7de      	b.n	80014aa <__aeabi_i2f+0x4a>
 80014ec:	026d      	lsls	r5, r5, #9
 80014ee:	2096      	movs	r0, #150	@ 0x96
 80014f0:	0a6d      	lsrs	r5, r5, #9
 80014f2:	e7cf      	b.n	8001494 <__aeabi_i2f+0x34>
 80014f4:	fbffffff 	.word	0xfbffffff

080014f8 <__aeabi_ui2f>:
 80014f8:	b570      	push	{r4, r5, r6, lr}
 80014fa:	1e04      	subs	r4, r0, #0
 80014fc:	d00e      	beq.n	800151c <__aeabi_ui2f+0x24>
 80014fe:	f001 ff7d 	bl	80033fc <__clzsi2>
 8001502:	239e      	movs	r3, #158	@ 0x9e
 8001504:	0001      	movs	r1, r0
 8001506:	1a1b      	subs	r3, r3, r0
 8001508:	2b96      	cmp	r3, #150	@ 0x96
 800150a:	dc0c      	bgt.n	8001526 <__aeabi_ui2f+0x2e>
 800150c:	2808      	cmp	r0, #8
 800150e:	d02f      	beq.n	8001570 <__aeabi_ui2f+0x78>
 8001510:	3908      	subs	r1, #8
 8001512:	408c      	lsls	r4, r1
 8001514:	0264      	lsls	r4, r4, #9
 8001516:	0a64      	lsrs	r4, r4, #9
 8001518:	b2d8      	uxtb	r0, r3
 800151a:	e001      	b.n	8001520 <__aeabi_ui2f+0x28>
 800151c:	2000      	movs	r0, #0
 800151e:	2400      	movs	r4, #0
 8001520:	05c0      	lsls	r0, r0, #23
 8001522:	4320      	orrs	r0, r4
 8001524:	bd70      	pop	{r4, r5, r6, pc}
 8001526:	2b99      	cmp	r3, #153	@ 0x99
 8001528:	dc16      	bgt.n	8001558 <__aeabi_ui2f+0x60>
 800152a:	1f42      	subs	r2, r0, #5
 800152c:	2805      	cmp	r0, #5
 800152e:	d000      	beq.n	8001532 <__aeabi_ui2f+0x3a>
 8001530:	4094      	lsls	r4, r2
 8001532:	0022      	movs	r2, r4
 8001534:	4810      	ldr	r0, [pc, #64]	@ (8001578 <__aeabi_ui2f+0x80>)
 8001536:	4002      	ands	r2, r0
 8001538:	0765      	lsls	r5, r4, #29
 800153a:	d009      	beq.n	8001550 <__aeabi_ui2f+0x58>
 800153c:	250f      	movs	r5, #15
 800153e:	402c      	ands	r4, r5
 8001540:	2c04      	cmp	r4, #4
 8001542:	d005      	beq.n	8001550 <__aeabi_ui2f+0x58>
 8001544:	3204      	adds	r2, #4
 8001546:	0154      	lsls	r4, r2, #5
 8001548:	d502      	bpl.n	8001550 <__aeabi_ui2f+0x58>
 800154a:	239f      	movs	r3, #159	@ 0x9f
 800154c:	4002      	ands	r2, r0
 800154e:	1a5b      	subs	r3, r3, r1
 8001550:	0192      	lsls	r2, r2, #6
 8001552:	0a54      	lsrs	r4, r2, #9
 8001554:	b2d8      	uxtb	r0, r3
 8001556:	e7e3      	b.n	8001520 <__aeabi_ui2f+0x28>
 8001558:	0002      	movs	r2, r0
 800155a:	0020      	movs	r0, r4
 800155c:	321b      	adds	r2, #27
 800155e:	4090      	lsls	r0, r2
 8001560:	0002      	movs	r2, r0
 8001562:	1e50      	subs	r0, r2, #1
 8001564:	4182      	sbcs	r2, r0
 8001566:	2005      	movs	r0, #5
 8001568:	1a40      	subs	r0, r0, r1
 800156a:	40c4      	lsrs	r4, r0
 800156c:	4314      	orrs	r4, r2
 800156e:	e7e0      	b.n	8001532 <__aeabi_ui2f+0x3a>
 8001570:	0264      	lsls	r4, r4, #9
 8001572:	2096      	movs	r0, #150	@ 0x96
 8001574:	0a64      	lsrs	r4, r4, #9
 8001576:	e7d3      	b.n	8001520 <__aeabi_ui2f+0x28>
 8001578:	fbffffff 	.word	0xfbffffff

0800157c <__aeabi_dadd>:
 800157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157e:	4657      	mov	r7, sl
 8001580:	464e      	mov	r6, r9
 8001582:	4645      	mov	r5, r8
 8001584:	46de      	mov	lr, fp
 8001586:	b5e0      	push	{r5, r6, r7, lr}
 8001588:	b083      	sub	sp, #12
 800158a:	9000      	str	r0, [sp, #0]
 800158c:	9101      	str	r1, [sp, #4]
 800158e:	030c      	lsls	r4, r1, #12
 8001590:	004f      	lsls	r7, r1, #1
 8001592:	0fce      	lsrs	r6, r1, #31
 8001594:	0a61      	lsrs	r1, r4, #9
 8001596:	9c00      	ldr	r4, [sp, #0]
 8001598:	031d      	lsls	r5, r3, #12
 800159a:	0f64      	lsrs	r4, r4, #29
 800159c:	430c      	orrs	r4, r1
 800159e:	9900      	ldr	r1, [sp, #0]
 80015a0:	9200      	str	r2, [sp, #0]
 80015a2:	9301      	str	r3, [sp, #4]
 80015a4:	00c8      	lsls	r0, r1, #3
 80015a6:	0059      	lsls	r1, r3, #1
 80015a8:	0d4b      	lsrs	r3, r1, #21
 80015aa:	4699      	mov	r9, r3
 80015ac:	9a00      	ldr	r2, [sp, #0]
 80015ae:	9b01      	ldr	r3, [sp, #4]
 80015b0:	0a6d      	lsrs	r5, r5, #9
 80015b2:	0fd9      	lsrs	r1, r3, #31
 80015b4:	0f53      	lsrs	r3, r2, #29
 80015b6:	432b      	orrs	r3, r5
 80015b8:	469a      	mov	sl, r3
 80015ba:	9b00      	ldr	r3, [sp, #0]
 80015bc:	0d7f      	lsrs	r7, r7, #21
 80015be:	00da      	lsls	r2, r3, #3
 80015c0:	4694      	mov	ip, r2
 80015c2:	464a      	mov	r2, r9
 80015c4:	46b0      	mov	r8, r6
 80015c6:	1aba      	subs	r2, r7, r2
 80015c8:	428e      	cmp	r6, r1
 80015ca:	d100      	bne.n	80015ce <__aeabi_dadd+0x52>
 80015cc:	e0b0      	b.n	8001730 <__aeabi_dadd+0x1b4>
 80015ce:	2a00      	cmp	r2, #0
 80015d0:	dc00      	bgt.n	80015d4 <__aeabi_dadd+0x58>
 80015d2:	e078      	b.n	80016c6 <__aeabi_dadd+0x14a>
 80015d4:	4649      	mov	r1, r9
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d100      	bne.n	80015dc <__aeabi_dadd+0x60>
 80015da:	e0e9      	b.n	80017b0 <__aeabi_dadd+0x234>
 80015dc:	49c9      	ldr	r1, [pc, #804]	@ (8001904 <__aeabi_dadd+0x388>)
 80015de:	428f      	cmp	r7, r1
 80015e0:	d100      	bne.n	80015e4 <__aeabi_dadd+0x68>
 80015e2:	e195      	b.n	8001910 <__aeabi_dadd+0x394>
 80015e4:	2501      	movs	r5, #1
 80015e6:	2a38      	cmp	r2, #56	@ 0x38
 80015e8:	dc16      	bgt.n	8001618 <__aeabi_dadd+0x9c>
 80015ea:	2180      	movs	r1, #128	@ 0x80
 80015ec:	4653      	mov	r3, sl
 80015ee:	0409      	lsls	r1, r1, #16
 80015f0:	430b      	orrs	r3, r1
 80015f2:	469a      	mov	sl, r3
 80015f4:	2a1f      	cmp	r2, #31
 80015f6:	dd00      	ble.n	80015fa <__aeabi_dadd+0x7e>
 80015f8:	e1e7      	b.n	80019ca <__aeabi_dadd+0x44e>
 80015fa:	2120      	movs	r1, #32
 80015fc:	4655      	mov	r5, sl
 80015fe:	1a8b      	subs	r3, r1, r2
 8001600:	4661      	mov	r1, ip
 8001602:	409d      	lsls	r5, r3
 8001604:	40d1      	lsrs	r1, r2
 8001606:	430d      	orrs	r5, r1
 8001608:	4661      	mov	r1, ip
 800160a:	4099      	lsls	r1, r3
 800160c:	1e4b      	subs	r3, r1, #1
 800160e:	4199      	sbcs	r1, r3
 8001610:	4653      	mov	r3, sl
 8001612:	40d3      	lsrs	r3, r2
 8001614:	430d      	orrs	r5, r1
 8001616:	1ae4      	subs	r4, r4, r3
 8001618:	1b45      	subs	r5, r0, r5
 800161a:	42a8      	cmp	r0, r5
 800161c:	4180      	sbcs	r0, r0
 800161e:	4240      	negs	r0, r0
 8001620:	1a24      	subs	r4, r4, r0
 8001622:	0223      	lsls	r3, r4, #8
 8001624:	d400      	bmi.n	8001628 <__aeabi_dadd+0xac>
 8001626:	e10f      	b.n	8001848 <__aeabi_dadd+0x2cc>
 8001628:	0264      	lsls	r4, r4, #9
 800162a:	0a64      	lsrs	r4, r4, #9
 800162c:	2c00      	cmp	r4, #0
 800162e:	d100      	bne.n	8001632 <__aeabi_dadd+0xb6>
 8001630:	e139      	b.n	80018a6 <__aeabi_dadd+0x32a>
 8001632:	0020      	movs	r0, r4
 8001634:	f001 fee2 	bl	80033fc <__clzsi2>
 8001638:	0003      	movs	r3, r0
 800163a:	3b08      	subs	r3, #8
 800163c:	2120      	movs	r1, #32
 800163e:	0028      	movs	r0, r5
 8001640:	1aca      	subs	r2, r1, r3
 8001642:	40d0      	lsrs	r0, r2
 8001644:	409c      	lsls	r4, r3
 8001646:	0002      	movs	r2, r0
 8001648:	409d      	lsls	r5, r3
 800164a:	4322      	orrs	r2, r4
 800164c:	429f      	cmp	r7, r3
 800164e:	dd00      	ble.n	8001652 <__aeabi_dadd+0xd6>
 8001650:	e173      	b.n	800193a <__aeabi_dadd+0x3be>
 8001652:	1bd8      	subs	r0, r3, r7
 8001654:	3001      	adds	r0, #1
 8001656:	1a09      	subs	r1, r1, r0
 8001658:	002c      	movs	r4, r5
 800165a:	408d      	lsls	r5, r1
 800165c:	40c4      	lsrs	r4, r0
 800165e:	1e6b      	subs	r3, r5, #1
 8001660:	419d      	sbcs	r5, r3
 8001662:	0013      	movs	r3, r2
 8001664:	40c2      	lsrs	r2, r0
 8001666:	408b      	lsls	r3, r1
 8001668:	4325      	orrs	r5, r4
 800166a:	2700      	movs	r7, #0
 800166c:	0014      	movs	r4, r2
 800166e:	431d      	orrs	r5, r3
 8001670:	076b      	lsls	r3, r5, #29
 8001672:	d009      	beq.n	8001688 <__aeabi_dadd+0x10c>
 8001674:	230f      	movs	r3, #15
 8001676:	402b      	ands	r3, r5
 8001678:	2b04      	cmp	r3, #4
 800167a:	d005      	beq.n	8001688 <__aeabi_dadd+0x10c>
 800167c:	1d2b      	adds	r3, r5, #4
 800167e:	42ab      	cmp	r3, r5
 8001680:	41ad      	sbcs	r5, r5
 8001682:	426d      	negs	r5, r5
 8001684:	1964      	adds	r4, r4, r5
 8001686:	001d      	movs	r5, r3
 8001688:	0223      	lsls	r3, r4, #8
 800168a:	d400      	bmi.n	800168e <__aeabi_dadd+0x112>
 800168c:	e12d      	b.n	80018ea <__aeabi_dadd+0x36e>
 800168e:	4a9d      	ldr	r2, [pc, #628]	@ (8001904 <__aeabi_dadd+0x388>)
 8001690:	3701      	adds	r7, #1
 8001692:	4297      	cmp	r7, r2
 8001694:	d100      	bne.n	8001698 <__aeabi_dadd+0x11c>
 8001696:	e0d3      	b.n	8001840 <__aeabi_dadd+0x2c4>
 8001698:	4646      	mov	r6, r8
 800169a:	499b      	ldr	r1, [pc, #620]	@ (8001908 <__aeabi_dadd+0x38c>)
 800169c:	08ed      	lsrs	r5, r5, #3
 800169e:	4021      	ands	r1, r4
 80016a0:	074a      	lsls	r2, r1, #29
 80016a2:	432a      	orrs	r2, r5
 80016a4:	057c      	lsls	r4, r7, #21
 80016a6:	024d      	lsls	r5, r1, #9
 80016a8:	0b2d      	lsrs	r5, r5, #12
 80016aa:	0d64      	lsrs	r4, r4, #21
 80016ac:	0524      	lsls	r4, r4, #20
 80016ae:	432c      	orrs	r4, r5
 80016b0:	07f6      	lsls	r6, r6, #31
 80016b2:	4334      	orrs	r4, r6
 80016b4:	0010      	movs	r0, r2
 80016b6:	0021      	movs	r1, r4
 80016b8:	b003      	add	sp, #12
 80016ba:	bcf0      	pop	{r4, r5, r6, r7}
 80016bc:	46bb      	mov	fp, r7
 80016be:	46b2      	mov	sl, r6
 80016c0:	46a9      	mov	r9, r5
 80016c2:	46a0      	mov	r8, r4
 80016c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016c6:	2a00      	cmp	r2, #0
 80016c8:	d100      	bne.n	80016cc <__aeabi_dadd+0x150>
 80016ca:	e084      	b.n	80017d6 <__aeabi_dadd+0x25a>
 80016cc:	464a      	mov	r2, r9
 80016ce:	1bd2      	subs	r2, r2, r7
 80016d0:	2f00      	cmp	r7, #0
 80016d2:	d000      	beq.n	80016d6 <__aeabi_dadd+0x15a>
 80016d4:	e16d      	b.n	80019b2 <__aeabi_dadd+0x436>
 80016d6:	0025      	movs	r5, r4
 80016d8:	4305      	orrs	r5, r0
 80016da:	d100      	bne.n	80016de <__aeabi_dadd+0x162>
 80016dc:	e127      	b.n	800192e <__aeabi_dadd+0x3b2>
 80016de:	1e56      	subs	r6, r2, #1
 80016e0:	2a01      	cmp	r2, #1
 80016e2:	d100      	bne.n	80016e6 <__aeabi_dadd+0x16a>
 80016e4:	e23b      	b.n	8001b5e <__aeabi_dadd+0x5e2>
 80016e6:	4d87      	ldr	r5, [pc, #540]	@ (8001904 <__aeabi_dadd+0x388>)
 80016e8:	42aa      	cmp	r2, r5
 80016ea:	d100      	bne.n	80016ee <__aeabi_dadd+0x172>
 80016ec:	e26a      	b.n	8001bc4 <__aeabi_dadd+0x648>
 80016ee:	2501      	movs	r5, #1
 80016f0:	2e38      	cmp	r6, #56	@ 0x38
 80016f2:	dc12      	bgt.n	800171a <__aeabi_dadd+0x19e>
 80016f4:	0032      	movs	r2, r6
 80016f6:	2a1f      	cmp	r2, #31
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dadd+0x180>
 80016fa:	e1f8      	b.n	8001aee <__aeabi_dadd+0x572>
 80016fc:	2620      	movs	r6, #32
 80016fe:	0025      	movs	r5, r4
 8001700:	1ab6      	subs	r6, r6, r2
 8001702:	0007      	movs	r7, r0
 8001704:	4653      	mov	r3, sl
 8001706:	40b0      	lsls	r0, r6
 8001708:	40d4      	lsrs	r4, r2
 800170a:	40b5      	lsls	r5, r6
 800170c:	40d7      	lsrs	r7, r2
 800170e:	1e46      	subs	r6, r0, #1
 8001710:	41b0      	sbcs	r0, r6
 8001712:	1b1b      	subs	r3, r3, r4
 8001714:	469a      	mov	sl, r3
 8001716:	433d      	orrs	r5, r7
 8001718:	4305      	orrs	r5, r0
 800171a:	4662      	mov	r2, ip
 800171c:	1b55      	subs	r5, r2, r5
 800171e:	45ac      	cmp	ip, r5
 8001720:	4192      	sbcs	r2, r2
 8001722:	4653      	mov	r3, sl
 8001724:	4252      	negs	r2, r2
 8001726:	000e      	movs	r6, r1
 8001728:	464f      	mov	r7, r9
 800172a:	4688      	mov	r8, r1
 800172c:	1a9c      	subs	r4, r3, r2
 800172e:	e778      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001730:	2a00      	cmp	r2, #0
 8001732:	dc00      	bgt.n	8001736 <__aeabi_dadd+0x1ba>
 8001734:	e08e      	b.n	8001854 <__aeabi_dadd+0x2d8>
 8001736:	4649      	mov	r1, r9
 8001738:	2900      	cmp	r1, #0
 800173a:	d175      	bne.n	8001828 <__aeabi_dadd+0x2ac>
 800173c:	4661      	mov	r1, ip
 800173e:	4653      	mov	r3, sl
 8001740:	4319      	orrs	r1, r3
 8001742:	d100      	bne.n	8001746 <__aeabi_dadd+0x1ca>
 8001744:	e0f6      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001746:	1e51      	subs	r1, r2, #1
 8001748:	2a01      	cmp	r2, #1
 800174a:	d100      	bne.n	800174e <__aeabi_dadd+0x1d2>
 800174c:	e191      	b.n	8001a72 <__aeabi_dadd+0x4f6>
 800174e:	4d6d      	ldr	r5, [pc, #436]	@ (8001904 <__aeabi_dadd+0x388>)
 8001750:	42aa      	cmp	r2, r5
 8001752:	d100      	bne.n	8001756 <__aeabi_dadd+0x1da>
 8001754:	e0dc      	b.n	8001910 <__aeabi_dadd+0x394>
 8001756:	2501      	movs	r5, #1
 8001758:	2938      	cmp	r1, #56	@ 0x38
 800175a:	dc14      	bgt.n	8001786 <__aeabi_dadd+0x20a>
 800175c:	000a      	movs	r2, r1
 800175e:	2a1f      	cmp	r2, #31
 8001760:	dd00      	ble.n	8001764 <__aeabi_dadd+0x1e8>
 8001762:	e1a2      	b.n	8001aaa <__aeabi_dadd+0x52e>
 8001764:	2120      	movs	r1, #32
 8001766:	4653      	mov	r3, sl
 8001768:	1a89      	subs	r1, r1, r2
 800176a:	408b      	lsls	r3, r1
 800176c:	001d      	movs	r5, r3
 800176e:	4663      	mov	r3, ip
 8001770:	40d3      	lsrs	r3, r2
 8001772:	431d      	orrs	r5, r3
 8001774:	4663      	mov	r3, ip
 8001776:	408b      	lsls	r3, r1
 8001778:	0019      	movs	r1, r3
 800177a:	1e4b      	subs	r3, r1, #1
 800177c:	4199      	sbcs	r1, r3
 800177e:	4653      	mov	r3, sl
 8001780:	40d3      	lsrs	r3, r2
 8001782:	430d      	orrs	r5, r1
 8001784:	18e4      	adds	r4, r4, r3
 8001786:	182d      	adds	r5, r5, r0
 8001788:	4285      	cmp	r5, r0
 800178a:	4180      	sbcs	r0, r0
 800178c:	4240      	negs	r0, r0
 800178e:	1824      	adds	r4, r4, r0
 8001790:	0223      	lsls	r3, r4, #8
 8001792:	d559      	bpl.n	8001848 <__aeabi_dadd+0x2cc>
 8001794:	4b5b      	ldr	r3, [pc, #364]	@ (8001904 <__aeabi_dadd+0x388>)
 8001796:	3701      	adds	r7, #1
 8001798:	429f      	cmp	r7, r3
 800179a:	d051      	beq.n	8001840 <__aeabi_dadd+0x2c4>
 800179c:	2101      	movs	r1, #1
 800179e:	4b5a      	ldr	r3, [pc, #360]	@ (8001908 <__aeabi_dadd+0x38c>)
 80017a0:	086a      	lsrs	r2, r5, #1
 80017a2:	401c      	ands	r4, r3
 80017a4:	4029      	ands	r1, r5
 80017a6:	430a      	orrs	r2, r1
 80017a8:	07e5      	lsls	r5, r4, #31
 80017aa:	4315      	orrs	r5, r2
 80017ac:	0864      	lsrs	r4, r4, #1
 80017ae:	e75f      	b.n	8001670 <__aeabi_dadd+0xf4>
 80017b0:	4661      	mov	r1, ip
 80017b2:	4653      	mov	r3, sl
 80017b4:	4319      	orrs	r1, r3
 80017b6:	d100      	bne.n	80017ba <__aeabi_dadd+0x23e>
 80017b8:	e0bc      	b.n	8001934 <__aeabi_dadd+0x3b8>
 80017ba:	1e51      	subs	r1, r2, #1
 80017bc:	2a01      	cmp	r2, #1
 80017be:	d100      	bne.n	80017c2 <__aeabi_dadd+0x246>
 80017c0:	e164      	b.n	8001a8c <__aeabi_dadd+0x510>
 80017c2:	4d50      	ldr	r5, [pc, #320]	@ (8001904 <__aeabi_dadd+0x388>)
 80017c4:	42aa      	cmp	r2, r5
 80017c6:	d100      	bne.n	80017ca <__aeabi_dadd+0x24e>
 80017c8:	e16a      	b.n	8001aa0 <__aeabi_dadd+0x524>
 80017ca:	2501      	movs	r5, #1
 80017cc:	2938      	cmp	r1, #56	@ 0x38
 80017ce:	dd00      	ble.n	80017d2 <__aeabi_dadd+0x256>
 80017d0:	e722      	b.n	8001618 <__aeabi_dadd+0x9c>
 80017d2:	000a      	movs	r2, r1
 80017d4:	e70e      	b.n	80015f4 <__aeabi_dadd+0x78>
 80017d6:	4a4d      	ldr	r2, [pc, #308]	@ (800190c <__aeabi_dadd+0x390>)
 80017d8:	1c7d      	adds	r5, r7, #1
 80017da:	4215      	tst	r5, r2
 80017dc:	d000      	beq.n	80017e0 <__aeabi_dadd+0x264>
 80017de:	e0d0      	b.n	8001982 <__aeabi_dadd+0x406>
 80017e0:	0025      	movs	r5, r4
 80017e2:	4662      	mov	r2, ip
 80017e4:	4653      	mov	r3, sl
 80017e6:	4305      	orrs	r5, r0
 80017e8:	431a      	orrs	r2, r3
 80017ea:	2f00      	cmp	r7, #0
 80017ec:	d000      	beq.n	80017f0 <__aeabi_dadd+0x274>
 80017ee:	e137      	b.n	8001a60 <__aeabi_dadd+0x4e4>
 80017f0:	2d00      	cmp	r5, #0
 80017f2:	d100      	bne.n	80017f6 <__aeabi_dadd+0x27a>
 80017f4:	e1a8      	b.n	8001b48 <__aeabi_dadd+0x5cc>
 80017f6:	2a00      	cmp	r2, #0
 80017f8:	d100      	bne.n	80017fc <__aeabi_dadd+0x280>
 80017fa:	e16a      	b.n	8001ad2 <__aeabi_dadd+0x556>
 80017fc:	4663      	mov	r3, ip
 80017fe:	1ac5      	subs	r5, r0, r3
 8001800:	4653      	mov	r3, sl
 8001802:	1ae2      	subs	r2, r4, r3
 8001804:	42a8      	cmp	r0, r5
 8001806:	419b      	sbcs	r3, r3
 8001808:	425b      	negs	r3, r3
 800180a:	1ad3      	subs	r3, r2, r3
 800180c:	021a      	lsls	r2, r3, #8
 800180e:	d400      	bmi.n	8001812 <__aeabi_dadd+0x296>
 8001810:	e203      	b.n	8001c1a <__aeabi_dadd+0x69e>
 8001812:	4663      	mov	r3, ip
 8001814:	1a1d      	subs	r5, r3, r0
 8001816:	45ac      	cmp	ip, r5
 8001818:	4192      	sbcs	r2, r2
 800181a:	4653      	mov	r3, sl
 800181c:	4252      	negs	r2, r2
 800181e:	1b1c      	subs	r4, r3, r4
 8001820:	000e      	movs	r6, r1
 8001822:	4688      	mov	r8, r1
 8001824:	1aa4      	subs	r4, r4, r2
 8001826:	e723      	b.n	8001670 <__aeabi_dadd+0xf4>
 8001828:	4936      	ldr	r1, [pc, #216]	@ (8001904 <__aeabi_dadd+0x388>)
 800182a:	428f      	cmp	r7, r1
 800182c:	d070      	beq.n	8001910 <__aeabi_dadd+0x394>
 800182e:	2501      	movs	r5, #1
 8001830:	2a38      	cmp	r2, #56	@ 0x38
 8001832:	dca8      	bgt.n	8001786 <__aeabi_dadd+0x20a>
 8001834:	2180      	movs	r1, #128	@ 0x80
 8001836:	4653      	mov	r3, sl
 8001838:	0409      	lsls	r1, r1, #16
 800183a:	430b      	orrs	r3, r1
 800183c:	469a      	mov	sl, r3
 800183e:	e78e      	b.n	800175e <__aeabi_dadd+0x1e2>
 8001840:	003c      	movs	r4, r7
 8001842:	2500      	movs	r5, #0
 8001844:	2200      	movs	r2, #0
 8001846:	e731      	b.n	80016ac <__aeabi_dadd+0x130>
 8001848:	2307      	movs	r3, #7
 800184a:	402b      	ands	r3, r5
 800184c:	2b00      	cmp	r3, #0
 800184e:	d000      	beq.n	8001852 <__aeabi_dadd+0x2d6>
 8001850:	e710      	b.n	8001674 <__aeabi_dadd+0xf8>
 8001852:	e093      	b.n	800197c <__aeabi_dadd+0x400>
 8001854:	2a00      	cmp	r2, #0
 8001856:	d074      	beq.n	8001942 <__aeabi_dadd+0x3c6>
 8001858:	464a      	mov	r2, r9
 800185a:	1bd2      	subs	r2, r2, r7
 800185c:	2f00      	cmp	r7, #0
 800185e:	d100      	bne.n	8001862 <__aeabi_dadd+0x2e6>
 8001860:	e0c7      	b.n	80019f2 <__aeabi_dadd+0x476>
 8001862:	4928      	ldr	r1, [pc, #160]	@ (8001904 <__aeabi_dadd+0x388>)
 8001864:	4589      	cmp	r9, r1
 8001866:	d100      	bne.n	800186a <__aeabi_dadd+0x2ee>
 8001868:	e185      	b.n	8001b76 <__aeabi_dadd+0x5fa>
 800186a:	2501      	movs	r5, #1
 800186c:	2a38      	cmp	r2, #56	@ 0x38
 800186e:	dc12      	bgt.n	8001896 <__aeabi_dadd+0x31a>
 8001870:	2180      	movs	r1, #128	@ 0x80
 8001872:	0409      	lsls	r1, r1, #16
 8001874:	430c      	orrs	r4, r1
 8001876:	2a1f      	cmp	r2, #31
 8001878:	dd00      	ble.n	800187c <__aeabi_dadd+0x300>
 800187a:	e1ab      	b.n	8001bd4 <__aeabi_dadd+0x658>
 800187c:	2120      	movs	r1, #32
 800187e:	0025      	movs	r5, r4
 8001880:	1a89      	subs	r1, r1, r2
 8001882:	0007      	movs	r7, r0
 8001884:	4088      	lsls	r0, r1
 8001886:	408d      	lsls	r5, r1
 8001888:	40d7      	lsrs	r7, r2
 800188a:	1e41      	subs	r1, r0, #1
 800188c:	4188      	sbcs	r0, r1
 800188e:	40d4      	lsrs	r4, r2
 8001890:	433d      	orrs	r5, r7
 8001892:	4305      	orrs	r5, r0
 8001894:	44a2      	add	sl, r4
 8001896:	4465      	add	r5, ip
 8001898:	4565      	cmp	r5, ip
 800189a:	4192      	sbcs	r2, r2
 800189c:	4252      	negs	r2, r2
 800189e:	4452      	add	r2, sl
 80018a0:	0014      	movs	r4, r2
 80018a2:	464f      	mov	r7, r9
 80018a4:	e774      	b.n	8001790 <__aeabi_dadd+0x214>
 80018a6:	0028      	movs	r0, r5
 80018a8:	f001 fda8 	bl	80033fc <__clzsi2>
 80018ac:	0003      	movs	r3, r0
 80018ae:	3318      	adds	r3, #24
 80018b0:	2b1f      	cmp	r3, #31
 80018b2:	dc00      	bgt.n	80018b6 <__aeabi_dadd+0x33a>
 80018b4:	e6c2      	b.n	800163c <__aeabi_dadd+0xc0>
 80018b6:	002a      	movs	r2, r5
 80018b8:	3808      	subs	r0, #8
 80018ba:	4082      	lsls	r2, r0
 80018bc:	429f      	cmp	r7, r3
 80018be:	dd00      	ble.n	80018c2 <__aeabi_dadd+0x346>
 80018c0:	e0a9      	b.n	8001a16 <__aeabi_dadd+0x49a>
 80018c2:	1bdb      	subs	r3, r3, r7
 80018c4:	1c58      	adds	r0, r3, #1
 80018c6:	281f      	cmp	r0, #31
 80018c8:	dc00      	bgt.n	80018cc <__aeabi_dadd+0x350>
 80018ca:	e1ac      	b.n	8001c26 <__aeabi_dadd+0x6aa>
 80018cc:	0015      	movs	r5, r2
 80018ce:	3b1f      	subs	r3, #31
 80018d0:	40dd      	lsrs	r5, r3
 80018d2:	2820      	cmp	r0, #32
 80018d4:	d005      	beq.n	80018e2 <__aeabi_dadd+0x366>
 80018d6:	2340      	movs	r3, #64	@ 0x40
 80018d8:	1a1b      	subs	r3, r3, r0
 80018da:	409a      	lsls	r2, r3
 80018dc:	1e53      	subs	r3, r2, #1
 80018de:	419a      	sbcs	r2, r3
 80018e0:	4315      	orrs	r5, r2
 80018e2:	2307      	movs	r3, #7
 80018e4:	2700      	movs	r7, #0
 80018e6:	402b      	ands	r3, r5
 80018e8:	e7b0      	b.n	800184c <__aeabi_dadd+0x2d0>
 80018ea:	08ed      	lsrs	r5, r5, #3
 80018ec:	4b05      	ldr	r3, [pc, #20]	@ (8001904 <__aeabi_dadd+0x388>)
 80018ee:	0762      	lsls	r2, r4, #29
 80018f0:	432a      	orrs	r2, r5
 80018f2:	08e4      	lsrs	r4, r4, #3
 80018f4:	429f      	cmp	r7, r3
 80018f6:	d00f      	beq.n	8001918 <__aeabi_dadd+0x39c>
 80018f8:	0324      	lsls	r4, r4, #12
 80018fa:	0b25      	lsrs	r5, r4, #12
 80018fc:	057c      	lsls	r4, r7, #21
 80018fe:	0d64      	lsrs	r4, r4, #21
 8001900:	e6d4      	b.n	80016ac <__aeabi_dadd+0x130>
 8001902:	46c0      	nop			@ (mov r8, r8)
 8001904:	000007ff 	.word	0x000007ff
 8001908:	ff7fffff 	.word	0xff7fffff
 800190c:	000007fe 	.word	0x000007fe
 8001910:	08c0      	lsrs	r0, r0, #3
 8001912:	0762      	lsls	r2, r4, #29
 8001914:	4302      	orrs	r2, r0
 8001916:	08e4      	lsrs	r4, r4, #3
 8001918:	0013      	movs	r3, r2
 800191a:	4323      	orrs	r3, r4
 800191c:	d100      	bne.n	8001920 <__aeabi_dadd+0x3a4>
 800191e:	e186      	b.n	8001c2e <__aeabi_dadd+0x6b2>
 8001920:	2580      	movs	r5, #128	@ 0x80
 8001922:	032d      	lsls	r5, r5, #12
 8001924:	4325      	orrs	r5, r4
 8001926:	032d      	lsls	r5, r5, #12
 8001928:	4cc3      	ldr	r4, [pc, #780]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 800192a:	0b2d      	lsrs	r5, r5, #12
 800192c:	e6be      	b.n	80016ac <__aeabi_dadd+0x130>
 800192e:	4660      	mov	r0, ip
 8001930:	4654      	mov	r4, sl
 8001932:	000e      	movs	r6, r1
 8001934:	0017      	movs	r7, r2
 8001936:	08c5      	lsrs	r5, r0, #3
 8001938:	e7d8      	b.n	80018ec <__aeabi_dadd+0x370>
 800193a:	4cc0      	ldr	r4, [pc, #768]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 800193c:	1aff      	subs	r7, r7, r3
 800193e:	4014      	ands	r4, r2
 8001940:	e696      	b.n	8001670 <__aeabi_dadd+0xf4>
 8001942:	4abf      	ldr	r2, [pc, #764]	@ (8001c40 <__aeabi_dadd+0x6c4>)
 8001944:	1c79      	adds	r1, r7, #1
 8001946:	4211      	tst	r1, r2
 8001948:	d16b      	bne.n	8001a22 <__aeabi_dadd+0x4a6>
 800194a:	0022      	movs	r2, r4
 800194c:	4302      	orrs	r2, r0
 800194e:	2f00      	cmp	r7, #0
 8001950:	d000      	beq.n	8001954 <__aeabi_dadd+0x3d8>
 8001952:	e0db      	b.n	8001b0c <__aeabi_dadd+0x590>
 8001954:	2a00      	cmp	r2, #0
 8001956:	d100      	bne.n	800195a <__aeabi_dadd+0x3de>
 8001958:	e12d      	b.n	8001bb6 <__aeabi_dadd+0x63a>
 800195a:	4662      	mov	r2, ip
 800195c:	4653      	mov	r3, sl
 800195e:	431a      	orrs	r2, r3
 8001960:	d100      	bne.n	8001964 <__aeabi_dadd+0x3e8>
 8001962:	e0b6      	b.n	8001ad2 <__aeabi_dadd+0x556>
 8001964:	4663      	mov	r3, ip
 8001966:	18c5      	adds	r5, r0, r3
 8001968:	4285      	cmp	r5, r0
 800196a:	4180      	sbcs	r0, r0
 800196c:	4454      	add	r4, sl
 800196e:	4240      	negs	r0, r0
 8001970:	1824      	adds	r4, r4, r0
 8001972:	0223      	lsls	r3, r4, #8
 8001974:	d502      	bpl.n	800197c <__aeabi_dadd+0x400>
 8001976:	000f      	movs	r7, r1
 8001978:	4bb0      	ldr	r3, [pc, #704]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 800197a:	401c      	ands	r4, r3
 800197c:	003a      	movs	r2, r7
 800197e:	0028      	movs	r0, r5
 8001980:	e7d8      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001982:	4662      	mov	r2, ip
 8001984:	1a85      	subs	r5, r0, r2
 8001986:	42a8      	cmp	r0, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	4691      	mov	r9, r2
 8001990:	1ae3      	subs	r3, r4, r3
 8001992:	001a      	movs	r2, r3
 8001994:	464b      	mov	r3, r9
 8001996:	1ad2      	subs	r2, r2, r3
 8001998:	0013      	movs	r3, r2
 800199a:	4691      	mov	r9, r2
 800199c:	021a      	lsls	r2, r3, #8
 800199e:	d454      	bmi.n	8001a4a <__aeabi_dadd+0x4ce>
 80019a0:	464a      	mov	r2, r9
 80019a2:	464c      	mov	r4, r9
 80019a4:	432a      	orrs	r2, r5
 80019a6:	d000      	beq.n	80019aa <__aeabi_dadd+0x42e>
 80019a8:	e640      	b.n	800162c <__aeabi_dadd+0xb0>
 80019aa:	2600      	movs	r6, #0
 80019ac:	2400      	movs	r4, #0
 80019ae:	2500      	movs	r5, #0
 80019b0:	e67c      	b.n	80016ac <__aeabi_dadd+0x130>
 80019b2:	4da1      	ldr	r5, [pc, #644]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 80019b4:	45a9      	cmp	r9, r5
 80019b6:	d100      	bne.n	80019ba <__aeabi_dadd+0x43e>
 80019b8:	e090      	b.n	8001adc <__aeabi_dadd+0x560>
 80019ba:	2501      	movs	r5, #1
 80019bc:	2a38      	cmp	r2, #56	@ 0x38
 80019be:	dd00      	ble.n	80019c2 <__aeabi_dadd+0x446>
 80019c0:	e6ab      	b.n	800171a <__aeabi_dadd+0x19e>
 80019c2:	2580      	movs	r5, #128	@ 0x80
 80019c4:	042d      	lsls	r5, r5, #16
 80019c6:	432c      	orrs	r4, r5
 80019c8:	e695      	b.n	80016f6 <__aeabi_dadd+0x17a>
 80019ca:	0011      	movs	r1, r2
 80019cc:	4655      	mov	r5, sl
 80019ce:	3920      	subs	r1, #32
 80019d0:	40cd      	lsrs	r5, r1
 80019d2:	46a9      	mov	r9, r5
 80019d4:	2a20      	cmp	r2, #32
 80019d6:	d006      	beq.n	80019e6 <__aeabi_dadd+0x46a>
 80019d8:	2140      	movs	r1, #64	@ 0x40
 80019da:	4653      	mov	r3, sl
 80019dc:	1a8a      	subs	r2, r1, r2
 80019de:	4093      	lsls	r3, r2
 80019e0:	4662      	mov	r2, ip
 80019e2:	431a      	orrs	r2, r3
 80019e4:	4694      	mov	ip, r2
 80019e6:	4665      	mov	r5, ip
 80019e8:	1e6b      	subs	r3, r5, #1
 80019ea:	419d      	sbcs	r5, r3
 80019ec:	464b      	mov	r3, r9
 80019ee:	431d      	orrs	r5, r3
 80019f0:	e612      	b.n	8001618 <__aeabi_dadd+0x9c>
 80019f2:	0021      	movs	r1, r4
 80019f4:	4301      	orrs	r1, r0
 80019f6:	d100      	bne.n	80019fa <__aeabi_dadd+0x47e>
 80019f8:	e0c4      	b.n	8001b84 <__aeabi_dadd+0x608>
 80019fa:	1e51      	subs	r1, r2, #1
 80019fc:	2a01      	cmp	r2, #1
 80019fe:	d100      	bne.n	8001a02 <__aeabi_dadd+0x486>
 8001a00:	e0fb      	b.n	8001bfa <__aeabi_dadd+0x67e>
 8001a02:	4d8d      	ldr	r5, [pc, #564]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001a04:	42aa      	cmp	r2, r5
 8001a06:	d100      	bne.n	8001a0a <__aeabi_dadd+0x48e>
 8001a08:	e0b5      	b.n	8001b76 <__aeabi_dadd+0x5fa>
 8001a0a:	2501      	movs	r5, #1
 8001a0c:	2938      	cmp	r1, #56	@ 0x38
 8001a0e:	dd00      	ble.n	8001a12 <__aeabi_dadd+0x496>
 8001a10:	e741      	b.n	8001896 <__aeabi_dadd+0x31a>
 8001a12:	000a      	movs	r2, r1
 8001a14:	e72f      	b.n	8001876 <__aeabi_dadd+0x2fa>
 8001a16:	4c89      	ldr	r4, [pc, #548]	@ (8001c3c <__aeabi_dadd+0x6c0>)
 8001a18:	1aff      	subs	r7, r7, r3
 8001a1a:	4014      	ands	r4, r2
 8001a1c:	0762      	lsls	r2, r4, #29
 8001a1e:	08e4      	lsrs	r4, r4, #3
 8001a20:	e76a      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001a22:	4a85      	ldr	r2, [pc, #532]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001a24:	4291      	cmp	r1, r2
 8001a26:	d100      	bne.n	8001a2a <__aeabi_dadd+0x4ae>
 8001a28:	e0e3      	b.n	8001bf2 <__aeabi_dadd+0x676>
 8001a2a:	4663      	mov	r3, ip
 8001a2c:	18c2      	adds	r2, r0, r3
 8001a2e:	4282      	cmp	r2, r0
 8001a30:	4180      	sbcs	r0, r0
 8001a32:	0023      	movs	r3, r4
 8001a34:	4240      	negs	r0, r0
 8001a36:	4453      	add	r3, sl
 8001a38:	181b      	adds	r3, r3, r0
 8001a3a:	07dd      	lsls	r5, r3, #31
 8001a3c:	085c      	lsrs	r4, r3, #1
 8001a3e:	2307      	movs	r3, #7
 8001a40:	0852      	lsrs	r2, r2, #1
 8001a42:	4315      	orrs	r5, r2
 8001a44:	000f      	movs	r7, r1
 8001a46:	402b      	ands	r3, r5
 8001a48:	e700      	b.n	800184c <__aeabi_dadd+0x2d0>
 8001a4a:	4663      	mov	r3, ip
 8001a4c:	1a1d      	subs	r5, r3, r0
 8001a4e:	45ac      	cmp	ip, r5
 8001a50:	4192      	sbcs	r2, r2
 8001a52:	4653      	mov	r3, sl
 8001a54:	4252      	negs	r2, r2
 8001a56:	1b1c      	subs	r4, r3, r4
 8001a58:	000e      	movs	r6, r1
 8001a5a:	4688      	mov	r8, r1
 8001a5c:	1aa4      	subs	r4, r4, r2
 8001a5e:	e5e5      	b.n	800162c <__aeabi_dadd+0xb0>
 8001a60:	2d00      	cmp	r5, #0
 8001a62:	d000      	beq.n	8001a66 <__aeabi_dadd+0x4ea>
 8001a64:	e091      	b.n	8001b8a <__aeabi_dadd+0x60e>
 8001a66:	2a00      	cmp	r2, #0
 8001a68:	d138      	bne.n	8001adc <__aeabi_dadd+0x560>
 8001a6a:	2480      	movs	r4, #128	@ 0x80
 8001a6c:	2600      	movs	r6, #0
 8001a6e:	0324      	lsls	r4, r4, #12
 8001a70:	e756      	b.n	8001920 <__aeabi_dadd+0x3a4>
 8001a72:	4663      	mov	r3, ip
 8001a74:	18c5      	adds	r5, r0, r3
 8001a76:	4285      	cmp	r5, r0
 8001a78:	4180      	sbcs	r0, r0
 8001a7a:	4454      	add	r4, sl
 8001a7c:	4240      	negs	r0, r0
 8001a7e:	1824      	adds	r4, r4, r0
 8001a80:	2701      	movs	r7, #1
 8001a82:	0223      	lsls	r3, r4, #8
 8001a84:	d400      	bmi.n	8001a88 <__aeabi_dadd+0x50c>
 8001a86:	e6df      	b.n	8001848 <__aeabi_dadd+0x2cc>
 8001a88:	2702      	movs	r7, #2
 8001a8a:	e687      	b.n	800179c <__aeabi_dadd+0x220>
 8001a8c:	4663      	mov	r3, ip
 8001a8e:	1ac5      	subs	r5, r0, r3
 8001a90:	42a8      	cmp	r0, r5
 8001a92:	4180      	sbcs	r0, r0
 8001a94:	4653      	mov	r3, sl
 8001a96:	4240      	negs	r0, r0
 8001a98:	1ae4      	subs	r4, r4, r3
 8001a9a:	2701      	movs	r7, #1
 8001a9c:	1a24      	subs	r4, r4, r0
 8001a9e:	e5c0      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001aa0:	0762      	lsls	r2, r4, #29
 8001aa2:	08c0      	lsrs	r0, r0, #3
 8001aa4:	4302      	orrs	r2, r0
 8001aa6:	08e4      	lsrs	r4, r4, #3
 8001aa8:	e736      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001aaa:	0011      	movs	r1, r2
 8001aac:	4653      	mov	r3, sl
 8001aae:	3920      	subs	r1, #32
 8001ab0:	40cb      	lsrs	r3, r1
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	2a20      	cmp	r2, #32
 8001ab6:	d006      	beq.n	8001ac6 <__aeabi_dadd+0x54a>
 8001ab8:	2140      	movs	r1, #64	@ 0x40
 8001aba:	4653      	mov	r3, sl
 8001abc:	1a8a      	subs	r2, r1, r2
 8001abe:	4093      	lsls	r3, r2
 8001ac0:	4662      	mov	r2, ip
 8001ac2:	431a      	orrs	r2, r3
 8001ac4:	4694      	mov	ip, r2
 8001ac6:	4665      	mov	r5, ip
 8001ac8:	1e6b      	subs	r3, r5, #1
 8001aca:	419d      	sbcs	r5, r3
 8001acc:	464b      	mov	r3, r9
 8001ace:	431d      	orrs	r5, r3
 8001ad0:	e659      	b.n	8001786 <__aeabi_dadd+0x20a>
 8001ad2:	0762      	lsls	r2, r4, #29
 8001ad4:	08c0      	lsrs	r0, r0, #3
 8001ad6:	4302      	orrs	r2, r0
 8001ad8:	08e4      	lsrs	r4, r4, #3
 8001ada:	e70d      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001adc:	4653      	mov	r3, sl
 8001ade:	075a      	lsls	r2, r3, #29
 8001ae0:	4663      	mov	r3, ip
 8001ae2:	08d8      	lsrs	r0, r3, #3
 8001ae4:	4653      	mov	r3, sl
 8001ae6:	000e      	movs	r6, r1
 8001ae8:	4302      	orrs	r2, r0
 8001aea:	08dc      	lsrs	r4, r3, #3
 8001aec:	e714      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001aee:	0015      	movs	r5, r2
 8001af0:	0026      	movs	r6, r4
 8001af2:	3d20      	subs	r5, #32
 8001af4:	40ee      	lsrs	r6, r5
 8001af6:	2a20      	cmp	r2, #32
 8001af8:	d003      	beq.n	8001b02 <__aeabi_dadd+0x586>
 8001afa:	2540      	movs	r5, #64	@ 0x40
 8001afc:	1aaa      	subs	r2, r5, r2
 8001afe:	4094      	lsls	r4, r2
 8001b00:	4320      	orrs	r0, r4
 8001b02:	1e42      	subs	r2, r0, #1
 8001b04:	4190      	sbcs	r0, r2
 8001b06:	0005      	movs	r5, r0
 8001b08:	4335      	orrs	r5, r6
 8001b0a:	e606      	b.n	800171a <__aeabi_dadd+0x19e>
 8001b0c:	2a00      	cmp	r2, #0
 8001b0e:	d07c      	beq.n	8001c0a <__aeabi_dadd+0x68e>
 8001b10:	4662      	mov	r2, ip
 8001b12:	4653      	mov	r3, sl
 8001b14:	08c0      	lsrs	r0, r0, #3
 8001b16:	431a      	orrs	r2, r3
 8001b18:	d100      	bne.n	8001b1c <__aeabi_dadd+0x5a0>
 8001b1a:	e6fa      	b.n	8001912 <__aeabi_dadd+0x396>
 8001b1c:	0762      	lsls	r2, r4, #29
 8001b1e:	4310      	orrs	r0, r2
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	08e4      	lsrs	r4, r4, #3
 8001b24:	0312      	lsls	r2, r2, #12
 8001b26:	4214      	tst	r4, r2
 8001b28:	d008      	beq.n	8001b3c <__aeabi_dadd+0x5c0>
 8001b2a:	08d9      	lsrs	r1, r3, #3
 8001b2c:	4211      	tst	r1, r2
 8001b2e:	d105      	bne.n	8001b3c <__aeabi_dadd+0x5c0>
 8001b30:	4663      	mov	r3, ip
 8001b32:	08d8      	lsrs	r0, r3, #3
 8001b34:	4653      	mov	r3, sl
 8001b36:	000c      	movs	r4, r1
 8001b38:	075b      	lsls	r3, r3, #29
 8001b3a:	4318      	orrs	r0, r3
 8001b3c:	0f42      	lsrs	r2, r0, #29
 8001b3e:	00c0      	lsls	r0, r0, #3
 8001b40:	08c0      	lsrs	r0, r0, #3
 8001b42:	0752      	lsls	r2, r2, #29
 8001b44:	4302      	orrs	r2, r0
 8001b46:	e6e7      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001b48:	2a00      	cmp	r2, #0
 8001b4a:	d100      	bne.n	8001b4e <__aeabi_dadd+0x5d2>
 8001b4c:	e72d      	b.n	80019aa <__aeabi_dadd+0x42e>
 8001b4e:	4663      	mov	r3, ip
 8001b50:	08d8      	lsrs	r0, r3, #3
 8001b52:	4653      	mov	r3, sl
 8001b54:	075a      	lsls	r2, r3, #29
 8001b56:	000e      	movs	r6, r1
 8001b58:	4302      	orrs	r2, r0
 8001b5a:	08dc      	lsrs	r4, r3, #3
 8001b5c:	e6cc      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001b5e:	4663      	mov	r3, ip
 8001b60:	1a1d      	subs	r5, r3, r0
 8001b62:	45ac      	cmp	ip, r5
 8001b64:	4192      	sbcs	r2, r2
 8001b66:	4653      	mov	r3, sl
 8001b68:	4252      	negs	r2, r2
 8001b6a:	1b1c      	subs	r4, r3, r4
 8001b6c:	000e      	movs	r6, r1
 8001b6e:	4688      	mov	r8, r1
 8001b70:	1aa4      	subs	r4, r4, r2
 8001b72:	3701      	adds	r7, #1
 8001b74:	e555      	b.n	8001622 <__aeabi_dadd+0xa6>
 8001b76:	4663      	mov	r3, ip
 8001b78:	08d9      	lsrs	r1, r3, #3
 8001b7a:	4653      	mov	r3, sl
 8001b7c:	075a      	lsls	r2, r3, #29
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	08dc      	lsrs	r4, r3, #3
 8001b82:	e6c9      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001b84:	4660      	mov	r0, ip
 8001b86:	4654      	mov	r4, sl
 8001b88:	e6d4      	b.n	8001934 <__aeabi_dadd+0x3b8>
 8001b8a:	08c0      	lsrs	r0, r0, #3
 8001b8c:	2a00      	cmp	r2, #0
 8001b8e:	d100      	bne.n	8001b92 <__aeabi_dadd+0x616>
 8001b90:	e6bf      	b.n	8001912 <__aeabi_dadd+0x396>
 8001b92:	0762      	lsls	r2, r4, #29
 8001b94:	4310      	orrs	r0, r2
 8001b96:	2280      	movs	r2, #128	@ 0x80
 8001b98:	08e4      	lsrs	r4, r4, #3
 8001b9a:	0312      	lsls	r2, r2, #12
 8001b9c:	4214      	tst	r4, r2
 8001b9e:	d0cd      	beq.n	8001b3c <__aeabi_dadd+0x5c0>
 8001ba0:	08dd      	lsrs	r5, r3, #3
 8001ba2:	4215      	tst	r5, r2
 8001ba4:	d1ca      	bne.n	8001b3c <__aeabi_dadd+0x5c0>
 8001ba6:	4663      	mov	r3, ip
 8001ba8:	08d8      	lsrs	r0, r3, #3
 8001baa:	4653      	mov	r3, sl
 8001bac:	075b      	lsls	r3, r3, #29
 8001bae:	000e      	movs	r6, r1
 8001bb0:	002c      	movs	r4, r5
 8001bb2:	4318      	orrs	r0, r3
 8001bb4:	e7c2      	b.n	8001b3c <__aeabi_dadd+0x5c0>
 8001bb6:	4663      	mov	r3, ip
 8001bb8:	08d9      	lsrs	r1, r3, #3
 8001bba:	4653      	mov	r3, sl
 8001bbc:	075a      	lsls	r2, r3, #29
 8001bbe:	430a      	orrs	r2, r1
 8001bc0:	08dc      	lsrs	r4, r3, #3
 8001bc2:	e699      	b.n	80018f8 <__aeabi_dadd+0x37c>
 8001bc4:	4663      	mov	r3, ip
 8001bc6:	08d8      	lsrs	r0, r3, #3
 8001bc8:	4653      	mov	r3, sl
 8001bca:	075a      	lsls	r2, r3, #29
 8001bcc:	000e      	movs	r6, r1
 8001bce:	4302      	orrs	r2, r0
 8001bd0:	08dc      	lsrs	r4, r3, #3
 8001bd2:	e6a1      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001bd4:	0011      	movs	r1, r2
 8001bd6:	0027      	movs	r7, r4
 8001bd8:	3920      	subs	r1, #32
 8001bda:	40cf      	lsrs	r7, r1
 8001bdc:	2a20      	cmp	r2, #32
 8001bde:	d003      	beq.n	8001be8 <__aeabi_dadd+0x66c>
 8001be0:	2140      	movs	r1, #64	@ 0x40
 8001be2:	1a8a      	subs	r2, r1, r2
 8001be4:	4094      	lsls	r4, r2
 8001be6:	4320      	orrs	r0, r4
 8001be8:	1e42      	subs	r2, r0, #1
 8001bea:	4190      	sbcs	r0, r2
 8001bec:	0005      	movs	r5, r0
 8001bee:	433d      	orrs	r5, r7
 8001bf0:	e651      	b.n	8001896 <__aeabi_dadd+0x31a>
 8001bf2:	000c      	movs	r4, r1
 8001bf4:	2500      	movs	r5, #0
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	e558      	b.n	80016ac <__aeabi_dadd+0x130>
 8001bfa:	4460      	add	r0, ip
 8001bfc:	4560      	cmp	r0, ip
 8001bfe:	4192      	sbcs	r2, r2
 8001c00:	4454      	add	r4, sl
 8001c02:	4252      	negs	r2, r2
 8001c04:	0005      	movs	r5, r0
 8001c06:	18a4      	adds	r4, r4, r2
 8001c08:	e73a      	b.n	8001a80 <__aeabi_dadd+0x504>
 8001c0a:	4653      	mov	r3, sl
 8001c0c:	075a      	lsls	r2, r3, #29
 8001c0e:	4663      	mov	r3, ip
 8001c10:	08d9      	lsrs	r1, r3, #3
 8001c12:	4653      	mov	r3, sl
 8001c14:	430a      	orrs	r2, r1
 8001c16:	08dc      	lsrs	r4, r3, #3
 8001c18:	e67e      	b.n	8001918 <__aeabi_dadd+0x39c>
 8001c1a:	001a      	movs	r2, r3
 8001c1c:	001c      	movs	r4, r3
 8001c1e:	432a      	orrs	r2, r5
 8001c20:	d000      	beq.n	8001c24 <__aeabi_dadd+0x6a8>
 8001c22:	e6ab      	b.n	800197c <__aeabi_dadd+0x400>
 8001c24:	e6c1      	b.n	80019aa <__aeabi_dadd+0x42e>
 8001c26:	2120      	movs	r1, #32
 8001c28:	2500      	movs	r5, #0
 8001c2a:	1a09      	subs	r1, r1, r0
 8001c2c:	e519      	b.n	8001662 <__aeabi_dadd+0xe6>
 8001c2e:	2200      	movs	r2, #0
 8001c30:	2500      	movs	r5, #0
 8001c32:	4c01      	ldr	r4, [pc, #4]	@ (8001c38 <__aeabi_dadd+0x6bc>)
 8001c34:	e53a      	b.n	80016ac <__aeabi_dadd+0x130>
 8001c36:	46c0      	nop			@ (mov r8, r8)
 8001c38:	000007ff 	.word	0x000007ff
 8001c3c:	ff7fffff 	.word	0xff7fffff
 8001c40:	000007fe 	.word	0x000007fe

08001c44 <__aeabi_ddiv>:
 8001c44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c46:	46de      	mov	lr, fp
 8001c48:	4645      	mov	r5, r8
 8001c4a:	4657      	mov	r7, sl
 8001c4c:	464e      	mov	r6, r9
 8001c4e:	b5e0      	push	{r5, r6, r7, lr}
 8001c50:	b087      	sub	sp, #28
 8001c52:	9200      	str	r2, [sp, #0]
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	030b      	lsls	r3, r1, #12
 8001c58:	0b1b      	lsrs	r3, r3, #12
 8001c5a:	469b      	mov	fp, r3
 8001c5c:	0fca      	lsrs	r2, r1, #31
 8001c5e:	004b      	lsls	r3, r1, #1
 8001c60:	0004      	movs	r4, r0
 8001c62:	4680      	mov	r8, r0
 8001c64:	0d5b      	lsrs	r3, r3, #21
 8001c66:	9202      	str	r2, [sp, #8]
 8001c68:	d100      	bne.n	8001c6c <__aeabi_ddiv+0x28>
 8001c6a:	e16a      	b.n	8001f42 <__aeabi_ddiv+0x2fe>
 8001c6c:	4ad4      	ldr	r2, [pc, #848]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d100      	bne.n	8001c74 <__aeabi_ddiv+0x30>
 8001c72:	e18c      	b.n	8001f8e <__aeabi_ddiv+0x34a>
 8001c74:	4659      	mov	r1, fp
 8001c76:	0f42      	lsrs	r2, r0, #29
 8001c78:	00c9      	lsls	r1, r1, #3
 8001c7a:	430a      	orrs	r2, r1
 8001c7c:	2180      	movs	r1, #128	@ 0x80
 8001c7e:	0409      	lsls	r1, r1, #16
 8001c80:	4311      	orrs	r1, r2
 8001c82:	00c2      	lsls	r2, r0, #3
 8001c84:	4690      	mov	r8, r2
 8001c86:	4acf      	ldr	r2, [pc, #828]	@ (8001fc4 <__aeabi_ddiv+0x380>)
 8001c88:	4689      	mov	r9, r1
 8001c8a:	4692      	mov	sl, r2
 8001c8c:	449a      	add	sl, r3
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2400      	movs	r4, #0
 8001c92:	9303      	str	r3, [sp, #12]
 8001c94:	9e00      	ldr	r6, [sp, #0]
 8001c96:	9f01      	ldr	r7, [sp, #4]
 8001c98:	033b      	lsls	r3, r7, #12
 8001c9a:	0b1b      	lsrs	r3, r3, #12
 8001c9c:	469b      	mov	fp, r3
 8001c9e:	007b      	lsls	r3, r7, #1
 8001ca0:	0030      	movs	r0, r6
 8001ca2:	0d5b      	lsrs	r3, r3, #21
 8001ca4:	0ffd      	lsrs	r5, r7, #31
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d100      	bne.n	8001cac <__aeabi_ddiv+0x68>
 8001caa:	e128      	b.n	8001efe <__aeabi_ddiv+0x2ba>
 8001cac:	4ac4      	ldr	r2, [pc, #784]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d100      	bne.n	8001cb4 <__aeabi_ddiv+0x70>
 8001cb2:	e177      	b.n	8001fa4 <__aeabi_ddiv+0x360>
 8001cb4:	4659      	mov	r1, fp
 8001cb6:	0f72      	lsrs	r2, r6, #29
 8001cb8:	00c9      	lsls	r1, r1, #3
 8001cba:	430a      	orrs	r2, r1
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	0409      	lsls	r1, r1, #16
 8001cc0:	4311      	orrs	r1, r2
 8001cc2:	468b      	mov	fp, r1
 8001cc4:	49bf      	ldr	r1, [pc, #764]	@ (8001fc4 <__aeabi_ddiv+0x380>)
 8001cc6:	00f2      	lsls	r2, r6, #3
 8001cc8:	468c      	mov	ip, r1
 8001cca:	4651      	mov	r1, sl
 8001ccc:	4463      	add	r3, ip
 8001cce:	1acb      	subs	r3, r1, r3
 8001cd0:	469a      	mov	sl, r3
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9e02      	ldr	r6, [sp, #8]
 8001cd6:	406e      	eors	r6, r5
 8001cd8:	2c0f      	cmp	r4, #15
 8001cda:	d827      	bhi.n	8001d2c <__aeabi_ddiv+0xe8>
 8001cdc:	49ba      	ldr	r1, [pc, #744]	@ (8001fc8 <__aeabi_ddiv+0x384>)
 8001cde:	00a4      	lsls	r4, r4, #2
 8001ce0:	5909      	ldr	r1, [r1, r4]
 8001ce2:	468f      	mov	pc, r1
 8001ce4:	46cb      	mov	fp, r9
 8001ce6:	4642      	mov	r2, r8
 8001ce8:	9e02      	ldr	r6, [sp, #8]
 8001cea:	9b03      	ldr	r3, [sp, #12]
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d016      	beq.n	8001d1e <__aeabi_ddiv+0xda>
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	d100      	bne.n	8001cf6 <__aeabi_ddiv+0xb2>
 8001cf4:	e2a6      	b.n	8002244 <__aeabi_ddiv+0x600>
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d000      	beq.n	8001cfc <__aeabi_ddiv+0xb8>
 8001cfa:	e0df      	b.n	8001ebc <__aeabi_ddiv+0x278>
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2300      	movs	r3, #0
 8001d00:	2400      	movs	r4, #0
 8001d02:	4690      	mov	r8, r2
 8001d04:	051b      	lsls	r3, r3, #20
 8001d06:	4323      	orrs	r3, r4
 8001d08:	07f6      	lsls	r6, r6, #31
 8001d0a:	4333      	orrs	r3, r6
 8001d0c:	4640      	mov	r0, r8
 8001d0e:	0019      	movs	r1, r3
 8001d10:	b007      	add	sp, #28
 8001d12:	bcf0      	pop	{r4, r5, r6, r7}
 8001d14:	46bb      	mov	fp, r7
 8001d16:	46b2      	mov	sl, r6
 8001d18:	46a9      	mov	r9, r5
 8001d1a:	46a0      	mov	r8, r4
 8001d1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d1e:	2200      	movs	r2, #0
 8001d20:	2400      	movs	r4, #0
 8001d22:	4690      	mov	r8, r2
 8001d24:	4ba6      	ldr	r3, [pc, #664]	@ (8001fc0 <__aeabi_ddiv+0x37c>)
 8001d26:	e7ed      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8001d28:	002e      	movs	r6, r5
 8001d2a:	e7df      	b.n	8001cec <__aeabi_ddiv+0xa8>
 8001d2c:	45cb      	cmp	fp, r9
 8001d2e:	d200      	bcs.n	8001d32 <__aeabi_ddiv+0xee>
 8001d30:	e1d4      	b.n	80020dc <__aeabi_ddiv+0x498>
 8001d32:	d100      	bne.n	8001d36 <__aeabi_ddiv+0xf2>
 8001d34:	e1cf      	b.n	80020d6 <__aeabi_ddiv+0x492>
 8001d36:	2301      	movs	r3, #1
 8001d38:	425b      	negs	r3, r3
 8001d3a:	469c      	mov	ip, r3
 8001d3c:	4644      	mov	r4, r8
 8001d3e:	4648      	mov	r0, r9
 8001d40:	2700      	movs	r7, #0
 8001d42:	44e2      	add	sl, ip
 8001d44:	465b      	mov	r3, fp
 8001d46:	0e15      	lsrs	r5, r2, #24
 8001d48:	021b      	lsls	r3, r3, #8
 8001d4a:	431d      	orrs	r5, r3
 8001d4c:	0c19      	lsrs	r1, r3, #16
 8001d4e:	042b      	lsls	r3, r5, #16
 8001d50:	0212      	lsls	r2, r2, #8
 8001d52:	9500      	str	r5, [sp, #0]
 8001d54:	0c1d      	lsrs	r5, r3, #16
 8001d56:	4691      	mov	r9, r2
 8001d58:	9102      	str	r1, [sp, #8]
 8001d5a:	9503      	str	r5, [sp, #12]
 8001d5c:	f7fe fa76 	bl	800024c <__aeabi_uidivmod>
 8001d60:	0002      	movs	r2, r0
 8001d62:	436a      	muls	r2, r5
 8001d64:	040b      	lsls	r3, r1, #16
 8001d66:	0c21      	lsrs	r1, r4, #16
 8001d68:	4680      	mov	r8, r0
 8001d6a:	4319      	orrs	r1, r3
 8001d6c:	428a      	cmp	r2, r1
 8001d6e:	d909      	bls.n	8001d84 <__aeabi_ddiv+0x140>
 8001d70:	9d00      	ldr	r5, [sp, #0]
 8001d72:	2301      	movs	r3, #1
 8001d74:	46ac      	mov	ip, r5
 8001d76:	425b      	negs	r3, r3
 8001d78:	4461      	add	r1, ip
 8001d7a:	469c      	mov	ip, r3
 8001d7c:	44e0      	add	r8, ip
 8001d7e:	428d      	cmp	r5, r1
 8001d80:	d800      	bhi.n	8001d84 <__aeabi_ddiv+0x140>
 8001d82:	e1fb      	b.n	800217c <__aeabi_ddiv+0x538>
 8001d84:	1a88      	subs	r0, r1, r2
 8001d86:	9902      	ldr	r1, [sp, #8]
 8001d88:	f7fe fa60 	bl	800024c <__aeabi_uidivmod>
 8001d8c:	9a03      	ldr	r2, [sp, #12]
 8001d8e:	0424      	lsls	r4, r4, #16
 8001d90:	4342      	muls	r2, r0
 8001d92:	0409      	lsls	r1, r1, #16
 8001d94:	0c24      	lsrs	r4, r4, #16
 8001d96:	0003      	movs	r3, r0
 8001d98:	430c      	orrs	r4, r1
 8001d9a:	42a2      	cmp	r2, r4
 8001d9c:	d906      	bls.n	8001dac <__aeabi_ddiv+0x168>
 8001d9e:	9900      	ldr	r1, [sp, #0]
 8001da0:	3b01      	subs	r3, #1
 8001da2:	468c      	mov	ip, r1
 8001da4:	4464      	add	r4, ip
 8001da6:	42a1      	cmp	r1, r4
 8001da8:	d800      	bhi.n	8001dac <__aeabi_ddiv+0x168>
 8001daa:	e1e1      	b.n	8002170 <__aeabi_ddiv+0x52c>
 8001dac:	1aa0      	subs	r0, r4, r2
 8001dae:	4642      	mov	r2, r8
 8001db0:	0412      	lsls	r2, r2, #16
 8001db2:	431a      	orrs	r2, r3
 8001db4:	4693      	mov	fp, r2
 8001db6:	464b      	mov	r3, r9
 8001db8:	4659      	mov	r1, fp
 8001dba:	0c1b      	lsrs	r3, r3, #16
 8001dbc:	001d      	movs	r5, r3
 8001dbe:	9304      	str	r3, [sp, #16]
 8001dc0:	040b      	lsls	r3, r1, #16
 8001dc2:	4649      	mov	r1, r9
 8001dc4:	0409      	lsls	r1, r1, #16
 8001dc6:	0c09      	lsrs	r1, r1, #16
 8001dc8:	000c      	movs	r4, r1
 8001dca:	0c1b      	lsrs	r3, r3, #16
 8001dcc:	435c      	muls	r4, r3
 8001dce:	0c12      	lsrs	r2, r2, #16
 8001dd0:	436b      	muls	r3, r5
 8001dd2:	4688      	mov	r8, r1
 8001dd4:	4351      	muls	r1, r2
 8001dd6:	436a      	muls	r2, r5
 8001dd8:	0c25      	lsrs	r5, r4, #16
 8001dda:	46ac      	mov	ip, r5
 8001ddc:	185b      	adds	r3, r3, r1
 8001dde:	4463      	add	r3, ip
 8001de0:	4299      	cmp	r1, r3
 8001de2:	d903      	bls.n	8001dec <__aeabi_ddiv+0x1a8>
 8001de4:	2180      	movs	r1, #128	@ 0x80
 8001de6:	0249      	lsls	r1, r1, #9
 8001de8:	468c      	mov	ip, r1
 8001dea:	4462      	add	r2, ip
 8001dec:	0c19      	lsrs	r1, r3, #16
 8001dee:	0424      	lsls	r4, r4, #16
 8001df0:	041b      	lsls	r3, r3, #16
 8001df2:	0c24      	lsrs	r4, r4, #16
 8001df4:	188a      	adds	r2, r1, r2
 8001df6:	191c      	adds	r4, r3, r4
 8001df8:	4290      	cmp	r0, r2
 8001dfa:	d302      	bcc.n	8001e02 <__aeabi_ddiv+0x1be>
 8001dfc:	d116      	bne.n	8001e2c <__aeabi_ddiv+0x1e8>
 8001dfe:	42a7      	cmp	r7, r4
 8001e00:	d214      	bcs.n	8001e2c <__aeabi_ddiv+0x1e8>
 8001e02:	465b      	mov	r3, fp
 8001e04:	9d00      	ldr	r5, [sp, #0]
 8001e06:	3b01      	subs	r3, #1
 8001e08:	444f      	add	r7, r9
 8001e0a:	9305      	str	r3, [sp, #20]
 8001e0c:	454f      	cmp	r7, r9
 8001e0e:	419b      	sbcs	r3, r3
 8001e10:	46ac      	mov	ip, r5
 8001e12:	425b      	negs	r3, r3
 8001e14:	4463      	add	r3, ip
 8001e16:	18c0      	adds	r0, r0, r3
 8001e18:	4285      	cmp	r5, r0
 8001e1a:	d300      	bcc.n	8001e1e <__aeabi_ddiv+0x1da>
 8001e1c:	e1a1      	b.n	8002162 <__aeabi_ddiv+0x51e>
 8001e1e:	4282      	cmp	r2, r0
 8001e20:	d900      	bls.n	8001e24 <__aeabi_ddiv+0x1e0>
 8001e22:	e1f6      	b.n	8002212 <__aeabi_ddiv+0x5ce>
 8001e24:	d100      	bne.n	8001e28 <__aeabi_ddiv+0x1e4>
 8001e26:	e1f1      	b.n	800220c <__aeabi_ddiv+0x5c8>
 8001e28:	9b05      	ldr	r3, [sp, #20]
 8001e2a:	469b      	mov	fp, r3
 8001e2c:	1b3c      	subs	r4, r7, r4
 8001e2e:	42a7      	cmp	r7, r4
 8001e30:	41bf      	sbcs	r7, r7
 8001e32:	9d00      	ldr	r5, [sp, #0]
 8001e34:	1a80      	subs	r0, r0, r2
 8001e36:	427f      	negs	r7, r7
 8001e38:	1bc0      	subs	r0, r0, r7
 8001e3a:	4285      	cmp	r5, r0
 8001e3c:	d100      	bne.n	8001e40 <__aeabi_ddiv+0x1fc>
 8001e3e:	e1d0      	b.n	80021e2 <__aeabi_ddiv+0x59e>
 8001e40:	9902      	ldr	r1, [sp, #8]
 8001e42:	f7fe fa03 	bl	800024c <__aeabi_uidivmod>
 8001e46:	9a03      	ldr	r2, [sp, #12]
 8001e48:	040b      	lsls	r3, r1, #16
 8001e4a:	4342      	muls	r2, r0
 8001e4c:	0c21      	lsrs	r1, r4, #16
 8001e4e:	0007      	movs	r7, r0
 8001e50:	4319      	orrs	r1, r3
 8001e52:	428a      	cmp	r2, r1
 8001e54:	d900      	bls.n	8001e58 <__aeabi_ddiv+0x214>
 8001e56:	e178      	b.n	800214a <__aeabi_ddiv+0x506>
 8001e58:	1a88      	subs	r0, r1, r2
 8001e5a:	9902      	ldr	r1, [sp, #8]
 8001e5c:	f7fe f9f6 	bl	800024c <__aeabi_uidivmod>
 8001e60:	9a03      	ldr	r2, [sp, #12]
 8001e62:	0424      	lsls	r4, r4, #16
 8001e64:	4342      	muls	r2, r0
 8001e66:	0409      	lsls	r1, r1, #16
 8001e68:	0c24      	lsrs	r4, r4, #16
 8001e6a:	0003      	movs	r3, r0
 8001e6c:	430c      	orrs	r4, r1
 8001e6e:	42a2      	cmp	r2, r4
 8001e70:	d900      	bls.n	8001e74 <__aeabi_ddiv+0x230>
 8001e72:	e15d      	b.n	8002130 <__aeabi_ddiv+0x4ec>
 8001e74:	4641      	mov	r1, r8
 8001e76:	1aa4      	subs	r4, r4, r2
 8001e78:	043a      	lsls	r2, r7, #16
 8001e7a:	431a      	orrs	r2, r3
 8001e7c:	9d04      	ldr	r5, [sp, #16]
 8001e7e:	0413      	lsls	r3, r2, #16
 8001e80:	0c1b      	lsrs	r3, r3, #16
 8001e82:	4359      	muls	r1, r3
 8001e84:	4647      	mov	r7, r8
 8001e86:	436b      	muls	r3, r5
 8001e88:	469c      	mov	ip, r3
 8001e8a:	0c10      	lsrs	r0, r2, #16
 8001e8c:	4347      	muls	r7, r0
 8001e8e:	0c0b      	lsrs	r3, r1, #16
 8001e90:	44bc      	add	ip, r7
 8001e92:	4463      	add	r3, ip
 8001e94:	4368      	muls	r0, r5
 8001e96:	429f      	cmp	r7, r3
 8001e98:	d903      	bls.n	8001ea2 <__aeabi_ddiv+0x25e>
 8001e9a:	2580      	movs	r5, #128	@ 0x80
 8001e9c:	026d      	lsls	r5, r5, #9
 8001e9e:	46ac      	mov	ip, r5
 8001ea0:	4460      	add	r0, ip
 8001ea2:	0c1f      	lsrs	r7, r3, #16
 8001ea4:	0409      	lsls	r1, r1, #16
 8001ea6:	041b      	lsls	r3, r3, #16
 8001ea8:	0c09      	lsrs	r1, r1, #16
 8001eaa:	183f      	adds	r7, r7, r0
 8001eac:	185b      	adds	r3, r3, r1
 8001eae:	42bc      	cmp	r4, r7
 8001eb0:	d200      	bcs.n	8001eb4 <__aeabi_ddiv+0x270>
 8001eb2:	e102      	b.n	80020ba <__aeabi_ddiv+0x476>
 8001eb4:	d100      	bne.n	8001eb8 <__aeabi_ddiv+0x274>
 8001eb6:	e0fd      	b.n	80020b4 <__aeabi_ddiv+0x470>
 8001eb8:	2301      	movs	r3, #1
 8001eba:	431a      	orrs	r2, r3
 8001ebc:	4b43      	ldr	r3, [pc, #268]	@ (8001fcc <__aeabi_ddiv+0x388>)
 8001ebe:	4453      	add	r3, sl
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	dc00      	bgt.n	8001ec6 <__aeabi_ddiv+0x282>
 8001ec4:	e0ae      	b.n	8002024 <__aeabi_ddiv+0x3e0>
 8001ec6:	0751      	lsls	r1, r2, #29
 8001ec8:	d000      	beq.n	8001ecc <__aeabi_ddiv+0x288>
 8001eca:	e198      	b.n	80021fe <__aeabi_ddiv+0x5ba>
 8001ecc:	4659      	mov	r1, fp
 8001ece:	01c9      	lsls	r1, r1, #7
 8001ed0:	d506      	bpl.n	8001ee0 <__aeabi_ddiv+0x29c>
 8001ed2:	4659      	mov	r1, fp
 8001ed4:	4b3e      	ldr	r3, [pc, #248]	@ (8001fd0 <__aeabi_ddiv+0x38c>)
 8001ed6:	4019      	ands	r1, r3
 8001ed8:	2380      	movs	r3, #128	@ 0x80
 8001eda:	468b      	mov	fp, r1
 8001edc:	00db      	lsls	r3, r3, #3
 8001ede:	4453      	add	r3, sl
 8001ee0:	493c      	ldr	r1, [pc, #240]	@ (8001fd4 <__aeabi_ddiv+0x390>)
 8001ee2:	428b      	cmp	r3, r1
 8001ee4:	dd00      	ble.n	8001ee8 <__aeabi_ddiv+0x2a4>
 8001ee6:	e71a      	b.n	8001d1e <__aeabi_ddiv+0xda>
 8001ee8:	4659      	mov	r1, fp
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	0749      	lsls	r1, r1, #29
 8001eee:	4311      	orrs	r1, r2
 8001ef0:	465a      	mov	r2, fp
 8001ef2:	055b      	lsls	r3, r3, #21
 8001ef4:	0254      	lsls	r4, r2, #9
 8001ef6:	4688      	mov	r8, r1
 8001ef8:	0b24      	lsrs	r4, r4, #12
 8001efa:	0d5b      	lsrs	r3, r3, #21
 8001efc:	e702      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8001efe:	465a      	mov	r2, fp
 8001f00:	9b00      	ldr	r3, [sp, #0]
 8001f02:	431a      	orrs	r2, r3
 8001f04:	d100      	bne.n	8001f08 <__aeabi_ddiv+0x2c4>
 8001f06:	e07e      	b.n	8002006 <__aeabi_ddiv+0x3c2>
 8001f08:	465b      	mov	r3, fp
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d100      	bne.n	8001f10 <__aeabi_ddiv+0x2cc>
 8001f0e:	e100      	b.n	8002112 <__aeabi_ddiv+0x4ce>
 8001f10:	4658      	mov	r0, fp
 8001f12:	f001 fa73 	bl	80033fc <__clzsi2>
 8001f16:	0002      	movs	r2, r0
 8001f18:	0003      	movs	r3, r0
 8001f1a:	3a0b      	subs	r2, #11
 8001f1c:	271d      	movs	r7, #29
 8001f1e:	9e00      	ldr	r6, [sp, #0]
 8001f20:	1aba      	subs	r2, r7, r2
 8001f22:	0019      	movs	r1, r3
 8001f24:	4658      	mov	r0, fp
 8001f26:	40d6      	lsrs	r6, r2
 8001f28:	3908      	subs	r1, #8
 8001f2a:	4088      	lsls	r0, r1
 8001f2c:	0032      	movs	r2, r6
 8001f2e:	4302      	orrs	r2, r0
 8001f30:	4693      	mov	fp, r2
 8001f32:	9a00      	ldr	r2, [sp, #0]
 8001f34:	408a      	lsls	r2, r1
 8001f36:	4928      	ldr	r1, [pc, #160]	@ (8001fd8 <__aeabi_ddiv+0x394>)
 8001f38:	4453      	add	r3, sl
 8001f3a:	468a      	mov	sl, r1
 8001f3c:	449a      	add	sl, r3
 8001f3e:	2300      	movs	r3, #0
 8001f40:	e6c8      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001f42:	465b      	mov	r3, fp
 8001f44:	4303      	orrs	r3, r0
 8001f46:	4699      	mov	r9, r3
 8001f48:	d056      	beq.n	8001ff8 <__aeabi_ddiv+0x3b4>
 8001f4a:	465b      	mov	r3, fp
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d100      	bne.n	8001f52 <__aeabi_ddiv+0x30e>
 8001f50:	e0cd      	b.n	80020ee <__aeabi_ddiv+0x4aa>
 8001f52:	4658      	mov	r0, fp
 8001f54:	f001 fa52 	bl	80033fc <__clzsi2>
 8001f58:	230b      	movs	r3, #11
 8001f5a:	425b      	negs	r3, r3
 8001f5c:	469c      	mov	ip, r3
 8001f5e:	0002      	movs	r2, r0
 8001f60:	4484      	add	ip, r0
 8001f62:	4666      	mov	r6, ip
 8001f64:	231d      	movs	r3, #29
 8001f66:	1b9b      	subs	r3, r3, r6
 8001f68:	0026      	movs	r6, r4
 8001f6a:	0011      	movs	r1, r2
 8001f6c:	4658      	mov	r0, fp
 8001f6e:	40de      	lsrs	r6, r3
 8001f70:	3908      	subs	r1, #8
 8001f72:	4088      	lsls	r0, r1
 8001f74:	0033      	movs	r3, r6
 8001f76:	4303      	orrs	r3, r0
 8001f78:	4699      	mov	r9, r3
 8001f7a:	0023      	movs	r3, r4
 8001f7c:	408b      	lsls	r3, r1
 8001f7e:	4698      	mov	r8, r3
 8001f80:	4b16      	ldr	r3, [pc, #88]	@ (8001fdc <__aeabi_ddiv+0x398>)
 8001f82:	2400      	movs	r4, #0
 8001f84:	1a9b      	subs	r3, r3, r2
 8001f86:	469a      	mov	sl, r3
 8001f88:	2300      	movs	r3, #0
 8001f8a:	9303      	str	r3, [sp, #12]
 8001f8c:	e682      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001f8e:	465a      	mov	r2, fp
 8001f90:	4302      	orrs	r2, r0
 8001f92:	4691      	mov	r9, r2
 8001f94:	d12a      	bne.n	8001fec <__aeabi_ddiv+0x3a8>
 8001f96:	2200      	movs	r2, #0
 8001f98:	469a      	mov	sl, r3
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	4690      	mov	r8, r2
 8001f9e:	2408      	movs	r4, #8
 8001fa0:	9303      	str	r3, [sp, #12]
 8001fa2:	e677      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001fa4:	465a      	mov	r2, fp
 8001fa6:	9b00      	ldr	r3, [sp, #0]
 8001fa8:	431a      	orrs	r2, r3
 8001faa:	4b0d      	ldr	r3, [pc, #52]	@ (8001fe0 <__aeabi_ddiv+0x39c>)
 8001fac:	469c      	mov	ip, r3
 8001fae:	44e2      	add	sl, ip
 8001fb0:	2a00      	cmp	r2, #0
 8001fb2:	d117      	bne.n	8001fe4 <__aeabi_ddiv+0x3a0>
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	431c      	orrs	r4, r3
 8001fb8:	2300      	movs	r3, #0
 8001fba:	469b      	mov	fp, r3
 8001fbc:	3302      	adds	r3, #2
 8001fbe:	e689      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001fc0:	000007ff 	.word	0x000007ff
 8001fc4:	fffffc01 	.word	0xfffffc01
 8001fc8:	0800fab8 	.word	0x0800fab8
 8001fcc:	000003ff 	.word	0x000003ff
 8001fd0:	feffffff 	.word	0xfeffffff
 8001fd4:	000007fe 	.word	0x000007fe
 8001fd8:	000003f3 	.word	0x000003f3
 8001fdc:	fffffc0d 	.word	0xfffffc0d
 8001fe0:	fffff801 	.word	0xfffff801
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	0032      	movs	r2, r6
 8001fe8:	431c      	orrs	r4, r3
 8001fea:	e673      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8001fec:	469a      	mov	sl, r3
 8001fee:	2303      	movs	r3, #3
 8001ff0:	46d9      	mov	r9, fp
 8001ff2:	240c      	movs	r4, #12
 8001ff4:	9303      	str	r3, [sp, #12]
 8001ff6:	e64d      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	4698      	mov	r8, r3
 8001ffc:	469a      	mov	sl, r3
 8001ffe:	3301      	adds	r3, #1
 8002000:	2404      	movs	r4, #4
 8002002:	9303      	str	r3, [sp, #12]
 8002004:	e646      	b.n	8001c94 <__aeabi_ddiv+0x50>
 8002006:	2301      	movs	r3, #1
 8002008:	431c      	orrs	r4, r3
 800200a:	2300      	movs	r3, #0
 800200c:	469b      	mov	fp, r3
 800200e:	3301      	adds	r3, #1
 8002010:	e660      	b.n	8001cd4 <__aeabi_ddiv+0x90>
 8002012:	2300      	movs	r3, #0
 8002014:	2480      	movs	r4, #128	@ 0x80
 8002016:	4698      	mov	r8, r3
 8002018:	2600      	movs	r6, #0
 800201a:	4b92      	ldr	r3, [pc, #584]	@ (8002264 <__aeabi_ddiv+0x620>)
 800201c:	0324      	lsls	r4, r4, #12
 800201e:	e671      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002020:	2201      	movs	r2, #1
 8002022:	4252      	negs	r2, r2
 8002024:	2101      	movs	r1, #1
 8002026:	1ac9      	subs	r1, r1, r3
 8002028:	2938      	cmp	r1, #56	@ 0x38
 800202a:	dd00      	ble.n	800202e <__aeabi_ddiv+0x3ea>
 800202c:	e666      	b.n	8001cfc <__aeabi_ddiv+0xb8>
 800202e:	291f      	cmp	r1, #31
 8002030:	dc00      	bgt.n	8002034 <__aeabi_ddiv+0x3f0>
 8002032:	e0ab      	b.n	800218c <__aeabi_ddiv+0x548>
 8002034:	201f      	movs	r0, #31
 8002036:	4240      	negs	r0, r0
 8002038:	1ac3      	subs	r3, r0, r3
 800203a:	4658      	mov	r0, fp
 800203c:	40d8      	lsrs	r0, r3
 800203e:	0003      	movs	r3, r0
 8002040:	2920      	cmp	r1, #32
 8002042:	d004      	beq.n	800204e <__aeabi_ddiv+0x40a>
 8002044:	4658      	mov	r0, fp
 8002046:	4988      	ldr	r1, [pc, #544]	@ (8002268 <__aeabi_ddiv+0x624>)
 8002048:	4451      	add	r1, sl
 800204a:	4088      	lsls	r0, r1
 800204c:	4302      	orrs	r2, r0
 800204e:	1e51      	subs	r1, r2, #1
 8002050:	418a      	sbcs	r2, r1
 8002052:	431a      	orrs	r2, r3
 8002054:	2307      	movs	r3, #7
 8002056:	0019      	movs	r1, r3
 8002058:	2400      	movs	r4, #0
 800205a:	4011      	ands	r1, r2
 800205c:	4213      	tst	r3, r2
 800205e:	d00c      	beq.n	800207a <__aeabi_ddiv+0x436>
 8002060:	230f      	movs	r3, #15
 8002062:	4013      	ands	r3, r2
 8002064:	2b04      	cmp	r3, #4
 8002066:	d100      	bne.n	800206a <__aeabi_ddiv+0x426>
 8002068:	e0f9      	b.n	800225e <__aeabi_ddiv+0x61a>
 800206a:	1d11      	adds	r1, r2, #4
 800206c:	4291      	cmp	r1, r2
 800206e:	419b      	sbcs	r3, r3
 8002070:	000a      	movs	r2, r1
 8002072:	425b      	negs	r3, r3
 8002074:	0759      	lsls	r1, r3, #29
 8002076:	025b      	lsls	r3, r3, #9
 8002078:	0b1c      	lsrs	r4, r3, #12
 800207a:	08d2      	lsrs	r2, r2, #3
 800207c:	430a      	orrs	r2, r1
 800207e:	4690      	mov	r8, r2
 8002080:	2300      	movs	r3, #0
 8002082:	e63f      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002084:	2480      	movs	r4, #128	@ 0x80
 8002086:	464b      	mov	r3, r9
 8002088:	0324      	lsls	r4, r4, #12
 800208a:	4223      	tst	r3, r4
 800208c:	d009      	beq.n	80020a2 <__aeabi_ddiv+0x45e>
 800208e:	465b      	mov	r3, fp
 8002090:	4223      	tst	r3, r4
 8002092:	d106      	bne.n	80020a2 <__aeabi_ddiv+0x45e>
 8002094:	431c      	orrs	r4, r3
 8002096:	0324      	lsls	r4, r4, #12
 8002098:	002e      	movs	r6, r5
 800209a:	4690      	mov	r8, r2
 800209c:	4b71      	ldr	r3, [pc, #452]	@ (8002264 <__aeabi_ddiv+0x620>)
 800209e:	0b24      	lsrs	r4, r4, #12
 80020a0:	e630      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80020a2:	2480      	movs	r4, #128	@ 0x80
 80020a4:	464b      	mov	r3, r9
 80020a6:	0324      	lsls	r4, r4, #12
 80020a8:	431c      	orrs	r4, r3
 80020aa:	0324      	lsls	r4, r4, #12
 80020ac:	9e02      	ldr	r6, [sp, #8]
 80020ae:	4b6d      	ldr	r3, [pc, #436]	@ (8002264 <__aeabi_ddiv+0x620>)
 80020b0:	0b24      	lsrs	r4, r4, #12
 80020b2:	e627      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d100      	bne.n	80020ba <__aeabi_ddiv+0x476>
 80020b8:	e700      	b.n	8001ebc <__aeabi_ddiv+0x278>
 80020ba:	9800      	ldr	r0, [sp, #0]
 80020bc:	1e51      	subs	r1, r2, #1
 80020be:	4684      	mov	ip, r0
 80020c0:	4464      	add	r4, ip
 80020c2:	4284      	cmp	r4, r0
 80020c4:	d200      	bcs.n	80020c8 <__aeabi_ddiv+0x484>
 80020c6:	e084      	b.n	80021d2 <__aeabi_ddiv+0x58e>
 80020c8:	42bc      	cmp	r4, r7
 80020ca:	d200      	bcs.n	80020ce <__aeabi_ddiv+0x48a>
 80020cc:	e0ae      	b.n	800222c <__aeabi_ddiv+0x5e8>
 80020ce:	d100      	bne.n	80020d2 <__aeabi_ddiv+0x48e>
 80020d0:	e0c1      	b.n	8002256 <__aeabi_ddiv+0x612>
 80020d2:	000a      	movs	r2, r1
 80020d4:	e6f0      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80020d6:	4542      	cmp	r2, r8
 80020d8:	d900      	bls.n	80020dc <__aeabi_ddiv+0x498>
 80020da:	e62c      	b.n	8001d36 <__aeabi_ddiv+0xf2>
 80020dc:	464b      	mov	r3, r9
 80020de:	07dc      	lsls	r4, r3, #31
 80020e0:	0858      	lsrs	r0, r3, #1
 80020e2:	4643      	mov	r3, r8
 80020e4:	085b      	lsrs	r3, r3, #1
 80020e6:	431c      	orrs	r4, r3
 80020e8:	4643      	mov	r3, r8
 80020ea:	07df      	lsls	r7, r3, #31
 80020ec:	e62a      	b.n	8001d44 <__aeabi_ddiv+0x100>
 80020ee:	f001 f985 	bl	80033fc <__clzsi2>
 80020f2:	2315      	movs	r3, #21
 80020f4:	469c      	mov	ip, r3
 80020f6:	4484      	add	ip, r0
 80020f8:	0002      	movs	r2, r0
 80020fa:	4663      	mov	r3, ip
 80020fc:	3220      	adds	r2, #32
 80020fe:	2b1c      	cmp	r3, #28
 8002100:	dc00      	bgt.n	8002104 <__aeabi_ddiv+0x4c0>
 8002102:	e72e      	b.n	8001f62 <__aeabi_ddiv+0x31e>
 8002104:	0023      	movs	r3, r4
 8002106:	3808      	subs	r0, #8
 8002108:	4083      	lsls	r3, r0
 800210a:	4699      	mov	r9, r3
 800210c:	2300      	movs	r3, #0
 800210e:	4698      	mov	r8, r3
 8002110:	e736      	b.n	8001f80 <__aeabi_ddiv+0x33c>
 8002112:	f001 f973 	bl	80033fc <__clzsi2>
 8002116:	0002      	movs	r2, r0
 8002118:	0003      	movs	r3, r0
 800211a:	3215      	adds	r2, #21
 800211c:	3320      	adds	r3, #32
 800211e:	2a1c      	cmp	r2, #28
 8002120:	dc00      	bgt.n	8002124 <__aeabi_ddiv+0x4e0>
 8002122:	e6fb      	b.n	8001f1c <__aeabi_ddiv+0x2d8>
 8002124:	9900      	ldr	r1, [sp, #0]
 8002126:	3808      	subs	r0, #8
 8002128:	4081      	lsls	r1, r0
 800212a:	2200      	movs	r2, #0
 800212c:	468b      	mov	fp, r1
 800212e:	e702      	b.n	8001f36 <__aeabi_ddiv+0x2f2>
 8002130:	9900      	ldr	r1, [sp, #0]
 8002132:	3b01      	subs	r3, #1
 8002134:	468c      	mov	ip, r1
 8002136:	4464      	add	r4, ip
 8002138:	42a1      	cmp	r1, r4
 800213a:	d900      	bls.n	800213e <__aeabi_ddiv+0x4fa>
 800213c:	e69a      	b.n	8001e74 <__aeabi_ddiv+0x230>
 800213e:	42a2      	cmp	r2, r4
 8002140:	d800      	bhi.n	8002144 <__aeabi_ddiv+0x500>
 8002142:	e697      	b.n	8001e74 <__aeabi_ddiv+0x230>
 8002144:	1e83      	subs	r3, r0, #2
 8002146:	4464      	add	r4, ip
 8002148:	e694      	b.n	8001e74 <__aeabi_ddiv+0x230>
 800214a:	46ac      	mov	ip, r5
 800214c:	4461      	add	r1, ip
 800214e:	3f01      	subs	r7, #1
 8002150:	428d      	cmp	r5, r1
 8002152:	d900      	bls.n	8002156 <__aeabi_ddiv+0x512>
 8002154:	e680      	b.n	8001e58 <__aeabi_ddiv+0x214>
 8002156:	428a      	cmp	r2, r1
 8002158:	d800      	bhi.n	800215c <__aeabi_ddiv+0x518>
 800215a:	e67d      	b.n	8001e58 <__aeabi_ddiv+0x214>
 800215c:	1e87      	subs	r7, r0, #2
 800215e:	4461      	add	r1, ip
 8002160:	e67a      	b.n	8001e58 <__aeabi_ddiv+0x214>
 8002162:	4285      	cmp	r5, r0
 8002164:	d000      	beq.n	8002168 <__aeabi_ddiv+0x524>
 8002166:	e65f      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 8002168:	45b9      	cmp	r9, r7
 800216a:	d900      	bls.n	800216e <__aeabi_ddiv+0x52a>
 800216c:	e65c      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 800216e:	e656      	b.n	8001e1e <__aeabi_ddiv+0x1da>
 8002170:	42a2      	cmp	r2, r4
 8002172:	d800      	bhi.n	8002176 <__aeabi_ddiv+0x532>
 8002174:	e61a      	b.n	8001dac <__aeabi_ddiv+0x168>
 8002176:	1e83      	subs	r3, r0, #2
 8002178:	4464      	add	r4, ip
 800217a:	e617      	b.n	8001dac <__aeabi_ddiv+0x168>
 800217c:	428a      	cmp	r2, r1
 800217e:	d800      	bhi.n	8002182 <__aeabi_ddiv+0x53e>
 8002180:	e600      	b.n	8001d84 <__aeabi_ddiv+0x140>
 8002182:	46ac      	mov	ip, r5
 8002184:	1e83      	subs	r3, r0, #2
 8002186:	4698      	mov	r8, r3
 8002188:	4461      	add	r1, ip
 800218a:	e5fb      	b.n	8001d84 <__aeabi_ddiv+0x140>
 800218c:	4837      	ldr	r0, [pc, #220]	@ (800226c <__aeabi_ddiv+0x628>)
 800218e:	0014      	movs	r4, r2
 8002190:	4450      	add	r0, sl
 8002192:	4082      	lsls	r2, r0
 8002194:	465b      	mov	r3, fp
 8002196:	0017      	movs	r7, r2
 8002198:	4083      	lsls	r3, r0
 800219a:	40cc      	lsrs	r4, r1
 800219c:	1e7a      	subs	r2, r7, #1
 800219e:	4197      	sbcs	r7, r2
 80021a0:	4323      	orrs	r3, r4
 80021a2:	433b      	orrs	r3, r7
 80021a4:	001a      	movs	r2, r3
 80021a6:	465b      	mov	r3, fp
 80021a8:	40cb      	lsrs	r3, r1
 80021aa:	0751      	lsls	r1, r2, #29
 80021ac:	d009      	beq.n	80021c2 <__aeabi_ddiv+0x57e>
 80021ae:	210f      	movs	r1, #15
 80021b0:	4011      	ands	r1, r2
 80021b2:	2904      	cmp	r1, #4
 80021b4:	d005      	beq.n	80021c2 <__aeabi_ddiv+0x57e>
 80021b6:	1d11      	adds	r1, r2, #4
 80021b8:	4291      	cmp	r1, r2
 80021ba:	4192      	sbcs	r2, r2
 80021bc:	4252      	negs	r2, r2
 80021be:	189b      	adds	r3, r3, r2
 80021c0:	000a      	movs	r2, r1
 80021c2:	0219      	lsls	r1, r3, #8
 80021c4:	d400      	bmi.n	80021c8 <__aeabi_ddiv+0x584>
 80021c6:	e755      	b.n	8002074 <__aeabi_ddiv+0x430>
 80021c8:	2200      	movs	r2, #0
 80021ca:	2301      	movs	r3, #1
 80021cc:	2400      	movs	r4, #0
 80021ce:	4690      	mov	r8, r2
 80021d0:	e598      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 80021d2:	000a      	movs	r2, r1
 80021d4:	42bc      	cmp	r4, r7
 80021d6:	d000      	beq.n	80021da <__aeabi_ddiv+0x596>
 80021d8:	e66e      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80021da:	454b      	cmp	r3, r9
 80021dc:	d000      	beq.n	80021e0 <__aeabi_ddiv+0x59c>
 80021de:	e66b      	b.n	8001eb8 <__aeabi_ddiv+0x274>
 80021e0:	e66c      	b.n	8001ebc <__aeabi_ddiv+0x278>
 80021e2:	4b23      	ldr	r3, [pc, #140]	@ (8002270 <__aeabi_ddiv+0x62c>)
 80021e4:	4a23      	ldr	r2, [pc, #140]	@ (8002274 <__aeabi_ddiv+0x630>)
 80021e6:	4453      	add	r3, sl
 80021e8:	4592      	cmp	sl, r2
 80021ea:	da00      	bge.n	80021ee <__aeabi_ddiv+0x5aa>
 80021ec:	e718      	b.n	8002020 <__aeabi_ddiv+0x3dc>
 80021ee:	2101      	movs	r1, #1
 80021f0:	4249      	negs	r1, r1
 80021f2:	1d0a      	adds	r2, r1, #4
 80021f4:	428a      	cmp	r2, r1
 80021f6:	4189      	sbcs	r1, r1
 80021f8:	4249      	negs	r1, r1
 80021fa:	448b      	add	fp, r1
 80021fc:	e666      	b.n	8001ecc <__aeabi_ddiv+0x288>
 80021fe:	210f      	movs	r1, #15
 8002200:	4011      	ands	r1, r2
 8002202:	2904      	cmp	r1, #4
 8002204:	d100      	bne.n	8002208 <__aeabi_ddiv+0x5c4>
 8002206:	e661      	b.n	8001ecc <__aeabi_ddiv+0x288>
 8002208:	0011      	movs	r1, r2
 800220a:	e7f2      	b.n	80021f2 <__aeabi_ddiv+0x5ae>
 800220c:	42bc      	cmp	r4, r7
 800220e:	d800      	bhi.n	8002212 <__aeabi_ddiv+0x5ce>
 8002210:	e60a      	b.n	8001e28 <__aeabi_ddiv+0x1e4>
 8002212:	2302      	movs	r3, #2
 8002214:	425b      	negs	r3, r3
 8002216:	469c      	mov	ip, r3
 8002218:	9900      	ldr	r1, [sp, #0]
 800221a:	444f      	add	r7, r9
 800221c:	454f      	cmp	r7, r9
 800221e:	419b      	sbcs	r3, r3
 8002220:	44e3      	add	fp, ip
 8002222:	468c      	mov	ip, r1
 8002224:	425b      	negs	r3, r3
 8002226:	4463      	add	r3, ip
 8002228:	18c0      	adds	r0, r0, r3
 800222a:	e5ff      	b.n	8001e2c <__aeabi_ddiv+0x1e8>
 800222c:	4649      	mov	r1, r9
 800222e:	9d00      	ldr	r5, [sp, #0]
 8002230:	0048      	lsls	r0, r1, #1
 8002232:	4548      	cmp	r0, r9
 8002234:	4189      	sbcs	r1, r1
 8002236:	46ac      	mov	ip, r5
 8002238:	4249      	negs	r1, r1
 800223a:	4461      	add	r1, ip
 800223c:	4681      	mov	r9, r0
 800223e:	3a02      	subs	r2, #2
 8002240:	1864      	adds	r4, r4, r1
 8002242:	e7c7      	b.n	80021d4 <__aeabi_ddiv+0x590>
 8002244:	2480      	movs	r4, #128	@ 0x80
 8002246:	465b      	mov	r3, fp
 8002248:	0324      	lsls	r4, r4, #12
 800224a:	431c      	orrs	r4, r3
 800224c:	0324      	lsls	r4, r4, #12
 800224e:	4690      	mov	r8, r2
 8002250:	4b04      	ldr	r3, [pc, #16]	@ (8002264 <__aeabi_ddiv+0x620>)
 8002252:	0b24      	lsrs	r4, r4, #12
 8002254:	e556      	b.n	8001d04 <__aeabi_ddiv+0xc0>
 8002256:	4599      	cmp	r9, r3
 8002258:	d3e8      	bcc.n	800222c <__aeabi_ddiv+0x5e8>
 800225a:	000a      	movs	r2, r1
 800225c:	e7bd      	b.n	80021da <__aeabi_ddiv+0x596>
 800225e:	2300      	movs	r3, #0
 8002260:	e708      	b.n	8002074 <__aeabi_ddiv+0x430>
 8002262:	46c0      	nop			@ (mov r8, r8)
 8002264:	000007ff 	.word	0x000007ff
 8002268:	0000043e 	.word	0x0000043e
 800226c:	0000041e 	.word	0x0000041e
 8002270:	000003ff 	.word	0x000003ff
 8002274:	fffffc02 	.word	0xfffffc02

08002278 <__eqdf2>:
 8002278:	b5f0      	push	{r4, r5, r6, r7, lr}
 800227a:	4657      	mov	r7, sl
 800227c:	46de      	mov	lr, fp
 800227e:	464e      	mov	r6, r9
 8002280:	4645      	mov	r5, r8
 8002282:	b5e0      	push	{r5, r6, r7, lr}
 8002284:	000d      	movs	r5, r1
 8002286:	0004      	movs	r4, r0
 8002288:	0fe8      	lsrs	r0, r5, #31
 800228a:	4683      	mov	fp, r0
 800228c:	0309      	lsls	r1, r1, #12
 800228e:	0fd8      	lsrs	r0, r3, #31
 8002290:	0b09      	lsrs	r1, r1, #12
 8002292:	4682      	mov	sl, r0
 8002294:	4819      	ldr	r0, [pc, #100]	@ (80022fc <__eqdf2+0x84>)
 8002296:	468c      	mov	ip, r1
 8002298:	031f      	lsls	r7, r3, #12
 800229a:	0069      	lsls	r1, r5, #1
 800229c:	005e      	lsls	r6, r3, #1
 800229e:	0d49      	lsrs	r1, r1, #21
 80022a0:	0b3f      	lsrs	r7, r7, #12
 80022a2:	0d76      	lsrs	r6, r6, #21
 80022a4:	4281      	cmp	r1, r0
 80022a6:	d018      	beq.n	80022da <__eqdf2+0x62>
 80022a8:	4286      	cmp	r6, r0
 80022aa:	d00f      	beq.n	80022cc <__eqdf2+0x54>
 80022ac:	2001      	movs	r0, #1
 80022ae:	42b1      	cmp	r1, r6
 80022b0:	d10d      	bne.n	80022ce <__eqdf2+0x56>
 80022b2:	45bc      	cmp	ip, r7
 80022b4:	d10b      	bne.n	80022ce <__eqdf2+0x56>
 80022b6:	4294      	cmp	r4, r2
 80022b8:	d109      	bne.n	80022ce <__eqdf2+0x56>
 80022ba:	45d3      	cmp	fp, sl
 80022bc:	d01c      	beq.n	80022f8 <__eqdf2+0x80>
 80022be:	2900      	cmp	r1, #0
 80022c0:	d105      	bne.n	80022ce <__eqdf2+0x56>
 80022c2:	4660      	mov	r0, ip
 80022c4:	4320      	orrs	r0, r4
 80022c6:	1e43      	subs	r3, r0, #1
 80022c8:	4198      	sbcs	r0, r3
 80022ca:	e000      	b.n	80022ce <__eqdf2+0x56>
 80022cc:	2001      	movs	r0, #1
 80022ce:	bcf0      	pop	{r4, r5, r6, r7}
 80022d0:	46bb      	mov	fp, r7
 80022d2:	46b2      	mov	sl, r6
 80022d4:	46a9      	mov	r9, r5
 80022d6:	46a0      	mov	r8, r4
 80022d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022da:	2001      	movs	r0, #1
 80022dc:	428e      	cmp	r6, r1
 80022de:	d1f6      	bne.n	80022ce <__eqdf2+0x56>
 80022e0:	4661      	mov	r1, ip
 80022e2:	4339      	orrs	r1, r7
 80022e4:	000f      	movs	r7, r1
 80022e6:	4317      	orrs	r7, r2
 80022e8:	4327      	orrs	r7, r4
 80022ea:	d1f0      	bne.n	80022ce <__eqdf2+0x56>
 80022ec:	465b      	mov	r3, fp
 80022ee:	4652      	mov	r2, sl
 80022f0:	1a98      	subs	r0, r3, r2
 80022f2:	1e43      	subs	r3, r0, #1
 80022f4:	4198      	sbcs	r0, r3
 80022f6:	e7ea      	b.n	80022ce <__eqdf2+0x56>
 80022f8:	2000      	movs	r0, #0
 80022fa:	e7e8      	b.n	80022ce <__eqdf2+0x56>
 80022fc:	000007ff 	.word	0x000007ff

08002300 <__gedf2>:
 8002300:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002302:	4657      	mov	r7, sl
 8002304:	464e      	mov	r6, r9
 8002306:	4645      	mov	r5, r8
 8002308:	46de      	mov	lr, fp
 800230a:	b5e0      	push	{r5, r6, r7, lr}
 800230c:	000d      	movs	r5, r1
 800230e:	030f      	lsls	r7, r1, #12
 8002310:	0b39      	lsrs	r1, r7, #12
 8002312:	b083      	sub	sp, #12
 8002314:	0004      	movs	r4, r0
 8002316:	4680      	mov	r8, r0
 8002318:	9101      	str	r1, [sp, #4]
 800231a:	0058      	lsls	r0, r3, #1
 800231c:	0fe9      	lsrs	r1, r5, #31
 800231e:	4f31      	ldr	r7, [pc, #196]	@ (80023e4 <__gedf2+0xe4>)
 8002320:	0d40      	lsrs	r0, r0, #21
 8002322:	468c      	mov	ip, r1
 8002324:	006e      	lsls	r6, r5, #1
 8002326:	0319      	lsls	r1, r3, #12
 8002328:	4682      	mov	sl, r0
 800232a:	4691      	mov	r9, r2
 800232c:	0d76      	lsrs	r6, r6, #21
 800232e:	0b09      	lsrs	r1, r1, #12
 8002330:	0fd8      	lsrs	r0, r3, #31
 8002332:	42be      	cmp	r6, r7
 8002334:	d01f      	beq.n	8002376 <__gedf2+0x76>
 8002336:	45ba      	cmp	sl, r7
 8002338:	d00f      	beq.n	800235a <__gedf2+0x5a>
 800233a:	2e00      	cmp	r6, #0
 800233c:	d12f      	bne.n	800239e <__gedf2+0x9e>
 800233e:	4655      	mov	r5, sl
 8002340:	9e01      	ldr	r6, [sp, #4]
 8002342:	4334      	orrs	r4, r6
 8002344:	2d00      	cmp	r5, #0
 8002346:	d127      	bne.n	8002398 <__gedf2+0x98>
 8002348:	430a      	orrs	r2, r1
 800234a:	d03a      	beq.n	80023c2 <__gedf2+0xc2>
 800234c:	2c00      	cmp	r4, #0
 800234e:	d145      	bne.n	80023dc <__gedf2+0xdc>
 8002350:	2800      	cmp	r0, #0
 8002352:	d11a      	bne.n	800238a <__gedf2+0x8a>
 8002354:	2001      	movs	r0, #1
 8002356:	4240      	negs	r0, r0
 8002358:	e017      	b.n	800238a <__gedf2+0x8a>
 800235a:	4311      	orrs	r1, r2
 800235c:	d13b      	bne.n	80023d6 <__gedf2+0xd6>
 800235e:	2e00      	cmp	r6, #0
 8002360:	d102      	bne.n	8002368 <__gedf2+0x68>
 8002362:	9f01      	ldr	r7, [sp, #4]
 8002364:	4327      	orrs	r7, r4
 8002366:	d0f3      	beq.n	8002350 <__gedf2+0x50>
 8002368:	4584      	cmp	ip, r0
 800236a:	d109      	bne.n	8002380 <__gedf2+0x80>
 800236c:	4663      	mov	r3, ip
 800236e:	2b00      	cmp	r3, #0
 8002370:	d0f0      	beq.n	8002354 <__gedf2+0x54>
 8002372:	4660      	mov	r0, ip
 8002374:	e009      	b.n	800238a <__gedf2+0x8a>
 8002376:	9f01      	ldr	r7, [sp, #4]
 8002378:	4327      	orrs	r7, r4
 800237a:	d12c      	bne.n	80023d6 <__gedf2+0xd6>
 800237c:	45b2      	cmp	sl, r6
 800237e:	d024      	beq.n	80023ca <__gedf2+0xca>
 8002380:	4663      	mov	r3, ip
 8002382:	2002      	movs	r0, #2
 8002384:	3b01      	subs	r3, #1
 8002386:	4018      	ands	r0, r3
 8002388:	3801      	subs	r0, #1
 800238a:	b003      	add	sp, #12
 800238c:	bcf0      	pop	{r4, r5, r6, r7}
 800238e:	46bb      	mov	fp, r7
 8002390:	46b2      	mov	sl, r6
 8002392:	46a9      	mov	r9, r5
 8002394:	46a0      	mov	r8, r4
 8002396:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002398:	2c00      	cmp	r4, #0
 800239a:	d0d9      	beq.n	8002350 <__gedf2+0x50>
 800239c:	e7e4      	b.n	8002368 <__gedf2+0x68>
 800239e:	4654      	mov	r4, sl
 80023a0:	2c00      	cmp	r4, #0
 80023a2:	d0ed      	beq.n	8002380 <__gedf2+0x80>
 80023a4:	4584      	cmp	ip, r0
 80023a6:	d1eb      	bne.n	8002380 <__gedf2+0x80>
 80023a8:	4556      	cmp	r6, sl
 80023aa:	dce9      	bgt.n	8002380 <__gedf2+0x80>
 80023ac:	dbde      	blt.n	800236c <__gedf2+0x6c>
 80023ae:	9b01      	ldr	r3, [sp, #4]
 80023b0:	428b      	cmp	r3, r1
 80023b2:	d8e5      	bhi.n	8002380 <__gedf2+0x80>
 80023b4:	d1da      	bne.n	800236c <__gedf2+0x6c>
 80023b6:	45c8      	cmp	r8, r9
 80023b8:	d8e2      	bhi.n	8002380 <__gedf2+0x80>
 80023ba:	2000      	movs	r0, #0
 80023bc:	45c8      	cmp	r8, r9
 80023be:	d2e4      	bcs.n	800238a <__gedf2+0x8a>
 80023c0:	e7d4      	b.n	800236c <__gedf2+0x6c>
 80023c2:	2000      	movs	r0, #0
 80023c4:	2c00      	cmp	r4, #0
 80023c6:	d0e0      	beq.n	800238a <__gedf2+0x8a>
 80023c8:	e7da      	b.n	8002380 <__gedf2+0x80>
 80023ca:	4311      	orrs	r1, r2
 80023cc:	d103      	bne.n	80023d6 <__gedf2+0xd6>
 80023ce:	4584      	cmp	ip, r0
 80023d0:	d1d6      	bne.n	8002380 <__gedf2+0x80>
 80023d2:	2000      	movs	r0, #0
 80023d4:	e7d9      	b.n	800238a <__gedf2+0x8a>
 80023d6:	2002      	movs	r0, #2
 80023d8:	4240      	negs	r0, r0
 80023da:	e7d6      	b.n	800238a <__gedf2+0x8a>
 80023dc:	4584      	cmp	ip, r0
 80023de:	d0e6      	beq.n	80023ae <__gedf2+0xae>
 80023e0:	e7ce      	b.n	8002380 <__gedf2+0x80>
 80023e2:	46c0      	nop			@ (mov r8, r8)
 80023e4:	000007ff 	.word	0x000007ff

080023e8 <__ledf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	464e      	mov	r6, r9
 80023ee:	4645      	mov	r5, r8
 80023f0:	46de      	mov	lr, fp
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	030f      	lsls	r7, r1, #12
 80023f8:	0004      	movs	r4, r0
 80023fa:	4680      	mov	r8, r0
 80023fc:	0fe8      	lsrs	r0, r5, #31
 80023fe:	0b39      	lsrs	r1, r7, #12
 8002400:	4684      	mov	ip, r0
 8002402:	b083      	sub	sp, #12
 8002404:	0058      	lsls	r0, r3, #1
 8002406:	4f30      	ldr	r7, [pc, #192]	@ (80024c8 <__ledf2+0xe0>)
 8002408:	0d40      	lsrs	r0, r0, #21
 800240a:	9101      	str	r1, [sp, #4]
 800240c:	031e      	lsls	r6, r3, #12
 800240e:	0069      	lsls	r1, r5, #1
 8002410:	4682      	mov	sl, r0
 8002412:	4691      	mov	r9, r2
 8002414:	0d49      	lsrs	r1, r1, #21
 8002416:	0b36      	lsrs	r6, r6, #12
 8002418:	0fd8      	lsrs	r0, r3, #31
 800241a:	42b9      	cmp	r1, r7
 800241c:	d020      	beq.n	8002460 <__ledf2+0x78>
 800241e:	45ba      	cmp	sl, r7
 8002420:	d00f      	beq.n	8002442 <__ledf2+0x5a>
 8002422:	2900      	cmp	r1, #0
 8002424:	d12b      	bne.n	800247e <__ledf2+0x96>
 8002426:	9901      	ldr	r1, [sp, #4]
 8002428:	430c      	orrs	r4, r1
 800242a:	4651      	mov	r1, sl
 800242c:	2900      	cmp	r1, #0
 800242e:	d137      	bne.n	80024a0 <__ledf2+0xb8>
 8002430:	4332      	orrs	r2, r6
 8002432:	d038      	beq.n	80024a6 <__ledf2+0xbe>
 8002434:	2c00      	cmp	r4, #0
 8002436:	d144      	bne.n	80024c2 <__ledf2+0xda>
 8002438:	2800      	cmp	r0, #0
 800243a:	d119      	bne.n	8002470 <__ledf2+0x88>
 800243c:	2001      	movs	r0, #1
 800243e:	4240      	negs	r0, r0
 8002440:	e016      	b.n	8002470 <__ledf2+0x88>
 8002442:	4316      	orrs	r6, r2
 8002444:	d113      	bne.n	800246e <__ledf2+0x86>
 8002446:	2900      	cmp	r1, #0
 8002448:	d102      	bne.n	8002450 <__ledf2+0x68>
 800244a:	9f01      	ldr	r7, [sp, #4]
 800244c:	4327      	orrs	r7, r4
 800244e:	d0f3      	beq.n	8002438 <__ledf2+0x50>
 8002450:	4584      	cmp	ip, r0
 8002452:	d020      	beq.n	8002496 <__ledf2+0xae>
 8002454:	4663      	mov	r3, ip
 8002456:	2002      	movs	r0, #2
 8002458:	3b01      	subs	r3, #1
 800245a:	4018      	ands	r0, r3
 800245c:	3801      	subs	r0, #1
 800245e:	e007      	b.n	8002470 <__ledf2+0x88>
 8002460:	9f01      	ldr	r7, [sp, #4]
 8002462:	4327      	orrs	r7, r4
 8002464:	d103      	bne.n	800246e <__ledf2+0x86>
 8002466:	458a      	cmp	sl, r1
 8002468:	d1f4      	bne.n	8002454 <__ledf2+0x6c>
 800246a:	4316      	orrs	r6, r2
 800246c:	d01f      	beq.n	80024ae <__ledf2+0xc6>
 800246e:	2002      	movs	r0, #2
 8002470:	b003      	add	sp, #12
 8002472:	bcf0      	pop	{r4, r5, r6, r7}
 8002474:	46bb      	mov	fp, r7
 8002476:	46b2      	mov	sl, r6
 8002478:	46a9      	mov	r9, r5
 800247a:	46a0      	mov	r8, r4
 800247c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800247e:	4654      	mov	r4, sl
 8002480:	2c00      	cmp	r4, #0
 8002482:	d0e7      	beq.n	8002454 <__ledf2+0x6c>
 8002484:	4584      	cmp	ip, r0
 8002486:	d1e5      	bne.n	8002454 <__ledf2+0x6c>
 8002488:	4551      	cmp	r1, sl
 800248a:	dce3      	bgt.n	8002454 <__ledf2+0x6c>
 800248c:	db03      	blt.n	8002496 <__ledf2+0xae>
 800248e:	9b01      	ldr	r3, [sp, #4]
 8002490:	42b3      	cmp	r3, r6
 8002492:	d8df      	bhi.n	8002454 <__ledf2+0x6c>
 8002494:	d00f      	beq.n	80024b6 <__ledf2+0xce>
 8002496:	4663      	mov	r3, ip
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0cf      	beq.n	800243c <__ledf2+0x54>
 800249c:	4660      	mov	r0, ip
 800249e:	e7e7      	b.n	8002470 <__ledf2+0x88>
 80024a0:	2c00      	cmp	r4, #0
 80024a2:	d0c9      	beq.n	8002438 <__ledf2+0x50>
 80024a4:	e7d4      	b.n	8002450 <__ledf2+0x68>
 80024a6:	2000      	movs	r0, #0
 80024a8:	2c00      	cmp	r4, #0
 80024aa:	d0e1      	beq.n	8002470 <__ledf2+0x88>
 80024ac:	e7d2      	b.n	8002454 <__ledf2+0x6c>
 80024ae:	4584      	cmp	ip, r0
 80024b0:	d1d0      	bne.n	8002454 <__ledf2+0x6c>
 80024b2:	2000      	movs	r0, #0
 80024b4:	e7dc      	b.n	8002470 <__ledf2+0x88>
 80024b6:	45c8      	cmp	r8, r9
 80024b8:	d8cc      	bhi.n	8002454 <__ledf2+0x6c>
 80024ba:	2000      	movs	r0, #0
 80024bc:	45c8      	cmp	r8, r9
 80024be:	d2d7      	bcs.n	8002470 <__ledf2+0x88>
 80024c0:	e7e9      	b.n	8002496 <__ledf2+0xae>
 80024c2:	4584      	cmp	ip, r0
 80024c4:	d0e3      	beq.n	800248e <__ledf2+0xa6>
 80024c6:	e7c5      	b.n	8002454 <__ledf2+0x6c>
 80024c8:	000007ff 	.word	0x000007ff

080024cc <__aeabi_dmul>:
 80024cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024ce:	4657      	mov	r7, sl
 80024d0:	46de      	mov	lr, fp
 80024d2:	464e      	mov	r6, r9
 80024d4:	4645      	mov	r5, r8
 80024d6:	b5e0      	push	{r5, r6, r7, lr}
 80024d8:	001f      	movs	r7, r3
 80024da:	030b      	lsls	r3, r1, #12
 80024dc:	0b1b      	lsrs	r3, r3, #12
 80024de:	0016      	movs	r6, r2
 80024e0:	469a      	mov	sl, r3
 80024e2:	0fca      	lsrs	r2, r1, #31
 80024e4:	004b      	lsls	r3, r1, #1
 80024e6:	0004      	movs	r4, r0
 80024e8:	4693      	mov	fp, r2
 80024ea:	b087      	sub	sp, #28
 80024ec:	0d5b      	lsrs	r3, r3, #21
 80024ee:	d100      	bne.n	80024f2 <__aeabi_dmul+0x26>
 80024f0:	e0d5      	b.n	800269e <__aeabi_dmul+0x1d2>
 80024f2:	4abb      	ldr	r2, [pc, #748]	@ (80027e0 <__aeabi_dmul+0x314>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d100      	bne.n	80024fa <__aeabi_dmul+0x2e>
 80024f8:	e0f8      	b.n	80026ec <__aeabi_dmul+0x220>
 80024fa:	4651      	mov	r1, sl
 80024fc:	0f42      	lsrs	r2, r0, #29
 80024fe:	00c9      	lsls	r1, r1, #3
 8002500:	430a      	orrs	r2, r1
 8002502:	2180      	movs	r1, #128	@ 0x80
 8002504:	0409      	lsls	r1, r1, #16
 8002506:	4311      	orrs	r1, r2
 8002508:	00c2      	lsls	r2, r0, #3
 800250a:	4691      	mov	r9, r2
 800250c:	4ab5      	ldr	r2, [pc, #724]	@ (80027e4 <__aeabi_dmul+0x318>)
 800250e:	468a      	mov	sl, r1
 8002510:	189d      	adds	r5, r3, r2
 8002512:	2300      	movs	r3, #0
 8002514:	4698      	mov	r8, r3
 8002516:	9302      	str	r3, [sp, #8]
 8002518:	033c      	lsls	r4, r7, #12
 800251a:	007b      	lsls	r3, r7, #1
 800251c:	0ffa      	lsrs	r2, r7, #31
 800251e:	0030      	movs	r0, r6
 8002520:	0b24      	lsrs	r4, r4, #12
 8002522:	0d5b      	lsrs	r3, r3, #21
 8002524:	9200      	str	r2, [sp, #0]
 8002526:	d100      	bne.n	800252a <__aeabi_dmul+0x5e>
 8002528:	e096      	b.n	8002658 <__aeabi_dmul+0x18c>
 800252a:	4aad      	ldr	r2, [pc, #692]	@ (80027e0 <__aeabi_dmul+0x314>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d031      	beq.n	8002594 <__aeabi_dmul+0xc8>
 8002530:	0f72      	lsrs	r2, r6, #29
 8002532:	00e4      	lsls	r4, r4, #3
 8002534:	4322      	orrs	r2, r4
 8002536:	2480      	movs	r4, #128	@ 0x80
 8002538:	0424      	lsls	r4, r4, #16
 800253a:	4314      	orrs	r4, r2
 800253c:	4aa9      	ldr	r2, [pc, #676]	@ (80027e4 <__aeabi_dmul+0x318>)
 800253e:	00f0      	lsls	r0, r6, #3
 8002540:	4694      	mov	ip, r2
 8002542:	4463      	add	r3, ip
 8002544:	195b      	adds	r3, r3, r5
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	9201      	str	r2, [sp, #4]
 800254a:	4642      	mov	r2, r8
 800254c:	2600      	movs	r6, #0
 800254e:	2a0a      	cmp	r2, #10
 8002550:	dc42      	bgt.n	80025d8 <__aeabi_dmul+0x10c>
 8002552:	465a      	mov	r2, fp
 8002554:	9900      	ldr	r1, [sp, #0]
 8002556:	404a      	eors	r2, r1
 8002558:	4693      	mov	fp, r2
 800255a:	4642      	mov	r2, r8
 800255c:	2a02      	cmp	r2, #2
 800255e:	dc32      	bgt.n	80025c6 <__aeabi_dmul+0xfa>
 8002560:	3a01      	subs	r2, #1
 8002562:	2a01      	cmp	r2, #1
 8002564:	d900      	bls.n	8002568 <__aeabi_dmul+0x9c>
 8002566:	e149      	b.n	80027fc <__aeabi_dmul+0x330>
 8002568:	2e02      	cmp	r6, #2
 800256a:	d100      	bne.n	800256e <__aeabi_dmul+0xa2>
 800256c:	e0ca      	b.n	8002704 <__aeabi_dmul+0x238>
 800256e:	2e01      	cmp	r6, #1
 8002570:	d13d      	bne.n	80025ee <__aeabi_dmul+0x122>
 8002572:	2300      	movs	r3, #0
 8002574:	2400      	movs	r4, #0
 8002576:	2200      	movs	r2, #0
 8002578:	0010      	movs	r0, r2
 800257a:	465a      	mov	r2, fp
 800257c:	051b      	lsls	r3, r3, #20
 800257e:	4323      	orrs	r3, r4
 8002580:	07d2      	lsls	r2, r2, #31
 8002582:	4313      	orrs	r3, r2
 8002584:	0019      	movs	r1, r3
 8002586:	b007      	add	sp, #28
 8002588:	bcf0      	pop	{r4, r5, r6, r7}
 800258a:	46bb      	mov	fp, r7
 800258c:	46b2      	mov	sl, r6
 800258e:	46a9      	mov	r9, r5
 8002590:	46a0      	mov	r8, r4
 8002592:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002594:	4b92      	ldr	r3, [pc, #584]	@ (80027e0 <__aeabi_dmul+0x314>)
 8002596:	4326      	orrs	r6, r4
 8002598:	18eb      	adds	r3, r5, r3
 800259a:	2e00      	cmp	r6, #0
 800259c:	d100      	bne.n	80025a0 <__aeabi_dmul+0xd4>
 800259e:	e0bb      	b.n	8002718 <__aeabi_dmul+0x24c>
 80025a0:	2203      	movs	r2, #3
 80025a2:	4641      	mov	r1, r8
 80025a4:	4311      	orrs	r1, r2
 80025a6:	465a      	mov	r2, fp
 80025a8:	4688      	mov	r8, r1
 80025aa:	9900      	ldr	r1, [sp, #0]
 80025ac:	404a      	eors	r2, r1
 80025ae:	2180      	movs	r1, #128	@ 0x80
 80025b0:	0109      	lsls	r1, r1, #4
 80025b2:	468c      	mov	ip, r1
 80025b4:	0029      	movs	r1, r5
 80025b6:	4461      	add	r1, ip
 80025b8:	9101      	str	r1, [sp, #4]
 80025ba:	4641      	mov	r1, r8
 80025bc:	290a      	cmp	r1, #10
 80025be:	dd00      	ble.n	80025c2 <__aeabi_dmul+0xf6>
 80025c0:	e233      	b.n	8002a2a <__aeabi_dmul+0x55e>
 80025c2:	4693      	mov	fp, r2
 80025c4:	2603      	movs	r6, #3
 80025c6:	4642      	mov	r2, r8
 80025c8:	2701      	movs	r7, #1
 80025ca:	4097      	lsls	r7, r2
 80025cc:	21a6      	movs	r1, #166	@ 0xa6
 80025ce:	003a      	movs	r2, r7
 80025d0:	00c9      	lsls	r1, r1, #3
 80025d2:	400a      	ands	r2, r1
 80025d4:	420f      	tst	r7, r1
 80025d6:	d031      	beq.n	800263c <__aeabi_dmul+0x170>
 80025d8:	9e02      	ldr	r6, [sp, #8]
 80025da:	2e02      	cmp	r6, #2
 80025dc:	d100      	bne.n	80025e0 <__aeabi_dmul+0x114>
 80025de:	e235      	b.n	8002a4c <__aeabi_dmul+0x580>
 80025e0:	2e03      	cmp	r6, #3
 80025e2:	d100      	bne.n	80025e6 <__aeabi_dmul+0x11a>
 80025e4:	e1d2      	b.n	800298c <__aeabi_dmul+0x4c0>
 80025e6:	4654      	mov	r4, sl
 80025e8:	4648      	mov	r0, r9
 80025ea:	2e01      	cmp	r6, #1
 80025ec:	d0c1      	beq.n	8002572 <__aeabi_dmul+0xa6>
 80025ee:	9a01      	ldr	r2, [sp, #4]
 80025f0:	4b7d      	ldr	r3, [pc, #500]	@ (80027e8 <__aeabi_dmul+0x31c>)
 80025f2:	4694      	mov	ip, r2
 80025f4:	4463      	add	r3, ip
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	dc00      	bgt.n	80025fc <__aeabi_dmul+0x130>
 80025fa:	e0c0      	b.n	800277e <__aeabi_dmul+0x2b2>
 80025fc:	0742      	lsls	r2, r0, #29
 80025fe:	d009      	beq.n	8002614 <__aeabi_dmul+0x148>
 8002600:	220f      	movs	r2, #15
 8002602:	4002      	ands	r2, r0
 8002604:	2a04      	cmp	r2, #4
 8002606:	d005      	beq.n	8002614 <__aeabi_dmul+0x148>
 8002608:	1d02      	adds	r2, r0, #4
 800260a:	4282      	cmp	r2, r0
 800260c:	4180      	sbcs	r0, r0
 800260e:	4240      	negs	r0, r0
 8002610:	1824      	adds	r4, r4, r0
 8002612:	0010      	movs	r0, r2
 8002614:	01e2      	lsls	r2, r4, #7
 8002616:	d506      	bpl.n	8002626 <__aeabi_dmul+0x15a>
 8002618:	4b74      	ldr	r3, [pc, #464]	@ (80027ec <__aeabi_dmul+0x320>)
 800261a:	9a01      	ldr	r2, [sp, #4]
 800261c:	401c      	ands	r4, r3
 800261e:	2380      	movs	r3, #128	@ 0x80
 8002620:	4694      	mov	ip, r2
 8002622:	00db      	lsls	r3, r3, #3
 8002624:	4463      	add	r3, ip
 8002626:	4a72      	ldr	r2, [pc, #456]	@ (80027f0 <__aeabi_dmul+0x324>)
 8002628:	4293      	cmp	r3, r2
 800262a:	dc6b      	bgt.n	8002704 <__aeabi_dmul+0x238>
 800262c:	0762      	lsls	r2, r4, #29
 800262e:	08c0      	lsrs	r0, r0, #3
 8002630:	0264      	lsls	r4, r4, #9
 8002632:	055b      	lsls	r3, r3, #21
 8002634:	4302      	orrs	r2, r0
 8002636:	0b24      	lsrs	r4, r4, #12
 8002638:	0d5b      	lsrs	r3, r3, #21
 800263a:	e79d      	b.n	8002578 <__aeabi_dmul+0xac>
 800263c:	2190      	movs	r1, #144	@ 0x90
 800263e:	0089      	lsls	r1, r1, #2
 8002640:	420f      	tst	r7, r1
 8002642:	d163      	bne.n	800270c <__aeabi_dmul+0x240>
 8002644:	2288      	movs	r2, #136	@ 0x88
 8002646:	423a      	tst	r2, r7
 8002648:	d100      	bne.n	800264c <__aeabi_dmul+0x180>
 800264a:	e0d7      	b.n	80027fc <__aeabi_dmul+0x330>
 800264c:	9b00      	ldr	r3, [sp, #0]
 800264e:	46a2      	mov	sl, r4
 8002650:	469b      	mov	fp, r3
 8002652:	4681      	mov	r9, r0
 8002654:	9602      	str	r6, [sp, #8]
 8002656:	e7bf      	b.n	80025d8 <__aeabi_dmul+0x10c>
 8002658:	0023      	movs	r3, r4
 800265a:	4333      	orrs	r3, r6
 800265c:	d100      	bne.n	8002660 <__aeabi_dmul+0x194>
 800265e:	e07f      	b.n	8002760 <__aeabi_dmul+0x294>
 8002660:	2c00      	cmp	r4, #0
 8002662:	d100      	bne.n	8002666 <__aeabi_dmul+0x19a>
 8002664:	e1ad      	b.n	80029c2 <__aeabi_dmul+0x4f6>
 8002666:	0020      	movs	r0, r4
 8002668:	f000 fec8 	bl	80033fc <__clzsi2>
 800266c:	0002      	movs	r2, r0
 800266e:	0003      	movs	r3, r0
 8002670:	3a0b      	subs	r2, #11
 8002672:	201d      	movs	r0, #29
 8002674:	0019      	movs	r1, r3
 8002676:	1a82      	subs	r2, r0, r2
 8002678:	0030      	movs	r0, r6
 800267a:	3908      	subs	r1, #8
 800267c:	40d0      	lsrs	r0, r2
 800267e:	408c      	lsls	r4, r1
 8002680:	4304      	orrs	r4, r0
 8002682:	0030      	movs	r0, r6
 8002684:	4088      	lsls	r0, r1
 8002686:	4a5b      	ldr	r2, [pc, #364]	@ (80027f4 <__aeabi_dmul+0x328>)
 8002688:	1aeb      	subs	r3, r5, r3
 800268a:	4694      	mov	ip, r2
 800268c:	4463      	add	r3, ip
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	9201      	str	r2, [sp, #4]
 8002692:	4642      	mov	r2, r8
 8002694:	2600      	movs	r6, #0
 8002696:	2a0a      	cmp	r2, #10
 8002698:	dc00      	bgt.n	800269c <__aeabi_dmul+0x1d0>
 800269a:	e75a      	b.n	8002552 <__aeabi_dmul+0x86>
 800269c:	e79c      	b.n	80025d8 <__aeabi_dmul+0x10c>
 800269e:	4653      	mov	r3, sl
 80026a0:	4303      	orrs	r3, r0
 80026a2:	4699      	mov	r9, r3
 80026a4:	d054      	beq.n	8002750 <__aeabi_dmul+0x284>
 80026a6:	4653      	mov	r3, sl
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d100      	bne.n	80026ae <__aeabi_dmul+0x1e2>
 80026ac:	e177      	b.n	800299e <__aeabi_dmul+0x4d2>
 80026ae:	4650      	mov	r0, sl
 80026b0:	f000 fea4 	bl	80033fc <__clzsi2>
 80026b4:	230b      	movs	r3, #11
 80026b6:	425b      	negs	r3, r3
 80026b8:	469c      	mov	ip, r3
 80026ba:	0002      	movs	r2, r0
 80026bc:	4484      	add	ip, r0
 80026be:	0011      	movs	r1, r2
 80026c0:	4650      	mov	r0, sl
 80026c2:	3908      	subs	r1, #8
 80026c4:	4088      	lsls	r0, r1
 80026c6:	231d      	movs	r3, #29
 80026c8:	4680      	mov	r8, r0
 80026ca:	4660      	mov	r0, ip
 80026cc:	1a1b      	subs	r3, r3, r0
 80026ce:	0020      	movs	r0, r4
 80026d0:	40d8      	lsrs	r0, r3
 80026d2:	0003      	movs	r3, r0
 80026d4:	4640      	mov	r0, r8
 80026d6:	4303      	orrs	r3, r0
 80026d8:	469a      	mov	sl, r3
 80026da:	0023      	movs	r3, r4
 80026dc:	408b      	lsls	r3, r1
 80026de:	4699      	mov	r9, r3
 80026e0:	2300      	movs	r3, #0
 80026e2:	4d44      	ldr	r5, [pc, #272]	@ (80027f4 <__aeabi_dmul+0x328>)
 80026e4:	4698      	mov	r8, r3
 80026e6:	1aad      	subs	r5, r5, r2
 80026e8:	9302      	str	r3, [sp, #8]
 80026ea:	e715      	b.n	8002518 <__aeabi_dmul+0x4c>
 80026ec:	4652      	mov	r2, sl
 80026ee:	4302      	orrs	r2, r0
 80026f0:	4691      	mov	r9, r2
 80026f2:	d126      	bne.n	8002742 <__aeabi_dmul+0x276>
 80026f4:	2200      	movs	r2, #0
 80026f6:	001d      	movs	r5, r3
 80026f8:	2302      	movs	r3, #2
 80026fa:	4692      	mov	sl, r2
 80026fc:	3208      	adds	r2, #8
 80026fe:	4690      	mov	r8, r2
 8002700:	9302      	str	r3, [sp, #8]
 8002702:	e709      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002704:	2400      	movs	r4, #0
 8002706:	2200      	movs	r2, #0
 8002708:	4b35      	ldr	r3, [pc, #212]	@ (80027e0 <__aeabi_dmul+0x314>)
 800270a:	e735      	b.n	8002578 <__aeabi_dmul+0xac>
 800270c:	2300      	movs	r3, #0
 800270e:	2480      	movs	r4, #128	@ 0x80
 8002710:	469b      	mov	fp, r3
 8002712:	0324      	lsls	r4, r4, #12
 8002714:	4b32      	ldr	r3, [pc, #200]	@ (80027e0 <__aeabi_dmul+0x314>)
 8002716:	e72f      	b.n	8002578 <__aeabi_dmul+0xac>
 8002718:	2202      	movs	r2, #2
 800271a:	4641      	mov	r1, r8
 800271c:	4311      	orrs	r1, r2
 800271e:	2280      	movs	r2, #128	@ 0x80
 8002720:	0112      	lsls	r2, r2, #4
 8002722:	4694      	mov	ip, r2
 8002724:	002a      	movs	r2, r5
 8002726:	4462      	add	r2, ip
 8002728:	4688      	mov	r8, r1
 800272a:	9201      	str	r2, [sp, #4]
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0x266>
 8002730:	e752      	b.n	80025d8 <__aeabi_dmul+0x10c>
 8002732:	465a      	mov	r2, fp
 8002734:	2000      	movs	r0, #0
 8002736:	9900      	ldr	r1, [sp, #0]
 8002738:	0004      	movs	r4, r0
 800273a:	404a      	eors	r2, r1
 800273c:	4693      	mov	fp, r2
 800273e:	2602      	movs	r6, #2
 8002740:	e70b      	b.n	800255a <__aeabi_dmul+0x8e>
 8002742:	220c      	movs	r2, #12
 8002744:	001d      	movs	r5, r3
 8002746:	2303      	movs	r3, #3
 8002748:	4681      	mov	r9, r0
 800274a:	4690      	mov	r8, r2
 800274c:	9302      	str	r3, [sp, #8]
 800274e:	e6e3      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002750:	2300      	movs	r3, #0
 8002752:	469a      	mov	sl, r3
 8002754:	3304      	adds	r3, #4
 8002756:	4698      	mov	r8, r3
 8002758:	3b03      	subs	r3, #3
 800275a:	2500      	movs	r5, #0
 800275c:	9302      	str	r3, [sp, #8]
 800275e:	e6db      	b.n	8002518 <__aeabi_dmul+0x4c>
 8002760:	4642      	mov	r2, r8
 8002762:	3301      	adds	r3, #1
 8002764:	431a      	orrs	r2, r3
 8002766:	002b      	movs	r3, r5
 8002768:	4690      	mov	r8, r2
 800276a:	1c5a      	adds	r2, r3, #1
 800276c:	9201      	str	r2, [sp, #4]
 800276e:	4642      	mov	r2, r8
 8002770:	2400      	movs	r4, #0
 8002772:	2000      	movs	r0, #0
 8002774:	2601      	movs	r6, #1
 8002776:	2a0a      	cmp	r2, #10
 8002778:	dc00      	bgt.n	800277c <__aeabi_dmul+0x2b0>
 800277a:	e6ea      	b.n	8002552 <__aeabi_dmul+0x86>
 800277c:	e72c      	b.n	80025d8 <__aeabi_dmul+0x10c>
 800277e:	2201      	movs	r2, #1
 8002780:	1ad2      	subs	r2, r2, r3
 8002782:	2a38      	cmp	r2, #56	@ 0x38
 8002784:	dd00      	ble.n	8002788 <__aeabi_dmul+0x2bc>
 8002786:	e6f4      	b.n	8002572 <__aeabi_dmul+0xa6>
 8002788:	2a1f      	cmp	r2, #31
 800278a:	dc00      	bgt.n	800278e <__aeabi_dmul+0x2c2>
 800278c:	e12a      	b.n	80029e4 <__aeabi_dmul+0x518>
 800278e:	211f      	movs	r1, #31
 8002790:	4249      	negs	r1, r1
 8002792:	1acb      	subs	r3, r1, r3
 8002794:	0021      	movs	r1, r4
 8002796:	40d9      	lsrs	r1, r3
 8002798:	000b      	movs	r3, r1
 800279a:	2a20      	cmp	r2, #32
 800279c:	d005      	beq.n	80027aa <__aeabi_dmul+0x2de>
 800279e:	4a16      	ldr	r2, [pc, #88]	@ (80027f8 <__aeabi_dmul+0x32c>)
 80027a0:	9d01      	ldr	r5, [sp, #4]
 80027a2:	4694      	mov	ip, r2
 80027a4:	4465      	add	r5, ip
 80027a6:	40ac      	lsls	r4, r5
 80027a8:	4320      	orrs	r0, r4
 80027aa:	1e42      	subs	r2, r0, #1
 80027ac:	4190      	sbcs	r0, r2
 80027ae:	4318      	orrs	r0, r3
 80027b0:	2307      	movs	r3, #7
 80027b2:	0019      	movs	r1, r3
 80027b4:	2400      	movs	r4, #0
 80027b6:	4001      	ands	r1, r0
 80027b8:	4203      	tst	r3, r0
 80027ba:	d00c      	beq.n	80027d6 <__aeabi_dmul+0x30a>
 80027bc:	230f      	movs	r3, #15
 80027be:	4003      	ands	r3, r0
 80027c0:	2b04      	cmp	r3, #4
 80027c2:	d100      	bne.n	80027c6 <__aeabi_dmul+0x2fa>
 80027c4:	e140      	b.n	8002a48 <__aeabi_dmul+0x57c>
 80027c6:	1d03      	adds	r3, r0, #4
 80027c8:	4283      	cmp	r3, r0
 80027ca:	41a4      	sbcs	r4, r4
 80027cc:	0018      	movs	r0, r3
 80027ce:	4264      	negs	r4, r4
 80027d0:	0761      	lsls	r1, r4, #29
 80027d2:	0264      	lsls	r4, r4, #9
 80027d4:	0b24      	lsrs	r4, r4, #12
 80027d6:	08c2      	lsrs	r2, r0, #3
 80027d8:	2300      	movs	r3, #0
 80027da:	430a      	orrs	r2, r1
 80027dc:	e6cc      	b.n	8002578 <__aeabi_dmul+0xac>
 80027de:	46c0      	nop			@ (mov r8, r8)
 80027e0:	000007ff 	.word	0x000007ff
 80027e4:	fffffc01 	.word	0xfffffc01
 80027e8:	000003ff 	.word	0x000003ff
 80027ec:	feffffff 	.word	0xfeffffff
 80027f0:	000007fe 	.word	0x000007fe
 80027f4:	fffffc0d 	.word	0xfffffc0d
 80027f8:	0000043e 	.word	0x0000043e
 80027fc:	4649      	mov	r1, r9
 80027fe:	464a      	mov	r2, r9
 8002800:	0409      	lsls	r1, r1, #16
 8002802:	0c09      	lsrs	r1, r1, #16
 8002804:	000d      	movs	r5, r1
 8002806:	0c16      	lsrs	r6, r2, #16
 8002808:	0c02      	lsrs	r2, r0, #16
 800280a:	0400      	lsls	r0, r0, #16
 800280c:	0c00      	lsrs	r0, r0, #16
 800280e:	4345      	muls	r5, r0
 8002810:	46ac      	mov	ip, r5
 8002812:	0005      	movs	r5, r0
 8002814:	4375      	muls	r5, r6
 8002816:	46a8      	mov	r8, r5
 8002818:	0015      	movs	r5, r2
 800281a:	000f      	movs	r7, r1
 800281c:	4375      	muls	r5, r6
 800281e:	9200      	str	r2, [sp, #0]
 8002820:	9502      	str	r5, [sp, #8]
 8002822:	002a      	movs	r2, r5
 8002824:	9d00      	ldr	r5, [sp, #0]
 8002826:	436f      	muls	r7, r5
 8002828:	4665      	mov	r5, ip
 800282a:	0c2d      	lsrs	r5, r5, #16
 800282c:	46a9      	mov	r9, r5
 800282e:	4447      	add	r7, r8
 8002830:	444f      	add	r7, r9
 8002832:	45b8      	cmp	r8, r7
 8002834:	d905      	bls.n	8002842 <__aeabi_dmul+0x376>
 8002836:	0015      	movs	r5, r2
 8002838:	2280      	movs	r2, #128	@ 0x80
 800283a:	0252      	lsls	r2, r2, #9
 800283c:	4690      	mov	r8, r2
 800283e:	4445      	add	r5, r8
 8002840:	9502      	str	r5, [sp, #8]
 8002842:	0c3d      	lsrs	r5, r7, #16
 8002844:	9503      	str	r5, [sp, #12]
 8002846:	4665      	mov	r5, ip
 8002848:	042d      	lsls	r5, r5, #16
 800284a:	043f      	lsls	r7, r7, #16
 800284c:	0c2d      	lsrs	r5, r5, #16
 800284e:	46ac      	mov	ip, r5
 8002850:	003d      	movs	r5, r7
 8002852:	4465      	add	r5, ip
 8002854:	9504      	str	r5, [sp, #16]
 8002856:	0c25      	lsrs	r5, r4, #16
 8002858:	0424      	lsls	r4, r4, #16
 800285a:	0c24      	lsrs	r4, r4, #16
 800285c:	46ac      	mov	ip, r5
 800285e:	0025      	movs	r5, r4
 8002860:	4375      	muls	r5, r6
 8002862:	46a8      	mov	r8, r5
 8002864:	4665      	mov	r5, ip
 8002866:	000f      	movs	r7, r1
 8002868:	4369      	muls	r1, r5
 800286a:	4441      	add	r1, r8
 800286c:	4689      	mov	r9, r1
 800286e:	4367      	muls	r7, r4
 8002870:	0c39      	lsrs	r1, r7, #16
 8002872:	4449      	add	r1, r9
 8002874:	436e      	muls	r6, r5
 8002876:	4588      	cmp	r8, r1
 8002878:	d903      	bls.n	8002882 <__aeabi_dmul+0x3b6>
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	0252      	lsls	r2, r2, #9
 800287e:	4690      	mov	r8, r2
 8002880:	4446      	add	r6, r8
 8002882:	0c0d      	lsrs	r5, r1, #16
 8002884:	46a8      	mov	r8, r5
 8002886:	0035      	movs	r5, r6
 8002888:	4445      	add	r5, r8
 800288a:	9505      	str	r5, [sp, #20]
 800288c:	9d03      	ldr	r5, [sp, #12]
 800288e:	043f      	lsls	r7, r7, #16
 8002890:	46a8      	mov	r8, r5
 8002892:	0c3f      	lsrs	r7, r7, #16
 8002894:	0409      	lsls	r1, r1, #16
 8002896:	19c9      	adds	r1, r1, r7
 8002898:	4488      	add	r8, r1
 800289a:	4645      	mov	r5, r8
 800289c:	9503      	str	r5, [sp, #12]
 800289e:	4655      	mov	r5, sl
 80028a0:	042e      	lsls	r6, r5, #16
 80028a2:	0c36      	lsrs	r6, r6, #16
 80028a4:	0c2f      	lsrs	r7, r5, #16
 80028a6:	0035      	movs	r5, r6
 80028a8:	4345      	muls	r5, r0
 80028aa:	4378      	muls	r0, r7
 80028ac:	4681      	mov	r9, r0
 80028ae:	0038      	movs	r0, r7
 80028b0:	46a8      	mov	r8, r5
 80028b2:	0c2d      	lsrs	r5, r5, #16
 80028b4:	46aa      	mov	sl, r5
 80028b6:	9a00      	ldr	r2, [sp, #0]
 80028b8:	4350      	muls	r0, r2
 80028ba:	4372      	muls	r2, r6
 80028bc:	444a      	add	r2, r9
 80028be:	4452      	add	r2, sl
 80028c0:	4591      	cmp	r9, r2
 80028c2:	d903      	bls.n	80028cc <__aeabi_dmul+0x400>
 80028c4:	2580      	movs	r5, #128	@ 0x80
 80028c6:	026d      	lsls	r5, r5, #9
 80028c8:	46a9      	mov	r9, r5
 80028ca:	4448      	add	r0, r9
 80028cc:	0c15      	lsrs	r5, r2, #16
 80028ce:	46a9      	mov	r9, r5
 80028d0:	4645      	mov	r5, r8
 80028d2:	042d      	lsls	r5, r5, #16
 80028d4:	0c2d      	lsrs	r5, r5, #16
 80028d6:	46a8      	mov	r8, r5
 80028d8:	4665      	mov	r5, ip
 80028da:	437d      	muls	r5, r7
 80028dc:	0412      	lsls	r2, r2, #16
 80028de:	4448      	add	r0, r9
 80028e0:	4490      	add	r8, r2
 80028e2:	46a9      	mov	r9, r5
 80028e4:	0032      	movs	r2, r6
 80028e6:	4665      	mov	r5, ip
 80028e8:	4362      	muls	r2, r4
 80028ea:	436e      	muls	r6, r5
 80028ec:	437c      	muls	r4, r7
 80028ee:	0c17      	lsrs	r7, r2, #16
 80028f0:	1936      	adds	r6, r6, r4
 80028f2:	19bf      	adds	r7, r7, r6
 80028f4:	42bc      	cmp	r4, r7
 80028f6:	d903      	bls.n	8002900 <__aeabi_dmul+0x434>
 80028f8:	2480      	movs	r4, #128	@ 0x80
 80028fa:	0264      	lsls	r4, r4, #9
 80028fc:	46a4      	mov	ip, r4
 80028fe:	44e1      	add	r9, ip
 8002900:	9c02      	ldr	r4, [sp, #8]
 8002902:	9e03      	ldr	r6, [sp, #12]
 8002904:	46a4      	mov	ip, r4
 8002906:	9d05      	ldr	r5, [sp, #20]
 8002908:	4466      	add	r6, ip
 800290a:	428e      	cmp	r6, r1
 800290c:	4189      	sbcs	r1, r1
 800290e:	46ac      	mov	ip, r5
 8002910:	0412      	lsls	r2, r2, #16
 8002912:	043c      	lsls	r4, r7, #16
 8002914:	0c12      	lsrs	r2, r2, #16
 8002916:	18a2      	adds	r2, r4, r2
 8002918:	4462      	add	r2, ip
 800291a:	4249      	negs	r1, r1
 800291c:	1854      	adds	r4, r2, r1
 800291e:	4446      	add	r6, r8
 8002920:	46a4      	mov	ip, r4
 8002922:	4546      	cmp	r6, r8
 8002924:	41a4      	sbcs	r4, r4
 8002926:	4682      	mov	sl, r0
 8002928:	4264      	negs	r4, r4
 800292a:	46a0      	mov	r8, r4
 800292c:	42aa      	cmp	r2, r5
 800292e:	4192      	sbcs	r2, r2
 8002930:	458c      	cmp	ip, r1
 8002932:	4189      	sbcs	r1, r1
 8002934:	44e2      	add	sl, ip
 8002936:	44d0      	add	r8, sl
 8002938:	4249      	negs	r1, r1
 800293a:	4252      	negs	r2, r2
 800293c:	430a      	orrs	r2, r1
 800293e:	45a0      	cmp	r8, r4
 8002940:	41a4      	sbcs	r4, r4
 8002942:	4582      	cmp	sl, r0
 8002944:	4189      	sbcs	r1, r1
 8002946:	4264      	negs	r4, r4
 8002948:	4249      	negs	r1, r1
 800294a:	430c      	orrs	r4, r1
 800294c:	4641      	mov	r1, r8
 800294e:	0c3f      	lsrs	r7, r7, #16
 8002950:	19d2      	adds	r2, r2, r7
 8002952:	1912      	adds	r2, r2, r4
 8002954:	0dcc      	lsrs	r4, r1, #23
 8002956:	9904      	ldr	r1, [sp, #16]
 8002958:	0270      	lsls	r0, r6, #9
 800295a:	4308      	orrs	r0, r1
 800295c:	1e41      	subs	r1, r0, #1
 800295e:	4188      	sbcs	r0, r1
 8002960:	4641      	mov	r1, r8
 8002962:	444a      	add	r2, r9
 8002964:	0df6      	lsrs	r6, r6, #23
 8002966:	0252      	lsls	r2, r2, #9
 8002968:	4330      	orrs	r0, r6
 800296a:	0249      	lsls	r1, r1, #9
 800296c:	4314      	orrs	r4, r2
 800296e:	4308      	orrs	r0, r1
 8002970:	01d2      	lsls	r2, r2, #7
 8002972:	d535      	bpl.n	80029e0 <__aeabi_dmul+0x514>
 8002974:	2201      	movs	r2, #1
 8002976:	0843      	lsrs	r3, r0, #1
 8002978:	4002      	ands	r2, r0
 800297a:	4313      	orrs	r3, r2
 800297c:	07e0      	lsls	r0, r4, #31
 800297e:	4318      	orrs	r0, r3
 8002980:	0864      	lsrs	r4, r4, #1
 8002982:	e634      	b.n	80025ee <__aeabi_dmul+0x122>
 8002984:	9b00      	ldr	r3, [sp, #0]
 8002986:	46a2      	mov	sl, r4
 8002988:	469b      	mov	fp, r3
 800298a:	4681      	mov	r9, r0
 800298c:	2480      	movs	r4, #128	@ 0x80
 800298e:	4653      	mov	r3, sl
 8002990:	0324      	lsls	r4, r4, #12
 8002992:	431c      	orrs	r4, r3
 8002994:	0324      	lsls	r4, r4, #12
 8002996:	464a      	mov	r2, r9
 8002998:	4b2e      	ldr	r3, [pc, #184]	@ (8002a54 <__aeabi_dmul+0x588>)
 800299a:	0b24      	lsrs	r4, r4, #12
 800299c:	e5ec      	b.n	8002578 <__aeabi_dmul+0xac>
 800299e:	f000 fd2d 	bl	80033fc <__clzsi2>
 80029a2:	2315      	movs	r3, #21
 80029a4:	469c      	mov	ip, r3
 80029a6:	4484      	add	ip, r0
 80029a8:	0002      	movs	r2, r0
 80029aa:	4663      	mov	r3, ip
 80029ac:	3220      	adds	r2, #32
 80029ae:	2b1c      	cmp	r3, #28
 80029b0:	dc00      	bgt.n	80029b4 <__aeabi_dmul+0x4e8>
 80029b2:	e684      	b.n	80026be <__aeabi_dmul+0x1f2>
 80029b4:	2300      	movs	r3, #0
 80029b6:	4699      	mov	r9, r3
 80029b8:	0023      	movs	r3, r4
 80029ba:	3808      	subs	r0, #8
 80029bc:	4083      	lsls	r3, r0
 80029be:	469a      	mov	sl, r3
 80029c0:	e68e      	b.n	80026e0 <__aeabi_dmul+0x214>
 80029c2:	f000 fd1b 	bl	80033fc <__clzsi2>
 80029c6:	0002      	movs	r2, r0
 80029c8:	0003      	movs	r3, r0
 80029ca:	3215      	adds	r2, #21
 80029cc:	3320      	adds	r3, #32
 80029ce:	2a1c      	cmp	r2, #28
 80029d0:	dc00      	bgt.n	80029d4 <__aeabi_dmul+0x508>
 80029d2:	e64e      	b.n	8002672 <__aeabi_dmul+0x1a6>
 80029d4:	0002      	movs	r2, r0
 80029d6:	0034      	movs	r4, r6
 80029d8:	3a08      	subs	r2, #8
 80029da:	2000      	movs	r0, #0
 80029dc:	4094      	lsls	r4, r2
 80029de:	e652      	b.n	8002686 <__aeabi_dmul+0x1ba>
 80029e0:	9301      	str	r3, [sp, #4]
 80029e2:	e604      	b.n	80025ee <__aeabi_dmul+0x122>
 80029e4:	4b1c      	ldr	r3, [pc, #112]	@ (8002a58 <__aeabi_dmul+0x58c>)
 80029e6:	0021      	movs	r1, r4
 80029e8:	469c      	mov	ip, r3
 80029ea:	0003      	movs	r3, r0
 80029ec:	9d01      	ldr	r5, [sp, #4]
 80029ee:	40d3      	lsrs	r3, r2
 80029f0:	4465      	add	r5, ip
 80029f2:	40a9      	lsls	r1, r5
 80029f4:	4319      	orrs	r1, r3
 80029f6:	0003      	movs	r3, r0
 80029f8:	40ab      	lsls	r3, r5
 80029fa:	1e58      	subs	r0, r3, #1
 80029fc:	4183      	sbcs	r3, r0
 80029fe:	4319      	orrs	r1, r3
 8002a00:	0008      	movs	r0, r1
 8002a02:	40d4      	lsrs	r4, r2
 8002a04:	074b      	lsls	r3, r1, #29
 8002a06:	d009      	beq.n	8002a1c <__aeabi_dmul+0x550>
 8002a08:	230f      	movs	r3, #15
 8002a0a:	400b      	ands	r3, r1
 8002a0c:	2b04      	cmp	r3, #4
 8002a0e:	d005      	beq.n	8002a1c <__aeabi_dmul+0x550>
 8002a10:	1d0b      	adds	r3, r1, #4
 8002a12:	428b      	cmp	r3, r1
 8002a14:	4180      	sbcs	r0, r0
 8002a16:	4240      	negs	r0, r0
 8002a18:	1824      	adds	r4, r4, r0
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	0223      	lsls	r3, r4, #8
 8002a1e:	d400      	bmi.n	8002a22 <__aeabi_dmul+0x556>
 8002a20:	e6d6      	b.n	80027d0 <__aeabi_dmul+0x304>
 8002a22:	2301      	movs	r3, #1
 8002a24:	2400      	movs	r4, #0
 8002a26:	2200      	movs	r2, #0
 8002a28:	e5a6      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a2a:	290f      	cmp	r1, #15
 8002a2c:	d1aa      	bne.n	8002984 <__aeabi_dmul+0x4b8>
 8002a2e:	2380      	movs	r3, #128	@ 0x80
 8002a30:	4652      	mov	r2, sl
 8002a32:	031b      	lsls	r3, r3, #12
 8002a34:	421a      	tst	r2, r3
 8002a36:	d0a9      	beq.n	800298c <__aeabi_dmul+0x4c0>
 8002a38:	421c      	tst	r4, r3
 8002a3a:	d1a7      	bne.n	800298c <__aeabi_dmul+0x4c0>
 8002a3c:	431c      	orrs	r4, r3
 8002a3e:	9b00      	ldr	r3, [sp, #0]
 8002a40:	0002      	movs	r2, r0
 8002a42:	469b      	mov	fp, r3
 8002a44:	4b03      	ldr	r3, [pc, #12]	@ (8002a54 <__aeabi_dmul+0x588>)
 8002a46:	e597      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a48:	2400      	movs	r4, #0
 8002a4a:	e6c1      	b.n	80027d0 <__aeabi_dmul+0x304>
 8002a4c:	2400      	movs	r4, #0
 8002a4e:	4b01      	ldr	r3, [pc, #4]	@ (8002a54 <__aeabi_dmul+0x588>)
 8002a50:	0022      	movs	r2, r4
 8002a52:	e591      	b.n	8002578 <__aeabi_dmul+0xac>
 8002a54:	000007ff 	.word	0x000007ff
 8002a58:	0000041e 	.word	0x0000041e

08002a5c <__aeabi_dsub>:
 8002a5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a5e:	464e      	mov	r6, r9
 8002a60:	4645      	mov	r5, r8
 8002a62:	46de      	mov	lr, fp
 8002a64:	4657      	mov	r7, sl
 8002a66:	b5e0      	push	{r5, r6, r7, lr}
 8002a68:	b085      	sub	sp, #20
 8002a6a:	9000      	str	r0, [sp, #0]
 8002a6c:	9101      	str	r1, [sp, #4]
 8002a6e:	030c      	lsls	r4, r1, #12
 8002a70:	004f      	lsls	r7, r1, #1
 8002a72:	0fce      	lsrs	r6, r1, #31
 8002a74:	0a61      	lsrs	r1, r4, #9
 8002a76:	9c00      	ldr	r4, [sp, #0]
 8002a78:	46b0      	mov	r8, r6
 8002a7a:	0f64      	lsrs	r4, r4, #29
 8002a7c:	430c      	orrs	r4, r1
 8002a7e:	9900      	ldr	r1, [sp, #0]
 8002a80:	0d7f      	lsrs	r7, r7, #21
 8002a82:	00c8      	lsls	r0, r1, #3
 8002a84:	0011      	movs	r1, r2
 8002a86:	001a      	movs	r2, r3
 8002a88:	031b      	lsls	r3, r3, #12
 8002a8a:	469c      	mov	ip, r3
 8002a8c:	9100      	str	r1, [sp, #0]
 8002a8e:	9201      	str	r2, [sp, #4]
 8002a90:	0051      	lsls	r1, r2, #1
 8002a92:	0d4b      	lsrs	r3, r1, #21
 8002a94:	4699      	mov	r9, r3
 8002a96:	9b01      	ldr	r3, [sp, #4]
 8002a98:	9d00      	ldr	r5, [sp, #0]
 8002a9a:	0fd9      	lsrs	r1, r3, #31
 8002a9c:	4663      	mov	r3, ip
 8002a9e:	0f6a      	lsrs	r2, r5, #29
 8002aa0:	0a5b      	lsrs	r3, r3, #9
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	00ea      	lsls	r2, r5, #3
 8002aa6:	4694      	mov	ip, r2
 8002aa8:	4693      	mov	fp, r2
 8002aaa:	4ac1      	ldr	r2, [pc, #772]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002aac:	9003      	str	r0, [sp, #12]
 8002aae:	9302      	str	r3, [sp, #8]
 8002ab0:	4591      	cmp	r9, r2
 8002ab2:	d100      	bne.n	8002ab6 <__aeabi_dsub+0x5a>
 8002ab4:	e0cd      	b.n	8002c52 <__aeabi_dsub+0x1f6>
 8002ab6:	2501      	movs	r5, #1
 8002ab8:	4069      	eors	r1, r5
 8002aba:	464d      	mov	r5, r9
 8002abc:	1b7d      	subs	r5, r7, r5
 8002abe:	46aa      	mov	sl, r5
 8002ac0:	428e      	cmp	r6, r1
 8002ac2:	d100      	bne.n	8002ac6 <__aeabi_dsub+0x6a>
 8002ac4:	e080      	b.n	8002bc8 <__aeabi_dsub+0x16c>
 8002ac6:	2d00      	cmp	r5, #0
 8002ac8:	dc00      	bgt.n	8002acc <__aeabi_dsub+0x70>
 8002aca:	e335      	b.n	8003138 <__aeabi_dsub+0x6dc>
 8002acc:	4649      	mov	r1, r9
 8002ace:	2900      	cmp	r1, #0
 8002ad0:	d100      	bne.n	8002ad4 <__aeabi_dsub+0x78>
 8002ad2:	e0df      	b.n	8002c94 <__aeabi_dsub+0x238>
 8002ad4:	4297      	cmp	r7, r2
 8002ad6:	d100      	bne.n	8002ada <__aeabi_dsub+0x7e>
 8002ad8:	e194      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002ada:	4652      	mov	r2, sl
 8002adc:	2501      	movs	r5, #1
 8002ade:	2a38      	cmp	r2, #56	@ 0x38
 8002ae0:	dc19      	bgt.n	8002b16 <__aeabi_dsub+0xba>
 8002ae2:	2280      	movs	r2, #128	@ 0x80
 8002ae4:	9b02      	ldr	r3, [sp, #8]
 8002ae6:	0412      	lsls	r2, r2, #16
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	9302      	str	r3, [sp, #8]
 8002aec:	4652      	mov	r2, sl
 8002aee:	2a1f      	cmp	r2, #31
 8002af0:	dd00      	ble.n	8002af4 <__aeabi_dsub+0x98>
 8002af2:	e1e3      	b.n	8002ebc <__aeabi_dsub+0x460>
 8002af4:	4653      	mov	r3, sl
 8002af6:	2220      	movs	r2, #32
 8002af8:	4661      	mov	r1, ip
 8002afa:	9d02      	ldr	r5, [sp, #8]
 8002afc:	1ad2      	subs	r2, r2, r3
 8002afe:	4095      	lsls	r5, r2
 8002b00:	40d9      	lsrs	r1, r3
 8002b02:	430d      	orrs	r5, r1
 8002b04:	4661      	mov	r1, ip
 8002b06:	4091      	lsls	r1, r2
 8002b08:	000a      	movs	r2, r1
 8002b0a:	1e51      	subs	r1, r2, #1
 8002b0c:	418a      	sbcs	r2, r1
 8002b0e:	4315      	orrs	r5, r2
 8002b10:	9a02      	ldr	r2, [sp, #8]
 8002b12:	40da      	lsrs	r2, r3
 8002b14:	1aa4      	subs	r4, r4, r2
 8002b16:	1b45      	subs	r5, r0, r5
 8002b18:	42a8      	cmp	r0, r5
 8002b1a:	4180      	sbcs	r0, r0
 8002b1c:	4240      	negs	r0, r0
 8002b1e:	1a24      	subs	r4, r4, r0
 8002b20:	0223      	lsls	r3, r4, #8
 8002b22:	d400      	bmi.n	8002b26 <__aeabi_dsub+0xca>
 8002b24:	e13d      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002b26:	0264      	lsls	r4, r4, #9
 8002b28:	0a64      	lsrs	r4, r4, #9
 8002b2a:	2c00      	cmp	r4, #0
 8002b2c:	d100      	bne.n	8002b30 <__aeabi_dsub+0xd4>
 8002b2e:	e147      	b.n	8002dc0 <__aeabi_dsub+0x364>
 8002b30:	0020      	movs	r0, r4
 8002b32:	f000 fc63 	bl	80033fc <__clzsi2>
 8002b36:	0003      	movs	r3, r0
 8002b38:	3b08      	subs	r3, #8
 8002b3a:	2120      	movs	r1, #32
 8002b3c:	0028      	movs	r0, r5
 8002b3e:	1aca      	subs	r2, r1, r3
 8002b40:	40d0      	lsrs	r0, r2
 8002b42:	409c      	lsls	r4, r3
 8002b44:	0002      	movs	r2, r0
 8002b46:	409d      	lsls	r5, r3
 8002b48:	4322      	orrs	r2, r4
 8002b4a:	429f      	cmp	r7, r3
 8002b4c:	dd00      	ble.n	8002b50 <__aeabi_dsub+0xf4>
 8002b4e:	e177      	b.n	8002e40 <__aeabi_dsub+0x3e4>
 8002b50:	1bd8      	subs	r0, r3, r7
 8002b52:	3001      	adds	r0, #1
 8002b54:	1a09      	subs	r1, r1, r0
 8002b56:	002c      	movs	r4, r5
 8002b58:	408d      	lsls	r5, r1
 8002b5a:	40c4      	lsrs	r4, r0
 8002b5c:	1e6b      	subs	r3, r5, #1
 8002b5e:	419d      	sbcs	r5, r3
 8002b60:	0013      	movs	r3, r2
 8002b62:	40c2      	lsrs	r2, r0
 8002b64:	408b      	lsls	r3, r1
 8002b66:	4325      	orrs	r5, r4
 8002b68:	2700      	movs	r7, #0
 8002b6a:	0014      	movs	r4, r2
 8002b6c:	431d      	orrs	r5, r3
 8002b6e:	076b      	lsls	r3, r5, #29
 8002b70:	d009      	beq.n	8002b86 <__aeabi_dsub+0x12a>
 8002b72:	230f      	movs	r3, #15
 8002b74:	402b      	ands	r3, r5
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d005      	beq.n	8002b86 <__aeabi_dsub+0x12a>
 8002b7a:	1d2b      	adds	r3, r5, #4
 8002b7c:	42ab      	cmp	r3, r5
 8002b7e:	41ad      	sbcs	r5, r5
 8002b80:	426d      	negs	r5, r5
 8002b82:	1964      	adds	r4, r4, r5
 8002b84:	001d      	movs	r5, r3
 8002b86:	0223      	lsls	r3, r4, #8
 8002b88:	d400      	bmi.n	8002b8c <__aeabi_dsub+0x130>
 8002b8a:	e140      	b.n	8002e0e <__aeabi_dsub+0x3b2>
 8002b8c:	4a88      	ldr	r2, [pc, #544]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002b8e:	3701      	adds	r7, #1
 8002b90:	4297      	cmp	r7, r2
 8002b92:	d100      	bne.n	8002b96 <__aeabi_dsub+0x13a>
 8002b94:	e101      	b.n	8002d9a <__aeabi_dsub+0x33e>
 8002b96:	2601      	movs	r6, #1
 8002b98:	4643      	mov	r3, r8
 8002b9a:	4986      	ldr	r1, [pc, #536]	@ (8002db4 <__aeabi_dsub+0x358>)
 8002b9c:	08ed      	lsrs	r5, r5, #3
 8002b9e:	4021      	ands	r1, r4
 8002ba0:	074a      	lsls	r2, r1, #29
 8002ba2:	432a      	orrs	r2, r5
 8002ba4:	057c      	lsls	r4, r7, #21
 8002ba6:	024d      	lsls	r5, r1, #9
 8002ba8:	0b2d      	lsrs	r5, r5, #12
 8002baa:	0d64      	lsrs	r4, r4, #21
 8002bac:	401e      	ands	r6, r3
 8002bae:	0524      	lsls	r4, r4, #20
 8002bb0:	432c      	orrs	r4, r5
 8002bb2:	07f6      	lsls	r6, r6, #31
 8002bb4:	4334      	orrs	r4, r6
 8002bb6:	0010      	movs	r0, r2
 8002bb8:	0021      	movs	r1, r4
 8002bba:	b005      	add	sp, #20
 8002bbc:	bcf0      	pop	{r4, r5, r6, r7}
 8002bbe:	46bb      	mov	fp, r7
 8002bc0:	46b2      	mov	sl, r6
 8002bc2:	46a9      	mov	r9, r5
 8002bc4:	46a0      	mov	r8, r4
 8002bc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bc8:	2d00      	cmp	r5, #0
 8002bca:	dc00      	bgt.n	8002bce <__aeabi_dsub+0x172>
 8002bcc:	e2d0      	b.n	8003170 <__aeabi_dsub+0x714>
 8002bce:	4649      	mov	r1, r9
 8002bd0:	2900      	cmp	r1, #0
 8002bd2:	d000      	beq.n	8002bd6 <__aeabi_dsub+0x17a>
 8002bd4:	e0d4      	b.n	8002d80 <__aeabi_dsub+0x324>
 8002bd6:	4661      	mov	r1, ip
 8002bd8:	9b02      	ldr	r3, [sp, #8]
 8002bda:	4319      	orrs	r1, r3
 8002bdc:	d100      	bne.n	8002be0 <__aeabi_dsub+0x184>
 8002bde:	e12b      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002be0:	1e69      	subs	r1, r5, #1
 8002be2:	2d01      	cmp	r5, #1
 8002be4:	d100      	bne.n	8002be8 <__aeabi_dsub+0x18c>
 8002be6:	e1d9      	b.n	8002f9c <__aeabi_dsub+0x540>
 8002be8:	4295      	cmp	r5, r2
 8002bea:	d100      	bne.n	8002bee <__aeabi_dsub+0x192>
 8002bec:	e10a      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002bee:	2501      	movs	r5, #1
 8002bf0:	2938      	cmp	r1, #56	@ 0x38
 8002bf2:	dc17      	bgt.n	8002c24 <__aeabi_dsub+0x1c8>
 8002bf4:	468a      	mov	sl, r1
 8002bf6:	4653      	mov	r3, sl
 8002bf8:	2b1f      	cmp	r3, #31
 8002bfa:	dd00      	ble.n	8002bfe <__aeabi_dsub+0x1a2>
 8002bfc:	e1e7      	b.n	8002fce <__aeabi_dsub+0x572>
 8002bfe:	2220      	movs	r2, #32
 8002c00:	1ad2      	subs	r2, r2, r3
 8002c02:	9b02      	ldr	r3, [sp, #8]
 8002c04:	4661      	mov	r1, ip
 8002c06:	4093      	lsls	r3, r2
 8002c08:	001d      	movs	r5, r3
 8002c0a:	4653      	mov	r3, sl
 8002c0c:	40d9      	lsrs	r1, r3
 8002c0e:	4663      	mov	r3, ip
 8002c10:	4093      	lsls	r3, r2
 8002c12:	001a      	movs	r2, r3
 8002c14:	430d      	orrs	r5, r1
 8002c16:	1e51      	subs	r1, r2, #1
 8002c18:	418a      	sbcs	r2, r1
 8002c1a:	4653      	mov	r3, sl
 8002c1c:	4315      	orrs	r5, r2
 8002c1e:	9a02      	ldr	r2, [sp, #8]
 8002c20:	40da      	lsrs	r2, r3
 8002c22:	18a4      	adds	r4, r4, r2
 8002c24:	182d      	adds	r5, r5, r0
 8002c26:	4285      	cmp	r5, r0
 8002c28:	4180      	sbcs	r0, r0
 8002c2a:	4240      	negs	r0, r0
 8002c2c:	1824      	adds	r4, r4, r0
 8002c2e:	0223      	lsls	r3, r4, #8
 8002c30:	d400      	bmi.n	8002c34 <__aeabi_dsub+0x1d8>
 8002c32:	e0b6      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002c34:	4b5e      	ldr	r3, [pc, #376]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002c36:	3701      	adds	r7, #1
 8002c38:	429f      	cmp	r7, r3
 8002c3a:	d100      	bne.n	8002c3e <__aeabi_dsub+0x1e2>
 8002c3c:	e0ad      	b.n	8002d9a <__aeabi_dsub+0x33e>
 8002c3e:	2101      	movs	r1, #1
 8002c40:	4b5c      	ldr	r3, [pc, #368]	@ (8002db4 <__aeabi_dsub+0x358>)
 8002c42:	086a      	lsrs	r2, r5, #1
 8002c44:	401c      	ands	r4, r3
 8002c46:	4029      	ands	r1, r5
 8002c48:	430a      	orrs	r2, r1
 8002c4a:	07e5      	lsls	r5, r4, #31
 8002c4c:	4315      	orrs	r5, r2
 8002c4e:	0864      	lsrs	r4, r4, #1
 8002c50:	e78d      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002c52:	4a59      	ldr	r2, [pc, #356]	@ (8002db8 <__aeabi_dsub+0x35c>)
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	4692      	mov	sl, r2
 8002c58:	4662      	mov	r2, ip
 8002c5a:	44ba      	add	sl, r7
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	d02c      	beq.n	8002cba <__aeabi_dsub+0x25e>
 8002c60:	428e      	cmp	r6, r1
 8002c62:	d02e      	beq.n	8002cc2 <__aeabi_dsub+0x266>
 8002c64:	4652      	mov	r2, sl
 8002c66:	2a00      	cmp	r2, #0
 8002c68:	d060      	beq.n	8002d2c <__aeabi_dsub+0x2d0>
 8002c6a:	2f00      	cmp	r7, #0
 8002c6c:	d100      	bne.n	8002c70 <__aeabi_dsub+0x214>
 8002c6e:	e0db      	b.n	8002e28 <__aeabi_dsub+0x3cc>
 8002c70:	4663      	mov	r3, ip
 8002c72:	000e      	movs	r6, r1
 8002c74:	9c02      	ldr	r4, [sp, #8]
 8002c76:	08d8      	lsrs	r0, r3, #3
 8002c78:	0762      	lsls	r2, r4, #29
 8002c7a:	4302      	orrs	r2, r0
 8002c7c:	08e4      	lsrs	r4, r4, #3
 8002c7e:	0013      	movs	r3, r2
 8002c80:	4323      	orrs	r3, r4
 8002c82:	d100      	bne.n	8002c86 <__aeabi_dsub+0x22a>
 8002c84:	e254      	b.n	8003130 <__aeabi_dsub+0x6d4>
 8002c86:	2580      	movs	r5, #128	@ 0x80
 8002c88:	032d      	lsls	r5, r5, #12
 8002c8a:	4325      	orrs	r5, r4
 8002c8c:	032d      	lsls	r5, r5, #12
 8002c8e:	4c48      	ldr	r4, [pc, #288]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002c90:	0b2d      	lsrs	r5, r5, #12
 8002c92:	e78c      	b.n	8002bae <__aeabi_dsub+0x152>
 8002c94:	4661      	mov	r1, ip
 8002c96:	9b02      	ldr	r3, [sp, #8]
 8002c98:	4319      	orrs	r1, r3
 8002c9a:	d100      	bne.n	8002c9e <__aeabi_dsub+0x242>
 8002c9c:	e0cc      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002c9e:	0029      	movs	r1, r5
 8002ca0:	3901      	subs	r1, #1
 8002ca2:	2d01      	cmp	r5, #1
 8002ca4:	d100      	bne.n	8002ca8 <__aeabi_dsub+0x24c>
 8002ca6:	e188      	b.n	8002fba <__aeabi_dsub+0x55e>
 8002ca8:	4295      	cmp	r5, r2
 8002caa:	d100      	bne.n	8002cae <__aeabi_dsub+0x252>
 8002cac:	e0aa      	b.n	8002e04 <__aeabi_dsub+0x3a8>
 8002cae:	2501      	movs	r5, #1
 8002cb0:	2938      	cmp	r1, #56	@ 0x38
 8002cb2:	dd00      	ble.n	8002cb6 <__aeabi_dsub+0x25a>
 8002cb4:	e72f      	b.n	8002b16 <__aeabi_dsub+0xba>
 8002cb6:	468a      	mov	sl, r1
 8002cb8:	e718      	b.n	8002aec <__aeabi_dsub+0x90>
 8002cba:	2201      	movs	r2, #1
 8002cbc:	4051      	eors	r1, r2
 8002cbe:	428e      	cmp	r6, r1
 8002cc0:	d1d0      	bne.n	8002c64 <__aeabi_dsub+0x208>
 8002cc2:	4653      	mov	r3, sl
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d100      	bne.n	8002cca <__aeabi_dsub+0x26e>
 8002cc8:	e0be      	b.n	8002e48 <__aeabi_dsub+0x3ec>
 8002cca:	2f00      	cmp	r7, #0
 8002ccc:	d000      	beq.n	8002cd0 <__aeabi_dsub+0x274>
 8002cce:	e138      	b.n	8002f42 <__aeabi_dsub+0x4e6>
 8002cd0:	46ca      	mov	sl, r9
 8002cd2:	0022      	movs	r2, r4
 8002cd4:	4302      	orrs	r2, r0
 8002cd6:	d100      	bne.n	8002cda <__aeabi_dsub+0x27e>
 8002cd8:	e1e2      	b.n	80030a0 <__aeabi_dsub+0x644>
 8002cda:	4653      	mov	r3, sl
 8002cdc:	1e59      	subs	r1, r3, #1
 8002cde:	2b01      	cmp	r3, #1
 8002ce0:	d100      	bne.n	8002ce4 <__aeabi_dsub+0x288>
 8002ce2:	e20d      	b.n	8003100 <__aeabi_dsub+0x6a4>
 8002ce4:	4a32      	ldr	r2, [pc, #200]	@ (8002db0 <__aeabi_dsub+0x354>)
 8002ce6:	4592      	cmp	sl, r2
 8002ce8:	d100      	bne.n	8002cec <__aeabi_dsub+0x290>
 8002cea:	e1d2      	b.n	8003092 <__aeabi_dsub+0x636>
 8002cec:	2701      	movs	r7, #1
 8002cee:	2938      	cmp	r1, #56	@ 0x38
 8002cf0:	dc13      	bgt.n	8002d1a <__aeabi_dsub+0x2be>
 8002cf2:	291f      	cmp	r1, #31
 8002cf4:	dd00      	ble.n	8002cf8 <__aeabi_dsub+0x29c>
 8002cf6:	e1ee      	b.n	80030d6 <__aeabi_dsub+0x67a>
 8002cf8:	2220      	movs	r2, #32
 8002cfa:	9b02      	ldr	r3, [sp, #8]
 8002cfc:	1a52      	subs	r2, r2, r1
 8002cfe:	0025      	movs	r5, r4
 8002d00:	0007      	movs	r7, r0
 8002d02:	469a      	mov	sl, r3
 8002d04:	40cc      	lsrs	r4, r1
 8002d06:	4090      	lsls	r0, r2
 8002d08:	4095      	lsls	r5, r2
 8002d0a:	40cf      	lsrs	r7, r1
 8002d0c:	44a2      	add	sl, r4
 8002d0e:	1e42      	subs	r2, r0, #1
 8002d10:	4190      	sbcs	r0, r2
 8002d12:	4653      	mov	r3, sl
 8002d14:	432f      	orrs	r7, r5
 8002d16:	4307      	orrs	r7, r0
 8002d18:	9302      	str	r3, [sp, #8]
 8002d1a:	003d      	movs	r5, r7
 8002d1c:	4465      	add	r5, ip
 8002d1e:	4565      	cmp	r5, ip
 8002d20:	4192      	sbcs	r2, r2
 8002d22:	9b02      	ldr	r3, [sp, #8]
 8002d24:	4252      	negs	r2, r2
 8002d26:	464f      	mov	r7, r9
 8002d28:	18d4      	adds	r4, r2, r3
 8002d2a:	e780      	b.n	8002c2e <__aeabi_dsub+0x1d2>
 8002d2c:	4a23      	ldr	r2, [pc, #140]	@ (8002dbc <__aeabi_dsub+0x360>)
 8002d2e:	1c7d      	adds	r5, r7, #1
 8002d30:	4215      	tst	r5, r2
 8002d32:	d000      	beq.n	8002d36 <__aeabi_dsub+0x2da>
 8002d34:	e0aa      	b.n	8002e8c <__aeabi_dsub+0x430>
 8002d36:	4662      	mov	r2, ip
 8002d38:	0025      	movs	r5, r4
 8002d3a:	9b02      	ldr	r3, [sp, #8]
 8002d3c:	4305      	orrs	r5, r0
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	2f00      	cmp	r7, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x2ea>
 8002d44:	e0f5      	b.n	8002f32 <__aeabi_dsub+0x4d6>
 8002d46:	2d00      	cmp	r5, #0
 8002d48:	d100      	bne.n	8002d4c <__aeabi_dsub+0x2f0>
 8002d4a:	e16b      	b.n	8003024 <__aeabi_dsub+0x5c8>
 8002d4c:	2a00      	cmp	r2, #0
 8002d4e:	d100      	bne.n	8002d52 <__aeabi_dsub+0x2f6>
 8002d50:	e152      	b.n	8002ff8 <__aeabi_dsub+0x59c>
 8002d52:	4663      	mov	r3, ip
 8002d54:	1ac5      	subs	r5, r0, r3
 8002d56:	9b02      	ldr	r3, [sp, #8]
 8002d58:	1ae2      	subs	r2, r4, r3
 8002d5a:	42a8      	cmp	r0, r5
 8002d5c:	419b      	sbcs	r3, r3
 8002d5e:	425b      	negs	r3, r3
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	021a      	lsls	r2, r3, #8
 8002d64:	d400      	bmi.n	8002d68 <__aeabi_dsub+0x30c>
 8002d66:	e1d5      	b.n	8003114 <__aeabi_dsub+0x6b8>
 8002d68:	4663      	mov	r3, ip
 8002d6a:	1a1d      	subs	r5, r3, r0
 8002d6c:	45ac      	cmp	ip, r5
 8002d6e:	4192      	sbcs	r2, r2
 8002d70:	2601      	movs	r6, #1
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4252      	negs	r2, r2
 8002d76:	1b1c      	subs	r4, r3, r4
 8002d78:	4688      	mov	r8, r1
 8002d7a:	1aa4      	subs	r4, r4, r2
 8002d7c:	400e      	ands	r6, r1
 8002d7e:	e6f6      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002d80:	4297      	cmp	r7, r2
 8002d82:	d03f      	beq.n	8002e04 <__aeabi_dsub+0x3a8>
 8002d84:	4652      	mov	r2, sl
 8002d86:	2501      	movs	r5, #1
 8002d88:	2a38      	cmp	r2, #56	@ 0x38
 8002d8a:	dd00      	ble.n	8002d8e <__aeabi_dsub+0x332>
 8002d8c:	e74a      	b.n	8002c24 <__aeabi_dsub+0x1c8>
 8002d8e:	2280      	movs	r2, #128	@ 0x80
 8002d90:	9b02      	ldr	r3, [sp, #8]
 8002d92:	0412      	lsls	r2, r2, #16
 8002d94:	4313      	orrs	r3, r2
 8002d96:	9302      	str	r3, [sp, #8]
 8002d98:	e72d      	b.n	8002bf6 <__aeabi_dsub+0x19a>
 8002d9a:	003c      	movs	r4, r7
 8002d9c:	2500      	movs	r5, #0
 8002d9e:	2200      	movs	r2, #0
 8002da0:	e705      	b.n	8002bae <__aeabi_dsub+0x152>
 8002da2:	2307      	movs	r3, #7
 8002da4:	402b      	ands	r3, r5
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d000      	beq.n	8002dac <__aeabi_dsub+0x350>
 8002daa:	e6e2      	b.n	8002b72 <__aeabi_dsub+0x116>
 8002dac:	e06b      	b.n	8002e86 <__aeabi_dsub+0x42a>
 8002dae:	46c0      	nop			@ (mov r8, r8)
 8002db0:	000007ff 	.word	0x000007ff
 8002db4:	ff7fffff 	.word	0xff7fffff
 8002db8:	fffff801 	.word	0xfffff801
 8002dbc:	000007fe 	.word	0x000007fe
 8002dc0:	0028      	movs	r0, r5
 8002dc2:	f000 fb1b 	bl	80033fc <__clzsi2>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	3318      	adds	r3, #24
 8002dca:	2b1f      	cmp	r3, #31
 8002dcc:	dc00      	bgt.n	8002dd0 <__aeabi_dsub+0x374>
 8002dce:	e6b4      	b.n	8002b3a <__aeabi_dsub+0xde>
 8002dd0:	002a      	movs	r2, r5
 8002dd2:	3808      	subs	r0, #8
 8002dd4:	4082      	lsls	r2, r0
 8002dd6:	429f      	cmp	r7, r3
 8002dd8:	dd00      	ble.n	8002ddc <__aeabi_dsub+0x380>
 8002dda:	e0b9      	b.n	8002f50 <__aeabi_dsub+0x4f4>
 8002ddc:	1bdb      	subs	r3, r3, r7
 8002dde:	1c58      	adds	r0, r3, #1
 8002de0:	281f      	cmp	r0, #31
 8002de2:	dc00      	bgt.n	8002de6 <__aeabi_dsub+0x38a>
 8002de4:	e1a0      	b.n	8003128 <__aeabi_dsub+0x6cc>
 8002de6:	0015      	movs	r5, r2
 8002de8:	3b1f      	subs	r3, #31
 8002dea:	40dd      	lsrs	r5, r3
 8002dec:	2820      	cmp	r0, #32
 8002dee:	d005      	beq.n	8002dfc <__aeabi_dsub+0x3a0>
 8002df0:	2340      	movs	r3, #64	@ 0x40
 8002df2:	1a1b      	subs	r3, r3, r0
 8002df4:	409a      	lsls	r2, r3
 8002df6:	1e53      	subs	r3, r2, #1
 8002df8:	419a      	sbcs	r2, r3
 8002dfa:	4315      	orrs	r5, r2
 8002dfc:	2307      	movs	r3, #7
 8002dfe:	2700      	movs	r7, #0
 8002e00:	402b      	ands	r3, r5
 8002e02:	e7d0      	b.n	8002da6 <__aeabi_dsub+0x34a>
 8002e04:	08c0      	lsrs	r0, r0, #3
 8002e06:	0762      	lsls	r2, r4, #29
 8002e08:	4302      	orrs	r2, r0
 8002e0a:	08e4      	lsrs	r4, r4, #3
 8002e0c:	e737      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002e0e:	08ea      	lsrs	r2, r5, #3
 8002e10:	0763      	lsls	r3, r4, #29
 8002e12:	431a      	orrs	r2, r3
 8002e14:	4bd3      	ldr	r3, [pc, #844]	@ (8003164 <__aeabi_dsub+0x708>)
 8002e16:	08e4      	lsrs	r4, r4, #3
 8002e18:	429f      	cmp	r7, r3
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x3c2>
 8002e1c:	e72f      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002e1e:	0324      	lsls	r4, r4, #12
 8002e20:	0b25      	lsrs	r5, r4, #12
 8002e22:	057c      	lsls	r4, r7, #21
 8002e24:	0d64      	lsrs	r4, r4, #21
 8002e26:	e6c2      	b.n	8002bae <__aeabi_dsub+0x152>
 8002e28:	46ca      	mov	sl, r9
 8002e2a:	0022      	movs	r2, r4
 8002e2c:	4302      	orrs	r2, r0
 8002e2e:	d158      	bne.n	8002ee2 <__aeabi_dsub+0x486>
 8002e30:	4663      	mov	r3, ip
 8002e32:	000e      	movs	r6, r1
 8002e34:	9c02      	ldr	r4, [sp, #8]
 8002e36:	9303      	str	r3, [sp, #12]
 8002e38:	9b03      	ldr	r3, [sp, #12]
 8002e3a:	4657      	mov	r7, sl
 8002e3c:	08da      	lsrs	r2, r3, #3
 8002e3e:	e7e7      	b.n	8002e10 <__aeabi_dsub+0x3b4>
 8002e40:	4cc9      	ldr	r4, [pc, #804]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002e42:	1aff      	subs	r7, r7, r3
 8002e44:	4014      	ands	r4, r2
 8002e46:	e692      	b.n	8002b6e <__aeabi_dsub+0x112>
 8002e48:	4dc8      	ldr	r5, [pc, #800]	@ (800316c <__aeabi_dsub+0x710>)
 8002e4a:	1c7a      	adds	r2, r7, #1
 8002e4c:	422a      	tst	r2, r5
 8002e4e:	d000      	beq.n	8002e52 <__aeabi_dsub+0x3f6>
 8002e50:	e084      	b.n	8002f5c <__aeabi_dsub+0x500>
 8002e52:	0022      	movs	r2, r4
 8002e54:	4302      	orrs	r2, r0
 8002e56:	2f00      	cmp	r7, #0
 8002e58:	d000      	beq.n	8002e5c <__aeabi_dsub+0x400>
 8002e5a:	e0ef      	b.n	800303c <__aeabi_dsub+0x5e0>
 8002e5c:	2a00      	cmp	r2, #0
 8002e5e:	d100      	bne.n	8002e62 <__aeabi_dsub+0x406>
 8002e60:	e0e5      	b.n	800302e <__aeabi_dsub+0x5d2>
 8002e62:	4662      	mov	r2, ip
 8002e64:	9902      	ldr	r1, [sp, #8]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	d100      	bne.n	8002e6c <__aeabi_dsub+0x410>
 8002e6a:	e0c5      	b.n	8002ff8 <__aeabi_dsub+0x59c>
 8002e6c:	4663      	mov	r3, ip
 8002e6e:	18c5      	adds	r5, r0, r3
 8002e70:	468c      	mov	ip, r1
 8002e72:	4285      	cmp	r5, r0
 8002e74:	4180      	sbcs	r0, r0
 8002e76:	4464      	add	r4, ip
 8002e78:	4240      	negs	r0, r0
 8002e7a:	1824      	adds	r4, r4, r0
 8002e7c:	0223      	lsls	r3, r4, #8
 8002e7e:	d502      	bpl.n	8002e86 <__aeabi_dsub+0x42a>
 8002e80:	4bb9      	ldr	r3, [pc, #740]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002e82:	3701      	adds	r7, #1
 8002e84:	401c      	ands	r4, r3
 8002e86:	46ba      	mov	sl, r7
 8002e88:	9503      	str	r5, [sp, #12]
 8002e8a:	e7d5      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 8002e8c:	4662      	mov	r2, ip
 8002e8e:	1a85      	subs	r5, r0, r2
 8002e90:	42a8      	cmp	r0, r5
 8002e92:	4192      	sbcs	r2, r2
 8002e94:	4252      	negs	r2, r2
 8002e96:	4691      	mov	r9, r2
 8002e98:	9b02      	ldr	r3, [sp, #8]
 8002e9a:	1ae3      	subs	r3, r4, r3
 8002e9c:	001a      	movs	r2, r3
 8002e9e:	464b      	mov	r3, r9
 8002ea0:	1ad2      	subs	r2, r2, r3
 8002ea2:	0013      	movs	r3, r2
 8002ea4:	4691      	mov	r9, r2
 8002ea6:	021a      	lsls	r2, r3, #8
 8002ea8:	d46c      	bmi.n	8002f84 <__aeabi_dsub+0x528>
 8002eaa:	464a      	mov	r2, r9
 8002eac:	464c      	mov	r4, r9
 8002eae:	432a      	orrs	r2, r5
 8002eb0:	d000      	beq.n	8002eb4 <__aeabi_dsub+0x458>
 8002eb2:	e63a      	b.n	8002b2a <__aeabi_dsub+0xce>
 8002eb4:	2600      	movs	r6, #0
 8002eb6:	2400      	movs	r4, #0
 8002eb8:	2500      	movs	r5, #0
 8002eba:	e678      	b.n	8002bae <__aeabi_dsub+0x152>
 8002ebc:	9902      	ldr	r1, [sp, #8]
 8002ebe:	4653      	mov	r3, sl
 8002ec0:	000d      	movs	r5, r1
 8002ec2:	3a20      	subs	r2, #32
 8002ec4:	40d5      	lsrs	r5, r2
 8002ec6:	2b20      	cmp	r3, #32
 8002ec8:	d006      	beq.n	8002ed8 <__aeabi_dsub+0x47c>
 8002eca:	2240      	movs	r2, #64	@ 0x40
 8002ecc:	1ad2      	subs	r2, r2, r3
 8002ece:	000b      	movs	r3, r1
 8002ed0:	4093      	lsls	r3, r2
 8002ed2:	4662      	mov	r2, ip
 8002ed4:	431a      	orrs	r2, r3
 8002ed6:	4693      	mov	fp, r2
 8002ed8:	465b      	mov	r3, fp
 8002eda:	1e5a      	subs	r2, r3, #1
 8002edc:	4193      	sbcs	r3, r2
 8002ede:	431d      	orrs	r5, r3
 8002ee0:	e619      	b.n	8002b16 <__aeabi_dsub+0xba>
 8002ee2:	4653      	mov	r3, sl
 8002ee4:	1e5a      	subs	r2, r3, #1
 8002ee6:	2b01      	cmp	r3, #1
 8002ee8:	d100      	bne.n	8002eec <__aeabi_dsub+0x490>
 8002eea:	e0c6      	b.n	800307a <__aeabi_dsub+0x61e>
 8002eec:	4e9d      	ldr	r6, [pc, #628]	@ (8003164 <__aeabi_dsub+0x708>)
 8002eee:	45b2      	cmp	sl, r6
 8002ef0:	d100      	bne.n	8002ef4 <__aeabi_dsub+0x498>
 8002ef2:	e6bd      	b.n	8002c70 <__aeabi_dsub+0x214>
 8002ef4:	4688      	mov	r8, r1
 8002ef6:	000e      	movs	r6, r1
 8002ef8:	2501      	movs	r5, #1
 8002efa:	2a38      	cmp	r2, #56	@ 0x38
 8002efc:	dc10      	bgt.n	8002f20 <__aeabi_dsub+0x4c4>
 8002efe:	2a1f      	cmp	r2, #31
 8002f00:	dc7f      	bgt.n	8003002 <__aeabi_dsub+0x5a6>
 8002f02:	2120      	movs	r1, #32
 8002f04:	0025      	movs	r5, r4
 8002f06:	1a89      	subs	r1, r1, r2
 8002f08:	0007      	movs	r7, r0
 8002f0a:	4088      	lsls	r0, r1
 8002f0c:	408d      	lsls	r5, r1
 8002f0e:	40d7      	lsrs	r7, r2
 8002f10:	40d4      	lsrs	r4, r2
 8002f12:	1e41      	subs	r1, r0, #1
 8002f14:	4188      	sbcs	r0, r1
 8002f16:	9b02      	ldr	r3, [sp, #8]
 8002f18:	433d      	orrs	r5, r7
 8002f1a:	1b1b      	subs	r3, r3, r4
 8002f1c:	4305      	orrs	r5, r0
 8002f1e:	9302      	str	r3, [sp, #8]
 8002f20:	4662      	mov	r2, ip
 8002f22:	1b55      	subs	r5, r2, r5
 8002f24:	45ac      	cmp	ip, r5
 8002f26:	4192      	sbcs	r2, r2
 8002f28:	9b02      	ldr	r3, [sp, #8]
 8002f2a:	4252      	negs	r2, r2
 8002f2c:	464f      	mov	r7, r9
 8002f2e:	1a9c      	subs	r4, r3, r2
 8002f30:	e5f6      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8002f32:	2d00      	cmp	r5, #0
 8002f34:	d000      	beq.n	8002f38 <__aeabi_dsub+0x4dc>
 8002f36:	e0b7      	b.n	80030a8 <__aeabi_dsub+0x64c>
 8002f38:	2a00      	cmp	r2, #0
 8002f3a:	d100      	bne.n	8002f3e <__aeabi_dsub+0x4e2>
 8002f3c:	e0f0      	b.n	8003120 <__aeabi_dsub+0x6c4>
 8002f3e:	2601      	movs	r6, #1
 8002f40:	400e      	ands	r6, r1
 8002f42:	4663      	mov	r3, ip
 8002f44:	9802      	ldr	r0, [sp, #8]
 8002f46:	08d9      	lsrs	r1, r3, #3
 8002f48:	0742      	lsls	r2, r0, #29
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	08c4      	lsrs	r4, r0, #3
 8002f4e:	e696      	b.n	8002c7e <__aeabi_dsub+0x222>
 8002f50:	4c85      	ldr	r4, [pc, #532]	@ (8003168 <__aeabi_dsub+0x70c>)
 8002f52:	1aff      	subs	r7, r7, r3
 8002f54:	4014      	ands	r4, r2
 8002f56:	0762      	lsls	r2, r4, #29
 8002f58:	08e4      	lsrs	r4, r4, #3
 8002f5a:	e760      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 8002f5c:	4981      	ldr	r1, [pc, #516]	@ (8003164 <__aeabi_dsub+0x708>)
 8002f5e:	428a      	cmp	r2, r1
 8002f60:	d100      	bne.n	8002f64 <__aeabi_dsub+0x508>
 8002f62:	e0c9      	b.n	80030f8 <__aeabi_dsub+0x69c>
 8002f64:	4663      	mov	r3, ip
 8002f66:	18c1      	adds	r1, r0, r3
 8002f68:	4281      	cmp	r1, r0
 8002f6a:	4180      	sbcs	r0, r0
 8002f6c:	9b02      	ldr	r3, [sp, #8]
 8002f6e:	4240      	negs	r0, r0
 8002f70:	18e3      	adds	r3, r4, r3
 8002f72:	181b      	adds	r3, r3, r0
 8002f74:	07dd      	lsls	r5, r3, #31
 8002f76:	085c      	lsrs	r4, r3, #1
 8002f78:	2307      	movs	r3, #7
 8002f7a:	0849      	lsrs	r1, r1, #1
 8002f7c:	430d      	orrs	r5, r1
 8002f7e:	0017      	movs	r7, r2
 8002f80:	402b      	ands	r3, r5
 8002f82:	e710      	b.n	8002da6 <__aeabi_dsub+0x34a>
 8002f84:	4663      	mov	r3, ip
 8002f86:	1a1d      	subs	r5, r3, r0
 8002f88:	45ac      	cmp	ip, r5
 8002f8a:	4192      	sbcs	r2, r2
 8002f8c:	2601      	movs	r6, #1
 8002f8e:	9b02      	ldr	r3, [sp, #8]
 8002f90:	4252      	negs	r2, r2
 8002f92:	1b1c      	subs	r4, r3, r4
 8002f94:	4688      	mov	r8, r1
 8002f96:	1aa4      	subs	r4, r4, r2
 8002f98:	400e      	ands	r6, r1
 8002f9a:	e5c6      	b.n	8002b2a <__aeabi_dsub+0xce>
 8002f9c:	4663      	mov	r3, ip
 8002f9e:	18c5      	adds	r5, r0, r3
 8002fa0:	9b02      	ldr	r3, [sp, #8]
 8002fa2:	4285      	cmp	r5, r0
 8002fa4:	4180      	sbcs	r0, r0
 8002fa6:	469c      	mov	ip, r3
 8002fa8:	4240      	negs	r0, r0
 8002faa:	4464      	add	r4, ip
 8002fac:	1824      	adds	r4, r4, r0
 8002fae:	2701      	movs	r7, #1
 8002fb0:	0223      	lsls	r3, r4, #8
 8002fb2:	d400      	bmi.n	8002fb6 <__aeabi_dsub+0x55a>
 8002fb4:	e6f5      	b.n	8002da2 <__aeabi_dsub+0x346>
 8002fb6:	2702      	movs	r7, #2
 8002fb8:	e641      	b.n	8002c3e <__aeabi_dsub+0x1e2>
 8002fba:	4663      	mov	r3, ip
 8002fbc:	1ac5      	subs	r5, r0, r3
 8002fbe:	42a8      	cmp	r0, r5
 8002fc0:	4180      	sbcs	r0, r0
 8002fc2:	9b02      	ldr	r3, [sp, #8]
 8002fc4:	4240      	negs	r0, r0
 8002fc6:	1ae4      	subs	r4, r4, r3
 8002fc8:	2701      	movs	r7, #1
 8002fca:	1a24      	subs	r4, r4, r0
 8002fcc:	e5a8      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8002fce:	9d02      	ldr	r5, [sp, #8]
 8002fd0:	4652      	mov	r2, sl
 8002fd2:	002b      	movs	r3, r5
 8002fd4:	3a20      	subs	r2, #32
 8002fd6:	40d3      	lsrs	r3, r2
 8002fd8:	0019      	movs	r1, r3
 8002fda:	4653      	mov	r3, sl
 8002fdc:	2b20      	cmp	r3, #32
 8002fde:	d006      	beq.n	8002fee <__aeabi_dsub+0x592>
 8002fe0:	2240      	movs	r2, #64	@ 0x40
 8002fe2:	1ad2      	subs	r2, r2, r3
 8002fe4:	002b      	movs	r3, r5
 8002fe6:	4093      	lsls	r3, r2
 8002fe8:	4662      	mov	r2, ip
 8002fea:	431a      	orrs	r2, r3
 8002fec:	4693      	mov	fp, r2
 8002fee:	465d      	mov	r5, fp
 8002ff0:	1e6b      	subs	r3, r5, #1
 8002ff2:	419d      	sbcs	r5, r3
 8002ff4:	430d      	orrs	r5, r1
 8002ff6:	e615      	b.n	8002c24 <__aeabi_dsub+0x1c8>
 8002ff8:	0762      	lsls	r2, r4, #29
 8002ffa:	08c0      	lsrs	r0, r0, #3
 8002ffc:	4302      	orrs	r2, r0
 8002ffe:	08e4      	lsrs	r4, r4, #3
 8003000:	e70d      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 8003002:	0011      	movs	r1, r2
 8003004:	0027      	movs	r7, r4
 8003006:	3920      	subs	r1, #32
 8003008:	40cf      	lsrs	r7, r1
 800300a:	2a20      	cmp	r2, #32
 800300c:	d005      	beq.n	800301a <__aeabi_dsub+0x5be>
 800300e:	2140      	movs	r1, #64	@ 0x40
 8003010:	1a8a      	subs	r2, r1, r2
 8003012:	4094      	lsls	r4, r2
 8003014:	0025      	movs	r5, r4
 8003016:	4305      	orrs	r5, r0
 8003018:	9503      	str	r5, [sp, #12]
 800301a:	9d03      	ldr	r5, [sp, #12]
 800301c:	1e6a      	subs	r2, r5, #1
 800301e:	4195      	sbcs	r5, r2
 8003020:	433d      	orrs	r5, r7
 8003022:	e77d      	b.n	8002f20 <__aeabi_dsub+0x4c4>
 8003024:	2a00      	cmp	r2, #0
 8003026:	d100      	bne.n	800302a <__aeabi_dsub+0x5ce>
 8003028:	e744      	b.n	8002eb4 <__aeabi_dsub+0x458>
 800302a:	2601      	movs	r6, #1
 800302c:	400e      	ands	r6, r1
 800302e:	4663      	mov	r3, ip
 8003030:	08d9      	lsrs	r1, r3, #3
 8003032:	9b02      	ldr	r3, [sp, #8]
 8003034:	075a      	lsls	r2, r3, #29
 8003036:	430a      	orrs	r2, r1
 8003038:	08dc      	lsrs	r4, r3, #3
 800303a:	e6f0      	b.n	8002e1e <__aeabi_dsub+0x3c2>
 800303c:	2a00      	cmp	r2, #0
 800303e:	d028      	beq.n	8003092 <__aeabi_dsub+0x636>
 8003040:	4662      	mov	r2, ip
 8003042:	9f02      	ldr	r7, [sp, #8]
 8003044:	08c0      	lsrs	r0, r0, #3
 8003046:	433a      	orrs	r2, r7
 8003048:	d100      	bne.n	800304c <__aeabi_dsub+0x5f0>
 800304a:	e6dc      	b.n	8002e06 <__aeabi_dsub+0x3aa>
 800304c:	0762      	lsls	r2, r4, #29
 800304e:	4310      	orrs	r0, r2
 8003050:	2280      	movs	r2, #128	@ 0x80
 8003052:	08e4      	lsrs	r4, r4, #3
 8003054:	0312      	lsls	r2, r2, #12
 8003056:	4214      	tst	r4, r2
 8003058:	d009      	beq.n	800306e <__aeabi_dsub+0x612>
 800305a:	08fd      	lsrs	r5, r7, #3
 800305c:	4215      	tst	r5, r2
 800305e:	d106      	bne.n	800306e <__aeabi_dsub+0x612>
 8003060:	4663      	mov	r3, ip
 8003062:	2601      	movs	r6, #1
 8003064:	002c      	movs	r4, r5
 8003066:	08d8      	lsrs	r0, r3, #3
 8003068:	077b      	lsls	r3, r7, #29
 800306a:	4318      	orrs	r0, r3
 800306c:	400e      	ands	r6, r1
 800306e:	0f42      	lsrs	r2, r0, #29
 8003070:	00c0      	lsls	r0, r0, #3
 8003072:	08c0      	lsrs	r0, r0, #3
 8003074:	0752      	lsls	r2, r2, #29
 8003076:	4302      	orrs	r2, r0
 8003078:	e601      	b.n	8002c7e <__aeabi_dsub+0x222>
 800307a:	4663      	mov	r3, ip
 800307c:	1a1d      	subs	r5, r3, r0
 800307e:	45ac      	cmp	ip, r5
 8003080:	4192      	sbcs	r2, r2
 8003082:	9b02      	ldr	r3, [sp, #8]
 8003084:	4252      	negs	r2, r2
 8003086:	1b1c      	subs	r4, r3, r4
 8003088:	000e      	movs	r6, r1
 800308a:	4688      	mov	r8, r1
 800308c:	2701      	movs	r7, #1
 800308e:	1aa4      	subs	r4, r4, r2
 8003090:	e546      	b.n	8002b20 <__aeabi_dsub+0xc4>
 8003092:	4663      	mov	r3, ip
 8003094:	08d9      	lsrs	r1, r3, #3
 8003096:	9b02      	ldr	r3, [sp, #8]
 8003098:	075a      	lsls	r2, r3, #29
 800309a:	430a      	orrs	r2, r1
 800309c:	08dc      	lsrs	r4, r3, #3
 800309e:	e5ee      	b.n	8002c7e <__aeabi_dsub+0x222>
 80030a0:	4663      	mov	r3, ip
 80030a2:	9c02      	ldr	r4, [sp, #8]
 80030a4:	9303      	str	r3, [sp, #12]
 80030a6:	e6c7      	b.n	8002e38 <__aeabi_dsub+0x3dc>
 80030a8:	08c0      	lsrs	r0, r0, #3
 80030aa:	2a00      	cmp	r2, #0
 80030ac:	d100      	bne.n	80030b0 <__aeabi_dsub+0x654>
 80030ae:	e6aa      	b.n	8002e06 <__aeabi_dsub+0x3aa>
 80030b0:	0762      	lsls	r2, r4, #29
 80030b2:	4310      	orrs	r0, r2
 80030b4:	2280      	movs	r2, #128	@ 0x80
 80030b6:	08e4      	lsrs	r4, r4, #3
 80030b8:	0312      	lsls	r2, r2, #12
 80030ba:	4214      	tst	r4, r2
 80030bc:	d0d7      	beq.n	800306e <__aeabi_dsub+0x612>
 80030be:	9f02      	ldr	r7, [sp, #8]
 80030c0:	08fd      	lsrs	r5, r7, #3
 80030c2:	4215      	tst	r5, r2
 80030c4:	d1d3      	bne.n	800306e <__aeabi_dsub+0x612>
 80030c6:	4663      	mov	r3, ip
 80030c8:	2601      	movs	r6, #1
 80030ca:	08d8      	lsrs	r0, r3, #3
 80030cc:	077b      	lsls	r3, r7, #29
 80030ce:	002c      	movs	r4, r5
 80030d0:	4318      	orrs	r0, r3
 80030d2:	400e      	ands	r6, r1
 80030d4:	e7cb      	b.n	800306e <__aeabi_dsub+0x612>
 80030d6:	000a      	movs	r2, r1
 80030d8:	0027      	movs	r7, r4
 80030da:	3a20      	subs	r2, #32
 80030dc:	40d7      	lsrs	r7, r2
 80030de:	2920      	cmp	r1, #32
 80030e0:	d005      	beq.n	80030ee <__aeabi_dsub+0x692>
 80030e2:	2240      	movs	r2, #64	@ 0x40
 80030e4:	1a52      	subs	r2, r2, r1
 80030e6:	4094      	lsls	r4, r2
 80030e8:	0025      	movs	r5, r4
 80030ea:	4305      	orrs	r5, r0
 80030ec:	9503      	str	r5, [sp, #12]
 80030ee:	9d03      	ldr	r5, [sp, #12]
 80030f0:	1e6a      	subs	r2, r5, #1
 80030f2:	4195      	sbcs	r5, r2
 80030f4:	432f      	orrs	r7, r5
 80030f6:	e610      	b.n	8002d1a <__aeabi_dsub+0x2be>
 80030f8:	0014      	movs	r4, r2
 80030fa:	2500      	movs	r5, #0
 80030fc:	2200      	movs	r2, #0
 80030fe:	e556      	b.n	8002bae <__aeabi_dsub+0x152>
 8003100:	9b02      	ldr	r3, [sp, #8]
 8003102:	4460      	add	r0, ip
 8003104:	4699      	mov	r9, r3
 8003106:	4560      	cmp	r0, ip
 8003108:	4192      	sbcs	r2, r2
 800310a:	444c      	add	r4, r9
 800310c:	4252      	negs	r2, r2
 800310e:	0005      	movs	r5, r0
 8003110:	18a4      	adds	r4, r4, r2
 8003112:	e74c      	b.n	8002fae <__aeabi_dsub+0x552>
 8003114:	001a      	movs	r2, r3
 8003116:	001c      	movs	r4, r3
 8003118:	432a      	orrs	r2, r5
 800311a:	d000      	beq.n	800311e <__aeabi_dsub+0x6c2>
 800311c:	e6b3      	b.n	8002e86 <__aeabi_dsub+0x42a>
 800311e:	e6c9      	b.n	8002eb4 <__aeabi_dsub+0x458>
 8003120:	2480      	movs	r4, #128	@ 0x80
 8003122:	2600      	movs	r6, #0
 8003124:	0324      	lsls	r4, r4, #12
 8003126:	e5ae      	b.n	8002c86 <__aeabi_dsub+0x22a>
 8003128:	2120      	movs	r1, #32
 800312a:	2500      	movs	r5, #0
 800312c:	1a09      	subs	r1, r1, r0
 800312e:	e517      	b.n	8002b60 <__aeabi_dsub+0x104>
 8003130:	2200      	movs	r2, #0
 8003132:	2500      	movs	r5, #0
 8003134:	4c0b      	ldr	r4, [pc, #44]	@ (8003164 <__aeabi_dsub+0x708>)
 8003136:	e53a      	b.n	8002bae <__aeabi_dsub+0x152>
 8003138:	2d00      	cmp	r5, #0
 800313a:	d100      	bne.n	800313e <__aeabi_dsub+0x6e2>
 800313c:	e5f6      	b.n	8002d2c <__aeabi_dsub+0x2d0>
 800313e:	464b      	mov	r3, r9
 8003140:	1bda      	subs	r2, r3, r7
 8003142:	4692      	mov	sl, r2
 8003144:	2f00      	cmp	r7, #0
 8003146:	d100      	bne.n	800314a <__aeabi_dsub+0x6ee>
 8003148:	e66f      	b.n	8002e2a <__aeabi_dsub+0x3ce>
 800314a:	2a38      	cmp	r2, #56	@ 0x38
 800314c:	dc05      	bgt.n	800315a <__aeabi_dsub+0x6fe>
 800314e:	2680      	movs	r6, #128	@ 0x80
 8003150:	0436      	lsls	r6, r6, #16
 8003152:	4334      	orrs	r4, r6
 8003154:	4688      	mov	r8, r1
 8003156:	000e      	movs	r6, r1
 8003158:	e6d1      	b.n	8002efe <__aeabi_dsub+0x4a2>
 800315a:	4688      	mov	r8, r1
 800315c:	000e      	movs	r6, r1
 800315e:	2501      	movs	r5, #1
 8003160:	e6de      	b.n	8002f20 <__aeabi_dsub+0x4c4>
 8003162:	46c0      	nop			@ (mov r8, r8)
 8003164:	000007ff 	.word	0x000007ff
 8003168:	ff7fffff 	.word	0xff7fffff
 800316c:	000007fe 	.word	0x000007fe
 8003170:	2d00      	cmp	r5, #0
 8003172:	d100      	bne.n	8003176 <__aeabi_dsub+0x71a>
 8003174:	e668      	b.n	8002e48 <__aeabi_dsub+0x3ec>
 8003176:	464b      	mov	r3, r9
 8003178:	1bd9      	subs	r1, r3, r7
 800317a:	2f00      	cmp	r7, #0
 800317c:	d101      	bne.n	8003182 <__aeabi_dsub+0x726>
 800317e:	468a      	mov	sl, r1
 8003180:	e5a7      	b.n	8002cd2 <__aeabi_dsub+0x276>
 8003182:	2701      	movs	r7, #1
 8003184:	2938      	cmp	r1, #56	@ 0x38
 8003186:	dd00      	ble.n	800318a <__aeabi_dsub+0x72e>
 8003188:	e5c7      	b.n	8002d1a <__aeabi_dsub+0x2be>
 800318a:	2280      	movs	r2, #128	@ 0x80
 800318c:	0412      	lsls	r2, r2, #16
 800318e:	4314      	orrs	r4, r2
 8003190:	e5af      	b.n	8002cf2 <__aeabi_dsub+0x296>
 8003192:	46c0      	nop			@ (mov r8, r8)

08003194 <__aeabi_dcmpun>:
 8003194:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003196:	46c6      	mov	lr, r8
 8003198:	031e      	lsls	r6, r3, #12
 800319a:	0b36      	lsrs	r6, r6, #12
 800319c:	46b0      	mov	r8, r6
 800319e:	4e0d      	ldr	r6, [pc, #52]	@ (80031d4 <__aeabi_dcmpun+0x40>)
 80031a0:	030c      	lsls	r4, r1, #12
 80031a2:	004d      	lsls	r5, r1, #1
 80031a4:	005f      	lsls	r7, r3, #1
 80031a6:	b500      	push	{lr}
 80031a8:	0b24      	lsrs	r4, r4, #12
 80031aa:	0d6d      	lsrs	r5, r5, #21
 80031ac:	0d7f      	lsrs	r7, r7, #21
 80031ae:	42b5      	cmp	r5, r6
 80031b0:	d00b      	beq.n	80031ca <__aeabi_dcmpun+0x36>
 80031b2:	4908      	ldr	r1, [pc, #32]	@ (80031d4 <__aeabi_dcmpun+0x40>)
 80031b4:	2000      	movs	r0, #0
 80031b6:	428f      	cmp	r7, r1
 80031b8:	d104      	bne.n	80031c4 <__aeabi_dcmpun+0x30>
 80031ba:	4646      	mov	r6, r8
 80031bc:	4316      	orrs	r6, r2
 80031be:	0030      	movs	r0, r6
 80031c0:	1e43      	subs	r3, r0, #1
 80031c2:	4198      	sbcs	r0, r3
 80031c4:	bc80      	pop	{r7}
 80031c6:	46b8      	mov	r8, r7
 80031c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80031ca:	4304      	orrs	r4, r0
 80031cc:	2001      	movs	r0, #1
 80031ce:	2c00      	cmp	r4, #0
 80031d0:	d1f8      	bne.n	80031c4 <__aeabi_dcmpun+0x30>
 80031d2:	e7ee      	b.n	80031b2 <__aeabi_dcmpun+0x1e>
 80031d4:	000007ff 	.word	0x000007ff

080031d8 <__aeabi_d2iz>:
 80031d8:	000b      	movs	r3, r1
 80031da:	0002      	movs	r2, r0
 80031dc:	b570      	push	{r4, r5, r6, lr}
 80031de:	4d16      	ldr	r5, [pc, #88]	@ (8003238 <__aeabi_d2iz+0x60>)
 80031e0:	030c      	lsls	r4, r1, #12
 80031e2:	b082      	sub	sp, #8
 80031e4:	0049      	lsls	r1, r1, #1
 80031e6:	2000      	movs	r0, #0
 80031e8:	9200      	str	r2, [sp, #0]
 80031ea:	9301      	str	r3, [sp, #4]
 80031ec:	0b24      	lsrs	r4, r4, #12
 80031ee:	0d49      	lsrs	r1, r1, #21
 80031f0:	0fde      	lsrs	r6, r3, #31
 80031f2:	42a9      	cmp	r1, r5
 80031f4:	dd04      	ble.n	8003200 <__aeabi_d2iz+0x28>
 80031f6:	4811      	ldr	r0, [pc, #68]	@ (800323c <__aeabi_d2iz+0x64>)
 80031f8:	4281      	cmp	r1, r0
 80031fa:	dd03      	ble.n	8003204 <__aeabi_d2iz+0x2c>
 80031fc:	4b10      	ldr	r3, [pc, #64]	@ (8003240 <__aeabi_d2iz+0x68>)
 80031fe:	18f0      	adds	r0, r6, r3
 8003200:	b002      	add	sp, #8
 8003202:	bd70      	pop	{r4, r5, r6, pc}
 8003204:	2080      	movs	r0, #128	@ 0x80
 8003206:	0340      	lsls	r0, r0, #13
 8003208:	4320      	orrs	r0, r4
 800320a:	4c0e      	ldr	r4, [pc, #56]	@ (8003244 <__aeabi_d2iz+0x6c>)
 800320c:	1a64      	subs	r4, r4, r1
 800320e:	2c1f      	cmp	r4, #31
 8003210:	dd08      	ble.n	8003224 <__aeabi_d2iz+0x4c>
 8003212:	4b0d      	ldr	r3, [pc, #52]	@ (8003248 <__aeabi_d2iz+0x70>)
 8003214:	1a5b      	subs	r3, r3, r1
 8003216:	40d8      	lsrs	r0, r3
 8003218:	0003      	movs	r3, r0
 800321a:	4258      	negs	r0, r3
 800321c:	2e00      	cmp	r6, #0
 800321e:	d1ef      	bne.n	8003200 <__aeabi_d2iz+0x28>
 8003220:	0018      	movs	r0, r3
 8003222:	e7ed      	b.n	8003200 <__aeabi_d2iz+0x28>
 8003224:	4b09      	ldr	r3, [pc, #36]	@ (800324c <__aeabi_d2iz+0x74>)
 8003226:	9a00      	ldr	r2, [sp, #0]
 8003228:	469c      	mov	ip, r3
 800322a:	0003      	movs	r3, r0
 800322c:	4461      	add	r1, ip
 800322e:	408b      	lsls	r3, r1
 8003230:	40e2      	lsrs	r2, r4
 8003232:	4313      	orrs	r3, r2
 8003234:	e7f1      	b.n	800321a <__aeabi_d2iz+0x42>
 8003236:	46c0      	nop			@ (mov r8, r8)
 8003238:	000003fe 	.word	0x000003fe
 800323c:	0000041d 	.word	0x0000041d
 8003240:	7fffffff 	.word	0x7fffffff
 8003244:	00000433 	.word	0x00000433
 8003248:	00000413 	.word	0x00000413
 800324c:	fffffbed 	.word	0xfffffbed

08003250 <__aeabi_i2d>:
 8003250:	b570      	push	{r4, r5, r6, lr}
 8003252:	2800      	cmp	r0, #0
 8003254:	d016      	beq.n	8003284 <__aeabi_i2d+0x34>
 8003256:	17c3      	asrs	r3, r0, #31
 8003258:	18c5      	adds	r5, r0, r3
 800325a:	405d      	eors	r5, r3
 800325c:	0fc4      	lsrs	r4, r0, #31
 800325e:	0028      	movs	r0, r5
 8003260:	f000 f8cc 	bl	80033fc <__clzsi2>
 8003264:	4b10      	ldr	r3, [pc, #64]	@ (80032a8 <__aeabi_i2d+0x58>)
 8003266:	1a1b      	subs	r3, r3, r0
 8003268:	055b      	lsls	r3, r3, #21
 800326a:	0d5b      	lsrs	r3, r3, #21
 800326c:	280a      	cmp	r0, #10
 800326e:	dc14      	bgt.n	800329a <__aeabi_i2d+0x4a>
 8003270:	0002      	movs	r2, r0
 8003272:	002e      	movs	r6, r5
 8003274:	3215      	adds	r2, #21
 8003276:	4096      	lsls	r6, r2
 8003278:	220b      	movs	r2, #11
 800327a:	1a12      	subs	r2, r2, r0
 800327c:	40d5      	lsrs	r5, r2
 800327e:	032d      	lsls	r5, r5, #12
 8003280:	0b2d      	lsrs	r5, r5, #12
 8003282:	e003      	b.n	800328c <__aeabi_i2d+0x3c>
 8003284:	2400      	movs	r4, #0
 8003286:	2300      	movs	r3, #0
 8003288:	2500      	movs	r5, #0
 800328a:	2600      	movs	r6, #0
 800328c:	051b      	lsls	r3, r3, #20
 800328e:	432b      	orrs	r3, r5
 8003290:	07e4      	lsls	r4, r4, #31
 8003292:	4323      	orrs	r3, r4
 8003294:	0030      	movs	r0, r6
 8003296:	0019      	movs	r1, r3
 8003298:	bd70      	pop	{r4, r5, r6, pc}
 800329a:	380b      	subs	r0, #11
 800329c:	4085      	lsls	r5, r0
 800329e:	032d      	lsls	r5, r5, #12
 80032a0:	2600      	movs	r6, #0
 80032a2:	0b2d      	lsrs	r5, r5, #12
 80032a4:	e7f2      	b.n	800328c <__aeabi_i2d+0x3c>
 80032a6:	46c0      	nop			@ (mov r8, r8)
 80032a8:	0000041e 	.word	0x0000041e

080032ac <__aeabi_ui2d>:
 80032ac:	b510      	push	{r4, lr}
 80032ae:	1e04      	subs	r4, r0, #0
 80032b0:	d010      	beq.n	80032d4 <__aeabi_ui2d+0x28>
 80032b2:	f000 f8a3 	bl	80033fc <__clzsi2>
 80032b6:	4b0e      	ldr	r3, [pc, #56]	@ (80032f0 <__aeabi_ui2d+0x44>)
 80032b8:	1a1b      	subs	r3, r3, r0
 80032ba:	055b      	lsls	r3, r3, #21
 80032bc:	0d5b      	lsrs	r3, r3, #21
 80032be:	280a      	cmp	r0, #10
 80032c0:	dc0f      	bgt.n	80032e2 <__aeabi_ui2d+0x36>
 80032c2:	220b      	movs	r2, #11
 80032c4:	0021      	movs	r1, r4
 80032c6:	1a12      	subs	r2, r2, r0
 80032c8:	40d1      	lsrs	r1, r2
 80032ca:	3015      	adds	r0, #21
 80032cc:	030a      	lsls	r2, r1, #12
 80032ce:	4084      	lsls	r4, r0
 80032d0:	0b12      	lsrs	r2, r2, #12
 80032d2:	e001      	b.n	80032d8 <__aeabi_ui2d+0x2c>
 80032d4:	2300      	movs	r3, #0
 80032d6:	2200      	movs	r2, #0
 80032d8:	051b      	lsls	r3, r3, #20
 80032da:	4313      	orrs	r3, r2
 80032dc:	0020      	movs	r0, r4
 80032de:	0019      	movs	r1, r3
 80032e0:	bd10      	pop	{r4, pc}
 80032e2:	0022      	movs	r2, r4
 80032e4:	380b      	subs	r0, #11
 80032e6:	4082      	lsls	r2, r0
 80032e8:	0312      	lsls	r2, r2, #12
 80032ea:	2400      	movs	r4, #0
 80032ec:	0b12      	lsrs	r2, r2, #12
 80032ee:	e7f3      	b.n	80032d8 <__aeabi_ui2d+0x2c>
 80032f0:	0000041e 	.word	0x0000041e

080032f4 <__aeabi_d2f>:
 80032f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032f6:	004b      	lsls	r3, r1, #1
 80032f8:	030f      	lsls	r7, r1, #12
 80032fa:	0d5b      	lsrs	r3, r3, #21
 80032fc:	4c3b      	ldr	r4, [pc, #236]	@ (80033ec <__aeabi_d2f+0xf8>)
 80032fe:	0f45      	lsrs	r5, r0, #29
 8003300:	b083      	sub	sp, #12
 8003302:	0a7f      	lsrs	r7, r7, #9
 8003304:	1c5e      	adds	r6, r3, #1
 8003306:	432f      	orrs	r7, r5
 8003308:	9000      	str	r0, [sp, #0]
 800330a:	9101      	str	r1, [sp, #4]
 800330c:	0fca      	lsrs	r2, r1, #31
 800330e:	00c5      	lsls	r5, r0, #3
 8003310:	4226      	tst	r6, r4
 8003312:	d00b      	beq.n	800332c <__aeabi_d2f+0x38>
 8003314:	4936      	ldr	r1, [pc, #216]	@ (80033f0 <__aeabi_d2f+0xfc>)
 8003316:	185c      	adds	r4, r3, r1
 8003318:	2cfe      	cmp	r4, #254	@ 0xfe
 800331a:	dd13      	ble.n	8003344 <__aeabi_d2f+0x50>
 800331c:	20ff      	movs	r0, #255	@ 0xff
 800331e:	2300      	movs	r3, #0
 8003320:	05c0      	lsls	r0, r0, #23
 8003322:	4318      	orrs	r0, r3
 8003324:	07d2      	lsls	r2, r2, #31
 8003326:	4310      	orrs	r0, r2
 8003328:	b003      	add	sp, #12
 800332a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800332c:	2b00      	cmp	r3, #0
 800332e:	d102      	bne.n	8003336 <__aeabi_d2f+0x42>
 8003330:	2000      	movs	r0, #0
 8003332:	2300      	movs	r3, #0
 8003334:	e7f4      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003336:	433d      	orrs	r5, r7
 8003338:	d0f0      	beq.n	800331c <__aeabi_d2f+0x28>
 800333a:	2380      	movs	r3, #128	@ 0x80
 800333c:	03db      	lsls	r3, r3, #15
 800333e:	20ff      	movs	r0, #255	@ 0xff
 8003340:	433b      	orrs	r3, r7
 8003342:	e7ed      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003344:	2c00      	cmp	r4, #0
 8003346:	dd14      	ble.n	8003372 <__aeabi_d2f+0x7e>
 8003348:	9b00      	ldr	r3, [sp, #0]
 800334a:	00ff      	lsls	r7, r7, #3
 800334c:	019b      	lsls	r3, r3, #6
 800334e:	1e58      	subs	r0, r3, #1
 8003350:	4183      	sbcs	r3, r0
 8003352:	0f69      	lsrs	r1, r5, #29
 8003354:	433b      	orrs	r3, r7
 8003356:	430b      	orrs	r3, r1
 8003358:	0759      	lsls	r1, r3, #29
 800335a:	d041      	beq.n	80033e0 <__aeabi_d2f+0xec>
 800335c:	210f      	movs	r1, #15
 800335e:	4019      	ands	r1, r3
 8003360:	2904      	cmp	r1, #4
 8003362:	d028      	beq.n	80033b6 <__aeabi_d2f+0xc2>
 8003364:	3304      	adds	r3, #4
 8003366:	0159      	lsls	r1, r3, #5
 8003368:	d525      	bpl.n	80033b6 <__aeabi_d2f+0xc2>
 800336a:	3401      	adds	r4, #1
 800336c:	2300      	movs	r3, #0
 800336e:	b2e0      	uxtb	r0, r4
 8003370:	e7d6      	b.n	8003320 <__aeabi_d2f+0x2c>
 8003372:	0021      	movs	r1, r4
 8003374:	3117      	adds	r1, #23
 8003376:	dbdb      	blt.n	8003330 <__aeabi_d2f+0x3c>
 8003378:	2180      	movs	r1, #128	@ 0x80
 800337a:	201e      	movs	r0, #30
 800337c:	0409      	lsls	r1, r1, #16
 800337e:	4339      	orrs	r1, r7
 8003380:	1b00      	subs	r0, r0, r4
 8003382:	281f      	cmp	r0, #31
 8003384:	dd1b      	ble.n	80033be <__aeabi_d2f+0xca>
 8003386:	2602      	movs	r6, #2
 8003388:	4276      	negs	r6, r6
 800338a:	1b34      	subs	r4, r6, r4
 800338c:	000e      	movs	r6, r1
 800338e:	40e6      	lsrs	r6, r4
 8003390:	0034      	movs	r4, r6
 8003392:	2820      	cmp	r0, #32
 8003394:	d004      	beq.n	80033a0 <__aeabi_d2f+0xac>
 8003396:	4817      	ldr	r0, [pc, #92]	@ (80033f4 <__aeabi_d2f+0x100>)
 8003398:	4684      	mov	ip, r0
 800339a:	4463      	add	r3, ip
 800339c:	4099      	lsls	r1, r3
 800339e:	430d      	orrs	r5, r1
 80033a0:	002b      	movs	r3, r5
 80033a2:	1e59      	subs	r1, r3, #1
 80033a4:	418b      	sbcs	r3, r1
 80033a6:	4323      	orrs	r3, r4
 80033a8:	0759      	lsls	r1, r3, #29
 80033aa:	d015      	beq.n	80033d8 <__aeabi_d2f+0xe4>
 80033ac:	210f      	movs	r1, #15
 80033ae:	2400      	movs	r4, #0
 80033b0:	4019      	ands	r1, r3
 80033b2:	2904      	cmp	r1, #4
 80033b4:	d117      	bne.n	80033e6 <__aeabi_d2f+0xf2>
 80033b6:	019b      	lsls	r3, r3, #6
 80033b8:	0a5b      	lsrs	r3, r3, #9
 80033ba:	b2e0      	uxtb	r0, r4
 80033bc:	e7b0      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033be:	4c0e      	ldr	r4, [pc, #56]	@ (80033f8 <__aeabi_d2f+0x104>)
 80033c0:	191c      	adds	r4, r3, r4
 80033c2:	002b      	movs	r3, r5
 80033c4:	40a5      	lsls	r5, r4
 80033c6:	40c3      	lsrs	r3, r0
 80033c8:	40a1      	lsls	r1, r4
 80033ca:	1e68      	subs	r0, r5, #1
 80033cc:	4185      	sbcs	r5, r0
 80033ce:	4329      	orrs	r1, r5
 80033d0:	430b      	orrs	r3, r1
 80033d2:	2400      	movs	r4, #0
 80033d4:	0759      	lsls	r1, r3, #29
 80033d6:	d1c1      	bne.n	800335c <__aeabi_d2f+0x68>
 80033d8:	019b      	lsls	r3, r3, #6
 80033da:	2000      	movs	r0, #0
 80033dc:	0a5b      	lsrs	r3, r3, #9
 80033de:	e79f      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	b2e0      	uxtb	r0, r4
 80033e4:	e79c      	b.n	8003320 <__aeabi_d2f+0x2c>
 80033e6:	3304      	adds	r3, #4
 80033e8:	e7e5      	b.n	80033b6 <__aeabi_d2f+0xc2>
 80033ea:	46c0      	nop			@ (mov r8, r8)
 80033ec:	000007fe 	.word	0x000007fe
 80033f0:	fffffc80 	.word	0xfffffc80
 80033f4:	fffffca2 	.word	0xfffffca2
 80033f8:	fffffc82 	.word	0xfffffc82

080033fc <__clzsi2>:
 80033fc:	211c      	movs	r1, #28
 80033fe:	2301      	movs	r3, #1
 8003400:	041b      	lsls	r3, r3, #16
 8003402:	4298      	cmp	r0, r3
 8003404:	d301      	bcc.n	800340a <__clzsi2+0xe>
 8003406:	0c00      	lsrs	r0, r0, #16
 8003408:	3910      	subs	r1, #16
 800340a:	0a1b      	lsrs	r3, r3, #8
 800340c:	4298      	cmp	r0, r3
 800340e:	d301      	bcc.n	8003414 <__clzsi2+0x18>
 8003410:	0a00      	lsrs	r0, r0, #8
 8003412:	3908      	subs	r1, #8
 8003414:	091b      	lsrs	r3, r3, #4
 8003416:	4298      	cmp	r0, r3
 8003418:	d301      	bcc.n	800341e <__clzsi2+0x22>
 800341a:	0900      	lsrs	r0, r0, #4
 800341c:	3904      	subs	r1, #4
 800341e:	a202      	add	r2, pc, #8	@ (adr r2, 8003428 <__clzsi2+0x2c>)
 8003420:	5c10      	ldrb	r0, [r2, r0]
 8003422:	1840      	adds	r0, r0, r1
 8003424:	4770      	bx	lr
 8003426:	46c0      	nop			@ (mov r8, r8)
 8003428:	02020304 	.word	0x02020304
 800342c:	01010101 	.word	0x01010101
	...

08003438 <__clzdi2>:
 8003438:	b510      	push	{r4, lr}
 800343a:	2900      	cmp	r1, #0
 800343c:	d103      	bne.n	8003446 <__clzdi2+0xe>
 800343e:	f7ff ffdd 	bl	80033fc <__clzsi2>
 8003442:	3020      	adds	r0, #32
 8003444:	e002      	b.n	800344c <__clzdi2+0x14>
 8003446:	0008      	movs	r0, r1
 8003448:	f7ff ffd8 	bl	80033fc <__clzsi2>
 800344c:	bd10      	pop	{r4, pc}
 800344e:	46c0      	nop			@ (mov r8, r8)

08003450 <ESP_Init>:
static bool StartUpDone = false;

static ESP_States EspState = ESP_STATE_OFF;


void ESP_Init(UART_HandleTypeDef* espUart) {
 8003450:	b580      	push	{r7, lr}
 8003452:	b082      	sub	sp, #8
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003458:	4b04      	ldr	r3, [pc, #16]	@ (800346c <ESP_Init+0x1c>)
 800345a:	687a      	ldr	r2, [r7, #4]
 800345c:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800345e:	4b04      	ldr	r3, [pc, #16]	@ (8003470 <ESP_Init+0x20>)
 8003460:	2202      	movs	r2, #2
 8003462:	701a      	strb	r2, [r3, #0]
}
 8003464:	46c0      	nop			@ (mov r8, r8)
 8003466:	46bd      	mov	sp, r7
 8003468:	b002      	add	sp, #8
 800346a:	bd80      	pop	{r7, pc}
 800346c:	20000234 	.word	0x20000234
 8003470:	200002a2 	.word	0x200002a2

08003474 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint8_t length) {
 8003474:	b5b0      	push	{r4, r5, r7, lr}
 8003476:	b084      	sub	sp, #16
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
 800347c:	000a      	movs	r2, r1
 800347e:	1cfb      	adds	r3, r7, #3
 8003480:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 8003482:	4b0f      	ldr	r3, [pc, #60]	@ (80034c0 <ESP_Send+0x4c>)
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	1cfb      	adds	r3, r7, #3
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	b29a      	uxth	r2, r3
 800348c:	250f      	movs	r5, #15
 800348e:	197c      	adds	r4, r7, r5
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	0019      	movs	r1, r3
 8003494:	f007 faae 	bl	800a9f4 <HAL_UART_Transmit_DMA>
 8003498:	0003      	movs	r3, r0
 800349a:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 800349c:	197b      	adds	r3, r7, r5
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <ESP_Send+0x40>
    Debug("Error in HAL_UART_Transmit_DMA");
 80034a4:	4a07      	ldr	r2, [pc, #28]	@ (80034c4 <ESP_Send+0x50>)
 80034a6:	4b08      	ldr	r3, [pc, #32]	@ (80034c8 <ESP_Send+0x54>)
 80034a8:	0019      	movs	r1, r3
 80034aa:	2003      	movs	r0, #3
 80034ac:	f002 fcb8 	bl	8005e20 <CreateLine>
    return false;
 80034b0:	2300      	movs	r3, #0
 80034b2:	e000      	b.n	80034b6 <ESP_Send+0x42>
  }
  return true;
 80034b4:	2301      	movs	r3, #1
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b004      	add	sp, #16
 80034bc:	bdb0      	pop	{r4, r5, r7, pc}
 80034be:	46c0      	nop			@ (mov r8, r8)
 80034c0:	20000234 	.word	0x20000234
 80034c4:	0800f4d0 	.word	0x0800f4d0
 80034c8:	0800f4f0 	.word	0x0800f4f0

080034cc <ESP_Receive>:

static bool ESP_Receive(uint8_t* reply, uint8_t length) {
 80034cc:	b5b0      	push	{r4, r5, r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	000a      	movs	r2, r1
 80034d6:	1cfb      	adds	r3, r7, #3
 80034d8:	701a      	strb	r2, [r3, #0]
  HAL_UART_DMAStop(EspUart);
 80034da:	4b14      	ldr	r3, [pc, #80]	@ (800352c <ESP_Receive+0x60>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	0018      	movs	r0, r3
 80034e0:	f007 fb76 	bl	800abd0 <HAL_UART_DMAStop>
  RxComplete = false;
 80034e4:	4b12      	ldr	r3, [pc, #72]	@ (8003530 <ESP_Receive+0x64>)
 80034e6:	2200      	movs	r2, #0
 80034e8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 80034ea:	4b10      	ldr	r3, [pc, #64]	@ (800352c <ESP_Receive+0x60>)
 80034ec:	6818      	ldr	r0, [r3, #0]
 80034ee:	1cfb      	adds	r3, r7, #3
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	250f      	movs	r5, #15
 80034f6:	197c      	adds	r4, r7, r5
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	0019      	movs	r1, r3
 80034fc:	f007 fb0a 	bl	800ab14 <HAL_UART_Receive_DMA>
 8003500:	0003      	movs	r3, r0
 8003502:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003504:	197b      	adds	r3, r7, r5
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d00a      	beq.n	8003522 <ESP_Receive+0x56>
    Debug("Error in HAL_UART_Receive_DMA.");
 800350c:	4a09      	ldr	r2, [pc, #36]	@ (8003534 <ESP_Receive+0x68>)
 800350e:	4b0a      	ldr	r3, [pc, #40]	@ (8003538 <ESP_Receive+0x6c>)
 8003510:	0019      	movs	r1, r3
 8003512:	2003      	movs	r0, #3
 8003514:	f002 fc84 	bl	8005e20 <CreateLine>
    RxComplete = true;
 8003518:	4b05      	ldr	r3, [pc, #20]	@ (8003530 <ESP_Receive+0x64>)
 800351a:	2201      	movs	r2, #1
 800351c:	701a      	strb	r2, [r3, #0]
    return false;
 800351e:	2300      	movs	r3, #0
 8003520:	e000      	b.n	8003524 <ESP_Receive+0x58>
  }
  return true;
 8003522:	2301      	movs	r3, #1
}
 8003524:	0018      	movs	r0, r3
 8003526:	46bd      	mov	sp, r7
 8003528:	b004      	add	sp, #16
 800352a:	bdb0      	pop	{r4, r5, r7, pc}
 800352c:	20000234 	.word	0x20000234
 8003530:	20000238 	.word	0x20000238
 8003534:	0800f4f4 	.word	0x0800f4f4
 8003538:	0800f4f0 	.word	0x0800f4f0

0800353c <HAL_UART_RxCpltCallback>:

// Callback for reception complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b082      	sub	sp, #8
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003544:	4b08      	ldr	r3, [pc, #32]	@ (8003568 <HAL_UART_RxCpltCallback+0x2c>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	429a      	cmp	r2, r3
 800354c:	d108      	bne.n	8003560 <HAL_UART_RxCpltCallback+0x24>
    RxComplete = true;
 800354e:	4b07      	ldr	r3, [pc, #28]	@ (800356c <HAL_UART_RxCpltCallback+0x30>)
 8003550:	2201      	movs	r2, #1
 8003552:	701a      	strb	r2, [r3, #0]
    Debug("RxComplete");
 8003554:	4a06      	ldr	r2, [pc, #24]	@ (8003570 <HAL_UART_RxCpltCallback+0x34>)
 8003556:	4b07      	ldr	r3, [pc, #28]	@ (8003574 <HAL_UART_RxCpltCallback+0x38>)
 8003558:	0019      	movs	r1, r3
 800355a:	2003      	movs	r0, #3
 800355c:	f002 fc60 	bl	8005e20 <CreateLine>

  }
}
 8003560:	46c0      	nop			@ (mov r8, r8)
 8003562:	46bd      	mov	sp, r7
 8003564:	b002      	add	sp, #8
 8003566:	bd80      	pop	{r7, pc}
 8003568:	20000234 	.word	0x20000234
 800356c:	20000238 	.word	0x20000238
 8003570:	0800f514 	.word	0x0800f514
 8003574:	0800f4f0 	.word	0x0800f4f0

08003578 <HAL_UART_ErrorCallback>:

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003578:	b580      	push	{r7, lr}
 800357a:	b082      	sub	sp, #8
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003580:	4b05      	ldr	r3, [pc, #20]	@ (8003598 <HAL_UART_ErrorCallback+0x20>)
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	429a      	cmp	r2, r3
 8003588:	d102      	bne.n	8003590 <HAL_UART_ErrorCallback+0x18>
    // Handle error
    EspState = ESP_STATE_ERROR;
 800358a:	4b04      	ldr	r3, [pc, #16]	@ (800359c <HAL_UART_ErrorCallback+0x24>)
 800358c:	2208      	movs	r2, #8
 800358e:	701a      	strb	r2, [r3, #0]
  }
}
 8003590:	46c0      	nop			@ (mov r8, r8)
 8003592:	46bd      	mov	sp, r7
 8003594:	b002      	add	sp, #8
 8003596:	bd80      	pop	{r7, pc}
 8003598:	20000234 	.word	0x20000234
 800359c:	200002a2 	.word	0x200002a2

080035a0 <ESP_Upkeep>:
//
//  // Use strstr to check if the expected response is within the buffer
//  return (strstr((char*)rxBuffer, expectedResponse) != NULL);
//}

void ESP_Upkeep(void) {
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  switch (EspState) {
 80035a4:	4b4b      	ldr	r3, [pc, #300]	@ (80036d4 <ESP_Upkeep+0x134>)
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d900      	bls.n	80035ae <ESP_Upkeep+0xe>
 80035ac:	e086      	b.n	80036bc <ESP_Upkeep+0x11c>
 80035ae:	009a      	lsls	r2, r3, #2
 80035b0:	4b49      	ldr	r3, [pc, #292]	@ (80036d8 <ESP_Upkeep+0x138>)
 80035b2:	18d3      	adds	r3, r2, r3
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_RESET);
 80035b8:	2380      	movs	r3, #128	@ 0x80
 80035ba:	0219      	lsls	r1, r3, #8
 80035bc:	23a0      	movs	r3, #160	@ 0xa0
 80035be:	05db      	lsls	r3, r3, #23
 80035c0:	2200      	movs	r2, #0
 80035c2:	0018      	movs	r0, r3
 80035c4:	f003 fd2c 	bl	8007020 <HAL_GPIO_WritePin>
      EspTurnedOn = false;
 80035c8:	4b44      	ldr	r3, [pc, #272]	@ (80036dc <ESP_Upkeep+0x13c>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
      EspState = ESP_STATE_IDLE;
 80035ce:	4b41      	ldr	r3, [pc, #260]	@ (80036d4 <ESP_Upkeep+0x134>)
 80035d0:	2201      	movs	r2, #1
 80035d2:	701a      	strb	r2, [r3, #0]
      break;
 80035d4:	e07b      	b.n	80036ce <ESP_Upkeep+0x12e>
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      // Initialization state
      StartUpTime = GetCurrentHalTicks() + ESP_START_UP_TIME;
 80035d6:	f002 fcaf 	bl	8005f38 <GetCurrentHalTicks>
 80035da:	0003      	movs	r3, r0
 80035dc:	22af      	movs	r2, #175	@ 0xaf
 80035de:	0092      	lsls	r2, r2, #2
 80035e0:	189a      	adds	r2, r3, r2
 80035e2:	4b3f      	ldr	r3, [pc, #252]	@ (80036e0 <ESP_Upkeep+0x140>)
 80035e4:	601a      	str	r2, [r3, #0]
      StartUpDone = false;
 80035e6:	4b3f      	ldr	r3, [pc, #252]	@ (80036e4 <ESP_Upkeep+0x144>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	701a      	strb	r2, [r3, #0]
      if(!EspTurnedOn) {
 80035ec:	4b3b      	ldr	r3, [pc, #236]	@ (80036dc <ESP_Upkeep+0x13c>)
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2201      	movs	r2, #1
 80035f2:	4053      	eors	r3, r2
 80035f4:	b2db      	uxtb	r3, r3
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <ESP_Upkeep+0x70>
        HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_SET);
 80035fa:	2380      	movs	r3, #128	@ 0x80
 80035fc:	0219      	lsls	r1, r3, #8
 80035fe:	23a0      	movs	r3, #160	@ 0xa0
 8003600:	05db      	lsls	r3, r3, #23
 8003602:	2201      	movs	r2, #1
 8003604:	0018      	movs	r0, r3
 8003606:	f003 fd0b 	bl	8007020 <HAL_GPIO_WritePin>
        EspTurnedOn = true;
 800360a:	4b34      	ldr	r3, [pc, #208]	@ (80036dc <ESP_Upkeep+0x13c>)
 800360c:	2201      	movs	r2, #1
 800360e:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      EspState = ESP_STATE_WAIT_FOR_READY;
 8003610:	4b30      	ldr	r3, [pc, #192]	@ (80036d4 <ESP_Upkeep+0x134>)
 8003612:	2203      	movs	r2, #3
 8003614:	701a      	strb	r2, [r3, #0]
      break;
 8003616:	e05a      	b.n	80036ce <ESP_Upkeep+0x12e>

    case ESP_STATE_WAIT_FOR_READY:
      if (TimestampIsReached(StartUpTime) && !StartUpDone) {
 8003618:	4b31      	ldr	r3, [pc, #196]	@ (80036e0 <ESP_Upkeep+0x140>)
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	0018      	movs	r0, r3
 800361e:	f002 fba9 	bl	8005d74 <TimestampIsReached>
 8003622:	1e03      	subs	r3, r0, #0
 8003624:	d014      	beq.n	8003650 <ESP_Upkeep+0xb0>
 8003626:	4b2f      	ldr	r3, [pc, #188]	@ (80036e4 <ESP_Upkeep+0x144>)
 8003628:	781b      	ldrb	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	4053      	eors	r3, r2
 800362e:	b2db      	uxtb	r3, r3
 8003630:	2b00      	cmp	r3, #0
 8003632:	d00d      	beq.n	8003650 <ESP_Upkeep+0xb0>
        if(ESP_Send((uint8_t*)"AT\r\n", 4)) {
 8003634:	4b2c      	ldr	r3, [pc, #176]	@ (80036e8 <ESP_Upkeep+0x148>)
 8003636:	2104      	movs	r1, #4
 8003638:	0018      	movs	r0, r3
 800363a:	f7ff ff1b 	bl	8003474 <ESP_Send>
 800363e:	1e03      	subs	r3, r0, #0
 8003640:	d003      	beq.n	800364a <ESP_Upkeep+0xaa>
          StartUpDone = true;
 8003642:	4b28      	ldr	r3, [pc, #160]	@ (80036e4 <ESP_Upkeep+0x144>)
 8003644:	2201      	movs	r2, #1
 8003646:	701a      	strb	r2, [r3, #0]
 8003648:	e002      	b.n	8003650 <ESP_Upkeep+0xb0>
        }else {
          EspState = ESP_STATE_ERROR;
 800364a:	4b22      	ldr	r3, [pc, #136]	@ (80036d4 <ESP_Upkeep+0x134>)
 800364c:	2208      	movs	r2, #8
 800364e:	701a      	strb	r2, [r3, #0]
        }
      }
      if(StartUpDone) {
 8003650:	4b24      	ldr	r3, [pc, #144]	@ (80036e4 <ESP_Upkeep+0x144>)
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d037      	beq.n	80036c8 <ESP_Upkeep+0x128>
        // Startup is done and we've sent a command, now we want to receive that command.

        if(ESP_Receive(RxBuffer, 10)) {
 8003658:	4b24      	ldr	r3, [pc, #144]	@ (80036ec <ESP_Upkeep+0x14c>)
 800365a:	210a      	movs	r1, #10
 800365c:	0018      	movs	r0, r3
 800365e:	f7ff ff35 	bl	80034cc <ESP_Receive>
 8003662:	1e03      	subs	r3, r0, #0
 8003664:	d030      	beq.n	80036c8 <ESP_Upkeep+0x128>
          // TODO: Add timeout for dma to stop reading and then return that data.
          Debug("RxBuffer contents: %s", (char*)RxBuffer);
 8003666:	4b21      	ldr	r3, [pc, #132]	@ (80036ec <ESP_Upkeep+0x14c>)
 8003668:	4a21      	ldr	r2, [pc, #132]	@ (80036f0 <ESP_Upkeep+0x150>)
 800366a:	4922      	ldr	r1, [pc, #136]	@ (80036f4 <ESP_Upkeep+0x154>)
 800366c:	2003      	movs	r0, #3
 800366e:	f002 fbd7 	bl	8005e20 <CreateLine>
//          EspState = ESP_STATE_PROCESS_READY;
          EspState = ESP_STATE_PROCESS_READY;
 8003672:	4b18      	ldr	r3, [pc, #96]	@ (80036d4 <ESP_Upkeep+0x134>)
 8003674:	2204      	movs	r2, #4
 8003676:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8003678:	e026      	b.n	80036c8 <ESP_Upkeep+0x128>

    case ESP_STATE_PROCESS_READY:
      if(RxComplete) {
 800367a:	4b1f      	ldr	r3, [pc, #124]	@ (80036f8 <ESP_Upkeep+0x158>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	b2db      	uxtb	r3, r3
 8003680:	2b00      	cmp	r3, #0
 8003682:	d023      	beq.n	80036cc <ESP_Upkeep+0x12c>
        if(strstr((char*)RxBuffer, AT_OkResponse)) {
 8003684:	4a1d      	ldr	r2, [pc, #116]	@ (80036fc <ESP_Upkeep+0x15c>)
 8003686:	4b19      	ldr	r3, [pc, #100]	@ (80036ec <ESP_Upkeep+0x14c>)
 8003688:	0011      	movs	r1, r2
 800368a:	0018      	movs	r0, r3
 800368c:	f009 fbba 	bl	800ce04 <strstr>
 8003690:	1e03      	subs	r3, r0, #0
 8003692:	d01b      	beq.n	80036cc <ESP_Upkeep+0x12c>
          Debug("SUCCESFUL AT command received.");
 8003694:	4a1a      	ldr	r2, [pc, #104]	@ (8003700 <ESP_Upkeep+0x160>)
 8003696:	4b17      	ldr	r3, [pc, #92]	@ (80036f4 <ESP_Upkeep+0x154>)
 8003698:	0019      	movs	r1, r3
 800369a:	2003      	movs	r0, #3
 800369c:	f002 fbc0 	bl	8005e20 <CreateLine>
          EspState = ESP_STATE_INIT;
 80036a0:	4b0c      	ldr	r3, [pc, #48]	@ (80036d4 <ESP_Upkeep+0x134>)
 80036a2:	2202      	movs	r2, #2
 80036a4:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 80036a6:	e011      	b.n	80036cc <ESP_Upkeep+0x12c>
//      }
//      break;
//
    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80036a8:	4a16      	ldr	r2, [pc, #88]	@ (8003704 <ESP_Upkeep+0x164>)
 80036aa:	4b12      	ldr	r3, [pc, #72]	@ (80036f4 <ESP_Upkeep+0x154>)
 80036ac:	0019      	movs	r1, r3
 80036ae:	2003      	movs	r0, #3
 80036b0:	f002 fbb6 	bl	8005e20 <CreateLine>
      EspState = ESP_STATE_INIT;
 80036b4:	4b07      	ldr	r3, [pc, #28]	@ (80036d4 <ESP_Upkeep+0x134>)
 80036b6:	2202      	movs	r2, #2
 80036b8:	701a      	strb	r2, [r3, #0]
      break;
 80036ba:	e008      	b.n	80036ce <ESP_Upkeep+0x12e>

    default:
      // Handle unexpected state
      EspState = ESP_STATE_ERROR;
 80036bc:	4b05      	ldr	r3, [pc, #20]	@ (80036d4 <ESP_Upkeep+0x134>)
 80036be:	2208      	movs	r2, #8
 80036c0:	701a      	strb	r2, [r3, #0]
      break;
 80036c2:	e004      	b.n	80036ce <ESP_Upkeep+0x12e>
      break;
 80036c4:	46c0      	nop			@ (mov r8, r8)
 80036c6:	e002      	b.n	80036ce <ESP_Upkeep+0x12e>
      break;
 80036c8:	46c0      	nop			@ (mov r8, r8)
 80036ca:	e000      	b.n	80036ce <ESP_Upkeep+0x12e>
      break;
 80036cc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80036ce:	46c0      	nop			@ (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	200002a2 	.word	0x200002a2
 80036d8:	0800faf8 	.word	0x0800faf8
 80036dc:	200002a0 	.word	0x200002a0
 80036e0:	20000008 	.word	0x20000008
 80036e4:	200002a1 	.word	0x200002a1
 80036e8:	0800f520 	.word	0x0800f520
 80036ec:	2000023c 	.word	0x2000023c
 80036f0:	0800f528 	.word	0x0800f528
 80036f4:	0800f4f0 	.word	0x0800f4f0
 80036f8:	20000238 	.word	0x20000238
 80036fc:	20000000 	.word	0x20000000
 8003700:	0800f540 	.word	0x0800f540
 8003704:	0800f560 	.word	0x0800f560

08003708 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8003708:	b580      	push	{r7, lr}
 800370a:	b082      	sub	sp, #8
 800370c:	af00      	add	r7, sp, #0
 800370e:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 8003710:	4b09      	ldr	r3, [pc, #36]	@ (8003738 <I2CSensors_Init+0x30>)
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 8003716:	4a09      	ldr	r2, [pc, #36]	@ (800373c <I2CSensors_Init+0x34>)
 8003718:	4b09      	ldr	r3, [pc, #36]	@ (8003740 <I2CSensors_Init+0x38>)
 800371a:	0011      	movs	r1, r2
 800371c:	0018      	movs	r0, r3
 800371e:	f000 f9e9 	bl	8003af4 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 8003722:	4a06      	ldr	r2, [pc, #24]	@ (800373c <I2CSensors_Init+0x34>)
 8003724:	4b06      	ldr	r3, [pc, #24]	@ (8003740 <I2CSensors_Init+0x38>)
 8003726:	0011      	movs	r1, r2
 8003728:	0018      	movs	r0, r3
 800372a:	f000 f8a9 	bl	8003880 <Gas_Init>
}
 800372e:	46c0      	nop			@ (mov r8, r8)
 8003730:	46bd      	mov	sp, r7
 8003732:	b002      	add	sp, #8
 8003734:	bd80      	pop	{r7, pc}
 8003736:	46c0      	nop			@ (mov r8, r8)
 8003738:	200002a4 	.word	0x200002a4
 800373c:	08003799 	.word	0x08003799
 8003740:	08003745 	.word	0x08003745

08003744 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8003744:	b5b0      	push	{r4, r5, r7, lr}
 8003746:	b084      	sub	sp, #16
 8003748:	af00      	add	r7, sp, #0
 800374a:	6039      	str	r1, [r7, #0]
 800374c:	0011      	movs	r1, r2
 800374e:	1dfb      	adds	r3, r7, #7
 8003750:	1c02      	adds	r2, r0, #0
 8003752:	701a      	strb	r2, [r3, #0]
 8003754:	1dbb      	adds	r3, r7, #6
 8003756:	1c0a      	adds	r2, r1, #0
 8003758:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800375a:	4b0e      	ldr	r3, [pc, #56]	@ (8003794 <ReadI2C+0x50>)
 800375c:	6818      	ldr	r0, [r3, #0]
 800375e:	1dfb      	adds	r3, r7, #7
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	b29b      	uxth	r3, r3
 8003764:	18db      	adds	r3, r3, r3
 8003766:	b299      	uxth	r1, r3
 8003768:	1dbb      	adds	r3, r7, #6
 800376a:	781b      	ldrb	r3, [r3, #0]
 800376c:	b29b      	uxth	r3, r3
 800376e:	250f      	movs	r5, #15
 8003770:	197c      	adds	r4, r7, r5
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	f003 fe0e 	bl	8007394 <HAL_I2C_Master_Receive_DMA>
 8003778:	0003      	movs	r3, r0
 800377a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800377c:	197b      	adds	r3, r7, r5
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d001      	beq.n	8003788 <ReadI2C+0x44>
        return false;
 8003784:	2300      	movs	r3, #0
 8003786:	e000      	b.n	800378a <ReadI2C+0x46>
    }
    return true;
 8003788:	2301      	movs	r3, #1
}
 800378a:	0018      	movs	r0, r3
 800378c:	46bd      	mov	sp, r7
 800378e:	b004      	add	sp, #16
 8003790:	bdb0      	pop	{r4, r5, r7, pc}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	200002a4 	.word	0x200002a4

08003798 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8003798:	b5b0      	push	{r4, r5, r7, lr}
 800379a:	b084      	sub	sp, #16
 800379c:	af00      	add	r7, sp, #0
 800379e:	6039      	str	r1, [r7, #0]
 80037a0:	0011      	movs	r1, r2
 80037a2:	1dfb      	adds	r3, r7, #7
 80037a4:	1c02      	adds	r2, r0, #0
 80037a6:	701a      	strb	r2, [r3, #0]
 80037a8:	1dbb      	adds	r3, r7, #6
 80037aa:	1c0a      	adds	r2, r1, #0
 80037ac:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80037ae:	4b0e      	ldr	r3, [pc, #56]	@ (80037e8 <WriteI2C+0x50>)
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	1dfb      	adds	r3, r7, #7
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b29b      	uxth	r3, r3
 80037b8:	18db      	adds	r3, r3, r3
 80037ba:	b299      	uxth	r1, r3
 80037bc:	1dbb      	adds	r3, r7, #6
 80037be:	781b      	ldrb	r3, [r3, #0]
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	250f      	movs	r5, #15
 80037c4:	197c      	adds	r4, r7, r5
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	f003 fcde 	bl	8007188 <HAL_I2C_Master_Transmit_DMA>
 80037cc:	0003      	movs	r3, r0
 80037ce:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 80037d0:	197b      	adds	r3, r7, r5
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d001      	beq.n	80037dc <WriteI2C+0x44>
        return false;
 80037d8:	2300      	movs	r3, #0
 80037da:	e000      	b.n	80037de <WriteI2C+0x46>
    }
    return true;
 80037dc:	2301      	movs	r3, #1
}
 80037de:	0018      	movs	r0, r3
 80037e0:	46bd      	mov	sp, r7
 80037e2:	b004      	add	sp, #16
 80037e4:	bdb0      	pop	{r4, r5, r7, pc}
 80037e6:	46c0      	nop			@ (mov r8, r8)
 80037e8:	200002a4 	.word	0x200002a4

080037ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b082      	sub	sp, #8
 80037f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80037f2:	4b10      	ldr	r3, [pc, #64]	@ (8003834 <MX_DMA_Init+0x48>)
 80037f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037f6:	4b0f      	ldr	r3, [pc, #60]	@ (8003834 <MX_DMA_Init+0x48>)
 80037f8:	2101      	movs	r1, #1
 80037fa:	430a      	orrs	r2, r1
 80037fc:	631a      	str	r2, [r3, #48]	@ 0x30
 80037fe:	4b0d      	ldr	r3, [pc, #52]	@ (8003834 <MX_DMA_Init+0x48>)
 8003800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003802:	2201      	movs	r2, #1
 8003804:	4013      	ands	r3, r2
 8003806:	607b      	str	r3, [r7, #4]
 8003808:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800380a:	2200      	movs	r2, #0
 800380c:	2100      	movs	r1, #0
 800380e:	200a      	movs	r0, #10
 8003810:	f002 fffe 	bl	8006810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8003814:	200a      	movs	r0, #10
 8003816:	f003 f810 	bl	800683a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 800381a:	2200      	movs	r2, #0
 800381c:	2103      	movs	r1, #3
 800381e:	200b      	movs	r0, #11
 8003820:	f002 fff6 	bl	8006810 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8003824:	200b      	movs	r0, #11
 8003826:	f003 f808 	bl	800683a <HAL_NVIC_EnableIRQ>

}
 800382a:	46c0      	nop			@ (mov r8, r8)
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	40021000 	.word	0x40021000

08003838 <Gadget_Init>:
    .VOC_measurementEnabled = true,
    .NO_measurementEnabled = false,
    .MIC_measurementEnabled = true
};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	60f8      	str	r0, [r7, #12]
 8003840:	60b9      	str	r1, [r7, #8]
 8003842:	607a      	str	r2, [r7, #4]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 8003844:	4b0b      	ldr	r3, [pc, #44]	@ (8003874 <Gadget_Init+0x3c>)
 8003846:	6818      	ldr	r0, [r3, #0]
 8003848:	f000 fce6 	bl	8004218 <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s);
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	0011      	movs	r1, r2
 8003852:	0018      	movs	r0, r3
 8003854:	f000 fc00 	bl	8004058 <Meas_Init>
  ESP_Init(espUart);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	0018      	movs	r0, r3
 800385c:	f7ff fdf8 	bl	8003450 <ESP_Init>
//  Gadget_SetSleepDuration();
  Info("Gadget initialised.");
 8003860:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <Gadget_Init+0x40>)
 8003862:	4b06      	ldr	r3, [pc, #24]	@ (800387c <Gadget_Init+0x44>)
 8003864:	0019      	movs	r1, r3
 8003866:	2002      	movs	r0, #2
 8003868:	f002 fada 	bl	8005e20 <CreateLine>
}
 800386c:	46c0      	nop			@ (mov r8, r8)
 800386e:	46bd      	mov	sp, r7
 8003870:	b004      	add	sp, #16
 8003872:	bd80      	pop	{r7, pc}
 8003874:	200002a8 	.word	0x200002a8
 8003878:	0800f574 	.word	0x0800f574
 800387c:	0800f588 	.word	0x0800f588

08003880 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 800388a:	683a      	ldr	r2, [r7, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	0011      	movs	r1, r2
 8003890:	0018      	movs	r0, r3
 8003892:	f001 fd11 	bl	80052b8 <SGP_Init>
}
 8003896:	46c0      	nop			@ (mov r8, r8)
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}

0800389e <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 800389e:	b580      	push	{r7, lr}
 80038a0:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 80038a2:	f001 fd23 	bl	80052ec <SGP_StartMeasurement>
}
 80038a6:	46c0      	nop			@ (mov r8, r8)
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}

080038ac <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	0018      	movs	r0, r3
 80038b8:	f001 fd70 	bl	800539c <SGP_GetMeasurementValues>
 80038bc:	0003      	movs	r3, r0
}
 80038be:	0018      	movs	r0, r3
 80038c0:	46bd      	mov	sp, r7
 80038c2:	b002      	add	sp, #8
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 80038c6:	b580      	push	{r7, lr}
 80038c8:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80038ca:	f001 fe71 	bl	80055b0 <SGP_DeviceConnected>
 80038ce:	0003      	movs	r3, r0
}
 80038d0:	0018      	movs	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80038d8:	b590      	push	{r4, r7, lr}
 80038da:	b08b      	sub	sp, #44	@ 0x2c
 80038dc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038de:	2414      	movs	r4, #20
 80038e0:	193b      	adds	r3, r7, r4
 80038e2:	0018      	movs	r0, r3
 80038e4:	2314      	movs	r3, #20
 80038e6:	001a      	movs	r2, r3
 80038e8:	2100      	movs	r1, #0
 80038ea:	f009 fa83 	bl	800cdf4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80038ee:	4b79      	ldr	r3, [pc, #484]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 80038f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038f2:	4b78      	ldr	r3, [pc, #480]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 80038f4:	2104      	movs	r1, #4
 80038f6:	430a      	orrs	r2, r1
 80038f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80038fa:	4b76      	ldr	r3, [pc, #472]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 80038fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fe:	2204      	movs	r2, #4
 8003900:	4013      	ands	r3, r2
 8003902:	613b      	str	r3, [r7, #16]
 8003904:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003906:	4b73      	ldr	r3, [pc, #460]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 8003908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800390a:	4b72      	ldr	r3, [pc, #456]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 800390c:	2180      	movs	r1, #128	@ 0x80
 800390e:	430a      	orrs	r2, r1
 8003910:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003912:	4b70      	ldr	r3, [pc, #448]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 8003914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003916:	2280      	movs	r2, #128	@ 0x80
 8003918:	4013      	ands	r3, r2
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800391e:	4b6d      	ldr	r3, [pc, #436]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 8003920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003922:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 8003924:	2101      	movs	r1, #1
 8003926:	430a      	orrs	r2, r1
 8003928:	62da      	str	r2, [r3, #44]	@ 0x2c
 800392a:	4b6a      	ldr	r3, [pc, #424]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 800392c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800392e:	2201      	movs	r2, #1
 8003930:	4013      	ands	r3, r2
 8003932:	60bb      	str	r3, [r7, #8]
 8003934:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003936:	4b67      	ldr	r3, [pc, #412]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 8003938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800393a:	4b66      	ldr	r3, [pc, #408]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 800393c:	2102      	movs	r1, #2
 800393e:	430a      	orrs	r2, r1
 8003940:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003942:	4b64      	ldr	r3, [pc, #400]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 8003944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003946:	2202      	movs	r2, #2
 8003948:	4013      	ands	r3, r2
 800394a:	607b      	str	r3, [r7, #4]
 800394c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800394e:	4b61      	ldr	r3, [pc, #388]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 8003950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003952:	4b60      	ldr	r3, [pc, #384]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 8003954:	2108      	movs	r1, #8
 8003956:	430a      	orrs	r2, r1
 8003958:	62da      	str	r2, [r3, #44]	@ 0x2c
 800395a:	4b5e      	ldr	r3, [pc, #376]	@ (8003ad4 <MX_GPIO_Init+0x1fc>)
 800395c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800395e:	2208      	movs	r2, #8
 8003960:	4013      	ands	r3, r2
 8003962:	603b      	str	r3, [r7, #0]
 8003964:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
 8003966:	2380      	movs	r3, #128	@ 0x80
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	485b      	ldr	r0, [pc, #364]	@ (8003ad8 <MX_GPIO_Init+0x200>)
 800396c:	2200      	movs	r2, #0
 800396e:	0019      	movs	r1, r3
 8003970:	f003 fb56 	bl	8007020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(STATUS_LED_GPIO_Port, STATUS_LED_Pin, GPIO_PIN_RESET);
 8003974:	2380      	movs	r3, #128	@ 0x80
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	4858      	ldr	r0, [pc, #352]	@ (8003adc <MX_GPIO_Init+0x204>)
 800397a:	2200      	movs	r2, #0
 800397c:	0019      	movs	r1, r3
 800397e:	f003 fb4f 	bl	8007020 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_EN_GPIO_Port, Wireless_EN_Pin, GPIO_PIN_RESET);
 8003982:	2380      	movs	r3, #128	@ 0x80
 8003984:	0219      	lsls	r1, r3, #8
 8003986:	23a0      	movs	r3, #160	@ 0xa0
 8003988:	05db      	lsls	r3, r3, #23
 800398a:	2200      	movs	r2, #0
 800398c:	0018      	movs	r0, r3
 800398e:	f003 fb47 	bl	8007020 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC0 PC1 PC2
                           PC3 PC4 PC5 PC6
                           PC7 PC9 PC11 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2
 8003992:	193b      	adds	r3, r7, r4
 8003994:	4a52      	ldr	r2, [pc, #328]	@ (8003ae0 <MX_GPIO_Init+0x208>)
 8003996:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_9|GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003998:	193b      	adds	r3, r7, r4
 800399a:	2203      	movs	r2, #3
 800399c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800399e:	193b      	adds	r3, r7, r4
 80039a0:	2200      	movs	r2, #0
 80039a2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039a4:	193b      	adds	r3, r7, r4
 80039a6:	4a4d      	ldr	r2, [pc, #308]	@ (8003adc <MX_GPIO_Init+0x204>)
 80039a8:	0019      	movs	r1, r3
 80039aa:	0010      	movs	r0, r2
 80039ac:	f003 f9ba 	bl	8006d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH0 PH1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039b0:	193b      	adds	r3, r7, r4
 80039b2:	2203      	movs	r2, #3
 80039b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039b6:	193b      	adds	r3, r7, r4
 80039b8:	2203      	movs	r2, #3
 80039ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039bc:	193b      	adds	r3, r7, r4
 80039be:	2200      	movs	r2, #0
 80039c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80039c2:	193b      	adds	r3, r7, r4
 80039c4:	4a47      	ldr	r2, [pc, #284]	@ (8003ae4 <MX_GPIO_Init+0x20c>)
 80039c6:	0019      	movs	r1, r3
 80039c8:	0010      	movs	r0, r2
 80039ca:	f003 f9ab 	bl	8006d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA2 PA3 PA4
                           PA5 PA6 PA7 PA8
                           PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4
 80039ce:	193b      	adds	r3, r7, r4
 80039d0:	4a45      	ldr	r2, [pc, #276]	@ (8003ae8 <MX_GPIO_Init+0x210>)
 80039d2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039d4:	193b      	adds	r3, r7, r4
 80039d6:	2203      	movs	r2, #3
 80039d8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039da:	193b      	adds	r3, r7, r4
 80039dc:	2200      	movs	r2, #0
 80039de:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e0:	193a      	adds	r2, r7, r4
 80039e2:	23a0      	movs	r3, #160	@ 0xa0
 80039e4:	05db      	lsls	r3, r3, #23
 80039e6:	0011      	movs	r1, r2
 80039e8:	0018      	movs	r0, r3
 80039ea:	f003 f99b 	bl	8006d24 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB11
                           PB14 PB3 PB4 PB5
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_11
 80039ee:	193b      	adds	r3, r7, r4
 80039f0:	4a3e      	ldr	r2, [pc, #248]	@ (8003aec <MX_GPIO_Init+0x214>)
 80039f2:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_14|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80039f4:	193b      	adds	r3, r7, r4
 80039f6:	2203      	movs	r2, #3
 80039f8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fa:	193b      	adds	r3, r7, r4
 80039fc:	2200      	movs	r2, #0
 80039fe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a00:	193b      	adds	r3, r7, r4
 8003a02:	4a35      	ldr	r2, [pc, #212]	@ (8003ad8 <MX_GPIO_Init+0x200>)
 8003a04:	0019      	movs	r1, r3
 8003a06:	0010      	movs	r0, r2
 8003a08:	f003 f98c 	bl	8006d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MIC_Trigger_Pin;
 8003a0c:	0021      	movs	r1, r4
 8003a0e:	187b      	adds	r3, r7, r1
 8003a10:	2280      	movs	r2, #128	@ 0x80
 8003a12:	00d2      	lsls	r2, r2, #3
 8003a14:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a16:	000c      	movs	r4, r1
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a1e:	193b      	adds	r3, r7, r4
 8003a20:	2200      	movs	r2, #0
 8003a22:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a24:	193b      	adds	r3, r7, r4
 8003a26:	2203      	movs	r2, #3
 8003a28:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MIC_Trigger_GPIO_Port, &GPIO_InitStruct);
 8003a2a:	193b      	adds	r3, r7, r4
 8003a2c:	4a2a      	ldr	r2, [pc, #168]	@ (8003ad8 <MX_GPIO_Init+0x200>)
 8003a2e:	0019      	movs	r1, r3
 8003a30:	0010      	movs	r0, r2
 8003a32:	f003 f977 	bl	8006d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = STATUS_LED_Pin;
 8003a36:	0021      	movs	r1, r4
 8003a38:	187b      	adds	r3, r7, r1
 8003a3a:	2280      	movs	r2, #128	@ 0x80
 8003a3c:	0052      	lsls	r2, r2, #1
 8003a3e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a40:	000c      	movs	r4, r1
 8003a42:	193b      	adds	r3, r7, r4
 8003a44:	2201      	movs	r2, #1
 8003a46:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a48:	193b      	adds	r3, r7, r4
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a4e:	193b      	adds	r3, r7, r4
 8003a50:	2200      	movs	r2, #0
 8003a52:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(STATUS_LED_GPIO_Port, &GPIO_InitStruct);
 8003a54:	193b      	adds	r3, r7, r4
 8003a56:	4a21      	ldr	r2, [pc, #132]	@ (8003adc <MX_GPIO_Init+0x204>)
 8003a58:	0019      	movs	r1, r3
 8003a5a:	0010      	movs	r0, r2
 8003a5c:	f003 f962 	bl	8006d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_EN_Pin;
 8003a60:	0021      	movs	r1, r4
 8003a62:	187b      	adds	r3, r7, r1
 8003a64:	2280      	movs	r2, #128	@ 0x80
 8003a66:	0212      	lsls	r2, r2, #8
 8003a68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a6a:	000c      	movs	r4, r1
 8003a6c:	193b      	adds	r3, r7, r4
 8003a6e:	2201      	movs	r2, #1
 8003a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a78:	193b      	adds	r3, r7, r4
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(Wireless_EN_GPIO_Port, &GPIO_InitStruct);
 8003a7e:	193a      	adds	r2, r7, r4
 8003a80:	23a0      	movs	r3, #160	@ 0xa0
 8003a82:	05db      	lsls	r3, r3, #23
 8003a84:	0011      	movs	r1, r2
 8003a86:	0018      	movs	r0, r3
 8003a88:	f003 f94c 	bl	8006d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003a8c:	193b      	adds	r3, r7, r4
 8003a8e:	2204      	movs	r2, #4
 8003a90:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a92:	193b      	adds	r3, r7, r4
 8003a94:	2203      	movs	r2, #3
 8003a96:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a98:	193b      	adds	r3, r7, r4
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a9e:	193b      	adds	r3, r7, r4
 8003aa0:	4a13      	ldr	r2, [pc, #76]	@ (8003af0 <MX_GPIO_Init+0x218>)
 8003aa2:	0019      	movs	r1, r3
 8003aa4:	0010      	movs	r0, r2
 8003aa6:	f003 f93d 	bl	8006d24 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Wireless_PG_Pin;
 8003aaa:	0021      	movs	r1, r4
 8003aac:	187b      	adds	r3, r7, r1
 8003aae:	2280      	movs	r2, #128	@ 0x80
 8003ab0:	0052      	lsls	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ab4:	187b      	adds	r3, r7, r1
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	187b      	adds	r3, r7, r1
 8003abc:	2200      	movs	r2, #0
 8003abe:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Wireless_PG_GPIO_Port, &GPIO_InitStruct);
 8003ac0:	187b      	adds	r3, r7, r1
 8003ac2:	4a05      	ldr	r2, [pc, #20]	@ (8003ad8 <MX_GPIO_Init+0x200>)
 8003ac4:	0019      	movs	r1, r3
 8003ac6:	0010      	movs	r0, r2
 8003ac8:	f003 f92c 	bl	8006d24 <HAL_GPIO_Init>

}
 8003acc:	46c0      	nop			@ (mov r8, r8)
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	b00b      	add	sp, #44	@ 0x2c
 8003ad2:	bd90      	pop	{r4, r7, pc}
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	50000400 	.word	0x50000400
 8003adc:	50000800 	.word	0x50000800
 8003ae0:	00003aff 	.word	0x00003aff
 8003ae4:	50001c00 	.word	0x50001c00
 8003ae8:	000011fd 	.word	0x000011fd
 8003aec:	00004a3f 	.word	0x00004a3f
 8003af0:	50000c00 	.word	0x50000c00

08003af4 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8003af4:	b580      	push	{r7, lr}
 8003af6:	b082      	sub	sp, #8
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	6078      	str	r0, [r7, #4]
 8003afc:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8003afe:	683a      	ldr	r2, [r7, #0]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	0011      	movs	r1, r2
 8003b04:	0018      	movs	r0, r3
 8003b06:	f002 fae3 	bl	80060d0 <HIDS_Init>
}
 8003b0a:	46c0      	nop			@ (mov r8, r8)
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	b002      	add	sp, #8
 8003b10:	bd80      	pop	{r7, pc}

08003b12 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8003b12:	b580      	push	{r7, lr}
 8003b14:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8003b16:	f002 fafd 	bl	8006114 <HIDS_StartMeasurement>
}
 8003b1a:	46c0      	nop			@ (mov r8, r8)
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b082      	sub	sp, #8
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	0011      	movs	r1, r2
 8003b30:	0018      	movs	r0, r3
 8003b32:	f002 fbcb 	bl	80062cc <HIDS_GetMeasurementValues>
 8003b36:	0003      	movs	r3, r0
}
 8003b38:	0018      	movs	r0, r3
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	b002      	add	sp, #8
 8003b3e:	bd80      	pop	{r7, pc}

08003b40 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8003b44:	f002 fb66 	bl	8006214 <HIDS_DeviceConnected>
 8003b48:	0003      	movs	r3, r0
}
 8003b4a:	0018      	movs	r0, r3
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b54:	4b1b      	ldr	r3, [pc, #108]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b56:	4a1c      	ldr	r2, [pc, #112]	@ (8003bc8 <MX_I2C1_Init+0x78>)
 8003b58:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8003b5a:	4b1a      	ldr	r3, [pc, #104]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b5c:	4a1b      	ldr	r2, [pc, #108]	@ (8003bcc <MX_I2C1_Init+0x7c>)
 8003b5e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003b60:	4b18      	ldr	r3, [pc, #96]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b62:	2200      	movs	r2, #0
 8003b64:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b66:	4b17      	ldr	r3, [pc, #92]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b68:	2201      	movs	r2, #1
 8003b6a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b6c:	4b15      	ldr	r3, [pc, #84]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b72:	4b14      	ldr	r3, [pc, #80]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b74:	2200      	movs	r2, #0
 8003b76:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b78:	4b12      	ldr	r3, [pc, #72]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b7e:	4b11      	ldr	r3, [pc, #68]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b80:	2200      	movs	r2, #0
 8003b82:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b84:	4b0f      	ldr	r3, [pc, #60]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b86:	2200      	movs	r2, #0
 8003b88:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b8a:	4b0e      	ldr	r3, [pc, #56]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b8c:	0018      	movs	r0, r3
 8003b8e:	f003 fa65 	bl	800705c <HAL_I2C_Init>
 8003b92:	1e03      	subs	r3, r0, #0
 8003b94:	d001      	beq.n	8003b9a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b96:	f000 fa0d 	bl	8003fb4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b9a:	4b0a      	ldr	r3, [pc, #40]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	0018      	movs	r0, r3
 8003ba0:	f005 f9d4 	bl	8008f4c <HAL_I2CEx_ConfigAnalogFilter>
 8003ba4:	1e03      	subs	r3, r0, #0
 8003ba6:	d001      	beq.n	8003bac <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003ba8:	f000 fa04 	bl	8003fb4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003bac:	4b05      	ldr	r3, [pc, #20]	@ (8003bc4 <MX_I2C1_Init+0x74>)
 8003bae:	2100      	movs	r1, #0
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f005 fa17 	bl	8008fe4 <HAL_I2CEx_ConfigDigitalFilter>
 8003bb6:	1e03      	subs	r3, r0, #0
 8003bb8:	d001      	beq.n	8003bbe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003bba:	f000 f9fb 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003bbe:	46c0      	nop			@ (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	200002ac 	.word	0x200002ac
 8003bc8:	40005400 	.word	0x40005400
 8003bcc:	00503d58 	.word	0x00503d58

08003bd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8003bd0:	b590      	push	{r4, r7, lr}
 8003bd2:	b089      	sub	sp, #36	@ 0x24
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	240c      	movs	r4, #12
 8003bda:	193b      	adds	r3, r7, r4
 8003bdc:	0018      	movs	r0, r3
 8003bde:	2314      	movs	r3, #20
 8003be0:	001a      	movs	r2, r3
 8003be2:	2100      	movs	r1, #0
 8003be4:	f009 f906 	bl	800cdf4 <memset>
  if(i2cHandle->Instance==I2C1)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	4a45      	ldr	r2, [pc, #276]	@ (8003d04 <HAL_I2C_MspInit+0x134>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d000      	beq.n	8003bf4 <HAL_I2C_MspInit+0x24>
 8003bf2:	e082      	b.n	8003cfa <HAL_I2C_MspInit+0x12a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bf4:	4b44      	ldr	r3, [pc, #272]	@ (8003d08 <HAL_I2C_MspInit+0x138>)
 8003bf6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bf8:	4b43      	ldr	r3, [pc, #268]	@ (8003d08 <HAL_I2C_MspInit+0x138>)
 8003bfa:	2102      	movs	r1, #2
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003c00:	4b41      	ldr	r3, [pc, #260]	@ (8003d08 <HAL_I2C_MspInit+0x138>)
 8003c02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c04:	2202      	movs	r2, #2
 8003c06:	4013      	ands	r3, r2
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	68bb      	ldr	r3, [r7, #8]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c0c:	0021      	movs	r1, r4
 8003c0e:	187b      	adds	r3, r7, r1
 8003c10:	22c0      	movs	r2, #192	@ 0xc0
 8003c12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003c14:	187b      	adds	r3, r7, r1
 8003c16:	2212      	movs	r2, #18
 8003c18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	187b      	adds	r3, r7, r1
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c20:	187b      	adds	r3, r7, r1
 8003c22:	2203      	movs	r2, #3
 8003c24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8003c26:	187b      	adds	r3, r7, r1
 8003c28:	2201      	movs	r2, #1
 8003c2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c2c:	187b      	adds	r3, r7, r1
 8003c2e:	4a37      	ldr	r2, [pc, #220]	@ (8003d0c <HAL_I2C_MspInit+0x13c>)
 8003c30:	0019      	movs	r1, r3
 8003c32:	0010      	movs	r0, r2
 8003c34:	f003 f876 	bl	8006d24 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003c38:	4b33      	ldr	r3, [pc, #204]	@ (8003d08 <HAL_I2C_MspInit+0x138>)
 8003c3a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003c3c:	4b32      	ldr	r3, [pc, #200]	@ (8003d08 <HAL_I2C_MspInit+0x138>)
 8003c3e:	2180      	movs	r1, #128	@ 0x80
 8003c40:	0389      	lsls	r1, r1, #14
 8003c42:	430a      	orrs	r2, r1
 8003c44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8003c46:	4b32      	ldr	r3, [pc, #200]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c48:	4a32      	ldr	r2, [pc, #200]	@ (8003d14 <HAL_I2C_MspInit+0x144>)
 8003c4a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8003c4c:	4b30      	ldr	r3, [pc, #192]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c4e:	2206      	movs	r2, #6
 8003c50:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c52:	4b2f      	ldr	r3, [pc, #188]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c58:	4b2d      	ldr	r3, [pc, #180]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c5e:	4b2c      	ldr	r3, [pc, #176]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c60:	2280      	movs	r2, #128	@ 0x80
 8003c62:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c64:	4b2a      	ldr	r3, [pc, #168]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c6a:	4b29      	ldr	r3, [pc, #164]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003c70:	4b27      	ldr	r3, [pc, #156]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c72:	2200      	movs	r2, #0
 8003c74:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003c76:	4b26      	ldr	r3, [pc, #152]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c78:	2200      	movs	r2, #0
 8003c7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8003c7c:	4b24      	ldr	r3, [pc, #144]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c7e:	0018      	movs	r0, r3
 8003c80:	f002 fdf8 	bl	8006874 <HAL_DMA_Init>
 8003c84:	1e03      	subs	r3, r0, #0
 8003c86:	d001      	beq.n	8003c8c <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8003c88:	f000 f994 	bl	8003fb4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	4a20      	ldr	r2, [pc, #128]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c90:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c92:	4b1f      	ldr	r3, [pc, #124]	@ (8003d10 <HAL_I2C_MspInit+0x140>)
 8003c94:	687a      	ldr	r2, [r7, #4]
 8003c96:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8003c98:	4b1f      	ldr	r3, [pc, #124]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003c9a:	4a20      	ldr	r2, [pc, #128]	@ (8003d1c <HAL_I2C_MspInit+0x14c>)
 8003c9c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8003c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003ca0:	2206      	movs	r2, #6
 8003ca2:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003ca6:	2210      	movs	r2, #16
 8003ca8:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003caa:	4b1b      	ldr	r3, [pc, #108]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003cac:	2200      	movs	r2, #0
 8003cae:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003cb0:	4b19      	ldr	r3, [pc, #100]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003cb2:	2280      	movs	r2, #128	@ 0x80
 8003cb4:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003cb6:	4b18      	ldr	r3, [pc, #96]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003cb8:	2200      	movs	r2, #0
 8003cba:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003cbc:	4b16      	ldr	r3, [pc, #88]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8003cc2:	4b15      	ldr	r3, [pc, #84]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003cc8:	4b13      	ldr	r3, [pc, #76]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003cca:	2200      	movs	r2, #0
 8003ccc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8003cce:	4b12      	ldr	r3, [pc, #72]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f002 fdcf 	bl	8006874 <HAL_DMA_Init>
 8003cd6:	1e03      	subs	r3, r0, #0
 8003cd8:	d001      	beq.n	8003cde <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8003cda:	f000 f96b 	bl	8003fb4 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	4a0d      	ldr	r2, [pc, #52]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003ce2:	639a      	str	r2, [r3, #56]	@ 0x38
 8003ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8003d18 <HAL_I2C_MspInit+0x148>)
 8003ce6:	687a      	ldr	r2, [r7, #4]
 8003ce8:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8003cea:	2200      	movs	r2, #0
 8003cec:	2100      	movs	r1, #0
 8003cee:	2017      	movs	r0, #23
 8003cf0:	f002 fd8e 	bl	8006810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8003cf4:	2017      	movs	r0, #23
 8003cf6:	f002 fda0 	bl	800683a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003cfa:	46c0      	nop			@ (mov r8, r8)
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	b009      	add	sp, #36	@ 0x24
 8003d00:	bd90      	pop	{r4, r7, pc}
 8003d02:	46c0      	nop			@ (mov r8, r8)
 8003d04:	40005400 	.word	0x40005400
 8003d08:	40021000 	.word	0x40021000
 8003d0c:	50000400 	.word	0x50000400
 8003d10:	20000300 	.word	0x20000300
 8003d14:	40020030 	.word	0x40020030
 8003d18:	20000348 	.word	0x20000348
 8003d1c:	4002001c 	.word	0x4002001c

08003d20 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8003d24:	4b10      	ldr	r3, [pc, #64]	@ (8003d68 <MX_I2S2_Init+0x48>)
 8003d26:	4a11      	ldr	r2, [pc, #68]	@ (8003d6c <MX_I2S2_Init+0x4c>)
 8003d28:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8003d2a:	4b0f      	ldr	r3, [pc, #60]	@ (8003d68 <MX_I2S2_Init+0x48>)
 8003d2c:	22c0      	movs	r2, #192	@ 0xc0
 8003d2e:	0092      	lsls	r2, r2, #2
 8003d30:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 8003d32:	4b0d      	ldr	r3, [pc, #52]	@ (8003d68 <MX_I2S2_Init+0x48>)
 8003d34:	2210      	movs	r2, #16
 8003d36:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_32B;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <MX_I2S2_Init+0x48>)
 8003d3a:	2205      	movs	r2, #5
 8003d3c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8003d68 <MX_I2S2_Init+0x48>)
 8003d40:	2200      	movs	r2, #0
 8003d42:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_8K;
 8003d44:	4b08      	ldr	r3, [pc, #32]	@ (8003d68 <MX_I2S2_Init+0x48>)
 8003d46:	22fa      	movs	r2, #250	@ 0xfa
 8003d48:	0152      	lsls	r2, r2, #5
 8003d4a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_HIGH;
 8003d4c:	4b06      	ldr	r3, [pc, #24]	@ (8003d68 <MX_I2S2_Init+0x48>)
 8003d4e:	2208      	movs	r2, #8
 8003d50:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8003d52:	4b05      	ldr	r3, [pc, #20]	@ (8003d68 <MX_I2S2_Init+0x48>)
 8003d54:	0018      	movs	r0, r3
 8003d56:	f005 f991 	bl	800907c <HAL_I2S_Init>
 8003d5a:	1e03      	subs	r3, r0, #0
 8003d5c:	d001      	beq.n	8003d62 <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8003d5e:	f000 f929 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8003d62:	46c0      	nop			@ (mov r8, r8)
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	20000390 	.word	0x20000390
 8003d6c:	40003800 	.word	0x40003800

08003d70 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8003d70:	b590      	push	{r4, r7, lr}
 8003d72:	b089      	sub	sp, #36	@ 0x24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	240c      	movs	r4, #12
 8003d7a:	193b      	adds	r3, r7, r4
 8003d7c:	0018      	movs	r0, r3
 8003d7e:	2314      	movs	r3, #20
 8003d80:	001a      	movs	r2, r3
 8003d82:	2100      	movs	r1, #0
 8003d84:	f009 f836 	bl	800cdf4 <memset>
  if(i2sHandle->Instance==SPI2)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8003e44 <HAL_I2S_MspInit+0xd4>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d154      	bne.n	8003e3c <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d92:	4b2d      	ldr	r3, [pc, #180]	@ (8003e48 <HAL_I2S_MspInit+0xd8>)
 8003d94:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003d96:	4b2c      	ldr	r3, [pc, #176]	@ (8003e48 <HAL_I2S_MspInit+0xd8>)
 8003d98:	2180      	movs	r1, #128	@ 0x80
 8003d9a:	01c9      	lsls	r1, r1, #7
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003da0:	4b29      	ldr	r3, [pc, #164]	@ (8003e48 <HAL_I2S_MspInit+0xd8>)
 8003da2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003da4:	4b28      	ldr	r3, [pc, #160]	@ (8003e48 <HAL_I2S_MspInit+0xd8>)
 8003da6:	2102      	movs	r1, #2
 8003da8:	430a      	orrs	r2, r1
 8003daa:	62da      	str	r2, [r3, #44]	@ 0x2c
 8003dac:	4b26      	ldr	r3, [pc, #152]	@ (8003e48 <HAL_I2S_MspInit+0xd8>)
 8003dae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003db0:	2202      	movs	r2, #2
 8003db2:	4013      	ands	r3, r2
 8003db4:	60bb      	str	r3, [r7, #8]
 8003db6:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8003db8:	193b      	adds	r3, r7, r4
 8003dba:	22b0      	movs	r2, #176	@ 0xb0
 8003dbc:	0212      	lsls	r2, r2, #8
 8003dbe:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dc0:	0021      	movs	r1, r4
 8003dc2:	187b      	adds	r3, r7, r1
 8003dc4:	2202      	movs	r2, #2
 8003dc6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	2200      	movs	r2, #0
 8003dcc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	4a1b      	ldr	r2, [pc, #108]	@ (8003e4c <HAL_I2S_MspInit+0xdc>)
 8003dde:	0019      	movs	r1, r3
 8003de0:	0010      	movs	r0, r2
 8003de2:	f002 ff9f 	bl	8006d24 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8003de6:	4b1a      	ldr	r3, [pc, #104]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003de8:	4a1a      	ldr	r2, [pc, #104]	@ (8003e54 <HAL_I2S_MspInit+0xe4>)
 8003dea:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8003dec:	4b18      	ldr	r3, [pc, #96]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003dee:	2202      	movs	r2, #2
 8003df0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003df2:	4b17      	ldr	r3, [pc, #92]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003df8:	4b15      	ldr	r3, [pc, #84]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003dfe:	4b14      	ldr	r3, [pc, #80]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003e00:	2280      	movs	r2, #128	@ 0x80
 8003e02:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003e04:	4b12      	ldr	r3, [pc, #72]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003e06:	2280      	movs	r2, #128	@ 0x80
 8003e08:	0052      	lsls	r2, r2, #1
 8003e0a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003e0c:	4b10      	ldr	r3, [pc, #64]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003e0e:	2280      	movs	r2, #128	@ 0x80
 8003e10:	00d2      	lsls	r2, r2, #3
 8003e12:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8003e14:	4b0e      	ldr	r3, [pc, #56]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003e16:	2220      	movs	r2, #32
 8003e18:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003e1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8003e20:	4b0b      	ldr	r3, [pc, #44]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003e22:	0018      	movs	r0, r3
 8003e24:	f002 fd26 	bl	8006874 <HAL_DMA_Init>
 8003e28:	1e03      	subs	r3, r0, #0
 8003e2a:	d001      	beq.n	8003e30 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8003e2c:	f000 f8c2 	bl	8003fb4 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	4a07      	ldr	r2, [pc, #28]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003e34:	631a      	str	r2, [r3, #48]	@ 0x30
 8003e36:	4b06      	ldr	r3, [pc, #24]	@ (8003e50 <HAL_I2S_MspInit+0xe0>)
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003e3c:	46c0      	nop			@ (mov r8, r8)
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	b009      	add	sp, #36	@ 0x24
 8003e42:	bd90      	pop	{r4, r7, pc}
 8003e44:	40003800 	.word	0x40003800
 8003e48:	40021000 	.word	0x40021000
 8003e4c:	50000400 	.word	0x50000400
 8003e50:	200003cc 	.word	0x200003cc
 8003e54:	40020044 	.word	0x40020044

08003e58 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e5e:	f002 fb97 	bl	8006590 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e62:	f000 f82b 	bl	8003ebc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e66:	f7ff fd37 	bl	80038d8 <MX_GPIO_Init>
  MX_DMA_Init();
 8003e6a:	f7ff fcbf 	bl	80037ec <MX_DMA_Init>
  MX_I2C1_Init();
 8003e6e:	f7ff fe6f 	bl	8003b50 <MX_I2C1_Init>
  MX_I2S2_Init();
 8003e72:	f7ff ff55 	bl	8003d20 <MX_I2S2_Init>
  MX_USART4_UART_Init();
 8003e76:	f001 fe4f 	bl	8005b18 <MX_USART4_UART_Init>
  MX_USART1_UART_Init();
 8003e7a:	f001 fe1d 	bl	8005ab8 <MX_USART1_UART_Init>
  MX_RTC_Init();
 8003e7e:	f000 fab3 	bl	80043e8 <MX_RTC_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
 8003e82:	f002 fbeb 	bl	800665c <HAL_GetTick>
 8003e86:	0003      	movs	r3, r0
 8003e88:	22fa      	movs	r2, #250	@ 0xfa
 8003e8a:	0092      	lsls	r2, r2, #2
 8003e8c:	4694      	mov	ip, r2
 8003e8e:	4463      	add	r3, ip
 8003e90:	607b      	str	r3, [r7, #4]
  SetVerboseLevel(VERBOSE_ALL);
 8003e92:	2003      	movs	r0, #3
 8003e94:	f002 f840 	bl	8005f18 <SetVerboseLevel>
  BinaryReleaseInfo();
 8003e98:	f002 f856 	bl	8005f48 <BinaryReleaseInfo>
  Gadget_Init(&hi2c1, &hi2s2, &huart4);
 8003e9c:	4a04      	ldr	r2, [pc, #16]	@ (8003eb0 <main+0x58>)
 8003e9e:	4905      	ldr	r1, [pc, #20]	@ (8003eb4 <main+0x5c>)
 8003ea0:	4b05      	ldr	r3, [pc, #20]	@ (8003eb8 <main+0x60>)
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f7ff fcc8 	bl	8003838 <Gadget_Init>
//  MIC_Start(16000, 512);
  while (1) {
//    MIC_GetSample();
	  // Upkeep gadget
//    UpkeepGadget();
    ESP_Upkeep();
 8003ea8:	f7ff fb7a 	bl	80035a0 <ESP_Upkeep>
 8003eac:	e7fc      	b.n	8003ea8 <main+0x50>
 8003eae:	46c0      	nop			@ (mov r8, r8)
 8003eb0:	20000714 	.word	0x20000714
 8003eb4:	20000390 	.word	0x20000390
 8003eb8:	200002ac 	.word	0x200002ac

08003ebc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ebc:	b590      	push	{r4, r7, lr}
 8003ebe:	b09d      	sub	sp, #116	@ 0x74
 8003ec0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ec2:	2438      	movs	r4, #56	@ 0x38
 8003ec4:	193b      	adds	r3, r7, r4
 8003ec6:	0018      	movs	r0, r3
 8003ec8:	2338      	movs	r3, #56	@ 0x38
 8003eca:	001a      	movs	r2, r3
 8003ecc:	2100      	movs	r1, #0
 8003ece:	f008 ff91 	bl	800cdf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003ed2:	2324      	movs	r3, #36	@ 0x24
 8003ed4:	18fb      	adds	r3, r7, r3
 8003ed6:	0018      	movs	r0, r3
 8003ed8:	2314      	movs	r3, #20
 8003eda:	001a      	movs	r2, r3
 8003edc:	2100      	movs	r1, #0
 8003ede:	f008 ff89 	bl	800cdf4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ee2:	003b      	movs	r3, r7
 8003ee4:	0018      	movs	r0, r3
 8003ee6:	2324      	movs	r3, #36	@ 0x24
 8003ee8:	001a      	movs	r2, r3
 8003eea:	2100      	movs	r1, #0
 8003eec:	f008 ff82 	bl	800cdf4 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ef0:	4b2d      	ldr	r3, [pc, #180]	@ (8003fa8 <SystemClock_Config+0xec>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2d      	ldr	r2, [pc, #180]	@ (8003fac <SystemClock_Config+0xf0>)
 8003ef6:	401a      	ands	r2, r3
 8003ef8:	4b2b      	ldr	r3, [pc, #172]	@ (8003fa8 <SystemClock_Config+0xec>)
 8003efa:	2180      	movs	r1, #128	@ 0x80
 8003efc:	0109      	lsls	r1, r1, #4
 8003efe:	430a      	orrs	r2, r1
 8003f00:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003f02:	f005 fbdd 	bl	80096c0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003f06:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb0 <SystemClock_Config+0xf4>)
 8003f08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8003f0a:	4b29      	ldr	r3, [pc, #164]	@ (8003fb0 <SystemClock_Config+0xf4>)
 8003f0c:	4927      	ldr	r1, [pc, #156]	@ (8003fac <SystemClock_Config+0xf0>)
 8003f0e:	400a      	ands	r2, r1
 8003f10:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8003f12:	193b      	adds	r3, r7, r4
 8003f14:	2206      	movs	r2, #6
 8003f16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003f18:	193b      	adds	r3, r7, r4
 8003f1a:	2280      	movs	r2, #128	@ 0x80
 8003f1c:	0052      	lsls	r2, r2, #1
 8003f1e:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f20:	193b      	adds	r3, r7, r4
 8003f22:	2201      	movs	r2, #1
 8003f24:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f26:	193b      	adds	r3, r7, r4
 8003f28:	2210      	movs	r2, #16
 8003f2a:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003f2c:	193b      	adds	r3, r7, r4
 8003f2e:	2200      	movs	r2, #0
 8003f30:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f32:	193b      	adds	r3, r7, r4
 8003f34:	0018      	movs	r0, r3
 8003f36:	f005 fbd1 	bl	80096dc <HAL_RCC_OscConfig>
 8003f3a:	1e03      	subs	r3, r0, #0
 8003f3c:	d001      	beq.n	8003f42 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8003f3e:	f000 f839 	bl	8003fb4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f42:	2124      	movs	r1, #36	@ 0x24
 8003f44:	187b      	adds	r3, r7, r1
 8003f46:	220f      	movs	r2, #15
 8003f48:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003f4a:	187b      	adds	r3, r7, r1
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003f50:	187b      	adds	r3, r7, r1
 8003f52:	2200      	movs	r2, #0
 8003f54:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f56:	187b      	adds	r3, r7, r1
 8003f58:	2200      	movs	r2, #0
 8003f5a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f5c:	187b      	adds	r3, r7, r1
 8003f5e:	2200      	movs	r2, #0
 8003f60:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f62:	187b      	adds	r3, r7, r1
 8003f64:	2100      	movs	r1, #0
 8003f66:	0018      	movs	r0, r3
 8003f68:	f005 ff8c 	bl	8009e84 <HAL_RCC_ClockConfig>
 8003f6c:	1e03      	subs	r3, r0, #0
 8003f6e:	d001      	beq.n	8003f74 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8003f70:	f000 f820 	bl	8003fb4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_I2C1
 8003f74:	003b      	movs	r3, r7
 8003f76:	2229      	movs	r2, #41	@ 0x29
 8003f78:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_RTC;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003f7a:	003b      	movs	r3, r7
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	609a      	str	r2, [r3, #8]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003f80:	003b      	movs	r3, r7
 8003f82:	2200      	movs	r2, #0
 8003f84:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003f86:	003b      	movs	r3, r7
 8003f88:	2280      	movs	r2, #128	@ 0x80
 8003f8a:	0252      	lsls	r2, r2, #9
 8003f8c:	605a      	str	r2, [r3, #4]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f8e:	003b      	movs	r3, r7
 8003f90:	0018      	movs	r0, r3
 8003f92:	f006 f99b 	bl	800a2cc <HAL_RCCEx_PeriphCLKConfig>
 8003f96:	1e03      	subs	r3, r0, #0
 8003f98:	d001      	beq.n	8003f9e <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8003f9a:	f000 f80b 	bl	8003fb4 <Error_Handler>
  }
}
 8003f9e:	46c0      	nop			@ (mov r8, r8)
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	b01d      	add	sp, #116	@ 0x74
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	46c0      	nop			@ (mov r8, r8)
 8003fa8:	40007000 	.word	0x40007000
 8003fac:	ffffe7ff 	.word	0xffffe7ff
 8003fb0:	40021000 	.word	0x40021000

08003fb4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003fb4:	b580      	push	{r7, lr}
 8003fb6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003fb8:	b672      	cpsid	i
}
 8003fba:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003fbc:	46c0      	nop			@ (mov r8, r8)
 8003fbe:	e7fd      	b.n	8003fbc <Error_Handler+0x8>

08003fc0 <HT_StartMeasurementWrapper>:
static MeasurementParameters Measurements[MEAS_MEASUREMENT_COUNT];
static EnabledMeasurements MeasEnabled;
static MeasurementState MeasState = MEAS_STATE_INIT;
static uint8_t CurrentMeasurementIndex = 0;

static void HT_StartMeasurementWrapper(void) {
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8003fc4:	f7ff fda5 	bl	8003b12 <HT_StartMeasurement>
}
 8003fc8:	46c0      	nop			@ (mov r8, r8)
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}
	...

08003fd0 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8003fd4:	4a04      	ldr	r2, [pc, #16]	@ (8003fe8 <HT_IsMeasurementDoneWrapper+0x18>)
 8003fd6:	4b05      	ldr	r3, [pc, #20]	@ (8003fec <HT_IsMeasurementDoneWrapper+0x1c>)
 8003fd8:	0011      	movs	r1, r2
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f7ff fda0 	bl	8003b20 <HT_GetMeasurementValues>
 8003fe0:	0003      	movs	r3, r0
}
 8003fe2:	0018      	movs	r0, r3
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	bd80      	pop	{r7, pc}
 8003fe8:	20000418 	.word	0x20000418
 8003fec:	20000414 	.word	0x20000414

08003ff0 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8003ff4:	f7ff fc53 	bl	800389e <Gas_StartMeasurement>
}
 8003ff8:	46c0      	nop			@ (mov r8, r8)
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}
	...

08004000 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8004000:	b580      	push	{r7, lr}
 8004002:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8004004:	4b03      	ldr	r3, [pc, #12]	@ (8004014 <VOC_IsMeasurementDoneWrapper+0x14>)
 8004006:	0018      	movs	r0, r3
 8004008:	f7ff fc50 	bl	80038ac <Gas_GetMeasurementValues>
 800400c:	0003      	movs	r3, r0
}
 800400e:	0018      	movs	r0, r3
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}
 8004014:	2000041c 	.word	0x2000041c

08004018 <NO_StartMeasurementWrapper>:

static void NO_StartMeasurementWrapper(void) {
 8004018:	b580      	push	{r7, lr}
 800401a:	af00      	add	r7, sp, #0
  // TODO: Implement NO wrapper.
}
 800401c:	46c0      	nop			@ (mov r8, r8)
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <NO_IsMeasurementDoneWrapper>:

static bool NO_IsMeasurementDoneWrapper(void) {
 8004022:	b580      	push	{r7, lr}
 8004024:	af00      	add	r7, sp, #0
  return true;
 8004026:	2301      	movs	r3, #1
}
 8004028:	0018      	movs	r0, r3
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <MIC_StartMeasurementWrapper>:

static void MIC_StartMeasurementWrapper(void) {
 8004030:	b580      	push	{r7, lr}
 8004032:	af00      	add	r7, sp, #0
  MIC_Start(SAMPLE_RATE_48K, NR_SAMPLES_128);
 8004034:	2380      	movs	r3, #128	@ 0x80
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4a03      	ldr	r2, [pc, #12]	@ (8004048 <MIC_StartMeasurementWrapper+0x18>)
 800403a:	0019      	movs	r1, r3
 800403c:	0010      	movs	r0, r2
 800403e:	f000 f947 	bl	80042d0 <MIC_Start>
}
 8004042:	46c0      	nop			@ (mov r8, r8)
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}
 8004048:	0000bb80 	.word	0x0000bb80

0800404c <MIC_IsMeasurementDoneWrapper>:

static bool MIC_IsMeasurementDoneWrapper(void) {
 800404c:	b580      	push	{r7, lr}
 800404e:	af00      	add	r7, sp, #0
    return false;
 8004050:	2300      	movs	r3, #0
}
 8004052:	0018      	movs	r0, r3
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}

08004058 <Meas_Init>:

void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {
 8004058:	b5b0      	push	{r4, r5, r7, lr}
 800405a:	b094      	sub	sp, #80	@ 0x50
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  MeasState = MEAS_STATE_INIT;
 8004062:	4b5b      	ldr	r3, [pc, #364]	@ (80041d0 <Meas_Init+0x178>)
 8004064:	2200      	movs	r2, #0
 8004066:	701a      	strb	r2, [r3, #0]
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 8004068:	4b5a      	ldr	r3, [pc, #360]	@ (80041d4 <Meas_Init+0x17c>)
 800406a:	781b      	ldrb	r3, [r3, #0]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d103      	bne.n	8004078 <Meas_Init+0x20>
 8004070:	4b58      	ldr	r3, [pc, #352]	@ (80041d4 <Meas_Init+0x17c>)
 8004072:	785b      	ldrb	r3, [r3, #1]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d027      	beq.n	80040c8 <Meas_Init+0x70>
    I2CSensors_Init(sensorI2C);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	0018      	movs	r0, r3
 800407c:	f7ff fb44 	bl	8003708 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8004080:	f7ff fd5e 	bl	8003b40 <HT_DeviceConnected>
 8004084:	0003      	movs	r3, r0
 8004086:	001a      	movs	r2, r3
 8004088:	2301      	movs	r3, #1
 800408a:	4053      	eors	r3, r2
 800408c:	b2db      	uxtb	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d008      	beq.n	80040a4 <Meas_Init+0x4c>
       Error("HT device not connected!");
 8004092:	4a51      	ldr	r2, [pc, #324]	@ (80041d8 <Meas_Init+0x180>)
 8004094:	4b51      	ldr	r3, [pc, #324]	@ (80041dc <Meas_Init+0x184>)
 8004096:	0019      	movs	r1, r3
 8004098:	2001      	movs	r0, #1
 800409a:	f001 fec1 	bl	8005e20 <CreateLine>
       MeasEnabled.HT_measurementEnabled = false;
 800409e:	4b4d      	ldr	r3, [pc, #308]	@ (80041d4 <Meas_Init+0x17c>)
 80040a0:	2200      	movs	r2, #0
 80040a2:	701a      	strb	r2, [r3, #0]
    }
    if(!Gas_DeviceConnected()) {
 80040a4:	f7ff fc0f 	bl	80038c6 <Gas_DeviceConnected>
 80040a8:	0003      	movs	r3, r0
 80040aa:	001a      	movs	r2, r3
 80040ac:	2301      	movs	r3, #1
 80040ae:	4053      	eors	r3, r2
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d008      	beq.n	80040c8 <Meas_Init+0x70>
       Error("SGP device not connected!");
 80040b6:	4a4a      	ldr	r2, [pc, #296]	@ (80041e0 <Meas_Init+0x188>)
 80040b8:	4b48      	ldr	r3, [pc, #288]	@ (80041dc <Meas_Init+0x184>)
 80040ba:	0019      	movs	r1, r3
 80040bc:	2001      	movs	r0, #1
 80040be:	f001 feaf 	bl	8005e20 <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 80040c2:	4b44      	ldr	r3, [pc, #272]	@ (80041d4 <Meas_Init+0x17c>)
 80040c4:	2200      	movs	r2, #0
 80040c6:	705a      	strb	r2, [r3, #1]
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80040c8:	4b42      	ldr	r3, [pc, #264]	@ (80041d4 <Meas_Init+0x17c>)
 80040ca:	78db      	ldrb	r3, [r3, #3]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d003      	beq.n	80040d8 <Meas_Init+0x80>
    MIC_Init(micI2s);
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f8ee 	bl	80042b4 <MIC_Init>
  }
  uint8_t offset = 0;
 80040d8:	254f      	movs	r5, #79	@ 0x4f
 80040da:	197b      	adds	r3, r7, r5
 80040dc:	2200      	movs	r2, #0
 80040de:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 80040e0:	197b      	adds	r3, r7, r5
 80040e2:	781b      	ldrb	r3, [r3, #0]
 80040e4:	197a      	adds	r2, r7, r5
 80040e6:	1c59      	adds	r1, r3, #1
 80040e8:	7011      	strb	r1, [r2, #0]
 80040ea:	4a3a      	ldr	r2, [pc, #232]	@ (80041d4 <Meas_Init+0x17c>)
 80040ec:	7814      	ldrb	r4, [r2, #0]
 80040ee:	4a3d      	ldr	r2, [pc, #244]	@ (80041e4 <Meas_Init+0x18c>)
 80040f0:	0119      	lsls	r1, r3, #4
 80040f2:	483d      	ldr	r0, [pc, #244]	@ (80041e8 <Meas_Init+0x190>)
 80040f4:	5088      	str	r0, [r1, r2]
 80040f6:	493b      	ldr	r1, [pc, #236]	@ (80041e4 <Meas_Init+0x18c>)
 80040f8:	011a      	lsls	r2, r3, #4
 80040fa:	188a      	adds	r2, r1, r2
 80040fc:	3204      	adds	r2, #4
 80040fe:	493b      	ldr	r1, [pc, #236]	@ (80041ec <Meas_Init+0x194>)
 8004100:	6011      	str	r1, [r2, #0]
 8004102:	4938      	ldr	r1, [pc, #224]	@ (80041e4 <Meas_Init+0x18c>)
 8004104:	011a      	lsls	r2, r3, #4
 8004106:	188a      	adds	r2, r1, r2
 8004108:	3208      	adds	r2, #8
 800410a:	4939      	ldr	r1, [pc, #228]	@ (80041f0 <Meas_Init+0x198>)
 800410c:	6011      	str	r1, [r2, #0]
 800410e:	4a35      	ldr	r2, [pc, #212]	@ (80041e4 <Meas_Init+0x18c>)
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	18d3      	adds	r3, r2, r3
 8004114:	330c      	adds	r3, #12
 8004116:	1c22      	adds	r2, r4, #0
 8004118:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800411a:	197b      	adds	r3, r7, r5
 800411c:	781b      	ldrb	r3, [r3, #0]
 800411e:	197a      	adds	r2, r7, r5
 8004120:	1c59      	adds	r1, r3, #1
 8004122:	7011      	strb	r1, [r2, #0]
 8004124:	4a2b      	ldr	r2, [pc, #172]	@ (80041d4 <Meas_Init+0x17c>)
 8004126:	7854      	ldrb	r4, [r2, #1]
 8004128:	4a2e      	ldr	r2, [pc, #184]	@ (80041e4 <Meas_Init+0x18c>)
 800412a:	0119      	lsls	r1, r3, #4
 800412c:	4831      	ldr	r0, [pc, #196]	@ (80041f4 <Meas_Init+0x19c>)
 800412e:	5088      	str	r0, [r1, r2]
 8004130:	492c      	ldr	r1, [pc, #176]	@ (80041e4 <Meas_Init+0x18c>)
 8004132:	011a      	lsls	r2, r3, #4
 8004134:	188a      	adds	r2, r1, r2
 8004136:	3204      	adds	r2, #4
 8004138:	492f      	ldr	r1, [pc, #188]	@ (80041f8 <Meas_Init+0x1a0>)
 800413a:	6011      	str	r1, [r2, #0]
 800413c:	4929      	ldr	r1, [pc, #164]	@ (80041e4 <Meas_Init+0x18c>)
 800413e:	011a      	lsls	r2, r3, #4
 8004140:	188a      	adds	r2, r1, r2
 8004142:	3208      	adds	r2, #8
 8004144:	492d      	ldr	r1, [pc, #180]	@ (80041fc <Meas_Init+0x1a4>)
 8004146:	6011      	str	r1, [r2, #0]
 8004148:	4a26      	ldr	r2, [pc, #152]	@ (80041e4 <Meas_Init+0x18c>)
 800414a:	011b      	lsls	r3, r3, #4
 800414c:	18d3      	adds	r3, r2, r3
 800414e:	330c      	adds	r3, #12
 8004150:	1c22      	adds	r2, r4, #0
 8004152:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {NO_StartMeasurementWrapper, NO_IsMeasurementDoneWrapper, &MeasurementCtx.NO_measurementDone, MeasEnabled.NO_measurementEnabled};
 8004154:	197b      	adds	r3, r7, r5
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	197a      	adds	r2, r7, r5
 800415a:	1c59      	adds	r1, r3, #1
 800415c:	7011      	strb	r1, [r2, #0]
 800415e:	4a1d      	ldr	r2, [pc, #116]	@ (80041d4 <Meas_Init+0x17c>)
 8004160:	7894      	ldrb	r4, [r2, #2]
 8004162:	4a20      	ldr	r2, [pc, #128]	@ (80041e4 <Meas_Init+0x18c>)
 8004164:	0119      	lsls	r1, r3, #4
 8004166:	4826      	ldr	r0, [pc, #152]	@ (8004200 <Meas_Init+0x1a8>)
 8004168:	5088      	str	r0, [r1, r2]
 800416a:	491e      	ldr	r1, [pc, #120]	@ (80041e4 <Meas_Init+0x18c>)
 800416c:	011a      	lsls	r2, r3, #4
 800416e:	188a      	adds	r2, r1, r2
 8004170:	3204      	adds	r2, #4
 8004172:	4924      	ldr	r1, [pc, #144]	@ (8004204 <Meas_Init+0x1ac>)
 8004174:	6011      	str	r1, [r2, #0]
 8004176:	491b      	ldr	r1, [pc, #108]	@ (80041e4 <Meas_Init+0x18c>)
 8004178:	011a      	lsls	r2, r3, #4
 800417a:	188a      	adds	r2, r1, r2
 800417c:	3208      	adds	r2, #8
 800417e:	4922      	ldr	r1, [pc, #136]	@ (8004208 <Meas_Init+0x1b0>)
 8004180:	6011      	str	r1, [r2, #0]
 8004182:	4a18      	ldr	r2, [pc, #96]	@ (80041e4 <Meas_Init+0x18c>)
 8004184:	011b      	lsls	r3, r3, #4
 8004186:	18d3      	adds	r3, r2, r3
 8004188:	330c      	adds	r3, #12
 800418a:	1c22      	adds	r2, r4, #0
 800418c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
 800418e:	197b      	adds	r3, r7, r5
 8004190:	781b      	ldrb	r3, [r3, #0]
 8004192:	197a      	adds	r2, r7, r5
 8004194:	1c59      	adds	r1, r3, #1
 8004196:	7011      	strb	r1, [r2, #0]
 8004198:	4a0e      	ldr	r2, [pc, #56]	@ (80041d4 <Meas_Init+0x17c>)
 800419a:	78d4      	ldrb	r4, [r2, #3]
 800419c:	4a11      	ldr	r2, [pc, #68]	@ (80041e4 <Meas_Init+0x18c>)
 800419e:	0119      	lsls	r1, r3, #4
 80041a0:	481a      	ldr	r0, [pc, #104]	@ (800420c <Meas_Init+0x1b4>)
 80041a2:	5088      	str	r0, [r1, r2]
 80041a4:	490f      	ldr	r1, [pc, #60]	@ (80041e4 <Meas_Init+0x18c>)
 80041a6:	011a      	lsls	r2, r3, #4
 80041a8:	188a      	adds	r2, r1, r2
 80041aa:	3204      	adds	r2, #4
 80041ac:	4918      	ldr	r1, [pc, #96]	@ (8004210 <Meas_Init+0x1b8>)
 80041ae:	6011      	str	r1, [r2, #0]
 80041b0:	490c      	ldr	r1, [pc, #48]	@ (80041e4 <Meas_Init+0x18c>)
 80041b2:	011a      	lsls	r2, r3, #4
 80041b4:	188a      	adds	r2, r1, r2
 80041b6:	3208      	adds	r2, #8
 80041b8:	4916      	ldr	r1, [pc, #88]	@ (8004214 <Meas_Init+0x1bc>)
 80041ba:	6011      	str	r1, [r2, #0]
 80041bc:	4a09      	ldr	r2, [pc, #36]	@ (80041e4 <Meas_Init+0x18c>)
 80041be:	011b      	lsls	r3, r3, #4
 80041c0:	18d3      	adds	r3, r2, r3
 80041c2:	330c      	adds	r3, #12
 80041c4:	1c22      	adds	r2, r4, #0
 80041c6:	701a      	strb	r2, [r3, #0]
}
 80041c8:	46c0      	nop			@ (mov r8, r8)
 80041ca:	46bd      	mov	sp, r7
 80041cc:	b014      	add	sp, #80	@ 0x50
 80041ce:	bdb0      	pop	{r4, r5, r7, pc}
 80041d0:	20000468 	.word	0x20000468
 80041d4:	20000464 	.word	0x20000464
 80041d8:	0800f58c 	.word	0x0800f58c
 80041dc:	0800f5a8 	.word	0x0800f5a8
 80041e0:	0800f5ac 	.word	0x0800f5ac
 80041e4:	20000424 	.word	0x20000424
 80041e8:	08003fc1 	.word	0x08003fc1
 80041ec:	08003fd1 	.word	0x08003fd1
 80041f0:	20000420 	.word	0x20000420
 80041f4:	08003ff1 	.word	0x08003ff1
 80041f8:	08004001 	.word	0x08004001
 80041fc:	20000421 	.word	0x20000421
 8004200:	08004019 	.word	0x08004019
 8004204:	08004023 	.word	0x08004023
 8004208:	20000422 	.word	0x20000422
 800420c:	08004031 	.word	0x08004031
 8004210:	0800404d 	.word	0x0800404d
 8004214:	20000423 	.word	0x20000423

08004218 <Meas_SetEnabledSensors>:
    MeasState = MEAS_STATE_INIT;
    break;
  }
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8004218:	b590      	push	{r4, r7, lr}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	1d3b      	adds	r3, r7, #4
 8004220:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8004222:	240f      	movs	r4, #15
 8004224:	193b      	adds	r3, r7, r4
 8004226:	2200      	movs	r2, #0
 8004228:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 800422a:	4b20      	ldr	r3, [pc, #128]	@ (80042ac <Meas_SetEnabledSensors+0x94>)
 800422c:	1d3a      	adds	r2, r7, #4
 800422e:	6812      	ldr	r2, [r2, #0]
 8004230:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8004232:	193b      	adds	r3, r7, r4
 8004234:	781b      	ldrb	r3, [r3, #0]
 8004236:	193a      	adds	r2, r7, r4
 8004238:	1c59      	adds	r1, r3, #1
 800423a:	7011      	strb	r1, [r2, #0]
 800423c:	0018      	movs	r0, r3
 800423e:	1d3b      	adds	r3, r7, #4
 8004240:	7819      	ldrb	r1, [r3, #0]
 8004242:	4a1b      	ldr	r2, [pc, #108]	@ (80042b0 <Meas_SetEnabledSensors+0x98>)
 8004244:	0103      	lsls	r3, r0, #4
 8004246:	18d3      	adds	r3, r2, r3
 8004248:	330c      	adds	r3, #12
 800424a:	1c0a      	adds	r2, r1, #0
 800424c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 800424e:	193b      	adds	r3, r7, r4
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	193a      	adds	r2, r7, r4
 8004254:	1c59      	adds	r1, r3, #1
 8004256:	7011      	strb	r1, [r2, #0]
 8004258:	0018      	movs	r0, r3
 800425a:	1d3b      	adds	r3, r7, #4
 800425c:	7859      	ldrb	r1, [r3, #1]
 800425e:	4a14      	ldr	r2, [pc, #80]	@ (80042b0 <Meas_SetEnabledSensors+0x98>)
 8004260:	0103      	lsls	r3, r0, #4
 8004262:	18d3      	adds	r3, r2, r3
 8004264:	330c      	adds	r3, #12
 8004266:	1c0a      	adds	r2, r1, #0
 8004268:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.NO_measurementEnabled;
 800426a:	193b      	adds	r3, r7, r4
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	193a      	adds	r2, r7, r4
 8004270:	1c59      	adds	r1, r3, #1
 8004272:	7011      	strb	r1, [r2, #0]
 8004274:	0018      	movs	r0, r3
 8004276:	1d3b      	adds	r3, r7, #4
 8004278:	7899      	ldrb	r1, [r3, #2]
 800427a:	4a0d      	ldr	r2, [pc, #52]	@ (80042b0 <Meas_SetEnabledSensors+0x98>)
 800427c:	0103      	lsls	r3, r0, #4
 800427e:	18d3      	adds	r3, r2, r3
 8004280:	330c      	adds	r3, #12
 8004282:	1c0a      	adds	r2, r1, #0
 8004284:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8004286:	193b      	adds	r3, r7, r4
 8004288:	781b      	ldrb	r3, [r3, #0]
 800428a:	193a      	adds	r2, r7, r4
 800428c:	1c59      	adds	r1, r3, #1
 800428e:	7011      	strb	r1, [r2, #0]
 8004290:	0018      	movs	r0, r3
 8004292:	1d3b      	adds	r3, r7, #4
 8004294:	78d9      	ldrb	r1, [r3, #3]
 8004296:	4a06      	ldr	r2, [pc, #24]	@ (80042b0 <Meas_SetEnabledSensors+0x98>)
 8004298:	0103      	lsls	r3, r0, #4
 800429a:	18d3      	adds	r3, r2, r3
 800429c:	330c      	adds	r3, #12
 800429e:	1c0a      	adds	r2, r1, #0
 80042a0:	701a      	strb	r2, [r3, #0]
}
 80042a2:	46c0      	nop			@ (mov r8, r8)
 80042a4:	46bd      	mov	sp, r7
 80042a6:	b005      	add	sp, #20
 80042a8:	bd90      	pop	{r4, r7, pc}
 80042aa:	46c0      	nop			@ (mov r8, r8)
 80042ac:	20000464 	.word	0x20000464
 80042b0:	20000424 	.word	0x20000424

080042b4 <MIC_Init>:
static uint32_t StartTime = 0;
static uint32_t StartupDoneTime = 0;
static volatile bool StartUpDone = false;
static volatile bool DataReady = false;

void MIC_Init(I2S_HandleTypeDef* i2SHandle) { I2SHandle = i2SHandle; }
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b082      	sub	sp, #8
 80042b8:	af00      	add	r7, sp, #0
 80042ba:	6078      	str	r0, [r7, #4]
 80042bc:	4b03      	ldr	r3, [pc, #12]	@ (80042cc <MIC_Init+0x18>)
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	601a      	str	r2, [r3, #0]
 80042c2:	46c0      	nop			@ (mov r8, r8)
 80042c4:	46bd      	mov	sp, r7
 80042c6:	b002      	add	sp, #8
 80042c8:	bd80      	pop	{r7, pc}
 80042ca:	46c0      	nop			@ (mov r8, r8)
 80042cc:	2000046c 	.word	0x2000046c

080042d0 <MIC_Start>:
  uint32_t audioValue = data[1] | (data[0] << 16);
  audioValue = audioValue >> 7;
  return audioValue;
}

void MIC_Start(uint32_t sampleRate, uint16_t nrSamples) {
 80042d0:	b5b0      	push	{r4, r5, r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	000a      	movs	r2, r1
 80042da:	1cbb      	adds	r3, r7, #2
 80042dc:	801a      	strh	r2, [r3, #0]
  if (I2SHandle == NULL) {
 80042de:	4b19      	ldr	r3, [pc, #100]	@ (8004344 <MIC_Start+0x74>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d106      	bne.n	80042f4 <MIC_Start+0x24>
    Error("Microphone is not initialised.");
 80042e6:	4a18      	ldr	r2, [pc, #96]	@ (8004348 <MIC_Start+0x78>)
 80042e8:	4b18      	ldr	r3, [pc, #96]	@ (800434c <MIC_Start+0x7c>)
 80042ea:	0019      	movs	r1, r3
 80042ec:	2001      	movs	r0, #1
 80042ee:	f001 fd97 	bl	8005e20 <CreateLine>
    return;
 80042f2:	e023      	b.n	800433c <MIC_Start+0x6c>
  }

//  UpdateSampleRate(sampleRate);

  StartTime = HAL_GetTick();
 80042f4:	f002 f9b2 	bl	800665c <HAL_GetTick>
 80042f8:	0002      	movs	r2, r0
 80042fa:	4b15      	ldr	r3, [pc, #84]	@ (8004350 <MIC_Start+0x80>)
 80042fc:	601a      	str	r2, [r3, #0]
  StartupDoneTime = StartTime + 20;
 80042fe:	4b14      	ldr	r3, [pc, #80]	@ (8004350 <MIC_Start+0x80>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	3314      	adds	r3, #20
 8004304:	001a      	movs	r2, r3
 8004306:	4b13      	ldr	r3, [pc, #76]	@ (8004354 <MIC_Start+0x84>)
 8004308:	601a      	str	r2, [r3, #0]
  StartUpDone = false;
 800430a:	4b13      	ldr	r3, [pc, #76]	@ (8004358 <MIC_Start+0x88>)
 800430c:	2200      	movs	r2, #0
 800430e:	701a      	strb	r2, [r3, #0]
  DataReady = false;
 8004310:	4b12      	ldr	r3, [pc, #72]	@ (800435c <MIC_Start+0x8c>)
 8004312:	2200      	movs	r2, #0
 8004314:	701a      	strb	r2, [r3, #0]

  HAL_StatusTypeDef status = HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer, 256);
 8004316:	4b0b      	ldr	r3, [pc, #44]	@ (8004344 <MIC_Start+0x74>)
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	250f      	movs	r5, #15
 800431c:	197c      	adds	r4, r7, r5
 800431e:	2280      	movs	r2, #128	@ 0x80
 8004320:	0052      	lsls	r2, r2, #1
 8004322:	490f      	ldr	r1, [pc, #60]	@ (8004360 <MIC_Start+0x90>)
 8004324:	0018      	movs	r0, r3
 8004326:	f004 ff9b 	bl	8009260 <HAL_I2S_Receive_DMA>
 800432a:	0003      	movs	r3, r0
 800432c:	7023      	strb	r3, [r4, #0]
//      HAL_I2S_Receive_DMA(I2SHandle, (uint16_t*)AudioRxBuffer,
//                          AUDIO_RX_BUFFER >> 1); //>>1 because reading half word

  Info("Status %d", status);
 800432e:	197b      	adds	r3, r7, r5
 8004330:	781b      	ldrb	r3, [r3, #0]
 8004332:	4a0c      	ldr	r2, [pc, #48]	@ (8004364 <MIC_Start+0x94>)
 8004334:	490c      	ldr	r1, [pc, #48]	@ (8004368 <MIC_Start+0x98>)
 8004336:	2002      	movs	r0, #2
 8004338:	f001 fd72 	bl	8005e20 <CreateLine>
}
 800433c:	46bd      	mov	sp, r7
 800433e:	b004      	add	sp, #16
 8004340:	bdb0      	pop	{r4, r5, r7, pc}
 8004342:	46c0      	nop			@ (mov r8, r8)
 8004344:	2000046c 	.word	0x2000046c
 8004348:	0800f618 	.word	0x0800f618
 800434c:	0800f638 	.word	0x0800f638
 8004350:	20000570 	.word	0x20000570
 8004354:	20000574 	.word	0x20000574
 8004358:	20000578 	.word	0x20000578
 800435c:	20000579 	.word	0x20000579
 8004360:	20000470 	.word	0x20000470
 8004364:	0800f63c 	.word	0x0800f63c
 8004368:	0800f648 	.word	0x0800f648

0800436c <HAL_I2S_RxCpltCallback>:
    Info("0x%08x", sample);
  }
}

// #TODO Also include half full callback
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef* hi2s) {
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if (hi2s != I2SHandle)
 8004374:	4b17      	ldr	r3, [pc, #92]	@ (80043d4 <HAL_I2S_RxCpltCallback+0x68>)
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	687a      	ldr	r2, [r7, #4]
 800437a:	429a      	cmp	r2, r3
 800437c:	d126      	bne.n	80043cc <HAL_I2S_RxCpltCallback+0x60>
    return;

  if (StartUpDone) {
 800437e:	4b16      	ldr	r3, [pc, #88]	@ (80043d8 <HAL_I2S_RxCpltCallback+0x6c>)
 8004380:	781b      	ldrb	r3, [r3, #0]
 8004382:	b2db      	uxtb	r3, r3
 8004384:	2b00      	cmp	r3, #0
 8004386:	d00f      	beq.n	80043a8 <HAL_I2S_RxCpltCallback+0x3c>
    HAL_I2S_DMAStop(I2SHandle);
 8004388:	4b12      	ldr	r3, [pc, #72]	@ (80043d4 <HAL_I2S_RxCpltCallback+0x68>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	0018      	movs	r0, r3
 800438e:	f005 f829 	bl	80093e4 <HAL_I2S_DMAStop>
    DataReady = true;
 8004392:	4b12      	ldr	r3, [pc, #72]	@ (80043dc <HAL_I2S_RxCpltCallback+0x70>)
 8004394:	2201      	movs	r2, #1
 8004396:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_RESET);
 8004398:	2380      	movs	r3, #128	@ 0x80
 800439a:	00db      	lsls	r3, r3, #3
 800439c:	4810      	ldr	r0, [pc, #64]	@ (80043e0 <HAL_I2S_RxCpltCallback+0x74>)
 800439e:	2200      	movs	r2, #0
 80043a0:	0019      	movs	r1, r3
 80043a2:	f002 fe3d 	bl	8007020 <HAL_GPIO_WritePin>
 80043a6:	e012      	b.n	80043ce <HAL_I2S_RxCpltCallback+0x62>
  } else if (TimestampIsReached(StartupDoneTime)) {
 80043a8:	4b0e      	ldr	r3, [pc, #56]	@ (80043e4 <HAL_I2S_RxCpltCallback+0x78>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	0018      	movs	r0, r3
 80043ae:	f001 fce1 	bl	8005d74 <TimestampIsReached>
 80043b2:	1e03      	subs	r3, r0, #0
 80043b4:	d00b      	beq.n	80043ce <HAL_I2S_RxCpltCallback+0x62>
    StartUpDone = true;
 80043b6:	4b08      	ldr	r3, [pc, #32]	@ (80043d8 <HAL_I2S_RxCpltCallback+0x6c>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(MIC_Trigger_GPIO_Port, MIC_Trigger_Pin, GPIO_PIN_SET);
 80043bc:	2380      	movs	r3, #128	@ 0x80
 80043be:	00db      	lsls	r3, r3, #3
 80043c0:	4807      	ldr	r0, [pc, #28]	@ (80043e0 <HAL_I2S_RxCpltCallback+0x74>)
 80043c2:	2201      	movs	r2, #1
 80043c4:	0019      	movs	r1, r3
 80043c6:	f002 fe2b 	bl	8007020 <HAL_GPIO_WritePin>
 80043ca:	e000      	b.n	80043ce <HAL_I2S_RxCpltCallback+0x62>
    return;
 80043cc:	46c0      	nop			@ (mov r8, r8)
  }
}
 80043ce:	46bd      	mov	sp, r7
 80043d0:	b002      	add	sp, #8
 80043d2:	bd80      	pop	{r7, pc}
 80043d4:	2000046c 	.word	0x2000046c
 80043d8:	20000578 	.word	0x20000578
 80043dc:	20000579 	.word	0x20000579
 80043e0:	50000400 	.word	0x50000400
 80043e4:	20000574 	.word	0x20000574

080043e8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80043ec:	4b11      	ldr	r3, [pc, #68]	@ (8004434 <MX_RTC_Init+0x4c>)
 80043ee:	4a12      	ldr	r2, [pc, #72]	@ (8004438 <MX_RTC_Init+0x50>)
 80043f0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80043f2:	4b10      	ldr	r3, [pc, #64]	@ (8004434 <MX_RTC_Init+0x4c>)
 80043f4:	2200      	movs	r2, #0
 80043f6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80043f8:	4b0e      	ldr	r3, [pc, #56]	@ (8004434 <MX_RTC_Init+0x4c>)
 80043fa:	227f      	movs	r2, #127	@ 0x7f
 80043fc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80043fe:	4b0d      	ldr	r3, [pc, #52]	@ (8004434 <MX_RTC_Init+0x4c>)
 8004400:	22ff      	movs	r2, #255	@ 0xff
 8004402:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8004404:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <MX_RTC_Init+0x4c>)
 8004406:	2200      	movs	r2, #0
 8004408:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800440a:	4b0a      	ldr	r3, [pc, #40]	@ (8004434 <MX_RTC_Init+0x4c>)
 800440c:	2200      	movs	r2, #0
 800440e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004410:	4b08      	ldr	r3, [pc, #32]	@ (8004434 <MX_RTC_Init+0x4c>)
 8004412:	2200      	movs	r2, #0
 8004414:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004416:	4b07      	ldr	r3, [pc, #28]	@ (8004434 <MX_RTC_Init+0x4c>)
 8004418:	2200      	movs	r2, #0
 800441a:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800441c:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <MX_RTC_Init+0x4c>)
 800441e:	0018      	movs	r0, r3
 8004420:	f006 f8b0 	bl	800a584 <HAL_RTC_Init>
 8004424:	1e03      	subs	r3, r0, #0
 8004426:	d001      	beq.n	800442c <MX_RTC_Init+0x44>
  {
    Error_Handler();
 8004428:	f7ff fdc4 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800442c:	46c0      	nop			@ (mov r8, r8)
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	46c0      	nop			@ (mov r8, r8)
 8004434:	2000057c 	.word	0x2000057c
 8004438:	40002800 	.word	0x40002800

0800443c <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	4a06      	ldr	r2, [pc, #24]	@ (8004464 <HAL_RTC_MspInit+0x28>)
 800444a:	4293      	cmp	r3, r2
 800444c:	d106      	bne.n	800445c <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800444e:	4b06      	ldr	r3, [pc, #24]	@ (8004468 <HAL_RTC_MspInit+0x2c>)
 8004450:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004452:	4b05      	ldr	r3, [pc, #20]	@ (8004468 <HAL_RTC_MspInit+0x2c>)
 8004454:	2180      	movs	r1, #128	@ 0x80
 8004456:	02c9      	lsls	r1, r1, #11
 8004458:	430a      	orrs	r2, r1
 800445a:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 800445c:	46c0      	nop			@ (mov r8, r8)
 800445e:	46bd      	mov	sp, r7
 8004460:	b002      	add	sp, #8
 8004462:	bd80      	pop	{r7, pc}
 8004464:	40002800 	.word	0x40002800
 8004468:	40021000 	.word	0x40021000

0800446c <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	68ba      	ldr	r2, [r7, #8]
 800447c:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	687a      	ldr	r2, [r7, #4]
 8004482:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	2b01      	cmp	r3, #1
 8004488:	d113      	bne.n	80044b2 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	22fe      	movs	r2, #254	@ 0xfe
 800448e:	0592      	lsls	r2, r2, #22
 8004490:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	4a1a      	ldr	r2, [pc, #104]	@ (8004500 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 8004496:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4a1a      	ldr	r2, [pc, #104]	@ (8004504 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 800449c:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	4a19      	ldr	r2, [pc, #100]	@ (8004508 <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 80044a2:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	4a19      	ldr	r2, [pc, #100]	@ (800450c <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80044a8:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	4a18      	ldr	r2, [pc, #96]	@ (8004510 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80044ae:	61da      	str	r2, [r3, #28]
 80044b0:	e011      	b.n	80044d6 <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	4a17      	ldr	r2, [pc, #92]	@ (8004514 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 80044b6:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	4a17      	ldr	r2, [pc, #92]	@ (8004518 <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80044bc:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	4a16      	ldr	r2, [pc, #88]	@ (800451c <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80044c2:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4a16      	ldr	r2, [pc, #88]	@ (8004520 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80044c8:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	4a15      	ldr	r2, [pc, #84]	@ (8004524 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 80044ce:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	4a15      	ldr	r2, [pc, #84]	@ (8004528 <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 80044d4:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	4a14      	ldr	r2, [pc, #80]	@ (800452c <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 80044da:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 80044dc:	68fb      	ldr	r3, [r7, #12]
 80044de:	4a14      	ldr	r2, [pc, #80]	@ (8004530 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80044e0:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	4a12      	ldr	r2, [pc, #72]	@ (8004530 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 80044e6:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	4a12      	ldr	r2, [pc, #72]	@ (8004534 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 80044ec:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	0018      	movs	r0, r3
 80044f2:	f000 f831 	bl	8004558 <GasIndexAlgorithm_reset>
}
 80044f6:	46c0      	nop			@ (mov r8, r8)
 80044f8:	46bd      	mov	sp, r7
 80044fa:	b004      	add	sp, #16
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	46c0      	nop			@ (mov r8, r8)
 8004500:	00002710 	.word	0x00002710
 8004504:	44340000 	.word	0x44340000
 8004508:	46859800 	.word	0x46859800
 800450c:	46a05000 	.word	0x46a05000
 8004510:	41f00000 	.word	0x41f00000
 8004514:	42c80000 	.word	0x42c80000
 8004518:	00004e20 	.word	0x00004e20
 800451c:	43340000 	.word	0x43340000
 8004520:	4528c000 	.word	0x4528c000
 8004524:	45a32000 	.word	0x45a32000
 8004528:	43aa0000 	.word	0x43aa0000
 800452c:	43660000 	.word	0x43660000
 8004530:	41400000 	.word	0x41400000
 8004534:	42480000 	.word	0x42480000

08004538 <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 8004538:	b580      	push	{r7, lr}
 800453a:	b082      	sub	sp, #8
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8004542:	22fe      	movs	r2, #254	@ 0xfe
 8004544:	0592      	lsls	r2, r2, #22
 8004546:	6839      	ldr	r1, [r7, #0]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	0018      	movs	r0, r3
 800454c:	f7ff ff8e 	bl	800446c <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8004550:	46c0      	nop			@ (mov r8, r8)
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}

08004558 <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2200      	movs	r2, #0
 8004564:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	2200      	movs	r2, #0
 800456a:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2200      	movs	r2, #0
 8004570:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	0018      	movs	r0, r3
 8004576:	f000 f805 	bl	8004584 <GasIndexAlgorithm__init_instances>
}
 800457a:	46c0      	nop			@ (mov r8, r8)
 800457c:	46bd      	mov	sp, r7
 800457e:	b002      	add	sp, #8
 8004580:	bd80      	pop	{r7, pc}
	...

08004584 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 8004584:	b590      	push	{r4, r7, lr}
 8004586:	b083      	sub	sp, #12
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	0018      	movs	r0, r3
 8004590:	f000 f8e8 	bl	8004764 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	0018      	movs	r0, r3
 8004598:	f000 f9a6 	bl	80048e8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800459c:	1c04      	adds	r4, r0, #0
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f000 f9ab 	bl	80048fc <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80045a6:	1c02      	adds	r2, r0, #0
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	1c21      	adds	r1, r4, #0
 80045ac:	0018      	movs	r0, r3
 80045ae:	f000 fc3b 	bl	8004e28 <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2b01      	cmp	r3, #1
 80045b8:	d107      	bne.n	80045ca <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80045ba:	23fe      	movs	r3, #254	@ 0xfe
 80045bc:	059b      	lsls	r3, r3, #22
 80045be:	4a0a      	ldr	r2, [pc, #40]	@ (80045e8 <GasIndexAlgorithm__init_instances+0x64>)
 80045c0:	490a      	ldr	r1, [pc, #40]	@ (80045ec <GasIndexAlgorithm__init_instances+0x68>)
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 fc86 	bl	8004ed4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80045c8:	e005      	b.n	80045d6 <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80045ca:	4b09      	ldr	r3, [pc, #36]	@ (80045f0 <GasIndexAlgorithm__init_instances+0x6c>)
 80045cc:	4a09      	ldr	r2, [pc, #36]	@ (80045f4 <GasIndexAlgorithm__init_instances+0x70>)
 80045ce:	490a      	ldr	r1, [pc, #40]	@ (80045f8 <GasIndexAlgorithm__init_instances+0x74>)
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	f000 fc7f 	bl	8004ed4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	0018      	movs	r0, r3
 80045da:	f000 fd35 	bl	8005048 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 80045de:	46c0      	nop			@ (mov r8, r8)
 80045e0:	46bd      	mov	sp, r7
 80045e2:	b003      	add	sp, #12
 80045e4:	bd90      	pop	{r4, r7, pc}
 80045e6:	46c0      	nop			@ (mov r8, r8)
 80045e8:	bc257a78 	.word	0xbc257a78
 80045ec:	44198000 	.word	0x44198000
 80045f0:	42c80000 	.word	0x42c80000
 80045f4:	bbd4fdf4 	.word	0xbbd4fdf4
 80045f8:	43550000 	.word	0x43550000

080045fc <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 80045fc:	b590      	push	{r4, r7, lr}
 80045fe:	b085      	sub	sp, #20
 8004600:	af00      	add	r7, sp, #0
 8004602:	60f8      	str	r0, [r7, #12]
 8004604:	60b9      	str	r1, [r7, #8]
 8004606:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460c:	4952      	ldr	r1, [pc, #328]	@ (8004758 <GasIndexAlgorithm_process+0x15c>)
 800460e:	1c18      	adds	r0, r3, #0
 8004610:	f7fb ff66 	bl	80004e0 <__aeabi_fcmple>
 8004614:	1e03      	subs	r3, r0, #0
 8004616:	d00c      	beq.n	8004632 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	1c19      	adds	r1, r3, #0
 8004622:	1c10      	adds	r0, r2, #0
 8004624:	f7fc f894 	bl	8000750 <__aeabi_fadd>
 8004628:	1c03      	adds	r3, r0, #0
 800462a:	1c1a      	adds	r2, r3, #0
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	631a      	str	r2, [r3, #48]	@ 0x30
 8004630:	e080      	b.n	8004734 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8004632:	68bb      	ldr	r3, [r7, #8]
 8004634:	2b00      	cmp	r3, #0
 8004636:	dd25      	ble.n	8004684 <GasIndexAlgorithm_process+0x88>
 8004638:	68bb      	ldr	r3, [r7, #8]
 800463a:	4a48      	ldr	r2, [pc, #288]	@ (800475c <GasIndexAlgorithm_process+0x160>)
 800463c:	4293      	cmp	r3, r2
 800463e:	dc21      	bgt.n	8004684 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	429a      	cmp	r2, r3
 8004648:	dc04      	bgt.n	8004654 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	3301      	adds	r3, #1
 8004650:	60bb      	str	r3, [r7, #8]
 8004652:	e00d      	b.n	8004670 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	68db      	ldr	r3, [r3, #12]
 8004658:	4a41      	ldr	r2, [pc, #260]	@ (8004760 <GasIndexAlgorithm_process+0x164>)
 800465a:	4694      	mov	ip, r2
 800465c:	4463      	add	r3, ip
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	429a      	cmp	r2, r3
 8004662:	dd05      	ble.n	8004670 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	4a3d      	ldr	r2, [pc, #244]	@ (8004760 <GasIndexAlgorithm_process+0x164>)
 800466a:	4694      	mov	ip, r2
 800466c:	4463      	add	r3, ip
 800466e:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	68ba      	ldr	r2, [r7, #8]
 8004676:	1ad3      	subs	r3, r2, r3
 8004678:	0018      	movs	r0, r3
 800467a:	f7fc fef1 	bl	8001460 <__aeabi_i2f>
 800467e:	1c02      	adds	r2, r0, #0
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	0018      	movs	r0, r3
 8004690:	f000 f945 	bl	800491e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 8004694:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 8004696:	d014      	beq.n	80046c2 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1c11      	adds	r1, r2, #0
 80046a0:	0018      	movs	r0, r3
 80046a2:	f000 fbd1 	bl	8004e48 <GasIndexAlgorithm__mox_model__process>
 80046a6:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	1c11      	adds	r1, r2, #0
 80046b4:	0018      	movs	r0, r3
 80046b6:	f000 fc25 	bl	8004f04 <GasIndexAlgorithm__sigmoid_scaled__process>
 80046ba:	1c02      	adds	r2, r0, #0
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	639a      	str	r2, [r3, #56]	@ 0x38
 80046c0:	e003      	b.n	80046ca <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	689a      	ldr	r2, [r3, #8]
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	1c11      	adds	r1, r2, #0
 80046d2:	0018      	movs	r0, r3
 80046d4:	f000 fcec 	bl	80050b0 <GasIndexAlgorithm__adaptive_lowpass__process>
 80046d8:	1c02      	adds	r2, r0, #0
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80046e2:	21fc      	movs	r1, #252	@ 0xfc
 80046e4:	0589      	lsls	r1, r1, #22
 80046e6:	1c18      	adds	r0, r3, #0
 80046e8:	f7fb fef0 	bl	80004cc <__aeabi_fcmplt>
 80046ec:	1e03      	subs	r3, r0, #0
 80046ee:	d003      	beq.n	80046f8 <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	22fc      	movs	r2, #252	@ 0xfc
 80046f4:	0592      	lsls	r2, r2, #22
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fc:	2100      	movs	r1, #0
 80046fe:	1c18      	adds	r0, r3, #0
 8004700:	f7fb fef8 	bl	80004f4 <__aeabi_fcmpgt>
 8004704:	1e03      	subs	r3, r0, #0
 8004706:	d015      	beq.n	8004734 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	1c11      	adds	r1, r2, #0
 8004710:	0018      	movs	r0, r3
 8004712:	f000 fa4f 	bl	8004bb4 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	0018      	movs	r0, r3
 800471a:	f000 f8e5 	bl	80048e8 <GasIndexAlgorithm__mean_variance_estimator__get_std>
 800471e:	1c04      	adds	r4, r0, #0
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	0018      	movs	r0, r3
 8004724:	f000 f8ea 	bl	80048fc <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 8004728:	1c02      	adds	r2, r0, #0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1c21      	adds	r1, r4, #0
 800472e:	0018      	movs	r0, r3
 8004730:	f000 fb7a 	bl	8004e28 <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004738:	21fc      	movs	r1, #252	@ 0xfc
 800473a:	0589      	lsls	r1, r1, #22
 800473c:	1c18      	adds	r0, r3, #0
 800473e:	f7fc f807 	bl	8000750 <__aeabi_fadd>
 8004742:	1c03      	adds	r3, r0, #0
 8004744:	1c18      	adds	r0, r3, #0
 8004746:	f7fc fe6b 	bl	8001420 <__aeabi_f2iz>
 800474a:	0002      	movs	r2, r0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	601a      	str	r2, [r3, #0]
    return;
 8004750:	46c0      	nop			@ (mov r8, r8)
}
 8004752:	46bd      	mov	sp, r7
 8004754:	b005      	add	sp, #20
 8004756:	bd90      	pop	{r4, r7, pc}
 8004758:	42340000 	.word	0x42340000
 800475c:	0000fde7 	.word	0x0000fde7
 8004760:	00007fff 	.word	0x00007fff

08004764 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8004764:	b5b0      	push	{r4, r5, r7, lr}
 8004766:	b082      	sub	sp, #8
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	223c      	movs	r2, #60	@ 0x3c
 8004770:	2100      	movs	r1, #0
 8004772:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2200      	movs	r2, #0
 8004778:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	685b      	ldr	r3, [r3, #4]
 800478c:	4952      	ldr	r1, [pc, #328]	@ (80048d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800478e:	1c18      	adds	r0, r3, #0
 8004790:	f7fc f968 	bl	8000a64 <__aeabi_fdiv>
 8004794:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004796:	2188      	movs	r1, #136	@ 0x88
 8004798:	05c9      	lsls	r1, r1, #23
 800479a:	1c18      	adds	r0, r3, #0
 800479c:	f7fc fb48 	bl	8000e30 <__aeabi_fmul>
 80047a0:	1c03      	adds	r3, r0, #0
 80047a2:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	685b      	ldr	r3, [r3, #4]
 80047ac:	494a      	ldr	r1, [pc, #296]	@ (80048d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80047ae:	1c18      	adds	r0, r3, #0
 80047b0:	f7fc f958 	bl	8000a64 <__aeabi_fdiv>
 80047b4:	1c03      	adds	r3, r0, #0
 80047b6:	1c19      	adds	r1, r3, #0
 80047b8:	1c20      	adds	r0, r4, #0
 80047ba:	f7fb ffc9 	bl	8000750 <__aeabi_fadd>
 80047be:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80047c0:	1c19      	adds	r1, r3, #0
 80047c2:	1c28      	adds	r0, r5, #0
 80047c4:	f7fc f94e 	bl	8000a64 <__aeabi_fdiv>
 80047c8:	1c03      	adds	r3, r0, #0
 80047ca:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	4940      	ldr	r1, [pc, #256]	@ (80048d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80047d6:	1c18      	adds	r0, r3, #0
 80047d8:	f7fc f944 	bl	8000a64 <__aeabi_fdiv>
 80047dc:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80047de:	2185      	movs	r1, #133	@ 0x85
 80047e0:	05c9      	lsls	r1, r1, #23
 80047e2:	1c18      	adds	r0, r3, #0
 80047e4:	f7fc fb24 	bl	8000e30 <__aeabi_fmul>
 80047e8:	1c03      	adds	r3, r0, #0
 80047ea:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4938      	ldr	r1, [pc, #224]	@ (80048d8 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80047f6:	1c18      	adds	r0, r3, #0
 80047f8:	f7fc f934 	bl	8000a64 <__aeabi_fdiv>
 80047fc:	1c03      	adds	r3, r0, #0
 80047fe:	1c19      	adds	r1, r3, #0
 8004800:	1c20      	adds	r0, r4, #0
 8004802:	f7fb ffa5 	bl	8000750 <__aeabi_fadd>
 8004806:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 8004808:	1c19      	adds	r1, r3, #0
 800480a:	1c28      	adds	r0, r5, #0
 800480c:	f7fc f92a 	bl	8000a64 <__aeabi_fdiv>
 8004810:	1c03      	adds	r3, r0, #0
 8004812:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d118      	bne.n	8004852 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004824:	2188      	movs	r1, #136	@ 0x88
 8004826:	05c9      	lsls	r1, r1, #23
 8004828:	1c18      	adds	r0, r3, #0
 800482a:	f7fc fb01 	bl	8000e30 <__aeabi_fmul>
 800482e:	1c03      	adds	r3, r0, #0
 8004830:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 8004836:	4929      	ldr	r1, [pc, #164]	@ (80048dc <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 8004838:	1c18      	adds	r0, r3, #0
 800483a:	f7fb ff89 	bl	8000750 <__aeabi_fadd>
 800483e:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8004840:	1c19      	adds	r1, r3, #0
 8004842:	1c20      	adds	r0, r4, #0
 8004844:	f7fc f90e 	bl	8000a64 <__aeabi_fdiv>
 8004848:	1c03      	adds	r3, r0, #0
 800484a:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	655a      	str	r2, [r3, #84]	@ 0x54
 8004850:	e017      	b.n	8004882 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8004856:	2188      	movs	r1, #136	@ 0x88
 8004858:	05c9      	lsls	r1, r1, #23
 800485a:	1c18      	adds	r0, r3, #0
 800485c:	f7fc fae8 	bl	8000e30 <__aeabi_fmul>
 8004860:	1c03      	adds	r3, r0, #0
 8004862:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 8004868:	491d      	ldr	r1, [pc, #116]	@ (80048e0 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800486a:	1c18      	adds	r0, r3, #0
 800486c:	f7fb ff70 	bl	8000750 <__aeabi_fadd>
 8004870:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8004872:	1c19      	adds	r1, r3, #0
 8004874:	1c20      	adds	r0, r4, #0
 8004876:	f7fc f8f5 	bl	8000a64 <__aeabi_fdiv>
 800487a:	1c03      	adds	r3, r0, #0
 800487c:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004886:	2185      	movs	r1, #133	@ 0x85
 8004888:	05c9      	lsls	r1, r1, #23
 800488a:	1c18      	adds	r0, r3, #0
 800488c:	f7fc fad0 	bl	8000e30 <__aeabi_fmul>
 8004890:	1c03      	adds	r3, r0, #0
 8004892:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	4912      	ldr	r1, [pc, #72]	@ (80048e4 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 800489a:	1c18      	adds	r0, r3, #0
 800489c:	f7fb ff58 	bl	8000750 <__aeabi_fadd>
 80048a0:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80048a2:	1c19      	adds	r1, r3, #0
 80048a4:	1c20      	adds	r0, r4, #0
 80048a6:	f7fc f8dd 	bl	8000a64 <__aeabi_fdiv>
 80048aa:	1c03      	adds	r3, r0, #0
 80048ac:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 80048d0:	46c0      	nop			@ (mov r8, r8)
 80048d2:	46bd      	mov	sp, r7
 80048d4:	b002      	add	sp, #8
 80048d6:	bdb0      	pop	{r4, r5, r7, pc}
 80048d8:	45610000 	.word	0x45610000
 80048dc:	44960000 	.word	0x44960000
 80048e0:	41a00000 	.word	0x41a00000
 80048e4:	451c4000 	.word	0x451c4000

080048e8 <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b082      	sub	sp, #8
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 80048f4:	1c18      	adds	r0, r3, #0
 80048f6:	46bd      	mov	sp, r7
 80048f8:	b002      	add	sp, #8
 80048fa:	bd80      	pop	{r7, pc}

080048fc <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 800490c:	1c19      	adds	r1, r3, #0
 800490e:	1c10      	adds	r0, r2, #0
 8004910:	f7fb ff1e 	bl	8000750 <__aeabi_fadd>
 8004914:	1c03      	adds	r3, r0, #0
}
 8004916:	1c18      	adds	r0, r3, #0
 8004918:	46bd      	mov	sp, r7
 800491a:	b002      	add	sp, #8
 800491c:	bd80      	pop	{r7, pc}

0800491e <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 800491e:	b580      	push	{r7, lr}
 8004920:	b082      	sub	sp, #8
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	223c      	movs	r2, #60	@ 0x3c
 800492a:	5c9b      	ldrb	r3, [r3, r2]
}
 800492c:	0018      	movs	r0, r3
 800492e:	46bd      	mov	sp, r7
 8004930:	b002      	add	sp, #8
 8004932:	bd80      	pop	{r7, pc}

08004934 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8004934:	b5b0      	push	{r4, r5, r7, lr}
 8004936:	b08c      	sub	sp, #48	@ 0x30
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8004940:	1c19      	adds	r1, r3, #0
 8004942:	4895      	ldr	r0, [pc, #596]	@ (8004b98 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8004944:	f7fc fbb2 	bl	80010ac <__aeabi_fsub>
 8004948:	1c03      	adds	r3, r0, #0
 800494a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004950:	1c19      	adds	r1, r3, #0
 8004952:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8004954:	f7fb fdce 	bl	80004f4 <__aeabi_fcmpgt>
 8004958:	1e03      	subs	r3, r0, #0
 800495a:	d00b      	beq.n	8004974 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8004964:	1c19      	adds	r1, r3, #0
 8004966:	1c10      	adds	r0, r2, #0
 8004968:	f7fb fef2 	bl	8000750 <__aeabi_fadd>
 800496c:	1c03      	adds	r3, r0, #0
 800496e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8004978:	1c19      	adds	r1, r3, #0
 800497a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800497c:	f7fb fdba 	bl	80004f4 <__aeabi_fcmpgt>
 8004980:	1e03      	subs	r3, r0, #0
 8004982:	d00b      	beq.n	800499c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 800498c:	1c19      	adds	r1, r3, #0
 800498e:	1c10      	adds	r0, r2, #0
 8004990:	f7fb fede 	bl	8000750 <__aeabi_fadd>
 8004994:	1c03      	adds	r3, r0, #0
 8004996:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6959      	ldr	r1, [r3, #20]
 80049a0:	4a7e      	ldr	r2, [pc, #504]	@ (8004b9c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	0018      	movs	r0, r3
 80049a6:	f000 f9f1 	bl	8004d8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	1c11      	adds	r1, r2, #0
 80049b2:	0018      	movs	r0, r3
 80049b4:	f000 f9fa 	bl	8004dac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80049b8:	1c03      	adds	r3, r0, #0
 80049ba:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80049c8:	1c19      	adds	r1, r3, #0
 80049ca:	1c10      	adds	r0, r2, #0
 80049cc:	f7fc fb6e 	bl	80010ac <__aeabi_fsub>
 80049d0:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80049d2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049d4:	1c18      	adds	r0, r3, #0
 80049d6:	f7fc fa2b 	bl	8000e30 <__aeabi_fmul>
 80049da:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80049dc:	1c19      	adds	r1, r3, #0
 80049de:	1c20      	adds	r0, r4, #0
 80049e0:	f7fb feb6 	bl	8000750 <__aeabi_fadd>
 80049e4:	1c03      	adds	r3, r0, #0
 80049e6:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80049f0:	1c19      	adds	r1, r3, #0
 80049f2:	486b      	ldr	r0, [pc, #428]	@ (8004ba0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80049f4:	f7fc fb5a 	bl	80010ac <__aeabi_fsub>
 80049f8:	1c03      	adds	r3, r0, #0
 80049fa:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	1c11      	adds	r1, r2, #0
 8004a04:	0018      	movs	r0, r3
 8004a06:	f000 f9d1 	bl	8004dac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004a0a:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8004a0c:	1c19      	adds	r1, r3, #0
 8004a0e:	1c28      	adds	r0, r5, #0
 8004a10:	f7fc fa0e 	bl	8000e30 <__aeabi_fmul>
 8004a14:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 8004a16:	1c19      	adds	r1, r3, #0
 8004a18:	1c20      	adds	r0, r4, #0
 8004a1a:	f7fb fe99 	bl	8000750 <__aeabi_fadd>
 8004a1e:	1c03      	adds	r3, r0, #0
 8004a20:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004a22:	4a60      	ldr	r2, [pc, #384]	@ (8004ba4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004a24:	6a39      	ldr	r1, [r7, #32]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	0018      	movs	r0, r3
 8004a2a:	f000 f9af 	bl	8004d8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	1c11      	adds	r1, r2, #0
 8004a36:	0018      	movs	r0, r3
 8004a38:	f000 f9b8 	bl	8004dac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004a3c:	1c03      	adds	r3, r0, #0
 8004a3e:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8004a40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a42:	69f8      	ldr	r0, [r7, #28]
 8004a44:	f7fc f9f4 	bl	8000e30 <__aeabi_fmul>
 8004a48:	1c03      	adds	r3, r0, #0
 8004a4a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6999      	ldr	r1, [r3, #24]
 8004a54:	4a51      	ldr	r2, [pc, #324]	@ (8004b9c <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	0018      	movs	r0, r3
 8004a5a:	f000 f997 	bl	8004d8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	1c11      	adds	r1, r2, #0
 8004a66:	0018      	movs	r0, r3
 8004a68:	f000 f9a0 	bl	8004dac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004a6c:	1c03      	adds	r3, r0, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 8004a7c:	1c19      	adds	r1, r3, #0
 8004a7e:	1c10      	adds	r0, r2, #0
 8004a80:	f7fc fb14 	bl	80010ac <__aeabi_fsub>
 8004a84:	1c03      	adds	r3, r0, #0
 8004a86:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 8004a88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a8a:	69b8      	ldr	r0, [r7, #24]
 8004a8c:	f7fc fb0e 	bl	80010ac <__aeabi_fsub>
 8004a90:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 8004a92:	1c19      	adds	r1, r3, #0
 8004a94:	1c28      	adds	r0, r5, #0
 8004a96:	f7fc f9cb 	bl	8000e30 <__aeabi_fmul>
 8004a9a:	1c03      	adds	r3, r0, #0
    gamma_variance =
 8004a9c:	1c19      	adds	r1, r3, #0
 8004a9e:	1c20      	adds	r0, r4, #0
 8004aa0:	f7fb fe56 	bl	8000750 <__aeabi_fadd>
 8004aa4:	1c03      	adds	r3, r0, #0
 8004aa6:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8004ab0:	1c19      	adds	r1, r3, #0
 8004ab2:	483b      	ldr	r0, [pc, #236]	@ (8004ba0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8004ab4:	f7fc fafa 	bl	80010ac <__aeabi_fsub>
 8004ab8:	1c03      	adds	r3, r0, #0
 8004aba:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	1c11      	adds	r1, r2, #0
 8004ac4:	0018      	movs	r0, r3
 8004ac6:	f000 f971 	bl	8004dac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004aca:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8004acc:	1c19      	adds	r1, r3, #0
 8004ace:	1c28      	adds	r0, r5, #0
 8004ad0:	f7fc f9ae 	bl	8000e30 <__aeabi_fmul>
 8004ad4:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 8004ad6:	1c19      	adds	r1, r3, #0
 8004ad8:	1c20      	adds	r0, r4, #0
 8004ada:	f7fb fe39 	bl	8000750 <__aeabi_fadd>
 8004ade:	1c03      	adds	r3, r0, #0
 8004ae0:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8004ae2:	4a30      	ldr	r2, [pc, #192]	@ (8004ba4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8004ae4:	6939      	ldr	r1, [r7, #16]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	0018      	movs	r0, r3
 8004aea:	f000 f94f 	bl	8004d8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	1c11      	adds	r1, r2, #0
 8004af6:	0018      	movs	r0, r3
 8004af8:	f000 f958 	bl	8004dac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8004afc:	1c03      	adds	r3, r0, #0
 8004afe:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8004b00:	6979      	ldr	r1, [r7, #20]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f7fc f994 	bl	8000e30 <__aeabi_fmul>
 8004b08:	1c03      	adds	r3, r0, #0
 8004b0a:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	685b      	ldr	r3, [r3, #4]
 8004b18:	4923      	ldr	r1, [pc, #140]	@ (8004ba8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 8004b1a:	1c18      	adds	r0, r3, #0
 8004b1c:	f7fb ffa2 	bl	8000a64 <__aeabi_fdiv>
 8004b20:	1c03      	adds	r3, r0, #0
 8004b22:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8004b24:	69f9      	ldr	r1, [r7, #28]
 8004b26:	20fe      	movs	r0, #254	@ 0xfe
 8004b28:	0580      	lsls	r0, r0, #22
 8004b2a:	f7fc fabf 	bl	80010ac <__aeabi_fsub>
 8004b2e:	1c03      	adds	r3, r0, #0
 8004b30:	491e      	ldr	r1, [pc, #120]	@ (8004bac <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8004b32:	1c18      	adds	r0, r3, #0
 8004b34:	f7fc f97c 	bl	8000e30 <__aeabi_fmul>
 8004b38:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 8004b3a:	491d      	ldr	r1, [pc, #116]	@ (8004bb0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8004b3c:	1c18      	adds	r0, r3, #0
 8004b3e:	f7fc fab5 	bl	80010ac <__aeabi_fsub>
 8004b42:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8004b44:	1c19      	adds	r1, r3, #0
 8004b46:	1c28      	adds	r0, r5, #0
 8004b48:	f7fc f972 	bl	8000e30 <__aeabi_fmul>
 8004b4c:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8004b4e:	1c19      	adds	r1, r3, #0
 8004b50:	1c20      	adds	r0, r4, #0
 8004b52:	f7fb fdfd 	bl	8000750 <__aeabi_fadd>
 8004b56:	1c03      	adds	r3, r0, #0
 8004b58:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004b62:	2100      	movs	r1, #0
 8004b64:	1c18      	adds	r0, r3, #0
 8004b66:	f7fb fcb1 	bl	80004cc <__aeabi_fcmplt>
 8004b6a:	1e03      	subs	r3, r0, #0
 8004b6c:	d002      	beq.n	8004b74 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 8004b7c:	1c19      	adds	r1, r3, #0
 8004b7e:	1c10      	adds	r0, r2, #0
 8004b80:	f7fb fcb8 	bl	80004f4 <__aeabi_fcmpgt>
 8004b84:	1e03      	subs	r3, r0, #0
 8004b86:	d100      	bne.n	8004b8a <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 8004b88:	e002      	b.n	8004b90 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004b90:	46c0      	nop			@ (mov r8, r8)
 8004b92:	46bd      	mov	sp, r7
 8004b94:	b00c      	add	sp, #48	@ 0x30
 8004b96:	bdb0      	pop	{r4, r5, r7, pc}
 8004b98:	46fffe00 	.word	0x46fffe00
 8004b9c:	3c23d70a 	.word	0x3c23d70a
 8004ba0:	43ff0000 	.word	0x43ff0000
 8004ba4:	3db851ec 	.word	0x3db851ec
 8004ba8:	42700000 	.word	0x42700000
 8004bac:	3fa66666 	.word	0x3fa66666
 8004bb0:	3e99999a 	.word	0x3e99999a

08004bb4 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 8004bb4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
 8004bba:	6078      	str	r0, [r7, #4]
 8004bbc:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	223c      	movs	r2, #60	@ 0x3c
 8004bc2:	5c9b      	ldrb	r3, [r3, r2]
 8004bc4:	2201      	movs	r2, #1
 8004bc6:	4053      	eors	r3, r2
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00a      	beq.n	8004be4 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	223c      	movs	r2, #60	@ 0x3c
 8004bd2:	2101      	movs	r1, #1
 8004bd4:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8004be2:	e0c8      	b.n	8004d76 <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be8:	4965      	ldr	r1, [pc, #404]	@ (8004d80 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 8004bea:	1c18      	adds	r0, r3, #0
 8004bec:	f7fb fc8c 	bl	8000508 <__aeabi_fcmpge>
 8004bf0:	1e03      	subs	r3, r0, #0
 8004bf2:	d107      	bne.n	8004c04 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8004bf8:	4962      	ldr	r1, [pc, #392]	@ (8004d84 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 8004bfa:	1c18      	adds	r0, r3, #0
 8004bfc:	f7fb fc70 	bl	80004e0 <__aeabi_fcmple>
 8004c00:	1e03      	subs	r3, r0, #0
 8004c02:	d00e      	beq.n	8004c22 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8004c0c:	1c19      	adds	r1, r3, #0
 8004c0e:	1c10      	adds	r0, r2, #0
 8004c10:	f7fb fd9e 	bl	8000750 <__aeabi_fadd>
 8004c14:	1c03      	adds	r3, r0, #0
 8004c16:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c26:	1c19      	adds	r1, r3, #0
 8004c28:	6838      	ldr	r0, [r7, #0]
 8004c2a:	f7fc fa3f 	bl	80010ac <__aeabi_fsub>
 8004c2e:	1c03      	adds	r3, r0, #0
 8004c30:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7ff fe7d 	bl	8004934 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c3e:	1c19      	adds	r1, r3, #0
 8004c40:	6838      	ldr	r0, [r7, #0]
 8004c42:	f7fc fa33 	bl	80010ac <__aeabi_fsub>
 8004c46:	1c03      	adds	r3, r0, #0
 8004c48:	2185      	movs	r1, #133	@ 0x85
 8004c4a:	05c9      	lsls	r1, r1, #23
 8004c4c:	1c18      	adds	r0, r3, #0
 8004c4e:	f7fb ff09 	bl	8000a64 <__aeabi_fdiv>
 8004c52:	1c03      	adds	r3, r0, #0
 8004c54:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 8004c56:	2100      	movs	r1, #0
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f7fb fc37 	bl	80004cc <__aeabi_fcmplt>
 8004c5e:	1e03      	subs	r3, r0, #0
 8004c60:	d008      	beq.n	8004c74 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c66:	68f9      	ldr	r1, [r7, #12]
 8004c68:	1c18      	adds	r0, r3, #0
 8004c6a:	f7fc fa1f 	bl	80010ac <__aeabi_fsub>
 8004c6e:	1c03      	adds	r3, r0, #0
 8004c70:	617b      	str	r3, [r7, #20]
 8004c72:	e007      	b.n	8004c84 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004c78:	1c19      	adds	r1, r3, #0
 8004c7a:	68f8      	ldr	r0, [r7, #12]
 8004c7c:	f7fb fd68 	bl	8000750 <__aeabi_fadd>
 8004c80:	1c03      	adds	r3, r0, #0
 8004c82:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 8004c84:	23fe      	movs	r3, #254	@ 0xfe
 8004c86:	059b      	lsls	r3, r3, #22
 8004c88:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 8004c8a:	493f      	ldr	r1, [pc, #252]	@ (8004d88 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004c8c:	6978      	ldr	r0, [r7, #20]
 8004c8e:	f7fb fc31 	bl	80004f4 <__aeabi_fcmpgt>
 8004c92:	1e03      	subs	r3, r0, #0
 8004c94:	d010      	beq.n	8004cb8 <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 8004c96:	493c      	ldr	r1, [pc, #240]	@ (8004d88 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004c98:	6978      	ldr	r0, [r7, #20]
 8004c9a:	f7fb fee3 	bl	8000a64 <__aeabi_fdiv>
 8004c9e:	1c03      	adds	r3, r0, #0
 8004ca0:	1c1c      	adds	r4, r3, #0
 8004ca2:	4939      	ldr	r1, [pc, #228]	@ (8004d88 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 8004ca4:	6978      	ldr	r0, [r7, #20]
 8004ca6:	f7fb fedd 	bl	8000a64 <__aeabi_fdiv>
 8004caa:	1c03      	adds	r3, r0, #0
 8004cac:	1c19      	adds	r1, r3, #0
 8004cae:	1c20      	adds	r0, r4, #0
 8004cb0:	f7fc f8be 	bl	8000e30 <__aeabi_fmul>
 8004cb4:	1c03      	adds	r3, r0, #0
 8004cb6:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 8004cbc:	1c19      	adds	r1, r3, #0
 8004cbe:	2085      	movs	r0, #133	@ 0x85
 8004cc0:	05c0      	lsls	r0, r0, #23
 8004cc2:	f7fc f9f3 	bl	80010ac <__aeabi_fsub>
 8004cc6:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 8004cc8:	6939      	ldr	r1, [r7, #16]
 8004cca:	1c18      	adds	r0, r3, #0
 8004ccc:	f7fc f8b0 	bl	8000e30 <__aeabi_fmul>
 8004cd0:	1c03      	adds	r3, r0, #0
 8004cd2:	1c18      	adds	r0, r3, #0
 8004cd4:	f00a fa40 	bl	800f158 <sqrtf>
 8004cd8:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8004ce2:	2185      	movs	r1, #133	@ 0x85
 8004ce4:	05c9      	lsls	r1, r1, #23
 8004ce6:	6938      	ldr	r0, [r7, #16]
 8004ce8:	f7fc f8a2 	bl	8000e30 <__aeabi_fmul>
 8004cec:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8004cee:	1c19      	adds	r1, r3, #0
 8004cf0:	1c28      	adds	r0, r5, #0
 8004cf2:	f7fb feb7 	bl	8000a64 <__aeabi_fdiv>
 8004cf6:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 8004cf8:	1c19      	adds	r1, r3, #0
 8004cfa:	1c20      	adds	r0, r4, #0
 8004cfc:	f7fc f898 	bl	8000e30 <__aeabi_fmul>
 8004d00:	1c03      	adds	r3, r0, #0
 8004d02:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004d08:	68f9      	ldr	r1, [r7, #12]
 8004d0a:	1c18      	adds	r0, r3, #0
 8004d0c:	f7fc f890 	bl	8000e30 <__aeabi_fmul>
 8004d10:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8004d12:	6939      	ldr	r1, [r7, #16]
 8004d14:	1c18      	adds	r0, r3, #0
 8004d16:	f7fb fea5 	bl	8000a64 <__aeabi_fdiv>
 8004d1a:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8004d1c:	68f9      	ldr	r1, [r7, #12]
 8004d1e:	1c18      	adds	r0, r3, #0
 8004d20:	f7fc f886 	bl	8000e30 <__aeabi_fmul>
 8004d24:	1c03      	adds	r3, r0, #0
             sqrtf(
 8004d26:	1c19      	adds	r1, r3, #0
 8004d28:	1c20      	adds	r0, r4, #0
 8004d2a:	f7fb fd11 	bl	8000750 <__aeabi_fadd>
 8004d2e:	1c03      	adds	r3, r0, #0
 8004d30:	1c18      	adds	r0, r3, #0
 8004d32:	f00a fa11 	bl	800f158 <sqrtf>
 8004d36:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 8004d38:	1c19      	adds	r1, r3, #0
 8004d3a:	1c30      	adds	r0, r6, #0
 8004d3c:	f7fc f878 	bl	8000e30 <__aeabi_fmul>
 8004d40:	1c03      	adds	r3, r0, #0
 8004d42:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004d50:	68f9      	ldr	r1, [r7, #12]
 8004d52:	1c18      	adds	r0, r3, #0
 8004d54:	f7fc f86c 	bl	8000e30 <__aeabi_fmul>
 8004d58:	1c03      	adds	r3, r0, #0
 8004d5a:	2182      	movs	r1, #130	@ 0x82
 8004d5c:	05c9      	lsls	r1, r1, #23
 8004d5e:	1c18      	adds	r0, r3, #0
 8004d60:	f7fb fe80 	bl	8000a64 <__aeabi_fdiv>
 8004d64:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 8004d66:	1c19      	adds	r1, r3, #0
 8004d68:	1c20      	adds	r0, r4, #0
 8004d6a:	f7fb fcf1 	bl	8000750 <__aeabi_fadd>
 8004d6e:	1c03      	adds	r3, r0, #0
 8004d70:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8004d76:	46c0      	nop			@ (mov r8, r8)
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	b007      	add	sp, #28
 8004d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004d7e:	46c0      	nop			@ (mov r8, r8)
 8004d80:	42c80000 	.word	0x42c80000
 8004d84:	c2c80000 	.word	0xc2c80000
 8004d88:	44b40000 	.word	0x44b40000

08004d8c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 8004d8c:	b580      	push	{r7, lr}
 8004d8e:	b084      	sub	sp, #16
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	60f8      	str	r0, [r7, #12]
 8004d94:	60b9      	str	r1, [r7, #8]
 8004d96:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	68ba      	ldr	r2, [r7, #8]
 8004da2:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8004da4:	46c0      	nop			@ (mov r8, r8)
 8004da6:	46bd      	mov	sp, r7
 8004da8:	b004      	add	sp, #16
 8004daa:	bd80      	pop	{r7, pc}

08004dac <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 8004dac:	b590      	push	{r4, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dbe:	1c19      	adds	r1, r3, #0
 8004dc0:	6838      	ldr	r0, [r7, #0]
 8004dc2:	f7fc f973 	bl	80010ac <__aeabi_fsub>
 8004dc6:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 8004dc8:	1c19      	adds	r1, r3, #0
 8004dca:	1c20      	adds	r0, r4, #0
 8004dcc:	f7fc f830 	bl	8000e30 <__aeabi_fmul>
 8004dd0:	1c03      	adds	r3, r0, #0
 8004dd2:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8004dd4:	4912      	ldr	r1, [pc, #72]	@ (8004e20 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8004dd6:	68f8      	ldr	r0, [r7, #12]
 8004dd8:	f7fb fb78 	bl	80004cc <__aeabi_fcmplt>
 8004ddc:	1e03      	subs	r3, r0, #0
 8004dde:	d002      	beq.n	8004de6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8004de0:	23fe      	movs	r3, #254	@ 0xfe
 8004de2:	059b      	lsls	r3, r3, #22
 8004de4:	e018      	b.n	8004e18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8004de6:	490f      	ldr	r1, [pc, #60]	@ (8004e24 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8004de8:	68f8      	ldr	r0, [r7, #12]
 8004dea:	f7fb fb83 	bl	80004f4 <__aeabi_fcmpgt>
 8004dee:	1e03      	subs	r3, r0, #0
 8004df0:	d001      	beq.n	8004df6 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8004df2:	2300      	movs	r3, #0
 8004df4:	e010      	b.n	8004e18 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	1c18      	adds	r0, r3, #0
 8004dfa:	f00a f985 	bl	800f108 <expf>
 8004dfe:	1c03      	adds	r3, r0, #0
 8004e00:	21fe      	movs	r1, #254	@ 0xfe
 8004e02:	0589      	lsls	r1, r1, #22
 8004e04:	1c18      	adds	r0, r3, #0
 8004e06:	f7fb fca3 	bl	8000750 <__aeabi_fadd>
 8004e0a:	1c03      	adds	r3, r0, #0
 8004e0c:	1c19      	adds	r1, r3, #0
 8004e0e:	20fe      	movs	r0, #254	@ 0xfe
 8004e10:	0580      	lsls	r0, r0, #22
 8004e12:	f7fb fe27 	bl	8000a64 <__aeabi_fdiv>
 8004e16:	1c03      	adds	r3, r0, #0
    }
}
 8004e18:	1c18      	adds	r0, r3, #0
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	b005      	add	sp, #20
 8004e1e:	bd90      	pop	{r4, r7, pc}
 8004e20:	c2480000 	.word	0xc2480000
 8004e24:	42480000 	.word	0x42480000

08004e28 <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b084      	sub	sp, #16
 8004e2c:	af00      	add	r7, sp, #0
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	60b9      	str	r1, [r7, #8]
 8004e32:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	68ba      	ldr	r2, [r7, #8]
 8004e38:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	687a      	ldr	r2, [r7, #4]
 8004e3e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8004e40:	46c0      	nop			@ (mov r8, r8)
 8004e42:	46bd      	mov	sp, r7
 8004e44:	b004      	add	sp, #16
 8004e46:	bd80      	pop	{r7, pc}

08004e48 <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8004e48:	b590      	push	{r4, r7, lr}
 8004e4a:	b083      	sub	sp, #12
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d114      	bne.n	8004e84 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e5e:	1c19      	adds	r1, r3, #0
 8004e60:	6838      	ldr	r0, [r7, #0]
 8004e62:	f7fc f923 	bl	80010ac <__aeabi_fsub>
 8004e66:	1c03      	adds	r3, r0, #0
 8004e68:	4918      	ldr	r1, [pc, #96]	@ (8004ecc <GasIndexAlgorithm__mox_model__process+0x84>)
 8004e6a:	1c18      	adds	r0, r3, #0
 8004e6c:	f7fb fdfa 	bl	8000a64 <__aeabi_fdiv>
 8004e70:	1c03      	adds	r3, r0, #0
 8004e72:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8004e78:	1c19      	adds	r1, r3, #0
 8004e7a:	1c10      	adds	r0, r2, #0
 8004e7c:	f7fb ffd8 	bl	8000e30 <__aeabi_fmul>
 8004e80:	1c03      	adds	r3, r0, #0
 8004e82:	e01f      	b.n	8004ec4 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004e88:	1c19      	adds	r1, r3, #0
 8004e8a:	6838      	ldr	r0, [r7, #0]
 8004e8c:	f7fc f90e 	bl	80010ac <__aeabi_fsub>
 8004e90:	1c03      	adds	r3, r0, #0
 8004e92:	1c1a      	adds	r2, r3, #0
 8004e94:	2380      	movs	r3, #128	@ 0x80
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	4053      	eors	r3, r2
 8004e9a:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004ea0:	490b      	ldr	r1, [pc, #44]	@ (8004ed0 <GasIndexAlgorithm__mox_model__process+0x88>)
 8004ea2:	1c18      	adds	r0, r3, #0
 8004ea4:	f7fb fc54 	bl	8000750 <__aeabi_fadd>
 8004ea8:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8004eaa:	1c19      	adds	r1, r3, #0
 8004eac:	1c20      	adds	r0, r4, #0
 8004eae:	f7fb fdd9 	bl	8000a64 <__aeabi_fdiv>
 8004eb2:	1c03      	adds	r3, r0, #0
 8004eb4:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8004eba:	1c19      	adds	r1, r3, #0
 8004ebc:	1c10      	adds	r0, r2, #0
 8004ebe:	f7fb ffb7 	bl	8000e30 <__aeabi_fmul>
 8004ec2:	1c03      	adds	r3, r0, #0
    }
}
 8004ec4:	1c18      	adds	r0, r3, #0
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b003      	add	sp, #12
 8004eca:	bd90      	pop	{r4, r7, pc}
 8004ecc:	44fa0000 	.word	0x44fa0000
 8004ed0:	435c0000 	.word	0x435c0000

08004ed4 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	60f8      	str	r0, [r7, #12]
 8004edc:	60b9      	str	r1, [r7, #8]
 8004ede:	607a      	str	r2, [r7, #4]
 8004ee0:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	2180      	movs	r1, #128	@ 0x80
 8004ee6:	687a      	ldr	r2, [r7, #4]
 8004ee8:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	2184      	movs	r1, #132	@ 0x84
 8004eee:	68ba      	ldr	r2, [r7, #8]
 8004ef0:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	2188      	movs	r1, #136	@ 0x88
 8004ef6:	683a      	ldr	r2, [r7, #0]
 8004ef8:	505a      	str	r2, [r3, r1]
}
 8004efa:	46c0      	nop			@ (mov r8, r8)
 8004efc:	46bd      	mov	sp, r7
 8004efe:	b004      	add	sp, #16
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8004f04:	b590      	push	{r4, r7, lr}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2280      	movs	r2, #128	@ 0x80
 8004f12:	589c      	ldr	r4, [r3, r2]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2284      	movs	r2, #132	@ 0x84
 8004f18:	589b      	ldr	r3, [r3, r2]
 8004f1a:	1c19      	adds	r1, r3, #0
 8004f1c:	6838      	ldr	r0, [r7, #0]
 8004f1e:	f7fc f8c5 	bl	80010ac <__aeabi_fsub>
 8004f22:	1c03      	adds	r3, r0, #0
 8004f24:	1c19      	adds	r1, r3, #0
 8004f26:	1c20      	adds	r0, r4, #0
 8004f28:	f7fb ff82 	bl	8000e30 <__aeabi_fmul>
 8004f2c:	1c03      	adds	r3, r0, #0
 8004f2e:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8004f30:	4940      	ldr	r1, [pc, #256]	@ (8005034 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8004f32:	68b8      	ldr	r0, [r7, #8]
 8004f34:	f7fb faca 	bl	80004cc <__aeabi_fcmplt>
 8004f38:	1e03      	subs	r3, r0, #0
 8004f3a:	d001      	beq.n	8004f40 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8004f3c:	4b3e      	ldr	r3, [pc, #248]	@ (8005038 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8004f3e:	e075      	b.n	800502c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8004f40:	493e      	ldr	r1, [pc, #248]	@ (800503c <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8004f42:	68b8      	ldr	r0, [r7, #8]
 8004f44:	f7fb fad6 	bl	80004f4 <__aeabi_fcmpgt>
 8004f48:	1e03      	subs	r3, r0, #0
 8004f4a:	d001      	beq.n	8004f50 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	e06d      	b.n	800502c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8004f50:	2100      	movs	r1, #0
 8004f52:	6838      	ldr	r0, [r7, #0]
 8004f54:	f7fb fad8 	bl	8000508 <__aeabi_fcmpge>
 8004f58:	1e03      	subs	r3, r0, #0
 8004f5a:	d047      	beq.n	8004fec <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	2288      	movs	r2, #136	@ 0x88
 8004f60:	589b      	ldr	r3, [r3, r2]
 8004f62:	21fe      	movs	r1, #254	@ 0xfe
 8004f64:	0589      	lsls	r1, r1, #22
 8004f66:	1c18      	adds	r0, r3, #0
 8004f68:	f7fb faaa 	bl	80004c0 <__aeabi_fcmpeq>
 8004f6c:	1e03      	subs	r3, r0, #0
 8004f6e:	d00e      	beq.n	8004f8e <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	1c19      	adds	r1, r3, #0
 8004f76:	20fe      	movs	r0, #254	@ 0xfe
 8004f78:	0580      	lsls	r0, r0, #22
 8004f7a:	f7fc f897 	bl	80010ac <__aeabi_fsub>
 8004f7e:	1c03      	adds	r3, r0, #0
 8004f80:	492f      	ldr	r1, [pc, #188]	@ (8005040 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8004f82:	1c18      	adds	r0, r3, #0
 8004f84:	f7fb ff54 	bl	8000e30 <__aeabi_fmul>
 8004f88:	1c03      	adds	r3, r0, #0
 8004f8a:	60fb      	str	r3, [r7, #12]
 8004f8c:	e012      	b.n	8004fb4 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	492c      	ldr	r1, [pc, #176]	@ (8005044 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8004f94:	1c18      	adds	r0, r3, #0
 8004f96:	f7fb ff4b 	bl	8000e30 <__aeabi_fmul>
 8004f9a:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8004f9c:	1c19      	adds	r1, r3, #0
 8004f9e:	4826      	ldr	r0, [pc, #152]	@ (8005038 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8004fa0:	f7fc f884 	bl	80010ac <__aeabi_fsub>
 8004fa4:	1c03      	adds	r3, r0, #0
 8004fa6:	2181      	movs	r1, #129	@ 0x81
 8004fa8:	05c9      	lsls	r1, r1, #23
 8004faa:	1c18      	adds	r0, r3, #0
 8004fac:	f7fb fd5a 	bl	8000a64 <__aeabi_fdiv>
 8004fb0:	1c03      	adds	r3, r0, #0
 8004fb2:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8004fb4:	4920      	ldr	r1, [pc, #128]	@ (8005038 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8004fb6:	68f8      	ldr	r0, [r7, #12]
 8004fb8:	f7fb fbca 	bl	8000750 <__aeabi_fadd>
 8004fbc:	1c03      	adds	r3, r0, #0
 8004fbe:	1c1c      	adds	r4, r3, #0
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	1c18      	adds	r0, r3, #0
 8004fc4:	f00a f8a0 	bl	800f108 <expf>
 8004fc8:	1c03      	adds	r3, r0, #0
 8004fca:	21fe      	movs	r1, #254	@ 0xfe
 8004fcc:	0589      	lsls	r1, r1, #22
 8004fce:	1c18      	adds	r0, r3, #0
 8004fd0:	f7fb fbbe 	bl	8000750 <__aeabi_fadd>
 8004fd4:	1c03      	adds	r3, r0, #0
 8004fd6:	1c19      	adds	r1, r3, #0
 8004fd8:	1c20      	adds	r0, r4, #0
 8004fda:	f7fb fd43 	bl	8000a64 <__aeabi_fdiv>
 8004fde:	1c03      	adds	r3, r0, #0
 8004fe0:	68f9      	ldr	r1, [r7, #12]
 8004fe2:	1c18      	adds	r0, r3, #0
 8004fe4:	f7fc f862 	bl	80010ac <__aeabi_fsub>
 8004fe8:	1c03      	adds	r3, r0, #0
 8004fea:	e01f      	b.n	800502c <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	2188      	movs	r1, #136	@ 0x88
 8004ff4:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8004ff6:	1c19      	adds	r1, r3, #0
 8004ff8:	1c10      	adds	r0, r2, #0
 8004ffa:	f7fb fd33 	bl	8000a64 <__aeabi_fdiv>
 8004ffe:	1c03      	adds	r3, r0, #0
 8005000:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	1c18      	adds	r0, r3, #0
 8005006:	f00a f87f 	bl	800f108 <expf>
 800500a:	1c03      	adds	r3, r0, #0
 800500c:	21fe      	movs	r1, #254	@ 0xfe
 800500e:	0589      	lsls	r1, r1, #22
 8005010:	1c18      	adds	r0, r3, #0
 8005012:	f7fb fb9d 	bl	8000750 <__aeabi_fadd>
 8005016:	1c03      	adds	r3, r0, #0
 8005018:	1c19      	adds	r1, r3, #0
 800501a:	4807      	ldr	r0, [pc, #28]	@ (8005038 <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 800501c:	f7fb fd22 	bl	8000a64 <__aeabi_fdiv>
 8005020:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8005022:	1c19      	adds	r1, r3, #0
 8005024:	1c20      	adds	r0, r4, #0
 8005026:	f7fb ff03 	bl	8000e30 <__aeabi_fmul>
 800502a:	1c03      	adds	r3, r0, #0
        }
    }
}
 800502c:	1c18      	adds	r0, r3, #0
 800502e:	46bd      	mov	sp, r7
 8005030:	b005      	add	sp, #20
 8005032:	bd90      	pop	{r4, r7, pc}
 8005034:	c2480000 	.word	0xc2480000
 8005038:	43fa0000 	.word	0x43fa0000
 800503c:	42480000 	.word	0x42480000
 8005040:	3f8041ab 	.word	0x3f8041ab
 8005044:	40a00000 	.word	0x40a00000

08005048 <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8005048:	b590      	push	{r4, r7, lr}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	685b      	ldr	r3, [r3, #4]
 8005058:	4913      	ldr	r1, [pc, #76]	@ (80050a8 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 800505a:	1c18      	adds	r0, r3, #0
 800505c:	f7fb fb78 	bl	8000750 <__aeabi_fadd>
 8005060:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8005062:	1c19      	adds	r1, r3, #0
 8005064:	1c20      	adds	r0, r4, #0
 8005066:	f7fb fcfd 	bl	8000a64 <__aeabi_fdiv>
 800506a:	1c03      	adds	r3, r0, #0
 800506c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	228c      	movs	r2, #140	@ 0x8c
 8005072:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	685b      	ldr	r3, [r3, #4]
 800507c:	490b      	ldr	r1, [pc, #44]	@ (80050ac <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 800507e:	1c18      	adds	r0, r3, #0
 8005080:	f7fb fb66 	bl	8000750 <__aeabi_fadd>
 8005084:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8005086:	1c19      	adds	r1, r3, #0
 8005088:	1c20      	adds	r0, r4, #0
 800508a:	f7fb fceb 	bl	8000a64 <__aeabi_fdiv>
 800508e:	1c03      	adds	r3, r0, #0
 8005090:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2290      	movs	r2, #144	@ 0x90
 8005096:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2294      	movs	r2, #148	@ 0x94
 800509c:	2100      	movs	r1, #0
 800509e:	5499      	strb	r1, [r3, r2]
}
 80050a0:	46c0      	nop			@ (mov r8, r8)
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b003      	add	sp, #12
 80050a6:	bd90      	pop	{r4, r7, pc}
 80050a8:	41a00000 	.word	0x41a00000
 80050ac:	43fa0000 	.word	0x43fa0000

080050b0 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 80050b0:	b590      	push	{r4, r7, lr}
 80050b2:	b087      	sub	sp, #28
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
 80050b8:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	2294      	movs	r2, #148	@ 0x94
 80050be:	5c9b      	ldrb	r3, [r3, r2]
 80050c0:	2201      	movs	r2, #1
 80050c2:	4053      	eors	r3, r2
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00f      	beq.n	80050ea <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2198      	movs	r1, #152	@ 0x98
 80050ce:	683a      	ldr	r2, [r7, #0]
 80050d0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	219c      	movs	r1, #156	@ 0x9c
 80050d6:	683a      	ldr	r2, [r7, #0]
 80050d8:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	21a0      	movs	r1, #160	@ 0xa0
 80050de:	683a      	ldr	r2, [r7, #0]
 80050e0:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2294      	movs	r2, #148	@ 0x94
 80050e6:	2101      	movs	r1, #1
 80050e8:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	228c      	movs	r2, #140	@ 0x8c
 80050ee:	589b      	ldr	r3, [r3, r2]
 80050f0:	1c19      	adds	r1, r3, #0
 80050f2:	20fe      	movs	r0, #254	@ 0xfe
 80050f4:	0580      	lsls	r0, r0, #22
 80050f6:	f7fb ffd9 	bl	80010ac <__aeabi_fsub>
 80050fa:	1c03      	adds	r3, r0, #0
 80050fc:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2298      	movs	r2, #152	@ 0x98
 8005102:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8005104:	1c19      	adds	r1, r3, #0
 8005106:	f7fb fe93 	bl	8000e30 <__aeabi_fmul>
 800510a:	1c03      	adds	r3, r0, #0
 800510c:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	228c      	movs	r2, #140	@ 0x8c
 8005112:	589b      	ldr	r3, [r3, r2]
 8005114:	6839      	ldr	r1, [r7, #0]
 8005116:	1c18      	adds	r0, r3, #0
 8005118:	f7fb fe8a 	bl	8000e30 <__aeabi_fmul>
 800511c:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 800511e:	1c19      	adds	r1, r3, #0
 8005120:	1c20      	adds	r0, r4, #0
 8005122:	f7fb fb15 	bl	8000750 <__aeabi_fadd>
 8005126:	1c03      	adds	r3, r0, #0
 8005128:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	2298      	movs	r2, #152	@ 0x98
 800512e:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2290      	movs	r2, #144	@ 0x90
 8005134:	589b      	ldr	r3, [r3, r2]
 8005136:	1c19      	adds	r1, r3, #0
 8005138:	20fe      	movs	r0, #254	@ 0xfe
 800513a:	0580      	lsls	r0, r0, #22
 800513c:	f7fb ffb6 	bl	80010ac <__aeabi_fsub>
 8005140:	1c03      	adds	r3, r0, #0
 8005142:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	229c      	movs	r2, #156	@ 0x9c
 8005148:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 800514a:	1c19      	adds	r1, r3, #0
 800514c:	f7fb fe70 	bl	8000e30 <__aeabi_fmul>
 8005150:	1c03      	adds	r3, r0, #0
 8005152:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2290      	movs	r2, #144	@ 0x90
 8005158:	589b      	ldr	r3, [r3, r2]
 800515a:	6839      	ldr	r1, [r7, #0]
 800515c:	1c18      	adds	r0, r3, #0
 800515e:	f7fb fe67 	bl	8000e30 <__aeabi_fmul>
 8005162:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8005164:	1c19      	adds	r1, r3, #0
 8005166:	1c20      	adds	r0, r4, #0
 8005168:	f7fb faf2 	bl	8000750 <__aeabi_fadd>
 800516c:	1c03      	adds	r3, r0, #0
 800516e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	229c      	movs	r2, #156	@ 0x9c
 8005174:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	2298      	movs	r2, #152	@ 0x98
 800517a:	589a      	ldr	r2, [r3, r2]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	219c      	movs	r1, #156	@ 0x9c
 8005180:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8005182:	1c19      	adds	r1, r3, #0
 8005184:	1c10      	adds	r0, r2, #0
 8005186:	f7fb ff91 	bl	80010ac <__aeabi_fsub>
 800518a:	1c03      	adds	r3, r0, #0
 800518c:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 800518e:	2100      	movs	r1, #0
 8005190:	6978      	ldr	r0, [r7, #20]
 8005192:	f7fb f99b 	bl	80004cc <__aeabi_fcmplt>
 8005196:	1e03      	subs	r3, r0, #0
 8005198:	d004      	beq.n	80051a4 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2280      	movs	r2, #128	@ 0x80
 800519e:	0612      	lsls	r2, r2, #24
 80051a0:	4053      	eors	r3, r2
 80051a2:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 80051a4:	4923      	ldr	r1, [pc, #140]	@ (8005234 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 80051a6:	6978      	ldr	r0, [r7, #20]
 80051a8:	f7fb fe42 	bl	8000e30 <__aeabi_fmul>
 80051ac:	1c03      	adds	r3, r0, #0
 80051ae:	1c18      	adds	r0, r3, #0
 80051b0:	f009 ffaa 	bl	800f108 <expf>
 80051b4:	1c03      	adds	r3, r0, #0
 80051b6:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 80051b8:	491f      	ldr	r1, [pc, #124]	@ (8005238 <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 80051ba:	6938      	ldr	r0, [r7, #16]
 80051bc:	f7fb fe38 	bl	8000e30 <__aeabi_fmul>
 80051c0:	1c03      	adds	r3, r0, #0
 80051c2:	491e      	ldr	r1, [pc, #120]	@ (800523c <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 80051c4:	1c18      	adds	r0, r3, #0
 80051c6:	f7fb fac3 	bl	8000750 <__aeabi_fadd>
 80051ca:	1c03      	adds	r3, r0, #0
 80051cc:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	685c      	ldr	r4, [r3, #4]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	68f9      	ldr	r1, [r7, #12]
 80051d8:	1c18      	adds	r0, r3, #0
 80051da:	f7fb fab9 	bl	8000750 <__aeabi_fadd>
 80051de:	1c03      	adds	r3, r0, #0
 80051e0:	1c19      	adds	r1, r3, #0
 80051e2:	1c20      	adds	r0, r4, #0
 80051e4:	f7fb fc3e 	bl	8000a64 <__aeabi_fdiv>
 80051e8:	1c03      	adds	r3, r0, #0
 80051ea:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 80051ec:	68b9      	ldr	r1, [r7, #8]
 80051ee:	20fe      	movs	r0, #254	@ 0xfe
 80051f0:	0580      	lsls	r0, r0, #22
 80051f2:	f7fb ff5b 	bl	80010ac <__aeabi_fsub>
 80051f6:	1c03      	adds	r3, r0, #0
 80051f8:	1c18      	adds	r0, r3, #0
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	22a0      	movs	r2, #160	@ 0xa0
 80051fe:	589b      	ldr	r3, [r3, r2]
 8005200:	1c19      	adds	r1, r3, #0
 8005202:	f7fb fe15 	bl	8000e30 <__aeabi_fmul>
 8005206:	1c03      	adds	r3, r0, #0
 8005208:	1c1c      	adds	r4, r3, #0
 800520a:	6839      	ldr	r1, [r7, #0]
 800520c:	68b8      	ldr	r0, [r7, #8]
 800520e:	f7fb fe0f 	bl	8000e30 <__aeabi_fmul>
 8005212:	1c03      	adds	r3, r0, #0
 8005214:	1c19      	adds	r1, r3, #0
 8005216:	1c20      	adds	r0, r4, #0
 8005218:	f7fb fa9a 	bl	8000750 <__aeabi_fadd>
 800521c:	1c03      	adds	r3, r0, #0
 800521e:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	22a0      	movs	r2, #160	@ 0xa0
 8005224:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	22a0      	movs	r2, #160	@ 0xa0
 800522a:	589b      	ldr	r3, [r3, r2]
}
 800522c:	1c18      	adds	r0, r3, #0
 800522e:	46bd      	mov	sp, r7
 8005230:	b007      	add	sp, #28
 8005232:	bd90      	pop	{r4, r7, pc}
 8005234:	be4ccccd 	.word	0xbe4ccccd
 8005238:	43f00000 	.word	0x43f00000
 800523c:	41a00000 	.word	0x41a00000

08005240 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8005240:	b590      	push	{r4, r7, lr}
 8005242:	b083      	sub	sp, #12
 8005244:	af00      	add	r7, sp, #0
 8005246:	6039      	str	r1, [r7, #0]
 8005248:	0011      	movs	r1, r2
 800524a:	1dfb      	adds	r3, r7, #7
 800524c:	1c02      	adds	r2, r0, #0
 800524e:	701a      	strb	r2, [r3, #0]
 8005250:	1dbb      	adds	r3, r7, #6
 8005252:	1c0a      	adds	r2, r1, #0
 8005254:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8005256:	4b08      	ldr	r3, [pc, #32]	@ (8005278 <ReadRegister+0x38>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 800525e:	4b06      	ldr	r3, [pc, #24]	@ (8005278 <ReadRegister+0x38>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	1dba      	adds	r2, r7, #6
 8005264:	7814      	ldrb	r4, [r2, #0]
 8005266:	6839      	ldr	r1, [r7, #0]
 8005268:	1dfa      	adds	r2, r7, #7
 800526a:	7810      	ldrb	r0, [r2, #0]
 800526c:	0022      	movs	r2, r4
 800526e:	4798      	blx	r3
  }
}
 8005270:	46c0      	nop			@ (mov r8, r8)
 8005272:	46bd      	mov	sp, r7
 8005274:	b003      	add	sp, #12
 8005276:	bd90      	pop	{r4, r7, pc}
 8005278:	200005a0 	.word	0x200005a0

0800527c <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 800527c:	b590      	push	{r4, r7, lr}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
 8005282:	6039      	str	r1, [r7, #0]
 8005284:	0011      	movs	r1, r2
 8005286:	1dfb      	adds	r3, r7, #7
 8005288:	1c02      	adds	r2, r0, #0
 800528a:	701a      	strb	r2, [r3, #0]
 800528c:	1dbb      	adds	r3, r7, #6
 800528e:	1c0a      	adds	r2, r1, #0
 8005290:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8005292:	4b08      	ldr	r3, [pc, #32]	@ (80052b4 <WriteRegister+0x38>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d008      	beq.n	80052ac <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 800529a:	4b06      	ldr	r3, [pc, #24]	@ (80052b4 <WriteRegister+0x38>)
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	1dba      	adds	r2, r7, #6
 80052a0:	7814      	ldrb	r4, [r2, #0]
 80052a2:	6839      	ldr	r1, [r7, #0]
 80052a4:	1dfa      	adds	r2, r7, #7
 80052a6:	7810      	ldrb	r0, [r2, #0]
 80052a8:	0022      	movs	r2, r4
 80052aa:	4798      	blx	r3
  }
}
 80052ac:	46c0      	nop			@ (mov r8, r8)
 80052ae:	46bd      	mov	sp, r7
 80052b0:	b003      	add	sp, #12
 80052b2:	bd90      	pop	{r4, r7, pc}
 80052b4:	200005a4 	.word	0x200005a4

080052b8 <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
 80052c0:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 80052c2:	4b07      	ldr	r3, [pc, #28]	@ (80052e0 <SGP_Init+0x28>)
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 80052c8:	4b06      	ldr	r3, [pc, #24]	@ (80052e4 <SGP_Init+0x2c>)
 80052ca:	683a      	ldr	r2, [r7, #0]
 80052cc:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 80052ce:	4b06      	ldr	r3, [pc, #24]	@ (80052e8 <SGP_Init+0x30>)
 80052d0:	2100      	movs	r1, #0
 80052d2:	0018      	movs	r0, r3
 80052d4:	f7ff f930 	bl	8004538 <GasIndexAlgorithm_init>
}
 80052d8:	46c0      	nop			@ (mov r8, r8)
 80052da:	46bd      	mov	sp, r7
 80052dc:	b002      	add	sp, #8
 80052de:	bd80      	pop	{r7, pc}
 80052e0:	200005a0 	.word	0x200005a0
 80052e4:	200005a4 	.word	0x200005a4
 80052e8:	200005b4 	.word	0x200005b4

080052ec <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 80052ec:	b580      	push	{r7, lr}
 80052ee:	af00      	add	r7, sp, #0
  WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80052f0:	4b0a      	ldr	r3, [pc, #40]	@ (800531c <SGP_StartMeasurement+0x30>)
 80052f2:	2208      	movs	r2, #8
 80052f4:	0019      	movs	r1, r3
 80052f6:	2059      	movs	r0, #89	@ 0x59
 80052f8:	f7ff ffc0 	bl	800527c <WriteRegister>
  SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 80052fc:	f000 fe1c 	bl	8005f38 <GetCurrentHalTicks>
 8005300:	0003      	movs	r3, r0
 8005302:	33aa      	adds	r3, #170	@ 0xaa
 8005304:	001a      	movs	r2, r3
 8005306:	4b06      	ldr	r3, [pc, #24]	@ (8005320 <SGP_StartMeasurement+0x34>)
 8005308:	601a      	str	r2, [r3, #0]
  HeatUpIsDone = false;
 800530a:	4b06      	ldr	r3, [pc, #24]	@ (8005324 <SGP_StartMeasurement+0x38>)
 800530c:	2200      	movs	r2, #0
 800530e:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <SGP_StartMeasurement+0x3c>)
 8005312:	2200      	movs	r2, #0
 8005314:	701a      	strb	r2, [r3, #0]
}
 8005316:	46c0      	nop			@ (mov r8, r8)
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	20000014 	.word	0x20000014
 8005320:	20000020 	.word	0x20000020
 8005324:	200005b2 	.word	0x200005b2
 8005328:	200005b3 	.word	0x200005b3

0800532c <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
 8005330:	4b04      	ldr	r3, [pc, #16]	@ (8005344 <SGP_HeatedUp+0x18>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	0018      	movs	r0, r3
 8005336:	f000 fd1d 	bl	8005d74 <TimestampIsReached>
 800533a:	0003      	movs	r3, r0
 800533c:	0018      	movs	r0, r3
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	46c0      	nop			@ (mov r8, r8)
 8005344:	20000020 	.word	0x20000020

08005348 <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8005348:	b580      	push	{r7, lr}
 800534a:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 800534c:	4b04      	ldr	r3, [pc, #16]	@ (8005360 <SGP_MeasurementReady+0x18>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	0018      	movs	r0, r3
 8005352:	f000 fd0f 	bl	8005d74 <TimestampIsReached>
 8005356:	0003      	movs	r3, r0
}
 8005358:	0018      	movs	r0, r3
 800535a:	46bd      	mov	sp, r7
 800535c:	bd80      	pop	{r7, pc}
 800535e:	46c0      	nop			@ (mov r8, r8)
 8005360:	20000028 	.word	0x20000028

08005364 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8005364:	b580      	push	{r7, lr}
 8005366:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8005368:	4b04      	ldr	r3, [pc, #16]	@ (800537c <SGP_MeasurementDone+0x18>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	0018      	movs	r0, r3
 800536e:	f000 fd01 	bl	8005d74 <TimestampIsReached>
 8005372:	0003      	movs	r3, r0
}
 8005374:	0018      	movs	r0, r3
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
 800537a:	46c0      	nop			@ (mov r8, r8)
 800537c:	20000024 	.word	0x20000024

08005380 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8005384:	4b04      	ldr	r3, [pc, #16]	@ (8005398 <SGP_TurnHeaterOff+0x18>)
 8005386:	2202      	movs	r2, #2
 8005388:	0019      	movs	r1, r3
 800538a:	2059      	movs	r0, #89	@ 0x59
 800538c:	f7ff ff76 	bl	800527c <WriteRegister>
}
 8005390:	46c0      	nop			@ (mov r8, r8)
 8005392:	46bd      	mov	sp, r7
 8005394:	bd80      	pop	{r7, pc}
 8005396:	46c0      	nop			@ (mov r8, r8)
 8005398:	2000000c 	.word	0x2000000c

0800539c <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 800539c:	b590      	push	{r4, r7, lr}
 800539e:	b087      	sub	sp, #28
 80053a0:	af02      	add	r7, sp, #8
 80053a2:	6078      	str	r0, [r7, #4]
  // TODO: Don't parse the values 0 since VOC index is still measuring.
  // Maybe use the
  if (SGP_HeatedUp() && !HeatUpIsDone) {
 80053a4:	f7ff ffc2 	bl	800532c <SGP_HeatedUp>
 80053a8:	1e03      	subs	r3, r0, #0
 80053aa:	d01c      	beq.n	80053e6 <SGP_GetMeasurementValues+0x4a>
 80053ac:	4b6b      	ldr	r3, [pc, #428]	@ (800555c <SGP_GetMeasurementValues+0x1c0>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2201      	movs	r2, #1
 80053b2:	4053      	eors	r3, r2
 80053b4:	b2db      	uxtb	r3, r3
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d015      	beq.n	80053e6 <SGP_GetMeasurementValues+0x4a>
    Debug("SGP is heated up, starting the measurement.");
 80053ba:	4a69      	ldr	r2, [pc, #420]	@ (8005560 <SGP_GetMeasurementValues+0x1c4>)
 80053bc:	4b69      	ldr	r3, [pc, #420]	@ (8005564 <SGP_GetMeasurementValues+0x1c8>)
 80053be:	0019      	movs	r1, r3
 80053c0:	2003      	movs	r0, #3
 80053c2:	f000 fd2d 	bl	8005e20 <CreateLine>
    HeatUpIsDone = true;
 80053c6:	4b65      	ldr	r3, [pc, #404]	@ (800555c <SGP_GetMeasurementValues+0x1c0>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 80053cc:	4b66      	ldr	r3, [pc, #408]	@ (8005568 <SGP_GetMeasurementValues+0x1cc>)
 80053ce:	2208      	movs	r2, #8
 80053d0:	0019      	movs	r1, r3
 80053d2:	2059      	movs	r0, #89	@ 0x59
 80053d4:	f7ff ff52 	bl	800527c <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 80053d8:	f000 fdae 	bl	8005f38 <GetCurrentHalTicks>
 80053dc:	0003      	movs	r3, r0
 80053de:	331e      	adds	r3, #30
 80053e0:	001a      	movs	r2, r3
 80053e2:	4b62      	ldr	r3, [pc, #392]	@ (800556c <SGP_GetMeasurementValues+0x1d0>)
 80053e4:	601a      	str	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 80053e6:	4b5d      	ldr	r3, [pc, #372]	@ (800555c <SGP_GetMeasurementValues+0x1c0>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d100      	bne.n	80053f0 <SGP_GetMeasurementValues+0x54>
 80053ee:	e09c      	b.n	800552a <SGP_GetMeasurementValues+0x18e>
 80053f0:	f7ff ffaa 	bl	8005348 <SGP_MeasurementReady>
 80053f4:	1e03      	subs	r3, r0, #0
 80053f6:	d100      	bne.n	80053fa <SGP_GetMeasurementValues+0x5e>
 80053f8:	e097      	b.n	800552a <SGP_GetMeasurementValues+0x18e>
 80053fa:	4b5d      	ldr	r3, [pc, #372]	@ (8005570 <SGP_GetMeasurementValues+0x1d4>)
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	2201      	movs	r2, #1
 8005400:	4053      	eors	r3, r2
 8005402:	b2db      	uxtb	r3, r3
 8005404:	2b00      	cmp	r3, #0
 8005406:	d100      	bne.n	800540a <SGP_GetMeasurementValues+0x6e>
 8005408:	e08f      	b.n	800552a <SGP_GetMeasurementValues+0x18e>
    Debug("Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 800540a:	4b5a      	ldr	r3, [pc, #360]	@ (8005574 <SGP_GetMeasurementValues+0x1d8>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	3301      	adds	r3, #1
 8005410:	4a59      	ldr	r2, [pc, #356]	@ (8005578 <SGP_GetMeasurementValues+0x1dc>)
 8005412:	4954      	ldr	r1, [pc, #336]	@ (8005564 <SGP_GetMeasurementValues+0x1c8>)
 8005414:	2003      	movs	r0, #3
 8005416:	f000 fd03 	bl	8005e20 <CreateLine>
    MeasurementIsReady = true;
 800541a:	4b55      	ldr	r3, [pc, #340]	@ (8005570 <SGP_GetMeasurementValues+0x1d4>)
 800541c:	2201      	movs	r2, #1
 800541e:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 8005420:	4b56      	ldr	r3, [pc, #344]	@ (800557c <SGP_GetMeasurementValues+0x1e0>)
 8005422:	2203      	movs	r2, #3
 8005424:	0019      	movs	r1, r3
 8005426:	2059      	movs	r0, #89	@ 0x59
 8005428:	f7ff ff0a 	bl	8005240 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 800542c:	4b53      	ldr	r3, [pc, #332]	@ (800557c <SGP_GetMeasurementValues+0x1e0>)
 800542e:	2203      	movs	r2, #3
 8005430:	2103      	movs	r1, #3
 8005432:	0018      	movs	r0, r3
 8005434:	f000 f8fc 	bl	8005630 <CheckCRC>
 8005438:	0003      	movs	r3, r0
 800543a:	001a      	movs	r2, r3
 800543c:	2301      	movs	r3, #1
 800543e:	4053      	eors	r3, r2
 8005440:	b2db      	uxtb	r3, r3
 8005442:	2b00      	cmp	r3, #0
 8005444:	d02a      	beq.n	800549c <SGP_GetMeasurementValues+0x100>
      Error("SGP measurements CRC check failed.");
 8005446:	4a4e      	ldr	r2, [pc, #312]	@ (8005580 <SGP_GetMeasurementValues+0x1e4>)
 8005448:	4b4e      	ldr	r3, [pc, #312]	@ (8005584 <SGP_GetMeasurementValues+0x1e8>)
 800544a:	0019      	movs	r1, r3
 800544c:	2001      	movs	r0, #1
 800544e:	f000 fce7 	bl	8005e20 <CreateLine>
      Info("SGP_Measure buffer structure:");
 8005452:	4a4d      	ldr	r2, [pc, #308]	@ (8005588 <SGP_GetMeasurementValues+0x1ec>)
 8005454:	4b4d      	ldr	r3, [pc, #308]	@ (800558c <SGP_GetMeasurementValues+0x1f0>)
 8005456:	0019      	movs	r1, r3
 8005458:	2002      	movs	r0, #2
 800545a:	f000 fce1 	bl	8005e20 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 800545e:	230f      	movs	r3, #15
 8005460:	18fb      	adds	r3, r7, r3
 8005462:	2200      	movs	r2, #0
 8005464:	701a      	strb	r2, [r3, #0]
 8005466:	e012      	b.n	800548e <SGP_GetMeasurementValues+0xf2>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8005468:	240f      	movs	r4, #15
 800546a:	193b      	adds	r3, r7, r4
 800546c:	7818      	ldrb	r0, [r3, #0]
 800546e:	193b      	adds	r3, r7, r4
 8005470:	781b      	ldrb	r3, [r3, #0]
 8005472:	4a42      	ldr	r2, [pc, #264]	@ (800557c <SGP_GetMeasurementValues+0x1e0>)
 8005474:	5cd3      	ldrb	r3, [r2, r3]
 8005476:	4a46      	ldr	r2, [pc, #280]	@ (8005590 <SGP_GetMeasurementValues+0x1f4>)
 8005478:	493a      	ldr	r1, [pc, #232]	@ (8005564 <SGP_GetMeasurementValues+0x1c8>)
 800547a:	9300      	str	r3, [sp, #0]
 800547c:	0003      	movs	r3, r0
 800547e:	2003      	movs	r0, #3
 8005480:	f000 fcce 	bl	8005e20 <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8005484:	193b      	adds	r3, r7, r4
 8005486:	781a      	ldrb	r2, [r3, #0]
 8005488:	193b      	adds	r3, r7, r4
 800548a:	3201      	adds	r2, #1
 800548c:	701a      	strb	r2, [r3, #0]
 800548e:	230f      	movs	r3, #15
 8005490:	18fb      	adds	r3, r7, r3
 8005492:	781b      	ldrb	r3, [r3, #0]
 8005494:	2b02      	cmp	r3, #2
 8005496:	d9e7      	bls.n	8005468 <SGP_GetMeasurementValues+0xcc>
      }
      return false;
 8005498:	2300      	movs	r3, #0
 800549a:	e05b      	b.n	8005554 <SGP_GetMeasurementValues+0x1b8>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 800549c:	f000 fd4c 	bl	8005f38 <GetCurrentHalTicks>
 80054a0:	0003      	movs	r3, r0
 80054a2:	22fa      	movs	r2, #250	@ 0xfa
 80054a4:	0092      	lsls	r2, r2, #2
 80054a6:	189a      	adds	r2, r3, r2
 80054a8:	4b3a      	ldr	r3, [pc, #232]	@ (8005594 <SGP_GetMeasurementValues+0x1f8>)
 80054aa:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 80054ac:	f7ff ff68 	bl	8005380 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 80054b0:	4b30      	ldr	r3, [pc, #192]	@ (8005574 <SGP_GetMeasurementValues+0x1d8>)
 80054b2:	781b      	ldrb	r3, [r3, #0]
 80054b4:	3301      	adds	r3, #1
 80054b6:	b2da      	uxtb	r2, r3
 80054b8:	4b2e      	ldr	r3, [pc, #184]	@ (8005574 <SGP_GetMeasurementValues+0x1d8>)
 80054ba:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 80054bc:	4b2d      	ldr	r3, [pc, #180]	@ (8005574 <SGP_GetMeasurementValues+0x1d8>)
 80054be:	781a      	ldrb	r2, [r3, #0]
 80054c0:	4b35      	ldr	r3, [pc, #212]	@ (8005598 <SGP_GetMeasurementValues+0x1fc>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d330      	bcc.n	800552a <SGP_GetMeasurementValues+0x18e>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 80054c8:	4b2c      	ldr	r3, [pc, #176]	@ (800557c <SGP_GetMeasurementValues+0x1e0>)
 80054ca:	785b      	ldrb	r3, [r3, #1]
 80054cc:	021b      	lsls	r3, r3, #8
 80054ce:	b21a      	sxth	r2, r3
 80054d0:	4b2a      	ldr	r3, [pc, #168]	@ (800557c <SGP_GetMeasurementValues+0x1e0>)
 80054d2:	781b      	ldrb	r3, [r3, #0]
 80054d4:	b21b      	sxth	r3, r3
 80054d6:	4313      	orrs	r3, r2
 80054d8:	b21a      	sxth	r2, r3
 80054da:	240c      	movs	r4, #12
 80054dc:	193b      	adds	r3, r7, r4
 80054de:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 80054e0:	193b      	adds	r3, r7, r4
 80054e2:	881b      	ldrh	r3, [r3, #0]
 80054e4:	4a2d      	ldr	r2, [pc, #180]	@ (800559c <SGP_GetMeasurementValues+0x200>)
 80054e6:	491f      	ldr	r1, [pc, #124]	@ (8005564 <SGP_GetMeasurementValues+0x1c8>)
 80054e8:	2003      	movs	r0, #3
 80054ea:	f000 fc99 	bl	8005e20 <CreateLine>
      int32_t tempVocIndex = 0;
 80054ee:	2300      	movs	r3, #0
 80054f0:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 80054f2:	193b      	adds	r3, r7, r4
 80054f4:	8819      	ldrh	r1, [r3, #0]
 80054f6:	2308      	movs	r3, #8
 80054f8:	18fa      	adds	r2, r7, r3
 80054fa:	4b29      	ldr	r3, [pc, #164]	@ (80055a0 <SGP_GetMeasurementValues+0x204>)
 80054fc:	0018      	movs	r0, r3
 80054fe:	f7ff f87d 	bl	80045fc <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	4a27      	ldr	r2, [pc, #156]	@ (80055a4 <SGP_GetMeasurementValues+0x208>)
 8005506:	4917      	ldr	r1, [pc, #92]	@ (8005564 <SGP_GetMeasurementValues+0x1c8>)
 8005508:	2003      	movs	r0, #3
 800550a:	f000 fc89 	bl	8005e20 <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 800550e:	68ba      	ldr	r2, [r7, #8]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	601a      	str	r2, [r3, #0]
      SGP_AmountOfSamplesDone = 0;
 8005514:	4b17      	ldr	r3, [pc, #92]	@ (8005574 <SGP_GetMeasurementValues+0x1d8>)
 8005516:	2200      	movs	r2, #0
 8005518:	701a      	strb	r2, [r3, #0]
      Debug("Measurement completely done.");
 800551a:	4a23      	ldr	r2, [pc, #140]	@ (80055a8 <SGP_GetMeasurementValues+0x20c>)
 800551c:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <SGP_GetMeasurementValues+0x1c8>)
 800551e:	0019      	movs	r1, r3
 8005520:	2003      	movs	r0, #3
 8005522:	f000 fc7d 	bl	8005e20 <CreateLine>
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8005526:	2301      	movs	r3, #1
 8005528:	e014      	b.n	8005554 <SGP_GetMeasurementValues+0x1b8>
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 800552a:	f7ff ff1b 	bl	8005364 <SGP_MeasurementDone>
 800552e:	1e03      	subs	r3, r0, #0
 8005530:	d00f      	beq.n	8005552 <SGP_GetMeasurementValues+0x1b6>
 8005532:	4b0a      	ldr	r3, [pc, #40]	@ (800555c <SGP_GetMeasurementValues+0x1c0>)
 8005534:	781b      	ldrb	r3, [r3, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d00b      	beq.n	8005552 <SGP_GetMeasurementValues+0x1b6>
 800553a:	4b0d      	ldr	r3, [pc, #52]	@ (8005570 <SGP_GetMeasurementValues+0x1d4>)
 800553c:	781b      	ldrb	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d007      	beq.n	8005552 <SGP_GetMeasurementValues+0x1b6>
    // Starting next measurement
    Debug("Starting next measurement.");
 8005542:	4a1a      	ldr	r2, [pc, #104]	@ (80055ac <SGP_GetMeasurementValues+0x210>)
 8005544:	4b07      	ldr	r3, [pc, #28]	@ (8005564 <SGP_GetMeasurementValues+0x1c8>)
 8005546:	0019      	movs	r1, r3
 8005548:	2003      	movs	r0, #3
 800554a:	f000 fc69 	bl	8005e20 <CreateLine>
    SGP_StartMeasurement();
 800554e:	f7ff fecd 	bl	80052ec <SGP_StartMeasurement>
  }
  return false;
 8005552:	2300      	movs	r3, #0
}
 8005554:	0018      	movs	r0, r3
 8005556:	46bd      	mov	sp, r7
 8005558:	b005      	add	sp, #20
 800555a:	bd90      	pop	{r4, r7, pc}
 800555c:	200005b2 	.word	0x200005b2
 8005560:	0800f660 	.word	0x0800f660
 8005564:	0800f68c 	.word	0x0800f68c
 8005568:	20000014 	.word	0x20000014
 800556c:	20000028 	.word	0x20000028
 8005570:	200005b3 	.word	0x200005b3
 8005574:	200005b1 	.word	0x200005b1
 8005578:	0800f690 	.word	0x0800f690
 800557c:	200005a8 	.word	0x200005a8
 8005580:	0800f6bc 	.word	0x0800f6bc
 8005584:	0800f6e0 	.word	0x0800f6e0
 8005588:	0800f6e4 	.word	0x0800f6e4
 800558c:	0800f704 	.word	0x0800f704
 8005590:	0800f708 	.word	0x0800f708
 8005594:	20000024 	.word	0x20000024
 8005598:	2000001c 	.word	0x2000001c
 800559c:	0800f728 	.word	0x0800f728
 80055a0:	200005b4 	.word	0x200005b4
 80055a4:	0800f73c 	.word	0x0800f73c
 80055a8:	0800f750 	.word	0x0800f750
 80055ac:	0800f770 	.word	0x0800f770

080055b0 <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b084      	sub	sp, #16
 80055b4:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 80055b6:	4b1a      	ldr	r3, [pc, #104]	@ (8005620 <SGP_DeviceConnected+0x70>)
 80055b8:	2202      	movs	r2, #2
 80055ba:	0019      	movs	r1, r3
 80055bc:	2059      	movs	r0, #89	@ 0x59
 80055be:	f7ff fe5d 	bl	800527c <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 80055c2:	2001      	movs	r0, #1
 80055c4:	f001 f854 	bl	8006670 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 80055c8:	4b16      	ldr	r3, [pc, #88]	@ (8005624 <SGP_DeviceConnected+0x74>)
 80055ca:	2209      	movs	r2, #9
 80055cc:	0019      	movs	r1, r3
 80055ce:	2059      	movs	r0, #89	@ 0x59
 80055d0:	f7ff fe36 	bl	8005240 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80055d4:	1dfb      	adds	r3, r7, #7
 80055d6:	2200      	movs	r2, #0
 80055d8:	701a      	strb	r2, [r3, #0]
 80055da:	e011      	b.n	8005600 <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 80055dc:	1dfb      	adds	r3, r7, #7
 80055de:	7818      	ldrb	r0, [r3, #0]
 80055e0:	1dfb      	adds	r3, r7, #7
 80055e2:	781b      	ldrb	r3, [r3, #0]
 80055e4:	4a0f      	ldr	r2, [pc, #60]	@ (8005624 <SGP_DeviceConnected+0x74>)
 80055e6:	5cd3      	ldrb	r3, [r2, r3]
 80055e8:	4a0f      	ldr	r2, [pc, #60]	@ (8005628 <SGP_DeviceConnected+0x78>)
 80055ea:	4910      	ldr	r1, [pc, #64]	@ (800562c <SGP_DeviceConnected+0x7c>)
 80055ec:	9300      	str	r3, [sp, #0]
 80055ee:	0003      	movs	r3, r0
 80055f0:	2002      	movs	r0, #2
 80055f2:	f000 fc15 	bl	8005e20 <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 80055f6:	1dfb      	adds	r3, r7, #7
 80055f8:	781a      	ldrb	r2, [r3, #0]
 80055fa:	1dfb      	adds	r3, r7, #7
 80055fc:	3201      	adds	r2, #1
 80055fe:	701a      	strb	r2, [r3, #0]
 8005600:	1dfb      	adds	r3, r7, #7
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b08      	cmp	r3, #8
 8005606:	d9e9      	bls.n	80055dc <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8005608:	4b06      	ldr	r3, [pc, #24]	@ (8005624 <SGP_DeviceConnected+0x74>)
 800560a:	2203      	movs	r2, #3
 800560c:	2109      	movs	r1, #9
 800560e:	0018      	movs	r0, r3
 8005610:	f000 f80e 	bl	8005630 <CheckCRC>
 8005614:	0003      	movs	r3, r0
}
 8005616:	0018      	movs	r0, r3
 8005618:	46bd      	mov	sp, r7
 800561a:	b002      	add	sp, #8
 800561c:	bd80      	pop	{r7, pc}
 800561e:	46c0      	nop			@ (mov r8, r8)
 8005620:	20000010 	.word	0x20000010
 8005624:	200005a8 	.word	0x200005a8
 8005628:	0800f78c 	.word	0x0800f78c
 800562c:	0800f704 	.word	0x0800f704

08005630 <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 8005630:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005632:	b08f      	sub	sp, #60	@ 0x3c
 8005634:	af00      	add	r7, sp, #0
 8005636:	6278      	str	r0, [r7, #36]	@ 0x24
 8005638:	0008      	movs	r0, r1
 800563a:	0011      	movs	r1, r2
 800563c:	2323      	movs	r3, #35	@ 0x23
 800563e:	18fb      	adds	r3, r7, r3
 8005640:	1c02      	adds	r2, r0, #0
 8005642:	701a      	strb	r2, [r3, #0]
 8005644:	2322      	movs	r3, #34	@ 0x22
 8005646:	18fb      	adds	r3, r7, r3
 8005648:	1c0a      	adds	r2, r1, #0
 800564a:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 800564c:	2317      	movs	r3, #23
 800564e:	2220      	movs	r2, #32
 8005650:	189b      	adds	r3, r3, r2
 8005652:	19db      	adds	r3, r3, r7
 8005654:	2200      	movs	r2, #0
 8005656:	701a      	strb	r2, [r3, #0]
 8005658:	e09f      	b.n	800579a <CheckCRC+0x16a>
 800565a:	466b      	mov	r3, sp
 800565c:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 800565e:	2322      	movs	r3, #34	@ 0x22
 8005660:	18fb      	adds	r3, r7, r3
 8005662:	781b      	ldrb	r3, [r3, #0]
 8005664:	001a      	movs	r2, r3
 8005666:	3a01      	subs	r2, #1
 8005668:	633a      	str	r2, [r7, #48]	@ 0x30
 800566a:	60bb      	str	r3, [r7, #8]
 800566c:	2200      	movs	r2, #0
 800566e:	60fa      	str	r2, [r7, #12]
 8005670:	68b8      	ldr	r0, [r7, #8]
 8005672:	68f9      	ldr	r1, [r7, #12]
 8005674:	0002      	movs	r2, r0
 8005676:	0f52      	lsrs	r2, r2, #29
 8005678:	000c      	movs	r4, r1
 800567a:	00e4      	lsls	r4, r4, #3
 800567c:	61fc      	str	r4, [r7, #28]
 800567e:	69fc      	ldr	r4, [r7, #28]
 8005680:	4314      	orrs	r4, r2
 8005682:	61fc      	str	r4, [r7, #28]
 8005684:	0002      	movs	r2, r0
 8005686:	00d2      	lsls	r2, r2, #3
 8005688:	61ba      	str	r2, [r7, #24]
 800568a:	603b      	str	r3, [r7, #0]
 800568c:	2200      	movs	r2, #0
 800568e:	607a      	str	r2, [r7, #4]
 8005690:	6838      	ldr	r0, [r7, #0]
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	0002      	movs	r2, r0
 8005696:	0f52      	lsrs	r2, r2, #29
 8005698:	000c      	movs	r4, r1
 800569a:	00e4      	lsls	r4, r4, #3
 800569c:	617c      	str	r4, [r7, #20]
 800569e:	697c      	ldr	r4, [r7, #20]
 80056a0:	4314      	orrs	r4, r2
 80056a2:	617c      	str	r4, [r7, #20]
 80056a4:	0002      	movs	r2, r0
 80056a6:	00d2      	lsls	r2, r2, #3
 80056a8:	613a      	str	r2, [r7, #16]
 80056aa:	3307      	adds	r3, #7
 80056ac:	08db      	lsrs	r3, r3, #3
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	466a      	mov	r2, sp
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	469d      	mov	sp, r3
 80056b6:	466b      	mov	r3, sp
 80056b8:	3300      	adds	r3, #0
 80056ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 80056bc:	2316      	movs	r3, #22
 80056be:	2220      	movs	r2, #32
 80056c0:	189b      	adds	r3, r3, r2
 80056c2:	19db      	adds	r3, r3, r7
 80056c4:	2200      	movs	r2, #0
 80056c6:	701a      	strb	r2, [r3, #0]
 80056c8:	e01e      	b.n	8005708 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 80056ca:	2317      	movs	r3, #23
 80056cc:	2220      	movs	r2, #32
 80056ce:	189b      	adds	r3, r3, r2
 80056d0:	19db      	adds	r3, r3, r7
 80056d2:	781a      	ldrb	r2, [r3, #0]
 80056d4:	2116      	movs	r1, #22
 80056d6:	2320      	movs	r3, #32
 80056d8:	18cb      	adds	r3, r1, r3
 80056da:	19db      	adds	r3, r3, r7
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	18d3      	adds	r3, r2, r3
 80056e0:	001a      	movs	r2, r3
 80056e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056e4:	189a      	adds	r2, r3, r2
 80056e6:	0008      	movs	r0, r1
 80056e8:	2320      	movs	r3, #32
 80056ea:	18cb      	adds	r3, r1, r3
 80056ec:	19db      	adds	r3, r3, r7
 80056ee:	781b      	ldrb	r3, [r3, #0]
 80056f0:	7811      	ldrb	r1, [r2, #0]
 80056f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80056f4:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 80056f6:	2320      	movs	r3, #32
 80056f8:	18c3      	adds	r3, r0, r3
 80056fa:	19db      	adds	r3, r3, r7
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	2320      	movs	r3, #32
 8005700:	18c3      	adds	r3, r0, r3
 8005702:	19db      	adds	r3, r3, r7
 8005704:	3201      	adds	r2, #1
 8005706:	701a      	strb	r2, [r3, #0]
 8005708:	2316      	movs	r3, #22
 800570a:	2220      	movs	r2, #32
 800570c:	189b      	adds	r3, r3, r2
 800570e:	19da      	adds	r2, r3, r7
 8005710:	2322      	movs	r3, #34	@ 0x22
 8005712:	18fb      	adds	r3, r7, r3
 8005714:	7812      	ldrb	r2, [r2, #0]
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d3d6      	bcc.n	80056ca <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 800571c:	2417      	movs	r4, #23
 800571e:	2320      	movs	r3, #32
 8005720:	18e3      	adds	r3, r4, r3
 8005722:	19db      	adds	r3, r3, r7
 8005724:	781a      	ldrb	r2, [r3, #0]
 8005726:	2322      	movs	r3, #34	@ 0x22
 8005728:	18fb      	adds	r3, r7, r3
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	18d3      	adds	r3, r2, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005732:	18d2      	adds	r2, r2, r3
 8005734:	250b      	movs	r5, #11
 8005736:	2320      	movs	r3, #32
 8005738:	18eb      	adds	r3, r5, r3
 800573a:	19db      	adds	r3, r3, r7
 800573c:	7812      	ldrb	r2, [r2, #0]
 800573e:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 8005740:	2322      	movs	r3, #34	@ 0x22
 8005742:	18fb      	adds	r3, r7, r3
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	3b01      	subs	r3, #1
 8005748:	b2da      	uxtb	r2, r3
 800574a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800574c:	0011      	movs	r1, r2
 800574e:	0018      	movs	r0, r3
 8005750:	f000 f838 	bl	80057c4 <CalculateCRC>
 8005754:	0003      	movs	r3, r0
 8005756:	001a      	movs	r2, r3
 8005758:	2320      	movs	r3, #32
 800575a:	18eb      	adds	r3, r5, r3
 800575c:	19db      	adds	r3, r3, r7
 800575e:	781b      	ldrb	r3, [r3, #0]
 8005760:	4293      	cmp	r3, r2
 8005762:	d00c      	beq.n	800577e <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 8005764:	2320      	movs	r3, #32
 8005766:	18e3      	adds	r3, r4, r3
 8005768:	19db      	adds	r3, r3, r7
 800576a:	781b      	ldrb	r3, [r3, #0]
 800576c:	3301      	adds	r3, #1
 800576e:	4a13      	ldr	r2, [pc, #76]	@ (80057bc <CheckCRC+0x18c>)
 8005770:	4913      	ldr	r1, [pc, #76]	@ (80057c0 <CheckCRC+0x190>)
 8005772:	2001      	movs	r0, #1
 8005774:	f000 fb54 	bl	8005e20 <CreateLine>
      return false;
 8005778:	2300      	movs	r3, #0
 800577a:	46b5      	mov	sp, r6
 800577c:	e019      	b.n	80057b2 <CheckCRC+0x182>
 800577e:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 8005780:	2217      	movs	r2, #23
 8005782:	2320      	movs	r3, #32
 8005784:	18d3      	adds	r3, r2, r3
 8005786:	19db      	adds	r3, r3, r7
 8005788:	2120      	movs	r1, #32
 800578a:	1852      	adds	r2, r2, r1
 800578c:	19d1      	adds	r1, r2, r7
 800578e:	2222      	movs	r2, #34	@ 0x22
 8005790:	18ba      	adds	r2, r7, r2
 8005792:	7809      	ldrb	r1, [r1, #0]
 8005794:	7812      	ldrb	r2, [r2, #0]
 8005796:	188a      	adds	r2, r1, r2
 8005798:	701a      	strb	r2, [r3, #0]
 800579a:	2317      	movs	r3, #23
 800579c:	2220      	movs	r2, #32
 800579e:	189b      	adds	r3, r3, r2
 80057a0:	19da      	adds	r2, r3, r7
 80057a2:	2323      	movs	r3, #35	@ 0x23
 80057a4:	18fb      	adds	r3, r7, r3
 80057a6:	7812      	ldrb	r2, [r2, #0]
 80057a8:	781b      	ldrb	r3, [r3, #0]
 80057aa:	429a      	cmp	r2, r3
 80057ac:	d200      	bcs.n	80057b0 <CheckCRC+0x180>
 80057ae:	e754      	b.n	800565a <CheckCRC+0x2a>
    }
  }
  return true;
 80057b0:	2301      	movs	r3, #1
}
 80057b2:	0018      	movs	r0, r3
 80057b4:	46bd      	mov	sp, r7
 80057b6:	b00f      	add	sp, #60	@ 0x3c
 80057b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80057ba:	46c0      	nop			@ (mov r8, r8)
 80057bc:	0800f7ac 	.word	0x0800f7ac
 80057c0:	0800f6e0 	.word	0x0800f6e0

080057c4 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	6078      	str	r0, [r7, #4]
 80057cc:	000a      	movs	r2, r1
 80057ce:	1cfb      	adds	r3, r7, #3
 80057d0:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 80057d2:	230f      	movs	r3, #15
 80057d4:	18fb      	adds	r3, r7, r3
 80057d6:	22ff      	movs	r2, #255	@ 0xff
 80057d8:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 80057da:	230e      	movs	r3, #14
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	2200      	movs	r2, #0
 80057e0:	701a      	strb	r2, [r3, #0]
 80057e2:	e037      	b.n	8005854 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 80057e4:	230e      	movs	r3, #14
 80057e6:	18fb      	adds	r3, r7, r3
 80057e8:	781b      	ldrb	r3, [r3, #0]
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	18d3      	adds	r3, r2, r3
 80057ee:	7819      	ldrb	r1, [r3, #0]
 80057f0:	220f      	movs	r2, #15
 80057f2:	18bb      	adds	r3, r7, r2
 80057f4:	18ba      	adds	r2, r7, r2
 80057f6:	7812      	ldrb	r2, [r2, #0]
 80057f8:	404a      	eors	r2, r1
 80057fa:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 80057fc:	230d      	movs	r3, #13
 80057fe:	18fb      	adds	r3, r7, r3
 8005800:	2200      	movs	r2, #0
 8005802:	701a      	strb	r2, [r3, #0]
 8005804:	e01b      	b.n	800583e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8005806:	210f      	movs	r1, #15
 8005808:	187b      	adds	r3, r7, r1
 800580a:	781b      	ldrb	r3, [r3, #0]
 800580c:	b25b      	sxtb	r3, r3
 800580e:	2b00      	cmp	r3, #0
 8005810:	da09      	bge.n	8005826 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 8005812:	187b      	adds	r3, r7, r1
 8005814:	781b      	ldrb	r3, [r3, #0]
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	b25b      	sxtb	r3, r3
 800581a:	2231      	movs	r2, #49	@ 0x31
 800581c:	4053      	eors	r3, r2
 800581e:	b25a      	sxtb	r2, r3
 8005820:	187b      	adds	r3, r7, r1
 8005822:	701a      	strb	r2, [r3, #0]
 8005824:	e005      	b.n	8005832 <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 8005826:	230f      	movs	r3, #15
 8005828:	18fa      	adds	r2, r7, r3
 800582a:	18fb      	adds	r3, r7, r3
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	18db      	adds	r3, r3, r3
 8005830:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8005832:	210d      	movs	r1, #13
 8005834:	187b      	adds	r3, r7, r1
 8005836:	781a      	ldrb	r2, [r3, #0]
 8005838:	187b      	adds	r3, r7, r1
 800583a:	3201      	adds	r2, #1
 800583c:	701a      	strb	r2, [r3, #0]
 800583e:	230d      	movs	r3, #13
 8005840:	18fb      	adds	r3, r7, r3
 8005842:	781b      	ldrb	r3, [r3, #0]
 8005844:	2b07      	cmp	r3, #7
 8005846:	d9de      	bls.n	8005806 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 8005848:	210e      	movs	r1, #14
 800584a:	187b      	adds	r3, r7, r1
 800584c:	781a      	ldrb	r2, [r3, #0]
 800584e:	187b      	adds	r3, r7, r1
 8005850:	3201      	adds	r2, #1
 8005852:	701a      	strb	r2, [r3, #0]
 8005854:	230e      	movs	r3, #14
 8005856:	18fa      	adds	r2, r7, r3
 8005858:	1cfb      	adds	r3, r7, #3
 800585a:	7812      	ldrb	r2, [r2, #0]
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	429a      	cmp	r2, r3
 8005860:	d3c0      	bcc.n	80057e4 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 8005862:	230f      	movs	r3, #15
 8005864:	18fb      	adds	r3, r7, r3
 8005866:	781b      	ldrb	r3, [r3, #0]
}
 8005868:	0018      	movs	r0, r3
 800586a:	46bd      	mov	sp, r7
 800586c:	b004      	add	sp, #16
 800586e:	bd80      	pop	{r7, pc}

08005870 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005874:	4b07      	ldr	r3, [pc, #28]	@ (8005894 <HAL_MspInit+0x24>)
 8005876:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005878:	4b06      	ldr	r3, [pc, #24]	@ (8005894 <HAL_MspInit+0x24>)
 800587a:	2101      	movs	r1, #1
 800587c:	430a      	orrs	r2, r1
 800587e:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8005880:	4b04      	ldr	r3, [pc, #16]	@ (8005894 <HAL_MspInit+0x24>)
 8005882:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005884:	4b03      	ldr	r3, [pc, #12]	@ (8005894 <HAL_MspInit+0x24>)
 8005886:	2180      	movs	r1, #128	@ 0x80
 8005888:	0549      	lsls	r1, r1, #21
 800588a:	430a      	orrs	r2, r1
 800588c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}
 8005894:	40021000 	.word	0x40021000

08005898 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800589c:	46c0      	nop			@ (mov r8, r8)
 800589e:	e7fd      	b.n	800589c <NMI_Handler+0x4>

080058a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80058a4:	46c0      	nop			@ (mov r8, r8)
 80058a6:	e7fd      	b.n	80058a4 <HardFault_Handler+0x4>

080058a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80058ac:	46c0      	nop			@ (mov r8, r8)
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80058b6:	46c0      	nop			@ (mov r8, r8)
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80058c0:	f000 feba 	bl	8006638 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80058c4:	46c0      	nop			@ (mov r8, r8)
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bd80      	pop	{r7, pc}
	...

080058cc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80058cc:	b580      	push	{r7, lr}
 80058ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 80058d0:	4b05      	ldr	r3, [pc, #20]	@ (80058e8 <DMA1_Channel2_3_IRQHandler+0x1c>)
 80058d2:	0018      	movs	r0, r3
 80058d4:	f001 f933 	bl	8006b3e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80058d8:	4b04      	ldr	r3, [pc, #16]	@ (80058ec <DMA1_Channel2_3_IRQHandler+0x20>)
 80058da:	0018      	movs	r0, r3
 80058dc:	f001 f92f 	bl	8006b3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80058e0:	46c0      	nop			@ (mov r8, r8)
 80058e2:	46bd      	mov	sp, r7
 80058e4:	bd80      	pop	{r7, pc}
 80058e6:	46c0      	nop			@ (mov r8, r8)
 80058e8:	20000348 	.word	0x20000348
 80058ec:	20000300 	.word	0x20000300

080058f0 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 80058f4:	4b07      	ldr	r3, [pc, #28]	@ (8005914 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 80058f6:	0018      	movs	r0, r3
 80058f8:	f001 f921 	bl	8006b3e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 80058fc:	4b06      	ldr	r3, [pc, #24]	@ (8005918 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f001 f91d 	bl	8006b3e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 8005904:	4b05      	ldr	r3, [pc, #20]	@ (800591c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 8005906:	0018      	movs	r0, r3
 8005908:	f001 f919 	bl	8006b3e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800590c:	46c0      	nop			@ (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	46c0      	nop			@ (mov r8, r8)
 8005914:	200003cc 	.word	0x200003cc
 8005918:	200007cc 	.word	0x200007cc
 800591c:	20000814 	.word	0x20000814

08005920 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8005924:	4b03      	ldr	r3, [pc, #12]	@ (8005934 <USART4_5_IRQHandler+0x14>)
 8005926:	0018      	movs	r0, r3
 8005928:	f005 f9e2 	bl	800acf0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800592c:	46c0      	nop			@ (mov r8, r8)
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}
 8005932:	46c0      	nop			@ (mov r8, r8)
 8005934:	20000714 	.word	0x20000714

08005938 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR)) {
 800593c:	4b09      	ldr	r3, [pc, #36]	@ (8005964 <I2C1_IRQHandler+0x2c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	699a      	ldr	r2, [r3, #24]
 8005942:	23e0      	movs	r3, #224	@ 0xe0
 8005944:	00db      	lsls	r3, r3, #3
 8005946:	4013      	ands	r3, r2
 8005948:	d004      	beq.n	8005954 <I2C1_IRQHandler+0x1c>
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800594a:	4b06      	ldr	r3, [pc, #24]	@ (8005964 <I2C1_IRQHandler+0x2c>)
 800594c:	0018      	movs	r0, r3
 800594e:	f001 fe41 	bl	80075d4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 8005952:	e003      	b.n	800595c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 8005954:	4b03      	ldr	r3, [pc, #12]	@ (8005964 <I2C1_IRQHandler+0x2c>)
 8005956:	0018      	movs	r0, r3
 8005958:	f001 fe22 	bl	80075a0 <HAL_I2C_EV_IRQHandler>
}
 800595c:	46c0      	nop			@ (mov r8, r8)
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}
 8005962:	46c0      	nop			@ (mov r8, r8)
 8005964:	200002ac 	.word	0x200002ac

08005968 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005968:	b580      	push	{r7, lr}
 800596a:	af00      	add	r7, sp, #0
  return 1;
 800596c:	2301      	movs	r3, #1
}
 800596e:	0018      	movs	r0, r3
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <_kill>:

int _kill(int pid, int sig)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b082      	sub	sp, #8
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800597e:	f007 faa9 	bl	800ced4 <__errno>
 8005982:	0003      	movs	r3, r0
 8005984:	2216      	movs	r2, #22
 8005986:	601a      	str	r2, [r3, #0]
  return -1;
 8005988:	2301      	movs	r3, #1
 800598a:	425b      	negs	r3, r3
}
 800598c:	0018      	movs	r0, r3
 800598e:	46bd      	mov	sp, r7
 8005990:	b002      	add	sp, #8
 8005992:	bd80      	pop	{r7, pc}

08005994 <_exit>:

void _exit (int status)
{
 8005994:	b580      	push	{r7, lr}
 8005996:	b082      	sub	sp, #8
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800599c:	2301      	movs	r3, #1
 800599e:	425a      	negs	r2, r3
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	0011      	movs	r1, r2
 80059a4:	0018      	movs	r0, r3
 80059a6:	f7ff ffe5 	bl	8005974 <_kill>
  while (1) {}    /* Make sure we hang here */
 80059aa:	46c0      	nop			@ (mov r8, r8)
 80059ac:	e7fd      	b.n	80059aa <_exit+0x16>

080059ae <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80059ae:	b580      	push	{r7, lr}
 80059b0:	b086      	sub	sp, #24
 80059b2:	af00      	add	r7, sp, #0
 80059b4:	60f8      	str	r0, [r7, #12]
 80059b6:	60b9      	str	r1, [r7, #8]
 80059b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059ba:	2300      	movs	r3, #0
 80059bc:	617b      	str	r3, [r7, #20]
 80059be:	e00a      	b.n	80059d6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80059c0:	e000      	b.n	80059c4 <_read+0x16>
 80059c2:	bf00      	nop
 80059c4:	0001      	movs	r1, r0
 80059c6:	68bb      	ldr	r3, [r7, #8]
 80059c8:	1c5a      	adds	r2, r3, #1
 80059ca:	60ba      	str	r2, [r7, #8]
 80059cc:	b2ca      	uxtb	r2, r1
 80059ce:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	3301      	adds	r3, #1
 80059d4:	617b      	str	r3, [r7, #20]
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	429a      	cmp	r2, r3
 80059dc:	dbf0      	blt.n	80059c0 <_read+0x12>
  }

  return len;
 80059de:	687b      	ldr	r3, [r7, #4]
}
 80059e0:	0018      	movs	r0, r3
 80059e2:	46bd      	mov	sp, r7
 80059e4:	b006      	add	sp, #24
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <_close>:
  }
  return len;
}

int _close(int file)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80059f0:	2301      	movs	r3, #1
 80059f2:	425b      	negs	r3, r3
}
 80059f4:	0018      	movs	r0, r3
 80059f6:	46bd      	mov	sp, r7
 80059f8:	b002      	add	sp, #8
 80059fa:	bd80      	pop	{r7, pc}

080059fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	2280      	movs	r2, #128	@ 0x80
 8005a0a:	0192      	lsls	r2, r2, #6
 8005a0c:	605a      	str	r2, [r3, #4]
  return 0;
 8005a0e:	2300      	movs	r3, #0
}
 8005a10:	0018      	movs	r0, r3
 8005a12:	46bd      	mov	sp, r7
 8005a14:	b002      	add	sp, #8
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <_isatty>:

int _isatty(int file)
{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b082      	sub	sp, #8
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005a20:	2301      	movs	r3, #1
}
 8005a22:	0018      	movs	r0, r3
 8005a24:	46bd      	mov	sp, r7
 8005a26:	b002      	add	sp, #8
 8005a28:	bd80      	pop	{r7, pc}

08005a2a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005a2a:	b580      	push	{r7, lr}
 8005a2c:	b084      	sub	sp, #16
 8005a2e:	af00      	add	r7, sp, #0
 8005a30:	60f8      	str	r0, [r7, #12]
 8005a32:	60b9      	str	r1, [r7, #8]
 8005a34:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	0018      	movs	r0, r3
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	b004      	add	sp, #16
 8005a3e:	bd80      	pop	{r7, pc}

08005a40 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b086      	sub	sp, #24
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a48:	4a14      	ldr	r2, [pc, #80]	@ (8005a9c <_sbrk+0x5c>)
 8005a4a:	4b15      	ldr	r3, [pc, #84]	@ (8005aa0 <_sbrk+0x60>)
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a54:	4b13      	ldr	r3, [pc, #76]	@ (8005aa4 <_sbrk+0x64>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d102      	bne.n	8005a62 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a5c:	4b11      	ldr	r3, [pc, #68]	@ (8005aa4 <_sbrk+0x64>)
 8005a5e:	4a12      	ldr	r2, [pc, #72]	@ (8005aa8 <_sbrk+0x68>)
 8005a60:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a62:	4b10      	ldr	r3, [pc, #64]	@ (8005aa4 <_sbrk+0x64>)
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	18d3      	adds	r3, r2, r3
 8005a6a:	693a      	ldr	r2, [r7, #16]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d207      	bcs.n	8005a80 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a70:	f007 fa30 	bl	800ced4 <__errno>
 8005a74:	0003      	movs	r3, r0
 8005a76:	220c      	movs	r2, #12
 8005a78:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	425b      	negs	r3, r3
 8005a7e:	e009      	b.n	8005a94 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a80:	4b08      	ldr	r3, [pc, #32]	@ (8005aa4 <_sbrk+0x64>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a86:	4b07      	ldr	r3, [pc, #28]	@ (8005aa4 <_sbrk+0x64>)
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	18d2      	adds	r2, r2, r3
 8005a8e:	4b05      	ldr	r3, [pc, #20]	@ (8005aa4 <_sbrk+0x64>)
 8005a90:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005a92:	68fb      	ldr	r3, [r7, #12]
}
 8005a94:	0018      	movs	r0, r3
 8005a96:	46bd      	mov	sp, r7
 8005a98:	b006      	add	sp, #24
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	20005000 	.word	0x20005000
 8005aa0:	00000400 	.word	0x00000400
 8005aa4:	20000658 	.word	0x20000658
 8005aa8:	200011c8 	.word	0x200011c8

08005aac <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ab0:	46c0      	nop			@ (mov r8, r8)
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	bd80      	pop	{r7, pc}
	...

08005ab8 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8005abc:	4b14      	ldr	r3, [pc, #80]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005abe:	4a15      	ldr	r2, [pc, #84]	@ (8005b14 <MX_USART1_UART_Init+0x5c>)
 8005ac0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8005ac2:	4b13      	ldr	r3, [pc, #76]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005ac4:	22e1      	movs	r2, #225	@ 0xe1
 8005ac6:	0252      	lsls	r2, r2, #9
 8005ac8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8005aca:	4b11      	ldr	r3, [pc, #68]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005acc:	2200      	movs	r2, #0
 8005ace:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8005ad0:	4b0f      	ldr	r3, [pc, #60]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005adc:	4b0c      	ldr	r3, [pc, #48]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005ade:	220c      	movs	r2, #12
 8005ae0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ae2:	4b0b      	ldr	r3, [pc, #44]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005ae8:	4b09      	ldr	r3, [pc, #36]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005aea:	2200      	movs	r2, #0
 8005aec:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005aee:	4b08      	ldr	r3, [pc, #32]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005af0:	2200      	movs	r2, #0
 8005af2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005af4:	4b06      	ldr	r3, [pc, #24]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005af6:	2200      	movs	r2, #0
 8005af8:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8005afa:	4b05      	ldr	r3, [pc, #20]	@ (8005b10 <MX_USART1_UART_Init+0x58>)
 8005afc:	0018      	movs	r0, r3
 8005afe:	f004 fe73 	bl	800a7e8 <HAL_UART_Init>
 8005b02:	1e03      	subs	r3, r0, #0
 8005b04:	d001      	beq.n	8005b0a <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8005b06:	f7fe fa55 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005b0a:	46c0      	nop			@ (mov r8, r8)
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	2000065c 	.word	0x2000065c
 8005b14:	40013800 	.word	0x40013800

08005b18 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 8005b18:	b580      	push	{r7, lr}
 8005b1a:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 8005b1c:	4b14      	ldr	r3, [pc, #80]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b1e:	4a15      	ldr	r2, [pc, #84]	@ (8005b74 <MX_USART4_UART_Init+0x5c>)
 8005b20:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8005b22:	4b13      	ldr	r3, [pc, #76]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b24:	22e1      	movs	r2, #225	@ 0xe1
 8005b26:	0252      	lsls	r2, r2, #9
 8005b28:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8005b2a:	4b11      	ldr	r3, [pc, #68]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b2c:	2200      	movs	r2, #0
 8005b2e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8005b30:	4b0f      	ldr	r3, [pc, #60]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b32:	2200      	movs	r2, #0
 8005b34:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8005b36:	4b0e      	ldr	r3, [pc, #56]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b38:	2200      	movs	r2, #0
 8005b3a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8005b3c:	4b0c      	ldr	r3, [pc, #48]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b3e:	220c      	movs	r2, #12
 8005b40:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005b42:	4b0b      	ldr	r3, [pc, #44]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b44:	2200      	movs	r2, #0
 8005b46:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8005b48:	4b09      	ldr	r3, [pc, #36]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b4a:	2200      	movs	r2, #0
 8005b4c:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8005b4e:	4b08      	ldr	r3, [pc, #32]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b50:	2200      	movs	r2, #0
 8005b52:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005b54:	4b06      	ldr	r3, [pc, #24]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b56:	2200      	movs	r2, #0
 8005b58:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8005b5a:	4b05      	ldr	r3, [pc, #20]	@ (8005b70 <MX_USART4_UART_Init+0x58>)
 8005b5c:	0018      	movs	r0, r3
 8005b5e:	f004 fe43 	bl	800a7e8 <HAL_UART_Init>
 8005b62:	1e03      	subs	r3, r0, #0
 8005b64:	d001      	beq.n	8005b6a <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 8005b66:	f7fe fa25 	bl	8003fb4 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 8005b6a:	46c0      	nop			@ (mov r8, r8)
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}
 8005b70:	20000714 	.word	0x20000714
 8005b74:	40004c00 	.word	0x40004c00

08005b78 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8005b78:	b590      	push	{r4, r7, lr}
 8005b7a:	b08b      	sub	sp, #44	@ 0x2c
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005b80:	2414      	movs	r4, #20
 8005b82:	193b      	adds	r3, r7, r4
 8005b84:	0018      	movs	r0, r3
 8005b86:	2314      	movs	r3, #20
 8005b88:	001a      	movs	r2, r3
 8005b8a:	2100      	movs	r1, #0
 8005b8c:	f007 f932 	bl	800cdf4 <memset>
  if(uartHandle->Instance==USART1)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a6f      	ldr	r2, [pc, #444]	@ (8005d54 <HAL_UART_MspInit+0x1dc>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d12b      	bne.n	8005bf2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005b9a:	4b6f      	ldr	r3, [pc, #444]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005b9c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005b9e:	4b6e      	ldr	r3, [pc, #440]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005ba0:	2180      	movs	r1, #128	@ 0x80
 8005ba2:	01c9      	lsls	r1, r1, #7
 8005ba4:	430a      	orrs	r2, r1
 8005ba6:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005ba8:	4b6b      	ldr	r3, [pc, #428]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005bac:	4b6a      	ldr	r3, [pc, #424]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005bae:	2101      	movs	r1, #1
 8005bb0:	430a      	orrs	r2, r1
 8005bb2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005bb4:	4b68      	ldr	r3, [pc, #416]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005bb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005bb8:	2201      	movs	r2, #1
 8005bba:	4013      	ands	r3, r2
 8005bbc:	613b      	str	r3, [r7, #16]
 8005bbe:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8005bc0:	193b      	adds	r3, r7, r4
 8005bc2:	22c0      	movs	r2, #192	@ 0xc0
 8005bc4:	00d2      	lsls	r2, r2, #3
 8005bc6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005bc8:	0021      	movs	r1, r4
 8005bca:	187b      	adds	r3, r7, r1
 8005bcc:	2202      	movs	r2, #2
 8005bce:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd0:	187b      	adds	r3, r7, r1
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bd6:	187b      	adds	r3, r7, r1
 8005bd8:	2203      	movs	r2, #3
 8005bda:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8005bdc:	187b      	adds	r3, r7, r1
 8005bde:	2204      	movs	r2, #4
 8005be0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005be2:	187a      	adds	r2, r7, r1
 8005be4:	23a0      	movs	r3, #160	@ 0xa0
 8005be6:	05db      	lsls	r3, r3, #23
 8005be8:	0011      	movs	r1, r2
 8005bea:	0018      	movs	r0, r3
 8005bec:	f001 f89a 	bl	8006d24 <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 8005bf0:	e0ac      	b.n	8005d4c <HAL_UART_MspInit+0x1d4>
  else if(uartHandle->Instance==USART4)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a59      	ldr	r2, [pc, #356]	@ (8005d5c <HAL_UART_MspInit+0x1e4>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d000      	beq.n	8005bfe <HAL_UART_MspInit+0x86>
 8005bfc:	e0a6      	b.n	8005d4c <HAL_UART_MspInit+0x1d4>
    __HAL_RCC_USART4_CLK_ENABLE();
 8005bfe:	4b56      	ldr	r3, [pc, #344]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005c00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c02:	4b55      	ldr	r3, [pc, #340]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005c04:	2180      	movs	r1, #128	@ 0x80
 8005c06:	0309      	lsls	r1, r1, #12
 8005c08:	430a      	orrs	r2, r1
 8005c0a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c0c:	4b52      	ldr	r3, [pc, #328]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005c0e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c10:	4b51      	ldr	r3, [pc, #324]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005c12:	2101      	movs	r1, #1
 8005c14:	430a      	orrs	r2, r1
 8005c16:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c18:	4b4f      	ldr	r3, [pc, #316]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c1c:	2201      	movs	r2, #1
 8005c1e:	4013      	ands	r3, r2
 8005c20:	60fb      	str	r3, [r7, #12]
 8005c22:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005c24:	4b4c      	ldr	r3, [pc, #304]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005c26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c28:	4b4b      	ldr	r3, [pc, #300]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005c2a:	2104      	movs	r1, #4
 8005c2c:	430a      	orrs	r2, r1
 8005c2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8005c30:	4b49      	ldr	r3, [pc, #292]	@ (8005d58 <HAL_UART_MspInit+0x1e0>)
 8005c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c34:	2204      	movs	r2, #4
 8005c36:	4013      	ands	r3, r2
 8005c38:	60bb      	str	r3, [r7, #8]
 8005c3a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8005c3c:	2414      	movs	r4, #20
 8005c3e:	193b      	adds	r3, r7, r4
 8005c40:	2202      	movs	r2, #2
 8005c42:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c44:	193b      	adds	r3, r7, r4
 8005c46:	2202      	movs	r2, #2
 8005c48:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4a:	193b      	adds	r3, r7, r4
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c50:	193b      	adds	r3, r7, r4
 8005c52:	2203      	movs	r2, #3
 8005c54:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8005c56:	193b      	adds	r3, r7, r4
 8005c58:	2206      	movs	r2, #6
 8005c5a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005c5c:	193a      	adds	r2, r7, r4
 8005c5e:	23a0      	movs	r3, #160	@ 0xa0
 8005c60:	05db      	lsls	r3, r3, #23
 8005c62:	0011      	movs	r1, r2
 8005c64:	0018      	movs	r0, r3
 8005c66:	f001 f85d 	bl	8006d24 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8005c6a:	0021      	movs	r1, r4
 8005c6c:	187b      	adds	r3, r7, r1
 8005c6e:	2280      	movs	r2, #128	@ 0x80
 8005c70:	00d2      	lsls	r2, r2, #3
 8005c72:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005c74:	187b      	adds	r3, r7, r1
 8005c76:	2202      	movs	r2, #2
 8005c78:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c7a:	187b      	adds	r3, r7, r1
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c80:	187b      	adds	r3, r7, r1
 8005c82:	2203      	movs	r2, #3
 8005c84:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 8005c86:	187b      	adds	r3, r7, r1
 8005c88:	2206      	movs	r2, #6
 8005c8a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005c8c:	187b      	adds	r3, r7, r1
 8005c8e:	4a34      	ldr	r2, [pc, #208]	@ (8005d60 <HAL_UART_MspInit+0x1e8>)
 8005c90:	0019      	movs	r1, r3
 8005c92:	0010      	movs	r0, r2
 8005c94:	f001 f846 	bl	8006d24 <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 8005c98:	4b32      	ldr	r3, [pc, #200]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005c9a:	4a33      	ldr	r2, [pc, #204]	@ (8005d68 <HAL_UART_MspInit+0x1f0>)
 8005c9c:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 8005c9e:	4b31      	ldr	r3, [pc, #196]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005ca0:	220c      	movs	r2, #12
 8005ca2:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005caa:	4b2e      	ldr	r3, [pc, #184]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005cac:	2200      	movs	r2, #0
 8005cae:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005cb0:	4b2c      	ldr	r3, [pc, #176]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005cb2:	2280      	movs	r2, #128	@ 0x80
 8005cb4:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005cb6:	4b2b      	ldr	r3, [pc, #172]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005cb8:	2200      	movs	r2, #0
 8005cba:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005cbc:	4b29      	ldr	r3, [pc, #164]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_NORMAL;
 8005cc2:	4b28      	ldr	r3, [pc, #160]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8005cc8:	4b26      	ldr	r3, [pc, #152]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 8005cce:	4b25      	ldr	r3, [pc, #148]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005cd0:	0018      	movs	r0, r3
 8005cd2:	f000 fdcf 	bl	8006874 <HAL_DMA_Init>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d001      	beq.n	8005cde <HAL_UART_MspInit+0x166>
      Error_Handler();
 8005cda:	f7fe f96b 	bl	8003fb4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a20      	ldr	r2, [pc, #128]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005ce2:	675a      	str	r2, [r3, #116]	@ 0x74
 8005ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8005d64 <HAL_UART_MspInit+0x1ec>)
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 8005cea:	4b20      	ldr	r3, [pc, #128]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005cec:	4a20      	ldr	r2, [pc, #128]	@ (8005d70 <HAL_UART_MspInit+0x1f8>)
 8005cee:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 8005cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005cf2:	220c      	movs	r2, #12
 8005cf4:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005cf6:	4b1d      	ldr	r3, [pc, #116]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005cf8:	2210      	movs	r2, #16
 8005cfa:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005cfe:	2200      	movs	r2, #0
 8005d00:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8005d02:	4b1a      	ldr	r3, [pc, #104]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005d04:	2280      	movs	r2, #128	@ 0x80
 8005d06:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005d08:	4b18      	ldr	r3, [pc, #96]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005d0a:	2200      	movs	r2, #0
 8005d0c:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005d0e:	4b17      	ldr	r3, [pc, #92]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005d10:	2200      	movs	r2, #0
 8005d12:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 8005d14:	4b15      	ldr	r3, [pc, #84]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005d16:	2200      	movs	r2, #0
 8005d18:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8005d1a:	4b14      	ldr	r3, [pc, #80]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 8005d20:	4b12      	ldr	r3, [pc, #72]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005d22:	0018      	movs	r0, r3
 8005d24:	f000 fda6 	bl	8006874 <HAL_DMA_Init>
 8005d28:	1e03      	subs	r3, r0, #0
 8005d2a:	d001      	beq.n	8005d30 <HAL_UART_MspInit+0x1b8>
      Error_Handler();
 8005d2c:	f7fe f942 	bl	8003fb4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	4a0e      	ldr	r2, [pc, #56]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005d34:	671a      	str	r2, [r3, #112]	@ 0x70
 8005d36:	4b0d      	ldr	r3, [pc, #52]	@ (8005d6c <HAL_UART_MspInit+0x1f4>)
 8005d38:	687a      	ldr	r2, [r7, #4]
 8005d3a:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 8005d3c:	2200      	movs	r2, #0
 8005d3e:	2100      	movs	r1, #0
 8005d40:	200e      	movs	r0, #14
 8005d42:	f000 fd65 	bl	8006810 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 8005d46:	200e      	movs	r0, #14
 8005d48:	f000 fd77 	bl	800683a <HAL_NVIC_EnableIRQ>
}
 8005d4c:	46c0      	nop			@ (mov r8, r8)
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	b00b      	add	sp, #44	@ 0x2c
 8005d52:	bd90      	pop	{r4, r7, pc}
 8005d54:	40013800 	.word	0x40013800
 8005d58:	40021000 	.word	0x40021000
 8005d5c:	40004c00 	.word	0x40004c00
 8005d60:	50000800 	.word	0x50000800
 8005d64:	200007cc 	.word	0x200007cc
 8005d68:	4002006c 	.word	0x4002006c
 8005d6c:	20000814 	.word	0x20000814
 8005d70:	40020080 	.word	0x40020080

08005d74 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 1024

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 8005d74:	b580      	push	{r7, lr}
 8005d76:	b086      	sub	sp, #24
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 8005d7c:	f000 fc6e 	bl	800665c <HAL_GetTick>
 8005d80:	0003      	movs	r3, r0
 8005d82:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 8005d84:	4b1c      	ldr	r3, [pc, #112]	@ (8005df8 <TimestampIsReached+0x84>)
 8005d86:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 8005d88:	697a      	ldr	r2, [r7, #20]
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	429a      	cmp	r2, r3
 8005d8e:	d307      	bcc.n	8005da0 <TimestampIsReached+0x2c>
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	1ad3      	subs	r3, r2, r3
 8005d96:	693a      	ldr	r2, [r7, #16]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	d901      	bls.n	8005da0 <TimestampIsReached+0x2c>
 8005d9c:	2201      	movs	r2, #1
 8005d9e:	e000      	b.n	8005da2 <TimestampIsReached+0x2e>
 8005da0:	2200      	movs	r2, #0
 8005da2:	230f      	movs	r3, #15
 8005da4:	18fb      	adds	r3, r7, r3
 8005da6:	701a      	strb	r2, [r3, #0]
 8005da8:	781a      	ldrb	r2, [r3, #0]
 8005daa:	2101      	movs	r1, #1
 8005dac:	400a      	ands	r2, r1
 8005dae:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 8005db0:	697a      	ldr	r2, [r7, #20]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d207      	bcs.n	8005dc8 <TimestampIsReached+0x54>
 8005db8:	687a      	ldr	r2, [r7, #4]
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	1ad3      	subs	r3, r2, r3
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d201      	bcs.n	8005dc8 <TimestampIsReached+0x54>
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	e000      	b.n	8005dca <TimestampIsReached+0x56>
 8005dc8:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 8005dca:	200e      	movs	r0, #14
 8005dcc:	183b      	adds	r3, r7, r0
 8005dce:	701a      	strb	r2, [r3, #0]
 8005dd0:	781a      	ldrb	r2, [r3, #0]
 8005dd2:	2101      	movs	r1, #1
 8005dd4:	400a      	ands	r2, r1
 8005dd6:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 8005dd8:	230f      	movs	r3, #15
 8005dda:	18fb      	adds	r3, r7, r3
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d103      	bne.n	8005dea <TimestampIsReached+0x76>
 8005de2:	183b      	adds	r3, r7, r0
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d001      	beq.n	8005dee <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e000      	b.n	8005df0 <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 8005dee:	2300      	movs	r3, #0
}
 8005df0:	0018      	movs	r0, r3
 8005df2:	46bd      	mov	sp, r7
 8005df4:	b006      	add	sp, #24
 8005df6:	bd80      	pop	{r7, pc}
 8005df8:	7fffffff 	.word	0x7fffffff

08005dfc <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 8005e04:	f000 fc2a 	bl	800665c <HAL_GetTick>
 8005e08:	0002      	movs	r2, r0
 8005e0a:	4904      	ldr	r1, [pc, #16]	@ (8005e1c <AddTimestamp+0x20>)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	0018      	movs	r0, r3
 8005e10:	f006 ff4c 	bl	800ccac <siprintf>
}
 8005e14:	46c0      	nop			@ (mov r8, r8)
 8005e16:	46bd      	mov	sp, r7
 8005e18:	b002      	add	sp, #8
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	0800f854 	.word	0x0800f854

08005e20 <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 8005e20:	b40c      	push	{r2, r3}
 8005e22:	b5b0      	push	{r4, r5, r7, lr}
 8005e24:	4c2b      	ldr	r4, [pc, #172]	@ (8005ed4 <CreateLine+0xb4>)
 8005e26:	44a5      	add	sp, r4
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	0002      	movs	r2, r0
 8005e2c:	6039      	str	r1, [r7, #0]
 8005e2e:	4b2a      	ldr	r3, [pc, #168]	@ (8005ed8 <CreateLine+0xb8>)
 8005e30:	2182      	movs	r1, #130	@ 0x82
 8005e32:	00c9      	lsls	r1, r1, #3
 8005e34:	185b      	adds	r3, r3, r1
 8005e36:	19db      	adds	r3, r3, r7
 8005e38:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 8005e3a:	4b28      	ldr	r3, [pc, #160]	@ (8005edc <CreateLine+0xbc>)
 8005e3c:	781b      	ldrb	r3, [r3, #0]
 8005e3e:	4a26      	ldr	r2, [pc, #152]	@ (8005ed8 <CreateLine+0xb8>)
 8005e40:	1852      	adds	r2, r2, r1
 8005e42:	19d2      	adds	r2, r2, r7
 8005e44:	7812      	ldrb	r2, [r2, #0]
 8005e46:	429a      	cmp	r2, r3
 8005e48:	d83b      	bhi.n	8005ec2 <CreateLine+0xa2>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 8005e4a:	683a      	ldr	r2, [r7, #0]
 8005e4c:	4924      	ldr	r1, [pc, #144]	@ (8005ee0 <CreateLine+0xc0>)
 8005e4e:	240c      	movs	r4, #12
 8005e50:	193b      	adds	r3, r7, r4
 8005e52:	0018      	movs	r0, r3
 8005e54:	f006 ff2a 	bl	800ccac <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 8005e58:	4b20      	ldr	r3, [pc, #128]	@ (8005edc <CreateLine+0xbc>)
 8005e5a:	781b      	ldrb	r3, [r3, #0]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d909      	bls.n	8005e74 <CreateLine+0x54>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 8005e60:	193b      	adds	r3, r7, r4
 8005e62:	0018      	movs	r0, r3
 8005e64:	f7fa f950 	bl	8000108 <strlen>
 8005e68:	0002      	movs	r2, r0
 8005e6a:	193b      	adds	r3, r7, r4
 8005e6c:	189b      	adds	r3, r3, r2
 8005e6e:	0018      	movs	r0, r3
 8005e70:	f7ff ffc4 	bl	8005dfc <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 8005e74:	240c      	movs	r4, #12
 8005e76:	193b      	adds	r3, r7, r4
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f7fa f945 	bl	8000108 <strlen>
 8005e7e:	0003      	movs	r3, r0
 8005e80:	4918      	ldr	r1, [pc, #96]	@ (8005ee4 <CreateLine+0xc4>)
 8005e82:	187a      	adds	r2, r7, r1
 8005e84:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 8005e86:	4b18      	ldr	r3, [pc, #96]	@ (8005ee8 <CreateLine+0xc8>)
 8005e88:	2508      	movs	r5, #8
 8005e8a:	195b      	adds	r3, r3, r5
 8005e8c:	19db      	adds	r3, r3, r7
 8005e8e:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 8005e90:	193a      	adds	r2, r7, r4
 8005e92:	187b      	adds	r3, r7, r1
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	18d0      	adds	r0, r2, r3
 8005e98:	187b      	adds	r3, r7, r1
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	2280      	movs	r2, #128	@ 0x80
 8005e9e:	00d2      	lsls	r2, r2, #3
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	0019      	movs	r1, r3
 8005ea4:	68bb      	ldr	r3, [r7, #8]
 8005ea6:	2283      	movs	r2, #131	@ 0x83
 8005ea8:	00d2      	lsls	r2, r2, #3
 8005eaa:	1952      	adds	r2, r2, r5
 8005eac:	19d2      	adds	r2, r2, r7
 8005eae:	6812      	ldr	r2, [r2, #0]
 8005eb0:	f006 ff94 	bl	800cddc <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 8005eb4:	193a      	adds	r2, r7, r4
 8005eb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005eec <CreateLine+0xcc>)
 8005eb8:	0011      	movs	r1, r2
 8005eba:	0018      	movs	r0, r3
 8005ebc:	f006 fee6 	bl	800cc8c <iprintf>
 8005ec0:	e000      	b.n	8005ec4 <CreateLine+0xa4>
    return;
 8005ec2:	46c0      	nop			@ (mov r8, r8)
}
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	2382      	movs	r3, #130	@ 0x82
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	449d      	add	sp, r3
 8005ecc:	bcb0      	pop	{r4, r5, r7}
 8005ece:	bc08      	pop	{r3}
 8005ed0:	b002      	add	sp, #8
 8005ed2:	4718      	bx	r3
 8005ed4:	fffffbf0 	.word	0xfffffbf0
 8005ed8:	fffffbf7 	.word	0xfffffbf7
 8005edc:	20000030 	.word	0x20000030
 8005ee0:	0800f860 	.word	0x0800f860
 8005ee4:	0000040c 	.word	0x0000040c
 8005ee8:	0000041c 	.word	0x0000041c
 8005eec:	0800f864 	.word	0x0800f864

08005ef0 <_write>:

int _write(int fd, const void *buf, size_t count) {
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b084      	sub	sp, #16
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	60f8      	str	r0, [r7, #12]
 8005ef8:	60b9      	str	r1, [r7, #8]
 8005efa:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	b29a      	uxth	r2, r3
 8005f00:	68b9      	ldr	r1, [r7, #8]
 8005f02:	4804      	ldr	r0, [pc, #16]	@ (8005f14 <_write+0x24>)
 8005f04:	2364      	movs	r3, #100	@ 0x64
 8005f06:	f004 fcd5 	bl	800a8b4 <HAL_UART_Transmit>
  return count;
 8005f0a:	687b      	ldr	r3, [r7, #4]
}
 8005f0c:	0018      	movs	r0, r3
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	b004      	add	sp, #16
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	2000065c 	.word	0x2000065c

08005f18 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b082      	sub	sp, #8
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	0002      	movs	r2, r0
 8005f20:	1dfb      	adds	r3, r7, #7
 8005f22:	701a      	strb	r2, [r3, #0]
 8005f24:	4b03      	ldr	r3, [pc, #12]	@ (8005f34 <SetVerboseLevel+0x1c>)
 8005f26:	1dfa      	adds	r2, r7, #7
 8005f28:	7812      	ldrb	r2, [r2, #0]
 8005f2a:	701a      	strb	r2, [r3, #0]
 8005f2c:	46c0      	nop			@ (mov r8, r8)
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	b002      	add	sp, #8
 8005f32:	bd80      	pop	{r7, pc}
 8005f34:	20000030 	.word	0x20000030

08005f38 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 8005f38:	b580      	push	{r7, lr}
 8005f3a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005f3c:	f000 fb8e 	bl	800665c <HAL_GetTick>
 8005f40:	0003      	movs	r3, r0
}
 8005f42:	0018      	movs	r0, r3
 8005f44:	46bd      	mov	sp, r7
 8005f46:	bd80      	pop	{r7, pc}

08005f48 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 8005f4e:	4a0f      	ldr	r2, [pc, #60]	@ (8005f8c <BinaryReleaseInfo+0x44>)
 8005f50:	4b0f      	ldr	r3, [pc, #60]	@ (8005f90 <BinaryReleaseInfo+0x48>)
 8005f52:	0019      	movs	r1, r3
 8005f54:	2002      	movs	r0, #2
 8005f56:	f7ff ff63 	bl	8005e20 <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 8005f5a:	480e      	ldr	r0, [pc, #56]	@ (8005f94 <BinaryReleaseInfo+0x4c>)
 8005f5c:	4a0e      	ldr	r2, [pc, #56]	@ (8005f98 <BinaryReleaseInfo+0x50>)
 8005f5e:	490c      	ldr	r1, [pc, #48]	@ (8005f90 <BinaryReleaseInfo+0x48>)
 8005f60:	4b0e      	ldr	r3, [pc, #56]	@ (8005f9c <BinaryReleaseInfo+0x54>)
 8005f62:	9300      	str	r3, [sp, #0]
 8005f64:	0003      	movs	r3, r0
 8005f66:	2002      	movs	r0, #2
 8005f68:	f7ff ff5a 	bl	8005e20 <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w28a");
 8005f6c:	4a0c      	ldr	r2, [pc, #48]	@ (8005fa0 <BinaryReleaseInfo+0x58>)
 8005f6e:	4b08      	ldr	r3, [pc, #32]	@ (8005f90 <BinaryReleaseInfo+0x48>)
 8005f70:	0019      	movs	r1, r3
 8005f72:	2002      	movs	r0, #2
 8005f74:	f7ff ff54 	bl	8005e20 <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 8005f78:	4b0a      	ldr	r3, [pc, #40]	@ (8005fa4 <BinaryReleaseInfo+0x5c>)
 8005f7a:	4a0b      	ldr	r2, [pc, #44]	@ (8005fa8 <BinaryReleaseInfo+0x60>)
 8005f7c:	4904      	ldr	r1, [pc, #16]	@ (8005f90 <BinaryReleaseInfo+0x48>)
 8005f7e:	2002      	movs	r0, #2
 8005f80:	f7ff ff4e 	bl	8005e20 <CreateLine>
}
 8005f84:	46c0      	nop			@ (mov r8, r8)
 8005f86:	46bd      	mov	sp, r7
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	46c0      	nop			@ (mov r8, r8)
 8005f8c:	0800f86c 	.word	0x0800f86c
 8005f90:	0800f898 	.word	0x0800f898
 8005f94:	0800f89c 	.word	0x0800f89c
 8005f98:	0800f8a8 	.word	0x0800f8a8
 8005f9c:	0800f8bc 	.word	0x0800f8bc
 8005fa0:	0800f8c8 	.word	0x0800f8c8
 8005fa4:	0800f8d4 	.word	0x0800f8d4
 8005fa8:	0800f8dc 	.word	0x0800f8dc

08005fac <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static void ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005fac:	b590      	push	{r4, r7, lr}
 8005fae:	b083      	sub	sp, #12
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6039      	str	r1, [r7, #0]
 8005fb4:	0011      	movs	r1, r2
 8005fb6:	1dfb      	adds	r3, r7, #7
 8005fb8:	1c02      	adds	r2, r0, #0
 8005fba:	701a      	strb	r2, [r3, #0]
 8005fbc:	1dbb      	adds	r3, r7, #6
 8005fbe:	1c0a      	adds	r2, r1, #0
 8005fc0:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 8005fc2:	4b08      	ldr	r3, [pc, #32]	@ (8005fe4 <ReadRegister+0x38>)
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d008      	beq.n	8005fdc <ReadRegister+0x30>
		ReadFunction(address, buffer, nrBytes);
 8005fca:	4b06      	ldr	r3, [pc, #24]	@ (8005fe4 <ReadRegister+0x38>)
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	1dba      	adds	r2, r7, #6
 8005fd0:	7814      	ldrb	r4, [r2, #0]
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	1dfa      	adds	r2, r7, #7
 8005fd6:	7810      	ldrb	r0, [r2, #0]
 8005fd8:	0022      	movs	r2, r4
 8005fda:	4798      	blx	r3
	}
}
 8005fdc:	46c0      	nop			@ (mov r8, r8)
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	b003      	add	sp, #12
 8005fe2:	bd90      	pop	{r4, r7, pc}
 8005fe4:	2000085c 	.word	0x2000085c

08005fe8 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005fe8:	b590      	push	{r4, r7, lr}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6039      	str	r1, [r7, #0]
 8005ff0:	0011      	movs	r1, r2
 8005ff2:	1dfb      	adds	r3, r7, #7
 8005ff4:	1c02      	adds	r2, r0, #0
 8005ff6:	701a      	strb	r2, [r3, #0]
 8005ff8:	1dbb      	adds	r3, r7, #6
 8005ffa:	1c0a      	adds	r2, r1, #0
 8005ffc:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8005ffe:	4b08      	ldr	r3, [pc, #32]	@ (8006020 <WriteRegister+0x38>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	2b00      	cmp	r3, #0
 8006004:	d008      	beq.n	8006018 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8006006:	4b06      	ldr	r3, [pc, #24]	@ (8006020 <WriteRegister+0x38>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	1dba      	adds	r2, r7, #6
 800600c:	7814      	ldrb	r4, [r2, #0]
 800600e:	6839      	ldr	r1, [r7, #0]
 8006010:	1dfa      	adds	r2, r7, #7
 8006012:	7810      	ldrb	r0, [r2, #0]
 8006014:	0022      	movs	r2, r4
 8006016:	4798      	blx	r3
  }
}
 8006018:	46c0      	nop			@ (mov r8, r8)
 800601a:	46bd      	mov	sp, r7
 800601c:	b003      	add	sp, #12
 800601e:	bd90      	pop	{r4, r7, pc}
 8006020:	20000860 	.word	0x20000860

08006024 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	000a      	movs	r2, r1
 800602e:	1cfb      	adds	r3, r7, #3
 8006030:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 8006032:	230f      	movs	r3, #15
 8006034:	18fb      	adds	r3, r7, r3
 8006036:	22ff      	movs	r2, #255	@ 0xff
 8006038:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800603a:	230e      	movs	r3, #14
 800603c:	18fb      	adds	r3, r7, r3
 800603e:	2200      	movs	r2, #0
 8006040:	701a      	strb	r2, [r3, #0]
 8006042:	e037      	b.n	80060b4 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8006044:	230e      	movs	r3, #14
 8006046:	18fb      	adds	r3, r7, r3
 8006048:	781b      	ldrb	r3, [r3, #0]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	18d3      	adds	r3, r2, r3
 800604e:	7819      	ldrb	r1, [r3, #0]
 8006050:	220f      	movs	r2, #15
 8006052:	18bb      	adds	r3, r7, r2
 8006054:	18ba      	adds	r2, r7, r2
 8006056:	7812      	ldrb	r2, [r2, #0]
 8006058:	404a      	eors	r2, r1
 800605a:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800605c:	230d      	movs	r3, #13
 800605e:	18fb      	adds	r3, r7, r3
 8006060:	2200      	movs	r2, #0
 8006062:	701a      	strb	r2, [r3, #0]
 8006064:	e01b      	b.n	800609e <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 8006066:	210f      	movs	r1, #15
 8006068:	187b      	adds	r3, r7, r1
 800606a:	781b      	ldrb	r3, [r3, #0]
 800606c:	b25b      	sxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	da09      	bge.n	8006086 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 8006072:	187b      	adds	r3, r7, r1
 8006074:	781b      	ldrb	r3, [r3, #0]
 8006076:	005b      	lsls	r3, r3, #1
 8006078:	b25b      	sxtb	r3, r3
 800607a:	2231      	movs	r2, #49	@ 0x31
 800607c:	4053      	eors	r3, r2
 800607e:	b25a      	sxtb	r2, r3
 8006080:	187b      	adds	r3, r7, r1
 8006082:	701a      	strb	r2, [r3, #0]
 8006084:	e005      	b.n	8006092 <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 8006086:	230f      	movs	r3, #15
 8006088:	18fa      	adds	r2, r7, r3
 800608a:	18fb      	adds	r3, r7, r3
 800608c:	781b      	ldrb	r3, [r3, #0]
 800608e:	18db      	adds	r3, r3, r3
 8006090:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 8006092:	210d      	movs	r1, #13
 8006094:	187b      	adds	r3, r7, r1
 8006096:	781a      	ldrb	r2, [r3, #0]
 8006098:	187b      	adds	r3, r7, r1
 800609a:	3201      	adds	r2, #1
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	230d      	movs	r3, #13
 80060a0:	18fb      	adds	r3, r7, r3
 80060a2:	781b      	ldrb	r3, [r3, #0]
 80060a4:	2b07      	cmp	r3, #7
 80060a6:	d9de      	bls.n	8006066 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80060a8:	210e      	movs	r1, #14
 80060aa:	187b      	adds	r3, r7, r1
 80060ac:	781a      	ldrb	r2, [r3, #0]
 80060ae:	187b      	adds	r3, r7, r1
 80060b0:	3201      	adds	r2, #1
 80060b2:	701a      	strb	r2, [r3, #0]
 80060b4:	230e      	movs	r3, #14
 80060b6:	18fa      	adds	r2, r7, r3
 80060b8:	1cfb      	adds	r3, r7, #3
 80060ba:	7812      	ldrb	r2, [r2, #0]
 80060bc:	781b      	ldrb	r3, [r3, #0]
 80060be:	429a      	cmp	r2, r3
 80060c0:	d3c0      	bcc.n	8006044 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 80060c2:	230f      	movs	r3, #15
 80060c4:	18fb      	adds	r3, r7, r3
 80060c6:	781b      	ldrb	r3, [r3, #0]
}
 80060c8:	0018      	movs	r0, r3
 80060ca:	46bd      	mov	sp, r7
 80060cc:	b004      	add	sp, #16
 80060ce:	bd80      	pop	{r7, pc}

080060d0 <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b082      	sub	sp, #8
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 80060da:	4b0a      	ldr	r3, [pc, #40]	@ (8006104 <HIDS_Init+0x34>)
 80060dc:	687a      	ldr	r2, [r7, #4]
 80060de:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 80060e0:	4b09      	ldr	r3, [pc, #36]	@ (8006108 <HIDS_Init+0x38>)
 80060e2:	683a      	ldr	r2, [r7, #0]
 80060e4:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 80060e6:	4b09      	ldr	r3, [pc, #36]	@ (800610c <HIDS_Init+0x3c>)
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	0018      	movs	r0, r3
 80060ec:	f000 f8d0 	bl	8006290 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 80060f0:	4b07      	ldr	r3, [pc, #28]	@ (8006110 <HIDS_Init+0x40>)
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	0018      	movs	r0, r3
 80060f6:	f000 f82b 	bl	8006150 <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 80060fa:	46c0      	nop			@ (mov r8, r8)
 80060fc:	46bd      	mov	sp, r7
 80060fe:	b002      	add	sp, #8
 8006100:	bd80      	pop	{r7, pc}
 8006102:	46c0      	nop			@ (mov r8, r8)
 8006104:	2000085c 	.word	0x2000085c
 8006108:	20000860 	.word	0x20000860
 800610c:	20000032 	.word	0x20000032
 8006110:	20000031 	.word	0x20000031

08006114 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 8006114:	b580      	push	{r7, lr}
 8006116:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 8006118:	f7ff ff0e 	bl	8005f38 <GetCurrentHalTicks>
 800611c:	0002      	movs	r2, r0
 800611e:	4b08      	ldr	r3, [pc, #32]	@ (8006140 <HIDS_StartMeasurement+0x2c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	18d2      	adds	r2, r2, r3
 8006124:	4b07      	ldr	r3, [pc, #28]	@ (8006144 <HIDS_StartMeasurement+0x30>)
 8006126:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 8006128:	4b07      	ldr	r3, [pc, #28]	@ (8006148 <HIDS_StartMeasurement+0x34>)
 800612a:	2201      	movs	r2, #1
 800612c:	0019      	movs	r1, r3
 800612e:	2044      	movs	r0, #68	@ 0x44
 8006130:	f7ff ff5a 	bl	8005fe8 <WriteRegister>
  MeasurementDone = false;
 8006134:	4b05      	ldr	r3, [pc, #20]	@ (800614c <HIDS_StartMeasurement+0x38>)
 8006136:	2200      	movs	r2, #0
 8006138:	701a      	strb	r2, [r3, #0]
}
 800613a:	46c0      	nop			@ (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}
 8006140:	20000038 	.word	0x20000038
 8006144:	20000034 	.word	0x20000034
 8006148:	20000032 	.word	0x20000032
 800614c:	20000872 	.word	0x20000872

08006150 <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 8006150:	b580      	push	{r7, lr}
 8006152:	b082      	sub	sp, #8
 8006154:	af00      	add	r7, sp, #0
 8006156:	0002      	movs	r2, r0
 8006158:	1dfb      	adds	r3, r7, #7
 800615a:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800615c:	4b03      	ldr	r3, [pc, #12]	@ (800616c <HIDS_SetHeaterMode+0x1c>)
 800615e:	1dfa      	adds	r2, r7, #7
 8006160:	7812      	ldrb	r2, [r2, #0]
 8006162:	701a      	strb	r2, [r3, #0]
}
 8006164:	46c0      	nop			@ (mov r8, r8)
 8006166:	46bd      	mov	sp, r7
 8006168:	b002      	add	sp, #8
 800616a:	bd80      	pop	{r7, pc}
 800616c:	20000031 	.word	0x20000031

08006170 <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 8006170:	b590      	push	{r4, r7, lr}
 8006172:	b085      	sub	sp, #20
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	781a      	ldrb	r2, [r3, #0]
 800617c:	210c      	movs	r1, #12
 800617e:	187b      	adds	r3, r7, r1
 8006180:	701a      	strb	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	785a      	ldrb	r2, [r3, #1]
 8006186:	187b      	adds	r3, r7, r1
 8006188:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800618a:	240f      	movs	r4, #15
 800618c:	193b      	adds	r3, r7, r4
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	7892      	ldrb	r2, [r2, #2]
 8006192:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 8006194:	187b      	adds	r3, r7, r1
 8006196:	2102      	movs	r1, #2
 8006198:	0018      	movs	r0, r3
 800619a:	f7ff ff43 	bl	8006024 <CalculateCRC>
 800619e:	0003      	movs	r3, r0
 80061a0:	001a      	movs	r2, r3
 80061a2:	193b      	adds	r3, r7, r4
 80061a4:	781b      	ldrb	r3, [r3, #0]
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d007      	beq.n	80061ba <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 80061aa:	4a17      	ldr	r2, [pc, #92]	@ (8006208 <CheckCRC+0x98>)
 80061ac:	4b17      	ldr	r3, [pc, #92]	@ (800620c <CheckCRC+0x9c>)
 80061ae:	0019      	movs	r1, r3
 80061b0:	2001      	movs	r0, #1
 80061b2:	f7ff fe35 	bl	8005e20 <CreateLine>
		return false;
 80061b6:	2300      	movs	r3, #0
 80061b8:	e021      	b.n	80061fe <CheckCRC+0x8e>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	78da      	ldrb	r2, [r3, #3]
 80061be:	2108      	movs	r1, #8
 80061c0:	187b      	adds	r3, r7, r1
 80061c2:	701a      	strb	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	791a      	ldrb	r2, [r3, #4]
 80061c8:	187b      	adds	r3, r7, r1
 80061ca:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 80061cc:	240e      	movs	r4, #14
 80061ce:	193b      	adds	r3, r7, r4
 80061d0:	687a      	ldr	r2, [r7, #4]
 80061d2:	7952      	ldrb	r2, [r2, #5]
 80061d4:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 80061d6:	187b      	adds	r3, r7, r1
 80061d8:	2102      	movs	r1, #2
 80061da:	0018      	movs	r0, r3
 80061dc:	f7ff ff22 	bl	8006024 <CalculateCRC>
 80061e0:	0003      	movs	r3, r0
 80061e2:	001a      	movs	r2, r3
 80061e4:	193b      	adds	r3, r7, r4
 80061e6:	781b      	ldrb	r3, [r3, #0]
 80061e8:	4293      	cmp	r3, r2
 80061ea:	d007      	beq.n	80061fc <CheckCRC+0x8c>
		Error("CRC check failed for the second segment.");
 80061ec:	4a08      	ldr	r2, [pc, #32]	@ (8006210 <CheckCRC+0xa0>)
 80061ee:	4b07      	ldr	r3, [pc, #28]	@ (800620c <CheckCRC+0x9c>)
 80061f0:	0019      	movs	r1, r3
 80061f2:	2001      	movs	r0, #1
 80061f4:	f7ff fe14 	bl	8005e20 <CreateLine>
		return false;
 80061f8:	2300      	movs	r3, #0
 80061fa:	e000      	b.n	80061fe <CheckCRC+0x8e>
	}
	return true;
 80061fc:	2301      	movs	r3, #1
}
 80061fe:	0018      	movs	r0, r3
 8006200:	46bd      	mov	sp, r7
 8006202:	b005      	add	sp, #20
 8006204:	bd90      	pop	{r4, r7, pc}
 8006206:	46c0      	nop			@ (mov r8, r8)
 8006208:	0800f918 	.word	0x0800f918
 800620c:	0800f940 	.word	0x0800f940
 8006210:	0800f944 	.word	0x0800f944

08006214 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 8006214:	b580      	push	{r7, lr}
 8006216:	b084      	sub	sp, #16
 8006218:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800621a:	1dbb      	adds	r3, r7, #6
 800621c:	2289      	movs	r2, #137	@ 0x89
 800621e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 8006220:	1dbb      	adds	r3, r7, #6
 8006222:	2201      	movs	r2, #1
 8006224:	0019      	movs	r1, r3
 8006226:	2044      	movs	r0, #68	@ 0x44
 8006228:	f7ff fede 	bl	8005fe8 <WriteRegister>
	HAL_Delay(30);
 800622c:	201e      	movs	r0, #30
 800622e:	f000 fa1f 	bl	8006670 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 8006232:	4b14      	ldr	r3, [pc, #80]	@ (8006284 <HIDS_DeviceConnected+0x70>)
 8006234:	2206      	movs	r2, #6
 8006236:	0019      	movs	r1, r3
 8006238:	2044      	movs	r0, #68	@ 0x44
 800623a:	f7ff feb7 	bl	8005fac <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800623e:	1dfb      	adds	r3, r7, #7
 8006240:	2200      	movs	r2, #0
 8006242:	701a      	strb	r2, [r3, #0]
 8006244:	e011      	b.n	800626a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 8006246:	1dfb      	adds	r3, r7, #7
 8006248:	7818      	ldrb	r0, [r3, #0]
 800624a:	1dfb      	adds	r3, r7, #7
 800624c:	781b      	ldrb	r3, [r3, #0]
 800624e:	4a0d      	ldr	r2, [pc, #52]	@ (8006284 <HIDS_DeviceConnected+0x70>)
 8006250:	5cd3      	ldrb	r3, [r2, r3]
 8006252:	4a0d      	ldr	r2, [pc, #52]	@ (8006288 <HIDS_DeviceConnected+0x74>)
 8006254:	490d      	ldr	r1, [pc, #52]	@ (800628c <HIDS_DeviceConnected+0x78>)
 8006256:	9300      	str	r3, [sp, #0]
 8006258:	0003      	movs	r3, r0
 800625a:	2002      	movs	r0, #2
 800625c:	f7ff fde0 	bl	8005e20 <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 8006260:	1dfb      	adds	r3, r7, #7
 8006262:	781a      	ldrb	r2, [r3, #0]
 8006264:	1dfb      	adds	r3, r7, #7
 8006266:	3201      	adds	r2, #1
 8006268:	701a      	strb	r2, [r3, #0]
 800626a:	1dfb      	adds	r3, r7, #7
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	2b05      	cmp	r3, #5
 8006270:	d9e9      	bls.n	8006246 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 8006272:	4b04      	ldr	r3, [pc, #16]	@ (8006284 <HIDS_DeviceConnected+0x70>)
 8006274:	0018      	movs	r0, r3
 8006276:	f7ff ff7b 	bl	8006170 <CheckCRC>
 800627a:	0003      	movs	r3, r0
}
 800627c:	0018      	movs	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	b002      	add	sp, #8
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20000864 	.word	0x20000864
 8006288:	0800f970 	.word	0x0800f970
 800628c:	0800f914 	.word	0x0800f914

08006290 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 8006290:	b580      	push	{r7, lr}
 8006292:	b082      	sub	sp, #8
 8006294:	af00      	add	r7, sp, #0
 8006296:	0002      	movs	r2, r0
 8006298:	1dfb      	adds	r3, r7, #7
 800629a:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800629c:	4b03      	ldr	r3, [pc, #12]	@ (80062ac <HIDS_SetMeasurementMode+0x1c>)
 800629e:	1dfa      	adds	r2, r7, #7
 80062a0:	7812      	ldrb	r2, [r2, #0]
 80062a2:	701a      	strb	r2, [r3, #0]
}
 80062a4:	46c0      	nop			@ (mov r8, r8)
 80062a6:	46bd      	mov	sp, r7
 80062a8:	b002      	add	sp, #8
 80062aa:	bd80      	pop	{r7, pc}
 80062ac:	20000032 	.word	0x20000032

080062b0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 80062b0:	b580      	push	{r7, lr}
 80062b2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 80062b4:	4b04      	ldr	r3, [pc, #16]	@ (80062c8 <HIDS_MeasurementReady+0x18>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	0018      	movs	r0, r3
 80062ba:	f7ff fd5b 	bl	8005d74 <TimestampIsReached>
 80062be:	0003      	movs	r3, r0
}
 80062c0:	0018      	movs	r0, r3
 80062c2:	46bd      	mov	sp, r7
 80062c4:	bd80      	pop	{r7, pc}
 80062c6:	46c0      	nop			@ (mov r8, r8)
 80062c8:	20000034 	.word	0x20000034

080062cc <HIDS_GetMeasurementValues>:
void HIDS_SoftReset(void){
  uint8_t resetReg = HIDS_SOFT_RESET_REG;
  WriteRegister(HIDS_I2C_ADDRESS, &resetReg, 1);
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 80062cc:	b590      	push	{r4, r7, lr}
 80062ce:	b08d      	sub	sp, #52	@ 0x34
 80062d0:	af02      	add	r7, sp, #8
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 80062d6:	4b87      	ldr	r3, [pc, #540]	@ (80064f4 <HIDS_GetMeasurementValues+0x228>)
 80062d8:	781b      	ldrb	r3, [r3, #0]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d001      	beq.n	80062e2 <HIDS_GetMeasurementValues+0x16>
 80062de:	2301      	movs	r3, #1
 80062e0:	e103      	b.n	80064ea <HIDS_GetMeasurementValues+0x21e>
  if(!HIDS_MeasurementReady()) return false;
 80062e2:	f7ff ffe5 	bl	80062b0 <HIDS_MeasurementReady>
 80062e6:	0003      	movs	r3, r0
 80062e8:	001a      	movs	r2, r3
 80062ea:	2301      	movs	r3, #1
 80062ec:	4053      	eors	r3, r2
 80062ee:	b2db      	uxtb	r3, r3
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d001      	beq.n	80062f8 <HIDS_GetMeasurementValues+0x2c>
 80062f4:	2300      	movs	r3, #0
 80062f6:	e0f8      	b.n	80064ea <HIDS_GetMeasurementValues+0x21e>
  uint32_t amountOfMeasurements = HIDS_MeasurementDuration / HIDS_Interval_ms;
 80062f8:	4b7f      	ldr	r3, [pc, #508]	@ (80064f8 <HIDS_GetMeasurementValues+0x22c>)
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	4b7f      	ldr	r3, [pc, #508]	@ (80064fc <HIDS_GetMeasurementValues+0x230>)
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	0019      	movs	r1, r3
 8006302:	0010      	movs	r0, r2
 8006304:	f7f9 ff1c 	bl	8000140 <__udivsi3>
 8006308:	0003      	movs	r3, r0
 800630a:	617b      	str	r3, [r7, #20]
  float currentTemperature;
  float currentHumidity;
  static float temperatures[HIDS_MAX_MEASUREMENTS];
  static float humidities[HIDS_MAX_MEASUREMENTS];

  Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
 800630c:	4b7c      	ldr	r3, [pc, #496]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	1c58      	adds	r0, r3, #1
 8006312:	4a7c      	ldr	r2, [pc, #496]	@ (8006504 <HIDS_GetMeasurementValues+0x238>)
 8006314:	497c      	ldr	r1, [pc, #496]	@ (8006508 <HIDS_GetMeasurementValues+0x23c>)
 8006316:	697b      	ldr	r3, [r7, #20]
 8006318:	9300      	str	r3, [sp, #0]
 800631a:	0003      	movs	r3, r0
 800631c:	2003      	movs	r0, #3
 800631e:	f7ff fd7f 	bl	8005e20 <CreateLine>
  ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 8006322:	4b7a      	ldr	r3, [pc, #488]	@ (800650c <HIDS_GetMeasurementValues+0x240>)
 8006324:	2206      	movs	r2, #6
 8006326:	0019      	movs	r1, r3
 8006328:	2044      	movs	r0, #68	@ 0x44
 800632a:	f7ff fe3f 	bl	8005fac <ReadRegister>
	if(!CheckCRC(MeasureBuffer)) {
 800632e:	4b77      	ldr	r3, [pc, #476]	@ (800650c <HIDS_GetMeasurementValues+0x240>)
 8006330:	0018      	movs	r0, r3
 8006332:	f7ff ff1d 	bl	8006170 <CheckCRC>
 8006336:	0003      	movs	r3, r0
 8006338:	001a      	movs	r2, r3
 800633a:	2301      	movs	r3, #1
 800633c:	4053      	eors	r3, r2
 800633e:	b2db      	uxtb	r3, r3
 8006340:	2b00      	cmp	r3, #0
 8006342:	d02a      	beq.n	800639a <HIDS_GetMeasurementValues+0xce>
		Error("HIDS measurements CRC check failed.");
 8006344:	4a72      	ldr	r2, [pc, #456]	@ (8006510 <HIDS_GetMeasurementValues+0x244>)
 8006346:	4b73      	ldr	r3, [pc, #460]	@ (8006514 <HIDS_GetMeasurementValues+0x248>)
 8006348:	0019      	movs	r1, r3
 800634a:	2001      	movs	r0, #1
 800634c:	f7ff fd68 	bl	8005e20 <CreateLine>
		Info("Measure buffer structure:");
 8006350:	4a71      	ldr	r2, [pc, #452]	@ (8006518 <HIDS_GetMeasurementValues+0x24c>)
 8006352:	4b72      	ldr	r3, [pc, #456]	@ (800651c <HIDS_GetMeasurementValues+0x250>)
 8006354:	0019      	movs	r1, r3
 8006356:	2002      	movs	r0, #2
 8006358:	f7ff fd62 	bl	8005e20 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800635c:	2327      	movs	r3, #39	@ 0x27
 800635e:	18fb      	adds	r3, r7, r3
 8006360:	2200      	movs	r2, #0
 8006362:	701a      	strb	r2, [r3, #0]
 8006364:	e012      	b.n	800638c <HIDS_GetMeasurementValues+0xc0>
			Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
 8006366:	2427      	movs	r4, #39	@ 0x27
 8006368:	193b      	adds	r3, r7, r4
 800636a:	7818      	ldrb	r0, [r3, #0]
 800636c:	193b      	adds	r3, r7, r4
 800636e:	781b      	ldrb	r3, [r3, #0]
 8006370:	4a66      	ldr	r2, [pc, #408]	@ (800650c <HIDS_GetMeasurementValues+0x240>)
 8006372:	5cd3      	ldrb	r3, [r2, r3]
 8006374:	4a6a      	ldr	r2, [pc, #424]	@ (8006520 <HIDS_GetMeasurementValues+0x254>)
 8006376:	4964      	ldr	r1, [pc, #400]	@ (8006508 <HIDS_GetMeasurementValues+0x23c>)
 8006378:	9300      	str	r3, [sp, #0]
 800637a:	0003      	movs	r3, r0
 800637c:	2003      	movs	r0, #3
 800637e:	f7ff fd4f 	bl	8005e20 <CreateLine>
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 8006382:	193b      	adds	r3, r7, r4
 8006384:	781a      	ldrb	r2, [r3, #0]
 8006386:	193b      	adds	r3, r7, r4
 8006388:	3201      	adds	r2, #1
 800638a:	701a      	strb	r2, [r3, #0]
 800638c:	2327      	movs	r3, #39	@ 0x27
 800638e:	18fb      	adds	r3, r7, r3
 8006390:	781b      	ldrb	r3, [r3, #0]
 8006392:	2b05      	cmp	r3, #5
 8006394:	d9e7      	bls.n	8006366 <HIDS_GetMeasurementValues+0x9a>
		}
		return false;
 8006396:	2300      	movs	r3, #0
 8006398:	e0a7      	b.n	80064ea <HIDS_GetMeasurementValues+0x21e>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * (MeasureBuffer[0] << 8) | MeasureBuffer[1])) / HIDS_POW_2_16_MINUS_1);
 800639a:	4b5c      	ldr	r3, [pc, #368]	@ (800650c <HIDS_GetMeasurementValues+0x240>)
 800639c:	781b      	ldrb	r3, [r3, #0]
 800639e:	021b      	lsls	r3, r3, #8
 80063a0:	22af      	movs	r2, #175	@ 0xaf
 80063a2:	4353      	muls	r3, r2
 80063a4:	4a59      	ldr	r2, [pc, #356]	@ (800650c <HIDS_GetMeasurementValues+0x240>)
 80063a6:	7852      	ldrb	r2, [r2, #1]
 80063a8:	4313      	orrs	r3, r2
 80063aa:	0018      	movs	r0, r3
 80063ac:	f7fc ff50 	bl	8003250 <__aeabi_i2d>
 80063b0:	2200      	movs	r2, #0
 80063b2:	4b5c      	ldr	r3, [pc, #368]	@ (8006524 <HIDS_GetMeasurementValues+0x258>)
 80063b4:	f7fb fc46 	bl	8001c44 <__aeabi_ddiv>
 80063b8:	0002      	movs	r2, r0
 80063ba:	000b      	movs	r3, r1
 80063bc:	0010      	movs	r0, r2
 80063be:	0019      	movs	r1, r3
 80063c0:	f7fc ff98 	bl	80032f4 <__aeabi_d2f>
 80063c4:	1c03      	adds	r3, r0, #0
 80063c6:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 80063c8:	4957      	ldr	r1, [pc, #348]	@ (8006528 <HIDS_GetMeasurementValues+0x25c>)
 80063ca:	6938      	ldr	r0, [r7, #16]
 80063cc:	f7fa fe6e 	bl	80010ac <__aeabi_fsub>
 80063d0:	1c03      	adds	r3, r0, #0
 80063d2:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 80063d4:	4b4d      	ldr	r3, [pc, #308]	@ (800650c <HIDS_GetMeasurementValues+0x240>)
 80063d6:	78db      	ldrb	r3, [r3, #3]
 80063d8:	021b      	lsls	r3, r3, #8
 80063da:	4a4c      	ldr	r2, [pc, #304]	@ (800650c <HIDS_GetMeasurementValues+0x240>)
 80063dc:	7912      	ldrb	r2, [r2, #4]
 80063de:	431a      	orrs	r2, r3
 80063e0:	0013      	movs	r3, r2
 80063e2:	015b      	lsls	r3, r3, #5
 80063e4:	1a9b      	subs	r3, r3, r2
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	189b      	adds	r3, r3, r2
 80063ea:	0018      	movs	r0, r3
 80063ec:	f7fc ff30 	bl	8003250 <__aeabi_i2d>
 80063f0:	2200      	movs	r2, #0
 80063f2:	4b4c      	ldr	r3, [pc, #304]	@ (8006524 <HIDS_GetMeasurementValues+0x258>)
 80063f4:	f7fb fc26 	bl	8001c44 <__aeabi_ddiv>
 80063f8:	0002      	movs	r2, r0
 80063fa:	000b      	movs	r3, r1
 80063fc:	0010      	movs	r0, r2
 80063fe:	0019      	movs	r1, r3
 8006400:	f7fc ff78 	bl	80032f4 <__aeabi_d2f>
 8006404:	1c03      	adds	r3, r0, #0
 8006406:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 8006408:	4948      	ldr	r1, [pc, #288]	@ (800652c <HIDS_GetMeasurementValues+0x260>)
 800640a:	68f8      	ldr	r0, [r7, #12]
 800640c:	f7fa fe4e 	bl	80010ac <__aeabi_fsub>
 8006410:	1c03      	adds	r3, r0, #0
 8006412:	60fb      	str	r3, [r7, #12]

	if(measurements < amountOfMeasurements) {
 8006414:	4b3a      	ldr	r3, [pc, #232]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	697a      	ldr	r2, [r7, #20]
 800641a:	429a      	cmp	r2, r3
 800641c:	d910      	bls.n	8006440 <HIDS_GetMeasurementValues+0x174>
	  temperatures[measurements] = currentTemperature;
 800641e:	4b38      	ldr	r3, [pc, #224]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 8006420:	681a      	ldr	r2, [r3, #0]
 8006422:	4b43      	ldr	r3, [pc, #268]	@ (8006530 <HIDS_GetMeasurementValues+0x264>)
 8006424:	0092      	lsls	r2, r2, #2
 8006426:	6939      	ldr	r1, [r7, #16]
 8006428:	50d1      	str	r1, [r2, r3]
	  humidities[measurements] = currentHumidity;
 800642a:	4b35      	ldr	r3, [pc, #212]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 800642c:	681a      	ldr	r2, [r3, #0]
 800642e:	4b41      	ldr	r3, [pc, #260]	@ (8006534 <HIDS_GetMeasurementValues+0x268>)
 8006430:	0092      	lsls	r2, r2, #2
 8006432:	68f9      	ldr	r1, [r7, #12]
 8006434:	50d1      	str	r1, [r2, r3]
	  measurements++;
 8006436:	4b32      	ldr	r3, [pc, #200]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	4b30      	ldr	r3, [pc, #192]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 800643e:	601a      	str	r2, [r3, #0]
	}

	if (measurements >= amountOfMeasurements) {
 8006440:	4b2f      	ldr	r3, [pc, #188]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	697a      	ldr	r2, [r7, #20]
 8006446:	429a      	cmp	r2, r3
 8006448:	d84c      	bhi.n	80064e4 <HIDS_GetMeasurementValues+0x218>
	  // Measurements done, calculating average and returning it.
    float sumTemperature = 0.0;
 800644a:	2300      	movs	r3, #0
 800644c:	623b      	str	r3, [r7, #32]
    float sumHumidity = 0.0;
 800644e:	2300      	movs	r3, #0
 8006450:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8006452:	2300      	movs	r3, #0
 8006454:	61bb      	str	r3, [r7, #24]
 8006456:	e016      	b.n	8006486 <HIDS_GetMeasurementValues+0x1ba>
        sumTemperature += temperatures[i];
 8006458:	4b35      	ldr	r3, [pc, #212]	@ (8006530 <HIDS_GetMeasurementValues+0x264>)
 800645a:	69ba      	ldr	r2, [r7, #24]
 800645c:	0092      	lsls	r2, r2, #2
 800645e:	58d3      	ldr	r3, [r2, r3]
 8006460:	1c19      	adds	r1, r3, #0
 8006462:	6a38      	ldr	r0, [r7, #32]
 8006464:	f7fa f974 	bl	8000750 <__aeabi_fadd>
 8006468:	1c03      	adds	r3, r0, #0
 800646a:	623b      	str	r3, [r7, #32]
        sumHumidity += humidities[i];
 800646c:	4b31      	ldr	r3, [pc, #196]	@ (8006534 <HIDS_GetMeasurementValues+0x268>)
 800646e:	69ba      	ldr	r2, [r7, #24]
 8006470:	0092      	lsls	r2, r2, #2
 8006472:	58d3      	ldr	r3, [r2, r3]
 8006474:	1c19      	adds	r1, r3, #0
 8006476:	69f8      	ldr	r0, [r7, #28]
 8006478:	f7fa f96a 	bl	8000750 <__aeabi_fadd>
 800647c:	1c03      	adds	r3, r0, #0
 800647e:	61fb      	str	r3, [r7, #28]
    for (uint32_t i = 0; i < measurements; i++) {
 8006480:	69bb      	ldr	r3, [r7, #24]
 8006482:	3301      	adds	r3, #1
 8006484:	61bb      	str	r3, [r7, #24]
 8006486:	4b1e      	ldr	r3, [pc, #120]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	429a      	cmp	r2, r3
 800648e:	d3e3      	bcc.n	8006458 <HIDS_GetMeasurementValues+0x18c>
    }

    *temperature = sumTemperature / measurements;
 8006490:	4b1b      	ldr	r3, [pc, #108]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	0018      	movs	r0, r3
 8006496:	f7fb f82f 	bl	80014f8 <__aeabi_ui2f>
 800649a:	1c03      	adds	r3, r0, #0
 800649c:	1c19      	adds	r1, r3, #0
 800649e:	6a38      	ldr	r0, [r7, #32]
 80064a0:	f7fa fae0 	bl	8000a64 <__aeabi_fdiv>
 80064a4:	1c03      	adds	r3, r0, #0
 80064a6:	1c1a      	adds	r2, r3, #0
 80064a8:	683b      	ldr	r3, [r7, #0]
 80064aa:	601a      	str	r2, [r3, #0]
    *humidity = sumHumidity / measurements;
 80064ac:	4b14      	ldr	r3, [pc, #80]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	0018      	movs	r0, r3
 80064b2:	f7fb f821 	bl	80014f8 <__aeabi_ui2f>
 80064b6:	1c03      	adds	r3, r0, #0
 80064b8:	1c19      	adds	r1, r3, #0
 80064ba:	69f8      	ldr	r0, [r7, #28]
 80064bc:	f7fa fad2 	bl	8000a64 <__aeabi_fdiv>
 80064c0:	1c03      	adds	r3, r0, #0
 80064c2:	1c1a      	adds	r2, r3, #0
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	601a      	str	r2, [r3, #0]

    measurements = 0;
 80064c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006500 <HIDS_GetMeasurementValues+0x234>)
 80064ca:	2200      	movs	r2, #0
 80064cc:	601a      	str	r2, [r3, #0]
    MeasurementDone = true;
 80064ce:	4b09      	ldr	r3, [pc, #36]	@ (80064f4 <HIDS_GetMeasurementValues+0x228>)
 80064d0:	2201      	movs	r2, #1
 80064d2:	701a      	strb	r2, [r3, #0]
    Debug("HIDS measurement is done.");
 80064d4:	4a18      	ldr	r2, [pc, #96]	@ (8006538 <HIDS_GetMeasurementValues+0x26c>)
 80064d6:	4b0c      	ldr	r3, [pc, #48]	@ (8006508 <HIDS_GetMeasurementValues+0x23c>)
 80064d8:	0019      	movs	r1, r3
 80064da:	2003      	movs	r0, #3
 80064dc:	f7ff fca0 	bl	8005e20 <CreateLine>
    return true;
 80064e0:	2301      	movs	r3, #1
 80064e2:	e002      	b.n	80064ea <HIDS_GetMeasurementValues+0x21e>
	}
	// Starting another measurement, still not done with all measurements.
	HIDS_StartMeasurement();
 80064e4:	f7ff fe16 	bl	8006114 <HIDS_StartMeasurement>
	return false;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	0018      	movs	r0, r3
 80064ec:	46bd      	mov	sp, r7
 80064ee:	b00b      	add	sp, #44	@ 0x2c
 80064f0:	bd90      	pop	{r4, r7, pc}
 80064f2:	46c0      	nop			@ (mov r8, r8)
 80064f4:	20000872 	.word	0x20000872
 80064f8:	2000003c 	.word	0x2000003c
 80064fc:	20000038 	.word	0x20000038
 8006500:	20000874 	.word	0x20000874
 8006504:	0800f990 	.word	0x0800f990
 8006508:	0800f9bc 	.word	0x0800f9bc
 800650c:	2000086c 	.word	0x2000086c
 8006510:	0800f9c0 	.word	0x0800f9c0
 8006514:	0800f940 	.word	0x0800f940
 8006518:	0800f9e4 	.word	0x0800f9e4
 800651c:	0800f914 	.word	0x0800f914
 8006520:	0800fa00 	.word	0x0800fa00
 8006524:	40efffe0 	.word	0x40efffe0
 8006528:	42340000 	.word	0x42340000
 800652c:	40c00000 	.word	0x40c00000
 8006530:	20000878 	.word	0x20000878
 8006534:	20000c78 	.word	0x20000c78
 8006538:	0800fa20 	.word	0x0800fa20

0800653c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800653c:	480d      	ldr	r0, [pc, #52]	@ (8006574 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800653e:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 8006540:	f7ff fab4 	bl	8005aac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006544:	480c      	ldr	r0, [pc, #48]	@ (8006578 <LoopForever+0x6>)
  ldr r1, =_edata
 8006546:	490d      	ldr	r1, [pc, #52]	@ (800657c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006548:	4a0d      	ldr	r2, [pc, #52]	@ (8006580 <LoopForever+0xe>)
  movs r3, #0
 800654a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800654c:	e002      	b.n	8006554 <LoopCopyDataInit>

0800654e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800654e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006550:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006552:	3304      	adds	r3, #4

08006554 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006554:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006556:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006558:	d3f9      	bcc.n	800654e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800655a:	4a0a      	ldr	r2, [pc, #40]	@ (8006584 <LoopForever+0x12>)
  ldr r4, =_ebss
 800655c:	4c0a      	ldr	r4, [pc, #40]	@ (8006588 <LoopForever+0x16>)
  movs r3, #0
 800655e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006560:	e001      	b.n	8006566 <LoopFillZerobss>

08006562 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006562:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006564:	3204      	adds	r2, #4

08006566 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006566:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006568:	d3fb      	bcc.n	8006562 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800656a:	f006 fcb9 	bl	800cee0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800656e:	f7fd fc73 	bl	8003e58 <main>

08006572 <LoopForever>:

LoopForever:
    b LoopForever
 8006572:	e7fe      	b.n	8006572 <LoopForever>
   ldr   r0, =_estack
 8006574:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 8006578:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800657c:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8006580:	0800ff20 	.word	0x0800ff20
  ldr r2, =_sbss
 8006584:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8006588:	200011c8 	.word	0x200011c8

0800658c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800658c:	e7fe      	b.n	800658c <ADC1_COMP_IRQHandler>
	...

08006590 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	b082      	sub	sp, #8
 8006594:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006596:	1dfb      	adds	r3, r7, #7
 8006598:	2200      	movs	r2, #0
 800659a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800659c:	4b0b      	ldr	r3, [pc, #44]	@ (80065cc <HAL_Init+0x3c>)
 800659e:	681a      	ldr	r2, [r3, #0]
 80065a0:	4b0a      	ldr	r3, [pc, #40]	@ (80065cc <HAL_Init+0x3c>)
 80065a2:	2140      	movs	r1, #64	@ 0x40
 80065a4:	430a      	orrs	r2, r1
 80065a6:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80065a8:	2003      	movs	r0, #3
 80065aa:	f000 f811 	bl	80065d0 <HAL_InitTick>
 80065ae:	1e03      	subs	r3, r0, #0
 80065b0:	d003      	beq.n	80065ba <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 80065b2:	1dfb      	adds	r3, r7, #7
 80065b4:	2201      	movs	r2, #1
 80065b6:	701a      	strb	r2, [r3, #0]
 80065b8:	e001      	b.n	80065be <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80065ba:	f7ff f959 	bl	8005870 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80065be:	1dfb      	adds	r3, r7, #7
 80065c0:	781b      	ldrb	r3, [r3, #0]
}
 80065c2:	0018      	movs	r0, r3
 80065c4:	46bd      	mov	sp, r7
 80065c6:	b002      	add	sp, #8
 80065c8:	bd80      	pop	{r7, pc}
 80065ca:	46c0      	nop			@ (mov r8, r8)
 80065cc:	40022000 	.word	0x40022000

080065d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80065d0:	b590      	push	{r4, r7, lr}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80065d8:	4b14      	ldr	r3, [pc, #80]	@ (800662c <HAL_InitTick+0x5c>)
 80065da:	681c      	ldr	r4, [r3, #0]
 80065dc:	4b14      	ldr	r3, [pc, #80]	@ (8006630 <HAL_InitTick+0x60>)
 80065de:	781b      	ldrb	r3, [r3, #0]
 80065e0:	0019      	movs	r1, r3
 80065e2:	23fa      	movs	r3, #250	@ 0xfa
 80065e4:	0098      	lsls	r0, r3, #2
 80065e6:	f7f9 fdab 	bl	8000140 <__udivsi3>
 80065ea:	0003      	movs	r3, r0
 80065ec:	0019      	movs	r1, r3
 80065ee:	0020      	movs	r0, r4
 80065f0:	f7f9 fda6 	bl	8000140 <__udivsi3>
 80065f4:	0003      	movs	r3, r0
 80065f6:	0018      	movs	r0, r3
 80065f8:	f000 f92f 	bl	800685a <HAL_SYSTICK_Config>
 80065fc:	1e03      	subs	r3, r0, #0
 80065fe:	d001      	beq.n	8006604 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8006600:	2301      	movs	r3, #1
 8006602:	e00f      	b.n	8006624 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b03      	cmp	r3, #3
 8006608:	d80b      	bhi.n	8006622 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800660a:	6879      	ldr	r1, [r7, #4]
 800660c:	2301      	movs	r3, #1
 800660e:	425b      	negs	r3, r3
 8006610:	2200      	movs	r2, #0
 8006612:	0018      	movs	r0, r3
 8006614:	f000 f8fc 	bl	8006810 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006618:	4b06      	ldr	r3, [pc, #24]	@ (8006634 <HAL_InitTick+0x64>)
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800661e:	2300      	movs	r3, #0
 8006620:	e000      	b.n	8006624 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8006622:	2301      	movs	r3, #1
}
 8006624:	0018      	movs	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	b003      	add	sp, #12
 800662a:	bd90      	pop	{r4, r7, pc}
 800662c:	2000002c 	.word	0x2000002c
 8006630:	20000044 	.word	0x20000044
 8006634:	20000040 	.word	0x20000040

08006638 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800663c:	4b05      	ldr	r3, [pc, #20]	@ (8006654 <HAL_IncTick+0x1c>)
 800663e:	781b      	ldrb	r3, [r3, #0]
 8006640:	001a      	movs	r2, r3
 8006642:	4b05      	ldr	r3, [pc, #20]	@ (8006658 <HAL_IncTick+0x20>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	18d2      	adds	r2, r2, r3
 8006648:	4b03      	ldr	r3, [pc, #12]	@ (8006658 <HAL_IncTick+0x20>)
 800664a:	601a      	str	r2, [r3, #0]
}
 800664c:	46c0      	nop			@ (mov r8, r8)
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	46c0      	nop			@ (mov r8, r8)
 8006654:	20000044 	.word	0x20000044
 8006658:	20001078 	.word	0x20001078

0800665c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	af00      	add	r7, sp, #0
  return uwTick;
 8006660:	4b02      	ldr	r3, [pc, #8]	@ (800666c <HAL_GetTick+0x10>)
 8006662:	681b      	ldr	r3, [r3, #0]
}
 8006664:	0018      	movs	r0, r3
 8006666:	46bd      	mov	sp, r7
 8006668:	bd80      	pop	{r7, pc}
 800666a:	46c0      	nop			@ (mov r8, r8)
 800666c:	20001078 	.word	0x20001078

08006670 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006678:	f7ff fff0 	bl	800665c <HAL_GetTick>
 800667c:	0003      	movs	r3, r0
 800667e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	3301      	adds	r3, #1
 8006688:	d005      	beq.n	8006696 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800668a:	4b0a      	ldr	r3, [pc, #40]	@ (80066b4 <HAL_Delay+0x44>)
 800668c:	781b      	ldrb	r3, [r3, #0]
 800668e:	001a      	movs	r2, r3
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	189b      	adds	r3, r3, r2
 8006694:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006696:	46c0      	nop			@ (mov r8, r8)
 8006698:	f7ff ffe0 	bl	800665c <HAL_GetTick>
 800669c:	0002      	movs	r2, r0
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	68fa      	ldr	r2, [r7, #12]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d8f7      	bhi.n	8006698 <HAL_Delay+0x28>
  {
  }
}
 80066a8:	46c0      	nop			@ (mov r8, r8)
 80066aa:	46c0      	nop			@ (mov r8, r8)
 80066ac:	46bd      	mov	sp, r7
 80066ae:	b004      	add	sp, #16
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	46c0      	nop			@ (mov r8, r8)
 80066b4:	20000044 	.word	0x20000044

080066b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b082      	sub	sp, #8
 80066bc:	af00      	add	r7, sp, #0
 80066be:	0002      	movs	r2, r0
 80066c0:	1dfb      	adds	r3, r7, #7
 80066c2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066c4:	1dfb      	adds	r3, r7, #7
 80066c6:	781b      	ldrb	r3, [r3, #0]
 80066c8:	2b7f      	cmp	r3, #127	@ 0x7f
 80066ca:	d809      	bhi.n	80066e0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80066cc:	1dfb      	adds	r3, r7, #7
 80066ce:	781b      	ldrb	r3, [r3, #0]
 80066d0:	001a      	movs	r2, r3
 80066d2:	231f      	movs	r3, #31
 80066d4:	401a      	ands	r2, r3
 80066d6:	4b04      	ldr	r3, [pc, #16]	@ (80066e8 <__NVIC_EnableIRQ+0x30>)
 80066d8:	2101      	movs	r1, #1
 80066da:	4091      	lsls	r1, r2
 80066dc:	000a      	movs	r2, r1
 80066de:	601a      	str	r2, [r3, #0]
  }
}
 80066e0:	46c0      	nop			@ (mov r8, r8)
 80066e2:	46bd      	mov	sp, r7
 80066e4:	b002      	add	sp, #8
 80066e6:	bd80      	pop	{r7, pc}
 80066e8:	e000e100 	.word	0xe000e100

080066ec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80066ec:	b590      	push	{r4, r7, lr}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	0002      	movs	r2, r0
 80066f4:	6039      	str	r1, [r7, #0]
 80066f6:	1dfb      	adds	r3, r7, #7
 80066f8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80066fa:	1dfb      	adds	r3, r7, #7
 80066fc:	781b      	ldrb	r3, [r3, #0]
 80066fe:	2b7f      	cmp	r3, #127	@ 0x7f
 8006700:	d828      	bhi.n	8006754 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006702:	4a2f      	ldr	r2, [pc, #188]	@ (80067c0 <__NVIC_SetPriority+0xd4>)
 8006704:	1dfb      	adds	r3, r7, #7
 8006706:	781b      	ldrb	r3, [r3, #0]
 8006708:	b25b      	sxtb	r3, r3
 800670a:	089b      	lsrs	r3, r3, #2
 800670c:	33c0      	adds	r3, #192	@ 0xc0
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	589b      	ldr	r3, [r3, r2]
 8006712:	1dfa      	adds	r2, r7, #7
 8006714:	7812      	ldrb	r2, [r2, #0]
 8006716:	0011      	movs	r1, r2
 8006718:	2203      	movs	r2, #3
 800671a:	400a      	ands	r2, r1
 800671c:	00d2      	lsls	r2, r2, #3
 800671e:	21ff      	movs	r1, #255	@ 0xff
 8006720:	4091      	lsls	r1, r2
 8006722:	000a      	movs	r2, r1
 8006724:	43d2      	mvns	r2, r2
 8006726:	401a      	ands	r2, r3
 8006728:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	019b      	lsls	r3, r3, #6
 800672e:	22ff      	movs	r2, #255	@ 0xff
 8006730:	401a      	ands	r2, r3
 8006732:	1dfb      	adds	r3, r7, #7
 8006734:	781b      	ldrb	r3, [r3, #0]
 8006736:	0018      	movs	r0, r3
 8006738:	2303      	movs	r3, #3
 800673a:	4003      	ands	r3, r0
 800673c:	00db      	lsls	r3, r3, #3
 800673e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006740:	481f      	ldr	r0, [pc, #124]	@ (80067c0 <__NVIC_SetPriority+0xd4>)
 8006742:	1dfb      	adds	r3, r7, #7
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	b25b      	sxtb	r3, r3
 8006748:	089b      	lsrs	r3, r3, #2
 800674a:	430a      	orrs	r2, r1
 800674c:	33c0      	adds	r3, #192	@ 0xc0
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8006752:	e031      	b.n	80067b8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006754:	4a1b      	ldr	r2, [pc, #108]	@ (80067c4 <__NVIC_SetPriority+0xd8>)
 8006756:	1dfb      	adds	r3, r7, #7
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	0019      	movs	r1, r3
 800675c:	230f      	movs	r3, #15
 800675e:	400b      	ands	r3, r1
 8006760:	3b08      	subs	r3, #8
 8006762:	089b      	lsrs	r3, r3, #2
 8006764:	3306      	adds	r3, #6
 8006766:	009b      	lsls	r3, r3, #2
 8006768:	18d3      	adds	r3, r2, r3
 800676a:	3304      	adds	r3, #4
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	1dfa      	adds	r2, r7, #7
 8006770:	7812      	ldrb	r2, [r2, #0]
 8006772:	0011      	movs	r1, r2
 8006774:	2203      	movs	r2, #3
 8006776:	400a      	ands	r2, r1
 8006778:	00d2      	lsls	r2, r2, #3
 800677a:	21ff      	movs	r1, #255	@ 0xff
 800677c:	4091      	lsls	r1, r2
 800677e:	000a      	movs	r2, r1
 8006780:	43d2      	mvns	r2, r2
 8006782:	401a      	ands	r2, r3
 8006784:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	019b      	lsls	r3, r3, #6
 800678a:	22ff      	movs	r2, #255	@ 0xff
 800678c:	401a      	ands	r2, r3
 800678e:	1dfb      	adds	r3, r7, #7
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	0018      	movs	r0, r3
 8006794:	2303      	movs	r3, #3
 8006796:	4003      	ands	r3, r0
 8006798:	00db      	lsls	r3, r3, #3
 800679a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800679c:	4809      	ldr	r0, [pc, #36]	@ (80067c4 <__NVIC_SetPriority+0xd8>)
 800679e:	1dfb      	adds	r3, r7, #7
 80067a0:	781b      	ldrb	r3, [r3, #0]
 80067a2:	001c      	movs	r4, r3
 80067a4:	230f      	movs	r3, #15
 80067a6:	4023      	ands	r3, r4
 80067a8:	3b08      	subs	r3, #8
 80067aa:	089b      	lsrs	r3, r3, #2
 80067ac:	430a      	orrs	r2, r1
 80067ae:	3306      	adds	r3, #6
 80067b0:	009b      	lsls	r3, r3, #2
 80067b2:	18c3      	adds	r3, r0, r3
 80067b4:	3304      	adds	r3, #4
 80067b6:	601a      	str	r2, [r3, #0]
}
 80067b8:	46c0      	nop			@ (mov r8, r8)
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b003      	add	sp, #12
 80067be:	bd90      	pop	{r4, r7, pc}
 80067c0:	e000e100 	.word	0xe000e100
 80067c4:	e000ed00 	.word	0xe000ed00

080067c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80067c8:	b580      	push	{r7, lr}
 80067ca:	b082      	sub	sp, #8
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	1e5a      	subs	r2, r3, #1
 80067d4:	2380      	movs	r3, #128	@ 0x80
 80067d6:	045b      	lsls	r3, r3, #17
 80067d8:	429a      	cmp	r2, r3
 80067da:	d301      	bcc.n	80067e0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80067dc:	2301      	movs	r3, #1
 80067de:	e010      	b.n	8006802 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80067e0:	4b0a      	ldr	r3, [pc, #40]	@ (800680c <SysTick_Config+0x44>)
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	3a01      	subs	r2, #1
 80067e6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80067e8:	2301      	movs	r3, #1
 80067ea:	425b      	negs	r3, r3
 80067ec:	2103      	movs	r1, #3
 80067ee:	0018      	movs	r0, r3
 80067f0:	f7ff ff7c 	bl	80066ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80067f4:	4b05      	ldr	r3, [pc, #20]	@ (800680c <SysTick_Config+0x44>)
 80067f6:	2200      	movs	r2, #0
 80067f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80067fa:	4b04      	ldr	r3, [pc, #16]	@ (800680c <SysTick_Config+0x44>)
 80067fc:	2207      	movs	r2, #7
 80067fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006800:	2300      	movs	r3, #0
}
 8006802:	0018      	movs	r0, r3
 8006804:	46bd      	mov	sp, r7
 8006806:	b002      	add	sp, #8
 8006808:	bd80      	pop	{r7, pc}
 800680a:	46c0      	nop			@ (mov r8, r8)
 800680c:	e000e010 	.word	0xe000e010

08006810 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006810:	b580      	push	{r7, lr}
 8006812:	b084      	sub	sp, #16
 8006814:	af00      	add	r7, sp, #0
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	210f      	movs	r1, #15
 800681c:	187b      	adds	r3, r7, r1
 800681e:	1c02      	adds	r2, r0, #0
 8006820:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8006822:	68ba      	ldr	r2, [r7, #8]
 8006824:	187b      	adds	r3, r7, r1
 8006826:	781b      	ldrb	r3, [r3, #0]
 8006828:	b25b      	sxtb	r3, r3
 800682a:	0011      	movs	r1, r2
 800682c:	0018      	movs	r0, r3
 800682e:	f7ff ff5d 	bl	80066ec <__NVIC_SetPriority>
}
 8006832:	46c0      	nop			@ (mov r8, r8)
 8006834:	46bd      	mov	sp, r7
 8006836:	b004      	add	sp, #16
 8006838:	bd80      	pop	{r7, pc}

0800683a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800683a:	b580      	push	{r7, lr}
 800683c:	b082      	sub	sp, #8
 800683e:	af00      	add	r7, sp, #0
 8006840:	0002      	movs	r2, r0
 8006842:	1dfb      	adds	r3, r7, #7
 8006844:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006846:	1dfb      	adds	r3, r7, #7
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	b25b      	sxtb	r3, r3
 800684c:	0018      	movs	r0, r3
 800684e:	f7ff ff33 	bl	80066b8 <__NVIC_EnableIRQ>
}
 8006852:	46c0      	nop			@ (mov r8, r8)
 8006854:	46bd      	mov	sp, r7
 8006856:	b002      	add	sp, #8
 8006858:	bd80      	pop	{r7, pc}

0800685a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800685a:	b580      	push	{r7, lr}
 800685c:	b082      	sub	sp, #8
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	0018      	movs	r0, r3
 8006866:	f7ff ffaf 	bl	80067c8 <SysTick_Config>
 800686a:	0003      	movs	r3, r0
}
 800686c:	0018      	movs	r0, r3
 800686e:	46bd      	mov	sp, r7
 8006870:	b002      	add	sp, #8
 8006872:	bd80      	pop	{r7, pc}

08006874 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b084      	sub	sp, #16
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e061      	b.n	800694a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a32      	ldr	r2, [pc, #200]	@ (8006954 <HAL_DMA_Init+0xe0>)
 800688c:	4694      	mov	ip, r2
 800688e:	4463      	add	r3, ip
 8006890:	2114      	movs	r1, #20
 8006892:	0018      	movs	r0, r3
 8006894:	f7f9 fc54 	bl	8000140 <__udivsi3>
 8006898:	0003      	movs	r3, r0
 800689a:	009a      	lsls	r2, r3, #2
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	4a2d      	ldr	r2, [pc, #180]	@ (8006958 <HAL_DMA_Init+0xe4>)
 80068a4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2225      	movs	r2, #37	@ 0x25
 80068aa:	2102      	movs	r1, #2
 80068ac:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	4a28      	ldr	r2, [pc, #160]	@ (800695c <HAL_DMA_Init+0xe8>)
 80068ba:	4013      	ands	r3, r2
 80068bc:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80068c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	691b      	ldr	r3, [r3, #16]
 80068cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80068d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	699b      	ldr	r3, [r3, #24]
 80068d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80068de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6a1b      	ldr	r3, [r3, #32]
 80068e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	68fa      	ldr	r2, [r7, #12]
 80068f2:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	689a      	ldr	r2, [r3, #8]
 80068f8:	2380      	movs	r3, #128	@ 0x80
 80068fa:	01db      	lsls	r3, r3, #7
 80068fc:	429a      	cmp	r2, r3
 80068fe:	d018      	beq.n	8006932 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8006900:	4b17      	ldr	r3, [pc, #92]	@ (8006960 <HAL_DMA_Init+0xec>)
 8006902:	681a      	ldr	r2, [r3, #0]
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006908:	211c      	movs	r1, #28
 800690a:	400b      	ands	r3, r1
 800690c:	210f      	movs	r1, #15
 800690e:	4099      	lsls	r1, r3
 8006910:	000b      	movs	r3, r1
 8006912:	43d9      	mvns	r1, r3
 8006914:	4b12      	ldr	r3, [pc, #72]	@ (8006960 <HAL_DMA_Init+0xec>)
 8006916:	400a      	ands	r2, r1
 8006918:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800691a:	4b11      	ldr	r3, [pc, #68]	@ (8006960 <HAL_DMA_Init+0xec>)
 800691c:	6819      	ldr	r1, [r3, #0]
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	685a      	ldr	r2, [r3, #4]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006926:	201c      	movs	r0, #28
 8006928:	4003      	ands	r3, r0
 800692a:	409a      	lsls	r2, r3
 800692c:	4b0c      	ldr	r3, [pc, #48]	@ (8006960 <HAL_DMA_Init+0xec>)
 800692e:	430a      	orrs	r2, r1
 8006930:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2200      	movs	r2, #0
 8006936:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2225      	movs	r2, #37	@ 0x25
 800693c:	2101      	movs	r1, #1
 800693e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	2224      	movs	r2, #36	@ 0x24
 8006944:	2100      	movs	r1, #0
 8006946:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006948:	2300      	movs	r3, #0
}
 800694a:	0018      	movs	r0, r3
 800694c:	46bd      	mov	sp, r7
 800694e:	b004      	add	sp, #16
 8006950:	bd80      	pop	{r7, pc}
 8006952:	46c0      	nop			@ (mov r8, r8)
 8006954:	bffdfff8 	.word	0xbffdfff8
 8006958:	40020000 	.word	0x40020000
 800695c:	ffff800f 	.word	0xffff800f
 8006960:	400200a8 	.word	0x400200a8

08006964 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	b086      	sub	sp, #24
 8006968:	af00      	add	r7, sp, #0
 800696a:	60f8      	str	r0, [r7, #12]
 800696c:	60b9      	str	r1, [r7, #8]
 800696e:	607a      	str	r2, [r7, #4]
 8006970:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006972:	2317      	movs	r3, #23
 8006974:	18fb      	adds	r3, r7, r3
 8006976:	2200      	movs	r2, #0
 8006978:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2224      	movs	r2, #36	@ 0x24
 800697e:	5c9b      	ldrb	r3, [r3, r2]
 8006980:	2b01      	cmp	r3, #1
 8006982:	d101      	bne.n	8006988 <HAL_DMA_Start_IT+0x24>
 8006984:	2302      	movs	r3, #2
 8006986:	e04f      	b.n	8006a28 <HAL_DMA_Start_IT+0xc4>
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	2224      	movs	r2, #36	@ 0x24
 800698c:	2101      	movs	r1, #1
 800698e:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	2225      	movs	r2, #37	@ 0x25
 8006994:	5c9b      	ldrb	r3, [r3, r2]
 8006996:	b2db      	uxtb	r3, r3
 8006998:	2b01      	cmp	r3, #1
 800699a:	d13a      	bne.n	8006a12 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2225      	movs	r2, #37	@ 0x25
 80069a0:	2102      	movs	r1, #2
 80069a2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2101      	movs	r1, #1
 80069b6:	438a      	bics	r2, r1
 80069b8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	68b9      	ldr	r1, [r7, #8]
 80069c0:	68f8      	ldr	r0, [r7, #12]
 80069c2:	f000 f980 	bl	8006cc6 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d008      	beq.n	80069e0 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	210e      	movs	r1, #14
 80069da:	430a      	orrs	r2, r1
 80069dc:	601a      	str	r2, [r3, #0]
 80069de:	e00f      	b.n	8006a00 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	2104      	movs	r1, #4
 80069ec:	438a      	bics	r2, r1
 80069ee:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681a      	ldr	r2, [r3, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	210a      	movs	r1, #10
 80069fc:	430a      	orrs	r2, r1
 80069fe:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2101      	movs	r1, #1
 8006a0c:	430a      	orrs	r2, r1
 8006a0e:	601a      	str	r2, [r3, #0]
 8006a10:	e007      	b.n	8006a22 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	2224      	movs	r2, #36	@ 0x24
 8006a16:	2100      	movs	r1, #0
 8006a18:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8006a1a:	2317      	movs	r3, #23
 8006a1c:	18fb      	adds	r3, r7, r3
 8006a1e:	2202      	movs	r2, #2
 8006a20:	701a      	strb	r2, [r3, #0]
  }
  return status;
 8006a22:	2317      	movs	r3, #23
 8006a24:	18fb      	adds	r3, r7, r3
 8006a26:	781b      	ldrb	r3, [r3, #0]
}
 8006a28:	0018      	movs	r0, r3
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	b006      	add	sp, #24
 8006a2e:	bd80      	pop	{r7, pc}

08006a30 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006a30:	b580      	push	{r7, lr}
 8006a32:	b084      	sub	sp, #16
 8006a34:	af00      	add	r7, sp, #0
 8006a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006a38:	230f      	movs	r3, #15
 8006a3a:	18fb      	adds	r3, r7, r3
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2225      	movs	r2, #37	@ 0x25
 8006a44:	5c9b      	ldrb	r3, [r3, r2]
 8006a46:	b2db      	uxtb	r3, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d008      	beq.n	8006a5e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2204      	movs	r2, #4
 8006a50:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	2224      	movs	r2, #36	@ 0x24
 8006a56:	2100      	movs	r1, #0
 8006a58:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006a5a:	2301      	movs	r3, #1
 8006a5c:	e024      	b.n	8006aa8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	210e      	movs	r1, #14
 8006a6a:	438a      	bics	r2, r1
 8006a6c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	2101      	movs	r1, #1
 8006a7a:	438a      	bics	r2, r1
 8006a7c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006a82:	221c      	movs	r2, #28
 8006a84:	401a      	ands	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8a:	2101      	movs	r1, #1
 8006a8c:	4091      	lsls	r1, r2
 8006a8e:	000a      	movs	r2, r1
 8006a90:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2225      	movs	r2, #37	@ 0x25
 8006a96:	2101      	movs	r1, #1
 8006a98:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2224      	movs	r2, #36	@ 0x24
 8006a9e:	2100      	movs	r1, #0
 8006aa0:	5499      	strb	r1, [r3, r2]

    return status;
 8006aa2:	230f      	movs	r3, #15
 8006aa4:	18fb      	adds	r3, r7, r3
 8006aa6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006aa8:	0018      	movs	r0, r3
 8006aaa:	46bd      	mov	sp, r7
 8006aac:	b004      	add	sp, #16
 8006aae:	bd80      	pop	{r7, pc}

08006ab0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006ab0:	b580      	push	{r7, lr}
 8006ab2:	b084      	sub	sp, #16
 8006ab4:	af00      	add	r7, sp, #0
 8006ab6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006ab8:	210f      	movs	r1, #15
 8006aba:	187b      	adds	r3, r7, r1
 8006abc:	2200      	movs	r2, #0
 8006abe:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2225      	movs	r2, #37	@ 0x25
 8006ac4:	5c9b      	ldrb	r3, [r3, r2]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	2b02      	cmp	r3, #2
 8006aca:	d006      	beq.n	8006ada <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2204      	movs	r2, #4
 8006ad0:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8006ad2:	187b      	adds	r3, r7, r1
 8006ad4:	2201      	movs	r2, #1
 8006ad6:	701a      	strb	r2, [r3, #0]
 8006ad8:	e02a      	b.n	8006b30 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	681a      	ldr	r2, [r3, #0]
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	210e      	movs	r1, #14
 8006ae6:	438a      	bics	r2, r1
 8006ae8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	681a      	ldr	r2, [r3, #0]
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	2101      	movs	r1, #1
 8006af6:	438a      	bics	r2, r1
 8006af8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006afe:	221c      	movs	r2, #28
 8006b00:	401a      	ands	r2, r3
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b06:	2101      	movs	r1, #1
 8006b08:	4091      	lsls	r1, r2
 8006b0a:	000a      	movs	r2, r1
 8006b0c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2225      	movs	r2, #37	@ 0x25
 8006b12:	2101      	movs	r1, #1
 8006b14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	@ 0x24
 8006b1a:	2100      	movs	r1, #0
 8006b1c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d004      	beq.n	8006b30 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b2a:	687a      	ldr	r2, [r7, #4]
 8006b2c:	0010      	movs	r0, r2
 8006b2e:	4798      	blx	r3
    }
  }
  return status;
 8006b30:	230f      	movs	r3, #15
 8006b32:	18fb      	adds	r3, r7, r3
 8006b34:	781b      	ldrb	r3, [r3, #0]
}
 8006b36:	0018      	movs	r0, r3
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	b004      	add	sp, #16
 8006b3c:	bd80      	pop	{r7, pc}

08006b3e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b084      	sub	sp, #16
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b5a:	221c      	movs	r2, #28
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2204      	movs	r2, #4
 8006b60:	409a      	lsls	r2, r3
 8006b62:	0013      	movs	r3, r2
 8006b64:	68fa      	ldr	r2, [r7, #12]
 8006b66:	4013      	ands	r3, r2
 8006b68:	d026      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x7a>
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	2204      	movs	r2, #4
 8006b6e:	4013      	ands	r3, r2
 8006b70:	d022      	beq.n	8006bb8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	4013      	ands	r3, r2
 8006b7c:	d107      	bne.n	8006b8e <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	681a      	ldr	r2, [r3, #0]
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2104      	movs	r1, #4
 8006b8a:	438a      	bics	r2, r1
 8006b8c:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006b92:	221c      	movs	r2, #28
 8006b94:	401a      	ands	r2, r3
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9a:	2104      	movs	r1, #4
 8006b9c:	4091      	lsls	r1, r2
 8006b9e:	000a      	movs	r2, r1
 8006ba0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d100      	bne.n	8006bac <HAL_DMA_IRQHandler+0x6e>
 8006baa:	e071      	b.n	8006c90 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bb0:	687a      	ldr	r2, [r7, #4]
 8006bb2:	0010      	movs	r0, r2
 8006bb4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 8006bb6:	e06b      	b.n	8006c90 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bbc:	221c      	movs	r2, #28
 8006bbe:	4013      	ands	r3, r2
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	409a      	lsls	r2, r3
 8006bc4:	0013      	movs	r3, r2
 8006bc6:	68fa      	ldr	r2, [r7, #12]
 8006bc8:	4013      	ands	r3, r2
 8006bca:	d02d      	beq.n	8006c28 <HAL_DMA_IRQHandler+0xea>
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	2202      	movs	r2, #2
 8006bd0:	4013      	ands	r3, r2
 8006bd2:	d029      	beq.n	8006c28 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	4013      	ands	r3, r2
 8006bde:	d10b      	bne.n	8006bf8 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681a      	ldr	r2, [r3, #0]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	210a      	movs	r1, #10
 8006bec:	438a      	bics	r2, r1
 8006bee:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2225      	movs	r2, #37	@ 0x25
 8006bf4:	2101      	movs	r1, #1
 8006bf6:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006bfc:	221c      	movs	r2, #28
 8006bfe:	401a      	ands	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c04:	2102      	movs	r1, #2
 8006c06:	4091      	lsls	r1, r2
 8006c08:	000a      	movs	r2, r1
 8006c0a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2224      	movs	r2, #36	@ 0x24
 8006c10:	2100      	movs	r1, #0
 8006c12:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d039      	beq.n	8006c90 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	0010      	movs	r0, r2
 8006c24:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006c26:	e033      	b.n	8006c90 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c2c:	221c      	movs	r2, #28
 8006c2e:	4013      	ands	r3, r2
 8006c30:	2208      	movs	r2, #8
 8006c32:	409a      	lsls	r2, r3
 8006c34:	0013      	movs	r3, r2
 8006c36:	68fa      	ldr	r2, [r7, #12]
 8006c38:	4013      	ands	r3, r2
 8006c3a:	d02a      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x154>
 8006c3c:	68bb      	ldr	r3, [r7, #8]
 8006c3e:	2208      	movs	r2, #8
 8006c40:	4013      	ands	r3, r2
 8006c42:	d026      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	681a      	ldr	r2, [r3, #0]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	210e      	movs	r1, #14
 8006c50:	438a      	bics	r2, r1
 8006c52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006c58:	221c      	movs	r2, #28
 8006c5a:	401a      	ands	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c60:	2101      	movs	r1, #1
 8006c62:	4091      	lsls	r1, r2
 8006c64:	000a      	movs	r2, r1
 8006c66:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2225      	movs	r2, #37	@ 0x25
 8006c72:	2101      	movs	r1, #1
 8006c74:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2224      	movs	r2, #36	@ 0x24
 8006c7a:	2100      	movs	r1, #0
 8006c7c:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d005      	beq.n	8006c92 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	0010      	movs	r0, r2
 8006c8e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8006c90:	46c0      	nop			@ (mov r8, r8)
 8006c92:	46c0      	nop			@ (mov r8, r8)
}
 8006c94:	46bd      	mov	sp, r7
 8006c96:	b004      	add	sp, #16
 8006c98:	bd80      	pop	{r7, pc}

08006c9a <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8006c9a:	b580      	push	{r7, lr}
 8006c9c:	b082      	sub	sp, #8
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2225      	movs	r2, #37	@ 0x25
 8006ca6:	5c9b      	ldrb	r3, [r3, r2]
 8006ca8:	b2db      	uxtb	r3, r3
}
 8006caa:	0018      	movs	r0, r3
 8006cac:	46bd      	mov	sp, r7
 8006cae:	b002      	add	sp, #8
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_DMA_GetError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8006cb2:	b580      	push	{r7, lr}
 8006cb4:	b082      	sub	sp, #8
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
}
 8006cbe:	0018      	movs	r0, r3
 8006cc0:	46bd      	mov	sp, r7
 8006cc2:	b002      	add	sp, #8
 8006cc4:	bd80      	pop	{r7, pc}

08006cc6 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006cc6:	b580      	push	{r7, lr}
 8006cc8:	b084      	sub	sp, #16
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	60f8      	str	r0, [r7, #12]
 8006cce:	60b9      	str	r1, [r7, #8]
 8006cd0:	607a      	str	r2, [r7, #4]
 8006cd2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cd8:	221c      	movs	r2, #28
 8006cda:	401a      	ands	r2, r3
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ce0:	2101      	movs	r1, #1
 8006ce2:	4091      	lsls	r1, r2
 8006ce4:	000a      	movs	r2, r1
 8006ce6:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	689b      	ldr	r3, [r3, #8]
 8006cf4:	2b10      	cmp	r3, #16
 8006cf6:	d108      	bne.n	8006d0a <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	687a      	ldr	r2, [r7, #4]
 8006cfe:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68ba      	ldr	r2, [r7, #8]
 8006d06:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006d08:	e007      	b.n	8006d1a <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	68ba      	ldr	r2, [r7, #8]
 8006d10:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	60da      	str	r2, [r3, #12]
}
 8006d1a:	46c0      	nop			@ (mov r8, r8)
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	b004      	add	sp, #16
 8006d20:	bd80      	pop	{r7, pc}
	...

08006d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006d32:	2300      	movs	r3, #0
 8006d34:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8006d36:	2300      	movs	r3, #0
 8006d38:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8006d3a:	e155      	b.n	8006fe8 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2101      	movs	r1, #1
 8006d42:	697a      	ldr	r2, [r7, #20]
 8006d44:	4091      	lsls	r1, r2
 8006d46:	000a      	movs	r2, r1
 8006d48:	4013      	ands	r3, r2
 8006d4a:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d100      	bne.n	8006d54 <HAL_GPIO_Init+0x30>
 8006d52:	e146      	b.n	8006fe2 <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	685b      	ldr	r3, [r3, #4]
 8006d58:	2203      	movs	r2, #3
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d005      	beq.n	8006d6c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	2203      	movs	r2, #3
 8006d66:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8006d68:	2b02      	cmp	r3, #2
 8006d6a:	d130      	bne.n	8006dce <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	005b      	lsls	r3, r3, #1
 8006d76:	2203      	movs	r2, #3
 8006d78:	409a      	lsls	r2, r3
 8006d7a:	0013      	movs	r3, r2
 8006d7c:	43da      	mvns	r2, r3
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	4013      	ands	r3, r2
 8006d82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	68da      	ldr	r2, [r3, #12]
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	005b      	lsls	r3, r3, #1
 8006d8c:	409a      	lsls	r2, r3
 8006d8e:	0013      	movs	r3, r2
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	685b      	ldr	r3, [r3, #4]
 8006da0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006da2:	2201      	movs	r2, #1
 8006da4:	697b      	ldr	r3, [r7, #20]
 8006da6:	409a      	lsls	r2, r3
 8006da8:	0013      	movs	r3, r2
 8006daa:	43da      	mvns	r2, r3
 8006dac:	693b      	ldr	r3, [r7, #16]
 8006dae:	4013      	ands	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	091b      	lsrs	r3, r3, #4
 8006db8:	2201      	movs	r2, #1
 8006dba:	401a      	ands	r2, r3
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	409a      	lsls	r2, r3
 8006dc0:	0013      	movs	r3, r2
 8006dc2:	693a      	ldr	r2, [r7, #16]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	693a      	ldr	r2, [r7, #16]
 8006dcc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	2b03      	cmp	r3, #3
 8006dd8:	d017      	beq.n	8006e0a <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	005b      	lsls	r3, r3, #1
 8006de4:	2203      	movs	r2, #3
 8006de6:	409a      	lsls	r2, r3
 8006de8:	0013      	movs	r3, r2
 8006dea:	43da      	mvns	r2, r3
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	4013      	ands	r3, r2
 8006df0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006df2:	683b      	ldr	r3, [r7, #0]
 8006df4:	689a      	ldr	r2, [r3, #8]
 8006df6:	697b      	ldr	r3, [r7, #20]
 8006df8:	005b      	lsls	r3, r3, #1
 8006dfa:	409a      	lsls	r2, r3
 8006dfc:	0013      	movs	r3, r2
 8006dfe:	693a      	ldr	r2, [r7, #16]
 8006e00:	4313      	orrs	r3, r2
 8006e02:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	693a      	ldr	r2, [r7, #16]
 8006e08:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	685b      	ldr	r3, [r3, #4]
 8006e0e:	2203      	movs	r2, #3
 8006e10:	4013      	ands	r3, r2
 8006e12:	2b02      	cmp	r3, #2
 8006e14:	d123      	bne.n	8006e5e <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006e16:	697b      	ldr	r3, [r7, #20]
 8006e18:	08da      	lsrs	r2, r3, #3
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	3208      	adds	r2, #8
 8006e1e:	0092      	lsls	r2, r2, #2
 8006e20:	58d3      	ldr	r3, [r2, r3]
 8006e22:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	2207      	movs	r2, #7
 8006e28:	4013      	ands	r3, r2
 8006e2a:	009b      	lsls	r3, r3, #2
 8006e2c:	220f      	movs	r2, #15
 8006e2e:	409a      	lsls	r2, r3
 8006e30:	0013      	movs	r3, r2
 8006e32:	43da      	mvns	r2, r3
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	4013      	ands	r3, r2
 8006e38:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8006e3a:	683b      	ldr	r3, [r7, #0]
 8006e3c:	691a      	ldr	r2, [r3, #16]
 8006e3e:	697b      	ldr	r3, [r7, #20]
 8006e40:	2107      	movs	r1, #7
 8006e42:	400b      	ands	r3, r1
 8006e44:	009b      	lsls	r3, r3, #2
 8006e46:	409a      	lsls	r2, r3
 8006e48:	0013      	movs	r3, r2
 8006e4a:	693a      	ldr	r2, [r7, #16]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	08da      	lsrs	r2, r3, #3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	3208      	adds	r2, #8
 8006e58:	0092      	lsls	r2, r2, #2
 8006e5a:	6939      	ldr	r1, [r7, #16]
 8006e5c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	005b      	lsls	r3, r3, #1
 8006e68:	2203      	movs	r2, #3
 8006e6a:	409a      	lsls	r2, r3
 8006e6c:	0013      	movs	r3, r2
 8006e6e:	43da      	mvns	r2, r3
 8006e70:	693b      	ldr	r3, [r7, #16]
 8006e72:	4013      	ands	r3, r2
 8006e74:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	401a      	ands	r2, r3
 8006e7e:	697b      	ldr	r3, [r7, #20]
 8006e80:	005b      	lsls	r3, r3, #1
 8006e82:	409a      	lsls	r2, r3
 8006e84:	0013      	movs	r3, r2
 8006e86:	693a      	ldr	r2, [r7, #16]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	685a      	ldr	r2, [r3, #4]
 8006e96:	23c0      	movs	r3, #192	@ 0xc0
 8006e98:	029b      	lsls	r3, r3, #10
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	d100      	bne.n	8006ea0 <HAL_GPIO_Init+0x17c>
 8006e9e:	e0a0      	b.n	8006fe2 <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006ea0:	4b57      	ldr	r3, [pc, #348]	@ (8007000 <HAL_GPIO_Init+0x2dc>)
 8006ea2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006ea4:	4b56      	ldr	r3, [pc, #344]	@ (8007000 <HAL_GPIO_Init+0x2dc>)
 8006ea6:	2101      	movs	r1, #1
 8006ea8:	430a      	orrs	r2, r1
 8006eaa:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8006eac:	4a55      	ldr	r2, [pc, #340]	@ (8007004 <HAL_GPIO_Init+0x2e0>)
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	089b      	lsrs	r3, r3, #2
 8006eb2:	3302      	adds	r3, #2
 8006eb4:	009b      	lsls	r3, r3, #2
 8006eb6:	589b      	ldr	r3, [r3, r2]
 8006eb8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2203      	movs	r2, #3
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	220f      	movs	r2, #15
 8006ec4:	409a      	lsls	r2, r3
 8006ec6:	0013      	movs	r3, r2
 8006ec8:	43da      	mvns	r2, r3
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	4013      	ands	r3, r2
 8006ece:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	23a0      	movs	r3, #160	@ 0xa0
 8006ed4:	05db      	lsls	r3, r3, #23
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d01f      	beq.n	8006f1a <HAL_GPIO_Init+0x1f6>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a4a      	ldr	r2, [pc, #296]	@ (8007008 <HAL_GPIO_Init+0x2e4>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d019      	beq.n	8006f16 <HAL_GPIO_Init+0x1f2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a49      	ldr	r2, [pc, #292]	@ (800700c <HAL_GPIO_Init+0x2e8>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d013      	beq.n	8006f12 <HAL_GPIO_Init+0x1ee>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a48      	ldr	r2, [pc, #288]	@ (8007010 <HAL_GPIO_Init+0x2ec>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d00d      	beq.n	8006f0e <HAL_GPIO_Init+0x1ea>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a47      	ldr	r2, [pc, #284]	@ (8007014 <HAL_GPIO_Init+0x2f0>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d007      	beq.n	8006f0a <HAL_GPIO_Init+0x1e6>
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	4a46      	ldr	r2, [pc, #280]	@ (8007018 <HAL_GPIO_Init+0x2f4>)
 8006efe:	4293      	cmp	r3, r2
 8006f00:	d101      	bne.n	8006f06 <HAL_GPIO_Init+0x1e2>
 8006f02:	2305      	movs	r3, #5
 8006f04:	e00a      	b.n	8006f1c <HAL_GPIO_Init+0x1f8>
 8006f06:	2306      	movs	r3, #6
 8006f08:	e008      	b.n	8006f1c <HAL_GPIO_Init+0x1f8>
 8006f0a:	2304      	movs	r3, #4
 8006f0c:	e006      	b.n	8006f1c <HAL_GPIO_Init+0x1f8>
 8006f0e:	2303      	movs	r3, #3
 8006f10:	e004      	b.n	8006f1c <HAL_GPIO_Init+0x1f8>
 8006f12:	2302      	movs	r3, #2
 8006f14:	e002      	b.n	8006f1c <HAL_GPIO_Init+0x1f8>
 8006f16:	2301      	movs	r3, #1
 8006f18:	e000      	b.n	8006f1c <HAL_GPIO_Init+0x1f8>
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	2103      	movs	r1, #3
 8006f20:	400a      	ands	r2, r1
 8006f22:	0092      	lsls	r2, r2, #2
 8006f24:	4093      	lsls	r3, r2
 8006f26:	693a      	ldr	r2, [r7, #16]
 8006f28:	4313      	orrs	r3, r2
 8006f2a:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f2c:	4935      	ldr	r1, [pc, #212]	@ (8007004 <HAL_GPIO_Init+0x2e0>)
 8006f2e:	697b      	ldr	r3, [r7, #20]
 8006f30:	089b      	lsrs	r3, r3, #2
 8006f32:	3302      	adds	r3, #2
 8006f34:	009b      	lsls	r3, r3, #2
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f3a:	4b38      	ldr	r3, [pc, #224]	@ (800701c <HAL_GPIO_Init+0x2f8>)
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	43da      	mvns	r2, r3
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	4013      	ands	r3, r2
 8006f48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	2380      	movs	r3, #128	@ 0x80
 8006f50:	035b      	lsls	r3, r3, #13
 8006f52:	4013      	ands	r3, r2
 8006f54:	d003      	beq.n	8006f5e <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 8006f56:	693a      	ldr	r2, [r7, #16]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8006f5e:	4b2f      	ldr	r3, [pc, #188]	@ (800701c <HAL_GPIO_Init+0x2f8>)
 8006f60:	693a      	ldr	r2, [r7, #16]
 8006f62:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8006f64:	4b2d      	ldr	r3, [pc, #180]	@ (800701c <HAL_GPIO_Init+0x2f8>)
 8006f66:	68db      	ldr	r3, [r3, #12]
 8006f68:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	43da      	mvns	r2, r3
 8006f6e:	693b      	ldr	r3, [r7, #16]
 8006f70:	4013      	ands	r3, r2
 8006f72:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	685a      	ldr	r2, [r3, #4]
 8006f78:	2380      	movs	r3, #128	@ 0x80
 8006f7a:	039b      	lsls	r3, r3, #14
 8006f7c:	4013      	ands	r3, r2
 8006f7e:	d003      	beq.n	8006f88 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	4313      	orrs	r3, r2
 8006f86:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8006f88:	4b24      	ldr	r3, [pc, #144]	@ (800701c <HAL_GPIO_Init+0x2f8>)
 8006f8a:	693a      	ldr	r2, [r7, #16]
 8006f8c:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 8006f8e:	4b23      	ldr	r3, [pc, #140]	@ (800701c <HAL_GPIO_Init+0x2f8>)
 8006f90:	685b      	ldr	r3, [r3, #4]
 8006f92:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	43da      	mvns	r2, r3
 8006f98:	693b      	ldr	r3, [r7, #16]
 8006f9a:	4013      	ands	r3, r2
 8006f9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	685a      	ldr	r2, [r3, #4]
 8006fa2:	2380      	movs	r3, #128	@ 0x80
 8006fa4:	029b      	lsls	r3, r3, #10
 8006fa6:	4013      	ands	r3, r2
 8006fa8:	d003      	beq.n	8006fb2 <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8006fb2:	4b1a      	ldr	r3, [pc, #104]	@ (800701c <HAL_GPIO_Init+0x2f8>)
 8006fb4:	693a      	ldr	r2, [r7, #16]
 8006fb6:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006fb8:	4b18      	ldr	r3, [pc, #96]	@ (800701c <HAL_GPIO_Init+0x2f8>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	43da      	mvns	r2, r3
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	4013      	ands	r3, r2
 8006fc6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	685a      	ldr	r2, [r3, #4]
 8006fcc:	2380      	movs	r3, #128	@ 0x80
 8006fce:	025b      	lsls	r3, r3, #9
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	d003      	beq.n	8006fdc <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 8006fd4:	693a      	ldr	r2, [r7, #16]
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	4313      	orrs	r3, r2
 8006fda:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8006fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800701c <HAL_GPIO_Init+0x2f8>)
 8006fde:	693a      	ldr	r2, [r7, #16]
 8006fe0:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	40da      	lsrs	r2, r3
 8006ff0:	1e13      	subs	r3, r2, #0
 8006ff2:	d000      	beq.n	8006ff6 <HAL_GPIO_Init+0x2d2>
 8006ff4:	e6a2      	b.n	8006d3c <HAL_GPIO_Init+0x18>
  }
}
 8006ff6:	46c0      	nop			@ (mov r8, r8)
 8006ff8:	46c0      	nop			@ (mov r8, r8)
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	b006      	add	sp, #24
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	40021000 	.word	0x40021000
 8007004:	40010000 	.word	0x40010000
 8007008:	50000400 	.word	0x50000400
 800700c:	50000800 	.word	0x50000800
 8007010:	50000c00 	.word	0x50000c00
 8007014:	50001000 	.word	0x50001000
 8007018:	50001c00 	.word	0x50001c00
 800701c:	40010400 	.word	0x40010400

08007020 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b082      	sub	sp, #8
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	0008      	movs	r0, r1
 800702a:	0011      	movs	r1, r2
 800702c:	1cbb      	adds	r3, r7, #2
 800702e:	1c02      	adds	r2, r0, #0
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	1c7b      	adds	r3, r7, #1
 8007034:	1c0a      	adds	r2, r1, #0
 8007036:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007038:	1c7b      	adds	r3, r7, #1
 800703a:	781b      	ldrb	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d004      	beq.n	800704a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007040:	1cbb      	adds	r3, r7, #2
 8007042:	881a      	ldrh	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 8007048:	e003      	b.n	8007052 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800704a:	1cbb      	adds	r3, r7, #2
 800704c:	881a      	ldrh	r2, [r3, #0]
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8007052:	46c0      	nop			@ (mov r8, r8)
 8007054:	46bd      	mov	sp, r7
 8007056:	b002      	add	sp, #8
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800705c:	b580      	push	{r7, lr}
 800705e:	b082      	sub	sp, #8
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2b00      	cmp	r3, #0
 8007068:	d101      	bne.n	800706e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	e082      	b.n	8007174 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2241      	movs	r2, #65	@ 0x41
 8007072:	5c9b      	ldrb	r3, [r3, r2]
 8007074:	b2db      	uxtb	r3, r3
 8007076:	2b00      	cmp	r3, #0
 8007078:	d107      	bne.n	800708a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2240      	movs	r2, #64	@ 0x40
 800707e:	2100      	movs	r1, #0
 8007080:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	0018      	movs	r0, r3
 8007086:	f7fc fda3 	bl	8003bd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	2241      	movs	r2, #65	@ 0x41
 800708e:	2124      	movs	r1, #36	@ 0x24
 8007090:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2101      	movs	r1, #1
 800709e:	438a      	bics	r2, r1
 80070a0:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685a      	ldr	r2, [r3, #4]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4934      	ldr	r1, [pc, #208]	@ (800717c <HAL_I2C_Init+0x120>)
 80070ac:	400a      	ands	r2, r1
 80070ae:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	689a      	ldr	r2, [r3, #8]
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4931      	ldr	r1, [pc, #196]	@ (8007180 <HAL_I2C_Init+0x124>)
 80070bc:	400a      	ands	r2, r1
 80070be:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	68db      	ldr	r3, [r3, #12]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d108      	bne.n	80070da <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	689a      	ldr	r2, [r3, #8]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	2180      	movs	r1, #128	@ 0x80
 80070d2:	0209      	lsls	r1, r1, #8
 80070d4:	430a      	orrs	r2, r1
 80070d6:	609a      	str	r2, [r3, #8]
 80070d8:	e007      	b.n	80070ea <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	689a      	ldr	r2, [r3, #8]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	2184      	movs	r1, #132	@ 0x84
 80070e4:	0209      	lsls	r1, r1, #8
 80070e6:	430a      	orrs	r2, r1
 80070e8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	68db      	ldr	r3, [r3, #12]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d104      	bne.n	80070fc <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2280      	movs	r2, #128	@ 0x80
 80070f8:	0112      	lsls	r2, r2, #4
 80070fa:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685a      	ldr	r2, [r3, #4]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	491f      	ldr	r1, [pc, #124]	@ (8007184 <HAL_I2C_Init+0x128>)
 8007108:	430a      	orrs	r2, r1
 800710a:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	68da      	ldr	r2, [r3, #12]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	491a      	ldr	r1, [pc, #104]	@ (8007180 <HAL_I2C_Init+0x124>)
 8007118:	400a      	ands	r2, r1
 800711a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	691a      	ldr	r2, [r3, #16]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	695b      	ldr	r3, [r3, #20]
 8007124:	431a      	orrs	r2, r3
 8007126:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	430a      	orrs	r2, r1
 8007134:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	69d9      	ldr	r1, [r3, #28]
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	6a1a      	ldr	r2, [r3, #32]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	430a      	orrs	r2, r1
 8007144:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681a      	ldr	r2, [r3, #0]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	2101      	movs	r1, #1
 8007152:	430a      	orrs	r2, r1
 8007154:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2200      	movs	r2, #0
 800715a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2241      	movs	r2, #65	@ 0x41
 8007160:	2120      	movs	r1, #32
 8007162:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2242      	movs	r2, #66	@ 0x42
 800716e:	2100      	movs	r1, #0
 8007170:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007172:	2300      	movs	r3, #0
}
 8007174:	0018      	movs	r0, r3
 8007176:	46bd      	mov	sp, r7
 8007178:	b002      	add	sp, #8
 800717a:	bd80      	pop	{r7, pc}
 800717c:	f0ffffff 	.word	0xf0ffffff
 8007180:	ffff7fff 	.word	0xffff7fff
 8007184:	02008000 	.word	0x02008000

08007188 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 8007188:	b5b0      	push	{r4, r5, r7, lr}
 800718a:	b088      	sub	sp, #32
 800718c:	af02      	add	r7, sp, #8
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	0008      	movs	r0, r1
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	0019      	movs	r1, r3
 8007196:	230a      	movs	r3, #10
 8007198:	18fb      	adds	r3, r7, r3
 800719a:	1c02      	adds	r2, r0, #0
 800719c:	801a      	strh	r2, [r3, #0]
 800719e:	2308      	movs	r3, #8
 80071a0:	18fb      	adds	r3, r7, r3
 80071a2:	1c0a      	adds	r2, r1, #0
 80071a4:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2241      	movs	r2, #65	@ 0x41
 80071aa:	5c9b      	ldrb	r3, [r3, r2]
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b20      	cmp	r3, #32
 80071b0:	d000      	beq.n	80071b4 <HAL_I2C_Master_Transmit_DMA+0x2c>
 80071b2:	e0dd      	b.n	8007370 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	699a      	ldr	r2, [r3, #24]
 80071ba:	2380      	movs	r3, #128	@ 0x80
 80071bc:	021b      	lsls	r3, r3, #8
 80071be:	401a      	ands	r2, r3
 80071c0:	2380      	movs	r3, #128	@ 0x80
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	429a      	cmp	r2, r3
 80071c6:	d101      	bne.n	80071cc <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 80071c8:	2302      	movs	r3, #2
 80071ca:	e0d2      	b.n	8007372 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	2240      	movs	r2, #64	@ 0x40
 80071d0:	5c9b      	ldrb	r3, [r3, r2]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_I2C_Master_Transmit_DMA+0x52>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e0cb      	b.n	8007372 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2240      	movs	r2, #64	@ 0x40
 80071de:	2101      	movs	r1, #1
 80071e0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2241      	movs	r2, #65	@ 0x41
 80071e6:	2121      	movs	r1, #33	@ 0x21
 80071e8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2242      	movs	r2, #66	@ 0x42
 80071ee:	2110      	movs	r1, #16
 80071f0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	2200      	movs	r2, #0
 80071f6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	687a      	ldr	r2, [r7, #4]
 80071fc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2208      	movs	r2, #8
 8007202:	18ba      	adds	r2, r7, r2
 8007204:	8812      	ldrh	r2, [r2, #0]
 8007206:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	4a5c      	ldr	r2, [pc, #368]	@ (800737c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800720c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4a5b      	ldr	r2, [pc, #364]	@ (8007380 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 8007212:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007218:	b29b      	uxth	r3, r3
 800721a:	2bff      	cmp	r3, #255	@ 0xff
 800721c:	d906      	bls.n	800722c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	22ff      	movs	r2, #255	@ 0xff
 8007222:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007224:	2380      	movs	r3, #128	@ 0x80
 8007226:	045b      	lsls	r3, r3, #17
 8007228:	617b      	str	r3, [r7, #20]
 800722a:	e007      	b.n	800723c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007230:	b29a      	uxth	r2, r3
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007236:	2380      	movs	r3, #128	@ 0x80
 8007238:	049b      	lsls	r3, r3, #18
 800723a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007240:	2b00      	cmp	r3, #0
 8007242:	d100      	bne.n	8007246 <HAL_I2C_Master_Transmit_DMA+0xbe>
 8007244:	e078      	b.n	8007338 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800724a:	2b00      	cmp	r3, #0
 800724c:	d023      	beq.n	8007296 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007252:	4a4c      	ldr	r2, [pc, #304]	@ (8007384 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 8007254:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800725a:	4a4b      	ldr	r2, [pc, #300]	@ (8007388 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800725c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007262:	2200      	movs	r2, #0
 8007264:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800726a:	2200      	movs	r2, #0
 800726c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8007272:	6879      	ldr	r1, [r7, #4]
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	3328      	adds	r3, #40	@ 0x28
 800727a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 8007280:	2513      	movs	r5, #19
 8007282:	197c      	adds	r4, r7, r5
 8007284:	f7ff fb6e 	bl	8006964 <HAL_DMA_Start_IT>
 8007288:	0003      	movs	r3, r0
 800728a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800728c:	197b      	adds	r3, r7, r5
 800728e:	781b      	ldrb	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d13d      	bne.n	8007310 <HAL_I2C_Master_Transmit_DMA+0x188>
 8007294:	e013      	b.n	80072be <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	2241      	movs	r2, #65	@ 0x41
 800729a:	2120      	movs	r1, #32
 800729c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2242      	movs	r2, #66	@ 0x42
 80072a2:	2100      	movs	r1, #0
 80072a4:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80072aa:	2280      	movs	r2, #128	@ 0x80
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	2240      	movs	r2, #64	@ 0x40
 80072b6:	2100      	movs	r1, #0
 80072b8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e059      	b.n	8007372 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072c2:	b2da      	uxtb	r2, r3
 80072c4:	697c      	ldr	r4, [r7, #20]
 80072c6:	230a      	movs	r3, #10
 80072c8:	18fb      	adds	r3, r7, r3
 80072ca:	8819      	ldrh	r1, [r3, #0]
 80072cc:	68f8      	ldr	r0, [r7, #12]
 80072ce:	4b2f      	ldr	r3, [pc, #188]	@ (800738c <HAL_I2C_Master_Transmit_DMA+0x204>)
 80072d0:	9300      	str	r3, [sp, #0]
 80072d2:	0023      	movs	r3, r4
 80072d4:	f001 fd0e 	bl	8008cf4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80072dc:	b29a      	uxth	r2, r3
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80072e2:	1ad3      	subs	r3, r2, r3
 80072e4:	b29a      	uxth	r2, r3
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	2240      	movs	r2, #64	@ 0x40
 80072ee:	2100      	movs	r1, #0
 80072f0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	2110      	movs	r1, #16
 80072f6:	0018      	movs	r0, r3
 80072f8:	f001 fd36 	bl	8008d68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	2180      	movs	r1, #128	@ 0x80
 8007308:	01c9      	lsls	r1, r1, #7
 800730a:	430a      	orrs	r2, r1
 800730c:	601a      	str	r2, [r3, #0]
 800730e:	e02d      	b.n	800736c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	2241      	movs	r2, #65	@ 0x41
 8007314:	2120      	movs	r1, #32
 8007316:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2242      	movs	r2, #66	@ 0x42
 800731c:	2100      	movs	r1, #0
 800731e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007324:	2210      	movs	r2, #16
 8007326:	431a      	orrs	r2, r3
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2240      	movs	r2, #64	@ 0x40
 8007330:	2100      	movs	r1, #0
 8007332:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007334:	2301      	movs	r3, #1
 8007336:	e01c      	b.n	8007372 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	4a15      	ldr	r2, [pc, #84]	@ (8007390 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800733c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007342:	b2da      	uxtb	r2, r3
 8007344:	2380      	movs	r3, #128	@ 0x80
 8007346:	049c      	lsls	r4, r3, #18
 8007348:	230a      	movs	r3, #10
 800734a:	18fb      	adds	r3, r7, r3
 800734c:	8819      	ldrh	r1, [r3, #0]
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	4b0e      	ldr	r3, [pc, #56]	@ (800738c <HAL_I2C_Master_Transmit_DMA+0x204>)
 8007352:	9300      	str	r3, [sp, #0]
 8007354:	0023      	movs	r3, r4
 8007356:	f001 fccd 	bl	8008cf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2240      	movs	r2, #64	@ 0x40
 800735e:	2100      	movs	r1, #0
 8007360:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2101      	movs	r1, #1
 8007366:	0018      	movs	r0, r3
 8007368:	f001 fcfe 	bl	8008d68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800736c:	2300      	movs	r3, #0
 800736e:	e000      	b.n	8007372 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8007370:	2302      	movs	r3, #2
  }
}
 8007372:	0018      	movs	r0, r3
 8007374:	46bd      	mov	sp, r7
 8007376:	b006      	add	sp, #24
 8007378:	bdb0      	pop	{r4, r5, r7, pc}
 800737a:	46c0      	nop			@ (mov r8, r8)
 800737c:	ffff0000 	.word	0xffff0000
 8007380:	08007b8d 	.word	0x08007b8d
 8007384:	08008b45 	.word	0x08008b45
 8007388:	08008c85 	.word	0x08008c85
 800738c:	80002000 	.word	0x80002000
 8007390:	08007739 	.word	0x08007739

08007394 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8007394:	b5b0      	push	{r4, r5, r7, lr}
 8007396:	b088      	sub	sp, #32
 8007398:	af02      	add	r7, sp, #8
 800739a:	60f8      	str	r0, [r7, #12]
 800739c:	0008      	movs	r0, r1
 800739e:	607a      	str	r2, [r7, #4]
 80073a0:	0019      	movs	r1, r3
 80073a2:	230a      	movs	r3, #10
 80073a4:	18fb      	adds	r3, r7, r3
 80073a6:	1c02      	adds	r2, r0, #0
 80073a8:	801a      	strh	r2, [r3, #0]
 80073aa:	2308      	movs	r3, #8
 80073ac:	18fb      	adds	r3, r7, r3
 80073ae:	1c0a      	adds	r2, r1, #0
 80073b0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2241      	movs	r2, #65	@ 0x41
 80073b6:	5c9b      	ldrb	r3, [r3, r2]
 80073b8:	b2db      	uxtb	r3, r3
 80073ba:	2b20      	cmp	r3, #32
 80073bc:	d000      	beq.n	80073c0 <HAL_I2C_Master_Receive_DMA+0x2c>
 80073be:	e0dd      	b.n	800757c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	699a      	ldr	r2, [r3, #24]
 80073c6:	2380      	movs	r3, #128	@ 0x80
 80073c8:	021b      	lsls	r3, r3, #8
 80073ca:	401a      	ands	r2, r3
 80073cc:	2380      	movs	r3, #128	@ 0x80
 80073ce:	021b      	lsls	r3, r3, #8
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d101      	bne.n	80073d8 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 80073d4:	2302      	movs	r3, #2
 80073d6:	e0d2      	b.n	800757e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2240      	movs	r2, #64	@ 0x40
 80073dc:	5c9b      	ldrb	r3, [r3, r2]
 80073de:	2b01      	cmp	r3, #1
 80073e0:	d101      	bne.n	80073e6 <HAL_I2C_Master_Receive_DMA+0x52>
 80073e2:	2302      	movs	r3, #2
 80073e4:	e0cb      	b.n	800757e <HAL_I2C_Master_Receive_DMA+0x1ea>
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	2240      	movs	r2, #64	@ 0x40
 80073ea:	2101      	movs	r1, #1
 80073ec:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2241      	movs	r2, #65	@ 0x41
 80073f2:	2122      	movs	r1, #34	@ 0x22
 80073f4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	2242      	movs	r2, #66	@ 0x42
 80073fa:	2110      	movs	r1, #16
 80073fc:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	2200      	movs	r2, #0
 8007402:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	2208      	movs	r2, #8
 800740e:	18ba      	adds	r2, r7, r2
 8007410:	8812      	ldrh	r2, [r2, #0]
 8007412:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	4a5c      	ldr	r2, [pc, #368]	@ (8007588 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 8007418:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	4a5b      	ldr	r2, [pc, #364]	@ (800758c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800741e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007424:	b29b      	uxth	r3, r3
 8007426:	2bff      	cmp	r3, #255	@ 0xff
 8007428:	d906      	bls.n	8007438 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	22ff      	movs	r2, #255	@ 0xff
 800742e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 8007430:	2380      	movs	r3, #128	@ 0x80
 8007432:	045b      	lsls	r3, r3, #17
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	e007      	b.n	8007448 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800743c:	b29a      	uxth	r2, r3
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007442:	2380      	movs	r3, #128	@ 0x80
 8007444:	049b      	lsls	r3, r3, #18
 8007446:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800744c:	2b00      	cmp	r3, #0
 800744e:	d100      	bne.n	8007452 <HAL_I2C_Master_Receive_DMA+0xbe>
 8007450:	e078      	b.n	8007544 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007456:	2b00      	cmp	r3, #0
 8007458:	d023      	beq.n	80074a2 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800745e:	4a4c      	ldr	r2, [pc, #304]	@ (8007590 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 8007460:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007466:	4a4b      	ldr	r2, [pc, #300]	@ (8007594 <HAL_I2C_Master_Receive_DMA+0x200>)
 8007468:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800746e:	2200      	movs	r2, #0
 8007470:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007476:	2200      	movs	r2, #0
 8007478:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3324      	adds	r3, #36	@ 0x24
 8007484:	0019      	movs	r1, r3
 8007486:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800748c:	2513      	movs	r5, #19
 800748e:	197c      	adds	r4, r7, r5
 8007490:	f7ff fa68 	bl	8006964 <HAL_DMA_Start_IT>
 8007494:	0003      	movs	r3, r0
 8007496:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007498:	197b      	adds	r3, r7, r5
 800749a:	781b      	ldrb	r3, [r3, #0]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d13d      	bne.n	800751c <HAL_I2C_Master_Receive_DMA+0x188>
 80074a0:	e013      	b.n	80074ca <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	2241      	movs	r2, #65	@ 0x41
 80074a6:	2120      	movs	r1, #32
 80074a8:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	2242      	movs	r2, #66	@ 0x42
 80074ae:	2100      	movs	r1, #0
 80074b0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074b6:	2280      	movs	r2, #128	@ 0x80
 80074b8:	431a      	orrs	r2, r3
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2240      	movs	r2, #64	@ 0x40
 80074c2:	2100      	movs	r1, #0
 80074c4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e059      	b.n	800757e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ce:	b2da      	uxtb	r2, r3
 80074d0:	697c      	ldr	r4, [r7, #20]
 80074d2:	230a      	movs	r3, #10
 80074d4:	18fb      	adds	r3, r7, r3
 80074d6:	8819      	ldrh	r1, [r3, #0]
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	4b2f      	ldr	r3, [pc, #188]	@ (8007598 <HAL_I2C_Master_Receive_DMA+0x204>)
 80074dc:	9300      	str	r3, [sp, #0]
 80074de:	0023      	movs	r3, r4
 80074e0:	f001 fc08 	bl	8008cf4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80074e8:	b29a      	uxth	r2, r3
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80074ee:	1ad3      	subs	r3, r2, r3
 80074f0:	b29a      	uxth	r2, r3
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2240      	movs	r2, #64	@ 0x40
 80074fa:	2100      	movs	r1, #0
 80074fc:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2110      	movs	r1, #16
 8007502:	0018      	movs	r0, r3
 8007504:	f001 fc30 	bl	8008d68 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	681a      	ldr	r2, [r3, #0]
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2180      	movs	r1, #128	@ 0x80
 8007514:	0209      	lsls	r1, r1, #8
 8007516:	430a      	orrs	r2, r1
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	e02d      	b.n	8007578 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2241      	movs	r2, #65	@ 0x41
 8007520:	2120      	movs	r1, #32
 8007522:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2242      	movs	r2, #66	@ 0x42
 8007528:	2100      	movs	r1, #0
 800752a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007530:	2210      	movs	r2, #16
 8007532:	431a      	orrs	r2, r3
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	2240      	movs	r2, #64	@ 0x40
 800753c:	2100      	movs	r1, #0
 800753e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8007540:	2301      	movs	r3, #1
 8007542:	e01c      	b.n	800757e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	4a15      	ldr	r2, [pc, #84]	@ (800759c <HAL_I2C_Master_Receive_DMA+0x208>)
 8007548:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800754e:	b2da      	uxtb	r2, r3
 8007550:	2380      	movs	r3, #128	@ 0x80
 8007552:	049c      	lsls	r4, r3, #18
 8007554:	230a      	movs	r3, #10
 8007556:	18fb      	adds	r3, r7, r3
 8007558:	8819      	ldrh	r1, [r3, #0]
 800755a:	68f8      	ldr	r0, [r7, #12]
 800755c:	4b0e      	ldr	r3, [pc, #56]	@ (8007598 <HAL_I2C_Master_Receive_DMA+0x204>)
 800755e:	9300      	str	r3, [sp, #0]
 8007560:	0023      	movs	r3, r4
 8007562:	f001 fbc7 	bl	8008cf4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2240      	movs	r2, #64	@ 0x40
 800756a:	2100      	movs	r1, #0
 800756c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800756e:	68fb      	ldr	r3, [r7, #12]
 8007570:	2101      	movs	r1, #1
 8007572:	0018      	movs	r0, r3
 8007574:	f001 fbf8 	bl	8008d68 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8007578:	2300      	movs	r3, #0
 800757a:	e000      	b.n	800757e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800757c:	2302      	movs	r3, #2
  }
}
 800757e:	0018      	movs	r0, r3
 8007580:	46bd      	mov	sp, r7
 8007582:	b006      	add	sp, #24
 8007584:	bdb0      	pop	{r4, r5, r7, pc}
 8007586:	46c0      	nop			@ (mov r8, r8)
 8007588:	ffff0000 	.word	0xffff0000
 800758c:	08007b8d 	.word	0x08007b8d
 8007590:	08008be5 	.word	0x08008be5
 8007594:	08008c85 	.word	0x08008c85
 8007598:	80002400 	.word	0x80002400
 800759c:	08007739 	.word	0x08007739

080075a0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b084      	sub	sp, #16
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	699b      	ldr	r3, [r3, #24]
 80075ae:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80075c4:	68ba      	ldr	r2, [r7, #8]
 80075c6:	68f9      	ldr	r1, [r7, #12]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	4798      	blx	r3
  }
}
 80075cc:	46c0      	nop			@ (mov r8, r8)
 80075ce:	46bd      	mov	sp, r7
 80075d0:	b004      	add	sp, #16
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80075ec:	697a      	ldr	r2, [r7, #20]
 80075ee:	2380      	movs	r3, #128	@ 0x80
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	4013      	ands	r3, r2
 80075f4:	d00e      	beq.n	8007614 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	2280      	movs	r2, #128	@ 0x80
 80075fa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80075fc:	d00a      	beq.n	8007614 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007602:	2201      	movs	r2, #1
 8007604:	431a      	orrs	r2, r3
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	2280      	movs	r2, #128	@ 0x80
 8007610:	0052      	lsls	r2, r2, #1
 8007612:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	2380      	movs	r3, #128	@ 0x80
 8007618:	00db      	lsls	r3, r3, #3
 800761a:	4013      	ands	r3, r2
 800761c:	d00e      	beq.n	800763c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	2280      	movs	r2, #128	@ 0x80
 8007622:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007624:	d00a      	beq.n	800763c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800762a:	2208      	movs	r2, #8
 800762c:	431a      	orrs	r2, r3
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2280      	movs	r2, #128	@ 0x80
 8007638:	00d2      	lsls	r2, r2, #3
 800763a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800763c:	697a      	ldr	r2, [r7, #20]
 800763e:	2380      	movs	r3, #128	@ 0x80
 8007640:	009b      	lsls	r3, r3, #2
 8007642:	4013      	ands	r3, r2
 8007644:	d00e      	beq.n	8007664 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007646:	693b      	ldr	r3, [r7, #16]
 8007648:	2280      	movs	r2, #128	@ 0x80
 800764a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800764c:	d00a      	beq.n	8007664 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007652:	2202      	movs	r2, #2
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	2280      	movs	r2, #128	@ 0x80
 8007660:	0092      	lsls	r2, r2, #2
 8007662:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007668:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	220b      	movs	r2, #11
 800766e:	4013      	ands	r3, r2
 8007670:	d005      	beq.n	800767e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	0011      	movs	r1, r2
 8007678:	0018      	movs	r0, r3
 800767a:	f001 f915 	bl	80088a8 <I2C_ITError>
  }
}
 800767e:	46c0      	nop			@ (mov r8, r8)
 8007680:	46bd      	mov	sp, r7
 8007682:	b006      	add	sp, #24
 8007684:	bd80      	pop	{r7, pc}

08007686 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800768e:	46c0      	nop			@ (mov r8, r8)
 8007690:	46bd      	mov	sp, r7
 8007692:	b002      	add	sp, #8
 8007694:	bd80      	pop	{r7, pc}

08007696 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007696:	b580      	push	{r7, lr}
 8007698:	b082      	sub	sp, #8
 800769a:	af00      	add	r7, sp, #0
 800769c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800769e:	46c0      	nop			@ (mov r8, r8)
 80076a0:	46bd      	mov	sp, r7
 80076a2:	b002      	add	sp, #8
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b082      	sub	sp, #8
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	46bd      	mov	sp, r7
 80076b2:	b002      	add	sp, #8
 80076b4:	bd80      	pop	{r7, pc}

080076b6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076b6:	b580      	push	{r7, lr}
 80076b8:	b082      	sub	sp, #8
 80076ba:	af00      	add	r7, sp, #0
 80076bc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80076be:	46c0      	nop			@ (mov r8, r8)
 80076c0:	46bd      	mov	sp, r7
 80076c2:	b002      	add	sp, #8
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b082      	sub	sp, #8
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	0008      	movs	r0, r1
 80076d0:	0011      	movs	r1, r2
 80076d2:	1cfb      	adds	r3, r7, #3
 80076d4:	1c02      	adds	r2, r0, #0
 80076d6:	701a      	strb	r2, [r3, #0]
 80076d8:	003b      	movs	r3, r7
 80076da:	1c0a      	adds	r2, r1, #0
 80076dc:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80076de:	46c0      	nop			@ (mov r8, r8)
 80076e0:	46bd      	mov	sp, r7
 80076e2:	b002      	add	sp, #8
 80076e4:	bd80      	pop	{r7, pc}

080076e6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076e6:	b580      	push	{r7, lr}
 80076e8:	b082      	sub	sp, #8
 80076ea:	af00      	add	r7, sp, #0
 80076ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80076ee:	46c0      	nop			@ (mov r8, r8)
 80076f0:	46bd      	mov	sp, r7
 80076f2:	b002      	add	sp, #8
 80076f4:	bd80      	pop	{r7, pc}

080076f6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80076f6:	b580      	push	{r7, lr}
 80076f8:	b082      	sub	sp, #8
 80076fa:	af00      	add	r7, sp, #0
 80076fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80076fe:	46c0      	nop			@ (mov r8, r8)
 8007700:	46bd      	mov	sp, r7
 8007702:	b002      	add	sp, #8
 8007704:	bd80      	pop	{r7, pc}

08007706 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007706:	b580      	push	{r7, lr}
 8007708:	b082      	sub	sp, #8
 800770a:	af00      	add	r7, sp, #0
 800770c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800770e:	46c0      	nop			@ (mov r8, r8)
 8007710:	46bd      	mov	sp, r7
 8007712:	b002      	add	sp, #8
 8007714:	bd80      	pop	{r7, pc}

08007716 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007716:	b580      	push	{r7, lr}
 8007718:	b082      	sub	sp, #8
 800771a:	af00      	add	r7, sp, #0
 800771c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800771e:	46c0      	nop			@ (mov r8, r8)
 8007720:	46bd      	mov	sp, r7
 8007722:	b002      	add	sp, #8
 8007724:	bd80      	pop	{r7, pc}

08007726 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007726:	b580      	push	{r7, lr}
 8007728:	b082      	sub	sp, #8
 800772a:	af00      	add	r7, sp, #0
 800772c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800772e:	46c0      	nop			@ (mov r8, r8)
 8007730:	46bd      	mov	sp, r7
 8007732:	b002      	add	sp, #8
 8007734:	bd80      	pop	{r7, pc}
	...

08007738 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007738:	b590      	push	{r4, r7, lr}
 800773a:	b089      	sub	sp, #36	@ 0x24
 800773c:	af02      	add	r7, sp, #8
 800773e:	60f8      	str	r0, [r7, #12]
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007744:	68bb      	ldr	r3, [r7, #8]
 8007746:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2240      	movs	r2, #64	@ 0x40
 800774c:	5c9b      	ldrb	r3, [r3, r2]
 800774e:	2b01      	cmp	r3, #1
 8007750:	d101      	bne.n	8007756 <I2C_Master_ISR_IT+0x1e>
 8007752:	2302      	movs	r3, #2
 8007754:	e113      	b.n	800797e <I2C_Master_ISR_IT+0x246>
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	2240      	movs	r2, #64	@ 0x40
 800775a:	2101      	movs	r1, #1
 800775c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800775e:	697b      	ldr	r3, [r7, #20]
 8007760:	2210      	movs	r2, #16
 8007762:	4013      	ands	r3, r2
 8007764:	d012      	beq.n	800778c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	2210      	movs	r2, #16
 800776a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800776c:	d00e      	beq.n	800778c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	2210      	movs	r2, #16
 8007774:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800777a:	2204      	movs	r2, #4
 800777c:	431a      	orrs	r2, r3
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	0018      	movs	r0, r3
 8007786:	f001 f9ba 	bl	8008afe <I2C_Flush_TXDR>
 800778a:	e0e5      	b.n	8007958 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800778c:	697b      	ldr	r3, [r7, #20]
 800778e:	2204      	movs	r2, #4
 8007790:	4013      	ands	r3, r2
 8007792:	d021      	beq.n	80077d8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2204      	movs	r2, #4
 8007798:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800779a:	d01d      	beq.n	80077d8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800779c:	697b      	ldr	r3, [r7, #20]
 800779e:	2204      	movs	r2, #4
 80077a0:	4393      	bics	r3, r2
 80077a2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ae:	b2d2      	uxtb	r2, r2
 80077b0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077b6:	1c5a      	adds	r2, r3, #1
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80077c0:	3b01      	subs	r3, #1
 80077c2:	b29a      	uxth	r2, r3
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80077cc:	b29b      	uxth	r3, r3
 80077ce:	3b01      	subs	r3, #1
 80077d0:	b29a      	uxth	r2, r3
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80077d6:	e0bf      	b.n	8007958 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2202      	movs	r2, #2
 80077dc:	4013      	ands	r3, r2
 80077de:	d01c      	beq.n	800781a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	2202      	movs	r2, #2
 80077e4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80077e6:	d018      	beq.n	800781a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077ec:	781a      	ldrb	r2, [r3, #0]
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077f8:	1c5a      	adds	r2, r3, #1
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007802:	3b01      	subs	r3, #1
 8007804:	b29a      	uxth	r2, r3
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800780e:	b29b      	uxth	r3, r3
 8007810:	3b01      	subs	r3, #1
 8007812:	b29a      	uxth	r2, r3
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8007818:	e09e      	b.n	8007958 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800781a:	697b      	ldr	r3, [r7, #20]
 800781c:	2280      	movs	r2, #128	@ 0x80
 800781e:	4013      	ands	r3, r2
 8007820:	d100      	bne.n	8007824 <I2C_Master_ISR_IT+0xec>
 8007822:	e069      	b.n	80078f8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2240      	movs	r2, #64	@ 0x40
 8007828:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800782a:	d065      	beq.n	80078f8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	d04a      	beq.n	80078cc <I2C_Master_ISR_IT+0x194>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800783a:	2b00      	cmp	r3, #0
 800783c:	d146      	bne.n	80078cc <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	685b      	ldr	r3, [r3, #4]
 8007844:	b29a      	uxth	r2, r3
 8007846:	2112      	movs	r1, #18
 8007848:	187b      	adds	r3, r7, r1
 800784a:	0592      	lsls	r2, r2, #22
 800784c:	0d92      	lsrs	r2, r2, #22
 800784e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007854:	b29b      	uxth	r3, r3
 8007856:	2bff      	cmp	r3, #255	@ 0xff
 8007858:	d910      	bls.n	800787c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	22ff      	movs	r2, #255	@ 0xff
 800785e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007864:	b2da      	uxtb	r2, r3
 8007866:	2380      	movs	r3, #128	@ 0x80
 8007868:	045c      	lsls	r4, r3, #17
 800786a:	187b      	adds	r3, r7, r1
 800786c:	8819      	ldrh	r1, [r3, #0]
 800786e:	68f8      	ldr	r0, [r7, #12]
 8007870:	2300      	movs	r3, #0
 8007872:	9300      	str	r3, [sp, #0]
 8007874:	0023      	movs	r3, r4
 8007876:	f001 fa3d 	bl	8008cf4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800787a:	e03c      	b.n	80078f6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007880:	b29a      	uxth	r2, r3
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007886:	68fb      	ldr	r3, [r7, #12]
 8007888:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800788a:	4a3f      	ldr	r2, [pc, #252]	@ (8007988 <I2C_Master_ISR_IT+0x250>)
 800788c:	4293      	cmp	r3, r2
 800788e:	d00e      	beq.n	80078ae <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007894:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800789a:	2312      	movs	r3, #18
 800789c:	18fb      	adds	r3, r7, r3
 800789e:	8819      	ldrh	r1, [r3, #0]
 80078a0:	68f8      	ldr	r0, [r7, #12]
 80078a2:	2300      	movs	r3, #0
 80078a4:	9300      	str	r3, [sp, #0]
 80078a6:	0023      	movs	r3, r4
 80078a8:	f001 fa24 	bl	8008cf4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078ac:	e023      	b.n	80078f6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80078b2:	b2da      	uxtb	r2, r3
 80078b4:	2380      	movs	r3, #128	@ 0x80
 80078b6:	049c      	lsls	r4, r3, #18
 80078b8:	2312      	movs	r3, #18
 80078ba:	18fb      	adds	r3, r7, r3
 80078bc:	8819      	ldrh	r1, [r3, #0]
 80078be:	68f8      	ldr	r0, [r7, #12]
 80078c0:	2300      	movs	r3, #0
 80078c2:	9300      	str	r3, [sp, #0]
 80078c4:	0023      	movs	r3, r4
 80078c6:	f001 fa15 	bl	8008cf4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80078ca:	e014      	b.n	80078f6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685a      	ldr	r2, [r3, #4]
 80078d2:	2380      	movs	r3, #128	@ 0x80
 80078d4:	049b      	lsls	r3, r3, #18
 80078d6:	401a      	ands	r2, r3
 80078d8:	2380      	movs	r3, #128	@ 0x80
 80078da:	049b      	lsls	r3, r3, #18
 80078dc:	429a      	cmp	r2, r3
 80078de:	d004      	beq.n	80078ea <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	0018      	movs	r0, r3
 80078e4:	f000 fcf4 	bl	80082d0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078e8:	e036      	b.n	8007958 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2140      	movs	r1, #64	@ 0x40
 80078ee:	0018      	movs	r0, r3
 80078f0:	f000 ffda 	bl	80088a8 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078f4:	e030      	b.n	8007958 <I2C_Master_ISR_IT+0x220>
 80078f6:	e02f      	b.n	8007958 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 80078f8:	697b      	ldr	r3, [r7, #20]
 80078fa:	2240      	movs	r2, #64	@ 0x40
 80078fc:	4013      	ands	r3, r2
 80078fe:	d02b      	beq.n	8007958 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2240      	movs	r2, #64	@ 0x40
 8007904:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8007906:	d027      	beq.n	8007958 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800790c:	b29b      	uxth	r3, r3
 800790e:	2b00      	cmp	r3, #0
 8007910:	d11d      	bne.n	800794e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007912:	68fb      	ldr	r3, [r7, #12]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	685a      	ldr	r2, [r3, #4]
 8007918:	2380      	movs	r3, #128	@ 0x80
 800791a:	049b      	lsls	r3, r3, #18
 800791c:	401a      	ands	r2, r3
 800791e:	2380      	movs	r3, #128	@ 0x80
 8007920:	049b      	lsls	r3, r3, #18
 8007922:	429a      	cmp	r2, r3
 8007924:	d018      	beq.n	8007958 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800792a:	4a17      	ldr	r2, [pc, #92]	@ (8007988 <I2C_Master_ISR_IT+0x250>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d109      	bne.n	8007944 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	685a      	ldr	r2, [r3, #4]
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	2180      	movs	r1, #128	@ 0x80
 800793c:	01c9      	lsls	r1, r1, #7
 800793e:	430a      	orrs	r2, r1
 8007940:	605a      	str	r2, [r3, #4]
 8007942:	e009      	b.n	8007958 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	0018      	movs	r0, r3
 8007948:	f000 fcc2 	bl	80082d0 <I2C_ITMasterSeqCplt>
 800794c:	e004      	b.n	8007958 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2140      	movs	r1, #64	@ 0x40
 8007952:	0018      	movs	r0, r3
 8007954:	f000 ffa8 	bl	80088a8 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	2220      	movs	r2, #32
 800795c:	4013      	ands	r3, r2
 800795e:	d009      	beq.n	8007974 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2220      	movs	r2, #32
 8007964:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007966:	d005      	beq.n	8007974 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8007968:	697a      	ldr	r2, [r7, #20]
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	0011      	movs	r1, r2
 800796e:	0018      	movs	r0, r3
 8007970:	f000 fd54 	bl	800841c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2240      	movs	r2, #64	@ 0x40
 8007978:	2100      	movs	r1, #0
 800797a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800797c:	2300      	movs	r3, #0
}
 800797e:	0018      	movs	r0, r3
 8007980:	46bd      	mov	sp, r7
 8007982:	b007      	add	sp, #28
 8007984:	bd90      	pop	{r4, r7, pc}
 8007986:	46c0      	nop			@ (mov r8, r8)
 8007988:	ffff0000 	.word	0xffff0000

0800798c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b086      	sub	sp, #24
 8007990:	af00      	add	r7, sp, #0
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800799c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800799e:	68bb      	ldr	r3, [r7, #8]
 80079a0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	2240      	movs	r2, #64	@ 0x40
 80079a6:	5c9b      	ldrb	r3, [r3, r2]
 80079a8:	2b01      	cmp	r3, #1
 80079aa:	d101      	bne.n	80079b0 <I2C_Slave_ISR_IT+0x24>
 80079ac:	2302      	movs	r3, #2
 80079ae:	e0e6      	b.n	8007b7e <I2C_Slave_ISR_IT+0x1f2>
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	2240      	movs	r2, #64	@ 0x40
 80079b4:	2101      	movs	r1, #1
 80079b6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80079b8:	693b      	ldr	r3, [r7, #16]
 80079ba:	2220      	movs	r2, #32
 80079bc:	4013      	ands	r3, r2
 80079be:	d009      	beq.n	80079d4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2220      	movs	r2, #32
 80079c4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80079c6:	d005      	beq.n	80079d4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	0011      	movs	r1, r2
 80079ce:	0018      	movs	r0, r3
 80079d0:	f000 fdf2 	bl	80085b8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	2210      	movs	r2, #16
 80079d8:	4013      	ands	r3, r2
 80079da:	d052      	beq.n	8007a82 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2210      	movs	r2, #16
 80079e0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80079e2:	d04e      	beq.n	8007a82 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80079e8:	b29b      	uxth	r3, r3
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d12d      	bne.n	8007a4a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2241      	movs	r2, #65	@ 0x41
 80079f2:	5c9b      	ldrb	r3, [r3, r2]
 80079f4:	b2db      	uxtb	r3, r3
 80079f6:	2b28      	cmp	r3, #40	@ 0x28
 80079f8:	d10b      	bne.n	8007a12 <I2C_Slave_ISR_IT+0x86>
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	2380      	movs	r3, #128	@ 0x80
 80079fe:	049b      	lsls	r3, r3, #18
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d106      	bne.n	8007a12 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007a04:	693a      	ldr	r2, [r7, #16]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	0011      	movs	r1, r2
 8007a0a:	0018      	movs	r0, r3
 8007a0c:	f000 fef4 	bl	80087f8 <I2C_ITListenCplt>
 8007a10:	e036      	b.n	8007a80 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2241      	movs	r2, #65	@ 0x41
 8007a16:	5c9b      	ldrb	r3, [r3, r2]
 8007a18:	b2db      	uxtb	r3, r3
 8007a1a:	2b29      	cmp	r3, #41	@ 0x29
 8007a1c:	d110      	bne.n	8007a40 <I2C_Slave_ISR_IT+0xb4>
 8007a1e:	697b      	ldr	r3, [r7, #20]
 8007a20:	4a59      	ldr	r2, [pc, #356]	@ (8007b88 <I2C_Slave_ISR_IT+0x1fc>)
 8007a22:	4293      	cmp	r3, r2
 8007a24:	d00c      	beq.n	8007a40 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	2210      	movs	r2, #16
 8007a2c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	0018      	movs	r0, r3
 8007a32:	f001 f864 	bl	8008afe <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	0018      	movs	r0, r3
 8007a3a:	f000 fc8b 	bl	8008354 <I2C_ITSlaveSeqCplt>
 8007a3e:	e01f      	b.n	8007a80 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	2210      	movs	r2, #16
 8007a46:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8007a48:	e091      	b.n	8007b6e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	2210      	movs	r2, #16
 8007a50:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007a56:	2204      	movs	r2, #4
 8007a58:	431a      	orrs	r2, r3
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d005      	beq.n	8007a70 <I2C_Slave_ISR_IT+0xe4>
 8007a64:	697a      	ldr	r2, [r7, #20]
 8007a66:	2380      	movs	r3, #128	@ 0x80
 8007a68:	045b      	lsls	r3, r3, #17
 8007a6a:	429a      	cmp	r2, r3
 8007a6c:	d000      	beq.n	8007a70 <I2C_Slave_ISR_IT+0xe4>
 8007a6e:	e07e      	b.n	8007b6e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	0011      	movs	r1, r2
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f000 ff15 	bl	80088a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007a7e:	e076      	b.n	8007b6e <I2C_Slave_ISR_IT+0x1e2>
 8007a80:	e075      	b.n	8007b6e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2204      	movs	r2, #4
 8007a86:	4013      	ands	r3, r2
 8007a88:	d02f      	beq.n	8007aea <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	2204      	movs	r2, #4
 8007a8e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8007a90:	d02b      	beq.n	8007aea <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007a96:	b29b      	uxth	r3, r3
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d018      	beq.n	8007ace <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	b2d2      	uxtb	r2, r2
 8007aa8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aae:	1c5a      	adds	r2, r3, #1
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007ab8:	3b01      	subs	r3, #1
 8007aba:	b29a      	uxth	r2, r3
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ad2:	b29b      	uxth	r3, r3
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d14c      	bne.n	8007b72 <I2C_Slave_ISR_IT+0x1e6>
 8007ad8:	697b      	ldr	r3, [r7, #20]
 8007ada:	4a2b      	ldr	r2, [pc, #172]	@ (8007b88 <I2C_Slave_ISR_IT+0x1fc>)
 8007adc:	4293      	cmp	r3, r2
 8007ade:	d048      	beq.n	8007b72 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	0018      	movs	r0, r3
 8007ae4:	f000 fc36 	bl	8008354 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007ae8:	e043      	b.n	8007b72 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2208      	movs	r2, #8
 8007aee:	4013      	ands	r3, r2
 8007af0:	d00a      	beq.n	8007b08 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2208      	movs	r2, #8
 8007af6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007af8:	d006      	beq.n	8007b08 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8007afa:	693a      	ldr	r2, [r7, #16]
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	0011      	movs	r1, r2
 8007b00:	0018      	movs	r0, r3
 8007b02:	f000 fb41 	bl	8008188 <I2C_ITAddrCplt>
 8007b06:	e035      	b.n	8007b74 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	2202      	movs	r2, #2
 8007b0c:	4013      	ands	r3, r2
 8007b0e:	d031      	beq.n	8007b74 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2202      	movs	r2, #2
 8007b14:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007b16:	d02d      	beq.n	8007b74 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b1c:	b29b      	uxth	r3, r3
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d018      	beq.n	8007b54 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b26:	781a      	ldrb	r2, [r3, #0]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b32:	1c5a      	adds	r2, r3, #1
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007b3c:	b29b      	uxth	r3, r3
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	b29a      	uxth	r2, r3
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007b4a:	3b01      	subs	r3, #1
 8007b4c:	b29a      	uxth	r2, r3
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	851a      	strh	r2, [r3, #40]	@ 0x28
 8007b52:	e00f      	b.n	8007b74 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8007b54:	697a      	ldr	r2, [r7, #20]
 8007b56:	2380      	movs	r3, #128	@ 0x80
 8007b58:	045b      	lsls	r3, r3, #17
 8007b5a:	429a      	cmp	r2, r3
 8007b5c:	d002      	beq.n	8007b64 <I2C_Slave_ISR_IT+0x1d8>
 8007b5e:	697b      	ldr	r3, [r7, #20]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d107      	bne.n	8007b74 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	0018      	movs	r0, r3
 8007b68:	f000 fbf4 	bl	8008354 <I2C_ITSlaveSeqCplt>
 8007b6c:	e002      	b.n	8007b74 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 8007b6e:	46c0      	nop			@ (mov r8, r8)
 8007b70:	e000      	b.n	8007b74 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 8007b72:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2240      	movs	r2, #64	@ 0x40
 8007b78:	2100      	movs	r1, #0
 8007b7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	0018      	movs	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	b006      	add	sp, #24
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	46c0      	nop			@ (mov r8, r8)
 8007b88:	ffff0000 	.word	0xffff0000

08007b8c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8007b8c:	b590      	push	{r4, r7, lr}
 8007b8e:	b089      	sub	sp, #36	@ 0x24
 8007b90:	af02      	add	r7, sp, #8
 8007b92:	60f8      	str	r0, [r7, #12]
 8007b94:	60b9      	str	r1, [r7, #8]
 8007b96:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2240      	movs	r2, #64	@ 0x40
 8007b9c:	5c9b      	ldrb	r3, [r3, r2]
 8007b9e:	2b01      	cmp	r3, #1
 8007ba0:	d101      	bne.n	8007ba6 <I2C_Master_ISR_DMA+0x1a>
 8007ba2:	2302      	movs	r3, #2
 8007ba4:	e0e7      	b.n	8007d76 <I2C_Master_ISR_DMA+0x1ea>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2240      	movs	r2, #64	@ 0x40
 8007baa:	2101      	movs	r1, #1
 8007bac:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007bae:	68bb      	ldr	r3, [r7, #8]
 8007bb0:	2210      	movs	r2, #16
 8007bb2:	4013      	ands	r3, r2
 8007bb4:	d017      	beq.n	8007be6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2210      	movs	r2, #16
 8007bba:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007bbc:	d013      	beq.n	8007be6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2210      	movs	r2, #16
 8007bc4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007bca:	2204      	movs	r2, #4
 8007bcc:	431a      	orrs	r2, r3
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	2120      	movs	r1, #32
 8007bd6:	0018      	movs	r0, r3
 8007bd8:	f001 f8c6 	bl	8008d68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	0018      	movs	r0, r3
 8007be0:	f000 ff8d 	bl	8008afe <I2C_Flush_TXDR>
 8007be4:	e0c2      	b.n	8007d6c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	2280      	movs	r2, #128	@ 0x80
 8007bea:	4013      	ands	r3, r2
 8007bec:	d100      	bne.n	8007bf0 <I2C_Master_ISR_DMA+0x64>
 8007bee:	e07c      	b.n	8007cea <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	2240      	movs	r2, #64	@ 0x40
 8007bf4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007bf6:	d100      	bne.n	8007bfa <I2C_Master_ISR_DMA+0x6e>
 8007bf8:	e077      	b.n	8007cea <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	681a      	ldr	r2, [r3, #0]
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	2140      	movs	r1, #64	@ 0x40
 8007c06:	438a      	bics	r2, r1
 8007c08:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d055      	beq.n	8007cc0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	b29a      	uxth	r2, r3
 8007c1c:	2312      	movs	r3, #18
 8007c1e:	18fb      	adds	r3, r7, r3
 8007c20:	0592      	lsls	r2, r2, #22
 8007c22:	0d92      	lsrs	r2, r2, #22
 8007c24:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c2a:	b29b      	uxth	r3, r3
 8007c2c:	2bff      	cmp	r3, #255	@ 0xff
 8007c2e:	d906      	bls.n	8007c3e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	22ff      	movs	r2, #255	@ 0xff
 8007c34:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 8007c36:	2380      	movs	r3, #128	@ 0x80
 8007c38:	045b      	lsls	r3, r3, #17
 8007c3a:	617b      	str	r3, [r7, #20]
 8007c3c:	e010      	b.n	8007c60 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c42:	b29a      	uxth	r2, r3
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c4c:	4a4c      	ldr	r2, [pc, #304]	@ (8007d80 <I2C_Master_ISR_DMA+0x1f4>)
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d003      	beq.n	8007c5a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c56:	617b      	str	r3, [r7, #20]
 8007c58:	e002      	b.n	8007c60 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 8007c5a:	2380      	movs	r3, #128	@ 0x80
 8007c5c:	049b      	lsls	r3, r3, #18
 8007c5e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c64:	b2da      	uxtb	r2, r3
 8007c66:	697c      	ldr	r4, [r7, #20]
 8007c68:	2312      	movs	r3, #18
 8007c6a:	18fb      	adds	r3, r7, r3
 8007c6c:	8819      	ldrh	r1, [r3, #0]
 8007c6e:	68f8      	ldr	r0, [r7, #12]
 8007c70:	2300      	movs	r3, #0
 8007c72:	9300      	str	r3, [sp, #0]
 8007c74:	0023      	movs	r3, r4
 8007c76:	f001 f83d 	bl	8008cf4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007c7e:	b29a      	uxth	r2, r3
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007c84:	1ad3      	subs	r3, r2, r3
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	2241      	movs	r2, #65	@ 0x41
 8007c90:	5c9b      	ldrb	r3, [r3, r2]
 8007c92:	b2db      	uxtb	r3, r3
 8007c94:	2b22      	cmp	r3, #34	@ 0x22
 8007c96:	d109      	bne.n	8007cac <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	681a      	ldr	r2, [r3, #0]
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2180      	movs	r1, #128	@ 0x80
 8007ca4:	0209      	lsls	r1, r1, #8
 8007ca6:	430a      	orrs	r2, r1
 8007ca8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007caa:	e05f      	b.n	8007d6c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	681a      	ldr	r2, [r3, #0]
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	2180      	movs	r1, #128	@ 0x80
 8007cb8:	01c9      	lsls	r1, r1, #7
 8007cba:	430a      	orrs	r2, r1
 8007cbc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007cbe:	e055      	b.n	8007d6c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	685a      	ldr	r2, [r3, #4]
 8007cc6:	2380      	movs	r3, #128	@ 0x80
 8007cc8:	049b      	lsls	r3, r3, #18
 8007cca:	401a      	ands	r2, r3
 8007ccc:	2380      	movs	r3, #128	@ 0x80
 8007cce:	049b      	lsls	r3, r3, #18
 8007cd0:	429a      	cmp	r2, r3
 8007cd2:	d004      	beq.n	8007cde <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	0018      	movs	r0, r3
 8007cd8:	f000 fafa 	bl	80082d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007cdc:	e046      	b.n	8007d6c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	2140      	movs	r1, #64	@ 0x40
 8007ce2:	0018      	movs	r0, r3
 8007ce4:	f000 fde0 	bl	80088a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007ce8:	e040      	b.n	8007d6c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007cea:	68bb      	ldr	r3, [r7, #8]
 8007cec:	2240      	movs	r2, #64	@ 0x40
 8007cee:	4013      	ands	r3, r2
 8007cf0:	d02c      	beq.n	8007d4c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	2240      	movs	r2, #64	@ 0x40
 8007cf6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007cf8:	d028      	beq.n	8007d4c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007cfe:	b29b      	uxth	r3, r3
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d11d      	bne.n	8007d40 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	685a      	ldr	r2, [r3, #4]
 8007d0a:	2380      	movs	r3, #128	@ 0x80
 8007d0c:	049b      	lsls	r3, r3, #18
 8007d0e:	401a      	ands	r2, r3
 8007d10:	2380      	movs	r3, #128	@ 0x80
 8007d12:	049b      	lsls	r3, r3, #18
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d028      	beq.n	8007d6a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007d1c:	4a18      	ldr	r2, [pc, #96]	@ (8007d80 <I2C_Master_ISR_DMA+0x1f4>)
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d109      	bne.n	8007d36 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	685a      	ldr	r2, [r3, #4]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	2180      	movs	r1, #128	@ 0x80
 8007d2e:	01c9      	lsls	r1, r1, #7
 8007d30:	430a      	orrs	r2, r1
 8007d32:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007d34:	e019      	b.n	8007d6a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	0018      	movs	r0, r3
 8007d3a:	f000 fac9 	bl	80082d0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 8007d3e:	e014      	b.n	8007d6a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	2140      	movs	r1, #64	@ 0x40
 8007d44:	0018      	movs	r0, r3
 8007d46:	f000 fdaf 	bl	80088a8 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007d4a:	e00e      	b.n	8007d6a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	2220      	movs	r2, #32
 8007d50:	4013      	ands	r3, r2
 8007d52:	d00b      	beq.n	8007d6c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	2220      	movs	r2, #32
 8007d58:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007d5a:	d007      	beq.n	8007d6c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007d5c:	68ba      	ldr	r2, [r7, #8]
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	0011      	movs	r1, r2
 8007d62:	0018      	movs	r0, r3
 8007d64:	f000 fb5a 	bl	800841c <I2C_ITMasterCplt>
 8007d68:	e000      	b.n	8007d6c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8007d6a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2240      	movs	r2, #64	@ 0x40
 8007d70:	2100      	movs	r1, #0
 8007d72:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007d74:	2300      	movs	r3, #0
}
 8007d76:	0018      	movs	r0, r3
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	b007      	add	sp, #28
 8007d7c:	bd90      	pop	{r4, r7, pc}
 8007d7e:	46c0      	nop			@ (mov r8, r8)
 8007d80:	ffff0000 	.word	0xffff0000

08007d84 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 8007d84:	b590      	push	{r4, r7, lr}
 8007d86:	b089      	sub	sp, #36	@ 0x24
 8007d88:	af02      	add	r7, sp, #8
 8007d8a:	60f8      	str	r0, [r7, #12]
 8007d8c:	60b9      	str	r1, [r7, #8]
 8007d8e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 8007d90:	4b88      	ldr	r3, [pc, #544]	@ (8007fb4 <I2C_Mem_ISR_DMA+0x230>)
 8007d92:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2240      	movs	r2, #64	@ 0x40
 8007d98:	5c9b      	ldrb	r3, [r3, r2]
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <I2C_Mem_ISR_DMA+0x1e>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e104      	b.n	8007fac <I2C_Mem_ISR_DMA+0x228>
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2240      	movs	r2, #64	@ 0x40
 8007da6:	2101      	movs	r1, #1
 8007da8:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2210      	movs	r2, #16
 8007dae:	4013      	ands	r3, r2
 8007db0:	d017      	beq.n	8007de2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2210      	movs	r2, #16
 8007db6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007db8:	d013      	beq.n	8007de2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	2210      	movs	r2, #16
 8007dc0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007dc6:	2204      	movs	r2, #4
 8007dc8:	431a      	orrs	r2, r3
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007dce:	68fb      	ldr	r3, [r7, #12]
 8007dd0:	2120      	movs	r1, #32
 8007dd2:	0018      	movs	r0, r3
 8007dd4:	f000 ffc8 	bl	8008d68 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	0018      	movs	r0, r3
 8007ddc:	f000 fe8f 	bl	8008afe <I2C_Flush_TXDR>
 8007de0:	e0df      	b.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007de2:	68bb      	ldr	r3, [r7, #8]
 8007de4:	2202      	movs	r2, #2
 8007de6:	4013      	ands	r3, r2
 8007de8:	d00d      	beq.n	8007e06 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2202      	movs	r2, #2
 8007dee:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007df0:	d009      	beq.n	8007e06 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8007dfa:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	4252      	negs	r2, r2
 8007e02:	651a      	str	r2, [r3, #80]	@ 0x50
 8007e04:	e0cd      	b.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	2280      	movs	r2, #128	@ 0x80
 8007e0a:	4013      	ands	r3, r2
 8007e0c:	d05e      	beq.n	8007ecc <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	2240      	movs	r2, #64	@ 0x40
 8007e12:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007e14:	d05a      	beq.n	8007ecc <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2110      	movs	r1, #16
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	f000 ffa4 	bl	8008d68 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e24:	b29b      	uxth	r3, r3
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d04a      	beq.n	8007ec0 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e2e:	b29b      	uxth	r3, r3
 8007e30:	2bff      	cmp	r3, #255	@ 0xff
 8007e32:	d910      	bls.n	8007e56 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	22ff      	movs	r2, #255	@ 0xff
 8007e38:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e3e:	b299      	uxth	r1, r3
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e44:	b2da      	uxtb	r2, r3
 8007e46:	2380      	movs	r3, #128	@ 0x80
 8007e48:	045b      	lsls	r3, r3, #17
 8007e4a:	68f8      	ldr	r0, [r7, #12]
 8007e4c:	2400      	movs	r4, #0
 8007e4e:	9400      	str	r4, [sp, #0]
 8007e50:	f000 ff50 	bl	8008cf4 <I2C_TransferConfig>
 8007e54:	e011      	b.n	8007e7a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e5a:	b29a      	uxth	r2, r3
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007e64:	b299      	uxth	r1, r3
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e6a:	b2da      	uxtb	r2, r3
 8007e6c:	2380      	movs	r3, #128	@ 0x80
 8007e6e:	049b      	lsls	r3, r3, #18
 8007e70:	68f8      	ldr	r0, [r7, #12]
 8007e72:	2400      	movs	r4, #0
 8007e74:	9400      	str	r4, [sp, #0]
 8007e76:	f000 ff3d 	bl	8008cf4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007e7e:	b29a      	uxth	r2, r3
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	2241      	movs	r2, #65	@ 0x41
 8007e90:	5c9b      	ldrb	r3, [r3, r2]
 8007e92:	b2db      	uxtb	r3, r3
 8007e94:	2b22      	cmp	r3, #34	@ 0x22
 8007e96:	d109      	bne.n	8007eac <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	681a      	ldr	r2, [r3, #0]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	2180      	movs	r1, #128	@ 0x80
 8007ea4:	0209      	lsls	r1, r1, #8
 8007ea6:	430a      	orrs	r2, r1
 8007ea8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007eaa:	e07a      	b.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	681a      	ldr	r2, [r3, #0]
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	2180      	movs	r1, #128	@ 0x80
 8007eb8:	01c9      	lsls	r1, r1, #7
 8007eba:	430a      	orrs	r2, r1
 8007ebc:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007ebe:	e070      	b.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	2140      	movs	r1, #64	@ 0x40
 8007ec4:	0018      	movs	r0, r3
 8007ec6:	f000 fcef 	bl	80088a8 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007eca:	e06a      	b.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	2240      	movs	r2, #64	@ 0x40
 8007ed0:	4013      	ands	r3, r2
 8007ed2:	d058      	beq.n	8007f86 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	2240      	movs	r2, #64	@ 0x40
 8007ed8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007eda:	d054      	beq.n	8007f86 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	2241      	movs	r2, #65	@ 0x41
 8007ee0:	5c9b      	ldrb	r3, [r3, r2]
 8007ee2:	b2db      	uxtb	r3, r3
 8007ee4:	2b22      	cmp	r3, #34	@ 0x22
 8007ee6:	d101      	bne.n	8007eec <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 8007ee8:	4b33      	ldr	r3, [pc, #204]	@ (8007fb8 <I2C_Mem_ISR_DMA+0x234>)
 8007eea:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007ef0:	b29b      	uxth	r3, r3
 8007ef2:	2bff      	cmp	r3, #255	@ 0xff
 8007ef4:	d911      	bls.n	8007f1a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	22ff      	movs	r2, #255	@ 0xff
 8007efa:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f00:	b299      	uxth	r1, r3
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f06:	b2da      	uxtb	r2, r3
 8007f08:	2380      	movs	r3, #128	@ 0x80
 8007f0a:	045c      	lsls	r4, r3, #17
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	9300      	str	r3, [sp, #0]
 8007f12:	0023      	movs	r3, r4
 8007f14:	f000 feee 	bl	8008cf4 <I2C_TransferConfig>
 8007f18:	e012      	b.n	8007f40 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f1e:	b29a      	uxth	r2, r3
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007f28:	b299      	uxth	r1, r3
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f2e:	b2da      	uxtb	r2, r3
 8007f30:	2380      	movs	r3, #128	@ 0x80
 8007f32:	049c      	lsls	r4, r3, #18
 8007f34:	68f8      	ldr	r0, [r7, #12]
 8007f36:	697b      	ldr	r3, [r7, #20]
 8007f38:	9300      	str	r3, [sp, #0]
 8007f3a:	0023      	movs	r3, r4
 8007f3c:	f000 feda 	bl	8008cf4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007f44:	b29a      	uxth	r2, r3
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8007f4a:	1ad3      	subs	r3, r2, r3
 8007f4c:	b29a      	uxth	r2, r3
 8007f4e:	68fb      	ldr	r3, [r7, #12]
 8007f50:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	2241      	movs	r2, #65	@ 0x41
 8007f56:	5c9b      	ldrb	r3, [r3, r2]
 8007f58:	b2db      	uxtb	r3, r3
 8007f5a:	2b22      	cmp	r3, #34	@ 0x22
 8007f5c:	d109      	bne.n	8007f72 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	2180      	movs	r1, #128	@ 0x80
 8007f6a:	0209      	lsls	r1, r1, #8
 8007f6c:	430a      	orrs	r2, r1
 8007f6e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f70:	e017      	b.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	681a      	ldr	r2, [r3, #0]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	2180      	movs	r1, #128	@ 0x80
 8007f7e:	01c9      	lsls	r1, r1, #7
 8007f80:	430a      	orrs	r2, r1
 8007f82:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007f84:	e00d      	b.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f86:	68bb      	ldr	r3, [r7, #8]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	d009      	beq.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2220      	movs	r2, #32
 8007f92:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007f94:	d005      	beq.n	8007fa2 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007f96:	68ba      	ldr	r2, [r7, #8]
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	0011      	movs	r1, r2
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	f000 fa3d 	bl	800841c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2240      	movs	r2, #64	@ 0x40
 8007fa6:	2100      	movs	r1, #0
 8007fa8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007faa:	2300      	movs	r3, #0
}
 8007fac:	0018      	movs	r0, r3
 8007fae:	46bd      	mov	sp, r7
 8007fb0:	b007      	add	sp, #28
 8007fb2:	bd90      	pop	{r4, r7, pc}
 8007fb4:	80002000 	.word	0x80002000
 8007fb8:	80002400 	.word	0x80002400

08007fbc <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007fbc:	b580      	push	{r7, lr}
 8007fbe:	b088      	sub	sp, #32
 8007fc0:	af00      	add	r7, sp, #0
 8007fc2:	60f8      	str	r0, [r7, #12]
 8007fc4:	60b9      	str	r1, [r7, #8]
 8007fc6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007fcc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007fce:	2300      	movs	r3, #0
 8007fd0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	2240      	movs	r2, #64	@ 0x40
 8007fd6:	5c9b      	ldrb	r3, [r3, r2]
 8007fd8:	2b01      	cmp	r3, #1
 8007fda:	d101      	bne.n	8007fe0 <I2C_Slave_ISR_DMA+0x24>
 8007fdc:	2302      	movs	r3, #2
 8007fde:	e0cd      	b.n	800817c <I2C_Slave_ISR_DMA+0x1c0>
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	2240      	movs	r2, #64	@ 0x40
 8007fe4:	2101      	movs	r1, #1
 8007fe6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	2220      	movs	r2, #32
 8007fec:	4013      	ands	r3, r2
 8007fee:	d009      	beq.n	8008004 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2220      	movs	r2, #32
 8007ff4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007ff6:	d005      	beq.n	8008004 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007ff8:	68ba      	ldr	r2, [r7, #8]
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	0011      	movs	r1, r2
 8007ffe:	0018      	movs	r0, r3
 8008000:	f000 fada 	bl	80085b8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008004:	68bb      	ldr	r3, [r7, #8]
 8008006:	2210      	movs	r2, #16
 8008008:	4013      	ands	r3, r2
 800800a:	d100      	bne.n	800800e <I2C_Slave_ISR_DMA+0x52>
 800800c:	e0a3      	b.n	8008156 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2210      	movs	r2, #16
 8008012:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8008014:	d100      	bne.n	8008018 <I2C_Slave_ISR_DMA+0x5c>
 8008016:	e09e      	b.n	8008156 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008018:	687a      	ldr	r2, [r7, #4]
 800801a:	2380      	movs	r3, #128	@ 0x80
 800801c:	01db      	lsls	r3, r3, #7
 800801e:	4013      	ands	r3, r2
 8008020:	d105      	bne.n	800802e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	2380      	movs	r3, #128	@ 0x80
 8008026:	021b      	lsls	r3, r3, #8
 8008028:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800802a:	d100      	bne.n	800802e <I2C_Slave_ISR_DMA+0x72>
 800802c:	e08c      	b.n	8008148 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800802e:	68fb      	ldr	r3, [r7, #12]
 8008030:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008032:	2b00      	cmp	r3, #0
 8008034:	d00c      	beq.n	8008050 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8008036:	687a      	ldr	r2, [r7, #4]
 8008038:	2380      	movs	r3, #128	@ 0x80
 800803a:	021b      	lsls	r3, r3, #8
 800803c:	4013      	ands	r3, r2
 800803e:	d007      	beq.n	8008050 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	685b      	ldr	r3, [r3, #4]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d101      	bne.n	8008050 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800804c:	2301      	movs	r3, #1
 800804e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00c      	beq.n	8008072 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8008058:	687a      	ldr	r2, [r7, #4]
 800805a:	2380      	movs	r3, #128	@ 0x80
 800805c:	01db      	lsls	r3, r3, #7
 800805e:	4013      	ands	r3, r2
 8008060:	d007      	beq.n	8008072 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	685b      	ldr	r3, [r3, #4]
 800806a:	2b00      	cmp	r3, #0
 800806c:	d101      	bne.n	8008072 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800806e:	2301      	movs	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8008072:	69fb      	ldr	r3, [r7, #28]
 8008074:	2b01      	cmp	r3, #1
 8008076:	d12d      	bne.n	80080d4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2241      	movs	r2, #65	@ 0x41
 800807c:	5c9b      	ldrb	r3, [r3, r2]
 800807e:	b2db      	uxtb	r3, r3
 8008080:	2b28      	cmp	r3, #40	@ 0x28
 8008082:	d10b      	bne.n	800809c <I2C_Slave_ISR_DMA+0xe0>
 8008084:	69ba      	ldr	r2, [r7, #24]
 8008086:	2380      	movs	r3, #128	@ 0x80
 8008088:	049b      	lsls	r3, r3, #18
 800808a:	429a      	cmp	r2, r3
 800808c:	d106      	bne.n	800809c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800808e:	68ba      	ldr	r2, [r7, #8]
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	0011      	movs	r1, r2
 8008094:	0018      	movs	r0, r3
 8008096:	f000 fbaf 	bl	80087f8 <I2C_ITListenCplt>
 800809a:	e054      	b.n	8008146 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2241      	movs	r2, #65	@ 0x41
 80080a0:	5c9b      	ldrb	r3, [r3, r2]
 80080a2:	b2db      	uxtb	r3, r3
 80080a4:	2b29      	cmp	r3, #41	@ 0x29
 80080a6:	d110      	bne.n	80080ca <I2C_Slave_ISR_DMA+0x10e>
 80080a8:	69bb      	ldr	r3, [r7, #24]
 80080aa:	4a36      	ldr	r2, [pc, #216]	@ (8008184 <I2C_Slave_ISR_DMA+0x1c8>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d00c      	beq.n	80080ca <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	2210      	movs	r2, #16
 80080b6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	0018      	movs	r0, r3
 80080bc:	f000 fd1f 	bl	8008afe <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	0018      	movs	r0, r3
 80080c4:	f000 f946 	bl	8008354 <I2C_ITSlaveSeqCplt>
 80080c8:	e03d      	b.n	8008146 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	681b      	ldr	r3, [r3, #0]
 80080ce:	2210      	movs	r2, #16
 80080d0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 80080d2:	e03e      	b.n	8008152 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2210      	movs	r2, #16
 80080da:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80080e0:	2204      	movs	r2, #4
 80080e2:	431a      	orrs	r2, r3
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 80080e8:	2317      	movs	r3, #23
 80080ea:	18fb      	adds	r3, r7, r3
 80080ec:	68fa      	ldr	r2, [r7, #12]
 80080ee:	2141      	movs	r1, #65	@ 0x41
 80080f0:	5c52      	ldrb	r2, [r2, r1]
 80080f2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80080f4:	69bb      	ldr	r3, [r7, #24]
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d004      	beq.n	8008104 <I2C_Slave_ISR_DMA+0x148>
 80080fa:	69ba      	ldr	r2, [r7, #24]
 80080fc:	2380      	movs	r3, #128	@ 0x80
 80080fe:	045b      	lsls	r3, r3, #17
 8008100:	429a      	cmp	r2, r3
 8008102:	d126      	bne.n	8008152 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8008104:	2217      	movs	r2, #23
 8008106:	18bb      	adds	r3, r7, r2
 8008108:	781b      	ldrb	r3, [r3, #0]
 800810a:	2b21      	cmp	r3, #33	@ 0x21
 800810c:	d003      	beq.n	8008116 <I2C_Slave_ISR_DMA+0x15a>
 800810e:	18bb      	adds	r3, r7, r2
 8008110:	781b      	ldrb	r3, [r3, #0]
 8008112:	2b29      	cmp	r3, #41	@ 0x29
 8008114:	d103      	bne.n	800811e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2221      	movs	r2, #33	@ 0x21
 800811a:	631a      	str	r2, [r3, #48]	@ 0x30
 800811c:	e00b      	b.n	8008136 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800811e:	2217      	movs	r2, #23
 8008120:	18bb      	adds	r3, r7, r2
 8008122:	781b      	ldrb	r3, [r3, #0]
 8008124:	2b22      	cmp	r3, #34	@ 0x22
 8008126:	d003      	beq.n	8008130 <I2C_Slave_ISR_DMA+0x174>
 8008128:	18bb      	adds	r3, r7, r2
 800812a:	781b      	ldrb	r3, [r3, #0]
 800812c:	2b2a      	cmp	r3, #42	@ 0x2a
 800812e:	d102      	bne.n	8008136 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	2222      	movs	r2, #34	@ 0x22
 8008134:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	0011      	movs	r1, r2
 800813e:	0018      	movs	r0, r3
 8008140:	f000 fbb2 	bl	80088a8 <I2C_ITError>
      if (treatdmanack == 1U)
 8008144:	e005      	b.n	8008152 <I2C_Slave_ISR_DMA+0x196>
 8008146:	e004      	b.n	8008152 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2210      	movs	r2, #16
 800814e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008150:	e00f      	b.n	8008172 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 8008152:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8008154:	e00d      	b.n	8008172 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	2208      	movs	r2, #8
 800815a:	4013      	ands	r3, r2
 800815c:	d009      	beq.n	8008172 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	2208      	movs	r2, #8
 8008162:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8008164:	d005      	beq.n	8008172 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8008166:	68ba      	ldr	r2, [r7, #8]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	0011      	movs	r1, r2
 800816c:	0018      	movs	r0, r3
 800816e:	f000 f80b 	bl	8008188 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	2240      	movs	r2, #64	@ 0x40
 8008176:	2100      	movs	r1, #0
 8008178:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800817a:	2300      	movs	r3, #0
}
 800817c:	0018      	movs	r0, r3
 800817e:	46bd      	mov	sp, r7
 8008180:	b008      	add	sp, #32
 8008182:	bd80      	pop	{r7, pc}
 8008184:	ffff0000 	.word	0xffff0000

08008188 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008188:	b5b0      	push	{r4, r5, r7, lr}
 800818a:	b084      	sub	sp, #16
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
 8008190:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2241      	movs	r2, #65	@ 0x41
 8008196:	5c9b      	ldrb	r3, [r3, r2]
 8008198:	b2db      	uxtb	r3, r3
 800819a:	001a      	movs	r2, r3
 800819c:	2328      	movs	r3, #40	@ 0x28
 800819e:	4013      	ands	r3, r2
 80081a0:	2b28      	cmp	r3, #40	@ 0x28
 80081a2:	d000      	beq.n	80081a6 <I2C_ITAddrCplt+0x1e>
 80081a4:	e088      	b.n	80082b8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	699b      	ldr	r3, [r3, #24]
 80081ac:	0c1b      	lsrs	r3, r3, #16
 80081ae:	b2da      	uxtb	r2, r3
 80081b0:	250f      	movs	r5, #15
 80081b2:	197b      	adds	r3, r7, r5
 80081b4:	2101      	movs	r1, #1
 80081b6:	400a      	ands	r2, r1
 80081b8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	699b      	ldr	r3, [r3, #24]
 80081c0:	0c1b      	lsrs	r3, r3, #16
 80081c2:	b29a      	uxth	r2, r3
 80081c4:	200c      	movs	r0, #12
 80081c6:	183b      	adds	r3, r7, r0
 80081c8:	21fe      	movs	r1, #254	@ 0xfe
 80081ca:	400a      	ands	r2, r1
 80081cc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	689b      	ldr	r3, [r3, #8]
 80081d4:	b29a      	uxth	r2, r3
 80081d6:	240a      	movs	r4, #10
 80081d8:	193b      	adds	r3, r7, r4
 80081da:	0592      	lsls	r2, r2, #22
 80081dc:	0d92      	lsrs	r2, r2, #22
 80081de:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	68db      	ldr	r3, [r3, #12]
 80081e6:	b29a      	uxth	r2, r3
 80081e8:	2308      	movs	r3, #8
 80081ea:	18fb      	adds	r3, r7, r3
 80081ec:	21fe      	movs	r1, #254	@ 0xfe
 80081ee:	400a      	ands	r2, r1
 80081f0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	2b02      	cmp	r3, #2
 80081f8:	d148      	bne.n	800828c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80081fa:	0021      	movs	r1, r4
 80081fc:	187b      	adds	r3, r7, r1
 80081fe:	881b      	ldrh	r3, [r3, #0]
 8008200:	09db      	lsrs	r3, r3, #7
 8008202:	b29a      	uxth	r2, r3
 8008204:	183b      	adds	r3, r7, r0
 8008206:	881b      	ldrh	r3, [r3, #0]
 8008208:	4053      	eors	r3, r2
 800820a:	b29b      	uxth	r3, r3
 800820c:	001a      	movs	r2, r3
 800820e:	2306      	movs	r3, #6
 8008210:	4013      	ands	r3, r2
 8008212:	d120      	bne.n	8008256 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 8008214:	183b      	adds	r3, r7, r0
 8008216:	187a      	adds	r2, r7, r1
 8008218:	8812      	ldrh	r2, [r2, #0]
 800821a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008220:	1c5a      	adds	r2, r3, #1
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800822a:	2b02      	cmp	r3, #2
 800822c:	d14c      	bne.n	80082c8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	2200      	movs	r2, #0
 8008232:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2208      	movs	r2, #8
 800823a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2240      	movs	r2, #64	@ 0x40
 8008240:	2100      	movs	r1, #0
 8008242:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008244:	183b      	adds	r3, r7, r0
 8008246:	881a      	ldrh	r2, [r3, #0]
 8008248:	197b      	adds	r3, r7, r5
 800824a:	7819      	ldrb	r1, [r3, #0]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	0018      	movs	r0, r3
 8008250:	f7ff fa39 	bl	80076c6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8008254:	e038      	b.n	80082c8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 8008256:	240c      	movs	r4, #12
 8008258:	193b      	adds	r3, r7, r4
 800825a:	2208      	movs	r2, #8
 800825c:	18ba      	adds	r2, r7, r2
 800825e:	8812      	ldrh	r2, [r2, #0]
 8008260:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8008262:	2380      	movs	r3, #128	@ 0x80
 8008264:	021a      	lsls	r2, r3, #8
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	0011      	movs	r1, r2
 800826a:	0018      	movs	r0, r3
 800826c:	f000 fe0a 	bl	8008e84 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	2240      	movs	r2, #64	@ 0x40
 8008274:	2100      	movs	r1, #0
 8008276:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8008278:	193b      	adds	r3, r7, r4
 800827a:	881a      	ldrh	r2, [r3, #0]
 800827c:	230f      	movs	r3, #15
 800827e:	18fb      	adds	r3, r7, r3
 8008280:	7819      	ldrb	r1, [r3, #0]
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	0018      	movs	r0, r3
 8008286:	f7ff fa1e 	bl	80076c6 <HAL_I2C_AddrCallback>
}
 800828a:	e01d      	b.n	80082c8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800828c:	2380      	movs	r3, #128	@ 0x80
 800828e:	021a      	lsls	r2, r3, #8
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	0011      	movs	r1, r2
 8008294:	0018      	movs	r0, r3
 8008296:	f000 fdf5 	bl	8008e84 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2240      	movs	r2, #64	@ 0x40
 800829e:	2100      	movs	r1, #0
 80082a0:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80082a2:	230c      	movs	r3, #12
 80082a4:	18fb      	adds	r3, r7, r3
 80082a6:	881a      	ldrh	r2, [r3, #0]
 80082a8:	230f      	movs	r3, #15
 80082aa:	18fb      	adds	r3, r7, r3
 80082ac:	7819      	ldrb	r1, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	0018      	movs	r0, r3
 80082b2:	f7ff fa08 	bl	80076c6 <HAL_I2C_AddrCallback>
}
 80082b6:	e007      	b.n	80082c8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2208      	movs	r2, #8
 80082be:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2240      	movs	r2, #64	@ 0x40
 80082c4:	2100      	movs	r1, #0
 80082c6:	5499      	strb	r1, [r3, r2]
}
 80082c8:	46c0      	nop			@ (mov r8, r8)
 80082ca:	46bd      	mov	sp, r7
 80082cc:	b004      	add	sp, #16
 80082ce:	bdb0      	pop	{r4, r5, r7, pc}

080082d0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80082d0:	b580      	push	{r7, lr}
 80082d2:	b082      	sub	sp, #8
 80082d4:	af00      	add	r7, sp, #0
 80082d6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2242      	movs	r2, #66	@ 0x42
 80082dc:	2100      	movs	r1, #0
 80082de:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2241      	movs	r2, #65	@ 0x41
 80082e4:	5c9b      	ldrb	r3, [r3, r2]
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	2b21      	cmp	r3, #33	@ 0x21
 80082ea:	d117      	bne.n	800831c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	2241      	movs	r2, #65	@ 0x41
 80082f0:	2120      	movs	r1, #32
 80082f2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	2211      	movs	r2, #17
 80082f8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2101      	movs	r1, #1
 8008304:	0018      	movs	r0, r3
 8008306:	f000 fdbd 	bl	8008e84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2240      	movs	r2, #64	@ 0x40
 800830e:	2100      	movs	r1, #0
 8008310:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	0018      	movs	r0, r3
 8008316:	f7ff f9b6 	bl	8007686 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800831a:	e016      	b.n	800834a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	2241      	movs	r2, #65	@ 0x41
 8008320:	2120      	movs	r1, #32
 8008322:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	2212      	movs	r2, #18
 8008328:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	2200      	movs	r2, #0
 800832e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	2102      	movs	r1, #2
 8008334:	0018      	movs	r0, r3
 8008336:	f000 fda5 	bl	8008e84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	2240      	movs	r2, #64	@ 0x40
 800833e:	2100      	movs	r1, #0
 8008340:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	0018      	movs	r0, r3
 8008346:	f7ff f9a6 	bl	8007696 <HAL_I2C_MasterRxCpltCallback>
}
 800834a:	46c0      	nop			@ (mov r8, r8)
 800834c:	46bd      	mov	sp, r7
 800834e:	b002      	add	sp, #8
 8008350:	bd80      	pop	{r7, pc}
	...

08008354 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	2242      	movs	r2, #66	@ 0x42
 8008368:	2100      	movs	r1, #0
 800836a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800836c:	68fa      	ldr	r2, [r7, #12]
 800836e:	2380      	movs	r3, #128	@ 0x80
 8008370:	01db      	lsls	r3, r3, #7
 8008372:	4013      	ands	r3, r2
 8008374:	d008      	beq.n	8008388 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	681b      	ldr	r3, [r3, #0]
 8008380:	4924      	ldr	r1, [pc, #144]	@ (8008414 <I2C_ITSlaveSeqCplt+0xc0>)
 8008382:	400a      	ands	r2, r1
 8008384:	601a      	str	r2, [r3, #0]
 8008386:	e00c      	b.n	80083a2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	2380      	movs	r3, #128	@ 0x80
 800838c:	021b      	lsls	r3, r3, #8
 800838e:	4013      	ands	r3, r2
 8008390:	d007      	beq.n	80083a2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	681a      	ldr	r2, [r3, #0]
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	491e      	ldr	r1, [pc, #120]	@ (8008418 <I2C_ITSlaveSeqCplt+0xc4>)
 800839e:	400a      	ands	r2, r1
 80083a0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2241      	movs	r2, #65	@ 0x41
 80083a6:	5c9b      	ldrb	r3, [r3, r2]
 80083a8:	b2db      	uxtb	r3, r3
 80083aa:	2b29      	cmp	r3, #41	@ 0x29
 80083ac:	d114      	bne.n	80083d8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2241      	movs	r2, #65	@ 0x41
 80083b2:	2128      	movs	r1, #40	@ 0x28
 80083b4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2221      	movs	r2, #33	@ 0x21
 80083ba:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	2101      	movs	r1, #1
 80083c0:	0018      	movs	r0, r3
 80083c2:	f000 fd5f 	bl	8008e84 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2240      	movs	r2, #64	@ 0x40
 80083ca:	2100      	movs	r1, #0
 80083cc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	0018      	movs	r0, r3
 80083d2:	f7ff f968 	bl	80076a6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80083d6:	e019      	b.n	800840c <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	2241      	movs	r2, #65	@ 0x41
 80083dc:	5c9b      	ldrb	r3, [r3, r2]
 80083de:	b2db      	uxtb	r3, r3
 80083e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80083e2:	d113      	bne.n	800840c <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	2241      	movs	r2, #65	@ 0x41
 80083e8:	2128      	movs	r1, #40	@ 0x28
 80083ea:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	2222      	movs	r2, #34	@ 0x22
 80083f0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	2102      	movs	r1, #2
 80083f6:	0018      	movs	r0, r3
 80083f8:	f000 fd44 	bl	8008e84 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2240      	movs	r2, #64	@ 0x40
 8008400:	2100      	movs	r1, #0
 8008402:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	0018      	movs	r0, r3
 8008408:	f7ff f955 	bl	80076b6 <HAL_I2C_SlaveRxCpltCallback>
}
 800840c:	46c0      	nop			@ (mov r8, r8)
 800840e:	46bd      	mov	sp, r7
 8008410:	b004      	add	sp, #16
 8008412:	bd80      	pop	{r7, pc}
 8008414:	ffffbfff 	.word	0xffffbfff
 8008418:	ffff7fff 	.word	0xffff7fff

0800841c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b086      	sub	sp, #24
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	2220      	movs	r2, #32
 8008430:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	2241      	movs	r2, #65	@ 0x41
 8008436:	5c9b      	ldrb	r3, [r3, r2]
 8008438:	b2db      	uxtb	r3, r3
 800843a:	2b21      	cmp	r3, #33	@ 0x21
 800843c:	d108      	bne.n	8008450 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2101      	movs	r1, #1
 8008442:	0018      	movs	r0, r3
 8008444:	f000 fd1e 	bl	8008e84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	2211      	movs	r2, #17
 800844c:	631a      	str	r2, [r3, #48]	@ 0x30
 800844e:	e00d      	b.n	800846c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	2241      	movs	r2, #65	@ 0x41
 8008454:	5c9b      	ldrb	r3, [r3, r2]
 8008456:	b2db      	uxtb	r3, r3
 8008458:	2b22      	cmp	r3, #34	@ 0x22
 800845a:	d107      	bne.n	800846c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	2102      	movs	r1, #2
 8008460:	0018      	movs	r0, r3
 8008462:	f000 fd0f 	bl	8008e84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2212      	movs	r2, #18
 800846a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	685a      	ldr	r2, [r3, #4]
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	494e      	ldr	r1, [pc, #312]	@ (80085b0 <I2C_ITMasterCplt+0x194>)
 8008478:	400a      	ands	r2, r1
 800847a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	2200      	movs	r2, #0
 8008480:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	4a4b      	ldr	r2, [pc, #300]	@ (80085b4 <I2C_ITMasterCplt+0x198>)
 8008486:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8008488:	697b      	ldr	r3, [r7, #20]
 800848a:	2210      	movs	r2, #16
 800848c:	4013      	ands	r3, r2
 800848e:	d009      	beq.n	80084a4 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	2210      	movs	r2, #16
 8008496:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800849c:	2204      	movs	r2, #4
 800849e:	431a      	orrs	r2, r3
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2241      	movs	r2, #65	@ 0x41
 80084a8:	5c9b      	ldrb	r3, [r3, r2]
 80084aa:	b2db      	uxtb	r3, r3
 80084ac:	2b60      	cmp	r3, #96	@ 0x60
 80084ae:	d109      	bne.n	80084c4 <I2C_ITMasterCplt+0xa8>
 80084b0:	697b      	ldr	r3, [r7, #20]
 80084b2:	2204      	movs	r2, #4
 80084b4:	4013      	ands	r3, r2
 80084b6:	d005      	beq.n	80084c4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084be:	b2db      	uxtb	r3, r3
 80084c0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80084c2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	0018      	movs	r0, r3
 80084c8:	f000 fb19 	bl	8008afe <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084d0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2241      	movs	r2, #65	@ 0x41
 80084d6:	5c9b      	ldrb	r3, [r3, r2]
 80084d8:	b2db      	uxtb	r3, r3
 80084da:	2b60      	cmp	r3, #96	@ 0x60
 80084dc:	d002      	beq.n	80084e4 <I2C_ITMasterCplt+0xc8>
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	d007      	beq.n	80084f4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	0011      	movs	r1, r2
 80084ec:	0018      	movs	r0, r3
 80084ee:	f000 f9db 	bl	80088a8 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80084f2:	e058      	b.n	80085a6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2241      	movs	r2, #65	@ 0x41
 80084f8:	5c9b      	ldrb	r3, [r3, r2]
 80084fa:	b2db      	uxtb	r3, r3
 80084fc:	2b21      	cmp	r3, #33	@ 0x21
 80084fe:	d126      	bne.n	800854e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2241      	movs	r2, #65	@ 0x41
 8008504:	2120      	movs	r1, #32
 8008506:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	2242      	movs	r2, #66	@ 0x42
 8008512:	5c9b      	ldrb	r3, [r3, r2]
 8008514:	b2db      	uxtb	r3, r3
 8008516:	2b40      	cmp	r3, #64	@ 0x40
 8008518:	d10c      	bne.n	8008534 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	2242      	movs	r2, #66	@ 0x42
 800851e:	2100      	movs	r1, #0
 8008520:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	2240      	movs	r2, #64	@ 0x40
 8008526:	2100      	movs	r1, #0
 8008528:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	0018      	movs	r0, r3
 800852e:	f7ff f8e2 	bl	80076f6 <HAL_I2C_MemTxCpltCallback>
}
 8008532:	e038      	b.n	80085a6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2242      	movs	r2, #66	@ 0x42
 8008538:	2100      	movs	r1, #0
 800853a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2240      	movs	r2, #64	@ 0x40
 8008540:	2100      	movs	r1, #0
 8008542:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	0018      	movs	r0, r3
 8008548:	f7ff f89d 	bl	8007686 <HAL_I2C_MasterTxCpltCallback>
}
 800854c:	e02b      	b.n	80085a6 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	2241      	movs	r2, #65	@ 0x41
 8008552:	5c9b      	ldrb	r3, [r3, r2]
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b22      	cmp	r3, #34	@ 0x22
 8008558:	d125      	bne.n	80085a6 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2241      	movs	r2, #65	@ 0x41
 800855e:	2120      	movs	r1, #32
 8008560:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	2200      	movs	r2, #0
 8008566:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2242      	movs	r2, #66	@ 0x42
 800856c:	5c9b      	ldrb	r3, [r3, r2]
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b40      	cmp	r3, #64	@ 0x40
 8008572:	d10c      	bne.n	800858e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2242      	movs	r2, #66	@ 0x42
 8008578:	2100      	movs	r1, #0
 800857a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2240      	movs	r2, #64	@ 0x40
 8008580:	2100      	movs	r1, #0
 8008582:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	0018      	movs	r0, r3
 8008588:	f7ff f8bd 	bl	8007706 <HAL_I2C_MemRxCpltCallback>
}
 800858c:	e00b      	b.n	80085a6 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2242      	movs	r2, #66	@ 0x42
 8008592:	2100      	movs	r1, #0
 8008594:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	2240      	movs	r2, #64	@ 0x40
 800859a:	2100      	movs	r1, #0
 800859c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	0018      	movs	r0, r3
 80085a2:	f7ff f878 	bl	8007696 <HAL_I2C_MasterRxCpltCallback>
}
 80085a6:	46c0      	nop			@ (mov r8, r8)
 80085a8:	46bd      	mov	sp, r7
 80085aa:	b006      	add	sp, #24
 80085ac:	bd80      	pop	{r7, pc}
 80085ae:	46c0      	nop			@ (mov r8, r8)
 80085b0:	fe00e800 	.word	0xfe00e800
 80085b4:	ffff0000 	.word	0xffff0000

080085b8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b086      	sub	sp, #24
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
 80085c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80085ca:	683b      	ldr	r3, [r7, #0]
 80085cc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80085ce:	200f      	movs	r0, #15
 80085d0:	183b      	adds	r3, r7, r0
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	2141      	movs	r1, #65	@ 0x41
 80085d6:	5c52      	ldrb	r2, [r2, r1]
 80085d8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	2220      	movs	r2, #32
 80085e0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80085e2:	183b      	adds	r3, r7, r0
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	2b21      	cmp	r3, #33	@ 0x21
 80085e8:	d003      	beq.n	80085f2 <I2C_ITSlaveCplt+0x3a>
 80085ea:	183b      	adds	r3, r7, r0
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	2b29      	cmp	r3, #41	@ 0x29
 80085f0:	d109      	bne.n	8008606 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80085f2:	4a7b      	ldr	r2, [pc, #492]	@ (80087e0 <I2C_ITSlaveCplt+0x228>)
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	0011      	movs	r1, r2
 80085f8:	0018      	movs	r0, r3
 80085fa:	f000 fc43 	bl	8008e84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	2221      	movs	r2, #33	@ 0x21
 8008602:	631a      	str	r2, [r3, #48]	@ 0x30
 8008604:	e011      	b.n	800862a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008606:	220f      	movs	r2, #15
 8008608:	18bb      	adds	r3, r7, r2
 800860a:	781b      	ldrb	r3, [r3, #0]
 800860c:	2b22      	cmp	r3, #34	@ 0x22
 800860e:	d003      	beq.n	8008618 <I2C_ITSlaveCplt+0x60>
 8008610:	18bb      	adds	r3, r7, r2
 8008612:	781b      	ldrb	r3, [r3, #0]
 8008614:	2b2a      	cmp	r3, #42	@ 0x2a
 8008616:	d108      	bne.n	800862a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8008618:	4a72      	ldr	r2, [pc, #456]	@ (80087e4 <I2C_ITSlaveCplt+0x22c>)
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	0011      	movs	r1, r2
 800861e:	0018      	movs	r0, r3
 8008620:	f000 fc30 	bl	8008e84 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2222      	movs	r2, #34	@ 0x22
 8008628:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	685a      	ldr	r2, [r3, #4]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	2180      	movs	r1, #128	@ 0x80
 8008636:	0209      	lsls	r1, r1, #8
 8008638:	430a      	orrs	r2, r1
 800863a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685a      	ldr	r2, [r3, #4]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	4968      	ldr	r1, [pc, #416]	@ (80087e8 <I2C_ITSlaveCplt+0x230>)
 8008648:	400a      	ands	r2, r1
 800864a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	0018      	movs	r0, r3
 8008650:	f000 fa55 	bl	8008afe <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8008654:	693a      	ldr	r2, [r7, #16]
 8008656:	2380      	movs	r3, #128	@ 0x80
 8008658:	01db      	lsls	r3, r3, #7
 800865a:	4013      	ands	r3, r2
 800865c:	d013      	beq.n	8008686 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	681a      	ldr	r2, [r3, #0]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	4960      	ldr	r1, [pc, #384]	@ (80087ec <I2C_ITSlaveCplt+0x234>)
 800866a:	400a      	ands	r2, r1
 800866c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008672:	2b00      	cmp	r3, #0
 8008674:	d01f      	beq.n	80086b6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	b29a      	uxth	r2, r3
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8008684:	e017      	b.n	80086b6 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	2380      	movs	r3, #128	@ 0x80
 800868a:	021b      	lsls	r3, r3, #8
 800868c:	4013      	ands	r3, r2
 800868e:	d012      	beq.n	80086b6 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	4955      	ldr	r1, [pc, #340]	@ (80087f0 <I2C_ITSlaveCplt+0x238>)
 800869c:	400a      	ands	r2, r1
 800869e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d006      	beq.n	80086b6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	685b      	ldr	r3, [r3, #4]
 80086b0:	b29a      	uxth	r2, r3
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80086b6:	697b      	ldr	r3, [r7, #20]
 80086b8:	2204      	movs	r2, #4
 80086ba:	4013      	ands	r3, r2
 80086bc:	d020      	beq.n	8008700 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80086be:	697b      	ldr	r3, [r7, #20]
 80086c0:	2204      	movs	r2, #4
 80086c2:	4393      	bics	r3, r2
 80086c4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d0:	b2d2      	uxtb	r2, r2
 80086d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086d8:	1c5a      	adds	r2, r3, #1
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00c      	beq.n	8008700 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80086ea:	3b01      	subs	r3, #1
 80086ec:	b29a      	uxth	r2, r3
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80086f6:	b29b      	uxth	r3, r3
 80086f8:	3b01      	subs	r3, #1
 80086fa:	b29a      	uxth	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008704:	b29b      	uxth	r3, r3
 8008706:	2b00      	cmp	r3, #0
 8008708:	d005      	beq.n	8008716 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800870e:	2204      	movs	r2, #4
 8008710:	431a      	orrs	r2, r3
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2242      	movs	r2, #66	@ 0x42
 800871a:	2100      	movs	r1, #0
 800871c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008728:	2b00      	cmp	r3, #0
 800872a:	d013      	beq.n	8008754 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	0011      	movs	r1, r2
 8008734:	0018      	movs	r0, r3
 8008736:	f000 f8b7 	bl	80088a8 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2241      	movs	r2, #65	@ 0x41
 800873e:	5c9b      	ldrb	r3, [r3, r2]
 8008740:	b2db      	uxtb	r3, r3
 8008742:	2b28      	cmp	r3, #40	@ 0x28
 8008744:	d147      	bne.n	80087d6 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8008746:	697a      	ldr	r2, [r7, #20]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	0011      	movs	r1, r2
 800874c:	0018      	movs	r0, r3
 800874e:	f000 f853 	bl	80087f8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008752:	e040      	b.n	80087d6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008758:	4a26      	ldr	r2, [pc, #152]	@ (80087f4 <I2C_ITSlaveCplt+0x23c>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d016      	beq.n	800878c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	0018      	movs	r0, r3
 8008762:	f7ff fdf7 	bl	8008354 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	4a22      	ldr	r2, [pc, #136]	@ (80087f4 <I2C_ITSlaveCplt+0x23c>)
 800876a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2241      	movs	r2, #65	@ 0x41
 8008770:	2120      	movs	r1, #32
 8008772:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	2240      	movs	r2, #64	@ 0x40
 800877e:	2100      	movs	r1, #0
 8008780:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	0018      	movs	r0, r3
 8008786:	f7fe ffae 	bl	80076e6 <HAL_I2C_ListenCpltCallback>
}
 800878a:	e024      	b.n	80087d6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	2241      	movs	r2, #65	@ 0x41
 8008790:	5c9b      	ldrb	r3, [r3, r2]
 8008792:	b2db      	uxtb	r3, r3
 8008794:	2b22      	cmp	r3, #34	@ 0x22
 8008796:	d10f      	bne.n	80087b8 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2241      	movs	r2, #65	@ 0x41
 800879c:	2120      	movs	r1, #32
 800879e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2240      	movs	r2, #64	@ 0x40
 80087aa:	2100      	movs	r1, #0
 80087ac:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	0018      	movs	r0, r3
 80087b2:	f7fe ff80 	bl	80076b6 <HAL_I2C_SlaveRxCpltCallback>
}
 80087b6:	e00e      	b.n	80087d6 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2241      	movs	r2, #65	@ 0x41
 80087bc:	2120      	movs	r1, #32
 80087be:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	2240      	movs	r2, #64	@ 0x40
 80087ca:	2100      	movs	r1, #0
 80087cc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	0018      	movs	r0, r3
 80087d2:	f7fe ff68 	bl	80076a6 <HAL_I2C_SlaveTxCpltCallback>
}
 80087d6:	46c0      	nop			@ (mov r8, r8)
 80087d8:	46bd      	mov	sp, r7
 80087da:	b006      	add	sp, #24
 80087dc:	bd80      	pop	{r7, pc}
 80087de:	46c0      	nop			@ (mov r8, r8)
 80087e0:	00008001 	.word	0x00008001
 80087e4:	00008002 	.word	0x00008002
 80087e8:	fe00e800 	.word	0xfe00e800
 80087ec:	ffffbfff 	.word	0xffffbfff
 80087f0:	ffff7fff 	.word	0xffff7fff
 80087f4:	ffff0000 	.word	0xffff0000

080087f8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80087f8:	b580      	push	{r7, lr}
 80087fa:	b082      	sub	sp, #8
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
 8008800:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a26      	ldr	r2, [pc, #152]	@ (80088a0 <I2C_ITListenCplt+0xa8>)
 8008806:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2200      	movs	r2, #0
 800880c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2241      	movs	r2, #65	@ 0x41
 8008812:	2120      	movs	r1, #32
 8008814:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	2242      	movs	r2, #66	@ 0x42
 800881a:	2100      	movs	r1, #0
 800881c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	2200      	movs	r2, #0
 8008822:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8008824:	683b      	ldr	r3, [r7, #0]
 8008826:	2204      	movs	r2, #4
 8008828:	4013      	ands	r3, r2
 800882a:	d022      	beq.n	8008872 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008836:	b2d2      	uxtb	r2, r2
 8008838:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800883e:	1c5a      	adds	r2, r3, #1
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008848:	2b00      	cmp	r3, #0
 800884a:	d012      	beq.n	8008872 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8008850:	3b01      	subs	r3, #1
 8008852:	b29a      	uxth	r2, r3
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800885c:	b29b      	uxth	r3, r3
 800885e:	3b01      	subs	r3, #1
 8008860:	b29a      	uxth	r2, r3
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800886a:	2204      	movs	r2, #4
 800886c:	431a      	orrs	r2, r3
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008872:	4a0c      	ldr	r2, [pc, #48]	@ (80088a4 <I2C_ITListenCplt+0xac>)
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	0011      	movs	r1, r2
 8008878:	0018      	movs	r0, r3
 800887a:	f000 fb03 	bl	8008e84 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	2210      	movs	r2, #16
 8008884:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2240      	movs	r2, #64	@ 0x40
 800888a:	2100      	movs	r1, #0
 800888c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	0018      	movs	r0, r3
 8008892:	f7fe ff28 	bl	80076e6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8008896:	46c0      	nop			@ (mov r8, r8)
 8008898:	46bd      	mov	sp, r7
 800889a:	b002      	add	sp, #8
 800889c:	bd80      	pop	{r7, pc}
 800889e:	46c0      	nop			@ (mov r8, r8)
 80088a0:	ffff0000 	.word	0xffff0000
 80088a4:	00008003 	.word	0x00008003

080088a8 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]
 80088b0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80088b2:	200f      	movs	r0, #15
 80088b4:	183b      	adds	r3, r7, r0
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	2141      	movs	r1, #65	@ 0x41
 80088ba:	5c52      	ldrb	r2, [r2, r1]
 80088bc:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2242      	movs	r2, #66	@ 0x42
 80088c2:	2100      	movs	r1, #0
 80088c4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4a72      	ldr	r2, [pc, #456]	@ (8008a94 <I2C_ITError+0x1ec>)
 80088ca:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	2200      	movs	r2, #0
 80088d0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80088d6:	683b      	ldr	r3, [r7, #0]
 80088d8:	431a      	orrs	r2, r3
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 80088de:	183b      	adds	r3, r7, r0
 80088e0:	781b      	ldrb	r3, [r3, #0]
 80088e2:	2b28      	cmp	r3, #40	@ 0x28
 80088e4:	d007      	beq.n	80088f6 <I2C_ITError+0x4e>
 80088e6:	183b      	adds	r3, r7, r0
 80088e8:	781b      	ldrb	r3, [r3, #0]
 80088ea:	2b29      	cmp	r3, #41	@ 0x29
 80088ec:	d003      	beq.n	80088f6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 80088ee:	183b      	adds	r3, r7, r0
 80088f0:	781b      	ldrb	r3, [r3, #0]
 80088f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80088f4:	d10c      	bne.n	8008910 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2103      	movs	r1, #3
 80088fa:	0018      	movs	r0, r3
 80088fc:	f000 fac2 	bl	8008e84 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2241      	movs	r2, #65	@ 0x41
 8008904:	2128      	movs	r1, #40	@ 0x28
 8008906:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	4a63      	ldr	r2, [pc, #396]	@ (8008a98 <I2C_ITError+0x1f0>)
 800890c:	635a      	str	r2, [r3, #52]	@ 0x34
 800890e:	e032      	b.n	8008976 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008910:	4a62      	ldr	r2, [pc, #392]	@ (8008a9c <I2C_ITError+0x1f4>)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	0011      	movs	r1, r2
 8008916:	0018      	movs	r0, r3
 8008918:	f000 fab4 	bl	8008e84 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	0018      	movs	r0, r3
 8008920:	f000 f8ed 	bl	8008afe <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2241      	movs	r2, #65	@ 0x41
 8008928:	5c9b      	ldrb	r3, [r3, r2]
 800892a:	b2db      	uxtb	r3, r3
 800892c:	2b60      	cmp	r3, #96	@ 0x60
 800892e:	d01f      	beq.n	8008970 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2241      	movs	r2, #65	@ 0x41
 8008934:	2120      	movs	r1, #32
 8008936:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681b      	ldr	r3, [r3, #0]
 800893c:	699b      	ldr	r3, [r3, #24]
 800893e:	2220      	movs	r2, #32
 8008940:	4013      	ands	r3, r2
 8008942:	2b20      	cmp	r3, #32
 8008944:	d114      	bne.n	8008970 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	699b      	ldr	r3, [r3, #24]
 800894c:	2210      	movs	r2, #16
 800894e:	4013      	ands	r3, r2
 8008950:	2b10      	cmp	r3, #16
 8008952:	d109      	bne.n	8008968 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	2210      	movs	r2, #16
 800895a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008960:	2204      	movs	r2, #4
 8008962:	431a      	orrs	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2220      	movs	r2, #32
 800896e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2200      	movs	r2, #0
 8008974:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800897a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008980:	2b00      	cmp	r3, #0
 8008982:	d03b      	beq.n	80089fc <I2C_ITError+0x154>
 8008984:	68bb      	ldr	r3, [r7, #8]
 8008986:	2b11      	cmp	r3, #17
 8008988:	d002      	beq.n	8008990 <I2C_ITError+0xe8>
 800898a:	68bb      	ldr	r3, [r7, #8]
 800898c:	2b21      	cmp	r3, #33	@ 0x21
 800898e:	d135      	bne.n	80089fc <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681a      	ldr	r2, [r3, #0]
 8008996:	2380      	movs	r3, #128	@ 0x80
 8008998:	01db      	lsls	r3, r3, #7
 800899a:	401a      	ands	r2, r3
 800899c:	2380      	movs	r3, #128	@ 0x80
 800899e:	01db      	lsls	r3, r3, #7
 80089a0:	429a      	cmp	r2, r3
 80089a2:	d107      	bne.n	80089b4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	681a      	ldr	r2, [r3, #0]
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	493c      	ldr	r1, [pc, #240]	@ (8008aa0 <I2C_ITError+0x1f8>)
 80089b0:	400a      	ands	r2, r1
 80089b2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089b8:	0018      	movs	r0, r3
 80089ba:	f7fe f96e 	bl	8006c9a <HAL_DMA_GetState>
 80089be:	0003      	movs	r3, r0
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d016      	beq.n	80089f2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089c8:	4a36      	ldr	r2, [pc, #216]	@ (8008aa4 <I2C_ITError+0x1fc>)
 80089ca:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	2240      	movs	r2, #64	@ 0x40
 80089d0:	2100      	movs	r1, #0
 80089d2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089d8:	0018      	movs	r0, r3
 80089da:	f7fe f869 	bl	8006ab0 <HAL_DMA_Abort_IT>
 80089de:	1e03      	subs	r3, r0, #0
 80089e0:	d051      	beq.n	8008a86 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80089ec:	0018      	movs	r0, r3
 80089ee:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089f0:	e049      	b.n	8008a86 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	0018      	movs	r0, r3
 80089f6:	f000 f859 	bl	8008aac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80089fa:	e044      	b.n	8008a86 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d03b      	beq.n	8008a7c <I2C_ITError+0x1d4>
 8008a04:	68bb      	ldr	r3, [r7, #8]
 8008a06:	2b12      	cmp	r3, #18
 8008a08:	d002      	beq.n	8008a10 <I2C_ITError+0x168>
 8008a0a:	68bb      	ldr	r3, [r7, #8]
 8008a0c:	2b22      	cmp	r3, #34	@ 0x22
 8008a0e:	d135      	bne.n	8008a7c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	2380      	movs	r3, #128	@ 0x80
 8008a18:	021b      	lsls	r3, r3, #8
 8008a1a:	401a      	ands	r2, r3
 8008a1c:	2380      	movs	r3, #128	@ 0x80
 8008a1e:	021b      	lsls	r3, r3, #8
 8008a20:	429a      	cmp	r2, r3
 8008a22:	d107      	bne.n	8008a34 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	681a      	ldr	r2, [r3, #0]
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	491e      	ldr	r1, [pc, #120]	@ (8008aa8 <I2C_ITError+0x200>)
 8008a30:	400a      	ands	r2, r1
 8008a32:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a38:	0018      	movs	r0, r3
 8008a3a:	f7fe f92e 	bl	8006c9a <HAL_DMA_GetState>
 8008a3e:	0003      	movs	r3, r0
 8008a40:	2b01      	cmp	r3, #1
 8008a42:	d016      	beq.n	8008a72 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a48:	4a16      	ldr	r2, [pc, #88]	@ (8008aa4 <I2C_ITError+0x1fc>)
 8008a4a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	2240      	movs	r2, #64	@ 0x40
 8008a50:	2100      	movs	r1, #0
 8008a52:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a58:	0018      	movs	r0, r3
 8008a5a:	f7fe f829 	bl	8006ab0 <HAL_DMA_Abort_IT>
 8008a5e:	1e03      	subs	r3, r0, #0
 8008a60:	d013      	beq.n	8008a8a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a66:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a6c:	0018      	movs	r0, r3
 8008a6e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a70:	e00b      	b.n	8008a8a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	0018      	movs	r0, r3
 8008a76:	f000 f819 	bl	8008aac <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a7a:	e006      	b.n	8008a8a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	0018      	movs	r0, r3
 8008a80:	f000 f814 	bl	8008aac <I2C_TreatErrorCallback>
  }
}
 8008a84:	e002      	b.n	8008a8c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008a86:	46c0      	nop			@ (mov r8, r8)
 8008a88:	e000      	b.n	8008a8c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008a8a:	46c0      	nop			@ (mov r8, r8)
}
 8008a8c:	46c0      	nop			@ (mov r8, r8)
 8008a8e:	46bd      	mov	sp, r7
 8008a90:	b004      	add	sp, #16
 8008a92:	bd80      	pop	{r7, pc}
 8008a94:	ffff0000 	.word	0xffff0000
 8008a98:	0800798d 	.word	0x0800798d
 8008a9c:	00008003 	.word	0x00008003
 8008aa0:	ffffbfff 	.word	0xffffbfff
 8008aa4:	08008cb7 	.word	0x08008cb7
 8008aa8:	ffff7fff 	.word	0xffff7fff

08008aac <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008aac:	b580      	push	{r7, lr}
 8008aae:	b082      	sub	sp, #8
 8008ab0:	af00      	add	r7, sp, #0
 8008ab2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	2241      	movs	r2, #65	@ 0x41
 8008ab8:	5c9b      	ldrb	r3, [r3, r2]
 8008aba:	b2db      	uxtb	r3, r3
 8008abc:	2b60      	cmp	r3, #96	@ 0x60
 8008abe:	d10f      	bne.n	8008ae0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2241      	movs	r2, #65	@ 0x41
 8008ac4:	2120      	movs	r1, #32
 8008ac6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	2200      	movs	r2, #0
 8008acc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2240      	movs	r2, #64	@ 0x40
 8008ad2:	2100      	movs	r1, #0
 8008ad4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	0018      	movs	r0, r3
 8008ada:	f7fe fe24 	bl	8007726 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008ade:	e00a      	b.n	8008af6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	2200      	movs	r2, #0
 8008ae4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2240      	movs	r2, #64	@ 0x40
 8008aea:	2100      	movs	r1, #0
 8008aec:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	0018      	movs	r0, r3
 8008af2:	f7fe fe10 	bl	8007716 <HAL_I2C_ErrorCallback>
}
 8008af6:	46c0      	nop			@ (mov r8, r8)
 8008af8:	46bd      	mov	sp, r7
 8008afa:	b002      	add	sp, #8
 8008afc:	bd80      	pop	{r7, pc}

08008afe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b082      	sub	sp, #8
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	699b      	ldr	r3, [r3, #24]
 8008b0c:	2202      	movs	r2, #2
 8008b0e:	4013      	ands	r3, r2
 8008b10:	2b02      	cmp	r3, #2
 8008b12:	d103      	bne.n	8008b1c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	2200      	movs	r2, #0
 8008b1a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	699b      	ldr	r3, [r3, #24]
 8008b22:	2201      	movs	r2, #1
 8008b24:	4013      	ands	r3, r2
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d007      	beq.n	8008b3a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	699a      	ldr	r2, [r3, #24]
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	2101      	movs	r1, #1
 8008b36:	430a      	orrs	r2, r1
 8008b38:	619a      	str	r2, [r3, #24]
  }
}
 8008b3a:	46c0      	nop			@ (mov r8, r8)
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	b002      	add	sp, #8
 8008b40:	bd80      	pop	{r7, pc}
	...

08008b44 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008b44:	b580      	push	{r7, lr}
 8008b46:	b084      	sub	sp, #16
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b50:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	681a      	ldr	r2, [r3, #0]
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	4920      	ldr	r1, [pc, #128]	@ (8008be0 <I2C_DMAMasterTransmitCplt+0x9c>)
 8008b5e:	400a      	ands	r2, r1
 8008b60:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b66:	b29b      	uxth	r3, r3
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d105      	bne.n	8008b78 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008b6c:	68fb      	ldr	r3, [r7, #12]
 8008b6e:	2120      	movs	r1, #32
 8008b70:	0018      	movs	r0, r3
 8008b72:	f000 f8f9 	bl	8008d68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008b76:	e02e      	b.n	8008bd6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008b7c:	68fa      	ldr	r2, [r7, #12]
 8008b7e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008b80:	189a      	adds	r2, r3, r2
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b8a:	b29b      	uxth	r3, r3
 8008b8c:	2bff      	cmp	r3, #255	@ 0xff
 8008b8e:	d903      	bls.n	8008b98 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	22ff      	movs	r2, #255	@ 0xff
 8008b94:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008b96:	e004      	b.n	8008ba2 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8008b98:	68fb      	ldr	r3, [r7, #12]
 8008b9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008b9c:	b29a      	uxth	r2, r3
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008baa:	0019      	movs	r1, r3
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3328      	adds	r3, #40	@ 0x28
 8008bb2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 8008bb8:	f7fd fed4 	bl	8006964 <HAL_DMA_Start_IT>
 8008bbc:	1e03      	subs	r3, r0, #0
 8008bbe:	d005      	beq.n	8008bcc <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	2110      	movs	r1, #16
 8008bc4:	0018      	movs	r0, r3
 8008bc6:	f7ff fe6f 	bl	80088a8 <I2C_ITError>
}
 8008bca:	e004      	b.n	8008bd6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	2140      	movs	r1, #64	@ 0x40
 8008bd0:	0018      	movs	r0, r3
 8008bd2:	f000 f8c9 	bl	8008d68 <I2C_Enable_IRQ>
}
 8008bd6:	46c0      	nop			@ (mov r8, r8)
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	b004      	add	sp, #16
 8008bdc:	bd80      	pop	{r7, pc}
 8008bde:	46c0      	nop			@ (mov r8, r8)
 8008be0:	ffffbfff 	.word	0xffffbfff

08008be4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bf0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	681a      	ldr	r2, [r3, #0]
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4920      	ldr	r1, [pc, #128]	@ (8008c80 <I2C_DMAMasterReceiveCplt+0x9c>)
 8008bfe:	400a      	ands	r2, r1
 8008c00:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c06:	b29b      	uxth	r3, r3
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d105      	bne.n	8008c18 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2120      	movs	r1, #32
 8008c10:	0018      	movs	r0, r3
 8008c12:	f000 f8a9 	bl	8008d68 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8008c16:	e02e      	b.n	8008c76 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c1c:	68fa      	ldr	r2, [r7, #12]
 8008c1e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 8008c20:	189a      	adds	r2, r3, r2
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c2a:	b29b      	uxth	r3, r3
 8008c2c:	2bff      	cmp	r3, #255	@ 0xff
 8008c2e:	d903      	bls.n	8008c38 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	22ff      	movs	r2, #255	@ 0xff
 8008c34:	851a      	strh	r2, [r3, #40]	@ 0x28
 8008c36:	e004      	b.n	8008c42 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008c3c:	b29a      	uxth	r2, r3
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	3324      	adds	r3, #36	@ 0x24
 8008c4c:	0019      	movs	r1, r3
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c52:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008c54:	68fb      	ldr	r3, [r7, #12]
 8008c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008c58:	f7fd fe84 	bl	8006964 <HAL_DMA_Start_IT>
 8008c5c:	1e03      	subs	r3, r0, #0
 8008c5e:	d005      	beq.n	8008c6c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	2110      	movs	r1, #16
 8008c64:	0018      	movs	r0, r3
 8008c66:	f7ff fe1f 	bl	80088a8 <I2C_ITError>
}
 8008c6a:	e004      	b.n	8008c76 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008c6c:	68fb      	ldr	r3, [r7, #12]
 8008c6e:	2140      	movs	r1, #64	@ 0x40
 8008c70:	0018      	movs	r0, r3
 8008c72:	f000 f879 	bl	8008d68 <I2C_Enable_IRQ>
}
 8008c76:	46c0      	nop			@ (mov r8, r8)
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	b004      	add	sp, #16
 8008c7c:	bd80      	pop	{r7, pc}
 8008c7e:	46c0      	nop			@ (mov r8, r8)
 8008c80:	ffff7fff 	.word	0xffff7fff

08008c84 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008c84:	b580      	push	{r7, lr}
 8008c86:	b084      	sub	sp, #16
 8008c88:	af00      	add	r7, sp, #0
 8008c8a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c90:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	685a      	ldr	r2, [r3, #4]
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	2180      	movs	r1, #128	@ 0x80
 8008c9e:	0209      	lsls	r1, r1, #8
 8008ca0:	430a      	orrs	r2, r1
 8008ca2:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	2110      	movs	r1, #16
 8008ca8:	0018      	movs	r0, r3
 8008caa:	f7ff fdfd 	bl	80088a8 <I2C_ITError>
}
 8008cae:	46c0      	nop			@ (mov r8, r8)
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	b004      	add	sp, #16
 8008cb4:	bd80      	pop	{r7, pc}

08008cb6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008cc2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d003      	beq.n	8008cd4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008cd0:	2200      	movs	r2, #0
 8008cd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d003      	beq.n	8008ce4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	0018      	movs	r0, r3
 8008ce8:	f7ff fee0 	bl	8008aac <I2C_TreatErrorCallback>
}
 8008cec:	46c0      	nop			@ (mov r8, r8)
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b004      	add	sp, #16
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008cf4:	b590      	push	{r4, r7, lr}
 8008cf6:	b087      	sub	sp, #28
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	60f8      	str	r0, [r7, #12]
 8008cfc:	0008      	movs	r0, r1
 8008cfe:	0011      	movs	r1, r2
 8008d00:	607b      	str	r3, [r7, #4]
 8008d02:	240a      	movs	r4, #10
 8008d04:	193b      	adds	r3, r7, r4
 8008d06:	1c02      	adds	r2, r0, #0
 8008d08:	801a      	strh	r2, [r3, #0]
 8008d0a:	2009      	movs	r0, #9
 8008d0c:	183b      	adds	r3, r7, r0
 8008d0e:	1c0a      	adds	r2, r1, #0
 8008d10:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d12:	193b      	adds	r3, r7, r4
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	059b      	lsls	r3, r3, #22
 8008d18:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d1a:	183b      	adds	r3, r7, r0
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	0419      	lsls	r1, r3, #16
 8008d20:	23ff      	movs	r3, #255	@ 0xff
 8008d22:	041b      	lsls	r3, r3, #16
 8008d24:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d26:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008d2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	085b      	lsrs	r3, r3, #1
 8008d34:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	685b      	ldr	r3, [r3, #4]
 8008d3c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d3e:	0d51      	lsrs	r1, r2, #21
 8008d40:	2280      	movs	r2, #128	@ 0x80
 8008d42:	00d2      	lsls	r2, r2, #3
 8008d44:	400a      	ands	r2, r1
 8008d46:	4907      	ldr	r1, [pc, #28]	@ (8008d64 <I2C_TransferConfig+0x70>)
 8008d48:	430a      	orrs	r2, r1
 8008d4a:	43d2      	mvns	r2, r2
 8008d4c:	401a      	ands	r2, r3
 8008d4e:	0011      	movs	r1, r2
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	697a      	ldr	r2, [r7, #20]
 8008d56:	430a      	orrs	r2, r1
 8008d58:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008d5a:	46c0      	nop			@ (mov r8, r8)
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	b007      	add	sp, #28
 8008d60:	bd90      	pop	{r4, r7, pc}
 8008d62:	46c0      	nop			@ (mov r8, r8)
 8008d64:	03ff63ff 	.word	0x03ff63ff

08008d68 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b084      	sub	sp, #16
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	000a      	movs	r2, r1
 8008d72:	1cbb      	adds	r3, r7, #2
 8008d74:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8008d76:	2300      	movs	r3, #0
 8008d78:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d7e:	4b3e      	ldr	r3, [pc, #248]	@ (8008e78 <I2C_Enable_IRQ+0x110>)
 8008d80:	429a      	cmp	r2, r3
 8008d82:	d035      	beq.n	8008df0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008d88:	4b3c      	ldr	r3, [pc, #240]	@ (8008e7c <I2C_Enable_IRQ+0x114>)
 8008d8a:	429a      	cmp	r2, r3
 8008d8c:	d030      	beq.n	8008df0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008d92:	4b3b      	ldr	r3, [pc, #236]	@ (8008e80 <I2C_Enable_IRQ+0x118>)
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d02b      	beq.n	8008df0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008d98:	1cbb      	adds	r3, r7, #2
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	5e9b      	ldrsh	r3, [r3, r2]
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	da03      	bge.n	8008daa <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	22b8      	movs	r2, #184	@ 0xb8
 8008da6:	4313      	orrs	r3, r2
 8008da8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008daa:	1cbb      	adds	r3, r7, #2
 8008dac:	881b      	ldrh	r3, [r3, #0]
 8008dae:	2201      	movs	r2, #1
 8008db0:	4013      	ands	r3, r2
 8008db2:	d003      	beq.n	8008dbc <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	22f2      	movs	r2, #242	@ 0xf2
 8008db8:	4313      	orrs	r3, r2
 8008dba:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008dbc:	1cbb      	adds	r3, r7, #2
 8008dbe:	881b      	ldrh	r3, [r3, #0]
 8008dc0:	2202      	movs	r2, #2
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	d003      	beq.n	8008dce <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	22f4      	movs	r2, #244	@ 0xf4
 8008dca:	4313      	orrs	r3, r2
 8008dcc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008dce:	1cbb      	adds	r3, r7, #2
 8008dd0:	881b      	ldrh	r3, [r3, #0]
 8008dd2:	2b10      	cmp	r3, #16
 8008dd4:	d103      	bne.n	8008dde <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	2290      	movs	r2, #144	@ 0x90
 8008dda:	4313      	orrs	r3, r2
 8008ddc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008dde:	1cbb      	adds	r3, r7, #2
 8008de0:	881b      	ldrh	r3, [r3, #0]
 8008de2:	2b20      	cmp	r3, #32
 8008de4:	d13c      	bne.n	8008e60 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	4313      	orrs	r3, r2
 8008dec:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008dee:	e037      	b.n	8008e60 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008df0:	1cbb      	adds	r3, r7, #2
 8008df2:	2200      	movs	r2, #0
 8008df4:	5e9b      	ldrsh	r3, [r3, r2]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	da03      	bge.n	8008e02 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	22b8      	movs	r2, #184	@ 0xb8
 8008dfe:	4313      	orrs	r3, r2
 8008e00:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e02:	1cbb      	adds	r3, r7, #2
 8008e04:	881b      	ldrh	r3, [r3, #0]
 8008e06:	2201      	movs	r2, #1
 8008e08:	4013      	ands	r3, r2
 8008e0a:	d003      	beq.n	8008e14 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	22f2      	movs	r2, #242	@ 0xf2
 8008e10:	4313      	orrs	r3, r2
 8008e12:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008e14:	1cbb      	adds	r3, r7, #2
 8008e16:	881b      	ldrh	r3, [r3, #0]
 8008e18:	2202      	movs	r2, #2
 8008e1a:	4013      	ands	r3, r2
 8008e1c:	d003      	beq.n	8008e26 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	22f4      	movs	r2, #244	@ 0xf4
 8008e22:	4313      	orrs	r3, r2
 8008e24:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008e26:	1cbb      	adds	r3, r7, #2
 8008e28:	881b      	ldrh	r3, [r3, #0]
 8008e2a:	2b10      	cmp	r3, #16
 8008e2c:	d103      	bne.n	8008e36 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	2290      	movs	r2, #144	@ 0x90
 8008e32:	4313      	orrs	r3, r2
 8008e34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008e36:	1cbb      	adds	r3, r7, #2
 8008e38:	881b      	ldrh	r3, [r3, #0]
 8008e3a:	2b20      	cmp	r3, #32
 8008e3c:	d103      	bne.n	8008e46 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	2260      	movs	r2, #96	@ 0x60
 8008e42:	4313      	orrs	r3, r2
 8008e44:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8008e80 <I2C_Enable_IRQ+0x118>)
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d007      	beq.n	8008e60 <I2C_Enable_IRQ+0xf8>
 8008e50:	1cbb      	adds	r3, r7, #2
 8008e52:	881b      	ldrh	r3, [r3, #0]
 8008e54:	2b40      	cmp	r3, #64	@ 0x40
 8008e56:	d103      	bne.n	8008e60 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	2240      	movs	r2, #64	@ 0x40
 8008e5c:	4313      	orrs	r3, r2
 8008e5e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	6819      	ldr	r1, [r3, #0]
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	68fa      	ldr	r2, [r7, #12]
 8008e6c:	430a      	orrs	r2, r1
 8008e6e:	601a      	str	r2, [r3, #0]
}
 8008e70:	46c0      	nop			@ (mov r8, r8)
 8008e72:	46bd      	mov	sp, r7
 8008e74:	b004      	add	sp, #16
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	08007b8d 	.word	0x08007b8d
 8008e7c:	08007fbd 	.word	0x08007fbd
 8008e80:	08007d85 	.word	0x08007d85

08008e84 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
 8008e8c:	000a      	movs	r2, r1
 8008e8e:	1cbb      	adds	r3, r7, #2
 8008e90:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 8008e92:	2300      	movs	r3, #0
 8008e94:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008e96:	1cbb      	adds	r3, r7, #2
 8008e98:	881b      	ldrh	r3, [r3, #0]
 8008e9a:	2201      	movs	r2, #1
 8008e9c:	4013      	ands	r3, r2
 8008e9e:	d010      	beq.n	8008ec2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2242      	movs	r2, #66	@ 0x42
 8008ea4:	4313      	orrs	r3, r2
 8008ea6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2241      	movs	r2, #65	@ 0x41
 8008eac:	5c9b      	ldrb	r3, [r3, r2]
 8008eae:	b2db      	uxtb	r3, r3
 8008eb0:	001a      	movs	r2, r3
 8008eb2:	2328      	movs	r3, #40	@ 0x28
 8008eb4:	4013      	ands	r3, r2
 8008eb6:	2b28      	cmp	r3, #40	@ 0x28
 8008eb8:	d003      	beq.n	8008ec2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	22b0      	movs	r2, #176	@ 0xb0
 8008ebe:	4313      	orrs	r3, r2
 8008ec0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008ec2:	1cbb      	adds	r3, r7, #2
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	2202      	movs	r2, #2
 8008ec8:	4013      	ands	r3, r2
 8008eca:	d010      	beq.n	8008eee <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	2244      	movs	r2, #68	@ 0x44
 8008ed0:	4313      	orrs	r3, r2
 8008ed2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	2241      	movs	r2, #65	@ 0x41
 8008ed8:	5c9b      	ldrb	r3, [r3, r2]
 8008eda:	b2db      	uxtb	r3, r3
 8008edc:	001a      	movs	r2, r3
 8008ede:	2328      	movs	r3, #40	@ 0x28
 8008ee0:	4013      	ands	r3, r2
 8008ee2:	2b28      	cmp	r3, #40	@ 0x28
 8008ee4:	d003      	beq.n	8008eee <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	22b0      	movs	r2, #176	@ 0xb0
 8008eea:	4313      	orrs	r3, r2
 8008eec:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008eee:	1cbb      	adds	r3, r7, #2
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	5e9b      	ldrsh	r3, [r3, r2]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	da03      	bge.n	8008f00 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	22b8      	movs	r2, #184	@ 0xb8
 8008efc:	4313      	orrs	r3, r2
 8008efe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008f00:	1cbb      	adds	r3, r7, #2
 8008f02:	881b      	ldrh	r3, [r3, #0]
 8008f04:	2b10      	cmp	r3, #16
 8008f06:	d103      	bne.n	8008f10 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2290      	movs	r2, #144	@ 0x90
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008f10:	1cbb      	adds	r3, r7, #2
 8008f12:	881b      	ldrh	r3, [r3, #0]
 8008f14:	2b20      	cmp	r3, #32
 8008f16:	d103      	bne.n	8008f20 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	2220      	movs	r2, #32
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008f20:	1cbb      	adds	r3, r7, #2
 8008f22:	881b      	ldrh	r3, [r3, #0]
 8008f24:	2b40      	cmp	r3, #64	@ 0x40
 8008f26:	d103      	bne.n	8008f30 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	2240      	movs	r2, #64	@ 0x40
 8008f2c:	4313      	orrs	r3, r2
 8008f2e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	43d9      	mvns	r1, r3
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	400a      	ands	r2, r1
 8008f40:	601a      	str	r2, [r3, #0]
}
 8008f42:	46c0      	nop			@ (mov r8, r8)
 8008f44:	46bd      	mov	sp, r7
 8008f46:	b004      	add	sp, #16
 8008f48:	bd80      	pop	{r7, pc}
	...

08008f4c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	2241      	movs	r2, #65	@ 0x41
 8008f5a:	5c9b      	ldrb	r3, [r3, r2]
 8008f5c:	b2db      	uxtb	r3, r3
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d138      	bne.n	8008fd4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2240      	movs	r2, #64	@ 0x40
 8008f66:	5c9b      	ldrb	r3, [r3, r2]
 8008f68:	2b01      	cmp	r3, #1
 8008f6a:	d101      	bne.n	8008f70 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008f6c:	2302      	movs	r3, #2
 8008f6e:	e032      	b.n	8008fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	2240      	movs	r2, #64	@ 0x40
 8008f74:	2101      	movs	r1, #1
 8008f76:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	2241      	movs	r2, #65	@ 0x41
 8008f7c:	2124      	movs	r1, #36	@ 0x24
 8008f7e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2101      	movs	r1, #1
 8008f8c:	438a      	bics	r2, r1
 8008f8e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	4911      	ldr	r1, [pc, #68]	@ (8008fe0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8008f9c:	400a      	ands	r2, r1
 8008f9e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	6819      	ldr	r1, [r3, #0]
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	683a      	ldr	r2, [r7, #0]
 8008fac:	430a      	orrs	r2, r1
 8008fae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	681a      	ldr	r2, [r3, #0]
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	2101      	movs	r1, #1
 8008fbc:	430a      	orrs	r2, r1
 8008fbe:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2241      	movs	r2, #65	@ 0x41
 8008fc4:	2120      	movs	r1, #32
 8008fc6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2240      	movs	r2, #64	@ 0x40
 8008fcc:	2100      	movs	r1, #0
 8008fce:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e000      	b.n	8008fd6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008fd4:	2302      	movs	r3, #2
  }
}
 8008fd6:	0018      	movs	r0, r3
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	b002      	add	sp, #8
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	46c0      	nop			@ (mov r8, r8)
 8008fe0:	ffffefff 	.word	0xffffefff

08008fe4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	b084      	sub	sp, #16
 8008fe8:	af00      	add	r7, sp, #0
 8008fea:	6078      	str	r0, [r7, #4]
 8008fec:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	2241      	movs	r2, #65	@ 0x41
 8008ff2:	5c9b      	ldrb	r3, [r3, r2]
 8008ff4:	b2db      	uxtb	r3, r3
 8008ff6:	2b20      	cmp	r3, #32
 8008ff8:	d139      	bne.n	800906e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2240      	movs	r2, #64	@ 0x40
 8008ffe:	5c9b      	ldrb	r3, [r3, r2]
 8009000:	2b01      	cmp	r3, #1
 8009002:	d101      	bne.n	8009008 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8009004:	2302      	movs	r3, #2
 8009006:	e033      	b.n	8009070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2240      	movs	r2, #64	@ 0x40
 800900c:	2101      	movs	r1, #1
 800900e:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2241      	movs	r2, #65	@ 0x41
 8009014:	2124      	movs	r1, #36	@ 0x24
 8009016:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	681a      	ldr	r2, [r3, #0]
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2101      	movs	r1, #1
 8009024:	438a      	bics	r2, r1
 8009026:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	4a11      	ldr	r2, [pc, #68]	@ (8009078 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8009034:	4013      	ands	r3, r2
 8009036:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8009038:	683b      	ldr	r3, [r7, #0]
 800903a:	021b      	lsls	r3, r3, #8
 800903c:	68fa      	ldr	r2, [r7, #12]
 800903e:	4313      	orrs	r3, r2
 8009040:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	681b      	ldr	r3, [r3, #0]
 8009046:	68fa      	ldr	r2, [r7, #12]
 8009048:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	681a      	ldr	r2, [r3, #0]
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	2101      	movs	r1, #1
 8009056:	430a      	orrs	r2, r1
 8009058:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2241      	movs	r2, #65	@ 0x41
 800905e:	2120      	movs	r1, #32
 8009060:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	2240      	movs	r2, #64	@ 0x40
 8009066:	2100      	movs	r1, #0
 8009068:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800906a:	2300      	movs	r3, #0
 800906c:	e000      	b.n	8009070 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800906e:	2302      	movs	r3, #2
  }
}
 8009070:	0018      	movs	r0, r3
 8009072:	46bd      	mov	sp, r7
 8009074:	b004      	add	sp, #16
 8009076:	bd80      	pop	{r7, pc}
 8009078:	fffff0ff 	.word	0xfffff0ff

0800907c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800907c:	b580      	push	{r7, lr}
 800907e:	b088      	sub	sp, #32
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d101      	bne.n	800908e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800908a:	2301      	movs	r3, #1
 800908c:	e0e1      	b.n	8009252 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2235      	movs	r2, #53	@ 0x35
 8009092:	5c9b      	ldrb	r3, [r3, r2]
 8009094:	b2db      	uxtb	r3, r3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d107      	bne.n	80090aa <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2234      	movs	r2, #52	@ 0x34
 800909e:	2100      	movs	r1, #0
 80090a0:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	0018      	movs	r0, r3
 80090a6:	f7fa fe63 	bl	8003d70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2235      	movs	r2, #53	@ 0x35
 80090ae:	2102      	movs	r1, #2
 80090b0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	69da      	ldr	r2, [r3, #28]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	4967      	ldr	r1, [pc, #412]	@ (800925c <HAL_I2S_Init+0x1e0>)
 80090be:	400a      	ands	r2, r1
 80090c0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2202      	movs	r2, #2
 80090c8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d073      	beq.n	80091ba <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	68db      	ldr	r3, [r3, #12]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d102      	bne.n	80090e0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80090da:	2310      	movs	r3, #16
 80090dc:	617b      	str	r3, [r7, #20]
 80090de:	e001      	b.n	80090e4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80090e0:	2320      	movs	r3, #32
 80090e2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	689b      	ldr	r3, [r3, #8]
 80090e8:	2b20      	cmp	r3, #32
 80090ea:	d802      	bhi.n	80090f2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80090ec:	697b      	ldr	r3, [r7, #20]
 80090ee:	005b      	lsls	r3, r3, #1
 80090f0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 80090f2:	f001 f80f 	bl	800a114 <HAL_RCC_GetSysClockFreq>
 80090f6:	0003      	movs	r3, r0
 80090f8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	691a      	ldr	r2, [r3, #16]
 80090fe:	2380      	movs	r3, #128	@ 0x80
 8009100:	009b      	lsls	r3, r3, #2
 8009102:	429a      	cmp	r2, r3
 8009104:	d131      	bne.n	800916a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	2b00      	cmp	r3, #0
 800910c:	d016      	beq.n	800913c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800910e:	697b      	ldr	r3, [r7, #20]
 8009110:	009b      	lsls	r3, r3, #2
 8009112:	0019      	movs	r1, r3
 8009114:	68f8      	ldr	r0, [r7, #12]
 8009116:	f7f7 f813 	bl	8000140 <__udivsi3>
 800911a:	0003      	movs	r3, r0
 800911c:	001a      	movs	r2, r3
 800911e:	0013      	movs	r3, r2
 8009120:	009b      	lsls	r3, r3, #2
 8009122:	189b      	adds	r3, r3, r2
 8009124:	005b      	lsls	r3, r3, #1
 8009126:	001a      	movs	r2, r3
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	695b      	ldr	r3, [r3, #20]
 800912c:	0019      	movs	r1, r3
 800912e:	0010      	movs	r0, r2
 8009130:	f7f7 f806 	bl	8000140 <__udivsi3>
 8009134:	0003      	movs	r3, r0
 8009136:	3305      	adds	r3, #5
 8009138:	613b      	str	r3, [r7, #16]
 800913a:	e02a      	b.n	8009192 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800913c:	697b      	ldr	r3, [r7, #20]
 800913e:	00db      	lsls	r3, r3, #3
 8009140:	0019      	movs	r1, r3
 8009142:	68f8      	ldr	r0, [r7, #12]
 8009144:	f7f6 fffc 	bl	8000140 <__udivsi3>
 8009148:	0003      	movs	r3, r0
 800914a:	001a      	movs	r2, r3
 800914c:	0013      	movs	r3, r2
 800914e:	009b      	lsls	r3, r3, #2
 8009150:	189b      	adds	r3, r3, r2
 8009152:	005b      	lsls	r3, r3, #1
 8009154:	001a      	movs	r2, r3
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	695b      	ldr	r3, [r3, #20]
 800915a:	0019      	movs	r1, r3
 800915c:	0010      	movs	r0, r2
 800915e:	f7f6 ffef 	bl	8000140 <__udivsi3>
 8009162:	0003      	movs	r3, r0
 8009164:	3305      	adds	r3, #5
 8009166:	613b      	str	r3, [r7, #16]
 8009168:	e013      	b.n	8009192 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800916a:	6979      	ldr	r1, [r7, #20]
 800916c:	68f8      	ldr	r0, [r7, #12]
 800916e:	f7f6 ffe7 	bl	8000140 <__udivsi3>
 8009172:	0003      	movs	r3, r0
 8009174:	001a      	movs	r2, r3
 8009176:	0013      	movs	r3, r2
 8009178:	009b      	lsls	r3, r3, #2
 800917a:	189b      	adds	r3, r3, r2
 800917c:	005b      	lsls	r3, r3, #1
 800917e:	001a      	movs	r2, r3
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	695b      	ldr	r3, [r3, #20]
 8009184:	0019      	movs	r1, r3
 8009186:	0010      	movs	r0, r2
 8009188:	f7f6 ffda 	bl	8000140 <__udivsi3>
 800918c:	0003      	movs	r3, r0
 800918e:	3305      	adds	r3, #5
 8009190:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	210a      	movs	r1, #10
 8009196:	0018      	movs	r0, r3
 8009198:	f7f6 ffd2 	bl	8000140 <__udivsi3>
 800919c:	0003      	movs	r3, r0
 800919e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80091a0:	693b      	ldr	r3, [r7, #16]
 80091a2:	2201      	movs	r2, #1
 80091a4:	4013      	ands	r3, r2
 80091a6:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80091a8:	693a      	ldr	r2, [r7, #16]
 80091aa:	69bb      	ldr	r3, [r7, #24]
 80091ac:	1ad3      	subs	r3, r2, r3
 80091ae:	085b      	lsrs	r3, r3, #1
 80091b0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	021b      	lsls	r3, r3, #8
 80091b6:	61bb      	str	r3, [r7, #24]
 80091b8:	e003      	b.n	80091c2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80091ba:	2302      	movs	r3, #2
 80091bc:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80091be:	2300      	movs	r3, #0
 80091c0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80091c2:	69fb      	ldr	r3, [r7, #28]
 80091c4:	2b01      	cmp	r3, #1
 80091c6:	d902      	bls.n	80091ce <HAL_I2S_Init+0x152>
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2bff      	cmp	r3, #255	@ 0xff
 80091cc:	d907      	bls.n	80091de <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80091d2:	2210      	movs	r2, #16
 80091d4:	431a      	orrs	r2, r3
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	e039      	b.n	8009252 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	691a      	ldr	r2, [r3, #16]
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	431a      	orrs	r2, r3
 80091e6:	0011      	movs	r1, r2
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	69fa      	ldr	r2, [r7, #28]
 80091ee:	430a      	orrs	r2, r1
 80091f0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	69db      	ldr	r3, [r3, #28]
 80091f8:	4a18      	ldr	r2, [pc, #96]	@ (800925c <HAL_I2S_Init+0x1e0>)
 80091fa:	401a      	ands	r2, r3
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6859      	ldr	r1, [r3, #4]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	4319      	orrs	r1, r3
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	68db      	ldr	r3, [r3, #12]
 800920a:	4319      	orrs	r1, r3
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	699b      	ldr	r3, [r3, #24]
 8009210:	430b      	orrs	r3, r1
 8009212:	431a      	orrs	r2, r3
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2180      	movs	r1, #128	@ 0x80
 800921a:	0109      	lsls	r1, r1, #4
 800921c:	430a      	orrs	r2, r1
 800921e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	689b      	ldr	r3, [r3, #8]
 8009224:	2b30      	cmp	r3, #48	@ 0x30
 8009226:	d003      	beq.n	8009230 <HAL_I2S_Init+0x1b4>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	689b      	ldr	r3, [r3, #8]
 800922c:	2bb0      	cmp	r3, #176	@ 0xb0
 800922e:	d108      	bne.n	8009242 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	69da      	ldr	r2, [r3, #28]
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	2180      	movs	r1, #128	@ 0x80
 800923c:	0149      	lsls	r1, r1, #5
 800923e:	430a      	orrs	r2, r1
 8009240:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2235      	movs	r2, #53	@ 0x35
 800924c:	2101      	movs	r1, #1
 800924e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8009250:	2300      	movs	r3, #0
}
 8009252:	0018      	movs	r0, r3
 8009254:	46bd      	mov	sp, r7
 8009256:	b008      	add	sp, #32
 8009258:	bd80      	pop	{r7, pc}
 800925a:	46c0      	nop			@ (mov r8, r8)
 800925c:	fffff040 	.word	0xfffff040

08009260 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8009260:	b580      	push	{r7, lr}
 8009262:	b086      	sub	sp, #24
 8009264:	af00      	add	r7, sp, #0
 8009266:	60f8      	str	r0, [r7, #12]
 8009268:	60b9      	str	r1, [r7, #8]
 800926a:	1dbb      	adds	r3, r7, #6
 800926c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <HAL_I2S_Receive_DMA+0x1c>
 8009274:	1dbb      	adds	r3, r7, #6
 8009276:	881b      	ldrh	r3, [r3, #0]
 8009278:	2b00      	cmp	r3, #0
 800927a:	d101      	bne.n	8009280 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800927c:	2301      	movs	r3, #1
 800927e:	e0a6      	b.n	80093ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2234      	movs	r2, #52	@ 0x34
 8009284:	5c9b      	ldrb	r3, [r3, r2]
 8009286:	b2db      	uxtb	r3, r3
 8009288:	2b01      	cmp	r3, #1
 800928a:	d101      	bne.n	8009290 <HAL_I2S_Receive_DMA+0x30>
 800928c:	2302      	movs	r3, #2
 800928e:	e09e      	b.n	80093ce <HAL_I2S_Receive_DMA+0x16e>
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	2234      	movs	r2, #52	@ 0x34
 8009294:	2101      	movs	r1, #1
 8009296:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	2235      	movs	r2, #53	@ 0x35
 800929c:	5c9b      	ldrb	r3, [r3, r2]
 800929e:	b2db      	uxtb	r3, r3
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d005      	beq.n	80092b0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2234      	movs	r2, #52	@ 0x34
 80092a8:	2100      	movs	r1, #0
 80092aa:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 80092ac:	2302      	movs	r3, #2
 80092ae:	e08e      	b.n	80093ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	2235      	movs	r2, #53	@ 0x35
 80092b4:	2104      	movs	r1, #4
 80092b6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	2200      	movs	r2, #0
 80092bc:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	68ba      	ldr	r2, [r7, #8]
 80092c2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	69db      	ldr	r3, [r3, #28]
 80092ca:	2207      	movs	r2, #7
 80092cc:	4013      	ands	r3, r2
 80092ce:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 80092d0:	697b      	ldr	r3, [r7, #20]
 80092d2:	2b03      	cmp	r3, #3
 80092d4:	d002      	beq.n	80092dc <HAL_I2S_Receive_DMA+0x7c>
 80092d6:	697b      	ldr	r3, [r7, #20]
 80092d8:	2b05      	cmp	r3, #5
 80092da:	d10c      	bne.n	80092f6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 80092dc:	1dbb      	adds	r3, r7, #6
 80092de:	881b      	ldrh	r3, [r3, #0]
 80092e0:	18db      	adds	r3, r3, r3
 80092e2:	b29a      	uxth	r2, r3
 80092e4:	68fb      	ldr	r3, [r7, #12]
 80092e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 80092e8:	1dbb      	adds	r3, r7, #6
 80092ea:	881b      	ldrh	r3, [r3, #0]
 80092ec:	18db      	adds	r3, r3, r3
 80092ee:	b29a      	uxth	r2, r3
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80092f4:	e007      	b.n	8009306 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	1dba      	adds	r2, r7, #6
 80092fa:	8812      	ldrh	r2, [r2, #0]
 80092fc:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 80092fe:	68fb      	ldr	r3, [r7, #12]
 8009300:	1dba      	adds	r2, r7, #6
 8009302:	8812      	ldrh	r2, [r2, #0]
 8009304:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800930a:	4a33      	ldr	r2, [pc, #204]	@ (80093d8 <HAL_I2S_Receive_DMA+0x178>)
 800930c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009312:	4a32      	ldr	r2, [pc, #200]	@ (80093dc <HAL_I2S_Receive_DMA+0x17c>)
 8009314:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800931a:	4a31      	ldr	r2, [pc, #196]	@ (80093e0 <HAL_I2S_Receive_DMA+0x180>)
 800931c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	69da      	ldr	r2, [r3, #28]
 8009324:	23c0      	movs	r3, #192	@ 0xc0
 8009326:	009b      	lsls	r3, r3, #2
 8009328:	401a      	ands	r2, r3
 800932a:	23c0      	movs	r3, #192	@ 0xc0
 800932c:	009b      	lsls	r3, r3, #2
 800932e:	429a      	cmp	r2, r3
 8009330:	d10a      	bne.n	8009348 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8009332:	2300      	movs	r3, #0
 8009334:	613b      	str	r3, [r7, #16]
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	68db      	ldr	r3, [r3, #12]
 800933c:	613b      	str	r3, [r7, #16]
 800933e:	68fb      	ldr	r3, [r7, #12]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	689b      	ldr	r3, [r3, #8]
 8009344:	613b      	str	r3, [r7, #16]
 8009346:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800934c:	68fb      	ldr	r3, [r7, #12]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	330c      	adds	r3, #12
 8009352:	0019      	movs	r1, r3
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009358:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800935e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 8009360:	f7fd fb00 	bl	8006964 <HAL_DMA_Start_IT>
 8009364:	1e03      	subs	r3, r0, #0
 8009366:	d00f      	beq.n	8009388 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800936c:	2208      	movs	r2, #8
 800936e:	431a      	orrs	r2, r3
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2235      	movs	r2, #53	@ 0x35
 8009378:	2101      	movs	r1, #1
 800937a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	2234      	movs	r2, #52	@ 0x34
 8009380:	2100      	movs	r1, #0
 8009382:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e022      	b.n	80093ce <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8009388:	68fb      	ldr	r3, [r7, #12]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	69da      	ldr	r2, [r3, #28]
 800938e:	2380      	movs	r3, #128	@ 0x80
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	4013      	ands	r3, r2
 8009394:	d108      	bne.n	80093a8 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	681b      	ldr	r3, [r3, #0]
 800939a:	69da      	ldr	r2, [r3, #28]
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	2180      	movs	r1, #128	@ 0x80
 80093a2:	00c9      	lsls	r1, r1, #3
 80093a4:	430a      	orrs	r2, r1
 80093a6:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	2201      	movs	r2, #1
 80093b0:	4013      	ands	r3, r2
 80093b2:	d107      	bne.n	80093c4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	685a      	ldr	r2, [r3, #4]
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	681b      	ldr	r3, [r3, #0]
 80093be:	2101      	movs	r1, #1
 80093c0:	430a      	orrs	r2, r1
 80093c2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	2234      	movs	r2, #52	@ 0x34
 80093c8:	2100      	movs	r1, #0
 80093ca:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 80093cc:	2300      	movs	r3, #0
}
 80093ce:	0018      	movs	r0, r3
 80093d0:	46bd      	mov	sp, r7
 80093d2:	b006      	add	sp, #24
 80093d4:	bd80      	pop	{r7, pc}
 80093d6:	46c0      	nop			@ (mov r8, r8)
 80093d8:	080095e1 	.word	0x080095e1
 80093dc:	0800959d 	.word	0x0800959d
 80093e0:	080095ff 	.word	0x080095ff

080093e4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 80093e4:	b580      	push	{r7, lr}
 80093e6:	b086      	sub	sp, #24
 80093e8:	af00      	add	r7, sp, #0
 80093ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80093ec:	2317      	movs	r3, #23
 80093ee:	18fb      	adds	r3, r7, r3
 80093f0:	2200      	movs	r2, #0
 80093f2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	685a      	ldr	r2, [r3, #4]
 80093f8:	2380      	movs	r3, #128	@ 0x80
 80093fa:	009b      	lsls	r3, r3, #2
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d003      	beq.n	8009408 <HAL_I2S_DMAStop+0x24>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	685b      	ldr	r3, [r3, #4]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d158      	bne.n	80094ba <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800940c:	2b00      	cmp	r3, #0
 800940e:	d010      	beq.n	8009432 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009414:	0018      	movs	r0, r3
 8009416:	f7fd fb0b 	bl	8006a30 <HAL_DMA_Abort>
 800941a:	1e03      	subs	r3, r0, #0
 800941c:	d009      	beq.n	8009432 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009422:	2208      	movs	r2, #8
 8009424:	431a      	orrs	r2, r3
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800942a:	2317      	movs	r3, #23
 800942c:	18fb      	adds	r3, r7, r3
 800942e:	2201      	movs	r2, #1
 8009430:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8009432:	6878      	ldr	r0, [r7, #4]
 8009434:	2364      	movs	r3, #100	@ 0x64
 8009436:	2201      	movs	r2, #1
 8009438:	2102      	movs	r1, #2
 800943a:	f000 f907 	bl	800964c <I2S_WaitFlagStateUntilTimeout>
 800943e:	1e03      	subs	r3, r0, #0
 8009440:	d00d      	beq.n	800945e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009446:	2201      	movs	r2, #1
 8009448:	431a      	orrs	r2, r3
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	2235      	movs	r2, #53	@ 0x35
 8009452:	2101      	movs	r1, #1
 8009454:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8009456:	2317      	movs	r3, #23
 8009458:	18fb      	adds	r3, r7, r3
 800945a:	2201      	movs	r2, #1
 800945c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800945e:	6878      	ldr	r0, [r7, #4]
 8009460:	2364      	movs	r3, #100	@ 0x64
 8009462:	2200      	movs	r2, #0
 8009464:	2180      	movs	r1, #128	@ 0x80
 8009466:	f000 f8f1 	bl	800964c <I2S_WaitFlagStateUntilTimeout>
 800946a:	1e03      	subs	r3, r0, #0
 800946c:	d00d      	beq.n	800948a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009472:	2201      	movs	r2, #1
 8009474:	431a      	orrs	r2, r3
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	2235      	movs	r2, #53	@ 0x35
 800947e:	2101      	movs	r1, #1
 8009480:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 8009482:	2317      	movs	r3, #23
 8009484:	18fb      	adds	r3, r7, r3
 8009486:	2201      	movs	r2, #1
 8009488:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	69da      	ldr	r2, [r3, #28]
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	4938      	ldr	r1, [pc, #224]	@ (8009578 <HAL_I2S_DMAStop+0x194>)
 8009496:	400a      	ands	r2, r1
 8009498:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800949a:	2300      	movs	r3, #0
 800949c:	613b      	str	r3, [r7, #16]
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	689b      	ldr	r3, [r3, #8]
 80094a4:	613b      	str	r3, [r7, #16]
 80094a6:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	685a      	ldr	r2, [r3, #4]
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	2102      	movs	r1, #2
 80094b4:	438a      	bics	r2, r1
 80094b6:	605a      	str	r2, [r3, #4]
 80094b8:	e053      	b.n	8009562 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	685a      	ldr	r2, [r3, #4]
 80094be:	23c0      	movs	r3, #192	@ 0xc0
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	429a      	cmp	r2, r3
 80094c4:	d005      	beq.n	80094d2 <HAL_I2S_DMAStop+0xee>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	685a      	ldr	r2, [r3, #4]
 80094ca:	2380      	movs	r3, #128	@ 0x80
 80094cc:	005b      	lsls	r3, r3, #1
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d147      	bne.n	8009562 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d010      	beq.n	80094fc <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094de:	0018      	movs	r0, r3
 80094e0:	f7fd faa6 	bl	8006a30 <HAL_DMA_Abort>
 80094e4:	1e03      	subs	r3, r0, #0
 80094e6:	d009      	beq.n	80094fc <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ec:	2208      	movs	r2, #8
 80094ee:	431a      	orrs	r2, r3
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 80094f4:	2317      	movs	r3, #23
 80094f6:	18fb      	adds	r3, r7, r3
 80094f8:	2201      	movs	r2, #1
 80094fa:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69da      	ldr	r2, [r3, #28]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	491c      	ldr	r1, [pc, #112]	@ (8009578 <HAL_I2S_DMAStop+0x194>)
 8009508:	400a      	ands	r2, r1
 800950a:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800950c:	2300      	movs	r3, #0
 800950e:	60fb      	str	r3, [r7, #12]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	68db      	ldr	r3, [r3, #12]
 8009516:	60fb      	str	r3, [r7, #12]
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	689b      	ldr	r3, [r3, #8]
 800951e:	60fb      	str	r3, [r7, #12]
 8009520:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685a      	ldr	r2, [r3, #4]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2101      	movs	r1, #1
 800952e:	438a      	bics	r2, r1
 8009530:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	685a      	ldr	r2, [r3, #4]
 8009536:	2380      	movs	r3, #128	@ 0x80
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	429a      	cmp	r2, r3
 800953c:	d10e      	bne.n	800955c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009542:	2240      	movs	r2, #64	@ 0x40
 8009544:	431a      	orrs	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2235      	movs	r2, #53	@ 0x35
 800954e:	2101      	movs	r1, #1
 8009550:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 8009552:	2317      	movs	r3, #23
 8009554:	18fb      	adds	r3, r7, r3
 8009556:	2201      	movs	r2, #1
 8009558:	701a      	strb	r2, [r3, #0]
 800955a:	e002      	b.n	8009562 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2235      	movs	r2, #53	@ 0x35
 8009566:	2101      	movs	r1, #1
 8009568:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800956a:	2317      	movs	r3, #23
 800956c:	18fb      	adds	r3, r7, r3
 800956e:	781b      	ldrb	r3, [r3, #0]
}
 8009570:	0018      	movs	r0, r3
 8009572:	46bd      	mov	sp, r7
 8009574:	b006      	add	sp, #24
 8009576:	bd80      	pop	{r7, pc}
 8009578:	fffffbff 	.word	0xfffffbff

0800957c <HAL_I2S_RxHalfCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800957c:	b580      	push	{r7, lr}
 800957e:	b082      	sub	sp, #8
 8009580:	af00      	add	r7, sp, #0
 8009582:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxHalfCpltCallback could be implemented in the user file
   */
}
 8009584:	46c0      	nop			@ (mov r8, r8)
 8009586:	46bd      	mov	sp, r7
 8009588:	b002      	add	sp, #8
 800958a:	bd80      	pop	{r7, pc}

0800958c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800958c:	b580      	push	{r7, lr}
 800958e:	b082      	sub	sp, #8
 8009590:	af00      	add	r7, sp, #0
 8009592:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8009594:	46c0      	nop			@ (mov r8, r8)
 8009596:	46bd      	mov	sp, r7
 8009598:	b002      	add	sp, #8
 800959a:	bd80      	pop	{r7, pc}

0800959c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b084      	sub	sp, #16
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095a8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	69db      	ldr	r3, [r3, #28]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d10e      	bne.n	80095d0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 80095b2:	68fb      	ldr	r3, [r7, #12]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	685a      	ldr	r2, [r3, #4]
 80095b8:	68fb      	ldr	r3, [r7, #12]
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	2101      	movs	r1, #1
 80095be:	438a      	bics	r2, r1
 80095c0:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	2200      	movs	r2, #0
 80095c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	2235      	movs	r2, #53	@ 0x35
 80095cc:	2101      	movs	r1, #1
 80095ce:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	0018      	movs	r0, r3
 80095d4:	f7fa feca 	bl	800436c <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80095d8:	46c0      	nop			@ (mov r8, r8)
 80095da:	46bd      	mov	sp, r7
 80095dc:	b004      	add	sp, #16
 80095de:	bd80      	pop	{r7, pc}

080095e0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80095ec:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	0018      	movs	r0, r3
 80095f2:	f7ff ffc3 	bl	800957c <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 80095f6:	46c0      	nop			@ (mov r8, r8)
 80095f8:	46bd      	mov	sp, r7
 80095fa:	b004      	add	sp, #16
 80095fc:	bd80      	pop	{r7, pc}

080095fe <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 80095fe:	b580      	push	{r7, lr}
 8009600:	b084      	sub	sp, #16
 8009602:	af00      	add	r7, sp, #0
 8009604:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800960a:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	685a      	ldr	r2, [r3, #4]
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	2103      	movs	r1, #3
 8009618:	438a      	bics	r2, r1
 800961a:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	2200      	movs	r2, #0
 8009620:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	2200      	movs	r2, #0
 8009626:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 8009628:	68fb      	ldr	r3, [r7, #12]
 800962a:	2235      	movs	r2, #53	@ 0x35
 800962c:	2101      	movs	r1, #1
 800962e:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009634:	2208      	movs	r2, #8
 8009636:	431a      	orrs	r2, r3
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	0018      	movs	r0, r3
 8009640:	f7ff ffa4 	bl	800958c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8009644:	46c0      	nop			@ (mov r8, r8)
 8009646:	46bd      	mov	sp, r7
 8009648:	b004      	add	sp, #16
 800964a:	bd80      	pop	{r7, pc}

0800964c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800964c:	b580      	push	{r7, lr}
 800964e:	b086      	sub	sp, #24
 8009650:	af00      	add	r7, sp, #0
 8009652:	60f8      	str	r0, [r7, #12]
 8009654:	60b9      	str	r1, [r7, #8]
 8009656:	603b      	str	r3, [r7, #0]
 8009658:	1dfb      	adds	r3, r7, #7
 800965a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800965c:	f7fc fffe 	bl	800665c <HAL_GetTick>
 8009660:	0003      	movs	r3, r0
 8009662:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8009664:	e017      	b.n	8009696 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009666:	683b      	ldr	r3, [r7, #0]
 8009668:	3301      	adds	r3, #1
 800966a:	d014      	beq.n	8009696 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800966c:	f7fc fff6 	bl	800665c <HAL_GetTick>
 8009670:	0002      	movs	r2, r0
 8009672:	697b      	ldr	r3, [r7, #20]
 8009674:	1ad3      	subs	r3, r2, r3
 8009676:	683a      	ldr	r2, [r7, #0]
 8009678:	429a      	cmp	r2, r3
 800967a:	d902      	bls.n	8009682 <I2S_WaitFlagStateUntilTimeout+0x36>
 800967c:	683b      	ldr	r3, [r7, #0]
 800967e:	2b00      	cmp	r3, #0
 8009680:	d109      	bne.n	8009696 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2235      	movs	r2, #53	@ 0x35
 8009686:	2101      	movs	r1, #1
 8009688:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	2234      	movs	r2, #52	@ 0x34
 800968e:	2100      	movs	r1, #0
 8009690:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8009692:	2303      	movs	r3, #3
 8009694:	e00f      	b.n	80096b6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8009696:	68fb      	ldr	r3, [r7, #12]
 8009698:	681b      	ldr	r3, [r3, #0]
 800969a:	689b      	ldr	r3, [r3, #8]
 800969c:	68ba      	ldr	r2, [r7, #8]
 800969e:	4013      	ands	r3, r2
 80096a0:	68ba      	ldr	r2, [r7, #8]
 80096a2:	1ad3      	subs	r3, r2, r3
 80096a4:	425a      	negs	r2, r3
 80096a6:	4153      	adcs	r3, r2
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	001a      	movs	r2, r3
 80096ac:	1dfb      	adds	r3, r7, #7
 80096ae:	781b      	ldrb	r3, [r3, #0]
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d1d8      	bne.n	8009666 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 80096b4:	2300      	movs	r3, #0
}
 80096b6:	0018      	movs	r0, r3
 80096b8:	46bd      	mov	sp, r7
 80096ba:	b006      	add	sp, #24
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 80096c4:	4b04      	ldr	r3, [pc, #16]	@ (80096d8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	4b03      	ldr	r3, [pc, #12]	@ (80096d8 <HAL_PWR_EnableBkUpAccess+0x18>)
 80096ca:	2180      	movs	r1, #128	@ 0x80
 80096cc:	0049      	lsls	r1, r1, #1
 80096ce:	430a      	orrs	r2, r1
 80096d0:	601a      	str	r2, [r3, #0]
}
 80096d2:	46c0      	nop			@ (mov r8, r8)
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	40007000 	.word	0x40007000

080096dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80096dc:	b5b0      	push	{r4, r5, r7, lr}
 80096de:	b08a      	sub	sp, #40	@ 0x28
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d102      	bne.n	80096f0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80096ea:	2301      	movs	r3, #1
 80096ec:	f000 fbbf 	bl	8009e6e <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80096f0:	4bc9      	ldr	r3, [pc, #804]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80096f2:	68db      	ldr	r3, [r3, #12]
 80096f4:	220c      	movs	r2, #12
 80096f6:	4013      	ands	r3, r2
 80096f8:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80096fa:	4bc7      	ldr	r3, [pc, #796]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	2380      	movs	r3, #128	@ 0x80
 8009700:	025b      	lsls	r3, r3, #9
 8009702:	4013      	ands	r3, r2
 8009704:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	2201      	movs	r2, #1
 800970c:	4013      	ands	r3, r2
 800970e:	d100      	bne.n	8009712 <HAL_RCC_OscConfig+0x36>
 8009710:	e07e      	b.n	8009810 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8009712:	69fb      	ldr	r3, [r7, #28]
 8009714:	2b08      	cmp	r3, #8
 8009716:	d007      	beq.n	8009728 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8009718:	69fb      	ldr	r3, [r7, #28]
 800971a:	2b0c      	cmp	r3, #12
 800971c:	d112      	bne.n	8009744 <HAL_RCC_OscConfig+0x68>
 800971e:	69ba      	ldr	r2, [r7, #24]
 8009720:	2380      	movs	r3, #128	@ 0x80
 8009722:	025b      	lsls	r3, r3, #9
 8009724:	429a      	cmp	r2, r3
 8009726:	d10d      	bne.n	8009744 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009728:	4bbb      	ldr	r3, [pc, #748]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	2380      	movs	r3, #128	@ 0x80
 800972e:	029b      	lsls	r3, r3, #10
 8009730:	4013      	ands	r3, r2
 8009732:	d100      	bne.n	8009736 <HAL_RCC_OscConfig+0x5a>
 8009734:	e06b      	b.n	800980e <HAL_RCC_OscConfig+0x132>
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d167      	bne.n	800980e <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800973e:	2301      	movs	r3, #1
 8009740:	f000 fb95 	bl	8009e6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	685a      	ldr	r2, [r3, #4]
 8009748:	2380      	movs	r3, #128	@ 0x80
 800974a:	025b      	lsls	r3, r3, #9
 800974c:	429a      	cmp	r2, r3
 800974e:	d107      	bne.n	8009760 <HAL_RCC_OscConfig+0x84>
 8009750:	4bb1      	ldr	r3, [pc, #708]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009752:	681a      	ldr	r2, [r3, #0]
 8009754:	4bb0      	ldr	r3, [pc, #704]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009756:	2180      	movs	r1, #128	@ 0x80
 8009758:	0249      	lsls	r1, r1, #9
 800975a:	430a      	orrs	r2, r1
 800975c:	601a      	str	r2, [r3, #0]
 800975e:	e027      	b.n	80097b0 <HAL_RCC_OscConfig+0xd4>
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	685a      	ldr	r2, [r3, #4]
 8009764:	23a0      	movs	r3, #160	@ 0xa0
 8009766:	02db      	lsls	r3, r3, #11
 8009768:	429a      	cmp	r2, r3
 800976a:	d10e      	bne.n	800978a <HAL_RCC_OscConfig+0xae>
 800976c:	4baa      	ldr	r3, [pc, #680]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	4ba9      	ldr	r3, [pc, #676]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009772:	2180      	movs	r1, #128	@ 0x80
 8009774:	02c9      	lsls	r1, r1, #11
 8009776:	430a      	orrs	r2, r1
 8009778:	601a      	str	r2, [r3, #0]
 800977a:	4ba7      	ldr	r3, [pc, #668]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800977c:	681a      	ldr	r2, [r3, #0]
 800977e:	4ba6      	ldr	r3, [pc, #664]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009780:	2180      	movs	r1, #128	@ 0x80
 8009782:	0249      	lsls	r1, r1, #9
 8009784:	430a      	orrs	r2, r1
 8009786:	601a      	str	r2, [r3, #0]
 8009788:	e012      	b.n	80097b0 <HAL_RCC_OscConfig+0xd4>
 800978a:	4ba3      	ldr	r3, [pc, #652]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800978c:	681a      	ldr	r2, [r3, #0]
 800978e:	4ba2      	ldr	r3, [pc, #648]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009790:	49a2      	ldr	r1, [pc, #648]	@ (8009a1c <HAL_RCC_OscConfig+0x340>)
 8009792:	400a      	ands	r2, r1
 8009794:	601a      	str	r2, [r3, #0]
 8009796:	4ba0      	ldr	r3, [pc, #640]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009798:	681a      	ldr	r2, [r3, #0]
 800979a:	2380      	movs	r3, #128	@ 0x80
 800979c:	025b      	lsls	r3, r3, #9
 800979e:	4013      	ands	r3, r2
 80097a0:	60fb      	str	r3, [r7, #12]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	4b9c      	ldr	r3, [pc, #624]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80097a6:	681a      	ldr	r2, [r3, #0]
 80097a8:	4b9b      	ldr	r3, [pc, #620]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80097aa:	499d      	ldr	r1, [pc, #628]	@ (8009a20 <HAL_RCC_OscConfig+0x344>)
 80097ac:	400a      	ands	r2, r1
 80097ae:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	685b      	ldr	r3, [r3, #4]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d015      	beq.n	80097e4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097b8:	f7fc ff50 	bl	800665c <HAL_GetTick>
 80097bc:	0003      	movs	r3, r0
 80097be:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097c0:	e009      	b.n	80097d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097c2:	f7fc ff4b 	bl	800665c <HAL_GetTick>
 80097c6:	0002      	movs	r2, r0
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	1ad3      	subs	r3, r2, r3
 80097cc:	2b64      	cmp	r3, #100	@ 0x64
 80097ce:	d902      	bls.n	80097d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80097d0:	2303      	movs	r3, #3
 80097d2:	f000 fb4c 	bl	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80097d6:	4b90      	ldr	r3, [pc, #576]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80097d8:	681a      	ldr	r2, [r3, #0]
 80097da:	2380      	movs	r3, #128	@ 0x80
 80097dc:	029b      	lsls	r3, r3, #10
 80097de:	4013      	ands	r3, r2
 80097e0:	d0ef      	beq.n	80097c2 <HAL_RCC_OscConfig+0xe6>
 80097e2:	e015      	b.n	8009810 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80097e4:	f7fc ff3a 	bl	800665c <HAL_GetTick>
 80097e8:	0003      	movs	r3, r0
 80097ea:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80097ec:	e008      	b.n	8009800 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80097ee:	f7fc ff35 	bl	800665c <HAL_GetTick>
 80097f2:	0002      	movs	r2, r0
 80097f4:	697b      	ldr	r3, [r7, #20]
 80097f6:	1ad3      	subs	r3, r2, r3
 80097f8:	2b64      	cmp	r3, #100	@ 0x64
 80097fa:	d901      	bls.n	8009800 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80097fc:	2303      	movs	r3, #3
 80097fe:	e336      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009800:	4b85      	ldr	r3, [pc, #532]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009802:	681a      	ldr	r2, [r3, #0]
 8009804:	2380      	movs	r3, #128	@ 0x80
 8009806:	029b      	lsls	r3, r3, #10
 8009808:	4013      	ands	r3, r2
 800980a:	d1f0      	bne.n	80097ee <HAL_RCC_OscConfig+0x112>
 800980c:	e000      	b.n	8009810 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800980e:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	2202      	movs	r2, #2
 8009816:	4013      	ands	r3, r2
 8009818:	d100      	bne.n	800981c <HAL_RCC_OscConfig+0x140>
 800981a:	e099      	b.n	8009950 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8009822:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009824:	2220      	movs	r2, #32
 8009826:	4013      	ands	r3, r2
 8009828:	d009      	beq.n	800983e <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800982a:	4b7b      	ldr	r3, [pc, #492]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800982c:	681a      	ldr	r2, [r3, #0]
 800982e:	4b7a      	ldr	r3, [pc, #488]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009830:	2120      	movs	r1, #32
 8009832:	430a      	orrs	r2, r1
 8009834:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 8009836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009838:	2220      	movs	r2, #32
 800983a:	4393      	bics	r3, r2
 800983c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800983e:	69fb      	ldr	r3, [r7, #28]
 8009840:	2b04      	cmp	r3, #4
 8009842:	d005      	beq.n	8009850 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8009844:	69fb      	ldr	r3, [r7, #28]
 8009846:	2b0c      	cmp	r3, #12
 8009848:	d13e      	bne.n	80098c8 <HAL_RCC_OscConfig+0x1ec>
 800984a:	69bb      	ldr	r3, [r7, #24]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d13b      	bne.n	80098c8 <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8009850:	4b71      	ldr	r3, [pc, #452]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009852:	681b      	ldr	r3, [r3, #0]
 8009854:	2204      	movs	r2, #4
 8009856:	4013      	ands	r3, r2
 8009858:	d004      	beq.n	8009864 <HAL_RCC_OscConfig+0x188>
 800985a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800985c:	2b00      	cmp	r3, #0
 800985e:	d101      	bne.n	8009864 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 8009860:	2301      	movs	r3, #1
 8009862:	e304      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009864:	4b6c      	ldr	r3, [pc, #432]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009866:	685b      	ldr	r3, [r3, #4]
 8009868:	4a6e      	ldr	r2, [pc, #440]	@ (8009a24 <HAL_RCC_OscConfig+0x348>)
 800986a:	4013      	ands	r3, r2
 800986c:	0019      	movs	r1, r3
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	691b      	ldr	r3, [r3, #16]
 8009872:	021a      	lsls	r2, r3, #8
 8009874:	4b68      	ldr	r3, [pc, #416]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009876:	430a      	orrs	r2, r1
 8009878:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 800987a:	4b67      	ldr	r3, [pc, #412]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	2209      	movs	r2, #9
 8009880:	4393      	bics	r3, r2
 8009882:	0019      	movs	r1, r3
 8009884:	4b64      	ldr	r3, [pc, #400]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009886:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009888:	430a      	orrs	r2, r1
 800988a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800988c:	f000 fc42 	bl	800a114 <HAL_RCC_GetSysClockFreq>
 8009890:	0001      	movs	r1, r0
 8009892:	4b61      	ldr	r3, [pc, #388]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009894:	68db      	ldr	r3, [r3, #12]
 8009896:	091b      	lsrs	r3, r3, #4
 8009898:	220f      	movs	r2, #15
 800989a:	4013      	ands	r3, r2
 800989c:	4a62      	ldr	r2, [pc, #392]	@ (8009a28 <HAL_RCC_OscConfig+0x34c>)
 800989e:	5cd3      	ldrb	r3, [r2, r3]
 80098a0:	000a      	movs	r2, r1
 80098a2:	40da      	lsrs	r2, r3
 80098a4:	4b61      	ldr	r3, [pc, #388]	@ (8009a2c <HAL_RCC_OscConfig+0x350>)
 80098a6:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 80098a8:	4b61      	ldr	r3, [pc, #388]	@ (8009a30 <HAL_RCC_OscConfig+0x354>)
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	2513      	movs	r5, #19
 80098ae:	197c      	adds	r4, r7, r5
 80098b0:	0018      	movs	r0, r3
 80098b2:	f7fc fe8d 	bl	80065d0 <HAL_InitTick>
 80098b6:	0003      	movs	r3, r0
 80098b8:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 80098ba:	197b      	adds	r3, r7, r5
 80098bc:	781b      	ldrb	r3, [r3, #0]
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d046      	beq.n	8009950 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 80098c2:	197b      	adds	r3, r7, r5
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	e2d2      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 80098c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098ca:	2b00      	cmp	r3, #0
 80098cc:	d027      	beq.n	800991e <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80098ce:	4b52      	ldr	r3, [pc, #328]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	2209      	movs	r2, #9
 80098d4:	4393      	bics	r3, r2
 80098d6:	0019      	movs	r1, r3
 80098d8:	4b4f      	ldr	r3, [pc, #316]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80098da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098dc:	430a      	orrs	r2, r1
 80098de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80098e0:	f7fc febc 	bl	800665c <HAL_GetTick>
 80098e4:	0003      	movs	r3, r0
 80098e6:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098e8:	e008      	b.n	80098fc <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80098ea:	f7fc feb7 	bl	800665c <HAL_GetTick>
 80098ee:	0002      	movs	r2, r0
 80098f0:	697b      	ldr	r3, [r7, #20]
 80098f2:	1ad3      	subs	r3, r2, r3
 80098f4:	2b02      	cmp	r3, #2
 80098f6:	d901      	bls.n	80098fc <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 80098f8:	2303      	movs	r3, #3
 80098fa:	e2b8      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80098fc:	4b46      	ldr	r3, [pc, #280]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	2204      	movs	r2, #4
 8009902:	4013      	ands	r3, r2
 8009904:	d0f1      	beq.n	80098ea <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009906:	4b44      	ldr	r3, [pc, #272]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009908:	685b      	ldr	r3, [r3, #4]
 800990a:	4a46      	ldr	r2, [pc, #280]	@ (8009a24 <HAL_RCC_OscConfig+0x348>)
 800990c:	4013      	ands	r3, r2
 800990e:	0019      	movs	r1, r3
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	691b      	ldr	r3, [r3, #16]
 8009914:	021a      	lsls	r2, r3, #8
 8009916:	4b40      	ldr	r3, [pc, #256]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009918:	430a      	orrs	r2, r1
 800991a:	605a      	str	r2, [r3, #4]
 800991c:	e018      	b.n	8009950 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800991e:	4b3e      	ldr	r3, [pc, #248]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009920:	681a      	ldr	r2, [r3, #0]
 8009922:	4b3d      	ldr	r3, [pc, #244]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009924:	2101      	movs	r1, #1
 8009926:	438a      	bics	r2, r1
 8009928:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800992a:	f7fc fe97 	bl	800665c <HAL_GetTick>
 800992e:	0003      	movs	r3, r0
 8009930:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009932:	e008      	b.n	8009946 <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009934:	f7fc fe92 	bl	800665c <HAL_GetTick>
 8009938:	0002      	movs	r2, r0
 800993a:	697b      	ldr	r3, [r7, #20]
 800993c:	1ad3      	subs	r3, r2, r3
 800993e:	2b02      	cmp	r3, #2
 8009940:	d901      	bls.n	8009946 <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 8009942:	2303      	movs	r3, #3
 8009944:	e293      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009946:	4b34      	ldr	r3, [pc, #208]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	2204      	movs	r2, #4
 800994c:	4013      	ands	r3, r2
 800994e:	d1f1      	bne.n	8009934 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	2210      	movs	r2, #16
 8009956:	4013      	ands	r3, r2
 8009958:	d100      	bne.n	800995c <HAL_RCC_OscConfig+0x280>
 800995a:	e0a2      	b.n	8009aa2 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800995c:	69fb      	ldr	r3, [r7, #28]
 800995e:	2b00      	cmp	r3, #0
 8009960:	d140      	bne.n	80099e4 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009962:	4b2d      	ldr	r3, [pc, #180]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	2380      	movs	r3, #128	@ 0x80
 8009968:	009b      	lsls	r3, r3, #2
 800996a:	4013      	ands	r3, r2
 800996c:	d005      	beq.n	800997a <HAL_RCC_OscConfig+0x29e>
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	69db      	ldr	r3, [r3, #28]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d101      	bne.n	800997a <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 8009976:	2301      	movs	r3, #1
 8009978:	e279      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800997a:	4b27      	ldr	r3, [pc, #156]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800997c:	685b      	ldr	r3, [r3, #4]
 800997e:	4a2d      	ldr	r2, [pc, #180]	@ (8009a34 <HAL_RCC_OscConfig+0x358>)
 8009980:	4013      	ands	r3, r2
 8009982:	0019      	movs	r1, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009988:	4b23      	ldr	r3, [pc, #140]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800998a:	430a      	orrs	r2, r1
 800998c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800998e:	4b22      	ldr	r3, [pc, #136]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	021b      	lsls	r3, r3, #8
 8009994:	0a19      	lsrs	r1, r3, #8
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	6a1b      	ldr	r3, [r3, #32]
 800999a:	061a      	lsls	r2, r3, #24
 800999c:	4b1e      	ldr	r3, [pc, #120]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 800999e:	430a      	orrs	r2, r1
 80099a0:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a6:	0b5b      	lsrs	r3, r3, #13
 80099a8:	3301      	adds	r3, #1
 80099aa:	2280      	movs	r2, #128	@ 0x80
 80099ac:	0212      	lsls	r2, r2, #8
 80099ae:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80099b0:	4b19      	ldr	r3, [pc, #100]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80099b2:	68db      	ldr	r3, [r3, #12]
 80099b4:	091b      	lsrs	r3, r3, #4
 80099b6:	210f      	movs	r1, #15
 80099b8:	400b      	ands	r3, r1
 80099ba:	491b      	ldr	r1, [pc, #108]	@ (8009a28 <HAL_RCC_OscConfig+0x34c>)
 80099bc:	5ccb      	ldrb	r3, [r1, r3]
 80099be:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80099c0:	4b1a      	ldr	r3, [pc, #104]	@ (8009a2c <HAL_RCC_OscConfig+0x350>)
 80099c2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 80099c4:	4b1a      	ldr	r3, [pc, #104]	@ (8009a30 <HAL_RCC_OscConfig+0x354>)
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	2513      	movs	r5, #19
 80099ca:	197c      	adds	r4, r7, r5
 80099cc:	0018      	movs	r0, r3
 80099ce:	f7fc fdff 	bl	80065d0 <HAL_InitTick>
 80099d2:	0003      	movs	r3, r0
 80099d4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 80099d6:	197b      	adds	r3, r7, r5
 80099d8:	781b      	ldrb	r3, [r3, #0]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d061      	beq.n	8009aa2 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 80099de:	197b      	adds	r3, r7, r5
 80099e0:	781b      	ldrb	r3, [r3, #0]
 80099e2:	e244      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	69db      	ldr	r3, [r3, #28]
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d040      	beq.n	8009a6e <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80099ec:	4b0a      	ldr	r3, [pc, #40]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	4b09      	ldr	r3, [pc, #36]	@ (8009a18 <HAL_RCC_OscConfig+0x33c>)
 80099f2:	2180      	movs	r1, #128	@ 0x80
 80099f4:	0049      	lsls	r1, r1, #1
 80099f6:	430a      	orrs	r2, r1
 80099f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80099fa:	f7fc fe2f 	bl	800665c <HAL_GetTick>
 80099fe:	0003      	movs	r3, r0
 8009a00:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009a02:	e019      	b.n	8009a38 <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009a04:	f7fc fe2a 	bl	800665c <HAL_GetTick>
 8009a08:	0002      	movs	r2, r0
 8009a0a:	697b      	ldr	r3, [r7, #20]
 8009a0c:	1ad3      	subs	r3, r2, r3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d912      	bls.n	8009a38 <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8009a12:	2303      	movs	r3, #3
 8009a14:	e22b      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
 8009a16:	46c0      	nop			@ (mov r8, r8)
 8009a18:	40021000 	.word	0x40021000
 8009a1c:	fffeffff 	.word	0xfffeffff
 8009a20:	fffbffff 	.word	0xfffbffff
 8009a24:	ffffe0ff 	.word	0xffffe0ff
 8009a28:	0800fb1c 	.word	0x0800fb1c
 8009a2c:	2000002c 	.word	0x2000002c
 8009a30:	20000040 	.word	0x20000040
 8009a34:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009a38:	4bca      	ldr	r3, [pc, #808]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009a3a:	681a      	ldr	r2, [r3, #0]
 8009a3c:	2380      	movs	r3, #128	@ 0x80
 8009a3e:	009b      	lsls	r3, r3, #2
 8009a40:	4013      	ands	r3, r2
 8009a42:	d0df      	beq.n	8009a04 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8009a44:	4bc7      	ldr	r3, [pc, #796]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009a46:	685b      	ldr	r3, [r3, #4]
 8009a48:	4ac7      	ldr	r2, [pc, #796]	@ (8009d68 <HAL_RCC_OscConfig+0x68c>)
 8009a4a:	4013      	ands	r3, r2
 8009a4c:	0019      	movs	r1, r3
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009a52:	4bc4      	ldr	r3, [pc, #784]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009a54:	430a      	orrs	r2, r1
 8009a56:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009a58:	4bc2      	ldr	r3, [pc, #776]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009a5a:	685b      	ldr	r3, [r3, #4]
 8009a5c:	021b      	lsls	r3, r3, #8
 8009a5e:	0a19      	lsrs	r1, r3, #8
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	6a1b      	ldr	r3, [r3, #32]
 8009a64:	061a      	lsls	r2, r3, #24
 8009a66:	4bbf      	ldr	r3, [pc, #764]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009a68:	430a      	orrs	r2, r1
 8009a6a:	605a      	str	r2, [r3, #4]
 8009a6c:	e019      	b.n	8009aa2 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8009a6e:	4bbd      	ldr	r3, [pc, #756]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009a70:	681a      	ldr	r2, [r3, #0]
 8009a72:	4bbc      	ldr	r3, [pc, #752]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009a74:	49bd      	ldr	r1, [pc, #756]	@ (8009d6c <HAL_RCC_OscConfig+0x690>)
 8009a76:	400a      	ands	r2, r1
 8009a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009a7a:	f7fc fdef 	bl	800665c <HAL_GetTick>
 8009a7e:	0003      	movs	r3, r0
 8009a80:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009a82:	e008      	b.n	8009a96 <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009a84:	f7fc fdea 	bl	800665c <HAL_GetTick>
 8009a88:	0002      	movs	r2, r0
 8009a8a:	697b      	ldr	r3, [r7, #20]
 8009a8c:	1ad3      	subs	r3, r2, r3
 8009a8e:	2b02      	cmp	r3, #2
 8009a90:	d901      	bls.n	8009a96 <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8009a92:	2303      	movs	r3, #3
 8009a94:	e1eb      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8009a96:	4bb3      	ldr	r3, [pc, #716]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009a98:	681a      	ldr	r2, [r3, #0]
 8009a9a:	2380      	movs	r3, #128	@ 0x80
 8009a9c:	009b      	lsls	r3, r3, #2
 8009a9e:	4013      	ands	r3, r2
 8009aa0:	d1f0      	bne.n	8009a84 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	2208      	movs	r2, #8
 8009aa8:	4013      	ands	r3, r2
 8009aaa:	d036      	beq.n	8009b1a <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	695b      	ldr	r3, [r3, #20]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d019      	beq.n	8009ae8 <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009ab4:	4bab      	ldr	r3, [pc, #684]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009ab6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ab8:	4baa      	ldr	r3, [pc, #680]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009aba:	2101      	movs	r1, #1
 8009abc:	430a      	orrs	r2, r1
 8009abe:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009ac0:	f7fc fdcc 	bl	800665c <HAL_GetTick>
 8009ac4:	0003      	movs	r3, r0
 8009ac6:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009ac8:	e008      	b.n	8009adc <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009aca:	f7fc fdc7 	bl	800665c <HAL_GetTick>
 8009ace:	0002      	movs	r2, r0
 8009ad0:	697b      	ldr	r3, [r7, #20]
 8009ad2:	1ad3      	subs	r3, r2, r3
 8009ad4:	2b02      	cmp	r3, #2
 8009ad6:	d901      	bls.n	8009adc <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8009ad8:	2303      	movs	r3, #3
 8009ada:	e1c8      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009adc:	4ba1      	ldr	r3, [pc, #644]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009ade:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009ae0:	2202      	movs	r2, #2
 8009ae2:	4013      	ands	r3, r2
 8009ae4:	d0f1      	beq.n	8009aca <HAL_RCC_OscConfig+0x3ee>
 8009ae6:	e018      	b.n	8009b1a <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009ae8:	4b9e      	ldr	r3, [pc, #632]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009aea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009aec:	4b9d      	ldr	r3, [pc, #628]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009aee:	2101      	movs	r1, #1
 8009af0:	438a      	bics	r2, r1
 8009af2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009af4:	f7fc fdb2 	bl	800665c <HAL_GetTick>
 8009af8:	0003      	movs	r3, r0
 8009afa:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009afc:	e008      	b.n	8009b10 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009afe:	f7fc fdad 	bl	800665c <HAL_GetTick>
 8009b02:	0002      	movs	r2, r0
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	1ad3      	subs	r3, r2, r3
 8009b08:	2b02      	cmp	r3, #2
 8009b0a:	d901      	bls.n	8009b10 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8009b0c:	2303      	movs	r3, #3
 8009b0e:	e1ae      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009b10:	4b94      	ldr	r3, [pc, #592]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009b12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009b14:	2202      	movs	r2, #2
 8009b16:	4013      	ands	r3, r2
 8009b18:	d1f1      	bne.n	8009afe <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2204      	movs	r2, #4
 8009b20:	4013      	ands	r3, r2
 8009b22:	d100      	bne.n	8009b26 <HAL_RCC_OscConfig+0x44a>
 8009b24:	e0ae      	b.n	8009c84 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009b26:	2023      	movs	r0, #35	@ 0x23
 8009b28:	183b      	adds	r3, r7, r0
 8009b2a:	2200      	movs	r2, #0
 8009b2c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009b2e:	4b8d      	ldr	r3, [pc, #564]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009b30:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b32:	2380      	movs	r3, #128	@ 0x80
 8009b34:	055b      	lsls	r3, r3, #21
 8009b36:	4013      	ands	r3, r2
 8009b38:	d109      	bne.n	8009b4e <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009b3a:	4b8a      	ldr	r3, [pc, #552]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009b3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009b3e:	4b89      	ldr	r3, [pc, #548]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009b40:	2180      	movs	r1, #128	@ 0x80
 8009b42:	0549      	lsls	r1, r1, #21
 8009b44:	430a      	orrs	r2, r1
 8009b46:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8009b48:	183b      	adds	r3, r7, r0
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b4e:	4b88      	ldr	r3, [pc, #544]	@ (8009d70 <HAL_RCC_OscConfig+0x694>)
 8009b50:	681a      	ldr	r2, [r3, #0]
 8009b52:	2380      	movs	r3, #128	@ 0x80
 8009b54:	005b      	lsls	r3, r3, #1
 8009b56:	4013      	ands	r3, r2
 8009b58:	d11a      	bne.n	8009b90 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8009b5a:	4b85      	ldr	r3, [pc, #532]	@ (8009d70 <HAL_RCC_OscConfig+0x694>)
 8009b5c:	681a      	ldr	r2, [r3, #0]
 8009b5e:	4b84      	ldr	r3, [pc, #528]	@ (8009d70 <HAL_RCC_OscConfig+0x694>)
 8009b60:	2180      	movs	r1, #128	@ 0x80
 8009b62:	0049      	lsls	r1, r1, #1
 8009b64:	430a      	orrs	r2, r1
 8009b66:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009b68:	f7fc fd78 	bl	800665c <HAL_GetTick>
 8009b6c:	0003      	movs	r3, r0
 8009b6e:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b70:	e008      	b.n	8009b84 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009b72:	f7fc fd73 	bl	800665c <HAL_GetTick>
 8009b76:	0002      	movs	r2, r0
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	1ad3      	subs	r3, r2, r3
 8009b7c:	2b64      	cmp	r3, #100	@ 0x64
 8009b7e:	d901      	bls.n	8009b84 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8009b80:	2303      	movs	r3, #3
 8009b82:	e174      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8009b84:	4b7a      	ldr	r3, [pc, #488]	@ (8009d70 <HAL_RCC_OscConfig+0x694>)
 8009b86:	681a      	ldr	r2, [r3, #0]
 8009b88:	2380      	movs	r3, #128	@ 0x80
 8009b8a:	005b      	lsls	r3, r3, #1
 8009b8c:	4013      	ands	r3, r2
 8009b8e:	d0f0      	beq.n	8009b72 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	689a      	ldr	r2, [r3, #8]
 8009b94:	2380      	movs	r3, #128	@ 0x80
 8009b96:	005b      	lsls	r3, r3, #1
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d107      	bne.n	8009bac <HAL_RCC_OscConfig+0x4d0>
 8009b9c:	4b71      	ldr	r3, [pc, #452]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009b9e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009ba0:	4b70      	ldr	r3, [pc, #448]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009ba2:	2180      	movs	r1, #128	@ 0x80
 8009ba4:	0049      	lsls	r1, r1, #1
 8009ba6:	430a      	orrs	r2, r1
 8009ba8:	651a      	str	r2, [r3, #80]	@ 0x50
 8009baa:	e031      	b.n	8009c10 <HAL_RCC_OscConfig+0x534>
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	689b      	ldr	r3, [r3, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d10c      	bne.n	8009bce <HAL_RCC_OscConfig+0x4f2>
 8009bb4:	4b6b      	ldr	r3, [pc, #428]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bb6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bb8:	4b6a      	ldr	r3, [pc, #424]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bba:	496c      	ldr	r1, [pc, #432]	@ (8009d6c <HAL_RCC_OscConfig+0x690>)
 8009bbc:	400a      	ands	r2, r1
 8009bbe:	651a      	str	r2, [r3, #80]	@ 0x50
 8009bc0:	4b68      	ldr	r3, [pc, #416]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bc2:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bc4:	4b67      	ldr	r3, [pc, #412]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bc6:	496b      	ldr	r1, [pc, #428]	@ (8009d74 <HAL_RCC_OscConfig+0x698>)
 8009bc8:	400a      	ands	r2, r1
 8009bca:	651a      	str	r2, [r3, #80]	@ 0x50
 8009bcc:	e020      	b.n	8009c10 <HAL_RCC_OscConfig+0x534>
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	689a      	ldr	r2, [r3, #8]
 8009bd2:	23a0      	movs	r3, #160	@ 0xa0
 8009bd4:	00db      	lsls	r3, r3, #3
 8009bd6:	429a      	cmp	r2, r3
 8009bd8:	d10e      	bne.n	8009bf8 <HAL_RCC_OscConfig+0x51c>
 8009bda:	4b62      	ldr	r3, [pc, #392]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bdc:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bde:	4b61      	ldr	r3, [pc, #388]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009be0:	2180      	movs	r1, #128	@ 0x80
 8009be2:	00c9      	lsls	r1, r1, #3
 8009be4:	430a      	orrs	r2, r1
 8009be6:	651a      	str	r2, [r3, #80]	@ 0x50
 8009be8:	4b5e      	ldr	r3, [pc, #376]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bea:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bec:	4b5d      	ldr	r3, [pc, #372]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bee:	2180      	movs	r1, #128	@ 0x80
 8009bf0:	0049      	lsls	r1, r1, #1
 8009bf2:	430a      	orrs	r2, r1
 8009bf4:	651a      	str	r2, [r3, #80]	@ 0x50
 8009bf6:	e00b      	b.n	8009c10 <HAL_RCC_OscConfig+0x534>
 8009bf8:	4b5a      	ldr	r3, [pc, #360]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bfa:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009bfc:	4b59      	ldr	r3, [pc, #356]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009bfe:	495b      	ldr	r1, [pc, #364]	@ (8009d6c <HAL_RCC_OscConfig+0x690>)
 8009c00:	400a      	ands	r2, r1
 8009c02:	651a      	str	r2, [r3, #80]	@ 0x50
 8009c04:	4b57      	ldr	r3, [pc, #348]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009c06:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c08:	4b56      	ldr	r3, [pc, #344]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009c0a:	495a      	ldr	r1, [pc, #360]	@ (8009d74 <HAL_RCC_OscConfig+0x698>)
 8009c0c:	400a      	ands	r2, r1
 8009c0e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	689b      	ldr	r3, [r3, #8]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d015      	beq.n	8009c44 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c18:	f7fc fd20 	bl	800665c <HAL_GetTick>
 8009c1c:	0003      	movs	r3, r0
 8009c1e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c20:	e009      	b.n	8009c36 <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c22:	f7fc fd1b 	bl	800665c <HAL_GetTick>
 8009c26:	0002      	movs	r2, r0
 8009c28:	697b      	ldr	r3, [r7, #20]
 8009c2a:	1ad3      	subs	r3, r2, r3
 8009c2c:	4a52      	ldr	r2, [pc, #328]	@ (8009d78 <HAL_RCC_OscConfig+0x69c>)
 8009c2e:	4293      	cmp	r3, r2
 8009c30:	d901      	bls.n	8009c36 <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8009c32:	2303      	movs	r3, #3
 8009c34:	e11b      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009c36:	4b4b      	ldr	r3, [pc, #300]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009c38:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c3a:	2380      	movs	r3, #128	@ 0x80
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	4013      	ands	r3, r2
 8009c40:	d0ef      	beq.n	8009c22 <HAL_RCC_OscConfig+0x546>
 8009c42:	e014      	b.n	8009c6e <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8009c44:	f7fc fd0a 	bl	800665c <HAL_GetTick>
 8009c48:	0003      	movs	r3, r0
 8009c4a:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c4c:	e009      	b.n	8009c62 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009c4e:	f7fc fd05 	bl	800665c <HAL_GetTick>
 8009c52:	0002      	movs	r2, r0
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	1ad3      	subs	r3, r2, r3
 8009c58:	4a47      	ldr	r2, [pc, #284]	@ (8009d78 <HAL_RCC_OscConfig+0x69c>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d901      	bls.n	8009c62 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	e105      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009c62:	4b40      	ldr	r3, [pc, #256]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009c64:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8009c66:	2380      	movs	r3, #128	@ 0x80
 8009c68:	009b      	lsls	r3, r3, #2
 8009c6a:	4013      	ands	r3, r2
 8009c6c:	d1ef      	bne.n	8009c4e <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8009c6e:	2323      	movs	r3, #35	@ 0x23
 8009c70:	18fb      	adds	r3, r7, r3
 8009c72:	781b      	ldrb	r3, [r3, #0]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d105      	bne.n	8009c84 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009c78:	4b3a      	ldr	r3, [pc, #232]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009c7c:	4b39      	ldr	r3, [pc, #228]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009c7e:	493f      	ldr	r1, [pc, #252]	@ (8009d7c <HAL_RCC_OscConfig+0x6a0>)
 8009c80:	400a      	ands	r2, r1
 8009c82:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	2220      	movs	r2, #32
 8009c8a:	4013      	ands	r3, r2
 8009c8c:	d049      	beq.n	8009d22 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	699b      	ldr	r3, [r3, #24]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d026      	beq.n	8009ce4 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8009c96:	4b33      	ldr	r3, [pc, #204]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009c98:	689a      	ldr	r2, [r3, #8]
 8009c9a:	4b32      	ldr	r3, [pc, #200]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009c9c:	2101      	movs	r1, #1
 8009c9e:	430a      	orrs	r2, r1
 8009ca0:	609a      	str	r2, [r3, #8]
 8009ca2:	4b30      	ldr	r3, [pc, #192]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009ca4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009ca8:	2101      	movs	r1, #1
 8009caa:	430a      	orrs	r2, r1
 8009cac:	635a      	str	r2, [r3, #52]	@ 0x34
 8009cae:	4b34      	ldr	r3, [pc, #208]	@ (8009d80 <HAL_RCC_OscConfig+0x6a4>)
 8009cb0:	6a1a      	ldr	r2, [r3, #32]
 8009cb2:	4b33      	ldr	r3, [pc, #204]	@ (8009d80 <HAL_RCC_OscConfig+0x6a4>)
 8009cb4:	2180      	movs	r1, #128	@ 0x80
 8009cb6:	0189      	lsls	r1, r1, #6
 8009cb8:	430a      	orrs	r2, r1
 8009cba:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cbc:	f7fc fcce 	bl	800665c <HAL_GetTick>
 8009cc0:	0003      	movs	r3, r0
 8009cc2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cc4:	e008      	b.n	8009cd8 <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009cc6:	f7fc fcc9 	bl	800665c <HAL_GetTick>
 8009cca:	0002      	movs	r2, r0
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	1ad3      	subs	r3, r2, r3
 8009cd0:	2b02      	cmp	r3, #2
 8009cd2:	d901      	bls.n	8009cd8 <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e0ca      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009cd8:	4b22      	ldr	r3, [pc, #136]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009cda:	689b      	ldr	r3, [r3, #8]
 8009cdc:	2202      	movs	r2, #2
 8009cde:	4013      	ands	r3, r2
 8009ce0:	d0f1      	beq.n	8009cc6 <HAL_RCC_OscConfig+0x5ea>
 8009ce2:	e01e      	b.n	8009d22 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8009ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009ce6:	689a      	ldr	r2, [r3, #8]
 8009ce8:	4b1e      	ldr	r3, [pc, #120]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009cea:	2101      	movs	r1, #1
 8009cec:	438a      	bics	r2, r1
 8009cee:	609a      	str	r2, [r3, #8]
 8009cf0:	4b23      	ldr	r3, [pc, #140]	@ (8009d80 <HAL_RCC_OscConfig+0x6a4>)
 8009cf2:	6a1a      	ldr	r2, [r3, #32]
 8009cf4:	4b22      	ldr	r3, [pc, #136]	@ (8009d80 <HAL_RCC_OscConfig+0x6a4>)
 8009cf6:	4923      	ldr	r1, [pc, #140]	@ (8009d84 <HAL_RCC_OscConfig+0x6a8>)
 8009cf8:	400a      	ands	r2, r1
 8009cfa:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009cfc:	f7fc fcae 	bl	800665c <HAL_GetTick>
 8009d00:	0003      	movs	r3, r0
 8009d02:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d04:	e008      	b.n	8009d18 <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d06:	f7fc fca9 	bl	800665c <HAL_GetTick>
 8009d0a:	0002      	movs	r2, r0
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	1ad3      	subs	r3, r2, r3
 8009d10:	2b02      	cmp	r3, #2
 8009d12:	d901      	bls.n	8009d18 <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8009d14:	2303      	movs	r3, #3
 8009d16:	e0aa      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d18:	4b12      	ldr	r3, [pc, #72]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009d1a:	689b      	ldr	r3, [r3, #8]
 8009d1c:	2202      	movs	r2, #2
 8009d1e:	4013      	ands	r3, r2
 8009d20:	d1f1      	bne.n	8009d06 <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d26:	2b00      	cmp	r3, #0
 8009d28:	d100      	bne.n	8009d2c <HAL_RCC_OscConfig+0x650>
 8009d2a:	e09f      	b.n	8009e6c <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009d2c:	69fb      	ldr	r3, [r7, #28]
 8009d2e:	2b0c      	cmp	r3, #12
 8009d30:	d100      	bne.n	8009d34 <HAL_RCC_OscConfig+0x658>
 8009d32:	e078      	b.n	8009e26 <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009d38:	2b02      	cmp	r3, #2
 8009d3a:	d159      	bne.n	8009df0 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009d3c:	4b09      	ldr	r3, [pc, #36]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009d3e:	681a      	ldr	r2, [r3, #0]
 8009d40:	4b08      	ldr	r3, [pc, #32]	@ (8009d64 <HAL_RCC_OscConfig+0x688>)
 8009d42:	4911      	ldr	r1, [pc, #68]	@ (8009d88 <HAL_RCC_OscConfig+0x6ac>)
 8009d44:	400a      	ands	r2, r1
 8009d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009d48:	f7fc fc88 	bl	800665c <HAL_GetTick>
 8009d4c:	0003      	movs	r3, r0
 8009d4e:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009d50:	e01c      	b.n	8009d8c <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009d52:	f7fc fc83 	bl	800665c <HAL_GetTick>
 8009d56:	0002      	movs	r2, r0
 8009d58:	697b      	ldr	r3, [r7, #20]
 8009d5a:	1ad3      	subs	r3, r2, r3
 8009d5c:	2b02      	cmp	r3, #2
 8009d5e:	d915      	bls.n	8009d8c <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8009d60:	2303      	movs	r3, #3
 8009d62:	e084      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
 8009d64:	40021000 	.word	0x40021000
 8009d68:	ffff1fff 	.word	0xffff1fff
 8009d6c:	fffffeff 	.word	0xfffffeff
 8009d70:	40007000 	.word	0x40007000
 8009d74:	fffffbff 	.word	0xfffffbff
 8009d78:	00001388 	.word	0x00001388
 8009d7c:	efffffff 	.word	0xefffffff
 8009d80:	40010000 	.word	0x40010000
 8009d84:	ffffdfff 	.word	0xffffdfff
 8009d88:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009d8c:	4b3a      	ldr	r3, [pc, #232]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009d8e:	681a      	ldr	r2, [r3, #0]
 8009d90:	2380      	movs	r3, #128	@ 0x80
 8009d92:	049b      	lsls	r3, r3, #18
 8009d94:	4013      	ands	r3, r2
 8009d96:	d1dc      	bne.n	8009d52 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d98:	4b37      	ldr	r3, [pc, #220]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009d9a:	68db      	ldr	r3, [r3, #12]
 8009d9c:	4a37      	ldr	r2, [pc, #220]	@ (8009e7c <HAL_RCC_OscConfig+0x7a0>)
 8009d9e:	4013      	ands	r3, r2
 8009da0:	0019      	movs	r1, r3
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009daa:	431a      	orrs	r2, r3
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009db0:	431a      	orrs	r2, r3
 8009db2:	4b31      	ldr	r3, [pc, #196]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009db4:	430a      	orrs	r2, r1
 8009db6:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009db8:	4b2f      	ldr	r3, [pc, #188]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009dbe:	2180      	movs	r1, #128	@ 0x80
 8009dc0:	0449      	lsls	r1, r1, #17
 8009dc2:	430a      	orrs	r2, r1
 8009dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dc6:	f7fc fc49 	bl	800665c <HAL_GetTick>
 8009dca:	0003      	movs	r3, r0
 8009dcc:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009dce:	e008      	b.n	8009de2 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009dd0:	f7fc fc44 	bl	800665c <HAL_GetTick>
 8009dd4:	0002      	movs	r2, r0
 8009dd6:	697b      	ldr	r3, [r7, #20]
 8009dd8:	1ad3      	subs	r3, r2, r3
 8009dda:	2b02      	cmp	r3, #2
 8009ddc:	d901      	bls.n	8009de2 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8009dde:	2303      	movs	r3, #3
 8009de0:	e045      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8009de2:	4b25      	ldr	r3, [pc, #148]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009de4:	681a      	ldr	r2, [r3, #0]
 8009de6:	2380      	movs	r3, #128	@ 0x80
 8009de8:	049b      	lsls	r3, r3, #18
 8009dea:	4013      	ands	r3, r2
 8009dec:	d0f0      	beq.n	8009dd0 <HAL_RCC_OscConfig+0x6f4>
 8009dee:	e03d      	b.n	8009e6c <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009df0:	4b21      	ldr	r3, [pc, #132]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009df2:	681a      	ldr	r2, [r3, #0]
 8009df4:	4b20      	ldr	r3, [pc, #128]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009df6:	4922      	ldr	r1, [pc, #136]	@ (8009e80 <HAL_RCC_OscConfig+0x7a4>)
 8009df8:	400a      	ands	r2, r1
 8009dfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8009dfc:	f7fc fc2e 	bl	800665c <HAL_GetTick>
 8009e00:	0003      	movs	r3, r0
 8009e02:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009e04:	e008      	b.n	8009e18 <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009e06:	f7fc fc29 	bl	800665c <HAL_GetTick>
 8009e0a:	0002      	movs	r2, r0
 8009e0c:	697b      	ldr	r3, [r7, #20]
 8009e0e:	1ad3      	subs	r3, r2, r3
 8009e10:	2b02      	cmp	r3, #2
 8009e12:	d901      	bls.n	8009e18 <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8009e14:	2303      	movs	r3, #3
 8009e16:	e02a      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8009e18:	4b17      	ldr	r3, [pc, #92]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009e1a:	681a      	ldr	r2, [r3, #0]
 8009e1c:	2380      	movs	r3, #128	@ 0x80
 8009e1e:	049b      	lsls	r3, r3, #18
 8009e20:	4013      	ands	r3, r2
 8009e22:	d1f0      	bne.n	8009e06 <HAL_RCC_OscConfig+0x72a>
 8009e24:	e022      	b.n	8009e6c <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009e2a:	2b01      	cmp	r3, #1
 8009e2c:	d101      	bne.n	8009e32 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8009e2e:	2301      	movs	r3, #1
 8009e30:	e01d      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8009e32:	4b11      	ldr	r3, [pc, #68]	@ (8009e78 <HAL_RCC_OscConfig+0x79c>)
 8009e34:	68db      	ldr	r3, [r3, #12]
 8009e36:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e38:	69ba      	ldr	r2, [r7, #24]
 8009e3a:	2380      	movs	r3, #128	@ 0x80
 8009e3c:	025b      	lsls	r3, r3, #9
 8009e3e:	401a      	ands	r2, r3
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e44:	429a      	cmp	r2, r3
 8009e46:	d10f      	bne.n	8009e68 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009e48:	69ba      	ldr	r2, [r7, #24]
 8009e4a:	23f0      	movs	r3, #240	@ 0xf0
 8009e4c:	039b      	lsls	r3, r3, #14
 8009e4e:	401a      	ands	r2, r3
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009e54:	429a      	cmp	r2, r3
 8009e56:	d107      	bne.n	8009e68 <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8009e58:	69ba      	ldr	r2, [r7, #24]
 8009e5a:	23c0      	movs	r3, #192	@ 0xc0
 8009e5c:	041b      	lsls	r3, r3, #16
 8009e5e:	401a      	ands	r2, r3
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8009e64:	429a      	cmp	r2, r3
 8009e66:	d001      	beq.n	8009e6c <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8009e68:	2301      	movs	r3, #1
 8009e6a:	e000      	b.n	8009e6e <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	0018      	movs	r0, r3
 8009e70:	46bd      	mov	sp, r7
 8009e72:	b00a      	add	sp, #40	@ 0x28
 8009e74:	bdb0      	pop	{r4, r5, r7, pc}
 8009e76:	46c0      	nop			@ (mov r8, r8)
 8009e78:	40021000 	.word	0x40021000
 8009e7c:	ff02ffff 	.word	0xff02ffff
 8009e80:	feffffff 	.word	0xfeffffff

08009e84 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e84:	b5b0      	push	{r4, r5, r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d101      	bne.n	8009e98 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e94:	2301      	movs	r3, #1
 8009e96:	e128      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e98:	4b96      	ldr	r3, [pc, #600]	@ (800a0f4 <HAL_RCC_ClockConfig+0x270>)
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	2201      	movs	r2, #1
 8009e9e:	4013      	ands	r3, r2
 8009ea0:	683a      	ldr	r2, [r7, #0]
 8009ea2:	429a      	cmp	r2, r3
 8009ea4:	d91e      	bls.n	8009ee4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009ea6:	4b93      	ldr	r3, [pc, #588]	@ (800a0f4 <HAL_RCC_ClockConfig+0x270>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	2201      	movs	r2, #1
 8009eac:	4393      	bics	r3, r2
 8009eae:	0019      	movs	r1, r3
 8009eb0:	4b90      	ldr	r3, [pc, #576]	@ (800a0f4 <HAL_RCC_ClockConfig+0x270>)
 8009eb2:	683a      	ldr	r2, [r7, #0]
 8009eb4:	430a      	orrs	r2, r1
 8009eb6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8009eb8:	f7fc fbd0 	bl	800665c <HAL_GetTick>
 8009ebc:	0003      	movs	r3, r0
 8009ebe:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ec0:	e009      	b.n	8009ed6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009ec2:	f7fc fbcb 	bl	800665c <HAL_GetTick>
 8009ec6:	0002      	movs	r2, r0
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	1ad3      	subs	r3, r2, r3
 8009ecc:	4a8a      	ldr	r2, [pc, #552]	@ (800a0f8 <HAL_RCC_ClockConfig+0x274>)
 8009ece:	4293      	cmp	r3, r2
 8009ed0:	d901      	bls.n	8009ed6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8009ed2:	2303      	movs	r3, #3
 8009ed4:	e109      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009ed6:	4b87      	ldr	r3, [pc, #540]	@ (800a0f4 <HAL_RCC_ClockConfig+0x270>)
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	2201      	movs	r2, #1
 8009edc:	4013      	ands	r3, r2
 8009ede:	683a      	ldr	r2, [r7, #0]
 8009ee0:	429a      	cmp	r2, r3
 8009ee2:	d1ee      	bne.n	8009ec2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	2202      	movs	r2, #2
 8009eea:	4013      	ands	r3, r2
 8009eec:	d009      	beq.n	8009f02 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009eee:	4b83      	ldr	r3, [pc, #524]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	22f0      	movs	r2, #240	@ 0xf0
 8009ef4:	4393      	bics	r3, r2
 8009ef6:	0019      	movs	r1, r3
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	689a      	ldr	r2, [r3, #8]
 8009efc:	4b7f      	ldr	r3, [pc, #508]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009efe:	430a      	orrs	r2, r1
 8009f00:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	2201      	movs	r2, #1
 8009f08:	4013      	ands	r3, r2
 8009f0a:	d100      	bne.n	8009f0e <HAL_RCC_ClockConfig+0x8a>
 8009f0c:	e089      	b.n	800a022 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	2b02      	cmp	r3, #2
 8009f14:	d107      	bne.n	8009f26 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f16:	4b79      	ldr	r3, [pc, #484]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009f18:	681a      	ldr	r2, [r3, #0]
 8009f1a:	2380      	movs	r3, #128	@ 0x80
 8009f1c:	029b      	lsls	r3, r3, #10
 8009f1e:	4013      	ands	r3, r2
 8009f20:	d120      	bne.n	8009f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009f22:	2301      	movs	r3, #1
 8009f24:	e0e1      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	685b      	ldr	r3, [r3, #4]
 8009f2a:	2b03      	cmp	r3, #3
 8009f2c:	d107      	bne.n	8009f3e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009f2e:	4b73      	ldr	r3, [pc, #460]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009f30:	681a      	ldr	r2, [r3, #0]
 8009f32:	2380      	movs	r3, #128	@ 0x80
 8009f34:	049b      	lsls	r3, r3, #18
 8009f36:	4013      	ands	r3, r2
 8009f38:	d114      	bne.n	8009f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009f3a:	2301      	movs	r3, #1
 8009f3c:	e0d5      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	685b      	ldr	r3, [r3, #4]
 8009f42:	2b01      	cmp	r3, #1
 8009f44:	d106      	bne.n	8009f54 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f46:	4b6d      	ldr	r3, [pc, #436]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	2204      	movs	r2, #4
 8009f4c:	4013      	ands	r3, r2
 8009f4e:	d109      	bne.n	8009f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009f50:	2301      	movs	r3, #1
 8009f52:	e0ca      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8009f54:	4b69      	ldr	r3, [pc, #420]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009f56:	681a      	ldr	r2, [r3, #0]
 8009f58:	2380      	movs	r3, #128	@ 0x80
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4013      	ands	r3, r2
 8009f5e:	d101      	bne.n	8009f64 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8009f60:	2301      	movs	r3, #1
 8009f62:	e0c2      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009f64:	4b65      	ldr	r3, [pc, #404]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	2203      	movs	r2, #3
 8009f6a:	4393      	bics	r3, r2
 8009f6c:	0019      	movs	r1, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	685a      	ldr	r2, [r3, #4]
 8009f72:	4b62      	ldr	r3, [pc, #392]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009f74:	430a      	orrs	r2, r1
 8009f76:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8009f78:	f7fc fb70 	bl	800665c <HAL_GetTick>
 8009f7c:	0003      	movs	r3, r0
 8009f7e:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f80:	687b      	ldr	r3, [r7, #4]
 8009f82:	685b      	ldr	r3, [r3, #4]
 8009f84:	2b02      	cmp	r3, #2
 8009f86:	d111      	bne.n	8009fac <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f88:	e009      	b.n	8009f9e <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f8a:	f7fc fb67 	bl	800665c <HAL_GetTick>
 8009f8e:	0002      	movs	r2, r0
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	1ad3      	subs	r3, r2, r3
 8009f94:	4a58      	ldr	r2, [pc, #352]	@ (800a0f8 <HAL_RCC_ClockConfig+0x274>)
 8009f96:	4293      	cmp	r3, r2
 8009f98:	d901      	bls.n	8009f9e <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8009f9a:	2303      	movs	r3, #3
 8009f9c:	e0a5      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8009f9e:	4b57      	ldr	r3, [pc, #348]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009fa0:	68db      	ldr	r3, [r3, #12]
 8009fa2:	220c      	movs	r2, #12
 8009fa4:	4013      	ands	r3, r2
 8009fa6:	2b08      	cmp	r3, #8
 8009fa8:	d1ef      	bne.n	8009f8a <HAL_RCC_ClockConfig+0x106>
 8009faa:	e03a      	b.n	800a022 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	685b      	ldr	r3, [r3, #4]
 8009fb0:	2b03      	cmp	r3, #3
 8009fb2:	d111      	bne.n	8009fd8 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009fb4:	e009      	b.n	8009fca <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fb6:	f7fc fb51 	bl	800665c <HAL_GetTick>
 8009fba:	0002      	movs	r2, r0
 8009fbc:	68fb      	ldr	r3, [r7, #12]
 8009fbe:	1ad3      	subs	r3, r2, r3
 8009fc0:	4a4d      	ldr	r2, [pc, #308]	@ (800a0f8 <HAL_RCC_ClockConfig+0x274>)
 8009fc2:	4293      	cmp	r3, r2
 8009fc4:	d901      	bls.n	8009fca <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8009fc6:	2303      	movs	r3, #3
 8009fc8:	e08f      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009fca:	4b4c      	ldr	r3, [pc, #304]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009fcc:	68db      	ldr	r3, [r3, #12]
 8009fce:	220c      	movs	r2, #12
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	2b0c      	cmp	r3, #12
 8009fd4:	d1ef      	bne.n	8009fb6 <HAL_RCC_ClockConfig+0x132>
 8009fd6:	e024      	b.n	800a022 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	685b      	ldr	r3, [r3, #4]
 8009fdc:	2b01      	cmp	r3, #1
 8009fde:	d11b      	bne.n	800a018 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009fe0:	e009      	b.n	8009ff6 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009fe2:	f7fc fb3b 	bl	800665c <HAL_GetTick>
 8009fe6:	0002      	movs	r2, r0
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	1ad3      	subs	r3, r2, r3
 8009fec:	4a42      	ldr	r2, [pc, #264]	@ (800a0f8 <HAL_RCC_ClockConfig+0x274>)
 8009fee:	4293      	cmp	r3, r2
 8009ff0:	d901      	bls.n	8009ff6 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8009ff2:	2303      	movs	r3, #3
 8009ff4:	e079      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8009ff6:	4b41      	ldr	r3, [pc, #260]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 8009ff8:	68db      	ldr	r3, [r3, #12]
 8009ffa:	220c      	movs	r2, #12
 8009ffc:	4013      	ands	r3, r2
 8009ffe:	2b04      	cmp	r3, #4
 800a000:	d1ef      	bne.n	8009fe2 <HAL_RCC_ClockConfig+0x15e>
 800a002:	e00e      	b.n	800a022 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a004:	f7fc fb2a 	bl	800665c <HAL_GetTick>
 800a008:	0002      	movs	r2, r0
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	1ad3      	subs	r3, r2, r3
 800a00e:	4a3a      	ldr	r2, [pc, #232]	@ (800a0f8 <HAL_RCC_ClockConfig+0x274>)
 800a010:	4293      	cmp	r3, r2
 800a012:	d901      	bls.n	800a018 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 800a014:	2303      	movs	r3, #3
 800a016:	e068      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800a018:	4b38      	ldr	r3, [pc, #224]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	220c      	movs	r2, #12
 800a01e:	4013      	ands	r3, r2
 800a020:	d1f0      	bne.n	800a004 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800a022:	4b34      	ldr	r3, [pc, #208]	@ (800a0f4 <HAL_RCC_ClockConfig+0x270>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	2201      	movs	r2, #1
 800a028:	4013      	ands	r3, r2
 800a02a:	683a      	ldr	r2, [r7, #0]
 800a02c:	429a      	cmp	r2, r3
 800a02e:	d21e      	bcs.n	800a06e <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a030:	4b30      	ldr	r3, [pc, #192]	@ (800a0f4 <HAL_RCC_ClockConfig+0x270>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	2201      	movs	r2, #1
 800a036:	4393      	bics	r3, r2
 800a038:	0019      	movs	r1, r3
 800a03a:	4b2e      	ldr	r3, [pc, #184]	@ (800a0f4 <HAL_RCC_ClockConfig+0x270>)
 800a03c:	683a      	ldr	r2, [r7, #0]
 800a03e:	430a      	orrs	r2, r1
 800a040:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800a042:	f7fc fb0b 	bl	800665c <HAL_GetTick>
 800a046:	0003      	movs	r3, r0
 800a048:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a04a:	e009      	b.n	800a060 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a04c:	f7fc fb06 	bl	800665c <HAL_GetTick>
 800a050:	0002      	movs	r2, r0
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	1ad3      	subs	r3, r2, r3
 800a056:	4a28      	ldr	r2, [pc, #160]	@ (800a0f8 <HAL_RCC_ClockConfig+0x274>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d901      	bls.n	800a060 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 800a05c:	2303      	movs	r3, #3
 800a05e:	e044      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a060:	4b24      	ldr	r3, [pc, #144]	@ (800a0f4 <HAL_RCC_ClockConfig+0x270>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	2201      	movs	r2, #1
 800a066:	4013      	ands	r3, r2
 800a068:	683a      	ldr	r2, [r7, #0]
 800a06a:	429a      	cmp	r2, r3
 800a06c:	d1ee      	bne.n	800a04c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	2204      	movs	r2, #4
 800a074:	4013      	ands	r3, r2
 800a076:	d009      	beq.n	800a08c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800a078:	4b20      	ldr	r3, [pc, #128]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 800a07a:	68db      	ldr	r3, [r3, #12]
 800a07c:	4a20      	ldr	r2, [pc, #128]	@ (800a100 <HAL_RCC_ClockConfig+0x27c>)
 800a07e:	4013      	ands	r3, r2
 800a080:	0019      	movs	r1, r3
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	68da      	ldr	r2, [r3, #12]
 800a086:	4b1d      	ldr	r3, [pc, #116]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 800a088:	430a      	orrs	r2, r1
 800a08a:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	681b      	ldr	r3, [r3, #0]
 800a090:	2208      	movs	r2, #8
 800a092:	4013      	ands	r3, r2
 800a094:	d00a      	beq.n	800a0ac <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800a096:	4b19      	ldr	r3, [pc, #100]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 800a098:	68db      	ldr	r3, [r3, #12]
 800a09a:	4a1a      	ldr	r2, [pc, #104]	@ (800a104 <HAL_RCC_ClockConfig+0x280>)
 800a09c:	4013      	ands	r3, r2
 800a09e:	0019      	movs	r1, r3
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	691b      	ldr	r3, [r3, #16]
 800a0a4:	00da      	lsls	r2, r3, #3
 800a0a6:	4b15      	ldr	r3, [pc, #84]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 800a0a8:	430a      	orrs	r2, r1
 800a0aa:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800a0ac:	f000 f832 	bl	800a114 <HAL_RCC_GetSysClockFreq>
 800a0b0:	0001      	movs	r1, r0
 800a0b2:	4b12      	ldr	r3, [pc, #72]	@ (800a0fc <HAL_RCC_ClockConfig+0x278>)
 800a0b4:	68db      	ldr	r3, [r3, #12]
 800a0b6:	091b      	lsrs	r3, r3, #4
 800a0b8:	220f      	movs	r2, #15
 800a0ba:	4013      	ands	r3, r2
 800a0bc:	4a12      	ldr	r2, [pc, #72]	@ (800a108 <HAL_RCC_ClockConfig+0x284>)
 800a0be:	5cd3      	ldrb	r3, [r2, r3]
 800a0c0:	000a      	movs	r2, r1
 800a0c2:	40da      	lsrs	r2, r3
 800a0c4:	4b11      	ldr	r3, [pc, #68]	@ (800a10c <HAL_RCC_ClockConfig+0x288>)
 800a0c6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a0c8:	4b11      	ldr	r3, [pc, #68]	@ (800a110 <HAL_RCC_ClockConfig+0x28c>)
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	250b      	movs	r5, #11
 800a0ce:	197c      	adds	r4, r7, r5
 800a0d0:	0018      	movs	r0, r3
 800a0d2:	f7fc fa7d 	bl	80065d0 <HAL_InitTick>
 800a0d6:	0003      	movs	r3, r0
 800a0d8:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800a0da:	197b      	adds	r3, r7, r5
 800a0dc:	781b      	ldrb	r3, [r3, #0]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d002      	beq.n	800a0e8 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 800a0e2:	197b      	adds	r3, r7, r5
 800a0e4:	781b      	ldrb	r3, [r3, #0]
 800a0e6:	e000      	b.n	800a0ea <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800a0e8:	2300      	movs	r3, #0
}
 800a0ea:	0018      	movs	r0, r3
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	b004      	add	sp, #16
 800a0f0:	bdb0      	pop	{r4, r5, r7, pc}
 800a0f2:	46c0      	nop			@ (mov r8, r8)
 800a0f4:	40022000 	.word	0x40022000
 800a0f8:	00001388 	.word	0x00001388
 800a0fc:	40021000 	.word	0x40021000
 800a100:	fffff8ff 	.word	0xfffff8ff
 800a104:	ffffc7ff 	.word	0xffffc7ff
 800a108:	0800fb1c 	.word	0x0800fb1c
 800a10c:	2000002c 	.word	0x2000002c
 800a110:	20000040 	.word	0x20000040

0800a114 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a114:	b5b0      	push	{r4, r5, r7, lr}
 800a116:	b08e      	sub	sp, #56	@ 0x38
 800a118:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800a11a:	4b4c      	ldr	r3, [pc, #304]	@ (800a24c <HAL_RCC_GetSysClockFreq+0x138>)
 800a11c:	68db      	ldr	r3, [r3, #12]
 800a11e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800a120:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a122:	230c      	movs	r3, #12
 800a124:	4013      	ands	r3, r2
 800a126:	2b0c      	cmp	r3, #12
 800a128:	d014      	beq.n	800a154 <HAL_RCC_GetSysClockFreq+0x40>
 800a12a:	d900      	bls.n	800a12e <HAL_RCC_GetSysClockFreq+0x1a>
 800a12c:	e07b      	b.n	800a226 <HAL_RCC_GetSysClockFreq+0x112>
 800a12e:	2b04      	cmp	r3, #4
 800a130:	d002      	beq.n	800a138 <HAL_RCC_GetSysClockFreq+0x24>
 800a132:	2b08      	cmp	r3, #8
 800a134:	d00b      	beq.n	800a14e <HAL_RCC_GetSysClockFreq+0x3a>
 800a136:	e076      	b.n	800a226 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a138:	4b44      	ldr	r3, [pc, #272]	@ (800a24c <HAL_RCC_GetSysClockFreq+0x138>)
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	2210      	movs	r2, #16
 800a13e:	4013      	ands	r3, r2
 800a140:	d002      	beq.n	800a148 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800a142:	4b43      	ldr	r3, [pc, #268]	@ (800a250 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a144:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800a146:	e07c      	b.n	800a242 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800a148:	4b42      	ldr	r3, [pc, #264]	@ (800a254 <HAL_RCC_GetSysClockFreq+0x140>)
 800a14a:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a14c:	e079      	b.n	800a242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800a14e:	4b42      	ldr	r3, [pc, #264]	@ (800a258 <HAL_RCC_GetSysClockFreq+0x144>)
 800a150:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a152:	e076      	b.n	800a242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800a154:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a156:	0c9a      	lsrs	r2, r3, #18
 800a158:	230f      	movs	r3, #15
 800a15a:	401a      	ands	r2, r3
 800a15c:	4b3f      	ldr	r3, [pc, #252]	@ (800a25c <HAL_RCC_GetSysClockFreq+0x148>)
 800a15e:	5c9b      	ldrb	r3, [r3, r2]
 800a160:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800a162:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a164:	0d9a      	lsrs	r2, r3, #22
 800a166:	2303      	movs	r3, #3
 800a168:	4013      	ands	r3, r2
 800a16a:	3301      	adds	r3, #1
 800a16c:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800a16e:	4b37      	ldr	r3, [pc, #220]	@ (800a24c <HAL_RCC_GetSysClockFreq+0x138>)
 800a170:	68da      	ldr	r2, [r3, #12]
 800a172:	2380      	movs	r3, #128	@ 0x80
 800a174:	025b      	lsls	r3, r3, #9
 800a176:	4013      	ands	r3, r2
 800a178:	d01a      	beq.n	800a1b0 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a17a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a17c:	61bb      	str	r3, [r7, #24]
 800a17e:	2300      	movs	r3, #0
 800a180:	61fb      	str	r3, [r7, #28]
 800a182:	4a35      	ldr	r2, [pc, #212]	@ (800a258 <HAL_RCC_GetSysClockFreq+0x144>)
 800a184:	2300      	movs	r3, #0
 800a186:	69b8      	ldr	r0, [r7, #24]
 800a188:	69f9      	ldr	r1, [r7, #28]
 800a18a:	f7f6 f9e7 	bl	800055c <__aeabi_lmul>
 800a18e:	0002      	movs	r2, r0
 800a190:	000b      	movs	r3, r1
 800a192:	0010      	movs	r0, r2
 800a194:	0019      	movs	r1, r3
 800a196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a198:	613b      	str	r3, [r7, #16]
 800a19a:	2300      	movs	r3, #0
 800a19c:	617b      	str	r3, [r7, #20]
 800a19e:	693a      	ldr	r2, [r7, #16]
 800a1a0:	697b      	ldr	r3, [r7, #20]
 800a1a2:	f7f6 f9bb 	bl	800051c <__aeabi_uldivmod>
 800a1a6:	0002      	movs	r2, r0
 800a1a8:	000b      	movs	r3, r1
 800a1aa:	0013      	movs	r3, r2
 800a1ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ae:	e037      	b.n	800a220 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800a1b0:	4b26      	ldr	r3, [pc, #152]	@ (800a24c <HAL_RCC_GetSysClockFreq+0x138>)
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	2210      	movs	r2, #16
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	d01a      	beq.n	800a1f0 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800a1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1bc:	60bb      	str	r3, [r7, #8]
 800a1be:	2300      	movs	r3, #0
 800a1c0:	60fb      	str	r3, [r7, #12]
 800a1c2:	4a23      	ldr	r2, [pc, #140]	@ (800a250 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	68b8      	ldr	r0, [r7, #8]
 800a1c8:	68f9      	ldr	r1, [r7, #12]
 800a1ca:	f7f6 f9c7 	bl	800055c <__aeabi_lmul>
 800a1ce:	0002      	movs	r2, r0
 800a1d0:	000b      	movs	r3, r1
 800a1d2:	0010      	movs	r0, r2
 800a1d4:	0019      	movs	r1, r3
 800a1d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a1d8:	603b      	str	r3, [r7, #0]
 800a1da:	2300      	movs	r3, #0
 800a1dc:	607b      	str	r3, [r7, #4]
 800a1de:	683a      	ldr	r2, [r7, #0]
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	f7f6 f99b 	bl	800051c <__aeabi_uldivmod>
 800a1e6:	0002      	movs	r2, r0
 800a1e8:	000b      	movs	r3, r1
 800a1ea:	0013      	movs	r3, r2
 800a1ec:	637b      	str	r3, [r7, #52]	@ 0x34
 800a1ee:	e017      	b.n	800a220 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 800a1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1f2:	0018      	movs	r0, r3
 800a1f4:	2300      	movs	r3, #0
 800a1f6:	0019      	movs	r1, r3
 800a1f8:	4a16      	ldr	r2, [pc, #88]	@ (800a254 <HAL_RCC_GetSysClockFreq+0x140>)
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	f7f6 f9ae 	bl	800055c <__aeabi_lmul>
 800a200:	0002      	movs	r2, r0
 800a202:	000b      	movs	r3, r1
 800a204:	0010      	movs	r0, r2
 800a206:	0019      	movs	r1, r3
 800a208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20a:	001c      	movs	r4, r3
 800a20c:	2300      	movs	r3, #0
 800a20e:	001d      	movs	r5, r3
 800a210:	0022      	movs	r2, r4
 800a212:	002b      	movs	r3, r5
 800a214:	f7f6 f982 	bl	800051c <__aeabi_uldivmod>
 800a218:	0002      	movs	r2, r0
 800a21a:	000b      	movs	r3, r1
 800a21c:	0013      	movs	r3, r2
 800a21e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 800a220:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a222:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a224:	e00d      	b.n	800a242 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800a226:	4b09      	ldr	r3, [pc, #36]	@ (800a24c <HAL_RCC_GetSysClockFreq+0x138>)
 800a228:	685b      	ldr	r3, [r3, #4]
 800a22a:	0b5b      	lsrs	r3, r3, #13
 800a22c:	2207      	movs	r2, #7
 800a22e:	4013      	ands	r3, r2
 800a230:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	3301      	adds	r3, #1
 800a236:	2280      	movs	r2, #128	@ 0x80
 800a238:	0212      	lsls	r2, r2, #8
 800a23a:	409a      	lsls	r2, r3
 800a23c:	0013      	movs	r3, r2
 800a23e:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 800a240:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 800a242:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 800a244:	0018      	movs	r0, r3
 800a246:	46bd      	mov	sp, r7
 800a248:	b00e      	add	sp, #56	@ 0x38
 800a24a:	bdb0      	pop	{r4, r5, r7, pc}
 800a24c:	40021000 	.word	0x40021000
 800a250:	003d0900 	.word	0x003d0900
 800a254:	00f42400 	.word	0x00f42400
 800a258:	007a1200 	.word	0x007a1200
 800a25c:	0800fb34 	.word	0x0800fb34

0800a260 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a264:	4b02      	ldr	r3, [pc, #8]	@ (800a270 <HAL_RCC_GetHCLKFreq+0x10>)
 800a266:	681b      	ldr	r3, [r3, #0]
}
 800a268:	0018      	movs	r0, r3
 800a26a:	46bd      	mov	sp, r7
 800a26c:	bd80      	pop	{r7, pc}
 800a26e:	46c0      	nop			@ (mov r8, r8)
 800a270:	2000002c 	.word	0x2000002c

0800a274 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800a278:	f7ff fff2 	bl	800a260 <HAL_RCC_GetHCLKFreq>
 800a27c:	0001      	movs	r1, r0
 800a27e:	4b06      	ldr	r3, [pc, #24]	@ (800a298 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a280:	68db      	ldr	r3, [r3, #12]
 800a282:	0a1b      	lsrs	r3, r3, #8
 800a284:	2207      	movs	r2, #7
 800a286:	4013      	ands	r3, r2
 800a288:	4a04      	ldr	r2, [pc, #16]	@ (800a29c <HAL_RCC_GetPCLK1Freq+0x28>)
 800a28a:	5cd3      	ldrb	r3, [r2, r3]
 800a28c:	40d9      	lsrs	r1, r3
 800a28e:	000b      	movs	r3, r1
}
 800a290:	0018      	movs	r0, r3
 800a292:	46bd      	mov	sp, r7
 800a294:	bd80      	pop	{r7, pc}
 800a296:	46c0      	nop			@ (mov r8, r8)
 800a298:	40021000 	.word	0x40021000
 800a29c:	0800fb2c 	.word	0x0800fb2c

0800a2a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800a2a4:	f7ff ffdc 	bl	800a260 <HAL_RCC_GetHCLKFreq>
 800a2a8:	0001      	movs	r1, r0
 800a2aa:	4b06      	ldr	r3, [pc, #24]	@ (800a2c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800a2ac:	68db      	ldr	r3, [r3, #12]
 800a2ae:	0adb      	lsrs	r3, r3, #11
 800a2b0:	2207      	movs	r2, #7
 800a2b2:	4013      	ands	r3, r2
 800a2b4:	4a04      	ldr	r2, [pc, #16]	@ (800a2c8 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a2b6:	5cd3      	ldrb	r3, [r2, r3]
 800a2b8:	40d9      	lsrs	r1, r3
 800a2ba:	000b      	movs	r3, r1
}
 800a2bc:	0018      	movs	r0, r3
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}
 800a2c2:	46c0      	nop			@ (mov r8, r8)
 800a2c4:	40021000 	.word	0x40021000
 800a2c8:	0800fb2c 	.word	0x0800fb2c

0800a2cc <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a2cc:	b580      	push	{r7, lr}
 800a2ce:	b086      	sub	sp, #24
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 800a2d4:	2017      	movs	r0, #23
 800a2d6:	183b      	adds	r3, r7, r0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a2dc:	687b      	ldr	r3, [r7, #4]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2220      	movs	r2, #32
 800a2e2:	4013      	ands	r3, r2
 800a2e4:	d100      	bne.n	800a2e8 <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800a2e6:	e0c7      	b.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a2e8:	4b9b      	ldr	r3, [pc, #620]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2ec:	2380      	movs	r3, #128	@ 0x80
 800a2ee:	055b      	lsls	r3, r3, #21
 800a2f0:	4013      	ands	r3, r2
 800a2f2:	d109      	bne.n	800a308 <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a2f4:	4b98      	ldr	r3, [pc, #608]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a2f8:	4b97      	ldr	r3, [pc, #604]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a2fa:	2180      	movs	r1, #128	@ 0x80
 800a2fc:	0549      	lsls	r1, r1, #21
 800a2fe:	430a      	orrs	r2, r1
 800a300:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 800a302:	183b      	adds	r3, r7, r0
 800a304:	2201      	movs	r2, #1
 800a306:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a308:	4b94      	ldr	r3, [pc, #592]	@ (800a55c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	2380      	movs	r3, #128	@ 0x80
 800a30e:	005b      	lsls	r3, r3, #1
 800a310:	4013      	ands	r3, r2
 800a312:	d11a      	bne.n	800a34a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a314:	4b91      	ldr	r3, [pc, #580]	@ (800a55c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a316:	681a      	ldr	r2, [r3, #0]
 800a318:	4b90      	ldr	r3, [pc, #576]	@ (800a55c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a31a:	2180      	movs	r1, #128	@ 0x80
 800a31c:	0049      	lsls	r1, r1, #1
 800a31e:	430a      	orrs	r2, r1
 800a320:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a322:	f7fc f99b 	bl	800665c <HAL_GetTick>
 800a326:	0003      	movs	r3, r0
 800a328:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a32a:	e008      	b.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a32c:	f7fc f996 	bl	800665c <HAL_GetTick>
 800a330:	0002      	movs	r2, r0
 800a332:	693b      	ldr	r3, [r7, #16]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	2b64      	cmp	r3, #100	@ 0x64
 800a338:	d901      	bls.n	800a33e <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800a33a:	2303      	movs	r3, #3
 800a33c:	e107      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a33e:	4b87      	ldr	r3, [pc, #540]	@ (800a55c <HAL_RCCEx_PeriphCLKConfig+0x290>)
 800a340:	681a      	ldr	r2, [r3, #0]
 800a342:	2380      	movs	r3, #128	@ 0x80
 800a344:	005b      	lsls	r3, r3, #1
 800a346:	4013      	ands	r3, r2
 800a348:	d0f0      	beq.n	800a32c <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800a34a:	4b83      	ldr	r3, [pc, #524]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a34c:	681a      	ldr	r2, [r3, #0]
 800a34e:	23c0      	movs	r3, #192	@ 0xc0
 800a350:	039b      	lsls	r3, r3, #14
 800a352:	4013      	ands	r3, r2
 800a354:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	685a      	ldr	r2, [r3, #4]
 800a35a:	23c0      	movs	r3, #192	@ 0xc0
 800a35c:	039b      	lsls	r3, r3, #14
 800a35e:	4013      	ands	r3, r2
 800a360:	68fa      	ldr	r2, [r7, #12]
 800a362:	429a      	cmp	r2, r3
 800a364:	d013      	beq.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 800a366:	687b      	ldr	r3, [r7, #4]
 800a368:	685a      	ldr	r2, [r3, #4]
 800a36a:	23c0      	movs	r3, #192	@ 0xc0
 800a36c:	029b      	lsls	r3, r3, #10
 800a36e:	401a      	ands	r2, r3
 800a370:	23c0      	movs	r3, #192	@ 0xc0
 800a372:	029b      	lsls	r3, r3, #10
 800a374:	429a      	cmp	r2, r3
 800a376:	d10a      	bne.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800a378:	4b77      	ldr	r3, [pc, #476]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a37a:	681a      	ldr	r2, [r3, #0]
 800a37c:	2380      	movs	r3, #128	@ 0x80
 800a37e:	029b      	lsls	r3, r3, #10
 800a380:	401a      	ands	r2, r3
 800a382:	2380      	movs	r3, #128	@ 0x80
 800a384:	029b      	lsls	r3, r3, #10
 800a386:	429a      	cmp	r2, r3
 800a388:	d101      	bne.n	800a38e <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 800a38a:	2301      	movs	r3, #1
 800a38c:	e0df      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 800a38e:	4b72      	ldr	r3, [pc, #456]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a390:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a392:	23c0      	movs	r3, #192	@ 0xc0
 800a394:	029b      	lsls	r3, r3, #10
 800a396:	4013      	ands	r3, r2
 800a398:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 800a39a:	68fb      	ldr	r3, [r7, #12]
 800a39c:	2b00      	cmp	r3, #0
 800a39e:	d03b      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	685a      	ldr	r2, [r3, #4]
 800a3a4:	23c0      	movs	r3, #192	@ 0xc0
 800a3a6:	029b      	lsls	r3, r3, #10
 800a3a8:	4013      	ands	r3, r2
 800a3aa:	68fa      	ldr	r2, [r7, #12]
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	d033      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2220      	movs	r2, #32
 800a3b6:	4013      	ands	r3, r2
 800a3b8:	d02e      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800a3ba:	4b67      	ldr	r3, [pc, #412]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a3bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800a3be:	4a68      	ldr	r2, [pc, #416]	@ (800a560 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800a3c0:	4013      	ands	r3, r2
 800a3c2:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800a3c4:	4b64      	ldr	r3, [pc, #400]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a3c6:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3c8:	4b63      	ldr	r3, [pc, #396]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a3ca:	2180      	movs	r1, #128	@ 0x80
 800a3cc:	0309      	lsls	r1, r1, #12
 800a3ce:	430a      	orrs	r2, r1
 800a3d0:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 800a3d2:	4b61      	ldr	r3, [pc, #388]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a3d4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a3d6:	4b60      	ldr	r3, [pc, #384]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a3d8:	4962      	ldr	r1, [pc, #392]	@ (800a564 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 800a3da:	400a      	ands	r2, r1
 800a3dc:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 800a3de:	4b5e      	ldr	r3, [pc, #376]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 800a3e4:	68fa      	ldr	r2, [r7, #12]
 800a3e6:	2380      	movs	r3, #128	@ 0x80
 800a3e8:	005b      	lsls	r3, r3, #1
 800a3ea:	4013      	ands	r3, r2
 800a3ec:	d014      	beq.n	800a418 <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a3ee:	f7fc f935 	bl	800665c <HAL_GetTick>
 800a3f2:	0003      	movs	r3, r0
 800a3f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a3f6:	e009      	b.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a3f8:	f7fc f930 	bl	800665c <HAL_GetTick>
 800a3fc:	0002      	movs	r2, r0
 800a3fe:	693b      	ldr	r3, [r7, #16]
 800a400:	1ad3      	subs	r3, r2, r3
 800a402:	4a59      	ldr	r2, [pc, #356]	@ (800a568 <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 800a404:	4293      	cmp	r3, r2
 800a406:	d901      	bls.n	800a40c <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800a408:	2303      	movs	r3, #3
 800a40a:	e0a0      	b.n	800a54e <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a40c:	4b52      	ldr	r3, [pc, #328]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a40e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800a410:	2380      	movs	r3, #128	@ 0x80
 800a412:	009b      	lsls	r3, r3, #2
 800a414:	4013      	ands	r3, r2
 800a416:	d0ef      	beq.n	800a3f8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	2220      	movs	r2, #32
 800a41e:	4013      	ands	r3, r2
 800a420:	d01f      	beq.n	800a462 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	685a      	ldr	r2, [r3, #4]
 800a426:	23c0      	movs	r3, #192	@ 0xc0
 800a428:	029b      	lsls	r3, r3, #10
 800a42a:	401a      	ands	r2, r3
 800a42c:	23c0      	movs	r3, #192	@ 0xc0
 800a42e:	029b      	lsls	r3, r3, #10
 800a430:	429a      	cmp	r2, r3
 800a432:	d10c      	bne.n	800a44e <HAL_RCCEx_PeriphCLKConfig+0x182>
 800a434:	4b48      	ldr	r3, [pc, #288]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a436:	681b      	ldr	r3, [r3, #0]
 800a438:	4a4c      	ldr	r2, [pc, #304]	@ (800a56c <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 800a43a:	4013      	ands	r3, r2
 800a43c:	0019      	movs	r1, r3
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	685a      	ldr	r2, [r3, #4]
 800a442:	23c0      	movs	r3, #192	@ 0xc0
 800a444:	039b      	lsls	r3, r3, #14
 800a446:	401a      	ands	r2, r3
 800a448:	4b43      	ldr	r3, [pc, #268]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a44a:	430a      	orrs	r2, r1
 800a44c:	601a      	str	r2, [r3, #0]
 800a44e:	4b42      	ldr	r3, [pc, #264]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a450:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	685a      	ldr	r2, [r3, #4]
 800a456:	23c0      	movs	r3, #192	@ 0xc0
 800a458:	029b      	lsls	r3, r3, #10
 800a45a:	401a      	ands	r2, r3
 800a45c:	4b3e      	ldr	r3, [pc, #248]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a45e:	430a      	orrs	r2, r1
 800a460:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800a462:	2317      	movs	r3, #23
 800a464:	18fb      	adds	r3, r7, r3
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	2b01      	cmp	r3, #1
 800a46a:	d105      	bne.n	800a478 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a46c:	4b3a      	ldr	r3, [pc, #232]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a46e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a470:	4b39      	ldr	r3, [pc, #228]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a472:	493f      	ldr	r1, [pc, #252]	@ (800a570 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 800a474:	400a      	ands	r2, r1
 800a476:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	2201      	movs	r2, #1
 800a47e:	4013      	ands	r3, r2
 800a480:	d009      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a482:	4b35      	ldr	r3, [pc, #212]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a484:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a486:	2203      	movs	r2, #3
 800a488:	4393      	bics	r3, r2
 800a48a:	0019      	movs	r1, r3
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	689a      	ldr	r2, [r3, #8]
 800a490:	4b31      	ldr	r3, [pc, #196]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a492:	430a      	orrs	r2, r1
 800a494:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	2202      	movs	r2, #2
 800a49c:	4013      	ands	r3, r2
 800a49e:	d009      	beq.n	800a4b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a4a0:	4b2d      	ldr	r3, [pc, #180]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a4a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4a4:	220c      	movs	r2, #12
 800a4a6:	4393      	bics	r3, r2
 800a4a8:	0019      	movs	r1, r3
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	68da      	ldr	r2, [r3, #12]
 800a4ae:	4b2a      	ldr	r3, [pc, #168]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a4b0:	430a      	orrs	r2, r1
 800a4b2:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2204      	movs	r2, #4
 800a4ba:	4013      	ands	r3, r2
 800a4bc:	d009      	beq.n	800a4d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a4be:	4b26      	ldr	r3, [pc, #152]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a4c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4c2:	4a2c      	ldr	r2, [pc, #176]	@ (800a574 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 800a4c4:	4013      	ands	r3, r2
 800a4c6:	0019      	movs	r1, r3
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	691a      	ldr	r2, [r3, #16]
 800a4cc:	4b22      	ldr	r3, [pc, #136]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a4ce:	430a      	orrs	r2, r1
 800a4d0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2208      	movs	r2, #8
 800a4d8:	4013      	ands	r3, r2
 800a4da:	d009      	beq.n	800a4f0 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a4dc:	4b1e      	ldr	r3, [pc, #120]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a4de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a4e0:	4a25      	ldr	r2, [pc, #148]	@ (800a578 <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	0019      	movs	r1, r3
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	695a      	ldr	r2, [r3, #20]
 800a4ea:	4b1b      	ldr	r3, [pc, #108]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a4ec:	430a      	orrs	r2, r1
 800a4ee:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681a      	ldr	r2, [r3, #0]
 800a4f4:	2380      	movs	r3, #128	@ 0x80
 800a4f6:	005b      	lsls	r3, r3, #1
 800a4f8:	4013      	ands	r3, r2
 800a4fa:	d009      	beq.n	800a510 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a4fc:	4b16      	ldr	r3, [pc, #88]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a4fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a500:	4a17      	ldr	r2, [pc, #92]	@ (800a560 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 800a502:	4013      	ands	r3, r2
 800a504:	0019      	movs	r1, r3
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	699a      	ldr	r2, [r3, #24]
 800a50a:	4b13      	ldr	r3, [pc, #76]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a50c:	430a      	orrs	r2, r1
 800a50e:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	2240      	movs	r2, #64	@ 0x40
 800a516:	4013      	ands	r3, r2
 800a518:	d009      	beq.n	800a52e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a51a:	4b0f      	ldr	r3, [pc, #60]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a51c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a51e:	4a17      	ldr	r2, [pc, #92]	@ (800a57c <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 800a520:	4013      	ands	r3, r2
 800a522:	0019      	movs	r1, r3
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6a1a      	ldr	r2, [r3, #32]
 800a528:	4b0b      	ldr	r3, [pc, #44]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a52a:	430a      	orrs	r2, r1
 800a52c:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	2280      	movs	r2, #128	@ 0x80
 800a534:	4013      	ands	r3, r2
 800a536:	d009      	beq.n	800a54c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800a538:	4b07      	ldr	r3, [pc, #28]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a53a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800a53c:	4a10      	ldr	r2, [pc, #64]	@ (800a580 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 800a53e:	4013      	ands	r3, r2
 800a540:	0019      	movs	r1, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	69da      	ldr	r2, [r3, #28]
 800a546:	4b04      	ldr	r3, [pc, #16]	@ (800a558 <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 800a548:	430a      	orrs	r2, r1
 800a54a:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 800a54c:	2300      	movs	r3, #0
}
 800a54e:	0018      	movs	r0, r3
 800a550:	46bd      	mov	sp, r7
 800a552:	b006      	add	sp, #24
 800a554:	bd80      	pop	{r7, pc}
 800a556:	46c0      	nop			@ (mov r8, r8)
 800a558:	40021000 	.word	0x40021000
 800a55c:	40007000 	.word	0x40007000
 800a560:	fffcffff 	.word	0xfffcffff
 800a564:	fff7ffff 	.word	0xfff7ffff
 800a568:	00001388 	.word	0x00001388
 800a56c:	ffcfffff 	.word	0xffcfffff
 800a570:	efffffff 	.word	0xefffffff
 800a574:	fffff3ff 	.word	0xfffff3ff
 800a578:	ffffcfff 	.word	0xffffcfff
 800a57c:	fbffffff 	.word	0xfbffffff
 800a580:	fff3ffff 	.word	0xfff3ffff

0800a584 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a584:	b5b0      	push	{r4, r5, r7, lr}
 800a586:	b084      	sub	sp, #16
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a58c:	230f      	movs	r3, #15
 800a58e:	18fb      	adds	r3, r7, r3
 800a590:	2201      	movs	r2, #1
 800a592:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	2b00      	cmp	r3, #0
 800a598:	d101      	bne.n	800a59e <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 800a59a:	2301      	movs	r3, #1
 800a59c:	e088      	b.n	800a6b0 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	2221      	movs	r2, #33	@ 0x21
 800a5a2:	5c9b      	ldrb	r3, [r3, r2]
 800a5a4:	b2db      	uxtb	r3, r3
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d107      	bne.n	800a5ba <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2220      	movs	r2, #32
 800a5ae:	2100      	movs	r1, #0
 800a5b0:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	0018      	movs	r0, r3
 800a5b6:	f7f9 ff41 	bl	800443c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2221      	movs	r2, #33	@ 0x21
 800a5be:	2102      	movs	r1, #2
 800a5c0:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	68db      	ldr	r3, [r3, #12]
 800a5c8:	2210      	movs	r2, #16
 800a5ca:	4013      	ands	r3, r2
 800a5cc:	2b10      	cmp	r3, #16
 800a5ce:	d05f      	beq.n	800a690 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	22ca      	movs	r2, #202	@ 0xca
 800a5d6:	625a      	str	r2, [r3, #36]	@ 0x24
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	2253      	movs	r2, #83	@ 0x53
 800a5de:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800a5e0:	250f      	movs	r5, #15
 800a5e2:	197c      	adds	r4, r7, r5
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f000 f890 	bl	800a70c <RTC_EnterInitMode>
 800a5ec:	0003      	movs	r3, r0
 800a5ee:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 800a5f0:	0028      	movs	r0, r5
 800a5f2:	183b      	adds	r3, r7, r0
 800a5f4:	781b      	ldrb	r3, [r3, #0]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d12c      	bne.n	800a654 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	689a      	ldr	r2, [r3, #8]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	492c      	ldr	r1, [pc, #176]	@ (800a6b8 <HAL_RTC_Init+0x134>)
 800a606:	400a      	ands	r2, r1
 800a608:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	6899      	ldr	r1, [r3, #8]
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	685a      	ldr	r2, [r3, #4]
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	691b      	ldr	r3, [r3, #16]
 800a618:	431a      	orrs	r2, r3
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	699b      	ldr	r3, [r3, #24]
 800a61e:	431a      	orrs	r2, r3
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	430a      	orrs	r2, r1
 800a626:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	68d2      	ldr	r2, [r2, #12]
 800a630:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	6919      	ldr	r1, [r3, #16]
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	041a      	lsls	r2, r3, #16
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	430a      	orrs	r2, r1
 800a644:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800a646:	183c      	adds	r4, r7, r0
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	0018      	movs	r0, r3
 800a64c:	f000 f8a2 	bl	800a794 <RTC_ExitInitMode>
 800a650:	0003      	movs	r3, r0
 800a652:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 800a654:	230f      	movs	r3, #15
 800a656:	18fb      	adds	r3, r7, r3
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d113      	bne.n	800a686 <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	2103      	movs	r1, #3
 800a66a:	438a      	bics	r2, r1
 800a66c:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	69da      	ldr	r2, [r3, #28]
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	695b      	ldr	r3, [r3, #20]
 800a67c:	431a      	orrs	r2, r3
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	430a      	orrs	r2, r1
 800a684:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	22ff      	movs	r2, #255	@ 0xff
 800a68c:	625a      	str	r2, [r3, #36]	@ 0x24
 800a68e:	e003      	b.n	800a698 <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800a690:	230f      	movs	r3, #15
 800a692:	18fb      	adds	r3, r7, r3
 800a694:	2200      	movs	r2, #0
 800a696:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 800a698:	230f      	movs	r3, #15
 800a69a:	18fb      	adds	r3, r7, r3
 800a69c:	781b      	ldrb	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d103      	bne.n	800a6aa <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	2221      	movs	r2, #33	@ 0x21
 800a6a6:	2101      	movs	r1, #1
 800a6a8:	5499      	strb	r1, [r3, r2]
  }

  return status;
 800a6aa:	230f      	movs	r3, #15
 800a6ac:	18fb      	adds	r3, r7, r3
 800a6ae:	781b      	ldrb	r3, [r3, #0]
}
 800a6b0:	0018      	movs	r0, r3
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	b004      	add	sp, #16
 800a6b6:	bdb0      	pop	{r4, r5, r7, pc}
 800a6b8:	ff8fffbf 	.word	0xff8fffbf

0800a6bc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	4a0e      	ldr	r2, [pc, #56]	@ (800a708 <HAL_RTC_WaitForSynchro+0x4c>)
 800a6ce:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800a6d0:	f7fb ffc4 	bl	800665c <HAL_GetTick>
 800a6d4:	0003      	movs	r3, r0
 800a6d6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6d8:	e00a      	b.n	800a6f0 <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a6da:	f7fb ffbf 	bl	800665c <HAL_GetTick>
 800a6de:	0002      	movs	r2, r0
 800a6e0:	68fb      	ldr	r3, [r7, #12]
 800a6e2:	1ad2      	subs	r2, r2, r3
 800a6e4:	23fa      	movs	r3, #250	@ 0xfa
 800a6e6:	009b      	lsls	r3, r3, #2
 800a6e8:	429a      	cmp	r2, r3
 800a6ea:	d901      	bls.n	800a6f0 <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 800a6ec:	2303      	movs	r3, #3
 800a6ee:	e006      	b.n	800a6fe <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	681b      	ldr	r3, [r3, #0]
 800a6f4:	68db      	ldr	r3, [r3, #12]
 800a6f6:	2220      	movs	r2, #32
 800a6f8:	4013      	ands	r3, r2
 800a6fa:	d0ee      	beq.n	800a6da <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 800a6fc:	2300      	movs	r3, #0
}
 800a6fe:	0018      	movs	r0, r3
 800a700:	46bd      	mov	sp, r7
 800a702:	b004      	add	sp, #16
 800a704:	bd80      	pop	{r7, pc}
 800a706:	46c0      	nop			@ (mov r8, r8)
 800a708:	0001ff5f 	.word	0x0001ff5f

0800a70c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b084      	sub	sp, #16
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800a714:	2300      	movs	r3, #0
 800a716:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 800a718:	230f      	movs	r3, #15
 800a71a:	18fb      	adds	r3, r7, r3
 800a71c:	2200      	movs	r2, #0
 800a71e:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	68db      	ldr	r3, [r3, #12]
 800a726:	2240      	movs	r2, #64	@ 0x40
 800a728:	4013      	ands	r3, r2
 800a72a:	d12c      	bne.n	800a786 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	68da      	ldr	r2, [r3, #12]
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	2180      	movs	r1, #128	@ 0x80
 800a738:	430a      	orrs	r2, r1
 800a73a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a73c:	f7fb ff8e 	bl	800665c <HAL_GetTick>
 800a740:	0003      	movs	r3, r0
 800a742:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a744:	e014      	b.n	800a770 <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a746:	f7fb ff89 	bl	800665c <HAL_GetTick>
 800a74a:	0002      	movs	r2, r0
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	1ad2      	subs	r2, r2, r3
 800a750:	200f      	movs	r0, #15
 800a752:	183b      	adds	r3, r7, r0
 800a754:	1839      	adds	r1, r7, r0
 800a756:	7809      	ldrb	r1, [r1, #0]
 800a758:	7019      	strb	r1, [r3, #0]
 800a75a:	23fa      	movs	r3, #250	@ 0xfa
 800a75c:	009b      	lsls	r3, r3, #2
 800a75e:	429a      	cmp	r2, r3
 800a760:	d906      	bls.n	800a770 <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2221      	movs	r2, #33	@ 0x21
 800a766:	2104      	movs	r1, #4
 800a768:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 800a76a:	183b      	adds	r3, r7, r0
 800a76c:	2201      	movs	r2, #1
 800a76e:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	68db      	ldr	r3, [r3, #12]
 800a776:	2240      	movs	r2, #64	@ 0x40
 800a778:	4013      	ands	r3, r2
 800a77a:	d104      	bne.n	800a786 <RTC_EnterInitMode+0x7a>
 800a77c:	230f      	movs	r3, #15
 800a77e:	18fb      	adds	r3, r7, r3
 800a780:	781b      	ldrb	r3, [r3, #0]
 800a782:	2b01      	cmp	r3, #1
 800a784:	d1df      	bne.n	800a746 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 800a786:	230f      	movs	r3, #15
 800a788:	18fb      	adds	r3, r7, r3
 800a78a:	781b      	ldrb	r3, [r3, #0]
}
 800a78c:	0018      	movs	r0, r3
 800a78e:	46bd      	mov	sp, r7
 800a790:	b004      	add	sp, #16
 800a792:	bd80      	pop	{r7, pc}

0800a794 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a794:	b590      	push	{r4, r7, lr}
 800a796:	b085      	sub	sp, #20
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a79c:	240f      	movs	r4, #15
 800a79e:	193b      	adds	r3, r7, r4
 800a7a0:	2200      	movs	r2, #0
 800a7a2:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	2180      	movs	r1, #128	@ 0x80
 800a7b0:	438a      	bics	r2, r1
 800a7b2:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	681b      	ldr	r3, [r3, #0]
 800a7b8:	689b      	ldr	r3, [r3, #8]
 800a7ba:	2220      	movs	r2, #32
 800a7bc:	4013      	ands	r3, r2
 800a7be:	d10c      	bne.n	800a7da <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a7c0:	687b      	ldr	r3, [r7, #4]
 800a7c2:	0018      	movs	r0, r3
 800a7c4:	f7ff ff7a 	bl	800a6bc <HAL_RTC_WaitForSynchro>
 800a7c8:	1e03      	subs	r3, r0, #0
 800a7ca:	d006      	beq.n	800a7da <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	2221      	movs	r2, #33	@ 0x21
 800a7d0:	2104      	movs	r1, #4
 800a7d2:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 800a7d4:	193b      	adds	r3, r7, r4
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800a7da:	230f      	movs	r3, #15
 800a7dc:	18fb      	adds	r3, r7, r3
 800a7de:	781b      	ldrb	r3, [r3, #0]
}
 800a7e0:	0018      	movs	r0, r3
 800a7e2:	46bd      	mov	sp, r7
 800a7e4:	b005      	add	sp, #20
 800a7e6:	bd90      	pop	{r4, r7, pc}

0800a7e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b082      	sub	sp, #8
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	d101      	bne.n	800a7fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a7f6:	2301      	movs	r3, #1
 800a7f8:	e053      	b.n	800a8a2 <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d116      	bne.n	800a830 <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	2278      	movs	r2, #120	@ 0x78
 800a806:	2100      	movs	r1, #0
 800a808:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	0018      	movs	r0, r3
 800a80e:	f000 fd97 	bl	800b340 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	22b0      	movs	r2, #176	@ 0xb0
 800a816:	589b      	ldr	r3, [r3, r2]
 800a818:	2b00      	cmp	r3, #0
 800a81a:	d103      	bne.n	800a824 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	21b0      	movs	r1, #176	@ 0xb0
 800a820:	4a22      	ldr	r2, [pc, #136]	@ (800a8ac <HAL_UART_Init+0xc4>)
 800a822:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	22b0      	movs	r2, #176	@ 0xb0
 800a828:	589b      	ldr	r3, [r3, r2]
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	0010      	movs	r0, r2
 800a82e:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	2224      	movs	r2, #36	@ 0x24
 800a834:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2101      	movs	r1, #1
 800a842:	438a      	bics	r2, r1
 800a844:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	0018      	movs	r0, r3
 800a84a:	f000 fdbd 	bl	800b3c8 <UART_SetConfig>
 800a84e:	0003      	movs	r3, r0
 800a850:	2b01      	cmp	r3, #1
 800a852:	d101      	bne.n	800a858 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 800a854:	2301      	movs	r3, #1
 800a856:	e024      	b.n	800a8a2 <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a85c:	2b00      	cmp	r3, #0
 800a85e:	d003      	beq.n	800a868 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	0018      	movs	r0, r3
 800a864:	f001 f84e 	bl	800b904 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	685a      	ldr	r2, [r3, #4]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	681b      	ldr	r3, [r3, #0]
 800a872:	490f      	ldr	r1, [pc, #60]	@ (800a8b0 <HAL_UART_Init+0xc8>)
 800a874:	400a      	ands	r2, r1
 800a876:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	689a      	ldr	r2, [r3, #8]
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	212a      	movs	r1, #42	@ 0x2a
 800a884:	438a      	bics	r2, r1
 800a886:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681a      	ldr	r2, [r3, #0]
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	2101      	movs	r1, #1
 800a894:	430a      	orrs	r2, r1
 800a896:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	0018      	movs	r0, r3
 800a89c:	f001 f8e6 	bl	800ba6c <UART_CheckIdleState>
 800a8a0:	0003      	movs	r3, r0
}
 800a8a2:	0018      	movs	r0, r3
 800a8a4:	46bd      	mov	sp, r7
 800a8a6:	b002      	add	sp, #8
 800a8a8:	bd80      	pop	{r7, pc}
 800a8aa:	46c0      	nop			@ (mov r8, r8)
 800a8ac:	08005b79 	.word	0x08005b79
 800a8b0:	ffffb7ff 	.word	0xffffb7ff

0800a8b4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a8b4:	b580      	push	{r7, lr}
 800a8b6:	b08a      	sub	sp, #40	@ 0x28
 800a8b8:	af02      	add	r7, sp, #8
 800a8ba:	60f8      	str	r0, [r7, #12]
 800a8bc:	60b9      	str	r1, [r7, #8]
 800a8be:	603b      	str	r3, [r7, #0]
 800a8c0:	1dbb      	adds	r3, r7, #6
 800a8c2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800a8c8:	2b20      	cmp	r3, #32
 800a8ca:	d000      	beq.n	800a8ce <HAL_UART_Transmit+0x1a>
 800a8cc:	e08c      	b.n	800a9e8 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8ce:	68bb      	ldr	r3, [r7, #8]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d003      	beq.n	800a8dc <HAL_UART_Transmit+0x28>
 800a8d4:	1dbb      	adds	r3, r7, #6
 800a8d6:	881b      	ldrh	r3, [r3, #0]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d101      	bne.n	800a8e0 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a8dc:	2301      	movs	r3, #1
 800a8de:	e084      	b.n	800a9ea <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	689a      	ldr	r2, [r3, #8]
 800a8e4:	2380      	movs	r3, #128	@ 0x80
 800a8e6:	015b      	lsls	r3, r3, #5
 800a8e8:	429a      	cmp	r2, r3
 800a8ea:	d109      	bne.n	800a900 <HAL_UART_Transmit+0x4c>
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	691b      	ldr	r3, [r3, #16]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d105      	bne.n	800a900 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800a8f4:	68bb      	ldr	r3, [r7, #8]
 800a8f6:	2201      	movs	r2, #1
 800a8f8:	4013      	ands	r3, r2
 800a8fa:	d001      	beq.n	800a900 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 800a8fc:	2301      	movs	r3, #1
 800a8fe:	e074      	b.n	800a9ea <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2284      	movs	r2, #132	@ 0x84
 800a904:	2100      	movs	r1, #0
 800a906:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	2221      	movs	r2, #33	@ 0x21
 800a90c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a90e:	f7fb fea5 	bl	800665c <HAL_GetTick>
 800a912:	0003      	movs	r3, r0
 800a914:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	1dba      	adds	r2, r7, #6
 800a91a:	2150      	movs	r1, #80	@ 0x50
 800a91c:	8812      	ldrh	r2, [r2, #0]
 800a91e:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	1dba      	adds	r2, r7, #6
 800a924:	2152      	movs	r1, #82	@ 0x52
 800a926:	8812      	ldrh	r2, [r2, #0]
 800a928:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	689a      	ldr	r2, [r3, #8]
 800a92e:	2380      	movs	r3, #128	@ 0x80
 800a930:	015b      	lsls	r3, r3, #5
 800a932:	429a      	cmp	r2, r3
 800a934:	d108      	bne.n	800a948 <HAL_UART_Transmit+0x94>
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d104      	bne.n	800a948 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 800a93e:	2300      	movs	r3, #0
 800a940:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	61bb      	str	r3, [r7, #24]
 800a946:	e003      	b.n	800a950 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 800a948:	68bb      	ldr	r3, [r7, #8]
 800a94a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a94c:	2300      	movs	r3, #0
 800a94e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a950:	e02f      	b.n	800a9b2 <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	68f8      	ldr	r0, [r7, #12]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	9300      	str	r3, [sp, #0]
 800a95a:	0013      	movs	r3, r2
 800a95c:	2200      	movs	r2, #0
 800a95e:	2180      	movs	r1, #128	@ 0x80
 800a960:	f001 f92c 	bl	800bbbc <UART_WaitOnFlagUntilTimeout>
 800a964:	1e03      	subs	r3, r0, #0
 800a966:	d004      	beq.n	800a972 <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a968:	68fb      	ldr	r3, [r7, #12]
 800a96a:	2220      	movs	r2, #32
 800a96c:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 800a96e:	2303      	movs	r3, #3
 800a970:	e03b      	b.n	800a9ea <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 800a972:	69fb      	ldr	r3, [r7, #28]
 800a974:	2b00      	cmp	r3, #0
 800a976:	d10b      	bne.n	800a990 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a978:	69bb      	ldr	r3, [r7, #24]
 800a97a:	881b      	ldrh	r3, [r3, #0]
 800a97c:	001a      	movs	r2, r3
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	05d2      	lsls	r2, r2, #23
 800a984:	0dd2      	lsrs	r2, r2, #23
 800a986:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800a988:	69bb      	ldr	r3, [r7, #24]
 800a98a:	3302      	adds	r3, #2
 800a98c:	61bb      	str	r3, [r7, #24]
 800a98e:	e007      	b.n	800a9a0 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a990:	69fb      	ldr	r3, [r7, #28]
 800a992:	781a      	ldrb	r2, [r3, #0]
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	3301      	adds	r3, #1
 800a99e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	2252      	movs	r2, #82	@ 0x52
 800a9a4:	5a9b      	ldrh	r3, [r3, r2]
 800a9a6:	b29b      	uxth	r3, r3
 800a9a8:	3b01      	subs	r3, #1
 800a9aa:	b299      	uxth	r1, r3
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	2252      	movs	r2, #82	@ 0x52
 800a9b0:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	2252      	movs	r2, #82	@ 0x52
 800a9b6:	5a9b      	ldrh	r3, [r3, r2]
 800a9b8:	b29b      	uxth	r3, r3
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d1c9      	bne.n	800a952 <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a9be:	697a      	ldr	r2, [r7, #20]
 800a9c0:	68f8      	ldr	r0, [r7, #12]
 800a9c2:	683b      	ldr	r3, [r7, #0]
 800a9c4:	9300      	str	r3, [sp, #0]
 800a9c6:	0013      	movs	r3, r2
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	2140      	movs	r1, #64	@ 0x40
 800a9cc:	f001 f8f6 	bl	800bbbc <UART_WaitOnFlagUntilTimeout>
 800a9d0:	1e03      	subs	r3, r0, #0
 800a9d2:	d004      	beq.n	800a9de <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	2220      	movs	r2, #32
 800a9d8:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 800a9da:	2303      	movs	r3, #3
 800a9dc:	e005      	b.n	800a9ea <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2220      	movs	r2, #32
 800a9e2:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800a9e4:	2300      	movs	r3, #0
 800a9e6:	e000      	b.n	800a9ea <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 800a9e8:	2302      	movs	r3, #2
  }
}
 800a9ea:	0018      	movs	r0, r3
 800a9ec:	46bd      	mov	sp, r7
 800a9ee:	b008      	add	sp, #32
 800a9f0:	bd80      	pop	{r7, pc}
	...

0800a9f4 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800a9f4:	b580      	push	{r7, lr}
 800a9f6:	b088      	sub	sp, #32
 800a9f8:	af00      	add	r7, sp, #0
 800a9fa:	60f8      	str	r0, [r7, #12]
 800a9fc:	60b9      	str	r1, [r7, #8]
 800a9fe:	1dbb      	adds	r3, r7, #6
 800aa00:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800aa06:	2b20      	cmp	r3, #32
 800aa08:	d000      	beq.n	800aa0c <HAL_UART_Transmit_DMA+0x18>
 800aa0a:	e077      	b.n	800aafc <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d003      	beq.n	800aa1a <HAL_UART_Transmit_DMA+0x26>
 800aa12:	1dbb      	adds	r3, r7, #6
 800aa14:	881b      	ldrh	r3, [r3, #0]
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e06f      	b.n	800aafe <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	689a      	ldr	r2, [r3, #8]
 800aa22:	2380      	movs	r3, #128	@ 0x80
 800aa24:	015b      	lsls	r3, r3, #5
 800aa26:	429a      	cmp	r2, r3
 800aa28:	d109      	bne.n	800aa3e <HAL_UART_Transmit_DMA+0x4a>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	691b      	ldr	r3, [r3, #16]
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d105      	bne.n	800aa3e <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	2201      	movs	r2, #1
 800aa36:	4013      	ands	r3, r2
 800aa38:	d001      	beq.n	800aa3e <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 800aa3a:	2301      	movs	r3, #1
 800aa3c:	e05f      	b.n	800aafe <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	68ba      	ldr	r2, [r7, #8]
 800aa42:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	1dba      	adds	r2, r7, #6
 800aa48:	2150      	movs	r1, #80	@ 0x50
 800aa4a:	8812      	ldrh	r2, [r2, #0]
 800aa4c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	1dba      	adds	r2, r7, #6
 800aa52:	2152      	movs	r1, #82	@ 0x52
 800aa54:	8812      	ldrh	r2, [r2, #0]
 800aa56:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2284      	movs	r2, #132	@ 0x84
 800aa5c:	2100      	movs	r1, #0
 800aa5e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2221      	movs	r2, #33	@ 0x21
 800aa64:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa6a:	2b00      	cmp	r3, #0
 800aa6c:	d027      	beq.n	800aabe <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa72:	4a25      	ldr	r2, [pc, #148]	@ (800ab08 <HAL_UART_Transmit_DMA+0x114>)
 800aa74:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800aa76:	68fb      	ldr	r3, [r7, #12]
 800aa78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa7a:	4a24      	ldr	r2, [pc, #144]	@ (800ab0c <HAL_UART_Transmit_DMA+0x118>)
 800aa7c:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa82:	4a23      	ldr	r2, [pc, #140]	@ (800ab10 <HAL_UART_Transmit_DMA+0x11c>)
 800aa84:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800aa8e:	68fb      	ldr	r3, [r7, #12]
 800aa90:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800aa96:	0019      	movs	r1, r3
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	3328      	adds	r3, #40	@ 0x28
 800aa9e:	001a      	movs	r2, r3
 800aaa0:	1dbb      	adds	r3, r7, #6
 800aaa2:	881b      	ldrh	r3, [r3, #0]
 800aaa4:	f7fb ff5e 	bl	8006964 <HAL_DMA_Start_IT>
 800aaa8:	1e03      	subs	r3, r0, #0
 800aaaa:	d008      	beq.n	800aabe <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	2284      	movs	r2, #132	@ 0x84
 800aab0:	2110      	movs	r1, #16
 800aab2:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800aab4:	68fb      	ldr	r3, [r7, #12]
 800aab6:	2220      	movs	r2, #32
 800aab8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 800aaba:	2301      	movs	r3, #1
 800aabc:	e01f      	b.n	800aafe <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800aabe:	68fb      	ldr	r3, [r7, #12]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	2240      	movs	r2, #64	@ 0x40
 800aac4:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aac6:	f3ef 8310 	mrs	r3, PRIMASK
 800aaca:	613b      	str	r3, [r7, #16]
  return(result);
 800aacc:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800aace:	61fb      	str	r3, [r7, #28]
 800aad0:	2301      	movs	r3, #1
 800aad2:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	f383 8810 	msr	PRIMASK, r3
}
 800aada:	46c0      	nop			@ (mov r8, r8)
 800aadc:	68fb      	ldr	r3, [r7, #12]
 800aade:	681b      	ldr	r3, [r3, #0]
 800aae0:	689a      	ldr	r2, [r3, #8]
 800aae2:	68fb      	ldr	r3, [r7, #12]
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	2180      	movs	r1, #128	@ 0x80
 800aae8:	430a      	orrs	r2, r1
 800aaea:	609a      	str	r2, [r3, #8]
 800aaec:	69fb      	ldr	r3, [r7, #28]
 800aaee:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aaf0:	69bb      	ldr	r3, [r7, #24]
 800aaf2:	f383 8810 	msr	PRIMASK, r3
}
 800aaf6:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 800aaf8:	2300      	movs	r3, #0
 800aafa:	e000      	b.n	800aafe <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 800aafc:	2302      	movs	r3, #2
  }
}
 800aafe:	0018      	movs	r0, r3
 800ab00:	46bd      	mov	sp, r7
 800ab02:	b008      	add	sp, #32
 800ab04:	bd80      	pop	{r7, pc}
 800ab06:	46c0      	nop			@ (mov r8, r8)
 800ab08:	0800bee1 	.word	0x0800bee1
 800ab0c:	0800bf7d 	.word	0x0800bf7d
 800ab10:	0800c11d 	.word	0x0800c11d

0800ab14 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ab14:	b580      	push	{r7, lr}
 800ab16:	b088      	sub	sp, #32
 800ab18:	af00      	add	r7, sp, #0
 800ab1a:	60f8      	str	r0, [r7, #12]
 800ab1c:	60b9      	str	r1, [r7, #8]
 800ab1e:	1dbb      	adds	r3, r7, #6
 800ab20:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ab22:	68fb      	ldr	r3, [r7, #12]
 800ab24:	2280      	movs	r2, #128	@ 0x80
 800ab26:	589b      	ldr	r3, [r3, r2]
 800ab28:	2b20      	cmp	r3, #32
 800ab2a:	d14a      	bne.n	800abc2 <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <HAL_UART_Receive_DMA+0x26>
 800ab32:	1dbb      	adds	r3, r7, #6
 800ab34:	881b      	ldrh	r3, [r3, #0]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d101      	bne.n	800ab3e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ab3a:	2301      	movs	r3, #1
 800ab3c:	e042      	b.n	800abc4 <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab3e:	68fb      	ldr	r3, [r7, #12]
 800ab40:	689a      	ldr	r2, [r3, #8]
 800ab42:	2380      	movs	r3, #128	@ 0x80
 800ab44:	015b      	lsls	r3, r3, #5
 800ab46:	429a      	cmp	r2, r3
 800ab48:	d109      	bne.n	800ab5e <HAL_UART_Receive_DMA+0x4a>
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	691b      	ldr	r3, [r3, #16]
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d105      	bne.n	800ab5e <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800ab52:	68bb      	ldr	r3, [r7, #8]
 800ab54:	2201      	movs	r2, #1
 800ab56:	4013      	ands	r3, r2
 800ab58:	d001      	beq.n	800ab5e <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 800ab5a:	2301      	movs	r3, #1
 800ab5c:	e032      	b.n	800abc4 <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	2200      	movs	r2, #0
 800ab62:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	4a18      	ldr	r2, [pc, #96]	@ (800abcc <HAL_UART_Receive_DMA+0xb8>)
 800ab6a:	4293      	cmp	r3, r2
 800ab6c:	d020      	beq.n	800abb0 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	2380      	movs	r3, #128	@ 0x80
 800ab76:	041b      	lsls	r3, r3, #16
 800ab78:	4013      	ands	r3, r2
 800ab7a:	d019      	beq.n	800abb0 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ab7c:	f3ef 8310 	mrs	r3, PRIMASK
 800ab80:	613b      	str	r3, [r7, #16]
  return(result);
 800ab82:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800ab84:	61fb      	str	r3, [r7, #28]
 800ab86:	2301      	movs	r3, #1
 800ab88:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	f383 8810 	msr	PRIMASK, r3
}
 800ab90:	46c0      	nop			@ (mov r8, r8)
 800ab92:	68fb      	ldr	r3, [r7, #12]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	681a      	ldr	r2, [r3, #0]
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	2180      	movs	r1, #128	@ 0x80
 800ab9e:	04c9      	lsls	r1, r1, #19
 800aba0:	430a      	orrs	r2, r1
 800aba2:	601a      	str	r2, [r3, #0]
 800aba4:	69fb      	ldr	r3, [r7, #28]
 800aba6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aba8:	69bb      	ldr	r3, [r7, #24]
 800abaa:	f383 8810 	msr	PRIMASK, r3
}
 800abae:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800abb0:	1dbb      	adds	r3, r7, #6
 800abb2:	881a      	ldrh	r2, [r3, #0]
 800abb4:	68b9      	ldr	r1, [r7, #8]
 800abb6:	68fb      	ldr	r3, [r7, #12]
 800abb8:	0018      	movs	r0, r3
 800abba:	f001 f869 	bl	800bc90 <UART_Start_Receive_DMA>
 800abbe:	0003      	movs	r3, r0
 800abc0:	e000      	b.n	800abc4 <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 800abc2:	2302      	movs	r3, #2
  }
}
 800abc4:	0018      	movs	r0, r3
 800abc6:	46bd      	mov	sp, r7
 800abc8:	b008      	add	sp, #32
 800abca:	bd80      	pop	{r7, pc}
 800abcc:	40004800 	.word	0x40004800

0800abd0 <HAL_UART_DMAStop>:
  * @brief Stop the DMA Transfer.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DMAStop(UART_HandleTypeDef *huart)
{
 800abd0:	b580      	push	{r7, lr}
 800abd2:	b08c      	sub	sp, #48	@ 0x30
 800abd4:	af00      	add	r7, sp, #0
 800abd6:	6078      	str	r0, [r7, #4]
     HAL_UART_TxHalfCpltCallback / HAL_UART_RxHalfCpltCallback:
     indeed, when HAL_DMA_Abort() API is called, the DMA TX/RX Transfer or Half Transfer complete
     interrupt is generated if the DMA transfer interruption occurs at the middle or at the end of
     the stream and the corresponding call back is executed. */

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800abdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2280      	movs	r2, #128	@ 0x80
 800abe2:	589b      	ldr	r3, [r3, r2]
 800abe4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	689b      	ldr	r3, [r3, #8]
 800abec:	2280      	movs	r2, #128	@ 0x80
 800abee:	4013      	ands	r3, r2
 800abf0:	2b80      	cmp	r3, #128	@ 0x80
 800abf2:	d138      	bne.n	800ac66 <HAL_UART_DMAStop+0x96>
 800abf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800abf6:	2b21      	cmp	r3, #33	@ 0x21
 800abf8:	d135      	bne.n	800ac66 <HAL_UART_DMAStop+0x96>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800abfa:	f3ef 8310 	mrs	r3, PRIMASK
 800abfe:	617b      	str	r3, [r7, #20]
  return(result);
 800ac00:	697b      	ldr	r3, [r7, #20]
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800ac02:	627b      	str	r3, [r7, #36]	@ 0x24
 800ac04:	2301      	movs	r3, #1
 800ac06:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac08:	69bb      	ldr	r3, [r7, #24]
 800ac0a:	f383 8810 	msr	PRIMASK, r3
}
 800ac0e:	46c0      	nop			@ (mov r8, r8)
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	689a      	ldr	r2, [r3, #8]
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	681b      	ldr	r3, [r3, #0]
 800ac1a:	2180      	movs	r1, #128	@ 0x80
 800ac1c:	438a      	bics	r2, r1
 800ac1e:	609a      	str	r2, [r3, #8]
 800ac20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ac22:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac24:	69fb      	ldr	r3, [r7, #28]
 800ac26:	f383 8810 	msr	PRIMASK, r3
}
 800ac2a:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Tx channel */
    if (huart->hdmatx != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d014      	beq.n	800ac5e <HAL_UART_DMAStop+0x8e>
    {
      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac38:	0018      	movs	r0, r3
 800ac3a:	f7fb fef9 	bl	8006a30 <HAL_DMA_Abort>
 800ac3e:	1e03      	subs	r3, r0, #0
 800ac40:	d00d      	beq.n	800ac5e <HAL_UART_DMAStop+0x8e>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ac46:	0018      	movs	r0, r3
 800ac48:	f7fc f833 	bl	8006cb2 <HAL_DMA_GetError>
 800ac4c:	0003      	movs	r3, r0
 800ac4e:	2b20      	cmp	r3, #32
 800ac50:	d105      	bne.n	800ac5e <HAL_UART_DMAStop+0x8e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	2284      	movs	r2, #132	@ 0x84
 800ac56:	2110      	movs	r1, #16
 800ac58:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800ac5a:	2303      	movs	r3, #3
 800ac5c:	e044      	b.n	800ace8 <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndTxTransfer(huart);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	0018      	movs	r0, r3
 800ac62:	f001 f8b5 	bl	800bdd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	689b      	ldr	r3, [r3, #8]
 800ac6c:	2240      	movs	r2, #64	@ 0x40
 800ac6e:	4013      	ands	r3, r2
 800ac70:	2b40      	cmp	r3, #64	@ 0x40
 800ac72:	d138      	bne.n	800ace6 <HAL_UART_DMAStop+0x116>
 800ac74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ac76:	2b22      	cmp	r3, #34	@ 0x22
 800ac78:	d135      	bne.n	800ace6 <HAL_UART_DMAStop+0x116>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ac7a:	f3ef 8310 	mrs	r3, PRIMASK
 800ac7e:	60bb      	str	r3, [r7, #8]
  return(result);
 800ac80:	68bb      	ldr	r3, [r7, #8]
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac82:	623b      	str	r3, [r7, #32]
 800ac84:	2301      	movs	r3, #1
 800ac86:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ac88:	68fb      	ldr	r3, [r7, #12]
 800ac8a:	f383 8810 	msr	PRIMASK, r3
}
 800ac8e:	46c0      	nop			@ (mov r8, r8)
 800ac90:	687b      	ldr	r3, [r7, #4]
 800ac92:	681b      	ldr	r3, [r3, #0]
 800ac94:	689a      	ldr	r2, [r3, #8]
 800ac96:	687b      	ldr	r3, [r7, #4]
 800ac98:	681b      	ldr	r3, [r3, #0]
 800ac9a:	2140      	movs	r1, #64	@ 0x40
 800ac9c:	438a      	bics	r2, r1
 800ac9e:	609a      	str	r2, [r3, #8]
 800aca0:	6a3b      	ldr	r3, [r7, #32]
 800aca2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800aca4:	693b      	ldr	r3, [r7, #16]
 800aca6:	f383 8810 	msr	PRIMASK, r3
}
 800acaa:	46c0      	nop			@ (mov r8, r8)

    /* Abort the UART DMA Rx channel */
    if (huart->hdmarx != NULL)
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d014      	beq.n	800acde <HAL_UART_DMAStop+0x10e>
    {
      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acb8:	0018      	movs	r0, r3
 800acba:	f7fb feb9 	bl	8006a30 <HAL_DMA_Abort>
 800acbe:	1e03      	subs	r3, r0, #0
 800acc0:	d00d      	beq.n	800acde <HAL_UART_DMAStop+0x10e>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800acc6:	0018      	movs	r0, r3
 800acc8:	f7fb fff3 	bl	8006cb2 <HAL_DMA_GetError>
 800accc:	0003      	movs	r3, r0
 800acce:	2b20      	cmp	r3, #32
 800acd0:	d105      	bne.n	800acde <HAL_UART_DMAStop+0x10e>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	2284      	movs	r2, #132	@ 0x84
 800acd6:	2110      	movs	r1, #16
 800acd8:	5099      	str	r1, [r3, r2]

          return HAL_TIMEOUT;
 800acda:	2303      	movs	r3, #3
 800acdc:	e004      	b.n	800ace8 <HAL_UART_DMAStop+0x118>
        }
      }
    }

    UART_EndRxTransfer(huart);
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	0018      	movs	r0, r3
 800ace2:	f001 f899 	bl	800be18 <UART_EndRxTransfer>
  }

  return HAL_OK;
 800ace6:	2300      	movs	r3, #0
}
 800ace8:	0018      	movs	r0, r3
 800acea:	46bd      	mov	sp, r7
 800acec:	b00c      	add	sp, #48	@ 0x30
 800acee:	bd80      	pop	{r7, pc}

0800acf0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800acf0:	b590      	push	{r4, r7, lr}
 800acf2:	b0ab      	sub	sp, #172	@ 0xac
 800acf4:	af00      	add	r7, sp, #0
 800acf6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	69db      	ldr	r3, [r3, #28]
 800acfe:	22a4      	movs	r2, #164	@ 0xa4
 800ad00:	18b9      	adds	r1, r7, r2
 800ad02:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	681b      	ldr	r3, [r3, #0]
 800ad0a:	20a0      	movs	r0, #160	@ 0xa0
 800ad0c:	1839      	adds	r1, r7, r0
 800ad0e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ad10:	687b      	ldr	r3, [r7, #4]
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	689b      	ldr	r3, [r3, #8]
 800ad16:	219c      	movs	r1, #156	@ 0x9c
 800ad18:	1879      	adds	r1, r7, r1
 800ad1a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ad1c:	0011      	movs	r1, r2
 800ad1e:	18bb      	adds	r3, r7, r2
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	4a9c      	ldr	r2, [pc, #624]	@ (800af94 <HAL_UART_IRQHandler+0x2a4>)
 800ad24:	4013      	ands	r3, r2
 800ad26:	2298      	movs	r2, #152	@ 0x98
 800ad28:	18bc      	adds	r4, r7, r2
 800ad2a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800ad2c:	18bb      	adds	r3, r7, r2
 800ad2e:	681b      	ldr	r3, [r3, #0]
 800ad30:	2b00      	cmp	r3, #0
 800ad32:	d114      	bne.n	800ad5e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ad34:	187b      	adds	r3, r7, r1
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	2220      	movs	r2, #32
 800ad3a:	4013      	ands	r3, r2
 800ad3c:	d00f      	beq.n	800ad5e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ad3e:	183b      	adds	r3, r7, r0
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	2220      	movs	r2, #32
 800ad44:	4013      	ands	r3, r2
 800ad46:	d00a      	beq.n	800ad5e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d100      	bne.n	800ad52 <HAL_UART_IRQHandler+0x62>
 800ad50:	e2aa      	b.n	800b2a8 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	0010      	movs	r0, r2
 800ad5a:	4798      	blx	r3
      }
      return;
 800ad5c:	e2a4      	b.n	800b2a8 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ad5e:	2398      	movs	r3, #152	@ 0x98
 800ad60:	18fb      	adds	r3, r7, r3
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d100      	bne.n	800ad6a <HAL_UART_IRQHandler+0x7a>
 800ad68:	e11a      	b.n	800afa0 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ad6a:	239c      	movs	r3, #156	@ 0x9c
 800ad6c:	18fb      	adds	r3, r7, r3
 800ad6e:	681b      	ldr	r3, [r3, #0]
 800ad70:	2201      	movs	r2, #1
 800ad72:	4013      	ands	r3, r2
 800ad74:	d106      	bne.n	800ad84 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ad76:	23a0      	movs	r3, #160	@ 0xa0
 800ad78:	18fb      	adds	r3, r7, r3
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	4a86      	ldr	r2, [pc, #536]	@ (800af98 <HAL_UART_IRQHandler+0x2a8>)
 800ad7e:	4013      	ands	r3, r2
 800ad80:	d100      	bne.n	800ad84 <HAL_UART_IRQHandler+0x94>
 800ad82:	e10d      	b.n	800afa0 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ad84:	23a4      	movs	r3, #164	@ 0xa4
 800ad86:	18fb      	adds	r3, r7, r3
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	2201      	movs	r2, #1
 800ad8c:	4013      	ands	r3, r2
 800ad8e:	d012      	beq.n	800adb6 <HAL_UART_IRQHandler+0xc6>
 800ad90:	23a0      	movs	r3, #160	@ 0xa0
 800ad92:	18fb      	adds	r3, r7, r3
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	2380      	movs	r3, #128	@ 0x80
 800ad98:	005b      	lsls	r3, r3, #1
 800ad9a:	4013      	ands	r3, r2
 800ad9c:	d00b      	beq.n	800adb6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	2201      	movs	r2, #1
 800ada4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2284      	movs	r2, #132	@ 0x84
 800adaa:	589b      	ldr	r3, [r3, r2]
 800adac:	2201      	movs	r2, #1
 800adae:	431a      	orrs	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	2184      	movs	r1, #132	@ 0x84
 800adb4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800adb6:	23a4      	movs	r3, #164	@ 0xa4
 800adb8:	18fb      	adds	r3, r7, r3
 800adba:	681b      	ldr	r3, [r3, #0]
 800adbc:	2202      	movs	r2, #2
 800adbe:	4013      	ands	r3, r2
 800adc0:	d011      	beq.n	800ade6 <HAL_UART_IRQHandler+0xf6>
 800adc2:	239c      	movs	r3, #156	@ 0x9c
 800adc4:	18fb      	adds	r3, r7, r3
 800adc6:	681b      	ldr	r3, [r3, #0]
 800adc8:	2201      	movs	r2, #1
 800adca:	4013      	ands	r3, r2
 800adcc:	d00b      	beq.n	800ade6 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	2202      	movs	r2, #2
 800add4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	2284      	movs	r2, #132	@ 0x84
 800adda:	589b      	ldr	r3, [r3, r2]
 800addc:	2204      	movs	r2, #4
 800adde:	431a      	orrs	r2, r3
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	2184      	movs	r1, #132	@ 0x84
 800ade4:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ade6:	23a4      	movs	r3, #164	@ 0xa4
 800ade8:	18fb      	adds	r3, r7, r3
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	2204      	movs	r2, #4
 800adee:	4013      	ands	r3, r2
 800adf0:	d011      	beq.n	800ae16 <HAL_UART_IRQHandler+0x126>
 800adf2:	239c      	movs	r3, #156	@ 0x9c
 800adf4:	18fb      	adds	r3, r7, r3
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	2201      	movs	r2, #1
 800adfa:	4013      	ands	r3, r2
 800adfc:	d00b      	beq.n	800ae16 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	681b      	ldr	r3, [r3, #0]
 800ae02:	2204      	movs	r2, #4
 800ae04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	2284      	movs	r2, #132	@ 0x84
 800ae0a:	589b      	ldr	r3, [r3, r2]
 800ae0c:	2202      	movs	r2, #2
 800ae0e:	431a      	orrs	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	2184      	movs	r1, #132	@ 0x84
 800ae14:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ae16:	23a4      	movs	r3, #164	@ 0xa4
 800ae18:	18fb      	adds	r3, r7, r3
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	2208      	movs	r2, #8
 800ae1e:	4013      	ands	r3, r2
 800ae20:	d017      	beq.n	800ae52 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae22:	23a0      	movs	r3, #160	@ 0xa0
 800ae24:	18fb      	adds	r3, r7, r3
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	2220      	movs	r2, #32
 800ae2a:	4013      	ands	r3, r2
 800ae2c:	d105      	bne.n	800ae3a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ae2e:	239c      	movs	r3, #156	@ 0x9c
 800ae30:	18fb      	adds	r3, r7, r3
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	2201      	movs	r2, #1
 800ae36:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ae38:	d00b      	beq.n	800ae52 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	2208      	movs	r2, #8
 800ae40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2284      	movs	r2, #132	@ 0x84
 800ae46:	589b      	ldr	r3, [r3, r2]
 800ae48:	2208      	movs	r2, #8
 800ae4a:	431a      	orrs	r2, r3
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	2184      	movs	r1, #132	@ 0x84
 800ae50:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ae52:	23a4      	movs	r3, #164	@ 0xa4
 800ae54:	18fb      	adds	r3, r7, r3
 800ae56:	681a      	ldr	r2, [r3, #0]
 800ae58:	2380      	movs	r3, #128	@ 0x80
 800ae5a:	011b      	lsls	r3, r3, #4
 800ae5c:	4013      	ands	r3, r2
 800ae5e:	d013      	beq.n	800ae88 <HAL_UART_IRQHandler+0x198>
 800ae60:	23a0      	movs	r3, #160	@ 0xa0
 800ae62:	18fb      	adds	r3, r7, r3
 800ae64:	681a      	ldr	r2, [r3, #0]
 800ae66:	2380      	movs	r3, #128	@ 0x80
 800ae68:	04db      	lsls	r3, r3, #19
 800ae6a:	4013      	ands	r3, r2
 800ae6c:	d00c      	beq.n	800ae88 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2280      	movs	r2, #128	@ 0x80
 800ae74:	0112      	lsls	r2, r2, #4
 800ae76:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	2284      	movs	r2, #132	@ 0x84
 800ae7c:	589b      	ldr	r3, [r3, r2]
 800ae7e:	2220      	movs	r2, #32
 800ae80:	431a      	orrs	r2, r3
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	2184      	movs	r1, #132	@ 0x84
 800ae86:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	2284      	movs	r2, #132	@ 0x84
 800ae8c:	589b      	ldr	r3, [r3, r2]
 800ae8e:	2b00      	cmp	r3, #0
 800ae90:	d100      	bne.n	800ae94 <HAL_UART_IRQHandler+0x1a4>
 800ae92:	e20b      	b.n	800b2ac <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ae94:	23a4      	movs	r3, #164	@ 0xa4
 800ae96:	18fb      	adds	r3, r7, r3
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2220      	movs	r2, #32
 800ae9c:	4013      	ands	r3, r2
 800ae9e:	d00e      	beq.n	800aebe <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aea0:	23a0      	movs	r3, #160	@ 0xa0
 800aea2:	18fb      	adds	r3, r7, r3
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	2220      	movs	r2, #32
 800aea8:	4013      	ands	r3, r2
 800aeaa:	d008      	beq.n	800aebe <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d004      	beq.n	800aebe <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800aeb8:	687a      	ldr	r2, [r7, #4]
 800aeba:	0010      	movs	r0, r2
 800aebc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2284      	movs	r2, #132	@ 0x84
 800aec2:	589b      	ldr	r3, [r3, r2]
 800aec4:	2194      	movs	r1, #148	@ 0x94
 800aec6:	187a      	adds	r2, r7, r1
 800aec8:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aeca:	687b      	ldr	r3, [r7, #4]
 800aecc:	681b      	ldr	r3, [r3, #0]
 800aece:	689b      	ldr	r3, [r3, #8]
 800aed0:	2240      	movs	r2, #64	@ 0x40
 800aed2:	4013      	ands	r3, r2
 800aed4:	2b40      	cmp	r3, #64	@ 0x40
 800aed6:	d004      	beq.n	800aee2 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aed8:	187b      	adds	r3, r7, r1
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	2228      	movs	r2, #40	@ 0x28
 800aede:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aee0:	d04b      	beq.n	800af7a <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	0018      	movs	r0, r3
 800aee6:	f000 ff97 	bl	800be18 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	681b      	ldr	r3, [r3, #0]
 800aeee:	689b      	ldr	r3, [r3, #8]
 800aef0:	2240      	movs	r2, #64	@ 0x40
 800aef2:	4013      	ands	r3, r2
 800aef4:	2b40      	cmp	r3, #64	@ 0x40
 800aef6:	d139      	bne.n	800af6c <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800aef8:	f3ef 8310 	mrs	r3, PRIMASK
 800aefc:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 800aefe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af00:	2090      	movs	r0, #144	@ 0x90
 800af02:	183a      	adds	r2, r7, r0
 800af04:	6013      	str	r3, [r2, #0]
 800af06:	2301      	movs	r3, #1
 800af08:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af0a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800af0c:	f383 8810 	msr	PRIMASK, r3
}
 800af10:	46c0      	nop			@ (mov r8, r8)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	689a      	ldr	r2, [r3, #8]
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2140      	movs	r1, #64	@ 0x40
 800af1e:	438a      	bics	r2, r1
 800af20:	609a      	str	r2, [r3, #8]
 800af22:	183b      	adds	r3, r7, r0
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800af28:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af2a:	f383 8810 	msr	PRIMASK, r3
}
 800af2e:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af34:	2b00      	cmp	r3, #0
 800af36:	d012      	beq.n	800af5e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af3c:	4a17      	ldr	r2, [pc, #92]	@ (800af9c <HAL_UART_IRQHandler+0x2ac>)
 800af3e:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af44:	0018      	movs	r0, r3
 800af46:	f7fb fdb3 	bl	8006ab0 <HAL_DMA_Abort_IT>
 800af4a:	1e03      	subs	r3, r0, #0
 800af4c:	d020      	beq.n	800af90 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af52:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af58:	0018      	movs	r0, r3
 800af5a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af5c:	e018      	b.n	800af90 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2298      	movs	r2, #152	@ 0x98
 800af62:	589b      	ldr	r3, [r3, r2]
 800af64:	687a      	ldr	r2, [r7, #4]
 800af66:	0010      	movs	r0, r2
 800af68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af6a:	e011      	b.n	800af90 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2298      	movs	r2, #152	@ 0x98
 800af70:	589b      	ldr	r3, [r3, r2]
 800af72:	687a      	ldr	r2, [r7, #4]
 800af74:	0010      	movs	r0, r2
 800af76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af78:	e00a      	b.n	800af90 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	2298      	movs	r2, #152	@ 0x98
 800af7e:	589b      	ldr	r3, [r3, r2]
 800af80:	687a      	ldr	r2, [r7, #4]
 800af82:	0010      	movs	r0, r2
 800af84:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	2284      	movs	r2, #132	@ 0x84
 800af8a:	2100      	movs	r1, #0
 800af8c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800af8e:	e18d      	b.n	800b2ac <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800af90:	46c0      	nop			@ (mov r8, r8)
    return;
 800af92:	e18b      	b.n	800b2ac <HAL_UART_IRQHandler+0x5bc>
 800af94:	0000080f 	.word	0x0000080f
 800af98:	04000120 	.word	0x04000120
 800af9c:	0800c1a5 	.word	0x0800c1a5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800afa4:	2b01      	cmp	r3, #1
 800afa6:	d000      	beq.n	800afaa <HAL_UART_IRQHandler+0x2ba>
 800afa8:	e13d      	b.n	800b226 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800afaa:	23a4      	movs	r3, #164	@ 0xa4
 800afac:	18fb      	adds	r3, r7, r3
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	2210      	movs	r2, #16
 800afb2:	4013      	ands	r3, r2
 800afb4:	d100      	bne.n	800afb8 <HAL_UART_IRQHandler+0x2c8>
 800afb6:	e136      	b.n	800b226 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800afb8:	23a0      	movs	r3, #160	@ 0xa0
 800afba:	18fb      	adds	r3, r7, r3
 800afbc:	681b      	ldr	r3, [r3, #0]
 800afbe:	2210      	movs	r2, #16
 800afc0:	4013      	ands	r3, r2
 800afc2:	d100      	bne.n	800afc6 <HAL_UART_IRQHandler+0x2d6>
 800afc4:	e12f      	b.n	800b226 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	2210      	movs	r2, #16
 800afcc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	689b      	ldr	r3, [r3, #8]
 800afd4:	2240      	movs	r2, #64	@ 0x40
 800afd6:	4013      	ands	r3, r2
 800afd8:	2b40      	cmp	r3, #64	@ 0x40
 800afda:	d000      	beq.n	800afde <HAL_UART_IRQHandler+0x2ee>
 800afdc:	e0a2      	b.n	800b124 <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	217e      	movs	r1, #126	@ 0x7e
 800afe8:	187b      	adds	r3, r7, r1
 800afea:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800afec:	187b      	adds	r3, r7, r1
 800afee:	881b      	ldrh	r3, [r3, #0]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d100      	bne.n	800aff6 <HAL_UART_IRQHandler+0x306>
 800aff4:	e15c      	b.n	800b2b0 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2258      	movs	r2, #88	@ 0x58
 800affa:	5a9b      	ldrh	r3, [r3, r2]
 800affc:	187a      	adds	r2, r7, r1
 800affe:	8812      	ldrh	r2, [r2, #0]
 800b000:	429a      	cmp	r2, r3
 800b002:	d300      	bcc.n	800b006 <HAL_UART_IRQHandler+0x316>
 800b004:	e154      	b.n	800b2b0 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	187a      	adds	r2, r7, r1
 800b00a:	215a      	movs	r1, #90	@ 0x5a
 800b00c:	8812      	ldrh	r2, [r2, #0]
 800b00e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	681b      	ldr	r3, [r3, #0]
 800b018:	2220      	movs	r2, #32
 800b01a:	4013      	ands	r3, r2
 800b01c:	d16f      	bne.n	800b0fe <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b01e:	f3ef 8310 	mrs	r3, PRIMASK
 800b022:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800b024:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b026:	67bb      	str	r3, [r7, #120]	@ 0x78
 800b028:	2301      	movs	r3, #1
 800b02a:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b02c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b02e:	f383 8810 	msr	PRIMASK, r3
}
 800b032:	46c0      	nop			@ (mov r8, r8)
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	681a      	ldr	r2, [r3, #0]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	49a0      	ldr	r1, [pc, #640]	@ (800b2c0 <HAL_UART_IRQHandler+0x5d0>)
 800b040:	400a      	ands	r2, r1
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b046:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b048:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b04a:	f383 8810 	msr	PRIMASK, r3
}
 800b04e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b050:	f3ef 8310 	mrs	r3, PRIMASK
 800b054:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 800b056:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b058:	677b      	str	r3, [r7, #116]	@ 0x74
 800b05a:	2301      	movs	r3, #1
 800b05c:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b05e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b060:	f383 8810 	msr	PRIMASK, r3
}
 800b064:	46c0      	nop			@ (mov r8, r8)
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	689a      	ldr	r2, [r3, #8]
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	2101      	movs	r1, #1
 800b072:	438a      	bics	r2, r1
 800b074:	609a      	str	r2, [r3, #8]
 800b076:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b078:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b07a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b07c:	f383 8810 	msr	PRIMASK, r3
}
 800b080:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b082:	f3ef 8310 	mrs	r3, PRIMASK
 800b086:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 800b088:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b08a:	673b      	str	r3, [r7, #112]	@ 0x70
 800b08c:	2301      	movs	r3, #1
 800b08e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b092:	f383 8810 	msr	PRIMASK, r3
}
 800b096:	46c0      	nop			@ (mov r8, r8)
 800b098:	687b      	ldr	r3, [r7, #4]
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	689a      	ldr	r2, [r3, #8]
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	2140      	movs	r1, #64	@ 0x40
 800b0a4:	438a      	bics	r2, r1
 800b0a6:	609a      	str	r2, [r3, #8]
 800b0a8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b0aa:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b0ae:	f383 8810 	msr	PRIMASK, r3
}
 800b0b2:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	2280      	movs	r2, #128	@ 0x80
 800b0b8:	2120      	movs	r1, #32
 800b0ba:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	2200      	movs	r2, #0
 800b0c0:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b0c2:	f3ef 8310 	mrs	r3, PRIMASK
 800b0c6:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 800b0c8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b0ca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b0d2:	f383 8810 	msr	PRIMASK, r3
}
 800b0d6:	46c0      	nop			@ (mov r8, r8)
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	2110      	movs	r1, #16
 800b0e4:	438a      	bics	r2, r1
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b0ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b0ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b0ee:	f383 8810 	msr	PRIMASK, r3
}
 800b0f2:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800b0f8:	0018      	movs	r0, r3
 800b0fa:	f7fb fc99 	bl	8006a30 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	2202      	movs	r2, #2
 800b102:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	22ac      	movs	r2, #172	@ 0xac
 800b108:	589b      	ldr	r3, [r3, r2]
 800b10a:	687a      	ldr	r2, [r7, #4]
 800b10c:	2158      	movs	r1, #88	@ 0x58
 800b10e:	5a51      	ldrh	r1, [r2, r1]
 800b110:	687a      	ldr	r2, [r7, #4]
 800b112:	205a      	movs	r0, #90	@ 0x5a
 800b114:	5a12      	ldrh	r2, [r2, r0]
 800b116:	b292      	uxth	r2, r2
 800b118:	1a8a      	subs	r2, r1, r2
 800b11a:	b291      	uxth	r1, r2
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	0010      	movs	r0, r2
 800b120:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b122:	e0c5      	b.n	800b2b0 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	2258      	movs	r2, #88	@ 0x58
 800b128:	5a99      	ldrh	r1, [r3, r2]
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	225a      	movs	r2, #90	@ 0x5a
 800b12e:	5a9b      	ldrh	r3, [r3, r2]
 800b130:	b29a      	uxth	r2, r3
 800b132:	208e      	movs	r0, #142	@ 0x8e
 800b134:	183b      	adds	r3, r7, r0
 800b136:	1a8a      	subs	r2, r1, r2
 800b138:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	225a      	movs	r2, #90	@ 0x5a
 800b13e:	5a9b      	ldrh	r3, [r3, r2]
 800b140:	b29b      	uxth	r3, r3
 800b142:	2b00      	cmp	r3, #0
 800b144:	d100      	bne.n	800b148 <HAL_UART_IRQHandler+0x458>
 800b146:	e0b5      	b.n	800b2b4 <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 800b148:	183b      	adds	r3, r7, r0
 800b14a:	881b      	ldrh	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d100      	bne.n	800b152 <HAL_UART_IRQHandler+0x462>
 800b150:	e0b0      	b.n	800b2b4 <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b152:	f3ef 8310 	mrs	r3, PRIMASK
 800b156:	60fb      	str	r3, [r7, #12]
  return(result);
 800b158:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b15a:	2488      	movs	r4, #136	@ 0x88
 800b15c:	193a      	adds	r2, r7, r4
 800b15e:	6013      	str	r3, [r2, #0]
 800b160:	2301      	movs	r3, #1
 800b162:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	f383 8810 	msr	PRIMASK, r3
}
 800b16a:	46c0      	nop			@ (mov r8, r8)
 800b16c:	687b      	ldr	r3, [r7, #4]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	681a      	ldr	r2, [r3, #0]
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	4953      	ldr	r1, [pc, #332]	@ (800b2c4 <HAL_UART_IRQHandler+0x5d4>)
 800b178:	400a      	ands	r2, r1
 800b17a:	601a      	str	r2, [r3, #0]
 800b17c:	193b      	adds	r3, r7, r4
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b182:	697b      	ldr	r3, [r7, #20]
 800b184:	f383 8810 	msr	PRIMASK, r3
}
 800b188:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b18a:	f3ef 8310 	mrs	r3, PRIMASK
 800b18e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b190:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b192:	2484      	movs	r4, #132	@ 0x84
 800b194:	193a      	adds	r2, r7, r4
 800b196:	6013      	str	r3, [r2, #0]
 800b198:	2301      	movs	r3, #1
 800b19a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b19c:	69fb      	ldr	r3, [r7, #28]
 800b19e:	f383 8810 	msr	PRIMASK, r3
}
 800b1a2:	46c0      	nop			@ (mov r8, r8)
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	689a      	ldr	r2, [r3, #8]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	2101      	movs	r1, #1
 800b1b0:	438a      	bics	r2, r1
 800b1b2:	609a      	str	r2, [r3, #8]
 800b1b4:	193b      	adds	r3, r7, r4
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1ba:	6a3b      	ldr	r3, [r7, #32]
 800b1bc:	f383 8810 	msr	PRIMASK, r3
}
 800b1c0:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2280      	movs	r2, #128	@ 0x80
 800b1c6:	2120      	movs	r1, #32
 800b1c8:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2200      	movs	r2, #0
 800b1ce:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b1d6:	f3ef 8310 	mrs	r3, PRIMASK
 800b1da:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1de:	2480      	movs	r4, #128	@ 0x80
 800b1e0:	193a      	adds	r2, r7, r4
 800b1e2:	6013      	str	r3, [r2, #0]
 800b1e4:	2301      	movs	r3, #1
 800b1e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b1e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ea:	f383 8810 	msr	PRIMASK, r3
}
 800b1ee:	46c0      	nop			@ (mov r8, r8)
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	681a      	ldr	r2, [r3, #0]
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	2110      	movs	r1, #16
 800b1fc:	438a      	bics	r2, r1
 800b1fe:	601a      	str	r2, [r3, #0]
 800b200:	193b      	adds	r3, r7, r4
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800b206:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b208:	f383 8810 	msr	PRIMASK, r3
}
 800b20c:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	2202      	movs	r2, #2
 800b212:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	22ac      	movs	r2, #172	@ 0xac
 800b218:	589b      	ldr	r3, [r3, r2]
 800b21a:	183a      	adds	r2, r7, r0
 800b21c:	8811      	ldrh	r1, [r2, #0]
 800b21e:	687a      	ldr	r2, [r7, #4]
 800b220:	0010      	movs	r0, r2
 800b222:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800b224:	e046      	b.n	800b2b4 <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800b226:	23a4      	movs	r3, #164	@ 0xa4
 800b228:	18fb      	adds	r3, r7, r3
 800b22a:	681a      	ldr	r2, [r3, #0]
 800b22c:	2380      	movs	r3, #128	@ 0x80
 800b22e:	035b      	lsls	r3, r3, #13
 800b230:	4013      	ands	r3, r2
 800b232:	d012      	beq.n	800b25a <HAL_UART_IRQHandler+0x56a>
 800b234:	239c      	movs	r3, #156	@ 0x9c
 800b236:	18fb      	adds	r3, r7, r3
 800b238:	681a      	ldr	r2, [r3, #0]
 800b23a:	2380      	movs	r3, #128	@ 0x80
 800b23c:	03db      	lsls	r3, r3, #15
 800b23e:	4013      	ands	r3, r2
 800b240:	d00b      	beq.n	800b25a <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800b242:	687b      	ldr	r3, [r7, #4]
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2280      	movs	r2, #128	@ 0x80
 800b248:	0352      	lsls	r2, r2, #13
 800b24a:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	22a8      	movs	r2, #168	@ 0xa8
 800b250:	589b      	ldr	r3, [r3, r2]
 800b252:	687a      	ldr	r2, [r7, #4]
 800b254:	0010      	movs	r0, r2
 800b256:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800b258:	e02f      	b.n	800b2ba <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b25a:	23a4      	movs	r3, #164	@ 0xa4
 800b25c:	18fb      	adds	r3, r7, r3
 800b25e:	681b      	ldr	r3, [r3, #0]
 800b260:	2280      	movs	r2, #128	@ 0x80
 800b262:	4013      	ands	r3, r2
 800b264:	d00f      	beq.n	800b286 <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b266:	23a0      	movs	r3, #160	@ 0xa0
 800b268:	18fb      	adds	r3, r7, r3
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	2280      	movs	r2, #128	@ 0x80
 800b26e:	4013      	ands	r3, r2
 800b270:	d009      	beq.n	800b286 <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b276:	2b00      	cmp	r3, #0
 800b278:	d01e      	beq.n	800b2b8 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b27e:	687a      	ldr	r2, [r7, #4]
 800b280:	0010      	movs	r0, r2
 800b282:	4798      	blx	r3
    }
    return;
 800b284:	e018      	b.n	800b2b8 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b286:	23a4      	movs	r3, #164	@ 0xa4
 800b288:	18fb      	adds	r3, r7, r3
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	2240      	movs	r2, #64	@ 0x40
 800b28e:	4013      	ands	r3, r2
 800b290:	d013      	beq.n	800b2ba <HAL_UART_IRQHandler+0x5ca>
 800b292:	23a0      	movs	r3, #160	@ 0xa0
 800b294:	18fb      	adds	r3, r7, r3
 800b296:	681b      	ldr	r3, [r3, #0]
 800b298:	2240      	movs	r2, #64	@ 0x40
 800b29a:	4013      	ands	r3, r2
 800b29c:	d00d      	beq.n	800b2ba <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	0018      	movs	r0, r3
 800b2a2:	f000 ff98 	bl	800c1d6 <UART_EndTransmit_IT>
    return;
 800b2a6:	e008      	b.n	800b2ba <HAL_UART_IRQHandler+0x5ca>
      return;
 800b2a8:	46c0      	nop			@ (mov r8, r8)
 800b2aa:	e006      	b.n	800b2ba <HAL_UART_IRQHandler+0x5ca>
    return;
 800b2ac:	46c0      	nop			@ (mov r8, r8)
 800b2ae:	e004      	b.n	800b2ba <HAL_UART_IRQHandler+0x5ca>
      return;
 800b2b0:	46c0      	nop			@ (mov r8, r8)
 800b2b2:	e002      	b.n	800b2ba <HAL_UART_IRQHandler+0x5ca>
      return;
 800b2b4:	46c0      	nop			@ (mov r8, r8)
 800b2b6:	e000      	b.n	800b2ba <HAL_UART_IRQHandler+0x5ca>
    return;
 800b2b8:	46c0      	nop			@ (mov r8, r8)
  }

}
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	b02b      	add	sp, #172	@ 0xac
 800b2be:	bd90      	pop	{r4, r7, pc}
 800b2c0:	fffffeff 	.word	0xfffffeff
 800b2c4:	fffffedf 	.word	0xfffffedf

0800b2c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b082      	sub	sp, #8
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b2d0:	46c0      	nop			@ (mov r8, r8)
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	b002      	add	sp, #8
 800b2d6:	bd80      	pop	{r7, pc}

0800b2d8 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2d8:	b580      	push	{r7, lr}
 800b2da:	b082      	sub	sp, #8
 800b2dc:	af00      	add	r7, sp, #0
 800b2de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800b2e0:	46c0      	nop			@ (mov r8, r8)
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	b002      	add	sp, #8
 800b2e6:	bd80      	pop	{r7, pc}

0800b2e8 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b082      	sub	sp, #8
 800b2ec:	af00      	add	r7, sp, #0
 800b2ee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800b2f0:	46c0      	nop			@ (mov r8, r8)
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	b002      	add	sp, #8
 800b2f6:	bd80      	pop	{r7, pc}

0800b2f8 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b082      	sub	sp, #8
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 800b300:	46c0      	nop			@ (mov r8, r8)
 800b302:	46bd      	mov	sp, r7
 800b304:	b002      	add	sp, #8
 800b306:	bd80      	pop	{r7, pc}

0800b308 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b082      	sub	sp, #8
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 800b310:	46c0      	nop			@ (mov r8, r8)
 800b312:	46bd      	mov	sp, r7
 800b314:	b002      	add	sp, #8
 800b316:	bd80      	pop	{r7, pc}

0800b318 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 800b318:	b580      	push	{r7, lr}
 800b31a:	b082      	sub	sp, #8
 800b31c:	af00      	add	r7, sp, #0
 800b31e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 800b320:	46c0      	nop			@ (mov r8, r8)
 800b322:	46bd      	mov	sp, r7
 800b324:	b002      	add	sp, #8
 800b326:	bd80      	pop	{r7, pc}

0800b328 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	6078      	str	r0, [r7, #4]
 800b330:	000a      	movs	r2, r1
 800b332:	1cbb      	adds	r3, r7, #2
 800b334:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800b336:	46c0      	nop			@ (mov r8, r8)
 800b338:	46bd      	mov	sp, r7
 800b33a:	b002      	add	sp, #8
 800b33c:	bd80      	pop	{r7, pc}
	...

0800b340 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	2188      	movs	r1, #136	@ 0x88
 800b34c:	4a14      	ldr	r2, [pc, #80]	@ (800b3a0 <UART_InitCallbacksToDefault+0x60>)
 800b34e:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	218c      	movs	r1, #140	@ 0x8c
 800b354:	4a13      	ldr	r2, [pc, #76]	@ (800b3a4 <UART_InitCallbacksToDefault+0x64>)
 800b356:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	2190      	movs	r1, #144	@ 0x90
 800b35c:	4a12      	ldr	r2, [pc, #72]	@ (800b3a8 <UART_InitCallbacksToDefault+0x68>)
 800b35e:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2194      	movs	r1, #148	@ 0x94
 800b364:	4a11      	ldr	r2, [pc, #68]	@ (800b3ac <UART_InitCallbacksToDefault+0x6c>)
 800b366:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	2198      	movs	r1, #152	@ 0x98
 800b36c:	4a10      	ldr	r2, [pc, #64]	@ (800b3b0 <UART_InitCallbacksToDefault+0x70>)
 800b36e:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	219c      	movs	r1, #156	@ 0x9c
 800b374:	4a0f      	ldr	r2, [pc, #60]	@ (800b3b4 <UART_InitCallbacksToDefault+0x74>)
 800b376:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	21a0      	movs	r1, #160	@ 0xa0
 800b37c:	4a0e      	ldr	r2, [pc, #56]	@ (800b3b8 <UART_InitCallbacksToDefault+0x78>)
 800b37e:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	21a4      	movs	r1, #164	@ 0xa4
 800b384:	4a0d      	ldr	r2, [pc, #52]	@ (800b3bc <UART_InitCallbacksToDefault+0x7c>)
 800b386:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	21a8      	movs	r1, #168	@ 0xa8
 800b38c:	4a0c      	ldr	r2, [pc, #48]	@ (800b3c0 <UART_InitCallbacksToDefault+0x80>)
 800b38e:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	21ac      	movs	r1, #172	@ 0xac
 800b394:	4a0b      	ldr	r2, [pc, #44]	@ (800b3c4 <UART_InitCallbacksToDefault+0x84>)
 800b396:	505a      	str	r2, [r3, r1]

}
 800b398:	46c0      	nop			@ (mov r8, r8)
 800b39a:	46bd      	mov	sp, r7
 800b39c:	b002      	add	sp, #8
 800b39e:	bd80      	pop	{r7, pc}
 800b3a0:	0800b2d9 	.word	0x0800b2d9
 800b3a4:	0800b2c9 	.word	0x0800b2c9
 800b3a8:	0800b2e9 	.word	0x0800b2e9
 800b3ac:	0800353d 	.word	0x0800353d
 800b3b0:	08003579 	.word	0x08003579
 800b3b4:	0800b2f9 	.word	0x0800b2f9
 800b3b8:	0800b309 	.word	0x0800b309
 800b3bc:	0800b319 	.word	0x0800b319
 800b3c0:	0800c231 	.word	0x0800c231
 800b3c4:	0800b329 	.word	0x0800b329

0800b3c8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3c8:	b5b0      	push	{r4, r5, r7, lr}
 800b3ca:	b08e      	sub	sp, #56	@ 0x38
 800b3cc:	af00      	add	r7, sp, #0
 800b3ce:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3d0:	231a      	movs	r3, #26
 800b3d2:	2218      	movs	r2, #24
 800b3d4:	189b      	adds	r3, r3, r2
 800b3d6:	19db      	adds	r3, r3, r7
 800b3d8:	2200      	movs	r2, #0
 800b3da:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b3dc:	69fb      	ldr	r3, [r7, #28]
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	69fb      	ldr	r3, [r7, #28]
 800b3e2:	691b      	ldr	r3, [r3, #16]
 800b3e4:	431a      	orrs	r2, r3
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	695b      	ldr	r3, [r3, #20]
 800b3ea:	431a      	orrs	r2, r3
 800b3ec:	69fb      	ldr	r3, [r7, #28]
 800b3ee:	69db      	ldr	r3, [r3, #28]
 800b3f0:	4313      	orrs	r3, r2
 800b3f2:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b3f4:	69fb      	ldr	r3, [r7, #28]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	4ac3      	ldr	r2, [pc, #780]	@ (800b708 <UART_SetConfig+0x340>)
 800b3fc:	4013      	ands	r3, r2
 800b3fe:	0019      	movs	r1, r3
 800b400:	69fb      	ldr	r3, [r7, #28]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b406:	430a      	orrs	r2, r1
 800b408:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b40a:	69fb      	ldr	r3, [r7, #28]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	685b      	ldr	r3, [r3, #4]
 800b410:	4abe      	ldr	r2, [pc, #760]	@ (800b70c <UART_SetConfig+0x344>)
 800b412:	4013      	ands	r3, r2
 800b414:	0019      	movs	r1, r3
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	68da      	ldr	r2, [r3, #12]
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	430a      	orrs	r2, r1
 800b420:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	699b      	ldr	r3, [r3, #24]
 800b426:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b428:	69fb      	ldr	r3, [r7, #28]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	4ab8      	ldr	r2, [pc, #736]	@ (800b710 <UART_SetConfig+0x348>)
 800b42e:	4293      	cmp	r3, r2
 800b430:	d004      	beq.n	800b43c <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	6a1b      	ldr	r3, [r3, #32]
 800b436:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b438:	4313      	orrs	r3, r2
 800b43a:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b43c:	69fb      	ldr	r3, [r7, #28]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	689b      	ldr	r3, [r3, #8]
 800b442:	4ab4      	ldr	r2, [pc, #720]	@ (800b714 <UART_SetConfig+0x34c>)
 800b444:	4013      	ands	r3, r2
 800b446:	0019      	movs	r1, r3
 800b448:	69fb      	ldr	r3, [r7, #28]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b44e:	430a      	orrs	r2, r1
 800b450:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b452:	69fb      	ldr	r3, [r7, #28]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	4ab0      	ldr	r2, [pc, #704]	@ (800b718 <UART_SetConfig+0x350>)
 800b458:	4293      	cmp	r3, r2
 800b45a:	d131      	bne.n	800b4c0 <UART_SetConfig+0xf8>
 800b45c:	4baf      	ldr	r3, [pc, #700]	@ (800b71c <UART_SetConfig+0x354>)
 800b45e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b460:	2203      	movs	r2, #3
 800b462:	4013      	ands	r3, r2
 800b464:	2b03      	cmp	r3, #3
 800b466:	d01d      	beq.n	800b4a4 <UART_SetConfig+0xdc>
 800b468:	d823      	bhi.n	800b4b2 <UART_SetConfig+0xea>
 800b46a:	2b02      	cmp	r3, #2
 800b46c:	d00c      	beq.n	800b488 <UART_SetConfig+0xc0>
 800b46e:	d820      	bhi.n	800b4b2 <UART_SetConfig+0xea>
 800b470:	2b00      	cmp	r3, #0
 800b472:	d002      	beq.n	800b47a <UART_SetConfig+0xb2>
 800b474:	2b01      	cmp	r3, #1
 800b476:	d00e      	beq.n	800b496 <UART_SetConfig+0xce>
 800b478:	e01b      	b.n	800b4b2 <UART_SetConfig+0xea>
 800b47a:	231b      	movs	r3, #27
 800b47c:	2218      	movs	r2, #24
 800b47e:	189b      	adds	r3, r3, r2
 800b480:	19db      	adds	r3, r3, r7
 800b482:	2201      	movs	r2, #1
 800b484:	701a      	strb	r2, [r3, #0]
 800b486:	e0b4      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b488:	231b      	movs	r3, #27
 800b48a:	2218      	movs	r2, #24
 800b48c:	189b      	adds	r3, r3, r2
 800b48e:	19db      	adds	r3, r3, r7
 800b490:	2202      	movs	r2, #2
 800b492:	701a      	strb	r2, [r3, #0]
 800b494:	e0ad      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b496:	231b      	movs	r3, #27
 800b498:	2218      	movs	r2, #24
 800b49a:	189b      	adds	r3, r3, r2
 800b49c:	19db      	adds	r3, r3, r7
 800b49e:	2204      	movs	r2, #4
 800b4a0:	701a      	strb	r2, [r3, #0]
 800b4a2:	e0a6      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b4a4:	231b      	movs	r3, #27
 800b4a6:	2218      	movs	r2, #24
 800b4a8:	189b      	adds	r3, r3, r2
 800b4aa:	19db      	adds	r3, r3, r7
 800b4ac:	2208      	movs	r2, #8
 800b4ae:	701a      	strb	r2, [r3, #0]
 800b4b0:	e09f      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b4b2:	231b      	movs	r3, #27
 800b4b4:	2218      	movs	r2, #24
 800b4b6:	189b      	adds	r3, r3, r2
 800b4b8:	19db      	adds	r3, r3, r7
 800b4ba:	2210      	movs	r2, #16
 800b4bc:	701a      	strb	r2, [r3, #0]
 800b4be:	e098      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b4c0:	69fb      	ldr	r3, [r7, #28]
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	4a96      	ldr	r2, [pc, #600]	@ (800b720 <UART_SetConfig+0x358>)
 800b4c6:	4293      	cmp	r3, r2
 800b4c8:	d131      	bne.n	800b52e <UART_SetConfig+0x166>
 800b4ca:	4b94      	ldr	r3, [pc, #592]	@ (800b71c <UART_SetConfig+0x354>)
 800b4cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b4ce:	220c      	movs	r2, #12
 800b4d0:	4013      	ands	r3, r2
 800b4d2:	2b0c      	cmp	r3, #12
 800b4d4:	d01d      	beq.n	800b512 <UART_SetConfig+0x14a>
 800b4d6:	d823      	bhi.n	800b520 <UART_SetConfig+0x158>
 800b4d8:	2b08      	cmp	r3, #8
 800b4da:	d00c      	beq.n	800b4f6 <UART_SetConfig+0x12e>
 800b4dc:	d820      	bhi.n	800b520 <UART_SetConfig+0x158>
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d002      	beq.n	800b4e8 <UART_SetConfig+0x120>
 800b4e2:	2b04      	cmp	r3, #4
 800b4e4:	d00e      	beq.n	800b504 <UART_SetConfig+0x13c>
 800b4e6:	e01b      	b.n	800b520 <UART_SetConfig+0x158>
 800b4e8:	231b      	movs	r3, #27
 800b4ea:	2218      	movs	r2, #24
 800b4ec:	189b      	adds	r3, r3, r2
 800b4ee:	19db      	adds	r3, r3, r7
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	701a      	strb	r2, [r3, #0]
 800b4f4:	e07d      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b4f6:	231b      	movs	r3, #27
 800b4f8:	2218      	movs	r2, #24
 800b4fa:	189b      	adds	r3, r3, r2
 800b4fc:	19db      	adds	r3, r3, r7
 800b4fe:	2202      	movs	r2, #2
 800b500:	701a      	strb	r2, [r3, #0]
 800b502:	e076      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b504:	231b      	movs	r3, #27
 800b506:	2218      	movs	r2, #24
 800b508:	189b      	adds	r3, r3, r2
 800b50a:	19db      	adds	r3, r3, r7
 800b50c:	2204      	movs	r2, #4
 800b50e:	701a      	strb	r2, [r3, #0]
 800b510:	e06f      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b512:	231b      	movs	r3, #27
 800b514:	2218      	movs	r2, #24
 800b516:	189b      	adds	r3, r3, r2
 800b518:	19db      	adds	r3, r3, r7
 800b51a:	2208      	movs	r2, #8
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	e068      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b520:	231b      	movs	r3, #27
 800b522:	2218      	movs	r2, #24
 800b524:	189b      	adds	r3, r3, r2
 800b526:	19db      	adds	r3, r3, r7
 800b528:	2210      	movs	r2, #16
 800b52a:	701a      	strb	r2, [r3, #0]
 800b52c:	e061      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b52e:	69fb      	ldr	r3, [r7, #28]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	4a7c      	ldr	r2, [pc, #496]	@ (800b724 <UART_SetConfig+0x35c>)
 800b534:	4293      	cmp	r3, r2
 800b536:	d106      	bne.n	800b546 <UART_SetConfig+0x17e>
 800b538:	231b      	movs	r3, #27
 800b53a:	2218      	movs	r2, #24
 800b53c:	189b      	adds	r3, r3, r2
 800b53e:	19db      	adds	r3, r3, r7
 800b540:	2200      	movs	r2, #0
 800b542:	701a      	strb	r2, [r3, #0]
 800b544:	e055      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b546:	69fb      	ldr	r3, [r7, #28]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a77      	ldr	r2, [pc, #476]	@ (800b728 <UART_SetConfig+0x360>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d106      	bne.n	800b55e <UART_SetConfig+0x196>
 800b550:	231b      	movs	r3, #27
 800b552:	2218      	movs	r2, #24
 800b554:	189b      	adds	r3, r3, r2
 800b556:	19db      	adds	r3, r3, r7
 800b558:	2200      	movs	r2, #0
 800b55a:	701a      	strb	r2, [r3, #0]
 800b55c:	e049      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b55e:	69fb      	ldr	r3, [r7, #28]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	4a6b      	ldr	r2, [pc, #428]	@ (800b710 <UART_SetConfig+0x348>)
 800b564:	4293      	cmp	r3, r2
 800b566:	d13e      	bne.n	800b5e6 <UART_SetConfig+0x21e>
 800b568:	4b6c      	ldr	r3, [pc, #432]	@ (800b71c <UART_SetConfig+0x354>)
 800b56a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800b56c:	23c0      	movs	r3, #192	@ 0xc0
 800b56e:	011b      	lsls	r3, r3, #4
 800b570:	4013      	ands	r3, r2
 800b572:	22c0      	movs	r2, #192	@ 0xc0
 800b574:	0112      	lsls	r2, r2, #4
 800b576:	4293      	cmp	r3, r2
 800b578:	d027      	beq.n	800b5ca <UART_SetConfig+0x202>
 800b57a:	22c0      	movs	r2, #192	@ 0xc0
 800b57c:	0112      	lsls	r2, r2, #4
 800b57e:	4293      	cmp	r3, r2
 800b580:	d82a      	bhi.n	800b5d8 <UART_SetConfig+0x210>
 800b582:	2280      	movs	r2, #128	@ 0x80
 800b584:	0112      	lsls	r2, r2, #4
 800b586:	4293      	cmp	r3, r2
 800b588:	d011      	beq.n	800b5ae <UART_SetConfig+0x1e6>
 800b58a:	2280      	movs	r2, #128	@ 0x80
 800b58c:	0112      	lsls	r2, r2, #4
 800b58e:	4293      	cmp	r3, r2
 800b590:	d822      	bhi.n	800b5d8 <UART_SetConfig+0x210>
 800b592:	2b00      	cmp	r3, #0
 800b594:	d004      	beq.n	800b5a0 <UART_SetConfig+0x1d8>
 800b596:	2280      	movs	r2, #128	@ 0x80
 800b598:	00d2      	lsls	r2, r2, #3
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d00e      	beq.n	800b5bc <UART_SetConfig+0x1f4>
 800b59e:	e01b      	b.n	800b5d8 <UART_SetConfig+0x210>
 800b5a0:	231b      	movs	r3, #27
 800b5a2:	2218      	movs	r2, #24
 800b5a4:	189b      	adds	r3, r3, r2
 800b5a6:	19db      	adds	r3, r3, r7
 800b5a8:	2200      	movs	r2, #0
 800b5aa:	701a      	strb	r2, [r3, #0]
 800b5ac:	e021      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b5ae:	231b      	movs	r3, #27
 800b5b0:	2218      	movs	r2, #24
 800b5b2:	189b      	adds	r3, r3, r2
 800b5b4:	19db      	adds	r3, r3, r7
 800b5b6:	2202      	movs	r2, #2
 800b5b8:	701a      	strb	r2, [r3, #0]
 800b5ba:	e01a      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b5bc:	231b      	movs	r3, #27
 800b5be:	2218      	movs	r2, #24
 800b5c0:	189b      	adds	r3, r3, r2
 800b5c2:	19db      	adds	r3, r3, r7
 800b5c4:	2204      	movs	r2, #4
 800b5c6:	701a      	strb	r2, [r3, #0]
 800b5c8:	e013      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b5ca:	231b      	movs	r3, #27
 800b5cc:	2218      	movs	r2, #24
 800b5ce:	189b      	adds	r3, r3, r2
 800b5d0:	19db      	adds	r3, r3, r7
 800b5d2:	2208      	movs	r2, #8
 800b5d4:	701a      	strb	r2, [r3, #0]
 800b5d6:	e00c      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b5d8:	231b      	movs	r3, #27
 800b5da:	2218      	movs	r2, #24
 800b5dc:	189b      	adds	r3, r3, r2
 800b5de:	19db      	adds	r3, r3, r7
 800b5e0:	2210      	movs	r2, #16
 800b5e2:	701a      	strb	r2, [r3, #0]
 800b5e4:	e005      	b.n	800b5f2 <UART_SetConfig+0x22a>
 800b5e6:	231b      	movs	r3, #27
 800b5e8:	2218      	movs	r2, #24
 800b5ea:	189b      	adds	r3, r3, r2
 800b5ec:	19db      	adds	r3, r3, r7
 800b5ee:	2210      	movs	r2, #16
 800b5f0:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5f2:	69fb      	ldr	r3, [r7, #28]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	4a46      	ldr	r2, [pc, #280]	@ (800b710 <UART_SetConfig+0x348>)
 800b5f8:	4293      	cmp	r3, r2
 800b5fa:	d000      	beq.n	800b5fe <UART_SetConfig+0x236>
 800b5fc:	e09a      	b.n	800b734 <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5fe:	231b      	movs	r3, #27
 800b600:	2218      	movs	r2, #24
 800b602:	189b      	adds	r3, r3, r2
 800b604:	19db      	adds	r3, r3, r7
 800b606:	781b      	ldrb	r3, [r3, #0]
 800b608:	2b08      	cmp	r3, #8
 800b60a:	d01d      	beq.n	800b648 <UART_SetConfig+0x280>
 800b60c:	dc20      	bgt.n	800b650 <UART_SetConfig+0x288>
 800b60e:	2b04      	cmp	r3, #4
 800b610:	d015      	beq.n	800b63e <UART_SetConfig+0x276>
 800b612:	dc1d      	bgt.n	800b650 <UART_SetConfig+0x288>
 800b614:	2b00      	cmp	r3, #0
 800b616:	d002      	beq.n	800b61e <UART_SetConfig+0x256>
 800b618:	2b02      	cmp	r3, #2
 800b61a:	d005      	beq.n	800b628 <UART_SetConfig+0x260>
 800b61c:	e018      	b.n	800b650 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b61e:	f7fe fe29 	bl	800a274 <HAL_RCC_GetPCLK1Freq>
 800b622:	0003      	movs	r3, r0
 800b624:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b626:	e01c      	b.n	800b662 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b628:	4b3c      	ldr	r3, [pc, #240]	@ (800b71c <UART_SetConfig+0x354>)
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	2210      	movs	r2, #16
 800b62e:	4013      	ands	r3, r2
 800b630:	d002      	beq.n	800b638 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b632:	4b3e      	ldr	r3, [pc, #248]	@ (800b72c <UART_SetConfig+0x364>)
 800b634:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b636:	e014      	b.n	800b662 <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 800b638:	4b3d      	ldr	r3, [pc, #244]	@ (800b730 <UART_SetConfig+0x368>)
 800b63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b63c:	e011      	b.n	800b662 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b63e:	f7fe fd69 	bl	800a114 <HAL_RCC_GetSysClockFreq>
 800b642:	0003      	movs	r3, r0
 800b644:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b646:	e00c      	b.n	800b662 <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b648:	2380      	movs	r3, #128	@ 0x80
 800b64a:	021b      	lsls	r3, r3, #8
 800b64c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b64e:	e008      	b.n	800b662 <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 800b650:	2300      	movs	r3, #0
 800b652:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800b654:	231a      	movs	r3, #26
 800b656:	2218      	movs	r2, #24
 800b658:	189b      	adds	r3, r3, r2
 800b65a:	19db      	adds	r3, r3, r7
 800b65c:	2201      	movs	r2, #1
 800b65e:	701a      	strb	r2, [r3, #0]
        break;
 800b660:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b664:	2b00      	cmp	r3, #0
 800b666:	d100      	bne.n	800b66a <UART_SetConfig+0x2a2>
 800b668:	e133      	b.n	800b8d2 <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b66a:	69fb      	ldr	r3, [r7, #28]
 800b66c:	685a      	ldr	r2, [r3, #4]
 800b66e:	0013      	movs	r3, r2
 800b670:	005b      	lsls	r3, r3, #1
 800b672:	189b      	adds	r3, r3, r2
 800b674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b676:	429a      	cmp	r2, r3
 800b678:	d305      	bcc.n	800b686 <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b67a:	69fb      	ldr	r3, [r7, #28]
 800b67c:	685b      	ldr	r3, [r3, #4]
 800b67e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b680:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b682:	429a      	cmp	r2, r3
 800b684:	d906      	bls.n	800b694 <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 800b686:	231a      	movs	r3, #26
 800b688:	2218      	movs	r2, #24
 800b68a:	189b      	adds	r3, r3, r2
 800b68c:	19db      	adds	r3, r3, r7
 800b68e:	2201      	movs	r2, #1
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	e11e      	b.n	800b8d2 <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b694:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b696:	613b      	str	r3, [r7, #16]
 800b698:	2300      	movs	r3, #0
 800b69a:	617b      	str	r3, [r7, #20]
 800b69c:	6939      	ldr	r1, [r7, #16]
 800b69e:	697a      	ldr	r2, [r7, #20]
 800b6a0:	000b      	movs	r3, r1
 800b6a2:	0e1b      	lsrs	r3, r3, #24
 800b6a4:	0010      	movs	r0, r2
 800b6a6:	0205      	lsls	r5, r0, #8
 800b6a8:	431d      	orrs	r5, r3
 800b6aa:	000b      	movs	r3, r1
 800b6ac:	021c      	lsls	r4, r3, #8
 800b6ae:	69fb      	ldr	r3, [r7, #28]
 800b6b0:	685b      	ldr	r3, [r3, #4]
 800b6b2:	085b      	lsrs	r3, r3, #1
 800b6b4:	60bb      	str	r3, [r7, #8]
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]
 800b6ba:	68b8      	ldr	r0, [r7, #8]
 800b6bc:	68f9      	ldr	r1, [r7, #12]
 800b6be:	1900      	adds	r0, r0, r4
 800b6c0:	4169      	adcs	r1, r5
 800b6c2:	69fb      	ldr	r3, [r7, #28]
 800b6c4:	685b      	ldr	r3, [r3, #4]
 800b6c6:	603b      	str	r3, [r7, #0]
 800b6c8:	2300      	movs	r3, #0
 800b6ca:	607b      	str	r3, [r7, #4]
 800b6cc:	683a      	ldr	r2, [r7, #0]
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	f7f4 ff24 	bl	800051c <__aeabi_uldivmod>
 800b6d4:	0002      	movs	r2, r0
 800b6d6:	000b      	movs	r3, r1
 800b6d8:	0013      	movs	r3, r2
 800b6da:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b6dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6de:	23c0      	movs	r3, #192	@ 0xc0
 800b6e0:	009b      	lsls	r3, r3, #2
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	d309      	bcc.n	800b6fa <UART_SetConfig+0x332>
 800b6e6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6e8:	2380      	movs	r3, #128	@ 0x80
 800b6ea:	035b      	lsls	r3, r3, #13
 800b6ec:	429a      	cmp	r2, r3
 800b6ee:	d204      	bcs.n	800b6fa <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 800b6f0:	69fb      	ldr	r3, [r7, #28]
 800b6f2:	681b      	ldr	r3, [r3, #0]
 800b6f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b6f6:	60da      	str	r2, [r3, #12]
 800b6f8:	e0eb      	b.n	800b8d2 <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 800b6fa:	231a      	movs	r3, #26
 800b6fc:	2218      	movs	r2, #24
 800b6fe:	189b      	adds	r3, r3, r2
 800b700:	19db      	adds	r3, r3, r7
 800b702:	2201      	movs	r2, #1
 800b704:	701a      	strb	r2, [r3, #0]
 800b706:	e0e4      	b.n	800b8d2 <UART_SetConfig+0x50a>
 800b708:	efff69f3 	.word	0xefff69f3
 800b70c:	ffffcfff 	.word	0xffffcfff
 800b710:	40004800 	.word	0x40004800
 800b714:	fffff4ff 	.word	0xfffff4ff
 800b718:	40013800 	.word	0x40013800
 800b71c:	40021000 	.word	0x40021000
 800b720:	40004400 	.word	0x40004400
 800b724:	40004c00 	.word	0x40004c00
 800b728:	40005000 	.word	0x40005000
 800b72c:	003d0900 	.word	0x003d0900
 800b730:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	69da      	ldr	r2, [r3, #28]
 800b738:	2380      	movs	r3, #128	@ 0x80
 800b73a:	021b      	lsls	r3, r3, #8
 800b73c:	429a      	cmp	r2, r3
 800b73e:	d000      	beq.n	800b742 <UART_SetConfig+0x37a>
 800b740:	e070      	b.n	800b824 <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 800b742:	231b      	movs	r3, #27
 800b744:	2218      	movs	r2, #24
 800b746:	189b      	adds	r3, r3, r2
 800b748:	19db      	adds	r3, r3, r7
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	2b08      	cmp	r3, #8
 800b74e:	d822      	bhi.n	800b796 <UART_SetConfig+0x3ce>
 800b750:	009a      	lsls	r2, r3, #2
 800b752:	4b67      	ldr	r3, [pc, #412]	@ (800b8f0 <UART_SetConfig+0x528>)
 800b754:	18d3      	adds	r3, r2, r3
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b75a:	f7fe fd8b 	bl	800a274 <HAL_RCC_GetPCLK1Freq>
 800b75e:	0003      	movs	r3, r0
 800b760:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b762:	e021      	b.n	800b7a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b764:	f7fe fd9c 	bl	800a2a0 <HAL_RCC_GetPCLK2Freq>
 800b768:	0003      	movs	r3, r0
 800b76a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b76c:	e01c      	b.n	800b7a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b76e:	4b61      	ldr	r3, [pc, #388]	@ (800b8f4 <UART_SetConfig+0x52c>)
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	2210      	movs	r2, #16
 800b774:	4013      	ands	r3, r2
 800b776:	d002      	beq.n	800b77e <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b778:	4b5f      	ldr	r3, [pc, #380]	@ (800b8f8 <UART_SetConfig+0x530>)
 800b77a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b77c:	e014      	b.n	800b7a8 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 800b77e:	4b5f      	ldr	r3, [pc, #380]	@ (800b8fc <UART_SetConfig+0x534>)
 800b780:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b782:	e011      	b.n	800b7a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b784:	f7fe fcc6 	bl	800a114 <HAL_RCC_GetSysClockFreq>
 800b788:	0003      	movs	r3, r0
 800b78a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b78c:	e00c      	b.n	800b7a8 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b78e:	2380      	movs	r3, #128	@ 0x80
 800b790:	021b      	lsls	r3, r3, #8
 800b792:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b794:	e008      	b.n	800b7a8 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 800b796:	2300      	movs	r3, #0
 800b798:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800b79a:	231a      	movs	r3, #26
 800b79c:	2218      	movs	r2, #24
 800b79e:	189b      	adds	r3, r3, r2
 800b7a0:	19db      	adds	r3, r3, r7
 800b7a2:	2201      	movs	r2, #1
 800b7a4:	701a      	strb	r2, [r3, #0]
        break;
 800b7a6:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b7a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d100      	bne.n	800b7b0 <UART_SetConfig+0x3e8>
 800b7ae:	e090      	b.n	800b8d2 <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b7b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b7b2:	005a      	lsls	r2, r3, #1
 800b7b4:	69fb      	ldr	r3, [r7, #28]
 800b7b6:	685b      	ldr	r3, [r3, #4]
 800b7b8:	085b      	lsrs	r3, r3, #1
 800b7ba:	18d2      	adds	r2, r2, r3
 800b7bc:	69fb      	ldr	r3, [r7, #28]
 800b7be:	685b      	ldr	r3, [r3, #4]
 800b7c0:	0019      	movs	r1, r3
 800b7c2:	0010      	movs	r0, r2
 800b7c4:	f7f4 fcbc 	bl	8000140 <__udivsi3>
 800b7c8:	0003      	movs	r3, r0
 800b7ca:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b7cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7ce:	2b0f      	cmp	r3, #15
 800b7d0:	d921      	bls.n	800b816 <UART_SetConfig+0x44e>
 800b7d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b7d4:	2380      	movs	r3, #128	@ 0x80
 800b7d6:	025b      	lsls	r3, r3, #9
 800b7d8:	429a      	cmp	r2, r3
 800b7da:	d21c      	bcs.n	800b816 <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b7dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7de:	b29a      	uxth	r2, r3
 800b7e0:	200e      	movs	r0, #14
 800b7e2:	2418      	movs	r4, #24
 800b7e4:	1903      	adds	r3, r0, r4
 800b7e6:	19db      	adds	r3, r3, r7
 800b7e8:	210f      	movs	r1, #15
 800b7ea:	438a      	bics	r2, r1
 800b7ec:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b7f0:	085b      	lsrs	r3, r3, #1
 800b7f2:	b29b      	uxth	r3, r3
 800b7f4:	2207      	movs	r2, #7
 800b7f6:	4013      	ands	r3, r2
 800b7f8:	b299      	uxth	r1, r3
 800b7fa:	1903      	adds	r3, r0, r4
 800b7fc:	19db      	adds	r3, r3, r7
 800b7fe:	1902      	adds	r2, r0, r4
 800b800:	19d2      	adds	r2, r2, r7
 800b802:	8812      	ldrh	r2, [r2, #0]
 800b804:	430a      	orrs	r2, r1
 800b806:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800b808:	69fb      	ldr	r3, [r7, #28]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	1902      	adds	r2, r0, r4
 800b80e:	19d2      	adds	r2, r2, r7
 800b810:	8812      	ldrh	r2, [r2, #0]
 800b812:	60da      	str	r2, [r3, #12]
 800b814:	e05d      	b.n	800b8d2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800b816:	231a      	movs	r3, #26
 800b818:	2218      	movs	r2, #24
 800b81a:	189b      	adds	r3, r3, r2
 800b81c:	19db      	adds	r3, r3, r7
 800b81e:	2201      	movs	r2, #1
 800b820:	701a      	strb	r2, [r3, #0]
 800b822:	e056      	b.n	800b8d2 <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b824:	231b      	movs	r3, #27
 800b826:	2218      	movs	r2, #24
 800b828:	189b      	adds	r3, r3, r2
 800b82a:	19db      	adds	r3, r3, r7
 800b82c:	781b      	ldrb	r3, [r3, #0]
 800b82e:	2b08      	cmp	r3, #8
 800b830:	d822      	bhi.n	800b878 <UART_SetConfig+0x4b0>
 800b832:	009a      	lsls	r2, r3, #2
 800b834:	4b32      	ldr	r3, [pc, #200]	@ (800b900 <UART_SetConfig+0x538>)
 800b836:	18d3      	adds	r3, r2, r3
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b83c:	f7fe fd1a 	bl	800a274 <HAL_RCC_GetPCLK1Freq>
 800b840:	0003      	movs	r3, r0
 800b842:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b844:	e021      	b.n	800b88a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b846:	f7fe fd2b 	bl	800a2a0 <HAL_RCC_GetPCLK2Freq>
 800b84a:	0003      	movs	r3, r0
 800b84c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b84e:	e01c      	b.n	800b88a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b850:	4b28      	ldr	r3, [pc, #160]	@ (800b8f4 <UART_SetConfig+0x52c>)
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	2210      	movs	r2, #16
 800b856:	4013      	ands	r3, r2
 800b858:	d002      	beq.n	800b860 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 800b85a:	4b27      	ldr	r3, [pc, #156]	@ (800b8f8 <UART_SetConfig+0x530>)
 800b85c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800b85e:	e014      	b.n	800b88a <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 800b860:	4b26      	ldr	r3, [pc, #152]	@ (800b8fc <UART_SetConfig+0x534>)
 800b862:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b864:	e011      	b.n	800b88a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b866:	f7fe fc55 	bl	800a114 <HAL_RCC_GetSysClockFreq>
 800b86a:	0003      	movs	r3, r0
 800b86c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b86e:	e00c      	b.n	800b88a <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b870:	2380      	movs	r3, #128	@ 0x80
 800b872:	021b      	lsls	r3, r3, #8
 800b874:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 800b876:	e008      	b.n	800b88a <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 800b878:	2300      	movs	r3, #0
 800b87a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 800b87c:	231a      	movs	r3, #26
 800b87e:	2218      	movs	r2, #24
 800b880:	189b      	adds	r3, r3, r2
 800b882:	19db      	adds	r3, r3, r7
 800b884:	2201      	movs	r2, #1
 800b886:	701a      	strb	r2, [r3, #0]
        break;
 800b888:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 800b88a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d020      	beq.n	800b8d2 <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	685b      	ldr	r3, [r3, #4]
 800b894:	085a      	lsrs	r2, r3, #1
 800b896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b898:	18d2      	adds	r2, r2, r3
 800b89a:	69fb      	ldr	r3, [r7, #28]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	0019      	movs	r1, r3
 800b8a0:	0010      	movs	r0, r2
 800b8a2:	f7f4 fc4d 	bl	8000140 <__udivsi3>
 800b8a6:	0003      	movs	r3, r0
 800b8a8:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8ac:	2b0f      	cmp	r3, #15
 800b8ae:	d90a      	bls.n	800b8c6 <UART_SetConfig+0x4fe>
 800b8b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b8b2:	2380      	movs	r3, #128	@ 0x80
 800b8b4:	025b      	lsls	r3, r3, #9
 800b8b6:	429a      	cmp	r2, r3
 800b8b8:	d205      	bcs.n	800b8c6 <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b8ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b8bc:	b29a      	uxth	r2, r3
 800b8be:	69fb      	ldr	r3, [r7, #28]
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	60da      	str	r2, [r3, #12]
 800b8c4:	e005      	b.n	800b8d2 <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 800b8c6:	231a      	movs	r3, #26
 800b8c8:	2218      	movs	r2, #24
 800b8ca:	189b      	adds	r3, r3, r2
 800b8cc:	19db      	adds	r3, r3, r7
 800b8ce:	2201      	movs	r2, #1
 800b8d0:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b8d2:	69fb      	ldr	r3, [r7, #28]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	2200      	movs	r2, #0
 800b8dc:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800b8de:	231a      	movs	r3, #26
 800b8e0:	2218      	movs	r2, #24
 800b8e2:	189b      	adds	r3, r3, r2
 800b8e4:	19db      	adds	r3, r3, r7
 800b8e6:	781b      	ldrb	r3, [r3, #0]
}
 800b8e8:	0018      	movs	r0, r3
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	b00e      	add	sp, #56	@ 0x38
 800b8ee:	bdb0      	pop	{r4, r5, r7, pc}
 800b8f0:	0800fb40 	.word	0x0800fb40
 800b8f4:	40021000 	.word	0x40021000
 800b8f8:	003d0900 	.word	0x003d0900
 800b8fc:	00f42400 	.word	0x00f42400
 800b900:	0800fb64 	.word	0x0800fb64

0800b904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b904:	b580      	push	{r7, lr}
 800b906:	b082      	sub	sp, #8
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b910:	2201      	movs	r2, #1
 800b912:	4013      	ands	r3, r2
 800b914:	d00b      	beq.n	800b92e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	685b      	ldr	r3, [r3, #4]
 800b91c:	4a4a      	ldr	r2, [pc, #296]	@ (800ba48 <UART_AdvFeatureConfig+0x144>)
 800b91e:	4013      	ands	r3, r2
 800b920:	0019      	movs	r1, r3
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	430a      	orrs	r2, r1
 800b92c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b932:	2202      	movs	r2, #2
 800b934:	4013      	ands	r3, r2
 800b936:	d00b      	beq.n	800b950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	685b      	ldr	r3, [r3, #4]
 800b93e:	4a43      	ldr	r2, [pc, #268]	@ (800ba4c <UART_AdvFeatureConfig+0x148>)
 800b940:	4013      	ands	r3, r2
 800b942:	0019      	movs	r1, r3
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	430a      	orrs	r2, r1
 800b94e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b954:	2204      	movs	r2, #4
 800b956:	4013      	ands	r3, r2
 800b958:	d00b      	beq.n	800b972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	685b      	ldr	r3, [r3, #4]
 800b960:	4a3b      	ldr	r2, [pc, #236]	@ (800ba50 <UART_AdvFeatureConfig+0x14c>)
 800b962:	4013      	ands	r3, r2
 800b964:	0019      	movs	r1, r3
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	430a      	orrs	r2, r1
 800b970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b976:	2208      	movs	r2, #8
 800b978:	4013      	ands	r3, r2
 800b97a:	d00b      	beq.n	800b994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	685b      	ldr	r3, [r3, #4]
 800b982:	4a34      	ldr	r2, [pc, #208]	@ (800ba54 <UART_AdvFeatureConfig+0x150>)
 800b984:	4013      	ands	r3, r2
 800b986:	0019      	movs	r1, r3
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	430a      	orrs	r2, r1
 800b992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b998:	2210      	movs	r2, #16
 800b99a:	4013      	ands	r3, r2
 800b99c:	d00b      	beq.n	800b9b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	689b      	ldr	r3, [r3, #8]
 800b9a4:	4a2c      	ldr	r2, [pc, #176]	@ (800ba58 <UART_AdvFeatureConfig+0x154>)
 800b9a6:	4013      	ands	r3, r2
 800b9a8:	0019      	movs	r1, r3
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	430a      	orrs	r2, r1
 800b9b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9ba:	2220      	movs	r2, #32
 800b9bc:	4013      	ands	r3, r2
 800b9be:	d00b      	beq.n	800b9d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	681b      	ldr	r3, [r3, #0]
 800b9c4:	689b      	ldr	r3, [r3, #8]
 800b9c6:	4a25      	ldr	r2, [pc, #148]	@ (800ba5c <UART_AdvFeatureConfig+0x158>)
 800b9c8:	4013      	ands	r3, r2
 800b9ca:	0019      	movs	r1, r3
 800b9cc:	687b      	ldr	r3, [r7, #4]
 800b9ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	430a      	orrs	r2, r1
 800b9d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b9dc:	2240      	movs	r2, #64	@ 0x40
 800b9de:	4013      	ands	r3, r2
 800b9e0:	d01d      	beq.n	800ba1e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	685b      	ldr	r3, [r3, #4]
 800b9e8:	4a1d      	ldr	r2, [pc, #116]	@ (800ba60 <UART_AdvFeatureConfig+0x15c>)
 800b9ea:	4013      	ands	r3, r2
 800b9ec:	0019      	movs	r1, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9f2:	687b      	ldr	r3, [r7, #4]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	430a      	orrs	r2, r1
 800b9f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800b9fe:	2380      	movs	r3, #128	@ 0x80
 800ba00:	035b      	lsls	r3, r3, #13
 800ba02:	429a      	cmp	r2, r3
 800ba04:	d10b      	bne.n	800ba1e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	685b      	ldr	r3, [r3, #4]
 800ba0c:	4a15      	ldr	r2, [pc, #84]	@ (800ba64 <UART_AdvFeatureConfig+0x160>)
 800ba0e:	4013      	ands	r3, r2
 800ba10:	0019      	movs	r1, r3
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	681b      	ldr	r3, [r3, #0]
 800ba1a:	430a      	orrs	r2, r1
 800ba1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ba22:	2280      	movs	r2, #128	@ 0x80
 800ba24:	4013      	ands	r3, r2
 800ba26:	d00b      	beq.n	800ba40 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	685b      	ldr	r3, [r3, #4]
 800ba2e:	4a0e      	ldr	r2, [pc, #56]	@ (800ba68 <UART_AdvFeatureConfig+0x164>)
 800ba30:	4013      	ands	r3, r2
 800ba32:	0019      	movs	r1, r3
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ba38:	687b      	ldr	r3, [r7, #4]
 800ba3a:	681b      	ldr	r3, [r3, #0]
 800ba3c:	430a      	orrs	r2, r1
 800ba3e:	605a      	str	r2, [r3, #4]
  }
}
 800ba40:	46c0      	nop			@ (mov r8, r8)
 800ba42:	46bd      	mov	sp, r7
 800ba44:	b002      	add	sp, #8
 800ba46:	bd80      	pop	{r7, pc}
 800ba48:	fffdffff 	.word	0xfffdffff
 800ba4c:	fffeffff 	.word	0xfffeffff
 800ba50:	fffbffff 	.word	0xfffbffff
 800ba54:	ffff7fff 	.word	0xffff7fff
 800ba58:	ffffefff 	.word	0xffffefff
 800ba5c:	ffffdfff 	.word	0xffffdfff
 800ba60:	ffefffff 	.word	0xffefffff
 800ba64:	ff9fffff 	.word	0xff9fffff
 800ba68:	fff7ffff 	.word	0xfff7ffff

0800ba6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b092      	sub	sp, #72	@ 0x48
 800ba70:	af02      	add	r7, sp, #8
 800ba72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ba74:	687b      	ldr	r3, [r7, #4]
 800ba76:	2284      	movs	r2, #132	@ 0x84
 800ba78:	2100      	movs	r1, #0
 800ba7a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ba7c:	f7fa fdee 	bl	800665c <HAL_GetTick>
 800ba80:	0003      	movs	r3, r0
 800ba82:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	681b      	ldr	r3, [r3, #0]
 800ba8a:	2208      	movs	r2, #8
 800ba8c:	4013      	ands	r3, r2
 800ba8e:	2b08      	cmp	r3, #8
 800ba90:	d12c      	bne.n	800baec <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ba92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba94:	2280      	movs	r2, #128	@ 0x80
 800ba96:	0391      	lsls	r1, r2, #14
 800ba98:	6878      	ldr	r0, [r7, #4]
 800ba9a:	4a46      	ldr	r2, [pc, #280]	@ (800bbb4 <UART_CheckIdleState+0x148>)
 800ba9c:	9200      	str	r2, [sp, #0]
 800ba9e:	2200      	movs	r2, #0
 800baa0:	f000 f88c 	bl	800bbbc <UART_WaitOnFlagUntilTimeout>
 800baa4:	1e03      	subs	r3, r0, #0
 800baa6:	d021      	beq.n	800baec <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baa8:	f3ef 8310 	mrs	r3, PRIMASK
 800baac:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800baae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800bab0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bab2:	2301      	movs	r3, #1
 800bab4:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bab8:	f383 8810 	msr	PRIMASK, r3
}
 800babc:	46c0      	nop			@ (mov r8, r8)
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	681b      	ldr	r3, [r3, #0]
 800bac2:	681a      	ldr	r2, [r3, #0]
 800bac4:	687b      	ldr	r3, [r7, #4]
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2180      	movs	r1, #128	@ 0x80
 800baca:	438a      	bics	r2, r1
 800bacc:	601a      	str	r2, [r3, #0]
 800bace:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bad4:	f383 8810 	msr	PRIMASK, r3
}
 800bad8:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	2220      	movs	r2, #32
 800bade:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800bae0:	687b      	ldr	r3, [r7, #4]
 800bae2:	2278      	movs	r2, #120	@ 0x78
 800bae4:	2100      	movs	r1, #0
 800bae6:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bae8:	2303      	movs	r3, #3
 800baea:	e05f      	b.n	800bbac <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2204      	movs	r2, #4
 800baf4:	4013      	ands	r3, r2
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	d146      	bne.n	800bb88 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bafa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bafc:	2280      	movs	r2, #128	@ 0x80
 800bafe:	03d1      	lsls	r1, r2, #15
 800bb00:	6878      	ldr	r0, [r7, #4]
 800bb02:	4a2c      	ldr	r2, [pc, #176]	@ (800bbb4 <UART_CheckIdleState+0x148>)
 800bb04:	9200      	str	r2, [sp, #0]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f000 f858 	bl	800bbbc <UART_WaitOnFlagUntilTimeout>
 800bb0c:	1e03      	subs	r3, r0, #0
 800bb0e:	d03b      	beq.n	800bb88 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb10:	f3ef 8310 	mrs	r3, PRIMASK
 800bb14:	60fb      	str	r3, [r7, #12]
  return(result);
 800bb16:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800bb18:	637b      	str	r3, [r7, #52]	@ 0x34
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb1e:	693b      	ldr	r3, [r7, #16]
 800bb20:	f383 8810 	msr	PRIMASK, r3
}
 800bb24:	46c0      	nop			@ (mov r8, r8)
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	681b      	ldr	r3, [r3, #0]
 800bb2a:	681a      	ldr	r2, [r3, #0]
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	681b      	ldr	r3, [r3, #0]
 800bb30:	4921      	ldr	r1, [pc, #132]	@ (800bbb8 <UART_CheckIdleState+0x14c>)
 800bb32:	400a      	ands	r2, r1
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bb38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb3a:	697b      	ldr	r3, [r7, #20]
 800bb3c:	f383 8810 	msr	PRIMASK, r3
}
 800bb40:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bb42:	f3ef 8310 	mrs	r3, PRIMASK
 800bb46:	61bb      	str	r3, [r7, #24]
  return(result);
 800bb48:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb4a:	633b      	str	r3, [r7, #48]	@ 0x30
 800bb4c:	2301      	movs	r3, #1
 800bb4e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	f383 8810 	msr	PRIMASK, r3
}
 800bb56:	46c0      	nop			@ (mov r8, r8)
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	689a      	ldr	r2, [r3, #8]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	2101      	movs	r1, #1
 800bb64:	438a      	bics	r2, r1
 800bb66:	609a      	str	r2, [r3, #8]
 800bb68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb6a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bb6c:	6a3b      	ldr	r3, [r7, #32]
 800bb6e:	f383 8810 	msr	PRIMASK, r3
}
 800bb72:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2280      	movs	r2, #128	@ 0x80
 800bb78:	2120      	movs	r1, #32
 800bb7a:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	2278      	movs	r2, #120	@ 0x78
 800bb80:	2100      	movs	r1, #0
 800bb82:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bb84:	2303      	movs	r3, #3
 800bb86:	e011      	b.n	800bbac <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	2220      	movs	r2, #32
 800bb8c:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	2280      	movs	r2, #128	@ 0x80
 800bb92:	2120      	movs	r1, #32
 800bb94:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	2200      	movs	r2, #0
 800bba0:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800bba2:	687b      	ldr	r3, [r7, #4]
 800bba4:	2278      	movs	r2, #120	@ 0x78
 800bba6:	2100      	movs	r1, #0
 800bba8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800bbaa:	2300      	movs	r3, #0
}
 800bbac:	0018      	movs	r0, r3
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	b010      	add	sp, #64	@ 0x40
 800bbb2:	bd80      	pop	{r7, pc}
 800bbb4:	01ffffff 	.word	0x01ffffff
 800bbb8:	fffffedf 	.word	0xfffffedf

0800bbbc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800bbbc:	b580      	push	{r7, lr}
 800bbbe:	b084      	sub	sp, #16
 800bbc0:	af00      	add	r7, sp, #0
 800bbc2:	60f8      	str	r0, [r7, #12]
 800bbc4:	60b9      	str	r1, [r7, #8]
 800bbc6:	603b      	str	r3, [r7, #0]
 800bbc8:	1dfb      	adds	r3, r7, #7
 800bbca:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bbcc:	e04b      	b.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	3301      	adds	r3, #1
 800bbd2:	d048      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bbd4:	f7fa fd42 	bl	800665c <HAL_GetTick>
 800bbd8:	0002      	movs	r2, r0
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	1ad3      	subs	r3, r2, r3
 800bbde:	69ba      	ldr	r2, [r7, #24]
 800bbe0:	429a      	cmp	r2, r3
 800bbe2:	d302      	bcc.n	800bbea <UART_WaitOnFlagUntilTimeout+0x2e>
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	2b00      	cmp	r3, #0
 800bbe8:	d101      	bne.n	800bbee <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800bbea:	2303      	movs	r3, #3
 800bbec:	e04b      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681b      	ldr	r3, [r3, #0]
 800bbf4:	2204      	movs	r2, #4
 800bbf6:	4013      	ands	r3, r2
 800bbf8:	d035      	beq.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bbfa:	68fb      	ldr	r3, [r7, #12]
 800bbfc:	681b      	ldr	r3, [r3, #0]
 800bbfe:	69db      	ldr	r3, [r3, #28]
 800bc00:	2208      	movs	r2, #8
 800bc02:	4013      	ands	r3, r2
 800bc04:	2b08      	cmp	r3, #8
 800bc06:	d111      	bne.n	800bc2c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	2208      	movs	r2, #8
 800bc0e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	0018      	movs	r0, r3
 800bc14:	f000 f900 	bl	800be18 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	2284      	movs	r2, #132	@ 0x84
 800bc1c:	2108      	movs	r1, #8
 800bc1e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2278      	movs	r2, #120	@ 0x78
 800bc24:	2100      	movs	r1, #0
 800bc26:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 800bc28:	2301      	movs	r3, #1
 800bc2a:	e02c      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	69da      	ldr	r2, [r3, #28]
 800bc32:	2380      	movs	r3, #128	@ 0x80
 800bc34:	011b      	lsls	r3, r3, #4
 800bc36:	401a      	ands	r2, r3
 800bc38:	2380      	movs	r3, #128	@ 0x80
 800bc3a:	011b      	lsls	r3, r3, #4
 800bc3c:	429a      	cmp	r2, r3
 800bc3e:	d112      	bne.n	800bc66 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	2280      	movs	r2, #128	@ 0x80
 800bc46:	0112      	lsls	r2, r2, #4
 800bc48:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	0018      	movs	r0, r3
 800bc4e:	f000 f8e3 	bl	800be18 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bc52:	68fb      	ldr	r3, [r7, #12]
 800bc54:	2284      	movs	r2, #132	@ 0x84
 800bc56:	2120      	movs	r1, #32
 800bc58:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	2278      	movs	r2, #120	@ 0x78
 800bc5e:	2100      	movs	r1, #0
 800bc60:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800bc62:	2303      	movs	r3, #3
 800bc64:	e00f      	b.n	800bc86 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	69db      	ldr	r3, [r3, #28]
 800bc6c:	68ba      	ldr	r2, [r7, #8]
 800bc6e:	4013      	ands	r3, r2
 800bc70:	68ba      	ldr	r2, [r7, #8]
 800bc72:	1ad3      	subs	r3, r2, r3
 800bc74:	425a      	negs	r2, r3
 800bc76:	4153      	adcs	r3, r2
 800bc78:	b2db      	uxtb	r3, r3
 800bc7a:	001a      	movs	r2, r3
 800bc7c:	1dfb      	adds	r3, r7, #7
 800bc7e:	781b      	ldrb	r3, [r3, #0]
 800bc80:	429a      	cmp	r2, r3
 800bc82:	d0a4      	beq.n	800bbce <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bc84:	2300      	movs	r3, #0
}
 800bc86:	0018      	movs	r0, r3
 800bc88:	46bd      	mov	sp, r7
 800bc8a:	b004      	add	sp, #16
 800bc8c:	bd80      	pop	{r7, pc}
	...

0800bc90 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bc90:	b580      	push	{r7, lr}
 800bc92:	b090      	sub	sp, #64	@ 0x40
 800bc94:	af00      	add	r7, sp, #0
 800bc96:	60f8      	str	r0, [r7, #12]
 800bc98:	60b9      	str	r1, [r7, #8]
 800bc9a:	1dbb      	adds	r3, r7, #6
 800bc9c:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 800bc9e:	68fb      	ldr	r3, [r7, #12]
 800bca0:	68ba      	ldr	r2, [r7, #8]
 800bca2:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	1dba      	adds	r2, r7, #6
 800bca8:	2158      	movs	r1, #88	@ 0x58
 800bcaa:	8812      	ldrh	r2, [r2, #0]
 800bcac:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcae:	68fb      	ldr	r3, [r7, #12]
 800bcb0:	2284      	movs	r2, #132	@ 0x84
 800bcb2:	2100      	movs	r1, #0
 800bcb4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800bcb6:	68fb      	ldr	r3, [r7, #12]
 800bcb8:	2280      	movs	r2, #128	@ 0x80
 800bcba:	2122      	movs	r1, #34	@ 0x22
 800bcbc:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 800bcbe:	68fb      	ldr	r3, [r7, #12]
 800bcc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d028      	beq.n	800bd18 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800bcc6:	68fb      	ldr	r3, [r7, #12]
 800bcc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcca:	4a3e      	ldr	r2, [pc, #248]	@ (800bdc4 <UART_Start_Receive_DMA+0x134>)
 800bccc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcd2:	4a3d      	ldr	r2, [pc, #244]	@ (800bdc8 <UART_Start_Receive_DMA+0x138>)
 800bcd4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800bcd6:	68fb      	ldr	r3, [r7, #12]
 800bcd8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bcda:	4a3c      	ldr	r2, [pc, #240]	@ (800bdcc <UART_Start_Receive_DMA+0x13c>)
 800bcdc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800bce2:	2200      	movs	r2, #0
 800bce4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	681b      	ldr	r3, [r3, #0]
 800bcee:	3324      	adds	r3, #36	@ 0x24
 800bcf0:	0019      	movs	r1, r3
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bcf6:	001a      	movs	r2, r3
 800bcf8:	1dbb      	adds	r3, r7, #6
 800bcfa:	881b      	ldrh	r3, [r3, #0]
 800bcfc:	f7fa fe32 	bl	8006964 <HAL_DMA_Start_IT>
 800bd00:	1e03      	subs	r3, r0, #0
 800bd02:	d009      	beq.n	800bd18 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	2284      	movs	r2, #132	@ 0x84
 800bd08:	2110      	movs	r1, #16
 800bd0a:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	2280      	movs	r2, #128	@ 0x80
 800bd10:	2120      	movs	r1, #32
 800bd12:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 800bd14:	2301      	movs	r3, #1
 800bd16:	e050      	b.n	800bdba <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	691b      	ldr	r3, [r3, #16]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d019      	beq.n	800bd54 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd20:	f3ef 8310 	mrs	r3, PRIMASK
 800bd24:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 800bd26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bd28:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800bd2a:	2301      	movs	r3, #1
 800bd2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd30:	f383 8810 	msr	PRIMASK, r3
}
 800bd34:	46c0      	nop			@ (mov r8, r8)
 800bd36:	68fb      	ldr	r3, [r7, #12]
 800bd38:	681b      	ldr	r3, [r3, #0]
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	681b      	ldr	r3, [r3, #0]
 800bd40:	2180      	movs	r1, #128	@ 0x80
 800bd42:	0049      	lsls	r1, r1, #1
 800bd44:	430a      	orrs	r2, r1
 800bd46:	601a      	str	r2, [r3, #0]
 800bd48:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bd4a:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bd4e:	f383 8810 	msr	PRIMASK, r3
}
 800bd52:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd54:	f3ef 8310 	mrs	r3, PRIMASK
 800bd58:	613b      	str	r3, [r7, #16]
  return(result);
 800bd5a:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bd5c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd5e:	2301      	movs	r3, #1
 800bd60:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd62:	697b      	ldr	r3, [r7, #20]
 800bd64:	f383 8810 	msr	PRIMASK, r3
}
 800bd68:	46c0      	nop			@ (mov r8, r8)
 800bd6a:	68fb      	ldr	r3, [r7, #12]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	689a      	ldr	r2, [r3, #8]
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	2101      	movs	r1, #1
 800bd76:	430a      	orrs	r2, r1
 800bd78:	609a      	str	r2, [r3, #8]
 800bd7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd7c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd7e:	69bb      	ldr	r3, [r7, #24]
 800bd80:	f383 8810 	msr	PRIMASK, r3
}
 800bd84:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bd86:	f3ef 8310 	mrs	r3, PRIMASK
 800bd8a:	61fb      	str	r3, [r7, #28]
  return(result);
 800bd8c:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bd8e:	637b      	str	r3, [r7, #52]	@ 0x34
 800bd90:	2301      	movs	r3, #1
 800bd92:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bd94:	6a3b      	ldr	r3, [r7, #32]
 800bd96:	f383 8810 	msr	PRIMASK, r3
}
 800bd9a:	46c0      	nop			@ (mov r8, r8)
 800bd9c:	68fb      	ldr	r3, [r7, #12]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	689a      	ldr	r2, [r3, #8]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	2140      	movs	r1, #64	@ 0x40
 800bda8:	430a      	orrs	r2, r1
 800bdaa:	609a      	str	r2, [r3, #8]
 800bdac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bdae:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bdb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdb2:	f383 8810 	msr	PRIMASK, r3
}
 800bdb6:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 800bdb8:	2300      	movs	r3, #0
}
 800bdba:	0018      	movs	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	b010      	add	sp, #64	@ 0x40
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	46c0      	nop			@ (mov r8, r8)
 800bdc4:	0800bfa1 	.word	0x0800bfa1
 800bdc8:	0800c0d5 	.word	0x0800c0d5
 800bdcc:	0800c11d 	.word	0x0800c11d

0800bdd0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800bdd0:	b580      	push	{r7, lr}
 800bdd2:	b086      	sub	sp, #24
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bdd8:	f3ef 8310 	mrs	r3, PRIMASK
 800bddc:	60bb      	str	r3, [r7, #8]
  return(result);
 800bdde:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800bde0:	617b      	str	r3, [r7, #20]
 800bde2:	2301      	movs	r3, #1
 800bde4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bde6:	68fb      	ldr	r3, [r7, #12]
 800bde8:	f383 8810 	msr	PRIMASK, r3
}
 800bdec:	46c0      	nop			@ (mov r8, r8)
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	681a      	ldr	r2, [r3, #0]
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	21c0      	movs	r1, #192	@ 0xc0
 800bdfa:	438a      	bics	r2, r1
 800bdfc:	601a      	str	r2, [r3, #0]
 800bdfe:	697b      	ldr	r3, [r7, #20]
 800be00:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be02:	693b      	ldr	r3, [r7, #16]
 800be04:	f383 8810 	msr	PRIMASK, r3
}
 800be08:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800be0a:	687b      	ldr	r3, [r7, #4]
 800be0c:	2220      	movs	r2, #32
 800be0e:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800be10:	46c0      	nop			@ (mov r8, r8)
 800be12:	46bd      	mov	sp, r7
 800be14:	b006      	add	sp, #24
 800be16:	bd80      	pop	{r7, pc}

0800be18 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800be18:	b580      	push	{r7, lr}
 800be1a:	b08e      	sub	sp, #56	@ 0x38
 800be1c:	af00      	add	r7, sp, #0
 800be1e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be20:	f3ef 8310 	mrs	r3, PRIMASK
 800be24:	617b      	str	r3, [r7, #20]
  return(result);
 800be26:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800be28:	637b      	str	r3, [r7, #52]	@ 0x34
 800be2a:	2301      	movs	r3, #1
 800be2c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be2e:	69bb      	ldr	r3, [r7, #24]
 800be30:	f383 8810 	msr	PRIMASK, r3
}
 800be34:	46c0      	nop			@ (mov r8, r8)
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	681a      	ldr	r2, [r3, #0]
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	4926      	ldr	r1, [pc, #152]	@ (800bedc <UART_EndRxTransfer+0xc4>)
 800be42:	400a      	ands	r2, r1
 800be44:	601a      	str	r2, [r3, #0]
 800be46:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800be48:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be4a:	69fb      	ldr	r3, [r7, #28]
 800be4c:	f383 8810 	msr	PRIMASK, r3
}
 800be50:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be52:	f3ef 8310 	mrs	r3, PRIMASK
 800be56:	623b      	str	r3, [r7, #32]
  return(result);
 800be58:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800be5a:	633b      	str	r3, [r7, #48]	@ 0x30
 800be5c:	2301      	movs	r3, #1
 800be5e:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be62:	f383 8810 	msr	PRIMASK, r3
}
 800be66:	46c0      	nop			@ (mov r8, r8)
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	689a      	ldr	r2, [r3, #8]
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	681b      	ldr	r3, [r3, #0]
 800be72:	2101      	movs	r1, #1
 800be74:	438a      	bics	r2, r1
 800be76:	609a      	str	r2, [r3, #8]
 800be78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800be7e:	f383 8810 	msr	PRIMASK, r3
}
 800be82:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800be84:	687b      	ldr	r3, [r7, #4]
 800be86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800be88:	2b01      	cmp	r3, #1
 800be8a:	d118      	bne.n	800bebe <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800be8c:	f3ef 8310 	mrs	r3, PRIMASK
 800be90:	60bb      	str	r3, [r7, #8]
  return(result);
 800be92:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be94:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800be96:	2301      	movs	r3, #1
 800be98:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	f383 8810 	msr	PRIMASK, r3
}
 800bea0:	46c0      	nop			@ (mov r8, r8)
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	681a      	ldr	r2, [r3, #0]
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	681b      	ldr	r3, [r3, #0]
 800beac:	2110      	movs	r1, #16
 800beae:	438a      	bics	r2, r1
 800beb0:	601a      	str	r2, [r3, #0]
 800beb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800beb6:	693b      	ldr	r3, [r7, #16]
 800beb8:	f383 8810 	msr	PRIMASK, r3
}
 800bebc:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	2280      	movs	r2, #128	@ 0x80
 800bec2:	2120      	movs	r1, #32
 800bec4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bec6:	687b      	ldr	r3, [r7, #4]
 800bec8:	2200      	movs	r2, #0
 800beca:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800becc:	687b      	ldr	r3, [r7, #4]
 800bece:	2200      	movs	r2, #0
 800bed0:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800bed2:	46c0      	nop			@ (mov r8, r8)
 800bed4:	46bd      	mov	sp, r7
 800bed6:	b00e      	add	sp, #56	@ 0x38
 800bed8:	bd80      	pop	{r7, pc}
 800beda:	46c0      	nop			@ (mov r8, r8)
 800bedc:	fffffedf 	.word	0xfffffedf

0800bee0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b08c      	sub	sp, #48	@ 0x30
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800beec:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	681b      	ldr	r3, [r3, #0]
 800bef4:	2220      	movs	r2, #32
 800bef6:	4013      	ands	r3, r2
 800bef8:	d135      	bne.n	800bf66 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800befa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800befc:	2252      	movs	r2, #82	@ 0x52
 800befe:	2100      	movs	r1, #0
 800bf00:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf02:	f3ef 8310 	mrs	r3, PRIMASK
 800bf06:	60fb      	str	r3, [r7, #12]
  return(result);
 800bf08:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bf0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bf0c:	2301      	movs	r3, #1
 800bf0e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	f383 8810 	msr	PRIMASK, r3
}
 800bf16:	46c0      	nop			@ (mov r8, r8)
 800bf18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf1a:	681b      	ldr	r3, [r3, #0]
 800bf1c:	689a      	ldr	r2, [r3, #8]
 800bf1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	2180      	movs	r1, #128	@ 0x80
 800bf24:	438a      	bics	r2, r1
 800bf26:	609a      	str	r2, [r3, #8]
 800bf28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf2c:	697b      	ldr	r3, [r7, #20]
 800bf2e:	f383 8810 	msr	PRIMASK, r3
}
 800bf32:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bf34:	f3ef 8310 	mrs	r3, PRIMASK
 800bf38:	61bb      	str	r3, [r7, #24]
  return(result);
 800bf3a:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf3c:	627b      	str	r3, [r7, #36]	@ 0x24
 800bf3e:	2301      	movs	r3, #1
 800bf40:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf42:	69fb      	ldr	r3, [r7, #28]
 800bf44:	f383 8810 	msr	PRIMASK, r3
}
 800bf48:	46c0      	nop			@ (mov r8, r8)
 800bf4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf52:	681b      	ldr	r3, [r3, #0]
 800bf54:	2140      	movs	r1, #64	@ 0x40
 800bf56:	430a      	orrs	r2, r1
 800bf58:	601a      	str	r2, [r3, #0]
 800bf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf5c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bf5e:	6a3b      	ldr	r3, [r7, #32]
 800bf60:	f383 8810 	msr	PRIMASK, r3
}
 800bf64:	e006      	b.n	800bf74 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 800bf66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bf68:	228c      	movs	r2, #140	@ 0x8c
 800bf6a:	589b      	ldr	r3, [r3, r2]
 800bf6c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bf6e:	0010      	movs	r0, r2
 800bf70:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800bf72:	46c0      	nop			@ (mov r8, r8)
 800bf74:	46c0      	nop			@ (mov r8, r8)
 800bf76:	46bd      	mov	sp, r7
 800bf78:	b00c      	add	sp, #48	@ 0x30
 800bf7a:	bd80      	pop	{r7, pc}

0800bf7c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf88:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 800bf8a:	68fb      	ldr	r3, [r7, #12]
 800bf8c:	2288      	movs	r2, #136	@ 0x88
 800bf8e:	589b      	ldr	r3, [r3, r2]
 800bf90:	68fa      	ldr	r2, [r7, #12]
 800bf92:	0010      	movs	r0, r2
 800bf94:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf96:	46c0      	nop			@ (mov r8, r8)
 800bf98:	46bd      	mov	sp, r7
 800bf9a:	b004      	add	sp, #16
 800bf9c:	bd80      	pop	{r7, pc}
	...

0800bfa0 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800bfa0:	b580      	push	{r7, lr}
 800bfa2:	b094      	sub	sp, #80	@ 0x50
 800bfa4:	af00      	add	r7, sp, #0
 800bfa6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bfac:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	681b      	ldr	r3, [r3, #0]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	2220      	movs	r2, #32
 800bfb6:	4013      	ands	r3, r2
 800bfb8:	d16f      	bne.n	800c09a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 800bfba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfbc:	225a      	movs	r2, #90	@ 0x5a
 800bfbe:	2100      	movs	r1, #0
 800bfc0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bfc2:	f3ef 8310 	mrs	r3, PRIMASK
 800bfc6:	61bb      	str	r3, [r7, #24]
  return(result);
 800bfc8:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bfca:	64bb      	str	r3, [r7, #72]	@ 0x48
 800bfcc:	2301      	movs	r3, #1
 800bfce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfd0:	69fb      	ldr	r3, [r7, #28]
 800bfd2:	f383 8810 	msr	PRIMASK, r3
}
 800bfd6:	46c0      	nop			@ (mov r8, r8)
 800bfd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bfe0:	681b      	ldr	r3, [r3, #0]
 800bfe2:	493b      	ldr	r1, [pc, #236]	@ (800c0d0 <UART_DMAReceiveCplt+0x130>)
 800bfe4:	400a      	ands	r2, r1
 800bfe6:	601a      	str	r2, [r3, #0]
 800bfe8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800bfea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800bfec:	6a3b      	ldr	r3, [r7, #32]
 800bfee:	f383 8810 	msr	PRIMASK, r3
}
 800bff2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800bff4:	f3ef 8310 	mrs	r3, PRIMASK
 800bff8:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 800bffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bffc:	647b      	str	r3, [r7, #68]	@ 0x44
 800bffe:	2301      	movs	r3, #1
 800c000:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	f383 8810 	msr	PRIMASK, r3
}
 800c008:	46c0      	nop			@ (mov r8, r8)
 800c00a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c00c:	681b      	ldr	r3, [r3, #0]
 800c00e:	689a      	ldr	r2, [r3, #8]
 800c010:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	2101      	movs	r1, #1
 800c016:	438a      	bics	r2, r1
 800c018:	609a      	str	r2, [r3, #8]
 800c01a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800c01c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c01e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c020:	f383 8810 	msr	PRIMASK, r3
}
 800c024:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c026:	f3ef 8310 	mrs	r3, PRIMASK
 800c02a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 800c02c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c02e:	643b      	str	r3, [r7, #64]	@ 0x40
 800c030:	2301      	movs	r3, #1
 800c032:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c034:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800c036:	f383 8810 	msr	PRIMASK, r3
}
 800c03a:	46c0      	nop			@ (mov r8, r8)
 800c03c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	689a      	ldr	r2, [r3, #8]
 800c042:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2140      	movs	r1, #64	@ 0x40
 800c048:	438a      	bics	r2, r1
 800c04a:	609a      	str	r2, [r3, #8]
 800c04c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800c04e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c050:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800c052:	f383 8810 	msr	PRIMASK, r3
}
 800c056:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c05a:	2280      	movs	r2, #128	@ 0x80
 800c05c:	2120      	movs	r1, #32
 800c05e:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c060:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c064:	2b01      	cmp	r3, #1
 800c066:	d118      	bne.n	800c09a <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c068:	f3ef 8310 	mrs	r3, PRIMASK
 800c06c:	60fb      	str	r3, [r7, #12]
  return(result);
 800c06e:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c070:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800c072:	2301      	movs	r3, #1
 800c074:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c076:	693b      	ldr	r3, [r7, #16]
 800c078:	f383 8810 	msr	PRIMASK, r3
}
 800c07c:	46c0      	nop			@ (mov r8, r8)
 800c07e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c080:	681b      	ldr	r3, [r3, #0]
 800c082:	681a      	ldr	r2, [r3, #0]
 800c084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	2110      	movs	r1, #16
 800c08a:	438a      	bics	r2, r1
 800c08c:	601a      	str	r2, [r3, #0]
 800c08e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800c090:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	f383 8810 	msr	PRIMASK, r3
}
 800c098:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c09a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c09c:	2200      	movs	r2, #0
 800c09e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0a4:	2b01      	cmp	r3, #1
 800c0a6:	d109      	bne.n	800c0bc <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 800c0a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0aa:	22ac      	movs	r2, #172	@ 0xac
 800c0ac:	589b      	ldr	r3, [r3, r2]
 800c0ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0b0:	2158      	movs	r1, #88	@ 0x58
 800c0b2:	5a51      	ldrh	r1, [r2, r1]
 800c0b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0b6:	0010      	movs	r0, r2
 800c0b8:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c0ba:	e005      	b.n	800c0c8 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 800c0bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800c0be:	2294      	movs	r2, #148	@ 0x94
 800c0c0:	589b      	ldr	r3, [r3, r2]
 800c0c2:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800c0c4:	0010      	movs	r0, r2
 800c0c6:	4798      	blx	r3
}
 800c0c8:	46c0      	nop			@ (mov r8, r8)
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	b014      	add	sp, #80	@ 0x50
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	fffffeff 	.word	0xfffffeff

0800c0d4 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b084      	sub	sp, #16
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c0e0:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	2201      	movs	r2, #1
 800c0e6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d10b      	bne.n	800c108 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	22ac      	movs	r2, #172	@ 0xac
 800c0f4:	589b      	ldr	r3, [r3, r2]
 800c0f6:	68fa      	ldr	r2, [r7, #12]
 800c0f8:	2158      	movs	r1, #88	@ 0x58
 800c0fa:	5a52      	ldrh	r2, [r2, r1]
 800c0fc:	0852      	lsrs	r2, r2, #1
 800c0fe:	b291      	uxth	r1, r2
 800c100:	68fa      	ldr	r2, [r7, #12]
 800c102:	0010      	movs	r0, r2
 800c104:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800c106:	e005      	b.n	800c114 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 800c108:	68fb      	ldr	r3, [r7, #12]
 800c10a:	2290      	movs	r2, #144	@ 0x90
 800c10c:	589b      	ldr	r3, [r3, r2]
 800c10e:	68fa      	ldr	r2, [r7, #12]
 800c110:	0010      	movs	r0, r2
 800c112:	4798      	blx	r3
}
 800c114:	46c0      	nop			@ (mov r8, r8)
 800c116:	46bd      	mov	sp, r7
 800c118:	b004      	add	sp, #16
 800c11a:	bd80      	pop	{r7, pc}

0800c11c <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c128:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800c12a:	697b      	ldr	r3, [r7, #20]
 800c12c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800c12e:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800c130:	697b      	ldr	r3, [r7, #20]
 800c132:	2280      	movs	r2, #128	@ 0x80
 800c134:	589b      	ldr	r3, [r3, r2]
 800c136:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800c138:	697b      	ldr	r3, [r7, #20]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	689b      	ldr	r3, [r3, #8]
 800c13e:	2280      	movs	r2, #128	@ 0x80
 800c140:	4013      	ands	r3, r2
 800c142:	2b80      	cmp	r3, #128	@ 0x80
 800c144:	d10a      	bne.n	800c15c <UART_DMAError+0x40>
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	2b21      	cmp	r3, #33	@ 0x21
 800c14a:	d107      	bne.n	800c15c <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800c14c:	697b      	ldr	r3, [r7, #20]
 800c14e:	2252      	movs	r2, #82	@ 0x52
 800c150:	2100      	movs	r1, #0
 800c152:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 800c154:	697b      	ldr	r3, [r7, #20]
 800c156:	0018      	movs	r0, r3
 800c158:	f7ff fe3a 	bl	800bdd0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	681b      	ldr	r3, [r3, #0]
 800c160:	689b      	ldr	r3, [r3, #8]
 800c162:	2240      	movs	r2, #64	@ 0x40
 800c164:	4013      	ands	r3, r2
 800c166:	2b40      	cmp	r3, #64	@ 0x40
 800c168:	d10a      	bne.n	800c180 <UART_DMAError+0x64>
 800c16a:	68fb      	ldr	r3, [r7, #12]
 800c16c:	2b22      	cmp	r3, #34	@ 0x22
 800c16e:	d107      	bne.n	800c180 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800c170:	697b      	ldr	r3, [r7, #20]
 800c172:	225a      	movs	r2, #90	@ 0x5a
 800c174:	2100      	movs	r1, #0
 800c176:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 800c178:	697b      	ldr	r3, [r7, #20]
 800c17a:	0018      	movs	r0, r3
 800c17c:	f7ff fe4c 	bl	800be18 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c180:	697b      	ldr	r3, [r7, #20]
 800c182:	2284      	movs	r2, #132	@ 0x84
 800c184:	589b      	ldr	r3, [r3, r2]
 800c186:	2210      	movs	r2, #16
 800c188:	431a      	orrs	r2, r3
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2184      	movs	r1, #132	@ 0x84
 800c18e:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c190:	697b      	ldr	r3, [r7, #20]
 800c192:	2298      	movs	r2, #152	@ 0x98
 800c194:	589b      	ldr	r3, [r3, r2]
 800c196:	697a      	ldr	r2, [r7, #20]
 800c198:	0010      	movs	r0, r2
 800c19a:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c19c:	46c0      	nop			@ (mov r8, r8)
 800c19e:	46bd      	mov	sp, r7
 800c1a0:	b006      	add	sp, #24
 800c1a2:	bd80      	pop	{r7, pc}

0800c1a4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c1b0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c1b2:	68fb      	ldr	r3, [r7, #12]
 800c1b4:	225a      	movs	r2, #90	@ 0x5a
 800c1b6:	2100      	movs	r1, #0
 800c1b8:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800c1ba:	68fb      	ldr	r3, [r7, #12]
 800c1bc:	2252      	movs	r2, #82	@ 0x52
 800c1be:	2100      	movs	r1, #0
 800c1c0:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	2298      	movs	r2, #152	@ 0x98
 800c1c6:	589b      	ldr	r3, [r3, r2]
 800c1c8:	68fa      	ldr	r2, [r7, #12]
 800c1ca:	0010      	movs	r0, r2
 800c1cc:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c1ce:	46c0      	nop			@ (mov r8, r8)
 800c1d0:	46bd      	mov	sp, r7
 800c1d2:	b004      	add	sp, #16
 800c1d4:	bd80      	pop	{r7, pc}

0800c1d6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c1d6:	b580      	push	{r7, lr}
 800c1d8:	b086      	sub	sp, #24
 800c1da:	af00      	add	r7, sp, #0
 800c1dc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800c1de:	f3ef 8310 	mrs	r3, PRIMASK
 800c1e2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1e4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c1e6:	617b      	str	r3, [r7, #20]
 800c1e8:	2301      	movs	r3, #1
 800c1ea:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	f383 8810 	msr	PRIMASK, r3
}
 800c1f2:	46c0      	nop			@ (mov r8, r8)
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	681a      	ldr	r2, [r3, #0]
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	681b      	ldr	r3, [r3, #0]
 800c1fe:	2140      	movs	r1, #64	@ 0x40
 800c200:	438a      	bics	r2, r1
 800c202:	601a      	str	r2, [r3, #0]
 800c204:	697b      	ldr	r3, [r7, #20]
 800c206:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800c208:	693b      	ldr	r3, [r7, #16]
 800c20a:	f383 8810 	msr	PRIMASK, r3
}
 800c20e:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c210:	687b      	ldr	r3, [r7, #4]
 800c212:	2220      	movs	r2, #32
 800c214:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c216:	687b      	ldr	r3, [r7, #4]
 800c218:	2200      	movs	r2, #0
 800c21a:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	228c      	movs	r2, #140	@ 0x8c
 800c220:	589b      	ldr	r3, [r3, r2]
 800c222:	687a      	ldr	r2, [r7, #4]
 800c224:	0010      	movs	r0, r2
 800c226:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c228:	46c0      	nop			@ (mov r8, r8)
 800c22a:	46bd      	mov	sp, r7
 800c22c:	b006      	add	sp, #24
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800c230:	b580      	push	{r7, lr}
 800c232:	b082      	sub	sp, #8
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800c238:	46c0      	nop			@ (mov r8, r8)
 800c23a:	46bd      	mov	sp, r7
 800c23c:	b002      	add	sp, #8
 800c23e:	bd80      	pop	{r7, pc}

0800c240 <__cvt>:
 800c240:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c242:	001f      	movs	r7, r3
 800c244:	2300      	movs	r3, #0
 800c246:	0016      	movs	r6, r2
 800c248:	b08b      	sub	sp, #44	@ 0x2c
 800c24a:	429f      	cmp	r7, r3
 800c24c:	da04      	bge.n	800c258 <__cvt+0x18>
 800c24e:	2180      	movs	r1, #128	@ 0x80
 800c250:	0609      	lsls	r1, r1, #24
 800c252:	187b      	adds	r3, r7, r1
 800c254:	001f      	movs	r7, r3
 800c256:	232d      	movs	r3, #45	@ 0x2d
 800c258:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800c25a:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800c25c:	7013      	strb	r3, [r2, #0]
 800c25e:	2320      	movs	r3, #32
 800c260:	2203      	movs	r2, #3
 800c262:	439d      	bics	r5, r3
 800c264:	2d46      	cmp	r5, #70	@ 0x46
 800c266:	d007      	beq.n	800c278 <__cvt+0x38>
 800c268:	002b      	movs	r3, r5
 800c26a:	3b45      	subs	r3, #69	@ 0x45
 800c26c:	4259      	negs	r1, r3
 800c26e:	414b      	adcs	r3, r1
 800c270:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800c272:	3a01      	subs	r2, #1
 800c274:	18cb      	adds	r3, r1, r3
 800c276:	9310      	str	r3, [sp, #64]	@ 0x40
 800c278:	ab09      	add	r3, sp, #36	@ 0x24
 800c27a:	9304      	str	r3, [sp, #16]
 800c27c:	ab08      	add	r3, sp, #32
 800c27e:	9303      	str	r3, [sp, #12]
 800c280:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c282:	9200      	str	r2, [sp, #0]
 800c284:	9302      	str	r3, [sp, #8]
 800c286:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c288:	0032      	movs	r2, r6
 800c28a:	9301      	str	r3, [sp, #4]
 800c28c:	003b      	movs	r3, r7
 800c28e:	f000 fee7 	bl	800d060 <_dtoa_r>
 800c292:	0004      	movs	r4, r0
 800c294:	2d47      	cmp	r5, #71	@ 0x47
 800c296:	d11b      	bne.n	800c2d0 <__cvt+0x90>
 800c298:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800c29a:	07db      	lsls	r3, r3, #31
 800c29c:	d511      	bpl.n	800c2c2 <__cvt+0x82>
 800c29e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c2a0:	18c3      	adds	r3, r0, r3
 800c2a2:	9307      	str	r3, [sp, #28]
 800c2a4:	2200      	movs	r2, #0
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	0030      	movs	r0, r6
 800c2aa:	0039      	movs	r1, r7
 800c2ac:	f7f4 f8ce 	bl	800044c <__aeabi_dcmpeq>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d001      	beq.n	800c2b8 <__cvt+0x78>
 800c2b4:	9b07      	ldr	r3, [sp, #28]
 800c2b6:	9309      	str	r3, [sp, #36]	@ 0x24
 800c2b8:	2230      	movs	r2, #48	@ 0x30
 800c2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2bc:	9907      	ldr	r1, [sp, #28]
 800c2be:	428b      	cmp	r3, r1
 800c2c0:	d320      	bcc.n	800c304 <__cvt+0xc4>
 800c2c2:	0020      	movs	r0, r4
 800c2c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2c6:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c2c8:	1b1b      	subs	r3, r3, r4
 800c2ca:	6013      	str	r3, [r2, #0]
 800c2cc:	b00b      	add	sp, #44	@ 0x2c
 800c2ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c2d0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c2d2:	18c3      	adds	r3, r0, r3
 800c2d4:	9307      	str	r3, [sp, #28]
 800c2d6:	2d46      	cmp	r5, #70	@ 0x46
 800c2d8:	d1e4      	bne.n	800c2a4 <__cvt+0x64>
 800c2da:	7803      	ldrb	r3, [r0, #0]
 800c2dc:	2b30      	cmp	r3, #48	@ 0x30
 800c2de:	d10c      	bne.n	800c2fa <__cvt+0xba>
 800c2e0:	2200      	movs	r2, #0
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	0030      	movs	r0, r6
 800c2e6:	0039      	movs	r1, r7
 800c2e8:	f7f4 f8b0 	bl	800044c <__aeabi_dcmpeq>
 800c2ec:	2800      	cmp	r0, #0
 800c2ee:	d104      	bne.n	800c2fa <__cvt+0xba>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 800c2f4:	1a9b      	subs	r3, r3, r2
 800c2f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c2f8:	6013      	str	r3, [r2, #0]
 800c2fa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c2fc:	9a07      	ldr	r2, [sp, #28]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	18d3      	adds	r3, r2, r3
 800c302:	e7ce      	b.n	800c2a2 <__cvt+0x62>
 800c304:	1c59      	adds	r1, r3, #1
 800c306:	9109      	str	r1, [sp, #36]	@ 0x24
 800c308:	701a      	strb	r2, [r3, #0]
 800c30a:	e7d6      	b.n	800c2ba <__cvt+0x7a>

0800c30c <__exponent>:
 800c30c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c30e:	232b      	movs	r3, #43	@ 0x2b
 800c310:	0005      	movs	r5, r0
 800c312:	000c      	movs	r4, r1
 800c314:	b085      	sub	sp, #20
 800c316:	7002      	strb	r2, [r0, #0]
 800c318:	2900      	cmp	r1, #0
 800c31a:	da01      	bge.n	800c320 <__exponent+0x14>
 800c31c:	424c      	negs	r4, r1
 800c31e:	3302      	adds	r3, #2
 800c320:	706b      	strb	r3, [r5, #1]
 800c322:	2c09      	cmp	r4, #9
 800c324:	dd2c      	ble.n	800c380 <__exponent+0x74>
 800c326:	ab02      	add	r3, sp, #8
 800c328:	1dde      	adds	r6, r3, #7
 800c32a:	0020      	movs	r0, r4
 800c32c:	210a      	movs	r1, #10
 800c32e:	f7f4 f877 	bl	8000420 <__aeabi_idivmod>
 800c332:	0037      	movs	r7, r6
 800c334:	3130      	adds	r1, #48	@ 0x30
 800c336:	3e01      	subs	r6, #1
 800c338:	0020      	movs	r0, r4
 800c33a:	7031      	strb	r1, [r6, #0]
 800c33c:	210a      	movs	r1, #10
 800c33e:	9401      	str	r4, [sp, #4]
 800c340:	f7f3 ff88 	bl	8000254 <__divsi3>
 800c344:	9b01      	ldr	r3, [sp, #4]
 800c346:	0004      	movs	r4, r0
 800c348:	2b63      	cmp	r3, #99	@ 0x63
 800c34a:	dcee      	bgt.n	800c32a <__exponent+0x1e>
 800c34c:	1eba      	subs	r2, r7, #2
 800c34e:	1ca8      	adds	r0, r5, #2
 800c350:	0001      	movs	r1, r0
 800c352:	0013      	movs	r3, r2
 800c354:	3430      	adds	r4, #48	@ 0x30
 800c356:	7014      	strb	r4, [r2, #0]
 800c358:	ac02      	add	r4, sp, #8
 800c35a:	3407      	adds	r4, #7
 800c35c:	429c      	cmp	r4, r3
 800c35e:	d80a      	bhi.n	800c376 <__exponent+0x6a>
 800c360:	2300      	movs	r3, #0
 800c362:	42a2      	cmp	r2, r4
 800c364:	d803      	bhi.n	800c36e <__exponent+0x62>
 800c366:	3309      	adds	r3, #9
 800c368:	aa02      	add	r2, sp, #8
 800c36a:	189b      	adds	r3, r3, r2
 800c36c:	1bdb      	subs	r3, r3, r7
 800c36e:	18c0      	adds	r0, r0, r3
 800c370:	1b40      	subs	r0, r0, r5
 800c372:	b005      	add	sp, #20
 800c374:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c376:	781c      	ldrb	r4, [r3, #0]
 800c378:	3301      	adds	r3, #1
 800c37a:	700c      	strb	r4, [r1, #0]
 800c37c:	3101      	adds	r1, #1
 800c37e:	e7eb      	b.n	800c358 <__exponent+0x4c>
 800c380:	2330      	movs	r3, #48	@ 0x30
 800c382:	18e4      	adds	r4, r4, r3
 800c384:	70ab      	strb	r3, [r5, #2]
 800c386:	1d28      	adds	r0, r5, #4
 800c388:	70ec      	strb	r4, [r5, #3]
 800c38a:	e7f1      	b.n	800c370 <__exponent+0x64>

0800c38c <_printf_float>:
 800c38c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c38e:	b097      	sub	sp, #92	@ 0x5c
 800c390:	000d      	movs	r5, r1
 800c392:	920a      	str	r2, [sp, #40]	@ 0x28
 800c394:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 800c396:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c398:	9009      	str	r0, [sp, #36]	@ 0x24
 800c39a:	f000 fd49 	bl	800ce30 <_localeconv_r>
 800c39e:	6803      	ldr	r3, [r0, #0]
 800c3a0:	0018      	movs	r0, r3
 800c3a2:	930d      	str	r3, [sp, #52]	@ 0x34
 800c3a4:	f7f3 feb0 	bl	8000108 <strlen>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	900f      	str	r0, [sp, #60]	@ 0x3c
 800c3ac:	9314      	str	r3, [sp, #80]	@ 0x50
 800c3ae:	7e2b      	ldrb	r3, [r5, #24]
 800c3b0:	2207      	movs	r2, #7
 800c3b2:	930c      	str	r3, [sp, #48]	@ 0x30
 800c3b4:	682b      	ldr	r3, [r5, #0]
 800c3b6:	930e      	str	r3, [sp, #56]	@ 0x38
 800c3b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800c3ba:	6823      	ldr	r3, [r4, #0]
 800c3bc:	05c9      	lsls	r1, r1, #23
 800c3be:	d545      	bpl.n	800c44c <_printf_float+0xc0>
 800c3c0:	189b      	adds	r3, r3, r2
 800c3c2:	4393      	bics	r3, r2
 800c3c4:	001a      	movs	r2, r3
 800c3c6:	3208      	adds	r2, #8
 800c3c8:	6022      	str	r2, [r4, #0]
 800c3ca:	2201      	movs	r2, #1
 800c3cc:	681e      	ldr	r6, [r3, #0]
 800c3ce:	685f      	ldr	r7, [r3, #4]
 800c3d0:	007b      	lsls	r3, r7, #1
 800c3d2:	085b      	lsrs	r3, r3, #1
 800c3d4:	9311      	str	r3, [sp, #68]	@ 0x44
 800c3d6:	9610      	str	r6, [sp, #64]	@ 0x40
 800c3d8:	64ae      	str	r6, [r5, #72]	@ 0x48
 800c3da:	64ef      	str	r7, [r5, #76]	@ 0x4c
 800c3dc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c3de:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c3e0:	4ba7      	ldr	r3, [pc, #668]	@ (800c680 <_printf_float+0x2f4>)
 800c3e2:	4252      	negs	r2, r2
 800c3e4:	f7f6 fed6 	bl	8003194 <__aeabi_dcmpun>
 800c3e8:	2800      	cmp	r0, #0
 800c3ea:	d131      	bne.n	800c450 <_printf_float+0xc4>
 800c3ec:	9810      	ldr	r0, [sp, #64]	@ 0x40
 800c3ee:	9911      	ldr	r1, [sp, #68]	@ 0x44
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	4ba3      	ldr	r3, [pc, #652]	@ (800c680 <_printf_float+0x2f4>)
 800c3f4:	4252      	negs	r2, r2
 800c3f6:	f7f4 f839 	bl	800046c <__aeabi_dcmple>
 800c3fa:	2800      	cmp	r0, #0
 800c3fc:	d128      	bne.n	800c450 <_printf_float+0xc4>
 800c3fe:	2200      	movs	r2, #0
 800c400:	2300      	movs	r3, #0
 800c402:	0030      	movs	r0, r6
 800c404:	0039      	movs	r1, r7
 800c406:	f7f4 f827 	bl	8000458 <__aeabi_dcmplt>
 800c40a:	2800      	cmp	r0, #0
 800c40c:	d003      	beq.n	800c416 <_printf_float+0x8a>
 800c40e:	002b      	movs	r3, r5
 800c410:	222d      	movs	r2, #45	@ 0x2d
 800c412:	3343      	adds	r3, #67	@ 0x43
 800c414:	701a      	strb	r2, [r3, #0]
 800c416:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c418:	4f9a      	ldr	r7, [pc, #616]	@ (800c684 <_printf_float+0x2f8>)
 800c41a:	2b47      	cmp	r3, #71	@ 0x47
 800c41c:	d900      	bls.n	800c420 <_printf_float+0x94>
 800c41e:	4f9a      	ldr	r7, [pc, #616]	@ (800c688 <_printf_float+0x2fc>)
 800c420:	2303      	movs	r3, #3
 800c422:	2400      	movs	r4, #0
 800c424:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c426:	612b      	str	r3, [r5, #16]
 800c428:	3301      	adds	r3, #1
 800c42a:	439a      	bics	r2, r3
 800c42c:	602a      	str	r2, [r5, #0]
 800c42e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c430:	0029      	movs	r1, r5
 800c432:	9300      	str	r3, [sp, #0]
 800c434:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c436:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c438:	aa15      	add	r2, sp, #84	@ 0x54
 800c43a:	f000 f9e5 	bl	800c808 <_printf_common>
 800c43e:	3001      	adds	r0, #1
 800c440:	d000      	beq.n	800c444 <_printf_float+0xb8>
 800c442:	e09f      	b.n	800c584 <_printf_float+0x1f8>
 800c444:	2001      	movs	r0, #1
 800c446:	4240      	negs	r0, r0
 800c448:	b017      	add	sp, #92	@ 0x5c
 800c44a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c44c:	3307      	adds	r3, #7
 800c44e:	e7b8      	b.n	800c3c2 <_printf_float+0x36>
 800c450:	0032      	movs	r2, r6
 800c452:	003b      	movs	r3, r7
 800c454:	0030      	movs	r0, r6
 800c456:	0039      	movs	r1, r7
 800c458:	f7f6 fe9c 	bl	8003194 <__aeabi_dcmpun>
 800c45c:	2800      	cmp	r0, #0
 800c45e:	d00b      	beq.n	800c478 <_printf_float+0xec>
 800c460:	2f00      	cmp	r7, #0
 800c462:	da03      	bge.n	800c46c <_printf_float+0xe0>
 800c464:	002b      	movs	r3, r5
 800c466:	222d      	movs	r2, #45	@ 0x2d
 800c468:	3343      	adds	r3, #67	@ 0x43
 800c46a:	701a      	strb	r2, [r3, #0]
 800c46c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c46e:	4f87      	ldr	r7, [pc, #540]	@ (800c68c <_printf_float+0x300>)
 800c470:	2b47      	cmp	r3, #71	@ 0x47
 800c472:	d9d5      	bls.n	800c420 <_printf_float+0x94>
 800c474:	4f86      	ldr	r7, [pc, #536]	@ (800c690 <_printf_float+0x304>)
 800c476:	e7d3      	b.n	800c420 <_printf_float+0x94>
 800c478:	2220      	movs	r2, #32
 800c47a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 800c47c:	686b      	ldr	r3, [r5, #4]
 800c47e:	4394      	bics	r4, r2
 800c480:	1c5a      	adds	r2, r3, #1
 800c482:	d146      	bne.n	800c512 <_printf_float+0x186>
 800c484:	3307      	adds	r3, #7
 800c486:	606b      	str	r3, [r5, #4]
 800c488:	2380      	movs	r3, #128	@ 0x80
 800c48a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c48c:	00db      	lsls	r3, r3, #3
 800c48e:	4313      	orrs	r3, r2
 800c490:	2200      	movs	r2, #0
 800c492:	602b      	str	r3, [r5, #0]
 800c494:	9206      	str	r2, [sp, #24]
 800c496:	aa14      	add	r2, sp, #80	@ 0x50
 800c498:	9205      	str	r2, [sp, #20]
 800c49a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c49c:	a90a      	add	r1, sp, #40	@ 0x28
 800c49e:	9204      	str	r2, [sp, #16]
 800c4a0:	aa13      	add	r2, sp, #76	@ 0x4c
 800c4a2:	9203      	str	r2, [sp, #12]
 800c4a4:	2223      	movs	r2, #35	@ 0x23
 800c4a6:	1852      	adds	r2, r2, r1
 800c4a8:	9202      	str	r2, [sp, #8]
 800c4aa:	9301      	str	r3, [sp, #4]
 800c4ac:	686b      	ldr	r3, [r5, #4]
 800c4ae:	0032      	movs	r2, r6
 800c4b0:	9300      	str	r3, [sp, #0]
 800c4b2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c4b4:	003b      	movs	r3, r7
 800c4b6:	f7ff fec3 	bl	800c240 <__cvt>
 800c4ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c4bc:	0007      	movs	r7, r0
 800c4be:	2c47      	cmp	r4, #71	@ 0x47
 800c4c0:	d12d      	bne.n	800c51e <_printf_float+0x192>
 800c4c2:	1cd3      	adds	r3, r2, #3
 800c4c4:	db02      	blt.n	800c4cc <_printf_float+0x140>
 800c4c6:	686b      	ldr	r3, [r5, #4]
 800c4c8:	429a      	cmp	r2, r3
 800c4ca:	dd48      	ble.n	800c55e <_printf_float+0x1d2>
 800c4cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c4ce:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c4d0:	3b02      	subs	r3, #2
 800c4d2:	b2db      	uxtb	r3, r3
 800c4d4:	930c      	str	r3, [sp, #48]	@ 0x30
 800c4d6:	0028      	movs	r0, r5
 800c4d8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c4da:	3901      	subs	r1, #1
 800c4dc:	3050      	adds	r0, #80	@ 0x50
 800c4de:	9113      	str	r1, [sp, #76]	@ 0x4c
 800c4e0:	f7ff ff14 	bl	800c30c <__exponent>
 800c4e4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c4e6:	0004      	movs	r4, r0
 800c4e8:	1813      	adds	r3, r2, r0
 800c4ea:	612b      	str	r3, [r5, #16]
 800c4ec:	2a01      	cmp	r2, #1
 800c4ee:	dc02      	bgt.n	800c4f6 <_printf_float+0x16a>
 800c4f0:	682a      	ldr	r2, [r5, #0]
 800c4f2:	07d2      	lsls	r2, r2, #31
 800c4f4:	d501      	bpl.n	800c4fa <_printf_float+0x16e>
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	612b      	str	r3, [r5, #16]
 800c4fa:	2323      	movs	r3, #35	@ 0x23
 800c4fc:	aa0a      	add	r2, sp, #40	@ 0x28
 800c4fe:	189b      	adds	r3, r3, r2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	2b00      	cmp	r3, #0
 800c504:	d100      	bne.n	800c508 <_printf_float+0x17c>
 800c506:	e792      	b.n	800c42e <_printf_float+0xa2>
 800c508:	002b      	movs	r3, r5
 800c50a:	222d      	movs	r2, #45	@ 0x2d
 800c50c:	3343      	adds	r3, #67	@ 0x43
 800c50e:	701a      	strb	r2, [r3, #0]
 800c510:	e78d      	b.n	800c42e <_printf_float+0xa2>
 800c512:	2c47      	cmp	r4, #71	@ 0x47
 800c514:	d1b8      	bne.n	800c488 <_printf_float+0xfc>
 800c516:	2b00      	cmp	r3, #0
 800c518:	d1b6      	bne.n	800c488 <_printf_float+0xfc>
 800c51a:	3301      	adds	r3, #1
 800c51c:	e7b3      	b.n	800c486 <_printf_float+0xfa>
 800c51e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c520:	0011      	movs	r1, r2
 800c522:	2b65      	cmp	r3, #101	@ 0x65
 800c524:	d9d7      	bls.n	800c4d6 <_printf_float+0x14a>
 800c526:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c528:	2b66      	cmp	r3, #102	@ 0x66
 800c52a:	d11a      	bne.n	800c562 <_printf_float+0x1d6>
 800c52c:	686b      	ldr	r3, [r5, #4]
 800c52e:	2a00      	cmp	r2, #0
 800c530:	dd09      	ble.n	800c546 <_printf_float+0x1ba>
 800c532:	612a      	str	r2, [r5, #16]
 800c534:	2b00      	cmp	r3, #0
 800c536:	d102      	bne.n	800c53e <_printf_float+0x1b2>
 800c538:	6829      	ldr	r1, [r5, #0]
 800c53a:	07c9      	lsls	r1, r1, #31
 800c53c:	d50b      	bpl.n	800c556 <_printf_float+0x1ca>
 800c53e:	3301      	adds	r3, #1
 800c540:	189b      	adds	r3, r3, r2
 800c542:	612b      	str	r3, [r5, #16]
 800c544:	e007      	b.n	800c556 <_printf_float+0x1ca>
 800c546:	2b00      	cmp	r3, #0
 800c548:	d103      	bne.n	800c552 <_printf_float+0x1c6>
 800c54a:	2201      	movs	r2, #1
 800c54c:	6829      	ldr	r1, [r5, #0]
 800c54e:	4211      	tst	r1, r2
 800c550:	d000      	beq.n	800c554 <_printf_float+0x1c8>
 800c552:	1c9a      	adds	r2, r3, #2
 800c554:	612a      	str	r2, [r5, #16]
 800c556:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c558:	2400      	movs	r4, #0
 800c55a:	65ab      	str	r3, [r5, #88]	@ 0x58
 800c55c:	e7cd      	b.n	800c4fa <_printf_float+0x16e>
 800c55e:	2367      	movs	r3, #103	@ 0x67
 800c560:	930c      	str	r3, [sp, #48]	@ 0x30
 800c562:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800c564:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c566:	4299      	cmp	r1, r3
 800c568:	db06      	blt.n	800c578 <_printf_float+0x1ec>
 800c56a:	682b      	ldr	r3, [r5, #0]
 800c56c:	6129      	str	r1, [r5, #16]
 800c56e:	07db      	lsls	r3, r3, #31
 800c570:	d5f1      	bpl.n	800c556 <_printf_float+0x1ca>
 800c572:	3101      	adds	r1, #1
 800c574:	6129      	str	r1, [r5, #16]
 800c576:	e7ee      	b.n	800c556 <_printf_float+0x1ca>
 800c578:	2201      	movs	r2, #1
 800c57a:	2900      	cmp	r1, #0
 800c57c:	dce0      	bgt.n	800c540 <_printf_float+0x1b4>
 800c57e:	1892      	adds	r2, r2, r2
 800c580:	1a52      	subs	r2, r2, r1
 800c582:	e7dd      	b.n	800c540 <_printf_float+0x1b4>
 800c584:	682a      	ldr	r2, [r5, #0]
 800c586:	0553      	lsls	r3, r2, #21
 800c588:	d408      	bmi.n	800c59c <_printf_float+0x210>
 800c58a:	692b      	ldr	r3, [r5, #16]
 800c58c:	003a      	movs	r2, r7
 800c58e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c590:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c592:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c594:	47a0      	blx	r4
 800c596:	3001      	adds	r0, #1
 800c598:	d129      	bne.n	800c5ee <_printf_float+0x262>
 800c59a:	e753      	b.n	800c444 <_printf_float+0xb8>
 800c59c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c59e:	2b65      	cmp	r3, #101	@ 0x65
 800c5a0:	d800      	bhi.n	800c5a4 <_printf_float+0x218>
 800c5a2:	e0da      	b.n	800c75a <_printf_float+0x3ce>
 800c5a4:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c5a6:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	f7f3 ff4e 	bl	800044c <__aeabi_dcmpeq>
 800c5b0:	2800      	cmp	r0, #0
 800c5b2:	d033      	beq.n	800c61c <_printf_float+0x290>
 800c5b4:	2301      	movs	r3, #1
 800c5b6:	4a37      	ldr	r2, [pc, #220]	@ (800c694 <_printf_float+0x308>)
 800c5b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5bc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c5be:	47a0      	blx	r4
 800c5c0:	3001      	adds	r0, #1
 800c5c2:	d100      	bne.n	800c5c6 <_printf_float+0x23a>
 800c5c4:	e73e      	b.n	800c444 <_printf_float+0xb8>
 800c5c6:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800c5c8:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c5ca:	42b3      	cmp	r3, r6
 800c5cc:	db02      	blt.n	800c5d4 <_printf_float+0x248>
 800c5ce:	682b      	ldr	r3, [r5, #0]
 800c5d0:	07db      	lsls	r3, r3, #31
 800c5d2:	d50c      	bpl.n	800c5ee <_printf_float+0x262>
 800c5d4:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c5d6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5d8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c5da:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c5dc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c5de:	47a0      	blx	r4
 800c5e0:	2400      	movs	r4, #0
 800c5e2:	3001      	adds	r0, #1
 800c5e4:	d100      	bne.n	800c5e8 <_printf_float+0x25c>
 800c5e6:	e72d      	b.n	800c444 <_printf_float+0xb8>
 800c5e8:	1e73      	subs	r3, r6, #1
 800c5ea:	42a3      	cmp	r3, r4
 800c5ec:	dc0a      	bgt.n	800c604 <_printf_float+0x278>
 800c5ee:	682b      	ldr	r3, [r5, #0]
 800c5f0:	079b      	lsls	r3, r3, #30
 800c5f2:	d500      	bpl.n	800c5f6 <_printf_float+0x26a>
 800c5f4:	e105      	b.n	800c802 <_printf_float+0x476>
 800c5f6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800c5f8:	68e8      	ldr	r0, [r5, #12]
 800c5fa:	4298      	cmp	r0, r3
 800c5fc:	db00      	blt.n	800c600 <_printf_float+0x274>
 800c5fe:	e723      	b.n	800c448 <_printf_float+0xbc>
 800c600:	0018      	movs	r0, r3
 800c602:	e721      	b.n	800c448 <_printf_float+0xbc>
 800c604:	002a      	movs	r2, r5
 800c606:	2301      	movs	r3, #1
 800c608:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c60a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c60c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c60e:	321a      	adds	r2, #26
 800c610:	47b8      	blx	r7
 800c612:	3001      	adds	r0, #1
 800c614:	d100      	bne.n	800c618 <_printf_float+0x28c>
 800c616:	e715      	b.n	800c444 <_printf_float+0xb8>
 800c618:	3401      	adds	r4, #1
 800c61a:	e7e5      	b.n	800c5e8 <_printf_float+0x25c>
 800c61c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c61e:	2b00      	cmp	r3, #0
 800c620:	dc3a      	bgt.n	800c698 <_printf_float+0x30c>
 800c622:	2301      	movs	r3, #1
 800c624:	4a1b      	ldr	r2, [pc, #108]	@ (800c694 <_printf_float+0x308>)
 800c626:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c628:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c62a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c62c:	47a0      	blx	r4
 800c62e:	3001      	adds	r0, #1
 800c630:	d100      	bne.n	800c634 <_printf_float+0x2a8>
 800c632:	e707      	b.n	800c444 <_printf_float+0xb8>
 800c634:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 800c636:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c638:	4333      	orrs	r3, r6
 800c63a:	d102      	bne.n	800c642 <_printf_float+0x2b6>
 800c63c:	682b      	ldr	r3, [r5, #0]
 800c63e:	07db      	lsls	r3, r3, #31
 800c640:	d5d5      	bpl.n	800c5ee <_printf_float+0x262>
 800c642:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c644:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c646:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c648:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c64a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c64c:	47a0      	blx	r4
 800c64e:	2300      	movs	r3, #0
 800c650:	3001      	adds	r0, #1
 800c652:	d100      	bne.n	800c656 <_printf_float+0x2ca>
 800c654:	e6f6      	b.n	800c444 <_printf_float+0xb8>
 800c656:	930c      	str	r3, [sp, #48]	@ 0x30
 800c658:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c65a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c65c:	425b      	negs	r3, r3
 800c65e:	4293      	cmp	r3, r2
 800c660:	dc01      	bgt.n	800c666 <_printf_float+0x2da>
 800c662:	0033      	movs	r3, r6
 800c664:	e792      	b.n	800c58c <_printf_float+0x200>
 800c666:	002a      	movs	r2, r5
 800c668:	2301      	movs	r3, #1
 800c66a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c66c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c66e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c670:	321a      	adds	r2, #26
 800c672:	47a0      	blx	r4
 800c674:	3001      	adds	r0, #1
 800c676:	d100      	bne.n	800c67a <_printf_float+0x2ee>
 800c678:	e6e4      	b.n	800c444 <_printf_float+0xb8>
 800c67a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c67c:	3301      	adds	r3, #1
 800c67e:	e7ea      	b.n	800c656 <_printf_float+0x2ca>
 800c680:	7fefffff 	.word	0x7fefffff
 800c684:	0800fb88 	.word	0x0800fb88
 800c688:	0800fb8c 	.word	0x0800fb8c
 800c68c:	0800fb90 	.word	0x0800fb90
 800c690:	0800fb94 	.word	0x0800fb94
 800c694:	0800fb98 	.word	0x0800fb98
 800c698:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c69a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c69c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c69e:	429e      	cmp	r6, r3
 800c6a0:	dd00      	ble.n	800c6a4 <_printf_float+0x318>
 800c6a2:	001e      	movs	r6, r3
 800c6a4:	2e00      	cmp	r6, #0
 800c6a6:	dc31      	bgt.n	800c70c <_printf_float+0x380>
 800c6a8:	43f3      	mvns	r3, r6
 800c6aa:	2400      	movs	r4, #0
 800c6ac:	17db      	asrs	r3, r3, #31
 800c6ae:	4033      	ands	r3, r6
 800c6b0:	930e      	str	r3, [sp, #56]	@ 0x38
 800c6b2:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c6b4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c6b6:	1af3      	subs	r3, r6, r3
 800c6b8:	42a3      	cmp	r3, r4
 800c6ba:	dc30      	bgt.n	800c71e <_printf_float+0x392>
 800c6bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c6be:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	dc38      	bgt.n	800c736 <_printf_float+0x3aa>
 800c6c4:	682b      	ldr	r3, [r5, #0]
 800c6c6:	07db      	lsls	r3, r3, #31
 800c6c8:	d435      	bmi.n	800c736 <_printf_float+0x3aa>
 800c6ca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800c6cc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c6ce:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6d0:	1b9b      	subs	r3, r3, r6
 800c6d2:	1b14      	subs	r4, r2, r4
 800c6d4:	429c      	cmp	r4, r3
 800c6d6:	dd00      	ble.n	800c6da <_printf_float+0x34e>
 800c6d8:	001c      	movs	r4, r3
 800c6da:	2c00      	cmp	r4, #0
 800c6dc:	dc34      	bgt.n	800c748 <_printf_float+0x3bc>
 800c6de:	43e3      	mvns	r3, r4
 800c6e0:	2600      	movs	r6, #0
 800c6e2:	17db      	asrs	r3, r3, #31
 800c6e4:	401c      	ands	r4, r3
 800c6e6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c6e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800c6ea:	1ad3      	subs	r3, r2, r3
 800c6ec:	1b1b      	subs	r3, r3, r4
 800c6ee:	42b3      	cmp	r3, r6
 800c6f0:	dc00      	bgt.n	800c6f4 <_printf_float+0x368>
 800c6f2:	e77c      	b.n	800c5ee <_printf_float+0x262>
 800c6f4:	002a      	movs	r2, r5
 800c6f6:	2301      	movs	r3, #1
 800c6f8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c6fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c6fc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c6fe:	321a      	adds	r2, #26
 800c700:	47b8      	blx	r7
 800c702:	3001      	adds	r0, #1
 800c704:	d100      	bne.n	800c708 <_printf_float+0x37c>
 800c706:	e69d      	b.n	800c444 <_printf_float+0xb8>
 800c708:	3601      	adds	r6, #1
 800c70a:	e7ec      	b.n	800c6e6 <_printf_float+0x35a>
 800c70c:	0033      	movs	r3, r6
 800c70e:	003a      	movs	r2, r7
 800c710:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c712:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c714:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c716:	47a0      	blx	r4
 800c718:	3001      	adds	r0, #1
 800c71a:	d1c5      	bne.n	800c6a8 <_printf_float+0x31c>
 800c71c:	e692      	b.n	800c444 <_printf_float+0xb8>
 800c71e:	002a      	movs	r2, r5
 800c720:	2301      	movs	r3, #1
 800c722:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c724:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c726:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c728:	321a      	adds	r2, #26
 800c72a:	47b0      	blx	r6
 800c72c:	3001      	adds	r0, #1
 800c72e:	d100      	bne.n	800c732 <_printf_float+0x3a6>
 800c730:	e688      	b.n	800c444 <_printf_float+0xb8>
 800c732:	3401      	adds	r4, #1
 800c734:	e7bd      	b.n	800c6b2 <_printf_float+0x326>
 800c736:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c738:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c73a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c73c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c73e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 800c740:	47a0      	blx	r4
 800c742:	3001      	adds	r0, #1
 800c744:	d1c1      	bne.n	800c6ca <_printf_float+0x33e>
 800c746:	e67d      	b.n	800c444 <_printf_float+0xb8>
 800c748:	19ba      	adds	r2, r7, r6
 800c74a:	0023      	movs	r3, r4
 800c74c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c74e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c750:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c752:	47b0      	blx	r6
 800c754:	3001      	adds	r0, #1
 800c756:	d1c2      	bne.n	800c6de <_printf_float+0x352>
 800c758:	e674      	b.n	800c444 <_printf_float+0xb8>
 800c75a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800c75c:	930c      	str	r3, [sp, #48]	@ 0x30
 800c75e:	2b01      	cmp	r3, #1
 800c760:	dc02      	bgt.n	800c768 <_printf_float+0x3dc>
 800c762:	2301      	movs	r3, #1
 800c764:	421a      	tst	r2, r3
 800c766:	d039      	beq.n	800c7dc <_printf_float+0x450>
 800c768:	2301      	movs	r3, #1
 800c76a:	003a      	movs	r2, r7
 800c76c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c76e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c770:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c772:	47b0      	blx	r6
 800c774:	3001      	adds	r0, #1
 800c776:	d100      	bne.n	800c77a <_printf_float+0x3ee>
 800c778:	e664      	b.n	800c444 <_printf_float+0xb8>
 800c77a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c77c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800c77e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c780:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c782:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c784:	47b0      	blx	r6
 800c786:	3001      	adds	r0, #1
 800c788:	d100      	bne.n	800c78c <_printf_float+0x400>
 800c78a:	e65b      	b.n	800c444 <_printf_float+0xb8>
 800c78c:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 800c78e:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800c790:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c792:	2200      	movs	r2, #0
 800c794:	3b01      	subs	r3, #1
 800c796:	930c      	str	r3, [sp, #48]	@ 0x30
 800c798:	2300      	movs	r3, #0
 800c79a:	f7f3 fe57 	bl	800044c <__aeabi_dcmpeq>
 800c79e:	2800      	cmp	r0, #0
 800c7a0:	d11a      	bne.n	800c7d8 <_printf_float+0x44c>
 800c7a2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7a4:	1c7a      	adds	r2, r7, #1
 800c7a6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7a8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7aa:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c7ac:	47b0      	blx	r6
 800c7ae:	3001      	adds	r0, #1
 800c7b0:	d10e      	bne.n	800c7d0 <_printf_float+0x444>
 800c7b2:	e647      	b.n	800c444 <_printf_float+0xb8>
 800c7b4:	002a      	movs	r2, r5
 800c7b6:	2301      	movs	r3, #1
 800c7b8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7bc:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800c7be:	321a      	adds	r2, #26
 800c7c0:	47b8      	blx	r7
 800c7c2:	3001      	adds	r0, #1
 800c7c4:	d100      	bne.n	800c7c8 <_printf_float+0x43c>
 800c7c6:	e63d      	b.n	800c444 <_printf_float+0xb8>
 800c7c8:	3601      	adds	r6, #1
 800c7ca:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800c7cc:	429e      	cmp	r6, r3
 800c7ce:	dbf1      	blt.n	800c7b4 <_printf_float+0x428>
 800c7d0:	002a      	movs	r2, r5
 800c7d2:	0023      	movs	r3, r4
 800c7d4:	3250      	adds	r2, #80	@ 0x50
 800c7d6:	e6da      	b.n	800c58e <_printf_float+0x202>
 800c7d8:	2600      	movs	r6, #0
 800c7da:	e7f6      	b.n	800c7ca <_printf_float+0x43e>
 800c7dc:	003a      	movs	r2, r7
 800c7de:	e7e2      	b.n	800c7a6 <_printf_float+0x41a>
 800c7e0:	002a      	movs	r2, r5
 800c7e2:	2301      	movs	r3, #1
 800c7e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800c7e8:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800c7ea:	3219      	adds	r2, #25
 800c7ec:	47b0      	blx	r6
 800c7ee:	3001      	adds	r0, #1
 800c7f0:	d100      	bne.n	800c7f4 <_printf_float+0x468>
 800c7f2:	e627      	b.n	800c444 <_printf_float+0xb8>
 800c7f4:	3401      	adds	r4, #1
 800c7f6:	68eb      	ldr	r3, [r5, #12]
 800c7f8:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800c7fa:	1a9b      	subs	r3, r3, r2
 800c7fc:	42a3      	cmp	r3, r4
 800c7fe:	dcef      	bgt.n	800c7e0 <_printf_float+0x454>
 800c800:	e6f9      	b.n	800c5f6 <_printf_float+0x26a>
 800c802:	2400      	movs	r4, #0
 800c804:	e7f7      	b.n	800c7f6 <_printf_float+0x46a>
 800c806:	46c0      	nop			@ (mov r8, r8)

0800c808 <_printf_common>:
 800c808:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c80a:	0016      	movs	r6, r2
 800c80c:	9301      	str	r3, [sp, #4]
 800c80e:	688a      	ldr	r2, [r1, #8]
 800c810:	690b      	ldr	r3, [r1, #16]
 800c812:	000c      	movs	r4, r1
 800c814:	9000      	str	r0, [sp, #0]
 800c816:	4293      	cmp	r3, r2
 800c818:	da00      	bge.n	800c81c <_printf_common+0x14>
 800c81a:	0013      	movs	r3, r2
 800c81c:	0022      	movs	r2, r4
 800c81e:	6033      	str	r3, [r6, #0]
 800c820:	3243      	adds	r2, #67	@ 0x43
 800c822:	7812      	ldrb	r2, [r2, #0]
 800c824:	2a00      	cmp	r2, #0
 800c826:	d001      	beq.n	800c82c <_printf_common+0x24>
 800c828:	3301      	adds	r3, #1
 800c82a:	6033      	str	r3, [r6, #0]
 800c82c:	6823      	ldr	r3, [r4, #0]
 800c82e:	069b      	lsls	r3, r3, #26
 800c830:	d502      	bpl.n	800c838 <_printf_common+0x30>
 800c832:	6833      	ldr	r3, [r6, #0]
 800c834:	3302      	adds	r3, #2
 800c836:	6033      	str	r3, [r6, #0]
 800c838:	6822      	ldr	r2, [r4, #0]
 800c83a:	2306      	movs	r3, #6
 800c83c:	0015      	movs	r5, r2
 800c83e:	401d      	ands	r5, r3
 800c840:	421a      	tst	r2, r3
 800c842:	d027      	beq.n	800c894 <_printf_common+0x8c>
 800c844:	0023      	movs	r3, r4
 800c846:	3343      	adds	r3, #67	@ 0x43
 800c848:	781b      	ldrb	r3, [r3, #0]
 800c84a:	1e5a      	subs	r2, r3, #1
 800c84c:	4193      	sbcs	r3, r2
 800c84e:	6822      	ldr	r2, [r4, #0]
 800c850:	0692      	lsls	r2, r2, #26
 800c852:	d430      	bmi.n	800c8b6 <_printf_common+0xae>
 800c854:	0022      	movs	r2, r4
 800c856:	9901      	ldr	r1, [sp, #4]
 800c858:	9800      	ldr	r0, [sp, #0]
 800c85a:	9d08      	ldr	r5, [sp, #32]
 800c85c:	3243      	adds	r2, #67	@ 0x43
 800c85e:	47a8      	blx	r5
 800c860:	3001      	adds	r0, #1
 800c862:	d025      	beq.n	800c8b0 <_printf_common+0xa8>
 800c864:	2206      	movs	r2, #6
 800c866:	6823      	ldr	r3, [r4, #0]
 800c868:	2500      	movs	r5, #0
 800c86a:	4013      	ands	r3, r2
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d105      	bne.n	800c87c <_printf_common+0x74>
 800c870:	6833      	ldr	r3, [r6, #0]
 800c872:	68e5      	ldr	r5, [r4, #12]
 800c874:	1aed      	subs	r5, r5, r3
 800c876:	43eb      	mvns	r3, r5
 800c878:	17db      	asrs	r3, r3, #31
 800c87a:	401d      	ands	r5, r3
 800c87c:	68a3      	ldr	r3, [r4, #8]
 800c87e:	6922      	ldr	r2, [r4, #16]
 800c880:	4293      	cmp	r3, r2
 800c882:	dd01      	ble.n	800c888 <_printf_common+0x80>
 800c884:	1a9b      	subs	r3, r3, r2
 800c886:	18ed      	adds	r5, r5, r3
 800c888:	2600      	movs	r6, #0
 800c88a:	42b5      	cmp	r5, r6
 800c88c:	d120      	bne.n	800c8d0 <_printf_common+0xc8>
 800c88e:	2000      	movs	r0, #0
 800c890:	e010      	b.n	800c8b4 <_printf_common+0xac>
 800c892:	3501      	adds	r5, #1
 800c894:	68e3      	ldr	r3, [r4, #12]
 800c896:	6832      	ldr	r2, [r6, #0]
 800c898:	1a9b      	subs	r3, r3, r2
 800c89a:	42ab      	cmp	r3, r5
 800c89c:	ddd2      	ble.n	800c844 <_printf_common+0x3c>
 800c89e:	0022      	movs	r2, r4
 800c8a0:	2301      	movs	r3, #1
 800c8a2:	9901      	ldr	r1, [sp, #4]
 800c8a4:	9800      	ldr	r0, [sp, #0]
 800c8a6:	9f08      	ldr	r7, [sp, #32]
 800c8a8:	3219      	adds	r2, #25
 800c8aa:	47b8      	blx	r7
 800c8ac:	3001      	adds	r0, #1
 800c8ae:	d1f0      	bne.n	800c892 <_printf_common+0x8a>
 800c8b0:	2001      	movs	r0, #1
 800c8b2:	4240      	negs	r0, r0
 800c8b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c8b6:	2030      	movs	r0, #48	@ 0x30
 800c8b8:	18e1      	adds	r1, r4, r3
 800c8ba:	3143      	adds	r1, #67	@ 0x43
 800c8bc:	7008      	strb	r0, [r1, #0]
 800c8be:	0021      	movs	r1, r4
 800c8c0:	1c5a      	adds	r2, r3, #1
 800c8c2:	3145      	adds	r1, #69	@ 0x45
 800c8c4:	7809      	ldrb	r1, [r1, #0]
 800c8c6:	18a2      	adds	r2, r4, r2
 800c8c8:	3243      	adds	r2, #67	@ 0x43
 800c8ca:	3302      	adds	r3, #2
 800c8cc:	7011      	strb	r1, [r2, #0]
 800c8ce:	e7c1      	b.n	800c854 <_printf_common+0x4c>
 800c8d0:	0022      	movs	r2, r4
 800c8d2:	2301      	movs	r3, #1
 800c8d4:	9901      	ldr	r1, [sp, #4]
 800c8d6:	9800      	ldr	r0, [sp, #0]
 800c8d8:	9f08      	ldr	r7, [sp, #32]
 800c8da:	321a      	adds	r2, #26
 800c8dc:	47b8      	blx	r7
 800c8de:	3001      	adds	r0, #1
 800c8e0:	d0e6      	beq.n	800c8b0 <_printf_common+0xa8>
 800c8e2:	3601      	adds	r6, #1
 800c8e4:	e7d1      	b.n	800c88a <_printf_common+0x82>
	...

0800c8e8 <_printf_i>:
 800c8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c8ea:	b08b      	sub	sp, #44	@ 0x2c
 800c8ec:	9206      	str	r2, [sp, #24]
 800c8ee:	000a      	movs	r2, r1
 800c8f0:	3243      	adds	r2, #67	@ 0x43
 800c8f2:	9307      	str	r3, [sp, #28]
 800c8f4:	9005      	str	r0, [sp, #20]
 800c8f6:	9203      	str	r2, [sp, #12]
 800c8f8:	7e0a      	ldrb	r2, [r1, #24]
 800c8fa:	000c      	movs	r4, r1
 800c8fc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800c8fe:	2a78      	cmp	r2, #120	@ 0x78
 800c900:	d809      	bhi.n	800c916 <_printf_i+0x2e>
 800c902:	2a62      	cmp	r2, #98	@ 0x62
 800c904:	d80b      	bhi.n	800c91e <_printf_i+0x36>
 800c906:	2a00      	cmp	r2, #0
 800c908:	d100      	bne.n	800c90c <_printf_i+0x24>
 800c90a:	e0bc      	b.n	800ca86 <_printf_i+0x19e>
 800c90c:	497b      	ldr	r1, [pc, #492]	@ (800cafc <_printf_i+0x214>)
 800c90e:	9104      	str	r1, [sp, #16]
 800c910:	2a58      	cmp	r2, #88	@ 0x58
 800c912:	d100      	bne.n	800c916 <_printf_i+0x2e>
 800c914:	e090      	b.n	800ca38 <_printf_i+0x150>
 800c916:	0025      	movs	r5, r4
 800c918:	3542      	adds	r5, #66	@ 0x42
 800c91a:	702a      	strb	r2, [r5, #0]
 800c91c:	e022      	b.n	800c964 <_printf_i+0x7c>
 800c91e:	0010      	movs	r0, r2
 800c920:	3863      	subs	r0, #99	@ 0x63
 800c922:	2815      	cmp	r0, #21
 800c924:	d8f7      	bhi.n	800c916 <_printf_i+0x2e>
 800c926:	f7f3 fc01 	bl	800012c <__gnu_thumb1_case_shi>
 800c92a:	0016      	.short	0x0016
 800c92c:	fff6001f 	.word	0xfff6001f
 800c930:	fff6fff6 	.word	0xfff6fff6
 800c934:	001ffff6 	.word	0x001ffff6
 800c938:	fff6fff6 	.word	0xfff6fff6
 800c93c:	fff6fff6 	.word	0xfff6fff6
 800c940:	003600a1 	.word	0x003600a1
 800c944:	fff60080 	.word	0xfff60080
 800c948:	00b2fff6 	.word	0x00b2fff6
 800c94c:	0036fff6 	.word	0x0036fff6
 800c950:	fff6fff6 	.word	0xfff6fff6
 800c954:	0084      	.short	0x0084
 800c956:	0025      	movs	r5, r4
 800c958:	681a      	ldr	r2, [r3, #0]
 800c95a:	3542      	adds	r5, #66	@ 0x42
 800c95c:	1d11      	adds	r1, r2, #4
 800c95e:	6019      	str	r1, [r3, #0]
 800c960:	6813      	ldr	r3, [r2, #0]
 800c962:	702b      	strb	r3, [r5, #0]
 800c964:	2301      	movs	r3, #1
 800c966:	e0a0      	b.n	800caaa <_printf_i+0x1c2>
 800c968:	6818      	ldr	r0, [r3, #0]
 800c96a:	6809      	ldr	r1, [r1, #0]
 800c96c:	1d02      	adds	r2, r0, #4
 800c96e:	060d      	lsls	r5, r1, #24
 800c970:	d50b      	bpl.n	800c98a <_printf_i+0xa2>
 800c972:	6806      	ldr	r6, [r0, #0]
 800c974:	601a      	str	r2, [r3, #0]
 800c976:	2e00      	cmp	r6, #0
 800c978:	da03      	bge.n	800c982 <_printf_i+0x9a>
 800c97a:	232d      	movs	r3, #45	@ 0x2d
 800c97c:	9a03      	ldr	r2, [sp, #12]
 800c97e:	4276      	negs	r6, r6
 800c980:	7013      	strb	r3, [r2, #0]
 800c982:	4b5e      	ldr	r3, [pc, #376]	@ (800cafc <_printf_i+0x214>)
 800c984:	270a      	movs	r7, #10
 800c986:	9304      	str	r3, [sp, #16]
 800c988:	e018      	b.n	800c9bc <_printf_i+0xd4>
 800c98a:	6806      	ldr	r6, [r0, #0]
 800c98c:	601a      	str	r2, [r3, #0]
 800c98e:	0649      	lsls	r1, r1, #25
 800c990:	d5f1      	bpl.n	800c976 <_printf_i+0x8e>
 800c992:	b236      	sxth	r6, r6
 800c994:	e7ef      	b.n	800c976 <_printf_i+0x8e>
 800c996:	6808      	ldr	r0, [r1, #0]
 800c998:	6819      	ldr	r1, [r3, #0]
 800c99a:	c940      	ldmia	r1!, {r6}
 800c99c:	0605      	lsls	r5, r0, #24
 800c99e:	d402      	bmi.n	800c9a6 <_printf_i+0xbe>
 800c9a0:	0640      	lsls	r0, r0, #25
 800c9a2:	d500      	bpl.n	800c9a6 <_printf_i+0xbe>
 800c9a4:	b2b6      	uxth	r6, r6
 800c9a6:	6019      	str	r1, [r3, #0]
 800c9a8:	4b54      	ldr	r3, [pc, #336]	@ (800cafc <_printf_i+0x214>)
 800c9aa:	270a      	movs	r7, #10
 800c9ac:	9304      	str	r3, [sp, #16]
 800c9ae:	2a6f      	cmp	r2, #111	@ 0x6f
 800c9b0:	d100      	bne.n	800c9b4 <_printf_i+0xcc>
 800c9b2:	3f02      	subs	r7, #2
 800c9b4:	0023      	movs	r3, r4
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	3343      	adds	r3, #67	@ 0x43
 800c9ba:	701a      	strb	r2, [r3, #0]
 800c9bc:	6863      	ldr	r3, [r4, #4]
 800c9be:	60a3      	str	r3, [r4, #8]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	db03      	blt.n	800c9cc <_printf_i+0xe4>
 800c9c4:	2104      	movs	r1, #4
 800c9c6:	6822      	ldr	r2, [r4, #0]
 800c9c8:	438a      	bics	r2, r1
 800c9ca:	6022      	str	r2, [r4, #0]
 800c9cc:	2e00      	cmp	r6, #0
 800c9ce:	d102      	bne.n	800c9d6 <_printf_i+0xee>
 800c9d0:	9d03      	ldr	r5, [sp, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d00c      	beq.n	800c9f0 <_printf_i+0x108>
 800c9d6:	9d03      	ldr	r5, [sp, #12]
 800c9d8:	0030      	movs	r0, r6
 800c9da:	0039      	movs	r1, r7
 800c9dc:	f7f3 fc36 	bl	800024c <__aeabi_uidivmod>
 800c9e0:	9b04      	ldr	r3, [sp, #16]
 800c9e2:	3d01      	subs	r5, #1
 800c9e4:	5c5b      	ldrb	r3, [r3, r1]
 800c9e6:	702b      	strb	r3, [r5, #0]
 800c9e8:	0033      	movs	r3, r6
 800c9ea:	0006      	movs	r6, r0
 800c9ec:	429f      	cmp	r7, r3
 800c9ee:	d9f3      	bls.n	800c9d8 <_printf_i+0xf0>
 800c9f0:	2f08      	cmp	r7, #8
 800c9f2:	d109      	bne.n	800ca08 <_printf_i+0x120>
 800c9f4:	6823      	ldr	r3, [r4, #0]
 800c9f6:	07db      	lsls	r3, r3, #31
 800c9f8:	d506      	bpl.n	800ca08 <_printf_i+0x120>
 800c9fa:	6862      	ldr	r2, [r4, #4]
 800c9fc:	6923      	ldr	r3, [r4, #16]
 800c9fe:	429a      	cmp	r2, r3
 800ca00:	dc02      	bgt.n	800ca08 <_printf_i+0x120>
 800ca02:	2330      	movs	r3, #48	@ 0x30
 800ca04:	3d01      	subs	r5, #1
 800ca06:	702b      	strb	r3, [r5, #0]
 800ca08:	9b03      	ldr	r3, [sp, #12]
 800ca0a:	1b5b      	subs	r3, r3, r5
 800ca0c:	6123      	str	r3, [r4, #16]
 800ca0e:	9b07      	ldr	r3, [sp, #28]
 800ca10:	0021      	movs	r1, r4
 800ca12:	9300      	str	r3, [sp, #0]
 800ca14:	9805      	ldr	r0, [sp, #20]
 800ca16:	9b06      	ldr	r3, [sp, #24]
 800ca18:	aa09      	add	r2, sp, #36	@ 0x24
 800ca1a:	f7ff fef5 	bl	800c808 <_printf_common>
 800ca1e:	3001      	adds	r0, #1
 800ca20:	d148      	bne.n	800cab4 <_printf_i+0x1cc>
 800ca22:	2001      	movs	r0, #1
 800ca24:	4240      	negs	r0, r0
 800ca26:	b00b      	add	sp, #44	@ 0x2c
 800ca28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca2a:	2220      	movs	r2, #32
 800ca2c:	6809      	ldr	r1, [r1, #0]
 800ca2e:	430a      	orrs	r2, r1
 800ca30:	6022      	str	r2, [r4, #0]
 800ca32:	2278      	movs	r2, #120	@ 0x78
 800ca34:	4932      	ldr	r1, [pc, #200]	@ (800cb00 <_printf_i+0x218>)
 800ca36:	9104      	str	r1, [sp, #16]
 800ca38:	0021      	movs	r1, r4
 800ca3a:	3145      	adds	r1, #69	@ 0x45
 800ca3c:	700a      	strb	r2, [r1, #0]
 800ca3e:	6819      	ldr	r1, [r3, #0]
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	c940      	ldmia	r1!, {r6}
 800ca44:	0610      	lsls	r0, r2, #24
 800ca46:	d402      	bmi.n	800ca4e <_printf_i+0x166>
 800ca48:	0650      	lsls	r0, r2, #25
 800ca4a:	d500      	bpl.n	800ca4e <_printf_i+0x166>
 800ca4c:	b2b6      	uxth	r6, r6
 800ca4e:	6019      	str	r1, [r3, #0]
 800ca50:	07d3      	lsls	r3, r2, #31
 800ca52:	d502      	bpl.n	800ca5a <_printf_i+0x172>
 800ca54:	2320      	movs	r3, #32
 800ca56:	4313      	orrs	r3, r2
 800ca58:	6023      	str	r3, [r4, #0]
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	d001      	beq.n	800ca62 <_printf_i+0x17a>
 800ca5e:	2710      	movs	r7, #16
 800ca60:	e7a8      	b.n	800c9b4 <_printf_i+0xcc>
 800ca62:	2220      	movs	r2, #32
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	4393      	bics	r3, r2
 800ca68:	6023      	str	r3, [r4, #0]
 800ca6a:	e7f8      	b.n	800ca5e <_printf_i+0x176>
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	680d      	ldr	r5, [r1, #0]
 800ca70:	1d10      	adds	r0, r2, #4
 800ca72:	6949      	ldr	r1, [r1, #20]
 800ca74:	6018      	str	r0, [r3, #0]
 800ca76:	6813      	ldr	r3, [r2, #0]
 800ca78:	062e      	lsls	r6, r5, #24
 800ca7a:	d501      	bpl.n	800ca80 <_printf_i+0x198>
 800ca7c:	6019      	str	r1, [r3, #0]
 800ca7e:	e002      	b.n	800ca86 <_printf_i+0x19e>
 800ca80:	066d      	lsls	r5, r5, #25
 800ca82:	d5fb      	bpl.n	800ca7c <_printf_i+0x194>
 800ca84:	8019      	strh	r1, [r3, #0]
 800ca86:	2300      	movs	r3, #0
 800ca88:	9d03      	ldr	r5, [sp, #12]
 800ca8a:	6123      	str	r3, [r4, #16]
 800ca8c:	e7bf      	b.n	800ca0e <_printf_i+0x126>
 800ca8e:	681a      	ldr	r2, [r3, #0]
 800ca90:	1d11      	adds	r1, r2, #4
 800ca92:	6019      	str	r1, [r3, #0]
 800ca94:	6815      	ldr	r5, [r2, #0]
 800ca96:	2100      	movs	r1, #0
 800ca98:	0028      	movs	r0, r5
 800ca9a:	6862      	ldr	r2, [r4, #4]
 800ca9c:	f000 fa47 	bl	800cf2e <memchr>
 800caa0:	2800      	cmp	r0, #0
 800caa2:	d001      	beq.n	800caa8 <_printf_i+0x1c0>
 800caa4:	1b40      	subs	r0, r0, r5
 800caa6:	6060      	str	r0, [r4, #4]
 800caa8:	6863      	ldr	r3, [r4, #4]
 800caaa:	6123      	str	r3, [r4, #16]
 800caac:	2300      	movs	r3, #0
 800caae:	9a03      	ldr	r2, [sp, #12]
 800cab0:	7013      	strb	r3, [r2, #0]
 800cab2:	e7ac      	b.n	800ca0e <_printf_i+0x126>
 800cab4:	002a      	movs	r2, r5
 800cab6:	6923      	ldr	r3, [r4, #16]
 800cab8:	9906      	ldr	r1, [sp, #24]
 800caba:	9805      	ldr	r0, [sp, #20]
 800cabc:	9d07      	ldr	r5, [sp, #28]
 800cabe:	47a8      	blx	r5
 800cac0:	3001      	adds	r0, #1
 800cac2:	d0ae      	beq.n	800ca22 <_printf_i+0x13a>
 800cac4:	6823      	ldr	r3, [r4, #0]
 800cac6:	079b      	lsls	r3, r3, #30
 800cac8:	d415      	bmi.n	800caf6 <_printf_i+0x20e>
 800caca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cacc:	68e0      	ldr	r0, [r4, #12]
 800cace:	4298      	cmp	r0, r3
 800cad0:	daa9      	bge.n	800ca26 <_printf_i+0x13e>
 800cad2:	0018      	movs	r0, r3
 800cad4:	e7a7      	b.n	800ca26 <_printf_i+0x13e>
 800cad6:	0022      	movs	r2, r4
 800cad8:	2301      	movs	r3, #1
 800cada:	9906      	ldr	r1, [sp, #24]
 800cadc:	9805      	ldr	r0, [sp, #20]
 800cade:	9e07      	ldr	r6, [sp, #28]
 800cae0:	3219      	adds	r2, #25
 800cae2:	47b0      	blx	r6
 800cae4:	3001      	adds	r0, #1
 800cae6:	d09c      	beq.n	800ca22 <_printf_i+0x13a>
 800cae8:	3501      	adds	r5, #1
 800caea:	68e3      	ldr	r3, [r4, #12]
 800caec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800caee:	1a9b      	subs	r3, r3, r2
 800caf0:	42ab      	cmp	r3, r5
 800caf2:	dcf0      	bgt.n	800cad6 <_printf_i+0x1ee>
 800caf4:	e7e9      	b.n	800caca <_printf_i+0x1e2>
 800caf6:	2500      	movs	r5, #0
 800caf8:	e7f7      	b.n	800caea <_printf_i+0x202>
 800cafa:	46c0      	nop			@ (mov r8, r8)
 800cafc:	0800fb9a 	.word	0x0800fb9a
 800cb00:	0800fbab 	.word	0x0800fbab

0800cb04 <std>:
 800cb04:	2300      	movs	r3, #0
 800cb06:	b510      	push	{r4, lr}
 800cb08:	0004      	movs	r4, r0
 800cb0a:	6003      	str	r3, [r0, #0]
 800cb0c:	6043      	str	r3, [r0, #4]
 800cb0e:	6083      	str	r3, [r0, #8]
 800cb10:	8181      	strh	r1, [r0, #12]
 800cb12:	6643      	str	r3, [r0, #100]	@ 0x64
 800cb14:	81c2      	strh	r2, [r0, #14]
 800cb16:	6103      	str	r3, [r0, #16]
 800cb18:	6143      	str	r3, [r0, #20]
 800cb1a:	6183      	str	r3, [r0, #24]
 800cb1c:	0019      	movs	r1, r3
 800cb1e:	2208      	movs	r2, #8
 800cb20:	305c      	adds	r0, #92	@ 0x5c
 800cb22:	f000 f967 	bl	800cdf4 <memset>
 800cb26:	4b0b      	ldr	r3, [pc, #44]	@ (800cb54 <std+0x50>)
 800cb28:	6224      	str	r4, [r4, #32]
 800cb2a:	6263      	str	r3, [r4, #36]	@ 0x24
 800cb2c:	4b0a      	ldr	r3, [pc, #40]	@ (800cb58 <std+0x54>)
 800cb2e:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cb30:	4b0a      	ldr	r3, [pc, #40]	@ (800cb5c <std+0x58>)
 800cb32:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cb34:	4b0a      	ldr	r3, [pc, #40]	@ (800cb60 <std+0x5c>)
 800cb36:	6323      	str	r3, [r4, #48]	@ 0x30
 800cb38:	4b0a      	ldr	r3, [pc, #40]	@ (800cb64 <std+0x60>)
 800cb3a:	429c      	cmp	r4, r3
 800cb3c:	d005      	beq.n	800cb4a <std+0x46>
 800cb3e:	4b0a      	ldr	r3, [pc, #40]	@ (800cb68 <std+0x64>)
 800cb40:	429c      	cmp	r4, r3
 800cb42:	d002      	beq.n	800cb4a <std+0x46>
 800cb44:	4b09      	ldr	r3, [pc, #36]	@ (800cb6c <std+0x68>)
 800cb46:	429c      	cmp	r4, r3
 800cb48:	d103      	bne.n	800cb52 <std+0x4e>
 800cb4a:	0020      	movs	r0, r4
 800cb4c:	3058      	adds	r0, #88	@ 0x58
 800cb4e:	f000 f9eb 	bl	800cf28 <__retarget_lock_init_recursive>
 800cb52:	bd10      	pop	{r4, pc}
 800cb54:	0800cced 	.word	0x0800cced
 800cb58:	0800cd15 	.word	0x0800cd15
 800cb5c:	0800cd4d 	.word	0x0800cd4d
 800cb60:	0800cd79 	.word	0x0800cd79
 800cb64:	2000107c 	.word	0x2000107c
 800cb68:	200010e4 	.word	0x200010e4
 800cb6c:	2000114c 	.word	0x2000114c

0800cb70 <stdio_exit_handler>:
 800cb70:	b510      	push	{r4, lr}
 800cb72:	4a03      	ldr	r2, [pc, #12]	@ (800cb80 <stdio_exit_handler+0x10>)
 800cb74:	4903      	ldr	r1, [pc, #12]	@ (800cb84 <stdio_exit_handler+0x14>)
 800cb76:	4804      	ldr	r0, [pc, #16]	@ (800cb88 <stdio_exit_handler+0x18>)
 800cb78:	f000 f86c 	bl	800cc54 <_fwalk_sglue>
 800cb7c:	bd10      	pop	{r4, pc}
 800cb7e:	46c0      	nop			@ (mov r8, r8)
 800cb80:	20000048 	.word	0x20000048
 800cb84:	0800ebed 	.word	0x0800ebed
 800cb88:	20000058 	.word	0x20000058

0800cb8c <cleanup_stdio>:
 800cb8c:	6841      	ldr	r1, [r0, #4]
 800cb8e:	4b0b      	ldr	r3, [pc, #44]	@ (800cbbc <cleanup_stdio+0x30>)
 800cb90:	b510      	push	{r4, lr}
 800cb92:	0004      	movs	r4, r0
 800cb94:	4299      	cmp	r1, r3
 800cb96:	d001      	beq.n	800cb9c <cleanup_stdio+0x10>
 800cb98:	f002 f828 	bl	800ebec <_fflush_r>
 800cb9c:	68a1      	ldr	r1, [r4, #8]
 800cb9e:	4b08      	ldr	r3, [pc, #32]	@ (800cbc0 <cleanup_stdio+0x34>)
 800cba0:	4299      	cmp	r1, r3
 800cba2:	d002      	beq.n	800cbaa <cleanup_stdio+0x1e>
 800cba4:	0020      	movs	r0, r4
 800cba6:	f002 f821 	bl	800ebec <_fflush_r>
 800cbaa:	68e1      	ldr	r1, [r4, #12]
 800cbac:	4b05      	ldr	r3, [pc, #20]	@ (800cbc4 <cleanup_stdio+0x38>)
 800cbae:	4299      	cmp	r1, r3
 800cbb0:	d002      	beq.n	800cbb8 <cleanup_stdio+0x2c>
 800cbb2:	0020      	movs	r0, r4
 800cbb4:	f002 f81a 	bl	800ebec <_fflush_r>
 800cbb8:	bd10      	pop	{r4, pc}
 800cbba:	46c0      	nop			@ (mov r8, r8)
 800cbbc:	2000107c 	.word	0x2000107c
 800cbc0:	200010e4 	.word	0x200010e4
 800cbc4:	2000114c 	.word	0x2000114c

0800cbc8 <global_stdio_init.part.0>:
 800cbc8:	b510      	push	{r4, lr}
 800cbca:	4b09      	ldr	r3, [pc, #36]	@ (800cbf0 <global_stdio_init.part.0+0x28>)
 800cbcc:	4a09      	ldr	r2, [pc, #36]	@ (800cbf4 <global_stdio_init.part.0+0x2c>)
 800cbce:	2104      	movs	r1, #4
 800cbd0:	601a      	str	r2, [r3, #0]
 800cbd2:	4809      	ldr	r0, [pc, #36]	@ (800cbf8 <global_stdio_init.part.0+0x30>)
 800cbd4:	2200      	movs	r2, #0
 800cbd6:	f7ff ff95 	bl	800cb04 <std>
 800cbda:	2201      	movs	r2, #1
 800cbdc:	2109      	movs	r1, #9
 800cbde:	4807      	ldr	r0, [pc, #28]	@ (800cbfc <global_stdio_init.part.0+0x34>)
 800cbe0:	f7ff ff90 	bl	800cb04 <std>
 800cbe4:	2202      	movs	r2, #2
 800cbe6:	2112      	movs	r1, #18
 800cbe8:	4805      	ldr	r0, [pc, #20]	@ (800cc00 <global_stdio_init.part.0+0x38>)
 800cbea:	f7ff ff8b 	bl	800cb04 <std>
 800cbee:	bd10      	pop	{r4, pc}
 800cbf0:	200011b4 	.word	0x200011b4
 800cbf4:	0800cb71 	.word	0x0800cb71
 800cbf8:	2000107c 	.word	0x2000107c
 800cbfc:	200010e4 	.word	0x200010e4
 800cc00:	2000114c 	.word	0x2000114c

0800cc04 <__sfp_lock_acquire>:
 800cc04:	b510      	push	{r4, lr}
 800cc06:	4802      	ldr	r0, [pc, #8]	@ (800cc10 <__sfp_lock_acquire+0xc>)
 800cc08:	f000 f98f 	bl	800cf2a <__retarget_lock_acquire_recursive>
 800cc0c:	bd10      	pop	{r4, pc}
 800cc0e:	46c0      	nop			@ (mov r8, r8)
 800cc10:	200011bd 	.word	0x200011bd

0800cc14 <__sfp_lock_release>:
 800cc14:	b510      	push	{r4, lr}
 800cc16:	4802      	ldr	r0, [pc, #8]	@ (800cc20 <__sfp_lock_release+0xc>)
 800cc18:	f000 f988 	bl	800cf2c <__retarget_lock_release_recursive>
 800cc1c:	bd10      	pop	{r4, pc}
 800cc1e:	46c0      	nop			@ (mov r8, r8)
 800cc20:	200011bd 	.word	0x200011bd

0800cc24 <__sinit>:
 800cc24:	b510      	push	{r4, lr}
 800cc26:	0004      	movs	r4, r0
 800cc28:	f7ff ffec 	bl	800cc04 <__sfp_lock_acquire>
 800cc2c:	6a23      	ldr	r3, [r4, #32]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d002      	beq.n	800cc38 <__sinit+0x14>
 800cc32:	f7ff ffef 	bl	800cc14 <__sfp_lock_release>
 800cc36:	bd10      	pop	{r4, pc}
 800cc38:	4b04      	ldr	r3, [pc, #16]	@ (800cc4c <__sinit+0x28>)
 800cc3a:	6223      	str	r3, [r4, #32]
 800cc3c:	4b04      	ldr	r3, [pc, #16]	@ (800cc50 <__sinit+0x2c>)
 800cc3e:	681b      	ldr	r3, [r3, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d1f6      	bne.n	800cc32 <__sinit+0xe>
 800cc44:	f7ff ffc0 	bl	800cbc8 <global_stdio_init.part.0>
 800cc48:	e7f3      	b.n	800cc32 <__sinit+0xe>
 800cc4a:	46c0      	nop			@ (mov r8, r8)
 800cc4c:	0800cb8d 	.word	0x0800cb8d
 800cc50:	200011b4 	.word	0x200011b4

0800cc54 <_fwalk_sglue>:
 800cc54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cc56:	0014      	movs	r4, r2
 800cc58:	2600      	movs	r6, #0
 800cc5a:	9000      	str	r0, [sp, #0]
 800cc5c:	9101      	str	r1, [sp, #4]
 800cc5e:	68a5      	ldr	r5, [r4, #8]
 800cc60:	6867      	ldr	r7, [r4, #4]
 800cc62:	3f01      	subs	r7, #1
 800cc64:	d504      	bpl.n	800cc70 <_fwalk_sglue+0x1c>
 800cc66:	6824      	ldr	r4, [r4, #0]
 800cc68:	2c00      	cmp	r4, #0
 800cc6a:	d1f8      	bne.n	800cc5e <_fwalk_sglue+0xa>
 800cc6c:	0030      	movs	r0, r6
 800cc6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800cc70:	89ab      	ldrh	r3, [r5, #12]
 800cc72:	2b01      	cmp	r3, #1
 800cc74:	d908      	bls.n	800cc88 <_fwalk_sglue+0x34>
 800cc76:	220e      	movs	r2, #14
 800cc78:	5eab      	ldrsh	r3, [r5, r2]
 800cc7a:	3301      	adds	r3, #1
 800cc7c:	d004      	beq.n	800cc88 <_fwalk_sglue+0x34>
 800cc7e:	0029      	movs	r1, r5
 800cc80:	9800      	ldr	r0, [sp, #0]
 800cc82:	9b01      	ldr	r3, [sp, #4]
 800cc84:	4798      	blx	r3
 800cc86:	4306      	orrs	r6, r0
 800cc88:	3568      	adds	r5, #104	@ 0x68
 800cc8a:	e7ea      	b.n	800cc62 <_fwalk_sglue+0xe>

0800cc8c <iprintf>:
 800cc8c:	b40f      	push	{r0, r1, r2, r3}
 800cc8e:	b507      	push	{r0, r1, r2, lr}
 800cc90:	4905      	ldr	r1, [pc, #20]	@ (800cca8 <iprintf+0x1c>)
 800cc92:	ab04      	add	r3, sp, #16
 800cc94:	6808      	ldr	r0, [r1, #0]
 800cc96:	cb04      	ldmia	r3!, {r2}
 800cc98:	6881      	ldr	r1, [r0, #8]
 800cc9a:	9301      	str	r3, [sp, #4]
 800cc9c:	f001 fe04 	bl	800e8a8 <_vfiprintf_r>
 800cca0:	b003      	add	sp, #12
 800cca2:	bc08      	pop	{r3}
 800cca4:	b004      	add	sp, #16
 800cca6:	4718      	bx	r3
 800cca8:	20000054 	.word	0x20000054

0800ccac <siprintf>:
 800ccac:	b40e      	push	{r1, r2, r3}
 800ccae:	b500      	push	{lr}
 800ccb0:	490b      	ldr	r1, [pc, #44]	@ (800cce0 <siprintf+0x34>)
 800ccb2:	b09c      	sub	sp, #112	@ 0x70
 800ccb4:	ab1d      	add	r3, sp, #116	@ 0x74
 800ccb6:	9002      	str	r0, [sp, #8]
 800ccb8:	9006      	str	r0, [sp, #24]
 800ccba:	9107      	str	r1, [sp, #28]
 800ccbc:	9104      	str	r1, [sp, #16]
 800ccbe:	4809      	ldr	r0, [pc, #36]	@ (800cce4 <siprintf+0x38>)
 800ccc0:	4909      	ldr	r1, [pc, #36]	@ (800cce8 <siprintf+0x3c>)
 800ccc2:	cb04      	ldmia	r3!, {r2}
 800ccc4:	9105      	str	r1, [sp, #20]
 800ccc6:	6800      	ldr	r0, [r0, #0]
 800ccc8:	a902      	add	r1, sp, #8
 800ccca:	9301      	str	r3, [sp, #4]
 800cccc:	f001 fcc6 	bl	800e65c <_svfiprintf_r>
 800ccd0:	2200      	movs	r2, #0
 800ccd2:	9b02      	ldr	r3, [sp, #8]
 800ccd4:	701a      	strb	r2, [r3, #0]
 800ccd6:	b01c      	add	sp, #112	@ 0x70
 800ccd8:	bc08      	pop	{r3}
 800ccda:	b003      	add	sp, #12
 800ccdc:	4718      	bx	r3
 800ccde:	46c0      	nop			@ (mov r8, r8)
 800cce0:	7fffffff 	.word	0x7fffffff
 800cce4:	20000054 	.word	0x20000054
 800cce8:	ffff0208 	.word	0xffff0208

0800ccec <__sread>:
 800ccec:	b570      	push	{r4, r5, r6, lr}
 800ccee:	000c      	movs	r4, r1
 800ccf0:	250e      	movs	r5, #14
 800ccf2:	5f49      	ldrsh	r1, [r1, r5]
 800ccf4:	f000 f8c6 	bl	800ce84 <_read_r>
 800ccf8:	2800      	cmp	r0, #0
 800ccfa:	db03      	blt.n	800cd04 <__sread+0x18>
 800ccfc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800ccfe:	181b      	adds	r3, r3, r0
 800cd00:	6563      	str	r3, [r4, #84]	@ 0x54
 800cd02:	bd70      	pop	{r4, r5, r6, pc}
 800cd04:	89a3      	ldrh	r3, [r4, #12]
 800cd06:	4a02      	ldr	r2, [pc, #8]	@ (800cd10 <__sread+0x24>)
 800cd08:	4013      	ands	r3, r2
 800cd0a:	81a3      	strh	r3, [r4, #12]
 800cd0c:	e7f9      	b.n	800cd02 <__sread+0x16>
 800cd0e:	46c0      	nop			@ (mov r8, r8)
 800cd10:	ffffefff 	.word	0xffffefff

0800cd14 <__swrite>:
 800cd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd16:	001f      	movs	r7, r3
 800cd18:	898b      	ldrh	r3, [r1, #12]
 800cd1a:	0005      	movs	r5, r0
 800cd1c:	000c      	movs	r4, r1
 800cd1e:	0016      	movs	r6, r2
 800cd20:	05db      	lsls	r3, r3, #23
 800cd22:	d505      	bpl.n	800cd30 <__swrite+0x1c>
 800cd24:	230e      	movs	r3, #14
 800cd26:	5ec9      	ldrsh	r1, [r1, r3]
 800cd28:	2200      	movs	r2, #0
 800cd2a:	2302      	movs	r3, #2
 800cd2c:	f000 f896 	bl	800ce5c <_lseek_r>
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	4a05      	ldr	r2, [pc, #20]	@ (800cd48 <__swrite+0x34>)
 800cd34:	0028      	movs	r0, r5
 800cd36:	4013      	ands	r3, r2
 800cd38:	81a3      	strh	r3, [r4, #12]
 800cd3a:	0032      	movs	r2, r6
 800cd3c:	230e      	movs	r3, #14
 800cd3e:	5ee1      	ldrsh	r1, [r4, r3]
 800cd40:	003b      	movs	r3, r7
 800cd42:	f000 f8b3 	bl	800ceac <_write_r>
 800cd46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd48:	ffffefff 	.word	0xffffefff

0800cd4c <__sseek>:
 800cd4c:	b570      	push	{r4, r5, r6, lr}
 800cd4e:	000c      	movs	r4, r1
 800cd50:	250e      	movs	r5, #14
 800cd52:	5f49      	ldrsh	r1, [r1, r5]
 800cd54:	f000 f882 	bl	800ce5c <_lseek_r>
 800cd58:	89a3      	ldrh	r3, [r4, #12]
 800cd5a:	1c42      	adds	r2, r0, #1
 800cd5c:	d103      	bne.n	800cd66 <__sseek+0x1a>
 800cd5e:	4a05      	ldr	r2, [pc, #20]	@ (800cd74 <__sseek+0x28>)
 800cd60:	4013      	ands	r3, r2
 800cd62:	81a3      	strh	r3, [r4, #12]
 800cd64:	bd70      	pop	{r4, r5, r6, pc}
 800cd66:	2280      	movs	r2, #128	@ 0x80
 800cd68:	0152      	lsls	r2, r2, #5
 800cd6a:	4313      	orrs	r3, r2
 800cd6c:	81a3      	strh	r3, [r4, #12]
 800cd6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800cd70:	e7f8      	b.n	800cd64 <__sseek+0x18>
 800cd72:	46c0      	nop			@ (mov r8, r8)
 800cd74:	ffffefff 	.word	0xffffefff

0800cd78 <__sclose>:
 800cd78:	b510      	push	{r4, lr}
 800cd7a:	230e      	movs	r3, #14
 800cd7c:	5ec9      	ldrsh	r1, [r1, r3]
 800cd7e:	f000 f85b 	bl	800ce38 <_close_r>
 800cd82:	bd10      	pop	{r4, pc}

0800cd84 <_vsniprintf_r>:
 800cd84:	b530      	push	{r4, r5, lr}
 800cd86:	0014      	movs	r4, r2
 800cd88:	0005      	movs	r5, r0
 800cd8a:	001a      	movs	r2, r3
 800cd8c:	b09b      	sub	sp, #108	@ 0x6c
 800cd8e:	2c00      	cmp	r4, #0
 800cd90:	da05      	bge.n	800cd9e <_vsniprintf_r+0x1a>
 800cd92:	238b      	movs	r3, #139	@ 0x8b
 800cd94:	6003      	str	r3, [r0, #0]
 800cd96:	2001      	movs	r0, #1
 800cd98:	4240      	negs	r0, r0
 800cd9a:	b01b      	add	sp, #108	@ 0x6c
 800cd9c:	bd30      	pop	{r4, r5, pc}
 800cd9e:	2382      	movs	r3, #130	@ 0x82
 800cda0:	4668      	mov	r0, sp
 800cda2:	009b      	lsls	r3, r3, #2
 800cda4:	8183      	strh	r3, [r0, #12]
 800cda6:	2300      	movs	r3, #0
 800cda8:	9100      	str	r1, [sp, #0]
 800cdaa:	9104      	str	r1, [sp, #16]
 800cdac:	429c      	cmp	r4, r3
 800cdae:	d000      	beq.n	800cdb2 <_vsniprintf_r+0x2e>
 800cdb0:	1e63      	subs	r3, r4, #1
 800cdb2:	9302      	str	r3, [sp, #8]
 800cdb4:	9305      	str	r3, [sp, #20]
 800cdb6:	2301      	movs	r3, #1
 800cdb8:	4669      	mov	r1, sp
 800cdba:	425b      	negs	r3, r3
 800cdbc:	81cb      	strh	r3, [r1, #14]
 800cdbe:	0028      	movs	r0, r5
 800cdc0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800cdc2:	f001 fc4b 	bl	800e65c <_svfiprintf_r>
 800cdc6:	1c43      	adds	r3, r0, #1
 800cdc8:	da01      	bge.n	800cdce <_vsniprintf_r+0x4a>
 800cdca:	238b      	movs	r3, #139	@ 0x8b
 800cdcc:	602b      	str	r3, [r5, #0]
 800cdce:	2c00      	cmp	r4, #0
 800cdd0:	d0e3      	beq.n	800cd9a <_vsniprintf_r+0x16>
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	9b00      	ldr	r3, [sp, #0]
 800cdd6:	701a      	strb	r2, [r3, #0]
 800cdd8:	e7df      	b.n	800cd9a <_vsniprintf_r+0x16>
	...

0800cddc <vsniprintf>:
 800cddc:	b513      	push	{r0, r1, r4, lr}
 800cdde:	4c04      	ldr	r4, [pc, #16]	@ (800cdf0 <vsniprintf+0x14>)
 800cde0:	9300      	str	r3, [sp, #0]
 800cde2:	0013      	movs	r3, r2
 800cde4:	000a      	movs	r2, r1
 800cde6:	0001      	movs	r1, r0
 800cde8:	6820      	ldr	r0, [r4, #0]
 800cdea:	f7ff ffcb 	bl	800cd84 <_vsniprintf_r>
 800cdee:	bd16      	pop	{r1, r2, r4, pc}
 800cdf0:	20000054 	.word	0x20000054

0800cdf4 <memset>:
 800cdf4:	0003      	movs	r3, r0
 800cdf6:	1882      	adds	r2, r0, r2
 800cdf8:	4293      	cmp	r3, r2
 800cdfa:	d100      	bne.n	800cdfe <memset+0xa>
 800cdfc:	4770      	bx	lr
 800cdfe:	7019      	strb	r1, [r3, #0]
 800ce00:	3301      	adds	r3, #1
 800ce02:	e7f9      	b.n	800cdf8 <memset+0x4>

0800ce04 <strstr>:
 800ce04:	780a      	ldrb	r2, [r1, #0]
 800ce06:	b530      	push	{r4, r5, lr}
 800ce08:	2a00      	cmp	r2, #0
 800ce0a:	d10c      	bne.n	800ce26 <strstr+0x22>
 800ce0c:	bd30      	pop	{r4, r5, pc}
 800ce0e:	429a      	cmp	r2, r3
 800ce10:	d108      	bne.n	800ce24 <strstr+0x20>
 800ce12:	2301      	movs	r3, #1
 800ce14:	5ccc      	ldrb	r4, [r1, r3]
 800ce16:	2c00      	cmp	r4, #0
 800ce18:	d0f8      	beq.n	800ce0c <strstr+0x8>
 800ce1a:	5cc5      	ldrb	r5, [r0, r3]
 800ce1c:	42a5      	cmp	r5, r4
 800ce1e:	d101      	bne.n	800ce24 <strstr+0x20>
 800ce20:	3301      	adds	r3, #1
 800ce22:	e7f7      	b.n	800ce14 <strstr+0x10>
 800ce24:	3001      	adds	r0, #1
 800ce26:	7803      	ldrb	r3, [r0, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d1f0      	bne.n	800ce0e <strstr+0xa>
 800ce2c:	0018      	movs	r0, r3
 800ce2e:	e7ed      	b.n	800ce0c <strstr+0x8>

0800ce30 <_localeconv_r>:
 800ce30:	4800      	ldr	r0, [pc, #0]	@ (800ce34 <_localeconv_r+0x4>)
 800ce32:	4770      	bx	lr
 800ce34:	20000194 	.word	0x20000194

0800ce38 <_close_r>:
 800ce38:	2300      	movs	r3, #0
 800ce3a:	b570      	push	{r4, r5, r6, lr}
 800ce3c:	4d06      	ldr	r5, [pc, #24]	@ (800ce58 <_close_r+0x20>)
 800ce3e:	0004      	movs	r4, r0
 800ce40:	0008      	movs	r0, r1
 800ce42:	602b      	str	r3, [r5, #0]
 800ce44:	f7f8 fdd0 	bl	80059e8 <_close>
 800ce48:	1c43      	adds	r3, r0, #1
 800ce4a:	d103      	bne.n	800ce54 <_close_r+0x1c>
 800ce4c:	682b      	ldr	r3, [r5, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d000      	beq.n	800ce54 <_close_r+0x1c>
 800ce52:	6023      	str	r3, [r4, #0]
 800ce54:	bd70      	pop	{r4, r5, r6, pc}
 800ce56:	46c0      	nop			@ (mov r8, r8)
 800ce58:	200011b8 	.word	0x200011b8

0800ce5c <_lseek_r>:
 800ce5c:	b570      	push	{r4, r5, r6, lr}
 800ce5e:	0004      	movs	r4, r0
 800ce60:	0008      	movs	r0, r1
 800ce62:	0011      	movs	r1, r2
 800ce64:	001a      	movs	r2, r3
 800ce66:	2300      	movs	r3, #0
 800ce68:	4d05      	ldr	r5, [pc, #20]	@ (800ce80 <_lseek_r+0x24>)
 800ce6a:	602b      	str	r3, [r5, #0]
 800ce6c:	f7f8 fddd 	bl	8005a2a <_lseek>
 800ce70:	1c43      	adds	r3, r0, #1
 800ce72:	d103      	bne.n	800ce7c <_lseek_r+0x20>
 800ce74:	682b      	ldr	r3, [r5, #0]
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d000      	beq.n	800ce7c <_lseek_r+0x20>
 800ce7a:	6023      	str	r3, [r4, #0]
 800ce7c:	bd70      	pop	{r4, r5, r6, pc}
 800ce7e:	46c0      	nop			@ (mov r8, r8)
 800ce80:	200011b8 	.word	0x200011b8

0800ce84 <_read_r>:
 800ce84:	b570      	push	{r4, r5, r6, lr}
 800ce86:	0004      	movs	r4, r0
 800ce88:	0008      	movs	r0, r1
 800ce8a:	0011      	movs	r1, r2
 800ce8c:	001a      	movs	r2, r3
 800ce8e:	2300      	movs	r3, #0
 800ce90:	4d05      	ldr	r5, [pc, #20]	@ (800cea8 <_read_r+0x24>)
 800ce92:	602b      	str	r3, [r5, #0]
 800ce94:	f7f8 fd8b 	bl	80059ae <_read>
 800ce98:	1c43      	adds	r3, r0, #1
 800ce9a:	d103      	bne.n	800cea4 <_read_r+0x20>
 800ce9c:	682b      	ldr	r3, [r5, #0]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d000      	beq.n	800cea4 <_read_r+0x20>
 800cea2:	6023      	str	r3, [r4, #0]
 800cea4:	bd70      	pop	{r4, r5, r6, pc}
 800cea6:	46c0      	nop			@ (mov r8, r8)
 800cea8:	200011b8 	.word	0x200011b8

0800ceac <_write_r>:
 800ceac:	b570      	push	{r4, r5, r6, lr}
 800ceae:	0004      	movs	r4, r0
 800ceb0:	0008      	movs	r0, r1
 800ceb2:	0011      	movs	r1, r2
 800ceb4:	001a      	movs	r2, r3
 800ceb6:	2300      	movs	r3, #0
 800ceb8:	4d05      	ldr	r5, [pc, #20]	@ (800ced0 <_write_r+0x24>)
 800ceba:	602b      	str	r3, [r5, #0]
 800cebc:	f7f9 f818 	bl	8005ef0 <_write>
 800cec0:	1c43      	adds	r3, r0, #1
 800cec2:	d103      	bne.n	800cecc <_write_r+0x20>
 800cec4:	682b      	ldr	r3, [r5, #0]
 800cec6:	2b00      	cmp	r3, #0
 800cec8:	d000      	beq.n	800cecc <_write_r+0x20>
 800ceca:	6023      	str	r3, [r4, #0]
 800cecc:	bd70      	pop	{r4, r5, r6, pc}
 800cece:	46c0      	nop			@ (mov r8, r8)
 800ced0:	200011b8 	.word	0x200011b8

0800ced4 <__errno>:
 800ced4:	4b01      	ldr	r3, [pc, #4]	@ (800cedc <__errno+0x8>)
 800ced6:	6818      	ldr	r0, [r3, #0]
 800ced8:	4770      	bx	lr
 800ceda:	46c0      	nop			@ (mov r8, r8)
 800cedc:	20000054 	.word	0x20000054

0800cee0 <__libc_init_array>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	2600      	movs	r6, #0
 800cee4:	4c0c      	ldr	r4, [pc, #48]	@ (800cf18 <__libc_init_array+0x38>)
 800cee6:	4d0d      	ldr	r5, [pc, #52]	@ (800cf1c <__libc_init_array+0x3c>)
 800cee8:	1b64      	subs	r4, r4, r5
 800ceea:	10a4      	asrs	r4, r4, #2
 800ceec:	42a6      	cmp	r6, r4
 800ceee:	d109      	bne.n	800cf04 <__libc_init_array+0x24>
 800cef0:	2600      	movs	r6, #0
 800cef2:	f002 fae1 	bl	800f4b8 <_init>
 800cef6:	4c0a      	ldr	r4, [pc, #40]	@ (800cf20 <__libc_init_array+0x40>)
 800cef8:	4d0a      	ldr	r5, [pc, #40]	@ (800cf24 <__libc_init_array+0x44>)
 800cefa:	1b64      	subs	r4, r4, r5
 800cefc:	10a4      	asrs	r4, r4, #2
 800cefe:	42a6      	cmp	r6, r4
 800cf00:	d105      	bne.n	800cf0e <__libc_init_array+0x2e>
 800cf02:	bd70      	pop	{r4, r5, r6, pc}
 800cf04:	00b3      	lsls	r3, r6, #2
 800cf06:	58eb      	ldr	r3, [r5, r3]
 800cf08:	4798      	blx	r3
 800cf0a:	3601      	adds	r6, #1
 800cf0c:	e7ee      	b.n	800ceec <__libc_init_array+0xc>
 800cf0e:	00b3      	lsls	r3, r6, #2
 800cf10:	58eb      	ldr	r3, [r5, r3]
 800cf12:	4798      	blx	r3
 800cf14:	3601      	adds	r6, #1
 800cf16:	e7f2      	b.n	800cefe <__libc_init_array+0x1e>
 800cf18:	0800ff18 	.word	0x0800ff18
 800cf1c:	0800ff18 	.word	0x0800ff18
 800cf20:	0800ff1c 	.word	0x0800ff1c
 800cf24:	0800ff18 	.word	0x0800ff18

0800cf28 <__retarget_lock_init_recursive>:
 800cf28:	4770      	bx	lr

0800cf2a <__retarget_lock_acquire_recursive>:
 800cf2a:	4770      	bx	lr

0800cf2c <__retarget_lock_release_recursive>:
 800cf2c:	4770      	bx	lr

0800cf2e <memchr>:
 800cf2e:	b2c9      	uxtb	r1, r1
 800cf30:	1882      	adds	r2, r0, r2
 800cf32:	4290      	cmp	r0, r2
 800cf34:	d101      	bne.n	800cf3a <memchr+0xc>
 800cf36:	2000      	movs	r0, #0
 800cf38:	4770      	bx	lr
 800cf3a:	7803      	ldrb	r3, [r0, #0]
 800cf3c:	428b      	cmp	r3, r1
 800cf3e:	d0fb      	beq.n	800cf38 <memchr+0xa>
 800cf40:	3001      	adds	r0, #1
 800cf42:	e7f6      	b.n	800cf32 <memchr+0x4>

0800cf44 <quorem>:
 800cf44:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf46:	6902      	ldr	r2, [r0, #16]
 800cf48:	690f      	ldr	r7, [r1, #16]
 800cf4a:	b087      	sub	sp, #28
 800cf4c:	0006      	movs	r6, r0
 800cf4e:	000b      	movs	r3, r1
 800cf50:	2000      	movs	r0, #0
 800cf52:	9102      	str	r1, [sp, #8]
 800cf54:	42ba      	cmp	r2, r7
 800cf56:	db6d      	blt.n	800d034 <quorem+0xf0>
 800cf58:	3f01      	subs	r7, #1
 800cf5a:	00bc      	lsls	r4, r7, #2
 800cf5c:	3314      	adds	r3, #20
 800cf5e:	9305      	str	r3, [sp, #20]
 800cf60:	191b      	adds	r3, r3, r4
 800cf62:	9303      	str	r3, [sp, #12]
 800cf64:	0033      	movs	r3, r6
 800cf66:	3314      	adds	r3, #20
 800cf68:	191c      	adds	r4, r3, r4
 800cf6a:	9301      	str	r3, [sp, #4]
 800cf6c:	6823      	ldr	r3, [r4, #0]
 800cf6e:	9304      	str	r3, [sp, #16]
 800cf70:	9b03      	ldr	r3, [sp, #12]
 800cf72:	9804      	ldr	r0, [sp, #16]
 800cf74:	681d      	ldr	r5, [r3, #0]
 800cf76:	3501      	adds	r5, #1
 800cf78:	0029      	movs	r1, r5
 800cf7a:	f7f3 f8e1 	bl	8000140 <__udivsi3>
 800cf7e:	9b04      	ldr	r3, [sp, #16]
 800cf80:	9000      	str	r0, [sp, #0]
 800cf82:	42ab      	cmp	r3, r5
 800cf84:	d32b      	bcc.n	800cfde <quorem+0x9a>
 800cf86:	9b05      	ldr	r3, [sp, #20]
 800cf88:	9d01      	ldr	r5, [sp, #4]
 800cf8a:	469c      	mov	ip, r3
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	9305      	str	r3, [sp, #20]
 800cf90:	9304      	str	r3, [sp, #16]
 800cf92:	4662      	mov	r2, ip
 800cf94:	ca08      	ldmia	r2!, {r3}
 800cf96:	6828      	ldr	r0, [r5, #0]
 800cf98:	4694      	mov	ip, r2
 800cf9a:	9a00      	ldr	r2, [sp, #0]
 800cf9c:	b299      	uxth	r1, r3
 800cf9e:	4351      	muls	r1, r2
 800cfa0:	9a05      	ldr	r2, [sp, #20]
 800cfa2:	0c1b      	lsrs	r3, r3, #16
 800cfa4:	1889      	adds	r1, r1, r2
 800cfa6:	9a00      	ldr	r2, [sp, #0]
 800cfa8:	4353      	muls	r3, r2
 800cfaa:	0c0a      	lsrs	r2, r1, #16
 800cfac:	189b      	adds	r3, r3, r2
 800cfae:	0c1a      	lsrs	r2, r3, #16
 800cfb0:	b289      	uxth	r1, r1
 800cfb2:	9205      	str	r2, [sp, #20]
 800cfb4:	b282      	uxth	r2, r0
 800cfb6:	1a52      	subs	r2, r2, r1
 800cfb8:	9904      	ldr	r1, [sp, #16]
 800cfba:	0c00      	lsrs	r0, r0, #16
 800cfbc:	1852      	adds	r2, r2, r1
 800cfbe:	b29b      	uxth	r3, r3
 800cfc0:	1411      	asrs	r1, r2, #16
 800cfc2:	1ac3      	subs	r3, r0, r3
 800cfc4:	185b      	adds	r3, r3, r1
 800cfc6:	1419      	asrs	r1, r3, #16
 800cfc8:	b292      	uxth	r2, r2
 800cfca:	041b      	lsls	r3, r3, #16
 800cfcc:	431a      	orrs	r2, r3
 800cfce:	9b03      	ldr	r3, [sp, #12]
 800cfd0:	9104      	str	r1, [sp, #16]
 800cfd2:	c504      	stmia	r5!, {r2}
 800cfd4:	4563      	cmp	r3, ip
 800cfd6:	d2dc      	bcs.n	800cf92 <quorem+0x4e>
 800cfd8:	6823      	ldr	r3, [r4, #0]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d030      	beq.n	800d040 <quorem+0xfc>
 800cfde:	0030      	movs	r0, r6
 800cfe0:	9902      	ldr	r1, [sp, #8]
 800cfe2:	f001 f9c5 	bl	800e370 <__mcmp>
 800cfe6:	2800      	cmp	r0, #0
 800cfe8:	db23      	blt.n	800d032 <quorem+0xee>
 800cfea:	0034      	movs	r4, r6
 800cfec:	2500      	movs	r5, #0
 800cfee:	9902      	ldr	r1, [sp, #8]
 800cff0:	3414      	adds	r4, #20
 800cff2:	3114      	adds	r1, #20
 800cff4:	6823      	ldr	r3, [r4, #0]
 800cff6:	c901      	ldmia	r1!, {r0}
 800cff8:	9302      	str	r3, [sp, #8]
 800cffa:	466b      	mov	r3, sp
 800cffc:	891b      	ldrh	r3, [r3, #8]
 800cffe:	b282      	uxth	r2, r0
 800d000:	1a9a      	subs	r2, r3, r2
 800d002:	9b02      	ldr	r3, [sp, #8]
 800d004:	1952      	adds	r2, r2, r5
 800d006:	0c00      	lsrs	r0, r0, #16
 800d008:	0c1b      	lsrs	r3, r3, #16
 800d00a:	1a1b      	subs	r3, r3, r0
 800d00c:	1410      	asrs	r0, r2, #16
 800d00e:	181b      	adds	r3, r3, r0
 800d010:	141d      	asrs	r5, r3, #16
 800d012:	b292      	uxth	r2, r2
 800d014:	041b      	lsls	r3, r3, #16
 800d016:	431a      	orrs	r2, r3
 800d018:	9b03      	ldr	r3, [sp, #12]
 800d01a:	c404      	stmia	r4!, {r2}
 800d01c:	428b      	cmp	r3, r1
 800d01e:	d2e9      	bcs.n	800cff4 <quorem+0xb0>
 800d020:	9a01      	ldr	r2, [sp, #4]
 800d022:	00bb      	lsls	r3, r7, #2
 800d024:	18d3      	adds	r3, r2, r3
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	2a00      	cmp	r2, #0
 800d02a:	d013      	beq.n	800d054 <quorem+0x110>
 800d02c:	9b00      	ldr	r3, [sp, #0]
 800d02e:	3301      	adds	r3, #1
 800d030:	9300      	str	r3, [sp, #0]
 800d032:	9800      	ldr	r0, [sp, #0]
 800d034:	b007      	add	sp, #28
 800d036:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d038:	6823      	ldr	r3, [r4, #0]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d104      	bne.n	800d048 <quorem+0x104>
 800d03e:	3f01      	subs	r7, #1
 800d040:	9b01      	ldr	r3, [sp, #4]
 800d042:	3c04      	subs	r4, #4
 800d044:	42a3      	cmp	r3, r4
 800d046:	d3f7      	bcc.n	800d038 <quorem+0xf4>
 800d048:	6137      	str	r7, [r6, #16]
 800d04a:	e7c8      	b.n	800cfde <quorem+0x9a>
 800d04c:	681a      	ldr	r2, [r3, #0]
 800d04e:	2a00      	cmp	r2, #0
 800d050:	d104      	bne.n	800d05c <quorem+0x118>
 800d052:	3f01      	subs	r7, #1
 800d054:	9a01      	ldr	r2, [sp, #4]
 800d056:	3b04      	subs	r3, #4
 800d058:	429a      	cmp	r2, r3
 800d05a:	d3f7      	bcc.n	800d04c <quorem+0x108>
 800d05c:	6137      	str	r7, [r6, #16]
 800d05e:	e7e5      	b.n	800d02c <quorem+0xe8>

0800d060 <_dtoa_r>:
 800d060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d062:	0014      	movs	r4, r2
 800d064:	001d      	movs	r5, r3
 800d066:	69c6      	ldr	r6, [r0, #28]
 800d068:	b09d      	sub	sp, #116	@ 0x74
 800d06a:	940a      	str	r4, [sp, #40]	@ 0x28
 800d06c:	950b      	str	r5, [sp, #44]	@ 0x2c
 800d06e:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 800d070:	9003      	str	r0, [sp, #12]
 800d072:	2e00      	cmp	r6, #0
 800d074:	d10f      	bne.n	800d096 <_dtoa_r+0x36>
 800d076:	2010      	movs	r0, #16
 800d078:	f000 fe30 	bl	800dcdc <malloc>
 800d07c:	9b03      	ldr	r3, [sp, #12]
 800d07e:	1e02      	subs	r2, r0, #0
 800d080:	61d8      	str	r0, [r3, #28]
 800d082:	d104      	bne.n	800d08e <_dtoa_r+0x2e>
 800d084:	21ef      	movs	r1, #239	@ 0xef
 800d086:	4bc7      	ldr	r3, [pc, #796]	@ (800d3a4 <_dtoa_r+0x344>)
 800d088:	48c7      	ldr	r0, [pc, #796]	@ (800d3a8 <_dtoa_r+0x348>)
 800d08a:	f001 feab 	bl	800ede4 <__assert_func>
 800d08e:	6046      	str	r6, [r0, #4]
 800d090:	6086      	str	r6, [r0, #8]
 800d092:	6006      	str	r6, [r0, #0]
 800d094:	60c6      	str	r6, [r0, #12]
 800d096:	9b03      	ldr	r3, [sp, #12]
 800d098:	69db      	ldr	r3, [r3, #28]
 800d09a:	6819      	ldr	r1, [r3, #0]
 800d09c:	2900      	cmp	r1, #0
 800d09e:	d00b      	beq.n	800d0b8 <_dtoa_r+0x58>
 800d0a0:	685a      	ldr	r2, [r3, #4]
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	4093      	lsls	r3, r2
 800d0a6:	604a      	str	r2, [r1, #4]
 800d0a8:	608b      	str	r3, [r1, #8]
 800d0aa:	9803      	ldr	r0, [sp, #12]
 800d0ac:	f000 ff16 	bl	800dedc <_Bfree>
 800d0b0:	2200      	movs	r2, #0
 800d0b2:	9b03      	ldr	r3, [sp, #12]
 800d0b4:	69db      	ldr	r3, [r3, #28]
 800d0b6:	601a      	str	r2, [r3, #0]
 800d0b8:	2d00      	cmp	r5, #0
 800d0ba:	da1e      	bge.n	800d0fa <_dtoa_r+0x9a>
 800d0bc:	2301      	movs	r3, #1
 800d0be:	603b      	str	r3, [r7, #0]
 800d0c0:	006b      	lsls	r3, r5, #1
 800d0c2:	085b      	lsrs	r3, r3, #1
 800d0c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d0c6:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d0c8:	4bb8      	ldr	r3, [pc, #736]	@ (800d3ac <_dtoa_r+0x34c>)
 800d0ca:	4ab8      	ldr	r2, [pc, #736]	@ (800d3ac <_dtoa_r+0x34c>)
 800d0cc:	403b      	ands	r3, r7
 800d0ce:	4293      	cmp	r3, r2
 800d0d0:	d116      	bne.n	800d100 <_dtoa_r+0xa0>
 800d0d2:	4bb7      	ldr	r3, [pc, #732]	@ (800d3b0 <_dtoa_r+0x350>)
 800d0d4:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d0d6:	6013      	str	r3, [r2, #0]
 800d0d8:	033b      	lsls	r3, r7, #12
 800d0da:	0b1b      	lsrs	r3, r3, #12
 800d0dc:	4323      	orrs	r3, r4
 800d0de:	d101      	bne.n	800d0e4 <_dtoa_r+0x84>
 800d0e0:	f000 fd83 	bl	800dbea <_dtoa_r+0xb8a>
 800d0e4:	4bb3      	ldr	r3, [pc, #716]	@ (800d3b4 <_dtoa_r+0x354>)
 800d0e6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d0e8:	9308      	str	r3, [sp, #32]
 800d0ea:	2a00      	cmp	r2, #0
 800d0ec:	d002      	beq.n	800d0f4 <_dtoa_r+0x94>
 800d0ee:	4bb2      	ldr	r3, [pc, #712]	@ (800d3b8 <_dtoa_r+0x358>)
 800d0f0:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d0f2:	6013      	str	r3, [r2, #0]
 800d0f4:	9808      	ldr	r0, [sp, #32]
 800d0f6:	b01d      	add	sp, #116	@ 0x74
 800d0f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d0fa:	2300      	movs	r3, #0
 800d0fc:	603b      	str	r3, [r7, #0]
 800d0fe:	e7e2      	b.n	800d0c6 <_dtoa_r+0x66>
 800d100:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d102:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d104:	9212      	str	r2, [sp, #72]	@ 0x48
 800d106:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d108:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d10a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d10c:	2200      	movs	r2, #0
 800d10e:	2300      	movs	r3, #0
 800d110:	f7f3 f99c 	bl	800044c <__aeabi_dcmpeq>
 800d114:	1e06      	subs	r6, r0, #0
 800d116:	d00b      	beq.n	800d130 <_dtoa_r+0xd0>
 800d118:	2301      	movs	r3, #1
 800d11a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d11c:	6013      	str	r3, [r2, #0]
 800d11e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800d120:	2b00      	cmp	r3, #0
 800d122:	d002      	beq.n	800d12a <_dtoa_r+0xca>
 800d124:	4ba5      	ldr	r3, [pc, #660]	@ (800d3bc <_dtoa_r+0x35c>)
 800d126:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800d128:	6013      	str	r3, [r2, #0]
 800d12a:	4ba5      	ldr	r3, [pc, #660]	@ (800d3c0 <_dtoa_r+0x360>)
 800d12c:	9308      	str	r3, [sp, #32]
 800d12e:	e7e1      	b.n	800d0f4 <_dtoa_r+0x94>
 800d130:	ab1a      	add	r3, sp, #104	@ 0x68
 800d132:	9301      	str	r3, [sp, #4]
 800d134:	ab1b      	add	r3, sp, #108	@ 0x6c
 800d136:	9300      	str	r3, [sp, #0]
 800d138:	9803      	ldr	r0, [sp, #12]
 800d13a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800d13c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d13e:	f001 f9cd 	bl	800e4dc <__d2b>
 800d142:	007a      	lsls	r2, r7, #1
 800d144:	9005      	str	r0, [sp, #20]
 800d146:	0d52      	lsrs	r2, r2, #21
 800d148:	d100      	bne.n	800d14c <_dtoa_r+0xec>
 800d14a:	e07b      	b.n	800d244 <_dtoa_r+0x1e4>
 800d14c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d14e:	9618      	str	r6, [sp, #96]	@ 0x60
 800d150:	0319      	lsls	r1, r3, #12
 800d152:	4b9c      	ldr	r3, [pc, #624]	@ (800d3c4 <_dtoa_r+0x364>)
 800d154:	0b09      	lsrs	r1, r1, #12
 800d156:	430b      	orrs	r3, r1
 800d158:	499b      	ldr	r1, [pc, #620]	@ (800d3c8 <_dtoa_r+0x368>)
 800d15a:	1857      	adds	r7, r2, r1
 800d15c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d15e:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d160:	0019      	movs	r1, r3
 800d162:	2200      	movs	r2, #0
 800d164:	4b99      	ldr	r3, [pc, #612]	@ (800d3cc <_dtoa_r+0x36c>)
 800d166:	f7f5 fc79 	bl	8002a5c <__aeabi_dsub>
 800d16a:	4a99      	ldr	r2, [pc, #612]	@ (800d3d0 <_dtoa_r+0x370>)
 800d16c:	4b99      	ldr	r3, [pc, #612]	@ (800d3d4 <_dtoa_r+0x374>)
 800d16e:	f7f5 f9ad 	bl	80024cc <__aeabi_dmul>
 800d172:	4a99      	ldr	r2, [pc, #612]	@ (800d3d8 <_dtoa_r+0x378>)
 800d174:	4b99      	ldr	r3, [pc, #612]	@ (800d3dc <_dtoa_r+0x37c>)
 800d176:	f7f4 fa01 	bl	800157c <__aeabi_dadd>
 800d17a:	0004      	movs	r4, r0
 800d17c:	0038      	movs	r0, r7
 800d17e:	000d      	movs	r5, r1
 800d180:	f7f6 f866 	bl	8003250 <__aeabi_i2d>
 800d184:	4a96      	ldr	r2, [pc, #600]	@ (800d3e0 <_dtoa_r+0x380>)
 800d186:	4b97      	ldr	r3, [pc, #604]	@ (800d3e4 <_dtoa_r+0x384>)
 800d188:	f7f5 f9a0 	bl	80024cc <__aeabi_dmul>
 800d18c:	0002      	movs	r2, r0
 800d18e:	000b      	movs	r3, r1
 800d190:	0020      	movs	r0, r4
 800d192:	0029      	movs	r1, r5
 800d194:	f7f4 f9f2 	bl	800157c <__aeabi_dadd>
 800d198:	0004      	movs	r4, r0
 800d19a:	000d      	movs	r5, r1
 800d19c:	f7f6 f81c 	bl	80031d8 <__aeabi_d2iz>
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	9004      	str	r0, [sp, #16]
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	0020      	movs	r0, r4
 800d1a8:	0029      	movs	r1, r5
 800d1aa:	f7f3 f955 	bl	8000458 <__aeabi_dcmplt>
 800d1ae:	2800      	cmp	r0, #0
 800d1b0:	d00b      	beq.n	800d1ca <_dtoa_r+0x16a>
 800d1b2:	9804      	ldr	r0, [sp, #16]
 800d1b4:	f7f6 f84c 	bl	8003250 <__aeabi_i2d>
 800d1b8:	002b      	movs	r3, r5
 800d1ba:	0022      	movs	r2, r4
 800d1bc:	f7f3 f946 	bl	800044c <__aeabi_dcmpeq>
 800d1c0:	4243      	negs	r3, r0
 800d1c2:	4158      	adcs	r0, r3
 800d1c4:	9b04      	ldr	r3, [sp, #16]
 800d1c6:	1a1b      	subs	r3, r3, r0
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	9315      	str	r3, [sp, #84]	@ 0x54
 800d1ce:	9b04      	ldr	r3, [sp, #16]
 800d1d0:	2b16      	cmp	r3, #22
 800d1d2:	d810      	bhi.n	800d1f6 <_dtoa_r+0x196>
 800d1d4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d1d6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d1d8:	9a04      	ldr	r2, [sp, #16]
 800d1da:	4b83      	ldr	r3, [pc, #524]	@ (800d3e8 <_dtoa_r+0x388>)
 800d1dc:	00d2      	lsls	r2, r2, #3
 800d1de:	189b      	adds	r3, r3, r2
 800d1e0:	681a      	ldr	r2, [r3, #0]
 800d1e2:	685b      	ldr	r3, [r3, #4]
 800d1e4:	f7f3 f938 	bl	8000458 <__aeabi_dcmplt>
 800d1e8:	2800      	cmp	r0, #0
 800d1ea:	d047      	beq.n	800d27c <_dtoa_r+0x21c>
 800d1ec:	9b04      	ldr	r3, [sp, #16]
 800d1ee:	3b01      	subs	r3, #1
 800d1f0:	9304      	str	r3, [sp, #16]
 800d1f2:	2300      	movs	r3, #0
 800d1f4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d1f6:	2200      	movs	r2, #0
 800d1f8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 800d1fa:	9206      	str	r2, [sp, #24]
 800d1fc:	1bdb      	subs	r3, r3, r7
 800d1fe:	1e5a      	subs	r2, r3, #1
 800d200:	d53e      	bpl.n	800d280 <_dtoa_r+0x220>
 800d202:	2201      	movs	r2, #1
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	9306      	str	r3, [sp, #24]
 800d208:	2300      	movs	r3, #0
 800d20a:	930d      	str	r3, [sp, #52]	@ 0x34
 800d20c:	9b04      	ldr	r3, [sp, #16]
 800d20e:	2b00      	cmp	r3, #0
 800d210:	db38      	blt.n	800d284 <_dtoa_r+0x224>
 800d212:	9a04      	ldr	r2, [sp, #16]
 800d214:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d216:	4694      	mov	ip, r2
 800d218:	4463      	add	r3, ip
 800d21a:	930d      	str	r3, [sp, #52]	@ 0x34
 800d21c:	2300      	movs	r3, #0
 800d21e:	9214      	str	r2, [sp, #80]	@ 0x50
 800d220:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d222:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d224:	2401      	movs	r4, #1
 800d226:	2b09      	cmp	r3, #9
 800d228:	d867      	bhi.n	800d2fa <_dtoa_r+0x29a>
 800d22a:	2b05      	cmp	r3, #5
 800d22c:	dd02      	ble.n	800d234 <_dtoa_r+0x1d4>
 800d22e:	2400      	movs	r4, #0
 800d230:	3b04      	subs	r3, #4
 800d232:	9322      	str	r3, [sp, #136]	@ 0x88
 800d234:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d236:	1e98      	subs	r0, r3, #2
 800d238:	2803      	cmp	r0, #3
 800d23a:	d867      	bhi.n	800d30c <_dtoa_r+0x2ac>
 800d23c:	f7f2 ff6c 	bl	8000118 <__gnu_thumb1_case_uqi>
 800d240:	5b383a2b 	.word	0x5b383a2b
 800d244:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d246:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 800d248:	18f6      	adds	r6, r6, r3
 800d24a:	4b68      	ldr	r3, [pc, #416]	@ (800d3ec <_dtoa_r+0x38c>)
 800d24c:	18f2      	adds	r2, r6, r3
 800d24e:	2a20      	cmp	r2, #32
 800d250:	dd0f      	ble.n	800d272 <_dtoa_r+0x212>
 800d252:	2340      	movs	r3, #64	@ 0x40
 800d254:	1a9b      	subs	r3, r3, r2
 800d256:	409f      	lsls	r7, r3
 800d258:	4b65      	ldr	r3, [pc, #404]	@ (800d3f0 <_dtoa_r+0x390>)
 800d25a:	0038      	movs	r0, r7
 800d25c:	18f3      	adds	r3, r6, r3
 800d25e:	40dc      	lsrs	r4, r3
 800d260:	4320      	orrs	r0, r4
 800d262:	f7f6 f823 	bl	80032ac <__aeabi_ui2d>
 800d266:	2201      	movs	r2, #1
 800d268:	4b62      	ldr	r3, [pc, #392]	@ (800d3f4 <_dtoa_r+0x394>)
 800d26a:	1e77      	subs	r7, r6, #1
 800d26c:	18cb      	adds	r3, r1, r3
 800d26e:	9218      	str	r2, [sp, #96]	@ 0x60
 800d270:	e776      	b.n	800d160 <_dtoa_r+0x100>
 800d272:	2320      	movs	r3, #32
 800d274:	0020      	movs	r0, r4
 800d276:	1a9b      	subs	r3, r3, r2
 800d278:	4098      	lsls	r0, r3
 800d27a:	e7f2      	b.n	800d262 <_dtoa_r+0x202>
 800d27c:	9015      	str	r0, [sp, #84]	@ 0x54
 800d27e:	e7ba      	b.n	800d1f6 <_dtoa_r+0x196>
 800d280:	920d      	str	r2, [sp, #52]	@ 0x34
 800d282:	e7c3      	b.n	800d20c <_dtoa_r+0x1ac>
 800d284:	9b06      	ldr	r3, [sp, #24]
 800d286:	9a04      	ldr	r2, [sp, #16]
 800d288:	1a9b      	subs	r3, r3, r2
 800d28a:	9306      	str	r3, [sp, #24]
 800d28c:	4253      	negs	r3, r2
 800d28e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d290:	2300      	movs	r3, #0
 800d292:	9314      	str	r3, [sp, #80]	@ 0x50
 800d294:	e7c5      	b.n	800d222 <_dtoa_r+0x1c2>
 800d296:	2300      	movs	r3, #0
 800d298:	9310      	str	r3, [sp, #64]	@ 0x40
 800d29a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d29c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d29e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	dc13      	bgt.n	800d2cc <_dtoa_r+0x26c>
 800d2a4:	2301      	movs	r3, #1
 800d2a6:	001a      	movs	r2, r3
 800d2a8:	930e      	str	r3, [sp, #56]	@ 0x38
 800d2aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ac:	9223      	str	r2, [sp, #140]	@ 0x8c
 800d2ae:	e00d      	b.n	800d2cc <_dtoa_r+0x26c>
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e7f1      	b.n	800d298 <_dtoa_r+0x238>
 800d2b4:	2300      	movs	r3, #0
 800d2b6:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d2b8:	9310      	str	r3, [sp, #64]	@ 0x40
 800d2ba:	4694      	mov	ip, r2
 800d2bc:	9b04      	ldr	r3, [sp, #16]
 800d2be:	4463      	add	r3, ip
 800d2c0:	930e      	str	r3, [sp, #56]	@ 0x38
 800d2c2:	3301      	adds	r3, #1
 800d2c4:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2c6:	2b00      	cmp	r3, #0
 800d2c8:	dc00      	bgt.n	800d2cc <_dtoa_r+0x26c>
 800d2ca:	2301      	movs	r3, #1
 800d2cc:	9a03      	ldr	r2, [sp, #12]
 800d2ce:	2100      	movs	r1, #0
 800d2d0:	69d0      	ldr	r0, [r2, #28]
 800d2d2:	2204      	movs	r2, #4
 800d2d4:	0015      	movs	r5, r2
 800d2d6:	3514      	adds	r5, #20
 800d2d8:	429d      	cmp	r5, r3
 800d2da:	d91b      	bls.n	800d314 <_dtoa_r+0x2b4>
 800d2dc:	6041      	str	r1, [r0, #4]
 800d2de:	9803      	ldr	r0, [sp, #12]
 800d2e0:	f000 fdb8 	bl	800de54 <_Balloc>
 800d2e4:	9008      	str	r0, [sp, #32]
 800d2e6:	2800      	cmp	r0, #0
 800d2e8:	d117      	bne.n	800d31a <_dtoa_r+0x2ba>
 800d2ea:	21b0      	movs	r1, #176	@ 0xb0
 800d2ec:	4b42      	ldr	r3, [pc, #264]	@ (800d3f8 <_dtoa_r+0x398>)
 800d2ee:	482e      	ldr	r0, [pc, #184]	@ (800d3a8 <_dtoa_r+0x348>)
 800d2f0:	9a08      	ldr	r2, [sp, #32]
 800d2f2:	31ff      	adds	r1, #255	@ 0xff
 800d2f4:	e6c9      	b.n	800d08a <_dtoa_r+0x2a>
 800d2f6:	2301      	movs	r3, #1
 800d2f8:	e7dd      	b.n	800d2b6 <_dtoa_r+0x256>
 800d2fa:	2300      	movs	r3, #0
 800d2fc:	9410      	str	r4, [sp, #64]	@ 0x40
 800d2fe:	9322      	str	r3, [sp, #136]	@ 0x88
 800d300:	3b01      	subs	r3, #1
 800d302:	930e      	str	r3, [sp, #56]	@ 0x38
 800d304:	9309      	str	r3, [sp, #36]	@ 0x24
 800d306:	2200      	movs	r2, #0
 800d308:	3313      	adds	r3, #19
 800d30a:	e7cf      	b.n	800d2ac <_dtoa_r+0x24c>
 800d30c:	2301      	movs	r3, #1
 800d30e:	9310      	str	r3, [sp, #64]	@ 0x40
 800d310:	3b02      	subs	r3, #2
 800d312:	e7f6      	b.n	800d302 <_dtoa_r+0x2a2>
 800d314:	3101      	adds	r1, #1
 800d316:	0052      	lsls	r2, r2, #1
 800d318:	e7dc      	b.n	800d2d4 <_dtoa_r+0x274>
 800d31a:	9b03      	ldr	r3, [sp, #12]
 800d31c:	9a08      	ldr	r2, [sp, #32]
 800d31e:	69db      	ldr	r3, [r3, #28]
 800d320:	601a      	str	r2, [r3, #0]
 800d322:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d324:	2b0e      	cmp	r3, #14
 800d326:	d900      	bls.n	800d32a <_dtoa_r+0x2ca>
 800d328:	e0d9      	b.n	800d4de <_dtoa_r+0x47e>
 800d32a:	2c00      	cmp	r4, #0
 800d32c:	d100      	bne.n	800d330 <_dtoa_r+0x2d0>
 800d32e:	e0d6      	b.n	800d4de <_dtoa_r+0x47e>
 800d330:	9b04      	ldr	r3, [sp, #16]
 800d332:	2b00      	cmp	r3, #0
 800d334:	dd64      	ble.n	800d400 <_dtoa_r+0x3a0>
 800d336:	210f      	movs	r1, #15
 800d338:	9a04      	ldr	r2, [sp, #16]
 800d33a:	4b2b      	ldr	r3, [pc, #172]	@ (800d3e8 <_dtoa_r+0x388>)
 800d33c:	400a      	ands	r2, r1
 800d33e:	00d2      	lsls	r2, r2, #3
 800d340:	189b      	adds	r3, r3, r2
 800d342:	681e      	ldr	r6, [r3, #0]
 800d344:	685f      	ldr	r7, [r3, #4]
 800d346:	9b04      	ldr	r3, [sp, #16]
 800d348:	2402      	movs	r4, #2
 800d34a:	111d      	asrs	r5, r3, #4
 800d34c:	05db      	lsls	r3, r3, #23
 800d34e:	d50a      	bpl.n	800d366 <_dtoa_r+0x306>
 800d350:	4b2a      	ldr	r3, [pc, #168]	@ (800d3fc <_dtoa_r+0x39c>)
 800d352:	400d      	ands	r5, r1
 800d354:	6a1a      	ldr	r2, [r3, #32]
 800d356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d358:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d35a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d35c:	f7f4 fc72 	bl	8001c44 <__aeabi_ddiv>
 800d360:	900a      	str	r0, [sp, #40]	@ 0x28
 800d362:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d364:	3401      	adds	r4, #1
 800d366:	4b25      	ldr	r3, [pc, #148]	@ (800d3fc <_dtoa_r+0x39c>)
 800d368:	930c      	str	r3, [sp, #48]	@ 0x30
 800d36a:	2d00      	cmp	r5, #0
 800d36c:	d108      	bne.n	800d380 <_dtoa_r+0x320>
 800d36e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d370:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d372:	0032      	movs	r2, r6
 800d374:	003b      	movs	r3, r7
 800d376:	f7f4 fc65 	bl	8001c44 <__aeabi_ddiv>
 800d37a:	900a      	str	r0, [sp, #40]	@ 0x28
 800d37c:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d37e:	e05a      	b.n	800d436 <_dtoa_r+0x3d6>
 800d380:	2301      	movs	r3, #1
 800d382:	421d      	tst	r5, r3
 800d384:	d009      	beq.n	800d39a <_dtoa_r+0x33a>
 800d386:	18e4      	adds	r4, r4, r3
 800d388:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d38a:	0030      	movs	r0, r6
 800d38c:	681a      	ldr	r2, [r3, #0]
 800d38e:	685b      	ldr	r3, [r3, #4]
 800d390:	0039      	movs	r1, r7
 800d392:	f7f5 f89b 	bl	80024cc <__aeabi_dmul>
 800d396:	0006      	movs	r6, r0
 800d398:	000f      	movs	r7, r1
 800d39a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d39c:	106d      	asrs	r5, r5, #1
 800d39e:	3308      	adds	r3, #8
 800d3a0:	e7e2      	b.n	800d368 <_dtoa_r+0x308>
 800d3a2:	46c0      	nop			@ (mov r8, r8)
 800d3a4:	0800fbc9 	.word	0x0800fbc9
 800d3a8:	0800fbe0 	.word	0x0800fbe0
 800d3ac:	7ff00000 	.word	0x7ff00000
 800d3b0:	0000270f 	.word	0x0000270f
 800d3b4:	0800fbc5 	.word	0x0800fbc5
 800d3b8:	0800fbc8 	.word	0x0800fbc8
 800d3bc:	0800fb99 	.word	0x0800fb99
 800d3c0:	0800fb98 	.word	0x0800fb98
 800d3c4:	3ff00000 	.word	0x3ff00000
 800d3c8:	fffffc01 	.word	0xfffffc01
 800d3cc:	3ff80000 	.word	0x3ff80000
 800d3d0:	636f4361 	.word	0x636f4361
 800d3d4:	3fd287a7 	.word	0x3fd287a7
 800d3d8:	8b60c8b3 	.word	0x8b60c8b3
 800d3dc:	3fc68a28 	.word	0x3fc68a28
 800d3e0:	509f79fb 	.word	0x509f79fb
 800d3e4:	3fd34413 	.word	0x3fd34413
 800d3e8:	0800fcd8 	.word	0x0800fcd8
 800d3ec:	00000432 	.word	0x00000432
 800d3f0:	00000412 	.word	0x00000412
 800d3f4:	fe100000 	.word	0xfe100000
 800d3f8:	0800fc38 	.word	0x0800fc38
 800d3fc:	0800fcb0 	.word	0x0800fcb0
 800d400:	9b04      	ldr	r3, [sp, #16]
 800d402:	2402      	movs	r4, #2
 800d404:	2b00      	cmp	r3, #0
 800d406:	d016      	beq.n	800d436 <_dtoa_r+0x3d6>
 800d408:	9812      	ldr	r0, [sp, #72]	@ 0x48
 800d40a:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 800d40c:	220f      	movs	r2, #15
 800d40e:	425d      	negs	r5, r3
 800d410:	402a      	ands	r2, r5
 800d412:	4bd7      	ldr	r3, [pc, #860]	@ (800d770 <_dtoa_r+0x710>)
 800d414:	00d2      	lsls	r2, r2, #3
 800d416:	189b      	adds	r3, r3, r2
 800d418:	681a      	ldr	r2, [r3, #0]
 800d41a:	685b      	ldr	r3, [r3, #4]
 800d41c:	f7f5 f856 	bl	80024cc <__aeabi_dmul>
 800d420:	2701      	movs	r7, #1
 800d422:	2300      	movs	r3, #0
 800d424:	900a      	str	r0, [sp, #40]	@ 0x28
 800d426:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d428:	4ed2      	ldr	r6, [pc, #840]	@ (800d774 <_dtoa_r+0x714>)
 800d42a:	112d      	asrs	r5, r5, #4
 800d42c:	2d00      	cmp	r5, #0
 800d42e:	d000      	beq.n	800d432 <_dtoa_r+0x3d2>
 800d430:	e0ba      	b.n	800d5a8 <_dtoa_r+0x548>
 800d432:	2b00      	cmp	r3, #0
 800d434:	d1a1      	bne.n	800d37a <_dtoa_r+0x31a>
 800d436:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d438:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d43a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	d100      	bne.n	800d442 <_dtoa_r+0x3e2>
 800d440:	e0bd      	b.n	800d5be <_dtoa_r+0x55e>
 800d442:	2200      	movs	r2, #0
 800d444:	0030      	movs	r0, r6
 800d446:	0039      	movs	r1, r7
 800d448:	4bcb      	ldr	r3, [pc, #812]	@ (800d778 <_dtoa_r+0x718>)
 800d44a:	f7f3 f805 	bl	8000458 <__aeabi_dcmplt>
 800d44e:	2800      	cmp	r0, #0
 800d450:	d100      	bne.n	800d454 <_dtoa_r+0x3f4>
 800d452:	e0b4      	b.n	800d5be <_dtoa_r+0x55e>
 800d454:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d456:	2b00      	cmp	r3, #0
 800d458:	d100      	bne.n	800d45c <_dtoa_r+0x3fc>
 800d45a:	e0b0      	b.n	800d5be <_dtoa_r+0x55e>
 800d45c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d45e:	2b00      	cmp	r3, #0
 800d460:	dd39      	ble.n	800d4d6 <_dtoa_r+0x476>
 800d462:	9b04      	ldr	r3, [sp, #16]
 800d464:	2200      	movs	r2, #0
 800d466:	3b01      	subs	r3, #1
 800d468:	930c      	str	r3, [sp, #48]	@ 0x30
 800d46a:	0030      	movs	r0, r6
 800d46c:	4bc3      	ldr	r3, [pc, #780]	@ (800d77c <_dtoa_r+0x71c>)
 800d46e:	0039      	movs	r1, r7
 800d470:	f7f5 f82c 	bl	80024cc <__aeabi_dmul>
 800d474:	900a      	str	r0, [sp, #40]	@ 0x28
 800d476:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d478:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d47a:	3401      	adds	r4, #1
 800d47c:	0020      	movs	r0, r4
 800d47e:	9311      	str	r3, [sp, #68]	@ 0x44
 800d480:	f7f5 fee6 	bl	8003250 <__aeabi_i2d>
 800d484:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d486:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d488:	f7f5 f820 	bl	80024cc <__aeabi_dmul>
 800d48c:	4bbc      	ldr	r3, [pc, #752]	@ (800d780 <_dtoa_r+0x720>)
 800d48e:	2200      	movs	r2, #0
 800d490:	f7f4 f874 	bl	800157c <__aeabi_dadd>
 800d494:	4bbb      	ldr	r3, [pc, #748]	@ (800d784 <_dtoa_r+0x724>)
 800d496:	0006      	movs	r6, r0
 800d498:	18cf      	adds	r7, r1, r3
 800d49a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d49c:	2b00      	cmp	r3, #0
 800d49e:	d000      	beq.n	800d4a2 <_dtoa_r+0x442>
 800d4a0:	e091      	b.n	800d5c6 <_dtoa_r+0x566>
 800d4a2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d4a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d4a6:	2200      	movs	r2, #0
 800d4a8:	4bb7      	ldr	r3, [pc, #732]	@ (800d788 <_dtoa_r+0x728>)
 800d4aa:	f7f5 fad7 	bl	8002a5c <__aeabi_dsub>
 800d4ae:	0032      	movs	r2, r6
 800d4b0:	003b      	movs	r3, r7
 800d4b2:	0004      	movs	r4, r0
 800d4b4:	000d      	movs	r5, r1
 800d4b6:	f7f2 ffe3 	bl	8000480 <__aeabi_dcmpgt>
 800d4ba:	2800      	cmp	r0, #0
 800d4bc:	d000      	beq.n	800d4c0 <_dtoa_r+0x460>
 800d4be:	e29d      	b.n	800d9fc <_dtoa_r+0x99c>
 800d4c0:	2180      	movs	r1, #128	@ 0x80
 800d4c2:	0609      	lsls	r1, r1, #24
 800d4c4:	187b      	adds	r3, r7, r1
 800d4c6:	0032      	movs	r2, r6
 800d4c8:	0020      	movs	r0, r4
 800d4ca:	0029      	movs	r1, r5
 800d4cc:	f7f2 ffc4 	bl	8000458 <__aeabi_dcmplt>
 800d4d0:	2800      	cmp	r0, #0
 800d4d2:	d000      	beq.n	800d4d6 <_dtoa_r+0x476>
 800d4d4:	e130      	b.n	800d738 <_dtoa_r+0x6d8>
 800d4d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d4d8:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 800d4da:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4dc:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d4de:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	da00      	bge.n	800d4e6 <_dtoa_r+0x486>
 800d4e4:	e177      	b.n	800d7d6 <_dtoa_r+0x776>
 800d4e6:	9a04      	ldr	r2, [sp, #16]
 800d4e8:	2a0e      	cmp	r2, #14
 800d4ea:	dd00      	ble.n	800d4ee <_dtoa_r+0x48e>
 800d4ec:	e173      	b.n	800d7d6 <_dtoa_r+0x776>
 800d4ee:	4ba0      	ldr	r3, [pc, #640]	@ (800d770 <_dtoa_r+0x710>)
 800d4f0:	00d2      	lsls	r2, r2, #3
 800d4f2:	189b      	adds	r3, r3, r2
 800d4f4:	685c      	ldr	r4, [r3, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	9306      	str	r3, [sp, #24]
 800d4fa:	9407      	str	r4, [sp, #28]
 800d4fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	da03      	bge.n	800d50a <_dtoa_r+0x4aa>
 800d502:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d504:	2b00      	cmp	r3, #0
 800d506:	dc00      	bgt.n	800d50a <_dtoa_r+0x4aa>
 800d508:	e106      	b.n	800d718 <_dtoa_r+0x6b8>
 800d50a:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800d50c:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 800d50e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d510:	9d08      	ldr	r5, [sp, #32]
 800d512:	3b01      	subs	r3, #1
 800d514:	195b      	adds	r3, r3, r5
 800d516:	930a      	str	r3, [sp, #40]	@ 0x28
 800d518:	9a06      	ldr	r2, [sp, #24]
 800d51a:	9b07      	ldr	r3, [sp, #28]
 800d51c:	0030      	movs	r0, r6
 800d51e:	0039      	movs	r1, r7
 800d520:	f7f4 fb90 	bl	8001c44 <__aeabi_ddiv>
 800d524:	f7f5 fe58 	bl	80031d8 <__aeabi_d2iz>
 800d528:	9009      	str	r0, [sp, #36]	@ 0x24
 800d52a:	f7f5 fe91 	bl	8003250 <__aeabi_i2d>
 800d52e:	9a06      	ldr	r2, [sp, #24]
 800d530:	9b07      	ldr	r3, [sp, #28]
 800d532:	f7f4 ffcb 	bl	80024cc <__aeabi_dmul>
 800d536:	0002      	movs	r2, r0
 800d538:	000b      	movs	r3, r1
 800d53a:	0030      	movs	r0, r6
 800d53c:	0039      	movs	r1, r7
 800d53e:	f7f5 fa8d 	bl	8002a5c <__aeabi_dsub>
 800d542:	002b      	movs	r3, r5
 800d544:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d546:	3501      	adds	r5, #1
 800d548:	3230      	adds	r2, #48	@ 0x30
 800d54a:	701a      	strb	r2, [r3, #0]
 800d54c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d54e:	002c      	movs	r4, r5
 800d550:	429a      	cmp	r2, r3
 800d552:	d000      	beq.n	800d556 <_dtoa_r+0x4f6>
 800d554:	e131      	b.n	800d7ba <_dtoa_r+0x75a>
 800d556:	0002      	movs	r2, r0
 800d558:	000b      	movs	r3, r1
 800d55a:	f7f4 f80f 	bl	800157c <__aeabi_dadd>
 800d55e:	9a06      	ldr	r2, [sp, #24]
 800d560:	9b07      	ldr	r3, [sp, #28]
 800d562:	0006      	movs	r6, r0
 800d564:	000f      	movs	r7, r1
 800d566:	f7f2 ff8b 	bl	8000480 <__aeabi_dcmpgt>
 800d56a:	2800      	cmp	r0, #0
 800d56c:	d000      	beq.n	800d570 <_dtoa_r+0x510>
 800d56e:	e10f      	b.n	800d790 <_dtoa_r+0x730>
 800d570:	9a06      	ldr	r2, [sp, #24]
 800d572:	9b07      	ldr	r3, [sp, #28]
 800d574:	0030      	movs	r0, r6
 800d576:	0039      	movs	r1, r7
 800d578:	f7f2 ff68 	bl	800044c <__aeabi_dcmpeq>
 800d57c:	2800      	cmp	r0, #0
 800d57e:	d003      	beq.n	800d588 <_dtoa_r+0x528>
 800d580:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d582:	07dd      	lsls	r5, r3, #31
 800d584:	d500      	bpl.n	800d588 <_dtoa_r+0x528>
 800d586:	e103      	b.n	800d790 <_dtoa_r+0x730>
 800d588:	9905      	ldr	r1, [sp, #20]
 800d58a:	9803      	ldr	r0, [sp, #12]
 800d58c:	f000 fca6 	bl	800dedc <_Bfree>
 800d590:	2300      	movs	r3, #0
 800d592:	7023      	strb	r3, [r4, #0]
 800d594:	9b04      	ldr	r3, [sp, #16]
 800d596:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800d598:	3301      	adds	r3, #1
 800d59a:	6013      	str	r3, [r2, #0]
 800d59c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d100      	bne.n	800d5a4 <_dtoa_r+0x544>
 800d5a2:	e5a7      	b.n	800d0f4 <_dtoa_r+0x94>
 800d5a4:	601c      	str	r4, [r3, #0]
 800d5a6:	e5a5      	b.n	800d0f4 <_dtoa_r+0x94>
 800d5a8:	423d      	tst	r5, r7
 800d5aa:	d005      	beq.n	800d5b8 <_dtoa_r+0x558>
 800d5ac:	6832      	ldr	r2, [r6, #0]
 800d5ae:	6873      	ldr	r3, [r6, #4]
 800d5b0:	f7f4 ff8c 	bl	80024cc <__aeabi_dmul>
 800d5b4:	003b      	movs	r3, r7
 800d5b6:	3401      	adds	r4, #1
 800d5b8:	106d      	asrs	r5, r5, #1
 800d5ba:	3608      	adds	r6, #8
 800d5bc:	e736      	b.n	800d42c <_dtoa_r+0x3cc>
 800d5be:	9b04      	ldr	r3, [sp, #16]
 800d5c0:	930c      	str	r3, [sp, #48]	@ 0x30
 800d5c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d5c4:	e75a      	b.n	800d47c <_dtoa_r+0x41c>
 800d5c6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d5c8:	4b69      	ldr	r3, [pc, #420]	@ (800d770 <_dtoa_r+0x710>)
 800d5ca:	3a01      	subs	r2, #1
 800d5cc:	00d2      	lsls	r2, r2, #3
 800d5ce:	9910      	ldr	r1, [sp, #64]	@ 0x40
 800d5d0:	189b      	adds	r3, r3, r2
 800d5d2:	681a      	ldr	r2, [r3, #0]
 800d5d4:	685b      	ldr	r3, [r3, #4]
 800d5d6:	2900      	cmp	r1, #0
 800d5d8:	d04c      	beq.n	800d674 <_dtoa_r+0x614>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	496b      	ldr	r1, [pc, #428]	@ (800d78c <_dtoa_r+0x72c>)
 800d5de:	f7f4 fb31 	bl	8001c44 <__aeabi_ddiv>
 800d5e2:	0032      	movs	r2, r6
 800d5e4:	003b      	movs	r3, r7
 800d5e6:	f7f5 fa39 	bl	8002a5c <__aeabi_dsub>
 800d5ea:	9a08      	ldr	r2, [sp, #32]
 800d5ec:	0006      	movs	r6, r0
 800d5ee:	4694      	mov	ip, r2
 800d5f0:	000f      	movs	r7, r1
 800d5f2:	9b08      	ldr	r3, [sp, #32]
 800d5f4:	9316      	str	r3, [sp, #88]	@ 0x58
 800d5f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d5f8:	4463      	add	r3, ip
 800d5fa:	9311      	str	r3, [sp, #68]	@ 0x44
 800d5fc:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d5fe:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d600:	f7f5 fdea 	bl	80031d8 <__aeabi_d2iz>
 800d604:	0005      	movs	r5, r0
 800d606:	f7f5 fe23 	bl	8003250 <__aeabi_i2d>
 800d60a:	0002      	movs	r2, r0
 800d60c:	000b      	movs	r3, r1
 800d60e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d610:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d612:	f7f5 fa23 	bl	8002a5c <__aeabi_dsub>
 800d616:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d618:	3530      	adds	r5, #48	@ 0x30
 800d61a:	1c5c      	adds	r4, r3, #1
 800d61c:	701d      	strb	r5, [r3, #0]
 800d61e:	0032      	movs	r2, r6
 800d620:	003b      	movs	r3, r7
 800d622:	900a      	str	r0, [sp, #40]	@ 0x28
 800d624:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d626:	f7f2 ff17 	bl	8000458 <__aeabi_dcmplt>
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d16a      	bne.n	800d704 <_dtoa_r+0x6a4>
 800d62e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d630:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d632:	2000      	movs	r0, #0
 800d634:	4950      	ldr	r1, [pc, #320]	@ (800d778 <_dtoa_r+0x718>)
 800d636:	f7f5 fa11 	bl	8002a5c <__aeabi_dsub>
 800d63a:	0032      	movs	r2, r6
 800d63c:	003b      	movs	r3, r7
 800d63e:	f7f2 ff0b 	bl	8000458 <__aeabi_dcmplt>
 800d642:	2800      	cmp	r0, #0
 800d644:	d000      	beq.n	800d648 <_dtoa_r+0x5e8>
 800d646:	e0a5      	b.n	800d794 <_dtoa_r+0x734>
 800d648:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d64a:	42a3      	cmp	r3, r4
 800d64c:	d100      	bne.n	800d650 <_dtoa_r+0x5f0>
 800d64e:	e742      	b.n	800d4d6 <_dtoa_r+0x476>
 800d650:	2200      	movs	r2, #0
 800d652:	0030      	movs	r0, r6
 800d654:	0039      	movs	r1, r7
 800d656:	4b49      	ldr	r3, [pc, #292]	@ (800d77c <_dtoa_r+0x71c>)
 800d658:	f7f4 ff38 	bl	80024cc <__aeabi_dmul>
 800d65c:	2200      	movs	r2, #0
 800d65e:	0006      	movs	r6, r0
 800d660:	000f      	movs	r7, r1
 800d662:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d664:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d666:	4b45      	ldr	r3, [pc, #276]	@ (800d77c <_dtoa_r+0x71c>)
 800d668:	f7f4 ff30 	bl	80024cc <__aeabi_dmul>
 800d66c:	9416      	str	r4, [sp, #88]	@ 0x58
 800d66e:	900a      	str	r0, [sp, #40]	@ 0x28
 800d670:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d672:	e7c3      	b.n	800d5fc <_dtoa_r+0x59c>
 800d674:	0030      	movs	r0, r6
 800d676:	0039      	movs	r1, r7
 800d678:	f7f4 ff28 	bl	80024cc <__aeabi_dmul>
 800d67c:	9d08      	ldr	r5, [sp, #32]
 800d67e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d680:	002b      	movs	r3, r5
 800d682:	4694      	mov	ip, r2
 800d684:	9016      	str	r0, [sp, #88]	@ 0x58
 800d686:	9117      	str	r1, [sp, #92]	@ 0x5c
 800d688:	4463      	add	r3, ip
 800d68a:	9319      	str	r3, [sp, #100]	@ 0x64
 800d68c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d68e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d690:	f7f5 fda2 	bl	80031d8 <__aeabi_d2iz>
 800d694:	0004      	movs	r4, r0
 800d696:	f7f5 fddb 	bl	8003250 <__aeabi_i2d>
 800d69a:	000b      	movs	r3, r1
 800d69c:	0002      	movs	r2, r0
 800d69e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800d6a0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d6a2:	f7f5 f9db 	bl	8002a5c <__aeabi_dsub>
 800d6a6:	3430      	adds	r4, #48	@ 0x30
 800d6a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d6aa:	702c      	strb	r4, [r5, #0]
 800d6ac:	3501      	adds	r5, #1
 800d6ae:	0006      	movs	r6, r0
 800d6b0:	000f      	movs	r7, r1
 800d6b2:	42ab      	cmp	r3, r5
 800d6b4:	d129      	bne.n	800d70a <_dtoa_r+0x6aa>
 800d6b6:	9816      	ldr	r0, [sp, #88]	@ 0x58
 800d6b8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 800d6ba:	9b08      	ldr	r3, [sp, #32]
 800d6bc:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 800d6be:	469c      	mov	ip, r3
 800d6c0:	2200      	movs	r2, #0
 800d6c2:	4b32      	ldr	r3, [pc, #200]	@ (800d78c <_dtoa_r+0x72c>)
 800d6c4:	4464      	add	r4, ip
 800d6c6:	f7f3 ff59 	bl	800157c <__aeabi_dadd>
 800d6ca:	0002      	movs	r2, r0
 800d6cc:	000b      	movs	r3, r1
 800d6ce:	0030      	movs	r0, r6
 800d6d0:	0039      	movs	r1, r7
 800d6d2:	f7f2 fed5 	bl	8000480 <__aeabi_dcmpgt>
 800d6d6:	2800      	cmp	r0, #0
 800d6d8:	d15c      	bne.n	800d794 <_dtoa_r+0x734>
 800d6da:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d6dc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800d6de:	2000      	movs	r0, #0
 800d6e0:	492a      	ldr	r1, [pc, #168]	@ (800d78c <_dtoa_r+0x72c>)
 800d6e2:	f7f5 f9bb 	bl	8002a5c <__aeabi_dsub>
 800d6e6:	0002      	movs	r2, r0
 800d6e8:	000b      	movs	r3, r1
 800d6ea:	0030      	movs	r0, r6
 800d6ec:	0039      	movs	r1, r7
 800d6ee:	f7f2 feb3 	bl	8000458 <__aeabi_dcmplt>
 800d6f2:	2800      	cmp	r0, #0
 800d6f4:	d100      	bne.n	800d6f8 <_dtoa_r+0x698>
 800d6f6:	e6ee      	b.n	800d4d6 <_dtoa_r+0x476>
 800d6f8:	0023      	movs	r3, r4
 800d6fa:	3c01      	subs	r4, #1
 800d6fc:	7822      	ldrb	r2, [r4, #0]
 800d6fe:	2a30      	cmp	r2, #48	@ 0x30
 800d700:	d0fa      	beq.n	800d6f8 <_dtoa_r+0x698>
 800d702:	001c      	movs	r4, r3
 800d704:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d706:	9304      	str	r3, [sp, #16]
 800d708:	e73e      	b.n	800d588 <_dtoa_r+0x528>
 800d70a:	2200      	movs	r2, #0
 800d70c:	4b1b      	ldr	r3, [pc, #108]	@ (800d77c <_dtoa_r+0x71c>)
 800d70e:	f7f4 fedd 	bl	80024cc <__aeabi_dmul>
 800d712:	900a      	str	r0, [sp, #40]	@ 0x28
 800d714:	910b      	str	r1, [sp, #44]	@ 0x2c
 800d716:	e7b9      	b.n	800d68c <_dtoa_r+0x62c>
 800d718:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	d10c      	bne.n	800d738 <_dtoa_r+0x6d8>
 800d71e:	9806      	ldr	r0, [sp, #24]
 800d720:	9907      	ldr	r1, [sp, #28]
 800d722:	2200      	movs	r2, #0
 800d724:	4b18      	ldr	r3, [pc, #96]	@ (800d788 <_dtoa_r+0x728>)
 800d726:	f7f4 fed1 	bl	80024cc <__aeabi_dmul>
 800d72a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d72c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d72e:	f7f2 feb1 	bl	8000494 <__aeabi_dcmpge>
 800d732:	2800      	cmp	r0, #0
 800d734:	d100      	bne.n	800d738 <_dtoa_r+0x6d8>
 800d736:	e164      	b.n	800da02 <_dtoa_r+0x9a2>
 800d738:	2600      	movs	r6, #0
 800d73a:	0037      	movs	r7, r6
 800d73c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d73e:	9c08      	ldr	r4, [sp, #32]
 800d740:	43db      	mvns	r3, r3
 800d742:	930c      	str	r3, [sp, #48]	@ 0x30
 800d744:	2300      	movs	r3, #0
 800d746:	9304      	str	r3, [sp, #16]
 800d748:	0031      	movs	r1, r6
 800d74a:	9803      	ldr	r0, [sp, #12]
 800d74c:	f000 fbc6 	bl	800dedc <_Bfree>
 800d750:	2f00      	cmp	r7, #0
 800d752:	d0d7      	beq.n	800d704 <_dtoa_r+0x6a4>
 800d754:	9b04      	ldr	r3, [sp, #16]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d005      	beq.n	800d766 <_dtoa_r+0x706>
 800d75a:	42bb      	cmp	r3, r7
 800d75c:	d003      	beq.n	800d766 <_dtoa_r+0x706>
 800d75e:	0019      	movs	r1, r3
 800d760:	9803      	ldr	r0, [sp, #12]
 800d762:	f000 fbbb 	bl	800dedc <_Bfree>
 800d766:	0039      	movs	r1, r7
 800d768:	9803      	ldr	r0, [sp, #12]
 800d76a:	f000 fbb7 	bl	800dedc <_Bfree>
 800d76e:	e7c9      	b.n	800d704 <_dtoa_r+0x6a4>
 800d770:	0800fcd8 	.word	0x0800fcd8
 800d774:	0800fcb0 	.word	0x0800fcb0
 800d778:	3ff00000 	.word	0x3ff00000
 800d77c:	40240000 	.word	0x40240000
 800d780:	401c0000 	.word	0x401c0000
 800d784:	fcc00000 	.word	0xfcc00000
 800d788:	40140000 	.word	0x40140000
 800d78c:	3fe00000 	.word	0x3fe00000
 800d790:	9b04      	ldr	r3, [sp, #16]
 800d792:	930c      	str	r3, [sp, #48]	@ 0x30
 800d794:	0023      	movs	r3, r4
 800d796:	001c      	movs	r4, r3
 800d798:	3b01      	subs	r3, #1
 800d79a:	781a      	ldrb	r2, [r3, #0]
 800d79c:	2a39      	cmp	r2, #57	@ 0x39
 800d79e:	d108      	bne.n	800d7b2 <_dtoa_r+0x752>
 800d7a0:	9a08      	ldr	r2, [sp, #32]
 800d7a2:	429a      	cmp	r2, r3
 800d7a4:	d1f7      	bne.n	800d796 <_dtoa_r+0x736>
 800d7a6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800d7a8:	9908      	ldr	r1, [sp, #32]
 800d7aa:	3201      	adds	r2, #1
 800d7ac:	920c      	str	r2, [sp, #48]	@ 0x30
 800d7ae:	2230      	movs	r2, #48	@ 0x30
 800d7b0:	700a      	strb	r2, [r1, #0]
 800d7b2:	781a      	ldrb	r2, [r3, #0]
 800d7b4:	3201      	adds	r2, #1
 800d7b6:	701a      	strb	r2, [r3, #0]
 800d7b8:	e7a4      	b.n	800d704 <_dtoa_r+0x6a4>
 800d7ba:	2200      	movs	r2, #0
 800d7bc:	4bc6      	ldr	r3, [pc, #792]	@ (800dad8 <_dtoa_r+0xa78>)
 800d7be:	f7f4 fe85 	bl	80024cc <__aeabi_dmul>
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	2300      	movs	r3, #0
 800d7c6:	0006      	movs	r6, r0
 800d7c8:	000f      	movs	r7, r1
 800d7ca:	f7f2 fe3f 	bl	800044c <__aeabi_dcmpeq>
 800d7ce:	2800      	cmp	r0, #0
 800d7d0:	d100      	bne.n	800d7d4 <_dtoa_r+0x774>
 800d7d2:	e6a1      	b.n	800d518 <_dtoa_r+0x4b8>
 800d7d4:	e6d8      	b.n	800d588 <_dtoa_r+0x528>
 800d7d6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 800d7d8:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d7da:	9c06      	ldr	r4, [sp, #24]
 800d7dc:	2f00      	cmp	r7, #0
 800d7de:	d014      	beq.n	800d80a <_dtoa_r+0x7aa>
 800d7e0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800d7e2:	2a01      	cmp	r2, #1
 800d7e4:	dd00      	ble.n	800d7e8 <_dtoa_r+0x788>
 800d7e6:	e0c8      	b.n	800d97a <_dtoa_r+0x91a>
 800d7e8:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 800d7ea:	2a00      	cmp	r2, #0
 800d7ec:	d100      	bne.n	800d7f0 <_dtoa_r+0x790>
 800d7ee:	e0be      	b.n	800d96e <_dtoa_r+0x90e>
 800d7f0:	4aba      	ldr	r2, [pc, #744]	@ (800dadc <_dtoa_r+0xa7c>)
 800d7f2:	189b      	adds	r3, r3, r2
 800d7f4:	9a06      	ldr	r2, [sp, #24]
 800d7f6:	2101      	movs	r1, #1
 800d7f8:	18d2      	adds	r2, r2, r3
 800d7fa:	9206      	str	r2, [sp, #24]
 800d7fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d7fe:	9803      	ldr	r0, [sp, #12]
 800d800:	18d3      	adds	r3, r2, r3
 800d802:	930d      	str	r3, [sp, #52]	@ 0x34
 800d804:	f000 fc22 	bl	800e04c <__i2b>
 800d808:	0007      	movs	r7, r0
 800d80a:	2c00      	cmp	r4, #0
 800d80c:	d00e      	beq.n	800d82c <_dtoa_r+0x7cc>
 800d80e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d810:	2b00      	cmp	r3, #0
 800d812:	dd0b      	ble.n	800d82c <_dtoa_r+0x7cc>
 800d814:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d816:	0023      	movs	r3, r4
 800d818:	4294      	cmp	r4, r2
 800d81a:	dd00      	ble.n	800d81e <_dtoa_r+0x7be>
 800d81c:	0013      	movs	r3, r2
 800d81e:	9a06      	ldr	r2, [sp, #24]
 800d820:	1ae4      	subs	r4, r4, r3
 800d822:	1ad2      	subs	r2, r2, r3
 800d824:	9206      	str	r2, [sp, #24]
 800d826:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d828:	1ad3      	subs	r3, r2, r3
 800d82a:	930d      	str	r3, [sp, #52]	@ 0x34
 800d82c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d82e:	2b00      	cmp	r3, #0
 800d830:	d01f      	beq.n	800d872 <_dtoa_r+0x812>
 800d832:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d834:	2b00      	cmp	r3, #0
 800d836:	d100      	bne.n	800d83a <_dtoa_r+0x7da>
 800d838:	e0b5      	b.n	800d9a6 <_dtoa_r+0x946>
 800d83a:	2d00      	cmp	r5, #0
 800d83c:	d010      	beq.n	800d860 <_dtoa_r+0x800>
 800d83e:	0039      	movs	r1, r7
 800d840:	002a      	movs	r2, r5
 800d842:	9803      	ldr	r0, [sp, #12]
 800d844:	f000 fccc 	bl	800e1e0 <__pow5mult>
 800d848:	9a05      	ldr	r2, [sp, #20]
 800d84a:	0001      	movs	r1, r0
 800d84c:	0007      	movs	r7, r0
 800d84e:	9803      	ldr	r0, [sp, #12]
 800d850:	f000 fc14 	bl	800e07c <__multiply>
 800d854:	0006      	movs	r6, r0
 800d856:	9905      	ldr	r1, [sp, #20]
 800d858:	9803      	ldr	r0, [sp, #12]
 800d85a:	f000 fb3f 	bl	800dedc <_Bfree>
 800d85e:	9605      	str	r6, [sp, #20]
 800d860:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d862:	1b5a      	subs	r2, r3, r5
 800d864:	42ab      	cmp	r3, r5
 800d866:	d004      	beq.n	800d872 <_dtoa_r+0x812>
 800d868:	9905      	ldr	r1, [sp, #20]
 800d86a:	9803      	ldr	r0, [sp, #12]
 800d86c:	f000 fcb8 	bl	800e1e0 <__pow5mult>
 800d870:	9005      	str	r0, [sp, #20]
 800d872:	2101      	movs	r1, #1
 800d874:	9803      	ldr	r0, [sp, #12]
 800d876:	f000 fbe9 	bl	800e04c <__i2b>
 800d87a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d87c:	0006      	movs	r6, r0
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d100      	bne.n	800d884 <_dtoa_r+0x824>
 800d882:	e1bc      	b.n	800dbfe <_dtoa_r+0xb9e>
 800d884:	001a      	movs	r2, r3
 800d886:	0001      	movs	r1, r0
 800d888:	9803      	ldr	r0, [sp, #12]
 800d88a:	f000 fca9 	bl	800e1e0 <__pow5mult>
 800d88e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d890:	0006      	movs	r6, r0
 800d892:	2500      	movs	r5, #0
 800d894:	2b01      	cmp	r3, #1
 800d896:	dc16      	bgt.n	800d8c6 <_dtoa_r+0x866>
 800d898:	2500      	movs	r5, #0
 800d89a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d89c:	42ab      	cmp	r3, r5
 800d89e:	d10e      	bne.n	800d8be <_dtoa_r+0x85e>
 800d8a0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d8a2:	031b      	lsls	r3, r3, #12
 800d8a4:	42ab      	cmp	r3, r5
 800d8a6:	d10a      	bne.n	800d8be <_dtoa_r+0x85e>
 800d8a8:	4b8d      	ldr	r3, [pc, #564]	@ (800dae0 <_dtoa_r+0xa80>)
 800d8aa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d8ac:	4213      	tst	r3, r2
 800d8ae:	d006      	beq.n	800d8be <_dtoa_r+0x85e>
 800d8b0:	9b06      	ldr	r3, [sp, #24]
 800d8b2:	3501      	adds	r5, #1
 800d8b4:	3301      	adds	r3, #1
 800d8b6:	9306      	str	r3, [sp, #24]
 800d8b8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8ba:	3301      	adds	r3, #1
 800d8bc:	930d      	str	r3, [sp, #52]	@ 0x34
 800d8be:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d8c0:	2001      	movs	r0, #1
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d008      	beq.n	800d8d8 <_dtoa_r+0x878>
 800d8c6:	6933      	ldr	r3, [r6, #16]
 800d8c8:	3303      	adds	r3, #3
 800d8ca:	009b      	lsls	r3, r3, #2
 800d8cc:	18f3      	adds	r3, r6, r3
 800d8ce:	6858      	ldr	r0, [r3, #4]
 800d8d0:	f000 fb6c 	bl	800dfac <__hi0bits>
 800d8d4:	2320      	movs	r3, #32
 800d8d6:	1a18      	subs	r0, r3, r0
 800d8d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d8da:	1818      	adds	r0, r3, r0
 800d8dc:	0002      	movs	r2, r0
 800d8de:	231f      	movs	r3, #31
 800d8e0:	401a      	ands	r2, r3
 800d8e2:	4218      	tst	r0, r3
 800d8e4:	d065      	beq.n	800d9b2 <_dtoa_r+0x952>
 800d8e6:	3301      	adds	r3, #1
 800d8e8:	1a9b      	subs	r3, r3, r2
 800d8ea:	2b04      	cmp	r3, #4
 800d8ec:	dd5d      	ble.n	800d9aa <_dtoa_r+0x94a>
 800d8ee:	231c      	movs	r3, #28
 800d8f0:	1a9b      	subs	r3, r3, r2
 800d8f2:	9a06      	ldr	r2, [sp, #24]
 800d8f4:	18e4      	adds	r4, r4, r3
 800d8f6:	18d2      	adds	r2, r2, r3
 800d8f8:	9206      	str	r2, [sp, #24]
 800d8fa:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d8fc:	18d3      	adds	r3, r2, r3
 800d8fe:	930d      	str	r3, [sp, #52]	@ 0x34
 800d900:	9b06      	ldr	r3, [sp, #24]
 800d902:	2b00      	cmp	r3, #0
 800d904:	dd05      	ble.n	800d912 <_dtoa_r+0x8b2>
 800d906:	001a      	movs	r2, r3
 800d908:	9905      	ldr	r1, [sp, #20]
 800d90a:	9803      	ldr	r0, [sp, #12]
 800d90c:	f000 fcc4 	bl	800e298 <__lshift>
 800d910:	9005      	str	r0, [sp, #20]
 800d912:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d914:	2b00      	cmp	r3, #0
 800d916:	dd05      	ble.n	800d924 <_dtoa_r+0x8c4>
 800d918:	0031      	movs	r1, r6
 800d91a:	001a      	movs	r2, r3
 800d91c:	9803      	ldr	r0, [sp, #12]
 800d91e:	f000 fcbb 	bl	800e298 <__lshift>
 800d922:	0006      	movs	r6, r0
 800d924:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d926:	2b00      	cmp	r3, #0
 800d928:	d045      	beq.n	800d9b6 <_dtoa_r+0x956>
 800d92a:	0031      	movs	r1, r6
 800d92c:	9805      	ldr	r0, [sp, #20]
 800d92e:	f000 fd1f 	bl	800e370 <__mcmp>
 800d932:	2800      	cmp	r0, #0
 800d934:	da3f      	bge.n	800d9b6 <_dtoa_r+0x956>
 800d936:	9b04      	ldr	r3, [sp, #16]
 800d938:	220a      	movs	r2, #10
 800d93a:	3b01      	subs	r3, #1
 800d93c:	930c      	str	r3, [sp, #48]	@ 0x30
 800d93e:	9905      	ldr	r1, [sp, #20]
 800d940:	2300      	movs	r3, #0
 800d942:	9803      	ldr	r0, [sp, #12]
 800d944:	f000 faee 	bl	800df24 <__multadd>
 800d948:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d94a:	9005      	str	r0, [sp, #20]
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d100      	bne.n	800d952 <_dtoa_r+0x8f2>
 800d950:	e15c      	b.n	800dc0c <_dtoa_r+0xbac>
 800d952:	2300      	movs	r3, #0
 800d954:	0039      	movs	r1, r7
 800d956:	220a      	movs	r2, #10
 800d958:	9803      	ldr	r0, [sp, #12]
 800d95a:	f000 fae3 	bl	800df24 <__multadd>
 800d95e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d960:	0007      	movs	r7, r0
 800d962:	2b00      	cmp	r3, #0
 800d964:	dc55      	bgt.n	800da12 <_dtoa_r+0x9b2>
 800d966:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d968:	2b02      	cmp	r3, #2
 800d96a:	dc2d      	bgt.n	800d9c8 <_dtoa_r+0x968>
 800d96c:	e051      	b.n	800da12 <_dtoa_r+0x9b2>
 800d96e:	2336      	movs	r3, #54	@ 0x36
 800d970:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d972:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 800d974:	9c06      	ldr	r4, [sp, #24]
 800d976:	1a9b      	subs	r3, r3, r2
 800d978:	e73c      	b.n	800d7f4 <_dtoa_r+0x794>
 800d97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d97c:	1e5d      	subs	r5, r3, #1
 800d97e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d980:	42ab      	cmp	r3, r5
 800d982:	db08      	blt.n	800d996 <_dtoa_r+0x936>
 800d984:	1b5d      	subs	r5, r3, r5
 800d986:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d988:	9c06      	ldr	r4, [sp, #24]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	db00      	blt.n	800d990 <_dtoa_r+0x930>
 800d98e:	e731      	b.n	800d7f4 <_dtoa_r+0x794>
 800d990:	1ae4      	subs	r4, r4, r3
 800d992:	2300      	movs	r3, #0
 800d994:	e72e      	b.n	800d7f4 <_dtoa_r+0x794>
 800d996:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d998:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d99a:	1aeb      	subs	r3, r5, r3
 800d99c:	18d3      	adds	r3, r2, r3
 800d99e:	950f      	str	r5, [sp, #60]	@ 0x3c
 800d9a0:	9314      	str	r3, [sp, #80]	@ 0x50
 800d9a2:	2500      	movs	r5, #0
 800d9a4:	e7ef      	b.n	800d986 <_dtoa_r+0x926>
 800d9a6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d9a8:	e75e      	b.n	800d868 <_dtoa_r+0x808>
 800d9aa:	2b04      	cmp	r3, #4
 800d9ac:	d0a8      	beq.n	800d900 <_dtoa_r+0x8a0>
 800d9ae:	331c      	adds	r3, #28
 800d9b0:	e79f      	b.n	800d8f2 <_dtoa_r+0x892>
 800d9b2:	0013      	movs	r3, r2
 800d9b4:	e7fb      	b.n	800d9ae <_dtoa_r+0x94e>
 800d9b6:	9b04      	ldr	r3, [sp, #16]
 800d9b8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9bc:	930e      	str	r3, [sp, #56]	@ 0x38
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	dc23      	bgt.n	800da0a <_dtoa_r+0x9aa>
 800d9c2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800d9c4:	2b02      	cmp	r3, #2
 800d9c6:	dd20      	ble.n	800da0a <_dtoa_r+0x9aa>
 800d9c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d9ca:	2b00      	cmp	r3, #0
 800d9cc:	d000      	beq.n	800d9d0 <_dtoa_r+0x970>
 800d9ce:	e6b5      	b.n	800d73c <_dtoa_r+0x6dc>
 800d9d0:	0031      	movs	r1, r6
 800d9d2:	2205      	movs	r2, #5
 800d9d4:	9803      	ldr	r0, [sp, #12]
 800d9d6:	f000 faa5 	bl	800df24 <__multadd>
 800d9da:	0006      	movs	r6, r0
 800d9dc:	0001      	movs	r1, r0
 800d9de:	9805      	ldr	r0, [sp, #20]
 800d9e0:	f000 fcc6 	bl	800e370 <__mcmp>
 800d9e4:	2800      	cmp	r0, #0
 800d9e6:	dc00      	bgt.n	800d9ea <_dtoa_r+0x98a>
 800d9e8:	e6a8      	b.n	800d73c <_dtoa_r+0x6dc>
 800d9ea:	9b08      	ldr	r3, [sp, #32]
 800d9ec:	9a08      	ldr	r2, [sp, #32]
 800d9ee:	1c5c      	adds	r4, r3, #1
 800d9f0:	2331      	movs	r3, #49	@ 0x31
 800d9f2:	7013      	strb	r3, [r2, #0]
 800d9f4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d9f6:	3301      	adds	r3, #1
 800d9f8:	930c      	str	r3, [sp, #48]	@ 0x30
 800d9fa:	e6a3      	b.n	800d744 <_dtoa_r+0x6e4>
 800d9fc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 800d9fe:	0037      	movs	r7, r6
 800da00:	e7f3      	b.n	800d9ea <_dtoa_r+0x98a>
 800da02:	9b04      	ldr	r3, [sp, #16]
 800da04:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 800da06:	930c      	str	r3, [sp, #48]	@ 0x30
 800da08:	e7f9      	b.n	800d9fe <_dtoa_r+0x99e>
 800da0a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d100      	bne.n	800da12 <_dtoa_r+0x9b2>
 800da10:	e100      	b.n	800dc14 <_dtoa_r+0xbb4>
 800da12:	2c00      	cmp	r4, #0
 800da14:	dd05      	ble.n	800da22 <_dtoa_r+0x9c2>
 800da16:	0039      	movs	r1, r7
 800da18:	0022      	movs	r2, r4
 800da1a:	9803      	ldr	r0, [sp, #12]
 800da1c:	f000 fc3c 	bl	800e298 <__lshift>
 800da20:	0007      	movs	r7, r0
 800da22:	0038      	movs	r0, r7
 800da24:	2d00      	cmp	r5, #0
 800da26:	d018      	beq.n	800da5a <_dtoa_r+0x9fa>
 800da28:	6879      	ldr	r1, [r7, #4]
 800da2a:	9803      	ldr	r0, [sp, #12]
 800da2c:	f000 fa12 	bl	800de54 <_Balloc>
 800da30:	1e04      	subs	r4, r0, #0
 800da32:	d105      	bne.n	800da40 <_dtoa_r+0x9e0>
 800da34:	0022      	movs	r2, r4
 800da36:	4b2b      	ldr	r3, [pc, #172]	@ (800dae4 <_dtoa_r+0xa84>)
 800da38:	482b      	ldr	r0, [pc, #172]	@ (800dae8 <_dtoa_r+0xa88>)
 800da3a:	492c      	ldr	r1, [pc, #176]	@ (800daec <_dtoa_r+0xa8c>)
 800da3c:	f7ff fb25 	bl	800d08a <_dtoa_r+0x2a>
 800da40:	0039      	movs	r1, r7
 800da42:	693a      	ldr	r2, [r7, #16]
 800da44:	310c      	adds	r1, #12
 800da46:	3202      	adds	r2, #2
 800da48:	0092      	lsls	r2, r2, #2
 800da4a:	300c      	adds	r0, #12
 800da4c:	f001 f9c0 	bl	800edd0 <memcpy>
 800da50:	2201      	movs	r2, #1
 800da52:	0021      	movs	r1, r4
 800da54:	9803      	ldr	r0, [sp, #12]
 800da56:	f000 fc1f 	bl	800e298 <__lshift>
 800da5a:	9b08      	ldr	r3, [sp, #32]
 800da5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800da5e:	9306      	str	r3, [sp, #24]
 800da60:	3b01      	subs	r3, #1
 800da62:	189b      	adds	r3, r3, r2
 800da64:	2201      	movs	r2, #1
 800da66:	9704      	str	r7, [sp, #16]
 800da68:	0007      	movs	r7, r0
 800da6a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800da6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800da6e:	4013      	ands	r3, r2
 800da70:	930e      	str	r3, [sp, #56]	@ 0x38
 800da72:	0031      	movs	r1, r6
 800da74:	9805      	ldr	r0, [sp, #20]
 800da76:	f7ff fa65 	bl	800cf44 <quorem>
 800da7a:	9904      	ldr	r1, [sp, #16]
 800da7c:	0005      	movs	r5, r0
 800da7e:	900a      	str	r0, [sp, #40]	@ 0x28
 800da80:	9805      	ldr	r0, [sp, #20]
 800da82:	f000 fc75 	bl	800e370 <__mcmp>
 800da86:	003a      	movs	r2, r7
 800da88:	900d      	str	r0, [sp, #52]	@ 0x34
 800da8a:	0031      	movs	r1, r6
 800da8c:	9803      	ldr	r0, [sp, #12]
 800da8e:	f000 fc8b 	bl	800e3a8 <__mdiff>
 800da92:	2201      	movs	r2, #1
 800da94:	68c3      	ldr	r3, [r0, #12]
 800da96:	0004      	movs	r4, r0
 800da98:	3530      	adds	r5, #48	@ 0x30
 800da9a:	9209      	str	r2, [sp, #36]	@ 0x24
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d104      	bne.n	800daaa <_dtoa_r+0xa4a>
 800daa0:	0001      	movs	r1, r0
 800daa2:	9805      	ldr	r0, [sp, #20]
 800daa4:	f000 fc64 	bl	800e370 <__mcmp>
 800daa8:	9009      	str	r0, [sp, #36]	@ 0x24
 800daaa:	0021      	movs	r1, r4
 800daac:	9803      	ldr	r0, [sp, #12]
 800daae:	f000 fa15 	bl	800dedc <_Bfree>
 800dab2:	9b06      	ldr	r3, [sp, #24]
 800dab4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dab6:	1c5c      	adds	r4, r3, #1
 800dab8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800daba:	4313      	orrs	r3, r2
 800dabc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dabe:	4313      	orrs	r3, r2
 800dac0:	d116      	bne.n	800daf0 <_dtoa_r+0xa90>
 800dac2:	2d39      	cmp	r5, #57	@ 0x39
 800dac4:	d02f      	beq.n	800db26 <_dtoa_r+0xac6>
 800dac6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dac8:	2b00      	cmp	r3, #0
 800daca:	dd01      	ble.n	800dad0 <_dtoa_r+0xa70>
 800dacc:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800dace:	3531      	adds	r5, #49	@ 0x31
 800dad0:	9b06      	ldr	r3, [sp, #24]
 800dad2:	701d      	strb	r5, [r3, #0]
 800dad4:	e638      	b.n	800d748 <_dtoa_r+0x6e8>
 800dad6:	46c0      	nop			@ (mov r8, r8)
 800dad8:	40240000 	.word	0x40240000
 800dadc:	00000433 	.word	0x00000433
 800dae0:	7ff00000 	.word	0x7ff00000
 800dae4:	0800fc38 	.word	0x0800fc38
 800dae8:	0800fbe0 	.word	0x0800fbe0
 800daec:	000002ef 	.word	0x000002ef
 800daf0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	db04      	blt.n	800db00 <_dtoa_r+0xaa0>
 800daf6:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800daf8:	4313      	orrs	r3, r2
 800dafa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800dafc:	4313      	orrs	r3, r2
 800dafe:	d11e      	bne.n	800db3e <_dtoa_r+0xade>
 800db00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db02:	2b00      	cmp	r3, #0
 800db04:	dde4      	ble.n	800dad0 <_dtoa_r+0xa70>
 800db06:	9905      	ldr	r1, [sp, #20]
 800db08:	2201      	movs	r2, #1
 800db0a:	9803      	ldr	r0, [sp, #12]
 800db0c:	f000 fbc4 	bl	800e298 <__lshift>
 800db10:	0031      	movs	r1, r6
 800db12:	9005      	str	r0, [sp, #20]
 800db14:	f000 fc2c 	bl	800e370 <__mcmp>
 800db18:	2800      	cmp	r0, #0
 800db1a:	dc02      	bgt.n	800db22 <_dtoa_r+0xac2>
 800db1c:	d1d8      	bne.n	800dad0 <_dtoa_r+0xa70>
 800db1e:	07eb      	lsls	r3, r5, #31
 800db20:	d5d6      	bpl.n	800dad0 <_dtoa_r+0xa70>
 800db22:	2d39      	cmp	r5, #57	@ 0x39
 800db24:	d1d2      	bne.n	800dacc <_dtoa_r+0xa6c>
 800db26:	2339      	movs	r3, #57	@ 0x39
 800db28:	9a06      	ldr	r2, [sp, #24]
 800db2a:	7013      	strb	r3, [r2, #0]
 800db2c:	0023      	movs	r3, r4
 800db2e:	001c      	movs	r4, r3
 800db30:	3b01      	subs	r3, #1
 800db32:	781a      	ldrb	r2, [r3, #0]
 800db34:	2a39      	cmp	r2, #57	@ 0x39
 800db36:	d04f      	beq.n	800dbd8 <_dtoa_r+0xb78>
 800db38:	3201      	adds	r2, #1
 800db3a:	701a      	strb	r2, [r3, #0]
 800db3c:	e604      	b.n	800d748 <_dtoa_r+0x6e8>
 800db3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db40:	2b00      	cmp	r3, #0
 800db42:	dd03      	ble.n	800db4c <_dtoa_r+0xaec>
 800db44:	2d39      	cmp	r5, #57	@ 0x39
 800db46:	d0ee      	beq.n	800db26 <_dtoa_r+0xac6>
 800db48:	3501      	adds	r5, #1
 800db4a:	e7c1      	b.n	800dad0 <_dtoa_r+0xa70>
 800db4c:	9b06      	ldr	r3, [sp, #24]
 800db4e:	9a06      	ldr	r2, [sp, #24]
 800db50:	701d      	strb	r5, [r3, #0]
 800db52:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800db54:	4293      	cmp	r3, r2
 800db56:	d02a      	beq.n	800dbae <_dtoa_r+0xb4e>
 800db58:	2300      	movs	r3, #0
 800db5a:	220a      	movs	r2, #10
 800db5c:	9905      	ldr	r1, [sp, #20]
 800db5e:	9803      	ldr	r0, [sp, #12]
 800db60:	f000 f9e0 	bl	800df24 <__multadd>
 800db64:	9b04      	ldr	r3, [sp, #16]
 800db66:	9005      	str	r0, [sp, #20]
 800db68:	42bb      	cmp	r3, r7
 800db6a:	d109      	bne.n	800db80 <_dtoa_r+0xb20>
 800db6c:	2300      	movs	r3, #0
 800db6e:	220a      	movs	r2, #10
 800db70:	9904      	ldr	r1, [sp, #16]
 800db72:	9803      	ldr	r0, [sp, #12]
 800db74:	f000 f9d6 	bl	800df24 <__multadd>
 800db78:	9004      	str	r0, [sp, #16]
 800db7a:	0007      	movs	r7, r0
 800db7c:	9406      	str	r4, [sp, #24]
 800db7e:	e778      	b.n	800da72 <_dtoa_r+0xa12>
 800db80:	9904      	ldr	r1, [sp, #16]
 800db82:	2300      	movs	r3, #0
 800db84:	220a      	movs	r2, #10
 800db86:	9803      	ldr	r0, [sp, #12]
 800db88:	f000 f9cc 	bl	800df24 <__multadd>
 800db8c:	2300      	movs	r3, #0
 800db8e:	9004      	str	r0, [sp, #16]
 800db90:	220a      	movs	r2, #10
 800db92:	0039      	movs	r1, r7
 800db94:	9803      	ldr	r0, [sp, #12]
 800db96:	f000 f9c5 	bl	800df24 <__multadd>
 800db9a:	e7ee      	b.n	800db7a <_dtoa_r+0xb1a>
 800db9c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800db9e:	2401      	movs	r4, #1
 800dba0:	2b00      	cmp	r3, #0
 800dba2:	dd00      	ble.n	800dba6 <_dtoa_r+0xb46>
 800dba4:	001c      	movs	r4, r3
 800dba6:	9b08      	ldr	r3, [sp, #32]
 800dba8:	191c      	adds	r4, r3, r4
 800dbaa:	2300      	movs	r3, #0
 800dbac:	9304      	str	r3, [sp, #16]
 800dbae:	9905      	ldr	r1, [sp, #20]
 800dbb0:	2201      	movs	r2, #1
 800dbb2:	9803      	ldr	r0, [sp, #12]
 800dbb4:	f000 fb70 	bl	800e298 <__lshift>
 800dbb8:	0031      	movs	r1, r6
 800dbba:	9005      	str	r0, [sp, #20]
 800dbbc:	f000 fbd8 	bl	800e370 <__mcmp>
 800dbc0:	2800      	cmp	r0, #0
 800dbc2:	dcb3      	bgt.n	800db2c <_dtoa_r+0xacc>
 800dbc4:	d101      	bne.n	800dbca <_dtoa_r+0xb6a>
 800dbc6:	07ed      	lsls	r5, r5, #31
 800dbc8:	d4b0      	bmi.n	800db2c <_dtoa_r+0xacc>
 800dbca:	0023      	movs	r3, r4
 800dbcc:	001c      	movs	r4, r3
 800dbce:	3b01      	subs	r3, #1
 800dbd0:	781a      	ldrb	r2, [r3, #0]
 800dbd2:	2a30      	cmp	r2, #48	@ 0x30
 800dbd4:	d0fa      	beq.n	800dbcc <_dtoa_r+0xb6c>
 800dbd6:	e5b7      	b.n	800d748 <_dtoa_r+0x6e8>
 800dbd8:	9a08      	ldr	r2, [sp, #32]
 800dbda:	429a      	cmp	r2, r3
 800dbdc:	d1a7      	bne.n	800db2e <_dtoa_r+0xace>
 800dbde:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800dbe0:	3301      	adds	r3, #1
 800dbe2:	930c      	str	r3, [sp, #48]	@ 0x30
 800dbe4:	2331      	movs	r3, #49	@ 0x31
 800dbe6:	7013      	strb	r3, [r2, #0]
 800dbe8:	e5ae      	b.n	800d748 <_dtoa_r+0x6e8>
 800dbea:	4b15      	ldr	r3, [pc, #84]	@ (800dc40 <_dtoa_r+0xbe0>)
 800dbec:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 800dbee:	9308      	str	r3, [sp, #32]
 800dbf0:	4b14      	ldr	r3, [pc, #80]	@ (800dc44 <_dtoa_r+0xbe4>)
 800dbf2:	2a00      	cmp	r2, #0
 800dbf4:	d001      	beq.n	800dbfa <_dtoa_r+0xb9a>
 800dbf6:	f7ff fa7b 	bl	800d0f0 <_dtoa_r+0x90>
 800dbfa:	f7ff fa7b 	bl	800d0f4 <_dtoa_r+0x94>
 800dbfe:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800dc00:	2b01      	cmp	r3, #1
 800dc02:	dc00      	bgt.n	800dc06 <_dtoa_r+0xba6>
 800dc04:	e648      	b.n	800d898 <_dtoa_r+0x838>
 800dc06:	2001      	movs	r0, #1
 800dc08:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 800dc0a:	e665      	b.n	800d8d8 <_dtoa_r+0x878>
 800dc0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	dc00      	bgt.n	800dc14 <_dtoa_r+0xbb4>
 800dc12:	e6d6      	b.n	800d9c2 <_dtoa_r+0x962>
 800dc14:	2400      	movs	r4, #0
 800dc16:	0031      	movs	r1, r6
 800dc18:	9805      	ldr	r0, [sp, #20]
 800dc1a:	f7ff f993 	bl	800cf44 <quorem>
 800dc1e:	9b08      	ldr	r3, [sp, #32]
 800dc20:	3030      	adds	r0, #48	@ 0x30
 800dc22:	5518      	strb	r0, [r3, r4]
 800dc24:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dc26:	3401      	adds	r4, #1
 800dc28:	0005      	movs	r5, r0
 800dc2a:	429c      	cmp	r4, r3
 800dc2c:	dab6      	bge.n	800db9c <_dtoa_r+0xb3c>
 800dc2e:	2300      	movs	r3, #0
 800dc30:	220a      	movs	r2, #10
 800dc32:	9905      	ldr	r1, [sp, #20]
 800dc34:	9803      	ldr	r0, [sp, #12]
 800dc36:	f000 f975 	bl	800df24 <__multadd>
 800dc3a:	9005      	str	r0, [sp, #20]
 800dc3c:	e7eb      	b.n	800dc16 <_dtoa_r+0xbb6>
 800dc3e:	46c0      	nop			@ (mov r8, r8)
 800dc40:	0800fbbc 	.word	0x0800fbbc
 800dc44:	0800fbc4 	.word	0x0800fbc4

0800dc48 <_free_r>:
 800dc48:	b570      	push	{r4, r5, r6, lr}
 800dc4a:	0005      	movs	r5, r0
 800dc4c:	1e0c      	subs	r4, r1, #0
 800dc4e:	d010      	beq.n	800dc72 <_free_r+0x2a>
 800dc50:	3c04      	subs	r4, #4
 800dc52:	6823      	ldr	r3, [r4, #0]
 800dc54:	2b00      	cmp	r3, #0
 800dc56:	da00      	bge.n	800dc5a <_free_r+0x12>
 800dc58:	18e4      	adds	r4, r4, r3
 800dc5a:	0028      	movs	r0, r5
 800dc5c:	f000 f8ea 	bl	800de34 <__malloc_lock>
 800dc60:	4a1d      	ldr	r2, [pc, #116]	@ (800dcd8 <_free_r+0x90>)
 800dc62:	6813      	ldr	r3, [r2, #0]
 800dc64:	2b00      	cmp	r3, #0
 800dc66:	d105      	bne.n	800dc74 <_free_r+0x2c>
 800dc68:	6063      	str	r3, [r4, #4]
 800dc6a:	6014      	str	r4, [r2, #0]
 800dc6c:	0028      	movs	r0, r5
 800dc6e:	f000 f8e9 	bl	800de44 <__malloc_unlock>
 800dc72:	bd70      	pop	{r4, r5, r6, pc}
 800dc74:	42a3      	cmp	r3, r4
 800dc76:	d908      	bls.n	800dc8a <_free_r+0x42>
 800dc78:	6820      	ldr	r0, [r4, #0]
 800dc7a:	1821      	adds	r1, r4, r0
 800dc7c:	428b      	cmp	r3, r1
 800dc7e:	d1f3      	bne.n	800dc68 <_free_r+0x20>
 800dc80:	6819      	ldr	r1, [r3, #0]
 800dc82:	685b      	ldr	r3, [r3, #4]
 800dc84:	1809      	adds	r1, r1, r0
 800dc86:	6021      	str	r1, [r4, #0]
 800dc88:	e7ee      	b.n	800dc68 <_free_r+0x20>
 800dc8a:	001a      	movs	r2, r3
 800dc8c:	685b      	ldr	r3, [r3, #4]
 800dc8e:	2b00      	cmp	r3, #0
 800dc90:	d001      	beq.n	800dc96 <_free_r+0x4e>
 800dc92:	42a3      	cmp	r3, r4
 800dc94:	d9f9      	bls.n	800dc8a <_free_r+0x42>
 800dc96:	6811      	ldr	r1, [r2, #0]
 800dc98:	1850      	adds	r0, r2, r1
 800dc9a:	42a0      	cmp	r0, r4
 800dc9c:	d10b      	bne.n	800dcb6 <_free_r+0x6e>
 800dc9e:	6820      	ldr	r0, [r4, #0]
 800dca0:	1809      	adds	r1, r1, r0
 800dca2:	1850      	adds	r0, r2, r1
 800dca4:	6011      	str	r1, [r2, #0]
 800dca6:	4283      	cmp	r3, r0
 800dca8:	d1e0      	bne.n	800dc6c <_free_r+0x24>
 800dcaa:	6818      	ldr	r0, [r3, #0]
 800dcac:	685b      	ldr	r3, [r3, #4]
 800dcae:	1841      	adds	r1, r0, r1
 800dcb0:	6011      	str	r1, [r2, #0]
 800dcb2:	6053      	str	r3, [r2, #4]
 800dcb4:	e7da      	b.n	800dc6c <_free_r+0x24>
 800dcb6:	42a0      	cmp	r0, r4
 800dcb8:	d902      	bls.n	800dcc0 <_free_r+0x78>
 800dcba:	230c      	movs	r3, #12
 800dcbc:	602b      	str	r3, [r5, #0]
 800dcbe:	e7d5      	b.n	800dc6c <_free_r+0x24>
 800dcc0:	6820      	ldr	r0, [r4, #0]
 800dcc2:	1821      	adds	r1, r4, r0
 800dcc4:	428b      	cmp	r3, r1
 800dcc6:	d103      	bne.n	800dcd0 <_free_r+0x88>
 800dcc8:	6819      	ldr	r1, [r3, #0]
 800dcca:	685b      	ldr	r3, [r3, #4]
 800dccc:	1809      	adds	r1, r1, r0
 800dcce:	6021      	str	r1, [r4, #0]
 800dcd0:	6063      	str	r3, [r4, #4]
 800dcd2:	6054      	str	r4, [r2, #4]
 800dcd4:	e7ca      	b.n	800dc6c <_free_r+0x24>
 800dcd6:	46c0      	nop			@ (mov r8, r8)
 800dcd8:	200011c4 	.word	0x200011c4

0800dcdc <malloc>:
 800dcdc:	b510      	push	{r4, lr}
 800dcde:	4b03      	ldr	r3, [pc, #12]	@ (800dcec <malloc+0x10>)
 800dce0:	0001      	movs	r1, r0
 800dce2:	6818      	ldr	r0, [r3, #0]
 800dce4:	f000 f826 	bl	800dd34 <_malloc_r>
 800dce8:	bd10      	pop	{r4, pc}
 800dcea:	46c0      	nop			@ (mov r8, r8)
 800dcec:	20000054 	.word	0x20000054

0800dcf0 <sbrk_aligned>:
 800dcf0:	b570      	push	{r4, r5, r6, lr}
 800dcf2:	4e0f      	ldr	r6, [pc, #60]	@ (800dd30 <sbrk_aligned+0x40>)
 800dcf4:	000d      	movs	r5, r1
 800dcf6:	6831      	ldr	r1, [r6, #0]
 800dcf8:	0004      	movs	r4, r0
 800dcfa:	2900      	cmp	r1, #0
 800dcfc:	d102      	bne.n	800dd04 <sbrk_aligned+0x14>
 800dcfe:	f001 f855 	bl	800edac <_sbrk_r>
 800dd02:	6030      	str	r0, [r6, #0]
 800dd04:	0029      	movs	r1, r5
 800dd06:	0020      	movs	r0, r4
 800dd08:	f001 f850 	bl	800edac <_sbrk_r>
 800dd0c:	1c43      	adds	r3, r0, #1
 800dd0e:	d103      	bne.n	800dd18 <sbrk_aligned+0x28>
 800dd10:	2501      	movs	r5, #1
 800dd12:	426d      	negs	r5, r5
 800dd14:	0028      	movs	r0, r5
 800dd16:	bd70      	pop	{r4, r5, r6, pc}
 800dd18:	2303      	movs	r3, #3
 800dd1a:	1cc5      	adds	r5, r0, #3
 800dd1c:	439d      	bics	r5, r3
 800dd1e:	42a8      	cmp	r0, r5
 800dd20:	d0f8      	beq.n	800dd14 <sbrk_aligned+0x24>
 800dd22:	1a29      	subs	r1, r5, r0
 800dd24:	0020      	movs	r0, r4
 800dd26:	f001 f841 	bl	800edac <_sbrk_r>
 800dd2a:	3001      	adds	r0, #1
 800dd2c:	d1f2      	bne.n	800dd14 <sbrk_aligned+0x24>
 800dd2e:	e7ef      	b.n	800dd10 <sbrk_aligned+0x20>
 800dd30:	200011c0 	.word	0x200011c0

0800dd34 <_malloc_r>:
 800dd34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dd36:	2203      	movs	r2, #3
 800dd38:	1ccb      	adds	r3, r1, #3
 800dd3a:	4393      	bics	r3, r2
 800dd3c:	3308      	adds	r3, #8
 800dd3e:	0005      	movs	r5, r0
 800dd40:	001f      	movs	r7, r3
 800dd42:	2b0c      	cmp	r3, #12
 800dd44:	d234      	bcs.n	800ddb0 <_malloc_r+0x7c>
 800dd46:	270c      	movs	r7, #12
 800dd48:	42b9      	cmp	r1, r7
 800dd4a:	d833      	bhi.n	800ddb4 <_malloc_r+0x80>
 800dd4c:	0028      	movs	r0, r5
 800dd4e:	f000 f871 	bl	800de34 <__malloc_lock>
 800dd52:	4e37      	ldr	r6, [pc, #220]	@ (800de30 <_malloc_r+0xfc>)
 800dd54:	6833      	ldr	r3, [r6, #0]
 800dd56:	001c      	movs	r4, r3
 800dd58:	2c00      	cmp	r4, #0
 800dd5a:	d12f      	bne.n	800ddbc <_malloc_r+0x88>
 800dd5c:	0039      	movs	r1, r7
 800dd5e:	0028      	movs	r0, r5
 800dd60:	f7ff ffc6 	bl	800dcf0 <sbrk_aligned>
 800dd64:	0004      	movs	r4, r0
 800dd66:	1c43      	adds	r3, r0, #1
 800dd68:	d15f      	bne.n	800de2a <_malloc_r+0xf6>
 800dd6a:	6834      	ldr	r4, [r6, #0]
 800dd6c:	9400      	str	r4, [sp, #0]
 800dd6e:	9b00      	ldr	r3, [sp, #0]
 800dd70:	2b00      	cmp	r3, #0
 800dd72:	d14a      	bne.n	800de0a <_malloc_r+0xd6>
 800dd74:	2c00      	cmp	r4, #0
 800dd76:	d052      	beq.n	800de1e <_malloc_r+0xea>
 800dd78:	6823      	ldr	r3, [r4, #0]
 800dd7a:	0028      	movs	r0, r5
 800dd7c:	18e3      	adds	r3, r4, r3
 800dd7e:	9900      	ldr	r1, [sp, #0]
 800dd80:	9301      	str	r3, [sp, #4]
 800dd82:	f001 f813 	bl	800edac <_sbrk_r>
 800dd86:	9b01      	ldr	r3, [sp, #4]
 800dd88:	4283      	cmp	r3, r0
 800dd8a:	d148      	bne.n	800de1e <_malloc_r+0xea>
 800dd8c:	6823      	ldr	r3, [r4, #0]
 800dd8e:	0028      	movs	r0, r5
 800dd90:	1aff      	subs	r7, r7, r3
 800dd92:	0039      	movs	r1, r7
 800dd94:	f7ff ffac 	bl	800dcf0 <sbrk_aligned>
 800dd98:	3001      	adds	r0, #1
 800dd9a:	d040      	beq.n	800de1e <_malloc_r+0xea>
 800dd9c:	6823      	ldr	r3, [r4, #0]
 800dd9e:	19db      	adds	r3, r3, r7
 800dda0:	6023      	str	r3, [r4, #0]
 800dda2:	6833      	ldr	r3, [r6, #0]
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	2a00      	cmp	r2, #0
 800dda8:	d133      	bne.n	800de12 <_malloc_r+0xde>
 800ddaa:	9b00      	ldr	r3, [sp, #0]
 800ddac:	6033      	str	r3, [r6, #0]
 800ddae:	e019      	b.n	800dde4 <_malloc_r+0xb0>
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	dac9      	bge.n	800dd48 <_malloc_r+0x14>
 800ddb4:	230c      	movs	r3, #12
 800ddb6:	602b      	str	r3, [r5, #0]
 800ddb8:	2000      	movs	r0, #0
 800ddba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ddbc:	6821      	ldr	r1, [r4, #0]
 800ddbe:	1bc9      	subs	r1, r1, r7
 800ddc0:	d420      	bmi.n	800de04 <_malloc_r+0xd0>
 800ddc2:	290b      	cmp	r1, #11
 800ddc4:	d90a      	bls.n	800dddc <_malloc_r+0xa8>
 800ddc6:	19e2      	adds	r2, r4, r7
 800ddc8:	6027      	str	r7, [r4, #0]
 800ddca:	42a3      	cmp	r3, r4
 800ddcc:	d104      	bne.n	800ddd8 <_malloc_r+0xa4>
 800ddce:	6032      	str	r2, [r6, #0]
 800ddd0:	6863      	ldr	r3, [r4, #4]
 800ddd2:	6011      	str	r1, [r2, #0]
 800ddd4:	6053      	str	r3, [r2, #4]
 800ddd6:	e005      	b.n	800dde4 <_malloc_r+0xb0>
 800ddd8:	605a      	str	r2, [r3, #4]
 800ddda:	e7f9      	b.n	800ddd0 <_malloc_r+0x9c>
 800dddc:	6862      	ldr	r2, [r4, #4]
 800ddde:	42a3      	cmp	r3, r4
 800dde0:	d10e      	bne.n	800de00 <_malloc_r+0xcc>
 800dde2:	6032      	str	r2, [r6, #0]
 800dde4:	0028      	movs	r0, r5
 800dde6:	f000 f82d 	bl	800de44 <__malloc_unlock>
 800ddea:	0020      	movs	r0, r4
 800ddec:	2207      	movs	r2, #7
 800ddee:	300b      	adds	r0, #11
 800ddf0:	1d23      	adds	r3, r4, #4
 800ddf2:	4390      	bics	r0, r2
 800ddf4:	1ac2      	subs	r2, r0, r3
 800ddf6:	4298      	cmp	r0, r3
 800ddf8:	d0df      	beq.n	800ddba <_malloc_r+0x86>
 800ddfa:	1a1b      	subs	r3, r3, r0
 800ddfc:	50a3      	str	r3, [r4, r2]
 800ddfe:	e7dc      	b.n	800ddba <_malloc_r+0x86>
 800de00:	605a      	str	r2, [r3, #4]
 800de02:	e7ef      	b.n	800dde4 <_malloc_r+0xb0>
 800de04:	0023      	movs	r3, r4
 800de06:	6864      	ldr	r4, [r4, #4]
 800de08:	e7a6      	b.n	800dd58 <_malloc_r+0x24>
 800de0a:	9c00      	ldr	r4, [sp, #0]
 800de0c:	6863      	ldr	r3, [r4, #4]
 800de0e:	9300      	str	r3, [sp, #0]
 800de10:	e7ad      	b.n	800dd6e <_malloc_r+0x3a>
 800de12:	001a      	movs	r2, r3
 800de14:	685b      	ldr	r3, [r3, #4]
 800de16:	42a3      	cmp	r3, r4
 800de18:	d1fb      	bne.n	800de12 <_malloc_r+0xde>
 800de1a:	2300      	movs	r3, #0
 800de1c:	e7da      	b.n	800ddd4 <_malloc_r+0xa0>
 800de1e:	230c      	movs	r3, #12
 800de20:	0028      	movs	r0, r5
 800de22:	602b      	str	r3, [r5, #0]
 800de24:	f000 f80e 	bl	800de44 <__malloc_unlock>
 800de28:	e7c6      	b.n	800ddb8 <_malloc_r+0x84>
 800de2a:	6007      	str	r7, [r0, #0]
 800de2c:	e7da      	b.n	800dde4 <_malloc_r+0xb0>
 800de2e:	46c0      	nop			@ (mov r8, r8)
 800de30:	200011c4 	.word	0x200011c4

0800de34 <__malloc_lock>:
 800de34:	b510      	push	{r4, lr}
 800de36:	4802      	ldr	r0, [pc, #8]	@ (800de40 <__malloc_lock+0xc>)
 800de38:	f7ff f877 	bl	800cf2a <__retarget_lock_acquire_recursive>
 800de3c:	bd10      	pop	{r4, pc}
 800de3e:	46c0      	nop			@ (mov r8, r8)
 800de40:	200011bc 	.word	0x200011bc

0800de44 <__malloc_unlock>:
 800de44:	b510      	push	{r4, lr}
 800de46:	4802      	ldr	r0, [pc, #8]	@ (800de50 <__malloc_unlock+0xc>)
 800de48:	f7ff f870 	bl	800cf2c <__retarget_lock_release_recursive>
 800de4c:	bd10      	pop	{r4, pc}
 800de4e:	46c0      	nop			@ (mov r8, r8)
 800de50:	200011bc 	.word	0x200011bc

0800de54 <_Balloc>:
 800de54:	b570      	push	{r4, r5, r6, lr}
 800de56:	69c5      	ldr	r5, [r0, #28]
 800de58:	0006      	movs	r6, r0
 800de5a:	000c      	movs	r4, r1
 800de5c:	2d00      	cmp	r5, #0
 800de5e:	d10e      	bne.n	800de7e <_Balloc+0x2a>
 800de60:	2010      	movs	r0, #16
 800de62:	f7ff ff3b 	bl	800dcdc <malloc>
 800de66:	1e02      	subs	r2, r0, #0
 800de68:	61f0      	str	r0, [r6, #28]
 800de6a:	d104      	bne.n	800de76 <_Balloc+0x22>
 800de6c:	216b      	movs	r1, #107	@ 0x6b
 800de6e:	4b19      	ldr	r3, [pc, #100]	@ (800ded4 <_Balloc+0x80>)
 800de70:	4819      	ldr	r0, [pc, #100]	@ (800ded8 <_Balloc+0x84>)
 800de72:	f000 ffb7 	bl	800ede4 <__assert_func>
 800de76:	6045      	str	r5, [r0, #4]
 800de78:	6085      	str	r5, [r0, #8]
 800de7a:	6005      	str	r5, [r0, #0]
 800de7c:	60c5      	str	r5, [r0, #12]
 800de7e:	69f5      	ldr	r5, [r6, #28]
 800de80:	68eb      	ldr	r3, [r5, #12]
 800de82:	2b00      	cmp	r3, #0
 800de84:	d013      	beq.n	800deae <_Balloc+0x5a>
 800de86:	69f3      	ldr	r3, [r6, #28]
 800de88:	00a2      	lsls	r2, r4, #2
 800de8a:	68db      	ldr	r3, [r3, #12]
 800de8c:	189b      	adds	r3, r3, r2
 800de8e:	6818      	ldr	r0, [r3, #0]
 800de90:	2800      	cmp	r0, #0
 800de92:	d118      	bne.n	800dec6 <_Balloc+0x72>
 800de94:	2101      	movs	r1, #1
 800de96:	000d      	movs	r5, r1
 800de98:	40a5      	lsls	r5, r4
 800de9a:	1d6a      	adds	r2, r5, #5
 800de9c:	0030      	movs	r0, r6
 800de9e:	0092      	lsls	r2, r2, #2
 800dea0:	f000 ffbe 	bl	800ee20 <_calloc_r>
 800dea4:	2800      	cmp	r0, #0
 800dea6:	d00c      	beq.n	800dec2 <_Balloc+0x6e>
 800dea8:	6044      	str	r4, [r0, #4]
 800deaa:	6085      	str	r5, [r0, #8]
 800deac:	e00d      	b.n	800deca <_Balloc+0x76>
 800deae:	2221      	movs	r2, #33	@ 0x21
 800deb0:	2104      	movs	r1, #4
 800deb2:	0030      	movs	r0, r6
 800deb4:	f000 ffb4 	bl	800ee20 <_calloc_r>
 800deb8:	69f3      	ldr	r3, [r6, #28]
 800deba:	60e8      	str	r0, [r5, #12]
 800debc:	68db      	ldr	r3, [r3, #12]
 800debe:	2b00      	cmp	r3, #0
 800dec0:	d1e1      	bne.n	800de86 <_Balloc+0x32>
 800dec2:	2000      	movs	r0, #0
 800dec4:	bd70      	pop	{r4, r5, r6, pc}
 800dec6:	6802      	ldr	r2, [r0, #0]
 800dec8:	601a      	str	r2, [r3, #0]
 800deca:	2300      	movs	r3, #0
 800decc:	6103      	str	r3, [r0, #16]
 800dece:	60c3      	str	r3, [r0, #12]
 800ded0:	e7f8      	b.n	800dec4 <_Balloc+0x70>
 800ded2:	46c0      	nop			@ (mov r8, r8)
 800ded4:	0800fbc9 	.word	0x0800fbc9
 800ded8:	0800fc49 	.word	0x0800fc49

0800dedc <_Bfree>:
 800dedc:	b570      	push	{r4, r5, r6, lr}
 800dede:	69c6      	ldr	r6, [r0, #28]
 800dee0:	0005      	movs	r5, r0
 800dee2:	000c      	movs	r4, r1
 800dee4:	2e00      	cmp	r6, #0
 800dee6:	d10e      	bne.n	800df06 <_Bfree+0x2a>
 800dee8:	2010      	movs	r0, #16
 800deea:	f7ff fef7 	bl	800dcdc <malloc>
 800deee:	1e02      	subs	r2, r0, #0
 800def0:	61e8      	str	r0, [r5, #28]
 800def2:	d104      	bne.n	800defe <_Bfree+0x22>
 800def4:	218f      	movs	r1, #143	@ 0x8f
 800def6:	4b09      	ldr	r3, [pc, #36]	@ (800df1c <_Bfree+0x40>)
 800def8:	4809      	ldr	r0, [pc, #36]	@ (800df20 <_Bfree+0x44>)
 800defa:	f000 ff73 	bl	800ede4 <__assert_func>
 800defe:	6046      	str	r6, [r0, #4]
 800df00:	6086      	str	r6, [r0, #8]
 800df02:	6006      	str	r6, [r0, #0]
 800df04:	60c6      	str	r6, [r0, #12]
 800df06:	2c00      	cmp	r4, #0
 800df08:	d007      	beq.n	800df1a <_Bfree+0x3e>
 800df0a:	69eb      	ldr	r3, [r5, #28]
 800df0c:	6862      	ldr	r2, [r4, #4]
 800df0e:	68db      	ldr	r3, [r3, #12]
 800df10:	0092      	lsls	r2, r2, #2
 800df12:	189b      	adds	r3, r3, r2
 800df14:	681a      	ldr	r2, [r3, #0]
 800df16:	6022      	str	r2, [r4, #0]
 800df18:	601c      	str	r4, [r3, #0]
 800df1a:	bd70      	pop	{r4, r5, r6, pc}
 800df1c:	0800fbc9 	.word	0x0800fbc9
 800df20:	0800fc49 	.word	0x0800fc49

0800df24 <__multadd>:
 800df24:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800df26:	000f      	movs	r7, r1
 800df28:	9001      	str	r0, [sp, #4]
 800df2a:	000c      	movs	r4, r1
 800df2c:	001e      	movs	r6, r3
 800df2e:	2000      	movs	r0, #0
 800df30:	690d      	ldr	r5, [r1, #16]
 800df32:	3714      	adds	r7, #20
 800df34:	683b      	ldr	r3, [r7, #0]
 800df36:	3001      	adds	r0, #1
 800df38:	b299      	uxth	r1, r3
 800df3a:	4351      	muls	r1, r2
 800df3c:	0c1b      	lsrs	r3, r3, #16
 800df3e:	4353      	muls	r3, r2
 800df40:	1989      	adds	r1, r1, r6
 800df42:	0c0e      	lsrs	r6, r1, #16
 800df44:	199b      	adds	r3, r3, r6
 800df46:	0c1e      	lsrs	r6, r3, #16
 800df48:	b289      	uxth	r1, r1
 800df4a:	041b      	lsls	r3, r3, #16
 800df4c:	185b      	adds	r3, r3, r1
 800df4e:	c708      	stmia	r7!, {r3}
 800df50:	4285      	cmp	r5, r0
 800df52:	dcef      	bgt.n	800df34 <__multadd+0x10>
 800df54:	2e00      	cmp	r6, #0
 800df56:	d022      	beq.n	800df9e <__multadd+0x7a>
 800df58:	68a3      	ldr	r3, [r4, #8]
 800df5a:	42ab      	cmp	r3, r5
 800df5c:	dc19      	bgt.n	800df92 <__multadd+0x6e>
 800df5e:	6861      	ldr	r1, [r4, #4]
 800df60:	9801      	ldr	r0, [sp, #4]
 800df62:	3101      	adds	r1, #1
 800df64:	f7ff ff76 	bl	800de54 <_Balloc>
 800df68:	1e07      	subs	r7, r0, #0
 800df6a:	d105      	bne.n	800df78 <__multadd+0x54>
 800df6c:	003a      	movs	r2, r7
 800df6e:	21ba      	movs	r1, #186	@ 0xba
 800df70:	4b0c      	ldr	r3, [pc, #48]	@ (800dfa4 <__multadd+0x80>)
 800df72:	480d      	ldr	r0, [pc, #52]	@ (800dfa8 <__multadd+0x84>)
 800df74:	f000 ff36 	bl	800ede4 <__assert_func>
 800df78:	0021      	movs	r1, r4
 800df7a:	6922      	ldr	r2, [r4, #16]
 800df7c:	310c      	adds	r1, #12
 800df7e:	3202      	adds	r2, #2
 800df80:	0092      	lsls	r2, r2, #2
 800df82:	300c      	adds	r0, #12
 800df84:	f000 ff24 	bl	800edd0 <memcpy>
 800df88:	0021      	movs	r1, r4
 800df8a:	9801      	ldr	r0, [sp, #4]
 800df8c:	f7ff ffa6 	bl	800dedc <_Bfree>
 800df90:	003c      	movs	r4, r7
 800df92:	1d2b      	adds	r3, r5, #4
 800df94:	009b      	lsls	r3, r3, #2
 800df96:	18e3      	adds	r3, r4, r3
 800df98:	3501      	adds	r5, #1
 800df9a:	605e      	str	r6, [r3, #4]
 800df9c:	6125      	str	r5, [r4, #16]
 800df9e:	0020      	movs	r0, r4
 800dfa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dfa2:	46c0      	nop			@ (mov r8, r8)
 800dfa4:	0800fc38 	.word	0x0800fc38
 800dfa8:	0800fc49 	.word	0x0800fc49

0800dfac <__hi0bits>:
 800dfac:	2280      	movs	r2, #128	@ 0x80
 800dfae:	0003      	movs	r3, r0
 800dfb0:	0252      	lsls	r2, r2, #9
 800dfb2:	2000      	movs	r0, #0
 800dfb4:	4293      	cmp	r3, r2
 800dfb6:	d201      	bcs.n	800dfbc <__hi0bits+0x10>
 800dfb8:	041b      	lsls	r3, r3, #16
 800dfba:	3010      	adds	r0, #16
 800dfbc:	2280      	movs	r2, #128	@ 0x80
 800dfbe:	0452      	lsls	r2, r2, #17
 800dfc0:	4293      	cmp	r3, r2
 800dfc2:	d201      	bcs.n	800dfc8 <__hi0bits+0x1c>
 800dfc4:	3008      	adds	r0, #8
 800dfc6:	021b      	lsls	r3, r3, #8
 800dfc8:	2280      	movs	r2, #128	@ 0x80
 800dfca:	0552      	lsls	r2, r2, #21
 800dfcc:	4293      	cmp	r3, r2
 800dfce:	d201      	bcs.n	800dfd4 <__hi0bits+0x28>
 800dfd0:	3004      	adds	r0, #4
 800dfd2:	011b      	lsls	r3, r3, #4
 800dfd4:	2280      	movs	r2, #128	@ 0x80
 800dfd6:	05d2      	lsls	r2, r2, #23
 800dfd8:	4293      	cmp	r3, r2
 800dfda:	d201      	bcs.n	800dfe0 <__hi0bits+0x34>
 800dfdc:	3002      	adds	r0, #2
 800dfde:	009b      	lsls	r3, r3, #2
 800dfe0:	2b00      	cmp	r3, #0
 800dfe2:	db03      	blt.n	800dfec <__hi0bits+0x40>
 800dfe4:	3001      	adds	r0, #1
 800dfe6:	4213      	tst	r3, r2
 800dfe8:	d100      	bne.n	800dfec <__hi0bits+0x40>
 800dfea:	2020      	movs	r0, #32
 800dfec:	4770      	bx	lr

0800dfee <__lo0bits>:
 800dfee:	6803      	ldr	r3, [r0, #0]
 800dff0:	0001      	movs	r1, r0
 800dff2:	2207      	movs	r2, #7
 800dff4:	0018      	movs	r0, r3
 800dff6:	4010      	ands	r0, r2
 800dff8:	4213      	tst	r3, r2
 800dffa:	d00d      	beq.n	800e018 <__lo0bits+0x2a>
 800dffc:	3a06      	subs	r2, #6
 800dffe:	2000      	movs	r0, #0
 800e000:	4213      	tst	r3, r2
 800e002:	d105      	bne.n	800e010 <__lo0bits+0x22>
 800e004:	3002      	adds	r0, #2
 800e006:	4203      	tst	r3, r0
 800e008:	d003      	beq.n	800e012 <__lo0bits+0x24>
 800e00a:	40d3      	lsrs	r3, r2
 800e00c:	0010      	movs	r0, r2
 800e00e:	600b      	str	r3, [r1, #0]
 800e010:	4770      	bx	lr
 800e012:	089b      	lsrs	r3, r3, #2
 800e014:	600b      	str	r3, [r1, #0]
 800e016:	e7fb      	b.n	800e010 <__lo0bits+0x22>
 800e018:	b29a      	uxth	r2, r3
 800e01a:	2a00      	cmp	r2, #0
 800e01c:	d101      	bne.n	800e022 <__lo0bits+0x34>
 800e01e:	2010      	movs	r0, #16
 800e020:	0c1b      	lsrs	r3, r3, #16
 800e022:	b2da      	uxtb	r2, r3
 800e024:	2a00      	cmp	r2, #0
 800e026:	d101      	bne.n	800e02c <__lo0bits+0x3e>
 800e028:	3008      	adds	r0, #8
 800e02a:	0a1b      	lsrs	r3, r3, #8
 800e02c:	071a      	lsls	r2, r3, #28
 800e02e:	d101      	bne.n	800e034 <__lo0bits+0x46>
 800e030:	3004      	adds	r0, #4
 800e032:	091b      	lsrs	r3, r3, #4
 800e034:	079a      	lsls	r2, r3, #30
 800e036:	d101      	bne.n	800e03c <__lo0bits+0x4e>
 800e038:	3002      	adds	r0, #2
 800e03a:	089b      	lsrs	r3, r3, #2
 800e03c:	07da      	lsls	r2, r3, #31
 800e03e:	d4e9      	bmi.n	800e014 <__lo0bits+0x26>
 800e040:	3001      	adds	r0, #1
 800e042:	085b      	lsrs	r3, r3, #1
 800e044:	d1e6      	bne.n	800e014 <__lo0bits+0x26>
 800e046:	2020      	movs	r0, #32
 800e048:	e7e2      	b.n	800e010 <__lo0bits+0x22>
	...

0800e04c <__i2b>:
 800e04c:	b510      	push	{r4, lr}
 800e04e:	000c      	movs	r4, r1
 800e050:	2101      	movs	r1, #1
 800e052:	f7ff feff 	bl	800de54 <_Balloc>
 800e056:	2800      	cmp	r0, #0
 800e058:	d107      	bne.n	800e06a <__i2b+0x1e>
 800e05a:	2146      	movs	r1, #70	@ 0x46
 800e05c:	4c05      	ldr	r4, [pc, #20]	@ (800e074 <__i2b+0x28>)
 800e05e:	0002      	movs	r2, r0
 800e060:	4b05      	ldr	r3, [pc, #20]	@ (800e078 <__i2b+0x2c>)
 800e062:	0020      	movs	r0, r4
 800e064:	31ff      	adds	r1, #255	@ 0xff
 800e066:	f000 febd 	bl	800ede4 <__assert_func>
 800e06a:	2301      	movs	r3, #1
 800e06c:	6144      	str	r4, [r0, #20]
 800e06e:	6103      	str	r3, [r0, #16]
 800e070:	bd10      	pop	{r4, pc}
 800e072:	46c0      	nop			@ (mov r8, r8)
 800e074:	0800fc49 	.word	0x0800fc49
 800e078:	0800fc38 	.word	0x0800fc38

0800e07c <__multiply>:
 800e07c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e07e:	0014      	movs	r4, r2
 800e080:	690a      	ldr	r2, [r1, #16]
 800e082:	6923      	ldr	r3, [r4, #16]
 800e084:	000d      	movs	r5, r1
 800e086:	b08b      	sub	sp, #44	@ 0x2c
 800e088:	429a      	cmp	r2, r3
 800e08a:	db02      	blt.n	800e092 <__multiply+0x16>
 800e08c:	0023      	movs	r3, r4
 800e08e:	000c      	movs	r4, r1
 800e090:	001d      	movs	r5, r3
 800e092:	6927      	ldr	r7, [r4, #16]
 800e094:	692e      	ldr	r6, [r5, #16]
 800e096:	6861      	ldr	r1, [r4, #4]
 800e098:	19bb      	adds	r3, r7, r6
 800e09a:	9303      	str	r3, [sp, #12]
 800e09c:	68a3      	ldr	r3, [r4, #8]
 800e09e:	19ba      	adds	r2, r7, r6
 800e0a0:	4293      	cmp	r3, r2
 800e0a2:	da00      	bge.n	800e0a6 <__multiply+0x2a>
 800e0a4:	3101      	adds	r1, #1
 800e0a6:	f7ff fed5 	bl	800de54 <_Balloc>
 800e0aa:	9002      	str	r0, [sp, #8]
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d106      	bne.n	800e0be <__multiply+0x42>
 800e0b0:	21b1      	movs	r1, #177	@ 0xb1
 800e0b2:	4b49      	ldr	r3, [pc, #292]	@ (800e1d8 <__multiply+0x15c>)
 800e0b4:	4849      	ldr	r0, [pc, #292]	@ (800e1dc <__multiply+0x160>)
 800e0b6:	9a02      	ldr	r2, [sp, #8]
 800e0b8:	0049      	lsls	r1, r1, #1
 800e0ba:	f000 fe93 	bl	800ede4 <__assert_func>
 800e0be:	9b02      	ldr	r3, [sp, #8]
 800e0c0:	2200      	movs	r2, #0
 800e0c2:	3314      	adds	r3, #20
 800e0c4:	469c      	mov	ip, r3
 800e0c6:	19bb      	adds	r3, r7, r6
 800e0c8:	009b      	lsls	r3, r3, #2
 800e0ca:	4463      	add	r3, ip
 800e0cc:	9304      	str	r3, [sp, #16]
 800e0ce:	4663      	mov	r3, ip
 800e0d0:	9904      	ldr	r1, [sp, #16]
 800e0d2:	428b      	cmp	r3, r1
 800e0d4:	d32a      	bcc.n	800e12c <__multiply+0xb0>
 800e0d6:	0023      	movs	r3, r4
 800e0d8:	00bf      	lsls	r7, r7, #2
 800e0da:	3314      	adds	r3, #20
 800e0dc:	3514      	adds	r5, #20
 800e0de:	9308      	str	r3, [sp, #32]
 800e0e0:	00b6      	lsls	r6, r6, #2
 800e0e2:	19db      	adds	r3, r3, r7
 800e0e4:	9305      	str	r3, [sp, #20]
 800e0e6:	19ab      	adds	r3, r5, r6
 800e0e8:	9309      	str	r3, [sp, #36]	@ 0x24
 800e0ea:	2304      	movs	r3, #4
 800e0ec:	9306      	str	r3, [sp, #24]
 800e0ee:	0023      	movs	r3, r4
 800e0f0:	9a05      	ldr	r2, [sp, #20]
 800e0f2:	3315      	adds	r3, #21
 800e0f4:	9501      	str	r5, [sp, #4]
 800e0f6:	429a      	cmp	r2, r3
 800e0f8:	d305      	bcc.n	800e106 <__multiply+0x8a>
 800e0fa:	1b13      	subs	r3, r2, r4
 800e0fc:	3b15      	subs	r3, #21
 800e0fe:	089b      	lsrs	r3, r3, #2
 800e100:	3301      	adds	r3, #1
 800e102:	009b      	lsls	r3, r3, #2
 800e104:	9306      	str	r3, [sp, #24]
 800e106:	9b01      	ldr	r3, [sp, #4]
 800e108:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d310      	bcc.n	800e130 <__multiply+0xb4>
 800e10e:	9b03      	ldr	r3, [sp, #12]
 800e110:	2b00      	cmp	r3, #0
 800e112:	dd05      	ble.n	800e120 <__multiply+0xa4>
 800e114:	9b04      	ldr	r3, [sp, #16]
 800e116:	3b04      	subs	r3, #4
 800e118:	9304      	str	r3, [sp, #16]
 800e11a:	681b      	ldr	r3, [r3, #0]
 800e11c:	2b00      	cmp	r3, #0
 800e11e:	d056      	beq.n	800e1ce <__multiply+0x152>
 800e120:	9b02      	ldr	r3, [sp, #8]
 800e122:	9a03      	ldr	r2, [sp, #12]
 800e124:	0018      	movs	r0, r3
 800e126:	611a      	str	r2, [r3, #16]
 800e128:	b00b      	add	sp, #44	@ 0x2c
 800e12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e12c:	c304      	stmia	r3!, {r2}
 800e12e:	e7cf      	b.n	800e0d0 <__multiply+0x54>
 800e130:	9b01      	ldr	r3, [sp, #4]
 800e132:	6818      	ldr	r0, [r3, #0]
 800e134:	b280      	uxth	r0, r0
 800e136:	2800      	cmp	r0, #0
 800e138:	d01e      	beq.n	800e178 <__multiply+0xfc>
 800e13a:	4667      	mov	r7, ip
 800e13c:	2500      	movs	r5, #0
 800e13e:	9e08      	ldr	r6, [sp, #32]
 800e140:	ce02      	ldmia	r6!, {r1}
 800e142:	683b      	ldr	r3, [r7, #0]
 800e144:	9307      	str	r3, [sp, #28]
 800e146:	b28b      	uxth	r3, r1
 800e148:	4343      	muls	r3, r0
 800e14a:	001a      	movs	r2, r3
 800e14c:	466b      	mov	r3, sp
 800e14e:	0c09      	lsrs	r1, r1, #16
 800e150:	8b9b      	ldrh	r3, [r3, #28]
 800e152:	4341      	muls	r1, r0
 800e154:	18d3      	adds	r3, r2, r3
 800e156:	9a07      	ldr	r2, [sp, #28]
 800e158:	195b      	adds	r3, r3, r5
 800e15a:	0c12      	lsrs	r2, r2, #16
 800e15c:	1889      	adds	r1, r1, r2
 800e15e:	0c1a      	lsrs	r2, r3, #16
 800e160:	188a      	adds	r2, r1, r2
 800e162:	b29b      	uxth	r3, r3
 800e164:	0c15      	lsrs	r5, r2, #16
 800e166:	0412      	lsls	r2, r2, #16
 800e168:	431a      	orrs	r2, r3
 800e16a:	9b05      	ldr	r3, [sp, #20]
 800e16c:	c704      	stmia	r7!, {r2}
 800e16e:	42b3      	cmp	r3, r6
 800e170:	d8e6      	bhi.n	800e140 <__multiply+0xc4>
 800e172:	4663      	mov	r3, ip
 800e174:	9a06      	ldr	r2, [sp, #24]
 800e176:	509d      	str	r5, [r3, r2]
 800e178:	9b01      	ldr	r3, [sp, #4]
 800e17a:	6818      	ldr	r0, [r3, #0]
 800e17c:	0c00      	lsrs	r0, r0, #16
 800e17e:	d020      	beq.n	800e1c2 <__multiply+0x146>
 800e180:	4663      	mov	r3, ip
 800e182:	0025      	movs	r5, r4
 800e184:	4661      	mov	r1, ip
 800e186:	2700      	movs	r7, #0
 800e188:	681b      	ldr	r3, [r3, #0]
 800e18a:	3514      	adds	r5, #20
 800e18c:	682a      	ldr	r2, [r5, #0]
 800e18e:	680e      	ldr	r6, [r1, #0]
 800e190:	b292      	uxth	r2, r2
 800e192:	4342      	muls	r2, r0
 800e194:	0c36      	lsrs	r6, r6, #16
 800e196:	1992      	adds	r2, r2, r6
 800e198:	19d2      	adds	r2, r2, r7
 800e19a:	0416      	lsls	r6, r2, #16
 800e19c:	b29b      	uxth	r3, r3
 800e19e:	431e      	orrs	r6, r3
 800e1a0:	600e      	str	r6, [r1, #0]
 800e1a2:	cd40      	ldmia	r5!, {r6}
 800e1a4:	684b      	ldr	r3, [r1, #4]
 800e1a6:	0c36      	lsrs	r6, r6, #16
 800e1a8:	4346      	muls	r6, r0
 800e1aa:	b29b      	uxth	r3, r3
 800e1ac:	0c12      	lsrs	r2, r2, #16
 800e1ae:	18f3      	adds	r3, r6, r3
 800e1b0:	189b      	adds	r3, r3, r2
 800e1b2:	9a05      	ldr	r2, [sp, #20]
 800e1b4:	0c1f      	lsrs	r7, r3, #16
 800e1b6:	3104      	adds	r1, #4
 800e1b8:	42aa      	cmp	r2, r5
 800e1ba:	d8e7      	bhi.n	800e18c <__multiply+0x110>
 800e1bc:	4662      	mov	r2, ip
 800e1be:	9906      	ldr	r1, [sp, #24]
 800e1c0:	5053      	str	r3, [r2, r1]
 800e1c2:	9b01      	ldr	r3, [sp, #4]
 800e1c4:	3304      	adds	r3, #4
 800e1c6:	9301      	str	r3, [sp, #4]
 800e1c8:	2304      	movs	r3, #4
 800e1ca:	449c      	add	ip, r3
 800e1cc:	e79b      	b.n	800e106 <__multiply+0x8a>
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	3b01      	subs	r3, #1
 800e1d2:	9303      	str	r3, [sp, #12]
 800e1d4:	e79b      	b.n	800e10e <__multiply+0x92>
 800e1d6:	46c0      	nop			@ (mov r8, r8)
 800e1d8:	0800fc38 	.word	0x0800fc38
 800e1dc:	0800fc49 	.word	0x0800fc49

0800e1e0 <__pow5mult>:
 800e1e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e1e2:	2303      	movs	r3, #3
 800e1e4:	0015      	movs	r5, r2
 800e1e6:	0007      	movs	r7, r0
 800e1e8:	000e      	movs	r6, r1
 800e1ea:	401a      	ands	r2, r3
 800e1ec:	421d      	tst	r5, r3
 800e1ee:	d008      	beq.n	800e202 <__pow5mult+0x22>
 800e1f0:	4925      	ldr	r1, [pc, #148]	@ (800e288 <__pow5mult+0xa8>)
 800e1f2:	3a01      	subs	r2, #1
 800e1f4:	0092      	lsls	r2, r2, #2
 800e1f6:	5852      	ldr	r2, [r2, r1]
 800e1f8:	2300      	movs	r3, #0
 800e1fa:	0031      	movs	r1, r6
 800e1fc:	f7ff fe92 	bl	800df24 <__multadd>
 800e200:	0006      	movs	r6, r0
 800e202:	10ad      	asrs	r5, r5, #2
 800e204:	d03d      	beq.n	800e282 <__pow5mult+0xa2>
 800e206:	69fc      	ldr	r4, [r7, #28]
 800e208:	2c00      	cmp	r4, #0
 800e20a:	d10f      	bne.n	800e22c <__pow5mult+0x4c>
 800e20c:	2010      	movs	r0, #16
 800e20e:	f7ff fd65 	bl	800dcdc <malloc>
 800e212:	1e02      	subs	r2, r0, #0
 800e214:	61f8      	str	r0, [r7, #28]
 800e216:	d105      	bne.n	800e224 <__pow5mult+0x44>
 800e218:	21b4      	movs	r1, #180	@ 0xb4
 800e21a:	4b1c      	ldr	r3, [pc, #112]	@ (800e28c <__pow5mult+0xac>)
 800e21c:	481c      	ldr	r0, [pc, #112]	@ (800e290 <__pow5mult+0xb0>)
 800e21e:	31ff      	adds	r1, #255	@ 0xff
 800e220:	f000 fde0 	bl	800ede4 <__assert_func>
 800e224:	6044      	str	r4, [r0, #4]
 800e226:	6084      	str	r4, [r0, #8]
 800e228:	6004      	str	r4, [r0, #0]
 800e22a:	60c4      	str	r4, [r0, #12]
 800e22c:	69fb      	ldr	r3, [r7, #28]
 800e22e:	689c      	ldr	r4, [r3, #8]
 800e230:	9301      	str	r3, [sp, #4]
 800e232:	2c00      	cmp	r4, #0
 800e234:	d108      	bne.n	800e248 <__pow5mult+0x68>
 800e236:	0038      	movs	r0, r7
 800e238:	4916      	ldr	r1, [pc, #88]	@ (800e294 <__pow5mult+0xb4>)
 800e23a:	f7ff ff07 	bl	800e04c <__i2b>
 800e23e:	9b01      	ldr	r3, [sp, #4]
 800e240:	0004      	movs	r4, r0
 800e242:	6098      	str	r0, [r3, #8]
 800e244:	2300      	movs	r3, #0
 800e246:	6003      	str	r3, [r0, #0]
 800e248:	2301      	movs	r3, #1
 800e24a:	421d      	tst	r5, r3
 800e24c:	d00a      	beq.n	800e264 <__pow5mult+0x84>
 800e24e:	0031      	movs	r1, r6
 800e250:	0022      	movs	r2, r4
 800e252:	0038      	movs	r0, r7
 800e254:	f7ff ff12 	bl	800e07c <__multiply>
 800e258:	0031      	movs	r1, r6
 800e25a:	9001      	str	r0, [sp, #4]
 800e25c:	0038      	movs	r0, r7
 800e25e:	f7ff fe3d 	bl	800dedc <_Bfree>
 800e262:	9e01      	ldr	r6, [sp, #4]
 800e264:	106d      	asrs	r5, r5, #1
 800e266:	d00c      	beq.n	800e282 <__pow5mult+0xa2>
 800e268:	6820      	ldr	r0, [r4, #0]
 800e26a:	2800      	cmp	r0, #0
 800e26c:	d107      	bne.n	800e27e <__pow5mult+0x9e>
 800e26e:	0022      	movs	r2, r4
 800e270:	0021      	movs	r1, r4
 800e272:	0038      	movs	r0, r7
 800e274:	f7ff ff02 	bl	800e07c <__multiply>
 800e278:	2300      	movs	r3, #0
 800e27a:	6020      	str	r0, [r4, #0]
 800e27c:	6003      	str	r3, [r0, #0]
 800e27e:	0004      	movs	r4, r0
 800e280:	e7e2      	b.n	800e248 <__pow5mult+0x68>
 800e282:	0030      	movs	r0, r6
 800e284:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e286:	46c0      	nop			@ (mov r8, r8)
 800e288:	0800fca4 	.word	0x0800fca4
 800e28c:	0800fbc9 	.word	0x0800fbc9
 800e290:	0800fc49 	.word	0x0800fc49
 800e294:	00000271 	.word	0x00000271

0800e298 <__lshift>:
 800e298:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e29a:	000c      	movs	r4, r1
 800e29c:	0016      	movs	r6, r2
 800e29e:	6923      	ldr	r3, [r4, #16]
 800e2a0:	1157      	asrs	r7, r2, #5
 800e2a2:	b085      	sub	sp, #20
 800e2a4:	18fb      	adds	r3, r7, r3
 800e2a6:	9301      	str	r3, [sp, #4]
 800e2a8:	3301      	adds	r3, #1
 800e2aa:	9300      	str	r3, [sp, #0]
 800e2ac:	6849      	ldr	r1, [r1, #4]
 800e2ae:	68a3      	ldr	r3, [r4, #8]
 800e2b0:	9002      	str	r0, [sp, #8]
 800e2b2:	9a00      	ldr	r2, [sp, #0]
 800e2b4:	4293      	cmp	r3, r2
 800e2b6:	db10      	blt.n	800e2da <__lshift+0x42>
 800e2b8:	9802      	ldr	r0, [sp, #8]
 800e2ba:	f7ff fdcb 	bl	800de54 <_Balloc>
 800e2be:	2300      	movs	r3, #0
 800e2c0:	0001      	movs	r1, r0
 800e2c2:	0005      	movs	r5, r0
 800e2c4:	001a      	movs	r2, r3
 800e2c6:	3114      	adds	r1, #20
 800e2c8:	4298      	cmp	r0, r3
 800e2ca:	d10c      	bne.n	800e2e6 <__lshift+0x4e>
 800e2cc:	21ef      	movs	r1, #239	@ 0xef
 800e2ce:	002a      	movs	r2, r5
 800e2d0:	4b25      	ldr	r3, [pc, #148]	@ (800e368 <__lshift+0xd0>)
 800e2d2:	4826      	ldr	r0, [pc, #152]	@ (800e36c <__lshift+0xd4>)
 800e2d4:	0049      	lsls	r1, r1, #1
 800e2d6:	f000 fd85 	bl	800ede4 <__assert_func>
 800e2da:	3101      	adds	r1, #1
 800e2dc:	005b      	lsls	r3, r3, #1
 800e2de:	e7e8      	b.n	800e2b2 <__lshift+0x1a>
 800e2e0:	0098      	lsls	r0, r3, #2
 800e2e2:	500a      	str	r2, [r1, r0]
 800e2e4:	3301      	adds	r3, #1
 800e2e6:	42bb      	cmp	r3, r7
 800e2e8:	dbfa      	blt.n	800e2e0 <__lshift+0x48>
 800e2ea:	43fb      	mvns	r3, r7
 800e2ec:	17db      	asrs	r3, r3, #31
 800e2ee:	401f      	ands	r7, r3
 800e2f0:	00bf      	lsls	r7, r7, #2
 800e2f2:	0023      	movs	r3, r4
 800e2f4:	201f      	movs	r0, #31
 800e2f6:	19c9      	adds	r1, r1, r7
 800e2f8:	0037      	movs	r7, r6
 800e2fa:	6922      	ldr	r2, [r4, #16]
 800e2fc:	3314      	adds	r3, #20
 800e2fe:	0092      	lsls	r2, r2, #2
 800e300:	189a      	adds	r2, r3, r2
 800e302:	4007      	ands	r7, r0
 800e304:	4206      	tst	r6, r0
 800e306:	d029      	beq.n	800e35c <__lshift+0xc4>
 800e308:	3001      	adds	r0, #1
 800e30a:	1bc0      	subs	r0, r0, r7
 800e30c:	9003      	str	r0, [sp, #12]
 800e30e:	468c      	mov	ip, r1
 800e310:	2000      	movs	r0, #0
 800e312:	681e      	ldr	r6, [r3, #0]
 800e314:	40be      	lsls	r6, r7
 800e316:	4306      	orrs	r6, r0
 800e318:	4660      	mov	r0, ip
 800e31a:	c040      	stmia	r0!, {r6}
 800e31c:	4684      	mov	ip, r0
 800e31e:	9e03      	ldr	r6, [sp, #12]
 800e320:	cb01      	ldmia	r3!, {r0}
 800e322:	40f0      	lsrs	r0, r6
 800e324:	429a      	cmp	r2, r3
 800e326:	d8f4      	bhi.n	800e312 <__lshift+0x7a>
 800e328:	0026      	movs	r6, r4
 800e32a:	3615      	adds	r6, #21
 800e32c:	2304      	movs	r3, #4
 800e32e:	42b2      	cmp	r2, r6
 800e330:	d304      	bcc.n	800e33c <__lshift+0xa4>
 800e332:	1b13      	subs	r3, r2, r4
 800e334:	3b15      	subs	r3, #21
 800e336:	089b      	lsrs	r3, r3, #2
 800e338:	3301      	adds	r3, #1
 800e33a:	009b      	lsls	r3, r3, #2
 800e33c:	50c8      	str	r0, [r1, r3]
 800e33e:	2800      	cmp	r0, #0
 800e340:	d002      	beq.n	800e348 <__lshift+0xb0>
 800e342:	9b01      	ldr	r3, [sp, #4]
 800e344:	3302      	adds	r3, #2
 800e346:	9300      	str	r3, [sp, #0]
 800e348:	9b00      	ldr	r3, [sp, #0]
 800e34a:	9802      	ldr	r0, [sp, #8]
 800e34c:	3b01      	subs	r3, #1
 800e34e:	0021      	movs	r1, r4
 800e350:	612b      	str	r3, [r5, #16]
 800e352:	f7ff fdc3 	bl	800dedc <_Bfree>
 800e356:	0028      	movs	r0, r5
 800e358:	b005      	add	sp, #20
 800e35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e35c:	cb01      	ldmia	r3!, {r0}
 800e35e:	c101      	stmia	r1!, {r0}
 800e360:	429a      	cmp	r2, r3
 800e362:	d8fb      	bhi.n	800e35c <__lshift+0xc4>
 800e364:	e7f0      	b.n	800e348 <__lshift+0xb0>
 800e366:	46c0      	nop			@ (mov r8, r8)
 800e368:	0800fc38 	.word	0x0800fc38
 800e36c:	0800fc49 	.word	0x0800fc49

0800e370 <__mcmp>:
 800e370:	b530      	push	{r4, r5, lr}
 800e372:	690b      	ldr	r3, [r1, #16]
 800e374:	6904      	ldr	r4, [r0, #16]
 800e376:	0002      	movs	r2, r0
 800e378:	1ae0      	subs	r0, r4, r3
 800e37a:	429c      	cmp	r4, r3
 800e37c:	d10f      	bne.n	800e39e <__mcmp+0x2e>
 800e37e:	3214      	adds	r2, #20
 800e380:	009b      	lsls	r3, r3, #2
 800e382:	3114      	adds	r1, #20
 800e384:	0014      	movs	r4, r2
 800e386:	18c9      	adds	r1, r1, r3
 800e388:	18d2      	adds	r2, r2, r3
 800e38a:	3a04      	subs	r2, #4
 800e38c:	3904      	subs	r1, #4
 800e38e:	6815      	ldr	r5, [r2, #0]
 800e390:	680b      	ldr	r3, [r1, #0]
 800e392:	429d      	cmp	r5, r3
 800e394:	d004      	beq.n	800e3a0 <__mcmp+0x30>
 800e396:	2001      	movs	r0, #1
 800e398:	429d      	cmp	r5, r3
 800e39a:	d200      	bcs.n	800e39e <__mcmp+0x2e>
 800e39c:	3802      	subs	r0, #2
 800e39e:	bd30      	pop	{r4, r5, pc}
 800e3a0:	4294      	cmp	r4, r2
 800e3a2:	d3f2      	bcc.n	800e38a <__mcmp+0x1a>
 800e3a4:	e7fb      	b.n	800e39e <__mcmp+0x2e>
	...

0800e3a8 <__mdiff>:
 800e3a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e3aa:	000c      	movs	r4, r1
 800e3ac:	b087      	sub	sp, #28
 800e3ae:	9000      	str	r0, [sp, #0]
 800e3b0:	0011      	movs	r1, r2
 800e3b2:	0020      	movs	r0, r4
 800e3b4:	0017      	movs	r7, r2
 800e3b6:	f7ff ffdb 	bl	800e370 <__mcmp>
 800e3ba:	1e05      	subs	r5, r0, #0
 800e3bc:	d110      	bne.n	800e3e0 <__mdiff+0x38>
 800e3be:	0001      	movs	r1, r0
 800e3c0:	9800      	ldr	r0, [sp, #0]
 800e3c2:	f7ff fd47 	bl	800de54 <_Balloc>
 800e3c6:	1e02      	subs	r2, r0, #0
 800e3c8:	d104      	bne.n	800e3d4 <__mdiff+0x2c>
 800e3ca:	4b40      	ldr	r3, [pc, #256]	@ (800e4cc <__mdiff+0x124>)
 800e3cc:	4840      	ldr	r0, [pc, #256]	@ (800e4d0 <__mdiff+0x128>)
 800e3ce:	4941      	ldr	r1, [pc, #260]	@ (800e4d4 <__mdiff+0x12c>)
 800e3d0:	f000 fd08 	bl	800ede4 <__assert_func>
 800e3d4:	2301      	movs	r3, #1
 800e3d6:	6145      	str	r5, [r0, #20]
 800e3d8:	6103      	str	r3, [r0, #16]
 800e3da:	0010      	movs	r0, r2
 800e3dc:	b007      	add	sp, #28
 800e3de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e3e0:	2600      	movs	r6, #0
 800e3e2:	42b0      	cmp	r0, r6
 800e3e4:	da03      	bge.n	800e3ee <__mdiff+0x46>
 800e3e6:	0023      	movs	r3, r4
 800e3e8:	003c      	movs	r4, r7
 800e3ea:	001f      	movs	r7, r3
 800e3ec:	3601      	adds	r6, #1
 800e3ee:	6861      	ldr	r1, [r4, #4]
 800e3f0:	9800      	ldr	r0, [sp, #0]
 800e3f2:	f7ff fd2f 	bl	800de54 <_Balloc>
 800e3f6:	1e02      	subs	r2, r0, #0
 800e3f8:	d103      	bne.n	800e402 <__mdiff+0x5a>
 800e3fa:	4b34      	ldr	r3, [pc, #208]	@ (800e4cc <__mdiff+0x124>)
 800e3fc:	4834      	ldr	r0, [pc, #208]	@ (800e4d0 <__mdiff+0x128>)
 800e3fe:	4936      	ldr	r1, [pc, #216]	@ (800e4d8 <__mdiff+0x130>)
 800e400:	e7e6      	b.n	800e3d0 <__mdiff+0x28>
 800e402:	6923      	ldr	r3, [r4, #16]
 800e404:	3414      	adds	r4, #20
 800e406:	9300      	str	r3, [sp, #0]
 800e408:	009b      	lsls	r3, r3, #2
 800e40a:	18e3      	adds	r3, r4, r3
 800e40c:	0021      	movs	r1, r4
 800e40e:	9401      	str	r4, [sp, #4]
 800e410:	003c      	movs	r4, r7
 800e412:	9302      	str	r3, [sp, #8]
 800e414:	693b      	ldr	r3, [r7, #16]
 800e416:	3414      	adds	r4, #20
 800e418:	009b      	lsls	r3, r3, #2
 800e41a:	18e3      	adds	r3, r4, r3
 800e41c:	9303      	str	r3, [sp, #12]
 800e41e:	0003      	movs	r3, r0
 800e420:	60c6      	str	r6, [r0, #12]
 800e422:	468c      	mov	ip, r1
 800e424:	2000      	movs	r0, #0
 800e426:	3314      	adds	r3, #20
 800e428:	9304      	str	r3, [sp, #16]
 800e42a:	9305      	str	r3, [sp, #20]
 800e42c:	4663      	mov	r3, ip
 800e42e:	cb20      	ldmia	r3!, {r5}
 800e430:	b2a9      	uxth	r1, r5
 800e432:	000e      	movs	r6, r1
 800e434:	469c      	mov	ip, r3
 800e436:	cc08      	ldmia	r4!, {r3}
 800e438:	0c2d      	lsrs	r5, r5, #16
 800e43a:	b299      	uxth	r1, r3
 800e43c:	1a71      	subs	r1, r6, r1
 800e43e:	1809      	adds	r1, r1, r0
 800e440:	0c1b      	lsrs	r3, r3, #16
 800e442:	1408      	asrs	r0, r1, #16
 800e444:	1aeb      	subs	r3, r5, r3
 800e446:	181b      	adds	r3, r3, r0
 800e448:	1418      	asrs	r0, r3, #16
 800e44a:	b289      	uxth	r1, r1
 800e44c:	041b      	lsls	r3, r3, #16
 800e44e:	4319      	orrs	r1, r3
 800e450:	9b05      	ldr	r3, [sp, #20]
 800e452:	c302      	stmia	r3!, {r1}
 800e454:	9305      	str	r3, [sp, #20]
 800e456:	9b03      	ldr	r3, [sp, #12]
 800e458:	42a3      	cmp	r3, r4
 800e45a:	d8e7      	bhi.n	800e42c <__mdiff+0x84>
 800e45c:	0039      	movs	r1, r7
 800e45e:	9c03      	ldr	r4, [sp, #12]
 800e460:	3115      	adds	r1, #21
 800e462:	2304      	movs	r3, #4
 800e464:	428c      	cmp	r4, r1
 800e466:	d304      	bcc.n	800e472 <__mdiff+0xca>
 800e468:	1be3      	subs	r3, r4, r7
 800e46a:	3b15      	subs	r3, #21
 800e46c:	089b      	lsrs	r3, r3, #2
 800e46e:	3301      	adds	r3, #1
 800e470:	009b      	lsls	r3, r3, #2
 800e472:	9901      	ldr	r1, [sp, #4]
 800e474:	18cd      	adds	r5, r1, r3
 800e476:	9904      	ldr	r1, [sp, #16]
 800e478:	002e      	movs	r6, r5
 800e47a:	18cb      	adds	r3, r1, r3
 800e47c:	001f      	movs	r7, r3
 800e47e:	9902      	ldr	r1, [sp, #8]
 800e480:	428e      	cmp	r6, r1
 800e482:	d311      	bcc.n	800e4a8 <__mdiff+0x100>
 800e484:	9c02      	ldr	r4, [sp, #8]
 800e486:	1ee9      	subs	r1, r5, #3
 800e488:	2000      	movs	r0, #0
 800e48a:	428c      	cmp	r4, r1
 800e48c:	d304      	bcc.n	800e498 <__mdiff+0xf0>
 800e48e:	0021      	movs	r1, r4
 800e490:	3103      	adds	r1, #3
 800e492:	1b49      	subs	r1, r1, r5
 800e494:	0889      	lsrs	r1, r1, #2
 800e496:	0088      	lsls	r0, r1, #2
 800e498:	181b      	adds	r3, r3, r0
 800e49a:	3b04      	subs	r3, #4
 800e49c:	6819      	ldr	r1, [r3, #0]
 800e49e:	2900      	cmp	r1, #0
 800e4a0:	d010      	beq.n	800e4c4 <__mdiff+0x11c>
 800e4a2:	9b00      	ldr	r3, [sp, #0]
 800e4a4:	6113      	str	r3, [r2, #16]
 800e4a6:	e798      	b.n	800e3da <__mdiff+0x32>
 800e4a8:	4684      	mov	ip, r0
 800e4aa:	ce02      	ldmia	r6!, {r1}
 800e4ac:	b288      	uxth	r0, r1
 800e4ae:	4460      	add	r0, ip
 800e4b0:	1400      	asrs	r0, r0, #16
 800e4b2:	0c0c      	lsrs	r4, r1, #16
 800e4b4:	1904      	adds	r4, r0, r4
 800e4b6:	4461      	add	r1, ip
 800e4b8:	1420      	asrs	r0, r4, #16
 800e4ba:	b289      	uxth	r1, r1
 800e4bc:	0424      	lsls	r4, r4, #16
 800e4be:	4321      	orrs	r1, r4
 800e4c0:	c702      	stmia	r7!, {r1}
 800e4c2:	e7dc      	b.n	800e47e <__mdiff+0xd6>
 800e4c4:	9900      	ldr	r1, [sp, #0]
 800e4c6:	3901      	subs	r1, #1
 800e4c8:	9100      	str	r1, [sp, #0]
 800e4ca:	e7e6      	b.n	800e49a <__mdiff+0xf2>
 800e4cc:	0800fc38 	.word	0x0800fc38
 800e4d0:	0800fc49 	.word	0x0800fc49
 800e4d4:	00000237 	.word	0x00000237
 800e4d8:	00000245 	.word	0x00000245

0800e4dc <__d2b>:
 800e4dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e4de:	2101      	movs	r1, #1
 800e4e0:	0016      	movs	r6, r2
 800e4e2:	001f      	movs	r7, r3
 800e4e4:	f7ff fcb6 	bl	800de54 <_Balloc>
 800e4e8:	1e04      	subs	r4, r0, #0
 800e4ea:	d105      	bne.n	800e4f8 <__d2b+0x1c>
 800e4ec:	0022      	movs	r2, r4
 800e4ee:	4b25      	ldr	r3, [pc, #148]	@ (800e584 <__d2b+0xa8>)
 800e4f0:	4825      	ldr	r0, [pc, #148]	@ (800e588 <__d2b+0xac>)
 800e4f2:	4926      	ldr	r1, [pc, #152]	@ (800e58c <__d2b+0xb0>)
 800e4f4:	f000 fc76 	bl	800ede4 <__assert_func>
 800e4f8:	033b      	lsls	r3, r7, #12
 800e4fa:	007d      	lsls	r5, r7, #1
 800e4fc:	0b1b      	lsrs	r3, r3, #12
 800e4fe:	0d6d      	lsrs	r5, r5, #21
 800e500:	d002      	beq.n	800e508 <__d2b+0x2c>
 800e502:	2280      	movs	r2, #128	@ 0x80
 800e504:	0352      	lsls	r2, r2, #13
 800e506:	4313      	orrs	r3, r2
 800e508:	9301      	str	r3, [sp, #4]
 800e50a:	2e00      	cmp	r6, #0
 800e50c:	d025      	beq.n	800e55a <__d2b+0x7e>
 800e50e:	4668      	mov	r0, sp
 800e510:	9600      	str	r6, [sp, #0]
 800e512:	f7ff fd6c 	bl	800dfee <__lo0bits>
 800e516:	9b01      	ldr	r3, [sp, #4]
 800e518:	9900      	ldr	r1, [sp, #0]
 800e51a:	2800      	cmp	r0, #0
 800e51c:	d01b      	beq.n	800e556 <__d2b+0x7a>
 800e51e:	2220      	movs	r2, #32
 800e520:	001e      	movs	r6, r3
 800e522:	1a12      	subs	r2, r2, r0
 800e524:	4096      	lsls	r6, r2
 800e526:	0032      	movs	r2, r6
 800e528:	40c3      	lsrs	r3, r0
 800e52a:	430a      	orrs	r2, r1
 800e52c:	6162      	str	r2, [r4, #20]
 800e52e:	9301      	str	r3, [sp, #4]
 800e530:	9e01      	ldr	r6, [sp, #4]
 800e532:	61a6      	str	r6, [r4, #24]
 800e534:	1e73      	subs	r3, r6, #1
 800e536:	419e      	sbcs	r6, r3
 800e538:	3601      	adds	r6, #1
 800e53a:	6126      	str	r6, [r4, #16]
 800e53c:	2d00      	cmp	r5, #0
 800e53e:	d014      	beq.n	800e56a <__d2b+0x8e>
 800e540:	2635      	movs	r6, #53	@ 0x35
 800e542:	4b13      	ldr	r3, [pc, #76]	@ (800e590 <__d2b+0xb4>)
 800e544:	18ed      	adds	r5, r5, r3
 800e546:	9b08      	ldr	r3, [sp, #32]
 800e548:	182d      	adds	r5, r5, r0
 800e54a:	601d      	str	r5, [r3, #0]
 800e54c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e54e:	1a36      	subs	r6, r6, r0
 800e550:	601e      	str	r6, [r3, #0]
 800e552:	0020      	movs	r0, r4
 800e554:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800e556:	6161      	str	r1, [r4, #20]
 800e558:	e7ea      	b.n	800e530 <__d2b+0x54>
 800e55a:	a801      	add	r0, sp, #4
 800e55c:	f7ff fd47 	bl	800dfee <__lo0bits>
 800e560:	9b01      	ldr	r3, [sp, #4]
 800e562:	2601      	movs	r6, #1
 800e564:	6163      	str	r3, [r4, #20]
 800e566:	3020      	adds	r0, #32
 800e568:	e7e7      	b.n	800e53a <__d2b+0x5e>
 800e56a:	4b0a      	ldr	r3, [pc, #40]	@ (800e594 <__d2b+0xb8>)
 800e56c:	18c0      	adds	r0, r0, r3
 800e56e:	9b08      	ldr	r3, [sp, #32]
 800e570:	6018      	str	r0, [r3, #0]
 800e572:	4b09      	ldr	r3, [pc, #36]	@ (800e598 <__d2b+0xbc>)
 800e574:	18f3      	adds	r3, r6, r3
 800e576:	009b      	lsls	r3, r3, #2
 800e578:	18e3      	adds	r3, r4, r3
 800e57a:	6958      	ldr	r0, [r3, #20]
 800e57c:	f7ff fd16 	bl	800dfac <__hi0bits>
 800e580:	0176      	lsls	r6, r6, #5
 800e582:	e7e3      	b.n	800e54c <__d2b+0x70>
 800e584:	0800fc38 	.word	0x0800fc38
 800e588:	0800fc49 	.word	0x0800fc49
 800e58c:	0000030f 	.word	0x0000030f
 800e590:	fffffbcd 	.word	0xfffffbcd
 800e594:	fffffbce 	.word	0xfffffbce
 800e598:	3fffffff 	.word	0x3fffffff

0800e59c <__ssputs_r>:
 800e59c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e59e:	688e      	ldr	r6, [r1, #8]
 800e5a0:	b085      	sub	sp, #20
 800e5a2:	001f      	movs	r7, r3
 800e5a4:	000c      	movs	r4, r1
 800e5a6:	680b      	ldr	r3, [r1, #0]
 800e5a8:	9002      	str	r0, [sp, #8]
 800e5aa:	9203      	str	r2, [sp, #12]
 800e5ac:	42be      	cmp	r6, r7
 800e5ae:	d830      	bhi.n	800e612 <__ssputs_r+0x76>
 800e5b0:	210c      	movs	r1, #12
 800e5b2:	5e62      	ldrsh	r2, [r4, r1]
 800e5b4:	2190      	movs	r1, #144	@ 0x90
 800e5b6:	00c9      	lsls	r1, r1, #3
 800e5b8:	420a      	tst	r2, r1
 800e5ba:	d028      	beq.n	800e60e <__ssputs_r+0x72>
 800e5bc:	2003      	movs	r0, #3
 800e5be:	6921      	ldr	r1, [r4, #16]
 800e5c0:	1a5b      	subs	r3, r3, r1
 800e5c2:	9301      	str	r3, [sp, #4]
 800e5c4:	6963      	ldr	r3, [r4, #20]
 800e5c6:	4343      	muls	r3, r0
 800e5c8:	9801      	ldr	r0, [sp, #4]
 800e5ca:	0fdd      	lsrs	r5, r3, #31
 800e5cc:	18ed      	adds	r5, r5, r3
 800e5ce:	1c7b      	adds	r3, r7, #1
 800e5d0:	181b      	adds	r3, r3, r0
 800e5d2:	106d      	asrs	r5, r5, #1
 800e5d4:	42ab      	cmp	r3, r5
 800e5d6:	d900      	bls.n	800e5da <__ssputs_r+0x3e>
 800e5d8:	001d      	movs	r5, r3
 800e5da:	0552      	lsls	r2, r2, #21
 800e5dc:	d528      	bpl.n	800e630 <__ssputs_r+0x94>
 800e5de:	0029      	movs	r1, r5
 800e5e0:	9802      	ldr	r0, [sp, #8]
 800e5e2:	f7ff fba7 	bl	800dd34 <_malloc_r>
 800e5e6:	1e06      	subs	r6, r0, #0
 800e5e8:	d02c      	beq.n	800e644 <__ssputs_r+0xa8>
 800e5ea:	9a01      	ldr	r2, [sp, #4]
 800e5ec:	6921      	ldr	r1, [r4, #16]
 800e5ee:	f000 fbef 	bl	800edd0 <memcpy>
 800e5f2:	89a2      	ldrh	r2, [r4, #12]
 800e5f4:	4b18      	ldr	r3, [pc, #96]	@ (800e658 <__ssputs_r+0xbc>)
 800e5f6:	401a      	ands	r2, r3
 800e5f8:	2380      	movs	r3, #128	@ 0x80
 800e5fa:	4313      	orrs	r3, r2
 800e5fc:	81a3      	strh	r3, [r4, #12]
 800e5fe:	9b01      	ldr	r3, [sp, #4]
 800e600:	6126      	str	r6, [r4, #16]
 800e602:	18f6      	adds	r6, r6, r3
 800e604:	6026      	str	r6, [r4, #0]
 800e606:	003e      	movs	r6, r7
 800e608:	6165      	str	r5, [r4, #20]
 800e60a:	1aed      	subs	r5, r5, r3
 800e60c:	60a5      	str	r5, [r4, #8]
 800e60e:	42be      	cmp	r6, r7
 800e610:	d900      	bls.n	800e614 <__ssputs_r+0x78>
 800e612:	003e      	movs	r6, r7
 800e614:	0032      	movs	r2, r6
 800e616:	9903      	ldr	r1, [sp, #12]
 800e618:	6820      	ldr	r0, [r4, #0]
 800e61a:	f000 fbb3 	bl	800ed84 <memmove>
 800e61e:	2000      	movs	r0, #0
 800e620:	68a3      	ldr	r3, [r4, #8]
 800e622:	1b9b      	subs	r3, r3, r6
 800e624:	60a3      	str	r3, [r4, #8]
 800e626:	6823      	ldr	r3, [r4, #0]
 800e628:	199b      	adds	r3, r3, r6
 800e62a:	6023      	str	r3, [r4, #0]
 800e62c:	b005      	add	sp, #20
 800e62e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e630:	002a      	movs	r2, r5
 800e632:	9802      	ldr	r0, [sp, #8]
 800e634:	f000 fc33 	bl	800ee9e <_realloc_r>
 800e638:	1e06      	subs	r6, r0, #0
 800e63a:	d1e0      	bne.n	800e5fe <__ssputs_r+0x62>
 800e63c:	6921      	ldr	r1, [r4, #16]
 800e63e:	9802      	ldr	r0, [sp, #8]
 800e640:	f7ff fb02 	bl	800dc48 <_free_r>
 800e644:	230c      	movs	r3, #12
 800e646:	2001      	movs	r0, #1
 800e648:	9a02      	ldr	r2, [sp, #8]
 800e64a:	4240      	negs	r0, r0
 800e64c:	6013      	str	r3, [r2, #0]
 800e64e:	89a2      	ldrh	r2, [r4, #12]
 800e650:	3334      	adds	r3, #52	@ 0x34
 800e652:	4313      	orrs	r3, r2
 800e654:	81a3      	strh	r3, [r4, #12]
 800e656:	e7e9      	b.n	800e62c <__ssputs_r+0x90>
 800e658:	fffffb7f 	.word	0xfffffb7f

0800e65c <_svfiprintf_r>:
 800e65c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e65e:	b0a1      	sub	sp, #132	@ 0x84
 800e660:	9003      	str	r0, [sp, #12]
 800e662:	001d      	movs	r5, r3
 800e664:	898b      	ldrh	r3, [r1, #12]
 800e666:	000f      	movs	r7, r1
 800e668:	0016      	movs	r6, r2
 800e66a:	061b      	lsls	r3, r3, #24
 800e66c:	d511      	bpl.n	800e692 <_svfiprintf_r+0x36>
 800e66e:	690b      	ldr	r3, [r1, #16]
 800e670:	2b00      	cmp	r3, #0
 800e672:	d10e      	bne.n	800e692 <_svfiprintf_r+0x36>
 800e674:	2140      	movs	r1, #64	@ 0x40
 800e676:	f7ff fb5d 	bl	800dd34 <_malloc_r>
 800e67a:	6038      	str	r0, [r7, #0]
 800e67c:	6138      	str	r0, [r7, #16]
 800e67e:	2800      	cmp	r0, #0
 800e680:	d105      	bne.n	800e68e <_svfiprintf_r+0x32>
 800e682:	230c      	movs	r3, #12
 800e684:	9a03      	ldr	r2, [sp, #12]
 800e686:	6013      	str	r3, [r2, #0]
 800e688:	2001      	movs	r0, #1
 800e68a:	4240      	negs	r0, r0
 800e68c:	e0cf      	b.n	800e82e <_svfiprintf_r+0x1d2>
 800e68e:	2340      	movs	r3, #64	@ 0x40
 800e690:	617b      	str	r3, [r7, #20]
 800e692:	2300      	movs	r3, #0
 800e694:	ac08      	add	r4, sp, #32
 800e696:	6163      	str	r3, [r4, #20]
 800e698:	3320      	adds	r3, #32
 800e69a:	7663      	strb	r3, [r4, #25]
 800e69c:	3310      	adds	r3, #16
 800e69e:	76a3      	strb	r3, [r4, #26]
 800e6a0:	9507      	str	r5, [sp, #28]
 800e6a2:	0035      	movs	r5, r6
 800e6a4:	782b      	ldrb	r3, [r5, #0]
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	d001      	beq.n	800e6ae <_svfiprintf_r+0x52>
 800e6aa:	2b25      	cmp	r3, #37	@ 0x25
 800e6ac:	d148      	bne.n	800e740 <_svfiprintf_r+0xe4>
 800e6ae:	1bab      	subs	r3, r5, r6
 800e6b0:	9305      	str	r3, [sp, #20]
 800e6b2:	42b5      	cmp	r5, r6
 800e6b4:	d00b      	beq.n	800e6ce <_svfiprintf_r+0x72>
 800e6b6:	0032      	movs	r2, r6
 800e6b8:	0039      	movs	r1, r7
 800e6ba:	9803      	ldr	r0, [sp, #12]
 800e6bc:	f7ff ff6e 	bl	800e59c <__ssputs_r>
 800e6c0:	3001      	adds	r0, #1
 800e6c2:	d100      	bne.n	800e6c6 <_svfiprintf_r+0x6a>
 800e6c4:	e0ae      	b.n	800e824 <_svfiprintf_r+0x1c8>
 800e6c6:	6963      	ldr	r3, [r4, #20]
 800e6c8:	9a05      	ldr	r2, [sp, #20]
 800e6ca:	189b      	adds	r3, r3, r2
 800e6cc:	6163      	str	r3, [r4, #20]
 800e6ce:	782b      	ldrb	r3, [r5, #0]
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d100      	bne.n	800e6d6 <_svfiprintf_r+0x7a>
 800e6d4:	e0a6      	b.n	800e824 <_svfiprintf_r+0x1c8>
 800e6d6:	2201      	movs	r2, #1
 800e6d8:	2300      	movs	r3, #0
 800e6da:	4252      	negs	r2, r2
 800e6dc:	6062      	str	r2, [r4, #4]
 800e6de:	a904      	add	r1, sp, #16
 800e6e0:	3254      	adds	r2, #84	@ 0x54
 800e6e2:	1852      	adds	r2, r2, r1
 800e6e4:	1c6e      	adds	r6, r5, #1
 800e6e6:	6023      	str	r3, [r4, #0]
 800e6e8:	60e3      	str	r3, [r4, #12]
 800e6ea:	60a3      	str	r3, [r4, #8]
 800e6ec:	7013      	strb	r3, [r2, #0]
 800e6ee:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e6f0:	4b54      	ldr	r3, [pc, #336]	@ (800e844 <_svfiprintf_r+0x1e8>)
 800e6f2:	2205      	movs	r2, #5
 800e6f4:	0018      	movs	r0, r3
 800e6f6:	7831      	ldrb	r1, [r6, #0]
 800e6f8:	9305      	str	r3, [sp, #20]
 800e6fa:	f7fe fc18 	bl	800cf2e <memchr>
 800e6fe:	1c75      	adds	r5, r6, #1
 800e700:	2800      	cmp	r0, #0
 800e702:	d11f      	bne.n	800e744 <_svfiprintf_r+0xe8>
 800e704:	6822      	ldr	r2, [r4, #0]
 800e706:	06d3      	lsls	r3, r2, #27
 800e708:	d504      	bpl.n	800e714 <_svfiprintf_r+0xb8>
 800e70a:	2353      	movs	r3, #83	@ 0x53
 800e70c:	a904      	add	r1, sp, #16
 800e70e:	185b      	adds	r3, r3, r1
 800e710:	2120      	movs	r1, #32
 800e712:	7019      	strb	r1, [r3, #0]
 800e714:	0713      	lsls	r3, r2, #28
 800e716:	d504      	bpl.n	800e722 <_svfiprintf_r+0xc6>
 800e718:	2353      	movs	r3, #83	@ 0x53
 800e71a:	a904      	add	r1, sp, #16
 800e71c:	185b      	adds	r3, r3, r1
 800e71e:	212b      	movs	r1, #43	@ 0x2b
 800e720:	7019      	strb	r1, [r3, #0]
 800e722:	7833      	ldrb	r3, [r6, #0]
 800e724:	2b2a      	cmp	r3, #42	@ 0x2a
 800e726:	d016      	beq.n	800e756 <_svfiprintf_r+0xfa>
 800e728:	0035      	movs	r5, r6
 800e72a:	2100      	movs	r1, #0
 800e72c:	200a      	movs	r0, #10
 800e72e:	68e3      	ldr	r3, [r4, #12]
 800e730:	782a      	ldrb	r2, [r5, #0]
 800e732:	1c6e      	adds	r6, r5, #1
 800e734:	3a30      	subs	r2, #48	@ 0x30
 800e736:	2a09      	cmp	r2, #9
 800e738:	d950      	bls.n	800e7dc <_svfiprintf_r+0x180>
 800e73a:	2900      	cmp	r1, #0
 800e73c:	d111      	bne.n	800e762 <_svfiprintf_r+0x106>
 800e73e:	e017      	b.n	800e770 <_svfiprintf_r+0x114>
 800e740:	3501      	adds	r5, #1
 800e742:	e7af      	b.n	800e6a4 <_svfiprintf_r+0x48>
 800e744:	9b05      	ldr	r3, [sp, #20]
 800e746:	6822      	ldr	r2, [r4, #0]
 800e748:	1ac0      	subs	r0, r0, r3
 800e74a:	2301      	movs	r3, #1
 800e74c:	4083      	lsls	r3, r0
 800e74e:	4313      	orrs	r3, r2
 800e750:	002e      	movs	r6, r5
 800e752:	6023      	str	r3, [r4, #0]
 800e754:	e7cc      	b.n	800e6f0 <_svfiprintf_r+0x94>
 800e756:	9b07      	ldr	r3, [sp, #28]
 800e758:	1d19      	adds	r1, r3, #4
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	9107      	str	r1, [sp, #28]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	db01      	blt.n	800e766 <_svfiprintf_r+0x10a>
 800e762:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e764:	e004      	b.n	800e770 <_svfiprintf_r+0x114>
 800e766:	425b      	negs	r3, r3
 800e768:	60e3      	str	r3, [r4, #12]
 800e76a:	2302      	movs	r3, #2
 800e76c:	4313      	orrs	r3, r2
 800e76e:	6023      	str	r3, [r4, #0]
 800e770:	782b      	ldrb	r3, [r5, #0]
 800e772:	2b2e      	cmp	r3, #46	@ 0x2e
 800e774:	d10c      	bne.n	800e790 <_svfiprintf_r+0x134>
 800e776:	786b      	ldrb	r3, [r5, #1]
 800e778:	2b2a      	cmp	r3, #42	@ 0x2a
 800e77a:	d134      	bne.n	800e7e6 <_svfiprintf_r+0x18a>
 800e77c:	9b07      	ldr	r3, [sp, #28]
 800e77e:	3502      	adds	r5, #2
 800e780:	1d1a      	adds	r2, r3, #4
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	9207      	str	r2, [sp, #28]
 800e786:	2b00      	cmp	r3, #0
 800e788:	da01      	bge.n	800e78e <_svfiprintf_r+0x132>
 800e78a:	2301      	movs	r3, #1
 800e78c:	425b      	negs	r3, r3
 800e78e:	9309      	str	r3, [sp, #36]	@ 0x24
 800e790:	4e2d      	ldr	r6, [pc, #180]	@ (800e848 <_svfiprintf_r+0x1ec>)
 800e792:	2203      	movs	r2, #3
 800e794:	0030      	movs	r0, r6
 800e796:	7829      	ldrb	r1, [r5, #0]
 800e798:	f7fe fbc9 	bl	800cf2e <memchr>
 800e79c:	2800      	cmp	r0, #0
 800e79e:	d006      	beq.n	800e7ae <_svfiprintf_r+0x152>
 800e7a0:	2340      	movs	r3, #64	@ 0x40
 800e7a2:	1b80      	subs	r0, r0, r6
 800e7a4:	4083      	lsls	r3, r0
 800e7a6:	6822      	ldr	r2, [r4, #0]
 800e7a8:	3501      	adds	r5, #1
 800e7aa:	4313      	orrs	r3, r2
 800e7ac:	6023      	str	r3, [r4, #0]
 800e7ae:	7829      	ldrb	r1, [r5, #0]
 800e7b0:	2206      	movs	r2, #6
 800e7b2:	4826      	ldr	r0, [pc, #152]	@ (800e84c <_svfiprintf_r+0x1f0>)
 800e7b4:	1c6e      	adds	r6, r5, #1
 800e7b6:	7621      	strb	r1, [r4, #24]
 800e7b8:	f7fe fbb9 	bl	800cf2e <memchr>
 800e7bc:	2800      	cmp	r0, #0
 800e7be:	d038      	beq.n	800e832 <_svfiprintf_r+0x1d6>
 800e7c0:	4b23      	ldr	r3, [pc, #140]	@ (800e850 <_svfiprintf_r+0x1f4>)
 800e7c2:	2b00      	cmp	r3, #0
 800e7c4:	d122      	bne.n	800e80c <_svfiprintf_r+0x1b0>
 800e7c6:	2207      	movs	r2, #7
 800e7c8:	9b07      	ldr	r3, [sp, #28]
 800e7ca:	3307      	adds	r3, #7
 800e7cc:	4393      	bics	r3, r2
 800e7ce:	3308      	adds	r3, #8
 800e7d0:	9307      	str	r3, [sp, #28]
 800e7d2:	6963      	ldr	r3, [r4, #20]
 800e7d4:	9a04      	ldr	r2, [sp, #16]
 800e7d6:	189b      	adds	r3, r3, r2
 800e7d8:	6163      	str	r3, [r4, #20]
 800e7da:	e762      	b.n	800e6a2 <_svfiprintf_r+0x46>
 800e7dc:	4343      	muls	r3, r0
 800e7de:	0035      	movs	r5, r6
 800e7e0:	2101      	movs	r1, #1
 800e7e2:	189b      	adds	r3, r3, r2
 800e7e4:	e7a4      	b.n	800e730 <_svfiprintf_r+0xd4>
 800e7e6:	2300      	movs	r3, #0
 800e7e8:	200a      	movs	r0, #10
 800e7ea:	0019      	movs	r1, r3
 800e7ec:	3501      	adds	r5, #1
 800e7ee:	6063      	str	r3, [r4, #4]
 800e7f0:	782a      	ldrb	r2, [r5, #0]
 800e7f2:	1c6e      	adds	r6, r5, #1
 800e7f4:	3a30      	subs	r2, #48	@ 0x30
 800e7f6:	2a09      	cmp	r2, #9
 800e7f8:	d903      	bls.n	800e802 <_svfiprintf_r+0x1a6>
 800e7fa:	2b00      	cmp	r3, #0
 800e7fc:	d0c8      	beq.n	800e790 <_svfiprintf_r+0x134>
 800e7fe:	9109      	str	r1, [sp, #36]	@ 0x24
 800e800:	e7c6      	b.n	800e790 <_svfiprintf_r+0x134>
 800e802:	4341      	muls	r1, r0
 800e804:	0035      	movs	r5, r6
 800e806:	2301      	movs	r3, #1
 800e808:	1889      	adds	r1, r1, r2
 800e80a:	e7f1      	b.n	800e7f0 <_svfiprintf_r+0x194>
 800e80c:	aa07      	add	r2, sp, #28
 800e80e:	9200      	str	r2, [sp, #0]
 800e810:	0021      	movs	r1, r4
 800e812:	003a      	movs	r2, r7
 800e814:	4b0f      	ldr	r3, [pc, #60]	@ (800e854 <_svfiprintf_r+0x1f8>)
 800e816:	9803      	ldr	r0, [sp, #12]
 800e818:	f7fd fdb8 	bl	800c38c <_printf_float>
 800e81c:	9004      	str	r0, [sp, #16]
 800e81e:	9b04      	ldr	r3, [sp, #16]
 800e820:	3301      	adds	r3, #1
 800e822:	d1d6      	bne.n	800e7d2 <_svfiprintf_r+0x176>
 800e824:	89bb      	ldrh	r3, [r7, #12]
 800e826:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800e828:	065b      	lsls	r3, r3, #25
 800e82a:	d500      	bpl.n	800e82e <_svfiprintf_r+0x1d2>
 800e82c:	e72c      	b.n	800e688 <_svfiprintf_r+0x2c>
 800e82e:	b021      	add	sp, #132	@ 0x84
 800e830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e832:	aa07      	add	r2, sp, #28
 800e834:	9200      	str	r2, [sp, #0]
 800e836:	0021      	movs	r1, r4
 800e838:	003a      	movs	r2, r7
 800e83a:	4b06      	ldr	r3, [pc, #24]	@ (800e854 <_svfiprintf_r+0x1f8>)
 800e83c:	9803      	ldr	r0, [sp, #12]
 800e83e:	f7fe f853 	bl	800c8e8 <_printf_i>
 800e842:	e7eb      	b.n	800e81c <_svfiprintf_r+0x1c0>
 800e844:	0800fda0 	.word	0x0800fda0
 800e848:	0800fda6 	.word	0x0800fda6
 800e84c:	0800fdaa 	.word	0x0800fdaa
 800e850:	0800c38d 	.word	0x0800c38d
 800e854:	0800e59d 	.word	0x0800e59d

0800e858 <__sfputc_r>:
 800e858:	6893      	ldr	r3, [r2, #8]
 800e85a:	b510      	push	{r4, lr}
 800e85c:	3b01      	subs	r3, #1
 800e85e:	6093      	str	r3, [r2, #8]
 800e860:	2b00      	cmp	r3, #0
 800e862:	da04      	bge.n	800e86e <__sfputc_r+0x16>
 800e864:	6994      	ldr	r4, [r2, #24]
 800e866:	42a3      	cmp	r3, r4
 800e868:	db07      	blt.n	800e87a <__sfputc_r+0x22>
 800e86a:	290a      	cmp	r1, #10
 800e86c:	d005      	beq.n	800e87a <__sfputc_r+0x22>
 800e86e:	6813      	ldr	r3, [r2, #0]
 800e870:	1c58      	adds	r0, r3, #1
 800e872:	6010      	str	r0, [r2, #0]
 800e874:	7019      	strb	r1, [r3, #0]
 800e876:	0008      	movs	r0, r1
 800e878:	bd10      	pop	{r4, pc}
 800e87a:	f000 f9e2 	bl	800ec42 <__swbuf_r>
 800e87e:	0001      	movs	r1, r0
 800e880:	e7f9      	b.n	800e876 <__sfputc_r+0x1e>

0800e882 <__sfputs_r>:
 800e882:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e884:	0006      	movs	r6, r0
 800e886:	000f      	movs	r7, r1
 800e888:	0014      	movs	r4, r2
 800e88a:	18d5      	adds	r5, r2, r3
 800e88c:	42ac      	cmp	r4, r5
 800e88e:	d101      	bne.n	800e894 <__sfputs_r+0x12>
 800e890:	2000      	movs	r0, #0
 800e892:	e007      	b.n	800e8a4 <__sfputs_r+0x22>
 800e894:	7821      	ldrb	r1, [r4, #0]
 800e896:	003a      	movs	r2, r7
 800e898:	0030      	movs	r0, r6
 800e89a:	f7ff ffdd 	bl	800e858 <__sfputc_r>
 800e89e:	3401      	adds	r4, #1
 800e8a0:	1c43      	adds	r3, r0, #1
 800e8a2:	d1f3      	bne.n	800e88c <__sfputs_r+0xa>
 800e8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800e8a8 <_vfiprintf_r>:
 800e8a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8aa:	b0a1      	sub	sp, #132	@ 0x84
 800e8ac:	000f      	movs	r7, r1
 800e8ae:	0015      	movs	r5, r2
 800e8b0:	001e      	movs	r6, r3
 800e8b2:	9003      	str	r0, [sp, #12]
 800e8b4:	2800      	cmp	r0, #0
 800e8b6:	d004      	beq.n	800e8c2 <_vfiprintf_r+0x1a>
 800e8b8:	6a03      	ldr	r3, [r0, #32]
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d101      	bne.n	800e8c2 <_vfiprintf_r+0x1a>
 800e8be:	f7fe f9b1 	bl	800cc24 <__sinit>
 800e8c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8c4:	07db      	lsls	r3, r3, #31
 800e8c6:	d405      	bmi.n	800e8d4 <_vfiprintf_r+0x2c>
 800e8c8:	89bb      	ldrh	r3, [r7, #12]
 800e8ca:	059b      	lsls	r3, r3, #22
 800e8cc:	d402      	bmi.n	800e8d4 <_vfiprintf_r+0x2c>
 800e8ce:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e8d0:	f7fe fb2b 	bl	800cf2a <__retarget_lock_acquire_recursive>
 800e8d4:	89bb      	ldrh	r3, [r7, #12]
 800e8d6:	071b      	lsls	r3, r3, #28
 800e8d8:	d502      	bpl.n	800e8e0 <_vfiprintf_r+0x38>
 800e8da:	693b      	ldr	r3, [r7, #16]
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d113      	bne.n	800e908 <_vfiprintf_r+0x60>
 800e8e0:	0039      	movs	r1, r7
 800e8e2:	9803      	ldr	r0, [sp, #12]
 800e8e4:	f000 f9f0 	bl	800ecc8 <__swsetup_r>
 800e8e8:	2800      	cmp	r0, #0
 800e8ea:	d00d      	beq.n	800e908 <_vfiprintf_r+0x60>
 800e8ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800e8ee:	07db      	lsls	r3, r3, #31
 800e8f0:	d503      	bpl.n	800e8fa <_vfiprintf_r+0x52>
 800e8f2:	2001      	movs	r0, #1
 800e8f4:	4240      	negs	r0, r0
 800e8f6:	b021      	add	sp, #132	@ 0x84
 800e8f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e8fa:	89bb      	ldrh	r3, [r7, #12]
 800e8fc:	059b      	lsls	r3, r3, #22
 800e8fe:	d4f8      	bmi.n	800e8f2 <_vfiprintf_r+0x4a>
 800e900:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800e902:	f7fe fb13 	bl	800cf2c <__retarget_lock_release_recursive>
 800e906:	e7f4      	b.n	800e8f2 <_vfiprintf_r+0x4a>
 800e908:	2300      	movs	r3, #0
 800e90a:	ac08      	add	r4, sp, #32
 800e90c:	6163      	str	r3, [r4, #20]
 800e90e:	3320      	adds	r3, #32
 800e910:	7663      	strb	r3, [r4, #25]
 800e912:	3310      	adds	r3, #16
 800e914:	76a3      	strb	r3, [r4, #26]
 800e916:	9607      	str	r6, [sp, #28]
 800e918:	002e      	movs	r6, r5
 800e91a:	7833      	ldrb	r3, [r6, #0]
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d001      	beq.n	800e924 <_vfiprintf_r+0x7c>
 800e920:	2b25      	cmp	r3, #37	@ 0x25
 800e922:	d148      	bne.n	800e9b6 <_vfiprintf_r+0x10e>
 800e924:	1b73      	subs	r3, r6, r5
 800e926:	9305      	str	r3, [sp, #20]
 800e928:	42ae      	cmp	r6, r5
 800e92a:	d00b      	beq.n	800e944 <_vfiprintf_r+0x9c>
 800e92c:	002a      	movs	r2, r5
 800e92e:	0039      	movs	r1, r7
 800e930:	9803      	ldr	r0, [sp, #12]
 800e932:	f7ff ffa6 	bl	800e882 <__sfputs_r>
 800e936:	3001      	adds	r0, #1
 800e938:	d100      	bne.n	800e93c <_vfiprintf_r+0x94>
 800e93a:	e0ae      	b.n	800ea9a <_vfiprintf_r+0x1f2>
 800e93c:	6963      	ldr	r3, [r4, #20]
 800e93e:	9a05      	ldr	r2, [sp, #20]
 800e940:	189b      	adds	r3, r3, r2
 800e942:	6163      	str	r3, [r4, #20]
 800e944:	7833      	ldrb	r3, [r6, #0]
 800e946:	2b00      	cmp	r3, #0
 800e948:	d100      	bne.n	800e94c <_vfiprintf_r+0xa4>
 800e94a:	e0a6      	b.n	800ea9a <_vfiprintf_r+0x1f2>
 800e94c:	2201      	movs	r2, #1
 800e94e:	2300      	movs	r3, #0
 800e950:	4252      	negs	r2, r2
 800e952:	6062      	str	r2, [r4, #4]
 800e954:	a904      	add	r1, sp, #16
 800e956:	3254      	adds	r2, #84	@ 0x54
 800e958:	1852      	adds	r2, r2, r1
 800e95a:	1c75      	adds	r5, r6, #1
 800e95c:	6023      	str	r3, [r4, #0]
 800e95e:	60e3      	str	r3, [r4, #12]
 800e960:	60a3      	str	r3, [r4, #8]
 800e962:	7013      	strb	r3, [r2, #0]
 800e964:	65a3      	str	r3, [r4, #88]	@ 0x58
 800e966:	4b59      	ldr	r3, [pc, #356]	@ (800eacc <_vfiprintf_r+0x224>)
 800e968:	2205      	movs	r2, #5
 800e96a:	0018      	movs	r0, r3
 800e96c:	7829      	ldrb	r1, [r5, #0]
 800e96e:	9305      	str	r3, [sp, #20]
 800e970:	f7fe fadd 	bl	800cf2e <memchr>
 800e974:	1c6e      	adds	r6, r5, #1
 800e976:	2800      	cmp	r0, #0
 800e978:	d11f      	bne.n	800e9ba <_vfiprintf_r+0x112>
 800e97a:	6822      	ldr	r2, [r4, #0]
 800e97c:	06d3      	lsls	r3, r2, #27
 800e97e:	d504      	bpl.n	800e98a <_vfiprintf_r+0xe2>
 800e980:	2353      	movs	r3, #83	@ 0x53
 800e982:	a904      	add	r1, sp, #16
 800e984:	185b      	adds	r3, r3, r1
 800e986:	2120      	movs	r1, #32
 800e988:	7019      	strb	r1, [r3, #0]
 800e98a:	0713      	lsls	r3, r2, #28
 800e98c:	d504      	bpl.n	800e998 <_vfiprintf_r+0xf0>
 800e98e:	2353      	movs	r3, #83	@ 0x53
 800e990:	a904      	add	r1, sp, #16
 800e992:	185b      	adds	r3, r3, r1
 800e994:	212b      	movs	r1, #43	@ 0x2b
 800e996:	7019      	strb	r1, [r3, #0]
 800e998:	782b      	ldrb	r3, [r5, #0]
 800e99a:	2b2a      	cmp	r3, #42	@ 0x2a
 800e99c:	d016      	beq.n	800e9cc <_vfiprintf_r+0x124>
 800e99e:	002e      	movs	r6, r5
 800e9a0:	2100      	movs	r1, #0
 800e9a2:	200a      	movs	r0, #10
 800e9a4:	68e3      	ldr	r3, [r4, #12]
 800e9a6:	7832      	ldrb	r2, [r6, #0]
 800e9a8:	1c75      	adds	r5, r6, #1
 800e9aa:	3a30      	subs	r2, #48	@ 0x30
 800e9ac:	2a09      	cmp	r2, #9
 800e9ae:	d950      	bls.n	800ea52 <_vfiprintf_r+0x1aa>
 800e9b0:	2900      	cmp	r1, #0
 800e9b2:	d111      	bne.n	800e9d8 <_vfiprintf_r+0x130>
 800e9b4:	e017      	b.n	800e9e6 <_vfiprintf_r+0x13e>
 800e9b6:	3601      	adds	r6, #1
 800e9b8:	e7af      	b.n	800e91a <_vfiprintf_r+0x72>
 800e9ba:	9b05      	ldr	r3, [sp, #20]
 800e9bc:	6822      	ldr	r2, [r4, #0]
 800e9be:	1ac0      	subs	r0, r0, r3
 800e9c0:	2301      	movs	r3, #1
 800e9c2:	4083      	lsls	r3, r0
 800e9c4:	4313      	orrs	r3, r2
 800e9c6:	0035      	movs	r5, r6
 800e9c8:	6023      	str	r3, [r4, #0]
 800e9ca:	e7cc      	b.n	800e966 <_vfiprintf_r+0xbe>
 800e9cc:	9b07      	ldr	r3, [sp, #28]
 800e9ce:	1d19      	adds	r1, r3, #4
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	9107      	str	r1, [sp, #28]
 800e9d4:	2b00      	cmp	r3, #0
 800e9d6:	db01      	blt.n	800e9dc <_vfiprintf_r+0x134>
 800e9d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e9da:	e004      	b.n	800e9e6 <_vfiprintf_r+0x13e>
 800e9dc:	425b      	negs	r3, r3
 800e9de:	60e3      	str	r3, [r4, #12]
 800e9e0:	2302      	movs	r3, #2
 800e9e2:	4313      	orrs	r3, r2
 800e9e4:	6023      	str	r3, [r4, #0]
 800e9e6:	7833      	ldrb	r3, [r6, #0]
 800e9e8:	2b2e      	cmp	r3, #46	@ 0x2e
 800e9ea:	d10c      	bne.n	800ea06 <_vfiprintf_r+0x15e>
 800e9ec:	7873      	ldrb	r3, [r6, #1]
 800e9ee:	2b2a      	cmp	r3, #42	@ 0x2a
 800e9f0:	d134      	bne.n	800ea5c <_vfiprintf_r+0x1b4>
 800e9f2:	9b07      	ldr	r3, [sp, #28]
 800e9f4:	3602      	adds	r6, #2
 800e9f6:	1d1a      	adds	r2, r3, #4
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	9207      	str	r2, [sp, #28]
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	da01      	bge.n	800ea04 <_vfiprintf_r+0x15c>
 800ea00:	2301      	movs	r3, #1
 800ea02:	425b      	negs	r3, r3
 800ea04:	9309      	str	r3, [sp, #36]	@ 0x24
 800ea06:	4d32      	ldr	r5, [pc, #200]	@ (800ead0 <_vfiprintf_r+0x228>)
 800ea08:	2203      	movs	r2, #3
 800ea0a:	0028      	movs	r0, r5
 800ea0c:	7831      	ldrb	r1, [r6, #0]
 800ea0e:	f7fe fa8e 	bl	800cf2e <memchr>
 800ea12:	2800      	cmp	r0, #0
 800ea14:	d006      	beq.n	800ea24 <_vfiprintf_r+0x17c>
 800ea16:	2340      	movs	r3, #64	@ 0x40
 800ea18:	1b40      	subs	r0, r0, r5
 800ea1a:	4083      	lsls	r3, r0
 800ea1c:	6822      	ldr	r2, [r4, #0]
 800ea1e:	3601      	adds	r6, #1
 800ea20:	4313      	orrs	r3, r2
 800ea22:	6023      	str	r3, [r4, #0]
 800ea24:	7831      	ldrb	r1, [r6, #0]
 800ea26:	2206      	movs	r2, #6
 800ea28:	482a      	ldr	r0, [pc, #168]	@ (800ead4 <_vfiprintf_r+0x22c>)
 800ea2a:	1c75      	adds	r5, r6, #1
 800ea2c:	7621      	strb	r1, [r4, #24]
 800ea2e:	f7fe fa7e 	bl	800cf2e <memchr>
 800ea32:	2800      	cmp	r0, #0
 800ea34:	d040      	beq.n	800eab8 <_vfiprintf_r+0x210>
 800ea36:	4b28      	ldr	r3, [pc, #160]	@ (800ead8 <_vfiprintf_r+0x230>)
 800ea38:	2b00      	cmp	r3, #0
 800ea3a:	d122      	bne.n	800ea82 <_vfiprintf_r+0x1da>
 800ea3c:	2207      	movs	r2, #7
 800ea3e:	9b07      	ldr	r3, [sp, #28]
 800ea40:	3307      	adds	r3, #7
 800ea42:	4393      	bics	r3, r2
 800ea44:	3308      	adds	r3, #8
 800ea46:	9307      	str	r3, [sp, #28]
 800ea48:	6963      	ldr	r3, [r4, #20]
 800ea4a:	9a04      	ldr	r2, [sp, #16]
 800ea4c:	189b      	adds	r3, r3, r2
 800ea4e:	6163      	str	r3, [r4, #20]
 800ea50:	e762      	b.n	800e918 <_vfiprintf_r+0x70>
 800ea52:	4343      	muls	r3, r0
 800ea54:	002e      	movs	r6, r5
 800ea56:	2101      	movs	r1, #1
 800ea58:	189b      	adds	r3, r3, r2
 800ea5a:	e7a4      	b.n	800e9a6 <_vfiprintf_r+0xfe>
 800ea5c:	2300      	movs	r3, #0
 800ea5e:	200a      	movs	r0, #10
 800ea60:	0019      	movs	r1, r3
 800ea62:	3601      	adds	r6, #1
 800ea64:	6063      	str	r3, [r4, #4]
 800ea66:	7832      	ldrb	r2, [r6, #0]
 800ea68:	1c75      	adds	r5, r6, #1
 800ea6a:	3a30      	subs	r2, #48	@ 0x30
 800ea6c:	2a09      	cmp	r2, #9
 800ea6e:	d903      	bls.n	800ea78 <_vfiprintf_r+0x1d0>
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d0c8      	beq.n	800ea06 <_vfiprintf_r+0x15e>
 800ea74:	9109      	str	r1, [sp, #36]	@ 0x24
 800ea76:	e7c6      	b.n	800ea06 <_vfiprintf_r+0x15e>
 800ea78:	4341      	muls	r1, r0
 800ea7a:	002e      	movs	r6, r5
 800ea7c:	2301      	movs	r3, #1
 800ea7e:	1889      	adds	r1, r1, r2
 800ea80:	e7f1      	b.n	800ea66 <_vfiprintf_r+0x1be>
 800ea82:	aa07      	add	r2, sp, #28
 800ea84:	9200      	str	r2, [sp, #0]
 800ea86:	0021      	movs	r1, r4
 800ea88:	003a      	movs	r2, r7
 800ea8a:	4b14      	ldr	r3, [pc, #80]	@ (800eadc <_vfiprintf_r+0x234>)
 800ea8c:	9803      	ldr	r0, [sp, #12]
 800ea8e:	f7fd fc7d 	bl	800c38c <_printf_float>
 800ea92:	9004      	str	r0, [sp, #16]
 800ea94:	9b04      	ldr	r3, [sp, #16]
 800ea96:	3301      	adds	r3, #1
 800ea98:	d1d6      	bne.n	800ea48 <_vfiprintf_r+0x1a0>
 800ea9a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800ea9c:	07db      	lsls	r3, r3, #31
 800ea9e:	d405      	bmi.n	800eaac <_vfiprintf_r+0x204>
 800eaa0:	89bb      	ldrh	r3, [r7, #12]
 800eaa2:	059b      	lsls	r3, r3, #22
 800eaa4:	d402      	bmi.n	800eaac <_vfiprintf_r+0x204>
 800eaa6:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 800eaa8:	f7fe fa40 	bl	800cf2c <__retarget_lock_release_recursive>
 800eaac:	89bb      	ldrh	r3, [r7, #12]
 800eaae:	065b      	lsls	r3, r3, #25
 800eab0:	d500      	bpl.n	800eab4 <_vfiprintf_r+0x20c>
 800eab2:	e71e      	b.n	800e8f2 <_vfiprintf_r+0x4a>
 800eab4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 800eab6:	e71e      	b.n	800e8f6 <_vfiprintf_r+0x4e>
 800eab8:	aa07      	add	r2, sp, #28
 800eaba:	9200      	str	r2, [sp, #0]
 800eabc:	0021      	movs	r1, r4
 800eabe:	003a      	movs	r2, r7
 800eac0:	4b06      	ldr	r3, [pc, #24]	@ (800eadc <_vfiprintf_r+0x234>)
 800eac2:	9803      	ldr	r0, [sp, #12]
 800eac4:	f7fd ff10 	bl	800c8e8 <_printf_i>
 800eac8:	e7e3      	b.n	800ea92 <_vfiprintf_r+0x1ea>
 800eaca:	46c0      	nop			@ (mov r8, r8)
 800eacc:	0800fda0 	.word	0x0800fda0
 800ead0:	0800fda6 	.word	0x0800fda6
 800ead4:	0800fdaa 	.word	0x0800fdaa
 800ead8:	0800c38d 	.word	0x0800c38d
 800eadc:	0800e883 	.word	0x0800e883

0800eae0 <__sflush_r>:
 800eae0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eae2:	220c      	movs	r2, #12
 800eae4:	5e8b      	ldrsh	r3, [r1, r2]
 800eae6:	0005      	movs	r5, r0
 800eae8:	000c      	movs	r4, r1
 800eaea:	071a      	lsls	r2, r3, #28
 800eaec:	d456      	bmi.n	800eb9c <__sflush_r+0xbc>
 800eaee:	684a      	ldr	r2, [r1, #4]
 800eaf0:	2a00      	cmp	r2, #0
 800eaf2:	dc02      	bgt.n	800eafa <__sflush_r+0x1a>
 800eaf4:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 800eaf6:	2a00      	cmp	r2, #0
 800eaf8:	dd4e      	ble.n	800eb98 <__sflush_r+0xb8>
 800eafa:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800eafc:	2f00      	cmp	r7, #0
 800eafe:	d04b      	beq.n	800eb98 <__sflush_r+0xb8>
 800eb00:	2200      	movs	r2, #0
 800eb02:	2080      	movs	r0, #128	@ 0x80
 800eb04:	682e      	ldr	r6, [r5, #0]
 800eb06:	602a      	str	r2, [r5, #0]
 800eb08:	001a      	movs	r2, r3
 800eb0a:	0140      	lsls	r0, r0, #5
 800eb0c:	6a21      	ldr	r1, [r4, #32]
 800eb0e:	4002      	ands	r2, r0
 800eb10:	4203      	tst	r3, r0
 800eb12:	d033      	beq.n	800eb7c <__sflush_r+0x9c>
 800eb14:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800eb16:	89a3      	ldrh	r3, [r4, #12]
 800eb18:	075b      	lsls	r3, r3, #29
 800eb1a:	d506      	bpl.n	800eb2a <__sflush_r+0x4a>
 800eb1c:	6863      	ldr	r3, [r4, #4]
 800eb1e:	1ad2      	subs	r2, r2, r3
 800eb20:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d001      	beq.n	800eb2a <__sflush_r+0x4a>
 800eb26:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800eb28:	1ad2      	subs	r2, r2, r3
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	0028      	movs	r0, r5
 800eb2e:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800eb30:	6a21      	ldr	r1, [r4, #32]
 800eb32:	47b8      	blx	r7
 800eb34:	89a2      	ldrh	r2, [r4, #12]
 800eb36:	1c43      	adds	r3, r0, #1
 800eb38:	d106      	bne.n	800eb48 <__sflush_r+0x68>
 800eb3a:	6829      	ldr	r1, [r5, #0]
 800eb3c:	291d      	cmp	r1, #29
 800eb3e:	d846      	bhi.n	800ebce <__sflush_r+0xee>
 800eb40:	4b29      	ldr	r3, [pc, #164]	@ (800ebe8 <__sflush_r+0x108>)
 800eb42:	410b      	asrs	r3, r1
 800eb44:	07db      	lsls	r3, r3, #31
 800eb46:	d442      	bmi.n	800ebce <__sflush_r+0xee>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	6063      	str	r3, [r4, #4]
 800eb4c:	6923      	ldr	r3, [r4, #16]
 800eb4e:	6023      	str	r3, [r4, #0]
 800eb50:	04d2      	lsls	r2, r2, #19
 800eb52:	d505      	bpl.n	800eb60 <__sflush_r+0x80>
 800eb54:	1c43      	adds	r3, r0, #1
 800eb56:	d102      	bne.n	800eb5e <__sflush_r+0x7e>
 800eb58:	682b      	ldr	r3, [r5, #0]
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d100      	bne.n	800eb60 <__sflush_r+0x80>
 800eb5e:	6560      	str	r0, [r4, #84]	@ 0x54
 800eb60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800eb62:	602e      	str	r6, [r5, #0]
 800eb64:	2900      	cmp	r1, #0
 800eb66:	d017      	beq.n	800eb98 <__sflush_r+0xb8>
 800eb68:	0023      	movs	r3, r4
 800eb6a:	3344      	adds	r3, #68	@ 0x44
 800eb6c:	4299      	cmp	r1, r3
 800eb6e:	d002      	beq.n	800eb76 <__sflush_r+0x96>
 800eb70:	0028      	movs	r0, r5
 800eb72:	f7ff f869 	bl	800dc48 <_free_r>
 800eb76:	2300      	movs	r3, #0
 800eb78:	6363      	str	r3, [r4, #52]	@ 0x34
 800eb7a:	e00d      	b.n	800eb98 <__sflush_r+0xb8>
 800eb7c:	2301      	movs	r3, #1
 800eb7e:	0028      	movs	r0, r5
 800eb80:	47b8      	blx	r7
 800eb82:	0002      	movs	r2, r0
 800eb84:	1c43      	adds	r3, r0, #1
 800eb86:	d1c6      	bne.n	800eb16 <__sflush_r+0x36>
 800eb88:	682b      	ldr	r3, [r5, #0]
 800eb8a:	2b00      	cmp	r3, #0
 800eb8c:	d0c3      	beq.n	800eb16 <__sflush_r+0x36>
 800eb8e:	2b1d      	cmp	r3, #29
 800eb90:	d001      	beq.n	800eb96 <__sflush_r+0xb6>
 800eb92:	2b16      	cmp	r3, #22
 800eb94:	d11a      	bne.n	800ebcc <__sflush_r+0xec>
 800eb96:	602e      	str	r6, [r5, #0]
 800eb98:	2000      	movs	r0, #0
 800eb9a:	e01e      	b.n	800ebda <__sflush_r+0xfa>
 800eb9c:	690e      	ldr	r6, [r1, #16]
 800eb9e:	2e00      	cmp	r6, #0
 800eba0:	d0fa      	beq.n	800eb98 <__sflush_r+0xb8>
 800eba2:	680f      	ldr	r7, [r1, #0]
 800eba4:	600e      	str	r6, [r1, #0]
 800eba6:	1bba      	subs	r2, r7, r6
 800eba8:	9201      	str	r2, [sp, #4]
 800ebaa:	2200      	movs	r2, #0
 800ebac:	079b      	lsls	r3, r3, #30
 800ebae:	d100      	bne.n	800ebb2 <__sflush_r+0xd2>
 800ebb0:	694a      	ldr	r2, [r1, #20]
 800ebb2:	60a2      	str	r2, [r4, #8]
 800ebb4:	9b01      	ldr	r3, [sp, #4]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	ddee      	ble.n	800eb98 <__sflush_r+0xb8>
 800ebba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800ebbc:	0032      	movs	r2, r6
 800ebbe:	001f      	movs	r7, r3
 800ebc0:	0028      	movs	r0, r5
 800ebc2:	9b01      	ldr	r3, [sp, #4]
 800ebc4:	6a21      	ldr	r1, [r4, #32]
 800ebc6:	47b8      	blx	r7
 800ebc8:	2800      	cmp	r0, #0
 800ebca:	dc07      	bgt.n	800ebdc <__sflush_r+0xfc>
 800ebcc:	89a2      	ldrh	r2, [r4, #12]
 800ebce:	2340      	movs	r3, #64	@ 0x40
 800ebd0:	2001      	movs	r0, #1
 800ebd2:	4313      	orrs	r3, r2
 800ebd4:	b21b      	sxth	r3, r3
 800ebd6:	81a3      	strh	r3, [r4, #12]
 800ebd8:	4240      	negs	r0, r0
 800ebda:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ebdc:	9b01      	ldr	r3, [sp, #4]
 800ebde:	1836      	adds	r6, r6, r0
 800ebe0:	1a1b      	subs	r3, r3, r0
 800ebe2:	9301      	str	r3, [sp, #4]
 800ebe4:	e7e6      	b.n	800ebb4 <__sflush_r+0xd4>
 800ebe6:	46c0      	nop			@ (mov r8, r8)
 800ebe8:	dfbffffe 	.word	0xdfbffffe

0800ebec <_fflush_r>:
 800ebec:	690b      	ldr	r3, [r1, #16]
 800ebee:	b570      	push	{r4, r5, r6, lr}
 800ebf0:	0005      	movs	r5, r0
 800ebf2:	000c      	movs	r4, r1
 800ebf4:	2b00      	cmp	r3, #0
 800ebf6:	d102      	bne.n	800ebfe <_fflush_r+0x12>
 800ebf8:	2500      	movs	r5, #0
 800ebfa:	0028      	movs	r0, r5
 800ebfc:	bd70      	pop	{r4, r5, r6, pc}
 800ebfe:	2800      	cmp	r0, #0
 800ec00:	d004      	beq.n	800ec0c <_fflush_r+0x20>
 800ec02:	6a03      	ldr	r3, [r0, #32]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <_fflush_r+0x20>
 800ec08:	f7fe f80c 	bl	800cc24 <__sinit>
 800ec0c:	220c      	movs	r2, #12
 800ec0e:	5ea3      	ldrsh	r3, [r4, r2]
 800ec10:	2b00      	cmp	r3, #0
 800ec12:	d0f1      	beq.n	800ebf8 <_fflush_r+0xc>
 800ec14:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ec16:	07d2      	lsls	r2, r2, #31
 800ec18:	d404      	bmi.n	800ec24 <_fflush_r+0x38>
 800ec1a:	059b      	lsls	r3, r3, #22
 800ec1c:	d402      	bmi.n	800ec24 <_fflush_r+0x38>
 800ec1e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec20:	f7fe f983 	bl	800cf2a <__retarget_lock_acquire_recursive>
 800ec24:	0028      	movs	r0, r5
 800ec26:	0021      	movs	r1, r4
 800ec28:	f7ff ff5a 	bl	800eae0 <__sflush_r>
 800ec2c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ec2e:	0005      	movs	r5, r0
 800ec30:	07db      	lsls	r3, r3, #31
 800ec32:	d4e2      	bmi.n	800ebfa <_fflush_r+0xe>
 800ec34:	89a3      	ldrh	r3, [r4, #12]
 800ec36:	059b      	lsls	r3, r3, #22
 800ec38:	d4df      	bmi.n	800ebfa <_fflush_r+0xe>
 800ec3a:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ec3c:	f7fe f976 	bl	800cf2c <__retarget_lock_release_recursive>
 800ec40:	e7db      	b.n	800ebfa <_fflush_r+0xe>

0800ec42 <__swbuf_r>:
 800ec42:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec44:	0006      	movs	r6, r0
 800ec46:	000d      	movs	r5, r1
 800ec48:	0014      	movs	r4, r2
 800ec4a:	2800      	cmp	r0, #0
 800ec4c:	d004      	beq.n	800ec58 <__swbuf_r+0x16>
 800ec4e:	6a03      	ldr	r3, [r0, #32]
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	d101      	bne.n	800ec58 <__swbuf_r+0x16>
 800ec54:	f7fd ffe6 	bl	800cc24 <__sinit>
 800ec58:	69a3      	ldr	r3, [r4, #24]
 800ec5a:	60a3      	str	r3, [r4, #8]
 800ec5c:	89a3      	ldrh	r3, [r4, #12]
 800ec5e:	071b      	lsls	r3, r3, #28
 800ec60:	d502      	bpl.n	800ec68 <__swbuf_r+0x26>
 800ec62:	6923      	ldr	r3, [r4, #16]
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	d109      	bne.n	800ec7c <__swbuf_r+0x3a>
 800ec68:	0021      	movs	r1, r4
 800ec6a:	0030      	movs	r0, r6
 800ec6c:	f000 f82c 	bl	800ecc8 <__swsetup_r>
 800ec70:	2800      	cmp	r0, #0
 800ec72:	d003      	beq.n	800ec7c <__swbuf_r+0x3a>
 800ec74:	2501      	movs	r5, #1
 800ec76:	426d      	negs	r5, r5
 800ec78:	0028      	movs	r0, r5
 800ec7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ec7c:	6923      	ldr	r3, [r4, #16]
 800ec7e:	6820      	ldr	r0, [r4, #0]
 800ec80:	b2ef      	uxtb	r7, r5
 800ec82:	1ac0      	subs	r0, r0, r3
 800ec84:	6963      	ldr	r3, [r4, #20]
 800ec86:	b2ed      	uxtb	r5, r5
 800ec88:	4283      	cmp	r3, r0
 800ec8a:	dc05      	bgt.n	800ec98 <__swbuf_r+0x56>
 800ec8c:	0021      	movs	r1, r4
 800ec8e:	0030      	movs	r0, r6
 800ec90:	f7ff ffac 	bl	800ebec <_fflush_r>
 800ec94:	2800      	cmp	r0, #0
 800ec96:	d1ed      	bne.n	800ec74 <__swbuf_r+0x32>
 800ec98:	68a3      	ldr	r3, [r4, #8]
 800ec9a:	3001      	adds	r0, #1
 800ec9c:	3b01      	subs	r3, #1
 800ec9e:	60a3      	str	r3, [r4, #8]
 800eca0:	6823      	ldr	r3, [r4, #0]
 800eca2:	1c5a      	adds	r2, r3, #1
 800eca4:	6022      	str	r2, [r4, #0]
 800eca6:	701f      	strb	r7, [r3, #0]
 800eca8:	6963      	ldr	r3, [r4, #20]
 800ecaa:	4283      	cmp	r3, r0
 800ecac:	d004      	beq.n	800ecb8 <__swbuf_r+0x76>
 800ecae:	89a3      	ldrh	r3, [r4, #12]
 800ecb0:	07db      	lsls	r3, r3, #31
 800ecb2:	d5e1      	bpl.n	800ec78 <__swbuf_r+0x36>
 800ecb4:	2d0a      	cmp	r5, #10
 800ecb6:	d1df      	bne.n	800ec78 <__swbuf_r+0x36>
 800ecb8:	0021      	movs	r1, r4
 800ecba:	0030      	movs	r0, r6
 800ecbc:	f7ff ff96 	bl	800ebec <_fflush_r>
 800ecc0:	2800      	cmp	r0, #0
 800ecc2:	d0d9      	beq.n	800ec78 <__swbuf_r+0x36>
 800ecc4:	e7d6      	b.n	800ec74 <__swbuf_r+0x32>
	...

0800ecc8 <__swsetup_r>:
 800ecc8:	4b2d      	ldr	r3, [pc, #180]	@ (800ed80 <__swsetup_r+0xb8>)
 800ecca:	b570      	push	{r4, r5, r6, lr}
 800eccc:	0005      	movs	r5, r0
 800ecce:	6818      	ldr	r0, [r3, #0]
 800ecd0:	000c      	movs	r4, r1
 800ecd2:	2800      	cmp	r0, #0
 800ecd4:	d004      	beq.n	800ece0 <__swsetup_r+0x18>
 800ecd6:	6a03      	ldr	r3, [r0, #32]
 800ecd8:	2b00      	cmp	r3, #0
 800ecda:	d101      	bne.n	800ece0 <__swsetup_r+0x18>
 800ecdc:	f7fd ffa2 	bl	800cc24 <__sinit>
 800ece0:	230c      	movs	r3, #12
 800ece2:	5ee2      	ldrsh	r2, [r4, r3]
 800ece4:	0713      	lsls	r3, r2, #28
 800ece6:	d423      	bmi.n	800ed30 <__swsetup_r+0x68>
 800ece8:	06d3      	lsls	r3, r2, #27
 800ecea:	d407      	bmi.n	800ecfc <__swsetup_r+0x34>
 800ecec:	2309      	movs	r3, #9
 800ecee:	602b      	str	r3, [r5, #0]
 800ecf0:	2340      	movs	r3, #64	@ 0x40
 800ecf2:	2001      	movs	r0, #1
 800ecf4:	4313      	orrs	r3, r2
 800ecf6:	81a3      	strh	r3, [r4, #12]
 800ecf8:	4240      	negs	r0, r0
 800ecfa:	e03a      	b.n	800ed72 <__swsetup_r+0xaa>
 800ecfc:	0752      	lsls	r2, r2, #29
 800ecfe:	d513      	bpl.n	800ed28 <__swsetup_r+0x60>
 800ed00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ed02:	2900      	cmp	r1, #0
 800ed04:	d008      	beq.n	800ed18 <__swsetup_r+0x50>
 800ed06:	0023      	movs	r3, r4
 800ed08:	3344      	adds	r3, #68	@ 0x44
 800ed0a:	4299      	cmp	r1, r3
 800ed0c:	d002      	beq.n	800ed14 <__swsetup_r+0x4c>
 800ed0e:	0028      	movs	r0, r5
 800ed10:	f7fe ff9a 	bl	800dc48 <_free_r>
 800ed14:	2300      	movs	r3, #0
 800ed16:	6363      	str	r3, [r4, #52]	@ 0x34
 800ed18:	2224      	movs	r2, #36	@ 0x24
 800ed1a:	89a3      	ldrh	r3, [r4, #12]
 800ed1c:	4393      	bics	r3, r2
 800ed1e:	81a3      	strh	r3, [r4, #12]
 800ed20:	2300      	movs	r3, #0
 800ed22:	6063      	str	r3, [r4, #4]
 800ed24:	6923      	ldr	r3, [r4, #16]
 800ed26:	6023      	str	r3, [r4, #0]
 800ed28:	2308      	movs	r3, #8
 800ed2a:	89a2      	ldrh	r2, [r4, #12]
 800ed2c:	4313      	orrs	r3, r2
 800ed2e:	81a3      	strh	r3, [r4, #12]
 800ed30:	6923      	ldr	r3, [r4, #16]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d10b      	bne.n	800ed4e <__swsetup_r+0x86>
 800ed36:	21a0      	movs	r1, #160	@ 0xa0
 800ed38:	2280      	movs	r2, #128	@ 0x80
 800ed3a:	89a3      	ldrh	r3, [r4, #12]
 800ed3c:	0089      	lsls	r1, r1, #2
 800ed3e:	0092      	lsls	r2, r2, #2
 800ed40:	400b      	ands	r3, r1
 800ed42:	4293      	cmp	r3, r2
 800ed44:	d003      	beq.n	800ed4e <__swsetup_r+0x86>
 800ed46:	0021      	movs	r1, r4
 800ed48:	0028      	movs	r0, r5
 800ed4a:	f000 f91f 	bl	800ef8c <__smakebuf_r>
 800ed4e:	230c      	movs	r3, #12
 800ed50:	5ee2      	ldrsh	r2, [r4, r3]
 800ed52:	2101      	movs	r1, #1
 800ed54:	0013      	movs	r3, r2
 800ed56:	400b      	ands	r3, r1
 800ed58:	420a      	tst	r2, r1
 800ed5a:	d00b      	beq.n	800ed74 <__swsetup_r+0xac>
 800ed5c:	2300      	movs	r3, #0
 800ed5e:	60a3      	str	r3, [r4, #8]
 800ed60:	6963      	ldr	r3, [r4, #20]
 800ed62:	425b      	negs	r3, r3
 800ed64:	61a3      	str	r3, [r4, #24]
 800ed66:	2000      	movs	r0, #0
 800ed68:	6923      	ldr	r3, [r4, #16]
 800ed6a:	4283      	cmp	r3, r0
 800ed6c:	d101      	bne.n	800ed72 <__swsetup_r+0xaa>
 800ed6e:	0613      	lsls	r3, r2, #24
 800ed70:	d4be      	bmi.n	800ecf0 <__swsetup_r+0x28>
 800ed72:	bd70      	pop	{r4, r5, r6, pc}
 800ed74:	0791      	lsls	r1, r2, #30
 800ed76:	d400      	bmi.n	800ed7a <__swsetup_r+0xb2>
 800ed78:	6963      	ldr	r3, [r4, #20]
 800ed7a:	60a3      	str	r3, [r4, #8]
 800ed7c:	e7f3      	b.n	800ed66 <__swsetup_r+0x9e>
 800ed7e:	46c0      	nop			@ (mov r8, r8)
 800ed80:	20000054 	.word	0x20000054

0800ed84 <memmove>:
 800ed84:	b510      	push	{r4, lr}
 800ed86:	4288      	cmp	r0, r1
 800ed88:	d806      	bhi.n	800ed98 <memmove+0x14>
 800ed8a:	2300      	movs	r3, #0
 800ed8c:	429a      	cmp	r2, r3
 800ed8e:	d008      	beq.n	800eda2 <memmove+0x1e>
 800ed90:	5ccc      	ldrb	r4, [r1, r3]
 800ed92:	54c4      	strb	r4, [r0, r3]
 800ed94:	3301      	adds	r3, #1
 800ed96:	e7f9      	b.n	800ed8c <memmove+0x8>
 800ed98:	188b      	adds	r3, r1, r2
 800ed9a:	4298      	cmp	r0, r3
 800ed9c:	d2f5      	bcs.n	800ed8a <memmove+0x6>
 800ed9e:	3a01      	subs	r2, #1
 800eda0:	d200      	bcs.n	800eda4 <memmove+0x20>
 800eda2:	bd10      	pop	{r4, pc}
 800eda4:	5c8b      	ldrb	r3, [r1, r2]
 800eda6:	5483      	strb	r3, [r0, r2]
 800eda8:	e7f9      	b.n	800ed9e <memmove+0x1a>
	...

0800edac <_sbrk_r>:
 800edac:	2300      	movs	r3, #0
 800edae:	b570      	push	{r4, r5, r6, lr}
 800edb0:	4d06      	ldr	r5, [pc, #24]	@ (800edcc <_sbrk_r+0x20>)
 800edb2:	0004      	movs	r4, r0
 800edb4:	0008      	movs	r0, r1
 800edb6:	602b      	str	r3, [r5, #0]
 800edb8:	f7f6 fe42 	bl	8005a40 <_sbrk>
 800edbc:	1c43      	adds	r3, r0, #1
 800edbe:	d103      	bne.n	800edc8 <_sbrk_r+0x1c>
 800edc0:	682b      	ldr	r3, [r5, #0]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d000      	beq.n	800edc8 <_sbrk_r+0x1c>
 800edc6:	6023      	str	r3, [r4, #0]
 800edc8:	bd70      	pop	{r4, r5, r6, pc}
 800edca:	46c0      	nop			@ (mov r8, r8)
 800edcc:	200011b8 	.word	0x200011b8

0800edd0 <memcpy>:
 800edd0:	2300      	movs	r3, #0
 800edd2:	b510      	push	{r4, lr}
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d100      	bne.n	800edda <memcpy+0xa>
 800edd8:	bd10      	pop	{r4, pc}
 800edda:	5ccc      	ldrb	r4, [r1, r3]
 800eddc:	54c4      	strb	r4, [r0, r3]
 800edde:	3301      	adds	r3, #1
 800ede0:	e7f8      	b.n	800edd4 <memcpy+0x4>
	...

0800ede4 <__assert_func>:
 800ede4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800ede6:	0014      	movs	r4, r2
 800ede8:	001a      	movs	r2, r3
 800edea:	4b09      	ldr	r3, [pc, #36]	@ (800ee10 <__assert_func+0x2c>)
 800edec:	0005      	movs	r5, r0
 800edee:	681b      	ldr	r3, [r3, #0]
 800edf0:	000e      	movs	r6, r1
 800edf2:	68d8      	ldr	r0, [r3, #12]
 800edf4:	4b07      	ldr	r3, [pc, #28]	@ (800ee14 <__assert_func+0x30>)
 800edf6:	2c00      	cmp	r4, #0
 800edf8:	d101      	bne.n	800edfe <__assert_func+0x1a>
 800edfa:	4b07      	ldr	r3, [pc, #28]	@ (800ee18 <__assert_func+0x34>)
 800edfc:	001c      	movs	r4, r3
 800edfe:	4907      	ldr	r1, [pc, #28]	@ (800ee1c <__assert_func+0x38>)
 800ee00:	9301      	str	r3, [sp, #4]
 800ee02:	9402      	str	r4, [sp, #8]
 800ee04:	002b      	movs	r3, r5
 800ee06:	9600      	str	r6, [sp, #0]
 800ee08:	f000 f886 	bl	800ef18 <fiprintf>
 800ee0c:	f000 f924 	bl	800f058 <abort>
 800ee10:	20000054 	.word	0x20000054
 800ee14:	0800fdbb 	.word	0x0800fdbb
 800ee18:	0800fdf6 	.word	0x0800fdf6
 800ee1c:	0800fdc8 	.word	0x0800fdc8

0800ee20 <_calloc_r>:
 800ee20:	b570      	push	{r4, r5, r6, lr}
 800ee22:	0c0b      	lsrs	r3, r1, #16
 800ee24:	0c15      	lsrs	r5, r2, #16
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d11e      	bne.n	800ee68 <_calloc_r+0x48>
 800ee2a:	2d00      	cmp	r5, #0
 800ee2c:	d10c      	bne.n	800ee48 <_calloc_r+0x28>
 800ee2e:	b289      	uxth	r1, r1
 800ee30:	b294      	uxth	r4, r2
 800ee32:	434c      	muls	r4, r1
 800ee34:	0021      	movs	r1, r4
 800ee36:	f7fe ff7d 	bl	800dd34 <_malloc_r>
 800ee3a:	1e05      	subs	r5, r0, #0
 800ee3c:	d01a      	beq.n	800ee74 <_calloc_r+0x54>
 800ee3e:	0022      	movs	r2, r4
 800ee40:	2100      	movs	r1, #0
 800ee42:	f7fd ffd7 	bl	800cdf4 <memset>
 800ee46:	e016      	b.n	800ee76 <_calloc_r+0x56>
 800ee48:	1c2b      	adds	r3, r5, #0
 800ee4a:	1c0c      	adds	r4, r1, #0
 800ee4c:	b289      	uxth	r1, r1
 800ee4e:	b292      	uxth	r2, r2
 800ee50:	434a      	muls	r2, r1
 800ee52:	b29b      	uxth	r3, r3
 800ee54:	b2a1      	uxth	r1, r4
 800ee56:	4359      	muls	r1, r3
 800ee58:	0c14      	lsrs	r4, r2, #16
 800ee5a:	190c      	adds	r4, r1, r4
 800ee5c:	0c23      	lsrs	r3, r4, #16
 800ee5e:	d107      	bne.n	800ee70 <_calloc_r+0x50>
 800ee60:	0424      	lsls	r4, r4, #16
 800ee62:	b292      	uxth	r2, r2
 800ee64:	4314      	orrs	r4, r2
 800ee66:	e7e5      	b.n	800ee34 <_calloc_r+0x14>
 800ee68:	2d00      	cmp	r5, #0
 800ee6a:	d101      	bne.n	800ee70 <_calloc_r+0x50>
 800ee6c:	1c14      	adds	r4, r2, #0
 800ee6e:	e7ed      	b.n	800ee4c <_calloc_r+0x2c>
 800ee70:	230c      	movs	r3, #12
 800ee72:	6003      	str	r3, [r0, #0]
 800ee74:	2500      	movs	r5, #0
 800ee76:	0028      	movs	r0, r5
 800ee78:	bd70      	pop	{r4, r5, r6, pc}

0800ee7a <__ascii_mbtowc>:
 800ee7a:	b082      	sub	sp, #8
 800ee7c:	2900      	cmp	r1, #0
 800ee7e:	d100      	bne.n	800ee82 <__ascii_mbtowc+0x8>
 800ee80:	a901      	add	r1, sp, #4
 800ee82:	1e10      	subs	r0, r2, #0
 800ee84:	d006      	beq.n	800ee94 <__ascii_mbtowc+0x1a>
 800ee86:	2b00      	cmp	r3, #0
 800ee88:	d006      	beq.n	800ee98 <__ascii_mbtowc+0x1e>
 800ee8a:	7813      	ldrb	r3, [r2, #0]
 800ee8c:	600b      	str	r3, [r1, #0]
 800ee8e:	7810      	ldrb	r0, [r2, #0]
 800ee90:	1e43      	subs	r3, r0, #1
 800ee92:	4198      	sbcs	r0, r3
 800ee94:	b002      	add	sp, #8
 800ee96:	4770      	bx	lr
 800ee98:	2002      	movs	r0, #2
 800ee9a:	4240      	negs	r0, r0
 800ee9c:	e7fa      	b.n	800ee94 <__ascii_mbtowc+0x1a>

0800ee9e <_realloc_r>:
 800ee9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800eea0:	0006      	movs	r6, r0
 800eea2:	000c      	movs	r4, r1
 800eea4:	0015      	movs	r5, r2
 800eea6:	2900      	cmp	r1, #0
 800eea8:	d105      	bne.n	800eeb6 <_realloc_r+0x18>
 800eeaa:	0011      	movs	r1, r2
 800eeac:	f7fe ff42 	bl	800dd34 <_malloc_r>
 800eeb0:	0004      	movs	r4, r0
 800eeb2:	0020      	movs	r0, r4
 800eeb4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800eeb6:	2a00      	cmp	r2, #0
 800eeb8:	d103      	bne.n	800eec2 <_realloc_r+0x24>
 800eeba:	f7fe fec5 	bl	800dc48 <_free_r>
 800eebe:	2400      	movs	r4, #0
 800eec0:	e7f7      	b.n	800eeb2 <_realloc_r+0x14>
 800eec2:	f000 f8d0 	bl	800f066 <_malloc_usable_size_r>
 800eec6:	0007      	movs	r7, r0
 800eec8:	4285      	cmp	r5, r0
 800eeca:	d802      	bhi.n	800eed2 <_realloc_r+0x34>
 800eecc:	0843      	lsrs	r3, r0, #1
 800eece:	42ab      	cmp	r3, r5
 800eed0:	d3ef      	bcc.n	800eeb2 <_realloc_r+0x14>
 800eed2:	0029      	movs	r1, r5
 800eed4:	0030      	movs	r0, r6
 800eed6:	f7fe ff2d 	bl	800dd34 <_malloc_r>
 800eeda:	9001      	str	r0, [sp, #4]
 800eedc:	2800      	cmp	r0, #0
 800eede:	d0ee      	beq.n	800eebe <_realloc_r+0x20>
 800eee0:	002a      	movs	r2, r5
 800eee2:	42bd      	cmp	r5, r7
 800eee4:	d900      	bls.n	800eee8 <_realloc_r+0x4a>
 800eee6:	003a      	movs	r2, r7
 800eee8:	0021      	movs	r1, r4
 800eeea:	9801      	ldr	r0, [sp, #4]
 800eeec:	f7ff ff70 	bl	800edd0 <memcpy>
 800eef0:	0021      	movs	r1, r4
 800eef2:	0030      	movs	r0, r6
 800eef4:	f7fe fea8 	bl	800dc48 <_free_r>
 800eef8:	9c01      	ldr	r4, [sp, #4]
 800eefa:	e7da      	b.n	800eeb2 <_realloc_r+0x14>

0800eefc <__ascii_wctomb>:
 800eefc:	0003      	movs	r3, r0
 800eefe:	1e08      	subs	r0, r1, #0
 800ef00:	d005      	beq.n	800ef0e <__ascii_wctomb+0x12>
 800ef02:	2aff      	cmp	r2, #255	@ 0xff
 800ef04:	d904      	bls.n	800ef10 <__ascii_wctomb+0x14>
 800ef06:	228a      	movs	r2, #138	@ 0x8a
 800ef08:	2001      	movs	r0, #1
 800ef0a:	601a      	str	r2, [r3, #0]
 800ef0c:	4240      	negs	r0, r0
 800ef0e:	4770      	bx	lr
 800ef10:	2001      	movs	r0, #1
 800ef12:	700a      	strb	r2, [r1, #0]
 800ef14:	e7fb      	b.n	800ef0e <__ascii_wctomb+0x12>
	...

0800ef18 <fiprintf>:
 800ef18:	b40e      	push	{r1, r2, r3}
 800ef1a:	b517      	push	{r0, r1, r2, r4, lr}
 800ef1c:	4c05      	ldr	r4, [pc, #20]	@ (800ef34 <fiprintf+0x1c>)
 800ef1e:	ab05      	add	r3, sp, #20
 800ef20:	cb04      	ldmia	r3!, {r2}
 800ef22:	0001      	movs	r1, r0
 800ef24:	6820      	ldr	r0, [r4, #0]
 800ef26:	9301      	str	r3, [sp, #4]
 800ef28:	f7ff fcbe 	bl	800e8a8 <_vfiprintf_r>
 800ef2c:	bc1e      	pop	{r1, r2, r3, r4}
 800ef2e:	bc08      	pop	{r3}
 800ef30:	b003      	add	sp, #12
 800ef32:	4718      	bx	r3
 800ef34:	20000054 	.word	0x20000054

0800ef38 <__swhatbuf_r>:
 800ef38:	b570      	push	{r4, r5, r6, lr}
 800ef3a:	000e      	movs	r6, r1
 800ef3c:	001d      	movs	r5, r3
 800ef3e:	230e      	movs	r3, #14
 800ef40:	5ec9      	ldrsh	r1, [r1, r3]
 800ef42:	0014      	movs	r4, r2
 800ef44:	b096      	sub	sp, #88	@ 0x58
 800ef46:	2900      	cmp	r1, #0
 800ef48:	da0c      	bge.n	800ef64 <__swhatbuf_r+0x2c>
 800ef4a:	89b2      	ldrh	r2, [r6, #12]
 800ef4c:	2380      	movs	r3, #128	@ 0x80
 800ef4e:	0011      	movs	r1, r2
 800ef50:	4019      	ands	r1, r3
 800ef52:	421a      	tst	r2, r3
 800ef54:	d114      	bne.n	800ef80 <__swhatbuf_r+0x48>
 800ef56:	2380      	movs	r3, #128	@ 0x80
 800ef58:	00db      	lsls	r3, r3, #3
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	6029      	str	r1, [r5, #0]
 800ef5e:	6023      	str	r3, [r4, #0]
 800ef60:	b016      	add	sp, #88	@ 0x58
 800ef62:	bd70      	pop	{r4, r5, r6, pc}
 800ef64:	466a      	mov	r2, sp
 800ef66:	f000 f853 	bl	800f010 <_fstat_r>
 800ef6a:	2800      	cmp	r0, #0
 800ef6c:	dbed      	blt.n	800ef4a <__swhatbuf_r+0x12>
 800ef6e:	23f0      	movs	r3, #240	@ 0xf0
 800ef70:	9901      	ldr	r1, [sp, #4]
 800ef72:	021b      	lsls	r3, r3, #8
 800ef74:	4019      	ands	r1, r3
 800ef76:	4b04      	ldr	r3, [pc, #16]	@ (800ef88 <__swhatbuf_r+0x50>)
 800ef78:	18c9      	adds	r1, r1, r3
 800ef7a:	424b      	negs	r3, r1
 800ef7c:	4159      	adcs	r1, r3
 800ef7e:	e7ea      	b.n	800ef56 <__swhatbuf_r+0x1e>
 800ef80:	2100      	movs	r1, #0
 800ef82:	2340      	movs	r3, #64	@ 0x40
 800ef84:	e7e9      	b.n	800ef5a <__swhatbuf_r+0x22>
 800ef86:	46c0      	nop			@ (mov r8, r8)
 800ef88:	ffffe000 	.word	0xffffe000

0800ef8c <__smakebuf_r>:
 800ef8c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef8e:	2602      	movs	r6, #2
 800ef90:	898b      	ldrh	r3, [r1, #12]
 800ef92:	0005      	movs	r5, r0
 800ef94:	000c      	movs	r4, r1
 800ef96:	b085      	sub	sp, #20
 800ef98:	4233      	tst	r3, r6
 800ef9a:	d007      	beq.n	800efac <__smakebuf_r+0x20>
 800ef9c:	0023      	movs	r3, r4
 800ef9e:	3347      	adds	r3, #71	@ 0x47
 800efa0:	6023      	str	r3, [r4, #0]
 800efa2:	6123      	str	r3, [r4, #16]
 800efa4:	2301      	movs	r3, #1
 800efa6:	6163      	str	r3, [r4, #20]
 800efa8:	b005      	add	sp, #20
 800efaa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800efac:	ab03      	add	r3, sp, #12
 800efae:	aa02      	add	r2, sp, #8
 800efb0:	f7ff ffc2 	bl	800ef38 <__swhatbuf_r>
 800efb4:	9f02      	ldr	r7, [sp, #8]
 800efb6:	9001      	str	r0, [sp, #4]
 800efb8:	0039      	movs	r1, r7
 800efba:	0028      	movs	r0, r5
 800efbc:	f7fe feba 	bl	800dd34 <_malloc_r>
 800efc0:	2800      	cmp	r0, #0
 800efc2:	d108      	bne.n	800efd6 <__smakebuf_r+0x4a>
 800efc4:	220c      	movs	r2, #12
 800efc6:	5ea3      	ldrsh	r3, [r4, r2]
 800efc8:	059a      	lsls	r2, r3, #22
 800efca:	d4ed      	bmi.n	800efa8 <__smakebuf_r+0x1c>
 800efcc:	2203      	movs	r2, #3
 800efce:	4393      	bics	r3, r2
 800efd0:	431e      	orrs	r6, r3
 800efd2:	81a6      	strh	r6, [r4, #12]
 800efd4:	e7e2      	b.n	800ef9c <__smakebuf_r+0x10>
 800efd6:	2380      	movs	r3, #128	@ 0x80
 800efd8:	89a2      	ldrh	r2, [r4, #12]
 800efda:	6020      	str	r0, [r4, #0]
 800efdc:	4313      	orrs	r3, r2
 800efde:	81a3      	strh	r3, [r4, #12]
 800efe0:	9b03      	ldr	r3, [sp, #12]
 800efe2:	6120      	str	r0, [r4, #16]
 800efe4:	6167      	str	r7, [r4, #20]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d00c      	beq.n	800f004 <__smakebuf_r+0x78>
 800efea:	0028      	movs	r0, r5
 800efec:	230e      	movs	r3, #14
 800efee:	5ee1      	ldrsh	r1, [r4, r3]
 800eff0:	f000 f820 	bl	800f034 <_isatty_r>
 800eff4:	2800      	cmp	r0, #0
 800eff6:	d005      	beq.n	800f004 <__smakebuf_r+0x78>
 800eff8:	2303      	movs	r3, #3
 800effa:	89a2      	ldrh	r2, [r4, #12]
 800effc:	439a      	bics	r2, r3
 800effe:	3b02      	subs	r3, #2
 800f000:	4313      	orrs	r3, r2
 800f002:	81a3      	strh	r3, [r4, #12]
 800f004:	89a3      	ldrh	r3, [r4, #12]
 800f006:	9a01      	ldr	r2, [sp, #4]
 800f008:	4313      	orrs	r3, r2
 800f00a:	81a3      	strh	r3, [r4, #12]
 800f00c:	e7cc      	b.n	800efa8 <__smakebuf_r+0x1c>
	...

0800f010 <_fstat_r>:
 800f010:	2300      	movs	r3, #0
 800f012:	b570      	push	{r4, r5, r6, lr}
 800f014:	4d06      	ldr	r5, [pc, #24]	@ (800f030 <_fstat_r+0x20>)
 800f016:	0004      	movs	r4, r0
 800f018:	0008      	movs	r0, r1
 800f01a:	0011      	movs	r1, r2
 800f01c:	602b      	str	r3, [r5, #0]
 800f01e:	f7f6 fced 	bl	80059fc <_fstat>
 800f022:	1c43      	adds	r3, r0, #1
 800f024:	d103      	bne.n	800f02e <_fstat_r+0x1e>
 800f026:	682b      	ldr	r3, [r5, #0]
 800f028:	2b00      	cmp	r3, #0
 800f02a:	d000      	beq.n	800f02e <_fstat_r+0x1e>
 800f02c:	6023      	str	r3, [r4, #0]
 800f02e:	bd70      	pop	{r4, r5, r6, pc}
 800f030:	200011b8 	.word	0x200011b8

0800f034 <_isatty_r>:
 800f034:	2300      	movs	r3, #0
 800f036:	b570      	push	{r4, r5, r6, lr}
 800f038:	4d06      	ldr	r5, [pc, #24]	@ (800f054 <_isatty_r+0x20>)
 800f03a:	0004      	movs	r4, r0
 800f03c:	0008      	movs	r0, r1
 800f03e:	602b      	str	r3, [r5, #0]
 800f040:	f7f6 fcea 	bl	8005a18 <_isatty>
 800f044:	1c43      	adds	r3, r0, #1
 800f046:	d103      	bne.n	800f050 <_isatty_r+0x1c>
 800f048:	682b      	ldr	r3, [r5, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d000      	beq.n	800f050 <_isatty_r+0x1c>
 800f04e:	6023      	str	r3, [r4, #0]
 800f050:	bd70      	pop	{r4, r5, r6, pc}
 800f052:	46c0      	nop			@ (mov r8, r8)
 800f054:	200011b8 	.word	0x200011b8

0800f058 <abort>:
 800f058:	2006      	movs	r0, #6
 800f05a:	b510      	push	{r4, lr}
 800f05c:	f000 f834 	bl	800f0c8 <raise>
 800f060:	2001      	movs	r0, #1
 800f062:	f7f6 fc97 	bl	8005994 <_exit>

0800f066 <_malloc_usable_size_r>:
 800f066:	1f0b      	subs	r3, r1, #4
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	1f18      	subs	r0, r3, #4
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	da01      	bge.n	800f074 <_malloc_usable_size_r+0xe>
 800f070:	580b      	ldr	r3, [r1, r0]
 800f072:	18c0      	adds	r0, r0, r3
 800f074:	4770      	bx	lr

0800f076 <_raise_r>:
 800f076:	b570      	push	{r4, r5, r6, lr}
 800f078:	0004      	movs	r4, r0
 800f07a:	000d      	movs	r5, r1
 800f07c:	291f      	cmp	r1, #31
 800f07e:	d904      	bls.n	800f08a <_raise_r+0x14>
 800f080:	2316      	movs	r3, #22
 800f082:	6003      	str	r3, [r0, #0]
 800f084:	2001      	movs	r0, #1
 800f086:	4240      	negs	r0, r0
 800f088:	bd70      	pop	{r4, r5, r6, pc}
 800f08a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d004      	beq.n	800f09a <_raise_r+0x24>
 800f090:	008a      	lsls	r2, r1, #2
 800f092:	189b      	adds	r3, r3, r2
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	2a00      	cmp	r2, #0
 800f098:	d108      	bne.n	800f0ac <_raise_r+0x36>
 800f09a:	0020      	movs	r0, r4
 800f09c:	f000 f830 	bl	800f100 <_getpid_r>
 800f0a0:	002a      	movs	r2, r5
 800f0a2:	0001      	movs	r1, r0
 800f0a4:	0020      	movs	r0, r4
 800f0a6:	f000 f819 	bl	800f0dc <_kill_r>
 800f0aa:	e7ed      	b.n	800f088 <_raise_r+0x12>
 800f0ac:	2a01      	cmp	r2, #1
 800f0ae:	d009      	beq.n	800f0c4 <_raise_r+0x4e>
 800f0b0:	1c51      	adds	r1, r2, #1
 800f0b2:	d103      	bne.n	800f0bc <_raise_r+0x46>
 800f0b4:	2316      	movs	r3, #22
 800f0b6:	6003      	str	r3, [r0, #0]
 800f0b8:	2001      	movs	r0, #1
 800f0ba:	e7e5      	b.n	800f088 <_raise_r+0x12>
 800f0bc:	2100      	movs	r1, #0
 800f0be:	0028      	movs	r0, r5
 800f0c0:	6019      	str	r1, [r3, #0]
 800f0c2:	4790      	blx	r2
 800f0c4:	2000      	movs	r0, #0
 800f0c6:	e7df      	b.n	800f088 <_raise_r+0x12>

0800f0c8 <raise>:
 800f0c8:	b510      	push	{r4, lr}
 800f0ca:	4b03      	ldr	r3, [pc, #12]	@ (800f0d8 <raise+0x10>)
 800f0cc:	0001      	movs	r1, r0
 800f0ce:	6818      	ldr	r0, [r3, #0]
 800f0d0:	f7ff ffd1 	bl	800f076 <_raise_r>
 800f0d4:	bd10      	pop	{r4, pc}
 800f0d6:	46c0      	nop			@ (mov r8, r8)
 800f0d8:	20000054 	.word	0x20000054

0800f0dc <_kill_r>:
 800f0dc:	2300      	movs	r3, #0
 800f0de:	b570      	push	{r4, r5, r6, lr}
 800f0e0:	4d06      	ldr	r5, [pc, #24]	@ (800f0fc <_kill_r+0x20>)
 800f0e2:	0004      	movs	r4, r0
 800f0e4:	0008      	movs	r0, r1
 800f0e6:	0011      	movs	r1, r2
 800f0e8:	602b      	str	r3, [r5, #0]
 800f0ea:	f7f6 fc43 	bl	8005974 <_kill>
 800f0ee:	1c43      	adds	r3, r0, #1
 800f0f0:	d103      	bne.n	800f0fa <_kill_r+0x1e>
 800f0f2:	682b      	ldr	r3, [r5, #0]
 800f0f4:	2b00      	cmp	r3, #0
 800f0f6:	d000      	beq.n	800f0fa <_kill_r+0x1e>
 800f0f8:	6023      	str	r3, [r4, #0]
 800f0fa:	bd70      	pop	{r4, r5, r6, pc}
 800f0fc:	200011b8 	.word	0x200011b8

0800f100 <_getpid_r>:
 800f100:	b510      	push	{r4, lr}
 800f102:	f7f6 fc31 	bl	8005968 <_getpid>
 800f106:	bd10      	pop	{r4, pc}

0800f108 <expf>:
 800f108:	b570      	push	{r4, r5, r6, lr}
 800f10a:	1c04      	adds	r4, r0, #0
 800f10c:	f000 f8c2 	bl	800f294 <__ieee754_expf>
 800f110:	1c05      	adds	r5, r0, #0
 800f112:	1c20      	adds	r0, r4, #0
 800f114:	f000 f83c 	bl	800f190 <finitef>
 800f118:	2800      	cmp	r0, #0
 800f11a:	d00b      	beq.n	800f134 <expf+0x2c>
 800f11c:	490c      	ldr	r1, [pc, #48]	@ (800f150 <expf+0x48>)
 800f11e:	1c20      	adds	r0, r4, #0
 800f120:	f7f1 f9e8 	bl	80004f4 <__aeabi_fcmpgt>
 800f124:	2800      	cmp	r0, #0
 800f126:	d007      	beq.n	800f138 <expf+0x30>
 800f128:	f7fd fed4 	bl	800ced4 <__errno>
 800f12c:	25ff      	movs	r5, #255	@ 0xff
 800f12e:	2322      	movs	r3, #34	@ 0x22
 800f130:	05ed      	lsls	r5, r5, #23
 800f132:	6003      	str	r3, [r0, #0]
 800f134:	1c28      	adds	r0, r5, #0
 800f136:	bd70      	pop	{r4, r5, r6, pc}
 800f138:	4906      	ldr	r1, [pc, #24]	@ (800f154 <expf+0x4c>)
 800f13a:	1c20      	adds	r0, r4, #0
 800f13c:	f7f1 f9c6 	bl	80004cc <__aeabi_fcmplt>
 800f140:	2800      	cmp	r0, #0
 800f142:	d0f7      	beq.n	800f134 <expf+0x2c>
 800f144:	f7fd fec6 	bl	800ced4 <__errno>
 800f148:	2322      	movs	r3, #34	@ 0x22
 800f14a:	2500      	movs	r5, #0
 800f14c:	6003      	str	r3, [r0, #0]
 800f14e:	e7f1      	b.n	800f134 <expf+0x2c>
 800f150:	42b17217 	.word	0x42b17217
 800f154:	c2cff1b5 	.word	0xc2cff1b5

0800f158 <sqrtf>:
 800f158:	b570      	push	{r4, r5, r6, lr}
 800f15a:	1c05      	adds	r5, r0, #0
 800f15c:	f000 f822 	bl	800f1a4 <__ieee754_sqrtf>
 800f160:	1c29      	adds	r1, r5, #0
 800f162:	1c04      	adds	r4, r0, #0
 800f164:	1c28      	adds	r0, r5, #0
 800f166:	f7f2 f945 	bl	80013f4 <__aeabi_fcmpun>
 800f16a:	2800      	cmp	r0, #0
 800f16c:	d10e      	bne.n	800f18c <sqrtf+0x34>
 800f16e:	2100      	movs	r1, #0
 800f170:	1c28      	adds	r0, r5, #0
 800f172:	f7f1 f9ab 	bl	80004cc <__aeabi_fcmplt>
 800f176:	2800      	cmp	r0, #0
 800f178:	d008      	beq.n	800f18c <sqrtf+0x34>
 800f17a:	f7fd feab 	bl	800ced4 <__errno>
 800f17e:	2321      	movs	r3, #33	@ 0x21
 800f180:	2100      	movs	r1, #0
 800f182:	6003      	str	r3, [r0, #0]
 800f184:	1c08      	adds	r0, r1, #0
 800f186:	f7f1 fc6d 	bl	8000a64 <__aeabi_fdiv>
 800f18a:	1c04      	adds	r4, r0, #0
 800f18c:	1c20      	adds	r0, r4, #0
 800f18e:	bd70      	pop	{r4, r5, r6, pc}

0800f190 <finitef>:
 800f190:	22ff      	movs	r2, #255	@ 0xff
 800f192:	0043      	lsls	r3, r0, #1
 800f194:	085b      	lsrs	r3, r3, #1
 800f196:	2001      	movs	r0, #1
 800f198:	05d2      	lsls	r2, r2, #23
 800f19a:	4293      	cmp	r3, r2
 800f19c:	db00      	blt.n	800f1a0 <finitef+0x10>
 800f19e:	2000      	movs	r0, #0
 800f1a0:	4770      	bx	lr
	...

0800f1a4 <__ieee754_sqrtf>:
 800f1a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f1a6:	0003      	movs	r3, r0
 800f1a8:	0042      	lsls	r2, r0, #1
 800f1aa:	1c04      	adds	r4, r0, #0
 800f1ac:	20ff      	movs	r0, #255	@ 0xff
 800f1ae:	0852      	lsrs	r2, r2, #1
 800f1b0:	05c0      	lsls	r0, r0, #23
 800f1b2:	4282      	cmp	r2, r0
 800f1b4:	d30a      	bcc.n	800f1cc <__ieee754_sqrtf+0x28>
 800f1b6:	1c21      	adds	r1, r4, #0
 800f1b8:	1c20      	adds	r0, r4, #0
 800f1ba:	f7f1 fe39 	bl	8000e30 <__aeabi_fmul>
 800f1be:	1c01      	adds	r1, r0, #0
 800f1c0:	1c20      	adds	r0, r4, #0
 800f1c2:	f7f1 fac5 	bl	8000750 <__aeabi_fadd>
 800f1c6:	1c04      	adds	r4, r0, #0
 800f1c8:	1c20      	adds	r0, r4, #0
 800f1ca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f1cc:	2a00      	cmp	r2, #0
 800f1ce:	d0fb      	beq.n	800f1c8 <__ieee754_sqrtf+0x24>
 800f1d0:	2c00      	cmp	r4, #0
 800f1d2:	da07      	bge.n	800f1e4 <__ieee754_sqrtf+0x40>
 800f1d4:	1c21      	adds	r1, r4, #0
 800f1d6:	1c20      	adds	r0, r4, #0
 800f1d8:	f7f1 ff68 	bl	80010ac <__aeabi_fsub>
 800f1dc:	1c01      	adds	r1, r0, #0
 800f1de:	f7f1 fc41 	bl	8000a64 <__aeabi_fdiv>
 800f1e2:	e7f0      	b.n	800f1c6 <__ieee754_sqrtf+0x22>
 800f1e4:	0022      	movs	r2, r4
 800f1e6:	15e1      	asrs	r1, r4, #23
 800f1e8:	4002      	ands	r2, r0
 800f1ea:	4204      	tst	r4, r0
 800f1ec:	d046      	beq.n	800f27c <__ieee754_sqrtf+0xd8>
 800f1ee:	2280      	movs	r2, #128	@ 0x80
 800f1f0:	000f      	movs	r7, r1
 800f1f2:	025b      	lsls	r3, r3, #9
 800f1f4:	0a5b      	lsrs	r3, r3, #9
 800f1f6:	0412      	lsls	r2, r2, #16
 800f1f8:	3f7f      	subs	r7, #127	@ 0x7f
 800f1fa:	4313      	orrs	r3, r2
 800f1fc:	07c9      	lsls	r1, r1, #31
 800f1fe:	d400      	bmi.n	800f202 <__ieee754_sqrtf+0x5e>
 800f200:	005b      	lsls	r3, r3, #1
 800f202:	2400      	movs	r4, #0
 800f204:	2180      	movs	r1, #128	@ 0x80
 800f206:	2019      	movs	r0, #25
 800f208:	0026      	movs	r6, r4
 800f20a:	107f      	asrs	r7, r7, #1
 800f20c:	005b      	lsls	r3, r3, #1
 800f20e:	0449      	lsls	r1, r1, #17
 800f210:	1875      	adds	r5, r6, r1
 800f212:	001a      	movs	r2, r3
 800f214:	429d      	cmp	r5, r3
 800f216:	dc02      	bgt.n	800f21e <__ieee754_sqrtf+0x7a>
 800f218:	186e      	adds	r6, r5, r1
 800f21a:	1b5a      	subs	r2, r3, r5
 800f21c:	1864      	adds	r4, r4, r1
 800f21e:	3801      	subs	r0, #1
 800f220:	0053      	lsls	r3, r2, #1
 800f222:	0849      	lsrs	r1, r1, #1
 800f224:	2800      	cmp	r0, #0
 800f226:	d1f3      	bne.n	800f210 <__ieee754_sqrtf+0x6c>
 800f228:	2a00      	cmp	r2, #0
 800f22a:	d019      	beq.n	800f260 <__ieee754_sqrtf+0xbc>
 800f22c:	4d17      	ldr	r5, [pc, #92]	@ (800f28c <__ieee754_sqrtf+0xe8>)
 800f22e:	4e18      	ldr	r6, [pc, #96]	@ (800f290 <__ieee754_sqrtf+0xec>)
 800f230:	6828      	ldr	r0, [r5, #0]
 800f232:	6831      	ldr	r1, [r6, #0]
 800f234:	682b      	ldr	r3, [r5, #0]
 800f236:	9301      	str	r3, [sp, #4]
 800f238:	f7f1 ff38 	bl	80010ac <__aeabi_fsub>
 800f23c:	1c01      	adds	r1, r0, #0
 800f23e:	9801      	ldr	r0, [sp, #4]
 800f240:	f7f1 f94e 	bl	80004e0 <__aeabi_fcmple>
 800f244:	2800      	cmp	r0, #0
 800f246:	d00b      	beq.n	800f260 <__ieee754_sqrtf+0xbc>
 800f248:	6828      	ldr	r0, [r5, #0]
 800f24a:	6831      	ldr	r1, [r6, #0]
 800f24c:	f7f1 fa80 	bl	8000750 <__aeabi_fadd>
 800f250:	682d      	ldr	r5, [r5, #0]
 800f252:	1c01      	adds	r1, r0, #0
 800f254:	1c28      	adds	r0, r5, #0
 800f256:	f7f1 f939 	bl	80004cc <__aeabi_fcmplt>
 800f25a:	2800      	cmp	r0, #0
 800f25c:	d011      	beq.n	800f282 <__ieee754_sqrtf+0xde>
 800f25e:	3402      	adds	r4, #2
 800f260:	23fc      	movs	r3, #252	@ 0xfc
 800f262:	1064      	asrs	r4, r4, #1
 800f264:	059b      	lsls	r3, r3, #22
 800f266:	18e3      	adds	r3, r4, r3
 800f268:	05fc      	lsls	r4, r7, #23
 800f26a:	18e4      	adds	r4, r4, r3
 800f26c:	e7ac      	b.n	800f1c8 <__ieee754_sqrtf+0x24>
 800f26e:	005b      	lsls	r3, r3, #1
 800f270:	3201      	adds	r2, #1
 800f272:	4203      	tst	r3, r0
 800f274:	d0fb      	beq.n	800f26e <__ieee754_sqrtf+0xca>
 800f276:	3a01      	subs	r2, #1
 800f278:	1a89      	subs	r1, r1, r2
 800f27a:	e7b8      	b.n	800f1ee <__ieee754_sqrtf+0x4a>
 800f27c:	2080      	movs	r0, #128	@ 0x80
 800f27e:	0400      	lsls	r0, r0, #16
 800f280:	e7f7      	b.n	800f272 <__ieee754_sqrtf+0xce>
 800f282:	2301      	movs	r3, #1
 800f284:	3401      	adds	r4, #1
 800f286:	439c      	bics	r4, r3
 800f288:	e7ea      	b.n	800f260 <__ieee754_sqrtf+0xbc>
 800f28a:	46c0      	nop			@ (mov r8, r8)
 800f28c:	20000214 	.word	0x20000214
 800f290:	20000210 	.word	0x20000210

0800f294 <__ieee754_expf>:
 800f294:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f296:	21ff      	movs	r1, #255	@ 0xff
 800f298:	0043      	lsls	r3, r0, #1
 800f29a:	1c04      	adds	r4, r0, #0
 800f29c:	085b      	lsrs	r3, r3, #1
 800f29e:	05c9      	lsls	r1, r1, #23
 800f2a0:	428b      	cmp	r3, r1
 800f2a2:	d904      	bls.n	800f2ae <__ieee754_expf+0x1a>
 800f2a4:	1c01      	adds	r1, r0, #0
 800f2a6:	1c20      	adds	r0, r4, #0
 800f2a8:	f7f1 fa52 	bl	8000750 <__aeabi_fadd>
 800f2ac:	e00d      	b.n	800f2ca <__ieee754_expf+0x36>
 800f2ae:	0fc6      	lsrs	r6, r0, #31
 800f2b0:	428b      	cmp	r3, r1
 800f2b2:	d104      	bne.n	800f2be <__ieee754_expf+0x2a>
 800f2b4:	2e00      	cmp	r6, #0
 800f2b6:	d000      	beq.n	800f2ba <__ieee754_expf+0x26>
 800f2b8:	e0ba      	b.n	800f430 <__ieee754_expf+0x19c>
 800f2ba:	1c20      	adds	r0, r4, #0
 800f2bc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f2be:	495d      	ldr	r1, [pc, #372]	@ (800f434 <__ieee754_expf+0x1a0>)
 800f2c0:	4288      	cmp	r0, r1
 800f2c2:	dd04      	ble.n	800f2ce <__ieee754_expf+0x3a>
 800f2c4:	2000      	movs	r0, #0
 800f2c6:	f000 f8f1 	bl	800f4ac <__math_oflowf>
 800f2ca:	1c04      	adds	r4, r0, #0
 800f2cc:	e7f5      	b.n	800f2ba <__ieee754_expf+0x26>
 800f2ce:	2800      	cmp	r0, #0
 800f2d0:	da06      	bge.n	800f2e0 <__ieee754_expf+0x4c>
 800f2d2:	4a59      	ldr	r2, [pc, #356]	@ (800f438 <__ieee754_expf+0x1a4>)
 800f2d4:	4293      	cmp	r3, r2
 800f2d6:	d903      	bls.n	800f2e0 <__ieee754_expf+0x4c>
 800f2d8:	2000      	movs	r0, #0
 800f2da:	f000 f8e1 	bl	800f4a0 <__math_uflowf>
 800f2de:	e7f4      	b.n	800f2ca <__ieee754_expf+0x36>
 800f2e0:	4a56      	ldr	r2, [pc, #344]	@ (800f43c <__ieee754_expf+0x1a8>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d96e      	bls.n	800f3c4 <__ieee754_expf+0x130>
 800f2e6:	4a56      	ldr	r2, [pc, #344]	@ (800f440 <__ieee754_expf+0x1ac>)
 800f2e8:	00b5      	lsls	r5, r6, #2
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d84e      	bhi.n	800f38c <__ieee754_expf+0xf8>
 800f2ee:	4b55      	ldr	r3, [pc, #340]	@ (800f444 <__ieee754_expf+0x1b0>)
 800f2f0:	1c20      	adds	r0, r4, #0
 800f2f2:	5959      	ldr	r1, [r3, r5]
 800f2f4:	f7f1 feda 	bl	80010ac <__aeabi_fsub>
 800f2f8:	4b53      	ldr	r3, [pc, #332]	@ (800f448 <__ieee754_expf+0x1b4>)
 800f2fa:	1c07      	adds	r7, r0, #0
 800f2fc:	595b      	ldr	r3, [r3, r5]
 800f2fe:	2501      	movs	r5, #1
 800f300:	1bad      	subs	r5, r5, r6
 800f302:	9300      	str	r3, [sp, #0]
 800f304:	1bad      	subs	r5, r5, r6
 800f306:	9900      	ldr	r1, [sp, #0]
 800f308:	1c38      	adds	r0, r7, #0
 800f30a:	f7f1 fecf 	bl	80010ac <__aeabi_fsub>
 800f30e:	1c04      	adds	r4, r0, #0
 800f310:	1c21      	adds	r1, r4, #0
 800f312:	1c20      	adds	r0, r4, #0
 800f314:	f7f1 fd8c 	bl	8000e30 <__aeabi_fmul>
 800f318:	494c      	ldr	r1, [pc, #304]	@ (800f44c <__ieee754_expf+0x1b8>)
 800f31a:	1c06      	adds	r6, r0, #0
 800f31c:	f7f1 fd88 	bl	8000e30 <__aeabi_fmul>
 800f320:	494b      	ldr	r1, [pc, #300]	@ (800f450 <__ieee754_expf+0x1bc>)
 800f322:	f7f1 fec3 	bl	80010ac <__aeabi_fsub>
 800f326:	1c31      	adds	r1, r6, #0
 800f328:	f7f1 fd82 	bl	8000e30 <__aeabi_fmul>
 800f32c:	4949      	ldr	r1, [pc, #292]	@ (800f454 <__ieee754_expf+0x1c0>)
 800f32e:	f7f1 fa0f 	bl	8000750 <__aeabi_fadd>
 800f332:	1c31      	adds	r1, r6, #0
 800f334:	f7f1 fd7c 	bl	8000e30 <__aeabi_fmul>
 800f338:	4947      	ldr	r1, [pc, #284]	@ (800f458 <__ieee754_expf+0x1c4>)
 800f33a:	f7f1 feb7 	bl	80010ac <__aeabi_fsub>
 800f33e:	1c31      	adds	r1, r6, #0
 800f340:	f7f1 fd76 	bl	8000e30 <__aeabi_fmul>
 800f344:	4945      	ldr	r1, [pc, #276]	@ (800f45c <__ieee754_expf+0x1c8>)
 800f346:	f7f1 fa03 	bl	8000750 <__aeabi_fadd>
 800f34a:	1c31      	adds	r1, r6, #0
 800f34c:	f7f1 fd70 	bl	8000e30 <__aeabi_fmul>
 800f350:	1c01      	adds	r1, r0, #0
 800f352:	1c20      	adds	r0, r4, #0
 800f354:	f7f1 feaa 	bl	80010ac <__aeabi_fsub>
 800f358:	1c01      	adds	r1, r0, #0
 800f35a:	1c06      	adds	r6, r0, #0
 800f35c:	1c20      	adds	r0, r4, #0
 800f35e:	f7f1 fd67 	bl	8000e30 <__aeabi_fmul>
 800f362:	9001      	str	r0, [sp, #4]
 800f364:	2d00      	cmp	r5, #0
 800f366:	d140      	bne.n	800f3ea <__ieee754_expf+0x156>
 800f368:	2180      	movs	r1, #128	@ 0x80
 800f36a:	1c30      	adds	r0, r6, #0
 800f36c:	05c9      	lsls	r1, r1, #23
 800f36e:	f7f1 fe9d 	bl	80010ac <__aeabi_fsub>
 800f372:	1c01      	adds	r1, r0, #0
 800f374:	9801      	ldr	r0, [sp, #4]
 800f376:	f7f1 fb75 	bl	8000a64 <__aeabi_fdiv>
 800f37a:	1c21      	adds	r1, r4, #0
 800f37c:	f7f1 fe96 	bl	80010ac <__aeabi_fsub>
 800f380:	1c01      	adds	r1, r0, #0
 800f382:	20fe      	movs	r0, #254	@ 0xfe
 800f384:	0580      	lsls	r0, r0, #22
 800f386:	f7f1 fe91 	bl	80010ac <__aeabi_fsub>
 800f38a:	e79e      	b.n	800f2ca <__ieee754_expf+0x36>
 800f38c:	4934      	ldr	r1, [pc, #208]	@ (800f460 <__ieee754_expf+0x1cc>)
 800f38e:	1c20      	adds	r0, r4, #0
 800f390:	f7f1 fd4e 	bl	8000e30 <__aeabi_fmul>
 800f394:	4b33      	ldr	r3, [pc, #204]	@ (800f464 <__ieee754_expf+0x1d0>)
 800f396:	5959      	ldr	r1, [r3, r5]
 800f398:	f7f1 f9da 	bl	8000750 <__aeabi_fadd>
 800f39c:	f7f2 f840 	bl	8001420 <__aeabi_f2iz>
 800f3a0:	0005      	movs	r5, r0
 800f3a2:	f7f2 f85d 	bl	8001460 <__aeabi_i2f>
 800f3a6:	4930      	ldr	r1, [pc, #192]	@ (800f468 <__ieee754_expf+0x1d4>)
 800f3a8:	1c06      	adds	r6, r0, #0
 800f3aa:	f7f1 fd41 	bl	8000e30 <__aeabi_fmul>
 800f3ae:	1c01      	adds	r1, r0, #0
 800f3b0:	1c20      	adds	r0, r4, #0
 800f3b2:	f7f1 fe7b 	bl	80010ac <__aeabi_fsub>
 800f3b6:	492d      	ldr	r1, [pc, #180]	@ (800f46c <__ieee754_expf+0x1d8>)
 800f3b8:	1c07      	adds	r7, r0, #0
 800f3ba:	1c30      	adds	r0, r6, #0
 800f3bc:	f7f1 fd38 	bl	8000e30 <__aeabi_fmul>
 800f3c0:	9000      	str	r0, [sp, #0]
 800f3c2:	e7a0      	b.n	800f306 <__ieee754_expf+0x72>
 800f3c4:	22d0      	movs	r2, #208	@ 0xd0
 800f3c6:	0592      	lsls	r2, r2, #22
 800f3c8:	4293      	cmp	r3, r2
 800f3ca:	d20c      	bcs.n	800f3e6 <__ieee754_expf+0x152>
 800f3cc:	4928      	ldr	r1, [pc, #160]	@ (800f470 <__ieee754_expf+0x1dc>)
 800f3ce:	1c20      	adds	r0, r4, #0
 800f3d0:	f7f1 f9be 	bl	8000750 <__aeabi_fadd>
 800f3d4:	21fe      	movs	r1, #254	@ 0xfe
 800f3d6:	0589      	lsls	r1, r1, #22
 800f3d8:	f7f1 f88c 	bl	80004f4 <__aeabi_fcmpgt>
 800f3dc:	1e05      	subs	r5, r0, #0
 800f3de:	d097      	beq.n	800f310 <__ieee754_expf+0x7c>
 800f3e0:	21fe      	movs	r1, #254	@ 0xfe
 800f3e2:	0589      	lsls	r1, r1, #22
 800f3e4:	e75f      	b.n	800f2a6 <__ieee754_expf+0x12>
 800f3e6:	2500      	movs	r5, #0
 800f3e8:	e792      	b.n	800f310 <__ieee754_expf+0x7c>
 800f3ea:	2080      	movs	r0, #128	@ 0x80
 800f3ec:	1c31      	adds	r1, r6, #0
 800f3ee:	05c0      	lsls	r0, r0, #23
 800f3f0:	f7f1 fe5c 	bl	80010ac <__aeabi_fsub>
 800f3f4:	1c01      	adds	r1, r0, #0
 800f3f6:	9801      	ldr	r0, [sp, #4]
 800f3f8:	f7f1 fb34 	bl	8000a64 <__aeabi_fdiv>
 800f3fc:	1c01      	adds	r1, r0, #0
 800f3fe:	9800      	ldr	r0, [sp, #0]
 800f400:	f7f1 fe54 	bl	80010ac <__aeabi_fsub>
 800f404:	1c39      	adds	r1, r7, #0
 800f406:	f7f1 fe51 	bl	80010ac <__aeabi_fsub>
 800f40a:	1c01      	adds	r1, r0, #0
 800f40c:	20fe      	movs	r0, #254	@ 0xfe
 800f40e:	0580      	lsls	r0, r0, #22
 800f410:	f7f1 fe4c 	bl	80010ac <__aeabi_fsub>
 800f414:	002b      	movs	r3, r5
 800f416:	337d      	adds	r3, #125	@ 0x7d
 800f418:	db02      	blt.n	800f420 <__ieee754_expf+0x18c>
 800f41a:	05ec      	lsls	r4, r5, #23
 800f41c:	1824      	adds	r4, r4, r0
 800f41e:	e74c      	b.n	800f2ba <__ieee754_expf+0x26>
 800f420:	21d8      	movs	r1, #216	@ 0xd8
 800f422:	3564      	adds	r5, #100	@ 0x64
 800f424:	05ed      	lsls	r5, r5, #23
 800f426:	1828      	adds	r0, r5, r0
 800f428:	0509      	lsls	r1, r1, #20
 800f42a:	f7f1 fd01 	bl	8000e30 <__aeabi_fmul>
 800f42e:	e74c      	b.n	800f2ca <__ieee754_expf+0x36>
 800f430:	2400      	movs	r4, #0
 800f432:	e742      	b.n	800f2ba <__ieee754_expf+0x26>
 800f434:	42b17217 	.word	0x42b17217
 800f438:	42cff1b5 	.word	0x42cff1b5
 800f43c:	3eb17218 	.word	0x3eb17218
 800f440:	3f851591 	.word	0x3f851591
 800f444:	0800ff00 	.word	0x0800ff00
 800f448:	0800fef8 	.word	0x0800fef8
 800f44c:	3331bb4c 	.word	0x3331bb4c
 800f450:	35ddea0e 	.word	0x35ddea0e
 800f454:	388ab355 	.word	0x388ab355
 800f458:	3b360b61 	.word	0x3b360b61
 800f45c:	3e2aaaab 	.word	0x3e2aaaab
 800f460:	3fb8aa3b 	.word	0x3fb8aa3b
 800f464:	0800ff08 	.word	0x0800ff08
 800f468:	3f317180 	.word	0x3f317180
 800f46c:	3717f7d1 	.word	0x3717f7d1
 800f470:	7149f2ca 	.word	0x7149f2ca

0800f474 <with_errnof>:
 800f474:	b570      	push	{r4, r5, r6, lr}
 800f476:	000d      	movs	r5, r1
 800f478:	1c04      	adds	r4, r0, #0
 800f47a:	f7fd fd2b 	bl	800ced4 <__errno>
 800f47e:	6005      	str	r5, [r0, #0]
 800f480:	1c20      	adds	r0, r4, #0
 800f482:	bd70      	pop	{r4, r5, r6, pc}

0800f484 <xflowf>:
 800f484:	b510      	push	{r4, lr}
 800f486:	1c0b      	adds	r3, r1, #0
 800f488:	2800      	cmp	r0, #0
 800f48a:	d002      	beq.n	800f492 <xflowf+0xe>
 800f48c:	2380      	movs	r3, #128	@ 0x80
 800f48e:	061b      	lsls	r3, r3, #24
 800f490:	18cb      	adds	r3, r1, r3
 800f492:	1c18      	adds	r0, r3, #0
 800f494:	f7f1 fccc 	bl	8000e30 <__aeabi_fmul>
 800f498:	2122      	movs	r1, #34	@ 0x22
 800f49a:	f7ff ffeb 	bl	800f474 <with_errnof>
 800f49e:	bd10      	pop	{r4, pc}

0800f4a0 <__math_uflowf>:
 800f4a0:	2180      	movs	r1, #128	@ 0x80
 800f4a2:	b510      	push	{r4, lr}
 800f4a4:	0549      	lsls	r1, r1, #21
 800f4a6:	f7ff ffed 	bl	800f484 <xflowf>
 800f4aa:	bd10      	pop	{r4, pc}

0800f4ac <__math_oflowf>:
 800f4ac:	21e0      	movs	r1, #224	@ 0xe0
 800f4ae:	b510      	push	{r4, lr}
 800f4b0:	05c9      	lsls	r1, r1, #23
 800f4b2:	f7ff ffe7 	bl	800f484 <xflowf>
 800f4b6:	bd10      	pop	{r4, pc}

0800f4b8 <_init>:
 800f4b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4ba:	46c0      	nop			@ (mov r8, r8)
 800f4bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4be:	bc08      	pop	{r3}
 800f4c0:	469e      	mov	lr, r3
 800f4c2:	4770      	bx	lr

0800f4c4 <_fini>:
 800f4c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4c6:	46c0      	nop			@ (mov r8, r8)
 800f4c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f4ca:	bc08      	pop	{r3}
 800f4cc:	469e      	mov	lr, r3
 800f4ce:	4770      	bx	lr
